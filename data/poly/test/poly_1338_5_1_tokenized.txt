\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:L> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:5> ; <var:X> := <var:y1> <var:X> := <var:X> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume , for positive integers $ <var:K> $ , $ <var:L> = <var:K> $ before the execution of this set of commands , it holds that $ <var:X> = <nat:5> * <var:K> + <nat:2> $ after code has finished . \end{theorem} \begin{proof} Utilizing usual Hoare techniques yields : \begin{eqnarray} \{ <var:L> = <var:K> \} \\ <var:y1> := <var:L> ; \\ \{ <var:L> = <var:K> \land <var:y1> = <var:K> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:L> = <var:K> \land <var:y1> = <var:K> \land <var:y0> = <nat:2> \} \\ <var:y1> := <var:y1> * <nat:5> ; \\ \{ <var:L> = <var:K> \land <var:y1> = <nat:5> \times <var:K> \land <var:y0> = <nat:2> \} \\ <var:X> := <var:y1> \\ \{ <var:L> = <var:K> \land <var:y0> = <nat:2> \land <var:X> = <nat:5> \times <var:K> \} \end{eqnarray} Advancing executing our set of commands gives us : \begin{eqnarray} <var:X> := <var:X> + <var:y0> \\ \{ <var:L> = <var:K> \land <var:X> = <nat:5> \times <var:K> + <nat:2> \} \end{eqnarray} Given the preceding argument , the set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:L> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:5> ; <var:X> := <var:y1> <var:X> := <var:X> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:L> = <var:K> }} <def:poly> {{ <var:X> = <nat:5> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:y1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:y1> = <var:K> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:y1> = <nat:5> * <var:K> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:y0> = <nat:2> /\ <var:X> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:X> = <nat:5> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 