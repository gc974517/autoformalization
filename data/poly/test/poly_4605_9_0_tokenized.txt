\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:M> ; <var:d2> := <nat:2> ; <var:d2> := <var:d2> * <var:M> ; <var:d2> := <var:d2> * <var:M> ; <var:j> := <var:d2> ; <var:j> := <var:j> + <var:d1> ; <var:j> := <var:j> + <var:d0> \end{verbatim} Allow that we have $ <var:M> = <var:w> $ ahead of executing the series of instructions it follows that $ <var:j> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> $ after set of commands is done . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:M> = <var:w> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:M> = <var:w> \land <var:d0> = <nat:3> \} \\ <var:d1> := <nat:2> ; \\ \{ <var:M> = <var:w> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \} \\ <var:d1> := <var:d1> * <var:M> ; \\ \{ <var:M> = <var:w> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \times <var:w> \} \\ <var:d2> := <nat:2> ; \\ \{ <var:M> = <var:w> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \times <var:w> \land <var:d2> = <nat:2> \} \\ <var:d2> := <var:d2> * <var:M> ; \\ \{ <var:M> = <var:w> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \times <var:w> \land <var:d2> = <nat:2> \times <var:w> \} \\ <var:d2> := <var:d2> * <var:M> ; \\ \{ <var:M> = <var:w> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \times <var:w> \land <var:d2> = <nat:2> \times <var:w> ^ <nat:2> \} \\ <var:j> := <var:d2> ; \\ \{ <var:M> = <var:w> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \times <var:w> \land <var:j> = <nat:2> \times <var:w> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:d1> ; \\ \{ <var:M> = <var:w> \land <var:d0> = <nat:3> \land <var:j> = <nat:2> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> \} \\ <var:j> := <var:j> + <var:d0> \\ \{ <var:M> = <var:w> \land <var:j> = <nat:2> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:3> \} \end{eqnarray} Thus , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:M> = <var:w> }} <var:d0> := <nat:3> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:M> ; <var:d2> := <nat:2> ; <var:d2> := <var:d2> * <var:M> ; <var:d2> := <var:d2> * <var:M> ; <var:j> := <var:d2> ; <var:j> := <var:j> + <var:d1> ; <var:j> := <var:j> + <var:d0> {{ <var:j> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> * <var:w> /\ <var:d2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> * <var:w> /\ <var:d2> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> * <var:w> /\ <var:d2> = <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> * <var:w> /\ <var:j> = <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:d0> = <nat:3> /\ <var:j> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:w> /\ <var:j> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 