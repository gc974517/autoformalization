\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:4> ; <var:L> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Allowing that we have $ <var:R> = <var:U> $ ahead of running our list of instructions , it holds that we have $ <var:L> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this set of commands is evident through standard Hoare logic . Moving forward to the subsequent line of code found in our code , the assignment command \verb | <var:N0> := <nat:4> ; | . This line forwards the precondition $ \{ <var:R> = <var:U> \} $ as the condition $ \{ <var:R> = <var:U> \land <var:N0> = <nat:4> \} $ . Advancing to the subsequent step seen in the set of instructions , we have the assignment code assigning $ <var:N0$ to $ <var:L>$ . This statement takes the condition $ \{ <var:R> = <var:U> \land <var:N0> = <nat:4> \} $ as the condition $ \{ <var:R> = <var:U> \land <var:L> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:L> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:R> = <var:U> }} <def:poly> {{ <var:L> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:L> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 