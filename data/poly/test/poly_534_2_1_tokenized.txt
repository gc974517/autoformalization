\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:1> ; <var:c> := <var:W0> \end{verbatim} Assuming it to hold that $ <var:k> = <var:h> $ ahead of running the set of instructions , it holds that we see $ <var:c> = <nat:1> $ . \end{theorem} \begin{proof} Let the following decorated series of instructions . \begin{eqnarray} \{ <var:k> = <var:h> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:k> = <var:h> \land <var:W0> = <nat:1> \} \\ <var:c> := <var:W0> \\ \{ <var:k> = <var:h> \land <var:c> = <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:k> = <var:h> }} <var:W0> := <nat:1> ; <var:c> := <var:W0> {{ <var:c> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:h> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:h> /\ <var:c> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 