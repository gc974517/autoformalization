\begin{document} \begin{theorem} Define the following list of instructions : \begin{verbatim} <var:D1> := <var:W> ; <var:D2> := <var:D1> * <var:W> ; <var:D3> := <var:D2> * <var:W> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:9> ; <var:D2> := <var:D2> * <nat:8> ; <var:D3> := <var:D3> * <nat:7> ; <var:R> := <var:D3> <var:R> := <var:R> + <var:D2> <var:R> := <var:R> + <var:D1> <var:R> := <var:R> + <var:D0> \end{verbatim} Given for all $ <var:e> $ that we have $ <var:W> = <var:e> $ prior to evaluating the segment of code , it must be that $ <var:R> = <nat:7> \cdot <var:e> ^ <nat:3> + <nat:8> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> + <nat:1> $ when list of commands exits . \end{theorem} \begin{proof} The flow of logic for the list of commands is clear by typical Hoare reasoning . Focusing on the proceeding line contained in the series of instructions , we have the variable update command binding $ <var:W> $ into $ <var:D1>$ . This forwards the condition $ \{ <var:W> = <var:e> \} $ as $ \{ <var:W> = <var:e> \land <var:D1> = <var:e> \} $ . Further , we have the variable update statement assigning $ <var:D1> * <var:W> $ as $ <var:D2>$ . This line transfers $ \{ <var:W> = <var:e> \land <var:D1> = <var:e> \} $ into the condition $ \{ <var:W> = <var:e> \land <var:D1> = <var:e> \land <var:D2> = <var:e> ^ <nat:2> \} $ . This is deduced through the assignment scheme in usual Hoare logic . Moving on to the upcoming bit of code found in the set of instructions , we see the environment update code \verb | <var:D3> := <var:D2> * <var:W> ; | . This forwards the condition $ \{ <var:W> = <var:e> \land <var:D1> = <var:e> \land <var:D2> = <var:e> ^ <nat:2> \} $ to the condition $ \{ <var:W> = <var:e> \land <var:D1> = <var:e> \land <var:D2> = <var:e> ^ <nat:2> \land <var:D3> = <var:e> ^ <nat:3> \} $ . This is rigorously given with the assignment scheme defined by Hoare techniques . After , we have the binding line letting $ <nat:1> $ into $ <var:D0>$ . This command takes $ \{ <var:W> = <var:e> \land <var:D1> = <var:e> \land <var:D2> = <var:e> ^ <nat:2> \land <var:D3> = <var:e> ^ <nat:3> \} $ to the condition $ \{ <var:W> = <var:e> \land <var:D1> = <var:e> \land <var:D2> = <var:e> ^ <nat:2> \land <var:D3> = <var:e> ^ <nat:3> \land <var:D0> = <nat:1> \} $ . This is shown using the assignment inference rule found in standard Hoare logic . Further , the assignment command \verb | <var:D1> := <var:D1> * <nat:9> ; | . This line forwards the precondition $ \{ <var:W> = <var:e> \land <var:D1> = <var:e> \land <var:D2> = <var:e> ^ <nat:2> \land <var:D3> = <var:e> ^ <nat:3> \land <var:D0> = <nat:1> \} $ toward the condition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D2> = <var:e> ^ <nat:2> \land <var:D3> = <var:e> ^ <nat:3> \land <var:D0> = <nat:1> \} $ . Taking another step toward the next statement seen in our series of commands , the assignment code yielding $ <var:D2> * <nat:8> $ toward $ <var:D2>$ . This takes the condition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D2> = <var:e> ^ <nat:2> \land <var:D3> = <var:e> ^ <nat:3> \land <var:D0> = <nat:1> \} $ into the postcondition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D2> = <nat:8> * <var:e> ^ <nat:2> \land <var:D3> = <var:e> ^ <nat:3> \land <var:D0> = <nat:1> \} $ . This is shown to be logically sound through the assignment inference rule defined in usual Hoare techniques . Moving forward to the proceeding line seen in the code , we have the assignment command \verb | <var:D3> := <var:D3> * <nat:7> ; | . This redefines the condition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D2> = <nat:8> * <var:e> ^ <nat:2> \land <var:D3> = <var:e> ^ <nat:3> \land <var:D0> = <nat:1> \} $ into the condition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D2> = <nat:8> * <var:e> ^ <nat:2> \land <var:D3> = <nat:7> * <var:e> ^ <nat:3> \land <var:D0> = <nat:1> \} $ . Immediately after , the environment update line \verb | <var:R> := <var:D3> | . This statement redefines the condition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D2> = <nat:8> * <var:e> ^ <nat:2> \land <var:D3> = <nat:7> * <var:e> ^ <nat:3> \land <var:D0> = <nat:1> \} $ toward the postcondition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D2> = <nat:8> * <var:e> ^ <nat:2> \land <var:D0> = <nat:1> \land <var:R> = <nat:7> * <var:e> ^ <nat:3> \} $ . This is deduced by the assignment scheme obtained from usual Hoare reasoning . Jumping to the subsequent piece of code found in the set of commands , we see the binding command giving $ <var:R> + <var:D2$ toward $ <var:R>$ . This redefines the precondition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D2> = <nat:8> * <var:e> ^ <nat:2> \land <var:D0> = <nat:1> \land <var:R> = <nat:7> * <var:e> ^ <nat:3> \} $ toward the postcondition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D0> = <nat:1> \land <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> \} $ . This is sound using the assignment law defined by typical Hoare techniques . Moving on to the next step , we see the variable binding statement \verb | <var:R> := <var:R> + <var:D1> | . This redefines the condition $ \{ <var:W> = <var:e> \land <var:D1> = <nat:9> * <var:e> \land <var:D0> = <nat:1> \land <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> \} $ as $ \{ <var:W> = <var:e> \land <var:D0> = <nat:1> \land <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} $ . Advancing to the next step , we see the variable assignmet statement \verb | <var:R> := <var:R> + <var:D0> | . This statement takes $ \{ <var:W> = <var:e> \land <var:D0> = <nat:1> \land <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} $ toward the condition $ \{ <var:W> = <var:e> \land <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:1> \} $ . This is rigorously given through the assignment inference rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:W> = <var:e> }} <var:D1> := <var:W> ; <var:D2> := <var:D1> * <var:W> ; <var:D3> := <var:D2> * <var:W> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:9> ; <var:D2> := <var:D2> * <nat:8> ; <var:D3> := <var:D3> * <nat:7> ; <var:R> := <var:D3> <var:R> := <var:R> + <var:D2> <var:R> := <var:R> + <var:D1> <var:R> := <var:R> + <var:D0> {{ <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <var:e> /\ <var:D2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <var:e> /\ <var:D2> = <var:e> ^ <nat:2> /\ <var:D3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <var:e> /\ <var:D2> = <var:e> ^ <nat:2> /\ <var:D3> = <var:e> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <nat:9> * <var:e> /\ <var:D2> = <var:e> ^ <nat:2> /\ <var:D3> = <var:e> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <nat:9> * <var:e> /\ <var:D2> = <nat:8> * <var:e> ^ <nat:2> /\ <var:D3> = <var:e> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <nat:9> * <var:e> /\ <var:D2> = <nat:8> * <var:e> ^ <nat:2> /\ <var:D3> = <nat:7> * <var:e> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <nat:9> * <var:e> /\ <var:D2> = <nat:8> * <var:e> ^ <nat:2> /\ <var:D0> = <nat:1> /\ <var:R> = <nat:7> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D1> = <nat:9> * <var:e> /\ <var:D0> = <nat:1> /\ <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:D0> = <nat:1> /\ <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:R> = <nat:7> * <var:e> ^ <nat:3> + <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 