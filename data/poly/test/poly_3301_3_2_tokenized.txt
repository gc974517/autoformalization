\begin{document} \begin{theorem} Define the following list of instructions as follows \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:4> + <var:y> * <var:a> ; <var:y> := <nat:4> + <var:y> * <var:a> \end{verbatim} Allow it to be that $ <var:a> = <var:S> $ prior to evaluating the list of commands then $ <var:y> = <nat:4> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:4> $ after list of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:S> \} \\ <var:y> := <nat:4> ; \\ \{ <var:a> = <var:S> \land <var:y> = <nat:4> \} \\ <var:y> := <nat:4> + <var:y> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:y> = <nat:4> \times <var:S> + <nat:4> \} \\ <var:y> := <nat:4> + <var:y> * <var:a> \\ \{ <var:a> = <var:S> \land <var:y> = <nat:4> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:4> \} \end{eqnarray} Using standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:a> = <var:S> }} <var:y> := <nat:4> ; <var:y> := <nat:4> + <var:y> * <var:a> ; <var:y> := <nat:4> + <var:y> * <var:a> {{ <var:y> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y> = <nat:4> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 