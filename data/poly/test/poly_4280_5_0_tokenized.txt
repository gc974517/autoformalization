\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:9> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:y> ; <var:i> := <var:n1> ; <var:i> := <var:i> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assume $ <var:y> = <var:C> $ before interpreting this set of commands , it follows that we see $ <var:i> = <nat:5> \cdot <var:C> + <nat:9> $ after series of instructions finishes . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:y> = <var:C> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:y> = <var:C> \land <var:n0> = <nat:9> \} \\ <var:n1> := <nat:5> ; \\ \{ <var:y> = <var:C> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> \} \\ <var:n1> := <var:n1> * <var:y> ; \\ \{ <var:y> = <var:C> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> \cdot <var:C> \} \\ <var:i> := <var:n1> ; \\ \{ <var:y> = <var:C> \land <var:n0> = <nat:9> \land <var:i> = <nat:5> \cdot <var:C> \} \\ <var:i> := <var:i> + <var:n0> \\ \{ <var:y> = <var:C> \land <var:i> = <nat:5> \cdot <var:C> + <nat:9> \} \end{eqnarray} Given the above , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n0> := <nat:9> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:y> ; <var:i> := <var:n1> ; <var:i> := <var:i> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:y> = <var:C> }} <def:poly> {{ <var:i> = <nat:5> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:n0> = <nat:9> /\ <var:i> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:i> = <nat:5> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 