\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:3> ; <var:F2> := <nat:2> ; <var:F2> := <var:F2> * <var:R> ; <var:F2> := <var:F2> * <var:R> ; <var:b> := <var:F2> ; <var:b> := <var:b> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:R> = <var:M> $ before executing the code segment , then $ <var:b> = <nat:2> \cdot <var:M> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:M> \} \\ <var:F0> := <nat:3> ; \\ \{ <var:R> = <var:M> \land <var:F0> = <nat:3> \} \\ <var:F2> := <nat:2> ; \\ \{ <var:R> = <var:M> \land <var:F0> = <nat:3> \land <var:F2> = <nat:2> \} \\ <var:F2> := <var:F2> * <var:R> ; \\ \{ <var:R> = <var:M> \land <var:F0> = <nat:3> \land <var:F2> = <nat:2> \times <var:M> \} \\ <var:F2> := <var:F2> * <var:R> ; \\ \{ <var:R> = <var:M> \land <var:F0> = <nat:3> \land <var:F2> = <nat:2> \times <var:M> ^ <nat:2> \} \\ <var:b> := <var:F2> ; \\ \{ <var:R> = <var:M> \land <var:F0> = <nat:3> \land <var:b> = <nat:2> \times <var:M> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:F0> \\ \{ <var:R> = <var:M> \land <var:b> = <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \} \end{eqnarray} Applying typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:F2> := <nat:2> ; <var:F2> := <var:F2> * <var:R> ; <var:F2> := <var:F2> * <var:R> ; <var:b> := <var:F2> ; <var:b> := <var:b> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:R> = <var:M> }} <def:poly> {{ <var:b> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:F0> = <nat:3> /\ <var:F2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:F0> = <nat:3> /\ <var:F2> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:F0> = <nat:3> /\ <var:F2> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:F0> = <nat:3> /\ <var:b> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:b> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 