\begin{document} \begin{theorem} Take a segment of code such that \begin{verbatim} <var:F1> := <var:S> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:2> ; <var:Z> := <var:F1> <var:Z> := <var:Z> + <var:F0> \end{verbatim} Allowing that $ <var:S> = <var:R> $ ahead of running this list of instructions it follows that we have $ <var:Z> = <nat:2> * <var:R> + <nat:2> $ when list of instructions has terminated . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is clear through Hoare logic . After , the assignment command yielding $ <var:S> $ into $ <var:F1>$ . This command takes $ \{ <var:S> = <var:R> \} $ toward $ \{ <var:S> = <var:R> \land <var:F1> = <var:R> \} $ . This is sound by the assignment rule obtained from standard Hoare logic . Keeping momentum , the variable binding command assigning $ <nat:2> $ toward $ <var:F0>$ . This forwards $ \{ <var:S> = <var:R> \land <var:F1> = <var:R> \} $ to the postcondition $ \{ <var:S> = <var:R> \land <var:F1> = <var:R> \land <var:F0> = <nat:2> \} $ . This is shown with the assignment inference rule found in standard Hoare techniques . Advancing to the upcoming step in the set of instructions , we have the assignment statement \verb | <var:F1> := <var:F1> * <nat:2> ; | . This command redefines $ \{ <var:S> = <var:R> \land <var:F1> = <var:R> \land <var:F0> = <nat:2> \} $ as the postcondition $ \{ <var:S> = <var:R> \land <var:F1> = <nat:2> \cdot <var:R> \land <var:F0> = <nat:2> \} $ . This is shown through the assignment inference rule defined in typical Hoare techniques . Moving on to the next step , we see the variable update code giving $ <var:F1$ into $ <var:Z>$ . This takes $ \{ <var:S> = <var:R> \land <var:F1> = <nat:2> \cdot <var:R> \land <var:F0> = <nat:2> \} $ as the condition $ \{ <var:S> = <var:R> \land <var:F0> = <nat:2> \land <var:Z> = <nat:2> \cdot <var:R> \} $ . Advancing to the next step , we see the variable binding statement \verb | <var:Z> := <var:Z> + <var:F0> | . This statement takes $ \{ <var:S> = <var:R> \land <var:F0> = <nat:2> \land <var:Z> = <nat:2> \cdot <var:R> \} $ toward the postcondition $ \{ <var:S> = <var:R> \land <var:Z> = <nat:2> \cdot <var:R> + <nat:2> \} $ . This is deduced by the assignment inference rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:S> = <var:R> }} <var:F1> := <var:S> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:2> ; <var:Z> := <var:F1> <var:Z> := <var:Z> + <var:F0> {{ <var:Z> = <nat:2> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:F1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:F1> = <var:R> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:F1> = <nat:2> * <var:R> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:F0> = <nat:2> /\ <var:Z> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:Z> = <nat:2> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 