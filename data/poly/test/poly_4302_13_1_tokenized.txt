\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:K> ; <var:z2> := <var:z1> * <var:K> ; <var:z3> := <var:z2> * <var:K> ; <var:z4> := <var:z3> * <var:K> ; <var:z5> := <var:z4> * <var:K> ; <var:z0> := <nat:6> ; <var:z3> := <var:z3> * <nat:9> ; <var:z4> := <var:z4> * <nat:9> ; <var:z5> := <var:z5> * <nat:5> ; <var:v> := <var:z5> <var:v> := <var:v> + <var:z4> <var:v> := <var:v> + <var:z3> <var:v> := <var:v> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:K> = <var:S> $ ahead of interpreting our segment of code it follows that we see $ <var:v> = <nat:5> \cdot <var:S> ^ <nat:5> + <nat:9> \cdot <var:S> ^ <nat:4> + <nat:9> \cdot <var:S> ^ <nat:3> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:S> \} \\ <var:z1> := <var:K> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \} \\ <var:z2> := <var:z1> * <var:K> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:K> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <var:S> ^ <nat:3> \} \\ <var:z4> := <var:z3> * <var:K> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <var:S> ^ <nat:3> \land <var:z4> = <var:S> ^ <nat:4> \} \end{eqnarray} Furthering interpreting this set of instructions produces : \begin{eqnarray} <var:z5> := <var:z4> * <var:K> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <var:S> ^ <nat:3> \land <var:z4> = <var:S> ^ <nat:4> \land <var:z5> = <var:S> ^ <nat:5> \} \\ <var:z0> := <nat:6> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <var:S> ^ <nat:3> \land <var:z4> = <var:S> ^ <nat:4> \land <var:z5> = <var:S> ^ <nat:5> \land <var:z0> = <nat:6> \} \\ <var:z3> := <var:z3> * <nat:9> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <nat:9> \times <var:S> ^ <nat:3> \land <var:z4> = <var:S> ^ <nat:4> \land <var:z5> = <var:S> ^ <nat:5> \land <var:z0> = <nat:6> \} \\ <var:z4> := <var:z4> * <nat:9> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <nat:9> \times <var:S> ^ <nat:3> \land <var:z4> = <nat:9> \times <var:S> ^ <nat:4> \land <var:z5> = <var:S> ^ <nat:5> \land <var:z0> = <nat:6> \} \\ <var:z5> := <var:z5> * <nat:5> ; \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <nat:9> \times <var:S> ^ <nat:3> \land <var:z4> = <nat:9> \times <var:S> ^ <nat:4> \land <var:z5> = <nat:5> \times <var:S> ^ <nat:5> \land <var:z0> = <nat:6> \} \\ <var:v> := <var:z5> \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <nat:9> \times <var:S> ^ <nat:3> \land <var:z4> = <nat:9> \times <var:S> ^ <nat:4> \land <var:z0> = <nat:6> \land <var:v> = <nat:5> \times <var:S> ^ <nat:5> \} \\ <var:v> := <var:v> + <var:z4> \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z3> = <nat:9> \times <var:S> ^ <nat:3> \land <var:z0> = <nat:6> \land <var:v> = <nat:5> \times <var:S> ^ <nat:5> + <nat:9> \times <var:S> ^ <nat:4> \} \\ <var:v> := <var:v> + <var:z3> \\ \{ <var:K> = <var:S> \land <var:z1> = <var:S> \land <var:z2> = <var:S> ^ <nat:2> \land <var:z0> = <nat:6> \land <var:v> = <nat:5> \times <var:S> ^ <nat:5> + <nat:9> \times <var:S> ^ <nat:4> + <nat:9> \times <var:S> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:z0> \\ \{ <var:K> = <var:S> \land <var:v> = <nat:5> \times <var:S> ^ <nat:5> + <nat:9> \times <var:S> ^ <nat:4> + <nat:9> \times <var:S> ^ <nat:3> + <nat:6> \} \end{eqnarray} Utilizing Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <var:z4> : string := " <var:z4> " . Definition <var:z5> : string := " <var:z5> " . Definition <def:poly> := <var:z1> := <var:K> ; <var:z2> := <var:z1> * <var:K> ; <var:z3> := <var:z2> * <var:K> ; <var:z4> := <var:z3> * <var:K> ; <var:z5> := <var:z4> * <var:K> ; <var:z0> := <nat:6> ; <var:z3> := <var:z3> * <nat:9> ; <var:z4> := <var:z4> * <nat:9> ; <var:z5> := <var:z5> * <nat:5> ; <var:v> := <var:z5> <var:v> := <var:v> + <var:z4> <var:v> := <var:v> + <var:z3> <var:v> := <var:v> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:K> = <var:S> }} <def:poly> {{ <var:v> = <nat:5> * <var:S> ^ <nat:5> + <nat:9> * <var:S> ^ <nat:4> + <nat:9> * <var:S> ^ <nat:3> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <var:S> ^ <nat:3> /\ <var:z4> = <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <var:S> ^ <nat:3> /\ <var:z4> = <var:S> ^ <nat:4> /\ <var:z5> = <var:S> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <var:S> ^ <nat:3> /\ <var:z4> = <var:S> ^ <nat:4> /\ <var:z5> = <var:S> ^ <nat:5> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <nat:9> * <var:S> ^ <nat:3> /\ <var:z4> = <var:S> ^ <nat:4> /\ <var:z5> = <var:S> ^ <nat:5> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <nat:9> * <var:S> ^ <nat:3> /\ <var:z4> = <nat:9> * <var:S> ^ <nat:4> /\ <var:z5> = <var:S> ^ <nat:5> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <nat:9> * <var:S> ^ <nat:3> /\ <var:z4> = <nat:9> * <var:S> ^ <nat:4> /\ <var:z5> = <nat:5> * <var:S> ^ <nat:5> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <nat:9> * <var:S> ^ <nat:3> /\ <var:z4> = <nat:9> * <var:S> ^ <nat:4> /\ <var:z0> = <nat:6> /\ <var:v> = <nat:5> * <var:S> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z3> = <nat:9> * <var:S> ^ <nat:3> /\ <var:z0> = <nat:6> /\ <var:v> = <nat:5> * <var:S> ^ <nat:5> + <nat:9> * <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:z1> = <var:S> /\ <var:z2> = <var:S> ^ <nat:2> /\ <var:z0> = <nat:6> /\ <var:v> = <nat:5> * <var:S> ^ <nat:5> + <nat:9> * <var:S> ^ <nat:4> + <nat:9> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:S> /\ <var:v> = <nat:5> * <var:S> ^ <nat:5> + <nat:9> * <var:S> ^ <nat:4> + <nat:9> * <var:S> ^ <nat:3> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 