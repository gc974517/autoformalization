\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} such that \begin{verbatim} <var:f> := <nat:4> ; <var:f> := <nat:4> + <var:f> * <var:M> ; <var:f> := <nat:2> + <var:f> * <var:M> ; <var:f> := <nat:2> + <var:f> * <var:M> \end{verbatim} Given it to be that $ <var:M> = <var:Y> $ prior to evaluating our series of commands , it must be that we have $ <var:f> = <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} See that this decorated set of instructions . \begin{eqnarray} \{ <var:M> = <var:Y> \} \\ <var:f> := <nat:4> ; \\ \{ <var:M> = <var:Y> \land <var:f> = <nat:4> \} \\ <var:f> := <nat:4> + <var:f> * <var:M> ; \\ \{ <var:M> = <var:Y> \land <var:f> = <nat:4> \cdot <var:Y> + <nat:4> \} \\ <var:f> := <nat:2> + <var:f> * <var:M> ; \\ \{ <var:M> = <var:Y> \land <var:f> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:2> \} \\ <var:f> := <nat:2> + <var:f> * <var:M> \\ \{ <var:M> = <var:Y> \land <var:f> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:2> \} \end{eqnarray} Applying standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:M> = <var:Y> }} <var:f> := <nat:4> ; <var:f> := <nat:4> + <var:f> * <var:M> ; <var:f> := <nat:2> + <var:f> * <var:M> ; <var:f> := <nat:2> + <var:f> * <var:M> {{ <var:f> = <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:f> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:f> = <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:f> = <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:f> = <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 