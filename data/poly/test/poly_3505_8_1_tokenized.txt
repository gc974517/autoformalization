\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:g> ; <var:O2> := <var:O1> * <var:g> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:6> ; <var:O2> := <var:O2> * <nat:8> ; <var:A> := <var:O2> <var:A> := <var:A> + <var:O1> <var:A> := <var:A> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:g> = <var:w> $ , given all integers $ <var:w> $ , ahead of evaluating the list of instructions it must be that we see $ <var:A> = <nat:8> \times <var:w> ^ <nat:2> + <nat:6> \times <var:w> + <nat:1> $ once series of commands has finished . \end{theorem} \begin{proof} See that the below decorated code . \begin{eqnarray} \{ <var:g> = <var:w> \} \\ <var:O1> := <var:g> ; \\ \{ <var:g> = <var:w> \land <var:O1> = <var:w> \} \\ <var:O2> := <var:O1> * <var:g> ; \\ \{ <var:g> = <var:w> \land <var:O1> = <var:w> \land <var:O2> = <var:w> ^ <nat:2> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:g> = <var:w> \land <var:O1> = <var:w> \land <var:O2> = <var:w> ^ <nat:2> \land <var:O0> = <nat:1> \} \\ <var:O1> := <var:O1> * <nat:6> ; \\ \{ <var:g> = <var:w> \land <var:O1> = <nat:6> * <var:w> \land <var:O2> = <var:w> ^ <nat:2> \land <var:O0> = <nat:1> \} \\ <var:O2> := <var:O2> * <nat:8> ; \\ \{ <var:g> = <var:w> \land <var:O1> = <nat:6> * <var:w> \land <var:O2> = <nat:8> * <var:w> ^ <nat:2> \land <var:O0> = <nat:1> \} \\ <var:A> := <var:O2> \\ \{ <var:g> = <var:w> \land <var:O1> = <nat:6> * <var:w> \land <var:O0> = <nat:1> \land <var:A> = <nat:8> * <var:w> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:O1> \\ \{ <var:g> = <var:w> \land <var:O0> = <nat:1> \land <var:A> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> \} \\ <var:A> := <var:A> + <var:O0> \\ \{ <var:g> = <var:w> \land <var:A> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O1> := <var:g> ; <var:O2> := <var:O1> * <var:g> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:6> ; <var:O2> := <var:O2> * <nat:8> ; <var:A> := <var:O2> <var:A> := <var:A> + <var:O1> <var:A> := <var:A> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:g> = <var:w> }} <def:poly> {{ <var:A> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:O1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:O1> = <var:w> /\ <var:O2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:O1> = <var:w> /\ <var:O2> = <var:w> ^ <nat:2> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:O1> = <nat:6> * <var:w> /\ <var:O2> = <var:w> ^ <nat:2> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:O1> = <nat:6> * <var:w> /\ <var:O2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:O1> = <nat:6> * <var:w> /\ <var:O0> = <nat:1> /\ <var:A> = <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:O0> = <nat:1> /\ <var:A> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:A> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 