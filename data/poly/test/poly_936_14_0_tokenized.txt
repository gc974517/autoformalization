\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:7> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:f> ; <var:Q2> := <nat:5> ; <var:Q2> := <var:Q2> * <var:f> ; <var:Q2> := <var:Q2> * <var:f> ; <var:Q3> := <nat:9> ; <var:Q3> := <var:Q3> * <var:f> ; <var:Q3> := <var:Q3> * <var:f> ; <var:Q3> := <var:Q3> * <var:f> ; <var:B> := <var:Q3> ; <var:B> := <var:B> + <var:Q2> ; <var:B> := <var:B> + <var:Q1> ; <var:B> := <var:B> + <var:Q0> \end{verbatim} Given --- given every positive integers $ <var:K> $ --- it to be that $ <var:f> = <var:K> $ before the evaluation of our set of commands it must be that we have $ <var:B> = <nat:9> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:K> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \} \\ <var:Q1> := <nat:8> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> \} \\ <var:Q1> := <var:Q1> * <var:f> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \} \\ <var:Q2> := <nat:5> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:Q2> = <nat:5> \} \\ <var:Q2> := <var:Q2> * <var:f> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:Q2> = <nat:5> * <var:K> \} \\ <var:Q2> := <var:Q2> * <var:f> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:Q2> = <nat:5> * <var:K> ^ <nat:2> \} \\ <var:Q3> := <nat:9> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:Q2> = <nat:5> * <var:K> ^ <nat:2> \land <var:Q3> = <nat:9> \} \\ <var:Q3> := <var:Q3> * <var:f> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:Q2> = <nat:5> * <var:K> ^ <nat:2> \land <var:Q3> = <nat:9> * <var:K> \} \\ <var:Q3> := <var:Q3> * <var:f> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:Q2> = <nat:5> * <var:K> ^ <nat:2> \land <var:Q3> = <nat:9> * <var:K> ^ <nat:2> \} \\ <var:Q3> := <var:Q3> * <var:f> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:Q2> = <nat:5> * <var:K> ^ <nat:2> \land <var:Q3> = <nat:9> * <var:K> ^ <nat:3> \} \\ <var:B> := <var:Q3> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:Q2> = <nat:5> * <var:K> ^ <nat:2> \land <var:B> = <nat:9> * <var:K> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:Q2> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:8> * <var:K> \land <var:B> = <nat:9> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:Q1> ; \\ \{ <var:f> = <var:K> \land <var:Q0> = <nat:7> \land <var:B> = <nat:9> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:8> * <var:K> \} \end{eqnarray} Furthering interpreting our program results in : \begin{eqnarray} <var:B> := <var:B> + <var:Q0> \\ \{ <var:f> = <var:K> \land <var:B> = <nat:9> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:f> = <var:K> }} <var:Q0> := <nat:7> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:f> ; <var:Q2> := <nat:5> ; <var:Q2> := <var:Q2> * <var:f> ; <var:Q2> := <var:Q2> * <var:f> ; <var:Q3> := <nat:9> ; <var:Q3> := <var:Q3> * <var:f> ; <var:Q3> := <var:Q3> * <var:f> ; <var:Q3> := <var:Q3> * <var:f> ; <var:B> := <var:Q3> ; <var:B> := <var:B> + <var:Q2> ; <var:B> := <var:B> + <var:Q1> ; <var:B> := <var:B> + <var:Q0> {{ <var:B> = <nat:9> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:Q2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:Q2> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:Q2> = <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:Q2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:Q3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:Q2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:Q2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:Q2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:Q2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:B> = <nat:9> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:8> * <var:K> /\ <var:B> = <nat:9> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:Q0> = <nat:7> /\ <var:B> = <nat:9> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:B> = <nat:9> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 