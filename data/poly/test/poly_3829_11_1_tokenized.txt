\begin{document} \begin{theorem} We define the following list of commands as \begin{verbatim} <var:C1> := <var:V> ; <var:C2> := <var:C1> * <var:V> ; <var:C3> := <var:C2> * <var:V> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:4> ; <var:C3> := <var:C3> * <nat:1> ; <var:L> := <var:C3> <var:L> := <var:L> + <var:C2> <var:L> := <var:L> + <var:C1> <var:L> := <var:L> + <var:C0> \end{verbatim} Assuming --- with some $ <var:U> \in \mathbb{N} $ --- it to hold that $ <var:V> = <var:U> $ before the execution of this set of instructions , then we have $ <var:L> = <nat:1> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:3> $ after series of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be given with usual Hoare techniques . Jumping to the upcoming commands contained in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:U> \} & <var:C1> := <var:V> & \{ <var:V> = <var:U> \land <var:C1> = <var:U> \} \\ \{ <var:V> = <var:U> \land <var:C1> = <var:U> \} & <var:C2> := <var:C1> * <var:V> & \{ <var:V> = <var:U> \land <var:C1> = <var:U> \land <var:C2> = <var:U> ^ <nat:2> \} \end{tabular} Going forward , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:U> \} & <var:C1> := <var:V> & \{ <var:V> = <var:U> \land <var:C1> = <var:U> \} \\ \{ <var:V> = <var:U> \land <var:C1> = <var:U> \} & <var:C2> := <var:C1> * <var:V> & \{ <var:V> = <var:U> \land <var:C1> = <var:U> \land <var:C2> = <var:U> ^ <nat:2> \} \\ \{ <var:V> = <var:U> \land <var:C1> = <var:U> \land <var:C2> = <var:U> ^ <nat:2> \} & <var:C3> := <var:C2> * <var:V> & \{ <var:V> = <var:U> \land <var:C1> = <var:U> \land <var:C2> = <var:U> ^ <nat:2> \land <var:C3> = <var:U> ^ <nat:3> \} \\ \{ <var:V> = <var:U> \land <var:C1> = <var:U> \land <var:C2> = <var:U> ^ <nat:2> \land <var:C3> = <var:U> ^ <nat:3> \} & <var:C0> := <nat:3> & \{ <var:V> = <var:U> \land <var:C1> = <var:U> \land <var:C2> = <var:U> ^ <nat:2> \land <var:C3> = <var:U> ^ <nat:3> \land <var:C0> = <nat:3> \} \\ \{ <var:V> = <var:U> \land <var:C1> = <var:U> \land <var:C2> = <var:U> ^ <nat:2> \land <var:C3> = <var:U> ^ <nat:3> \land <var:C0> = <nat:3> \} & <var:C1> := <var:C1> * <nat:2> & \{ <var:V> = <var:U> \land <var:C1> = <nat:2> * <var:U> \land <var:C2> = <var:U> ^ <nat:2> \land <var:C3> = <var:U> ^ <nat:3> \land <var:C0> = <nat:3> \} \\ \{ <var:V> = <var:U> \land <var:C1> = <nat:2> * <var:U> \land <var:C2> = <var:U> ^ <nat:2> \land <var:C3> = <var:U> ^ <nat:3> \land <var:C0> = <nat:3> \} & <var:C2> := <var:C2> * <nat:4> & \{ <var:V> = <var:U> \land <var:C1> = <nat:2> * <var:U> \land <var:C2> = <nat:4> * <var:U> ^ <nat:2> \land <var:C3> = <var:U> ^ <nat:3> \land <var:C0> = <nat:3> \} \\ \{ <var:V> = <var:U> \land <var:C1> = <nat:2> * <var:U> \land <var:C2> = <nat:4> * <var:U> ^ <nat:2> \land <var:C3> = <var:U> ^ <nat:3> \land <var:C0> = <nat:3> \} & <var:C3> := <var:C3> * <nat:1> & \{ <var:V> = <var:U> \land <var:C1> = <nat:2> * <var:U> \land <var:C2> = <nat:4> * <var:U> ^ <nat:2> \land <var:C3> = <nat:1> * <var:U> ^ <nat:3> \land <var:C0> = <nat:3> \} \end{tabular} Taking a look at the subsequent steps seen in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:V> = <var:U> \} & <var:C1> := <var:V> & \{ <var:V> = <var:U> \land <var:C1> = <var:U> \} \\ \{ <var:V> = <var:U> \land <var:C1> = <var:U> \} & <var:C2> := <var:C1> * <var:V> & \{ <var:V> = <var:U> \land <var:C1> = <var:U> \land <var:C2> = <var:U> ^ <nat:2> \} \end{tabular} This is sound using the variable binding rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:V> = <var:U> }} <var:C1> := <var:V> ; <var:C2> := <var:C1> * <var:V> ; <var:C3> := <var:C2> * <var:V> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:4> ; <var:C3> := <var:C3> * <nat:1> ; <var:L> := <var:C3> <var:L> := <var:L> + <var:C2> <var:L> := <var:L> + <var:C1> <var:L> := <var:L> + <var:C0> {{ <var:L> = <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <var:U> /\ <var:C2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <var:U> /\ <var:C2> = <var:U> ^ <nat:2> /\ <var:C3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <var:U> /\ <var:C2> = <var:U> ^ <nat:2> /\ <var:C3> = <var:U> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <nat:2> * <var:U> /\ <var:C2> = <var:U> ^ <nat:2> /\ <var:C3> = <var:U> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <nat:2> * <var:U> /\ <var:C2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:C3> = <var:U> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <nat:2> * <var:U> /\ <var:C2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:U> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <nat:2> * <var:U> /\ <var:C2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:C0> = <nat:3> /\ <var:L> = <nat:1> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C1> = <nat:2> * <var:U> /\ <var:C0> = <nat:3> /\ <var:L> = <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:C0> = <nat:3> /\ <var:L> = <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:L> = <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 