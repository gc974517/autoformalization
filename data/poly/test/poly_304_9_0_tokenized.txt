\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:J> ; <var:w2> := <nat:1> ; <var:w2> := <var:w2> * <var:J> ; <var:w2> := <var:w2> * <var:J> ; <var:g> := <var:w2> ; <var:g> := <var:g> + <var:w1> ; <var:g> := <var:g> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Allowing ( for every integers $ <var:W> $ ) it to be that $ <var:J> = <var:W> $ prior to the evaluation of the list of commands , then we see $ <var:g> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our code can be done by standard Hoare logic . Paying attention to the proceeding bit of code contained in the series of instructions , we have the assignment code assigning $ <nat:1> $ into $ <var:w0>$ . This code transfers the condition $ \{ <var:J> = <var:W> \} $ to $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \} $ . This is ensured through the assignment law given in usual Hoare techniques . Immediately following , we see the variable update command \verb | <var:w1> := <nat:1> ; | . This advances the condition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \} $ to the postcondition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> \} $ . Moving forward , the binding code \verb | <var:w1> := <var:w1> * <var:J> ; | . This code redefines the condition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> \} $ toward $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \} $ . Advancing , we have the assignment code \verb | <var:w2> := <nat:1> ; | . This command transfers the condition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \} $ to the postcondition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \land <var:w2> = <nat:1> \} $ . Going forward , we have the variable binding code \verb | <var:w2> := <var:w2> * <var:J> ; | . This forwards $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \land <var:w2> = <nat:1> \} $ toward the condition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \land <var:w2> = <nat:1> * <var:W> \} $ . This is sound with the assignment scheme given by Hoare logic . Stepping through , the binding command \verb | <var:w2> := <var:w2> * <var:J> ; | . This takes $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \land <var:w2> = <nat:1> * <var:W> \} $ toward the condition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \land <var:w2> = <nat:1> * <var:W> ^ <nat:2> \} $ . This is guaranteed by the assignment law of typical Hoare reasoning . Looking at the upcoming bit of code seen in our series of instructions , we see the binding code \verb | <var:g> := <var:w2> ; | . This code takes the condition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \land <var:w2> = <nat:1> * <var:W> ^ <nat:2> \} $ to the condition $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \land <var:g> = <nat:1> * <var:W> ^ <nat:2> \} $ . Stepping forward , we see the command \verb | <var:g> := <var:g> + <var:w1> ; | . This statement forwards $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> * <var:W> \land <var:g> = <nat:1> * <var:W> ^ <nat:2> \} $ to $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:g> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> \} $ . Jumping to the next piece of code found in our code , we see the binding statement assigning $ <var:g> + <var:w0$ into $ <var:g>$ . This moves $ \{ <var:J> = <var:W> \land <var:w0> = <nat:1> \land <var:g> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> \} $ to $ \{ <var:J> = <var:W> \land <var:g> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> \} $ . This is sound through the assignment scheme defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:J> ; <var:w2> := <nat:1> ; <var:w2> := <var:w2> * <var:J> ; <var:w2> := <var:w2> * <var:J> ; <var:g> := <var:w2> ; <var:g> := <var:g> + <var:w1> ; <var:g> := <var:g> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:J> = <var:W> }} <def:poly> {{ <var:g> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:1> * <var:W> /\ <var:w2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:1> * <var:W> /\ <var:w2> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:1> * <var:W> /\ <var:w2> = <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:1> * <var:W> /\ <var:g> = <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:w0> = <nat:1> /\ <var:g> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:g> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 