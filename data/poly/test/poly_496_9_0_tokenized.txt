\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:3> ; <var:j1> := <nat:7> ; <var:j1> := <var:j1> * <var:a> ; <var:j2> := <nat:7> ; <var:j2> := <var:j2> * <var:a> ; <var:j2> := <var:j2> * <var:a> ; <var:P> := <var:j2> ; <var:P> := <var:P> + <var:j1> ; <var:P> := <var:P> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Allow --- given every natural coefficients $ <var:C> $ --- $ <var:a> = <var:C> $ prior to the evaluation of our program then we have $ <var:P> = <nat:7> \times <var:C> ^ <nat:2> + <nat:7> \times <var:C> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions can be demonstrated using Hoare reasoning . Shifting focus toward the following line of code seen in our set of commands , we have the variable assignmet command \verb | <var:j0> := <nat:3> ; | . This forwards the precondition $ \{ <var:a> = <var:C> \} $ to the condition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \} $ . Immediately after , we have the assignment code binding $ <nat:7> $ to $ <var:j1>$ . This moves the condition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \} $ toward $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \} $ . Moving onward , we have the code \verb | <var:j1> := <var:j1> * <var:a> ; | . This takes the condition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \} $ into the condition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \} $ . This is ensured using the assignment scheme defined in standard Hoare reasoning . Moving forward to the next step , the binding line letting $ <nat:7> $ to $ <var:j2>$ . This advances the condition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \} $ as the postcondition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \land <var:j2> = <nat:7> \} $ . After , the variable assignmet statement yielding $ <var:j2> * <var:a> $ toward $ <var:j2>$ . This code advances $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \land <var:j2> = <nat:7> \} $ as $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \land <var:j2> = <nat:7> \times <var:C> \} $ . Advancing to the next step , we have the assignment code giving $ <var:j2> * <var:a> $ as $ <var:j2>$ . This moves the precondition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \land <var:j2> = <nat:7> \times <var:C> \} $ as the postcondition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \land <var:j2> = <nat:7> \times <var:C> ^ <nat:2> \} $ . Focusing on the upcoming command in our set of commands , we have the line letting $ <var:j2> $ as $ <var:P>$ . This line takes the precondition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \land <var:j2> = <nat:7> \times <var:C> ^ <nat:2> \} $ as $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \land <var:P> = <nat:7> \times <var:C> ^ <nat:2> \} $ . Jumping to the next command found in our segment of code , we have the binding statement \verb | <var:P> := <var:P> + <var:j1> ; | . This command takes $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:j1> = <nat:7> \times <var:C> \land <var:P> = <nat:7> \times <var:C> ^ <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:P> = <nat:7> \times <var:C> ^ <nat:2> + <nat:7> \times <var:C> \} $ . Paying attention to the upcoming piece of code contained in our series of commands , we see the assignment code assigning $ <var:P> + <var:j0$ to $ <var:P>$ . This advances the condition $ \{ <var:a> = <var:C> \land <var:j0> = <nat:3> \land <var:P> = <nat:7> \times <var:C> ^ <nat:2> + <nat:7> \times <var:C> \} $ into the postcondition $ \{ <var:a> = <var:C> \land <var:P> = <nat:7> \times <var:C> ^ <nat:2> + <nat:7> \times <var:C> + <nat:3> \} $ . This is sound with the assignment inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j0> := <nat:3> ; <var:j1> := <nat:7> ; <var:j1> := <var:j1> * <var:a> ; <var:j2> := <nat:7> ; <var:j2> := <var:j2> * <var:a> ; <var:j2> := <var:j2> * <var:a> ; <var:P> := <var:j2> ; <var:P> := <var:P> + <var:j1> ; <var:P> := <var:P> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:a> = <var:C> }} <def:poly> {{ <var:P> = <nat:7> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:7> * <var:C> /\ <var:j2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:7> * <var:C> /\ <var:j2> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:7> * <var:C> /\ <var:j2> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:7> * <var:C> /\ <var:P> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:j0> = <nat:3> /\ <var:P> = <nat:7> * <var:C> ^ <nat:2> + <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:P> = <nat:7> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 