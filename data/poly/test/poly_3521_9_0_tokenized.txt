\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:8> ; <var:q1> := <var:q1> * <var:F> ; <var:q2> := <nat:1> ; <var:q2> := <var:q2> * <var:F> ; <var:q2> := <var:q2> * <var:F> ; <var:M> := <var:q2> ; <var:M> := <var:M> + <var:q1> ; <var:M> := <var:M> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allow ( letting whole numbers $ <var:b> $ ) it to be that $ <var:F> = <var:b> $ before the evaluation of our program , then $ <var:M> = <nat:1> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:3> $ once program has executed . \end{theorem} \begin{proof} The application of Hoare reasoning gives us : \begin{eqnarray} \{ <var:F> = <var:b> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:F> = <var:b> \land <var:q0> = <nat:3> \} \end{eqnarray} Advancing the execution of the list of commands produces : \begin{eqnarray} <var:q1> := <nat:8> ; \\ \{ <var:F> = <var:b> \land <var:q0> = <nat:3> \land <var:q1> = <nat:8> \} \end{eqnarray} Allowing interpreting our list of instructions gives us : \begin{eqnarray} <var:q1> := <var:q1> * <var:F> ; \\ \{ <var:F> = <var:b> \land <var:q0> = <nat:3> \land <var:q1> = <nat:8> \times <var:b> \} \\ <var:q2> := <nat:1> ; \\ \{ <var:F> = <var:b> \land <var:q0> = <nat:3> \land <var:q1> = <nat:8> \times <var:b> \land <var:q2> = <nat:1> \} \\ <var:q2> := <var:q2> * <var:F> ; \\ \{ <var:F> = <var:b> \land <var:q0> = <nat:3> \land <var:q1> = <nat:8> \times <var:b> \land <var:q2> = <nat:1> \times <var:b> \} \\ <var:q2> := <var:q2> * <var:F> ; \\ \{ <var:F> = <var:b> \land <var:q0> = <nat:3> \land <var:q1> = <nat:8> \times <var:b> \land <var:q2> = <nat:1> \times <var:b> ^ <nat:2> \} \\ <var:M> := <var:q2> ; \\ \{ <var:F> = <var:b> \land <var:q0> = <nat:3> \land <var:q1> = <nat:8> \times <var:b> \land <var:M> = <nat:1> \times <var:b> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:q1> ; \\ \{ <var:F> = <var:b> \land <var:q0> = <nat:3> \land <var:M> = <nat:1> \times <var:b> ^ <nat:2> + <nat:8> \times <var:b> \} \\ <var:M> := <var:M> + <var:q0> \\ \{ <var:F> = <var:b> \land <var:M> = <nat:1> \times <var:b> ^ <nat:2> + <nat:8> \times <var:b> + <nat:3> \} \end{eqnarray} Hence , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:3> ; <var:q1> := <nat:8> ; <var:q1> := <var:q1> * <var:F> ; <var:q2> := <nat:1> ; <var:q2> := <var:q2> * <var:F> ; <var:q2> := <var:q2> * <var:F> ; <var:M> := <var:q2> ; <var:M> := <var:M> + <var:q1> ; <var:M> := <var:M> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:F> = <var:b> }} <def:poly> {{ <var:M> = <nat:1> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:8> * <var:b> /\ <var:q2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:8> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:8> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:8> * <var:b> /\ <var:M> = <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:q0> = <nat:3> /\ <var:M> = <nat:1> * <var:b> ^ <nat:2> + <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:M> = <nat:1> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 