\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:4> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:D> ; <var:E2> := <nat:9> ; <var:E2> := <var:E2> * <var:D> ; <var:E2> := <var:E2> * <var:D> ; <var:R> := <var:E2> ; <var:R> := <var:R> + <var:E1> ; <var:R> := <var:R> + <var:E0> \end{verbatim} Allow $ <var:D> = <var:w> $ --- for any integers $ <var:w> $ --- ahead of the execution of our set of instructions , it must be that we see $ <var:R> = <nat:9> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:4> $ once series of commands has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare logic produces : \begin{eqnarray} \{ <var:D> = <var:w> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:D> = <var:w> \land <var:E0> = <nat:4> \} \\ <var:E1> := <nat:7> ; \\ \{ <var:D> = <var:w> \land <var:E0> = <nat:4> \land <var:E1> = <nat:7> \} \\ <var:E1> := <var:E1> * <var:D> ; \\ \{ <var:D> = <var:w> \land <var:E0> = <nat:4> \land <var:E1> = <nat:7> \times <var:w> \} \\ <var:E2> := <nat:9> ; \\ \{ <var:D> = <var:w> \land <var:E0> = <nat:4> \land <var:E1> = <nat:7> \times <var:w> \land <var:E2> = <nat:9> \} \\ <var:E2> := <var:E2> * <var:D> ; \\ \{ <var:D> = <var:w> \land <var:E0> = <nat:4> \land <var:E1> = <nat:7> \times <var:w> \land <var:E2> = <nat:9> \times <var:w> \} \\ <var:E2> := <var:E2> * <var:D> ; \\ \{ <var:D> = <var:w> \land <var:E0> = <nat:4> \land <var:E1> = <nat:7> \times <var:w> \land <var:E2> = <nat:9> \times <var:w> ^ <nat:2> \} \\ <var:R> := <var:E2> ; \\ \{ <var:D> = <var:w> \land <var:E0> = <nat:4> \land <var:E1> = <nat:7> \times <var:w> \land <var:R> = <nat:9> \times <var:w> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:E1> ; \\ \{ <var:D> = <var:w> \land <var:E0> = <nat:4> \land <var:R> = <nat:9> \times <var:w> ^ <nat:2> + <nat:7> \times <var:w> \} \\ <var:R> := <var:R> + <var:E0> \\ \{ <var:D> = <var:w> \land <var:R> = <nat:9> \times <var:w> ^ <nat:2> + <nat:7> \times <var:w> + <nat:4> \} \end{eqnarray} Thusly , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:D> = <var:w> }} <var:E0> := <nat:4> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:D> ; <var:E2> := <nat:9> ; <var:E2> := <var:E2> * <var:D> ; <var:E2> := <var:E2> * <var:D> ; <var:R> := <var:E2> ; <var:R> := <var:R> + <var:E1> ; <var:R> := <var:R> + <var:E0> {{ <var:R> = <nat:9> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:7> * <var:w> /\ <var:E2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:7> * <var:w> /\ <var:E2> = <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:7> * <var:w> /\ <var:E2> = <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:7> * <var:w> /\ <var:R> = <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:E0> = <nat:4> /\ <var:R> = <nat:9> * <var:w> ^ <nat:2> + <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:R> = <nat:9> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 