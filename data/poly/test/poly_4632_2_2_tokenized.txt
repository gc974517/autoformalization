\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} : \begin{verbatim} <var:W> := <nat:2> ; <var:W> := <nat:2> + <var:W> * <var:K> \end{verbatim} Allowing that we have $ <var:K> = <var:w> $ before running this list of commands it follows that we see $ <var:W> = <nat:2> * <var:w> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:w> \} \\ <var:W> := <nat:2> ; \\ \{ <var:K> = <var:w> \land <var:W> = <nat:2> \} \\ <var:W> := <nat:2> + <var:W> * <var:K> \\ \{ <var:K> = <var:w> \land <var:W> = <nat:2> \cdot <var:w> + <nat:2> \} \end{eqnarray} Using typical Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:K> = <var:w> }} <var:W> := <nat:2> ; <var:W> := <nat:2> + <var:W> * <var:K> {{ <var:W> = <nat:2> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:W> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:W> = <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 