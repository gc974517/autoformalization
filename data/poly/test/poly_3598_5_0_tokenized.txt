\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:2> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:Z> ; <var:B> := <var:f1> ; <var:B> := <var:B> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:Z> = <var:t> $ before interpreting our code , then we see $ <var:B> = <nat:8> \cdot <var:t> + <nat:2> $ . \end{theorem} \begin{proof} The argument for this program is given with standard Hoare techniques . Moving onward , the code binding $ <nat:2> $ toward $ <var:f0>$ . This command takes the precondition $ \{ <var:Z> = <var:t> \} $ to the postcondition $ \{ <var:Z> = <var:t> \land <var:f0> = <nat:2> \} $ . Stepping forward , the environment update command assigning $ <nat:8> $ to $ <var:f1>$ . This code forwards the condition $ \{ <var:Z> = <var:t> \land <var:f0> = <nat:2> \} $ to the postcondition $ \{ <var:Z> = <var:t> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \} $ . This is shown using the assignment scheme given by typical Hoare reasoning . Considering the upcoming line of code contained in the list of instructions , we have the variable assignmet command \verb | <var:f1> := <var:f1> * <var:Z> ; | . This advances the precondition $ \{ <var:Z> = <var:t> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \} $ to the condition $ \{ <var:Z> = <var:t> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:t> \} $ . This is shown to be logically sound through the assignment law from usual Hoare logic . Advancing , we have the variable binding code defining $ <var:f1> $ toward $ <var:B>$ . This command forwards the precondition $ \{ <var:Z> = <var:t> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:t> \} $ into $ \{ <var:Z> = <var:t> \land <var:f0> = <nat:2> \land <var:B> = <nat:8> \times <var:t> \} $ . Moving on , the environment update command \verb | <var:B> := <var:B> + <var:f0> | . This redefines $ \{ <var:Z> = <var:t> \land <var:f0> = <nat:2> \land <var:B> = <nat:8> \times <var:t> \} $ toward the postcondition $ \{ <var:Z> = <var:t> \land <var:B> = <nat:8> \times <var:t> + <nat:2> \} $ . This is guaranteed with the assignment scheme in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:2> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:Z> ; <var:B> := <var:f1> ; <var:B> := <var:B> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Z> = <var:t> }} <def:poly> {{ <var:B> = <nat:8> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:f0> = <nat:2> /\ <var:B> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:B> = <nat:8> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 