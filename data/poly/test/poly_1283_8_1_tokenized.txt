\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:C> ; <var:q2> := <var:q1> * <var:C> ; <var:q0> := <nat:5> ; <var:q1> := <var:q1> * <nat:8> ; <var:q2> := <var:q2> * <nat:6> ; <var:N> := <var:q2> <var:N> := <var:N> + <var:q1> <var:N> := <var:N> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:C> = <var:n> $ ahead of interpreting our segment of code it holds that we see $ <var:N> = <nat:6> \times <var:n> ^ <nat:2> + <nat:8> \times <var:n> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:n> \} \\ <var:q1> := <var:C> ; \\ \{ <var:C> = <var:n> \land <var:q1> = <var:n> \} \\ <var:q2> := <var:q1> * <var:C> ; \\ \{ <var:C> = <var:n> \land <var:q1> = <var:n> \land <var:q2> = <var:n> ^ <nat:2> \} \\ <var:q0> := <nat:5> ; \\ \{ <var:C> = <var:n> \land <var:q1> = <var:n> \land <var:q2> = <var:n> ^ <nat:2> \land <var:q0> = <nat:5> \} \\ <var:q1> := <var:q1> * <nat:8> ; \\ \{ <var:C> = <var:n> \land <var:q1> = <nat:8> \times <var:n> \land <var:q2> = <var:n> ^ <nat:2> \land <var:q0> = <nat:5> \} \\ <var:q2> := <var:q2> * <nat:6> ; \\ \{ <var:C> = <var:n> \land <var:q1> = <nat:8> \times <var:n> \land <var:q2> = <nat:6> \times <var:n> ^ <nat:2> \land <var:q0> = <nat:5> \} \\ <var:N> := <var:q2> \\ \{ <var:C> = <var:n> \land <var:q1> = <nat:8> \times <var:n> \land <var:q0> = <nat:5> \land <var:N> = <nat:6> \times <var:n> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:q1> \\ \{ <var:C> = <var:n> \land <var:q0> = <nat:5> \land <var:N> = <nat:6> \times <var:n> ^ <nat:2> + <nat:8> \times <var:n> \} \\ <var:N> := <var:N> + <var:q0> \\ \{ <var:C> = <var:n> \land <var:N> = <nat:6> \times <var:n> ^ <nat:2> + <nat:8> \times <var:n> + <nat:5> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q1> := <var:C> ; <var:q2> := <var:q1> * <var:C> ; <var:q0> := <nat:5> ; <var:q1> := <var:q1> * <nat:8> ; <var:q2> := <var:q2> * <nat:6> ; <var:N> := <var:q2> <var:N> := <var:N> + <var:q1> <var:N> := <var:N> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:C> = <var:n> }} <def:poly> {{ <var:N> = <nat:6> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:q1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:q1> = <var:n> /\ <var:q2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:q1> = <var:n> /\ <var:q2> = <var:n> ^ <nat:2> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:q1> = <nat:8> * <var:n> /\ <var:q2> = <var:n> ^ <nat:2> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:q1> = <nat:8> * <var:n> /\ <var:q2> = <nat:6> * <var:n> ^ <nat:2> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:q1> = <nat:8> * <var:n> /\ <var:q0> = <nat:5> /\ <var:N> = <nat:6> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:q0> = <nat:5> /\ <var:N> = <nat:6> * <var:n> ^ <nat:2> + <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:n> /\ <var:N> = <nat:6> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 