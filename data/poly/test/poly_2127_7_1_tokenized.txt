\begin{document} \begin{theorem} Consider the following list of instructions : \begin{verbatim} <var:A1> := <var:i> ; <var:A2> := <var:A1> * <var:i> ; <var:A3> := <var:A2> * <var:i> ; <var:A0> := <nat:4> ; <var:A3> := <var:A3> * <nat:4> ; <var:W> := <var:A3> <var:W> := <var:W> + <var:A0> \end{verbatim} Assume , letting $ <var:o> \in \mathbb{N} $ , that $ <var:i> = <var:o> $ prior to the execution of our code segment , then we have $ <var:W> = <nat:4> * <var:o> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our program can be demonstrated through Hoare techniques . Going forward , we see \begin{eqnarray} \{ <var:i> = <var:o> \} \, <var:A1> := <var:i> \, \{ <var:i> = <var:o> \land <var:A1> = <var:o> \} \\ \{ <var:i> = <var:o> \land <var:A1> = <var:o> \} \, <var:A2> := <var:A1> * <var:i> \, \{ <var:i> = <var:o> \land <var:A1> = <var:o> \land <var:A2> = <var:o> ^ <nat:2> \} \\ \{ <var:i> = <var:o> \land <var:A1> = <var:o> \land <var:A2> = <var:o> ^ <nat:2> \} \, <var:A3> := <var:A2> * <var:i> \, \{ <var:i> = <var:o> \land <var:A1> = <var:o> \land <var:A2> = <var:o> ^ <nat:2> \land <var:A3> = <var:o> ^ <nat:3> \} \end{eqnarray} Looking at the proceeding lines of codeseen in the list of instructions , \begin{eqnarray} \{ <var:i> = <var:o> \} \, <var:A1> := <var:i> \, \{ <var:i> = <var:o> \land <var:A1> = <var:o> \} \\ \{ <var:i> = <var:o> \land <var:A1> = <var:o> \} \, <var:A2> := <var:A1> * <var:i> \, \{ <var:i> = <var:o> \land <var:A1> = <var:o> \land <var:A2> = <var:o> ^ <nat:2> \} \\ \{ <var:i> = <var:o> \land <var:A1> = <var:o> \land <var:A2> = <var:o> ^ <nat:2> \} \, <var:A3> := <var:A2> * <var:i> \, \{ <var:i> = <var:o> \land <var:A1> = <var:o> \land <var:A2> = <var:o> ^ <nat:2> \land <var:A3> = <var:o> ^ <nat:3> \} \end{eqnarray} This is guaranteed with the inference rule found in Hoare reasoning . Taking a look at the proceeding bit of code in the segment of code , \begin{eqnarray} \{ <var:i> = <var:o> \} \, <var:A1> := <var:i> \, \{ <var:i> = <var:o> \land <var:A1> = <var:o> \} \end{eqnarray} This is known to be sound through the variable update scheme defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:i> = <var:o> }} <var:A1> := <var:i> ; <var:A2> := <var:A1> * <var:i> ; <var:A3> := <var:A2> * <var:i> ; <var:A0> := <nat:4> ; <var:A3> := <var:A3> * <nat:4> ; <var:W> := <var:A3> <var:W> := <var:W> + <var:A0> {{ <var:W> = <nat:4> * <var:o> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:A1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:A1> = <var:o> /\ <var:A2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:A1> = <var:o> /\ <var:A2> = <var:o> ^ <nat:2> /\ <var:A3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:A1> = <var:o> /\ <var:A2> = <var:o> ^ <nat:2> /\ <var:A3> = <var:o> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:A1> = <var:o> /\ <var:A2> = <var:o> ^ <nat:2> /\ <var:A3> = <nat:4> * <var:o> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:A1> = <var:o> /\ <var:A2> = <var:o> ^ <nat:2> /\ <var:A0> = <nat:4> /\ <var:W> = <nat:4> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:W> = <nat:4> * <var:o> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 