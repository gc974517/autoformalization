\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:M> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:3> ; <var:n> := <var:q1> <var:n> := <var:n> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Allowing $ <var:M> = <var:Y> $ prior to the evaluation of the series of commands , it follows that we have $ <var:n> = <nat:3> * <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:Y> \} \\ <var:q1> := <var:M> ; \\ \{ <var:M> = <var:Y> \land <var:q1> = <var:Y> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:M> = <var:Y> \land <var:q1> = <var:Y> \land <var:q0> = <nat:3> \} \\ <var:q1> := <var:q1> * <nat:3> ; \\ \{ <var:M> = <var:Y> \land <var:q1> = <nat:3> \cdot <var:Y> \land <var:q0> = <nat:3> \} \\ <var:n> := <var:q1> \\ \{ <var:M> = <var:Y> \land <var:q0> = <nat:3> \land <var:n> = <nat:3> \cdot <var:Y> \} \\ <var:n> := <var:n> + <var:q0> \\ \{ <var:M> = <var:Y> \land <var:n> = <nat:3> \cdot <var:Y> + <nat:3> \} \end{eqnarray} Applying standard Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:M> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:3> ; <var:n> := <var:q1> <var:n> := <var:n> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:M> = <var:Y> }} <def:poly> {{ <var:n> = <nat:3> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:q1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:q1> = <var:Y> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:q1> = <nat:3> * <var:Y> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:q0> = <nat:3> /\ <var:n> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:n> = <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 