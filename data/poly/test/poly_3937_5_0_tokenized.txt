\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:1> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:R> ; <var:c> := <var:B1> ; <var:c> := <var:c> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:R> = <var:i> $ , for all integers $ <var:i> $ , ahead of running this code segment it follows that $ <var:c> = <nat:1> * <var:i> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques results in : \begin{eqnarray} \{ <var:R> = <var:i> \} \\ <var:B0> := <nat:1> ; \\ \{ <var:R> = <var:i> \land <var:B0> = <nat:1> \} \\ <var:B1> := <nat:1> ; \\ \{ <var:R> = <var:i> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> \} \\ <var:B1> := <var:B1> * <var:R> ; \\ \{ <var:R> = <var:i> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> \times <var:i> \} \\ <var:c> := <var:B1> ; \\ \{ <var:R> = <var:i> \land <var:B0> = <nat:1> \land <var:c> = <nat:1> \times <var:i> \} \\ <var:c> := <var:c> + <var:B0> \\ \{ <var:R> = <var:i> \land <var:c> = <nat:1> \times <var:i> + <nat:1> \} \end{eqnarray} Thusly , the series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B0> := <nat:1> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:R> ; <var:c> := <var:B1> ; <var:c> := <var:c> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:R> = <var:i> }} <def:poly> {{ <var:c> = <nat:1> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:B0> = <nat:1> /\ <var:c> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:c> = <nat:1> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 