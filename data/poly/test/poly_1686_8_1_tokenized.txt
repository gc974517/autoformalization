\begin{document} \begin{theorem} We define the following code such that \begin{verbatim} <var:X1> := <var:p> ; <var:X2> := <var:X1> * <var:p> ; <var:X0> := <nat:3> ; <var:X1> := <var:X1> * <nat:2> ; <var:X2> := <var:X2> * <nat:4> ; <var:x> := <var:X2> <var:x> := <var:x> + <var:X1> <var:x> := <var:x> + <var:X0> \end{verbatim} Allowing it to hold that $ <var:p> = <var:E> $ before evaluating this list of commands it follows that $ <var:x> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques gives : \begin{eqnarray} \{ <var:p> = <var:E> \} \\ <var:X1> := <var:p> ; \\ \{ <var:p> = <var:E> \land <var:X1> = <var:E> \} \\ <var:X2> := <var:X1> * <var:p> ; \\ \{ <var:p> = <var:E> \land <var:X1> = <var:E> \land <var:X2> = <var:E> ^ <nat:2> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:p> = <var:E> \land <var:X1> = <var:E> \land <var:X2> = <var:E> ^ <nat:2> \land <var:X0> = <nat:3> \} \\ <var:X1> := <var:X1> * <nat:2> ; \\ \{ <var:p> = <var:E> \land <var:X1> = <nat:2> \cdot <var:E> \land <var:X2> = <var:E> ^ <nat:2> \land <var:X0> = <nat:3> \} \\ <var:X2> := <var:X2> * <nat:4> ; \\ \{ <var:p> = <var:E> \land <var:X1> = <nat:2> \cdot <var:E> \land <var:X2> = <nat:4> \cdot <var:E> ^ <nat:2> \land <var:X0> = <nat:3> \} \\ <var:x> := <var:X2> \\ \{ <var:p> = <var:E> \land <var:X1> = <nat:2> \cdot <var:E> \land <var:X0> = <nat:3> \land <var:x> = <nat:4> \cdot <var:E> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:X1> \\ \{ <var:p> = <var:E> \land <var:X0> = <nat:3> \land <var:x> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> \} \\ <var:x> := <var:x> + <var:X0> \\ \{ <var:p> = <var:E> \land <var:x> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:3> \} \end{eqnarray} As a consequence , the code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <var:X1> := <var:p> ; <var:X2> := <var:X1> * <var:p> ; <var:X0> := <nat:3> ; <var:X1> := <var:X1> * <nat:2> ; <var:X2> := <var:X2> * <nat:4> ; <var:x> := <var:X2> <var:x> := <var:x> + <var:X1> <var:x> := <var:x> + <var:X0> {{ <var:x> = <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:X1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:X1> = <var:E> /\ <var:X2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:X1> = <var:E> /\ <var:X2> = <var:E> ^ <nat:2> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:X1> = <nat:2> * <var:E> /\ <var:X2> = <var:E> ^ <nat:2> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:X1> = <nat:2> * <var:E> /\ <var:X2> = <nat:4> * <var:E> ^ <nat:2> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:X1> = <nat:2> * <var:E> /\ <var:X0> = <nat:3> /\ <var:x> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:X0> = <nat:3> /\ <var:x> = <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:x> = <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 