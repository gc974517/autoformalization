\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <var:V> * <var:Q> ; <var:V> := <nat:1> + <var:V> * <var:Q> ; <var:V> := <nat:3> + <var:V> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Assuming it to hold that $ <var:Q> = <var:S> $ before interpreting the set of instructions , it follows that we have $ <var:V> = <nat:4> \cdot <var:S> ^ <nat:7> + <nat:4> \cdot <var:S> ^ <nat:6> + <nat:4> \cdot <var:S> ^ <nat:5> + <nat:4> \cdot <var:S> ^ <nat:4> + <nat:4> \cdot <var:S> ^ <nat:3> + <nat:1> \cdot <var:S> + <nat:3> $ once set of commands executes . \end{theorem} \begin{proof} The flow of logic for the code is accomplished through typical Hoare techniques . Advancing to the next step , the variable assignmet statement \verb | <var:V> := <nat:4> ; | . This redefines the precondition $ \{ <var:Q> = <var:S> \} $ into the condition $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> \} $ . Jumping to the next command in our code , the variable binding code \verb | <var:V> := <nat:4> + <var:V> * <var:Q> ; | . This code moves $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> \} $ as the postcondition $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> + <nat:4> \} $ . Focusing on the subsequent bit of code found in the code , the binding line binding $ <nat:4> + <var:V> * <var:Q> $ as $ <var:V>$ . This advances $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> + <nat:4> \} $ into $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> \} $ . Moving on , the assignment statement \verb | <var:V> := <nat:4> + <var:V> * <var:Q> ; | . This moves the precondition $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> \} $ toward $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> \} $ . This is known to be sound with the assignment rule from Hoare logic . Focusing on the next step found in our program , we see the assignment statement \verb | <var:V> := <nat:4> + <var:V> * <var:Q> ; | . This redefines the precondition $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> \} $ into the postcondition $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> \} $ . This is shown through the assignment rule given by Hoare techniques . Stepping through , we have the binding command \verb | <var:V> := <var:V> * <var:Q> ; | . This statement moves $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> \} $ toward the postcondition $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + \} $ . Considering the following line of code seen in our segment of code , the variable binding code binding $ <nat:1> + <var:V> * <var:Q> $ to $ <var:V>$ . This redefines $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + \} $ as the postcondition $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> \} $ . Moving on to the following bit of code in our series of instructions , we have the binding line binding $ <nat:3> + <var:V> * <var:Q$ into $ <var:V>$ . This line advances $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> \} $ toward the condition $ \{ <var:Q> = <var:S> \land <var:V> = <nat:4> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> + <nat:3> \} $ . This is rigorously given through the assignment scheme of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:4> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <var:V> * <var:Q> ; <var:V> := <nat:1> + <var:V> * <var:Q> ; <var:V> := <nat:3> + <var:V> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Q> = <var:S> }} <def:poly> {{ <var:V> = <nat:4> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:V> = <nat:4> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:V> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:V> = <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:V> = <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:V> = <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:V> = <nat:4> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:V> = <nat:4> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 