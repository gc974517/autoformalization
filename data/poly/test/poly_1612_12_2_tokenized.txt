\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o> := <nat:4> ; <var:o> := <nat:4> + <var:o> * <var:t> ; <var:o> := <var:o> * <var:t> ; <var:o> := <nat:2> + <var:o> * <var:t> ; <var:o> := <nat:4> + <var:o> * <var:t> ; <var:o> := <nat:2> + <var:o> * <var:t> ; <var:o> := <nat:2> + <var:o> * <var:t> ; <var:o> := <var:o> * <var:t> ; <var:o> := <nat:1> + <var:o> * <var:t> ; <var:o> := <nat:2> + <var:o> * <var:t> ; <var:o> := <nat:4> + <var:o> * <var:t> ; <var:o> := <nat:1> + <var:o> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Assuming --- for all whole numbers $ <var:z> $ --- $ <var:t> = <var:z> $ before running this series of commands , it must be that we see $ <var:o> = <nat:4> \times <var:z> ^ <nat:11> + <nat:4> \times <var:z> ^ <nat:10> + <nat:2> \times <var:z> ^ <nat:8> + <nat:4> \times <var:z> ^ <nat:7> + <nat:2> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be accomplished through typical Hoare techniques . Moving onward , the variable update command assigning $ <nat:4> $ as $ <var:o>$ . This advances the precondition $ \{ <var:t> = <var:z> \} $ to the postcondition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \} $ . Looking at the subsequent bit of code contained in our set of instructions , we have the variable update statement \verb | <var:o> := <nat:4> + <var:o> * <var:t> ; | . This line advances the precondition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \} $ into the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> + <nat:4> \} $ . Following , we see the variable binding code \verb | <var:o> := <var:o> * <var:t> ; | . This moves the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> + <nat:4> \} $ to $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + \} $ . This is rigorously given with the assignment rule given in typical Hoare logic . After , we have the variable assignmet code \verb | <var:o> := <nat:2> + <var:o> * <var:t> ; | . This line takes the precondition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + \} $ into the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:2> \} $ . This is given using the assignment rule of standard Hoare logic . Honing in on the proceeding command found in our list of commands , the variable assignmet code yielding $ <nat:4> + <var:o> * <var:t> $ to $ <var:o>$ . This moves $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:2> \} $ into the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> + <nat:4> \} $ . This is rigorously given by the assignment rule of typical Hoare reasoning . Shifting focus toward the upcoming piece of code seen in the code segment , the assignment command binding $ <nat:2> + <var:o> * <var:t> $ to $ <var:o>$ . This command moves the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> + <nat:4> \} $ as the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:2> \} $ . This is deduced using the assignment law found in standard Hoare techniques . Looking at the following line found in our program , we see the variable assignmet command giving $ <nat:2> + <var:o> * <var:t> $ to $ <var:o>$ . This advances $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:2> \} $ to the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> \} $ . This is deduced by the assignment rule of typical Hoare techniques . Advancing on , we have the binding code \verb | <var:o> := <var:o> * <var:t> ; | . This code redefines the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> \} $ as $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + \} $ . Moving forward to the upcoming step seen in the program , the environment update line giving $ <nat:1> + <var:o> * <var:t> $ as $ <var:o>$ . This transfers the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + \} $ to the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:8> + <nat:4> \times <var:z> ^ <nat:7> + <nat:2> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \} $ . Immediately following , the variable assignmet command binding $ <nat:2> + <var:o> * <var:t> $ to $ <var:o>$ . This line transfers the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:8> + <nat:4> \times <var:z> ^ <nat:7> + <nat:2> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \} $ into the postcondition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:9> + <nat:4> \times <var:z> ^ <nat:8> + <nat:2> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> + <nat:2> \} $ . Moving forward to the next step , the statement \verb | <var:o> := <nat:4> + <var:o> * <var:t> ; | . This redefines the condition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:9> + <nat:4> \times <var:z> ^ <nat:8> + <nat:2> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> + <nat:2> \} $ toward $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:10> + <nat:4> \times <var:z> ^ <nat:9> + <nat:2> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:4> \} $ . This is deduced with the assignment inference rule of Hoare logic . Considering the subsequent command in the program , we see the code \verb | <var:o> := <nat:1> + <var:o> * <var:t> | . This forwards the precondition $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:10> + <nat:4> \times <var:z> ^ <nat:9> + <nat:2> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:4> \} $ into $ \{ <var:t> = <var:z> \land <var:o> = <nat:4> \times <var:z> ^ <nat:11> + <nat:4> \times <var:z> ^ <nat:10> + <nat:2> \times <var:z> ^ <nat:8> + <nat:4> \times <var:z> ^ <nat:7> + <nat:2> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:4> ; <var:o> := <nat:4> + <var:o> * <var:t> ; <var:o> := <var:o> * <var:t> ; <var:o> := <nat:2> + <var:o> * <var:t> ; <var:o> := <nat:4> + <var:o> * <var:t> ; <var:o> := <nat:2> + <var:o> * <var:t> ; <var:o> := <nat:2> + <var:o> * <var:t> ; <var:o> := <var:o> * <var:t> ; <var:o> := <nat:1> + <var:o> * <var:t> ; <var:o> := <nat:2> + <var:o> * <var:t> ; <var:o> := <nat:4> + <var:o> * <var:t> ; <var:o> := <nat:1> + <var:o> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:t> = <var:z> }} <def:poly> {{ <var:o> = <nat:4> * <var:z> ^ <nat:11> + <nat:4> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:10> + <nat:4> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:o> = <nat:4> * <var:z> ^ <nat:11> + <nat:4> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 