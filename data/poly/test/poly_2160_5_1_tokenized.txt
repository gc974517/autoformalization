\begin{document} \begin{theorem} Define a segment of code as follows \begin{verbatim} <var:E1> := <var:v> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:4> ; <var:F> := <var:E1> <var:F> := <var:F> + <var:E0> \end{verbatim} Allowing $ <var:v> = <var:S> $ before interpreting this series of instructions , it must be that $ <var:F> = <nat:4> \times <var:S> + <nat:8> $ after list of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:S> \} \\ <var:E1> := <var:v> ; \\ \{ <var:v> = <var:S> \land <var:E1> = <var:S> \} \\ <var:E0> := <nat:8> ; \\ \{ <var:v> = <var:S> \land <var:E1> = <var:S> \land <var:E0> = <nat:8> \} \\ <var:E1> := <var:E1> * <nat:4> ; \\ \{ <var:v> = <var:S> \land <var:E1> = <nat:4> * <var:S> \land <var:E0> = <nat:8> \} \\ <var:F> := <var:E1> \\ \{ <var:v> = <var:S> \land <var:E0> = <nat:8> \land <var:F> = <nat:4> * <var:S> \} \\ <var:F> := <var:F> + <var:E0> \\ \{ <var:v> = <var:S> \land <var:F> = <nat:4> * <var:S> + <nat:8> \} \end{eqnarray} Using standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:v> = <var:S> }} <var:E1> := <var:v> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:4> ; <var:F> := <var:E1> <var:F> := <var:F> + <var:E0> {{ <var:F> = <nat:4> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:E1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:E1> = <var:S> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:E1> = <nat:4> * <var:S> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:E0> = <nat:8> /\ <var:F> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:F> = <nat:4> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 