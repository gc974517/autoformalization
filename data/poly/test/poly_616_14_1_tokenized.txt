\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:u1> := <var:e> ; <var:u2> := <var:u1> * <var:e> ; <var:u3> := <var:u2> * <var:e> ; <var:u4> := <var:u3> * <var:e> ; <var:u5> := <var:u4> * <var:e> ; <var:u6> := <var:u5> * <var:e> ; <var:u0> := <nat:1> ; <var:u4> := <var:u4> * <nat:4> ; <var:u5> := <var:u5> * <nat:2> ; <var:u6> := <var:u6> * <nat:4> ; <var:w> := <var:u6> <var:w> := <var:w> + <var:u5> <var:w> := <var:w> + <var:u4> <var:w> := <var:w> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> . Allowing that we have $ <var:e> = <var:l> $ prior to evaluating our set of instructions , then we have $ <var:w> = <nat:4> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:1> $ . \end{theorem} \begin{proof} Let the below decorated program . \begin{eqnarray} \{ <var:e> = <var:l> \} \\ <var:u1> := <var:e> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \} \\ <var:u2> := <var:u1> * <var:e> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:e> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \} \\ <var:u4> := <var:u3> * <var:e> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \} \\ <var:u5> := <var:u4> * <var:e> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u5> = <var:l> ^ <nat:5> \} \\ <var:u6> := <var:u5> * <var:e> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u5> = <var:l> ^ <nat:5> \land <var:u6> = <var:l> ^ <nat:6> \} \end{eqnarray} Allowing interpreting the program returns : \begin{eqnarray} <var:u0> := <nat:1> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u5> = <var:l> ^ <nat:5> \land <var:u6> = <var:l> ^ <nat:6> \land <var:u0> = <nat:1> \} \\ <var:u4> := <var:u4> * <nat:4> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <nat:4> \cdot <var:l> ^ <nat:4> \land <var:u5> = <var:l> ^ <nat:5> \land <var:u6> = <var:l> ^ <nat:6> \land <var:u0> = <nat:1> \} \\ <var:u5> := <var:u5> * <nat:2> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <nat:4> \cdot <var:l> ^ <nat:4> \land <var:u5> = <nat:2> \cdot <var:l> ^ <nat:5> \land <var:u6> = <var:l> ^ <nat:6> \land <var:u0> = <nat:1> \} \end{eqnarray} Allowing executing our set of instructions returns : \begin{eqnarray} <var:u6> := <var:u6> * <nat:4> ; \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <nat:4> \cdot <var:l> ^ <nat:4> \land <var:u5> = <nat:2> \cdot <var:l> ^ <nat:5> \land <var:u6> = <nat:4> \cdot <var:l> ^ <nat:6> \land <var:u0> = <nat:1> \} \\ <var:w> := <var:u6> \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <nat:4> \cdot <var:l> ^ <nat:4> \land <var:u5> = <nat:2> \cdot <var:l> ^ <nat:5> \land <var:u0> = <nat:1> \land <var:w> = <nat:4> \cdot <var:l> ^ <nat:6> \} \\ <var:w> := <var:w> + <var:u5> \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <nat:4> \cdot <var:l> ^ <nat:4> \land <var:u0> = <nat:1> \land <var:w> = <nat:4> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> \} \\ <var:w> := <var:w> + <var:u4> \\ \{ <var:e> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u0> = <nat:1> \land <var:w> = <nat:4> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> \} \\ <var:w> := <var:w> + <var:u0> \\ \{ <var:e> = <var:l> \land <var:w> = <nat:4> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Definition <var:u5> : string := " <var:u5> " . Definition <var:u6> : string := " <var:u6> " . Definition <def:poly> := <var:u1> := <var:e> ; <var:u2> := <var:u1> * <var:e> ; <var:u3> := <var:u2> * <var:e> ; <var:u4> := <var:u3> * <var:e> ; <var:u5> := <var:u4> * <var:e> ; <var:u6> := <var:u5> * <var:e> ; <var:u0> := <nat:1> ; <var:u4> := <var:u4> * <nat:4> ; <var:u5> := <var:u5> * <nat:2> ; <var:u6> := <var:u6> * <nat:4> ; <var:w> := <var:u6> <var:w> := <var:w> + <var:u5> <var:w> := <var:w> + <var:u4> <var:w> := <var:w> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:e> = <var:l> }} <def:poly> {{ <var:w> = <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> /\ <var:u5> = <var:l> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> /\ <var:u5> = <var:l> ^ <nat:5> /\ <var:u6> = <var:l> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> /\ <var:u5> = <var:l> ^ <nat:5> /\ <var:u6> = <var:l> ^ <nat:6> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <nat:4> * <var:l> ^ <nat:4> /\ <var:u5> = <var:l> ^ <nat:5> /\ <var:u6> = <var:l> ^ <nat:6> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <nat:4> * <var:l> ^ <nat:4> /\ <var:u5> = <nat:2> * <var:l> ^ <nat:5> /\ <var:u6> = <var:l> ^ <nat:6> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <nat:4> * <var:l> ^ <nat:4> /\ <var:u5> = <nat:2> * <var:l> ^ <nat:5> /\ <var:u6> = <nat:4> * <var:l> ^ <nat:6> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <nat:4> * <var:l> ^ <nat:4> /\ <var:u5> = <nat:2> * <var:l> ^ <nat:5> /\ <var:u0> = <nat:1> /\ <var:w> = <nat:4> * <var:l> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <nat:4> * <var:l> ^ <nat:4> /\ <var:u0> = <nat:1> /\ <var:w> = <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u0> = <nat:1> /\ <var:w> = <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:w> = <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 