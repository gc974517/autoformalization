\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:U> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:1> ; <var:k> := <var:j1> <var:k> := <var:k> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given positive coefficients $ <var:n> $ ) that we have $ <var:U> = <var:n> $ ahead of the evaluation of this list of instructions then $ <var:k> = <nat:1> * <var:n> + <nat:9> $ once series of commands has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be shown by Hoare reasoning . Stepping forward , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:n> \} & <var:j1> := <var:U> & \{ <var:U> = <var:n> \land <var:j1> = <var:n> \} \\ \{ <var:U> = <var:n> \land <var:j1> = <var:n> \} & <var:j0> := <nat:9> & \{ <var:U> = <var:n> \land <var:j1> = <var:n> \land <var:j0> = <nat:9> \} \\ \{ <var:U> = <var:n> \land <var:j1> = <var:n> \land <var:j0> = <nat:9> \} & <var:j1> := <var:j1> * <nat:1> & \{ <var:U> = <var:n> \land <var:j1> = <nat:1> \times <var:n> \land <var:j0> = <nat:9> \} \end{tabular} Observing the next command seen in our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:n> \} & <var:j1> := <var:U> & \{ <var:U> = <var:n> \land <var:j1> = <var:n> \} \end{tabular} This is known to be sound through the law given by usual Hoare logic . Observing the following bit of code in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:U> = <var:n> \} & <var:j1> := <var:U> & \{ <var:U> = <var:n> \land <var:j1> = <var:n> \} \end{tabular} This is rigorously given using the scheme obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:U> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:1> ; <var:k> := <var:j1> <var:k> := <var:k> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:U> = <var:n> }} <def:poly> {{ <var:k> = <nat:1> * <var:n> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:j1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:j1> = <var:n> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:j1> = <nat:1> * <var:n> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:j0> = <nat:9> /\ <var:k> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:k> = <nat:1> * <var:n> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 