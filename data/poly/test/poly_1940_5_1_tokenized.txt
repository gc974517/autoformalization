\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:a1> := <var:F> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:2> ; <var:h> := <var:a1> <var:h> := <var:h> + <var:a0> \end{verbatim} Assuming given some natural numbers $ <var:S> $ that we have $ <var:F> = <var:S> $ prior to executing our series of commands it must be that we have $ <var:h> = <nat:2> * <var:S> + <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare reasoning results in : \begin{eqnarray} \{ <var:F> = <var:S> \} \\ <var:a1> := <var:F> ; \\ \{ <var:F> = <var:S> \land <var:a1> = <var:S> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:F> = <var:S> \land <var:a1> = <var:S> \land <var:a0> = <nat:4> \} \\ <var:a1> := <var:a1> * <nat:2> ; \\ \{ <var:F> = <var:S> \land <var:a1> = <nat:2> \cdot <var:S> \land <var:a0> = <nat:4> \} \\ <var:h> := <var:a1> \\ \{ <var:F> = <var:S> \land <var:a0> = <nat:4> \land <var:h> = <nat:2> \cdot <var:S> \} \\ <var:h> := <var:h> + <var:a0> \\ \{ <var:F> = <var:S> \land <var:h> = <nat:2> \cdot <var:S> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:F> = <var:S> }} <var:a1> := <var:F> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:2> ; <var:h> := <var:a1> <var:h> := <var:h> + <var:a0> {{ <var:h> = <nat:2> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:a1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:a1> = <var:S> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:a1> = <nat:2> * <var:S> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:a0> = <nat:4> /\ <var:h> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:h> = <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 