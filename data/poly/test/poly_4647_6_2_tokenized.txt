\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:w> ; <var:y> := <nat:4> + <var:y> * <var:w> ; <var:y> := <var:y> * <var:w> ; <var:y> := <nat:1> + <var:y> * <var:w> ; <var:y> := <nat:1> + <var:y> * <var:w> \end{verbatim} Given that we have $ <var:w> = <var:A> $ prior to executing our series of instructions , it follows that $ <var:y> = <nat:4> \cdot <var:A> ^ <nat:5> + <nat:2> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the set of instructions is clear using typical Hoare logic . Going to the next step , we see the environment update code letting $ <nat:4> $ toward $ <var:y>$ . This statement takes the condition $ \{ <var:w> = <var:A> \} $ toward the postcondition $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \} $ . Stepping through , the assignment line \verb | <var:y> := <nat:2> + <var:y> * <var:w> ; | . This moves the condition $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \} $ as the condition $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> + <nat:2> \} $ . Next , we have the variable update command letting $ <nat:4> + <var:y> * <var:w> $ toward $ <var:y>$ . This code forwards $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> + <nat:2> \} $ to $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:4> \} $ . This is guaranteed using the assignment rule of typical Hoare reasoning . Advancing to the following step contained in the list of instructions , the variable binding command letting $ <var:y> * <var:w> $ as $ <var:y>$ . This advances $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:4> \} $ into the condition $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + \} $ . Paying attention to the following step in the set of instructions , the line defining $ <nat:1> + <var:y> * <var:w> $ toward $ <var:y>$ . This transfers the precondition $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + \} $ toward $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:1> \} $ . This is ensured with the assignment scheme in typical Hoare logic . Following , we see the line \verb | <var:y> := <nat:1> + <var:y> * <var:w> | . This line transfers $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:1> \} $ toward the condition $ \{ <var:w> = <var:A> \land <var:y> = <nat:4> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:w> = <var:A> }} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:w> ; <var:y> := <nat:4> + <var:y> * <var:w> ; <var:y> := <var:y> * <var:w> ; <var:y> := <nat:1> + <var:y> * <var:w> ; <var:y> := <nat:1> + <var:y> * <var:w> {{ <var:y> = <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:y> = <nat:4> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:y> = <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:y> = <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:y> = <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:y> = <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 