\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:c> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:2> ; <var:L> := <var:B1> <var:L> := <var:L> + <var:B0> \end{verbatim} Given it to hold that $ <var:c> = <var:n> $ ahead of running this set of instructions , it must be that $ <var:L> = <nat:2> * <var:n> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program is demonstrated using usual Hoare logic . Considering the upcoming bit of code seen in our series of commands , we see the command \verb | <var:B1> := <var:c> ; | . This statement advances the precondition $ \{ <var:c> = <var:n> \} $ toward the condition $ \{ <var:c> = <var:n> \land <var:B1> = <var:n> \} $ . This is shown using the assignment inference rule of standard Hoare logic . Following , the assignment code assigning $ <nat:9> $ as $ <var:B0>$ . This redefines the precondition $ \{ <var:c> = <var:n> \land <var:B1> = <var:n> \} $ to $ \{ <var:c> = <var:n> \land <var:B1> = <var:n> \land <var:B0> = <nat:9> \} $ . Observing the proceeding piece of code in the series of instructions , we have the binding line \verb | <var:B1> := <var:B1> * <nat:2> ; | . This command advances the precondition $ \{ <var:c> = <var:n> \land <var:B1> = <var:n> \land <var:B0> = <nat:9> \} $ into the postcondition $ \{ <var:c> = <var:n> \land <var:B1> = <nat:2> \cdot <var:n> \land <var:B0> = <nat:9> \} $ . Focusing on the upcoming step seen in our code , we have the environment update line \verb | <var:L> := <var:B1> | . This transfers the condition $ \{ <var:c> = <var:n> \land <var:B1> = <nat:2> \cdot <var:n> \land <var:B0> = <nat:9> \} $ into the condition $ \{ <var:c> = <var:n> \land <var:B0> = <nat:9> \land <var:L> = <nat:2> \cdot <var:n> \} $ . Taking another step toward the following line of code in the list of instructions , we see the binding statement \verb | <var:L> := <var:L> + <var:B0> | . This line redefines the condition $ \{ <var:c> = <var:n> \land <var:B0> = <nat:9> \land <var:L> = <nat:2> \cdot <var:n> \} $ toward $ \{ <var:c> = <var:n> \land <var:L> = <nat:2> \cdot <var:n> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:c> = <var:n> }} <var:B1> := <var:c> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:2> ; <var:L> := <var:B1> <var:L> := <var:L> + <var:B0> {{ <var:L> = <nat:2> * <var:n> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:B1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:B1> = <var:n> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:B1> = <nat:2> * <var:n> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:B0> = <nat:9> /\ <var:L> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:L> = <nat:2> * <var:n> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 