\begin{document} \begin{theorem} Consider a segment of code : \begin{verbatim} <var:g1> := <var:k> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:2> ; <var:Y> := <var:g1> <var:Y> := <var:Y> + <var:g0> \end{verbatim} Assume it to be that $ <var:k> = <var:C> $ --- given positive integer coefficients $ <var:C> $ --- ahead of running the segment of code , it follows that we see $ <var:Y> = <nat:2> \times <var:C> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the segment of code can be demonstrated using typical Hoare logic . Moving on , we see the statement \verb | <var:g1> := <var:k> ; | . This takes $ \{ <var:k> = <var:C> \} $ as $ \{ <var:k> = <var:C> \land <var:g1> = <var:C> \} $ . Stepping forward , the variable assignmet command \verb | <var:g0> := <nat:2> ; | . This statement advances the condition $ \{ <var:k> = <var:C> \land <var:g1> = <var:C> \} $ into the condition $ \{ <var:k> = <var:C> \land <var:g1> = <var:C> \land <var:g0> = <nat:2> \} $ . Immediately after , we have the assignment code \verb | <var:g1> := <var:g1> * <nat:2> ; | . This redefines the condition $ \{ <var:k> = <var:C> \land <var:g1> = <var:C> \land <var:g0> = <nat:2> \} $ into the condition $ \{ <var:k> = <var:C> \land <var:g1> = <nat:2> \times <var:C> \land <var:g0> = <nat:2> \} $ . This is sound using the assignment inference rule defined by typical Hoare reasoning . Advancing to the upcoming step seen in the program , the variable update statement \verb | <var:Y> := <var:g1> | . This statement advances $ \{ <var:k> = <var:C> \land <var:g1> = <nat:2> \times <var:C> \land <var:g0> = <nat:2> \} $ toward $ \{ <var:k> = <var:C> \land <var:g0> = <nat:2> \land <var:Y> = <nat:2> \times <var:C> \} $ . Stepping through , we have the binding command \verb | <var:Y> := <var:Y> + <var:g0> | . This moves $ \{ <var:k> = <var:C> \land <var:g0> = <nat:2> \land <var:Y> = <nat:2> \times <var:C> \} $ to the postcondition $ \{ <var:k> = <var:C> \land <var:Y> = <nat:2> \times <var:C> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:k> = <var:C> }} <var:g1> := <var:k> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:2> ; <var:Y> := <var:g1> <var:Y> := <var:Y> + <var:g0> {{ <var:Y> = <nat:2> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:g1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:g1> = <var:C> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:g1> = <nat:2> * <var:C> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:g0> = <nat:2> /\ <var:Y> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Y> = <nat:2> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 