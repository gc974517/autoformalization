\begin{document} \begin{theorem} We define the following code segment : \begin{verbatim} <var:w0> := <nat:4> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:m> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:m> ; <var:w2> := <var:w2> * <var:m> ; <var:Z> := <var:w2> ; <var:Z> := <var:Z> + <var:w1> ; <var:Z> := <var:Z> + <var:w0> \end{verbatim} Allow , given any $ <var:f> $ , that we have $ <var:m> = <var:f> $ ahead of interpreting the segment of code then we see $ <var:Z> = <nat:3> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:4> $ once program executes . \end{theorem} \begin{proof} The proof of this list of instructions is done by usual Hoare techniques . Observing the upcoming command in our program , we have the variable binding line \verb | <var:w0> := <nat:4> ; | . This code redefines the precondition $ \{ <var:m> = <var:f> \} $ into the postcondition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \} $ . This is deduced with the assignment law defined in Hoare techniques . Taking another step toward the next step contained in the list of commands , we have the variable binding statement yielding $ <nat:9> $ toward $ <var:w1>$ . This code forwards the precondition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \} $ to the condition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \} $ . Taking another step toward the upcoming line of code seen in our code , we have the assignment code assigning $ <var:w1> * <var:m> $ to $ <var:w1>$ . This moves the precondition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \} $ into the postcondition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \} $ . Going forward , we have the binding statement \verb | <var:w2> := <nat:3> ; | . This redefines $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \} $ as $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:w2> = <nat:3> \} $ . Paying attention to the subsequent bit of code contained in the program , the variable update command \verb | <var:w2> := <var:w2> * <var:m> ; | . This advances $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:w2> = <nat:3> \} $ toward the postcondition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:w2> = <nat:3> \cdot <var:f> \} $ . This is given through the assignment scheme found in usual Hoare logic . Moving on to the next piece of code seen in the series of instructions , we have the binding statement \verb | <var:w2> := <var:w2> * <var:m> ; | . This code moves $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:w2> = <nat:3> \cdot <var:f> \} $ to $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:w2> = <nat:3> \cdot <var:f> ^ <nat:2> \} $ . Advancing on , the variable update code defining $ <var:w2> $ into $ <var:Z>$ . This moves the condition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:w2> = <nat:3> \cdot <var:f> ^ <nat:2> \} $ toward the condition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:Z> = <nat:3> \cdot <var:f> ^ <nat:2> \} $ . This is deduced through the assignment rule of usual Hoare logic . Going forward , we see the variable update command yielding $ <var:Z> + <var:w1> $ to $ <var:Z>$ . This command takes the condition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:w1> = <nat:9> \cdot <var:f> \land <var:Z> = <nat:3> \cdot <var:f> ^ <nat:2> \} $ to the condition $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:Z> = <nat:3> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> \} $ . This is ensured with the assignment law from usual Hoare reasoning . After , we see the code \verb | <var:Z> := <var:Z> + <var:w0> | . This advances $ \{ <var:m> = <var:f> \land <var:w0> = <nat:4> \land <var:Z> = <nat:3> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> \} $ into the postcondition $ \{ <var:m> = <var:f> \land <var:Z> = <nat:3> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:m> = <var:f> }} <var:w0> := <nat:4> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:m> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:m> ; <var:w2> := <var:w2> * <var:m> ; <var:Z> := <var:w2> ; <var:Z> := <var:Z> + <var:w1> ; <var:Z> := <var:Z> + <var:w0> {{ <var:Z> = <nat:3> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:9> * <var:f> /\ <var:w2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:9> * <var:f> /\ <var:w2> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:9> * <var:f> /\ <var:w2> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:w0> = <nat:4> /\ <var:w1> = <nat:9> * <var:f> /\ <var:Z> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:w0> = <nat:4> /\ <var:Z> = <nat:3> * <var:f> ^ <nat:2> + <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:Z> = <nat:3> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 