\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:H> ; <var:t2> := <var:t1> * <var:H> ; <var:t0> := <nat:1> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:2> ; <var:j> := <var:t2> <var:j> := <var:j> + <var:t1> <var:j> := <var:j> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Allowing it to hold that $ <var:H> = <var:g> $ ahead of executing this set of instructions , it must be that $ <var:j> = <nat:2> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:g> \} \\ <var:t1> := <var:H> ; \\ \{ <var:H> = <var:g> \land <var:t1> = <var:g> \} \\ <var:t2> := <var:t1> * <var:H> ; \\ \{ <var:H> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <var:g> ^ <nat:2> \} \\ <var:t0> := <nat:1> ; \\ \{ <var:H> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <var:g> ^ <nat:2> \land <var:t0> = <nat:1> \} \\ <var:t1> := <var:t1> * <nat:3> ; \\ \{ <var:H> = <var:g> \land <var:t1> = <nat:3> * <var:g> \land <var:t2> = <var:g> ^ <nat:2> \land <var:t0> = <nat:1> \} \\ <var:t2> := <var:t2> * <nat:2> ; \\ \{ <var:H> = <var:g> \land <var:t1> = <nat:3> * <var:g> \land <var:t2> = <nat:2> * <var:g> ^ <nat:2> \land <var:t0> = <nat:1> \} \\ <var:j> := <var:t2> \\ \{ <var:H> = <var:g> \land <var:t1> = <nat:3> * <var:g> \land <var:t0> = <nat:1> \land <var:j> = <nat:2> * <var:g> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:t1> \\ \{ <var:H> = <var:g> \land <var:t0> = <nat:1> \land <var:j> = <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> \} \\ <var:j> := <var:j> + <var:t0> \\ \{ <var:H> = <var:g> \land <var:j> = <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> \} \end{eqnarray} Applying standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t1> := <var:H> ; <var:t2> := <var:t1> * <var:H> ; <var:t0> := <nat:1> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:2> ; <var:j> := <var:t2> <var:j> := <var:j> + <var:t1> <var:j> := <var:j> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:H> = <var:g> }} <def:poly> {{ <var:j> = <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:t1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:t1> = <var:g> /\ <var:t2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:t1> = <var:g> /\ <var:t2> = <var:g> ^ <nat:2> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:t1> = <nat:3> * <var:g> /\ <var:t2> = <var:g> ^ <nat:2> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:t1> = <nat:3> * <var:g> /\ <var:t2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:t1> = <nat:3> * <var:g> /\ <var:t0> = <nat:1> /\ <var:j> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:t0> = <nat:1> /\ <var:j> = <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:j> = <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 