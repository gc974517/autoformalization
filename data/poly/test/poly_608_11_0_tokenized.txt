\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:9> ; <var:Z2> := <nat:9> ; <var:Z2> := <var:Z2> * <var:N> ; <var:Z2> := <var:Z2> * <var:N> ; <var:Z3> := <nat:1> ; <var:Z3> := <var:Z3> * <var:N> ; <var:Z3> := <var:Z3> * <var:N> ; <var:Z3> := <var:Z3> * <var:N> ; <var:o> := <var:Z3> ; <var:o> := <var:o> + <var:Z2> ; <var:o> := <var:o> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Given ( given every integers $ <var:E> $ ) it to be that $ <var:N> = <var:E> $ prior to the execution of our series of commands , then we have $ <var:o> = <nat:1> \cdot <var:E> ^ <nat:3> + <nat:9> \cdot <var:E> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Notice this decorated program . \begin{eqnarray} \{ <var:N> = <var:E> \} \\ <var:Z0> := <nat:9> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \} \\ <var:Z2> := <nat:9> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:Z2> = <nat:9> \} \\ <var:Z2> := <var:Z2> * <var:N> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:Z2> = <nat:9> \cdot <var:E> \} \\ <var:Z2> := <var:Z2> * <var:N> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:Z2> = <nat:9> \cdot <var:E> ^ <nat:2> \} \\ <var:Z3> := <nat:1> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:Z2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:Z3> = <nat:1> \} \end{eqnarray} Furthering running this code gives us : \begin{eqnarray} <var:Z3> := <var:Z3> * <var:N> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:Z2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:Z3> = <nat:1> \cdot <var:E> \} \\ <var:Z3> := <var:Z3> * <var:N> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:Z2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:Z3> = <nat:1> \cdot <var:E> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:N> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:Z2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:Z3> = <nat:1> \cdot <var:E> ^ <nat:3> \} \\ <var:o> := <var:Z3> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:Z2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:o> = <nat:1> \cdot <var:E> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:Z2> ; \\ \{ <var:N> = <var:E> \land <var:Z0> = <nat:9> \land <var:o> = <nat:1> \cdot <var:E> ^ <nat:3> + <nat:9> \cdot <var:E> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:Z0> \\ \{ <var:N> = <var:E> \land <var:o> = <nat:1> \cdot <var:E> ^ <nat:3> + <nat:9> \cdot <var:E> ^ <nat:2> + <nat:9> \} \end{eqnarray} Utilizing Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:9> ; <var:Z2> := <nat:9> ; <var:Z2> := <var:Z2> * <var:N> ; <var:Z2> := <var:Z2> * <var:N> ; <var:Z3> := <nat:1> ; <var:Z3> := <var:Z3> * <var:N> ; <var:Z3> := <var:Z3> * <var:N> ; <var:Z3> := <var:Z3> * <var:N> ; <var:o> := <var:Z3> ; <var:o> := <var:o> + <var:Z2> ; <var:o> := <var:o> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:N> = <var:E> }} <def:poly> {{ <var:o> = <nat:1> * <var:E> ^ <nat:3> + <nat:9> * <var:E> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:Z2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:Z2> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:Z2> = <nat:9> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:Z2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:Z3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:Z2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:Z2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:Z2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:Z2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:o> = <nat:1> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:Z0> = <nat:9> /\ <var:o> = <nat:1> * <var:E> ^ <nat:3> + <nat:9> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:o> = <nat:1> * <var:E> ^ <nat:3> + <nat:9> * <var:E> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 