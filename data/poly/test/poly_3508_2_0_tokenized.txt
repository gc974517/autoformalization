\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:1> ; <var:L> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:m> = <var:K> $ ahead of interpreting our segment of code , then we see $ <var:L> = <nat:1> $ when series of commands is done . \end{theorem} \begin{proof} The proof of the code segment can be accomplished using standard Hoare logic . Advancing to the upcoming command seen in the segment of code , the variable assignmet code assigning $ <nat:1> $ as $ <var:f0>$ . This transfers $ \{ <var:m> = <var:K> \} $ toward the postcondition $ \{ <var:m> = <var:K> \land <var:f0> = <nat:1> \} $ . This is ensured using the assignment inference rule defined by standard Hoare logic . Going forward , the binding line giving $ <var:f0$ as $ <var:L>$ . This statement advances the precondition $ \{ <var:m> = <var:K> \land <var:f0> = <nat:1> \} $ toward $ \{ <var:m> = <var:K> \land <var:L> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:1> ; <var:L> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:m> = <var:K> }} <def:poly> {{ <var:L> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:L> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 