\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:N> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:M> := <var:Z1> <var:M> := <var:M> + <var:Z0> \end{verbatim} Given that we have $ <var:N> = <var:d> $ before the evaluation of this code , it holds that we see $ <var:M> = <nat:2> \times <var:d> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:N> = <var:d> \} \\ <var:Z1> := <var:N> ; \\ \{ <var:N> = <var:d> \land <var:Z1> = <var:d> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:N> = <var:d> \land <var:Z1> = <var:d> \land <var:Z0> = <nat:1> \} \\ <var:Z1> := <var:Z1> * <nat:2> ; \\ \{ <var:N> = <var:d> \land <var:Z1> = <nat:2> * <var:d> \land <var:Z0> = <nat:1> \} \\ <var:M> := <var:Z1> \\ \{ <var:N> = <var:d> \land <var:Z0> = <nat:1> \land <var:M> = <nat:2> * <var:d> \} \end{eqnarray} Furthering executing the list of instructions returns : \begin{eqnarray} <var:M> := <var:M> + <var:Z0> \\ \{ <var:N> = <var:d> \land <var:M> = <nat:2> * <var:d> + <nat:1> \} \end{eqnarray} Given the preceding argument , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:N> = <var:d> }} <var:Z1> := <var:N> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:M> := <var:Z1> <var:M> := <var:M> + <var:Z0> {{ <var:M> = <nat:2> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:Z1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:Z1> = <var:d> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:Z1> = <nat:2> * <var:d> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:Z0> = <nat:1> /\ <var:M> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:M> = <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 