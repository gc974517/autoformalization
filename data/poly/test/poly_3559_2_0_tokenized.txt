\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:2> ; <var:s> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:I> = <var:A> $ before the evaluation of the code segment , it follows that $ <var:s> = <nat:2> $ after segment of code is done executing . \end{theorem} \begin{proof} The flow of logic for this list of commands can be shown with standard Hoare logic . Advancing to the next step , we see the binding code \verb | <var:x0> := <nat:2> ; | . This statement advances $ \{ <var:I> = <var:A> \} $ toward $ \{ <var:I> = <var:A> \land <var:x0> = <nat:2> \} $ . This is deduced through the assignment rule given by typical Hoare logic . Advancing to the next step , we see the binding line \verb | <var:s> := <var:x0> | . This takes the condition $ \{ <var:I> = <var:A> \land <var:x0> = <nat:2> \} $ toward the postcondition $ \{ <var:I> = <var:A> \land <var:s> = <nat:2> \} $ . This is given by the assignment scheme of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:2> ; <var:s> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:I> = <var:A> }} <def:poly> {{ <var:s> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:s> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 