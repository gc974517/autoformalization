\begin{document} \begin{theorem} Take the following code segment as \begin{verbatim} <var:F0> := <nat:1> ; <var:K> := <var:F0> \end{verbatim} Allowing it to be that $ <var:S> = <var:A> $ before the execution of our segment of code it holds that we see $ <var:K> = <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:S> = <var:A> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:S> = <var:A> \land <var:F0> = <nat:1> \} \\ <var:K> := <var:F0> \\ \{ <var:S> = <var:A> \land <var:K> = <nat:1> \} \end{eqnarray} Thus , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:S> = <var:A> }} <var:F0> := <nat:1> ; <var:K> := <var:F0> {{ <var:K> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:A> /\ <var:K> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 