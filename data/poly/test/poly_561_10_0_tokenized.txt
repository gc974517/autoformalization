\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:8> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:p> ; <var:y3> := <nat:6> ; <var:y3> := <var:y3> * <var:p> ; <var:y3> := <var:y3> * <var:p> ; <var:y3> := <var:y3> * <var:p> ; <var:S> := <var:y3> ; <var:S> := <var:S> + <var:y1> ; <var:S> := <var:S> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume , given positive numbers $ <var:Q> $ , it to be that $ <var:p> = <var:Q> $ prior to the execution of the program it must be that we have $ <var:S> = <nat:6> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> + <nat:8> $ when set of commands has finished . \end{theorem} \begin{proof} The method of proof for the segment of code can be accomplished by typical Hoare reasoning . Following , the environment update command letting $ <nat:8> $ toward $ <var:y0>$ . This transfers the precondition $ \{ <var:p> = <var:Q> \} $ into the postcondition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \} $ . This is ensured with the assignment inference rule of standard Hoare reasoning . Moving forward , we have the variable assignmet command giving $ <nat:4> $ into $ <var:y1>$ . This code transfers $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \} $ into $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \} $ . Advancing to the following command in our code segment , we see the assignment code defining $ <var:y1> * <var:p> $ as $ <var:y1>$ . This command forwards $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \} $ to $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \} $ . This is deduced using the assignment rule obtained from usual Hoare logic . Advancing on , the variable update command \verb | <var:y3> := <nat:6> ; | . This transfers the precondition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \} $ as $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:y3> = <nat:6> \} $ . This is guaranteed through the assignment scheme from Hoare techniques . Moving forward to the next bit of code in the set of instructions , we have the variable assignmet command assigning $ <var:y3> * <var:p> $ toward $ <var:y3>$ . This command advances the precondition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:y3> = <nat:6> \} $ to the condition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:y3> = <nat:6> \times <var:Q> \} $ . This is ensured by the assignment law defined in standard Hoare reasoning . Next , we see the variable update statement letting $ <var:y3> * <var:p> $ into $ <var:y3>$ . This redefines $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:y3> = <nat:6> \times <var:Q> \} $ to the postcondition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:y3> = <nat:6> \times <var:Q> ^ <nat:2> \} $ . This is guaranteed by the assignment scheme given in standard Hoare logic . Now , we see the code yielding $ <var:y3> * <var:p> $ into $ <var:y3>$ . This forwards the condition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:y3> = <nat:6> \times <var:Q> ^ <nat:2> \} $ to $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:y3> = <nat:6> \times <var:Q> ^ <nat:3> \} $ . This is known to be sound with the assignment inference rule from standard Hoare reasoning . Advancing to the upcoming statement in our list of commands , the variable binding command \verb | <var:S> := <var:y3> ; | . This code advances the condition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:y3> = <nat:6> \times <var:Q> ^ <nat:3> \} $ to the condition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:S> = <nat:6> \times <var:Q> ^ <nat:3> \} $ . After , we have the variable assignmet code defining $ <var:S> + <var:y1> $ as $ <var:S>$ . This forwards the precondition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:y1> = <nat:4> \times <var:Q> \land <var:S> = <nat:6> \times <var:Q> ^ <nat:3> \} $ as the postcondition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:S> = <nat:6> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> \} $ . Jumping to the next statement seen in our segment of code , we see the variable assignmet line \verb | <var:S> := <var:S> + <var:y0> | . This advances the condition $ \{ <var:p> = <var:Q> \land <var:y0> = <nat:8> \land <var:S> = <nat:6> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> \} $ to the postcondition $ \{ <var:p> = <var:Q> \land <var:S> = <nat:6> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y0> := <nat:8> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:p> ; <var:y3> := <nat:6> ; <var:y3> := <var:y3> * <var:p> ; <var:y3> := <var:y3> * <var:p> ; <var:y3> := <var:y3> * <var:p> ; <var:S> := <var:y3> ; <var:S> := <var:S> + <var:y1> ; <var:S> := <var:S> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:p> = <var:Q> }} <def:poly> {{ <var:S> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:4> * <var:Q> /\ <var:y3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:4> * <var:Q> /\ <var:y3> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:4> * <var:Q> /\ <var:y3> = <nat:6> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:4> * <var:Q> /\ <var:y3> = <nat:6> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:4> * <var:Q> /\ <var:S> = <nat:6> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:y0> = <nat:8> /\ <var:S> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:S> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 