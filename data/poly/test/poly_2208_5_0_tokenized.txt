\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:7> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:f> ; <var:e> := <var:i1> ; <var:e> := <var:e> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:f> = <var:X> $ --- for $ <var:X> $ --- prior to executing this series of instructions it holds that we see $ <var:e> = <nat:6> \times <var:X> + <nat:7> $ once set of instructions is done . \end{theorem} \begin{proof} The flow of logic for the code can be done by typical Hoare reasoning . Moving onward , we see \begin{verbatim} { <var:f> = <var:X> } <var:i0> := <nat:7> { <var:f> = <var:X> \land <var:i0> = <nat:7> } { <var:f> = <var:X> \land <var:i0> = <nat:7> } <var:i1> := <nat:6> { <var:f> = <var:X> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> } { <var:f> = <var:X> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> } <var:i1> := <var:i1> * <var:f> { <var:f> = <var:X> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> * <var:X> } { <var:f> = <var:X> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> * <var:X> } <var:e> := <var:i1> { <var:f> = <var:X> \land <var:i0> = <nat:7> \land <var:e> = <nat:6> * <var:X> } \end{verbatim} This is shown by the variable update law defined in standard Hoare reasoning . Moving forward to the next step in the set of instructions , \begin{verbatim} { <var:f> = <var:X> } <var:i0> := <nat:7> { <var:f> = <var:X> \land <var:i0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:7> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:f> ; <var:e> := <var:i1> ; <var:e> := <var:e> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <def:poly> {{ <var:e> = <nat:6> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:i0> = <nat:7> /\ <var:e> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:e> = <nat:6> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 