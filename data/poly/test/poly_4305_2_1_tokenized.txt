\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:4> ; <var:x> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allowing $ <var:H> = <var:k> $ --- given all natural coefficients $ <var:k> $ --- prior to executing the series of instructions it holds that we have $ <var:x> = <nat:4> $ . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:H> = <var:k> \} \\ <var:w0> := <nat:4> ; \\ \{ <var:H> = <var:k> \land <var:w0> = <nat:4> \} \\ <var:x> := <var:w0> \\ \{ <var:H> = <var:k> \land <var:x> = <nat:4> \} \end{eqnarray} Thus , this set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:4> ; <var:x> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:H> = <var:k> }} <def:poly> {{ <var:x> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:x> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 