\begin{document} \begin{theorem} Take a code : \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:G> ; <var:q> := <var:w1> ; <var:q> := <var:q> + <var:w0> \end{verbatim} Assuming it to hold that $ <var:G> = <var:J> $ before the execution of our code , it must be that we have $ <var:q> = <nat:2> * <var:J> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program can be demonstrated using usual Hoare techniques . Jumping to the following bits of codecontained in the list of commands , \[ \begin{tabular} {rcl} \{ <var:G> = <var:J> \} & <var:w0> := <nat:3> & \{ <var:G> = <var:J> \land <var:w0> = <nat:3> \} \\ \{ <var:G> = <var:J> \land <var:w0> = <nat:3> \} & <var:w1> := <nat:2> & \{ <var:G> = <var:J> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \} \\ \{ <var:G> = <var:J> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \} & <var:w1> := <var:w1> * <var:G> & \{ <var:G> = <var:J> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \times <var:J> \} \\ \{ <var:G> = <var:J> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \times <var:J> \} & <var:q> := <var:w1> & \{ <var:G> = <var:J> \land <var:w0> = <nat:3> \land <var:q> = <nat:2> \times <var:J> \} \\ \{ <var:G> = <var:J> \land <var:w0> = <nat:3> \land <var:q> = <nat:2> \times <var:J> \} & <var:q> := <var:q> + <var:w0& \{ <var:G> = <var:J> \land <var:q> = <nat:2> \times <var:J> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:G> = <var:J> }} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:G> ; <var:q> := <var:w1> ; <var:q> := <var:q> + <var:w0> {{ <var:q> = <nat:2> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:w0> = <nat:3> /\ <var:q> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:q> = <nat:2> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 