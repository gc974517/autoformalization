\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:Q> ; <var:V2> := <var:V1> * <var:Q> ; <var:V3> := <var:V2> * <var:Q> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:9> ; <var:V2> := <var:V2> * <nat:9> ; <var:V3> := <var:V3> * <nat:1> ; <var:z> := <var:V3> <var:z> := <var:z> + <var:V2> <var:z> := <var:z> + <var:V1> <var:z> := <var:z> + <var:V0> \end{verbatim} Allowing --- for all $ <var:w> \in \mathbb{N} $ --- it to be that $ <var:Q> = <var:w> $ before interpreting the list of instructions it must be that we have $ <var:z> = <nat:1> \times <var:w> ^ <nat:3> + <nat:9> \times <var:w> ^ <nat:2> + <nat:9> \times <var:w> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:w> \} \\ <var:V1> := <var:Q> ; \\ \{ <var:Q> = <var:w> \land <var:V1> = <var:w> \} \\ <var:V2> := <var:V1> * <var:Q> ; \\ \{ <var:Q> = <var:w> \land <var:V1> = <var:w> \land <var:V2> = <var:w> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:Q> ; \\ \{ <var:Q> = <var:w> \land <var:V1> = <var:w> \land <var:V2> = <var:w> ^ <nat:2> \land <var:V3> = <var:w> ^ <nat:3> \} \\ <var:V0> := <nat:5> ; \\ \{ <var:Q> = <var:w> \land <var:V1> = <var:w> \land <var:V2> = <var:w> ^ <nat:2> \land <var:V3> = <var:w> ^ <nat:3> \land <var:V0> = <nat:5> \} \\ <var:V1> := <var:V1> * <nat:9> ; \\ \{ <var:Q> = <var:w> \land <var:V1> = <nat:9> * <var:w> \land <var:V2> = <var:w> ^ <nat:2> \land <var:V3> = <var:w> ^ <nat:3> \land <var:V0> = <nat:5> \} \\ <var:V2> := <var:V2> * <nat:9> ; \\ \{ <var:Q> = <var:w> \land <var:V1> = <nat:9> * <var:w> \land <var:V2> = <nat:9> * <var:w> ^ <nat:2> \land <var:V3> = <var:w> ^ <nat:3> \land <var:V0> = <nat:5> \} \end{eqnarray} Continuing the evaluation of this list of instructions produces : \begin{eqnarray} <var:V3> := <var:V3> * <nat:1> ; \\ \{ <var:Q> = <var:w> \land <var:V1> = <nat:9> * <var:w> \land <var:V2> = <nat:9> * <var:w> ^ <nat:2> \land <var:V3> = <nat:1> * <var:w> ^ <nat:3> \land <var:V0> = <nat:5> \} \\ <var:z> := <var:V3> \\ \{ <var:Q> = <var:w> \land <var:V1> = <nat:9> * <var:w> \land <var:V2> = <nat:9> * <var:w> ^ <nat:2> \land <var:V0> = <nat:5> \land <var:z> = <nat:1> * <var:w> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:V2> \\ \{ <var:Q> = <var:w> \land <var:V1> = <nat:9> * <var:w> \land <var:V0> = <nat:5> \land <var:z> = <nat:1> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:V1> \\ \{ <var:Q> = <var:w> \land <var:V0> = <nat:5> \land <var:z> = <nat:1> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:9> * <var:w> \} \\ <var:z> := <var:z> + <var:V0> \\ \{ <var:Q> = <var:w> \land <var:z> = <nat:1> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:5> \} \end{eqnarray} Using usual Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Q> = <var:w> }} <var:V1> := <var:Q> ; <var:V2> := <var:V1> * <var:Q> ; <var:V3> := <var:V2> * <var:Q> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:9> ; <var:V2> := <var:V2> * <nat:9> ; <var:V3> := <var:V3> * <nat:1> ; <var:z> := <var:V3> <var:z> := <var:z> + <var:V2> <var:z> := <var:z> + <var:V1> <var:z> := <var:z> + <var:V0> {{ <var:z> = <nat:1> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <var:w> /\ <var:V2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <var:w> /\ <var:V2> = <var:w> ^ <nat:2> /\ <var:V3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <var:w> /\ <var:V2> = <var:w> ^ <nat:2> /\ <var:V3> = <var:w> ^ <nat:3> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <nat:9> * <var:w> /\ <var:V2> = <var:w> ^ <nat:2> /\ <var:V3> = <var:w> ^ <nat:3> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <nat:9> * <var:w> /\ <var:V2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:V3> = <var:w> ^ <nat:3> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <nat:9> * <var:w> /\ <var:V2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:w> ^ <nat:3> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <nat:9> * <var:w> /\ <var:V2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:V0> = <nat:5> /\ <var:z> = <nat:1> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V1> = <nat:9> * <var:w> /\ <var:V0> = <nat:5> /\ <var:z> = <nat:1> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:V0> = <nat:5> /\ <var:z> = <nat:1> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:z> = <nat:1> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 