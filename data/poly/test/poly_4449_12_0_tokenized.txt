\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:1> ; <var:R2> := <nat:3> ; <var:R2> := <var:R2> * <var:e> ; <var:R2> := <var:R2> * <var:e> ; <var:R4> := <nat:1> ; <var:R4> := <var:R4> * <var:e> ; <var:R4> := <var:R4> * <var:e> ; <var:R4> := <var:R4> * <var:e> ; <var:R4> := <var:R4> * <var:e> ; <var:S> := <var:R4> ; <var:S> := <var:S> + <var:R2> ; <var:S> := <var:S> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Assuming it to hold that $ <var:e> = <var:Y> $ ahead of evaluating our code , it holds that we see $ <var:S> = <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:1> $ after program exits . \end{theorem} \begin{proof} The argument for the segment of code is accomplished by typical Hoare techniques . Moving on to the next step , we have the variable binding code \verb | <var:R0> := <nat:1> ; | . This transfers the condition $ \{ <var:e> = <var:Y> \} $ to the condition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \} $ . This is guaranteed using the assignment law given in Hoare techniques . Considering the next command seen in the list of instructions , the environment update line defining $ <nat:3> $ as $ <var:R2>$ . This command forwards the precondition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \} $ as the postcondition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \} $ . This is rigorously given with the assignment law given by standard Hoare reasoning . Moving on , the binding command letting $ <var:R2> * <var:e> $ toward $ <var:R2>$ . This line moves the condition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \} $ toward $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> \} $ . This is given with the assignment scheme given by Hoare reasoning . Focusing on the subsequent step contained in our segment of code , we see the variable update code \verb | <var:R2> := <var:R2> * <var:e> ; | . This transfers the precondition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> \} $ as $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \} $ . Taking another step toward the following line contained in our program , the variable assignmet statement binding $ <nat:1> $ to $ <var:R4>$ . This takes the condition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \} $ to $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \} $ . This is known to be sound with the assignment inference rule of typical Hoare reasoning . Stepping forward , we see the assignment code binding $ <var:R4> * <var:e> $ to $ <var:R4>$ . This command transfers the condition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \} $ toward $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \times <var:Y> \} $ . This is deduced using the assignment scheme obtained from standard Hoare techniques . Next , we have the variable update line defining $ <var:R4> * <var:e> $ to $ <var:R4>$ . This transfers $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \times <var:Y> \} $ into $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \times <var:Y> ^ <nat:2> \} $ . Moving forward to the subsequent line of code found in the list of instructions , the variable assignmet statement \verb | <var:R4> := <var:R4> * <var:e> ; | . This redefines the precondition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \times <var:Y> ^ <nat:2> \} $ into $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \times <var:Y> ^ <nat:3> \} $ . Moving on to the next step , the assignment command giving $ <var:R4> * <var:e> $ into $ <var:R4>$ . This command forwards the condition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \times <var:Y> ^ <nat:3> \} $ toward $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \times <var:Y> ^ <nat:4> \} $ . Considering the following statement contained in our code segment , the statement binding $ <var:R4> $ into $ <var:S>$ . This advances $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:R4> = <nat:1> \times <var:Y> ^ <nat:4> \} $ as the postcondition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:S> = <nat:1> \times <var:Y> ^ <nat:4> \} $ . This is deduced through the assignment rule in standard Hoare reasoning . Advancing to the upcoming bit of code contained in our code segment , we see the variable binding command \verb | <var:S> := <var:S> + <var:R2> ; | . This forwards the condition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:R2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:S> = <nat:1> \times <var:Y> ^ <nat:4> \} $ to $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:S> = <nat:1> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law given by standard Hoare reasoning . Considering the upcoming bit of code contained in our series of instructions , we have the command \verb | <var:S> := <var:S> + <var:R0> | . This code takes the precondition $ \{ <var:e> = <var:Y> \land <var:R0> = <nat:1> \land <var:S> = <nat:1> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:2> \} $ to the postcondition $ \{ <var:e> = <var:Y> \land <var:S> = <nat:1> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:2> + <nat:1> \} $ . This is known to be sound using the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R4> : string := " <var:R4> " . Definition <def:poly> := <var:R0> := <nat:1> ; <var:R2> := <nat:3> ; <var:R2> := <var:R2> * <var:e> ; <var:R2> := <var:R2> * <var:e> ; <var:R4> := <nat:1> ; <var:R4> := <var:R4> * <var:e> ; <var:R4> := <var:R4> * <var:e> ; <var:R4> := <var:R4> * <var:e> ; <var:R4> := <var:R4> * <var:e> ; <var:S> := <var:R4> ; <var:S> := <var:S> + <var:R2> ; <var:S> := <var:S> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:e> = <var:Y> }} <def:poly> {{ <var:S> = <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:R4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:R4> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:R4> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:R4> = <nat:1> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:R4> = <nat:1> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:R2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:S> = <nat:1> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:R0> = <nat:1> /\ <var:S> = <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:S> = <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 