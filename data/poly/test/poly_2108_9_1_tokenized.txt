\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:L1> := <var:G> ; <var:L2> := <var:L1> * <var:G> ; <var:L3> := <var:L2> * <var:G> ; <var:L0> := <nat:1> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:6> ; <var:o> := <var:L3> <var:o> := <var:o> + <var:L2> <var:o> := <var:o> + <var:L0> \end{verbatim} Allow that $ <var:G> = <var:U> $ prior to the evaluation of the set of commands then $ <var:o> = <nat:6> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our segment of code can be demonstrated by this decorated series of instructions . \begin{eqnarray} \{ <var:G> = <var:U> \} \\ <var:L1> := <var:G> ; \\ \{ <var:G> = <var:U> \land <var:L1> = <var:U> \} \\ <var:L2> := <var:L1> * <var:G> ; \\ \{ <var:G> = <var:U> \land <var:L1> = <var:U> \land <var:L2> = <var:U> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:G> ; \\ \{ <var:G> = <var:U> \land <var:L1> = <var:U> \land <var:L2> = <var:U> ^ <nat:2> \land <var:L3> = <var:U> ^ <nat:3> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:G> = <var:U> \land <var:L1> = <var:U> \land <var:L2> = <var:U> ^ <nat:2> \land <var:L3> = <var:U> ^ <nat:3> \land <var:L0> = <nat:1> \} \\ <var:L2> := <var:L2> * <nat:4> ; \\ \{ <var:G> = <var:U> \land <var:L1> = <var:U> \land <var:L2> = <nat:4> \times <var:U> ^ <nat:2> \land <var:L3> = <var:U> ^ <nat:3> \land <var:L0> = <nat:1> \} \\ <var:L3> := <var:L3> * <nat:6> ; \\ \{ <var:G> = <var:U> \land <var:L1> = <var:U> \land <var:L2> = <nat:4> \times <var:U> ^ <nat:2> \land <var:L3> = <nat:6> \times <var:U> ^ <nat:3> \land <var:L0> = <nat:1> \} \\ <var:o> := <var:L3> \\ \{ <var:G> = <var:U> \land <var:L1> = <var:U> \land <var:L2> = <nat:4> \times <var:U> ^ <nat:2> \land <var:L0> = <nat:1> \land <var:o> = <nat:6> \times <var:U> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:L2> \\ \{ <var:G> = <var:U> \land <var:L1> = <var:U> \land <var:L0> = <nat:1> \land <var:o> = <nat:6> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:L0> \\ \{ <var:G> = <var:U> \land <var:o> = <nat:6> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:1> \} \end{eqnarray} Using usual Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:G> = <var:U> }} <var:L1> := <var:G> ; <var:L2> := <var:L1> * <var:G> ; <var:L3> := <var:L2> * <var:G> ; <var:L0> := <nat:1> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:6> ; <var:o> := <var:L3> <var:o> := <var:o> + <var:L2> <var:o> := <var:o> + <var:L0> {{ <var:o> = <nat:6> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:L1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:L1> = <var:U> /\ <var:L2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:L1> = <var:U> /\ <var:L2> = <var:U> ^ <nat:2> /\ <var:L3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:L1> = <var:U> /\ <var:L2> = <var:U> ^ <nat:2> /\ <var:L3> = <var:U> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:L1> = <var:U> /\ <var:L2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:L3> = <var:U> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:L1> = <var:U> /\ <var:L2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:L3> = <nat:6> * <var:U> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:L1> = <var:U> /\ <var:L2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:L0> = <nat:1> /\ <var:o> = <nat:6> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:L1> = <var:U> /\ <var:L0> = <nat:1> /\ <var:o> = <nat:6> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:U> /\ <var:o> = <nat:6> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 