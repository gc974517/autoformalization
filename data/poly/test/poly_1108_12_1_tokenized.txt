\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:T1> := <var:g> ; <var:T2> := <var:T1> * <var:g> ; <var:T3> := <var:T2> * <var:g> ; <var:T4> := <var:T3> * <var:g> ; <var:T0> := <nat:9> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:3> ; <var:T4> := <var:T4> * <nat:8> ; <var:V> := <var:T4> <var:V> := <var:V> + <var:T2> <var:V> := <var:V> + <var:T1> <var:V> := <var:V> + <var:T0> \end{verbatim} Given $ <var:g> = <var:x> $ prior to the execution of this list of instructions then we have $ <var:V> = <nat:8> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our segment of code is evident using standard Hoare reasoning . Going forward , we see the code \verb | <var:T1> := <var:g> ; | . This redefines the condition $ \{ <var:g> = <var:x> \} $ toward the postcondition $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \} $ . This is sound by the assignment rule from typical Hoare techniques . Jumping to the following line found in the code segment , we see the binding line \verb | <var:T2> := <var:T1> * <var:g> ; | . This transfers the condition $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \} $ toward $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \} $ . This is rigorously given by the assignment scheme from Hoare reasoning . Immediately after , we see the variable binding code giving $ <var:T2> * <var:g> $ into $ <var:T3>$ . This code redefines $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \} $ into $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \} $ . Advancing , we see the variable assignmet code binding $ <var:T3> * <var:g> $ toward $ <var:T4>$ . This transfers $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \} $ toward $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <var:x> ^ <nat:4> \} $ . Advancing , we have the assignment code \verb | <var:T0> := <nat:9> ; | . This command forwards the condition $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <var:x> ^ <nat:4> \} $ toward the condition $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <var:x> ^ <nat:4> \land <var:T0> = <nat:9> \} $ . This is sound using the assignment rule obtained from usual Hoare reasoning . Taking a look at the next line seen in the series of instructions , we see the assignment statement \verb | <var:T1> := <var:T1> * <nat:7> ; | . This code advances the precondition $ \{ <var:g> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <var:x> ^ <nat:4> \land <var:T0> = <nat:9> \} $ as the condition $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <var:x> ^ <nat:4> \land <var:T0> = <nat:9> \} $ . This is ensured with the assignment law in Hoare reasoning . Moving on to the next line seen in our set of instructions , the command binding $ <var:T2> * <nat:3> $ as $ <var:T2>$ . This moves $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <var:x> ^ <nat:4> \land <var:T0> = <nat:9> \} $ toward the condition $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <var:x> ^ <nat:4> \land <var:T0> = <nat:9> \} $ . This is guaranteed using the assignment inference rule found in typical Hoare reasoning . Taking another step toward the upcoming bit of code contained in our series of commands , we have the assignment line \verb | <var:T4> := <var:T4> * <nat:8> ; | . This code takes the precondition $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <var:x> ^ <nat:4> \land <var:T0> = <nat:9> \} $ into the condition $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <nat:8> \cdot <var:x> ^ <nat:4> \land <var:T0> = <nat:9> \} $ . This is known to be sound using the assignment rule from Hoare techniques . Moving onward , we see the binding code \verb | <var:V> := <var:T4> | . This command takes $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T4> = <nat:8> \cdot <var:x> ^ <nat:4> \land <var:T0> = <nat:9> \} $ toward the condition $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:x> ^ <nat:4> \} $ . This is deduced with the assignment scheme obtained from Hoare logic . Paying attention to the next piece of code found in the set of instructions , the variable update code binding $ <var:V> + <var:T2$ to $ <var:V>$ . This command transfers $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:x> ^ <nat:4> \} $ to the condition $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:2> \} $ . Considering the subsequent step contained in the set of commands , we have the binding code giving $ <var:V> + <var:T1$ toward $ <var:V>$ . This transfers the precondition $ \{ <var:g> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:2> \} $ into the postcondition $ \{ <var:g> = <var:x> \land <var:T0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> \} $ . Honing in on the following line of code seen in our code segment , we have the assignment code \verb | <var:V> := <var:V> + <var:T0> | . This statement transfers $ \{ <var:g> = <var:x> \land <var:T0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> \} $ into $ \{ <var:g> = <var:x> \land <var:V> = <nat:8> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> + <nat:9> \} $ . This is sound by the assignment rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <var:T4> : string := " <var:T4> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:g> = <var:x> }} <var:T1> := <var:g> ; <var:T2> := <var:T1> * <var:g> ; <var:T3> := <var:T2> * <var:g> ; <var:T4> := <var:T3> * <var:g> ; <var:T0> := <nat:9> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:3> ; <var:T4> := <var:T4> * <nat:8> ; <var:V> := <var:T4> <var:V> := <var:V> + <var:T2> <var:V> := <var:V> + <var:T1> <var:V> := <var:V> + <var:T0> {{ <var:V> = <nat:8> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <var:x> /\ <var:T2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <var:x> /\ <var:T2> = <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <var:x> /\ <var:T2> = <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <var:x> /\ <var:T2> = <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T4> = <var:x> ^ <nat:4> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T2> = <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T4> = <var:x> ^ <nat:4> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T4> = <var:x> ^ <nat:4> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T4> = <nat:8> * <var:x> ^ <nat:4> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T0> = <nat:9> /\ <var:V> = <nat:8> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T0> = <nat:9> /\ <var:V> = <nat:8> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:9> /\ <var:V> = <nat:8> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:V> = <nat:8> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 