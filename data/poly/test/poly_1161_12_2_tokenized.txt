\begin{document} \begin{theorem} Define a list of instructions as \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <var:S> * <var:t> ; <var:S> := <var:S> * <var:t> ; <var:S> := <nat:3> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:2> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:3> + <var:S> * <var:t> ; <var:S> := <nat:3> + <var:S> * <var:t> \end{verbatim} Given it to hold that $ <var:t> = <var:W> $ --- with some positive numbers $ <var:W> $ --- before the execution of this set of instructions , then we have $ <var:S> = <nat:1> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> $ once segment of code is done executing . \end{theorem} \begin{proof} The proof of this segment of code can be accomplished through typical Hoare reasoning . Moving onward , we see \verb | { <var:t> = <var:W> } <var:S> := <nat:1> { <var:t> = <var:W> \land <var:S> = <nat:1> } | , \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> } <var:S> := <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> + } | , \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> + } <var:S> := <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:2> + } | , \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:2> + } <var:S> := <nat:3> + <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> } | , \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> } <var:S> := <nat:4> + <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> + <nat:4> } | , \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> + <nat:4> } <var:S> := <nat:2> + <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:2> } | , \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:2> } <var:S> := <nat:4> + <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:4> } | , \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:4> } <var:S> := <nat:1> + <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:4> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:1> } | , \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:4> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:1> } <var:S> := <nat:4> + <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:4> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:4> } | and \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:4> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:4> } <var:S> := <nat:1> + <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:4> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:4> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:1> } | . Moving forward to the next steps contained in our list of commands , we see \verb | { <var:t> = <var:W> } <var:S> := <nat:1> { <var:t> = <var:W> \land <var:S> = <nat:1> } | and \verb | { <var:t> = <var:W> \land <var:S> = <nat:1> } <var:S> := <var:S> * <var:t> { <var:t> = <var:W> \land <var:S> = <nat:1> \cdot <var:W> + } | . This is shown to be logically sound with the variable update rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:t> = <var:W> }} <var:S> := <nat:1> ; <var:S> := <var:S> * <var:t> ; <var:S> := <var:S> * <var:t> ; <var:S> := <nat:3> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:2> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:3> + <var:S> * <var:t> ; <var:S> := <nat:3> + <var:S> * <var:t> {{ <var:S> = <nat:1> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:4> + <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:W> /\ <var:S> = <nat:1> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 