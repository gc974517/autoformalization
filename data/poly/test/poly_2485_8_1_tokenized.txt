\begin{document} \begin{theorem} Consider a set of commands : \begin{verbatim} <var:x1> := <var:h> ; <var:x2> := <var:x1> * <var:h> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:1> ; <var:x2> := <var:x2> * <nat:1> ; <var:p> := <var:x2> <var:p> := <var:p> + <var:x1> <var:p> := <var:p> + <var:x0> \end{verbatim} Allow $ <var:h> = <var:L> $ prior to interpreting the segment of code it follows that $ <var:p> = <nat:1> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> $ when set of commands executes . \end{theorem} \begin{proof} The method of proof for this set of instructions is accomplished by typical Hoare reasoning . Shifting focus toward the following pieces of code seen in the code segment , \verb | { <var:h> = <var:L> } <var:x1> := <var:h> { <var:h> = <var:L> \land <var:x1> = <var:L> } | , \verb | { <var:h> = <var:L> \land <var:x1> = <var:L> } <var:x2> := <var:x1> * <var:h> { <var:h> = <var:L> \land <var:x1> = <var:L> \land <var:x2> = <var:L> ^ <nat:2> } | , \verb | { <var:h> = <var:L> \land <var:x1> = <var:L> \land <var:x2> = <var:L> ^ <nat:2> } <var:x0> := <nat:2> { <var:h> = <var:L> \land <var:x1> = <var:L> \land <var:x2> = <var:L> ^ <nat:2> \land <var:x0> = <nat:2> } | and \verb | { <var:h> = <var:L> \land <var:x1> = <var:L> \land <var:x2> = <var:L> ^ <nat:2> \land <var:x0> = <nat:2> } <var:x1> := <var:x1> * <nat:1> { <var:h> = <var:L> \land <var:x1> = <nat:1> \times <var:L> \land <var:x2> = <var:L> ^ <nat:2> \land <var:x0> = <nat:2> } | . This is known to be sound with the scheme of standard Hoare logic . Jumping to the following pieces of code found in our series of instructions , \verb | { <var:h> = <var:L> } <var:x1> := <var:h> { <var:h> = <var:L> \land <var:x1> = <var:L> } | , \verb | { <var:h> = <var:L> \land <var:x1> = <var:L> } <var:x2> := <var:x1> * <var:h> { <var:h> = <var:L> \land <var:x1> = <var:L> \land <var:x2> = <var:L> ^ <nat:2> } | , \verb | { <var:h> = <var:L> \land <var:x1> = <var:L> \land <var:x2> = <var:L> ^ <nat:2> } <var:x0> := <nat:2> { <var:h> = <var:L> \land <var:x1> = <var:L> \land <var:x2> = <var:L> ^ <nat:2> \land <var:x0> = <nat:2> } | and \verb | { <var:h> = <var:L> \land <var:x1> = <var:L> \land <var:x2> = <var:L> ^ <nat:2> \land <var:x0> = <nat:2> } <var:x1> := <var:x1> * <nat:1> { <var:h> = <var:L> \land <var:x1> = <nat:1> \times <var:L> \land <var:x2> = <var:L> ^ <nat:2> \land <var:x0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:h> = <var:L> }} <var:x1> := <var:h> ; <var:x2> := <var:x1> * <var:h> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:1> ; <var:x2> := <var:x2> * <nat:1> ; <var:p> := <var:x2> <var:p> := <var:p> + <var:x1> <var:p> := <var:p> + <var:x0> {{ <var:p> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:x1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:x1> = <var:L> /\ <var:x2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:x1> = <var:L> /\ <var:x2> = <var:L> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:x1> = <nat:1> * <var:L> /\ <var:x2> = <var:L> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:x1> = <nat:1> * <var:L> /\ <var:x2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:x1> = <nat:1> * <var:L> /\ <var:x0> = <nat:2> /\ <var:p> = <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:x0> = <nat:2> /\ <var:p> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:p> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 