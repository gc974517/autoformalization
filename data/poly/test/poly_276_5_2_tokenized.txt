\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:D> := <nat:1> ; <var:D> := <nat:3> + <var:D> * <var:Z> ; <var:D> := <nat:4> + <var:D> * <var:Z> ; <var:D> := <nat:3> + <var:D> * <var:Z> ; <var:D> := <nat:2> + <var:D> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:Z> = <var:s> $ prior to evaluating our code segment it follows that $ <var:D> = <nat:1> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:4> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be shown with typical Hoare reasoning . Going forward , we see the line \verb | <var:D> := <nat:1> ; | . This forwards the condition $ \{ <var:Z> = <var:s> \} $ to the condition $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> \} $ . This is shown to be logically sound through the assignment scheme defined by usual Hoare reasoning . Moving on to the next step , we see the variable update code \verb | <var:D> := <nat:3> + <var:D> * <var:Z> ; | . This moves the precondition $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> \} $ toward $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> * <var:s> + <nat:3> \} $ . Taking another step toward the proceeding piece of code found in our code , the variable assignmet line yielding $ <nat:4> + <var:D> * <var:Z> $ to $ <var:D>$ . This forwards the condition $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> * <var:s> + <nat:3> \} $ to $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> \} $ . Moving on , the variable update statement assigning $ <nat:3> + <var:D> * <var:Z> $ to $ <var:D>$ . This forwards $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> \} $ to the postcondition $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> \} $ . This is given by the assignment rule of standard Hoare logic . Going forward , the variable assignmet code letting $ <nat:2> + <var:D> * <var:Z$ toward $ <var:D>$ . This redefines $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> \} $ to the postcondition $ \{ <var:Z> = <var:s> \land <var:D> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:1> ; <var:D> := <nat:3> + <var:D> * <var:Z> ; <var:D> := <nat:4> + <var:D> * <var:Z> ; <var:D> := <nat:3> + <var:D> * <var:Z> ; <var:D> := <nat:2> + <var:D> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Z> = <var:s> }} <def:poly> {{ <var:D> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:D> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:D> = <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:D> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:D> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:D> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 