\begin{document} \begin{theorem} Consider a program such that \begin{verbatim} <var:l1> := <var:f> ; <var:l2> := <var:l1> * <var:f> ; <var:l3> := <var:l2> * <var:f> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:7> ; <var:l2> := <var:l2> * <nat:5> ; <var:l3> := <var:l3> * <nat:1> ; <var:s> := <var:l3> <var:s> := <var:s> + <var:l2> <var:s> := <var:s> + <var:l1> <var:s> := <var:s> + <var:l0> \end{verbatim} Assuming it to be that $ <var:f> = <var:d> $ before the execution of this set of commands , it holds that we have $ <var:s> = <nat:1> \cdot <var:d> ^ <nat:3> + <nat:5> \cdot <var:d> ^ <nat:2> + <nat:7> \cdot <var:d> + <nat:6> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:f> = <var:d> \} \\ <var:l1> := <var:f> ; \\ \{ <var:f> = <var:d> \land <var:l1> = <var:d> \} \\ <var:l2> := <var:l1> * <var:f> ; \\ \{ <var:f> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \} \\ <var:l3> := <var:l2> * <var:f> ; \\ \{ <var:f> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \} \\ <var:l0> := <nat:6> ; \\ \{ <var:f> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:6> \} \\ <var:l1> := <var:l1> * <nat:7> ; \\ \{ <var:f> = <var:d> \land <var:l1> = <nat:7> * <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:6> \} \\ <var:l2> := <var:l2> * <nat:5> ; \\ \{ <var:f> = <var:d> \land <var:l1> = <nat:7> * <var:d> \land <var:l2> = <nat:5> * <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:6> \} \\ <var:l3> := <var:l3> * <nat:1> ; \\ \{ <var:f> = <var:d> \land <var:l1> = <nat:7> * <var:d> \land <var:l2> = <nat:5> * <var:d> ^ <nat:2> \land <var:l3> = <nat:1> * <var:d> ^ <nat:3> \land <var:l0> = <nat:6> \} \end{eqnarray} Advancing the execution of the series of instructions produces : \begin{eqnarray} <var:s> := <var:l3> \\ \{ <var:f> = <var:d> \land <var:l1> = <nat:7> * <var:d> \land <var:l2> = <nat:5> * <var:d> ^ <nat:2> \land <var:l0> = <nat:6> \land <var:s> = <nat:1> * <var:d> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:l2> \\ \{ <var:f> = <var:d> \land <var:l1> = <nat:7> * <var:d> \land <var:l0> = <nat:6> \land <var:s> = <nat:1> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:l1> \\ \{ <var:f> = <var:d> \land <var:l0> = <nat:6> \land <var:s> = <nat:1> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:7> * <var:d> \} \\ <var:s> := <var:s> + <var:l0> \\ \{ <var:f> = <var:d> \land <var:s> = <nat:1> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:6> \} \end{eqnarray} Considering the preceding argument , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:f> = <var:d> }} <var:l1> := <var:f> ; <var:l2> := <var:l1> * <var:f> ; <var:l3> := <var:l2> * <var:f> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:7> ; <var:l2> := <var:l2> * <nat:5> ; <var:l3> := <var:l3> * <nat:1> ; <var:s> := <var:l3> <var:s> := <var:s> + <var:l2> <var:s> := <var:s> + <var:l1> <var:s> := <var:s> + <var:l0> {{ <var:s> = <nat:1> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <var:d> /\ <var:l2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <var:d> /\ <var:l2> = <var:d> ^ <nat:2> /\ <var:l3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <var:d> /\ <var:l2> = <var:d> ^ <nat:2> /\ <var:l3> = <var:d> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <nat:7> * <var:d> /\ <var:l2> = <var:d> ^ <nat:2> /\ <var:l3> = <var:d> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <nat:7> * <var:d> /\ <var:l2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:l3> = <var:d> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <nat:7> * <var:d> /\ <var:l2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:d> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <nat:7> * <var:d> /\ <var:l2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:l0> = <nat:6> /\ <var:s> = <nat:1> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l1> = <nat:7> * <var:d> /\ <var:l0> = <nat:6> /\ <var:s> = <nat:1> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:l0> = <nat:6> /\ <var:s> = <nat:1> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:s> = <nat:1> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 