\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:1> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:j> ; <var:Z2> := <nat:7> ; <var:Z2> := <var:Z2> * <var:j> ; <var:Z2> := <var:Z2> * <var:j> ; <var:Q> := <var:Z2> ; <var:Q> := <var:Q> + <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given positive numbers $ <var:S> $ --- $ <var:j> = <var:S> $ before executing the segment of code , it follows that we see $ <var:Q> = <nat:7> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> + <nat:1> $ after list of instructions is done . \end{theorem} \begin{proof} The flow of logic for our code segment can be given with Hoare techniques . Considering the upcoming step found in our code , we see the binding line \verb | <var:Z0> := <nat:1> ; | . This line moves the precondition $ \{ <var:j> = <var:S> \} $ into $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \} $ . This is rigorously given using the assignment scheme given in typical Hoare logic . Following , the binding code \verb | <var:Z1> := <nat:4> ; | . This forwards the condition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \} $ to the condition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \} $ . Moving on to the next step , we see the assignment code \verb | <var:Z1> := <var:Z1> * <var:j> ; | . This redefines the precondition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \} $ toward the postcondition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \} $ . This is known to be sound through the assignment law found in typical Hoare reasoning . Taking another step toward the following statement in our set of commands , we see the variable assignmet code giving $ <nat:7> $ as $ <var:Z2>$ . This statement transfers the condition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \} $ to the condition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \land <var:Z2> = <nat:7> \} $ . This is shown through the assignment rule of Hoare reasoning . Further , we see the command \verb | <var:Z2> := <var:Z2> * <var:j> ; | . This statement redefines $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \land <var:Z2> = <nat:7> \} $ toward $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \land <var:Z2> = <nat:7> \cdot <var:S> \} $ . This is guaranteed using the assignment rule given by typical Hoare logic . Taking another step toward the next statement found in our list of commands , we have the variable binding code \verb | <var:Z2> := <var:Z2> * <var:j> ; | . This redefines the precondition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \land <var:Z2> = <nat:7> \cdot <var:S> \} $ to the condition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \land <var:Z2> = <nat:7> \cdot <var:S> ^ <nat:2> \} $ . Further , we see the assignment command \verb | <var:Q> := <var:Z2> ; | . This line advances the precondition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \land <var:Z2> = <nat:7> \cdot <var:S> ^ <nat:2> \} $ to $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \land <var:Q> = <nat:7> \cdot <var:S> ^ <nat:2> \} $ . This is shown with the assignment law given in standard Hoare reasoning . Looking at the following piece of code seen in the program , we see the variable binding code giving $ <var:Q> + <var:Z1> $ toward $ <var:Q>$ . This statement redefines $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:4> \cdot <var:S> \land <var:Q> = <nat:7> \cdot <var:S> ^ <nat:2> \} $ toward $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Q> = <nat:7> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> \} $ . This is ensured using the assignment inference rule given by usual Hoare logic . Next , we have the variable update statement yielding $ <var:Q> + <var:Z0$ to $ <var:Q>$ . This command moves the precondition $ \{ <var:j> = <var:S> \land <var:Z0> = <nat:1> \land <var:Q> = <nat:7> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> \} $ to the postcondition $ \{ <var:j> = <var:S> \land <var:Q> = <nat:7> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:1> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:j> ; <var:Z2> := <nat:7> ; <var:Z2> := <var:Z2> * <var:j> ; <var:Z2> := <var:Z2> * <var:j> ; <var:Q> := <var:Z2> ; <var:Q> := <var:Q> + <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:j> = <var:S> }} <def:poly> {{ <var:Q> = <nat:7> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:4> * <var:S> /\ <var:Z2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:4> * <var:S> /\ <var:Z2> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:4> * <var:S> /\ <var:Z2> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:4> * <var:S> /\ <var:Q> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Z0> = <nat:1> /\ <var:Q> = <nat:7> * <var:S> ^ <nat:2> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Q> = <nat:7> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 