\begin{document} \begin{theorem} Define the following list of commands as follows \begin{verbatim} <var:B1> := <var:U> ; <var:B2> := <var:B1> * <var:U> ; <var:B3> := <var:B2> * <var:U> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:3> ; <var:B3> := <var:B3> * <nat:4> ; <var:x> := <var:B3> <var:x> := <var:x> + <var:B1> <var:x> := <var:x> + <var:B0> \end{verbatim} Given $ <var:U> = <var:c> $ ahead of the execution of our list of commands then $ <var:x> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> + <nat:1> $ after set of commands is done . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is accomplished with usual Hoare logic . Shifting focus toward the proceeding line of code seen in the series of instructions , we have the variable update statement \verb | <var:B1> := <var:U> ; | . This takes the condition $ \{ <var:U> = <var:c> \} $ as the postcondition $ \{ <var:U> = <var:c> \land <var:B1> = <var:c> \} $ . This is ensured by the assignment rule found in typical Hoare logic . Moving forward to the next step , we have the variable update command assigning $ <var:B1> * <var:U> $ as $ <var:B2>$ . This redefines the precondition $ \{ <var:U> = <var:c> \land <var:B1> = <var:c> \} $ as the postcondition $ \{ <var:U> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \} $ . This is ensured using the assignment rule given in usual Hoare techniques . Considering the upcoming piece of code found in our list of instructions , we see the binding statement binding $ <var:B2> * <var:U> $ as $ <var:B3>$ . This code takes the precondition $ \{ <var:U> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \} $ to the condition $ \{ <var:U> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B3> = <var:c> ^ <nat:3> \} $ . Taking a look at the next piece of code seen in the set of instructions , we see the assignment line binding $ <nat:1> $ toward $ <var:B0>$ . This code redefines $ \{ <var:U> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B3> = <var:c> ^ <nat:3> \} $ toward the postcondition $ \{ <var:U> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B3> = <var:c> ^ <nat:3> \land <var:B0> = <nat:1> \} $ . Going to the next step , we have the code \verb | <var:B1> := <var:B1> * <nat:3> ; | . This line redefines $ \{ <var:U> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B3> = <var:c> ^ <nat:3> \land <var:B0> = <nat:1> \} $ as the condition $ \{ <var:U> = <var:c> \land <var:B1> = <nat:3> \times <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B3> = <var:c> ^ <nat:3> \land <var:B0> = <nat:1> \} $ . Jumping to the next step seen in the program , we see the variable assignmet code assigning $ <var:B3> * <nat:4> $ into $ <var:B3>$ . This forwards $ \{ <var:U> = <var:c> \land <var:B1> = <nat:3> \times <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B3> = <var:c> ^ <nat:3> \land <var:B0> = <nat:1> \} $ into the condition $ \{ <var:U> = <var:c> \land <var:B1> = <nat:3> \times <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:c> ^ <nat:3> \land <var:B0> = <nat:1> \} $ . Moving forward , the environment update line \verb | <var:x> := <var:B3> | . This advances the condition $ \{ <var:U> = <var:c> \land <var:B1> = <nat:3> \times <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:c> ^ <nat:3> \land <var:B0> = <nat:1> \} $ as $ \{ <var:U> = <var:c> \land <var:B1> = <nat:3> \times <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B0> = <nat:1> \land <var:x> = <nat:4> \times <var:c> ^ <nat:3> \} $ . This is known to be sound with the assignment law found in usual Hoare reasoning . Moving forward to the proceeding line of code found in our code , we have the variable binding statement assigning $ <var:x> + <var:B1$ as $ <var:x>$ . This command transfers $ \{ <var:U> = <var:c> \land <var:B1> = <nat:3> \times <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B0> = <nat:1> \land <var:x> = <nat:4> \times <var:c> ^ <nat:3> \} $ as $ \{ <var:U> = <var:c> \land <var:B0> = <nat:1> \land <var:x> = <nat:4> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> \} $ . Advancing on , the variable binding statement \verb | <var:x> := <var:x> + <var:B0> | . This code redefines the precondition $ \{ <var:U> = <var:c> \land <var:B0> = <nat:1> \land <var:x> = <nat:4> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> \} $ toward $ \{ <var:U> = <var:c> \land <var:x> = <nat:4> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:1> \} $ . This is sound with the assignment law defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:U> = <var:c> }} <var:B1> := <var:U> ; <var:B2> := <var:B1> * <var:U> ; <var:B3> := <var:B2> * <var:U> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:3> ; <var:B3> := <var:B3> * <nat:4> ; <var:x> := <var:B3> <var:x> := <var:x> + <var:B1> <var:x> := <var:x> + <var:B0> {{ <var:x> = <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:B1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:B1> = <var:c> /\ <var:B2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:B1> = <var:c> /\ <var:B2> = <var:c> ^ <nat:2> /\ <var:B3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:B1> = <var:c> /\ <var:B2> = <var:c> ^ <nat:2> /\ <var:B3> = <var:c> ^ <nat:3> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:B1> = <nat:3> * <var:c> /\ <var:B2> = <var:c> ^ <nat:2> /\ <var:B3> = <var:c> ^ <nat:3> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:B1> = <nat:3> * <var:c> /\ <var:B2> = <var:c> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:c> ^ <nat:3> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:B1> = <nat:3> * <var:c> /\ <var:B2> = <var:c> ^ <nat:2> /\ <var:B0> = <nat:1> /\ <var:x> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:B0> = <nat:1> /\ <var:x> = <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:x> = <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 