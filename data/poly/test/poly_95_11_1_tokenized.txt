\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:r> ; <var:Q2> := <var:Q1> * <var:r> ; <var:Q3> := <var:Q2> * <var:r> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q2> := <var:Q2> * <nat:7> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:T> := <var:Q3> <var:T> := <var:T> + <var:Q2> <var:T> := <var:T> + <var:Q1> <var:T> := <var:T> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> in \emph{Imp} . Assuming for every positive integers $ <var:J> $ $ <var:r> = <var:J> $ before evaluating this series of instructions it holds that we have $ <var:T> = <nat:7> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:r> = <var:J> \} \\ <var:Q1> := <var:r> ; \\ \{ <var:r> = <var:J> \land <var:Q1> = <var:J> \} \\ <var:Q2> := <var:Q1> * <var:r> ; \\ \{ <var:r> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:r> ; \\ \{ <var:r> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:r> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <var:Q1> * <nat:4> ; \\ \{ <var:r> = <var:J> \land <var:Q1> = <nat:4> \times <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} \\ <var:Q2> := <var:Q2> * <nat:7> ; \\ \{ <var:r> = <var:J> \land <var:Q1> = <nat:4> \times <var:J> \land <var:Q2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} \\ <var:Q3> := <var:Q3> * <nat:7> ; \\ \{ <var:r> = <var:J> \land <var:Q1> = <nat:4> \times <var:J> \land <var:Q2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:J> ^ <nat:3> \land <var:Q0> = <nat:1> \} \\ <var:T> := <var:Q3> \\ \{ <var:r> = <var:J> \land <var:Q1> = <nat:4> \times <var:J> \land <var:Q2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:Q0> = <nat:1> \land <var:T> = <nat:7> \times <var:J> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:Q2> \\ \{ <var:r> = <var:J> \land <var:Q1> = <nat:4> \times <var:J> \land <var:Q0> = <nat:1> \land <var:T> = <nat:7> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:Q1> \\ \{ <var:r> = <var:J> \land <var:Q0> = <nat:1> \land <var:T> = <nat:7> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> \} \\ <var:T> := <var:T> + <var:Q0> \\ \{ <var:r> = <var:J> \land <var:T> = <nat:7> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:1> \} \end{eqnarray} Hence , the list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:r> ; <var:Q2> := <var:Q1> * <var:r> ; <var:Q3> := <var:Q2> * <var:r> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q2> := <var:Q2> * <nat:7> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:T> := <var:Q3> <var:T> := <var:T> + <var:Q2> <var:T> := <var:T> + <var:Q1> <var:T> := <var:T> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:r> = <var:J> }} <def:poly> {{ <var:T> = <nat:7> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <nat:4> * <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <nat:4> * <var:J> /\ <var:Q2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <nat:4> * <var:J> /\ <var:Q2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:J> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <nat:4> * <var:J> /\ <var:Q2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:Q0> = <nat:1> /\ <var:T> = <nat:7> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q1> = <nat:4> * <var:J> /\ <var:Q0> = <nat:1> /\ <var:T> = <nat:7> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:Q0> = <nat:1> /\ <var:T> = <nat:7> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:T> = <nat:7> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 