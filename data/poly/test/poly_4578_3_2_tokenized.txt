\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <var:v> * <var:S> ; <var:v> := <nat:2> + <var:v> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Assuming that we have $ <var:S> = <var:d> $ --- assuming some positive integers $ <var:d> $ --- ahead of the evaluation of this list of commands , it must be that we have $ <var:v> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:d> \} \\ <var:v> := <nat:1> ; \\ \{ <var:S> = <var:d> \land <var:v> = <nat:1> \} \\ <var:v> := <var:v> * <var:S> ; \\ \{ <var:S> = <var:d> \land <var:v> = <nat:1> \cdot <var:d> + \} \\ <var:v> := <nat:2> + <var:v> * <var:S> \\ \{ <var:S> = <var:d> \land <var:v> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:1> ; <var:v> := <var:v> * <var:S> ; <var:v> := <nat:2> + <var:v> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:S> = <var:d> }} <def:poly> {{ <var:v> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:v> = <nat:1> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:v> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 