\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:q> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:1> ; <var:F> := <var:l1> <var:F> := <var:F> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:q> = <var:I> $ for all integers $ <var:I> $ prior to executing our list of commands then we see $ <var:F> = <nat:1> \times <var:I> + <nat:4> $ after set of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:I> \} \\ <var:l1> := <var:q> ; \\ \{ <var:q> = <var:I> \land <var:l1> = <var:I> \} \\ <var:l0> := <nat:4> ; \\ \{ <var:q> = <var:I> \land <var:l1> = <var:I> \land <var:l0> = <nat:4> \} \\ <var:l1> := <var:l1> * <nat:1> ; \\ \{ <var:q> = <var:I> \land <var:l1> = <nat:1> \times <var:I> \land <var:l0> = <nat:4> \} \\ <var:F> := <var:l1> \\ \{ <var:q> = <var:I> \land <var:l0> = <nat:4> \land <var:F> = <nat:1> \times <var:I> \} \\ <var:F> := <var:F> + <var:l0> \\ \{ <var:q> = <var:I> \land <var:F> = <nat:1> \times <var:I> + <nat:4> \} \end{eqnarray} Using usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:q> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:1> ; <var:F> := <var:l1> <var:F> := <var:F> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:q> = <var:I> }} <def:poly> {{ <var:F> = <nat:1> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:l1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:l1> = <var:I> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:l1> = <nat:1> * <var:I> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:l0> = <nat:4> /\ <var:F> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:F> = <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 