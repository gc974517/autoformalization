\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:7> ; <var:K1> := <nat:8> ; <var:K1> := <var:K1> * <var:T> ; <var:K2> := <nat:3> ; <var:K2> := <var:K2> * <var:T> ; <var:K2> := <var:K2> * <var:T> ; <var:K3> := <nat:4> ; <var:K3> := <var:K3> * <var:T> ; <var:K3> := <var:K3> * <var:T> ; <var:K3> := <var:K3> * <var:T> ; <var:O> := <var:K3> ; <var:O> := <var:O> + <var:K2> ; <var:O> := <var:O> + <var:K1> ; <var:O> := <var:O> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:T> = <var:f> $ given every $ <var:f> \in \mathbb{Z}^+ $ ahead of evaluating the series of instructions it must be that we have $ <var:O> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:7> $ when set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:f> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \} \\ <var:K1> := <nat:8> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \} \\ <var:K1> := <var:K1> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \} \\ <var:K2> := <nat:3> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:K2> = <nat:3> \} \\ <var:K2> := <var:K2> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:K2> = <nat:3> \times <var:f> \} \\ <var:K2> := <var:K2> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:K2> = <nat:3> \times <var:f> ^ <nat:2> \} \\ <var:K3> := <nat:4> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:K2> = <nat:3> \times <var:f> ^ <nat:2> \land <var:K3> = <nat:4> \} \\ <var:K3> := <var:K3> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:K2> = <nat:3> \times <var:f> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:f> \} \\ <var:K3> := <var:K3> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:K2> = <nat:3> \times <var:f> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:f> ^ <nat:2> \} \\ <var:K3> := <var:K3> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:K2> = <nat:3> \times <var:f> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:f> ^ <nat:3> \} \\ <var:O> := <var:K3> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:K2> = <nat:3> \times <var:f> ^ <nat:2> \land <var:O> = <nat:4> \times <var:f> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:K2> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:K1> = <nat:8> \times <var:f> \land <var:O> = <nat:4> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:K1> ; \\ \{ <var:T> = <var:f> \land <var:K0> = <nat:7> \land <var:O> = <nat:4> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> \} \\ <var:O> := <var:O> + <var:K0> \\ \{ <var:T> = <var:f> \land <var:O> = <nat:4> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> + <nat:7> \} \end{eqnarray} The application of typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K0> := <nat:7> ; <var:K1> := <nat:8> ; <var:K1> := <var:K1> * <var:T> ; <var:K2> := <nat:3> ; <var:K2> := <var:K2> * <var:T> ; <var:K2> := <var:K2> * <var:T> ; <var:K3> := <nat:4> ; <var:K3> := <var:K3> * <var:T> ; <var:K3> := <var:K3> * <var:T> ; <var:K3> := <var:K3> * <var:T> ; <var:O> := <var:K3> ; <var:O> := <var:O> + <var:K2> ; <var:O> := <var:O> + <var:K1> ; <var:O> := <var:O> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:T> = <var:f> }} <def:poly> {{ <var:O> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:K2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:K2> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:K2> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:K2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:K3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:K2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:K2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:K2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:K2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:O> = <nat:4> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:8> * <var:f> /\ <var:O> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:K0> = <nat:7> /\ <var:O> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:O> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 