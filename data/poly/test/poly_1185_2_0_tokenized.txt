\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:5> ; <var:v> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Allow for any integers $ <var:A> $ it to be that $ <var:N> = <var:A> $ ahead of interpreting our program it holds that we see $ <var:v> = <nat:5> $ after series of instructions exits . \end{theorem} \begin{proof} See that the following decorated program . \begin{eqnarray} \{ <var:N> = <var:A> \} \\ <var:c0> := <nat:5> ; \\ \{ <var:N> = <var:A> \land <var:c0> = <nat:5> \} \\ <var:v> := <var:c0> \\ \{ <var:N> = <var:A> \land <var:v> = <nat:5> \} \end{eqnarray} Using usual Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:5> ; <var:v> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:N> = <var:A> }} <def:poly> {{ <var:v> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:A> /\ <var:v> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 