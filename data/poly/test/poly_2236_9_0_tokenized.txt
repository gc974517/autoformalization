\begin{document} \begin{theorem} Take the following set of commands as \begin{verbatim} <var:Y0> := <nat:5> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:Z> ; <var:Y2> := <nat:6> ; <var:Y2> := <var:Y2> * <var:Z> ; <var:Y2> := <var:Y2> * <var:Z> ; <var:o> := <var:Y2> ; <var:o> := <var:o> + <var:Y1> ; <var:o> := <var:o> + <var:Y0> \end{verbatim} Allow for some positive integers $ <var:R> $ it to be that $ <var:Z> = <var:R> $ before running this series of instructions , then we have $ <var:o> = <nat:6> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:5> $ once code has terminated . \end{theorem} \begin{proof} The flow of logic for our list of instructions is demonstrated through usual Hoare techniques . Now , we see the variable assignmet line assigning $ <nat:5> $ as $ <var:Y0>$ . This takes the precondition $ \{ <var:Z> = <var:R> \} $ toward $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \} $ . Now , the code \verb | <var:Y1> := <nat:3> ; | . This code transfers the condition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \} $ into $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \} $ . Taking another step toward the next line seen in our set of instructions , we have the assignment command defining $ <var:Y1> * <var:Z> $ into $ <var:Y1>$ . This command takes the condition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \} $ as $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \} $ . Looking at the next statement seen in our set of instructions , we see the assignment statement giving $ <nat:6> $ toward $ <var:Y2>$ . This transfers $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \} $ toward the postcondition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \land <var:Y2> = <nat:6> \} $ . Taking a look at the subsequent statement in our program , we see the variable update command \verb | <var:Y2> := <var:Y2> * <var:Z> ; | . This forwards the precondition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \land <var:Y2> = <nat:6> \} $ to the condition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \land <var:Y2> = <nat:6> \times <var:R> \} $ . This is given with the assignment rule of usual Hoare reasoning . Keeping momentum , we have the variable assignmet line defining $ <var:Y2> * <var:Z> $ toward $ <var:Y2>$ . This redefines the condition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \land <var:Y2> = <nat:6> \times <var:R> \} $ toward $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \land <var:Y2> = <nat:6> \times <var:R> ^ <nat:2> \} $ . This is sound by the assignment law in Hoare techniques . Taking another step toward the upcoming bit of code in our set of commands , we have the command letting $ <var:Y2> $ into $ <var:o>$ . This redefines the condition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \land <var:Y2> = <nat:6> \times <var:R> ^ <nat:2> \} $ to the postcondition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \land <var:o> = <nat:6> \times <var:R> ^ <nat:2> \} $ . Moving on to the following line of code contained in the set of commands , we see the variable update statement yielding $ <var:o> + <var:Y1> $ into $ <var:o>$ . This advances $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:3> \times <var:R> \land <var:o> = <nat:6> \times <var:R> ^ <nat:2> \} $ into the condition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:o> = <nat:6> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> \} $ . Taking a look at the next step contained in the program , we see the assignment code binding $ <var:o> + <var:Y0$ to $ <var:o>$ . This forwards the precondition $ \{ <var:Z> = <var:R> \land <var:Y0> = <nat:5> \land <var:o> = <nat:6> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> \} $ into the condition $ \{ <var:Z> = <var:R> \land <var:o> = <nat:6> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:Z> = <var:R> }} <var:Y0> := <nat:5> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:Z> ; <var:Y2> := <nat:6> ; <var:Y2> := <var:Y2> * <var:Z> ; <var:Y2> := <var:Y2> * <var:Z> ; <var:o> := <var:Y2> ; <var:o> := <var:o> + <var:Y1> ; <var:o> := <var:o> + <var:Y0> {{ <var:o> = <nat:6> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:3> * <var:R> /\ <var:Y2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:3> * <var:R> /\ <var:Y2> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:3> * <var:R> /\ <var:Y2> = <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:3> * <var:R> /\ <var:o> = <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:Y0> = <nat:5> /\ <var:o> = <nat:6> * <var:R> ^ <nat:2> + <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:o> = <nat:6> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 