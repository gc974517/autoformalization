\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:D1> := <var:C> ; <var:D2> := <var:D1> * <var:C> ; <var:D0> := <nat:7> ; <var:D2> := <var:D2> * <nat:3> ; <var:y> := <var:D2> <var:y> := <var:y> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Allowing $ <var:C> = <var:o> $ prior to running this set of commands , it holds that $ <var:y> = <nat:3> \cdot <var:o> ^ <nat:2> + <nat:7> $ after series of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:o> \} \\ <var:D1> := <var:C> ; \\ \{ <var:C> = <var:o> \land <var:D1> = <var:o> \} \\ <var:D2> := <var:D1> * <var:C> ; \\ \{ <var:C> = <var:o> \land <var:D1> = <var:o> \land <var:D2> = <var:o> ^ <nat:2> \} \\ <var:D0> := <nat:7> ; \\ \{ <var:C> = <var:o> \land <var:D1> = <var:o> \land <var:D2> = <var:o> ^ <nat:2> \land <var:D0> = <nat:7> \} \end{eqnarray} Advancing interpreting this set of instructions gives : \begin{eqnarray} <var:D2> := <var:D2> * <nat:3> ; \\ \{ <var:C> = <var:o> \land <var:D1> = <var:o> \land <var:D2> = <nat:3> * <var:o> ^ <nat:2> \land <var:D0> = <nat:7> \} \end{eqnarray} Allowing the execution of this set of instructions yields : \begin{eqnarray} <var:y> := <var:D2> \\ \{ <var:C> = <var:o> \land <var:D1> = <var:o> \land <var:D0> = <nat:7> \land <var:y> = <nat:3> * <var:o> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:D0> \\ \{ <var:C> = <var:o> \land <var:y> = <nat:3> * <var:o> ^ <nat:2> + <nat:7> \} \end{eqnarray} Using typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D1> := <var:C> ; <var:D2> := <var:D1> * <var:C> ; <var:D0> := <nat:7> ; <var:D2> := <var:D2> * <nat:3> ; <var:y> := <var:D2> <var:y> := <var:y> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:C> = <var:o> }} <def:poly> {{ <var:y> = <nat:3> * <var:o> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:D1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:D1> = <var:o> /\ <var:D2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:D1> = <var:o> /\ <var:D2> = <var:o> ^ <nat:2> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:D1> = <var:o> /\ <var:D2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:D1> = <var:o> /\ <var:D0> = <nat:7> /\ <var:y> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:y> = <nat:3> * <var:o> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 