\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:g1> := <var:M> ; <var:g2> := <var:g1> * <var:M> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:3> ; <var:S> := <var:g2> <var:S> := <var:S> + <var:g1> <var:S> := <var:S> + <var:g0> \end{verbatim} Assuming for positive integer coefficients $ <var:p> $ that we have $ <var:M> = <var:p> $ prior to executing this set of commands , it follows that $ <var:S> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:9> $ after program has finished executing . \end{theorem} \begin{proof} The method of proof for this series of commands is shown through typical Hoare reasoning . Jumping to the subsequent steps found in the code , we see \begin{eqnarray} \{ <var:M> = <var:p> \} \, <var:g1> := <var:M> \, \{ <var:M> = <var:p> \land <var:g1> = <var:p> \} \\ \{ <var:M> = <var:p> \land <var:g1> = <var:p> \} \, <var:g2> := <var:g1> * <var:M> \, \{ <var:M> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \} \\ \{ <var:M> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \} \, <var:g0> := <nat:9> \, \{ <var:M> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g0> = <nat:9> \} \\ \{ <var:M> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g0> = <nat:9> \} \, <var:g1> := <var:g1> * <nat:1> \, \{ <var:M> = <var:p> \land <var:g1> = <nat:1> * <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g0> = <nat:9> \} \\ \{ <var:M> = <var:p> \land <var:g1> = <nat:1> * <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g0> = <nat:9> \} \, <var:g2> := <var:g2> * <nat:3> \, \{ <var:M> = <var:p> \land <var:g1> = <nat:1> * <var:p> \land <var:g2> = <nat:3> * <var:p> ^ <nat:2> \land <var:g0> = <nat:9> \} \\ \{ <var:M> = <var:p> \land <var:g1> = <nat:1> * <var:p> \land <var:g2> = <nat:3> * <var:p> ^ <nat:2> \land <var:g0> = <nat:9> \} \, <var:S> := <var:g2\, \{ <var:M> = <var:p> \land <var:g1> = <nat:1> * <var:p> \land <var:g0> = <nat:9> \land <var:S> = <nat:3> * <var:p> ^ <nat:2> \} \\ \{ <var:M> = <var:p> \land <var:g1> = <nat:1> * <var:p> \land <var:g0> = <nat:9> \land <var:S> = <nat:3> * <var:p> ^ <nat:2> \} \, <var:S> := <var:S> + <var:g1\, \{ <var:M> = <var:p> \land <var:g0> = <nat:9> \land <var:S> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> \} \\ \{ <var:M> = <var:p> \land <var:g0> = <nat:9> \land <var:S> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> \} \, <var:S> := <var:S> + <var:g0\, \{ <var:M> = <var:p> \land <var:S> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:M> = <var:p> }} <var:g1> := <var:M> ; <var:g2> := <var:g1> * <var:M> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:3> ; <var:S> := <var:g2> <var:S> := <var:S> + <var:g1> <var:S> := <var:S> + <var:g0> {{ <var:S> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:g1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:g1> = <nat:1> * <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:g1> = <nat:1> * <var:p> /\ <var:g2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:g1> = <nat:1> * <var:p> /\ <var:g0> = <nat:9> /\ <var:S> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:g0> = <nat:9> /\ <var:S> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:S> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 