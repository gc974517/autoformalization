\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:Z> ; <var:M2> := <var:M1> * <var:Z> ; <var:M3> := <var:M2> * <var:Z> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:3> ; <var:M3> := <var:M3> * <nat:1> ; <var:G> := <var:M3> <var:G> := <var:G> + <var:M2> <var:G> := <var:G> + <var:M1> <var:G> := <var:G> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assume --- assuming some whole numbers $ <var:O> $ --- that $ <var:Z> = <var:O> $ ahead of interpreting this series of instructions , it holds that we have $ <var:G> = <nat:1> \times <var:O> ^ <nat:3> + <nat:3> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:4> $ . \end{theorem} \begin{proof} Observe the following decorated list of commands . \begin{eqnarray} \{ <var:Z> = <var:O> \} \\ <var:M1> := <var:Z> ; \\ \{ <var:Z> = <var:O> \land <var:M1> = <var:O> \} \\ <var:M2> := <var:M1> * <var:Z> ; \\ \{ <var:Z> = <var:O> \land <var:M1> = <var:O> \land <var:M2> = <var:O> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:Z> ; \\ \{ <var:Z> = <var:O> \land <var:M1> = <var:O> \land <var:M2> = <var:O> ^ <nat:2> \land <var:M3> = <var:O> ^ <nat:3> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:Z> = <var:O> \land <var:M1> = <var:O> \land <var:M2> = <var:O> ^ <nat:2> \land <var:M3> = <var:O> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:M1> := <var:M1> * <nat:4> ; \\ \{ <var:Z> = <var:O> \land <var:M1> = <nat:4> \cdot <var:O> \land <var:M2> = <var:O> ^ <nat:2> \land <var:M3> = <var:O> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:M2> := <var:M2> * <nat:3> ; \\ \{ <var:Z> = <var:O> \land <var:M1> = <nat:4> \cdot <var:O> \land <var:M2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:M3> = <var:O> ^ <nat:3> \land <var:M0> = <nat:4> \} \end{eqnarray} Continuing the evaluation of this series of commands produces : \begin{eqnarray} <var:M3> := <var:M3> * <nat:1> ; \\ \{ <var:Z> = <var:O> \land <var:M1> = <nat:4> \cdot <var:O> \land <var:M2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:O> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:G> := <var:M3> \\ \{ <var:Z> = <var:O> \land <var:M1> = <nat:4> \cdot <var:O> \land <var:M2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:M0> = <nat:4> \land <var:G> = <nat:1> \cdot <var:O> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:M2> \\ \{ <var:Z> = <var:O> \land <var:M1> = <nat:4> \cdot <var:O> \land <var:M0> = <nat:4> \land <var:G> = <nat:1> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:M1> \\ \{ <var:Z> = <var:O> \land <var:M0> = <nat:4> \land <var:G> = <nat:1> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> \} \\ <var:G> := <var:G> + <var:M0> \\ \{ <var:Z> = <var:O> \land <var:G> = <nat:1> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:4> \} \end{eqnarray} Using typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:Z> ; <var:M2> := <var:M1> * <var:Z> ; <var:M3> := <var:M2> * <var:Z> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:3> ; <var:M3> := <var:M3> * <nat:1> ; <var:G> := <var:M3> <var:G> := <var:G> + <var:M2> <var:G> := <var:G> + <var:M1> <var:G> := <var:G> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Z> = <var:O> }} <def:poly> {{ <var:G> = <nat:1> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <var:O> /\ <var:M2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <var:O> /\ <var:M2> = <var:O> ^ <nat:2> /\ <var:M3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <var:O> /\ <var:M2> = <var:O> ^ <nat:2> /\ <var:M3> = <var:O> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <nat:4> * <var:O> /\ <var:M2> = <var:O> ^ <nat:2> /\ <var:M3> = <var:O> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <nat:4> * <var:O> /\ <var:M2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:M3> = <var:O> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <nat:4> * <var:O> /\ <var:M2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:O> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <nat:4> * <var:O> /\ <var:M2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:M0> = <nat:4> /\ <var:G> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M1> = <nat:4> * <var:O> /\ <var:M0> = <nat:4> /\ <var:G> = <nat:1> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:M0> = <nat:4> /\ <var:G> = <nat:1> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:G> = <nat:1> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 