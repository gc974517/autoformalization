\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:3> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:i> ; <var:R> := <var:J1> ; <var:R> := <var:R> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:i> = <var:C> $ ahead of the execution of this segment of code , it holds that we have $ <var:R> = <nat:6> \times <var:C> + <nat:3> $ when set of commands has finished executing . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives : \begin{eqnarray} \{ <var:i> = <var:C> \} \\ <var:J0> := <nat:3> ; \\ \{ <var:i> = <var:C> \land <var:J0> = <nat:3> \} \\ <var:J1> := <nat:6> ; \\ \{ <var:i> = <var:C> \land <var:J0> = <nat:3> \land <var:J1> = <nat:6> \} \\ <var:J1> := <var:J1> * <var:i> ; \\ \{ <var:i> = <var:C> \land <var:J0> = <nat:3> \land <var:J1> = <nat:6> * <var:C> \} \\ <var:R> := <var:J1> ; \\ \{ <var:i> = <var:C> \land <var:J0> = <nat:3> \land <var:R> = <nat:6> * <var:C> \} \end{eqnarray} Furthering executing this set of commands yields : \begin{eqnarray} <var:R> := <var:R> + <var:J0> \\ \{ <var:i> = <var:C> \land <var:R> = <nat:6> * <var:C> + <nat:3> \} \end{eqnarray} Considering the above , our program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:3> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:i> ; <var:R> := <var:J1> ; <var:R> := <var:R> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:i> = <var:C> }} <def:poly> {{ <var:R> = <nat:6> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:J0> = <nat:3> /\ <var:R> = <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:R> = <nat:6> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 