\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:p> := <nat:4> ; <var:p> := <nat:4> + <var:p> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Given that $ <var:h> = <var:J> $ before running our code segment it holds that we see $ <var:p> = <nat:4> \cdot <var:J> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:J> \} \\ <var:p> := <nat:4> ; \\ \{ <var:h> = <var:J> \land <var:p> = <nat:4> \} \\ <var:p> := <nat:4> + <var:p> * <var:h> \\ \{ <var:h> = <var:J> \land <var:p> = <nat:4> \cdot <var:J> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:4> ; <var:p> := <nat:4> + <var:p> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:h> = <var:J> }} <def:poly> {{ <var:p> = <nat:4> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:p> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:p> = <nat:4> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 