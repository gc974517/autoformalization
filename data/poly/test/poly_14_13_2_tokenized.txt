\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:f> := <nat:4> ; <var:f> := <var:f> * <var:c> ; <var:f> := <var:f> * <var:c> ; <var:f> := <nat:3> + <var:f> * <var:c> ; <var:f> := <nat:4> + <var:f> * <var:c> ; <var:f> := <nat:2> + <var:f> * <var:c> ; <var:f> := <nat:3> + <var:f> * <var:c> ; <var:f> := <nat:1> + <var:f> * <var:c> ; <var:f> := <nat:3> + <var:f> * <var:c> ; <var:f> := <nat:4> + <var:f> * <var:c> ; <var:f> := <nat:3> + <var:f> * <var:c> ; <var:f> := <nat:1> + <var:f> * <var:c> ; <var:f> := <nat:2> + <var:f> * <var:c> \end{verbatim} Given that we have $ <var:c> = <var:Z> $ before evaluating this code it holds that we see $ <var:f> = <nat:4> \times <var:Z> ^ <nat:12> + <nat:3> \times <var:Z> ^ <nat:9> + <nat:4> \times <var:Z> ^ <nat:8> + <nat:2> \times <var:Z> ^ <nat:7> + <nat:3> \times <var:Z> ^ <nat:6> + <nat:1> \times <var:Z> ^ <nat:5> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:2> $ when series of commands has exited . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:c> = <var:Z> \} \\ <var:f> := <nat:4> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \} \\ <var:f> := <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> + \} \\ <var:f> := <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:2> + \} \\ <var:f> := <nat:3> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:3> \} \\ <var:f> := <nat:4> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> + <nat:4> \} \\ <var:f> := <nat:2> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:2> \} \\ <var:f> := <nat:3> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:3> \} \\ <var:f> := <nat:1> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:7> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:1> \} \\ <var:f> := <nat:3> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:8> + <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:3> \} \\ <var:f> := <nat:4> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:9> + <nat:3> \cdot <var:Z> ^ <nat:6> + <nat:4> \cdot <var:Z> ^ <nat:5> + <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:4> \} \\ <var:f> := <nat:3> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:10> + <nat:3> \cdot <var:Z> ^ <nat:7> + <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:3> \} \\ <var:f> := <nat:1> + <var:f> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:11> + <nat:3> \cdot <var:Z> ^ <nat:8> + <nat:4> \cdot <var:Z> ^ <nat:7> + <nat:2> \cdot <var:Z> ^ <nat:6> + <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:1> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:1> \} \\ <var:f> := <nat:2> + <var:f> * <var:c> \\ \{ <var:c> = <var:Z> \land <var:f> = <nat:4> \cdot <var:Z> ^ <nat:12> + <nat:3> \cdot <var:Z> ^ <nat:9> + <nat:4> \cdot <var:Z> ^ <nat:8> + <nat:2> \cdot <var:Z> ^ <nat:7> + <nat:3> \cdot <var:Z> ^ <nat:6> + <nat:1> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:2> \} \end{eqnarray} Thus , this series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:c> = <var:Z> }} <var:f> := <nat:4> ; <var:f> := <var:f> * <var:c> ; <var:f> := <var:f> * <var:c> ; <var:f> := <nat:3> + <var:f> * <var:c> ; <var:f> := <nat:4> + <var:f> * <var:c> ; <var:f> := <nat:2> + <var:f> * <var:c> ; <var:f> := <nat:3> + <var:f> * <var:c> ; <var:f> := <nat:1> + <var:f> * <var:c> ; <var:f> := <nat:3> + <var:f> * <var:c> ; <var:f> := <nat:4> + <var:f> * <var:c> ; <var:f> := <nat:3> + <var:f> * <var:c> ; <var:f> := <nat:1> + <var:f> * <var:c> ; <var:f> := <nat:2> + <var:f> * <var:c> {{ <var:f> = <nat:4> * <var:Z> ^ <nat:12> + <nat:3> * <var:Z> ^ <nat:9> + <nat:4> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:10> + <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:11> + <nat:3> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:f> = <nat:4> * <var:Z> ^ <nat:12> + <nat:3> * <var:Z> ^ <nat:9> + <nat:4> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 