\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:8> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:u> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:u> ; <var:F2> := <var:F2> * <var:u> ; <var:M> := <var:F2> ; <var:M> := <var:M> + <var:F1> ; <var:M> := <var:M> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:u> = <var:d> $ before the execution of this program , it must be that we have $ <var:M> = <nat:9> \cdot <var:d> ^ <nat:2> + <nat:5> \cdot <var:d> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is clear through Hoare reasoning . Shifting focus toward the next step seen in the code segment , we see the binding line \verb | <var:F0> := <nat:8> ; | . This transfers $ \{ <var:u> = <var:d> \} $ toward $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \} $ . This is guaranteed by the assignment rule of standard Hoare reasoning . Taking a look at the following line found in our list of instructions , we have the environment update code giving $ <nat:5> $ as $ <var:F1>$ . This command takes the condition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \} $ toward $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \} $ . Paying attention to the proceeding step contained in the list of instructions , we see the binding line \verb | <var:F1> := <var:F1> * <var:u> ; | . This line transfers the condition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \} $ to $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \} $ . Shifting focus toward the upcoming statement contained in our list of commands , we see the assignment line \verb | <var:F2> := <nat:9> ; | . This redefines $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \} $ into the postcondition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \land <var:F2> = <nat:9> \} $ . This is deduced through the assignment law of usual Hoare logic . Moving forward to the next step , we have the environment update statement defining $ <var:F2> * <var:u> $ toward $ <var:F2>$ . This forwards the precondition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \land <var:F2> = <nat:9> \} $ into the condition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \land <var:F2> = <nat:9> \times <var:d> \} $ . This is given using the assignment law in usual Hoare reasoning . Considering the next piece of code found in our set of instructions , we see the environment update statement defining $ <var:F2> * <var:u> $ to $ <var:F2>$ . This code takes the precondition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \land <var:F2> = <nat:9> \times <var:d> \} $ toward the condition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \land <var:F2> = <nat:9> \times <var:d> ^ <nat:2> \} $ . Honing in on the following piece of code found in the set of instructions , we have the variable assignmet statement letting $ <var:F2> $ toward $ <var:M>$ . This code transfers the precondition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \land <var:F2> = <nat:9> \times <var:d> ^ <nat:2> \} $ as the postcondition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \land <var:M> = <nat:9> \times <var:d> ^ <nat:2> \} $ . This is known to be sound by the assignment law obtained from usual Hoare reasoning . Focusing on the upcoming command found in our set of commands , the assignment command binding $ <var:M> + <var:F1> $ to $ <var:M>$ . This command advances $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:F1> = <nat:5> \times <var:d> \land <var:M> = <nat:9> \times <var:d> ^ <nat:2> \} $ toward $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:M> = <nat:9> \times <var:d> ^ <nat:2> + <nat:5> \times <var:d> \} $ . After , the line assigning $ <var:M> + <var:F0$ into $ <var:M>$ . This advances the precondition $ \{ <var:u> = <var:d> \land <var:F0> = <nat:8> \land <var:M> = <nat:9> \times <var:d> ^ <nat:2> + <nat:5> \times <var:d> \} $ toward the postcondition $ \{ <var:u> = <var:d> \land <var:M> = <nat:9> \times <var:d> ^ <nat:2> + <nat:5> \times <var:d> + <nat:8> \} $ . This is ensured using the assignment law in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:8> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:u> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:u> ; <var:F2> := <var:F2> * <var:u> ; <var:M> := <var:F2> ; <var:M> := <var:M> + <var:F1> ; <var:M> := <var:M> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:u> = <var:d> }} <def:poly> {{ <var:M> = <nat:9> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:5> * <var:d> /\ <var:F2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:5> * <var:d> /\ <var:F2> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:5> * <var:d> /\ <var:F2> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:5> * <var:d> /\ <var:M> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:F0> = <nat:8> /\ <var:M> = <nat:9> * <var:d> ^ <nat:2> + <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:M> = <nat:9> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 