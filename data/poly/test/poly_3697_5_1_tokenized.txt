\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:z> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:4> ; <var:b> := <var:t1> <var:b> := <var:b> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Given , with some positive numbers $ <var:n> $ , that we have $ <var:z> = <var:n> $ prior to the execution of our set of commands , then we see $ <var:b> = <nat:4> \cdot <var:n> + <nat:8> $ after set of instructions has exited . \end{theorem} \begin{proof} Using usual Hoare logic returns : \begin{eqnarray} \{ <var:z> = <var:n> \} \\ <var:t1> := <var:z> ; \\ \{ <var:z> = <var:n> \land <var:t1> = <var:n> \} \\ <var:t0> := <nat:8> ; \\ \{ <var:z> = <var:n> \land <var:t1> = <var:n> \land <var:t0> = <nat:8> \} \\ <var:t1> := <var:t1> * <nat:4> ; \\ \{ <var:z> = <var:n> \land <var:t1> = <nat:4> \cdot <var:n> \land <var:t0> = <nat:8> \} \\ <var:b> := <var:t1> \\ \{ <var:z> = <var:n> \land <var:t0> = <nat:8> \land <var:b> = <nat:4> \cdot <var:n> \} \\ <var:b> := <var:b> + <var:t0> \\ \{ <var:z> = <var:n> \land <var:b> = <nat:4> \cdot <var:n> + <nat:8> \} \end{eqnarray} Thusly , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:z> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:4> ; <var:b> := <var:t1> <var:b> := <var:b> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:z> = <var:n> }} <def:poly> {{ <var:b> = <nat:4> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:t1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:t1> = <var:n> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:t1> = <nat:4> * <var:n> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:t0> = <nat:8> /\ <var:b> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:b> = <nat:4> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 