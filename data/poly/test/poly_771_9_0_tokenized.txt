\begin{document} \begin{theorem} Define a program : \begin{verbatim} <var:e0> := <nat:4> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:l> ; <var:e2> := <nat:4> ; <var:e2> := <var:e2> * <var:l> ; <var:e2> := <var:e2> * <var:l> ; <var:s> := <var:e2> ; <var:s> := <var:s> + <var:e1> ; <var:s> := <var:s> + <var:e0> \end{verbatim} Assume that $ <var:l> = <var:d> $ prior to interpreting this set of commands then we have $ <var:s> = <nat:4> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our series of commands is clear with typical Hoare logic . Taking another step toward the next step found in our series of instructions , we have the variable assignmet statement \verb | <var:e0> := <nat:4> ; | . This forwards the precondition $ \{ <var:l> = <var:d> \} $ toward $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \} $ . This is known to be sound with the assignment inference rule given in standard Hoare techniques . Moving on to the following step seen in the code segment , we see the variable binding statement giving $ <nat:7> $ to $ <var:e1>$ . This forwards $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \} $ as the postcondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> \} $ . Advancing to the proceeding line of code found in our program , the binding statement binding $ <var:e1> * <var:l> $ as $ <var:e1>$ . This redefines the precondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> \} $ toward the postcondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \} $ . Taking a look at the subsequent piece of code seen in our list of commands , the variable assignmet code \verb | <var:e2> := <nat:4> ; | . This statement forwards the precondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \} $ as $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \land <var:e2> = <nat:4> \} $ . This is known to be sound through the assignment scheme defined by typical Hoare logic . Stepping forward , we have the variable update line \verb | <var:e2> := <var:e2> * <var:l> ; | . This line redefines the precondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \land <var:e2> = <nat:4> \} $ as $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \land <var:e2> = <nat:4> * <var:d> \} $ . Advancing , we see the assignment command assigning $ <var:e2> * <var:l> $ into $ <var:e2>$ . This advances the precondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \land <var:e2> = <nat:4> * <var:d> \} $ to the postcondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \land <var:e2> = <nat:4> * <var:d> ^ <nat:2> \} $ . Advancing on , we see the variable update code \verb | <var:s> := <var:e2> ; | . This moves the precondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \land <var:e2> = <nat:4> * <var:d> ^ <nat:2> \} $ to the postcondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \land <var:s> = <nat:4> * <var:d> ^ <nat:2> \} $ . Paying attention to the following line of code found in the code , we see the line defining $ <var:s> + <var:e1> $ to $ <var:s>$ . This transfers the precondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:e1> = <nat:7> * <var:d> \land <var:s> = <nat:4> * <var:d> ^ <nat:2> \} $ toward $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:s> = <nat:4> * <var:d> ^ <nat:2> + <nat:7> * <var:d> \} $ . Paying attention to the subsequent command in our series of instructions , we have the assignment statement assigning $ <var:s> + <var:e0$ toward $ <var:s>$ . This redefines the precondition $ \{ <var:l> = <var:d> \land <var:e0> = <nat:4> \land <var:s> = <nat:4> * <var:d> ^ <nat:2> + <nat:7> * <var:d> \} $ as the postcondition $ \{ <var:l> = <var:d> \land <var:s> = <nat:4> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:4> \} $ . This is shown to be logically sound with the assignment inference rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:l> = <var:d> }} <var:e0> := <nat:4> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:l> ; <var:e2> := <nat:4> ; <var:e2> := <var:e2> * <var:l> ; <var:e2> := <var:e2> * <var:l> ; <var:s> := <var:e2> ; <var:s> := <var:s> + <var:e1> ; <var:s> := <var:s> + <var:e0> {{ <var:s> = <nat:4> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:7> * <var:d> /\ <var:e2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:7> * <var:d> /\ <var:e2> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:7> * <var:d> /\ <var:e2> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:7> * <var:d> /\ <var:s> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:e0> = <nat:4> /\ <var:s> = <nat:4> * <var:d> ^ <nat:2> + <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:s> = <nat:4> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 