\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:5> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:m> ; <var:W> := <var:y1> ; <var:W> := <var:W> + <var:y0> \end{verbatim} Assuming it to be that $ <var:m> = <var:R> $ --- letting positive integer coefficients $ <var:R> $ --- ahead of the evaluation of this code segment it must be that we have $ <var:W> = <nat:1> \cdot <var:R> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions can be given through usual Hoare logic . Moving forward to the next step , the code \verb | <var:y0> := <nat:5> ; | . This line moves the condition $ \{ <var:m> = <var:R> \} $ into the postcondition $ \{ <var:m> = <var:R> \land <var:y0> = <nat:5> \} $ . Further , we see the environment update code \verb | <var:y1> := <nat:1> ; | . This redefines $ \{ <var:m> = <var:R> \land <var:y0> = <nat:5> \} $ to the condition $ \{ <var:m> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:1> \} $ . This is shown with the assignment inference rule from Hoare techniques . Moving forward to the proceeding statement contained in the list of instructions , the assignment command \verb | <var:y1> := <var:y1> * <var:m> ; | . This line transfers the precondition $ \{ <var:m> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:1> \} $ into $ \{ <var:m> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:1> \times <var:R> \} $ . This is sound by the assignment rule of usual Hoare techniques . Moving on to the next step , we see the variable update line \verb | <var:W> := <var:y1> ; | . This moves $ \{ <var:m> = <var:R> \land <var:y0> = <nat:5> \land <var:y1> = <nat:1> \times <var:R> \} $ to the postcondition $ \{ <var:m> = <var:R> \land <var:y0> = <nat:5> \land <var:W> = <nat:1> \times <var:R> \} $ . This is rigorously given through the assignment inference rule defined by usual Hoare logic . Honing in on the proceeding step seen in the program , we have the environment update code \verb | <var:W> := <var:W> + <var:y0> | . This advances the condition $ \{ <var:m> = <var:R> \land <var:y0> = <nat:5> \land <var:W> = <nat:1> \times <var:R> \} $ as the condition $ \{ <var:m> = <var:R> \land <var:W> = <nat:1> \times <var:R> + <nat:5> \} $ . This is guaranteed by the assignment inference rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:m> = <var:R> }} <var:y0> := <nat:5> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:m> ; <var:W> := <var:y1> ; <var:W> := <var:W> + <var:y0> {{ <var:W> = <nat:1> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:y0> = <nat:5> /\ <var:W> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:W> = <nat:1> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 