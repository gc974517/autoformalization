\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G> := <nat:1> ; <var:G> := <nat:3> + <var:G> * <var:e> ; <var:G> := <nat:1> + <var:G> * <var:e> ; <var:G> := <nat:2> + <var:G> * <var:e> ; <var:G> := <var:G> * <var:e> ; <var:G> := <nat:2> + <var:G> * <var:e> ; <var:G> := <nat:1> + <var:G> * <var:e> ; <var:G> := <nat:3> + <var:G> * <var:e> ; <var:G> := <var:G> * <var:e> ; <var:G> := <nat:1> + <var:G> * <var:e> ; <var:G> := <nat:1> + <var:G> * <var:e> ; <var:G> := <nat:2> + <var:G> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Allowing that $ <var:e> = <var:u> $ before the evaluation of this list of instructions then we see $ <var:G> = <nat:1> * <var:u> ^ <nat:11> + <nat:3> * <var:u> ^ <nat:10> + <nat:1> * <var:u> ^ <nat:9> + <nat:2> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> $ when list of instructions terminates . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:e> = <var:u> \} \\ <var:G> := <nat:1> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \} \\ <var:G> := <nat:3> + <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> + <nat:3> \} \\ <var:G> := <nat:1> + <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:1> \} \\ <var:G> := <nat:2> + <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:2> \} \\ <var:G> := <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + \} \\ <var:G> := <nat:2> + <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:5> + <nat:3> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:2> \} \\ <var:G> := <nat:1> + <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:6> + <nat:3> \times <var:u> ^ <nat:5> + <nat:1> \times <var:u> ^ <nat:4> + <nat:2> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> + <nat:1> \} \\ <var:G> := <nat:3> + <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:7> + <nat:3> \times <var:u> ^ <nat:6> + <nat:1> \times <var:u> ^ <nat:5> + <nat:2> \times <var:u> ^ <nat:4> + <nat:2> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:3> \} \\ <var:G> := <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:8> + <nat:3> \times <var:u> ^ <nat:7> + <nat:1> \times <var:u> ^ <nat:6> + <nat:2> \times <var:u> ^ <nat:5> + <nat:2> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + \} \\ <var:G> := <nat:1> + <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:9> + <nat:3> \times <var:u> ^ <nat:8> + <nat:1> \times <var:u> ^ <nat:7> + <nat:2> \times <var:u> ^ <nat:6> + <nat:2> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:e> ; \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:10> + <nat:3> \times <var:u> ^ <nat:9> + <nat:1> \times <var:u> ^ <nat:8> + <nat:2> \times <var:u> ^ <nat:7> + <nat:2> \times <var:u> ^ <nat:5> + <nat:1> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> + <nat:1> \} \\ <var:G> := <nat:2> + <var:G> * <var:e> \\ \{ <var:e> = <var:u> \land <var:G> = <nat:1> \times <var:u> ^ <nat:11> + <nat:3> \times <var:u> ^ <nat:10> + <nat:1> \times <var:u> ^ <nat:9> + <nat:2> \times <var:u> ^ <nat:8> + <nat:2> \times <var:u> ^ <nat:6> + <nat:1> \times <var:u> ^ <nat:5> + <nat:3> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:2> \} \end{eqnarray} Considering the above , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:1> ; <var:G> := <nat:3> + <var:G> * <var:e> ; <var:G> := <nat:1> + <var:G> * <var:e> ; <var:G> := <nat:2> + <var:G> * <var:e> ; <var:G> := <var:G> * <var:e> ; <var:G> := <nat:2> + <var:G> * <var:e> ; <var:G> := <nat:1> + <var:G> * <var:e> ; <var:G> := <nat:3> + <var:G> * <var:e> ; <var:G> := <var:G> * <var:e> ; <var:G> := <nat:1> + <var:G> * <var:e> ; <var:G> := <nat:1> + <var:G> * <var:e> ; <var:G> := <nat:2> + <var:G> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:e> = <var:u> }} <def:poly> {{ <var:G> = <nat:1> * <var:u> ^ <nat:11> + <nat:3> * <var:u> ^ <nat:10> + <nat:1> * <var:u> ^ <nat:9> + <nat:2> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:6> + <nat:3> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:7> + <nat:3> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:8> + <nat:3> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:9> + <nat:3> * <var:u> ^ <nat:8> + <nat:1> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:10> + <nat:3> * <var:u> ^ <nat:9> + <nat:1> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:G> = <nat:1> * <var:u> ^ <nat:11> + <nat:3> * <var:u> ^ <nat:10> + <nat:1> * <var:u> ^ <nat:9> + <nat:2> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 