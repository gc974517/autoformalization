\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:9> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:i> ; <var:O> := <var:q1> ; <var:O> := <var:O> + <var:q0> \end{verbatim} Assuming ( for $ <var:U> $ ) that we have $ <var:i> = <var:U> $ prior to the evaluation of our set of commands then $ <var:O> = <nat:1> \cdot <var:U> + <nat:9> $ after set of commands exits . \end{theorem} \begin{proof} The argument for our set of instructions is evident using Hoare logic . Immediately after , \begin{eqnarray} \{ <var:i> = <var:U> \} \, <var:q0> := <nat:9> \, \{ <var:i> = <var:U> \land <var:q0> = <nat:9> \} \\ \{ <var:i> = <var:U> \land <var:q0> = <nat:9> \} \, <var:q1> := <nat:1> \, \{ <var:i> = <var:U> \land <var:q0> = <nat:9> \land <var:q1> = <nat:1> \} \\ \{ <var:i> = <var:U> \land <var:q0> = <nat:9> \land <var:q1> = <nat:1> \} \, <var:q1> := <var:q1> * <var:i> \, \{ <var:i> = <var:U> \land <var:q0> = <nat:9> \land <var:q1> = <nat:1> \cdot <var:U> \} \\ \{ <var:i> = <var:U> \land <var:q0> = <nat:9> \land <var:q1> = <nat:1> \cdot <var:U> \} \, <var:O> := <var:q1> \, \{ <var:i> = <var:U> \land <var:q0> = <nat:9> \land <var:O> = <nat:1> \cdot <var:U> \} \end{eqnarray} This is rigorously given through the assignment inference rule given by Hoare logic . Shifting focus toward the subsequent bit of code seen in the series of instructions , we see \begin{eqnarray} \{ <var:i> = <var:U> \} \, <var:q0> := <nat:9> \, \{ <var:i> = <var:U> \land <var:q0> = <nat:9> \} \end{eqnarray} This is rigorously given using the binding scheme in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:i> = <var:U> }} <var:q0> := <nat:9> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:i> ; <var:O> := <var:q1> ; <var:O> := <var:O> + <var:q0> {{ <var:O> = <nat:1> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:q0> = <nat:9> /\ <var:O> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:O> = <nat:1> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 