\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:x0> := <nat:9> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:b> ; <var:d> := <var:x1> ; <var:d> := <var:d> + <var:x0> \end{verbatim} Assuming it to be that $ <var:b> = <var:z> $ prior to the evaluation of this code segment , it follows that we see $ <var:d> = <nat:9> * <var:z> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands can be demonstrated using standard Hoare logic . Going to the next step , we see the command letting $ <nat:9> $ into $ <var:x0>$ . This moves $ \{ <var:b> = <var:z> \} $ as $ \{ <var:b> = <var:z> \land <var:x0> = <nat:9> \} $ . This is rigorously given with the assignment inference rule of typical Hoare logic . Looking at the following piece of code in our segment of code , we see the variable update statement \verb | <var:x1> := <nat:9> ; | . This transfers $ \{ <var:b> = <var:z> \land <var:x0> = <nat:9> \} $ as the condition $ \{ <var:b> = <var:z> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> \} $ . This is known to be sound by the assignment rule in usual Hoare techniques . Moving on , we see the variable update statement binding $ <var:x1> * <var:b> $ as $ <var:x1>$ . This statement forwards $ \{ <var:b> = <var:z> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> \} $ into $ \{ <var:b> = <var:z> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> \cdot <var:z> \} $ . This is rigorously given with the assignment inference rule in standard Hoare reasoning . Stepping through , we see the variable assignmet command letting $ <var:x1> $ toward $ <var:d>$ . This advances the condition $ \{ <var:b> = <var:z> \land <var:x0> = <nat:9> \land <var:x1> = <nat:9> \cdot <var:z> \} $ to the condition $ \{ <var:b> = <var:z> \land <var:x0> = <nat:9> \land <var:d> = <nat:9> \cdot <var:z> \} $ . Advancing on , we have the variable assignmet statement \verb | <var:d> := <var:d> + <var:x0> | . This statement transfers the condition $ \{ <var:b> = <var:z> \land <var:x0> = <nat:9> \land <var:d> = <nat:9> \cdot <var:z> \} $ as the postcondition $ \{ <var:b> = <var:z> \land <var:d> = <nat:9> \cdot <var:z> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:b> = <var:z> }} <var:x0> := <nat:9> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:b> ; <var:d> := <var:x1> ; <var:d> := <var:d> + <var:x0> {{ <var:d> = <nat:9> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:x0> = <nat:9> /\ <var:d> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:d> = <nat:9> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 