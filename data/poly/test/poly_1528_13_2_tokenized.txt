\begin{document} \begin{theorem} Take a set of commands as \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:Q> ; <var:w> := <nat:1> + <var:w> * <var:Q> ; <var:w> := <nat:3> + <var:w> * <var:Q> ; <var:w> := <nat:3> + <var:w> * <var:Q> ; <var:w> := <nat:3> + <var:w> * <var:Q> ; <var:w> := <nat:4> + <var:w> * <var:Q> ; <var:w> := <var:w> * <var:Q> ; <var:w> := <nat:2> + <var:w> * <var:Q> ; <var:w> := <nat:1> + <var:w> * <var:Q> ; <var:w> := <nat:1> + <var:w> * <var:Q> ; <var:w> := <nat:2> + <var:w> * <var:Q> ; <var:w> := <nat:3> + <var:w> * <var:Q> \end{verbatim} Allowing that we have $ <var:Q> = <var:U> $ prior to executing the code , then we see $ <var:w> = <nat:4> \cdot <var:U> ^ <nat:12> + <nat:4> \cdot <var:U> ^ <nat:11> + <nat:1> \cdot <var:U> ^ <nat:10> + <nat:3> \cdot <var:U> ^ <nat:9> + <nat:3> \cdot <var:U> ^ <nat:8> + <nat:3> \cdot <var:U> ^ <nat:7> + <nat:4> \cdot <var:U> ^ <nat:6> + <nat:2> \cdot <var:U> ^ <nat:4> + <nat:1> \cdot <var:U> ^ <nat:3> + <nat:1> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:3> $ after code segment terminates . \end{theorem} \begin{proof} Using typical Hoare techniques results in : \begin{eqnarray} \{ <var:Q> = <var:U> \} \\ <var:w> := <nat:4> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \} \\ <var:w> := <nat:4> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> + <nat:4> \} \\ <var:w> := <nat:1> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:1> \} \\ <var:w> := <nat:3> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:3> \} \\ <var:w> := <nat:3> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:3> \} \\ <var:w> := <nat:3> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:5> + <nat:4> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:3> \} \\ <var:w> := <nat:4> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:6> + <nat:4> \times <var:U> ^ <nat:5> + <nat:1> \times <var:U> ^ <nat:4> + <nat:3> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:4> \} \\ <var:w> := <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:7> + <nat:4> \times <var:U> ^ <nat:6> + <nat:1> \times <var:U> ^ <nat:5> + <nat:3> \times <var:U> ^ <nat:4> + <nat:3> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + \} \\ <var:w> := <nat:2> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:8> + <nat:4> \times <var:U> ^ <nat:7> + <nat:1> \times <var:U> ^ <nat:6> + <nat:3> \times <var:U> ^ <nat:5> + <nat:3> \times <var:U> ^ <nat:4> + <nat:3> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:2> \} \\ <var:w> := <nat:1> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:9> + <nat:4> \times <var:U> ^ <nat:8> + <nat:1> \times <var:U> ^ <nat:7> + <nat:3> \times <var:U> ^ <nat:6> + <nat:3> \times <var:U> ^ <nat:5> + <nat:3> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> + <nat:1> \} \\ <var:w> := <nat:1> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:10> + <nat:4> \times <var:U> ^ <nat:9> + <nat:1> \times <var:U> ^ <nat:8> + <nat:3> \times <var:U> ^ <nat:7> + <nat:3> \times <var:U> ^ <nat:6> + <nat:3> \times <var:U> ^ <nat:5> + <nat:4> \times <var:U> ^ <nat:4> + <nat:2> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> \} \end{eqnarray} Allowing the execution of the set of instructions returns : \begin{eqnarray} <var:w> := <nat:2> + <var:w> * <var:Q> ; \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:11> + <nat:4> \times <var:U> ^ <nat:10> + <nat:1> \times <var:U> ^ <nat:9> + <nat:3> \times <var:U> ^ <nat:8> + <nat:3> \times <var:U> ^ <nat:7> + <nat:3> \times <var:U> ^ <nat:6> + <nat:4> \times <var:U> ^ <nat:5> + <nat:2> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:2> \} \\ <var:w> := <nat:3> + <var:w> * <var:Q> \\ \{ <var:Q> = <var:U> \land <var:w> = <nat:4> \times <var:U> ^ <nat:12> + <nat:4> \times <var:U> ^ <nat:11> + <nat:1> \times <var:U> ^ <nat:10> + <nat:3> \times <var:U> ^ <nat:9> + <nat:3> \times <var:U> ^ <nat:8> + <nat:3> \times <var:U> ^ <nat:7> + <nat:4> \times <var:U> ^ <nat:6> + <nat:2> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:3> \} \end{eqnarray} Hence , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Q> = <var:U> }} <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:Q> ; <var:w> := <nat:1> + <var:w> * <var:Q> ; <var:w> := <nat:3> + <var:w> * <var:Q> ; <var:w> := <nat:3> + <var:w> * <var:Q> ; <var:w> := <nat:3> + <var:w> * <var:Q> ; <var:w> := <nat:4> + <var:w> * <var:Q> ; <var:w> := <var:w> * <var:Q> ; <var:w> := <nat:2> + <var:w> * <var:Q> ; <var:w> := <nat:1> + <var:w> * <var:Q> ; <var:w> := <nat:1> + <var:w> * <var:Q> ; <var:w> := <nat:2> + <var:w> * <var:Q> ; <var:w> := <nat:3> + <var:w> * <var:Q> {{ <var:w> = <nat:4> * <var:U> ^ <nat:12> + <nat:4> * <var:U> ^ <nat:11> + <nat:1> * <var:U> ^ <nat:10> + <nat:3> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:8> + <nat:4> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:10> + <nat:4> * <var:U> ^ <nat:9> + <nat:1> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:11> + <nat:4> * <var:U> ^ <nat:10> + <nat:1> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:12> + <nat:4> * <var:U> ^ <nat:11> + <nat:1> * <var:U> ^ <nat:10> + <nat:3> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 