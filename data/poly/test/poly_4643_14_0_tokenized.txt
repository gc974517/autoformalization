\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:4> ; <var:k1> := <nat:6> ; <var:k1> := <var:k1> * <var:l> ; <var:k2> := <nat:9> ; <var:k2> := <var:k2> * <var:l> ; <var:k2> := <var:k2> * <var:l> ; <var:k3> := <nat:8> ; <var:k3> := <var:k3> * <var:l> ; <var:k3> := <var:k3> * <var:l> ; <var:k3> := <var:k3> * <var:l> ; <var:z> := <var:k3> ; <var:z> := <var:z> + <var:k2> ; <var:z> := <var:z> + <var:k1> ; <var:z> := <var:z> + <var:k0> \end{verbatim} Given that $ <var:l> = <var:A> $ ( with some $ <var:A> \in \mathbb{Z}^+ $ ) ahead of running this list of commands , it follows that $ <var:z> = <nat:8> \times <var:A> ^ <nat:3> + <nat:9> \times <var:A> ^ <nat:2> + <nat:6> \times <var:A> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:A> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \} \\ <var:k1> := <nat:6> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \} \\ <var:k1> := <var:k1> * <var:l> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \} \\ <var:k2> := <nat:9> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:k2> = <nat:9> \} \\ <var:k2> := <var:k2> * <var:l> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:k2> = <nat:9> \cdot <var:A> \} \\ <var:k2> := <var:k2> * <var:l> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:k2> = <nat:9> \cdot <var:A> ^ <nat:2> \} \\ <var:k3> := <nat:8> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:k2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:k3> = <nat:8> \} \end{eqnarray} Allowing the execution of our program yields : \begin{eqnarray} <var:k3> := <var:k3> * <var:l> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:k2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:k3> = <nat:8> \cdot <var:A> \} \\ <var:k3> := <var:k3> * <var:l> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:k2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:k3> = <nat:8> \cdot <var:A> ^ <nat:2> \} \\ <var:k3> := <var:k3> * <var:l> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:k2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:k3> = <nat:8> \cdot <var:A> ^ <nat:3> \} \\ <var:z> := <var:k3> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:k2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:z> = <nat:8> \cdot <var:A> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:k2> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:6> \cdot <var:A> \land <var:z> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:k1> ; \\ \{ <var:l> = <var:A> \land <var:k0> = <nat:4> \land <var:z> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> + <nat:6> \cdot <var:A> \} \\ <var:z> := <var:z> + <var:k0> \\ \{ <var:l> = <var:A> \land <var:z> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> + <nat:6> \cdot <var:A> + <nat:4> \} \end{eqnarray} Utilizing Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:l> = <var:A> }} <var:k0> := <nat:4> ; <var:k1> := <nat:6> ; <var:k1> := <var:k1> * <var:l> ; <var:k2> := <nat:9> ; <var:k2> := <var:k2> * <var:l> ; <var:k2> := <var:k2> * <var:l> ; <var:k3> := <nat:8> ; <var:k3> := <var:k3> * <var:l> ; <var:k3> := <var:k3> * <var:l> ; <var:k3> := <var:k3> * <var:l> ; <var:z> := <var:k3> ; <var:z> := <var:z> + <var:k2> ; <var:z> := <var:z> + <var:k1> ; <var:z> := <var:z> + <var:k0> {{ <var:z> = <nat:8> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:k2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:k2> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:k2> = <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:k2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:k3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:k2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:k2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:k2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:k2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:z> = <nat:8> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:6> * <var:A> /\ <var:z> = <nat:8> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k0> = <nat:4> /\ <var:z> = <nat:8> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:z> = <nat:8> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 