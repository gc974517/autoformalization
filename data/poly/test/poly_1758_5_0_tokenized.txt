\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:9> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:X> ; <var:i> := <var:Y1> ; <var:i> := <var:i> + <var:Y0> \end{verbatim} Assume it to be that $ <var:X> = <var:N> $ ahead of executing this program , it follows that we see $ <var:i> = <nat:9> * <var:N> + <nat:9> $ after code segment has finished . \end{theorem} \begin{proof} The way to prove correctness for our program is shown through standard Hoare reasoning . Next , we see the command yielding $ <nat:9> $ as $ <var:Y0>$ . This takes $ \{ <var:X> = <var:N> \} $ as the postcondition $ \{ <var:X> = <var:N> \land <var:Y0> = <nat:9> \} $ . Immediately after , we see the assignment statement \verb | <var:Y1> := <nat:9> ; | . This moves the condition $ \{ <var:X> = <var:N> \land <var:Y0> = <nat:9> \} $ to the postcondition $ \{ <var:X> = <var:N> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:9> \} $ . This is sound through the assignment scheme of standard Hoare reasoning . Moving forward to the next step , we have the variable assignmet line \verb | <var:Y1> := <var:Y1> * <var:X> ; | . This statement takes the precondition $ \{ <var:X> = <var:N> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:9> \} $ into $ \{ <var:X> = <var:N> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:9> \times <var:N> \} $ . Going forward , the assignment code \verb | <var:i> := <var:Y1> ; | . This advances the precondition $ \{ <var:X> = <var:N> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:9> \times <var:N> \} $ into the condition $ \{ <var:X> = <var:N> \land <var:Y0> = <nat:9> \land <var:i> = <nat:9> \times <var:N> \} $ . Advancing to the next step , we see the variable assignmet command \verb | <var:i> := <var:i> + <var:Y0> | . This moves the condition $ \{ <var:X> = <var:N> \land <var:Y0> = <nat:9> \land <var:i> = <nat:9> \times <var:N> \} $ toward the condition $ \{ <var:X> = <var:N> \land <var:i> = <nat:9> \times <var:N> + <nat:9> \} $ . This is rigorously given using the assignment law of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:X> = <var:N> }} <var:Y0> := <nat:9> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:X> ; <var:i> := <var:Y1> ; <var:i> := <var:i> + <var:Y0> {{ <var:i> = <nat:9> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Y0> = <nat:9> /\ <var:Y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Y0> = <nat:9> /\ <var:Y1> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Y0> = <nat:9> /\ <var:i> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:i> = <nat:9> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 