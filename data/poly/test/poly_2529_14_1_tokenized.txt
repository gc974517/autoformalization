\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:B> ; <var:u2> := <var:u1> * <var:B> ; <var:u3> := <var:u2> * <var:B> ; <var:u4> := <var:u3> * <var:B> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:7> ; <var:u2> := <var:u2> * <nat:3> ; <var:u3> := <var:u3> * <nat:3> ; <var:u4> := <var:u4> * <nat:9> ; <var:I> := <var:u4> <var:I> := <var:I> + <var:u3> <var:I> := <var:I> + <var:u2> <var:I> := <var:I> + <var:u1> <var:I> := <var:I> + <var:u0> \end{verbatim} Assume that we have $ <var:B> = <var:C> $ before the evaluation of this code it holds that we see $ <var:I> = <nat:9> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:2> $ after set of commands executes . \end{theorem} \begin{proof} We can see that this decorated code segment . \begin{eqnarray} \{ <var:B> = <var:C> \} \\ <var:u1> := <var:B> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <var:C> \} \\ <var:u2> := <var:u1> * <var:B> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <var:C> \land <var:u2> = <var:C> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:B> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <var:C> \land <var:u2> = <var:C> ^ <nat:2> \land <var:u3> = <var:C> ^ <nat:3> \} \\ <var:u4> := <var:u3> * <var:B> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <var:C> \land <var:u2> = <var:C> ^ <nat:2> \land <var:u3> = <var:C> ^ <nat:3> \land <var:u4> = <var:C> ^ <nat:4> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <var:C> \land <var:u2> = <var:C> ^ <nat:2> \land <var:u3> = <var:C> ^ <nat:3> \land <var:u4> = <var:C> ^ <nat:4> \land <var:u0> = <nat:2> \} \\ <var:u1> := <var:u1> * <nat:7> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <nat:7> \times <var:C> \land <var:u2> = <var:C> ^ <nat:2> \land <var:u3> = <var:C> ^ <nat:3> \land <var:u4> = <var:C> ^ <nat:4> \land <var:u0> = <nat:2> \} \\ <var:u2> := <var:u2> * <nat:3> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <nat:7> \times <var:C> \land <var:u2> = <nat:3> \times <var:C> ^ <nat:2> \land <var:u3> = <var:C> ^ <nat:3> \land <var:u4> = <var:C> ^ <nat:4> \land <var:u0> = <nat:2> \} \\ <var:u3> := <var:u3> * <nat:3> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <nat:7> \times <var:C> \land <var:u2> = <nat:3> \times <var:C> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:C> ^ <nat:3> \land <var:u4> = <var:C> ^ <nat:4> \land <var:u0> = <nat:2> \} \\ <var:u4> := <var:u4> * <nat:9> ; \\ \{ <var:B> = <var:C> \land <var:u1> = <nat:7> \times <var:C> \land <var:u2> = <nat:3> \times <var:C> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:C> ^ <nat:3> \land <var:u4> = <nat:9> \times <var:C> ^ <nat:4> \land <var:u0> = <nat:2> \} \\ <var:I> := <var:u4> \\ \{ <var:B> = <var:C> \land <var:u1> = <nat:7> \times <var:C> \land <var:u2> = <nat:3> \times <var:C> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:C> ^ <nat:3> \land <var:u0> = <nat:2> \land <var:I> = <nat:9> \times <var:C> ^ <nat:4> \} \\ <var:I> := <var:I> + <var:u3> \\ \{ <var:B> = <var:C> \land <var:u1> = <nat:7> \times <var:C> \land <var:u2> = <nat:3> \times <var:C> ^ <nat:2> \land <var:u0> = <nat:2> \land <var:I> = <nat:9> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:u2> \\ \{ <var:B> = <var:C> \land <var:u1> = <nat:7> \times <var:C> \land <var:u0> = <nat:2> \land <var:I> = <nat:9> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:u1> \\ \{ <var:B> = <var:C> \land <var:u0> = <nat:2> \land <var:I> = <nat:9> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:7> \times <var:C> \} \\ <var:I> := <var:I> + <var:u0> \\ \{ <var:B> = <var:C> \land <var:I> = <nat:9> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:7> \times <var:C> + <nat:2> \} \end{eqnarray} The application of Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:B> = <var:C> }} <var:u1> := <var:B> ; <var:u2> := <var:u1> * <var:B> ; <var:u3> := <var:u2> * <var:B> ; <var:u4> := <var:u3> * <var:B> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:7> ; <var:u2> := <var:u2> * <nat:3> ; <var:u3> := <var:u3> * <nat:3> ; <var:u4> := <var:u4> * <nat:9> ; <var:I> := <var:u4> <var:I> := <var:I> + <var:u3> <var:I> := <var:I> + <var:u2> <var:I> := <var:I> + <var:u1> <var:I> := <var:I> + <var:u0> {{ <var:I> = <nat:9> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <var:C> /\ <var:u2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <var:C> /\ <var:u2> = <var:C> ^ <nat:2> /\ <var:u3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <var:C> /\ <var:u2> = <var:C> ^ <nat:2> /\ <var:u3> = <var:C> ^ <nat:3> /\ <var:u4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <var:C> /\ <var:u2> = <var:C> ^ <nat:2> /\ <var:u3> = <var:C> ^ <nat:3> /\ <var:u4> = <var:C> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <nat:7> * <var:C> /\ <var:u2> = <var:C> ^ <nat:2> /\ <var:u3> = <var:C> ^ <nat:3> /\ <var:u4> = <var:C> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <nat:7> * <var:C> /\ <var:u2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:u3> = <var:C> ^ <nat:3> /\ <var:u4> = <var:C> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <nat:7> * <var:C> /\ <var:u2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:u4> = <var:C> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <nat:7> * <var:C> /\ <var:u2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:u4> = <nat:9> * <var:C> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <nat:7> * <var:C> /\ <var:u2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:u0> = <nat:2> /\ <var:I> = <nat:9> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <nat:7> * <var:C> /\ <var:u2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:u0> = <nat:2> /\ <var:I> = <nat:9> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u1> = <nat:7> * <var:C> /\ <var:u0> = <nat:2> /\ <var:I> = <nat:9> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:u0> = <nat:2> /\ <var:I> = <nat:9> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:I> = <nat:9> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 