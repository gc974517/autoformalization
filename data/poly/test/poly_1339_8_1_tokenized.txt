\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:F> ; <var:A2> := <var:A1> * <var:F> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:2> ; <var:A2> := <var:A2> * <nat:1> ; <var:j> := <var:A2> <var:j> := <var:j> + <var:A1> <var:j> := <var:j> + <var:A0> \end{verbatim} Given it to hold that $ <var:F> = <var:g> $ ahead of the evaluation of the code , it follows that we have $ <var:j> = <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:2> $ once code terminates . \end{theorem} \begin{proof} The method of proof for this code segment is clear by the following decorated code segment . \begin{eqnarray} \{ <var:F> = <var:g> \} \\ <var:A1> := <var:F> ; \\ \{ <var:F> = <var:g> \land <var:A1> = <var:g> \} \\ <var:A2> := <var:A1> * <var:F> ; \\ \{ <var:F> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:F> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A0> = <nat:2> \} \\ <var:A1> := <var:A1> * <nat:2> ; \\ \{ <var:F> = <var:g> \land <var:A1> = <nat:2> \times <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A0> = <nat:2> \} \\ <var:A2> := <var:A2> * <nat:1> ; \\ \{ <var:F> = <var:g> \land <var:A1> = <nat:2> \times <var:g> \land <var:A2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:A0> = <nat:2> \} \\ <var:j> := <var:A2> \\ \{ <var:F> = <var:g> \land <var:A1> = <nat:2> \times <var:g> \land <var:A0> = <nat:2> \land <var:j> = <nat:1> \times <var:g> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:A1> \\ \{ <var:F> = <var:g> \land <var:A0> = <nat:2> \land <var:j> = <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> \} \\ <var:j> := <var:j> + <var:A0> \\ \{ <var:F> = <var:g> \land <var:j> = <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:2> \} \end{eqnarray} Applying usual Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:F> = <var:g> }} <var:A1> := <var:F> ; <var:A2> := <var:A1> * <var:F> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:2> ; <var:A2> := <var:A2> * <nat:1> ; <var:j> := <var:A2> <var:j> := <var:j> + <var:A1> <var:j> := <var:j> + <var:A0> {{ <var:j> = <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:A1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:A1> = <var:g> /\ <var:A2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:A1> = <var:g> /\ <var:A2> = <var:g> ^ <nat:2> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:A1> = <nat:2> * <var:g> /\ <var:A2> = <var:g> ^ <nat:2> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:A1> = <nat:2> * <var:g> /\ <var:A2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:A1> = <nat:2> * <var:g> /\ <var:A0> = <nat:2> /\ <var:j> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:A0> = <nat:2> /\ <var:j> = <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:j> = <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 