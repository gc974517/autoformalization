\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:R> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:8> ; <var:J> := <var:P1> <var:J> := <var:J> + <var:P0> \end{verbatim} Assume that $ <var:R> = <var:p> $ prior to evaluating our code it holds that we see $ <var:J> = <nat:8> \times <var:p> + <nat:4> $ once code segment has terminated . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:R> = <var:p> \} \\ <var:P1> := <var:R> ; \\ \{ <var:R> = <var:p> \land <var:P1> = <var:p> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:R> = <var:p> \land <var:P1> = <var:p> \land <var:P0> = <nat:4> \} \\ <var:P1> := <var:P1> * <nat:8> ; \\ \{ <var:R> = <var:p> \land <var:P1> = <nat:8> \cdot <var:p> \land <var:P0> = <nat:4> \} \\ <var:J> := <var:P1> \\ \{ <var:R> = <var:p> \land <var:P0> = <nat:4> \land <var:J> = <nat:8> \cdot <var:p> \} \\ <var:J> := <var:J> + <var:P0> \\ \{ <var:R> = <var:p> \land <var:J> = <nat:8> \cdot <var:p> + <nat:4> \} \end{eqnarray} Hence , the program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:R> = <var:p> }} <var:P1> := <var:R> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:8> ; <var:J> := <var:P1> <var:J> := <var:J> + <var:P0> {{ <var:J> = <nat:8> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:P1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:P1> = <var:p> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:P1> = <nat:8> * <var:p> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:P0> = <nat:4> /\ <var:J> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:J> = <nat:8> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 