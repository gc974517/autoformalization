\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:9> ; <var:k1> := <var:k1> * <var:P> ; <var:k3> := <nat:2> ; <var:k3> := <var:k3> * <var:P> ; <var:k3> := <var:k3> * <var:P> ; <var:k3> := <var:k3> * <var:P> ; <var:R> := <var:k3> ; <var:R> := <var:R> + <var:k1> ; <var:R> := <var:R> + <var:k0> \end{verbatim} Allow ( given every positive integer coefficients $ <var:s> $ ) that $ <var:P> = <var:s> $ before evaluating this program , then $ <var:R> = <nat:2> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> + <nat:2> $ . \end{theorem} \begin{proof} Using Hoare logic gives : \begin{eqnarray} \{ <var:P> = <var:s> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \} \\ <var:k1> := <nat:9> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \land <var:k1> = <nat:9> \} \\ <var:k1> := <var:k1> * <var:P> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \land <var:k1> = <nat:9> * <var:s> \} \\ <var:k3> := <nat:2> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \land <var:k1> = <nat:9> * <var:s> \land <var:k3> = <nat:2> \} \\ <var:k3> := <var:k3> * <var:P> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \land <var:k1> = <nat:9> * <var:s> \land <var:k3> = <nat:2> * <var:s> \} \\ <var:k3> := <var:k3> * <var:P> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \land <var:k1> = <nat:9> * <var:s> \land <var:k3> = <nat:2> * <var:s> ^ <nat:2> \} \\ <var:k3> := <var:k3> * <var:P> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \land <var:k1> = <nat:9> * <var:s> \land <var:k3> = <nat:2> * <var:s> ^ <nat:3> \} \\ <var:R> := <var:k3> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \land <var:k1> = <nat:9> * <var:s> \land <var:R> = <nat:2> * <var:s> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:k1> ; \\ \{ <var:P> = <var:s> \land <var:k0> = <nat:2> \land <var:R> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> \} \\ <var:R> := <var:R> + <var:k0> \\ \{ <var:P> = <var:s> \land <var:R> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> + <nat:2> \} \end{eqnarray} As a result , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:P> = <var:s> }} <var:k0> := <nat:2> ; <var:k1> := <nat:9> ; <var:k1> := <var:k1> * <var:P> ; <var:k3> := <nat:2> ; <var:k3> := <var:k3> * <var:P> ; <var:k3> := <var:k3> * <var:P> ; <var:k3> := <var:k3> * <var:P> ; <var:R> := <var:k3> ; <var:R> := <var:R> + <var:k1> ; <var:R> := <var:R> + <var:k0> {{ <var:R> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:9> * <var:s> /\ <var:k3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:9> * <var:s> /\ <var:k3> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:9> * <var:s> /\ <var:k3> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:9> * <var:s> /\ <var:k3> = <nat:2> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:9> * <var:s> /\ <var:R> = <nat:2> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:k0> = <nat:2> /\ <var:R> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:R> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 