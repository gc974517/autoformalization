\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:P> := <nat:2> ; <var:P> := <var:P> * <var:j> ; <var:P> := <nat:3> + <var:P> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Allow that $ <var:j> = <var:R> $ before interpreting our code it must be that we have $ <var:P> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions is accomplished by typical Hoare techniques . Taking another step toward the following command seen in our code segment , \begin{verbatim} { <var:j> = <var:R> } <var:P> := <nat:2> { <var:j> = <var:R> \land <var:P> = <nat:2> } \end{verbatim} After , we have \begin{verbatim} { <var:j> = <var:R> } <var:P> := <nat:2> { <var:j> = <var:R> \land <var:P> = <nat:2> } \end{verbatim} This is shown to be logically sound by the variable binding rule defined in Hoare logic . Shifting focus toward the following line contained in the set of commands , \begin{verbatim} { <var:j> = <var:R> } <var:P> := <nat:2> { <var:j> = <var:R> \land <var:P> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:2> ; <var:P> := <var:P> * <var:j> ; <var:P> := <nat:3> + <var:P> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:j> = <var:R> }} <def:poly> {{ <var:P> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:R> /\ <var:P> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:R> /\ <var:P> = <nat:2> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:R> /\ <var:P> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 