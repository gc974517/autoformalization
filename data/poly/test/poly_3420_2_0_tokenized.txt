\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:1> ; <var:B> := <var:f0> \end{verbatim} Given --- given any positive integers $ <var:a> $ --- it to hold that $ <var:X> = <var:a> $ ahead of interpreting the series of commands it follows that we have $ <var:B> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is accomplished using typical Hoare logic . Considering the next line of code in our set of commands , we see the binding statement \verb | <var:f0> := <nat:1> ; | . This moves $ \{ <var:X> = <var:a> \} $ toward $ \{ <var:X> = <var:a> \land <var:f0> = <nat:1> \} $ . This is guaranteed through the assignment rule from Hoare logic . Going to the next step , we have the variable update statement giving $ <var:f0$ as $ <var:B>$ . This transfers $ \{ <var:X> = <var:a> \land <var:f0> = <nat:1> \} $ toward the postcondition $ \{ <var:X> = <var:a> \land <var:B> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:X> = <var:a> }} <var:f0> := <nat:1> ; <var:B> := <var:f0> {{ <var:B> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:B> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 