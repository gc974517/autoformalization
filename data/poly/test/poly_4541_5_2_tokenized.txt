\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:R> ; <var:d> := <nat:1> + <var:d> * <var:R> ; <var:d> := <nat:4> + <var:d> * <var:R> ; <var:d> := <nat:4> + <var:d> * <var:R> \end{verbatim} Allow that we have $ <var:R> = <var:X> $ , letting $ <var:X> $ , before evaluating this program , then we have $ <var:d> = <nat:4> \cdot <var:X> ^ <nat:4> + <nat:2> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:4> $ once code is done . \end{theorem} \begin{proof} The course of logic for the set of commands is demonstrated with usual Hoare logic . Advancing , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:X> \} & <var:d> := <nat:4> & \{ <var:R> = <var:X> \land <var:d> = <nat:4> \} \\ \{ <var:R> = <var:X> \land <var:d> = <nat:4> \} & <var:d> := <nat:2> + <var:d> * <var:R> & \{ <var:R> = <var:X> \land <var:d> = <nat:4> \cdot <var:X> + <nat:2> \} \\ \{ <var:R> = <var:X> \land <var:d> = <nat:4> \cdot <var:X> + <nat:2> \} & <var:d> := <nat:1> + <var:d> * <var:R> & \{ <var:R> = <var:X> \land <var:d> = <nat:4> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:1> \} \end{tabular} Advancing on , \[ \begin{tabular} {rcl} \{ <var:R> = <var:X> \} & <var:d> := <nat:4> & \{ <var:R> = <var:X> \land <var:d> = <nat:4> \} \end{tabular} Further , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:X> \} & <var:d> := <nat:4> & \{ <var:R> = <var:X> \land <var:d> = <nat:4> \} \end{tabular} This is known to be sound with the environment update inference rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:R> = <var:X> }} <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:R> ; <var:d> := <nat:1> + <var:d> * <var:R> ; <var:d> := <nat:4> + <var:d> * <var:R> ; <var:d> := <nat:4> + <var:d> * <var:R> {{ <var:d> = <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:d> = <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:d> = <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:d> = <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:d> = <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 