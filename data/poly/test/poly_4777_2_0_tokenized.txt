\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:8> ; <var:S> := <var:C0> \end{verbatim} Assuming --- for every $ <var:O> \in \mathbb{N} $ --- $ <var:x> = <var:O> $ prior to evaluating the set of instructions , it must be that we have $ <var:S> = <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for this code segment can be demonstrated using Hoare techniques . Going to the next step , the variable assignmet statement yielding $ <nat:8> $ into $ <var:C0>$ . This command moves $ \{ <var:x> = <var:O> \} $ into $ \{ <var:x> = <var:O> \land <var:C0> = <nat:8> \} $ . Moving forward to the following piece of code found in the set of commands , we see the binding statement \verb | <var:S> := <var:C0> | . This forwards the condition $ \{ <var:x> = <var:O> \land <var:C0> = <nat:8> \} $ into $ \{ <var:x> = <var:O> \land <var:S> = <nat:8> \} $ . This is given with the assignment inference rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:x> = <var:O> }} <var:C0> := <nat:8> ; <var:S> := <var:C0> {{ <var:S> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:S> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 