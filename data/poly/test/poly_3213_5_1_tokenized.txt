\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as \begin{verbatim} <var:v1> := <var:e> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:2> ; <var:g> := <var:v1> <var:g> := <var:g> + <var:v0> \end{verbatim} Assume , for all whole numbers $ <var:q> $ , that $ <var:e> = <var:q> $ prior to evaluating this list of instructions it holds that $ <var:g> = <nat:2> \times <var:q> + <nat:7> $ after set of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:q> \} \\ <var:v1> := <var:e> ; \\ \{ <var:e> = <var:q> \land <var:v1> = <var:q> \} \\ <var:v0> := <nat:7> ; \\ \{ <var:e> = <var:q> \land <var:v1> = <var:q> \land <var:v0> = <nat:7> \} \\ <var:v1> := <var:v1> * <nat:2> ; \\ \{ <var:e> = <var:q> \land <var:v1> = <nat:2> * <var:q> \land <var:v0> = <nat:7> \} \\ <var:g> := <var:v1> \\ \{ <var:e> = <var:q> \land <var:v0> = <nat:7> \land <var:g> = <nat:2> * <var:q> \} \\ <var:g> := <var:g> + <var:v0> \\ \{ <var:e> = <var:q> \land <var:g> = <nat:2> * <var:q> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:e> = <var:q> }} <var:v1> := <var:e> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:2> ; <var:g> := <var:v1> <var:g> := <var:g> + <var:v0> {{ <var:g> = <nat:2> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:v1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:v1> = <var:q> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:v1> = <nat:2> * <var:q> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:v0> = <nat:7> /\ <var:g> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:g> = <nat:2> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 