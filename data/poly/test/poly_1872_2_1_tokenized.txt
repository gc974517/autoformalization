\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:7> ; <var:H> := <var:P0> \end{verbatim} Given ( given some integers $ <var:T> $ ) $ <var:Z> = <var:T> $ before the evaluation of this code segment it holds that $ <var:H> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:T> \} \\ <var:P0> := <nat:7> ; \\ \{ <var:Z> = <var:T> \land <var:P0> = <nat:7> \} \\ <var:H> := <var:P0> \\ \{ <var:Z> = <var:T> \land <var:H> = <nat:7> \} \end{eqnarray} The application of Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Z> = <var:T> }} <var:P0> := <nat:7> ; <var:H> := <var:P0> {{ <var:H> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:H> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 