\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:3> + <var:U> * <var:O> ; <var:U> := <nat:1> + <var:U> * <var:O> \end{verbatim} Allowing it to hold that $ <var:O> = <var:t> $ prior to executing our list of instructions , it holds that we have $ <var:U> = <nat:3> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:1> $ when code terminates . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be accomplished using standard Hoare reasoning . Moving on to the next step , we see the environment update code \verb | <var:U> := <nat:3> ; | . This redefines the precondition $ \{ <var:O> = <var:t> \} $ to the postcondition $ \{ <var:O> = <var:t> \land <var:U> = <nat:3> \} $ . This is deduced by the assignment scheme defined by usual Hoare logic . Now , we have the variable assignmet command \verb | <var:U> := <nat:3> + <var:U> * <var:O> ; | . This line transfers the precondition $ \{ <var:O> = <var:t> \land <var:U> = <nat:3> \} $ into the condition $ \{ <var:O> = <var:t> \land <var:U> = <nat:3> * <var:t> + <nat:3> \} $ . This is deduced using the assignment law found in typical Hoare techniques . Advancing , we have the variable update code giving $ <nat:1> + <var:U> * <var:O$ to $ <var:U>$ . This code takes the condition $ \{ <var:O> = <var:t> \land <var:U> = <nat:3> * <var:t> + <nat:3> \} $ as the postcondition $ \{ <var:O> = <var:t> \land <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> \} $ . This is given using the assignment inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:O> = <var:t> }} <var:U> := <nat:3> ; <var:U> := <nat:3> + <var:U> * <var:O> ; <var:U> := <nat:1> + <var:U> * <var:O> {{ <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:U> = <nat:3> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:U> = <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 