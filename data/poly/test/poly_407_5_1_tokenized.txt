\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:v> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:3> ; <var:b> := <var:m1> <var:b> := <var:b> + <var:m0> \end{verbatim} Assuming that we have $ <var:v> = <var:F> $ ( given all $ <var:F> $ ) prior to evaluating this set of instructions , it follows that $ <var:b> = <nat:3> \cdot <var:F> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be accomplished by the below decorated code . \begin{eqnarray} \{ <var:v> = <var:F> \} \\ <var:m1> := <var:v> ; \\ \{ <var:v> = <var:F> \land <var:m1> = <var:F> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:v> = <var:F> \land <var:m1> = <var:F> \land <var:m0> = <nat:1> \} \\ <var:m1> := <var:m1> * <nat:3> ; \\ \{ <var:v> = <var:F> \land <var:m1> = <nat:3> * <var:F> \land <var:m0> = <nat:1> \} \\ <var:b> := <var:m1> \\ \{ <var:v> = <var:F> \land <var:m0> = <nat:1> \land <var:b> = <nat:3> * <var:F> \} \\ <var:b> := <var:b> + <var:m0> \\ \{ <var:v> = <var:F> \land <var:b> = <nat:3> * <var:F> + <nat:1> \} \end{eqnarray} The application of Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:v> = <var:F> }} <var:m1> := <var:v> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:3> ; <var:b> := <var:m1> <var:b> := <var:b> + <var:m0> {{ <var:b> = <nat:3> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:m1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:m1> = <var:F> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:m1> = <nat:3> * <var:F> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:m0> = <nat:1> /\ <var:b> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:b> = <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 