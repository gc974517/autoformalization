\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T> := <nat:3> ; <var:T> := <var:T> * <var:d> ; <var:T> := <nat:1> + <var:T> * <var:d> ; <var:T> := <nat:3> + <var:T> * <var:d> ; <var:T> := <var:T> * <var:d> ; <var:T> := <nat:3> + <var:T> * <var:d> ; <var:T> := <nat:2> + <var:T> * <var:d> ; <var:T> := <nat:1> + <var:T> * <var:d> ; <var:T> := <var:T> * <var:d> ; <var:T> := <nat:2> + <var:T> * <var:d> ; <var:T> := <nat:1> + <var:T> * <var:d> ; <var:T> := <nat:3> + <var:T> * <var:d> ; <var:T> := <nat:1> + <var:T> * <var:d> ; <var:T> := <nat:2> + <var:T> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:d> = <var:a> $ ahead of interpreting this segment of code then we have $ <var:T> = <nat:3> \times <var:a> ^ <nat:13> + <nat:1> \times <var:a> ^ <nat:11> + <nat:3> \times <var:a> ^ <nat:10> + <nat:3> \times <var:a> ^ <nat:8> + <nat:2> \times <var:a> ^ <nat:7> + <nat:1> \times <var:a> ^ <nat:6> + <nat:2> \times <var:a> ^ <nat:4> + <nat:1> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions can be done with standard Hoare logic . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:a> \} & <var:T> := <nat:3> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \} & <var:T> := <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> + \} \end{tabular} This is shown with the variable binding inference rule obtained from usual Hoare reasoning . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:a> \} & <var:T> := <nat:3> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \} & <var:T> := <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> + \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> + \} & <var:T> := <nat:1> + <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:2> + <nat:1> \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:2> + <nat:1> \} & <var:T> := <nat:3> + <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> + <nat:3> \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> + <nat:3> \} & <var:T> := <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + \} & <var:T> := <nat:3> + <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:3> \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:3> \} & <var:T> := <nat:2> + <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:6> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> + <nat:2> \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:6> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> + <nat:2> \} & <var:T> := <nat:1> + <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:7> + <nat:1> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:1> \} \end{tabular} This is given through the variable assignmet rule obtained from usual Hoare reasoning . Jumping to the next steps seen in the list of commands , \[ \begin{tabular} {rcl} \{ <var:d> = <var:a> \} & <var:T> := <nat:3> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \} & <var:T> := <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> + \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> + \} & <var:T> := <nat:1> + <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:2> + <nat:1> \} \\ \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:2> + <nat:1> \} & <var:T> := <nat:3> + <var:T> * <var:d> & \{ <var:d> = <var:a> \land <var:T> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> + <nat:3> \} \end{tabular} This is guaranteed using the binding law found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:T> := <nat:3> ; <var:T> := <var:T> * <var:d> ; <var:T> := <nat:1> + <var:T> * <var:d> ; <var:T> := <nat:3> + <var:T> * <var:d> ; <var:T> := <var:T> * <var:d> ; <var:T> := <nat:3> + <var:T> * <var:d> ; <var:T> := <nat:2> + <var:T> * <var:d> ; <var:T> := <nat:1> + <var:T> * <var:d> ; <var:T> := <var:T> * <var:d> ; <var:T> := <nat:2> + <var:T> * <var:d> ; <var:T> := <nat:1> + <var:T> * <var:d> ; <var:T> := <nat:3> + <var:T> * <var:d> ; <var:T> := <nat:1> + <var:T> * <var:d> ; <var:T> := <nat:2> + <var:T> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:d> = <var:a> }} <def:poly> {{ <var:T> = <nat:3> * <var:a> ^ <nat:13> + <nat:1> * <var:a> ^ <nat:11> + <nat:3> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:9> + <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:10> + <nat:1> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:11> + <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:12> + <nat:1> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:T> = <nat:3> * <var:a> ^ <nat:13> + <nat:1> * <var:a> ^ <nat:11> + <nat:3> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 