\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:o> := <nat:3> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <var:o> * <var:J> ; <var:o> := <nat:3> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> \end{verbatim} Assuming it to hold that $ <var:J> = <var:Y> $ before the evaluation of this series of commands it follows that $ <var:o> = <nat:3> \times <var:Y> ^ <nat:6> + <nat:2> \times <var:Y> ^ <nat:5> + <nat:2> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:3> \times <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:J> = <var:Y> \} \\ <var:o> := <nat:3> ; \\ \{ <var:J> = <var:Y> \land <var:o> = <nat:3> \} \\ <var:o> := <nat:2> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:o> = <nat:3> \cdot <var:Y> + <nat:2> \} \\ <var:o> := <nat:2> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:o> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:2> \} \\ <var:o> := <nat:2> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:o> = <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:2> \} \\ <var:o> := <var:o> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:o> = <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + \} \\ <var:o> := <nat:3> + <var:o> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:o> = <nat:3> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:3> \} \\ <var:o> := <nat:2> + <var:o> * <var:J> \\ \{ <var:J> = <var:Y> \land <var:o> = <nat:3> \cdot <var:Y> ^ <nat:6> + <nat:2> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> + <nat:2> \} \end{eqnarray} Considering the above , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:J> = <var:Y> }} <var:o> := <nat:3> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <var:o> * <var:J> ; <var:o> := <nat:3> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> {{ <var:o> = <nat:3> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:o> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 