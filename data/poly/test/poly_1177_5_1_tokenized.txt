\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:T> ; <var:l0> := <nat:1> ; <var:l1> := <var:l1> * <nat:8> ; <var:w> := <var:l1> <var:w> := <var:w> + <var:l0> \end{verbatim} Given $ <var:T> = <var:u> $ prior to evaluating our series of instructions , it must be that we have $ <var:w> = <nat:8> \times <var:u> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:u> \} \\ <var:l1> := <var:T> ; \\ \{ <var:T> = <var:u> \land <var:l1> = <var:u> \} \\ <var:l0> := <nat:1> ; \\ \{ <var:T> = <var:u> \land <var:l1> = <var:u> \land <var:l0> = <nat:1> \} \\ <var:l1> := <var:l1> * <nat:8> ; \\ \{ <var:T> = <var:u> \land <var:l1> = <nat:8> \times <var:u> \land <var:l0> = <nat:1> \} \\ <var:w> := <var:l1> \\ \{ <var:T> = <var:u> \land <var:l0> = <nat:1> \land <var:w> = <nat:8> \times <var:u> \} \\ <var:w> := <var:w> + <var:l0> \\ \{ <var:T> = <var:u> \land <var:w> = <nat:8> \times <var:u> + <nat:1> \} \end{eqnarray} Using standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:T> = <var:u> }} <var:l1> := <var:T> ; <var:l0> := <nat:1> ; <var:l1> := <var:l1> * <nat:8> ; <var:w> := <var:l1> <var:w> := <var:w> + <var:l0> {{ <var:w> = <nat:8> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:l1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:l1> = <var:u> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:l1> = <nat:8> * <var:u> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:l0> = <nat:1> /\ <var:w> = <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:w> = <nat:8> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 