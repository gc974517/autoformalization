\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:1> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:B> ; <var:S> := <var:t1> ; <var:S> := <var:S> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume --- assuming some $ <var:K> \in \mathbb{N} $ --- it to hold that $ <var:B> = <var:K> $ ahead of the evaluation of this set of instructions , it must be that we have $ <var:S> = <nat:4> \times <var:K> + <nat:1> $ when set of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be given using typical Hoare logic . Focusing on the upcoming lines seen in our set of instructions , we have \begin{verbatim} { <var:B> = <var:K> } <var:t0> := <nat:1> { <var:B> = <var:K> \land <var:t0> = <nat:1> } { <var:B> = <var:K> \land <var:t0> = <nat:1> } <var:t1> := <nat:4> { <var:B> = <var:K> \land <var:t0> = <nat:1> \land <var:t1> = <nat:4> } { <var:B> = <var:K> \land <var:t0> = <nat:1> \land <var:t1> = <nat:4> } <var:t1> := <var:t1> * <var:B> { <var:B> = <var:K> \land <var:t0> = <nat:1> \land <var:t1> = <nat:4> * <var:K> } \end{verbatim} This is deduced with the assignment rule of usual Hoare reasoning . Paying attention to the upcoming lines of codecontained in the code , \begin{verbatim} { <var:B> = <var:K> } <var:t0> := <nat:1> { <var:B> = <var:K> \land <var:t0> = <nat:1> } { <var:B> = <var:K> \land <var:t0> = <nat:1> } <var:t1> := <nat:4> { <var:B> = <var:K> \land <var:t0> = <nat:1> \land <var:t1> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:1> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:B> ; <var:S> := <var:t1> ; <var:S> := <var:S> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:B> = <var:K> }} <def:poly> {{ <var:S> = <nat:4> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:t0> = <nat:1> /\ <var:S> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:K> /\ <var:S> = <nat:4> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 