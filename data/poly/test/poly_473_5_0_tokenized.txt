\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:S> ; <var:w> := <var:T1> ; <var:w> := <var:w> + <var:T0> \end{verbatim} Given it to be that $ <var:S> = <var:b> $ prior to the evaluation of the list of instructions it must be that we have $ <var:w> = <nat:5> \cdot <var:b> + <nat:9> $ when series of instructions has exited . \end{theorem} \begin{proof} The flow of logic for the program is done with the following decorated code . \begin{eqnarray} \{ <var:S> = <var:b> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:S> = <var:b> \land <var:T0> = <nat:9> \} \\ <var:T1> := <nat:5> ; \\ \{ <var:S> = <var:b> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \} \\ <var:T1> := <var:T1> * <var:S> ; \\ \{ <var:S> = <var:b> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> * <var:b> \} \\ <var:w> := <var:T1> ; \\ \{ <var:S> = <var:b> \land <var:T0> = <nat:9> \land <var:w> = <nat:5> * <var:b> \} \\ <var:w> := <var:w> + <var:T0> \\ \{ <var:S> = <var:b> \land <var:w> = <nat:5> * <var:b> + <nat:9> \} \end{eqnarray} Using Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:S> = <var:b> }} <var:T0> := <nat:9> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:S> ; <var:w> := <var:T1> ; <var:w> := <var:w> + <var:T0> {{ <var:w> = <nat:5> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:T0> = <nat:9> /\ <var:w> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:w> = <nat:5> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 