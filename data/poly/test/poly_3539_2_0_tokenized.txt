\begin{document} \begin{theorem} Take a series of commands such that \begin{verbatim} <var:n0> := <nat:5> ; <var:P> := <var:n0> \end{verbatim} Allowing ( given some whole numbers $ <var:i> $ ) that we have $ <var:E> = <var:i> $ before running our series of commands , then we see $ <var:P> = <nat:5> $ after segment of code has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be accomplished using Hoare logic . Advancing to the next step , we see the assignment code giving $ <nat:5> $ toward $ <var:n0>$ . This advances the condition $ \{ <var:E> = <var:i> \} $ into $ \{ <var:E> = <var:i> \land <var:n0> = <nat:5> \} $ . After , we have the variable update code \verb | <var:P> := <var:n0> | . This takes $ \{ <var:E> = <var:i> \land <var:n0> = <nat:5> \} $ as $ \{ <var:E> = <var:i> \land <var:P> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:E> = <var:i> }} <var:n0> := <nat:5> ; <var:P> := <var:n0> {{ <var:P> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:P> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 