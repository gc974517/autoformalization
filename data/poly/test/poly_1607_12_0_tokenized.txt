\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:t0> := <nat:4> ; <var:t2> := <nat:4> ; <var:t2> := <var:t2> * <var:H> ; <var:t2> := <var:t2> * <var:H> ; <var:t4> := <nat:1> ; <var:t4> := <var:t4> * <var:H> ; <var:t4> := <var:t4> * <var:H> ; <var:t4> := <var:t4> * <var:H> ; <var:t4> := <var:t4> * <var:H> ; <var:f> := <var:t4> ; <var:f> := <var:f> + <var:t2> ; <var:f> := <var:f> + <var:t0> \end{verbatim} Given that $ <var:H> = <var:V> $ taking natural numbers $ <var:V> $ prior to interpreting our segment of code , it must be that $ <var:f> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the code segment is accomplished with standard Hoare reasoning . Immediately following , the variable binding command letting $ <nat:4> $ into $ <var:t0>$ . This takes the precondition $ \{ <var:H> = <var:V> \} $ toward the condition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \} $ . Advancing to the next step , the variable assignmet code \verb | <var:t2> := <nat:4> ; | . This line advances $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \} $ to the condition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> \} $ . This is guaranteed using the assignment rule obtained from standard Hoare reasoning . Looking at the subsequent statement seen in our series of instructions , the environment update command defining $ <var:t2> * <var:H> $ toward $ <var:t2>$ . This forwards $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> \} $ as the postcondition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> \} $ . This is ensured by the assignment inference rule from standard Hoare techniques . Observing the upcoming bit of code in the segment of code , the environment update command yielding $ <var:t2> * <var:H> $ to $ <var:t2>$ . This statement forwards $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> \} $ into the condition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \} $ . Looking at the upcoming step seen in our code , we have the variable binding statement defining $ <nat:1> $ as $ <var:t4>$ . This redefines the condition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \} $ as the postcondition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> \} $ . Shifting focus toward the upcoming piece of code in the list of instructions , the assignment code \verb | <var:t4> := <var:t4> * <var:H> ; | . This advances the condition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> \} $ as the postcondition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> * <var:V> \} $ . Stepping forward , we see the command defining $ <var:t4> * <var:H> $ as $ <var:t4>$ . This code advances $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> * <var:V> \} $ toward $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> * <var:V> ^ <nat:2> \} $ . Moving on to the following command in our set of instructions , we see the environment update command assigning $ <var:t4> * <var:H> $ to $ <var:t4>$ . This statement redefines the condition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> * <var:V> ^ <nat:2> \} $ to the condition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> * <var:V> ^ <nat:3> \} $ . Focusing on the upcoming bit of code found in the program , we have the environment update line assigning $ <var:t4> * <var:H> $ as $ <var:t4>$ . This moves $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> * <var:V> ^ <nat:3> \} $ toward the postcondition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> * <var:V> ^ <nat:4> \} $ . This is known to be sound with the assignment law from usual Hoare reasoning . Jumping to the subsequent step found in the program , the binding command assigning $ <var:t4> $ to $ <var:f>$ . This code moves the precondition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:t4> = <nat:1> * <var:V> ^ <nat:4> \} $ as the condition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:f> = <nat:1> * <var:V> ^ <nat:4> \} $ . This is shown to be logically sound using the assignment inference rule given by standard Hoare logic . Further , the variable binding code \verb | <var:f> := <var:f> + <var:t2> ; | . This forwards the precondition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:t2> = <nat:4> * <var:V> ^ <nat:2> \land <var:f> = <nat:1> * <var:V> ^ <nat:4> \} $ to the postcondition $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:f> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> \} $ . This is sound using the assignment inference rule in usual Hoare reasoning . Moving on to the subsequent bit of code seen in the code , the variable update code \verb | <var:f> := <var:f> + <var:t0> | . This line transfers $ \{ <var:H> = <var:V> \land <var:t0> = <nat:4> \land <var:f> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> \} $ to the condition $ \{ <var:H> = <var:V> \land <var:f> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t4> : string := " <var:t4> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:H> = <var:V> }} <var:t0> := <nat:4> ; <var:t2> := <nat:4> ; <var:t2> := <var:t2> * <var:H> ; <var:t2> := <var:t2> * <var:H> ; <var:t4> := <nat:1> ; <var:t4> := <var:t4> * <var:H> ; <var:t4> := <var:t4> * <var:H> ; <var:t4> := <var:t4> * <var:H> ; <var:t4> := <var:t4> * <var:H> ; <var:f> := <var:t4> ; <var:f> := <var:f> + <var:t2> ; <var:f> := <var:f> + <var:t0> {{ <var:f> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:t4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:t4> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:t4> = <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:t4> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:t4> = <nat:1> * <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:f> = <nat:1> * <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:t0> = <nat:4> /\ <var:f> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:f> = <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 