\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as \begin{verbatim} <var:c1> := <var:D> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:1> ; <var:i> := <var:c1> <var:i> := <var:i> + <var:c0> \end{verbatim} Given that $ <var:D> = <var:S> $ --- given some integers $ <var:S> $ --- prior to the execution of our list of instructions , then $ <var:i> = <nat:1> \times <var:S> + <nat:3> $ when code has finished . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is demonstrated by usual Hoare logic . Keeping momentum , we have \begin{eqnarray} \{ <var:D> = <var:S> \} \, <var:c1> := <var:D> \, \{ <var:D> = <var:S> \land <var:c1> = <var:S> \} \end{eqnarray} Further , we have \begin{eqnarray} \{ <var:D> = <var:S> \} \, <var:c1> := <var:D> \, \{ <var:D> = <var:S> \land <var:c1> = <var:S> \} \\ \{ <var:D> = <var:S> \land <var:c1> = <var:S> \} \, <var:c0> := <nat:3> \, \{ <var:D> = <var:S> \land <var:c1> = <var:S> \land <var:c0> = <nat:3> \} \end{eqnarray} This is ensured with the variable binding inference rule found in typical Hoare reasoning . Next , we see \begin{eqnarray} \{ <var:D> = <var:S> \} \, <var:c1> := <var:D> \, \{ <var:D> = <var:S> \land <var:c1> = <var:S> \} \end{eqnarray} This is shown to be logically sound through the variable binding rule defined by Hoare reasoning . Moving forward to the following piece of code contained in the set of commands , we have \begin{eqnarray} \{ <var:D> = <var:S> \} \, <var:c1> := <var:D> \, \{ <var:D> = <var:S> \land <var:c1> = <var:S> \} \end{eqnarray} This is shown using the variable update scheme from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:D> = <var:S> }} <var:c1> := <var:D> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:1> ; <var:i> := <var:c1> <var:i> := <var:i> + <var:c0> {{ <var:i> = <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:c1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:c1> = <var:S> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:c1> = <nat:1> * <var:S> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:c0> = <nat:3> /\ <var:i> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:i> = <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 