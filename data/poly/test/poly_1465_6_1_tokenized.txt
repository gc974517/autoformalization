\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:k> ; <var:K2> := <var:K1> * <var:k> ; <var:K0> := <nat:4> ; <var:K2> := <var:K2> * <nat:8> ; <var:N> := <var:K2> <var:N> := <var:N> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allow it to be that $ <var:k> = <var:h> $ ahead of the evaluation of the set of instructions , it must be that $ <var:N> = <nat:8> \times <var:h> ^ <nat:2> + <nat:4> $ after list of commands terminates . \end{theorem} \begin{proof} Proving correctness for this list of commands is shown through typical Hoare logic . Honing in on the subsequent step seen in our set of commands , we see \begin{eqnarray} \{ <var:k> = <var:h> \} \, <var:K1> := <var:k> \, \{ <var:k> = <var:h> \land <var:K1> = <var:h> \} \end{eqnarray} Focusing on the proceeding steps found in the series of commands , we see \begin{eqnarray} \{ <var:k> = <var:h> \} \, <var:K1> := <var:k> \, \{ <var:k> = <var:h> \land <var:K1> = <var:h> \} \\ \{ <var:k> = <var:h> \land <var:K1> = <var:h> \} \, <var:K2> := <var:K1> * <var:k> \, \{ <var:k> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \} \end{eqnarray} Now , we have \begin{eqnarray} \{ <var:k> = <var:h> \} \, <var:K1> := <var:k> \, \{ <var:k> = <var:h> \land <var:K1> = <var:h> \} \\ \{ <var:k> = <var:h> \land <var:K1> = <var:h> \} \, <var:K2> := <var:K1> * <var:k> \, \{ <var:k> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \} \\ \{ <var:k> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \} \, <var:K0> := <nat:4> \, \{ <var:k> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K0> = <nat:4> \} \end{eqnarray} This is shown by the environment update scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K1> := <var:k> ; <var:K2> := <var:K1> * <var:k> ; <var:K0> := <nat:4> ; <var:K2> := <var:K2> * <nat:8> ; <var:N> := <var:K2> <var:N> := <var:N> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:k> = <var:h> }} <def:poly> {{ <var:N> = <nat:8> * <var:h> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:h> /\ <var:K1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:h> /\ <var:K1> = <var:h> /\ <var:K2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:h> /\ <var:K1> = <var:h> /\ <var:K2> = <var:h> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:h> /\ <var:K1> = <var:h> /\ <var:K2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:h> /\ <var:K1> = <var:h> /\ <var:K0> = <nat:4> /\ <var:N> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:h> /\ <var:N> = <nat:8> * <var:h> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 