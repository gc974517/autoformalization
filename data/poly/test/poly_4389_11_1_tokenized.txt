\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:p> ; <var:r2> := <var:r1> * <var:p> ; <var:r3> := <var:r2> * <var:p> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:2> ; <var:L> := <var:r3> <var:L> := <var:L> + <var:r2> <var:L> := <var:L> + <var:r1> <var:L> := <var:L> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allow $ <var:p> = <var:q> $ ahead of interpreting the set of instructions then we have $ <var:L> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is shown using this decorated list of instructions . \begin{eqnarray} \{ <var:p> = <var:q> \} \\ <var:r1> := <var:p> ; \\ \{ <var:p> = <var:q> \land <var:r1> = <var:q> \} \\ <var:r2> := <var:r1> * <var:p> ; \\ \{ <var:p> = <var:q> \land <var:r1> = <var:q> \land <var:r2> = <var:q> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:p> ; \\ \{ <var:p> = <var:q> \land <var:r1> = <var:q> \land <var:r2> = <var:q> ^ <nat:2> \land <var:r3> = <var:q> ^ <nat:3> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:p> = <var:q> \land <var:r1> = <var:q> \land <var:r2> = <var:q> ^ <nat:2> \land <var:r3> = <var:q> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r1> := <var:r1> * <nat:1> ; \\ \{ <var:p> = <var:q> \land <var:r1> = <nat:1> \cdot <var:q> \land <var:r2> = <var:q> ^ <nat:2> \land <var:r3> = <var:q> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r2> := <var:r2> * <nat:3> ; \\ \{ <var:p> = <var:q> \land <var:r1> = <nat:1> \cdot <var:q> \land <var:r2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:r3> = <var:q> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r3> := <var:r3> * <nat:2> ; \\ \{ <var:p> = <var:q> \land <var:r1> = <nat:1> \cdot <var:q> \land <var:r2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:r3> = <nat:2> \cdot <var:q> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:L> := <var:r3> \\ \{ <var:p> = <var:q> \land <var:r1> = <nat:1> \cdot <var:q> \land <var:r2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:r0> = <nat:3> \land <var:L> = <nat:2> \cdot <var:q> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:r2> \\ \{ <var:p> = <var:q> \land <var:r1> = <nat:1> \cdot <var:q> \land <var:r0> = <nat:3> \land <var:L> = <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:r1> \\ \{ <var:p> = <var:q> \land <var:r0> = <nat:3> \land <var:L> = <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> \} \\ <var:L> := <var:L> + <var:r0> \\ \{ <var:p> = <var:q> \land <var:L> = <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:p> ; <var:r2> := <var:r1> * <var:p> ; <var:r3> := <var:r2> * <var:p> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:2> ; <var:L> := <var:r3> <var:L> := <var:L> + <var:r2> <var:L> := <var:L> + <var:r1> <var:L> := <var:L> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:p> = <var:q> }} <def:poly> {{ <var:L> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <var:q> /\ <var:r2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <var:q> /\ <var:r2> = <var:q> ^ <nat:2> /\ <var:r3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <var:q> /\ <var:r2> = <var:q> ^ <nat:2> /\ <var:r3> = <var:q> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <nat:1> * <var:q> /\ <var:r2> = <var:q> ^ <nat:2> /\ <var:r3> = <var:q> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <nat:1> * <var:q> /\ <var:r2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:r3> = <var:q> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <nat:1> * <var:q> /\ <var:r2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:r3> = <nat:2> * <var:q> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <nat:1> * <var:q> /\ <var:r2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:r0> = <nat:3> /\ <var:L> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r1> = <nat:1> * <var:q> /\ <var:r0> = <nat:3> /\ <var:L> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r0> = <nat:3> /\ <var:L> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:L> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 