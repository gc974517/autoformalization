\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:5> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:X> ; <var:B> := <var:l1> ; <var:B> := <var:B> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:X> = <var:w> $ ( given all whole numbers $ <var:w> $ ) before evaluating our code , it holds that we see $ <var:B> = <nat:2> \cdot <var:w> + <nat:5> $ when set of instructions is done . \end{theorem} \begin{proof} Note that the below decorated code segment . \begin{eqnarray} \{ <var:X> = <var:w> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:X> = <var:w> \land <var:l0> = <nat:5> \} \\ <var:l1> := <nat:2> ; \\ \{ <var:X> = <var:w> \land <var:l0> = <nat:5> \land <var:l1> = <nat:2> \} \\ <var:l1> := <var:l1> * <var:X> ; \\ \{ <var:X> = <var:w> \land <var:l0> = <nat:5> \land <var:l1> = <nat:2> \times <var:w> \} \\ <var:B> := <var:l1> ; \\ \{ <var:X> = <var:w> \land <var:l0> = <nat:5> \land <var:B> = <nat:2> \times <var:w> \} \\ <var:B> := <var:B> + <var:l0> \\ \{ <var:X> = <var:w> \land <var:B> = <nat:2> \times <var:w> + <nat:5> \} \end{eqnarray} The application of usual Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:5> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:X> ; <var:B> := <var:l1> ; <var:B> := <var:B> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:X> = <var:w> }} <def:poly> {{ <var:B> = <nat:2> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:l0> = <nat:5> /\ <var:B> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:B> = <nat:2> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 