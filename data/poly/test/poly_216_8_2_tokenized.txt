\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <nat:3> + <var:U> * <var:G> ; <var:U> := <nat:4> + <var:U> * <var:G> ; <var:U> := <nat:3> + <var:U> * <var:G> ; <var:U> := <nat:2> + <var:U> * <var:G> ; <var:U> := <nat:3> + <var:U> * <var:G> ; <var:U> := <nat:1> + <var:U> * <var:G> ; <var:U> := <nat:4> + <var:U> * <var:G> \end{verbatim} Assume that we have $ <var:G> = <var:E> $ ahead of the evaluation of our program , then we have $ <var:U> = <nat:4> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our segment of code can be given with standard Hoare techniques . Advancing on , we see \begin{verbatim} { <var:G> = <var:E> } <var:U> := <nat:4> { <var:G> = <var:E> \land <var:U> = <nat:4> } { <var:G> = <var:E> \land <var:U> = <nat:4> } <var:U> := <nat:3> + <var:U> * <var:G> { <var:G> = <var:E> \land <var:U> = <nat:4> \cdot <var:E> + <nat:3> } { <var:G> = <var:E> \land <var:U> = <nat:4> \cdot <var:E> + <nat:3> } <var:U> := <nat:4> + <var:U> * <var:G> { <var:G> = <var:E> \land <var:U> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> + <nat:4> } \end{verbatim} Moving forward to the next lines contained in the code , we have \begin{verbatim} { <var:G> = <var:E> } <var:U> := <nat:4> { <var:G> = <var:E> \land <var:U> = <nat:4> } { <var:G> = <var:E> \land <var:U> = <nat:4> } <var:U> := <nat:3> + <var:U> * <var:G> { <var:G> = <var:E> \land <var:U> = <nat:4> \cdot <var:E> + <nat:3> } { <var:G> = <var:E> \land <var:U> = <nat:4> \cdot <var:E> + <nat:3> } <var:U> := <nat:4> + <var:U> * <var:G> { <var:G> = <var:E> \land <var:U> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> + <nat:4> } \end{verbatim} Now , we have \begin{verbatim} { <var:G> = <var:E> } <var:U> := <nat:4> { <var:G> = <var:E> \land <var:U> = <nat:4> } \end{verbatim} This is shown through the variable assignmet scheme given by typical Hoare reasoning . Taking another step toward the proceeding line of code contained in our list of commands , we see \begin{verbatim} { <var:G> = <var:E> } <var:U> := <nat:4> { <var:G> = <var:E> \land <var:U> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:G> = <var:E> }} <var:U> := <nat:4> ; <var:U> := <nat:3> + <var:U> * <var:G> ; <var:U> := <nat:4> + <var:U> * <var:G> ; <var:U> := <nat:3> + <var:U> * <var:G> ; <var:U> := <nat:2> + <var:U> * <var:G> ; <var:U> := <nat:3> + <var:U> * <var:G> ; <var:U> := <nat:1> + <var:U> * <var:G> ; <var:U> := <nat:4> + <var:U> * <var:G> {{ <var:U> = <nat:4> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:E> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:E> /\ <var:U> = <nat:4> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:E> /\ <var:U> = <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:E> /\ <var:U> = <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:E> /\ <var:U> = <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:E> /\ <var:U> = <nat:4> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:E> /\ <var:U> = <nat:4> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:E> /\ <var:U> = <nat:4> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 