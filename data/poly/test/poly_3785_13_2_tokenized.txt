\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <nat:2> + <var:P> * <var:M> ; <var:P> := <nat:2> + <var:P> * <var:M> ; <var:P> := <nat:4> + <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <nat:1> + <var:P> * <var:M> ; <var:P> := <nat:4> + <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <nat:1> + <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <nat:4> + <var:P> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:M> = <var:F> $ with some whole numbers $ <var:F> $ ahead of the evaluation of this list of instructions then we have $ <var:P> = <nat:4> \times <var:F> ^ <nat:12> + <nat:2> \times <var:F> ^ <nat:11> + <nat:2> \times <var:F> ^ <nat:10> + <nat:4> \times <var:F> ^ <nat:9> + <nat:1> \times <var:F> ^ <nat:7> + <nat:4> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:F> \} \\ <var:P> := <nat:4> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> \} \\ <var:P> := <nat:2> + <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> + <nat:2> \} \\ <var:P> := <nat:2> + <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:2> \} \\ <var:P> := <nat:4> + <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> \} \\ <var:P> := <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + \} \\ <var:P> := <nat:1> + <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> \} \\ <var:P> := <nat:4> + <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> + <nat:4> \} \\ <var:P> := <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + \} \\ <var:P> := <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + \} \\ <var:P> := <nat:1> + <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> \} \\ <var:P> := <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:10> + <nat:2> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> + \} \\ <var:P> := <var:P> * <var:M> ; \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:11> + <nat:2> * <var:F> ^ <nat:10> + <nat:2> * <var:F> ^ <nat:9> + <nat:4> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:2> + \} \\ <var:P> := <nat:4> + <var:P> * <var:M> \\ \{ <var:M> = <var:F> \land <var:P> = <nat:4> * <var:F> ^ <nat:12> + <nat:2> * <var:F> ^ <nat:11> + <nat:2> * <var:F> ^ <nat:10> + <nat:4> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> \} \end{eqnarray} The application of usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:4> ; <var:P> := <nat:2> + <var:P> * <var:M> ; <var:P> := <nat:2> + <var:P> * <var:M> ; <var:P> := <nat:4> + <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <nat:1> + <var:P> * <var:M> ; <var:P> := <nat:4> + <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <nat:1> + <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <var:P> * <var:M> ; <var:P> := <nat:4> + <var:P> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:M> = <var:F> }} <def:poly> {{ <var:P> = <nat:4> * <var:F> ^ <nat:12> + <nat:2> * <var:F> ^ <nat:11> + <nat:2> * <var:F> ^ <nat:10> + <nat:4> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:10> + <nat:2> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:11> + <nat:2> * <var:F> ^ <nat:10> + <nat:2> * <var:F> ^ <nat:9> + <nat:4> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:P> = <nat:4> * <var:F> ^ <nat:12> + <nat:2> * <var:F> ^ <nat:11> + <nat:2> * <var:F> ^ <nat:10> + <nat:4> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 