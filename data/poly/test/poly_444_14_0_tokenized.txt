\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:2> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:A> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:A> ; <var:v2> := <var:v2> * <var:A> ; <var:v3> := <nat:2> ; <var:v3> := <var:v3> * <var:A> ; <var:v3> := <var:v3> * <var:A> ; <var:v3> := <var:v3> * <var:A> ; <var:y> := <var:v3> ; <var:y> := <var:y> + <var:v2> ; <var:y> := <var:y> + <var:v1> ; <var:y> := <var:y> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:A> = <var:l> $ prior to running this set of commands , it must be that we see $ <var:y> = <nat:2> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:7> \times <var:l> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:l> \} \\ <var:v0> := <nat:2> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \} \\ <var:v1> := <nat:7> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> \} \end{eqnarray} Allowing the evaluation of the list of instructions produces : \begin{eqnarray} <var:v1> := <var:v1> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \} \\ <var:v2> := <nat:2> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:v2> = <nat:2> \} \\ <var:v2> := <var:v2> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:v2> = <nat:2> * <var:l> \} \\ <var:v2> := <var:v2> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:v2> = <nat:2> * <var:l> ^ <nat:2> \} \\ <var:v3> := <nat:2> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:v2> = <nat:2> * <var:l> ^ <nat:2> \land <var:v3> = <nat:2> \} \\ <var:v3> := <var:v3> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:v2> = <nat:2> * <var:l> ^ <nat:2> \land <var:v3> = <nat:2> * <var:l> \} \\ <var:v3> := <var:v3> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:v2> = <nat:2> * <var:l> ^ <nat:2> \land <var:v3> = <nat:2> * <var:l> ^ <nat:2> \} \\ <var:v3> := <var:v3> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:v2> = <nat:2> * <var:l> ^ <nat:2> \land <var:v3> = <nat:2> * <var:l> ^ <nat:3> \} \\ <var:y> := <var:v3> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:v2> = <nat:2> * <var:l> ^ <nat:2> \land <var:y> = <nat:2> * <var:l> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:v2> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:v1> = <nat:7> * <var:l> \land <var:y> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:v1> ; \\ \{ <var:A> = <var:l> \land <var:v0> = <nat:2> \land <var:y> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:7> * <var:l> \} \\ <var:y> := <var:y> + <var:v0> \\ \{ <var:A> = <var:l> \land <var:y> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v0> := <nat:2> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:A> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:A> ; <var:v2> := <var:v2> * <var:A> ; <var:v3> := <nat:2> ; <var:v3> := <var:v3> * <var:A> ; <var:v3> := <var:v3> * <var:A> ; <var:v3> := <var:v3> * <var:A> ; <var:y> := <var:v3> ; <var:y> := <var:y> + <var:v2> ; <var:y> := <var:y> + <var:v1> ; <var:y> := <var:y> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:A> = <var:l> }} <def:poly> {{ <var:y> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:v2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:v2> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:v2> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:v2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:v3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:v2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:v3> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:v2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:v3> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:v2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:v3> = <nat:2> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:v2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:y> = <nat:2> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:7> * <var:l> /\ <var:y> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:v0> = <nat:2> /\ <var:y> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:y> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 