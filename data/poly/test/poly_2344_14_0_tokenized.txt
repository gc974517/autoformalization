\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:4> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:C> ; <var:O2> := <nat:9> ; <var:O2> := <var:O2> * <var:C> ; <var:O2> := <var:O2> * <var:C> ; <var:O3> := <nat:6> ; <var:O3> := <var:O3> * <var:C> ; <var:O3> := <var:O3> * <var:C> ; <var:O3> := <var:O3> * <var:C> ; <var:M> := <var:O3> ; <var:M> := <var:M> + <var:O2> ; <var:M> := <var:M> + <var:O1> ; <var:M> := <var:M> + <var:O0> \end{verbatim} Allowing , given every $ <var:f> $ , it to hold that $ <var:C> = <var:f> $ ahead of evaluating the list of commands it follows that we see $ <var:M> = <nat:6> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> $ after series of commands executes . \end{theorem} \begin{proof} The method of proof for our code segment can be demonstrated with Hoare logic . Now , we see the environment update code defining $ <nat:4> $ as $ <var:O0>$ . This command redefines $ \{ <var:C> = <var:f> \} $ into the condition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \} $ . This is deduced through the assignment rule given in typical Hoare techniques . Following , the line defining $ <nat:1> $ toward $ <var:O1>$ . This code advances the precondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \} $ into the postcondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \} $ . This is rigorously given by the assignment scheme given in standard Hoare reasoning . Further , we see the binding line giving $ <var:O1> * <var:C> $ as $ <var:O1>$ . This code transfers $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \} $ toward the postcondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \} $ . This is sound with the assignment inference rule from standard Hoare logic . Following , the variable assignmet line assigning $ <nat:9> $ as $ <var:O2>$ . This moves $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \} $ as the postcondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \} $ . This is sound through the assignment scheme in standard Hoare reasoning . Focusing on the next piece of code seen in our code , the code \verb | <var:O2> := <var:O2> * <var:C> ; | . This line redefines $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \} $ toward the postcondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> \} $ . Keeping momentum , we have the assignment command \verb | <var:O2> := <var:O2> * <var:C> ; | . This code advances the precondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> \} $ into the condition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \} $ . Moving on , we see the variable update command \verb | <var:O3> := <nat:6> ; | . This code transfers the precondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \} $ to the postcondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:O3> = <nat:6> \} $ . This is known to be sound through the assignment inference rule defined by typical Hoare logic . Immediately after , we see the variable update code \verb | <var:O3> := <var:O3> * <var:C> ; | . This moves $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:O3> = <nat:6> \} $ toward the postcondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:f> \} $ . Next , the variable update statement assigning $ <var:O3> * <var:C> $ into $ <var:O3>$ . This transfers $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:f> \} $ to $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:f> ^ <nat:2> \} $ . Shifting focus toward the proceeding command seen in the list of instructions , the assignment code binding $ <var:O3> * <var:C> $ into $ <var:O3>$ . This statement transfers the precondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:f> ^ <nat:2> \} $ to the condition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:f> ^ <nat:3> \} $ . This is sound using the assignment inference rule defined in Hoare logic . After , the command letting $ <var:O3> $ into $ <var:M>$ . This moves $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:f> ^ <nat:3> \} $ to the postcondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:M> = <nat:6> \times <var:f> ^ <nat:3> \} $ . This is known to be sound using the assignment inference rule of standard Hoare reasoning . Looking at the subsequent step in the segment of code , we see the binding statement assigning $ <var:M> + <var:O2> $ to $ <var:M>$ . This code forwards the condition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:O2> = <nat:9> \times <var:f> ^ <nat:2> \land <var:M> = <nat:6> \times <var:f> ^ <nat:3> \} $ to $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:M> = <nat:6> \times <var:f> ^ <nat:3> + <nat:9> \times <var:f> ^ <nat:2> \} $ . This is guaranteed by the assignment inference rule of usual Hoare reasoning . Moving forward to the following command found in the list of commands , we see the environment update line binding $ <var:M> + <var:O1> $ into $ <var:M>$ . This redefines the condition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:f> \land <var:M> = <nat:6> \times <var:f> ^ <nat:3> + <nat:9> \times <var:f> ^ <nat:2> \} $ to the postcondition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:M> = <nat:6> \times <var:f> ^ <nat:3> + <nat:9> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> \} $ . This is guaranteed through the assignment scheme found in standard Hoare reasoning . Next , we have the assignment statement \verb | <var:M> := <var:M> + <var:O0> | . This line advances the condition $ \{ <var:C> = <var:f> \land <var:O0> = <nat:4> \land <var:M> = <nat:6> \times <var:f> ^ <nat:3> + <nat:9> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> \} $ to $ \{ <var:C> = <var:f> \land <var:M> = <nat:6> \times <var:f> ^ <nat:3> + <nat:9> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:4> \} $ . This is guaranteed through the assignment rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:C> = <var:f> }} <var:O0> := <nat:4> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:C> ; <var:O2> := <nat:9> ; <var:O2> := <var:O2> * <var:C> ; <var:O2> := <var:O2> * <var:C> ; <var:O3> := <nat:6> ; <var:O3> := <var:O3> * <var:C> ; <var:O3> := <var:O3> * <var:C> ; <var:O3> := <var:O3> * <var:C> ; <var:M> := <var:O3> ; <var:M> := <var:M> + <var:O2> ; <var:M> := <var:M> + <var:O1> ; <var:M> := <var:M> + <var:O0> {{ <var:M> = <nat:6> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:O3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:O3> = <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:O3> = <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:O3> = <nat:6> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:M> = <nat:6> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:f> /\ <var:M> = <nat:6> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:O0> = <nat:4> /\ <var:M> = <nat:6> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:M> = <nat:6> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 