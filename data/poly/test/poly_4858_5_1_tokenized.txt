\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N1> := <var:n> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:5> ; <var:M> := <var:N1> <var:M> := <var:M> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:n> = <var:q> $ letting $ <var:q> \in \mathbb{Z}^+ $ before executing this code segment , it holds that we see $ <var:M> = <nat:5> * <var:q> + <nat:5> $ after list of instructions finishes . \end{theorem} \begin{proof} The way to prove correctness for this code can be seen using Hoare logic . Looking at the next lines seen in our list of instructions , \verb | { <var:n> = <var:q> } <var:N1> := <var:n> { <var:n> = <var:q> \land <var:N1> = <var:q> } | and \verb | { <var:n> = <var:q> \land <var:N1> = <var:q> } <var:N0> := <nat:5> { <var:n> = <var:q> \land <var:N1> = <var:q> \land <var:N0> = <nat:5> } | . Moving forward to the next step , we see \verb | { <var:n> = <var:q> } <var:N1> := <var:n> { <var:n> = <var:q> \land <var:N1> = <var:q> } | and \verb | { <var:n> = <var:q> \land <var:N1> = <var:q> } <var:N0> := <nat:5> { <var:n> = <var:q> \land <var:N1> = <var:q> \land <var:N0> = <nat:5> } | . Following , we see \verb | { <var:n> = <var:q> } <var:N1> := <var:n> { <var:n> = <var:q> \land <var:N1> = <var:q> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N1> := <var:n> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:5> ; <var:M> := <var:N1> <var:M> := <var:M> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:n> = <var:q> }} <def:poly> {{ <var:M> = <nat:5> * <var:q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:N1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:N1> = <var:q> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:N1> = <nat:5> * <var:q> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:N0> = <nat:5> /\ <var:M> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:M> = <nat:5> * <var:q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 