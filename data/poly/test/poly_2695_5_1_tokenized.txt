\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H1> := <var:T> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:7> ; <var:u> := <var:H1> <var:u> := <var:u> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Given it to be that $ <var:T> = <var:g> $ ahead of the evaluation of the segment of code , it follows that we have $ <var:u> = <nat:7> \cdot <var:g> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:g> \} \\ <var:H1> := <var:T> ; \\ \{ <var:T> = <var:g> \land <var:H1> = <var:g> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:T> = <var:g> \land <var:H1> = <var:g> \land <var:H0> = <nat:1> \} \\ <var:H1> := <var:H1> * <nat:7> ; \\ \{ <var:T> = <var:g> \land <var:H1> = <nat:7> * <var:g> \land <var:H0> = <nat:1> \} \\ <var:u> := <var:H1> \\ \{ <var:T> = <var:g> \land <var:H0> = <nat:1> \land <var:u> = <nat:7> * <var:g> \} \\ <var:u> := <var:u> + <var:H0> \\ \{ <var:T> = <var:g> \land <var:u> = <nat:7> * <var:g> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:T> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:7> ; <var:u> := <var:H1> <var:u> := <var:u> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:T> = <var:g> }} <def:poly> {{ <var:u> = <nat:7> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:H1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:H1> = <var:g> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:H1> = <nat:7> * <var:g> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:H0> = <nat:1> /\ <var:u> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:u> = <nat:7> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 