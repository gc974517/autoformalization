\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:2> ; <var:m> := <var:k0> \end{verbatim} Allow $ <var:C> = <var:Q> $ ( for every $ <var:Q> \in \mathbb{Z}^+ $ ) before the evaluation of the set of instructions then we see $ <var:m> = <nat:2> $ when list of instructions is done executing . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:C> = <var:Q> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:C> = <var:Q> \land <var:k0> = <nat:2> \} \\ <var:m> := <var:k0> \\ \{ <var:C> = <var:Q> \land <var:m> = <nat:2> \} \end{eqnarray} Given the above , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:C> = <var:Q> }} <var:k0> := <nat:2> ; <var:m> := <var:k0> {{ <var:m> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:m> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 