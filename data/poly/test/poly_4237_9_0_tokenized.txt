\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:3> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:o> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:o> ; <var:u2> := <var:u2> * <var:o> ; <var:z> := <var:u2> ; <var:z> := <var:z> + <var:u1> ; <var:z> := <var:z> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:o> = <var:V> $ ahead of interpreting this list of instructions , then we see $ <var:z> = <nat:3> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions is shown by standard Hoare reasoning . Taking a look at the proceeding statements in our series of commands , we see \begin{verbatim} { <var:o> = <var:V> } <var:u0> := <nat:3> { <var:o> = <var:V> \land <var:u0> = <nat:3> } { <var:o> = <var:V> \land <var:u0> = <nat:3> } <var:u1> := <nat:8> { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> } { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> } <var:u1> := <var:u1> * <var:o> { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:V> } { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:V> } <var:u2> := <nat:3> { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:V> \land <var:u2> = <nat:3> } { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:V> \land <var:u2> = <nat:3> } <var:u2> := <var:u2> * <var:o> { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:V> \land <var:u2> = <nat:3> * <var:V> } { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:V> \land <var:u2> = <nat:3> * <var:V> } <var:u2> := <var:u2> * <var:o> { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:V> \land <var:u2> = <nat:3> * <var:V> ^ <nat:2> } \end{verbatim} Taking another step toward the upcoming lines in our segment of code , \begin{verbatim} { <var:o> = <var:V> } <var:u0> := <nat:3> { <var:o> = <var:V> \land <var:u0> = <nat:3> } { <var:o> = <var:V> \land <var:u0> = <nat:3> } <var:u1> := <nat:8> { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> } { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> } <var:u1> := <var:u1> * <var:o> { <var:o> = <var:V> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:V> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:3> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:o> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:o> ; <var:u2> := <var:u2> * <var:o> ; <var:z> := <var:u2> ; <var:z> := <var:z> + <var:u1> ; <var:z> := <var:z> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:o> = <var:V> }} <def:poly> {{ <var:z> = <nat:3> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:8> * <var:V> /\ <var:u2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:8> * <var:V> /\ <var:u2> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:8> * <var:V> /\ <var:u2> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:8> * <var:V> /\ <var:z> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:u0> = <nat:3> /\ <var:z> = <nat:3> * <var:V> ^ <nat:2> + <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:z> = <nat:3> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 