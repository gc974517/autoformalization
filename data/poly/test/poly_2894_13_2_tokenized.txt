\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:4> ; <var:l> := <nat:2> + <var:l> * <var:g> ; <var:l> := <var:l> * <var:g> ; <var:l> := <var:l> * <var:g> ; <var:l> := <nat:1> + <var:l> * <var:g> ; <var:l> := <nat:3> + <var:l> * <var:g> ; <var:l> := <nat:3> + <var:l> * <var:g> ; <var:l> := <var:l> * <var:g> ; <var:l> := <var:l> * <var:g> ; <var:l> := <nat:1> + <var:l> * <var:g> ; <var:l> := <nat:3> + <var:l> * <var:g> ; <var:l> := <nat:1> + <var:l> * <var:g> ; <var:l> := <nat:4> + <var:l> * <var:g> \end{verbatim} Given that $ <var:g> = <var:p> $ before the evaluation of this code segment , it holds that we see $ <var:l> = <nat:4> \cdot <var:p> ^ <nat:12> + <nat:2> \cdot <var:p> ^ <nat:11> + <nat:1> \cdot <var:p> ^ <nat:8> + <nat:3> \cdot <var:p> ^ <nat:7> + <nat:3> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives : \begin{eqnarray} \{ <var:g> = <var:p> \} \\ <var:l> := <nat:4> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \} \\ <var:l> := <nat:2> + <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> + <nat:2> \} \\ <var:l> := <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + \} \\ <var:l> := <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + \} \\ <var:l> := <nat:1> + <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:1> \} \\ <var:l> := <nat:3> + <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> + <nat:3> \} \end{eqnarray} Advancing the evaluation of the set of commands yields : \begin{eqnarray} <var:l> := <nat:3> + <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:3> \} \\ <var:l> := <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + \} \\ <var:l> := <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:1> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + \} \\ <var:l> := <nat:1> + <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:8> + <nat:1> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:1> \} \\ <var:l> := <nat:3> + <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:10> + <nat:2> \times <var:p> ^ <nat:9> + <nat:1> \times <var:p> ^ <nat:6> + <nat:3> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> + <nat:3> \} \end{eqnarray} Advancing the evaluation of our series of instructions returns : \begin{eqnarray} <var:l> := <nat:1> + <var:l> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:11> + <nat:2> \times <var:p> ^ <nat:10> + <nat:1> \times <var:p> ^ <nat:7> + <nat:3> \times <var:p> ^ <nat:6> + <nat:3> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:1> \} \\ <var:l> := <nat:4> + <var:l> * <var:g> \\ \{ <var:g> = <var:p> \land <var:l> = <nat:4> \times <var:p> ^ <nat:12> + <nat:2> \times <var:p> ^ <nat:11> + <nat:1> \times <var:p> ^ <nat:8> + <nat:3> \times <var:p> ^ <nat:7> + <nat:3> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> \} \end{eqnarray} Thusly , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:g> = <var:p> }} <var:l> := <nat:4> ; <var:l> := <nat:2> + <var:l> * <var:g> ; <var:l> := <var:l> * <var:g> ; <var:l> := <var:l> * <var:g> ; <var:l> := <nat:1> + <var:l> * <var:g> ; <var:l> := <nat:3> + <var:l> * <var:g> ; <var:l> := <nat:3> + <var:l> * <var:g> ; <var:l> := <var:l> * <var:g> ; <var:l> := <var:l> * <var:g> ; <var:l> := <nat:1> + <var:l> * <var:g> ; <var:l> := <nat:3> + <var:l> * <var:g> ; <var:l> := <nat:1> + <var:l> * <var:g> ; <var:l> := <nat:4> + <var:l> * <var:g> {{ <var:l> = <nat:4> * <var:p> ^ <nat:12> + <nat:2> * <var:p> ^ <nat:11> + <nat:1> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:11> + <nat:2> * <var:p> ^ <nat:10> + <nat:1> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:l> = <nat:4> * <var:p> ^ <nat:12> + <nat:2> * <var:p> ^ <nat:11> + <nat:1> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 