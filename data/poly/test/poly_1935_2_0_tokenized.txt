\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:1> ; <var:f> := <var:m0> \end{verbatim} Given --- for all natural coefficients $ <var:I> $ --- that $ <var:D> = <var:I> $ prior to running the segment of code it holds that we have $ <var:f> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be seen by Hoare reasoning . Immediately after , we have the variable binding line binding $ <nat:1> $ as $ <var:m0>$ . This moves the condition $ \{ <var:D> = <var:I> \} $ into the postcondition $ \{ <var:D> = <var:I> \land <var:m0> = <nat:1> \} $ . This is sound by the assignment inference rule of usual Hoare reasoning . Further , we have the environment update code \verb | <var:f> := <var:m0> | . This statement forwards the precondition $ \{ <var:D> = <var:I> \land <var:m0> = <nat:1> \} $ to the condition $ \{ <var:D> = <var:I> \land <var:f> = <nat:1> \} $ . This is known to be sound by the assignment scheme given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:D> = <var:I> }} <var:m0> := <nat:1> ; <var:f> := <var:m0> {{ <var:f> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:f> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 