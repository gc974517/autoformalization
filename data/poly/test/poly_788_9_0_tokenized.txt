\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:Z> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:Z> ; <var:S2> := <var:S2> * <var:Z> ; <var:W> := <var:S2> ; <var:W> := <var:W> + <var:S1> ; <var:W> := <var:W> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:Z> = <var:U> $ ( given any $ <var:U> \in \mathbb{N} $ ) prior to running this code segment , then we see $ <var:W> = <nat:8> \cdot <var:U> ^ <nat:2> + <nat:6> \cdot <var:U> + <nat:9> $ after code has executed . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be demonstrated with Hoare reasoning . Jumping to the upcoming bit of code contained in our set of instructions , we have the variable assignmet command \verb | <var:S0> := <nat:9> ; | . This transfers the condition $ \{ <var:Z> = <var:U> \} $ into the postcondition $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \} $ . This is rigorously given by the assignment scheme given in usual Hoare reasoning . Jumping to the upcoming step in our code , we have the variable binding line \verb | <var:S1> := <nat:6> ; | . This statement advances the condition $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \} $ to the postcondition $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \} $ . Further , the binding code \verb | <var:S1> := <var:S1> * <var:Z> ; | . This takes $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \} $ into $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \} $ . Keeping momentum , the environment update line binding $ <nat:8> $ into $ <var:S2>$ . This command takes the condition $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \} $ into $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \land <var:S2> = <nat:8> \} $ . Next , we see the variable assignmet statement \verb | <var:S2> := <var:S2> * <var:Z> ; | . This code transfers the condition $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \land <var:S2> = <nat:8> \} $ into the condition $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \land <var:S2> = <nat:8> * <var:U> \} $ . Observing the subsequent line seen in our program , we have the variable binding code \verb | <var:S2> := <var:S2> * <var:Z> ; | . This line advances the precondition $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \land <var:S2> = <nat:8> * <var:U> \} $ to $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \land <var:S2> = <nat:8> * <var:U> ^ <nat:2> \} $ . This is rigorously given through the assignment inference rule obtained from typical Hoare reasoning . Stepping through , we have the variable assignmet command letting $ <var:S2> $ toward $ <var:W>$ . This code transfers $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \land <var:S2> = <nat:8> * <var:U> ^ <nat:2> \} $ toward $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \land <var:W> = <nat:8> * <var:U> ^ <nat:2> \} $ . This is sound with the assignment law defined by standard Hoare reasoning . Moving on , we see the variable update line \verb | <var:W> := <var:W> + <var:S1> ; | . This redefines $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> * <var:U> \land <var:W> = <nat:8> * <var:U> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:W> = <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> \} $ . Looking at the following step contained in the set of commands , we have the variable assignmet line \verb | <var:W> := <var:W> + <var:S0> | . This transfers $ \{ <var:Z> = <var:U> \land <var:S0> = <nat:9> \land <var:W> = <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> \} $ as the postcondition $ \{ <var:Z> = <var:U> \land <var:W> = <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:9> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:Z> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:Z> ; <var:S2> := <var:S2> * <var:Z> ; <var:W> := <var:S2> ; <var:W> := <var:W> + <var:S1> ; <var:W> := <var:W> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Z> = <var:U> }} <def:poly> {{ <var:W> = <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:U> /\ <var:S2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:U> /\ <var:S2> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:U> /\ <var:S2> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:U> /\ <var:W> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:9> /\ <var:W> = <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:W> = <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 