\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:r0> := <nat:5> ; <var:t> := <var:r0> \end{verbatim} Assume it to hold that $ <var:F> = <var:E> $ prior to executing the series of commands , then we see $ <var:t> = <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be accomplished by usual Hoare logic . Focusing on the subsequent step found in the segment of code , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:E> \} & <var:r0> := <nat:5> & \{ <var:F> = <var:E> \land <var:r0> = <nat:5> \} \end{tabular} This is deduced using the environment update law found in Hoare logic . Moving on , \[ \begin{tabular} {rcl} \{ <var:F> = <var:E> \} & <var:r0> := <nat:5> & \{ <var:F> = <var:E> \land <var:r0> = <nat:5> \} \end{tabular} This is rigorously given using the variable binding inference rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:F> = <var:E> }} <var:r0> := <nat:5> ; <var:t> := <var:r0> {{ <var:t> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:t> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 