\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:3> ; <var:o> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:q> = <var:Z> $ before the execution of this series of commands it holds that $ <var:o> = <nat:3> $ after list of commands has finished executing . \end{theorem} \begin{proof} Proving correctness for this program is clear by Hoare techniques . Taking another step toward the following line in our series of commands , we have \begin{eqnarray} \{ <var:q> = <var:Z> \} \, <var:z0> := <nat:3> \, \{ <var:q> = <var:Z> \land <var:z0> = <nat:3> \} \end{eqnarray} This is shown by the inference rule obtained from typical Hoare techniques . Observing the proceeding bit of code found in the set of commands , we have \begin{eqnarray} \{ <var:q> = <var:Z> \} \, <var:z0> := <nat:3> \, \{ <var:q> = <var:Z> \land <var:z0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:3> ; <var:o> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:q> = <var:Z> }} <def:poly> {{ <var:o> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:o> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 