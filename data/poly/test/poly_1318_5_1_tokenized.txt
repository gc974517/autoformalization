\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:v1> := <var:Y> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:1> ; <var:x> := <var:v1> <var:x> := <var:x> + <var:v0> \end{verbatim} Assume --- given all positive integer coefficients $ <var:l> $ --- $ <var:Y> = <var:l> $ prior to running our set of instructions it must be that $ <var:x> = <nat:1> \times <var:l> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code can be accomplished with usual Hoare logic . Honing in on the proceeding steps found in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:l> \} & <var:v1> := <var:Y> & \{ <var:Y> = <var:l> \land <var:v1> = <var:l> \} \\ \{ <var:Y> = <var:l> \land <var:v1> = <var:l> \} & <var:v0> := <nat:7> & \{ <var:Y> = <var:l> \land <var:v1> = <var:l> \land <var:v0> = <nat:7> \} \\ \{ <var:Y> = <var:l> \land <var:v1> = <var:l> \land <var:v0> = <nat:7> \} & <var:v1> := <var:v1> * <nat:1> & \{ <var:Y> = <var:l> \land <var:v1> = <nat:1> \times <var:l> \land <var:v0> = <nat:7> \} \end{tabular} Considering the subsequent line of code seen in the segment of code , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:l> \} & <var:v1> := <var:Y> & \{ <var:Y> = <var:l> \land <var:v1> = <var:l> \} \end{tabular} This is sound by the assignment scheme obtained from standard Hoare reasoning . Considering the upcoming statement seen in the list of commands , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:l> \} & <var:v1> := <var:Y> & \{ <var:Y> = <var:l> \land <var:v1> = <var:l> \} \end{tabular} This is given through the inference rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Y> = <var:l> }} <var:v1> := <var:Y> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:1> ; <var:x> := <var:v1> <var:x> := <var:x> + <var:v0> {{ <var:x> = <nat:1> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:v1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:v1> = <var:l> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:v1> = <nat:1> * <var:l> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:v0> = <nat:7> /\ <var:x> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:x> = <nat:1> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 