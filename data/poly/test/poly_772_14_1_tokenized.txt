\begin{document} \begin{theorem} Consider the following list of instructions such that \begin{verbatim} <var:Y1> := <var:u> ; <var:Y2> := <var:Y1> * <var:u> ; <var:Y3> := <var:Y2> * <var:u> ; <var:Y4> := <var:Y3> * <var:u> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:Y3> := <var:Y3> * <nat:2> ; <var:Y4> := <var:Y4> * <nat:3> ; <var:j> := <var:Y4> <var:j> := <var:j> + <var:Y3> <var:j> := <var:j> + <var:Y2> <var:j> := <var:j> + <var:Y1> <var:j> := <var:j> + <var:Y0> \end{verbatim} Allow it to hold that $ <var:u> = <var:z> $ given positive integer coefficients $ <var:z> $ ahead of evaluating our code segment it must be that we see $ <var:j> = <nat:3> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:5> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the segment of code can be done by standard Hoare logic . Further , the variable binding statement \verb | <var:Y1> := <var:u> ; | . This moves $ \{ <var:u> = <var:z> \} $ into the condition $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \} $ . This is given using the assignment law found in standard Hoare techniques . Jumping to the subsequent bit of code seen in the set of commands , the variable update code \verb | <var:Y2> := <var:Y1> * <var:u> ; | . This forwards the precondition $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \} $ into the postcondition $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \} $ . Taking another step toward the upcoming bit of code seen in our program , we have the binding line defining $ <var:Y2> * <var:u> $ into $ <var:Y3>$ . This command redefines the condition $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \} $ as $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \} $ . Advancing to the next step , we see the line defining $ <var:Y3> * <var:u> $ toward $ <var:Y4>$ . This advances the condition $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \} $ to the condition $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \} $ . Moving on to the upcoming line contained in the segment of code , we have the statement \verb | <var:Y0> := <nat:1> ; | . This forwards $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \} $ as the postcondition $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ . This is shown to be logically sound by the assignment rule obtained from standard Hoare reasoning . Focusing on the next statement found in our set of commands , we see the variable update code defining $ <var:Y1> * <nat:2> $ as $ <var:Y1>$ . This line takes $ \{ <var:u> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ as the condition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ . Stepping through , we have the binding line assigning $ <var:Y2> * <nat:5> $ into $ <var:Y2>$ . This command moves the condition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ into the postcondition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ . Further , we see the variable update command defining $ <var:Y3> * <nat:2> $ as $ <var:Y3>$ . This statement takes the precondition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ toward $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ . Keeping momentum , we see the assignment code \verb | <var:Y4> := <var:Y4> * <nat:3> ; | . This takes the precondition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:z> ^ <nat:3> \land <var:Y4> = <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ as the postcondition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:z> ^ <nat:3> \land <var:Y4> = <nat:3> \cdot <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ . This is ensured using the assignment inference rule from standard Hoare logic . Moving on to the subsequent line of code in our set of instructions , the binding line assigning $ <var:Y4$ to $ <var:j>$ . This forwards $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:z> ^ <nat:3> \land <var:Y4> = <nat:3> \cdot <var:z> ^ <nat:4> \land <var:Y0> = <nat:1> \} $ as the postcondition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:z> ^ <nat:3> \land <var:Y0> = <nat:1> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> \} $ . Moving forward to the next step , the code \verb | <var:j> := <var:j> + <var:Y3> | . This statement redefines $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:z> ^ <nat:3> \land <var:Y0> = <nat:1> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> \} $ toward the condition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y0> = <nat:1> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> \} $ . This is guaranteed through the assignment rule given in Hoare reasoning . Shifting focus toward the subsequent statement contained in our list of instructions , we have the variable assignmet line giving $ <var:j> + <var:Y2$ as $ <var:j>$ . This line redefines $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y2> = <nat:5> \cdot <var:z> ^ <nat:2> \land <var:Y0> = <nat:1> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> \} $ into the condition $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y0> = <nat:1> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> \} $ . Honing in on the next line of code in the code segment , we see the assignment line defining $ <var:j> + <var:Y1$ toward $ <var:j>$ . This code moves $ \{ <var:u> = <var:z> \land <var:Y1> = <nat:2> \cdot <var:z> \land <var:Y0> = <nat:1> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> \} $ to the condition $ \{ <var:u> = <var:z> \land <var:Y0> = <nat:1> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> \} $ . Advancing to the following statement found in the program , we have the statement letting $ <var:j> + <var:Y0$ toward $ <var:j>$ . This statement forwards the condition $ \{ <var:u> = <var:z> \land <var:Y0> = <nat:1> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> \} $ as the condition $ \{ <var:u> = <var:z> \land <var:j> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:1> \} $ . This is shown through the assignment rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <var:Y4> : string := " <var:Y4> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:u> = <var:z> }} <var:Y1> := <var:u> ; <var:Y2> := <var:Y1> * <var:u> ; <var:Y3> := <var:Y2> * <var:u> ; <var:Y4> := <var:Y3> * <var:u> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:Y3> := <var:Y3> * <nat:2> ; <var:Y4> := <var:Y4> * <nat:3> ; <var:j> := <var:Y4> <var:j> := <var:j> + <var:Y3> <var:j> := <var:j> + <var:Y2> <var:j> := <var:j> + <var:Y1> <var:j> := <var:j> + <var:Y0> {{ <var:j> = <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> /\ <var:Y4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> /\ <var:Y4> = <var:z> ^ <nat:4> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <nat:2> * <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> /\ <var:Y4> = <var:z> ^ <nat:4> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <nat:2> * <var:z> /\ <var:Y2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> /\ <var:Y4> = <var:z> ^ <nat:4> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <nat:2> * <var:z> /\ <var:Y2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:Y3> = <nat:2> * <var:z> ^ <nat:3> /\ <var:Y4> = <var:z> ^ <nat:4> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <nat:2> * <var:z> /\ <var:Y2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:Y3> = <nat:2> * <var:z> ^ <nat:3> /\ <var:Y4> = <nat:3> * <var:z> ^ <nat:4> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <nat:2> * <var:z> /\ <var:Y2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:Y3> = <nat:2> * <var:z> ^ <nat:3> /\ <var:Y0> = <nat:1> /\ <var:j> = <nat:3> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <nat:2> * <var:z> /\ <var:Y2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:Y0> = <nat:1> /\ <var:j> = <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y1> = <nat:2> * <var:z> /\ <var:Y0> = <nat:1> /\ <var:j> = <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:Y0> = <nat:1> /\ <var:j> = <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:j> = <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 