\begin{document} \begin{theorem} Consider the following series of instructions as \begin{verbatim} <var:l0> := <nat:7> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:k> ; <var:l2> := <nat:3> ; <var:l2> := <var:l2> * <var:k> ; <var:l2> := <var:l2> * <var:k> ; <var:l3> := <nat:7> ; <var:l3> := <var:l3> * <var:k> ; <var:l3> := <var:l3> * <var:k> ; <var:l3> := <var:l3> * <var:k> ; <var:w> := <var:l3> ; <var:w> := <var:w> + <var:l2> ; <var:w> := <var:w> + <var:l1> ; <var:w> := <var:w> + <var:l0> \end{verbatim} Given it to hold that $ <var:k> = <var:H> $ ahead of executing the code it follows that we see $ <var:w> = <nat:7> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:7> $ when code segment has executed . \end{theorem} \begin{proof} The course of logic for the set of instructions is accomplished with usual Hoare reasoning . Looking at the subsequent step in the list of instructions , the variable binding code letting $ <nat:7> $ toward $ <var:l0>$ . This statement transfers the condition $ \{ <var:k> = <var:H> \} $ to $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \} $ . This is known to be sound through the assignment law found in Hoare techniques . Advancing to the next step , the variable update statement binding $ <nat:4> $ as $ <var:l1>$ . This moves $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \} $ to the postcondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \} $ . Moving forward , we see the variable binding code \verb | <var:l1> := <var:l1> * <var:k> ; | . This advances the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \} $ to $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \} $ . This is deduced with the assignment law of Hoare reasoning . Focusing on the proceeding line in our set of commands , we see the environment update command \verb | <var:l2> := <nat:3> ; | . This line redefines $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \} $ as the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \} $ . Immediately after , we have the command defining $ <var:l2> * <var:k> $ as $ <var:l2>$ . This statement advances the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \} $ to the postcondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> \} $ . Observing the upcoming statement found in our code , we see the variable binding line \verb | <var:l2> := <var:l2> * <var:k> ; | . This line advances the precondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> \} $ into the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \} $ . This is known to be sound through the assignment scheme given in usual Hoare techniques . After , we have the code \verb | <var:l3> := <nat:7> ; | . This statement forwards $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \} $ into the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:7> \} $ . This is sound using the assignment law in typical Hoare techniques . Going forward , we see the environment update statement giving $ <var:l3> * <var:k> $ into $ <var:l3>$ . This redefines the precondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:7> \} $ into the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:7> \times <var:H> \} $ . This is shown through the assignment scheme found in typical Hoare techniques . Keeping momentum , the binding code binding $ <var:l3> * <var:k> $ toward $ <var:l3>$ . This moves the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:7> \times <var:H> \} $ to the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:7> \times <var:H> ^ <nat:2> \} $ . Going to the next step , the variable binding statement \verb | <var:l3> := <var:l3> * <var:k> ; | . This redefines the precondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:7> \times <var:H> ^ <nat:2> \} $ as $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:7> \times <var:H> ^ <nat:3> \} $ . Next , we have the binding statement \verb | <var:w> := <var:l3> ; | . This forwards the precondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:7> \times <var:H> ^ <nat:3> \} $ to the postcondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:w> = <nat:7> \times <var:H> ^ <nat:3> \} $ . This is known to be sound through the assignment rule given in standard Hoare reasoning . Taking a look at the following command in the series of instructions , the assignment command \verb | <var:w> := <var:w> + <var:l2> ; | . This forwards the precondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:l2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:w> = <nat:7> \times <var:H> ^ <nat:3> \} $ as the condition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:w> = <nat:7> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> \} $ . Moving forward to the following statement in our list of instructions , the variable update command giving $ <var:w> + <var:l1> $ to $ <var:w>$ . This advances $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \times <var:H> \land <var:w> = <nat:7> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> \} $ toward $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:w> = <nat:7> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> \} $ . This is rigorously given through the assignment scheme from standard Hoare techniques . Following , the assignment statement giving $ <var:w> + <var:l0$ to $ <var:w>$ . This redefines the precondition $ \{ <var:k> = <var:H> \land <var:l0> = <nat:7> \land <var:w> = <nat:7> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> \} $ to $ \{ <var:k> = <var:H> \land <var:w> = <nat:7> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:7> \} $ . This is rigorously given with the assignment inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:k> = <var:H> }} <var:l0> := <nat:7> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:k> ; <var:l2> := <nat:3> ; <var:l2> := <var:l2> * <var:k> ; <var:l2> := <var:l2> * <var:k> ; <var:l3> := <nat:7> ; <var:l3> := <var:l3> * <var:k> ; <var:l3> := <var:l3> * <var:k> ; <var:l3> := <var:l3> * <var:k> ; <var:w> := <var:l3> ; <var:w> := <var:w> + <var:l2> ; <var:w> := <var:w> + <var:l1> ; <var:w> := <var:w> + <var:l0> {{ <var:w> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:l2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:l2> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:l2> = <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:l2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:l2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:l2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:l2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:l2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:w> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:H> /\ <var:w> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:l0> = <nat:7> /\ <var:w> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:w> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 