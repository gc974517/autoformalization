\begin{document} \begin{theorem} Take the following list of commands as \begin{verbatim} <var:u1> := <var:w> ; <var:u2> := <var:u1> * <var:w> ; <var:u3> := <var:u2> * <var:w> ; <var:u4> := <var:u3> * <var:w> ; <var:u0> := <nat:5> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:6> ; <var:u4> := <var:u4> * <nat:6> ; <var:P> := <var:u4> <var:P> := <var:P> + <var:u3> <var:P> := <var:P> + <var:u2> <var:P> := <var:P> + <var:u1> <var:P> := <var:P> + <var:u0> \end{verbatim} Allowing it to be that $ <var:w> = <var:k> $ , with some $ <var:k> $ , prior to evaluating our code , it holds that we have $ <var:P> = <nat:6> \times <var:k> ^ <nat:4> + <nat:6> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:9> \times <var:k> + <nat:5> $ . \end{theorem} \begin{proof} The proof of the list of instructions is shown using typical Hoare techniques . Focusing on the following statements found in our set of instructions , we see \begin{verbatim} { <var:w> = <var:k> } <var:u1> := <var:w> { <var:w> = <var:k> \land <var:u1> = <var:k> } { <var:w> = <var:k> \land <var:u1> = <var:k> } <var:u2> := <var:u1> * <var:w> { <var:w> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> } { <var:w> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> } <var:u3> := <var:u2> * <var:w> { <var:w> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> } { <var:w> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> } <var:u4> := <var:u3> * <var:w> { <var:w> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> } { <var:w> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> } <var:u0> := <nat:5> { <var:w> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } { <var:w> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } <var:u1> := <var:u1> * <nat:9> { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } <var:u2> := <var:u2> * <nat:9> { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } <var:u3> := <var:u3> * <nat:6> { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u3> = <nat:6> * <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u3> = <nat:6> * <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } <var:u4> := <var:u4> * <nat:6> { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u3> = <nat:6> * <var:k> ^ <nat:3> \land <var:u4> = <nat:6> * <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u3> = <nat:6> * <var:k> ^ <nat:3> \land <var:u4> = <nat:6> * <var:k> ^ <nat:4> \land <var:u0> = <nat:5> } <var:P> := <var:u4{ <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u3> = <nat:6> * <var:k> ^ <nat:3> \land <var:u0> = <nat:5> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> } { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u3> = <nat:6> * <var:k> ^ <nat:3> \land <var:u0> = <nat:5> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> } <var:P> := <var:P> + <var:u3{ <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u0> = <nat:5> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> } { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u0> = <nat:5> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> } <var:P> := <var:P> + <var:u2{ <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u0> = <nat:5> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> } { <var:w> = <var:k> \land <var:u1> = <nat:9> * <var:k> \land <var:u0> = <nat:5> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> } <var:P> := <var:P> + <var:u1{ <var:w> = <var:k> \land <var:u0> = <nat:5> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> } { <var:w> = <var:k> \land <var:u0> = <nat:5> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> } <var:P> := <var:P> + <var:u0{ <var:w> = <var:k> \land <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:5> } \end{verbatim} This is shown through the environment update inference rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:w> = <var:k> }} <var:u1> := <var:w> ; <var:u2> := <var:u1> * <var:w> ; <var:u3> := <var:u2> * <var:w> ; <var:u4> := <var:u3> * <var:w> ; <var:u0> := <nat:5> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:6> ; <var:u4> := <var:u4> * <nat:6> ; <var:P> := <var:u4> <var:P> := <var:P> + <var:u3> <var:P> := <var:P> + <var:u2> <var:P> := <var:P> + <var:u1> <var:P> := <var:P> + <var:u0> {{ <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u4> = <var:k> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <nat:9> * <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u4> = <var:k> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <nat:9> * <var:k> /\ <var:u2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u4> = <var:k> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <nat:9> * <var:k> /\ <var:u2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:u3> = <nat:6> * <var:k> ^ <nat:3> /\ <var:u4> = <var:k> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <nat:9> * <var:k> /\ <var:u2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:u3> = <nat:6> * <var:k> ^ <nat:3> /\ <var:u4> = <nat:6> * <var:k> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <nat:9> * <var:k> /\ <var:u2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:u3> = <nat:6> * <var:k> ^ <nat:3> /\ <var:u0> = <nat:5> /\ <var:P> = <nat:6> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <nat:9> * <var:k> /\ <var:u2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:u0> = <nat:5> /\ <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u1> = <nat:9> * <var:k> /\ <var:u0> = <nat:5> /\ <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:u0> = <nat:5> /\ <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:P> = <nat:6> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 