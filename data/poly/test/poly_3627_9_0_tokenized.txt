\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:4> ; <var:i1> := <nat:7> ; <var:i1> := <var:i1> * <var:b> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:b> ; <var:i2> := <var:i2> * <var:b> ; <var:B> := <var:i2> ; <var:B> := <var:B> + <var:i1> ; <var:B> := <var:B> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:b> = <var:f> $ prior to evaluating our list of commands , it must be that we see $ <var:B> = <nat:4> \times <var:f> ^ <nat:2> + <nat:7> \times <var:f> + <nat:4> $ when list of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be done with standard Hoare logic . Looking at the next step found in the program , the variable binding command \verb | <var:i0> := <nat:4> ; | . This advances the precondition $ \{ <var:b> = <var:f> \} $ into the postcondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \} $ . This is ensured with the assignment law found in usual Hoare logic . Next , the assignment code \verb | <var:i1> := <nat:7> ; | . This statement advances the precondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \} $ into $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \} $ . This is rigorously given through the assignment inference rule defined in standard Hoare techniques . Taking another step toward the following step in the series of commands , we see the variable assignmet code \verb | <var:i1> := <var:i1> * <var:b> ; | . This forwards $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \} $ as the postcondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \} $ . This is given using the assignment scheme given in Hoare logic . Moving forward to the next step , we see the variable binding code \verb | <var:i2> := <nat:4> ; | . This transfers the precondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \} $ into $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \land <var:i2> = <nat:4> \} $ . This is ensured by the assignment rule obtained from Hoare reasoning . Looking at the next line contained in our series of commands , we have the environment update code \verb | <var:i2> := <var:i2> * <var:b> ; | . This command advances the precondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \land <var:i2> = <nat:4> \} $ to the condition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \land <var:i2> = <nat:4> \cdot <var:f> \} $ . This is shown through the assignment rule of typical Hoare reasoning . Honing in on the following piece of code in the program , we have the variable assignmet line letting $ <var:i2> * <var:b> $ as $ <var:i2>$ . This command moves $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \land <var:i2> = <nat:4> \cdot <var:f> \} $ into $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \land <var:i2> = <nat:4> \cdot <var:f> ^ <nat:2> \} $ . This is ensured through the assignment rule defined in typical Hoare reasoning . Looking at the next piece of code in the code segment , the binding line \verb | <var:B> := <var:i2> ; | . This moves the precondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \land <var:i2> = <nat:4> \cdot <var:f> ^ <nat:2> \} $ to the postcondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \land <var:B> = <nat:4> \cdot <var:f> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule obtained from typical Hoare techniques . Looking at the following piece of code found in our set of instructions , we see the variable update statement \verb | <var:B> := <var:B> + <var:i1> ; | . This line transfers the condition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:i1> = <nat:7> \cdot <var:f> \land <var:B> = <nat:4> \cdot <var:f> ^ <nat:2> \} $ toward the postcondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:B> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:7> \cdot <var:f> \} $ . This is rigorously given by the assignment scheme from typical Hoare reasoning . Moving on to the proceeding line contained in our code segment , we see the variable update code \verb | <var:B> := <var:B> + <var:i0> | . This command advances the precondition $ \{ <var:b> = <var:f> \land <var:i0> = <nat:4> \land <var:B> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:7> \cdot <var:f> \} $ into the postcondition $ \{ <var:b> = <var:f> \land <var:B> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:7> \cdot <var:f> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:4> ; <var:i1> := <nat:7> ; <var:i1> := <var:i1> * <var:b> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:b> ; <var:i2> := <var:i2> * <var:b> ; <var:B> := <var:i2> ; <var:B> := <var:B> + <var:i1> ; <var:B> := <var:B> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <def:poly> {{ <var:B> = <nat:4> * <var:f> ^ <nat:2> + <nat:7> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:7> * <var:f> /\ <var:i2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:7> * <var:f> /\ <var:i2> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:7> * <var:f> /\ <var:i2> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:7> * <var:f> /\ <var:B> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:i0> = <nat:4> /\ <var:B> = <nat:4> * <var:f> ^ <nat:2> + <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:B> = <nat:4> * <var:f> ^ <nat:2> + <nat:7> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 