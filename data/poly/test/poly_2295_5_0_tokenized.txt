\begin{document} \begin{theorem} Define a program as \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:l> ; <var:G> := <var:g1> ; <var:G> := <var:G> + <var:g0> \end{verbatim} Allowing it to be that $ <var:l> = <var:r> $ prior to running this list of instructions , it holds that $ <var:G> = <nat:7> * <var:r> + <nat:8> $ once list of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:r> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:l> = <var:r> \land <var:g0> = <nat:8> \} \\ <var:g1> := <nat:7> ; \\ \{ <var:l> = <var:r> \land <var:g0> = <nat:8> \land <var:g1> = <nat:7> \} \\ <var:g1> := <var:g1> * <var:l> ; \\ \{ <var:l> = <var:r> \land <var:g0> = <nat:8> \land <var:g1> = <nat:7> \times <var:r> \} \\ <var:G> := <var:g1> ; \\ \{ <var:l> = <var:r> \land <var:g0> = <nat:8> \land <var:G> = <nat:7> \times <var:r> \} \\ <var:G> := <var:G> + <var:g0> \\ \{ <var:l> = <var:r> \land <var:G> = <nat:7> \times <var:r> + <nat:8> \} \end{eqnarray} Using standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:l> = <var:r> }} <var:g0> := <nat:8> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:l> ; <var:G> := <var:g1> ; <var:G> := <var:G> + <var:g0> {{ <var:G> = <nat:7> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:g0> = <nat:8> /\ <var:G> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:G> = <nat:7> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 