\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:p> := <nat:1> ; <var:p> := <nat:2> + <var:p> * <var:E> ; <var:p> := <nat:4> + <var:p> * <var:E> ; <var:p> := <nat:1> + <var:p> * <var:E> ; <var:p> := <nat:3> + <var:p> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Allowing , for every positive integer coefficients $ <var:S> $ , that $ <var:E> = <var:S> $ before running this segment of code it must be that we have $ <var:p> = <nat:1> \cdot <var:S> ^ <nat:4> + <nat:2> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:3> $ when program is done . \end{theorem} \begin{proof} The flow of logic for our series of commands can be demonstrated by Hoare techniques . Advancing on , \[ \begin{tabular} {rcl} \{ <var:E> = <var:S> \} & <var:p> := <nat:1> & \{ <var:E> = <var:S> \land <var:p> = <nat:1> \} \\ \{ <var:E> = <var:S> \land <var:p> = <nat:1> \} & <var:p> := <nat:2> + <var:p> * <var:E> & \{ <var:E> = <var:S> \land <var:p> = <nat:1> \times <var:S> + <nat:2> \} \\ \{ <var:E> = <var:S> \land <var:p> = <nat:1> \times <var:S> + <nat:2> \} & <var:p> := <nat:4> + <var:p> * <var:E> & \{ <var:E> = <var:S> \land <var:p> = <nat:1> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:4> \} \\ \{ <var:E> = <var:S> \land <var:p> = <nat:1> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:4> \} & <var:p> := <nat:1> + <var:p> * <var:E> & \{ <var:E> = <var:S> \land <var:p> = <nat:1> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:1> \} \end{tabular} This is shown to be logically sound with the variable update inference rule from standard Hoare techniques . Observing the upcoming command contained in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:E> = <var:S> \} & <var:p> := <nat:1> & \{ <var:E> = <var:S> \land <var:p> = <nat:1> \} \end{tabular} This is shown by the assignment rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:1> ; <var:p> := <nat:2> + <var:p> * <var:E> ; <var:p> := <nat:4> + <var:p> * <var:E> ; <var:p> := <nat:1> + <var:p> * <var:E> ; <var:p> := <nat:3> + <var:p> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:E> = <var:S> }} <def:poly> {{ <var:p> = <nat:1> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:p> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:p> = <nat:1> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:p> = <nat:1> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:p> = <nat:1> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:p> = <nat:1> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 