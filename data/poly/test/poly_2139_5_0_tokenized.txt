\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:X0> := <nat:1> ; <var:X1> := <nat:5> ; <var:X1> := <var:X1> * <var:N> ; <var:W> := <var:X1> ; <var:W> := <var:W> + <var:X0> \end{verbatim} Allowing that we have $ <var:N> = <var:h> $ prior to the execution of the list of commands then we see $ <var:W> = <nat:5> \cdot <var:h> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is given through the below decorated code segment . \begin{eqnarray} \{ <var:N> = <var:h> \} \\ <var:X0> := <nat:1> ; \\ \{ <var:N> = <var:h> \land <var:X0> = <nat:1> \} \\ <var:X1> := <nat:5> ; \\ \{ <var:N> = <var:h> \land <var:X0> = <nat:1> \land <var:X1> = <nat:5> \} \\ <var:X1> := <var:X1> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:X0> = <nat:1> \land <var:X1> = <nat:5> * <var:h> \} \\ <var:W> := <var:X1> ; \\ \{ <var:N> = <var:h> \land <var:X0> = <nat:1> \land <var:W> = <nat:5> * <var:h> \} \\ <var:W> := <var:W> + <var:X0> \\ \{ <var:N> = <var:h> \land <var:W> = <nat:5> * <var:h> + <nat:1> \} \end{eqnarray} Applying standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:N> = <var:h> }} <var:X0> := <nat:1> ; <var:X1> := <nat:5> ; <var:X1> := <var:X1> * <var:N> ; <var:W> := <var:X1> ; <var:W> := <var:W> + <var:X0> {{ <var:W> = <nat:5> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:X0> = <nat:1> /\ <var:X1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:X0> = <nat:1> /\ <var:X1> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:X0> = <nat:1> /\ <var:W> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:W> = <nat:5> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 