\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:a1> := <var:D> ; <var:a2> := <var:a1> * <var:D> ; <var:a3> := <var:a2> * <var:D> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:6> ; <var:a2> := <var:a2> * <nat:8> ; <var:a3> := <var:a3> * <nat:7> ; <var:C> := <var:a3> <var:C> := <var:C> + <var:a2> <var:C> := <var:C> + <var:a1> <var:C> := <var:C> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume for any whole numbers $ <var:B> $ that we have $ <var:D> = <var:B> $ before the evaluation of the program it must be that we have $ <var:C> = <nat:7> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:6> \times <var:B> + <nat:3> $ once set of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be seen by standard Hoare logic . Moving forward to the next step , we see the binding code assigning $ <var:D> $ as $ <var:a1>$ . This statement moves the condition $ \{ <var:D> = <var:B> \} $ to $ \{ <var:D> = <var:B> \land <var:a1> = <var:B> \} $ . This is shown to be logically sound by the assignment scheme given by typical Hoare techniques . After , we see the environment update statement binding $ <var:a1> * <var:D> $ to $ <var:a2>$ . This takes the precondition $ \{ <var:D> = <var:B> \land <var:a1> = <var:B> \} $ toward $ \{ <var:D> = <var:B> \land <var:a1> = <var:B> \land <var:a2> = <var:B> ^ <nat:2> \} $ . Moving forward to the upcoming bit of code in our list of instructions , we see the variable binding code \verb | <var:a3> := <var:a2> * <var:D> ; | . This takes the condition $ \{ <var:D> = <var:B> \land <var:a1> = <var:B> \land <var:a2> = <var:B> ^ <nat:2> \} $ as $ \{ <var:D> = <var:B> \land <var:a1> = <var:B> \land <var:a2> = <var:B> ^ <nat:2> \land <var:a3> = <var:B> ^ <nat:3> \} $ . Immediately after , the assignment code yielding $ <nat:3> $ toward $ <var:a0>$ . This transfers the precondition $ \{ <var:D> = <var:B> \land <var:a1> = <var:B> \land <var:a2> = <var:B> ^ <nat:2> \land <var:a3> = <var:B> ^ <nat:3> \} $ as $ \{ <var:D> = <var:B> \land <var:a1> = <var:B> \land <var:a2> = <var:B> ^ <nat:2> \land <var:a3> = <var:B> ^ <nat:3> \land <var:a0> = <nat:3> \} $ . This is shown using the assignment rule found in usual Hoare logic . Focusing on the proceeding step found in our list of instructions , we have the variable assignmet code giving $ <var:a1> * <nat:6> $ toward $ <var:a1>$ . This code takes the precondition $ \{ <var:D> = <var:B> \land <var:a1> = <var:B> \land <var:a2> = <var:B> ^ <nat:2> \land <var:a3> = <var:B> ^ <nat:3> \land <var:a0> = <nat:3> \} $ into the postcondition $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a2> = <var:B> ^ <nat:2> \land <var:a3> = <var:B> ^ <nat:3> \land <var:a0> = <nat:3> \} $ . This is shown to be logically sound by the assignment law defined in usual Hoare reasoning . Advancing , we see the binding statement giving $ <var:a2> * <nat:8> $ as $ <var:a2>$ . This statement forwards the precondition $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a2> = <var:B> ^ <nat:2> \land <var:a3> = <var:B> ^ <nat:3> \land <var:a0> = <nat:3> \} $ as $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a2> = <nat:8> * <var:B> ^ <nat:2> \land <var:a3> = <var:B> ^ <nat:3> \land <var:a0> = <nat:3> \} $ . This is rigorously given with the assignment inference rule obtained from Hoare logic . Keeping momentum , we see the environment update line \verb | <var:a3> := <var:a3> * <nat:7> ; | . This forwards the condition $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a2> = <nat:8> * <var:B> ^ <nat:2> \land <var:a3> = <var:B> ^ <nat:3> \land <var:a0> = <nat:3> \} $ into the condition $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a2> = <nat:8> * <var:B> ^ <nat:2> \land <var:a3> = <nat:7> * <var:B> ^ <nat:3> \land <var:a0> = <nat:3> \} $ . Observing the subsequent bit of code in the code , we see the environment update statement \verb | <var:C> := <var:a3> | . This redefines the precondition $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a2> = <nat:8> * <var:B> ^ <nat:2> \land <var:a3> = <nat:7> * <var:B> ^ <nat:3> \land <var:a0> = <nat:3> \} $ toward the condition $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a2> = <nat:8> * <var:B> ^ <nat:2> \land <var:a0> = <nat:3> \land <var:C> = <nat:7> * <var:B> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment inference rule found in typical Hoare reasoning . Taking another step toward the following line contained in the set of instructions , we see the environment update line defining $ <var:C> + <var:a2$ toward $ <var:C>$ . This code takes $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a2> = <nat:8> * <var:B> ^ <nat:2> \land <var:a0> = <nat:3> \land <var:C> = <nat:7> * <var:B> ^ <nat:3> \} $ as the postcondition $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a0> = <nat:3> \land <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> \} $ . Further , we have the binding command \verb | <var:C> := <var:C> + <var:a1> | . This transfers the condition $ \{ <var:D> = <var:B> \land <var:a1> = <nat:6> * <var:B> \land <var:a0> = <nat:3> \land <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> \} $ as the condition $ \{ <var:D> = <var:B> \land <var:a0> = <nat:3> \land <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> \} $ . Jumping to the subsequent command found in our set of commands , the binding command \verb | <var:C> := <var:C> + <var:a0> | . This advances $ \{ <var:D> = <var:B> \land <var:a0> = <nat:3> \land <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> \} $ as the postcondition $ \{ <var:D> = <var:B> \land <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:D> ; <var:a2> := <var:a1> * <var:D> ; <var:a3> := <var:a2> * <var:D> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:6> ; <var:a2> := <var:a2> * <nat:8> ; <var:a3> := <var:a3> * <nat:7> ; <var:C> := <var:a3> <var:C> := <var:C> + <var:a2> <var:C> := <var:C> + <var:a1> <var:C> := <var:C> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:D> = <var:B> }} <def:poly> {{ <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <var:B> /\ <var:a2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <var:B> /\ <var:a2> = <var:B> ^ <nat:2> /\ <var:a3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <var:B> /\ <var:a2> = <var:B> ^ <nat:2> /\ <var:a3> = <var:B> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <nat:6> * <var:B> /\ <var:a2> = <var:B> ^ <nat:2> /\ <var:a3> = <var:B> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <nat:6> * <var:B> /\ <var:a2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:a3> = <var:B> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <nat:6> * <var:B> /\ <var:a2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:B> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <nat:6> * <var:B> /\ <var:a2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:a0> = <nat:3> /\ <var:C> = <nat:7> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a1> = <nat:6> * <var:B> /\ <var:a0> = <nat:3> /\ <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:a0> = <nat:3> /\ <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:C> = <nat:7> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 