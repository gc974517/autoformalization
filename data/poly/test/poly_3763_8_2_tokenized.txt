\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <var:y> * <var:J> ; <var:y> := <var:y> * <var:J> ; <var:y> := <var:y> * <var:J> ; <var:y> := <nat:3> + <var:y> * <var:J> ; <var:y> := <nat:1> + <var:y> * <var:J> ; <var:y> := <nat:2> + <var:y> * <var:J> ; <var:y> := <nat:4> + <var:y> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:J> = <var:s> $ given all natural numbers $ <var:s> $ prior to evaluating this set of commands it follows that $ <var:y> = <nat:3> \times <var:s> ^ <nat:7> + <nat:3> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:J> = <var:s> \} \\ <var:y> := <nat:3> ; \\ \{ <var:J> = <var:s> \land <var:y> = <nat:3> \} \\ <var:y> := <var:y> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:y> = <nat:3> \times <var:s> + \} \\ <var:y> := <var:y> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:y> = <nat:3> \times <var:s> ^ <nat:2> + \} \\ <var:y> := <var:y> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:y> = <nat:3> \times <var:s> ^ <nat:3> + \} \\ <var:y> := <nat:3> + <var:y> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:y> = <nat:3> \times <var:s> ^ <nat:4> + <nat:3> \} \\ <var:y> := <nat:1> + <var:y> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:y> = <nat:3> \times <var:s> ^ <nat:5> + <nat:3> \times <var:s> + <nat:1> \} \\ <var:y> := <nat:2> + <var:y> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:y> = <nat:3> \times <var:s> ^ <nat:6> + <nat:3> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:2> \} \\ <var:y> := <nat:4> + <var:y> * <var:J> \\ \{ <var:J> = <var:s> \land <var:y> = <nat:3> \times <var:s> ^ <nat:7> + <nat:3> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:4> \} \end{eqnarray} Thus , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:3> ; <var:y> := <var:y> * <var:J> ; <var:y> := <var:y> * <var:J> ; <var:y> := <var:y> * <var:J> ; <var:y> := <nat:3> + <var:y> * <var:J> ; <var:y> := <nat:1> + <var:y> * <var:J> ; <var:y> := <nat:2> + <var:y> * <var:J> ; <var:y> := <nat:4> + <var:y> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:J> = <var:s> }} <def:poly> {{ <var:y> = <nat:3> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:y> = <nat:3> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:y> = <nat:3> * <var:s> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:y> = <nat:3> * <var:s> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:y> = <nat:3> * <var:s> ^ <nat:4> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:y> = <nat:3> * <var:s> ^ <nat:5> + <nat:3> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:y> = <nat:3> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:y> = <nat:3> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 