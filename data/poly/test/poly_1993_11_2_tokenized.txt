\begin{document} \begin{theorem} Let the following code as follows \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <nat:2> + <var:I> * <var:s> ; <var:I> := <nat:1> + <var:I> * <var:s> ; <var:I> := <nat:1> + <var:I> * <var:s> ; <var:I> := <nat:4> + <var:I> * <var:s> ; <var:I> := <nat:2> + <var:I> * <var:s> ; <var:I> := <var:I> * <var:s> ; <var:I> := <var:I> * <var:s> ; <var:I> := <nat:1> + <var:I> * <var:s> ; <var:I> := <nat:1> + <var:I> * <var:s> ; <var:I> := <nat:2> + <var:I> * <var:s> \end{verbatim} Assuming ( given some positive numbers $ <var:e> $ ) it to hold that $ <var:s> = <var:e> $ prior to executing our list of commands , it holds that we have $ <var:I> = <nat:2> \cdot <var:e> ^ <nat:10> + <nat:2> \cdot <var:e> ^ <nat:9> + <nat:1> \cdot <var:e> ^ <nat:8> + <nat:1> \cdot <var:e> ^ <nat:7> + <nat:4> \cdot <var:e> ^ <nat:6> + <nat:2> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the set of commands is evident with Hoare logic . Going forward , we see \verb | { <var:s> = <var:e> } <var:I> := <nat:2> { <var:s> = <var:e> \land <var:I> = <nat:2> } | and \verb | { <var:s> = <var:e> \land <var:I> = <nat:2> } <var:I> := <nat:2> + <var:I> * <var:s> { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> + <nat:2> } | . Taking a look at the proceeding pieces of code in the list of commands , we see \verb | { <var:s> = <var:e> } <var:I> := <nat:2> { <var:s> = <var:e> \land <var:I> = <nat:2> } | , \verb | { <var:s> = <var:e> \land <var:I> = <nat:2> } <var:I> := <nat:2> + <var:I> * <var:s> { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> + <nat:2> } | , \verb | { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> + <nat:2> } <var:I> := <nat:1> + <var:I> * <var:s> { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:1> } | , \verb | { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:1> } <var:I> := <nat:1> + <var:I> * <var:s> { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> } | , \verb | { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> } <var:I> := <nat:4> + <var:I> * <var:s> { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:4> } | , \verb | { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:4> } <var:I> := <nat:2> + <var:I> * <var:s> { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:5> + <nat:2> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:2> } | and \verb | { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:5> + <nat:2> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:2> } <var:I> := <var:I> * <var:s> { <var:s> = <var:e> \land <var:I> = <nat:2> \times <var:e> ^ <nat:6> + <nat:2> \times <var:e> ^ <nat:5> + <nat:1> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + } | . Moving forward , we have \verb | { <var:s> = <var:e> } <var:I> := <nat:2> { <var:s> = <var:e> \land <var:I> = <nat:2> } | . This is shown to be logically sound by the variable assignmet rule given by standard Hoare techniques . Looking at the following line in the set of commands , we see \verb | { <var:s> = <var:e> } <var:I> := <nat:2> { <var:s> = <var:e> \land <var:I> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:s> = <var:e> }} <var:I> := <nat:2> ; <var:I> := <nat:2> + <var:I> * <var:s> ; <var:I> := <nat:1> + <var:I> * <var:s> ; <var:I> := <nat:1> + <var:I> * <var:s> ; <var:I> := <nat:4> + <var:I> * <var:s> ; <var:I> := <nat:2> + <var:I> * <var:s> ; <var:I> := <var:I> * <var:s> ; <var:I> := <var:I> * <var:s> ; <var:I> := <nat:1> + <var:I> * <var:s> ; <var:I> := <nat:1> + <var:I> * <var:s> ; <var:I> := <nat:2> + <var:I> * <var:s> {{ <var:I> = <nat:2> * <var:e> ^ <nat:10> + <nat:2> * <var:e> ^ <nat:9> + <nat:1> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:8> + <nat:2> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:9> + <nat:2> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:10> + <nat:2> * <var:e> ^ <nat:9> + <nat:1> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 