\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:3> ; <var:B> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:h> = <var:g> $ ( given some natural numbers $ <var:g> $ ) ahead of the execution of the segment of code it holds that we have $ <var:B> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:g> \} \\ <var:f0> := <nat:3> ; \\ \{ <var:h> = <var:g> \land <var:f0> = <nat:3> \} \\ <var:B> := <var:f0> \\ \{ <var:h> = <var:g> \land <var:B> = <nat:3> \} \end{eqnarray} Applying typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:3> ; <var:B> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <def:poly> {{ <var:B> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:B> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 