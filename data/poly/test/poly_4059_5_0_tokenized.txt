\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:4> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:U> ; <var:v> := <var:m1> ; <var:v> := <var:v> + <var:m0> \end{verbatim} Given $ <var:U> = <var:x> $ ( with some whole numbers $ <var:x> $ ) ahead of interpreting this segment of code , then $ <var:v> = <nat:1> \cdot <var:x> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this code is done through this decorated code . \begin{eqnarray} \{ <var:U> = <var:x> \} \\ <var:m0> := <nat:4> ; \\ \{ <var:U> = <var:x> \land <var:m0> = <nat:4> \} \\ <var:m1> := <nat:1> ; \\ \{ <var:U> = <var:x> \land <var:m0> = <nat:4> \land <var:m1> = <nat:1> \} \\ <var:m1> := <var:m1> * <var:U> ; \\ \{ <var:U> = <var:x> \land <var:m0> = <nat:4> \land <var:m1> = <nat:1> * <var:x> \} \\ <var:v> := <var:m1> ; \\ \{ <var:U> = <var:x> \land <var:m0> = <nat:4> \land <var:v> = <nat:1> * <var:x> \} \\ <var:v> := <var:v> + <var:m0> \\ \{ <var:U> = <var:x> \land <var:v> = <nat:1> * <var:x> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:U> = <var:x> }} <var:m0> := <nat:4> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:U> ; <var:v> := <var:m1> ; <var:v> := <var:v> + <var:m0> {{ <var:v> = <nat:1> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:m0> = <nat:4> /\ <var:v> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:v> = <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 