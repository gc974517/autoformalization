\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} : \begin{verbatim} <var:H1> := <var:q> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:8> ; <var:G> := <var:H1> <var:G> := <var:G> + <var:H0> \end{verbatim} Allowing that $ <var:q> = <var:Q> $ prior to evaluating our series of commands then we have $ <var:G> = <nat:8> \times <var:Q> + <nat:7> $ . \end{theorem} \begin{proof} The proof of this code can be accomplished using usual Hoare reasoning . Moving forward to the next step , we see the variable update statement \verb | <var:H1> := <var:q> ; | . This advances $ \{ <var:q> = <var:Q> \} $ to $ \{ <var:q> = <var:Q> \land <var:H1> = <var:Q> \} $ . Stepping forward , we have the assignment statement defining $ <nat:7> $ as $ <var:H0>$ . This redefines $ \{ <var:q> = <var:Q> \land <var:H1> = <var:Q> \} $ toward $ \{ <var:q> = <var:Q> \land <var:H1> = <var:Q> \land <var:H0> = <nat:7> \} $ . Going to the next step , the assignment line \verb | <var:H1> := <var:H1> * <nat:8> ; | . This advances the precondition $ \{ <var:q> = <var:Q> \land <var:H1> = <var:Q> \land <var:H0> = <nat:7> \} $ as the condition $ \{ <var:q> = <var:Q> \land <var:H1> = <nat:8> \cdot <var:Q> \land <var:H0> = <nat:7> \} $ . This is shown by the assignment inference rule given in usual Hoare reasoning . Jumping to the proceeding statement in the list of commands , we see the environment update line \verb | <var:G> := <var:H1> | . This line takes the precondition $ \{ <var:q> = <var:Q> \land <var:H1> = <nat:8> \cdot <var:Q> \land <var:H0> = <nat:7> \} $ as the postcondition $ \{ <var:q> = <var:Q> \land <var:H0> = <nat:7> \land <var:G> = <nat:8> \cdot <var:Q> \} $ . Honing in on the proceeding line contained in the series of instructions , we see the assignment statement \verb | <var:G> := <var:G> + <var:H0> | . This code advances the precondition $ \{ <var:q> = <var:Q> \land <var:H0> = <nat:7> \land <var:G> = <nat:8> \cdot <var:Q> \} $ into the postcondition $ \{ <var:q> = <var:Q> \land <var:G> = <nat:8> \cdot <var:Q> + <nat:7> \} $ . This is rigorously given through the assignment rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:q> = <var:Q> }} <var:H1> := <var:q> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:8> ; <var:G> := <var:H1> <var:G> := <var:G> + <var:H0> {{ <var:G> = <nat:8> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:H1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:H1> = <var:Q> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:H1> = <nat:8> * <var:Q> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:H0> = <nat:7> /\ <var:G> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:G> = <nat:8> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 