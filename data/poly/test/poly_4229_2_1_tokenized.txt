\begin{document} \begin{theorem} Take a set of commands as follows \begin{verbatim} <var:F0> := <nat:4> ; <var:K> := <var:F0> \end{verbatim} Allow that we have $ <var:I> = <var:c> $ prior to interpreting the code segment it holds that we have $ <var:K> = <nat:4> $ after code has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:c> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:I> = <var:c> \land <var:F0> = <nat:4> \} \\ <var:K> := <var:F0> \\ \{ <var:I> = <var:c> \land <var:K> = <nat:4> \} \end{eqnarray} Using standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:I> = <var:c> }} <var:F0> := <nat:4> ; <var:K> := <var:F0> {{ <var:K> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:c> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:c> /\ <var:K> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 