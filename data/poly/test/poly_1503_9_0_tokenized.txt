\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:7> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:E> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:E> ; <var:A2> := <var:A2> * <var:E> ; <var:j> := <var:A2> ; <var:j> := <var:j> + <var:A1> ; <var:j> := <var:j> + <var:A0> \end{verbatim} Assuming it to hold that $ <var:E> = <var:h> $ , given natural numbers $ <var:h> $ , ahead of running this series of instructions , it follows that $ <var:j> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:7> $ when series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:h> \} \\ <var:A0> := <nat:7> ; \\ \{ <var:E> = <var:h> \land <var:A0> = <nat:7> \} \end{eqnarray} Continuing the execution of our code gives us : \begin{eqnarray} <var:A1> := <nat:2> ; \\ \{ <var:E> = <var:h> \land <var:A0> = <nat:7> \land <var:A1> = <nat:2> \} \\ <var:A1> := <var:A1> * <var:E> ; \\ \{ <var:E> = <var:h> \land <var:A0> = <nat:7> \land <var:A1> = <nat:2> \cdot <var:h> \} \\ <var:A2> := <nat:2> ; \\ \{ <var:E> = <var:h> \land <var:A0> = <nat:7> \land <var:A1> = <nat:2> \cdot <var:h> \land <var:A2> = <nat:2> \} \\ <var:A2> := <var:A2> * <var:E> ; \\ \{ <var:E> = <var:h> \land <var:A0> = <nat:7> \land <var:A1> = <nat:2> \cdot <var:h> \land <var:A2> = <nat:2> \cdot <var:h> \} \\ <var:A2> := <var:A2> * <var:E> ; \\ \{ <var:E> = <var:h> \land <var:A0> = <nat:7> \land <var:A1> = <nat:2> \cdot <var:h> \land <var:A2> = <nat:2> \cdot <var:h> ^ <nat:2> \} \\ <var:j> := <var:A2> ; \\ \{ <var:E> = <var:h> \land <var:A0> = <nat:7> \land <var:A1> = <nat:2> \cdot <var:h> \land <var:j> = <nat:2> \cdot <var:h> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:A1> ; \\ \{ <var:E> = <var:h> \land <var:A0> = <nat:7> \land <var:j> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> \} \\ <var:j> := <var:j> + <var:A0> \\ \{ <var:E> = <var:h> \land <var:j> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:7> \} \end{eqnarray} Applying typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:E> = <var:h> }} <var:A0> := <nat:7> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:E> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:E> ; <var:A2> := <var:A2> * <var:E> ; <var:j> := <var:A2> ; <var:j> := <var:j> + <var:A1> ; <var:j> := <var:j> + <var:A0> {{ <var:j> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:2> * <var:h> /\ <var:A2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:2> * <var:h> /\ <var:A2> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:2> * <var:h> /\ <var:A2> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:2> * <var:h> /\ <var:j> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:A0> = <nat:7> /\ <var:j> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:j> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 