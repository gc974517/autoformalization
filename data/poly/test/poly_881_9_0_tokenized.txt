\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:1> ; <var:v1> := <nat:8> ; <var:v1> := <var:v1> * <var:O> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:O> ; <var:v2> := <var:v2> * <var:O> ; <var:K> := <var:v2> ; <var:K> := <var:K> + <var:v1> ; <var:K> := <var:K> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:O> = <var:Q> $ prior to evaluating this set of commands it follows that $ <var:K> = <nat:7> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the code can be given using Hoare reasoning . Moving on , we have the variable update line assigning $ <nat:1> $ into $ <var:v0>$ . This line moves the condition $ \{ <var:O> = <var:Q> \} $ to the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \} $ . Keeping momentum , we see the environment update statement binding $ <nat:8> $ to $ <var:v1>$ . This line redefines the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \} $ as the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \} $ . This is shown to be logically sound by the assignment law found in usual Hoare reasoning . Honing in on the next piece of code seen in the set of commands , the variable update line yielding $ <var:v1> * <var:O> $ toward $ <var:v1>$ . This line moves the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \} $ toward the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \} $ . Moving on to the next line seen in our code , the command binding $ <nat:7> $ as $ <var:v2>$ . This statement takes the precondition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \} $ as the postcondition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \land <var:v2> = <nat:7> \} $ . This is given by the assignment rule given in standard Hoare reasoning . After , the binding command \verb | <var:v2> := <var:v2> * <var:O> ; | . This forwards $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \land <var:v2> = <nat:7> \} $ into the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \land <var:v2> = <nat:7> \times <var:Q> \} $ . Focusing on the proceeding step contained in the list of instructions , we have the variable update line \verb | <var:v2> := <var:v2> * <var:O> ; | . This redefines $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \land <var:v2> = <nat:7> \times <var:Q> \} $ to the postcondition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \land <var:v2> = <nat:7> \times <var:Q> ^ <nat:2> \} $ . Looking at the upcoming line found in our list of instructions , the command \verb | <var:K> := <var:v2> ; | . This moves the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \land <var:v2> = <nat:7> \times <var:Q> ^ <nat:2> \} $ as the postcondition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \land <var:K> = <nat:7> \times <var:Q> ^ <nat:2> \} $ . Keeping momentum , the variable assignmet line assigning $ <var:K> + <var:v1> $ to $ <var:K>$ . This takes the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:8> \times <var:Q> \land <var:K> = <nat:7> \times <var:Q> ^ <nat:2> \} $ toward the condition $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:K> = <nat:7> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> \} $ . This is guaranteed by the assignment rule defined by standard Hoare reasoning . Following , we see the assignment code \verb | <var:K> := <var:K> + <var:v0> | . This advances $ \{ <var:O> = <var:Q> \land <var:v0> = <nat:1> \land <var:K> = <nat:7> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> \} $ toward $ \{ <var:O> = <var:Q> \land <var:K> = <nat:7> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> + <nat:1> \} $ . This is known to be sound with the assignment inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:1> ; <var:v1> := <nat:8> ; <var:v1> := <var:v1> * <var:O> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:O> ; <var:v2> := <var:v2> * <var:O> ; <var:K> := <var:v2> ; <var:K> := <var:K> + <var:v1> ; <var:K> := <var:K> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:O> = <var:Q> }} <def:poly> {{ <var:K> = <nat:7> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:8> * <var:Q> /\ <var:v2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:8> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:8> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:8> * <var:Q> /\ <var:K> = <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:K> = <nat:7> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:K> = <nat:7> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 