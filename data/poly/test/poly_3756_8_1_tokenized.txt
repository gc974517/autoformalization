\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:Q> ; <var:e2> := <var:e1> * <var:Q> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:5> ; <var:e2> := <var:e2> * <nat:3> ; <var:s> := <var:e2> <var:s> := <var:s> + <var:e1> <var:s> := <var:s> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Allow $ <var:Q> = <var:k> $ ahead of running the set of commands , it must be that we have $ <var:s> = <nat:3> \times <var:k> ^ <nat:2> + <nat:5> \times <var:k> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning yields : \begin{eqnarray} \{ <var:Q> = <var:k> \} \\ <var:e1> := <var:Q> ; \\ \{ <var:Q> = <var:k> \land <var:e1> = <var:k> \} \\ <var:e2> := <var:e1> * <var:Q> ; \\ \{ <var:Q> = <var:k> \land <var:e1> = <var:k> \land <var:e2> = <var:k> ^ <nat:2> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:Q> = <var:k> \land <var:e1> = <var:k> \land <var:e2> = <var:k> ^ <nat:2> \land <var:e0> = <nat:3> \} \\ <var:e1> := <var:e1> * <nat:5> ; \\ \{ <var:Q> = <var:k> \land <var:e1> = <nat:5> * <var:k> \land <var:e2> = <var:k> ^ <nat:2> \land <var:e0> = <nat:3> \} \\ <var:e2> := <var:e2> * <nat:3> ; \\ \{ <var:Q> = <var:k> \land <var:e1> = <nat:5> * <var:k> \land <var:e2> = <nat:3> * <var:k> ^ <nat:2> \land <var:e0> = <nat:3> \} \\ <var:s> := <var:e2> \\ \{ <var:Q> = <var:k> \land <var:e1> = <nat:5> * <var:k> \land <var:e0> = <nat:3> \land <var:s> = <nat:3> * <var:k> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:e1> \\ \{ <var:Q> = <var:k> \land <var:e0> = <nat:3> \land <var:s> = <nat:3> * <var:k> ^ <nat:2> + <nat:5> * <var:k> \} \\ <var:s> := <var:s> + <var:e0> \\ \{ <var:Q> = <var:k> \land <var:s> = <nat:3> * <var:k> ^ <nat:2> + <nat:5> * <var:k> + <nat:3> \} \end{eqnarray} As a consequence , the set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e1> := <var:Q> ; <var:e2> := <var:e1> * <var:Q> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:5> ; <var:e2> := <var:e2> * <nat:3> ; <var:s> := <var:e2> <var:s> := <var:s> + <var:e1> <var:s> := <var:s> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:Q> = <var:k> }} <def:poly> {{ <var:s> = <nat:3> * <var:k> ^ <nat:2> + <nat:5> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:e1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:e1> = <var:k> /\ <var:e2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:e1> = <var:k> /\ <var:e2> = <var:k> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:e1> = <nat:5> * <var:k> /\ <var:e2> = <var:k> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:e1> = <nat:5> * <var:k> /\ <var:e2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:e1> = <nat:5> * <var:k> /\ <var:e0> = <nat:3> /\ <var:s> = <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:e0> = <nat:3> /\ <var:s> = <nat:3> * <var:k> ^ <nat:2> + <nat:5> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:s> = <nat:3> * <var:k> ^ <nat:2> + <nat:5> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 