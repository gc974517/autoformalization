\begin{document} \begin{theorem} Take the following list of instructions as follows \begin{verbatim} <var:a1> := <var:N> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:7> ; <var:g> := <var:a1> <var:g> := <var:g> + <var:a0> \end{verbatim} Assuming $ <var:N> = <var:W> $ prior to executing the program , it must be that $ <var:g> = <nat:7> \times <var:W> + <nat:5> $ when list of commands terminates . \end{theorem} \begin{proof} Applying typical Hoare logic gives : \begin{eqnarray} \{ <var:N> = <var:W> \} \\ <var:a1> := <var:N> ; \\ \{ <var:N> = <var:W> \land <var:a1> = <var:W> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:N> = <var:W> \land <var:a1> = <var:W> \land <var:a0> = <nat:5> \} \\ <var:a1> := <var:a1> * <nat:7> ; \\ \{ <var:N> = <var:W> \land <var:a1> = <nat:7> \cdot <var:W> \land <var:a0> = <nat:5> \} \\ <var:g> := <var:a1> \\ \{ <var:N> = <var:W> \land <var:a0> = <nat:5> \land <var:g> = <nat:7> \cdot <var:W> \} \\ <var:g> := <var:g> + <var:a0> \\ \{ <var:N> = <var:W> \land <var:g> = <nat:7> \cdot <var:W> + <nat:5> \} \end{eqnarray} Thus , our series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:N> = <var:W> }} <var:a1> := <var:N> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:7> ; <var:g> := <var:a1> <var:g> := <var:g> + <var:a0> {{ <var:g> = <nat:7> * <var:W> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a1> = <var:W> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a1> = <nat:7> * <var:W> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:a0> = <nat:5> /\ <var:g> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:W> /\ <var:g> = <nat:7> * <var:W> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 