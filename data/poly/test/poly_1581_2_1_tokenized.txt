\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:5> ; <var:C> := <var:r0> \end{verbatim} Allowing for all $ <var:T> \in \mathbb{Z}^+ $ it to be that $ <var:J> = <var:T> $ before the evaluation of this code then we have $ <var:C> = <nat:5> $ once segment of code exits . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be accomplished through standard Hoare reasoning . Taking another step toward the proceeding step seen in our series of instructions , we have the statement defining $ <nat:5> $ as $ <var:r0>$ . This command moves the condition $ \{ <var:J> = <var:T> \} $ as the condition $ \{ <var:J> = <var:T> \land <var:r0> = <nat:5> \} $ . Further , we have the assignment line \verb | <var:C> := <var:r0> | . This statement advances the precondition $ \{ <var:J> = <var:T> \land <var:r0> = <nat:5> \} $ as the condition $ \{ <var:J> = <var:T> \land <var:C> = <nat:5> \} $ . This is sound by the assignment rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:J> = <var:T> }} <var:r0> := <nat:5> ; <var:C> := <var:r0> {{ <var:C> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:C> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 