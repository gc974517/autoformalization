\begin{document} \begin{theorem} Consider a set of commands such that \begin{verbatim} <var:G0> := <nat:2> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:d> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:d> ; <var:G2> := <var:G2> * <var:d> ; <var:P> := <var:G2> ; <var:P> := <var:P> + <var:G1> ; <var:P> := <var:P> + <var:G0> \end{verbatim} Assume it to hold that $ <var:d> = <var:t> $ prior to interpreting this program , then $ <var:P> = <nat:3> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions can be accomplished through typical Hoare reasoning . Considering the following command contained in the program , the variable update code defining $ <nat:2> $ to $ <var:G0>$ . This statement moves the precondition $ \{ <var:d> = <var:t> \} $ into the postcondition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \} $ . Taking another step toward the upcoming command contained in our list of commands , we have the variable binding command yielding $ <nat:4> $ into $ <var:G1>$ . This takes the precondition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \} $ toward the postcondition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \} $ . Taking a look at the following piece of code contained in the series of instructions , the binding code \verb | <var:G1> := <var:G1> * <var:d> ; | . This code redefines the condition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \} $ into the condition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \} $ . Moving forward , we have the environment update code \verb | <var:G2> := <nat:3> ; | . This redefines the condition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \} $ to the postcondition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \land <var:G2> = <nat:3> \} $ . This is guaranteed by the assignment scheme found in typical Hoare techniques . Moving forward to the next step , we have the binding statement giving $ <var:G2> * <var:d> $ toward $ <var:G2>$ . This command forwards $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \land <var:G2> = <nat:3> \} $ toward the condition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \land <var:G2> = <nat:3> \cdot <var:t> \} $ . Observing the following step contained in our list of commands , we see the environment update command yielding $ <var:G2> * <var:d> $ toward $ <var:G2>$ . This takes the condition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \land <var:G2> = <nat:3> \cdot <var:t> \} $ toward the condition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \land <var:G2> = <nat:3> \cdot <var:t> ^ <nat:2> \} $ . Stepping through , the statement binding $ <var:G2> $ toward $ <var:P>$ . This forwards $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \land <var:G2> = <nat:3> \cdot <var:t> ^ <nat:2> \} $ toward the condition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \land <var:P> = <nat:3> \cdot <var:t> ^ <nat:2> \} $ . This is ensured by the assignment law given by typical Hoare reasoning . Moving onward , the variable update code \verb | <var:P> := <var:P> + <var:G1> ; | . This line transfers the precondition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \cdot <var:t> \land <var:P> = <nat:3> \cdot <var:t> ^ <nat:2> \} $ toward $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:P> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> \} $ . Moving on to the next line contained in the code segment , we see the environment update code \verb | <var:P> := <var:P> + <var:G0> | . This advances the precondition $ \{ <var:d> = <var:t> \land <var:G0> = <nat:2> \land <var:P> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> \} $ as the postcondition $ \{ <var:d> = <var:t> \land <var:P> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:2> \} $ . This is shown to be logically sound with the assignment law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:d> = <var:t> }} <var:G0> := <nat:2> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:d> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:d> ; <var:G2> := <var:G2> * <var:d> ; <var:P> := <var:G2> ; <var:P> := <var:P> + <var:G1> ; <var:P> := <var:P> + <var:G0> {{ <var:P> = <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:4> * <var:t> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:4> * <var:t> /\ <var:G2> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:4> * <var:t> /\ <var:G2> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:4> * <var:t> /\ <var:P> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:G0> = <nat:2> /\ <var:P> = <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:P> = <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 