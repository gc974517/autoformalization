\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:2> ; <var:r> := <var:Z0> \end{verbatim} Assume it to be that $ <var:I> = <var:A> $ --- for all $ <var:A> \in \mathbb{Z}^+ $ --- ahead of the evaluation of the series of commands , then $ <var:r> = <nat:2> $ after set of instructions is done . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:I> = <var:A> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:I> = <var:A> \land <var:Z0> = <nat:2> \} \\ <var:r> := <var:Z0> \\ \{ <var:I> = <var:A> \land <var:r> = <nat:2> \} \end{eqnarray} Allowing executing the code gives us : \begin{eqnarray} \end{eqnarray} Given the preceding argument , our series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:I> = <var:A> }} <var:Z0> := <nat:2> ; <var:r> := <var:Z0> {{ <var:r> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:r> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 