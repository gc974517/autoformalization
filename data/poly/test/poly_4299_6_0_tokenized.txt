\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:3> ; <var:k2> := <nat:2> ; <var:k2> := <var:k2> * <var:O> ; <var:k2> := <var:k2> * <var:O> ; <var:W> := <var:k2> ; <var:W> := <var:W> + <var:k0> \end{verbatim} Allow , given some integers $ <var:V> $ , that $ <var:O> = <var:V> $ before running our code segment , it must be that we see $ <var:W> = <nat:2> \times <var:V> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is done using typical Hoare reasoning . Moving on to the following line contained in our list of instructions , we have the variable assignmet statement \verb | <var:k0> := <nat:3> ; | . This code redefines the precondition $ \{ <var:O> = <var:V> \} $ to $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \} $ . Paying attention to the upcoming line of code found in the list of commands , the environment update code letting $ <nat:2> $ as $ <var:k2>$ . This forwards the precondition $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \} $ to the condition $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \land <var:k2> = <nat:2> \} $ . This is ensured using the assignment law defined by standard Hoare reasoning . Following , we have the binding code defining $ <var:k2> * <var:O> $ toward $ <var:k2>$ . This redefines the precondition $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \land <var:k2> = <nat:2> \} $ toward the condition $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \land <var:k2> = <nat:2> \times <var:V> \} $ . Moving forward to the following command in our code , we see the statement binding $ <var:k2> * <var:O> $ into $ <var:k2>$ . This line transfers the precondition $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \land <var:k2> = <nat:2> \times <var:V> \} $ as the condition $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \land <var:k2> = <nat:2> \times <var:V> ^ <nat:2> \} $ . This is sound with the assignment rule of typical Hoare reasoning . Observing the subsequent piece of code in our series of commands , we see the variable update line assigning $ <var:k2> $ into $ <var:W>$ . This statement advances the precondition $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \land <var:k2> = <nat:2> \times <var:V> ^ <nat:2> \} $ to $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \land <var:W> = <nat:2> \times <var:V> ^ <nat:2> \} $ . Honing in on the upcoming command contained in the list of commands , we have the variable binding statement \verb | <var:W> := <var:W> + <var:k0> | . This statement forwards $ \{ <var:O> = <var:V> \land <var:k0> = <nat:3> \land <var:W> = <nat:2> \times <var:V> ^ <nat:2> \} $ to $ \{ <var:O> = <var:V> \land <var:W> = <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:O> = <var:V> }} <var:k0> := <nat:3> ; <var:k2> := <nat:2> ; <var:k2> := <var:k2> * <var:O> ; <var:k2> := <var:k2> * <var:O> ; <var:W> := <var:k2> ; <var:W> := <var:W> + <var:k0> {{ <var:W> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:k0> = <nat:3> /\ <var:k2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:k0> = <nat:3> /\ <var:k2> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:k0> = <nat:3> /\ <var:k2> = <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:k0> = <nat:3> /\ <var:W> = <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:W> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 