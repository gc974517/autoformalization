\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:I1> := <var:m> ; <var:I2> := <var:I1> * <var:m> ; <var:I3> := <var:I2> * <var:m> ; <var:I4> := <var:I3> * <var:m> ; <var:I5> := <var:I4> * <var:m> ; <var:I0> := <nat:4> ; <var:I2> := <var:I2> * <nat:4> ; <var:I4> := <var:I4> * <nat:1> ; <var:I5> := <var:I5> * <nat:1> ; <var:G> := <var:I5> <var:G> := <var:G> + <var:I4> <var:G> := <var:G> + <var:I2> <var:G> := <var:G> + <var:I0> \end{verbatim} Given that $ <var:m> = <var:i> $ ahead of running this set of commands , it must be that we see $ <var:G> = <nat:1> \cdot <var:i> ^ <nat:5> + <nat:1> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be given using usual Hoare reasoning . Advancing to the upcoming piece of code contained in our list of commands , we see the variable binding code \verb | <var:I1> := <var:m> ; | . This line moves the condition $ \{ <var:m> = <var:i> \} $ toward the condition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \} $ . This is ensured using the assignment inference rule obtained from Hoare techniques . Moving forward to the proceeding statement seen in our series of commands , we have the assignment code assigning $ <var:I1> * <var:m> $ into $ <var:I2>$ . This statement transfers the precondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \} $ as the postcondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \} $ . Next , we have the binding command binding $ <var:I2> * <var:m> $ toward $ <var:I3>$ . This redefines the precondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \} $ toward the postcondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \} $ . This is rigorously given with the assignment rule from Hoare techniques . Stepping through , the variable binding statement letting $ <var:I3> * <var:m> $ toward $ <var:I4>$ . This forwards the condition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \} $ to $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <var:i> ^ <nat:4> \} $ . After , the environment update statement defining $ <var:I4> * <var:m> $ toward $ <var:I5>$ . This redefines the precondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <var:i> ^ <nat:4> \} $ into the postcondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <var:i> ^ <nat:4> \land <var:I5> = <var:i> ^ <nat:5> \} $ . Advancing to the next step , we see the variable binding statement \verb | <var:I0> := <nat:4> ; | . This code transfers the condition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <var:i> ^ <nat:4> \land <var:I5> = <var:i> ^ <nat:5> \} $ into the condition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <var:i> ^ <nat:4> \land <var:I5> = <var:i> ^ <nat:5> \land <var:I0> = <nat:4> \} $ . Stepping through , we see the assignment command \verb | <var:I2> := <var:I2> * <nat:4> ; | . This transfers $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <var:i> ^ <nat:4> \land <var:I5> = <var:i> ^ <nat:5> \land <var:I0> = <nat:4> \} $ to $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <var:i> ^ <nat:4> \land <var:I5> = <var:i> ^ <nat:5> \land <var:I0> = <nat:4> \} $ . This is deduced through the assignment law in usual Hoare techniques . Immediately after , the command giving $ <var:I4> * <nat:1> $ into $ <var:I4>$ . This moves $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <var:i> ^ <nat:4> \land <var:I5> = <var:i> ^ <nat:5> \land <var:I0> = <nat:4> \} $ to the postcondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <nat:1> \times <var:i> ^ <nat:4> \land <var:I5> = <var:i> ^ <nat:5> \land <var:I0> = <nat:4> \} $ . Moving on to the following command in our program , we see the variable binding line \verb | <var:I5> := <var:I5> * <nat:1> ; | . This moves the precondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <nat:1> \times <var:i> ^ <nat:4> \land <var:I5> = <var:i> ^ <nat:5> \land <var:I0> = <nat:4> \} $ toward the postcondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <nat:1> \times <var:i> ^ <nat:4> \land <var:I5> = <nat:1> \times <var:i> ^ <nat:5> \land <var:I0> = <nat:4> \} $ . This is shown with the assignment scheme given by Hoare techniques . Advancing , we have the variable assignmet command letting $ <var:I5$ toward $ <var:G>$ . This advances the precondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <nat:1> \times <var:i> ^ <nat:4> \land <var:I5> = <nat:1> \times <var:i> ^ <nat:5> \land <var:I0> = <nat:4> \} $ as the postcondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <nat:1> \times <var:i> ^ <nat:4> \land <var:I0> = <nat:4> \land <var:G> = <nat:1> \times <var:i> ^ <nat:5> \} $ . This is rigorously given with the assignment scheme defined in typical Hoare logic . Advancing to the following command found in our segment of code , the environment update statement letting $ <var:G> + <var:I4$ as $ <var:G>$ . This redefines the precondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I4> = <nat:1> \times <var:i> ^ <nat:4> \land <var:I0> = <nat:4> \land <var:G> = <nat:1> \times <var:i> ^ <nat:5> \} $ toward the condition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I0> = <nat:4> \land <var:G> = <nat:1> \times <var:i> ^ <nat:5> + <nat:1> \times <var:i> ^ <nat:4> \} $ . This is sound using the assignment inference rule of standard Hoare reasoning . Jumping to the next statement found in our list of instructions , the binding command assigning $ <var:G> + <var:I2$ to $ <var:G>$ . This line moves $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:I3> = <var:i> ^ <nat:3> \land <var:I0> = <nat:4> \land <var:G> = <nat:1> \times <var:i> ^ <nat:5> + <nat:1> \times <var:i> ^ <nat:4> \} $ as the postcondition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I0> = <nat:4> \land <var:G> = <nat:1> \times <var:i> ^ <nat:5> + <nat:1> \times <var:i> ^ <nat:4> + <nat:4> \times <var:i> ^ <nat:2> \} $ . This is sound by the assignment inference rule from Hoare reasoning . Advancing to the subsequent bit of code contained in the set of commands , we see the assignment command \verb | <var:G> := <var:G> + <var:I0> | . This command advances the condition $ \{ <var:m> = <var:i> \land <var:I1> = <var:i> \land <var:I0> = <nat:4> \land <var:G> = <nat:1> \times <var:i> ^ <nat:5> + <nat:1> \times <var:i> ^ <nat:4> + <nat:4> \times <var:i> ^ <nat:2> \} $ into the postcondition $ \{ <var:m> = <var:i> \land <var:G> = <nat:1> \times <var:i> ^ <nat:5> + <nat:1> \times <var:i> ^ <nat:4> + <nat:4> \times <var:i> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <var:I4> : string := " <var:I4> " . Definition <var:I5> : string := " <var:I5> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:m> = <var:i> }} <var:I1> := <var:m> ; <var:I2> := <var:I1> * <var:m> ; <var:I3> := <var:I2> * <var:m> ; <var:I4> := <var:I3> * <var:m> ; <var:I5> := <var:I4> * <var:m> ; <var:I0> := <nat:4> ; <var:I2> := <var:I2> * <nat:4> ; <var:I4> := <var:I4> * <nat:1> ; <var:I5> := <var:I5> * <nat:1> ; <var:G> := <var:I5> <var:G> := <var:G> + <var:I4> <var:G> := <var:G> + <var:I2> <var:G> := <var:G> + <var:I0> {{ <var:G> = <nat:1> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> /\ <var:I4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> /\ <var:I4> = <var:i> ^ <nat:4> /\ <var:I5> = <var:i> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> /\ <var:I4> = <var:i> ^ <nat:4> /\ <var:I5> = <var:i> ^ <nat:5> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> /\ <var:I4> = <var:i> ^ <nat:4> /\ <var:I5> = <var:i> ^ <nat:5> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> /\ <var:I4> = <nat:1> * <var:i> ^ <nat:4> /\ <var:I5> = <var:i> ^ <nat:5> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> /\ <var:I4> = <nat:1> * <var:i> ^ <nat:4> /\ <var:I5> = <nat:1> * <var:i> ^ <nat:5> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> /\ <var:I4> = <nat:1> * <var:i> ^ <nat:4> /\ <var:I0> = <nat:4> /\ <var:G> = <nat:1> * <var:i> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:I3> = <var:i> ^ <nat:3> /\ <var:I0> = <nat:4> /\ <var:G> = <nat:1> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:I1> = <var:i> /\ <var:I0> = <nat:4> /\ <var:G> = <nat:1> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:G> = <nat:1> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 