\begin{document} \begin{theorem} Consider a series of instructions as follows \begin{verbatim} <var:y1> := <var:i> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:1> ; <var:s> := <var:y1> <var:s> := <var:s> + <var:y0> \end{verbatim} Given that $ <var:i> = <var:Q> $ ahead of evaluating our code segment it must be that we have $ <var:s> = <nat:1> \times <var:Q> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands can be given through Hoare logic . Moving on , we have the code \verb | <var:y1> := <var:i> ; | . This statement moves the precondition $ \{ <var:i> = <var:Q> \} $ to the postcondition $ \{ <var:i> = <var:Q> \land <var:y1> = <var:Q> \} $ . Moving forward to the following piece of code in the segment of code , we see the variable assignmet code defining $ <nat:1> $ to $ <var:y0>$ . This transfers $ \{ <var:i> = <var:Q> \land <var:y1> = <var:Q> \} $ as $ \{ <var:i> = <var:Q> \land <var:y1> = <var:Q> \land <var:y0> = <nat:1> \} $ . Keeping momentum , we have the binding line \verb | <var:y1> := <var:y1> * <nat:1> ; | . This moves $ \{ <var:i> = <var:Q> \land <var:y1> = <var:Q> \land <var:y0> = <nat:1> \} $ into $ \{ <var:i> = <var:Q> \land <var:y1> = <nat:1> * <var:Q> \land <var:y0> = <nat:1> \} $ . Moving forward to the upcoming command found in our set of commands , we have the assignment code defining $ <var:y1$ as $ <var:s>$ . This code moves the condition $ \{ <var:i> = <var:Q> \land <var:y1> = <nat:1> * <var:Q> \land <var:y0> = <nat:1> \} $ toward the condition $ \{ <var:i> = <var:Q> \land <var:y0> = <nat:1> \land <var:s> = <nat:1> * <var:Q> \} $ . Moving forward to the subsequent line contained in the list of instructions , we see the assignment line \verb | <var:s> := <var:s> + <var:y0> | . This moves the condition $ \{ <var:i> = <var:Q> \land <var:y0> = <nat:1> \land <var:s> = <nat:1> * <var:Q> \} $ into the condition $ \{ <var:i> = <var:Q> \land <var:s> = <nat:1> * <var:Q> + <nat:1> \} $ . This is guaranteed using the assignment inference rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:i> = <var:Q> }} <var:y1> := <var:i> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:1> ; <var:s> := <var:y1> <var:s> := <var:s> + <var:y0> {{ <var:s> = <nat:1> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:y1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:y1> = <var:Q> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:y1> = <nat:1> * <var:Q> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:y0> = <nat:1> /\ <var:s> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:s> = <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 