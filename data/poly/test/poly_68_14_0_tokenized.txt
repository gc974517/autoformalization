\begin{document} \begin{theorem} Define the following list of commands as follows \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:U> ; <var:Y2> := <nat:1> ; <var:Y2> := <var:Y2> * <var:U> ; <var:Y2> := <var:Y2> * <var:U> ; <var:Y3> := <nat:3> ; <var:Y3> := <var:Y3> * <var:U> ; <var:Y3> := <var:Y3> * <var:U> ; <var:Y3> := <var:Y3> * <var:U> ; <var:r> := <var:Y3> ; <var:r> := <var:r> + <var:Y2> ; <var:r> := <var:r> + <var:Y1> ; <var:r> := <var:r> + <var:Y0> \end{verbatim} Given that $ <var:U> = <var:D> $ before evaluating this list of instructions , it follows that we see $ <var:r> = <nat:3> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:5> \times <var:D> + <nat:2> $ after set of instructions exits . \end{theorem} \begin{proof} The flow of logic for our list of commands is done using usual Hoare techniques . Looking at the following statement found in the segment of code , we see the variable assignmet line \verb | <var:Y0> := <nat:2> ; | . This line advances the precondition $ \{ <var:U> = <var:D> \} $ toward the postcondition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule of usual Hoare reasoning . Advancing to the proceeding command in our list of commands , we have the binding command defining $ <nat:5> $ into $ <var:Y1>$ . This code forwards $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> \} $ . Advancing on , we see the variable binding command defining $ <var:Y1> * <var:U> $ into $ <var:Y1>$ . This statement forwards the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> \} $ toward the postcondition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \} $ . This is ensured using the assignment rule defined by Hoare reasoning . Paying attention to the subsequent statement in the code segment , we have the variable assignmet statement giving $ <nat:1> $ as $ <var:Y2>$ . This moves $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \} $ toward $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> \} $ . This is deduced using the assignment rule found in standard Hoare techniques . Going to the next step , the assignment line \verb | <var:Y2> := <var:Y2> * <var:U> ; | . This statement transfers the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> \} $ to the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> \} $ . This is shown to be logically sound through the assignment inference rule given in usual Hoare reasoning . Paying attention to the subsequent bit of code seen in our set of commands , we have the command \verb | <var:Y2> := <var:Y2> * <var:U> ; | . This command advances the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> \} $ toward $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \} $ . This is ensured by the assignment law given in Hoare techniques . Further , we see the environment update command yielding $ <nat:3> $ as $ <var:Y3>$ . This command advances $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \} $ as the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:Y3> = <nat:3> \} $ . Going to the next step , the variable binding line defining $ <var:Y3> * <var:U> $ into $ <var:Y3>$ . This command moves the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:Y3> = <nat:3> \} $ toward the postcondition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:Y3> = <nat:3> * <var:D> \} $ . This is sound through the assignment rule found in Hoare logic . Moving on to the proceeding piece of code seen in our code , we see the binding command \verb | <var:Y3> := <var:Y3> * <var:U> ; | . This transfers $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:Y3> = <nat:3> * <var:D> \} $ toward the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:Y3> = <nat:3> * <var:D> ^ <nat:2> \} $ . Focusing on the upcoming line seen in our set of commands , the command yielding $ <var:Y3> * <var:U> $ toward $ <var:Y3>$ . This statement moves the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:Y3> = <nat:3> * <var:D> ^ <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:Y3> = <nat:3> * <var:D> ^ <nat:3> \} $ . This is deduced through the assignment law given by typical Hoare reasoning . Moving forward to the subsequent step seen in the set of commands , the assignment code \verb | <var:r> := <var:Y3> ; | . This command transfers the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:Y3> = <nat:3> * <var:D> ^ <nat:3> \} $ toward the condition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:r> = <nat:3> * <var:D> ^ <nat:3> \} $ . This is deduced using the assignment inference rule found in usual Hoare logic . Observing the following statement in the code , the assignment statement \verb | <var:r> := <var:r> + <var:Y2> ; | . This code forwards the precondition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:Y2> = <nat:1> * <var:D> ^ <nat:2> \land <var:r> = <nat:3> * <var:D> ^ <nat:3> \} $ into $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> \} $ . Taking another step toward the following line of code found in the set of commands , we have the command \verb | <var:r> := <var:r> + <var:Y1> ; | . This code moves the precondition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> * <var:D> \land <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> \} $ to $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:5> * <var:D> \} $ . This is shown using the assignment inference rule found in typical Hoare logic . Moving on to the upcoming piece of code seen in our series of instructions , we have the binding code defining $ <var:r> + <var:Y0$ as $ <var:r>$ . This takes the precondition $ \{ <var:U> = <var:D> \land <var:Y0> = <nat:2> \land <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:5> * <var:D> \} $ to $ \{ <var:U> = <var:D> \land <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:U> = <var:D> }} <var:Y0> := <nat:2> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:U> ; <var:Y2> := <nat:1> ; <var:Y2> := <var:Y2> * <var:U> ; <var:Y2> := <var:Y2> * <var:U> ; <var:Y3> := <nat:3> ; <var:Y3> := <var:Y3> * <var:U> ; <var:Y3> := <var:Y3> * <var:U> ; <var:Y3> := <var:Y3> * <var:U> ; <var:r> := <var:Y3> ; <var:r> := <var:r> + <var:Y2> ; <var:r> := <var:r> + <var:Y1> ; <var:r> := <var:r> + <var:Y0> {{ <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:Y2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:Y2> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:Y2> = <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:Y2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:Y3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:Y2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:Y3> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:Y2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:Y3> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:Y2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:Y3> = <nat:3> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:Y2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:r> = <nat:3> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:D> /\ <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:Y0> = <nat:2> /\ <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:r> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 