\begin{document} \begin{theorem} Take the following program : \begin{verbatim} <var:X0> := <nat:4> ; <var:T> := <var:X0> \end{verbatim} Allow that $ <var:c> = <var:p> $ before the evaluation of this list of instructions it holds that $ <var:T> = <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:c> = <var:p> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:c> = <var:p> \land <var:X0> = <nat:4> \} \\ <var:T> := <var:X0> \\ \{ <var:c> = <var:p> \land <var:T> = <nat:4> \} \end{eqnarray} Given the above , this series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:c> = <var:p> }} <var:X0> := <nat:4> ; <var:T> := <var:X0> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:p> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:p> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 