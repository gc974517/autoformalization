\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <var:d> * <var:F> ; <var:d> := <nat:2> + <var:d> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:F> = <var:A> $ ahead of interpreting our list of instructions , it must be that we have $ <var:d> = <nat:4> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:2> $ once segment of code is done executing . \end{theorem} \begin{proof} The course of logic for the segment of code can be given with the below decorated list of commands . \begin{eqnarray} \{ <var:F> = <var:A> \} \\ <var:d> := <nat:4> ; \\ \{ <var:F> = <var:A> \land <var:d> = <nat:4> \} \\ <var:d> := <nat:2> + <var:d> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:d> = <nat:4> \times <var:A> + <nat:2> \} \\ <var:d> := <nat:4> + <var:d> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:d> = <nat:4> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:4> \} \\ <var:d> := <nat:4> + <var:d> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:d> = <nat:4> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:4> \} \\ <var:d> := <var:d> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:d> = <nat:4> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + \} \\ <var:d> := <nat:2> + <var:d> * <var:F> \\ \{ <var:F> = <var:A> \land <var:d> = <nat:4> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <var:d> * <var:F> ; <var:d> := <nat:2> + <var:d> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:F> = <var:A> }} <def:poly> {{ <var:d> = <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:d> = <nat:4> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:d> = <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:d> = <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:d> = <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:d> = <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 