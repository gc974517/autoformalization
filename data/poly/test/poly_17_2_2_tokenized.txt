\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assume $ <var:C> = <var:J> $ --- given any positive numbers $ <var:J> $ --- before evaluating the segment of code then we have $ <var:d> = <nat:4> \cdot <var:J> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the list of commands can be seen using this decorated segment of code . \begin{eqnarray} \{ <var:C> = <var:J> \} \\ <var:d> := <nat:4> ; \\ \{ <var:C> = <var:J> \land <var:d> = <nat:4> \} \\ <var:d> := <nat:2> + <var:d> * <var:C> \\ \{ <var:C> = <var:J> \land <var:d> = <nat:4> * <var:J> + <nat:2> \} \end{eqnarray} Applying typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:C> = <var:J> }} <def:poly> {{ <var:d> = <nat:4> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:d> = <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 