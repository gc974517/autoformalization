\begin{document} \begin{theorem} We define a segment of code as follows \begin{verbatim} <var:J0> := <nat:9> ; <var:l> := <var:J0> \end{verbatim} Assume that $ <var:b> = <var:f> $ prior to evaluating the program , then $ <var:l> = <nat:9> $ after code terminates . \end{theorem} \begin{proof} The method of proof for this set of commands is clear using this decorated code . \begin{eqnarray} \{ <var:b> = <var:f> \} \\ <var:J0> := <nat:9> ; \\ \{ <var:b> = <var:f> \land <var:J0> = <nat:9> \} \end{eqnarray} Advancing executing our list of commands results in : \begin{eqnarray} <var:l> := <var:J0> \\ \{ <var:b> = <var:f> \land <var:l> = <nat:9> \} \end{eqnarray} The application of standard Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <var:J0> := <nat:9> ; <var:l> := <var:J0> {{ <var:l> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:l> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 