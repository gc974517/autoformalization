\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <nat:4> + <var:j> * <var:l> ; <var:j> := <nat:2> + <var:j> * <var:l> ; <var:j> := <var:j> * <var:l> ; <var:j> := <var:j> * <var:l> ; <var:j> := <nat:1> + <var:j> * <var:l> ; <var:j> := <nat:2> + <var:j> * <var:l> ; <var:j> := <nat:2> + <var:j> * <var:l> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Allowing that $ <var:l> = <var:f> $ before evaluating this series of commands it holds that we have $ <var:j> = <nat:2> \times <var:f> ^ <nat:7> + <nat:4> \times <var:f> ^ <nat:6> + <nat:2> \times <var:f> ^ <nat:5> + <nat:1> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:2> $ when program has finished . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be demonstrated using Hoare reasoning . Advancing to the next step , the binding code \verb | <var:j> := <nat:2> ; | . This line takes the condition $ \{ <var:l> = <var:f> \} $ to $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \} $ . Taking a look at the next step found in our code , we have the binding statement giving $ <nat:4> + <var:j> * <var:l> $ toward $ <var:j>$ . This statement moves $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \} $ as the condition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> + <nat:4> \} $ . Moving on to the following bit of code in the list of commands , we have the environment update line \verb | <var:j> := <nat:2> + <var:j> * <var:l> ; | . This command redefines the condition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> + <nat:4> \} $ to the postcondition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} $ . Honing in on the following bit of code in the set of commands , we see the variable binding code \verb | <var:j> := <var:j> * <var:l> ; | . This redefines $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} $ toward the condition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + \} $ . Moving forward to the next step , we have the assignment line \verb | <var:j> := <var:j> * <var:l> ; | . This redefines the precondition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + \} $ into $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + \} $ . This is shown to be logically sound using the assignment scheme given in usual Hoare techniques . Taking another step toward the subsequent piece of code seen in the segment of code , we see the variable assignmet line \verb | <var:j> := <nat:1> + <var:j> * <var:l> ; | . This takes $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + \} $ to the postcondition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> ^ <nat:3> + <nat:1> \} $ . This is ensured with the assignment law in usual Hoare techniques . Stepping through , the variable update command letting $ <nat:2> + <var:j> * <var:l> $ into $ <var:j>$ . This code redefines the precondition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> ^ <nat:3> + <nat:1> \} $ into the postcondition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:5> + <nat:2> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> + <nat:2> \} $ . Stepping forward , the binding line binding $ <nat:2> + <var:j> * <var:l$ to $ <var:j>$ . This code advances $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:5> + <nat:2> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> + <nat:2> \} $ into the postcondition $ \{ <var:l> = <var:f> \land <var:j> = <nat:2> \times <var:f> ^ <nat:7> + <nat:4> \times <var:f> ^ <nat:6> + <nat:2> \times <var:f> ^ <nat:5> + <nat:1> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:2> \} $ . This is deduced by the assignment inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:2> ; <var:j> := <nat:4> + <var:j> * <var:l> ; <var:j> := <nat:2> + <var:j> * <var:l> ; <var:j> := <var:j> * <var:l> ; <var:j> := <var:j> * <var:l> ; <var:j> := <nat:1> + <var:j> * <var:l> ; <var:j> := <nat:2> + <var:j> * <var:l> ; <var:j> := <nat:2> + <var:j> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:l> = <var:f> }} <def:poly> {{ <var:j> = <nat:2> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:j> = <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:j> = <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:j> = <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:j> = <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:j> = <nat:2> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:j> = <nat:2> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:1> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:f> /\ <var:j> = <nat:2> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 