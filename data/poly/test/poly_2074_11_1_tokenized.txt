\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:N1> := <var:H> ; <var:N2> := <var:N1> * <var:H> ; <var:N3> := <var:N2> * <var:H> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:1> ; <var:c> := <var:N3> <var:c> := <var:c> + <var:N2> <var:c> := <var:c> + <var:N1> <var:c> := <var:c> + <var:N0> \end{verbatim} Allowing it to hold that $ <var:H> = <var:n> $ before the execution of our set of commands , it holds that $ <var:c> = <nat:1> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions is demonstrated through usual Hoare logic . Now , the variable update line binding $ <var:H> $ to $ <var:N1>$ . This command advances $ \{ <var:H> = <var:n> \} $ toward the condition $ \{ <var:H> = <var:n> \land <var:N1> = <var:n> \} $ . Considering the proceeding step seen in our set of instructions , the binding code giving $ <var:N1> * <var:H> $ into $ <var:N2>$ . This redefines $ \{ <var:H> = <var:n> \land <var:N1> = <var:n> \} $ as $ \{ <var:H> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule defined by Hoare reasoning . Moving forward , we see the variable update command \verb | <var:N3> := <var:N2> * <var:H> ; | . This line advances the condition $ \{ <var:H> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \} $ as the condition $ \{ <var:H> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \} $ . This is guaranteed through the assignment rule from standard Hoare techniques . Next , we see the assignment command \verb | <var:N0> := <nat:1> ; | . This forwards the precondition $ \{ <var:H> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \} $ as the condition $ \{ <var:H> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:1> \} $ . This is ensured using the assignment law given in standard Hoare logic . Moving on to the next step , the variable binding statement \verb | <var:N1> := <var:N1> * <nat:3> ; | . This statement redefines the condition $ \{ <var:H> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:1> \} $ into the postcondition $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:1> \} $ . This is sound using the assignment inference rule obtained from standard Hoare logic . Paying attention to the upcoming line of code seen in our program , we see the variable assignmet command yielding $ <var:N2> * <nat:2> $ into $ <var:N2>$ . This line redefines the condition $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:1> \} $ into $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N2> = <nat:2> * <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:1> \} $ . Taking another step toward the proceeding piece of code found in the set of instructions , we have the environment update statement binding $ <var:N3> * <nat:1> $ as $ <var:N3>$ . This code advances the condition $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N2> = <nat:2> * <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:1> \} $ into the condition $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N2> = <nat:2> * <var:n> ^ <nat:2> \land <var:N3> = <nat:1> * <var:n> ^ <nat:3> \land <var:N0> = <nat:1> \} $ . This is given by the assignment law defined in usual Hoare logic . Taking a look at the upcoming line in the code segment , the line \verb | <var:c> := <var:N3> | . This line takes the condition $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N2> = <nat:2> * <var:n> ^ <nat:2> \land <var:N3> = <nat:1> * <var:n> ^ <nat:3> \land <var:N0> = <nat:1> \} $ as the condition $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N2> = <nat:2> * <var:n> ^ <nat:2> \land <var:N0> = <nat:1> \land <var:c> = <nat:1> * <var:n> ^ <nat:3> \} $ . Stepping through , the line yielding $ <var:c> + <var:N2$ into $ <var:c>$ . This line takes the condition $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N2> = <nat:2> * <var:n> ^ <nat:2> \land <var:N0> = <nat:1> \land <var:c> = <nat:1> * <var:n> ^ <nat:3> \} $ into $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N0> = <nat:1> \land <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> \} $ . This is rigorously given with the assignment inference rule in typical Hoare techniques . Moving forward to the following line in our series of commands , we have the environment update command \verb | <var:c> := <var:c> + <var:N1> | . This line redefines the condition $ \{ <var:H> = <var:n> \land <var:N1> = <nat:3> * <var:n> \land <var:N0> = <nat:1> \land <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> \} $ into the postcondition $ \{ <var:H> = <var:n> \land <var:N0> = <nat:1> \land <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> \} $ . This is shown to be logically sound with the assignment inference rule found in usual Hoare reasoning . Paying attention to the proceeding statement seen in the series of commands , we have the environment update code letting $ <var:c> + <var:N0$ into $ <var:c>$ . This transfers the condition $ \{ <var:H> = <var:n> \land <var:N0> = <nat:1> \land <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> \} $ as the condition $ \{ <var:H> = <var:n> \land <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:H> = <var:n> }} <var:N1> := <var:H> ; <var:N2> := <var:N1> * <var:H> ; <var:N3> := <var:N2> * <var:H> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:1> ; <var:c> := <var:N3> <var:c> := <var:c> + <var:N2> <var:c> := <var:c> + <var:N1> <var:c> := <var:c> + <var:N0> {{ <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <var:n> /\ <var:N2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <var:n> /\ <var:N2> = <var:n> ^ <nat:2> /\ <var:N3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <var:n> /\ <var:N2> = <var:n> ^ <nat:2> /\ <var:N3> = <var:n> ^ <nat:3> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <nat:3> * <var:n> /\ <var:N2> = <var:n> ^ <nat:2> /\ <var:N3> = <var:n> ^ <nat:3> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <nat:3> * <var:n> /\ <var:N2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:N3> = <var:n> ^ <nat:3> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <nat:3> * <var:n> /\ <var:N2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:N3> = <nat:1> * <var:n> ^ <nat:3> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <nat:3> * <var:n> /\ <var:N2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:N0> = <nat:1> /\ <var:c> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N1> = <nat:3> * <var:n> /\ <var:N0> = <nat:1> /\ <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:N0> = <nat:1> /\ <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 