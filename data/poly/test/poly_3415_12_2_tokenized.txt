\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:o> := <nat:1> ; <var:o> := <nat:1> + <var:o> * <var:S> ; <var:o> := <var:o> * <var:S> ; <var:o> := <nat:3> + <var:o> * <var:S> ; <var:o> := <nat:1> + <var:o> * <var:S> ; <var:o> := <nat:4> + <var:o> * <var:S> ; <var:o> := <var:o> * <var:S> ; <var:o> := <nat:1> + <var:o> * <var:S> ; <var:o> := <var:o> * <var:S> ; <var:o> := <nat:2> + <var:o> * <var:S> ; <var:o> := <nat:3> + <var:o> * <var:S> ; <var:o> := <nat:4> + <var:o> * <var:S> \end{verbatim} Given that we have $ <var:S> = <var:I> $ before running this program , then we have $ <var:o> = <nat:1> \times <var:I> ^ <nat:11> + <nat:1> \times <var:I> ^ <nat:10> + <nat:3> \times <var:I> ^ <nat:8> + <nat:1> \times <var:I> ^ <nat:7> + <nat:4> \times <var:I> ^ <nat:6> + <nat:1> \times <var:I> ^ <nat:4> + <nat:2> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:4> $ after code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:I> \} \\ <var:o> := <nat:1> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \} \\ <var:o> := <nat:1> + <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> + <nat:1> \} \\ <var:o> := <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + \} \\ <var:o> := <nat:3> + <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:3> \} \\ <var:o> := <nat:1> + <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:4> + <nat:1> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> + <nat:1> \} \\ <var:o> := <nat:4> + <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:5> + <nat:1> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + <nat:4> \} \\ <var:o> := <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:6> + <nat:1> \times <var:I> ^ <nat:5> + <nat:3> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + \} \\ <var:o> := <nat:1> + <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:7> + <nat:1> \times <var:I> ^ <nat:6> + <nat:3> \times <var:I> ^ <nat:4> + <nat:1> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:1> \} \\ <var:o> := <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:8> + <nat:1> \times <var:I> ^ <nat:7> + <nat:3> \times <var:I> ^ <nat:5> + <nat:1> \times <var:I> ^ <nat:4> + <nat:4> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> + \} \\ <var:o> := <nat:2> + <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:9> + <nat:1> \times <var:I> ^ <nat:8> + <nat:3> \times <var:I> ^ <nat:6> + <nat:1> \times <var:I> ^ <nat:5> + <nat:4> \times <var:I> ^ <nat:4> + <nat:1> \times <var:I> ^ <nat:2> + <nat:2> \} \\ <var:o> := <nat:3> + <var:o> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:10> + <nat:1> \times <var:I> ^ <nat:9> + <nat:3> \times <var:I> ^ <nat:7> + <nat:1> \times <var:I> ^ <nat:6> + <nat:4> \times <var:I> ^ <nat:5> + <nat:1> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> + <nat:3> \} \\ <var:o> := <nat:4> + <var:o> * <var:S> \\ \{ <var:S> = <var:I> \land <var:o> = <nat:1> \times <var:I> ^ <nat:11> + <nat:1> \times <var:I> ^ <nat:10> + <nat:3> \times <var:I> ^ <nat:8> + <nat:1> \times <var:I> ^ <nat:7> + <nat:4> \times <var:I> ^ <nat:6> + <nat:1> \times <var:I> ^ <nat:4> + <nat:2> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:4> \} \end{eqnarray} Utilizing Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:S> = <var:I> }} <var:o> := <nat:1> ; <var:o> := <nat:1> + <var:o> * <var:S> ; <var:o> := <var:o> * <var:S> ; <var:o> := <nat:3> + <var:o> * <var:S> ; <var:o> := <nat:1> + <var:o> * <var:S> ; <var:o> := <nat:4> + <var:o> * <var:S> ; <var:o> := <var:o> * <var:S> ; <var:o> := <nat:1> + <var:o> * <var:S> ; <var:o> := <var:o> * <var:S> ; <var:o> := <nat:2> + <var:o> * <var:S> ; <var:o> := <nat:3> + <var:o> * <var:S> ; <var:o> := <nat:4> + <var:o> * <var:S> {{ <var:o> = <nat:1> * <var:I> ^ <nat:11> + <nat:1> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:o> = <nat:1> * <var:I> ^ <nat:11> + <nat:1> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 