\begin{document} \begin{theorem} Consider the following set of commands : \begin{verbatim} <var:n1> := <var:B> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:5> ; <var:k> := <var:n1> <var:k> := <var:k> + <var:n0> \end{verbatim} Allowing ( letting $ <var:m> \in \mathbb{N} $ ) $ <var:B> = <var:m> $ before interpreting this set of instructions , it follows that we see $ <var:k> = <nat:5> * <var:m> + <nat:1> $ when segment of code finishes . \end{theorem} \begin{proof} The flow of logic for our segment of code can be demonstrated through standard Hoare logic . Honing in on the upcoming bits of codecontained in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:m> \} & <var:n1> := <var:B> & \{ <var:B> = <var:m> \land <var:n1> = <var:m> \} \\ \{ <var:B> = <var:m> \land <var:n1> = <var:m> \} & <var:n0> := <nat:1> & \{ <var:B> = <var:m> \land <var:n1> = <var:m> \land <var:n0> = <nat:1> \} \\ \{ <var:B> = <var:m> \land <var:n1> = <var:m> \land <var:n0> = <nat:1> \} & <var:n1> := <var:n1> * <nat:5> & \{ <var:B> = <var:m> \land <var:n1> = <nat:5> * <var:m> \land <var:n0> = <nat:1> \} \\ \{ <var:B> = <var:m> \land <var:n1> = <nat:5> * <var:m> \land <var:n0> = <nat:1> \} & <var:k> := <var:n1& \{ <var:B> = <var:m> \land <var:n0> = <nat:1> \land <var:k> = <nat:5> * <var:m> \} \end{tabular} This is deduced using the assignment inference rule in typical Hoare techniques . Focusing on the subsequent bit of code seen in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:B> = <var:m> \} & <var:n1> := <var:B> & \{ <var:B> = <var:m> \land <var:n1> = <var:m> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:B> = <var:m> }} <var:n1> := <var:B> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:5> ; <var:k> := <var:n1> <var:k> := <var:k> + <var:n0> {{ <var:k> = <nat:5> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:n1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:n1> = <var:m> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:n1> = <nat:5> * <var:m> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:n0> = <nat:1> /\ <var:k> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:k> = <nat:5> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 