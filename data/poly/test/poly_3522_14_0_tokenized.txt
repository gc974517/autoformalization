\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:9> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:L> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:L> ; <var:w2> := <var:w2> * <var:L> ; <var:w3> := <nat:5> ; <var:w3> := <var:w3> * <var:L> ; <var:w3> := <var:w3> * <var:L> ; <var:w3> := <var:w3> * <var:L> ; <var:P> := <var:w3> ; <var:P> := <var:P> + <var:w2> ; <var:P> := <var:P> + <var:w1> ; <var:P> := <var:P> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:L> = <var:s> $ ( for all $ <var:s> \in \mathbb{N} $ ) ahead of executing this series of commands , then we see $ <var:P> = <nat:5> \cdot <var:s> ^ <nat:3> + <nat:7> \cdot <var:s> ^ <nat:2> + <nat:9> \cdot <var:s> + <nat:9> $ . \end{theorem} \begin{proof} The argument for our list of instructions is done through usual Hoare logic . Paying attention to the upcoming bits of codecontained in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:s> \} & <var:w0> := <nat:9> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \} & <var:w1> := <nat:9> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> \} & <var:w1> := <var:w1> * <var:L> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \} & <var:w2> := <nat:7> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> \} & <var:w2> := <var:w2> * <var:L> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> \} & <var:w2> := <var:w2> * <var:L> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \} & <var:w3> := <nat:5> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:w3> = <nat:5> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:w3> = <nat:5> \} & <var:w3> := <var:w3> * <var:L> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:w3> = <nat:5> * <var:s> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:w3> = <nat:5> * <var:s> \} & <var:w3> := <var:w3> * <var:L> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:w3> = <nat:5> * <var:s> ^ <nat:2> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:w3> = <nat:5> * <var:s> ^ <nat:2> \} & <var:w3> := <var:w3> * <var:L> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:w3> = <nat:5> * <var:s> ^ <nat:3> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:w3> = <nat:5> * <var:s> ^ <nat:3> \} & <var:P> := <var:w3> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:P> = <nat:5> * <var:s> ^ <nat:3> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:w2> = <nat:7> * <var:s> ^ <nat:2> \land <var:P> = <nat:5> * <var:s> ^ <nat:3> \} & <var:P> := <var:P> + <var:w2> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:w1> = <nat:9> * <var:s> \land <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> \} & <var:P> := <var:P> + <var:w1> & \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> \} \\ \{ <var:L> = <var:s> \land <var:w0> = <nat:9> \land <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> \} & <var:P> := <var:P> + <var:w0& \{ <var:L> = <var:s> \land <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:9> \} \end{tabular} This is given through the variable update scheme obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <def:poly> := <var:w0> := <nat:9> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:L> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:L> ; <var:w2> := <var:w2> * <var:L> ; <var:w3> := <nat:5> ; <var:w3> := <var:w3> * <var:L> ; <var:w3> := <var:w3> * <var:L> ; <var:w3> := <var:w3> * <var:L> ; <var:P> := <var:w3> ; <var:P> := <var:P> + <var:w2> ; <var:P> := <var:P> + <var:w1> ; <var:P> := <var:P> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <def:poly> {{ <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:w2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:w2> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:w2> = <nat:7> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:w2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:w3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:w2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:w3> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:w2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:w3> = <nat:5> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:w2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:w3> = <nat:5> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:w2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:P> = <nat:5> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:9> * <var:s> /\ <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:9> /\ <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:P> = <nat:5> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 