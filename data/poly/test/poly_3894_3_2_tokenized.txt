\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:1> + <var:C> * <var:P> ; <var:C> := <nat:2> + <var:C> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:P> = <var:i> $ before evaluating our series of commands , it follows that we see $ <var:C> = <nat:2> \times <var:i> ^ <nat:2> + <nat:1> \times <var:i> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning returns : \begin{eqnarray} \{ <var:P> = <var:i> \} \\ <var:C> := <nat:2> ; \\ \{ <var:P> = <var:i> \land <var:C> = <nat:2> \} \\ <var:C> := <nat:1> + <var:C> * <var:P> ; \\ \{ <var:P> = <var:i> \land <var:C> = <nat:2> * <var:i> + <nat:1> \} \end{eqnarray} Allowing the evaluation of this series of commands returns : \begin{eqnarray} <var:C> := <nat:2> + <var:C> * <var:P> \\ \{ <var:P> = <var:i> \land <var:C> = <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> \} \end{eqnarray} Considering the above , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:2> ; <var:C> := <nat:1> + <var:C> * <var:P> ; <var:C> := <nat:2> + <var:C> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:P> = <var:i> }} <def:poly> {{ <var:C> = <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:C> = <nat:2> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:C> = <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 