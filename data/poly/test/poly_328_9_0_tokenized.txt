\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:8> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:c> ; <var:Y2> := <nat:5> ; <var:Y2> := <var:Y2> * <var:c> ; <var:Y2> := <var:Y2> * <var:c> ; <var:M> := <var:Y2> ; <var:M> := <var:M> + <var:Y1> ; <var:M> := <var:M> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Assuming that $ <var:c> = <var:T> $ prior to interpreting this set of instructions , it holds that $ <var:M> = <nat:5> \times <var:T> ^ <nat:2> + <nat:2> \times <var:T> + <nat:8> $ once series of instructions has exited . \end{theorem} \begin{proof} The argument for our program can be accomplished through typical Hoare logic . Taking another step toward the proceeding steps found in the list of instructions , we have \verb | { <var:c> = <var:T> } <var:Y0> := <nat:8> { <var:c> = <var:T> \land <var:Y0> = <nat:8> } | , \verb | { <var:c> = <var:T> \land <var:Y0> = <nat:8> } <var:Y1> := <nat:2> { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> } | and \verb | { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> } <var:Y1> := <var:Y1> * <var:c> { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:T> } | . This is shown to be logically sound by the assignment inference rule defined in typical Hoare logic . Taking a look at the proceeding steps in the set of instructions , \verb | { <var:c> = <var:T> } <var:Y0> := <nat:8> { <var:c> = <var:T> \land <var:Y0> = <nat:8> } | , \verb | { <var:c> = <var:T> \land <var:Y0> = <nat:8> } <var:Y1> := <nat:2> { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> } | and \verb | { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> } <var:Y1> := <var:Y1> * <var:c> { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:T> } | . Advancing on , we see \verb | { <var:c> = <var:T> } <var:Y0> := <nat:8> { <var:c> = <var:T> \land <var:Y0> = <nat:8> } | , \verb | { <var:c> = <var:T> \land <var:Y0> = <nat:8> } <var:Y1> := <nat:2> { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> } | and \verb | { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> } <var:Y1> := <var:Y1> * <var:c> { <var:c> = <var:T> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:T> } | . This is guaranteed with the variable assignmet rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:8> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:c> ; <var:Y2> := <nat:5> ; <var:Y2> := <var:Y2> * <var:c> ; <var:Y2> := <var:Y2> * <var:c> ; <var:M> := <var:Y2> ; <var:M> := <var:M> + <var:Y1> ; <var:M> := <var:M> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:c> = <var:T> }} <def:poly> {{ <var:M> = <nat:5> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:T> /\ <var:Y2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:T> /\ <var:Y2> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:T> /\ <var:Y2> = <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:T> /\ <var:M> = <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:Y0> = <nat:8> /\ <var:M> = <nat:5> * <var:T> ^ <nat:2> + <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:M> = <nat:5> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 