\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x> := <nat:3> ; <var:x> := <nat:1> + <var:x> * <var:S> ; <var:x> := <nat:2> + <var:x> * <var:S> ; <var:x> := <nat:3> + <var:x> * <var:S> ; <var:x> := <nat:1> + <var:x> * <var:S> ; <var:x> := <nat:3> + <var:x> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:S> = <var:y> $ ( given some integers $ <var:y> $ ) prior to executing the list of commands then $ <var:x> = <nat:3> \times <var:y> ^ <nat:5> + <nat:1> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:3> $ . \end{theorem} \begin{proof} Observe that this decorated program . \begin{eqnarray} \{ <var:S> = <var:y> \} \\ <var:x> := <nat:3> ; \\ \{ <var:S> = <var:y> \land <var:x> = <nat:3> \} \\ <var:x> := <nat:1> + <var:x> * <var:S> ; \\ \{ <var:S> = <var:y> \land <var:x> = <nat:3> * <var:y> + <nat:1> \} \\ <var:x> := <nat:2> + <var:x> * <var:S> ; \\ \{ <var:S> = <var:y> \land <var:x> = <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> \} \\ <var:x> := <nat:3> + <var:x> * <var:S> ; \\ \{ <var:S> = <var:y> \land <var:x> = <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> \} \\ <var:x> := <nat:1> + <var:x> * <var:S> ; \\ \{ <var:S> = <var:y> \land <var:x> = <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> \} \\ <var:x> := <nat:3> + <var:x> * <var:S> \\ \{ <var:S> = <var:y> \land <var:x> = <nat:3> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:3> ; <var:x> := <nat:1> + <var:x> * <var:S> ; <var:x> := <nat:2> + <var:x> * <var:S> ; <var:x> := <nat:3> + <var:x> * <var:S> ; <var:x> := <nat:1> + <var:x> * <var:S> ; <var:x> := <nat:3> + <var:x> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:S> = <var:y> }} <def:poly> {{ <var:x> = <nat:3> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:x> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:x> = <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:x> = <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:x> = <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:x> = <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:x> = <nat:3> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 