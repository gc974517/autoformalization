\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:5> ; <var:C> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:D> = <var:b> $ ahead of running our set of instructions , it must be that we see $ <var:C> = <nat:5> $ . \end{theorem} \begin{proof} Using Hoare reasoning yields : \begin{eqnarray} \{ <var:D> = <var:b> \} \\ <var:A0> := <nat:5> ; \\ \{ <var:D> = <var:b> \land <var:A0> = <nat:5> \} \\ <var:C> := <var:A0> \\ \{ <var:D> = <var:b> \land <var:C> = <nat:5> \} \end{eqnarray} Thusly , the set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:5> ; <var:C> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <def:poly> {{ <var:C> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:C> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 