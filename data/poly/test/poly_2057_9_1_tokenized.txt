\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:y> ; <var:O2> := <var:O1> * <var:y> ; <var:O3> := <var:O2> * <var:y> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:7> ; <var:O3> := <var:O3> * <nat:6> ; <var:i> := <var:O3> <var:i> := <var:i> + <var:O1> <var:i> := <var:i> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Allowing $ <var:y> = <var:v> $ --- given all positive coefficients $ <var:v> $ --- before executing this list of instructions then we have $ <var:i> = <nat:6> * <var:v> ^ <nat:3> + <nat:7> * <var:v> + <nat:1> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques results in : \begin{eqnarray} \{ <var:y> = <var:v> \} \\ <var:O1> := <var:y> ; \\ \{ <var:y> = <var:v> \land <var:O1> = <var:v> \} \\ <var:O2> := <var:O1> * <var:y> ; \\ \{ <var:y> = <var:v> \land <var:O1> = <var:v> \land <var:O2> = <var:v> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:y> ; \\ \{ <var:y> = <var:v> \land <var:O1> = <var:v> \land <var:O2> = <var:v> ^ <nat:2> \land <var:O3> = <var:v> ^ <nat:3> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:y> = <var:v> \land <var:O1> = <var:v> \land <var:O2> = <var:v> ^ <nat:2> \land <var:O3> = <var:v> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O1> := <var:O1> * <nat:7> ; \\ \{ <var:y> = <var:v> \land <var:O1> = <nat:7> * <var:v> \land <var:O2> = <var:v> ^ <nat:2> \land <var:O3> = <var:v> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O3> := <var:O3> * <nat:6> ; \\ \{ <var:y> = <var:v> \land <var:O1> = <nat:7> * <var:v> \land <var:O2> = <var:v> ^ <nat:2> \land <var:O3> = <nat:6> * <var:v> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:i> := <var:O3> \\ \{ <var:y> = <var:v> \land <var:O1> = <nat:7> * <var:v> \land <var:O2> = <var:v> ^ <nat:2> \land <var:O0> = <nat:1> \land <var:i> = <nat:6> * <var:v> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:O1> \\ \{ <var:y> = <var:v> \land <var:O0> = <nat:1> \land <var:i> = <nat:6> * <var:v> ^ <nat:3> + <nat:7> * <var:v> \} \\ <var:i> := <var:i> + <var:O0> \\ \{ <var:y> = <var:v> \land <var:i> = <nat:6> * <var:v> ^ <nat:3> + <nat:7> * <var:v> + <nat:1> \} \end{eqnarray} As a consequence , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:y> ; <var:O2> := <var:O1> * <var:y> ; <var:O3> := <var:O2> * <var:y> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:7> ; <var:O3> := <var:O3> * <nat:6> ; <var:i> := <var:O3> <var:i> := <var:i> + <var:O1> <var:i> := <var:i> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:y> = <var:v> }} <def:poly> {{ <var:i> = <nat:6> * <var:v> ^ <nat:3> + <nat:7> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:O1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:O1> = <var:v> /\ <var:O2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:O1> = <var:v> /\ <var:O2> = <var:v> ^ <nat:2> /\ <var:O3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:O1> = <var:v> /\ <var:O2> = <var:v> ^ <nat:2> /\ <var:O3> = <var:v> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:O1> = <nat:7> * <var:v> /\ <var:O2> = <var:v> ^ <nat:2> /\ <var:O3> = <var:v> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:O1> = <nat:7> * <var:v> /\ <var:O2> = <var:v> ^ <nat:2> /\ <var:O3> = <nat:6> * <var:v> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:O1> = <nat:7> * <var:v> /\ <var:O2> = <var:v> ^ <nat:2> /\ <var:O0> = <nat:1> /\ <var:i> = <nat:6> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:O0> = <nat:1> /\ <var:i> = <nat:6> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:i> = <nat:6> * <var:v> ^ <nat:3> + <nat:7> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 