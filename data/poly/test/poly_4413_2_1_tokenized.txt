\begin{document} \begin{theorem} We define a series of commands as follows \begin{verbatim} <var:i0> := <nat:7> ; <var:G> := <var:i0> \end{verbatim} Assume it to be that $ <var:f> = <var:e> $ ahead of executing our series of instructions , then we see $ <var:G> = <nat:7> $ once set of instructions is done . \end{theorem} \begin{proof} Observe that this decorated list of instructions . \begin{eqnarray} \{ <var:f> = <var:e> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:f> = <var:e> \land <var:i0> = <nat:7> \} \\ <var:G> := <var:i0> \\ \{ <var:f> = <var:e> \land <var:G> = <nat:7> \} \end{eqnarray} Using typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:f> = <var:e> }} <var:i0> := <nat:7> ; <var:G> := <var:i0> {{ <var:G> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:G> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 