\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:4> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:Z> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:Z> ; <var:N2> := <var:N2> * <var:Z> ; <var:u> := <var:N2> ; <var:u> := <var:u> + <var:N1> ; <var:u> := <var:u> + <var:N0> \end{verbatim} Assuming it to be that $ <var:Z> = <var:z> $ ahead of the evaluation of the segment of code it must be that $ <var:u> = <nat:5> \times <var:z> ^ <nat:2> + <nat:7> \times <var:z> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this set of instructions is clear with usual Hoare techniques . Advancing to the next step , we see \begin{verbatim} { <var:Z> = <var:z> } <var:N0> := <nat:4> { <var:Z> = <var:z> \land <var:N0> = <nat:4> } { <var:Z> = <var:z> \land <var:N0> = <nat:4> } <var:N1> := <nat:7> { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> } { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> } <var:N1> := <var:N1> * <var:Z> { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> \cdot <var:z> } \end{verbatim} Moving onward , we have \begin{verbatim} { <var:Z> = <var:z> } <var:N0> := <nat:4> { <var:Z> = <var:z> \land <var:N0> = <nat:4> } { <var:Z> = <var:z> \land <var:N0> = <nat:4> } <var:N1> := <nat:7> { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> } { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> } <var:N1> := <var:N1> * <var:Z> { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> \cdot <var:z> } { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> \cdot <var:z> } <var:N2> := <nat:5> { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> \cdot <var:z> \land <var:N2> = <nat:5> } { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> \cdot <var:z> \land <var:N2> = <nat:5> } <var:N2> := <var:N2> * <var:Z> { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> \cdot <var:z> \land <var:N2> = <nat:5> \cdot <var:z> } { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> \cdot <var:z> \land <var:N2> = <nat:5> \cdot <var:z> } <var:N2> := <var:N2> * <var:Z> { <var:Z> = <var:z> \land <var:N0> = <nat:4> \land <var:N1> = <nat:7> \cdot <var:z> \land <var:N2> = <nat:5> \cdot <var:z> ^ <nat:2> } \end{verbatim} This is shown to be logically sound using the variable assignmet rule found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Z> = <var:z> }} <var:N0> := <nat:4> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:Z> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:Z> ; <var:N2> := <var:N2> * <var:Z> ; <var:u> := <var:N2> ; <var:u> := <var:u> + <var:N1> ; <var:u> := <var:u> + <var:N0> {{ <var:u> = <nat:5> * <var:z> ^ <nat:2> + <nat:7> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:7> * <var:z> /\ <var:N2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:7> * <var:z> /\ <var:N2> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:7> * <var:z> /\ <var:N2> = <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:7> * <var:z> /\ <var:u> = <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N0> = <nat:4> /\ <var:u> = <nat:5> * <var:z> ^ <nat:2> + <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:u> = <nat:5> * <var:z> ^ <nat:2> + <nat:7> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 