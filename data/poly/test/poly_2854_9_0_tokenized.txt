\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:9> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:Y> ; <var:N2> := <nat:9> ; <var:N2> := <var:N2> * <var:Y> ; <var:N2> := <var:N2> * <var:Y> ; <var:I> := <var:N2> ; <var:I> := <var:I> + <var:N1> ; <var:I> := <var:I> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- given positive numbers $ <var:J> $ --- that $ <var:Y> = <var:J> $ prior to running our code , then we have $ <var:I> = <nat:9> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:9> $ after code segment is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:J> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:Y> = <var:J> \land <var:N0> = <nat:9> \} \\ <var:N1> := <nat:1> ; \\ \{ <var:Y> = <var:J> \land <var:N0> = <nat:9> \land <var:N1> = <nat:1> \} \\ <var:N1> := <var:N1> * <var:Y> ; \\ \{ <var:Y> = <var:J> \land <var:N0> = <nat:9> \land <var:N1> = <nat:1> \cdot <var:J> \} \\ <var:N2> := <nat:9> ; \\ \{ <var:Y> = <var:J> \land <var:N0> = <nat:9> \land <var:N1> = <nat:1> \cdot <var:J> \land <var:N2> = <nat:9> \} \\ <var:N2> := <var:N2> * <var:Y> ; \\ \{ <var:Y> = <var:J> \land <var:N0> = <nat:9> \land <var:N1> = <nat:1> \cdot <var:J> \land <var:N2> = <nat:9> \cdot <var:J> \} \\ <var:N2> := <var:N2> * <var:Y> ; \\ \{ <var:Y> = <var:J> \land <var:N0> = <nat:9> \land <var:N1> = <nat:1> \cdot <var:J> \land <var:N2> = <nat:9> \cdot <var:J> ^ <nat:2> \} \\ <var:I> := <var:N2> ; \\ \{ <var:Y> = <var:J> \land <var:N0> = <nat:9> \land <var:N1> = <nat:1> \cdot <var:J> \land <var:I> = <nat:9> \cdot <var:J> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:N1> ; \\ \{ <var:Y> = <var:J> \land <var:N0> = <nat:9> \land <var:I> = <nat:9> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> \} \\ <var:I> := <var:I> + <var:N0> \\ \{ <var:Y> = <var:J> \land <var:I> = <nat:9> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:9> \} \end{eqnarray} The application of standard Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N0> := <nat:9> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:Y> ; <var:N2> := <nat:9> ; <var:N2> := <var:N2> * <var:Y> ; <var:N2> := <var:N2> * <var:Y> ; <var:I> := <var:N2> ; <var:I> := <var:I> + <var:N1> ; <var:I> := <var:I> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Y> = <var:J> }} <def:poly> {{ <var:I> = <nat:9> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:1> * <var:J> /\ <var:N2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:1> * <var:J> /\ <var:N2> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:1> * <var:J> /\ <var:N2> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:1> * <var:J> /\ <var:I> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:N0> = <nat:9> /\ <var:I> = <nat:9> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:I> = <nat:9> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 