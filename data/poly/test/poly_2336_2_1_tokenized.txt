\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:4> ; <var:B> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:U> = <var:g> $ given all $ <var:g> \in \mathbb{N} $ before running our set of commands , then $ <var:B> = <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:U> = <var:g> \} \\ <var:j0> := <nat:4> ; \\ \{ <var:U> = <var:g> \land <var:j0> = <nat:4> \} \\ <var:B> := <var:j0> \\ \{ <var:U> = <var:g> \land <var:B> = <nat:4> \} \end{eqnarray} Given the above , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:4> ; <var:B> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:U> = <var:g> }} <def:poly> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 