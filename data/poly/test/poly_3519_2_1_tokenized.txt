\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:5> ; <var:n> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assume ( for every whole numbers $ <var:a> $ ) that we have $ <var:Q> = <var:a> $ prior to interpreting the series of instructions , it holds that we see $ <var:n> = <nat:5> $ after series of commands has exited . \end{theorem} \begin{proof} The argument for our code segment is demonstrated by typical Hoare techniques . Further , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:a> \} & <var:D0> := <nat:5> & \{ <var:Q> = <var:a> \land <var:D0> = <nat:5> \} \\ \{ <var:Q> = <var:a> \land <var:D0> = <nat:5> \} & <var:n> := <var:D0& \{ <var:Q> = <var:a> \land <var:n> = <nat:5> \} \end{tabular} This is sound with the variable assignmet inference rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:5> ; <var:n> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Q> = <var:a> }} <def:poly> {{ <var:n> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:D0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:n> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 