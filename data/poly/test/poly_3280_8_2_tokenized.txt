\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:4> + <var:e> * <var:B> ; <var:e> := <var:e> * <var:B> ; <var:e> := <nat:4> + <var:e> * <var:B> ; <var:e> := <var:e> * <var:B> ; <var:e> := <nat:3> + <var:e> * <var:B> ; <var:e> := <nat:3> + <var:e> * <var:B> ; <var:e> := <nat:3> + <var:e> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allowing , given all positive coefficients $ <var:t> $ , it to be that $ <var:B> = <var:t> $ prior to running this list of instructions , it must be that we see $ <var:e> = <nat:3> \times <var:t> ^ <nat:7> + <nat:4> \times <var:t> ^ <nat:6> + <nat:4> \times <var:t> ^ <nat:4> + <nat:3> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:3> $ when code finishes . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is shown using standard Hoare reasoning . Now , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:t> \} & <var:e> := <nat:3> & \{ <var:B> = <var:t> \land <var:e> = <nat:3> \} \\ \{ <var:B> = <var:t> \land <var:e> = <nat:3> \} & <var:e> := <nat:4> + <var:e> * <var:B> & \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> + <nat:4> \} \\ \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> + <nat:4> \} & <var:e> := <var:e> * <var:B> & \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + \} \\ \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + \} & <var:e> := <nat:4> + <var:e> * <var:B> & \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> \} \\ \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> \} & <var:e> := <var:e> * <var:B> & \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> + \} \end{tabular} Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:B> = <var:t> \} & <var:e> := <nat:3> & \{ <var:B> = <var:t> \land <var:e> = <nat:3> \} \\ \{ <var:B> = <var:t> \land <var:e> = <nat:3> \} & <var:e> := <nat:4> + <var:e> * <var:B> & \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> + <nat:4> \} \\ \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> + <nat:4> \} & <var:e> := <var:e> * <var:B> & \{ <var:B> = <var:t> \land <var:e> = <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + \} \end{tabular} This is shown by the binding scheme found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <nat:4> + <var:e> * <var:B> ; <var:e> := <var:e> * <var:B> ; <var:e> := <nat:4> + <var:e> * <var:B> ; <var:e> := <var:e> * <var:B> ; <var:e> := <nat:3> + <var:e> * <var:B> ; <var:e> := <nat:3> + <var:e> * <var:B> ; <var:e> := <nat:3> + <var:e> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:B> = <var:t> }} <def:poly> {{ <var:e> = <nat:3> * <var:t> ^ <nat:7> + <nat:4> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:e> = <nat:3> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:e> = <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:e> = <nat:3> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:e> = <nat:3> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:e> = <nat:3> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:e> = <nat:3> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:t> /\ <var:e> = <nat:3> * <var:t> ^ <nat:7> + <nat:4> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 