\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:4> ; <var:B> := <var:Q0> \end{verbatim} Allow that we have $ <var:L> = <var:s> $ before running this segment of code , it holds that $ <var:B> = <nat:4> $ . \end{theorem} \begin{proof} Applying Hoare logic results in : \begin{eqnarray} \{ <var:L> = <var:s> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:L> = <var:s> \land <var:Q0> = <nat:4> \} \\ <var:B> := <var:Q0> \\ \{ <var:L> = <var:s> \land <var:B> = <nat:4> \} \end{eqnarray} Given the preceding argument , our set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <var:Q0> := <nat:4> ; <var:B> := <var:Q0> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 