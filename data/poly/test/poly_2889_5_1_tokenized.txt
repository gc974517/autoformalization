\begin{document} \begin{theorem} We define the following code : \begin{verbatim} <var:E1> := <var:T> ; <var:E0> := <nat:5> ; <var:E1> := <var:E1> * <nat:4> ; <var:U> := <var:E1> <var:U> := <var:U> + <var:E0> \end{verbatim} Allow that we have $ <var:T> = <var:r> $ before running this code it holds that we have $ <var:U> = <nat:4> \cdot <var:r> + <nat:5> $ when list of instructions finishes . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is done by the below decorated program . \begin{eqnarray} \{ <var:T> = <var:r> \} \\ <var:E1> := <var:T> ; \\ \{ <var:T> = <var:r> \land <var:E1> = <var:r> \} \\ <var:E0> := <nat:5> ; \\ \{ <var:T> = <var:r> \land <var:E1> = <var:r> \land <var:E0> = <nat:5> \} \\ <var:E1> := <var:E1> * <nat:4> ; \\ \{ <var:T> = <var:r> \land <var:E1> = <nat:4> \times <var:r> \land <var:E0> = <nat:5> \} \\ <var:U> := <var:E1> \\ \{ <var:T> = <var:r> \land <var:E0> = <nat:5> \land <var:U> = <nat:4> \times <var:r> \} \\ <var:U> := <var:U> + <var:E0> \\ \{ <var:T> = <var:r> \land <var:U> = <nat:4> \times <var:r> + <nat:5> \} \end{eqnarray} The application of Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:T> = <var:r> }} <var:E1> := <var:T> ; <var:E0> := <nat:5> ; <var:E1> := <var:E1> * <nat:4> ; <var:U> := <var:E1> <var:U> := <var:U> + <var:E0> {{ <var:U> = <nat:4> * <var:r> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:r> /\ <var:E1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:r> /\ <var:E1> = <var:r> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:r> /\ <var:E1> = <nat:4> * <var:r> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:r> /\ <var:E0> = <nat:5> /\ <var:U> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:r> /\ <var:U> = <nat:4> * <var:r> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 