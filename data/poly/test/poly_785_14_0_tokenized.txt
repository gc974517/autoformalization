\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:5> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:t> ; <var:K2> := <nat:2> ; <var:K2> := <var:K2> * <var:t> ; <var:K2> := <var:K2> * <var:t> ; <var:K3> := <nat:5> ; <var:K3> := <var:K3> * <var:t> ; <var:K3> := <var:K3> * <var:t> ; <var:K3> := <var:K3> * <var:t> ; <var:x> := <var:K3> ; <var:x> := <var:x> + <var:K2> ; <var:x> := <var:x> + <var:K1> ; <var:x> := <var:x> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Given $ <var:t> = <var:h> $ , given positive coefficients $ <var:h> $ , before the execution of our series of instructions it follows that we have $ <var:x> = <nat:5> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is evident through Hoare logic . Immediately after , \begin{eqnarray} \{ <var:t> = <var:h> \} \, <var:K0> := <nat:5> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \\ \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \, <var:K1> := <nat:9> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \} \\ \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \} \, <var:K1> := <var:K1> * <var:t> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \} \\ \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \} \, <var:K2> := <nat:2> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \land <var:K2> = <nat:2> \} \\ \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \land <var:K2> = <nat:2> \} \, <var:K2> := <var:K2> * <var:t> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \land <var:K2> = <nat:2> * <var:h> \} \\ \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \land <var:K2> = <nat:2> * <var:h> \} \, <var:K2> := <var:K2> * <var:t> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \land <var:K2> = <nat:2> * <var:h> ^ <nat:2> \} \\ \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \land <var:K2> = <nat:2> * <var:h> ^ <nat:2> \} \, <var:K3> := <nat:5> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> * <var:h> \land <var:K2> = <nat:2> * <var:h> ^ <nat:2> \land <var:K3> = <nat:5> \} \end{eqnarray} Moving on , we have \begin{eqnarray} \{ <var:t> = <var:h> \} \, <var:K0> := <nat:5> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \\ \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \, <var:K1> := <nat:9> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \} \end{eqnarray} Stepping through , we see \begin{eqnarray} \{ <var:t> = <var:h> \} \, <var:K0> := <nat:5> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \end{eqnarray} This is given with the binding rule given in typical Hoare reasoning . Now , we have \begin{eqnarray} \{ <var:t> = <var:h> \} \, <var:K0> := <nat:5> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \\ \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \, <var:K1> := <nat:9> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \} \end{eqnarray} This is rigorously given by the assignment scheme in typical Hoare reasoning . Advancing to the proceeding line of code in our list of commands , we have \begin{eqnarray} \{ <var:t> = <var:h> \} \, <var:K0> := <nat:5> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \end{eqnarray} This is shown to be logically sound by the rule from standard Hoare reasoning . Focusing on the subsequent step in our series of instructions , we have \begin{eqnarray} \{ <var:t> = <var:h> \} \, <var:K0> := <nat:5> \, \{ <var:t> = <var:h> \land <var:K0> = <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K0> := <nat:5> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:t> ; <var:K2> := <nat:2> ; <var:K2> := <var:K2> * <var:t> ; <var:K2> := <var:K2> * <var:t> ; <var:K3> := <nat:5> ; <var:K3> := <var:K3> * <var:t> ; <var:K3> := <var:K3> * <var:t> ; <var:K3> := <var:K3> * <var:t> ; <var:x> := <var:K3> ; <var:x> := <var:x> + <var:K2> ; <var:x> := <var:x> + <var:K1> ; <var:x> := <var:x> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:t> = <var:h> }} <def:poly> {{ <var:x> = <nat:5> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K2> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K2> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:K3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:K2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:x> = <nat:5> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:h> /\ <var:x> = <nat:5> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:K0> = <nat:5> /\ <var:x> = <nat:5> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:x> = <nat:5> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 