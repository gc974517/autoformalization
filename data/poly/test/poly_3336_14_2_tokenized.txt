\begin{document} \begin{theorem} We define the following list of commands such that \begin{verbatim} <var:y> := <nat:1> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:4> + <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:2> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <nat:2> + <var:y> * <var:d> ; <var:y> := <nat:4> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:1> + <var:y> * <var:d> \end{verbatim} Assuming it to be that $ <var:d> = <var:Z> $ before executing the code segment , then we have $ <var:y> = <nat:1> \times <var:Z> ^ <nat:13> + <nat:3> \times <var:Z> ^ <nat:12> + <nat:3> \times <var:Z> ^ <nat:11> + <nat:4> \times <var:Z> ^ <nat:10> + <nat:3> \times <var:Z> ^ <nat:8> + <nat:2> \times <var:Z> ^ <nat:7> + <nat:3> \times <var:Z> ^ <nat:6> + <nat:2> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:1> $ . \end{theorem} \begin{proof} We can see that this decorated program . \begin{eqnarray} \{ <var:d> = <var:Z> \} \\ <var:y> := <nat:1> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \} \\ <var:y> := <nat:3> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> + <nat:3> \} \\ <var:y> := <nat:3> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:3> \} \\ <var:y> := <nat:4> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:4> \} \\ <var:y> := <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + \} \\ <var:y> := <nat:3> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:3> \} \\ <var:y> := <nat:2> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:6> + <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> + <nat:2> \} \\ <var:y> := <nat:3> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:7> + <nat:3> \cdot <var:Z> ^ <nat:6> + <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:3> \} \\ <var:y> := <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:8> + <nat:3> \cdot <var:Z> ^ <nat:7> + <nat:3> \cdot <var:Z> ^ <nat:6> + <nat:4> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + \} \\ <var:y> := <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:9> + <nat:3> \cdot <var:Z> ^ <nat:8> + <nat:3> \cdot <var:Z> ^ <nat:7> + <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + \} \\ <var:y> := <nat:2> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:10> + <nat:3> \cdot <var:Z> ^ <nat:9> + <nat:3> \cdot <var:Z> ^ <nat:8> + <nat:4> \cdot <var:Z> ^ <nat:7> + <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:2> \} \\ <var:y> := <nat:4> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:11> + <nat:3> \cdot <var:Z> ^ <nat:10> + <nat:3> \cdot <var:Z> ^ <nat:9> + <nat:4> \cdot <var:Z> ^ <nat:8> + <nat:3> \cdot <var:Z> ^ <nat:6> + <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> + <nat:4> \} \\ <var:y> := <nat:3> + <var:y> * <var:d> ; \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:12> + <nat:3> \cdot <var:Z> ^ <nat:11> + <nat:3> \cdot <var:Z> ^ <nat:10> + <nat:4> \cdot <var:Z> ^ <nat:9> + <nat:3> \cdot <var:Z> ^ <nat:7> + <nat:2> \cdot <var:Z> ^ <nat:6> + <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:3> \} \\ <var:y> := <nat:1> + <var:y> * <var:d> \\ \{ <var:d> = <var:Z> \land <var:y> = <nat:1> \cdot <var:Z> ^ <nat:13> + <nat:3> \cdot <var:Z> ^ <nat:12> + <nat:3> \cdot <var:Z> ^ <nat:11> + <nat:4> \cdot <var:Z> ^ <nat:10> + <nat:3> \cdot <var:Z> ^ <nat:8> + <nat:2> \cdot <var:Z> ^ <nat:7> + <nat:3> \cdot <var:Z> ^ <nat:6> + <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:1> \} \end{eqnarray} Using usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:d> = <var:Z> }} <var:y> := <nat:1> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:4> + <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:2> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <nat:2> + <var:y> * <var:d> ; <var:y> := <nat:4> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:1> + <var:y> * <var:d> {{ <var:y> = <nat:1> * <var:Z> ^ <nat:13> + <nat:3> * <var:Z> ^ <nat:12> + <nat:3> * <var:Z> ^ <nat:11> + <nat:4> * <var:Z> ^ <nat:10> + <nat:3> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:10> + <nat:3> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:11> + <nat:3> * <var:Z> ^ <nat:10> + <nat:3> * <var:Z> ^ <nat:9> + <nat:4> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:12> + <nat:3> * <var:Z> ^ <nat:11> + <nat:3> * <var:Z> ^ <nat:10> + <nat:4> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Z> /\ <var:y> = <nat:1> * <var:Z> ^ <nat:13> + <nat:3> * <var:Z> ^ <nat:12> + <nat:3> * <var:Z> ^ <nat:11> + <nat:4> * <var:Z> ^ <nat:10> + <nat:3> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 