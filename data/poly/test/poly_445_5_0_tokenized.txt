\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:h> ; <var:Q> := <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> \end{verbatim} Given $ <var:h> = <var:s> $ prior to the evaluation of this series of instructions then we see $ <var:Q> = <nat:4> \cdot <var:s> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment can be accomplished with this decorated program . \begin{eqnarray} \{ <var:h> = <var:s> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:h> = <var:s> \land <var:Z0> = <nat:3> \} \\ <var:Z1> := <nat:4> ; \\ \{ <var:h> = <var:s> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> \} \\ <var:Z1> := <var:Z1> * <var:h> ; \\ \{ <var:h> = <var:s> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> \times <var:s> \} \\ <var:Q> := <var:Z1> ; \\ \{ <var:h> = <var:s> \land <var:Z0> = <nat:3> \land <var:Q> = <nat:4> \times <var:s> \} \\ <var:Q> := <var:Q> + <var:Z0> \\ \{ <var:h> = <var:s> \land <var:Q> = <nat:4> \times <var:s> + <nat:3> \} \end{eqnarray} Applying Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:h> = <var:s> }} <var:Z0> := <nat:3> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:h> ; <var:Q> := <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> {{ <var:Q> = <nat:4> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:3> /\ <var:Q> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Q> = <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 