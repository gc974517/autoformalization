\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:C> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:3> ; <var:k> := <var:G1> <var:k> := <var:k> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:C> = <var:V> $ before running our list of commands , it follows that we have $ <var:k> = <nat:3> \times <var:V> + <nat:4> $ after list of instructions has exited . \end{theorem} \begin{proof} The method of proof for the program can be done through standard Hoare reasoning . Going forward , we have \begin{eqnarray} \{ <var:C> = <var:V> \} \, <var:G1> := <var:C> \, \{ <var:C> = <var:V> \land <var:G1> = <var:V> \} \\ \{ <var:C> = <var:V> \land <var:G1> = <var:V> \} \, <var:G0> := <nat:4> \, \{ <var:C> = <var:V> \land <var:G1> = <var:V> \land <var:G0> = <nat:4> \} \\ \{ <var:C> = <var:V> \land <var:G1> = <var:V> \land <var:G0> = <nat:4> \} \, <var:G1> := <var:G1> * <nat:3> \, \{ <var:C> = <var:V> \land <var:G1> = <nat:3> * <var:V> \land <var:G0> = <nat:4> \} \\ \{ <var:C> = <var:V> \land <var:G1> = <nat:3> * <var:V> \land <var:G0> = <nat:4> \} \, <var:k> := <var:G1\, \{ <var:C> = <var:V> \land <var:G0> = <nat:4> \land <var:k> = <nat:3> * <var:V> \} \end{eqnarray} Moving forward to the subsequent statement contained in our list of commands , we have \begin{eqnarray} \{ <var:C> = <var:V> \} \, <var:G1> := <var:C> \, \{ <var:C> = <var:V> \land <var:G1> = <var:V> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:C> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:3> ; <var:k> := <var:G1> <var:k> := <var:k> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:C> = <var:V> }} <def:poly> {{ <var:k> = <nat:3> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:G1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:G1> = <var:V> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:G1> = <nat:3> * <var:V> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:G0> = <nat:4> /\ <var:k> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:k> = <nat:3> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 