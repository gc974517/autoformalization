\begin{document} \begin{theorem} Consider the following list of commands : \begin{verbatim} <var:D1> := <var:A> ; <var:D2> := <var:D1> * <var:A> ; <var:D3> := <var:D2> * <var:A> ; <var:D4> := <var:D3> * <var:A> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:4> ; <var:D3> := <var:D3> * <nat:4> ; <var:D4> := <var:D4> * <nat:2> ; <var:f> := <var:D4> <var:f> := <var:f> + <var:D3> <var:f> := <var:f> + <var:D1> <var:f> := <var:f> + <var:D0> \end{verbatim} Allowing that $ <var:A> = <var:Y> $ prior to executing this set of commands it holds that we see $ <var:f> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> + <nat:1> $ after list of instructions is done . \end{theorem} \begin{proof} The argument for the code is shown through the following decorated series of instructions . \begin{eqnarray} \{ <var:A> = <var:Y> \} \\ <var:D1> := <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:D1> = <var:Y> \} \\ <var:D2> := <var:D1> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \} \\ <var:D4> := <var:D3> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \land <var:D4> = <var:Y> ^ <nat:4> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:A> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \land <var:D4> = <var:Y> ^ <nat:4> \land <var:D0> = <nat:1> \} \\ <var:D1> := <var:D1> * <nat:4> ; \\ \{ <var:A> = <var:Y> \land <var:D1> = <nat:4> \times <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \land <var:D4> = <var:Y> ^ <nat:4> \land <var:D0> = <nat:1> \} \\ <var:D3> := <var:D3> * <nat:4> ; \\ \{ <var:A> = <var:Y> \land <var:D1> = <nat:4> \times <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <nat:4> \times <var:Y> ^ <nat:3> \land <var:D4> = <var:Y> ^ <nat:4> \land <var:D0> = <nat:1> \} \\ <var:D4> := <var:D4> * <nat:2> ; \\ \{ <var:A> = <var:Y> \land <var:D1> = <nat:4> \times <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <nat:4> \times <var:Y> ^ <nat:3> \land <var:D4> = <nat:2> \times <var:Y> ^ <nat:4> \land <var:D0> = <nat:1> \} \\ <var:f> := <var:D4> \\ \{ <var:A> = <var:Y> \land <var:D1> = <nat:4> \times <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <nat:4> \times <var:Y> ^ <nat:3> \land <var:D0> = <nat:1> \land <var:f> = <nat:2> \times <var:Y> ^ <nat:4> \} \\ <var:f> := <var:f> + <var:D3> \\ \{ <var:A> = <var:Y> \land <var:D1> = <nat:4> \times <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D0> = <nat:1> \land <var:f> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:D1> \\ \{ <var:A> = <var:Y> \land <var:D0> = <nat:1> \land <var:f> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> \} \\ <var:f> := <var:f> + <var:D0> \\ \{ <var:A> = <var:Y> \land <var:f> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> + <nat:1> \} \end{eqnarray} Using Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <var:D4> : string := " <var:D4> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:A> = <var:Y> }} <var:D1> := <var:A> ; <var:D2> := <var:D1> * <var:A> ; <var:D3> := <var:D2> * <var:A> ; <var:D4> := <var:D3> * <var:A> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:4> ; <var:D3> := <var:D3> * <nat:4> ; <var:D4> := <var:D4> * <nat:2> ; <var:f> := <var:D4> <var:f> := <var:f> + <var:D3> <var:f> := <var:f> + <var:D1> <var:f> := <var:f> + <var:D0> {{ <var:f> = <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <var:Y> ^ <nat:3> /\ <var:D4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <var:Y> ^ <nat:3> /\ <var:D4> = <var:Y> ^ <nat:4> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <var:Y> ^ <nat:3> /\ <var:D4> = <var:Y> ^ <nat:4> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:Y> ^ <nat:3> /\ <var:D4> = <var:Y> ^ <nat:4> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:Y> ^ <nat:3> /\ <var:D4> = <nat:2> * <var:Y> ^ <nat:4> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:Y> ^ <nat:3> /\ <var:D0> = <nat:1> /\ <var:f> = <nat:2> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D0> = <nat:1> /\ <var:f> = <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:D0> = <nat:1> /\ <var:f> = <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:f> = <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 