\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:g1> := <var:j> ; <var:g2> := <var:g1> * <var:j> ; <var:g3> := <var:g2> * <var:j> ; <var:g4> := <var:g3> * <var:j> ; <var:g5> := <var:g4> * <var:j> ; <var:g0> := <nat:1> ; <var:g3> := <var:g3> * <nat:2> ; <var:g4> := <var:g4> * <nat:1> ; <var:g5> := <var:g5> * <nat:1> ; <var:r> := <var:g5> <var:r> := <var:r> + <var:g4> <var:r> := <var:r> + <var:g3> <var:r> := <var:r> + <var:g0> \end{verbatim} Assuming that $ <var:j> = <var:T> $ before the evaluation of our list of instructions , it holds that $ <var:r> = <nat:1> \cdot <var:T> ^ <nat:5> + <nat:1> \cdot <var:T> ^ <nat:4> + <nat:2> \cdot <var:T> ^ <nat:3> + <nat:1> $ once program has exited . \end{theorem} \begin{proof} The course of logic for this set of commands is evident by usual Hoare reasoning . Taking a look at the next piece of code in the program , the environment update statement \verb | <var:g1> := <var:j> ; | . This takes $ \{ <var:j> = <var:T> \} $ as the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \} $ . Immediately after , the environment update code \verb | <var:g2> := <var:g1> * <var:j> ; | . This code transfers the precondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \} $ as the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \} $ . Following , we see the binding command \verb | <var:g3> := <var:g2> * <var:j> ; | . This transfers the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \} $ to the postcondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <var:T> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment law obtained from usual Hoare techniques . Advancing , we see the binding code \verb | <var:g4> := <var:g3> * <var:j> ; | . This takes the precondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <var:T> ^ <nat:3> \} $ as $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <var:T> ^ <nat:3> \land <var:g4> = <var:T> ^ <nat:4> \} $ . Immediately after , the variable binding line giving $ <var:g4> * <var:j> $ as $ <var:g5>$ . This code forwards the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <var:T> ^ <nat:3> \land <var:g4> = <var:T> ^ <nat:4> \} $ into the postcondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <var:T> ^ <nat:3> \land <var:g4> = <var:T> ^ <nat:4> \land <var:g5> = <var:T> ^ <nat:5> \} $ . This is ensured using the assignment scheme given by typical Hoare techniques . Advancing to the next statement in our list of instructions , we see the variable update line defining $ <nat:1> $ into $ <var:g0>$ . This transfers the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <var:T> ^ <nat:3> \land <var:g4> = <var:T> ^ <nat:4> \land <var:g5> = <var:T> ^ <nat:5> \} $ as the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <var:T> ^ <nat:3> \land <var:g4> = <var:T> ^ <nat:4> \land <var:g5> = <var:T> ^ <nat:5> \land <var:g0> = <nat:1> \} $ . Further , the environment update code \verb | <var:g3> := <var:g3> * <nat:2> ; | . This moves the precondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <var:T> ^ <nat:3> \land <var:g4> = <var:T> ^ <nat:4> \land <var:g5> = <var:T> ^ <nat:5> \land <var:g0> = <nat:1> \} $ toward the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g4> = <var:T> ^ <nat:4> \land <var:g5> = <var:T> ^ <nat:5> \land <var:g0> = <nat:1> \} $ . Jumping to the upcoming line of code in the series of instructions , the variable assignmet line \verb | <var:g4> := <var:g4> * <nat:1> ; | . This code advances the precondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g4> = <var:T> ^ <nat:4> \land <var:g5> = <var:T> ^ <nat:5> \land <var:g0> = <nat:1> \} $ to the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g4> = <nat:1> \cdot <var:T> ^ <nat:4> \land <var:g5> = <var:T> ^ <nat:5> \land <var:g0> = <nat:1> \} $ . Honing in on the subsequent bit of code seen in the series of instructions , we have the variable binding code letting $ <var:g5> * <nat:1> $ into $ <var:g5>$ . This statement takes the precondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g4> = <nat:1> \cdot <var:T> ^ <nat:4> \land <var:g5> = <var:T> ^ <nat:5> \land <var:g0> = <nat:1> \} $ to the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g4> = <nat:1> \cdot <var:T> ^ <nat:4> \land <var:g5> = <nat:1> \cdot <var:T> ^ <nat:5> \land <var:g0> = <nat:1> \} $ . This is deduced with the assignment scheme given in typical Hoare logic . Advancing to the next step , we have the variable assignmet line \verb | <var:r> := <var:g5> | . This moves $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g4> = <nat:1> \cdot <var:T> ^ <nat:4> \land <var:g5> = <nat:1> \cdot <var:T> ^ <nat:5> \land <var:g0> = <nat:1> \} $ as the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g4> = <nat:1> \cdot <var:T> ^ <nat:4> \land <var:g0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:T> ^ <nat:5> \} $ . Taking another step toward the next bit of code seen in our set of commands , we see the environment update line yielding $ <var:r> + <var:g4$ toward $ <var:r>$ . This command advances $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g4> = <nat:1> \cdot <var:T> ^ <nat:4> \land <var:g0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:T> ^ <nat:5> \} $ into the postcondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:T> ^ <nat:5> + <nat:1> \cdot <var:T> ^ <nat:4> \} $ . Shifting focus toward the following command found in the list of instructions , the environment update line defining $ <var:r> + <var:g3$ into $ <var:r>$ . This forwards the precondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:g0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:T> ^ <nat:5> + <nat:1> \cdot <var:T> ^ <nat:4> \} $ into the postcondition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:T> ^ <nat:5> + <nat:1> \cdot <var:T> ^ <nat:4> + <nat:2> \cdot <var:T> ^ <nat:3> \} $ . This is given with the assignment law obtained from usual Hoare reasoning . Moving forward to the subsequent command in the code , we see the binding code yielding $ <var:r> + <var:g0$ toward $ <var:r>$ . This advances the condition $ \{ <var:j> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:T> ^ <nat:5> + <nat:1> \cdot <var:T> ^ <nat:4> + <nat:2> \cdot <var:T> ^ <nat:3> \} $ toward $ \{ <var:j> = <var:T> \land <var:r> = <nat:1> \cdot <var:T> ^ <nat:5> + <nat:1> \cdot <var:T> ^ <nat:4> + <nat:2> \cdot <var:T> ^ <nat:3> + <nat:1> \} $ . This is given by the assignment rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Definition <var:g5> : string := " <var:g5> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:j> = <var:T> }} <var:g1> := <var:j> ; <var:g2> := <var:g1> * <var:j> ; <var:g3> := <var:g2> * <var:j> ; <var:g4> := <var:g3> * <var:j> ; <var:g5> := <var:g4> * <var:j> ; <var:g0> := <nat:1> ; <var:g3> := <var:g3> * <nat:2> ; <var:g4> := <var:g4> * <nat:1> ; <var:g5> := <var:g5> * <nat:1> ; <var:r> := <var:g5> <var:r> := <var:r> + <var:g4> <var:r> := <var:r> + <var:g3> <var:r> := <var:r> + <var:g0> {{ <var:r> = <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <var:T> ^ <nat:3> /\ <var:g4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <var:T> ^ <nat:3> /\ <var:g4> = <var:T> ^ <nat:4> /\ <var:g5> = <var:T> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <var:T> ^ <nat:3> /\ <var:g4> = <var:T> ^ <nat:4> /\ <var:g5> = <var:T> ^ <nat:5> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:g4> = <var:T> ^ <nat:4> /\ <var:g5> = <var:T> ^ <nat:5> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:g4> = <nat:1> * <var:T> ^ <nat:4> /\ <var:g5> = <var:T> ^ <nat:5> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:g4> = <nat:1> * <var:T> ^ <nat:4> /\ <var:g5> = <nat:1> * <var:T> ^ <nat:5> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:g4> = <nat:1> * <var:T> ^ <nat:4> /\ <var:g0> = <nat:1> /\ <var:r> = <nat:1> * <var:T> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:g0> = <nat:1> /\ <var:r> = <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g0> = <nat:1> /\ <var:r> = <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:r> = <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 