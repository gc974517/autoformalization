\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:4> ; <var:K> := <var:q0> \end{verbatim} Allowing --- with some natural coefficients $ <var:J> $ --- it to be that $ <var:g> = <var:J> $ ahead of executing the list of commands it holds that we have $ <var:K> = <nat:4> $ . \end{theorem} \begin{proof} The proof of this set of commands can be given using usual Hoare reasoning . Moving forward to the upcoming piece of code contained in our list of instructions , we have the variable assignmet statement letting $ <nat:4> $ as $ <var:q0>$ . This advances the condition $ \{ <var:g> = <var:J> \} $ as the postcondition $ \{ <var:g> = <var:J> \land <var:q0> = <nat:4> \} $ . This is ensured by the assignment rule given in typical Hoare techniques . Jumping to the next command in the series of instructions , the binding line \verb | <var:K> := <var:q0> | . This line advances $ \{ <var:g> = <var:J> \land <var:q0> = <nat:4> \} $ toward $ \{ <var:g> = <var:J> \land <var:K> = <nat:4> \} $ . This is known to be sound by the assignment scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:g> = <var:J> }} <var:q0> := <nat:4> ; <var:K> := <var:q0> {{ <var:K> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:K> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 