\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:m1> := <var:r> ; <var:m2> := <var:m1> * <var:r> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:1> ; <var:A> := <var:m2> <var:A> := <var:A> + <var:m1> <var:A> := <var:A> + <var:m0> \end{verbatim} Given ( taking positive numbers $ <var:D> $ ) it to be that $ <var:r> = <var:D> $ before executing our list of commands it must be that $ <var:A> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> $ when set of commands has finished . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:r> = <var:D> \} \\ <var:m1> := <var:r> ; \\ \{ <var:r> = <var:D> \land <var:m1> = <var:D> \} \\ <var:m2> := <var:m1> * <var:r> ; \\ \{ <var:r> = <var:D> \land <var:m1> = <var:D> \land <var:m2> = <var:D> ^ <nat:2> \} \\ <var:m0> := <nat:4> ; \\ \{ <var:r> = <var:D> \land <var:m1> = <var:D> \land <var:m2> = <var:D> ^ <nat:2> \land <var:m0> = <nat:4> \} \\ <var:m1> := <var:m1> * <nat:3> ; \\ \{ <var:r> = <var:D> \land <var:m1> = <nat:3> * <var:D> \land <var:m2> = <var:D> ^ <nat:2> \land <var:m0> = <nat:4> \} \\ <var:m2> := <var:m2> * <nat:1> ; \\ \{ <var:r> = <var:D> \land <var:m1> = <nat:3> * <var:D> \land <var:m2> = <nat:1> * <var:D> ^ <nat:2> \land <var:m0> = <nat:4> \} \\ <var:A> := <var:m2> \\ \{ <var:r> = <var:D> \land <var:m1> = <nat:3> * <var:D> \land <var:m0> = <nat:4> \land <var:A> = <nat:1> * <var:D> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:m1> \\ \{ <var:r> = <var:D> \land <var:m0> = <nat:4> \land <var:A> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> \} \\ <var:A> := <var:A> + <var:m0> \\ \{ <var:r> = <var:D> \land <var:A> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} \end{eqnarray} Therefore , the series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:r> = <var:D> }} <var:m1> := <var:r> ; <var:m2> := <var:m1> * <var:r> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:1> ; <var:A> := <var:m2> <var:A> := <var:A> + <var:m1> <var:A> := <var:A> + <var:m0> {{ <var:A> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:m1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:m1> = <var:D> /\ <var:m2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:m1> = <var:D> /\ <var:m2> = <var:D> ^ <nat:2> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:m1> = <nat:3> * <var:D> /\ <var:m2> = <var:D> ^ <nat:2> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:m1> = <nat:3> * <var:D> /\ <var:m2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:m1> = <nat:3> * <var:D> /\ <var:m0> = <nat:4> /\ <var:A> = <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:m0> = <nat:4> /\ <var:A> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:A> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 