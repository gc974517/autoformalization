\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:T> ; <var:z2> := <var:z1> * <var:T> ; <var:z3> := <var:z2> * <var:T> ; <var:z4> := <var:z3> * <var:T> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:4> ; <var:z2> := <var:z2> * <nat:2> ; <var:z3> := <var:z3> * <nat:3> ; <var:z4> := <var:z4> * <nat:1> ; <var:p> := <var:z4> <var:p> := <var:p> + <var:z3> <var:p> := <var:p> + <var:z2> <var:p> := <var:p> + <var:z1> <var:p> := <var:p> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:T> = <var:H> $ --- given any positive numbers $ <var:H> $ --- ahead of the evaluation of the segment of code then we see $ <var:p> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our code is clear through standard Hoare techniques . Moving forward , we have \begin{verbatim} { <var:T> = <var:H> } <var:z1> := <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> } { <var:T> = <var:H> \land <var:z1> = <var:H> } <var:z2> := <var:z1> * <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> } { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> } <var:z3> := <var:z2> * <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> } { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> } <var:z4> := <var:z3> * <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> \land <var:z4> = <var:H> ^ <nat:4> } { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> \land <var:z4> = <var:H> ^ <nat:4> } <var:z0> := <nat:1> { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> \land <var:z4> = <var:H> ^ <nat:4> \land <var:z0> = <nat:1> } { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> \land <var:z4> = <var:H> ^ <nat:4> \land <var:z0> = <nat:1> } <var:z1> := <var:z1> * <nat:4> { <var:T> = <var:H> \land <var:z1> = <nat:4> \cdot <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> \land <var:z4> = <var:H> ^ <nat:4> \land <var:z0> = <nat:1> } { <var:T> = <var:H> \land <var:z1> = <nat:4> \cdot <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> \land <var:z4> = <var:H> ^ <nat:4> \land <var:z0> = <nat:1> } <var:z2> := <var:z2> * <nat:2> { <var:T> = <var:H> \land <var:z1> = <nat:4> \cdot <var:H> \land <var:z2> = <nat:2> \cdot <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> \land <var:z4> = <var:H> ^ <nat:4> \land <var:z0> = <nat:1> } \end{verbatim} This is deduced by the assignment inference rule of Hoare logic . Moving forward to the next step , \begin{verbatim} { <var:T> = <var:H> } <var:z1> := <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> } { <var:T> = <var:H> \land <var:z1> = <var:H> } <var:z2> := <var:z1> * <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> } { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> } <var:z3> := <var:z2> * <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> } \end{verbatim} This is rigorously given through the scheme obtained from standard Hoare reasoning . Taking another step toward the next lines of codefound in the segment of code , we have \begin{verbatim} { <var:T> = <var:H> } <var:z1> := <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> } { <var:T> = <var:H> \land <var:z1> = <var:H> } <var:z2> := <var:z1> * <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> } { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> } <var:z3> := <var:z2> * <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> \land <var:z2> = <var:H> ^ <nat:2> \land <var:z3> = <var:H> ^ <nat:3> } \end{verbatim} This is deduced through the variable binding scheme defined in typical Hoare logic . Now , \begin{verbatim} { <var:T> = <var:H> } <var:z1> := <var:T> { <var:T> = <var:H> \land <var:z1> = <var:H> } \end{verbatim} This is shown using the variable assignmet rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <var:z4> : string := " <var:z4> " . Definition <def:poly> := <var:z1> := <var:T> ; <var:z2> := <var:z1> * <var:T> ; <var:z3> := <var:z2> * <var:T> ; <var:z4> := <var:z3> * <var:T> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:4> ; <var:z2> := <var:z2> * <nat:2> ; <var:z3> := <var:z3> * <nat:3> ; <var:z4> := <var:z4> * <nat:1> ; <var:p> := <var:z4> <var:p> := <var:p> + <var:z3> <var:p> := <var:p> + <var:z2> <var:p> := <var:p> + <var:z1> <var:p> := <var:p> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:T> = <var:H> }} <def:poly> {{ <var:p> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <var:H> /\ <var:z2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <var:H> /\ <var:z2> = <var:H> ^ <nat:2> /\ <var:z3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <var:H> /\ <var:z2> = <var:H> ^ <nat:2> /\ <var:z3> = <var:H> ^ <nat:3> /\ <var:z4> = <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <var:H> /\ <var:z2> = <var:H> ^ <nat:2> /\ <var:z3> = <var:H> ^ <nat:3> /\ <var:z4> = <var:H> ^ <nat:4> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <nat:4> * <var:H> /\ <var:z2> = <var:H> ^ <nat:2> /\ <var:z3> = <var:H> ^ <nat:3> /\ <var:z4> = <var:H> ^ <nat:4> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <nat:4> * <var:H> /\ <var:z2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:z3> = <var:H> ^ <nat:3> /\ <var:z4> = <var:H> ^ <nat:4> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <nat:4> * <var:H> /\ <var:z2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:H> ^ <nat:3> /\ <var:z4> = <var:H> ^ <nat:4> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <nat:4> * <var:H> /\ <var:z2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:H> ^ <nat:3> /\ <var:z4> = <nat:1> * <var:H> ^ <nat:4> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <nat:4> * <var:H> /\ <var:z2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:H> ^ <nat:3> /\ <var:z0> = <nat:1> /\ <var:p> = <nat:1> * <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <nat:4> * <var:H> /\ <var:z2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:z0> = <nat:1> /\ <var:p> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z1> = <nat:4> * <var:H> /\ <var:z0> = <nat:1> /\ <var:p> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:z0> = <nat:1> /\ <var:p> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:p> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 