\begin{document} \begin{theorem} Define a segment of code as follows \begin{verbatim} <var:Y1> := <var:T> ; <var:Y2> := <var:Y1> * <var:T> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:Y2> := <var:Y2> * <nat:7> ; <var:V> := <var:Y2> <var:V> := <var:V> + <var:Y1> <var:V> := <var:V> + <var:Y0> \end{verbatim} Given given integers $ <var:U> $ it to hold that $ <var:T> = <var:U> $ prior to interpreting this set of commands , then we see $ <var:V> = <nat:7> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be accomplished using this decorated code segment . \begin{eqnarray} \{ <var:T> = <var:U> \} \\ <var:Y1> := <var:T> ; \\ \{ <var:T> = <var:U> \land <var:Y1> = <var:U> \} \\ <var:Y2> := <var:Y1> * <var:T> ; \\ \{ <var:T> = <var:U> \land <var:Y1> = <var:U> \land <var:Y2> = <var:U> ^ <nat:2> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:T> = <var:U> \land <var:Y1> = <var:U> \land <var:Y2> = <var:U> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <var:Y1> * <nat:7> ; \\ \{ <var:T> = <var:U> \land <var:Y1> = <nat:7> \times <var:U> \land <var:Y2> = <var:U> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:Y2> := <var:Y2> * <nat:7> ; \\ \{ <var:T> = <var:U> \land <var:Y1> = <nat:7> \times <var:U> \land <var:Y2> = <nat:7> \times <var:U> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:V> := <var:Y2> \\ \{ <var:T> = <var:U> \land <var:Y1> = <nat:7> \times <var:U> \land <var:Y0> = <nat:7> \land <var:V> = <nat:7> \times <var:U> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:Y1> \\ \{ <var:T> = <var:U> \land <var:Y0> = <nat:7> \land <var:V> = <nat:7> \times <var:U> ^ <nat:2> + <nat:7> \times <var:U> \} \\ <var:V> := <var:V> + <var:Y0> \\ \{ <var:T> = <var:U> \land <var:V> = <nat:7> \times <var:U> ^ <nat:2> + <nat:7> \times <var:U> + <nat:7> \} \end{eqnarray} Applying typical Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:T> = <var:U> }} <var:Y1> := <var:T> ; <var:Y2> := <var:Y1> * <var:T> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:Y2> := <var:Y2> * <nat:7> ; <var:V> := <var:Y2> <var:V> := <var:V> + <var:Y1> <var:V> := <var:V> + <var:Y0> {{ <var:V> = <nat:7> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:Y1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:Y1> = <var:U> /\ <var:Y2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:Y1> = <var:U> /\ <var:Y2> = <var:U> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:Y1> = <nat:7> * <var:U> /\ <var:Y2> = <var:U> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:Y1> = <nat:7> * <var:U> /\ <var:Y2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:Y1> = <nat:7> * <var:U> /\ <var:Y0> = <nat:7> /\ <var:V> = <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:Y0> = <nat:7> /\ <var:V> = <nat:7> * <var:U> ^ <nat:2> + <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:V> = <nat:7> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 