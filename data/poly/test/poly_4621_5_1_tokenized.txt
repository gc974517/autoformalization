\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:y1> := <var:N> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:8> ; <var:i> := <var:y1> <var:i> := <var:i> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allow , for $ <var:K> $ , it to be that $ <var:N> = <var:K> $ prior to executing the set of instructions , it must be that we see $ <var:i> = <nat:8> \times <var:K> + <nat:9> $ once code segment has executed . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions can be done with Hoare logic . Stepping forward , we have the binding line \verb | <var:y1> := <var:N> ; | . This redefines the precondition $ \{ <var:N> = <var:K> \} $ into the postcondition $ \{ <var:N> = <var:K> \land <var:y1> = <var:K> \} $ . Observing the subsequent step seen in the list of commands , we have the code \verb | <var:y0> := <nat:9> ; | . This advances $ \{ <var:N> = <var:K> \land <var:y1> = <var:K> \} $ toward the postcondition $ \{ <var:N> = <var:K> \land <var:y1> = <var:K> \land <var:y0> = <nat:9> \} $ . Advancing to the following piece of code found in our set of commands , we have the binding command yielding $ <var:y1> * <nat:8> $ into $ <var:y1>$ . This redefines the precondition $ \{ <var:N> = <var:K> \land <var:y1> = <var:K> \land <var:y0> = <nat:9> \} $ into $ \{ <var:N> = <var:K> \land <var:y1> = <nat:8> * <var:K> \land <var:y0> = <nat:9> \} $ . This is shown by the assignment law given in Hoare reasoning . Following , we see the variable assignmet statement \verb | <var:i> := <var:y1> | . This code redefines the condition $ \{ <var:N> = <var:K> \land <var:y1> = <nat:8> * <var:K> \land <var:y0> = <nat:9> \} $ as the condition $ \{ <var:N> = <var:K> \land <var:y0> = <nat:9> \land <var:i> = <nat:8> * <var:K> \} $ . This is shown to be logically sound by the assignment rule given in typical Hoare techniques . Immediately after , the binding line \verb | <var:i> := <var:i> + <var:y0> | . This forwards the condition $ \{ <var:N> = <var:K> \land <var:y0> = <nat:9> \land <var:i> = <nat:8> * <var:K> \} $ into $ \{ <var:N> = <var:K> \land <var:i> = <nat:8> * <var:K> + <nat:9> \} $ . This is rigorously given using the assignment rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:N> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:8> ; <var:i> := <var:y1> <var:i> := <var:i> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:N> = <var:K> }} <def:poly> {{ <var:i> = <nat:8> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:y1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:y1> = <var:K> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:y1> = <nat:8> * <var:K> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:y0> = <nat:9> /\ <var:i> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:i> = <nat:8> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 