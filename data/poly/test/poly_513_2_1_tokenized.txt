\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:4> ; <var:G> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> . Assume ( given any natural coefficients $ <var:x> $ ) that $ <var:j> = <var:x> $ prior to interpreting the series of commands it holds that we see $ <var:G> = <nat:4> $ . \end{theorem} \begin{proof} The argument for this series of commands can be seen through this decorated set of commands . \begin{eqnarray} \{ <var:j> = <var:x> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:j> = <var:x> \land <var:F0> = <nat:4> \} \\ <var:G> := <var:F0> \\ \{ <var:j> = <var:x> \land <var:G> = <nat:4> \} \end{eqnarray} Applying Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:G> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:j> = <var:x> }} <def:poly> {{ <var:G> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:G> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 