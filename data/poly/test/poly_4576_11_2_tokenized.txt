\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <nat:1> + <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> ; <var:F> := <nat:1> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> ; <var:F> := <nat:1> + <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> ; <var:F> := <nat:4> + <var:F> * <var:q> ; <var:F> := <nat:4> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:q> = <var:m> $ ( with some $ <var:m> \in \mathbb{Z}^+ $ ) before evaluating our series of commands , it follows that $ <var:F> = <nat:1> \cdot <var:m> ^ <nat:10> + <nat:1> \cdot <var:m> ^ <nat:9> + <nat:3> \cdot <var:m> ^ <nat:8> + <nat:1> \cdot <var:m> ^ <nat:7> + <nat:2> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program can be seen with standard Hoare techniques . Immediately after , we see the environment update code \verb | <var:F> := <nat:1> ; | . This takes the condition $ \{ <var:q> = <var:m> \} $ into $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> \} $ . This is deduced through the assignment law of usual Hoare techniques . Moving onward , we see the variable assignmet code \verb | <var:F> := <nat:1> + <var:F> * <var:q> ; | . This transfers the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> \} $ toward the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> + <nat:1> \} $ . This is shown with the assignment rule defined by standard Hoare reasoning . Moving forward , the binding command yielding $ <nat:3> + <var:F> * <var:q> $ toward $ <var:F>$ . This code takes the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> + <nat:1> \} $ into the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> \} $ . This is rigorously given through the assignment inference rule given by typical Hoare techniques . Honing in on the next step seen in the code segment , the code \verb | <var:F> := <nat:1> + <var:F> * <var:q> ; | . This moves the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> \} $ to the postcondition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> \} $ . Shifting focus toward the next step contained in the list of commands , we see the variable assignmet code giving $ <nat:2> + <var:F> * <var:q> $ to $ <var:F>$ . This code forwards the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> \} $ toward $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> \} $ . This is deduced through the assignment law defined in typical Hoare reasoning . Focusing on the proceeding line found in the code , we have the binding statement assigning $ <nat:1> + <var:F> * <var:q> $ to $ <var:F>$ . This advances $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> \} $ toward the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> \} $ . Taking a look at the following bit of code in our series of commands , the binding statement defining $ <nat:3> + <var:F> * <var:q> $ as $ <var:F>$ . This command transfers the precondition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> \} $ into the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> \} $ . Taking a look at the subsequent statement in the set of commands , the environment update statement yielding $ <nat:3> + <var:F> * <var:q> $ toward $ <var:F>$ . This takes $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> \} $ into the postcondition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> \} $ . Moving forward to the next step , the line assigning $ <nat:4> + <var:F> * <var:q> $ toward $ <var:F>$ . This takes the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> \} $ as $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:4> \} $ . Looking at the following step in our series of instructions , we see the binding command assigning $ <nat:4> + <var:F> * <var:q> $ into $ <var:F>$ . This moves the precondition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:4> \} $ as the postcondition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} $ . Honing in on the proceeding line found in our list of commands , we have the assignment code giving $ <nat:2> + <var:F> * <var:q$ toward $ <var:F>$ . This command redefines the condition $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} $ into $ \{ <var:q> = <var:m> \land <var:F> = <nat:1> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> \} $ . This is sound with the assignment rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:1> ; <var:F> := <nat:1> + <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> ; <var:F> := <nat:1> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> ; <var:F> := <nat:1> + <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> ; <var:F> := <nat:4> + <var:F> * <var:q> ; <var:F> := <nat:4> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:q> = <var:m> }} <def:poly> {{ <var:F> = <nat:1> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:F> = <nat:1> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 