\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:F> := <nat:2> ; <var:F> := <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Allow it to hold that $ <var:q> = <var:z> $ before the evaluation of our program it must be that $ <var:F> = <nat:2> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this segment of code is accomplished through typical Hoare techniques . Going to the next step , we have the line \verb | <var:F> := <nat:2> ; | . This redefines $ \{ <var:q> = <var:z> \} $ into the postcondition $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \} $ . This is deduced through the assignment law defined in typical Hoare logic . Next , the binding statement \verb | <var:F> := <var:F> * <var:q> ; | . This statement forwards the condition $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \} $ to the condition $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \cdot <var:z> + \} $ . This is shown by the assignment rule from Hoare reasoning . Observing the subsequent line of code seen in the list of instructions , we see the assignment statement \verb | <var:F> := <nat:3> + <var:F> * <var:q> ; | . This forwards $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \cdot <var:z> + \} $ as $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \} $ . Further , the variable update code \verb | <var:F> := <nat:2> + <var:F> * <var:q> ; | . This transfers $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \} $ toward the postcondition $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> + <nat:2> \} $ . This is given using the assignment scheme of Hoare logic . Now , the environment update command yielding $ <nat:2> + <var:F> * <var:q$ as $ <var:F>$ . This moves the precondition $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> + <nat:2> \} $ into the postcondition $ \{ <var:q> = <var:z> \land <var:F> = <nat:2> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:2> \} $ . This is guaranteed using the assignment inference rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:2> ; <var:F> := <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:q> = <var:z> }} <def:poly> {{ <var:F> = <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:F> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:F> = <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:F> = <nat:2> * <var:z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:F> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:F> = <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 