\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T1> := <var:M> ; <var:T2> := <var:T1> * <var:M> ; <var:T3> := <var:T2> * <var:M> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:5> ; <var:T2> := <var:T2> * <nat:7> ; <var:T3> := <var:T3> * <nat:1> ; <var:P> := <var:T3> <var:P> := <var:P> + <var:T2> <var:P> := <var:P> + <var:T1> <var:P> := <var:P> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for every $ <var:O> \in \mathbb{N} $ ) that we have $ <var:M> = <var:O> $ ahead of running our set of instructions then $ <var:P> = <nat:1> \times <var:O> ^ <nat:3> + <nat:7> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> + <nat:3> $ when program has finished executing . \end{theorem} \begin{proof} The proof of this series of commands is given using standard Hoare reasoning . Moving forward to the following pieces of code contained in the set of instructions , \begin{verbatim} { <var:M> = <var:O> } <var:T1> := <var:M> { <var:M> = <var:O> \land <var:T1> = <var:O> } { <var:M> = <var:O> \land <var:T1> = <var:O> } <var:T2> := <var:T1> * <var:M> { <var:M> = <var:O> \land <var:T1> = <var:O> \land <var:T2> = <var:O> ^ <nat:2> } { <var:M> = <var:O> \land <var:T1> = <var:O> \land <var:T2> = <var:O> ^ <nat:2> } <var:T3> := <var:T2> * <var:M> { <var:M> = <var:O> \land <var:T1> = <var:O> \land <var:T2> = <var:O> ^ <nat:2> \land <var:T3> = <var:O> ^ <nat:3> } { <var:M> = <var:O> \land <var:T1> = <var:O> \land <var:T2> = <var:O> ^ <nat:2> \land <var:T3> = <var:O> ^ <nat:3> } <var:T0> := <nat:3> { <var:M> = <var:O> \land <var:T1> = <var:O> \land <var:T2> = <var:O> ^ <nat:2> \land <var:T3> = <var:O> ^ <nat:3> \land <var:T0> = <nat:3> } { <var:M> = <var:O> \land <var:T1> = <var:O> \land <var:T2> = <var:O> ^ <nat:2> \land <var:T3> = <var:O> ^ <nat:3> \land <var:T0> = <nat:3> } <var:T1> := <var:T1> * <nat:5> { <var:M> = <var:O> \land <var:T1> = <nat:5> \times <var:O> \land <var:T2> = <var:O> ^ <nat:2> \land <var:T3> = <var:O> ^ <nat:3> \land <var:T0> = <nat:3> } { <var:M> = <var:O> \land <var:T1> = <nat:5> \times <var:O> \land <var:T2> = <var:O> ^ <nat:2> \land <var:T3> = <var:O> ^ <nat:3> \land <var:T0> = <nat:3> } <var:T2> := <var:T2> * <nat:7> { <var:M> = <var:O> \land <var:T1> = <nat:5> \times <var:O> \land <var:T2> = <nat:7> \times <var:O> ^ <nat:2> \land <var:T3> = <var:O> ^ <nat:3> \land <var:T0> = <nat:3> } \end{verbatim} This is known to be sound through the inference rule from Hoare logic . Moving on to the next step , \begin{verbatim} { <var:M> = <var:O> } <var:T1> := <var:M> { <var:M> = <var:O> \land <var:T1> = <var:O> } \end{verbatim} Following , we see \begin{verbatim} { <var:M> = <var:O> } <var:T1> := <var:M> { <var:M> = <var:O> \land <var:T1> = <var:O> } { <var:M> = <var:O> \land <var:T1> = <var:O> } <var:T2> := <var:T1> * <var:M> { <var:M> = <var:O> \land <var:T1> = <var:O> \land <var:T2> = <var:O> ^ <nat:2> } \end{verbatim} This is ensured with the variable update law in usual Hoare techniques . Focusing on the following pieces of code found in our series of commands , we see \begin{verbatim} { <var:M> = <var:O> } <var:T1> := <var:M> { <var:M> = <var:O> \land <var:T1> = <var:O> } { <var:M> = <var:O> \land <var:T1> = <var:O> } <var:T2> := <var:T1> * <var:M> { <var:M> = <var:O> \land <var:T1> = <var:O> \land <var:T2> = <var:O> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:M> ; <var:T2> := <var:T1> * <var:M> ; <var:T3> := <var:T2> * <var:M> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:5> ; <var:T2> := <var:T2> * <nat:7> ; <var:T3> := <var:T3> * <nat:1> ; <var:P> := <var:T3> <var:P> := <var:P> + <var:T2> <var:P> := <var:P> + <var:T1> <var:P> := <var:P> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:M> = <var:O> }} <def:poly> {{ <var:P> = <nat:1> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <var:O> /\ <var:T2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <var:O> /\ <var:T2> = <var:O> ^ <nat:2> /\ <var:T3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <var:O> /\ <var:T2> = <var:O> ^ <nat:2> /\ <var:T3> = <var:O> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <nat:5> * <var:O> /\ <var:T2> = <var:O> ^ <nat:2> /\ <var:T3> = <var:O> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <nat:5> * <var:O> /\ <var:T2> = <nat:7> * <var:O> ^ <nat:2> /\ <var:T3> = <var:O> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <nat:5> * <var:O> /\ <var:T2> = <nat:7> * <var:O> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:O> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <nat:5> * <var:O> /\ <var:T2> = <nat:7> * <var:O> ^ <nat:2> /\ <var:T0> = <nat:3> /\ <var:P> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T1> = <nat:5> * <var:O> /\ <var:T0> = <nat:3> /\ <var:P> = <nat:1> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:T0> = <nat:3> /\ <var:P> = <nat:1> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> + <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:P> = <nat:1> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 