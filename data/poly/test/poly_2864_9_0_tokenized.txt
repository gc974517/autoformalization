\begin{document} \begin{theorem} Take a program in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:N> ; <var:s2> := <nat:1> ; <var:s2> := <var:s2> * <var:N> ; <var:s2> := <var:s2> * <var:N> ; <var:H> := <var:s2> ; <var:H> := <var:H> + <var:s1> ; <var:H> := <var:H> + <var:s0> \end{verbatim} Allow ( for all positive integer coefficients $ <var:v> $ ) that $ <var:N> = <var:v> $ prior to evaluating our code , then we have $ <var:H> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands is done through usual Hoare techniques . Jumping to the subsequent line found in our series of instructions , we see the variable binding line \verb | <var:s0> := <nat:4> ; | . This statement takes $ \{ <var:N> = <var:v> \} $ as $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \} $ . This is ensured with the assignment scheme given by Hoare reasoning . Moving on to the upcoming command contained in the list of commands , we have the variable assignmet code defining $ <nat:1> $ into $ <var:s1>$ . This advances the precondition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \} $ into $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \} $ . Shifting focus toward the proceeding line contained in the series of commands , the variable assignmet code letting $ <var:s1> * <var:N> $ as $ <var:s1>$ . This redefines the condition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \} $ to the postcondition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \} $ . Advancing to the next step , the variable binding code \verb | <var:s2> := <nat:1> ; | . This advances the condition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \} $ toward the postcondition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \land <var:s2> = <nat:1> \} $ . After , the environment update line yielding $ <var:s2> * <var:N> $ as $ <var:s2>$ . This moves $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \land <var:s2> = <nat:1> \} $ as the postcondition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \land <var:s2> = <nat:1> * <var:v> \} $ . Advancing , we see the variable assignmet line defining $ <var:s2> * <var:N> $ into $ <var:s2>$ . This transfers $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \land <var:s2> = <nat:1> * <var:v> \} $ as $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \land <var:s2> = <nat:1> * <var:v> ^ <nat:2> \} $ . Advancing to the proceeding piece of code in the code segment , the binding command \verb | <var:H> := <var:s2> ; | . This code forwards the precondition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \land <var:s2> = <nat:1> * <var:v> ^ <nat:2> \} $ toward the condition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \land <var:H> = <nat:1> * <var:v> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment scheme found in typical Hoare reasoning . Following , the assignment code letting $ <var:H> + <var:s1> $ into $ <var:H>$ . This forwards the condition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> * <var:v> \land <var:H> = <nat:1> * <var:v> ^ <nat:2> \} $ into $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:H> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> \} $ . Looking at the proceeding step in our list of instructions , we have the variable assignmet line yielding $ <var:H> + <var:s0$ as $ <var:H>$ . This line forwards the precondition $ \{ <var:N> = <var:v> \land <var:s0> = <nat:4> \land <var:H> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> \} $ into $ \{ <var:N> = <var:v> \land <var:H> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> \} $ . This is shown to be logically sound through the assignment inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:N> = <var:v> }} <var:s0> := <nat:4> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:N> ; <var:s2> := <nat:1> ; <var:s2> := <var:s2> * <var:N> ; <var:s2> := <var:s2> * <var:N> ; <var:H> := <var:s2> ; <var:H> := <var:H> + <var:s1> ; <var:H> := <var:H> + <var:s0> {{ <var:H> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:v> /\ <var:s2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:v> /\ <var:s2> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:v> /\ <var:s2> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:v> /\ <var:H> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s0> = <nat:4> /\ <var:H> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:H> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 