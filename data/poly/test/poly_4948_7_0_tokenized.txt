\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:9> ; <var:O3> := <nat:4> ; <var:O3> := <var:O3> * <var:J> ; <var:O3> := <var:O3> * <var:J> ; <var:O3> := <var:O3> * <var:J> ; <var:Q> := <var:O3> ; <var:Q> := <var:Q> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:J> = <var:g> $ ahead of running this set of instructions then we see $ <var:Q> = <nat:4> \times <var:g> ^ <nat:3> + <nat:9> $ once code segment has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:g> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:J> = <var:g> \land <var:O0> = <nat:9> \} \\ <var:O3> := <nat:4> ; \\ \{ <var:J> = <var:g> \land <var:O0> = <nat:9> \land <var:O3> = <nat:4> \} \\ <var:O3> := <var:O3> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:O0> = <nat:9> \land <var:O3> = <nat:4> \cdot <var:g> \} \\ <var:O3> := <var:O3> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:O0> = <nat:9> \land <var:O3> = <nat:4> \cdot <var:g> ^ <nat:2> \} \\ <var:O3> := <var:O3> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:O0> = <nat:9> \land <var:O3> = <nat:4> \cdot <var:g> ^ <nat:3> \} \\ <var:Q> := <var:O3> ; \\ \{ <var:J> = <var:g> \land <var:O0> = <nat:9> \land <var:Q> = <nat:4> \cdot <var:g> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:O0> \\ \{ <var:J> = <var:g> \land <var:Q> = <nat:4> \cdot <var:g> ^ <nat:3> + <nat:9> \} \end{eqnarray} Applying typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O0> := <nat:9> ; <var:O3> := <nat:4> ; <var:O3> := <var:O3> * <var:J> ; <var:O3> := <var:O3> * <var:J> ; <var:O3> := <var:O3> * <var:J> ; <var:Q> := <var:O3> ; <var:Q> := <var:Q> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:J> = <var:g> }} <def:poly> {{ <var:Q> = <nat:4> * <var:g> ^ <nat:3> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:O0> = <nat:9> /\ <var:O3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:O0> = <nat:9> /\ <var:O3> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:O0> = <nat:9> /\ <var:O3> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:O0> = <nat:9> /\ <var:O3> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:O0> = <nat:9> /\ <var:Q> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:Q> = <nat:4> * <var:g> ^ <nat:3> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 