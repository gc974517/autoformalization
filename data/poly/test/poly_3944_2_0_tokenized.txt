\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:4> ; <var:Y> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:C> = <var:A> $ before the evaluation of our code segment it must be that $ <var:Y> = <nat:4> $ after code segment exits . \end{theorem} \begin{proof} Arguing the correctness of this code segment is given through usual Hoare reasoning . Now , we see \verb | { <var:C> = <var:A> } <var:O0> := <nat:4> { <var:C> = <var:A> \land <var:O0> = <nat:4> } | and \verb | { <var:C> = <var:A> \land <var:O0> = <nat:4> } <var:Y> := <var:O0{ <var:C> = <var:A> \land <var:Y> = <nat:4> } | . This is deduced through the variable assignmet scheme given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:4> ; <var:Y> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:C> = <var:A> }} <def:poly> {{ <var:Y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:Y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 