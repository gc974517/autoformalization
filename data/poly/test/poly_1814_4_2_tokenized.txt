\begin{document} \begin{theorem} We define a code in \emph{Imp} as \begin{verbatim} <var:N> := <nat:4> ; <var:N> := <nat:4> + <var:N> * <var:g> ; <var:N> := <nat:4> + <var:N> * <var:g> ; <var:N> := <nat:3> + <var:N> * <var:g> \end{verbatim} Given it to be that $ <var:g> = <var:v> $ before executing this list of instructions it must be that $ <var:N> = <nat:4> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the list of commands is clear by typical Hoare reasoning . Going forward , we see the environment update statement giving $ <nat:4> $ to $ <var:N>$ . This moves $ \{ <var:g> = <var:v> \} $ to the postcondition $ \{ <var:g> = <var:v> \land <var:N> = <nat:4> \} $ . This is shown by the assignment law given by typical Hoare techniques . After , we have the assignment code letting $ <nat:4> + <var:N> * <var:g> $ into $ <var:N>$ . This command transfers the precondition $ \{ <var:g> = <var:v> \land <var:N> = <nat:4> \} $ into $ \{ <var:g> = <var:v> \land <var:N> = <nat:4> \times <var:v> + <nat:4> \} $ . This is rigorously given using the assignment inference rule found in standard Hoare techniques . Moving on to the next step , we have the environment update statement \verb | <var:N> := <nat:4> + <var:N> * <var:g> ; | . This redefines the precondition $ \{ <var:g> = <var:v> \land <var:N> = <nat:4> \times <var:v> + <nat:4> \} $ into the condition $ \{ <var:g> = <var:v> \land <var:N> = <nat:4> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:4> \} $ . Moving on , the environment update line yielding $ <nat:3> + <var:N> * <var:g$ into $ <var:N>$ . This code forwards the precondition $ \{ <var:g> = <var:v> \land <var:N> = <nat:4> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:4> \} $ to $ \{ <var:g> = <var:v> \land <var:N> = <nat:4> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:3> \} $ . This is known to be sound using the assignment rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:g> = <var:v> }} <var:N> := <nat:4> ; <var:N> := <nat:4> + <var:N> * <var:g> ; <var:N> := <nat:4> + <var:N> * <var:g> ; <var:N> := <nat:3> + <var:N> * <var:g> {{ <var:N> = <nat:4> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:N> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:N> = <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:N> = <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:N> = <nat:4> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 