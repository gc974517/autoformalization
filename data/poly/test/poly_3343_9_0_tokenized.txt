\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:1> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:A> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:A> ; <var:n2> := <var:n2> * <var:A> ; <var:y> := <var:n2> ; <var:y> := <var:y> + <var:n1> ; <var:y> := <var:y> + <var:n0> \end{verbatim} Assume that we have $ <var:A> = <var:h> $ ( given $ <var:h> $ ) ahead of the evaluation of our list of instructions , it must be that we have $ <var:y> = <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be accomplished by standard Hoare logic . Now , we have the variable update command \verb | <var:n0> := <nat:1> ; | . This moves the precondition $ \{ <var:A> = <var:h> \} $ into the postcondition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \} $ . Following , we have the assignment code \verb | <var:n1> := <nat:2> ; | . This transfers $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \} $ as the condition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \} $ . Paying attention to the proceeding piece of code seen in the list of instructions , we see the variable update code \verb | <var:n1> := <var:n1> * <var:A> ; | . This command advances $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \} $ toward $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \} $ . Looking at the proceeding command contained in the segment of code , the assignment statement \verb | <var:n2> := <nat:3> ; | . This forwards the condition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \} $ as the condition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \land <var:n2> = <nat:3> \} $ . Looking at the next step in the set of commands , we see the binding command assigning $ <var:n2> * <var:A> $ to $ <var:n2>$ . This takes $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \land <var:n2> = <nat:3> \} $ into the condition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \land <var:n2> = <nat:3> \times <var:h> \} $ . This is shown using the assignment inference rule given in standard Hoare logic . Now , we see the variable assignmet code yielding $ <var:n2> * <var:A> $ toward $ <var:n2>$ . This takes $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \land <var:n2> = <nat:3> \times <var:h> \} $ toward the condition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \land <var:n2> = <nat:3> \times <var:h> ^ <nat:2> \} $ . Looking at the subsequent piece of code seen in our code , we have the binding command \verb | <var:y> := <var:n2> ; | . This transfers the precondition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \land <var:n2> = <nat:3> \times <var:h> ^ <nat:2> \} $ toward the condition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \land <var:y> = <nat:3> \times <var:h> ^ <nat:2> \} $ . This is deduced using the assignment scheme of usual Hoare reasoning . Advancing on , we see the variable assignmet code \verb | <var:y> := <var:y> + <var:n1> ; | . This code forwards the precondition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:h> \land <var:y> = <nat:3> \times <var:h> ^ <nat:2> \} $ as the condition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:y> = <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} $ . Honing in on the proceeding statement seen in the series of commands , we see the environment update command giving $ <var:y> + <var:n0$ toward $ <var:y>$ . This line transfers the precondition $ \{ <var:A> = <var:h> \land <var:n0> = <nat:1> \land <var:y> = <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} $ to the postcondition $ \{ <var:A> = <var:h> \land <var:y> = <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:A> = <var:h> }} <var:n0> := <nat:1> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:A> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:A> ; <var:n2> := <var:n2> * <var:A> ; <var:y> := <var:n2> ; <var:y> := <var:y> + <var:n1> ; <var:y> := <var:y> + <var:n0> {{ <var:y> = <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:h> /\ <var:n2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:h> /\ <var:n2> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:h> /\ <var:n2> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:h> /\ <var:y> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:n0> = <nat:1> /\ <var:y> = <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:y> = <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 