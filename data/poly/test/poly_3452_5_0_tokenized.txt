\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:6> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:C> ; <var:s> := <var:a1> ; <var:s> := <var:s> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Allowing $ <var:C> = <var:D> $ prior to interpreting the series of commands , it holds that we have $ <var:s> = <nat:8> \cdot <var:D> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:D> \} \\ <var:a0> := <nat:6> ; \\ \{ <var:C> = <var:D> \land <var:a0> = <nat:6> \} \\ <var:a1> := <nat:8> ; \\ \{ <var:C> = <var:D> \land <var:a0> = <nat:6> \land <var:a1> = <nat:8> \} \\ <var:a1> := <var:a1> * <var:C> ; \\ \{ <var:C> = <var:D> \land <var:a0> = <nat:6> \land <var:a1> = <nat:8> \times <var:D> \} \\ <var:s> := <var:a1> ; \\ \{ <var:C> = <var:D> \land <var:a0> = <nat:6> \land <var:s> = <nat:8> \times <var:D> \} \\ <var:s> := <var:s> + <var:a0> \\ \{ <var:C> = <var:D> \land <var:s> = <nat:8> \times <var:D> + <nat:6> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:6> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:C> ; <var:s> := <var:a1> ; <var:s> := <var:s> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:C> = <var:D> }} <def:poly> {{ <var:s> = <nat:8> * <var:D> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:a0> = <nat:6> /\ <var:s> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:s> = <nat:8> * <var:D> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 