\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:7> ; <var:V> := <var:j0> \end{verbatim} Allowing that we have $ <var:F> = <var:w> $ prior to interpreting the program , it follows that $ <var:V> = <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be seen with standard Hoare techniques . Looking at the following bit of code contained in the set of commands , we see \begin{verbatim} { <var:F> = <var:w> } <var:j0> := <nat:7> { <var:F> = <var:w> \land <var:j0> = <nat:7> } \end{verbatim} Moving forward to the next step , we see \begin{verbatim} { <var:F> = <var:w> } <var:j0> := <nat:7> { <var:F> = <var:w> \land <var:j0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <var:j0> := <nat:7> ; <var:V> := <var:j0> {{ <var:V> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:V> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 