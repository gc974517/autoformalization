\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:2> ; <var:q> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:V> = <var:K> $ prior to evaluating our program , it follows that we have $ <var:q> = <nat:2> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning produces : \begin{eqnarray} \{ <var:V> = <var:K> \} \\ <var:B0> := <nat:2> ; \\ \{ <var:V> = <var:K> \land <var:B0> = <nat:2> \} \\ <var:q> := <var:B0> \\ \{ <var:V> = <var:K> \land <var:q> = <nat:2> \} \end{eqnarray} Considering the preceding argument , our program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:2> ; <var:q> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:V> = <var:K> }} <def:poly> {{ <var:q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 