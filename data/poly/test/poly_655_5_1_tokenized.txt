\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U1> := <var:E> ; <var:U0> := <nat:6> ; <var:U1> := <var:U1> * <nat:8> ; <var:K> := <var:U1> <var:K> := <var:K> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> in \emph{Imp} . Allow , given any $ <var:e> $ , it to hold that $ <var:E> = <var:e> $ before evaluating our series of commands then $ <var:K> = <nat:8> \cdot <var:e> + <nat:6> $ once series of commands has finished executing . \end{theorem} \begin{proof} Applying usual Hoare reasoning returns : \begin{eqnarray} \{ <var:E> = <var:e> \} \\ <var:U1> := <var:E> ; \\ \{ <var:E> = <var:e> \land <var:U1> = <var:e> \} \\ <var:U0> := <nat:6> ; \\ \{ <var:E> = <var:e> \land <var:U1> = <var:e> \land <var:U0> = <nat:6> \} \\ <var:U1> := <var:U1> * <nat:8> ; \\ \{ <var:E> = <var:e> \land <var:U1> = <nat:8> * <var:e> \land <var:U0> = <nat:6> \} \\ <var:K> := <var:U1> \\ \{ <var:E> = <var:e> \land <var:U0> = <nat:6> \land <var:K> = <nat:8> * <var:e> \} \\ <var:K> := <var:K> + <var:U0> \\ \{ <var:E> = <var:e> \land <var:K> = <nat:8> * <var:e> + <nat:6> \} \end{eqnarray} Thusly , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:E> ; <var:U0> := <nat:6> ; <var:U1> := <var:U1> * <nat:8> ; <var:K> := <var:U1> <var:K> := <var:K> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:E> = <var:e> }} <def:poly> {{ <var:K> = <nat:8> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:U1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:U1> = <var:e> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:U1> = <nat:8> * <var:e> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:U0> = <nat:6> /\ <var:K> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:K> = <nat:8> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 