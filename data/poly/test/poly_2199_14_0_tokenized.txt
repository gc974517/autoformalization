\begin{document} \begin{theorem} Take a list of instructions : \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:D> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:D> ; <var:W2> := <var:W2> * <var:D> ; <var:W3> := <nat:8> ; <var:W3> := <var:W3> * <var:D> ; <var:W3> := <var:W3> * <var:D> ; <var:W3> := <var:W3> * <var:D> ; <var:e> := <var:W3> ; <var:e> := <var:e> + <var:W2> ; <var:e> := <var:e> + <var:W1> ; <var:e> := <var:e> + <var:W0> \end{verbatim} Assume that we have $ <var:D> = <var:J> $ , given any natural numbers $ <var:J> $ , prior to executing our segment of code , then $ <var:e> = <nat:8> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands can be given using Hoare techniques . Now , the variable binding statement letting $ <nat:1> $ to $ <var:W0>$ . This line transfers the condition $ \{ <var:D> = <var:J> \} $ toward the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \} $ . Advancing to the upcoming bit of code seen in our set of instructions , we have the environment update statement \verb | <var:W1> := <nat:1> ; | . This forwards the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \} $ as the postcondition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \} $ . This is shown to be logically sound through the assignment inference rule defined in typical Hoare reasoning . Moving forward , the assignment statement \verb | <var:W1> := <var:W1> * <var:D> ; | . This takes $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \} $ toward the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \} $ . Observing the following piece of code seen in our program , we have the assignment line \verb | <var:W2> := <nat:8> ; | . This code moves $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \} $ into the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \} $ . Advancing to the subsequent bit of code in our code , the environment update statement assigning $ <var:W2> * <var:D> $ toward $ <var:W2>$ . This forwards the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \} $ toward the postcondition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> \} $ . Paying attention to the subsequent bit of code seen in our set of commands , the statement defining $ <var:W2> * <var:D> $ toward $ <var:W2>$ . This code transfers the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> \} $ to $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \} $ . This is deduced through the assignment inference rule of standard Hoare logic . Taking another step toward the upcoming bit of code found in our segment of code , the assignment command binding $ <nat:8> $ into $ <var:W3>$ . This transfers the precondition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \} $ to the postcondition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:W3> = <nat:8> \} $ . This is shown by the assignment rule given in typical Hoare reasoning . Further , the assignment line \verb | <var:W3> := <var:W3> * <var:D> ; | . This forwards $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:W3> = <nat:8> \} $ into the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:J> \} $ . Looking at the subsequent line found in our set of commands , we see the variable update statement \verb | <var:W3> := <var:W3> * <var:D> ; | . This line advances the precondition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:J> \} $ to the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:J> ^ <nat:2> \} $ . This is sound with the assignment law defined by typical Hoare logic . Shifting focus toward the proceeding piece of code found in our program , the variable binding statement \verb | <var:W3> := <var:W3> * <var:D> ; | . This advances $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:J> ^ <nat:2> \} $ as the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:J> ^ <nat:3> \} $ . This is sound with the assignment scheme of usual Hoare logic . Stepping through , the environment update command \verb | <var:e> := <var:W3> ; | . This moves the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:J> ^ <nat:3> \} $ as the postcondition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:e> = <nat:8> \times <var:J> ^ <nat:3> \} $ . This is guaranteed with the assignment inference rule defined by standard Hoare techniques . Going to the next step , the variable assignmet line binding $ <var:e> + <var:W2> $ to $ <var:e>$ . This transfers the precondition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:W2> = <nat:8> \times <var:J> ^ <nat:2> \land <var:e> = <nat:8> \times <var:J> ^ <nat:3> \} $ to the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:e> = <nat:8> \times <var:J> ^ <nat:3> + <nat:8> \times <var:J> ^ <nat:2> \} $ . This is given with the assignment scheme defined by standard Hoare logic . Immediately after , we have the variable update line \verb | <var:e> := <var:e> + <var:W1> ; | . This redefines the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:W1> = <nat:1> \times <var:J> \land <var:e> = <nat:8> \times <var:J> ^ <nat:3> + <nat:8> \times <var:J> ^ <nat:2> \} $ as the condition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:e> = <nat:8> \times <var:J> ^ <nat:3> + <nat:8> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> \} $ . Looking at the upcoming statement in our segment of code , the variable update command assigning $ <var:e> + <var:W0$ into $ <var:e>$ . This command advances the precondition $ \{ <var:D> = <var:J> \land <var:W0> = <nat:1> \land <var:e> = <nat:8> \times <var:J> ^ <nat:3> + <nat:8> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> \} $ to $ \{ <var:D> = <var:J> \land <var:e> = <nat:8> \times <var:J> ^ <nat:3> + <nat:8> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:D> = <var:J> }} <var:W0> := <nat:1> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:D> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:D> ; <var:W2> := <var:W2> * <var:D> ; <var:W3> := <nat:8> ; <var:W3> := <var:W3> * <var:D> ; <var:W3> := <var:W3> * <var:D> ; <var:W3> := <var:W3> * <var:D> ; <var:e> := <var:W3> ; <var:e> := <var:e> + <var:W2> ; <var:e> := <var:e> + <var:W1> ; <var:e> := <var:e> + <var:W0> {{ <var:e> = <nat:8> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:W2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:W2> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:W2> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:W2> = <nat:8> * <var:J> ^ <nat:2> /\ <var:W3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:W2> = <nat:8> * <var:J> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:W2> = <nat:8> * <var:J> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:W2> = <nat:8> * <var:J> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:W2> = <nat:8> * <var:J> ^ <nat:2> /\ <var:e> = <nat:8> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:1> * <var:J> /\ <var:e> = <nat:8> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:W0> = <nat:1> /\ <var:e> = <nat:8> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:e> = <nat:8> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 