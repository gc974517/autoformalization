\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:1> ; <var:O> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:q> = <var:I> $ --- for any positive integers $ <var:I> $ --- prior to running this set of instructions it must be that $ <var:O> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands can be seen using standard Hoare techniques . Further , we have \[ \begin{tabular} {rcl} \{ <var:q> = <var:I> \} & <var:x0> := <nat:1> & \{ <var:q> = <var:I> \land <var:x0> = <nat:1> \} \end{tabular} This is rigorously given through the variable assignmet inference rule found in usual Hoare logic . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:I> \} & <var:x0> := <nat:1> & \{ <var:q> = <var:I> \land <var:x0> = <nat:1> \} \end{tabular} This is shown by the variable binding rule of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:O> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:q> = <var:I> }} <def:poly> {{ <var:O> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:O> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 