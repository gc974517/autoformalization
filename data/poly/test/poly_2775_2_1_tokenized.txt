\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:1> ; <var:R> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Assume it to be that $ <var:D> = <var:o> $ ahead of the execution of this set of commands , it holds that $ <var:R> = <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions can be done using Hoare reasoning . After , we have the environment update line \verb | <var:d0> := <nat:1> ; | . This moves the precondition $ \{ <var:D> = <var:o> \} $ to $ \{ <var:D> = <var:o> \land <var:d0> = <nat:1> \} $ . This is known to be sound by the assignment inference rule defined by Hoare logic . After , we see the variable binding line \verb | <var:R> := <var:d0> | . This moves $ \{ <var:D> = <var:o> \land <var:d0> = <nat:1> \} $ as the condition $ \{ <var:D> = <var:o> \land <var:R> = <nat:1> \} $ . This is rigorously given by the assignment law found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:R> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:D> = <var:o> }} <def:poly> {{ <var:R> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:R> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 