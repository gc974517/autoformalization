\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} such that \begin{verbatim} <var:s1> := <var:w> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:5> ; <var:W> := <var:s1> <var:W> := <var:W> + <var:s0> \end{verbatim} Assuming it to be that $ <var:w> = <var:e> $ ahead of the execution of the list of commands , it must be that $ <var:W> = <nat:5> \times <var:e> + <nat:4> $ when segment of code has terminated . \end{theorem} \begin{proof} Observe the following decorated series of instructions . \begin{eqnarray} \{ <var:w> = <var:e> \} \\ <var:s1> := <var:w> ; \\ \{ <var:w> = <var:e> \land <var:s1> = <var:e> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:w> = <var:e> \land <var:s1> = <var:e> \land <var:s0> = <nat:4> \} \\ <var:s1> := <var:s1> * <nat:5> ; \\ \{ <var:w> = <var:e> \land <var:s1> = <nat:5> * <var:e> \land <var:s0> = <nat:4> \} \\ <var:W> := <var:s1> \\ \{ <var:w> = <var:e> \land <var:s0> = <nat:4> \land <var:W> = <nat:5> * <var:e> \} \\ <var:W> := <var:W> + <var:s0> \\ \{ <var:w> = <var:e> \land <var:W> = <nat:5> * <var:e> + <nat:4> \} \end{eqnarray} The application of typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:w> = <var:e> }} <var:s1> := <var:w> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:5> ; <var:W> := <var:s1> <var:W> := <var:W> + <var:s0> {{ <var:W> = <nat:5> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:s1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:s1> = <var:e> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:s1> = <nat:5> * <var:e> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:s0> = <nat:4> /\ <var:W> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:W> = <nat:5> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 