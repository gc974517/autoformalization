\begin{document} \begin{theorem} We define a program : \begin{verbatim} <var:i0> := <nat:6> ; <var:d> := <var:i0> \end{verbatim} Assuming ( for any $ <var:K> \in \mathbb{N} $ ) that $ <var:g> = <var:K> $ before interpreting our code segment , then we see $ <var:d> = <nat:6> $ after code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:K> \} \\ <var:i0> := <nat:6> ; \\ \{ <var:g> = <var:K> \land <var:i0> = <nat:6> \} \\ <var:d> := <var:i0> \\ \{ <var:g> = <var:K> \land <var:d> = <nat:6> \} \end{eqnarray} The application of standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:g> = <var:K> }} <var:i0> := <nat:6> ; <var:d> := <var:i0> {{ <var:d> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:K> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:K> /\ <var:d> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 