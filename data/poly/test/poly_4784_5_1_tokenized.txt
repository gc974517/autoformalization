\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:P> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:6> ; <var:S> := <var:C1> <var:S> := <var:S> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:P> = <var:F> $ for all $ <var:F> \in \mathbb{Z}^+ $ ahead of the execution of our list of commands , then $ <var:S> = <nat:6> \times <var:F> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for this list of commands is done using the below decorated series of commands . \begin{eqnarray} \{ <var:P> = <var:F> \} \\ <var:C1> := <var:P> ; \\ \{ <var:P> = <var:F> \land <var:C1> = <var:F> \} \\ <var:C0> := <nat:7> ; \\ \{ <var:P> = <var:F> \land <var:C1> = <var:F> \land <var:C0> = <nat:7> \} \\ <var:C1> := <var:C1> * <nat:6> ; \\ \{ <var:P> = <var:F> \land <var:C1> = <nat:6> * <var:F> \land <var:C0> = <nat:7> \} \\ <var:S> := <var:C1> \\ \{ <var:P> = <var:F> \land <var:C0> = <nat:7> \land <var:S> = <nat:6> * <var:F> \} \\ <var:S> := <var:S> + <var:C0> \\ \{ <var:P> = <var:F> \land <var:S> = <nat:6> * <var:F> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:P> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:6> ; <var:S> := <var:C1> <var:S> := <var:S> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:P> = <var:F> }} <def:poly> {{ <var:S> = <nat:6> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:C1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:C1> = <var:F> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:C1> = <nat:6> * <var:F> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:C0> = <nat:7> /\ <var:S> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:S> = <nat:6> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 