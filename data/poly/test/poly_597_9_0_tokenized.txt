\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:5> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:U> ; <var:R2> := <nat:6> ; <var:R2> := <var:R2> * <var:U> ; <var:R2> := <var:R2> * <var:U> ; <var:Z> := <var:R2> ; <var:Z> := <var:Z> + <var:R1> ; <var:Z> := <var:Z> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:U> = <var:z> $ , with some positive numbers $ <var:z> $ , before the evaluation of the set of commands then we have $ <var:Z> = <nat:6> \times <var:z> ^ <nat:2> + <nat:5> \times <var:z> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions is done by typical Hoare logic . Looking at the upcoming step in the series of instructions , the statement \verb | <var:R0> := <nat:5> ; | . This moves the precondition $ \{ <var:U> = <var:z> \} $ as $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \} $ . Moving on , the line \verb | <var:R1> := <nat:5> ; | . This line takes the precondition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \} $ toward the postcondition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> \} $ . After , we have the variable binding statement assigning $ <var:R1> * <var:U> $ as $ <var:R1>$ . This code transfers $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> \} $ to the postcondition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \} $ . This is known to be sound with the assignment rule defined in typical Hoare reasoning . After , the variable assignmet line defining $ <nat:6> $ to $ <var:R2>$ . This statement takes $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \} $ as the condition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \land <var:R2> = <nat:6> \} $ . Moving onward , we see the assignment statement giving $ <var:R2> * <var:U> $ as $ <var:R2>$ . This takes the condition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \land <var:R2> = <nat:6> \} $ to the condition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \land <var:R2> = <nat:6> * <var:z> \} $ . Focusing on the subsequent line found in the set of instructions , we have the assignment line \verb | <var:R2> := <var:R2> * <var:U> ; | . This line moves the condition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \land <var:R2> = <nat:6> * <var:z> \} $ as $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \land <var:R2> = <nat:6> * <var:z> ^ <nat:2> \} $ . This is given by the assignment rule defined by usual Hoare logic . Moving forward to the next step , the variable binding code \verb | <var:Z> := <var:R2> ; | . This statement moves the precondition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \land <var:R2> = <nat:6> * <var:z> ^ <nat:2> \} $ to the condition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \land <var:Z> = <nat:6> * <var:z> ^ <nat:2> \} $ . This is sound using the assignment scheme found in Hoare techniques . Advancing on , the command \verb | <var:Z> := <var:Z> + <var:R1> ; | . This advances the precondition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:R1> = <nat:5> * <var:z> \land <var:Z> = <nat:6> * <var:z> ^ <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:Z> = <nat:6> * <var:z> ^ <nat:2> + <nat:5> * <var:z> \} $ . Moving on , we have the statement \verb | <var:Z> := <var:Z> + <var:R0> | . This code forwards $ \{ <var:U> = <var:z> \land <var:R0> = <nat:5> \land <var:Z> = <nat:6> * <var:z> ^ <nat:2> + <nat:5> * <var:z> \} $ to the condition $ \{ <var:U> = <var:z> \land <var:Z> = <nat:6> * <var:z> ^ <nat:2> + <nat:5> * <var:z> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:5> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:U> ; <var:R2> := <nat:6> ; <var:R2> := <var:R2> * <var:U> ; <var:R2> := <var:R2> * <var:U> ; <var:Z> := <var:R2> ; <var:Z> := <var:Z> + <var:R1> ; <var:Z> := <var:Z> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:U> = <var:z> }} <def:poly> {{ <var:Z> = <nat:6> * <var:z> ^ <nat:2> + <nat:5> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:5> * <var:z> /\ <var:R2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:5> * <var:z> /\ <var:R2> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:5> * <var:z> /\ <var:R2> = <nat:6> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:5> * <var:z> /\ <var:Z> = <nat:6> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:R0> = <nat:5> /\ <var:Z> = <nat:6> * <var:z> ^ <nat:2> + <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:Z> = <nat:6> * <var:z> ^ <nat:2> + <nat:5> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 