\begin{document} \begin{theorem} Consider a series of instructions : \begin{verbatim} <var:Y0> := <nat:8> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:R> ; <var:Y2> := <nat:6> ; <var:Y2> := <var:Y2> * <var:R> ; <var:Y2> := <var:Y2> * <var:R> ; <var:Y3> := <nat:4> ; <var:Y3> := <var:Y3> * <var:R> ; <var:Y3> := <var:Y3> * <var:R> ; <var:Y3> := <var:Y3> * <var:R> ; <var:m> := <var:Y3> ; <var:m> := <var:m> + <var:Y2> ; <var:m> := <var:m> + <var:Y1> ; <var:m> := <var:m> + <var:Y0> \end{verbatim} Allow it to hold that $ <var:R> = <var:d> $ prior to executing the list of commands it must be that we see $ <var:m> = <nat:4> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:8> $ when code is done . \end{theorem} \begin{proof} The proof of this program can be shown by typical Hoare logic . Moving on to the next step , the variable assignmet line letting $ <nat:8> $ into $ <var:Y0>$ . This moves the precondition $ \{ <var:R> = <var:d> \} $ into $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \} $ . Stepping through , we have the variable assignmet line letting $ <nat:2> $ as $ <var:Y1>$ . This advances the condition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \} $ into $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \} $ . This is rigorously given by the assignment law from typical Hoare techniques . Considering the next piece of code in the series of instructions , the binding code defining $ <var:Y1> * <var:R> $ toward $ <var:Y1>$ . This line moves the condition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \} $ as $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \} $ . This is ensured using the assignment rule defined by typical Hoare techniques . Honing in on the following step in our code segment , we have the variable update statement \verb | <var:Y2> := <nat:6> ; | . This statement advances the condition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \} $ as $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \} $ . Moving on to the next step , the environment update statement \verb | <var:Y2> := <var:Y2> * <var:R> ; | . This takes the precondition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \} $ as $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> \} $ . This is shown using the assignment inference rule given by typical Hoare techniques . Shifting focus toward the next command found in our list of commands , we have the variable binding code letting $ <var:Y2> * <var:R> $ to $ <var:Y2>$ . This moves $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> \} $ to the postcondition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \} $ . This is known to be sound with the assignment rule obtained from Hoare reasoning . Focusing on the next statement found in our program , we see the binding line \verb | <var:Y3> := <nat:4> ; | . This moves $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \} $ into the condition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:Y3> = <nat:4> \} $ . Taking a look at the upcoming piece of code contained in our set of commands , we have the environment update statement \verb | <var:Y3> := <var:Y3> * <var:R> ; | . This code forwards the condition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:Y3> = <nat:4> \} $ toward $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:Y3> = <nat:4> \times <var:d> \} $ . Next , we have the variable assignmet line yielding $ <var:Y3> * <var:R> $ toward $ <var:Y3>$ . This statement advances the precondition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:Y3> = <nat:4> \times <var:d> \} $ into $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:Y3> = <nat:4> \times <var:d> ^ <nat:2> \} $ . This is known to be sound using the assignment law of Hoare logic . Advancing to the next step , we have the variable assignmet code letting $ <var:Y3> * <var:R> $ toward $ <var:Y3>$ . This code takes $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:Y3> = <nat:4> \times <var:d> ^ <nat:2> \} $ to $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:Y3> = <nat:4> \times <var:d> ^ <nat:3> \} $ . Advancing to the following line of code in the segment of code , we have the assignment statement assigning $ <var:Y3> $ toward $ <var:m>$ . This transfers the condition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:Y3> = <nat:4> \times <var:d> ^ <nat:3> \} $ as the postcondition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:m> = <nat:4> \times <var:d> ^ <nat:3> \} $ . This is shown through the assignment law given by standard Hoare techniques . Honing in on the upcoming statement found in our list of commands , the binding command binding $ <var:m> + <var:Y2> $ into $ <var:m>$ . This command moves the condition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:Y2> = <nat:6> \times <var:d> ^ <nat:2> \land <var:m> = <nat:4> \times <var:d> ^ <nat:3> \} $ as $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:m> = <nat:4> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> \} $ . This is guaranteed using the assignment scheme from Hoare techniques . Next , the binding command \verb | <var:m> := <var:m> + <var:Y1> ; | . This transfers the precondition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:2> \times <var:d> \land <var:m> = <nat:4> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> \} $ into the condition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:m> = <nat:4> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> \} $ . This is rigorously given through the assignment inference rule found in typical Hoare logic . Advancing on , the binding statement \verb | <var:m> := <var:m> + <var:Y0> | . This command advances the precondition $ \{ <var:R> = <var:d> \land <var:Y0> = <nat:8> \land <var:m> = <nat:4> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> \} $ into the condition $ \{ <var:R> = <var:d> \land <var:m> = <nat:4> \times <var:d> ^ <nat:3> + <nat:6> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:R> = <var:d> }} <var:Y0> := <nat:8> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:R> ; <var:Y2> := <nat:6> ; <var:Y2> := <var:Y2> * <var:R> ; <var:Y2> := <var:Y2> * <var:R> ; <var:Y3> := <nat:4> ; <var:Y3> := <var:Y3> * <var:R> ; <var:Y3> := <var:Y3> * <var:R> ; <var:Y3> := <var:Y3> * <var:R> ; <var:m> := <var:Y3> ; <var:m> := <var:m> + <var:Y2> ; <var:m> := <var:m> + <var:Y1> ; <var:m> := <var:m> + <var:Y0> {{ <var:m> = <nat:4> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:Y2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:Y2> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:Y2> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:Y2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:Y3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:Y2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:Y3> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:Y2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:Y3> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:Y2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:Y3> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:Y2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:m> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:2> * <var:d> /\ <var:m> = <nat:4> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:Y0> = <nat:8> /\ <var:m> = <nat:4> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:m> = <nat:4> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 