\begin{document} \begin{theorem} We define a list of commands as \begin{verbatim} <var:b1> := <var:I> ; <var:b2> := <var:b1> * <var:I> ; <var:b3> := <var:b2> * <var:I> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:3> ; <var:b2> := <var:b2> * <nat:9> ; <var:b3> := <var:b3> * <nat:2> ; <var:g> := <var:b3> <var:g> := <var:g> + <var:b2> <var:g> := <var:g> + <var:b1> <var:g> := <var:g> + <var:b0> \end{verbatim} Allow it to hold that $ <var:I> = <var:n> $ , given positive integer coefficients $ <var:n> $ , before executing the series of instructions it must be that we see $ <var:g> = <nat:2> \times <var:n> ^ <nat:3> + <nat:9> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:7> $ when list of instructions has finished . \end{theorem} \begin{proof} Proving correctness for the segment of code can be accomplished using usual Hoare logic . Stepping through , we see \verb | { <var:I> = <var:n> } <var:b1> := <var:I> { <var:I> = <var:n> \land <var:b1> = <var:n> } | , \verb | { <var:I> = <var:n> \land <var:b1> = <var:n> } <var:b2> := <var:b1> * <var:I> { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> } | , \verb | { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> } <var:b3> := <var:b2> * <var:I> { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> } | , \verb | { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> } <var:b0> := <nat:7> { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> \land <var:b0> = <nat:7> } | , \verb | { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> \land <var:b0> = <nat:7> } <var:b1> := <var:b1> * <nat:3> { <var:I> = <var:n> \land <var:b1> = <nat:3> \times <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> \land <var:b0> = <nat:7> } | , \verb | { <var:I> = <var:n> \land <var:b1> = <nat:3> \times <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> \land <var:b0> = <nat:7> } <var:b2> := <var:b2> * <nat:9> { <var:I> = <var:n> \land <var:b1> = <nat:3> \times <var:n> \land <var:b2> = <nat:9> \times <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> \land <var:b0> = <nat:7> } | and \verb | { <var:I> = <var:n> \land <var:b1> = <nat:3> \times <var:n> \land <var:b2> = <nat:9> \times <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> \land <var:b0> = <nat:7> } <var:b3> := <var:b3> * <nat:2> { <var:I> = <var:n> \land <var:b1> = <nat:3> \times <var:n> \land <var:b2> = <nat:9> \times <var:n> ^ <nat:2> \land <var:b3> = <nat:2> \times <var:n> ^ <nat:3> \land <var:b0> = <nat:7> } | . Paying attention to the next commands seen in our code , we have \verb | { <var:I> = <var:n> } <var:b1> := <var:I> { <var:I> = <var:n> \land <var:b1> = <var:n> } | , \verb | { <var:I> = <var:n> \land <var:b1> = <var:n> } <var:b2> := <var:b1> * <var:I> { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> } | , \verb | { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> } <var:b3> := <var:b2> * <var:I> { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> } | and \verb | { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> } <var:b0> := <nat:7> { <var:I> = <var:n> \land <var:b1> = <var:n> \land <var:b2> = <var:n> ^ <nat:2> \land <var:b3> = <var:n> ^ <nat:3> \land <var:b0> = <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:I> = <var:n> }} <var:b1> := <var:I> ; <var:b2> := <var:b1> * <var:I> ; <var:b3> := <var:b2> * <var:I> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:3> ; <var:b2> := <var:b2> * <nat:9> ; <var:b3> := <var:b3> * <nat:2> ; <var:g> := <var:b3> <var:g> := <var:g> + <var:b2> <var:g> := <var:g> + <var:b1> <var:g> := <var:g> + <var:b0> {{ <var:g> = <nat:2> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <var:n> /\ <var:b2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <var:n> /\ <var:b2> = <var:n> ^ <nat:2> /\ <var:b3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <var:n> /\ <var:b2> = <var:n> ^ <nat:2> /\ <var:b3> = <var:n> ^ <nat:3> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <nat:3> * <var:n> /\ <var:b2> = <var:n> ^ <nat:2> /\ <var:b3> = <var:n> ^ <nat:3> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <nat:3> * <var:n> /\ <var:b2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:b3> = <var:n> ^ <nat:3> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <nat:3> * <var:n> /\ <var:b2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:b3> = <nat:2> * <var:n> ^ <nat:3> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <nat:3> * <var:n> /\ <var:b2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:b0> = <nat:7> /\ <var:g> = <nat:2> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b1> = <nat:3> * <var:n> /\ <var:b0> = <nat:7> /\ <var:g> = <nat:2> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:b0> = <nat:7> /\ <var:g> = <nat:2> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:g> = <nat:2> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 