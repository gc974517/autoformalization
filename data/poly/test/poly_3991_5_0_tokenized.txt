\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:9> ; <var:V1> := <nat:3> ; <var:V1> := <var:V1> * <var:P> ; <var:q> := <var:V1> ; <var:q> := <var:q> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Assuming taking integers $ <var:F> $ $ <var:P> = <var:F> $ before running this list of commands it must be that $ <var:q> = <nat:3> \times <var:F> + <nat:9> $ when set of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:F> \} \\ <var:V0> := <nat:9> ; \\ \{ <var:P> = <var:F> \land <var:V0> = <nat:9> \} \\ <var:V1> := <nat:3> ; \\ \{ <var:P> = <var:F> \land <var:V0> = <nat:9> \land <var:V1> = <nat:3> \} \\ <var:V1> := <var:V1> * <var:P> ; \\ \{ <var:P> = <var:F> \land <var:V0> = <nat:9> \land <var:V1> = <nat:3> \times <var:F> \} \\ <var:q> := <var:V1> ; \\ \{ <var:P> = <var:F> \land <var:V0> = <nat:9> \land <var:q> = <nat:3> \times <var:F> \} \\ <var:q> := <var:q> + <var:V0> \\ \{ <var:P> = <var:F> \land <var:q> = <nat:3> \times <var:F> + <nat:9> \} \end{eqnarray} Applying usual Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:9> ; <var:V1> := <nat:3> ; <var:V1> := <var:V1> * <var:P> ; <var:q> := <var:V1> ; <var:q> := <var:q> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:P> = <var:F> }} <def:poly> {{ <var:q> = <nat:3> * <var:F> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:V0> = <nat:9> /\ <var:q> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:F> /\ <var:q> = <nat:3> * <var:F> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 