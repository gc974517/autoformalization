\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:3> ; <var:O> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allow , for every $ <var:C> \in \mathbb{N} $ , that we have $ <var:k> = <var:C> $ before evaluating our series of commands , it holds that $ <var:O> = <nat:3> $ . \end{theorem} \begin{proof} Using Hoare techniques produces : \begin{eqnarray} \{ <var:k> = <var:C> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:k> = <var:C> \land <var:w0> = <nat:3> \} \\ <var:O> := <var:w0> \\ \{ <var:k> = <var:C> \land <var:O> = <nat:3> \} \end{eqnarray} Considering the preceding argument , the code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:O> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:k> = <var:C> }} <def:poly> {{ <var:O> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:O> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 