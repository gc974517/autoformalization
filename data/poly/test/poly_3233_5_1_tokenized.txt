\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:m> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:9> ; <var:u> := <var:a1> <var:u> := <var:u> + <var:a0> \end{verbatim} Allow that $ <var:m> = <var:Y> $ --- assuming some whole numbers $ <var:Y> $ --- ahead of executing this list of instructions then we have $ <var:u> = <nat:9> \cdot <var:Y> + <nat:5> $ when set of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for the program can be demonstrated by usual Hoare techniques . Honing in on the subsequent bits of codecontained in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:Y> \} & <var:a1> := <var:m> & \{ <var:m> = <var:Y> \land <var:a1> = <var:Y> \} \\ \{ <var:m> = <var:Y> \land <var:a1> = <var:Y> \} & <var:a0> := <nat:5> & \{ <var:m> = <var:Y> \land <var:a1> = <var:Y> \land <var:a0> = <nat:5> \} \\ \{ <var:m> = <var:Y> \land <var:a1> = <var:Y> \land <var:a0> = <nat:5> \} & <var:a1> := <var:a1> * <nat:9> & \{ <var:m> = <var:Y> \land <var:a1> = <nat:9> * <var:Y> \land <var:a0> = <nat:5> \} \end{tabular} Looking at the subsequent lines of codecontained in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:m> = <var:Y> \} & <var:a1> := <var:m> & \{ <var:m> = <var:Y> \land <var:a1> = <var:Y> \} \\ \{ <var:m> = <var:Y> \land <var:a1> = <var:Y> \} & <var:a0> := <nat:5> & \{ <var:m> = <var:Y> \land <var:a1> = <var:Y> \land <var:a0> = <nat:5> \} \end{tabular} This is guaranteed with the binding law in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:m> = <var:Y> }} <var:a1> := <var:m> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:9> ; <var:u> := <var:a1> <var:u> := <var:u> + <var:a0> {{ <var:u> = <nat:9> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:a1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:a1> = <var:Y> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:a1> = <nat:9> * <var:Y> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:a0> = <nat:5> /\ <var:u> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:u> = <nat:9> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 