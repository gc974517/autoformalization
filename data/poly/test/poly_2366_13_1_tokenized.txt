\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as \begin{verbatim} <var:B1> := <var:E> ; <var:B2> := <var:B1> * <var:E> ; <var:B3> := <var:B2> * <var:E> ; <var:B4> := <var:B3> * <var:E> ; <var:B5> := <var:B4> * <var:E> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:3> ; <var:B3> := <var:B3> * <nat:3> ; <var:B5> := <var:B5> * <nat:1> ; <var:H> := <var:B5> <var:H> := <var:H> + <var:B3> <var:H> := <var:H> + <var:B1> <var:H> := <var:H> + <var:B0> \end{verbatim} Allow it to hold that $ <var:E> = <var:q> $ , given $ <var:q> $ , prior to evaluating our program it must be that $ <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:3> $ once series of commands has executed . \end{theorem} \begin{proof} The method of proof for the segment of code is accomplished through Hoare reasoning . Moving forward , we have the line assigning $ <var:E> $ to $ <var:B1>$ . This line forwards $ \{ <var:E> = <var:q> \} $ to the postcondition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \} $ . This is guaranteed through the assignment scheme found in usual Hoare techniques . Moving on , we see the binding command \verb | <var:B2> := <var:B1> * <var:E> ; | . This code redefines the precondition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \} $ toward the condition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \} $ . This is sound with the assignment law found in standard Hoare techniques . Observing the following piece of code found in our series of instructions , we see the variable update code \verb | <var:B3> := <var:B2> * <var:E> ; | . This takes the precondition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \} $ into the condition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \} $ . Observing the proceeding line of code contained in our program , the binding command assigning $ <var:B3> * <var:E> $ into $ <var:B4>$ . This command forwards the condition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \} $ into the postcondition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \} $ . This is known to be sound using the assignment inference rule in standard Hoare reasoning . Observing the following step contained in the list of instructions , we see the statement \verb | <var:B5> := <var:B4> * <var:E> ; | . This forwards $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \} $ toward $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <var:q> ^ <nat:5> \} $ . This is given using the assignment rule found in typical Hoare techniques . Honing in on the proceeding step in the list of commands , the binding statement \verb | <var:B0> := <nat:3> ; | . This forwards $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <var:q> ^ <nat:5> \} $ toward the condition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <var:q> ^ <nat:5> \land <var:B0> = <nat:3> \} $ . Jumping to the proceeding command contained in the list of commands , the variable assignmet code \verb | <var:B1> := <var:B1> * <nat:3> ; | . This forwards the precondition $ \{ <var:E> = <var:q> \land <var:B1> = <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <var:q> ^ <nat:5> \land <var:B0> = <nat:3> \} $ as the condition $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <var:q> ^ <nat:5> \land <var:B0> = <nat:3> \} $ . This is rigorously given by the assignment rule given by Hoare logic . Considering the proceeding line of code in our series of commands , we have the statement binding $ <var:B3> * <nat:3> $ as $ <var:B3>$ . This command moves the precondition $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <var:q> ^ <nat:5> \land <var:B0> = <nat:3> \} $ into $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <nat:3> * <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <var:q> ^ <nat:5> \land <var:B0> = <nat:3> \} $ . This is ensured with the assignment rule of standard Hoare reasoning . Honing in on the subsequent command seen in the program , we have the code \verb | <var:B5> := <var:B5> * <nat:1> ; | . This redefines the condition $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <nat:3> * <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <var:q> ^ <nat:5> \land <var:B0> = <nat:3> \} $ into the postcondition $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <nat:3> * <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <nat:1> * <var:q> ^ <nat:5> \land <var:B0> = <nat:3> \} $ . Moving on to the upcoming bit of code in our code , we have the variable binding code binding $ <var:B5$ toward $ <var:H>$ . This takes the precondition $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <nat:3> * <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B5> = <nat:1> * <var:q> ^ <nat:5> \land <var:B0> = <nat:3> \} $ into the postcondition $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <nat:3> * <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B0> = <nat:3> \land <var:H> = <nat:1> * <var:q> ^ <nat:5> \} $ . This is shown through the assignment scheme found in Hoare reasoning . Shifting focus toward the next line of code in the list of instructions , the command binding $ <var:H> + <var:B3$ as $ <var:H>$ . This statement transfers the precondition $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B3> = <nat:3> * <var:q> ^ <nat:3> \land <var:B4> = <var:q> ^ <nat:4> \land <var:B0> = <nat:3> \land <var:H> = <nat:1> * <var:q> ^ <nat:5> \} $ toward $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> \} $ . This is ensured using the assignment inference rule found in typical Hoare logic . Going forward , we see the binding statement defining $ <var:H> + <var:B1$ toward $ <var:H>$ . This code forwards the precondition $ \{ <var:E> = <var:q> \land <var:B1> = <nat:3> * <var:q> \land <var:B2> = <var:q> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> \} $ into the condition $ \{ <var:E> = <var:q> \land <var:B0> = <nat:3> \land <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> \} $ . This is rigorously given through the assignment inference rule obtained from typical Hoare techniques . Shifting focus toward the next step in the program , we see the binding command binding $ <var:H> + <var:B0$ as $ <var:H>$ . This statement transfers $ \{ <var:E> = <var:q> \land <var:B0> = <nat:3> \land <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> \} $ into $ \{ <var:E> = <var:q> \land <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:3> \} $ . This is guaranteed by the assignment scheme defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <var:B4> : string := " <var:B4> " . Definition <var:B5> : string := " <var:B5> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:E> = <var:q> }} <var:B1> := <var:E> ; <var:B2> := <var:B1> * <var:E> ; <var:B3> := <var:B2> * <var:E> ; <var:B4> := <var:B3> * <var:E> ; <var:B5> := <var:B4> * <var:E> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:3> ; <var:B3> := <var:B3> * <nat:3> ; <var:B5> := <var:B5> * <nat:1> ; <var:H> := <var:B5> <var:H> := <var:H> + <var:B3> <var:H> := <var:H> + <var:B1> <var:H> := <var:H> + <var:B0> {{ <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <var:q> /\ <var:B2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B3> = <var:q> ^ <nat:3> /\ <var:B4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B3> = <var:q> ^ <nat:3> /\ <var:B4> = <var:q> ^ <nat:4> /\ <var:B5> = <var:q> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B3> = <var:q> ^ <nat:3> /\ <var:B4> = <var:q> ^ <nat:4> /\ <var:B5> = <var:q> ^ <nat:5> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <nat:3> * <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B3> = <var:q> ^ <nat:3> /\ <var:B4> = <var:q> ^ <nat:4> /\ <var:B5> = <var:q> ^ <nat:5> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <nat:3> * <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:q> ^ <nat:3> /\ <var:B4> = <var:q> ^ <nat:4> /\ <var:B5> = <var:q> ^ <nat:5> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <nat:3> * <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:q> ^ <nat:3> /\ <var:B4> = <var:q> ^ <nat:4> /\ <var:B5> = <nat:1> * <var:q> ^ <nat:5> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <nat:3> * <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:q> ^ <nat:3> /\ <var:B4> = <var:q> ^ <nat:4> /\ <var:B0> = <nat:3> /\ <var:H> = <nat:1> * <var:q> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B1> = <nat:3> * <var:q> /\ <var:B2> = <var:q> ^ <nat:2> /\ <var:B0> = <nat:3> /\ <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:B0> = <nat:3> /\ <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:H> = <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 