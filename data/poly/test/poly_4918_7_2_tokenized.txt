\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:C> := <nat:1> ; <var:C> := <nat:3> + <var:C> * <var:G> ; <var:C> := <nat:2> + <var:C> * <var:G> ; <var:C> := <nat:4> + <var:C> * <var:G> ; <var:C> := <nat:3> + <var:C> * <var:G> ; <var:C> := <nat:3> + <var:C> * <var:G> ; <var:C> := <nat:4> + <var:C> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:G> = <var:k> $ ahead of evaluating this series of instructions , it holds that $ <var:C> = <nat:1> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> $ when series of commands is done executing . \end{theorem} \begin{proof} The course of logic for this code is shown using typical Hoare logic . Going forward , the variable assignmet code letting $ <nat:1> $ to $ <var:C>$ . This takes the condition $ \{ <var:G> = <var:k> \} $ into the condition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \} $ . This is given using the assignment scheme from Hoare logic . Moving onward , we have the line \verb | <var:C> := <nat:3> + <var:C> * <var:G> ; | . This moves the condition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \} $ into $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> + <nat:3> \} $ . Moving forward , we have the assignment command \verb | <var:C> := <nat:2> + <var:C> * <var:G> ; | . This command transfers $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> + <nat:3> \} $ into $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:2> \} $ . Immediately after , the binding line assigning $ <nat:4> + <var:C> * <var:G> $ as $ <var:C>$ . This forwards the condition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:2> \} $ into the condition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:4> \} $ . Focusing on the next command in the program , we have the variable assignmet statement defining $ <nat:3> + <var:C> * <var:G> $ into $ <var:C>$ . This line transfers the precondition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:4> \} $ into the postcondition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:3> \} $ . Keeping momentum , the assignment statement \verb | <var:C> := <nat:3> + <var:C> * <var:G> ; | . This forwards $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:3> \} $ toward the condition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:2> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} $ . This is shown to be logically sound using the assignment rule given by usual Hoare reasoning . Keeping momentum , we see the environment update line \verb | <var:C> := <nat:4> + <var:C> * <var:G> | . This code moves the condition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:2> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} $ as the postcondition $ \{ <var:G> = <var:k> \land <var:C> = <nat:1> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:2> \times <var:k> ^ <nat:4> + <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:4> \} $ . This is deduced using the assignment scheme found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:1> ; <var:C> := <nat:3> + <var:C> * <var:G> ; <var:C> := <nat:2> + <var:C> * <var:G> ; <var:C> := <nat:4> + <var:C> * <var:G> ; <var:C> := <nat:3> + <var:C> * <var:G> ; <var:C> := <nat:3> + <var:C> * <var:G> ; <var:C> := <nat:4> + <var:C> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:G> = <var:k> }} <def:poly> {{ <var:C> = <nat:1> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:C> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:C> = <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:C> = <nat:1> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:C> = <nat:1> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:C> = <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:C> = <nat:1> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:C> = <nat:1> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 