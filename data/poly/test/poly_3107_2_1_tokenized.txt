\begin{document} \begin{theorem} We define the following code in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:1> ; <var:L> := <var:r0> \end{verbatim} Assume it to be that $ <var:d> = <var:B> $ ahead of running this list of instructions it follows that $ <var:L> = <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:d> = <var:B> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:d> = <var:B> \land <var:r0> = <nat:1> \} \\ <var:L> := <var:r0> \\ \{ <var:d> = <var:B> \land <var:L> = <nat:1> \} \end{eqnarray} Thusly , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:d> = <var:B> }} <var:r0> := <nat:1> ; <var:L> := <var:r0> {{ <var:L> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:L> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 