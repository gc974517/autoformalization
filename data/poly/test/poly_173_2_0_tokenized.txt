\begin{document} \begin{theorem} Define the following set of instructions such that \begin{verbatim} <var:S0> := <nat:1> ; <var:L> := <var:S0> \end{verbatim} Assume that we have $ <var:P> = <var:W> $ ahead of running this series of instructions then $ <var:L> = <nat:1> $ after series of instructions finishes . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions is clear through this decorated set of instructions . \begin{eqnarray} \{ <var:P> = <var:W> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:P> = <var:W> \land <var:S0> = <nat:1> \} \\ <var:L> := <var:S0> \\ \{ <var:P> = <var:W> \land <var:L> = <nat:1> \} \end{eqnarray} Using standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:P> = <var:W> }} <var:S0> := <nat:1> ; <var:L> := <var:S0> {{ <var:L> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:L> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 