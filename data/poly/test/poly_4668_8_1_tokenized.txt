\begin{document} \begin{theorem} We define the following program in \emph{Imp} : \begin{verbatim} <var:w1> := <var:S> ; <var:w2> := <var:w1> * <var:S> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:4> ; <var:e> := <var:w2> <var:e> := <var:e> + <var:w1> <var:e> := <var:e> + <var:w0> \end{verbatim} Assuming it to hold that $ <var:S> = <var:i> $ prior to evaluating this list of instructions , then we have $ <var:e> = <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be seen with standard Hoare reasoning . Observing the upcoming statements seen in our set of instructions , we see \begin{verbatim} { <var:S> = <var:i> } <var:w1> := <var:S> { <var:S> = <var:i> \land <var:w1> = <var:i> } { <var:S> = <var:i> \land <var:w1> = <var:i> } <var:w2> := <var:w1> * <var:S> { <var:S> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> } { <var:S> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> } <var:w0> := <nat:3> { <var:S> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w0> = <nat:3> } { <var:S> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w0> = <nat:3> } <var:w1> := <var:w1> * <nat:2> { <var:S> = <var:i> \land <var:w1> = <nat:2> \cdot <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w0> = <nat:3> } \end{verbatim} This is known to be sound with the environment update inference rule found in Hoare logic . Observing the subsequent piece of code seen in our list of instructions , we see \begin{verbatim} { <var:S> = <var:i> } <var:w1> := <var:S> { <var:S> = <var:i> \land <var:w1> = <var:i> } \end{verbatim} Focusing on the following bit of code found in the code , we see \begin{verbatim} { <var:S> = <var:i> } <var:w1> := <var:S> { <var:S> = <var:i> \land <var:w1> = <var:i> } \end{verbatim} This is sound through the binding rule defined by usual Hoare logic . Going to the next step , we have \begin{verbatim} { <var:S> = <var:i> } <var:w1> := <var:S> { <var:S> = <var:i> \land <var:w1> = <var:i> } { <var:S> = <var:i> \land <var:w1> = <var:i> } <var:w2> := <var:w1> * <var:S> { <var:S> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:S> = <var:i> }} <var:w1> := <var:S> ; <var:w2> := <var:w1> * <var:S> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:4> ; <var:e> := <var:w2> <var:e> := <var:e> + <var:w1> <var:e> := <var:e> + <var:w0> {{ <var:e> = <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:w1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:w1> = <nat:2> * <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:w1> = <nat:2> * <var:i> /\ <var:w2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:w1> = <nat:2> * <var:i> /\ <var:w0> = <nat:3> /\ <var:e> = <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:w0> = <nat:3> /\ <var:e> = <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:e> = <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 