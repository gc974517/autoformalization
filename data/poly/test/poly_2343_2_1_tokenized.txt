\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:4> ; <var:a> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Assuming that $ <var:d> = <var:P> $ --- given all integers $ <var:P> $ --- prior to the execution of the list of instructions , then $ <var:a> = <nat:4> $ . \end{theorem} \begin{proof} The argument for the code is accomplished with standard Hoare techniques . Taking a look at the subsequent pieces of code seen in the code , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:P> \} & <var:F0> := <nat:4> & \{ <var:d> = <var:P> \land <var:F0> = <nat:4> \} \\ \{ <var:d> = <var:P> \land <var:F0> = <nat:4> \} & <var:a> := <var:F0& \{ <var:d> = <var:P> \land <var:a> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:a> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:d> = <var:P> }} <def:poly> {{ <var:a> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:a> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 