\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:M> ; <var:Q3> := <nat:4> ; <var:Q3> := <var:Q3> * <var:M> ; <var:Q3> := <var:Q3> * <var:M> ; <var:Q3> := <var:Q3> * <var:M> ; <var:N> := <var:Q3> ; <var:N> := <var:N> + <var:Q1> ; <var:N> := <var:N> + <var:Q0> \end{verbatim} Allow that $ <var:M> = <var:c> $ prior to executing our segment of code it holds that $ <var:N> = <nat:4> \times <var:c> ^ <nat:3> + <nat:7> \times <var:c> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is demonstrated with standard Hoare reasoning . Jumping to the following bit of code in the series of commands , we see the statement giving $ <nat:8> $ to $ <var:Q0>$ . This line advances the condition $ \{ <var:M> = <var:c> \} $ toward the condition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \} $ . Moving forward , we see the code giving $ <nat:7> $ as $ <var:Q1>$ . This line takes $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \} $ into the postcondition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \} $ . This is rigorously given using the assignment law from typical Hoare reasoning . Further , we see the environment update code \verb | <var:Q1> := <var:Q1> * <var:M> ; | . This statement redefines the precondition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \} $ as the postcondition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \} $ . This is deduced with the assignment rule from Hoare reasoning . Further , the variable update code \verb | <var:Q3> := <nat:4> ; | . This moves $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \} $ as $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:Q3> = <nat:4> \} $ . Advancing , we have the environment update code \verb | <var:Q3> := <var:Q3> * <var:M> ; | . This code forwards $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:Q3> = <nat:4> \} $ into the condition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:Q3> = <nat:4> \cdot <var:c> \} $ . Considering the proceeding piece of code contained in our code segment , we see the assignment code \verb | <var:Q3> := <var:Q3> * <var:M> ; | . This code takes the precondition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:Q3> = <nat:4> \cdot <var:c> \} $ toward the condition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:Q3> = <nat:4> \cdot <var:c> ^ <nat:2> \} $ . Looking at the following line found in the list of instructions , the binding command giving $ <var:Q3> * <var:M> $ into $ <var:Q3>$ . This transfers $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:Q3> = <nat:4> \cdot <var:c> ^ <nat:2> \} $ as $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:Q3> = <nat:4> \cdot <var:c> ^ <nat:3> \} $ . Immediately following , the binding line binding $ <var:Q3> $ to $ <var:N>$ . This statement moves $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:Q3> = <nat:4> \cdot <var:c> ^ <nat:3> \} $ into the condition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:N> = <nat:4> \cdot <var:c> ^ <nat:3> \} $ . This is ensured using the assignment scheme found in typical Hoare reasoning . Looking at the subsequent command contained in the list of commands , we have the assignment command \verb | <var:N> := <var:N> + <var:Q1> ; | . This line forwards $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:7> \cdot <var:c> \land <var:N> = <nat:4> \cdot <var:c> ^ <nat:3> \} $ toward the postcondition $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:N> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:7> \cdot <var:c> \} $ . Moving forward to the next step , we have the environment update statement assigning $ <var:N> + <var:Q0$ as $ <var:N>$ . This redefines $ \{ <var:M> = <var:c> \land <var:Q0> = <nat:8> \land <var:N> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:7> \cdot <var:c> \} $ as $ \{ <var:M> = <var:c> \land <var:N> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:7> \cdot <var:c> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:M> = <var:c> }} <var:Q0> := <nat:8> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:M> ; <var:Q3> := <nat:4> ; <var:Q3> := <var:Q3> * <var:M> ; <var:Q3> := <var:Q3> * <var:M> ; <var:Q3> := <var:Q3> * <var:M> ; <var:N> := <var:Q3> ; <var:N> := <var:N> + <var:Q1> ; <var:N> := <var:N> + <var:Q0> {{ <var:N> = <nat:4> * <var:c> ^ <nat:3> + <nat:7> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:7> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:7> * <var:c> /\ <var:Q3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:7> * <var:c> /\ <var:Q3> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:7> * <var:c> /\ <var:Q3> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:7> * <var:c> /\ <var:Q3> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:7> * <var:c> /\ <var:N> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:Q0> = <nat:8> /\ <var:N> = <nat:4> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:N> = <nat:4> * <var:c> ^ <nat:3> + <nat:7> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 