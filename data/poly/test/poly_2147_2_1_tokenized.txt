\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:8> ; <var:B> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:K> = <var:X> $ before the evaluation of the code it follows that we have $ <var:B> = <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is clear using typical Hoare reasoning . Immediately after , we have the variable update line \verb | <var:Z0> := <nat:8> ; | . This line moves $ \{ <var:K> = <var:X> \} $ into $ \{ <var:K> = <var:X> \land <var:Z0> = <nat:8> \} $ . Keeping momentum , the environment update line \verb | <var:B> := <var:Z0> | . This transfers $ \{ <var:K> = <var:X> \land <var:Z0> = <nat:8> \} $ to $ \{ <var:K> = <var:X> \land <var:B> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:8> ; <var:B> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:K> = <var:X> }} <def:poly> {{ <var:B> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:B> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 