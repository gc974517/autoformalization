\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:S1> := <var:U> ; <var:S2> := <var:S1> * <var:U> ; <var:S3> := <var:S2> * <var:U> ; <var:S4> := <var:S3> * <var:U> ; <var:S0> := <nat:6> ; <var:S1> := <var:S1> * <nat:6> ; <var:S2> := <var:S2> * <nat:3> ; <var:S3> := <var:S3> * <nat:8> ; <var:S4> := <var:S4> * <nat:4> ; <var:m> := <var:S4> <var:m> := <var:m> + <var:S3> <var:m> := <var:m> + <var:S2> <var:m> := <var:m> + <var:S1> <var:m> := <var:m> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:U> = <var:K> $ prior to running our series of commands , then we have $ <var:m> = <nat:4> \cdot <var:K> ^ <nat:4> + <nat:8> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:6> \cdot <var:K> + <nat:6> $ once list of instructions is done . \end{theorem} \begin{proof} The course of logic for the set of instructions is done by the following decorated code segment . \begin{eqnarray} \{ <var:U> = <var:K> \} \\ <var:S1> := <var:U> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <var:K> \} \\ <var:S2> := <var:S1> * <var:U> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <var:K> \land <var:S2> = <var:K> ^ <nat:2> \} \\ <var:S3> := <var:S2> * <var:U> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \} \\ <var:S4> := <var:S3> * <var:U> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S4> = <var:K> ^ <nat:4> \} \\ <var:S0> := <nat:6> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S4> = <var:K> ^ <nat:4> \land <var:S0> = <nat:6> \} \\ <var:S1> := <var:S1> * <nat:6> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <nat:6> \cdot <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S4> = <var:K> ^ <nat:4> \land <var:S0> = <nat:6> \} \\ <var:S2> := <var:S2> * <nat:3> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <nat:6> \cdot <var:K> \land <var:S2> = <nat:3> \cdot <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S4> = <var:K> ^ <nat:4> \land <var:S0> = <nat:6> \} \\ <var:S3> := <var:S3> * <nat:8> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <nat:6> \cdot <var:K> \land <var:S2> = <nat:3> \cdot <var:K> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:K> ^ <nat:3> \land <var:S4> = <var:K> ^ <nat:4> \land <var:S0> = <nat:6> \} \\ <var:S4> := <var:S4> * <nat:4> ; \\ \{ <var:U> = <var:K> \land <var:S1> = <nat:6> \cdot <var:K> \land <var:S2> = <nat:3> \cdot <var:K> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:K> ^ <nat:3> \land <var:S4> = <nat:4> \cdot <var:K> ^ <nat:4> \land <var:S0> = <nat:6> \} \\ <var:m> := <var:S4> \\ \{ <var:U> = <var:K> \land <var:S1> = <nat:6> \cdot <var:K> \land <var:S2> = <nat:3> \cdot <var:K> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:K> ^ <nat:3> \land <var:S0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:K> ^ <nat:4> \} \\ <var:m> := <var:m> + <var:S3> \\ \{ <var:U> = <var:K> \land <var:S1> = <nat:6> \cdot <var:K> \land <var:S2> = <nat:3> \cdot <var:K> ^ <nat:2> \land <var:S0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:K> ^ <nat:4> + <nat:8> \cdot <var:K> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:S2> \\ \{ <var:U> = <var:K> \land <var:S1> = <nat:6> \cdot <var:K> \land <var:S0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:K> ^ <nat:4> + <nat:8> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> \} \end{eqnarray} Allowing interpreting our set of instructions yields : \begin{eqnarray} <var:m> := <var:m> + <var:S1> \\ \{ <var:U> = <var:K> \land <var:S0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:K> ^ <nat:4> + <nat:8> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:6> \cdot <var:K> \} \\ <var:m> := <var:m> + <var:S0> \\ \{ <var:U> = <var:K> \land <var:m> = <nat:4> \cdot <var:K> ^ <nat:4> + <nat:8> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:6> \cdot <var:K> + <nat:6> \} \end{eqnarray} Using standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <def:poly> := <var:S1> := <var:U> ; <var:S2> := <var:S1> * <var:U> ; <var:S3> := <var:S2> * <var:U> ; <var:S4> := <var:S3> * <var:U> ; <var:S0> := <nat:6> ; <var:S1> := <var:S1> * <nat:6> ; <var:S2> := <var:S2> * <nat:3> ; <var:S3> := <var:S3> * <nat:8> ; <var:S4> := <var:S4> * <nat:4> ; <var:m> := <var:S4> <var:m> := <var:m> + <var:S3> <var:m> := <var:m> + <var:S2> <var:m> := <var:m> + <var:S1> <var:m> := <var:m> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:U> = <var:K> }} <def:poly> {{ <var:m> = <nat:4> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <var:K> /\ <var:S2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S4> = <var:K> ^ <nat:4> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <nat:6> * <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S4> = <var:K> ^ <nat:4> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <nat:6> * <var:K> /\ <var:S2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S4> = <var:K> ^ <nat:4> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <nat:6> * <var:K> /\ <var:S2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:K> ^ <nat:3> /\ <var:S4> = <var:K> ^ <nat:4> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <nat:6> * <var:K> /\ <var:S2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:K> ^ <nat:3> /\ <var:S4> = <nat:4> * <var:K> ^ <nat:4> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <nat:6> * <var:K> /\ <var:S2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:K> ^ <nat:3> /\ <var:S0> = <nat:6> /\ <var:m> = <nat:4> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <nat:6> * <var:K> /\ <var:S2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:S0> = <nat:6> /\ <var:m> = <nat:4> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S1> = <nat:6> * <var:K> /\ <var:S0> = <nat:6> /\ <var:m> = <nat:4> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:S0> = <nat:6> /\ <var:m> = <nat:4> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m> = <nat:4> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 