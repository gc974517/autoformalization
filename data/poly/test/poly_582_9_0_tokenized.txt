\begin{document} \begin{theorem} Take a set of commands as follows \begin{verbatim} <var:R0> := <nat:5> ; <var:R1> := <nat:6> ; <var:R1> := <var:R1> * <var:x> ; <var:R2> := <nat:7> ; <var:R2> := <var:R2> * <var:x> ; <var:R2> := <var:R2> * <var:x> ; <var:u> := <var:R2> ; <var:u> := <var:u> + <var:R1> ; <var:u> := <var:u> + <var:R0> \end{verbatim} Assume $ <var:x> = <var:N> $ before interpreting this series of instructions , it holds that we see $ <var:u> = <nat:7> \times <var:N> ^ <nat:2> + <nat:6> \times <var:N> + <nat:5> $ . \end{theorem} \begin{proof} Applying typical Hoare logic gives us : \begin{eqnarray} \{ <var:x> = <var:N> \} \\ <var:R0> := <nat:5> ; \\ \{ <var:x> = <var:N> \land <var:R0> = <nat:5> \} \\ <var:R1> := <nat:6> ; \\ \{ <var:x> = <var:N> \land <var:R0> = <nat:5> \land <var:R1> = <nat:6> \} \\ <var:R1> := <var:R1> * <var:x> ; \\ \{ <var:x> = <var:N> \land <var:R0> = <nat:5> \land <var:R1> = <nat:6> * <var:N> \} \\ <var:R2> := <nat:7> ; \\ \{ <var:x> = <var:N> \land <var:R0> = <nat:5> \land <var:R1> = <nat:6> * <var:N> \land <var:R2> = <nat:7> \} \\ <var:R2> := <var:R2> * <var:x> ; \\ \{ <var:x> = <var:N> \land <var:R0> = <nat:5> \land <var:R1> = <nat:6> * <var:N> \land <var:R2> = <nat:7> * <var:N> \} \\ <var:R2> := <var:R2> * <var:x> ; \\ \{ <var:x> = <var:N> \land <var:R0> = <nat:5> \land <var:R1> = <nat:6> * <var:N> \land <var:R2> = <nat:7> * <var:N> ^ <nat:2> \} \\ <var:u> := <var:R2> ; \\ \{ <var:x> = <var:N> \land <var:R0> = <nat:5> \land <var:R1> = <nat:6> * <var:N> \land <var:u> = <nat:7> * <var:N> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:R1> ; \\ \{ <var:x> = <var:N> \land <var:R0> = <nat:5> \land <var:u> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> \} \\ <var:u> := <var:u> + <var:R0> \\ \{ <var:x> = <var:N> \land <var:u> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:5> \} \end{eqnarray} Thus , this series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:x> = <var:N> }} <var:R0> := <nat:5> ; <var:R1> := <nat:6> ; <var:R1> := <var:R1> * <var:x> ; <var:R2> := <nat:7> ; <var:R2> := <var:R2> * <var:x> ; <var:R2> := <var:R2> * <var:x> ; <var:u> := <var:R2> ; <var:u> := <var:u> + <var:R1> ; <var:u> := <var:u> + <var:R0> {{ <var:u> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:6> * <var:N> /\ <var:R2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:6> * <var:N> /\ <var:R2> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:6> * <var:N> /\ <var:R2> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:6> * <var:N> /\ <var:u> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:R0> = <nat:5> /\ <var:u> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:u> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 