\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:N> ; <var:Q2> := <var:Q1> * <var:N> ; <var:Q3> := <var:Q2> * <var:N> ; <var:Q4> := <var:Q3> * <var:N> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:9> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:Q4> := <var:Q4> * <nat:2> ; <var:v> := <var:Q4> <var:v> := <var:v> + <var:Q3> <var:v> := <var:v> + <var:Q2> <var:v> := <var:v> + <var:Q1> <var:v> := <var:v> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Allow , for positive numbers $ <var:C> $ , it to be that $ <var:N> = <var:C> $ prior to the execution of the segment of code , then $ <var:v> = <nat:2> \cdot <var:C> ^ <nat:4> + <nat:7> \cdot <var:C> ^ <nat:3> + <nat:9> \cdot <var:C> ^ <nat:2> + <nat:6> \cdot <var:C> + <nat:7> $ when series of commands executes . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:N> = <var:C> \} \\ <var:Q1> := <var:N> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <var:C> \} \\ <var:Q2> := <var:Q1> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q3> = <var:C> ^ <nat:3> \} \\ <var:Q4> := <var:Q3> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q3> = <var:C> ^ <nat:3> \land <var:Q4> = <var:C> ^ <nat:4> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q3> = <var:C> ^ <nat:3> \land <var:Q4> = <var:C> ^ <nat:4> \land <var:Q0> = <nat:7> \} \\ <var:Q1> := <var:Q1> * <nat:6> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <nat:6> \cdot <var:C> \land <var:Q2> = <var:C> ^ <nat:2> \land <var:Q3> = <var:C> ^ <nat:3> \land <var:Q4> = <var:C> ^ <nat:4> \land <var:Q0> = <nat:7> \} \\ <var:Q2> := <var:Q2> * <nat:9> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <nat:6> \cdot <var:C> \land <var:Q2> = <nat:9> \cdot <var:C> ^ <nat:2> \land <var:Q3> = <var:C> ^ <nat:3> \land <var:Q4> = <var:C> ^ <nat:4> \land <var:Q0> = <nat:7> \} \\ <var:Q3> := <var:Q3> * <nat:7> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <nat:6> \cdot <var:C> \land <var:Q2> = <nat:9> \cdot <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \cdot <var:C> ^ <nat:3> \land <var:Q4> = <var:C> ^ <nat:4> \land <var:Q0> = <nat:7> \} \\ <var:Q4> := <var:Q4> * <nat:2> ; \\ \{ <var:N> = <var:C> \land <var:Q1> = <nat:6> \cdot <var:C> \land <var:Q2> = <nat:9> \cdot <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \cdot <var:C> ^ <nat:3> \land <var:Q4> = <nat:2> \cdot <var:C> ^ <nat:4> \land <var:Q0> = <nat:7> \} \\ <var:v> := <var:Q4> \\ \{ <var:N> = <var:C> \land <var:Q1> = <nat:6> \cdot <var:C> \land <var:Q2> = <nat:9> \cdot <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \cdot <var:C> ^ <nat:3> \land <var:Q0> = <nat:7> \land <var:v> = <nat:2> \cdot <var:C> ^ <nat:4> \} \\ <var:v> := <var:v> + <var:Q3> \\ \{ <var:N> = <var:C> \land <var:Q1> = <nat:6> \cdot <var:C> \land <var:Q2> = <nat:9> \cdot <var:C> ^ <nat:2> \land <var:Q0> = <nat:7> \land <var:v> = <nat:2> \cdot <var:C> ^ <nat:4> + <nat:7> \cdot <var:C> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:Q2> \\ \{ <var:N> = <var:C> \land <var:Q1> = <nat:6> \cdot <var:C> \land <var:Q0> = <nat:7> \land <var:v> = <nat:2> \cdot <var:C> ^ <nat:4> + <nat:7> \cdot <var:C> ^ <nat:3> + <nat:9> \cdot <var:C> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:Q1> \\ \{ <var:N> = <var:C> \land <var:Q0> = <nat:7> \land <var:v> = <nat:2> \cdot <var:C> ^ <nat:4> + <nat:7> \cdot <var:C> ^ <nat:3> + <nat:9> \cdot <var:C> ^ <nat:2> + <nat:6> \cdot <var:C> \} \\ <var:v> := <var:v> + <var:Q0> \\ \{ <var:N> = <var:C> \land <var:v> = <nat:2> \cdot <var:C> ^ <nat:4> + <nat:7> \cdot <var:C> ^ <nat:3> + <nat:9> \cdot <var:C> ^ <nat:2> + <nat:6> \cdot <var:C> + <nat:7> \} \end{eqnarray} Hence , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Definition <def:poly> := <var:Q1> := <var:N> ; <var:Q2> := <var:Q1> * <var:N> ; <var:Q3> := <var:Q2> * <var:N> ; <var:Q4> := <var:Q3> * <var:N> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:9> ; <var:Q3> := <var:Q3> * <nat:7> ; <var:Q4> := <var:Q4> * <nat:2> ; <var:v> := <var:Q4> <var:v> := <var:v> + <var:Q3> <var:v> := <var:v> + <var:Q2> <var:v> := <var:v> + <var:Q1> <var:v> := <var:v> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:N> = <var:C> }} <def:poly> {{ <var:v> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:6> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q3> = <var:C> ^ <nat:3> /\ <var:Q4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q3> = <var:C> ^ <nat:3> /\ <var:Q4> = <var:C> ^ <nat:4> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <nat:6> * <var:C> /\ <var:Q2> = <var:C> ^ <nat:2> /\ <var:Q3> = <var:C> ^ <nat:3> /\ <var:Q4> = <var:C> ^ <nat:4> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <nat:6> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q3> = <var:C> ^ <nat:3> /\ <var:Q4> = <var:C> ^ <nat:4> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <nat:6> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:C> ^ <nat:3> /\ <var:Q4> = <var:C> ^ <nat:4> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <nat:6> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:C> ^ <nat:3> /\ <var:Q4> = <nat:2> * <var:C> ^ <nat:4> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <nat:6> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:C> ^ <nat:3> /\ <var:Q0> = <nat:7> /\ <var:v> = <nat:2> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <nat:6> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q0> = <nat:7> /\ <var:v> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q1> = <nat:6> * <var:C> /\ <var:Q0> = <nat:7> /\ <var:v> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Q0> = <nat:7> /\ <var:v> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:v> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:6> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 