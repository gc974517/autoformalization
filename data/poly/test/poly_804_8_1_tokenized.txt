\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:g> ; <var:l2> := <var:l1> * <var:g> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:8> ; <var:l2> := <var:l2> * <nat:9> ; <var:I> := <var:l2> <var:I> := <var:I> + <var:l1> <var:I> := <var:I> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Given ( for any natural numbers $ <var:A> $ ) $ <var:g> = <var:A> $ before the evaluation of this series of instructions it must be that we see $ <var:I> = <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the series of commands can be given using Hoare logic . Observing the proceeding piece of code seen in our list of commands , we see the assignment code \verb | <var:l1> := <var:g> ; | . This command moves the condition $ \{ <var:g> = <var:A> \} $ as the postcondition $ \{ <var:g> = <var:A> \land <var:l1> = <var:A> \} $ . This is shown through the assignment law found in standard Hoare techniques . Paying attention to the upcoming line of code found in the code segment , the statement \verb | <var:l2> := <var:l1> * <var:g> ; | . This takes the condition $ \{ <var:g> = <var:A> \land <var:l1> = <var:A> \} $ into $ \{ <var:g> = <var:A> \land <var:l1> = <var:A> \land <var:l2> = <var:A> ^ <nat:2> \} $ . This is sound by the assignment inference rule given in standard Hoare reasoning . Advancing , we see the variable update code defining $ <nat:2> $ toward $ <var:l0>$ . This transfers $ \{ <var:g> = <var:A> \land <var:l1> = <var:A> \land <var:l2> = <var:A> ^ <nat:2> \} $ into the condition $ \{ <var:g> = <var:A> \land <var:l1> = <var:A> \land <var:l2> = <var:A> ^ <nat:2> \land <var:l0> = <nat:2> \} $ . This is rigorously given through the assignment scheme defined in typical Hoare techniques . Advancing , we see the variable assignmet command \verb | <var:l1> := <var:l1> * <nat:8> ; | . This takes the precondition $ \{ <var:g> = <var:A> \land <var:l1> = <var:A> \land <var:l2> = <var:A> ^ <nat:2> \land <var:l0> = <nat:2> \} $ toward the postcondition $ \{ <var:g> = <var:A> \land <var:l1> = <nat:8> \cdot <var:A> \land <var:l2> = <var:A> ^ <nat:2> \land <var:l0> = <nat:2> \} $ . Focusing on the proceeding statement found in our series of instructions , we have the variable binding statement defining $ <var:l2> * <nat:9> $ as $ <var:l2>$ . This advances the condition $ \{ <var:g> = <var:A> \land <var:l1> = <nat:8> \cdot <var:A> \land <var:l2> = <var:A> ^ <nat:2> \land <var:l0> = <nat:2> \} $ as the postcondition $ \{ <var:g> = <var:A> \land <var:l1> = <nat:8> \cdot <var:A> \land <var:l2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:l0> = <nat:2> \} $ . Observing the subsequent piece of code found in our list of commands , we see the environment update command assigning $ <var:l2$ to $ <var:I>$ . This takes the condition $ \{ <var:g> = <var:A> \land <var:l1> = <nat:8> \cdot <var:A> \land <var:l2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:l0> = <nat:2> \} $ to the condition $ \{ <var:g> = <var:A> \land <var:l1> = <nat:8> \cdot <var:A> \land <var:l0> = <nat:2> \land <var:I> = <nat:9> \cdot <var:A> ^ <nat:2> \} $ . Observing the subsequent step seen in the list of instructions , the binding command \verb | <var:I> := <var:I> + <var:l1> | . This command transfers the precondition $ \{ <var:g> = <var:A> \land <var:l1> = <nat:8> \cdot <var:A> \land <var:l0> = <nat:2> \land <var:I> = <nat:9> \cdot <var:A> ^ <nat:2> \} $ to the condition $ \{ <var:g> = <var:A> \land <var:l0> = <nat:2> \land <var:I> = <nat:9> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> \} $ . This is given with the assignment law in typical Hoare techniques . Advancing , the environment update command \verb | <var:I> := <var:I> + <var:l0> | . This moves the precondition $ \{ <var:g> = <var:A> \land <var:l0> = <nat:2> \land <var:I> = <nat:9> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> \} $ to the condition $ \{ <var:g> = <var:A> \land <var:I> = <nat:9> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> + <nat:2> \} $ . This is deduced by the assignment scheme found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l1> := <var:g> ; <var:l2> := <var:l1> * <var:g> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:8> ; <var:l2> := <var:l2> * <nat:9> ; <var:I> := <var:l2> <var:I> := <var:I> + <var:l1> <var:I> := <var:I> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:g> = <var:A> }} <def:poly> {{ <var:I> = <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:l1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:l1> = <var:A> /\ <var:l2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:l1> = <var:A> /\ <var:l2> = <var:A> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:l1> = <nat:8> * <var:A> /\ <var:l2> = <var:A> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:l1> = <nat:8> * <var:A> /\ <var:l2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:l1> = <nat:8> * <var:A> /\ <var:l0> = <nat:2> /\ <var:I> = <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:l0> = <nat:2> /\ <var:I> = <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:I> = <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 