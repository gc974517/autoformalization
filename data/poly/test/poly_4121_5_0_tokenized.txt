\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:2> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:E> ; <var:h> := <var:D1> ; <var:h> := <var:h> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assume $ <var:E> = <var:s> $ for positive integer coefficients $ <var:s> $ before the evaluation of our series of commands it must be that $ <var:h> = <nat:1> \times <var:s> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the list of instructions can be done by typical Hoare techniques . Honing in on the subsequent line of code contained in the list of commands , the environment update code \verb | <var:D0> := <nat:2> ; | . This forwards $ \{ <var:E> = <var:s> \} $ to the postcondition $ \{ <var:E> = <var:s> \land <var:D0> = <nat:2> \} $ . This is deduced with the assignment inference rule defined by usual Hoare techniques . Moving forward to the next step , we see the binding code \verb | <var:D1> := <nat:1> ; | . This moves $ \{ <var:E> = <var:s> \land <var:D0> = <nat:2> \} $ into $ \{ <var:E> = <var:s> \land <var:D0> = <nat:2> \land <var:D1> = <nat:1> \} $ . Going to the next step , the environment update statement \verb | <var:D1> := <var:D1> * <var:E> ; | . This takes $ \{ <var:E> = <var:s> \land <var:D0> = <nat:2> \land <var:D1> = <nat:1> \} $ to the postcondition $ \{ <var:E> = <var:s> \land <var:D0> = <nat:2> \land <var:D1> = <nat:1> \times <var:s> \} $ . This is rigorously given through the assignment inference rule given by usual Hoare reasoning . Considering the next bit of code seen in the program , we have the code defining $ <var:D1> $ toward $ <var:h>$ . This line redefines the condition $ \{ <var:E> = <var:s> \land <var:D0> = <nat:2> \land <var:D1> = <nat:1> \times <var:s> \} $ as the condition $ \{ <var:E> = <var:s> \land <var:D0> = <nat:2> \land <var:h> = <nat:1> \times <var:s> \} $ . Taking another step toward the upcoming line of code seen in the list of commands , we have the environment update command \verb | <var:h> := <var:h> + <var:D0> | . This code forwards the precondition $ \{ <var:E> = <var:s> \land <var:D0> = <nat:2> \land <var:h> = <nat:1> \times <var:s> \} $ as the condition $ \{ <var:E> = <var:s> \land <var:h> = <nat:1> \times <var:s> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:2> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:E> ; <var:h> := <var:D1> ; <var:h> := <var:h> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:E> = <var:s> }} <def:poly> {{ <var:h> = <nat:1> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:D0> = <nat:2> /\ <var:h> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:h> = <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 