\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:A> ; <var:d2> := <var:d1> * <var:A> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:2> ; <var:d2> := <var:d2> * <nat:1> ; <var:e> := <var:d2> <var:e> := <var:e> + <var:d1> <var:e> := <var:e> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given any positive integer coefficients $ <var:u> $ ) it to be that $ <var:A> = <var:u> $ ahead of evaluating our list of commands then we have $ <var:e> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> + <nat:2> $ after list of commands has terminated . \end{theorem} \begin{proof} The proof of the list of instructions can be done through the following decorated series of commands . \begin{eqnarray} \{ <var:A> = <var:u> \} \\ <var:d1> := <var:A> ; \\ \{ <var:A> = <var:u> \land <var:d1> = <var:u> \} \\ <var:d2> := <var:d1> * <var:A> ; \\ \{ <var:A> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> \} \\ <var:d0> := <nat:2> ; \\ \{ <var:A> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> \land <var:d0> = <nat:2> \} \\ <var:d1> := <var:d1> * <nat:2> ; \\ \{ <var:A> = <var:u> \land <var:d1> = <nat:2> \times <var:u> \land <var:d2> = <var:u> ^ <nat:2> \land <var:d0> = <nat:2> \} \\ <var:d2> := <var:d2> * <nat:1> ; \\ \{ <var:A> = <var:u> \land <var:d1> = <nat:2> \times <var:u> \land <var:d2> = <nat:1> \times <var:u> ^ <nat:2> \land <var:d0> = <nat:2> \} \\ <var:e> := <var:d2> \\ \{ <var:A> = <var:u> \land <var:d1> = <nat:2> \times <var:u> \land <var:d0> = <nat:2> \land <var:e> = <nat:1> \times <var:u> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:d1> \\ \{ <var:A> = <var:u> \land <var:d0> = <nat:2> \land <var:e> = <nat:1> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> \} \\ <var:e> := <var:e> + <var:d0> \\ \{ <var:A> = <var:u> \land <var:e> = <nat:1> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:2> \} \end{eqnarray} Applying usual Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d1> := <var:A> ; <var:d2> := <var:d1> * <var:A> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:2> ; <var:d2> := <var:d2> * <nat:1> ; <var:e> := <var:d2> <var:e> := <var:e> + <var:d1> <var:e> := <var:e> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:A> = <var:u> }} <def:poly> {{ <var:e> = <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:d1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:d1> = <var:u> /\ <var:d2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:d1> = <var:u> /\ <var:d2> = <var:u> ^ <nat:2> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:d1> = <nat:2> * <var:u> /\ <var:d2> = <var:u> ^ <nat:2> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:d1> = <nat:2> * <var:u> /\ <var:d2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:d1> = <nat:2> * <var:u> /\ <var:d0> = <nat:2> /\ <var:e> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:d0> = <nat:2> /\ <var:e> = <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:e> = <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 