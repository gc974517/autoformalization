\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:j1> := <var:s> ; <var:j2> := <var:j1> * <var:s> ; <var:j3> := <var:j2> * <var:s> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:8> ; <var:j2> := <var:j2> * <nat:5> ; <var:j3> := <var:j3> * <nat:9> ; <var:D> := <var:j3> <var:D> := <var:D> + <var:j2> <var:D> := <var:D> + <var:j1> <var:D> := <var:D> + <var:j0> \end{verbatim} Assuming it to hold that $ <var:s> = <var:k> $ before interpreting the series of instructions it follows that we have $ <var:D> = <nat:9> \times <var:k> ^ <nat:3> + <nat:5> \times <var:k> ^ <nat:2> + <nat:8> \times <var:k> + <nat:2> $ when set of commands has exited . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:s> = <var:k> \} \\ <var:j1> := <var:s> ; \\ \{ <var:s> = <var:k> \land <var:j1> = <var:k> \} \\ <var:j2> := <var:j1> * <var:s> ; \\ \{ <var:s> = <var:k> \land <var:j1> = <var:k> \land <var:j2> = <var:k> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:s> ; \\ \{ <var:s> = <var:k> \land <var:j1> = <var:k> \land <var:j2> = <var:k> ^ <nat:2> \land <var:j3> = <var:k> ^ <nat:3> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:s> = <var:k> \land <var:j1> = <var:k> \land <var:j2> = <var:k> ^ <nat:2> \land <var:j3> = <var:k> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:j1> := <var:j1> * <nat:8> ; \\ \{ <var:s> = <var:k> \land <var:j1> = <nat:8> \cdot <var:k> \land <var:j2> = <var:k> ^ <nat:2> \land <var:j3> = <var:k> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:j2> := <var:j2> * <nat:5> ; \\ \{ <var:s> = <var:k> \land <var:j1> = <nat:8> \cdot <var:k> \land <var:j2> = <nat:5> \cdot <var:k> ^ <nat:2> \land <var:j3> = <var:k> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:j3> := <var:j3> * <nat:9> ; \\ \{ <var:s> = <var:k> \land <var:j1> = <nat:8> \cdot <var:k> \land <var:j2> = <nat:5> \cdot <var:k> ^ <nat:2> \land <var:j3> = <nat:9> \cdot <var:k> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:D> := <var:j3> \\ \{ <var:s> = <var:k> \land <var:j1> = <nat:8> \cdot <var:k> \land <var:j2> = <nat:5> \cdot <var:k> ^ <nat:2> \land <var:j0> = <nat:2> \land <var:D> = <nat:9> \cdot <var:k> ^ <nat:3> \} \\ <var:D> := <var:D> + <var:j2> \\ \{ <var:s> = <var:k> \land <var:j1> = <nat:8> \cdot <var:k> \land <var:j0> = <nat:2> \land <var:D> = <nat:9> \cdot <var:k> ^ <nat:3> + <nat:5> \cdot <var:k> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:j1> \\ \{ <var:s> = <var:k> \land <var:j0> = <nat:2> \land <var:D> = <nat:9> \cdot <var:k> ^ <nat:3> + <nat:5> \cdot <var:k> ^ <nat:2> + <nat:8> \cdot <var:k> \} \\ <var:D> := <var:D> + <var:j0> \\ \{ <var:s> = <var:k> \land <var:D> = <nat:9> \cdot <var:k> ^ <nat:3> + <nat:5> \cdot <var:k> ^ <nat:2> + <nat:8> \cdot <var:k> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:s> = <var:k> }} <var:j1> := <var:s> ; <var:j2> := <var:j1> * <var:s> ; <var:j3> := <var:j2> * <var:s> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:8> ; <var:j2> := <var:j2> * <nat:5> ; <var:j3> := <var:j3> * <nat:9> ; <var:D> := <var:j3> <var:D> := <var:D> + <var:j2> <var:D> := <var:D> + <var:j1> <var:D> := <var:D> + <var:j0> {{ <var:D> = <nat:9> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:8> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <var:k> /\ <var:j2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <var:k> /\ <var:j2> = <var:k> ^ <nat:2> /\ <var:j3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <var:k> /\ <var:j2> = <var:k> ^ <nat:2> /\ <var:j3> = <var:k> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <nat:8> * <var:k> /\ <var:j2> = <var:k> ^ <nat:2> /\ <var:j3> = <var:k> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <nat:8> * <var:k> /\ <var:j2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:j3> = <var:k> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <nat:8> * <var:k> /\ <var:j2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:j3> = <nat:9> * <var:k> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <nat:8> * <var:k> /\ <var:j2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:j0> = <nat:2> /\ <var:D> = <nat:9> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j1> = <nat:8> * <var:k> /\ <var:j0> = <nat:2> /\ <var:D> = <nat:9> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:j0> = <nat:2> /\ <var:D> = <nat:9> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:k> /\ <var:D> = <nat:9> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:8> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 