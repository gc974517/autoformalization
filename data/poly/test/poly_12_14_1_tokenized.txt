\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as \begin{verbatim} <var:G1> := <var:M> ; <var:G2> := <var:G1> * <var:M> ; <var:G3> := <var:G2> * <var:M> ; <var:G4> := <var:G3> * <var:M> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:5> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:2> ; <var:G4> := <var:G4> * <nat:5> ; <var:e> := <var:G4> <var:e> := <var:e> + <var:G3> <var:e> := <var:e> + <var:G2> <var:e> := <var:e> + <var:G1> <var:e> := <var:e> + <var:G0> \end{verbatim} Given $ <var:M> = <var:d> $ before the execution of our series of instructions it holds that we have $ <var:e> = <nat:5> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:3> $ once set of instructions terminates . \end{theorem} \begin{proof} The method of proof for the set of instructions is evident using standard Hoare techniques . Advancing on , \begin{verbatim} { <var:M> = <var:d> } <var:G1> := <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> } { <var:M> = <var:d> \land <var:G1> = <var:d> } <var:G2> := <var:G1> * <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> } { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> } <var:G3> := <var:G2> * <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> } \end{verbatim} This is sound using the environment update law given in usual Hoare logic . Following , we have \begin{verbatim} { <var:M> = <var:d> } <var:G1> := <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> } { <var:M> = <var:d> \land <var:G1> = <var:d> } <var:G2> := <var:G1> * <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> } { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> } <var:G3> := <var:G2> * <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> } { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> } <var:G4> := <var:G3> * <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> \land <var:G4> = <var:d> ^ <nat:4> } { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> \land <var:G4> = <var:d> ^ <nat:4> } <var:G0> := <nat:3> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> \land <var:G4> = <var:d> ^ <nat:4> \land <var:G0> = <nat:3> } { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> \land <var:G4> = <var:d> ^ <nat:4> \land <var:G0> = <nat:3> } <var:G1> := <var:G1> * <nat:5> { <var:M> = <var:d> \land <var:G1> = <nat:5> \times <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> \land <var:G4> = <var:d> ^ <nat:4> \land <var:G0> = <nat:3> } \end{verbatim} Stepping forward , we see \begin{verbatim} { <var:M> = <var:d> } <var:G1> := <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> } { <var:M> = <var:d> \land <var:G1> = <var:d> } <var:G2> := <var:G1> * <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> } { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> } <var:G3> := <var:G2> * <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> } { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> } <var:G4> := <var:G3> * <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> \land <var:G2> = <var:d> ^ <nat:2> \land <var:G3> = <var:d> ^ <nat:3> \land <var:G4> = <var:d> ^ <nat:4> } \end{verbatim} Stepping forward , we have \begin{verbatim} { <var:M> = <var:d> } <var:G1> := <var:M> { <var:M> = <var:d> \land <var:G1> = <var:d> } \end{verbatim} This is deduced through the variable assignmet rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:M> = <var:d> }} <var:G1> := <var:M> ; <var:G2> := <var:G1> * <var:M> ; <var:G3> := <var:G2> * <var:M> ; <var:G4> := <var:G3> * <var:M> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:5> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:2> ; <var:G4> := <var:G4> * <nat:5> ; <var:e> := <var:G4> <var:e> := <var:e> + <var:G3> <var:e> := <var:e> + <var:G2> <var:e> := <var:e> + <var:G1> <var:e> := <var:e> + <var:G0> {{ <var:e> = <nat:5> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <var:d> /\ <var:G2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <var:d> /\ <var:G2> = <var:d> ^ <nat:2> /\ <var:G3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <var:d> /\ <var:G2> = <var:d> ^ <nat:2> /\ <var:G3> = <var:d> ^ <nat:3> /\ <var:G4> = <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <var:d> /\ <var:G2> = <var:d> ^ <nat:2> /\ <var:G3> = <var:d> ^ <nat:3> /\ <var:G4> = <var:d> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <nat:5> * <var:d> /\ <var:G2> = <var:d> ^ <nat:2> /\ <var:G3> = <var:d> ^ <nat:3> /\ <var:G4> = <var:d> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <nat:5> * <var:d> /\ <var:G2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:G3> = <var:d> ^ <nat:3> /\ <var:G4> = <var:d> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <nat:5> * <var:d> /\ <var:G2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:d> ^ <nat:3> /\ <var:G4> = <var:d> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <nat:5> * <var:d> /\ <var:G2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:d> ^ <nat:3> /\ <var:G4> = <nat:5> * <var:d> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <nat:5> * <var:d> /\ <var:G2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:d> ^ <nat:3> /\ <var:G0> = <nat:3> /\ <var:e> = <nat:5> * <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <nat:5> * <var:d> /\ <var:G2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:G0> = <nat:3> /\ <var:e> = <nat:5> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G1> = <nat:5> * <var:d> /\ <var:G0> = <nat:3> /\ <var:e> = <nat:5> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:G0> = <nat:3> /\ <var:e> = <nat:5> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:e> = <nat:5> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 