\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:G> := <nat:3> ; <var:G> := <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> ; <var:G> := <nat:1> + <var:G> * <var:L> \end{verbatim} Allow that $ <var:L> = <var:u> $ before executing the segment of code , it holds that we have $ <var:G> = <nat:3> \times <var:u> ^ <nat:3> + <nat:4> \times <var:u> + <nat:1> $ once list of commands executes . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:L> = <var:u> \} \\ <var:G> := <nat:3> ; \\ \{ <var:L> = <var:u> \land <var:G> = <nat:3> \} \\ <var:G> := <var:G> * <var:L> ; \\ \{ <var:L> = <var:u> \land <var:G> = <nat:3> * <var:u> + \} \\ <var:G> := <nat:4> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:u> \land <var:G> = <nat:3> * <var:u> ^ <nat:2> + <nat:4> \} \\ <var:G> := <nat:1> + <var:G> * <var:L> \\ \{ <var:L> = <var:u> \land <var:G> = <nat:3> * <var:u> ^ <nat:3> + <nat:4> * <var:u> + <nat:1> \} \end{eqnarray} Therefore , the set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:L> = <var:u> }} <var:G> := <nat:3> ; <var:G> := <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> ; <var:G> := <nat:1> + <var:G> * <var:L> {{ <var:G> = <nat:3> * <var:u> ^ <nat:3> + <nat:4> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:G> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:G> = <nat:3> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:G> = <nat:3> * <var:u> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:G> = <nat:3> * <var:u> ^ <nat:3> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 