\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:h> ; <var:D> := <nat:3> + <var:D> * <var:h> ; <var:D> := <nat:3> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <var:D> * <var:h> ; <var:D> := <var:D> * <var:h> ; <var:D> := <nat:2> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <nat:4> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <nat:4> + <var:D> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Allowing it to hold that $ <var:h> = <var:z> $ ahead of executing the set of commands then we have $ <var:D> = <nat:1> \times <var:z> ^ <nat:13> + <nat:2> \times <var:z> ^ <nat:12> + <nat:3> \times <var:z> ^ <nat:11> + <nat:3> \times <var:z> ^ <nat:10> + <nat:1> \times <var:z> ^ <nat:9> + <nat:1> \times <var:z> ^ <nat:8> + <nat:2> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our program can be given using typical Hoare techniques . Moving onward , we have \begin{eqnarray} \{ <var:h> = <var:z> \} \, <var:D> := <nat:1> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \} \, <var:D> := <nat:2> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> + <nat:2> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> + <nat:2> \} \, <var:D> := <nat:3> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:3> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:3> \} \, <var:D> := <nat:3> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} \end{eqnarray} This is guaranteed with the assignment inference rule given by typical Hoare logic . Considering the next steps seen in the code , we see \begin{eqnarray} \{ <var:h> = <var:z> \} \, <var:D> := <nat:1> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \} \, <var:D> := <nat:2> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> + <nat:2> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> + <nat:2> \} \, <var:D> := <nat:3> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:3> \} \end{eqnarray} This is shown through the variable update inference rule defined by typical Hoare techniques . Moving on , \begin{eqnarray} \{ <var:h> = <var:z> \} \, <var:D> := <nat:1> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \} \, <var:D> := <nat:2> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> + <nat:2> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> + <nat:2> \} \, <var:D> := <nat:3> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:3> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:3> \} \, <var:D> := <nat:3> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} \, <var:D> := <nat:1> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:1> \} \end{eqnarray} Paying attention to the proceeding steps contained in our series of commands , \begin{eqnarray} \{ <var:h> = <var:z> \} \, <var:D> := <nat:1> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \} \\ \{ <var:h> = <var:z> \land <var:D> = <nat:1> \} \, <var:D> := <nat:2> + <var:D> * <var:h> \, \{ <var:h> = <var:z> \land <var:D> = <nat:1> \times <var:z> + <nat:2> \} \end{eqnarray} This is ensured by the variable assignmet inference rule in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:h> ; <var:D> := <nat:3> + <var:D> * <var:h> ; <var:D> := <nat:3> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <var:D> * <var:h> ; <var:D> := <var:D> * <var:h> ; <var:D> := <nat:2> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <nat:4> + <var:D> * <var:h> ; <var:D> := <nat:1> + <var:D> * <var:h> ; <var:D> := <nat:4> + <var:D> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:h> = <var:z> }} <def:poly> {{ <var:D> = <nat:1> * <var:z> ^ <nat:13> + <nat:2> * <var:z> ^ <nat:12> + <nat:3> * <var:z> ^ <nat:11> + <nat:3> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:9> + <nat:3> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:11> + <nat:2> * <var:z> ^ <nat:10> + <nat:3> * <var:z> ^ <nat:9> + <nat:3> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:12> + <nat:2> * <var:z> ^ <nat:11> + <nat:3> * <var:z> ^ <nat:10> + <nat:3> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:D> = <nat:1> * <var:z> ^ <nat:13> + <nat:2> * <var:z> ^ <nat:12> + <nat:3> * <var:z> ^ <nat:11> + <nat:3> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 