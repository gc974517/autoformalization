\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:B> := <nat:4> ; <var:B> := <nat:1> + <var:B> * <var:C> \end{verbatim} Allowing it to be that $ <var:C> = <var:A> $ ahead of interpreting our set of commands , then $ <var:B> = <nat:4> \times <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is shown with usual Hoare logic . Observing the next statement found in our series of commands , the assignment statement binding $ <nat:4> $ into $ <var:B>$ . This command moves $ \{ <var:C> = <var:A> \} $ to $ \{ <var:C> = <var:A> \land <var:B> = <nat:4> \} $ . This is deduced through the assignment inference rule given by Hoare logic . Moving on to the subsequent line in the list of instructions , the binding command binding $ <nat:1> + <var:B> * <var:C$ toward $ <var:B>$ . This redefines the condition $ \{ <var:C> = <var:A> \land <var:B> = <nat:4> \} $ to the condition $ \{ <var:C> = <var:A> \land <var:B> = <nat:4> \times <var:A> + <nat:1> \} $ . This is shown using the assignment rule from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:C> = <var:A> }} <var:B> := <nat:4> ; <var:B> := <nat:1> + <var:B> * <var:C> {{ <var:B> = <nat:4> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:B> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:B> = <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 