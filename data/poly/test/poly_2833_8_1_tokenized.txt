\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as \begin{verbatim} <var:S1> := <var:d> ; <var:S2> := <var:S1> * <var:d> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:6> ; <var:S2> := <var:S2> * <nat:2> ; <var:z> := <var:S2> <var:z> := <var:z> + <var:S1> <var:z> := <var:z> + <var:S0> \end{verbatim} Given $ <var:d> = <var:E> $ , for any $ <var:E> $ , prior to running this set of commands , it must be that $ <var:z> = <nat:2> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:9> $ . \end{theorem} \begin{proof} Using Hoare reasoning produces : \begin{eqnarray} \{ <var:d> = <var:E> \} \\ <var:S1> := <var:d> ; \\ \{ <var:d> = <var:E> \land <var:S1> = <var:E> \} \\ <var:S2> := <var:S1> * <var:d> ; \\ \{ <var:d> = <var:E> \land <var:S1> = <var:E> \land <var:S2> = <var:E> ^ <nat:2> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:d> = <var:E> \land <var:S1> = <var:E> \land <var:S2> = <var:E> ^ <nat:2> \land <var:S0> = <nat:9> \} \\ <var:S1> := <var:S1> * <nat:6> ; \\ \{ <var:d> = <var:E> \land <var:S1> = <nat:6> \cdot <var:E> \land <var:S2> = <var:E> ^ <nat:2> \land <var:S0> = <nat:9> \} \\ <var:S2> := <var:S2> * <nat:2> ; \\ \{ <var:d> = <var:E> \land <var:S1> = <nat:6> \cdot <var:E> \land <var:S2> = <nat:2> \cdot <var:E> ^ <nat:2> \land <var:S0> = <nat:9> \} \\ <var:z> := <var:S2> \\ \{ <var:d> = <var:E> \land <var:S1> = <nat:6> \cdot <var:E> \land <var:S0> = <nat:9> \land <var:z> = <nat:2> \cdot <var:E> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:S1> \\ \{ <var:d> = <var:E> \land <var:S0> = <nat:9> \land <var:z> = <nat:2> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> \} \\ <var:z> := <var:z> + <var:S0> \\ \{ <var:d> = <var:E> \land <var:z> = <nat:2> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:9> \} \end{eqnarray} Considering the preceding argument , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:d> = <var:E> }} <var:S1> := <var:d> ; <var:S2> := <var:S1> * <var:d> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:6> ; <var:S2> := <var:S2> * <nat:2> ; <var:z> := <var:S2> <var:z> := <var:z> + <var:S1> <var:z> := <var:z> + <var:S0> {{ <var:z> = <nat:2> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:S1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:S1> = <var:E> /\ <var:S2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:S1> = <var:E> /\ <var:S2> = <var:E> ^ <nat:2> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:S1> = <nat:6> * <var:E> /\ <var:S2> = <var:E> ^ <nat:2> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:S1> = <nat:6> * <var:E> /\ <var:S2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:S1> = <nat:6> * <var:E> /\ <var:S0> = <nat:9> /\ <var:z> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:S0> = <nat:9> /\ <var:z> = <nat:2> * <var:E> ^ <nat:2> + <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:z> = <nat:2> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 