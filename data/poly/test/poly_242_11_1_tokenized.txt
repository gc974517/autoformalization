\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:X> ; <var:K2> := <var:K1> * <var:X> ; <var:K3> := <var:K2> * <var:X> ; <var:K0> := <nat:1> ; <var:K1> := <var:K1> * <nat:7> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:5> ; <var:o> := <var:K3> <var:o> := <var:o> + <var:K2> <var:o> := <var:o> + <var:K1> <var:o> := <var:o> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Allowing that we have $ <var:X> = <var:I> $ before the evaluation of this segment of code , it holds that we have $ <var:o> = <nat:5> \cdot <var:I> ^ <nat:3> + <nat:5> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> + <nat:1> $ after code segment has finished . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be seen using usual Hoare reasoning . Paying attention to the upcoming step in our program , we see the variable binding code defining $ <var:X> $ toward $ <var:K1>$ . This takes the condition $ \{ <var:X> = <var:I> \} $ into the condition $ \{ <var:X> = <var:I> \land <var:K1> = <var:I> \} $ . This is rigorously given with the assignment inference rule given in usual Hoare logic . Moving forward to the proceeding piece of code contained in our set of instructions , we see the assignment line \verb | <var:K2> := <var:K1> * <var:X> ; | . This transfers the condition $ \{ <var:X> = <var:I> \land <var:K1> = <var:I> \} $ toward $ \{ <var:X> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \} $ . Advancing , the variable binding statement letting $ <var:K2> * <var:X> $ into $ <var:K3>$ . This code takes $ \{ <var:X> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \} $ toward $ \{ <var:X> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K3> = <var:I> ^ <nat:3> \} $ . Honing in on the subsequent line found in the list of commands , the environment update command defining $ <nat:1> $ into $ <var:K0>$ . This advances the precondition $ \{ <var:X> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K3> = <var:I> ^ <nat:3> \} $ as the condition $ \{ <var:X> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K3> = <var:I> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . This is ensured through the assignment law defined in standard Hoare logic . Advancing to the next step , we see the assignment command giving $ <var:K1> * <nat:7> $ into $ <var:K1>$ . This advances the precondition $ \{ <var:X> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K3> = <var:I> ^ <nat:3> \land <var:K0> = <nat:1> \} $ into the postcondition $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K3> = <var:I> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . This is shown using the assignment scheme given in Hoare reasoning . Focusing on the following command found in the code , the assignment code giving $ <var:K2> * <nat:5> $ toward $ <var:K2>$ . This advances the condition $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K3> = <var:I> ^ <nat:3> \land <var:K0> = <nat:1> \} $ into $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K2> = <nat:5> * <var:I> ^ <nat:2> \land <var:K3> = <var:I> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . This is known to be sound with the assignment law defined by standard Hoare logic . Considering the proceeding command contained in our list of instructions , the environment update line yielding $ <var:K3> * <nat:5> $ to $ <var:K3>$ . This code takes $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K2> = <nat:5> * <var:I> ^ <nat:2> \land <var:K3> = <var:I> ^ <nat:3> \land <var:K0> = <nat:1> \} $ into $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K2> = <nat:5> * <var:I> ^ <nat:2> \land <var:K3> = <nat:5> * <var:I> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . Taking another step toward the upcoming piece of code contained in our code segment , the variable update statement \verb | <var:o> := <var:K3> | . This advances the precondition $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K2> = <nat:5> * <var:I> ^ <nat:2> \land <var:K3> = <nat:5> * <var:I> ^ <nat:3> \land <var:K0> = <nat:1> \} $ to $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K2> = <nat:5> * <var:I> ^ <nat:2> \land <var:K0> = <nat:1> \land <var:o> = <nat:5> * <var:I> ^ <nat:3> \} $ . Going to the next step , we see the binding code assigning $ <var:o> + <var:K2$ to $ <var:o>$ . This line forwards $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K2> = <nat:5> * <var:I> ^ <nat:2> \land <var:K0> = <nat:1> \land <var:o> = <nat:5> * <var:I> ^ <nat:3> \} $ toward the postcondition $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K0> = <nat:1> \land <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> \} $ . This is guaranteed through the assignment rule obtained from usual Hoare logic . Advancing to the proceeding statement found in our code , we see the statement giving $ <var:o> + <var:K1$ toward $ <var:o>$ . This advances the condition $ \{ <var:X> = <var:I> \land <var:K1> = <nat:7> * <var:I> \land <var:K0> = <nat:1> \land <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> \} $ toward the condition $ \{ <var:X> = <var:I> \land <var:K0> = <nat:1> \land <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:7> * <var:I> \} $ . This is guaranteed through the assignment rule in standard Hoare reasoning . Further , we see the code letting $ <var:o> + <var:K0$ as $ <var:o>$ . This takes the condition $ \{ <var:X> = <var:I> \land <var:K0> = <nat:1> \land <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:7> * <var:I> \} $ into $ \{ <var:X> = <var:I> \land <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K1> := <var:X> ; <var:K2> := <var:K1> * <var:X> ; <var:K3> := <var:K2> * <var:X> ; <var:K0> := <nat:1> ; <var:K1> := <var:K1> * <nat:7> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:5> ; <var:o> := <var:K3> <var:o> := <var:o> + <var:K2> <var:o> := <var:o> + <var:K1> <var:o> := <var:o> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:X> = <var:I> }} <def:poly> {{ <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <var:I> /\ <var:K2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <var:I> /\ <var:K2> = <var:I> ^ <nat:2> /\ <var:K3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <var:I> /\ <var:K2> = <var:I> ^ <nat:2> /\ <var:K3> = <var:I> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <nat:7> * <var:I> /\ <var:K2> = <var:I> ^ <nat:2> /\ <var:K3> = <var:I> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <nat:7> * <var:I> /\ <var:K2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:K3> = <var:I> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <nat:7> * <var:I> /\ <var:K2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:I> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <nat:7> * <var:I> /\ <var:K2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:K0> = <nat:1> /\ <var:o> = <nat:5> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K1> = <nat:7> * <var:I> /\ <var:K0> = <nat:1> /\ <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K0> = <nat:1> /\ <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:o> = <nat:5> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 