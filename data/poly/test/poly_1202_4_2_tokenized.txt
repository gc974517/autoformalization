\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p> := <nat:4> ; <var:p> := <nat:2> + <var:p> * <var:u> ; <var:p> := <nat:2> + <var:p> * <var:u> ; <var:p> := <nat:3> + <var:p> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Allow for any integers $ <var:n> $ it to be that $ <var:u> = <var:n> $ before running our series of commands , it holds that we have $ <var:p> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our code is accomplished with standard Hoare reasoning . Advancing to the next statement in our segment of code , we see \verb | { <var:u> = <var:n> } <var:p> := <nat:4> { <var:u> = <var:n> \land <var:p> = <nat:4> } | . This is shown using the environment update law given by typical Hoare techniques . Further , \verb | { <var:u> = <var:n> } <var:p> := <nat:4> { <var:u> = <var:n> \land <var:p> = <nat:4> } | , \verb | { <var:u> = <var:n> \land <var:p> = <nat:4> } <var:p> := <nat:2> + <var:p> * <var:u> { <var:u> = <var:n> \land <var:p> = <nat:4> \times <var:n> + <nat:2> } | and \verb | { <var:u> = <var:n> \land <var:p> = <nat:4> \times <var:n> + <nat:2> } <var:p> := <nat:2> + <var:p> * <var:u> { <var:u> = <var:n> \land <var:p> = <nat:4> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:2> } | . This is deduced through the variable update rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:4> ; <var:p> := <nat:2> + <var:p> * <var:u> ; <var:p> := <nat:2> + <var:p> * <var:u> ; <var:p> := <nat:3> + <var:p> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:u> = <var:n> }} <def:poly> {{ <var:p> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:p> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:p> = <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:p> = <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:p> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 