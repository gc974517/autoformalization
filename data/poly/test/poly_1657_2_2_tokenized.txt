\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <nat:2> + <var:S> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:K> = <var:I> $ ( for natural numbers $ <var:I> $ ) prior to the execution of the code , it holds that we have $ <var:S> = <nat:1> \cdot <var:I> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the program can be accomplished by typical Hoare techniques . Keeping momentum , we see \begin{verbatim} { <var:K> = <var:I> } <var:S> := <nat:1> { <var:K> = <var:I> \land <var:S> = <nat:1> } { <var:K> = <var:I> \land <var:S> = <nat:1> } <var:S> := <nat:2> + <var:S> * <var:K{ <var:K> = <var:I> \land <var:S> = <nat:1> \cdot <var:I> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:1> ; <var:S> := <nat:2> + <var:S> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:K> = <var:I> }} <def:poly> {{ <var:S> = <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:S> = <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 