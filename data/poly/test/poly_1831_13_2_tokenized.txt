\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:1> ; <var:i> := <nat:4> + <var:i> * <var:Z> ; <var:i> := <nat:3> + <var:i> * <var:Z> ; <var:i> := <var:i> * <var:Z> ; <var:i> := <nat:4> + <var:i> * <var:Z> ; <var:i> := <nat:3> + <var:i> * <var:Z> ; <var:i> := <nat:3> + <var:i> * <var:Z> ; <var:i> := <var:i> * <var:Z> ; <var:i> := <nat:1> + <var:i> * <var:Z> ; <var:i> := <var:i> * <var:Z> ; <var:i> := <nat:2> + <var:i> * <var:Z> ; <var:i> := <nat:4> + <var:i> * <var:Z> ; <var:i> := <nat:1> + <var:i> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allow $ <var:Z> = <var:y> $ --- taking natural numbers $ <var:y> $ --- prior to executing our list of commands , it follows that we have $ <var:i> = <nat:1> \cdot <var:y> ^ <nat:12> + <nat:4> \cdot <var:y> ^ <nat:11> + <nat:3> \cdot <var:y> ^ <nat:10> + <nat:4> \cdot <var:y> ^ <nat:8> + <nat:3> \cdot <var:y> ^ <nat:7> + <nat:3> \cdot <var:y> ^ <nat:6> + <nat:1> \cdot <var:y> ^ <nat:4> + <nat:2> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:1> $ when code segment has terminated . \end{theorem} \begin{proof} The flow of logic for this program is given using typical Hoare techniques . Paying attention to the proceeding lines found in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:y> \} & <var:i> := <nat:1> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> \} \\ \{ <var:Z> = <var:y> \land <var:i> = <nat:1> \} & <var:i> := <nat:4> + <var:i> * <var:Z> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> + <nat:4> \} \\ \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> + <nat:4> \} & <var:i> := <nat:3> + <var:i> * <var:Z> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> \} \\ \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> \} & <var:i> := <var:i> * <var:Z> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + \} \\ \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + \} & <var:i> := <nat:4> + <var:i> * <var:Z> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> \} \\ \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> \} & <var:i> := <nat:3> + <var:i> * <var:Z> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:3> \} \\ \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:3> \} & <var:i> := <nat:3> + <var:i> * <var:Z> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> \} \end{tabular} Considering the proceeding statement contained in the code segment , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:y> \} & <var:i> := <nat:1> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> \} \end{tabular} Immediately after , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:y> \} & <var:i> := <nat:1> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> \} \\ \{ <var:Z> = <var:y> \land <var:i> = <nat:1> \} & <var:i> := <nat:4> + <var:i> * <var:Z> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> * <var:y> + <nat:4> \} \end{tabular} This is shown to be logically sound through the variable binding scheme obtained from typical Hoare reasoning . Shifting focus toward the following bit of code seen in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:y> \} & <var:i> := <nat:1> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> \} \end{tabular} This is sound through the environment update scheme defined in Hoare logic . Honing in on the following bit of code found in the set of commands , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:y> \} & <var:i> := <nat:1> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> \} \end{tabular} This is known to be sound using the environment update scheme defined by typical Hoare techniques . Next , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:y> \} & <var:i> := <nat:1> & \{ <var:Z> = <var:y> \land <var:i> = <nat:1> \} \end{tabular} This is rigorously given through the assignment inference rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:1> ; <var:i> := <nat:4> + <var:i> * <var:Z> ; <var:i> := <nat:3> + <var:i> * <var:Z> ; <var:i> := <var:i> * <var:Z> ; <var:i> := <nat:4> + <var:i> * <var:Z> ; <var:i> := <nat:3> + <var:i> * <var:Z> ; <var:i> := <nat:3> + <var:i> * <var:Z> ; <var:i> := <var:i> * <var:Z> ; <var:i> := <nat:1> + <var:i> * <var:Z> ; <var:i> := <var:i> * <var:Z> ; <var:i> := <nat:2> + <var:i> * <var:Z> ; <var:i> := <nat:4> + <var:i> * <var:Z> ; <var:i> := <nat:1> + <var:i> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:Z> = <var:y> }} <def:poly> {{ <var:i> = <nat:1> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:11> + <nat:4> * <var:y> ^ <nat:10> + <nat:3> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 