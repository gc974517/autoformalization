\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:5> ; <var:s> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Given that we have $ <var:v> = <var:n> $ ahead of executing this code segment then we have $ <var:s> = <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be given by standard Hoare reasoning . Shifting focus toward the following line found in the code segment , we have the variable binding statement giving $ <nat:5> $ to $ <var:q0>$ . This statement forwards the condition $ \{ <var:v> = <var:n> \} $ into $ \{ <var:v> = <var:n> \land <var:q0> = <nat:5> \} $ . Immediately following , we have the variable assignmet statement defining $ <var:q0$ toward $ <var:s>$ . This moves the precondition $ \{ <var:v> = <var:n> \land <var:q0> = <nat:5> \} $ into $ \{ <var:v> = <var:n> \land <var:s> = <nat:5> \} $ . This is ensured through the assignment scheme in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:s> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:v> = <var:n> }} <def:poly> {{ <var:s> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:s> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 