\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:2> + <var:U> * <var:z> ; <var:U> := <nat:4> + <var:U> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:z> = <var:s> $ prior to interpreting our series of instructions then we see $ <var:U> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> $ when code has executed . \end{theorem} \begin{proof} The argument for the set of instructions is accomplished through usual Hoare techniques . Following , the environment update statement \verb | <var:U> := <nat:3> ; | . This forwards the condition $ \{ <var:z> = <var:s> \} $ toward $ \{ <var:z> = <var:s> \land <var:U> = <nat:3> \} $ . Going to the next step , we have the variable update line \verb | <var:U> := <nat:2> + <var:U> * <var:z> ; | . This statement transfers the precondition $ \{ <var:z> = <var:s> \land <var:U> = <nat:3> \} $ as the condition $ \{ <var:z> = <var:s> \land <var:U> = <nat:3> * <var:s> + <nat:2> \} $ . This is guaranteed with the assignment inference rule defined by standard Hoare techniques . Advancing to the next step , we see the variable assignmet command letting $ <nat:4> + <var:U> * <var:z$ as $ <var:U>$ . This line moves $ \{ <var:z> = <var:s> \land <var:U> = <nat:3> * <var:s> + <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:s> \land <var:U> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <nat:2> + <var:U> * <var:z> ; <var:U> := <nat:4> + <var:U> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:z> = <var:s> }} <def:poly> {{ <var:U> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:U> = <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:U> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 