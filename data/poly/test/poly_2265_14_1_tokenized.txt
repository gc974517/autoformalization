\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:a1> := <var:x> ; <var:a2> := <var:a1> * <var:x> ; <var:a3> := <var:a2> * <var:x> ; <var:a4> := <var:a3> * <var:x> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:5> ; <var:a3> := <var:a3> * <nat:2> ; <var:a4> := <var:a4> * <nat:1> ; <var:D> := <var:a4> <var:D> := <var:D> + <var:a3> <var:D> := <var:D> + <var:a2> <var:D> := <var:D> + <var:a1> <var:D> := <var:D> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:x> = <var:u> $ given every integers $ <var:u> $ prior to running this set of commands , then we see $ <var:D> = <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:2> $ when segment of code has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be seen through standard Hoare techniques . Taking a look at the following bit of code contained in the series of instructions , we see the command \verb | <var:a1> := <var:x> ; | . This command transfers the condition $ \{ <var:x> = <var:u> \} $ into the postcondition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \} $ . Taking a look at the proceeding line of code found in the list of commands , we see the assignment line yielding $ <var:a1> * <var:x> $ to $ <var:a2>$ . This advances the condition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \} $ to the condition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \land <var:a2> = <var:u> ^ <nat:2> \} $ . This is deduced through the assignment inference rule found in typical Hoare techniques . Advancing , we see the binding code \verb | <var:a3> := <var:a2> * <var:x> ; | . This redefines the precondition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \land <var:a2> = <var:u> ^ <nat:2> \} $ as the condition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \land <var:a2> = <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \} $ . Moving onward , we see the command \verb | <var:a4> := <var:a3> * <var:x> ; | . This redefines $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \land <var:a2> = <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \} $ to the condition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \land <var:a2> = <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \} $ . This is sound by the assignment law given in Hoare reasoning . Next , the variable binding line \verb | <var:a0> := <nat:2> ; | . This moves the precondition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \land <var:a2> = <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \} $ into the postcondition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \land <var:a2> = <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ . This is shown to be logically sound by the assignment scheme defined by usual Hoare logic . Moving forward to the upcoming line of code found in the series of commands , we see the assignment code yielding $ <var:a1> * <nat:9> $ to $ <var:a1>$ . This statement forwards the condition $ \{ <var:x> = <var:u> \land <var:a1> = <var:u> \land <var:a2> = <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ as the postcondition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ . Taking another step toward the proceeding step seen in the series of instructions , we see the environment update command \verb | <var:a2> := <var:a2> * <nat:5> ; | . This line redefines the precondition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ to the condition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ . Honing in on the subsequent line seen in our program , we have the assignment code binding $ <var:a3> * <nat:2> $ toward $ <var:a3>$ . This redefines $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a3> = <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ . This is rigorously given through the assignment scheme given by Hoare logic . Shifting focus toward the next line in the list of commands , the variable update statement \verb | <var:a4> := <var:a4> * <nat:1> ; | . This command redefines the condition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:u> ^ <nat:3> \land <var:a4> = <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:u> ^ <nat:3> \land <var:a4> = <nat:1> \cdot <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ . This is shown through the assignment rule obtained from typical Hoare reasoning . Taking another step toward the proceeding line of code found in our series of commands , we have the assignment statement \verb | <var:D> := <var:a4> | . This moves the precondition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:u> ^ <nat:3> \land <var:a4> = <nat:1> \cdot <var:u> ^ <nat:4> \land <var:a0> = <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:u> ^ <nat:3> \land <var:a0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> \} $ . This is known to be sound by the assignment rule defined by usual Hoare techniques . Stepping through , we have the line \verb | <var:D> := <var:D> + <var:a3> | . This line redefines the condition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:u> ^ <nat:3> \land <var:a0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> \} $ into the postcondition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> \} $ . Moving on , the assignment statement \verb | <var:D> := <var:D> + <var:a2> | . This code transfers the condition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a2> = <nat:5> \cdot <var:u> ^ <nat:2> \land <var:a0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> \} $ to the condition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> ^ <nat:2> \} $ . This is guaranteed with the assignment law obtained from Hoare reasoning . Immediately following , we have the variable assignmet line defining $ <var:D> + <var:a1$ into $ <var:D>$ . This forwards the condition $ \{ <var:x> = <var:u> \land <var:a1> = <nat:9> \cdot <var:u> \land <var:a0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> ^ <nat:2> \} $ into the condition $ \{ <var:x> = <var:u> \land <var:a0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> ^ <nat:2> + <nat:9> \cdot <var:u> \} $ . Going forward , we see the assignment statement binding $ <var:D> + <var:a0$ into $ <var:D>$ . This forwards the precondition $ \{ <var:x> = <var:u> \land <var:a0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> ^ <nat:2> + <nat:9> \cdot <var:u> \} $ toward the condition $ \{ <var:x> = <var:u> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> ^ <nat:2> + <nat:9> \cdot <var:u> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <var:a4> : string := " <var:a4> " . Definition <def:poly> := <var:a1> := <var:x> ; <var:a2> := <var:a1> * <var:x> ; <var:a3> := <var:a2> * <var:x> ; <var:a4> := <var:a3> * <var:x> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:5> ; <var:a3> := <var:a3> * <nat:2> ; <var:a4> := <var:a4> * <nat:1> ; <var:D> := <var:a4> <var:D> := <var:D> + <var:a3> <var:D> := <var:D> + <var:a2> <var:D> := <var:D> + <var:a1> <var:D> := <var:D> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:x> = <var:u> }} <def:poly> {{ <var:D> = <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <var:u> /\ <var:a2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <var:u> /\ <var:a2> = <var:u> ^ <nat:2> /\ <var:a3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <var:u> /\ <var:a2> = <var:u> ^ <nat:2> /\ <var:a3> = <var:u> ^ <nat:3> /\ <var:a4> = <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <var:u> /\ <var:a2> = <var:u> ^ <nat:2> /\ <var:a3> = <var:u> ^ <nat:3> /\ <var:a4> = <var:u> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <nat:9> * <var:u> /\ <var:a2> = <var:u> ^ <nat:2> /\ <var:a3> = <var:u> ^ <nat:3> /\ <var:a4> = <var:u> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <nat:9> * <var:u> /\ <var:a2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:a3> = <var:u> ^ <nat:3> /\ <var:a4> = <var:u> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <nat:9> * <var:u> /\ <var:a2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:u> ^ <nat:3> /\ <var:a4> = <var:u> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <nat:9> * <var:u> /\ <var:a2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:u> ^ <nat:3> /\ <var:a4> = <nat:1> * <var:u> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <nat:9> * <var:u> /\ <var:a2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:u> ^ <nat:3> /\ <var:a0> = <nat:2> /\ <var:D> = <nat:1> * <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <nat:9> * <var:u> /\ <var:a2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:a0> = <nat:2> /\ <var:D> = <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a1> = <nat:9> * <var:u> /\ <var:a0> = <nat:2> /\ <var:D> = <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:a0> = <nat:2> /\ <var:D> = <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:D> = <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 