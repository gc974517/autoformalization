\begin{document} \begin{theorem} Define a list of commands as follows \begin{verbatim} <var:g1> := <var:h> ; <var:g2> := <var:g1> * <var:h> ; <var:g3> := <var:g2> * <var:h> ; <var:g4> := <var:g3> * <var:h> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:6> ; <var:g2> := <var:g2> * <nat:8> ; <var:g3> := <var:g3> * <nat:7> ; <var:g4> := <var:g4> * <nat:5> ; <var:l> := <var:g4> <var:l> := <var:l> + <var:g3> <var:l> := <var:l> + <var:g2> <var:l> := <var:l> + <var:g1> <var:l> := <var:l> + <var:g0> \end{verbatim} Assuming that we have $ <var:h> = <var:y> $ ( for all positive numbers $ <var:y> $ ) before interpreting this series of commands , it holds that we have $ <var:l> = <nat:5> \cdot <var:y> ^ <nat:4> + <nat:7> \cdot <var:y> ^ <nat:3> + <nat:8> \cdot <var:y> ^ <nat:2> + <nat:6> \cdot <var:y> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:h> = <var:y> \} \\ <var:g1> := <var:h> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <var:y> \} \\ <var:g2> := <var:g1> * <var:h> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <var:y> \land <var:g2> = <var:y> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:h> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <var:y> \land <var:g2> = <var:y> ^ <nat:2> \land <var:g3> = <var:y> ^ <nat:3> \} \\ <var:g4> := <var:g3> * <var:h> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <var:y> \land <var:g2> = <var:y> ^ <nat:2> \land <var:g3> = <var:y> ^ <nat:3> \land <var:g4> = <var:y> ^ <nat:4> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <var:y> \land <var:g2> = <var:y> ^ <nat:2> \land <var:g3> = <var:y> ^ <nat:3> \land <var:g4> = <var:y> ^ <nat:4> \land <var:g0> = <nat:4> \} \\ <var:g1> := <var:g1> * <nat:6> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <nat:6> * <var:y> \land <var:g2> = <var:y> ^ <nat:2> \land <var:g3> = <var:y> ^ <nat:3> \land <var:g4> = <var:y> ^ <nat:4> \land <var:g0> = <nat:4> \} \\ <var:g2> := <var:g2> * <nat:8> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <nat:6> * <var:y> \land <var:g2> = <nat:8> * <var:y> ^ <nat:2> \land <var:g3> = <var:y> ^ <nat:3> \land <var:g4> = <var:y> ^ <nat:4> \land <var:g0> = <nat:4> \} \\ <var:g3> := <var:g3> * <nat:7> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <nat:6> * <var:y> \land <var:g2> = <nat:8> * <var:y> ^ <nat:2> \land <var:g3> = <nat:7> * <var:y> ^ <nat:3> \land <var:g4> = <var:y> ^ <nat:4> \land <var:g0> = <nat:4> \} \\ <var:g4> := <var:g4> * <nat:5> ; \\ \{ <var:h> = <var:y> \land <var:g1> = <nat:6> * <var:y> \land <var:g2> = <nat:8> * <var:y> ^ <nat:2> \land <var:g3> = <nat:7> * <var:y> ^ <nat:3> \land <var:g4> = <nat:5> * <var:y> ^ <nat:4> \land <var:g0> = <nat:4> \} \\ <var:l> := <var:g4> \\ \{ <var:h> = <var:y> \land <var:g1> = <nat:6> * <var:y> \land <var:g2> = <nat:8> * <var:y> ^ <nat:2> \land <var:g3> = <nat:7> * <var:y> ^ <nat:3> \land <var:g0> = <nat:4> \land <var:l> = <nat:5> * <var:y> ^ <nat:4> \} \\ <var:l> := <var:l> + <var:g3> \\ \{ <var:h> = <var:y> \land <var:g1> = <nat:6> * <var:y> \land <var:g2> = <nat:8> * <var:y> ^ <nat:2> \land <var:g0> = <nat:4> \land <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:g2> \\ \{ <var:h> = <var:y> \land <var:g1> = <nat:6> * <var:y> \land <var:g0> = <nat:4> \land <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:g1> \\ \{ <var:h> = <var:y> \land <var:g0> = <nat:4> \land <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> \} \end{eqnarray} Furthering evaluating this code segment gives us : \begin{eqnarray} <var:l> := <var:l> + <var:g0> \\ \{ <var:h> = <var:y> \land <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:4> \} \end{eqnarray} Given the preceding argument , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:h> = <var:y> }} <var:g1> := <var:h> ; <var:g2> := <var:g1> * <var:h> ; <var:g3> := <var:g2> * <var:h> ; <var:g4> := <var:g3> * <var:h> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:6> ; <var:g2> := <var:g2> * <nat:8> ; <var:g3> := <var:g3> * <nat:7> ; <var:g4> := <var:g4> * <nat:5> ; <var:l> := <var:g4> <var:l> := <var:l> + <var:g3> <var:l> := <var:l> + <var:g2> <var:l> := <var:l> + <var:g1> <var:l> := <var:l> + <var:g0> {{ <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <var:y> /\ <var:g2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <var:y> /\ <var:g2> = <var:y> ^ <nat:2> /\ <var:g3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <var:y> /\ <var:g2> = <var:y> ^ <nat:2> /\ <var:g3> = <var:y> ^ <nat:3> /\ <var:g4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <var:y> /\ <var:g2> = <var:y> ^ <nat:2> /\ <var:g3> = <var:y> ^ <nat:3> /\ <var:g4> = <var:y> ^ <nat:4> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <nat:6> * <var:y> /\ <var:g2> = <var:y> ^ <nat:2> /\ <var:g3> = <var:y> ^ <nat:3> /\ <var:g4> = <var:y> ^ <nat:4> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <nat:6> * <var:y> /\ <var:g2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:g3> = <var:y> ^ <nat:3> /\ <var:g4> = <var:y> ^ <nat:4> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <nat:6> * <var:y> /\ <var:g2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:y> ^ <nat:3> /\ <var:g4> = <var:y> ^ <nat:4> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <nat:6> * <var:y> /\ <var:g2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:y> ^ <nat:3> /\ <var:g4> = <nat:5> * <var:y> ^ <nat:4> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <nat:6> * <var:y> /\ <var:g2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:y> ^ <nat:3> /\ <var:g0> = <nat:4> /\ <var:l> = <nat:5> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <nat:6> * <var:y> /\ <var:g2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:g0> = <nat:4> /\ <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g1> = <nat:6> * <var:y> /\ <var:g0> = <nat:4> /\ <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:g0> = <nat:4> /\ <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:l> = <nat:5> * <var:y> ^ <nat:4> + <nat:7> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 