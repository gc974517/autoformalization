\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:s1> := <var:h> ; <var:s2> := <var:s1> * <var:h> ; <var:s3> := <var:s2> * <var:h> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:1> ; <var:a> := <var:s3> <var:a> := <var:a> + <var:s2> <var:a> := <var:a> + <var:s1> <var:a> := <var:a> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:h> = <var:g> $ prior to interpreting our code , it must be that we see $ <var:a> = <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> $ once set of commands is done . \end{theorem} \begin{proof} Applying typical Hoare logic gives us : \begin{eqnarray} \{ <var:h> = <var:g> \} \\ <var:s1> := <var:h> ; \\ \{ <var:h> = <var:g> \land <var:s1> = <var:g> \} \\ <var:s2> := <var:s1> * <var:h> ; \\ \{ <var:h> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:h> ; \\ \{ <var:h> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:h> = <var:g> \land <var:s1> = <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> \} \\ <var:s1> := <var:s1> * <nat:1> ; \\ \{ <var:h> = <var:g> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> \} \\ <var:s2> := <var:s2> * <nat:3> ; \\ \{ <var:h> = <var:g> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:3> \cdot <var:g> ^ <nat:2> \land <var:s3> = <var:g> ^ <nat:3> \land <var:s0> = <nat:2> \} \\ <var:s3> := <var:s3> * <nat:1> ; \\ \{ <var:h> = <var:g> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:3> \cdot <var:g> ^ <nat:2> \land <var:s3> = <nat:1> \cdot <var:g> ^ <nat:3> \land <var:s0> = <nat:2> \} \\ <var:a> := <var:s3> \\ \{ <var:h> = <var:g> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s2> = <nat:3> \cdot <var:g> ^ <nat:2> \land <var:s0> = <nat:2> \land <var:a> = <nat:1> \cdot <var:g> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:s2> \\ \{ <var:h> = <var:g> \land <var:s1> = <nat:1> \cdot <var:g> \land <var:s0> = <nat:2> \land <var:a> = <nat:1> \cdot <var:g> ^ <nat:3> + <nat:3> \cdot <var:g> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:s1> \\ \{ <var:h> = <var:g> \land <var:s0> = <nat:2> \land <var:a> = <nat:1> \cdot <var:g> ^ <nat:3> + <nat:3> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> \} \\ <var:a> := <var:a> + <var:s0> \\ \{ <var:h> = <var:g> \land <var:a> = <nat:1> \cdot <var:g> ^ <nat:3> + <nat:3> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> + <nat:2> \} \end{eqnarray} Considering the preceding argument , our list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:h> ; <var:s2> := <var:s1> * <var:h> ; <var:s3> := <var:s2> * <var:h> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:1> ; <var:a> := <var:s3> <var:a> := <var:a> + <var:s2> <var:a> := <var:a> + <var:s1> <var:a> := <var:a> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <def:poly> {{ <var:a> = <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <var:g> /\ <var:s2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <var:g> /\ <var:s2> = <var:g> ^ <nat:2> /\ <var:s3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <var:g> /\ <var:s2> = <var:g> ^ <nat:2> /\ <var:s3> = <var:g> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <nat:1> * <var:g> /\ <var:s2> = <var:g> ^ <nat:2> /\ <var:s3> = <var:g> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <nat:1> * <var:g> /\ <var:s2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:s3> = <var:g> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <nat:1> * <var:g> /\ <var:s2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:s3> = <nat:1> * <var:g> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <nat:1> * <var:g> /\ <var:s2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:s0> = <nat:2> /\ <var:a> = <nat:1> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s1> = <nat:1> * <var:g> /\ <var:s0> = <nat:2> /\ <var:a> = <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:s0> = <nat:2> /\ <var:a> = <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:a> = <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 