\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:5> ; <var:T> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:k> = <var:B> $ before the evaluation of the set of instructions , it must be that we have $ <var:T> = <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code can be seen by standard Hoare logic . Observing the proceeding command seen in the list of instructions , we have \begin{eqnarray} \{ <var:k> = <var:B> \} \, <var:u0> := <nat:5> \, \{ <var:k> = <var:B> \land <var:u0> = <nat:5> \} \end{eqnarray} Moving on to the next statement found in our list of commands , we have \begin{eqnarray} \{ <var:k> = <var:B> \} \, <var:u0> := <nat:5> \, \{ <var:k> = <var:B> \land <var:u0> = <nat:5> \} \end{eqnarray} This is sound with the scheme obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:5> ; <var:T> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:k> = <var:B> }} <def:poly> {{ <var:T> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:T> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 