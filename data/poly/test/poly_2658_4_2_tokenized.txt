\begin{document} \begin{theorem} Consider a list of instructions : \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <var:i> * <var:G> ; <var:i> := <nat:1> + <var:i> * <var:G> ; <var:i> := <nat:1> + <var:i> * <var:G> \end{verbatim} Given that $ <var:G> = <var:q> $ ahead of running this code segment then $ <var:i> = <nat:2> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> + <nat:1> $ . \end{theorem} \begin{proof} We can see that the below decorated code segment . \begin{eqnarray} \{ <var:G> = <var:q> \} \\ <var:i> := <nat:2> ; \\ \{ <var:G> = <var:q> \land <var:i> = <nat:2> \} \\ <var:i> := <var:i> * <var:G> ; \\ \{ <var:G> = <var:q> \land <var:i> = <nat:2> * <var:q> + \} \\ <var:i> := <nat:1> + <var:i> * <var:G> ; \\ \{ <var:G> = <var:q> \land <var:i> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> \} \\ <var:i> := <nat:1> + <var:i> * <var:G> \\ \{ <var:G> = <var:q> \land <var:i> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:1> \} \end{eqnarray} Using Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:G> = <var:q> }} <var:i> := <nat:2> ; <var:i> := <var:i> * <var:G> ; <var:i> := <nat:1> + <var:i> * <var:G> ; <var:i> := <nat:1> + <var:i> * <var:G> {{ <var:i> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:i> = <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:i> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:i> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 