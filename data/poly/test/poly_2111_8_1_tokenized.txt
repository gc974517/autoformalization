\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:Q> ; <var:T2> := <var:T1> * <var:Q> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:3> ; <var:b> := <var:T2> <var:b> := <var:b> + <var:T1> <var:b> := <var:b> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Given it to hold that $ <var:Q> = <var:C> $ letting $ <var:C> $ ahead of evaluating our list of instructions it follows that we have $ <var:b> = <nat:3> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:7> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques yields : \begin{eqnarray} \{ <var:Q> = <var:C> \} \\ <var:T1> := <var:Q> ; \\ \{ <var:Q> = <var:C> \land <var:T1> = <var:C> \} \\ <var:T2> := <var:T1> * <var:Q> ; \\ \{ <var:Q> = <var:C> \land <var:T1> = <var:C> \land <var:T2> = <var:C> ^ <nat:2> \} \\ <var:T0> := <nat:7> ; \\ \{ <var:Q> = <var:C> \land <var:T1> = <var:C> \land <var:T2> = <var:C> ^ <nat:2> \land <var:T0> = <nat:7> \} \\ <var:T1> := <var:T1> * <nat:4> ; \\ \{ <var:Q> = <var:C> \land <var:T1> = <nat:4> * <var:C> \land <var:T2> = <var:C> ^ <nat:2> \land <var:T0> = <nat:7> \} \\ <var:T2> := <var:T2> * <nat:3> ; \\ \{ <var:Q> = <var:C> \land <var:T1> = <nat:4> * <var:C> \land <var:T2> = <nat:3> * <var:C> ^ <nat:2> \land <var:T0> = <nat:7> \} \\ <var:b> := <var:T2> \\ \{ <var:Q> = <var:C> \land <var:T1> = <nat:4> * <var:C> \land <var:T0> = <nat:7> \land <var:b> = <nat:3> * <var:C> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:T1> \\ \{ <var:Q> = <var:C> \land <var:T0> = <nat:7> \land <var:b> = <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> \} \end{eqnarray} Allowing running the series of commands produces : \begin{eqnarray} <var:b> := <var:b> + <var:T0> \\ \{ <var:Q> = <var:C> \land <var:b> = <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:7> \} \end{eqnarray} Given the preceding argument , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T1> := <var:Q> ; <var:T2> := <var:T1> * <var:Q> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:3> ; <var:b> := <var:T2> <var:b> := <var:b> + <var:T1> <var:b> := <var:b> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:Q> = <var:C> }} <def:poly> {{ <var:b> = <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:T1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:T1> = <var:C> /\ <var:T2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:T1> = <var:C> /\ <var:T2> = <var:C> ^ <nat:2> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:T1> = <nat:4> * <var:C> /\ <var:T2> = <var:C> ^ <nat:2> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:T1> = <nat:4> * <var:C> /\ <var:T2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:T1> = <nat:4> * <var:C> /\ <var:T0> = <nat:7> /\ <var:b> = <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:T0> = <nat:7> /\ <var:b> = <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:C> /\ <var:b> = <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 