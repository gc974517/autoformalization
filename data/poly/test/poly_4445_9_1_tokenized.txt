\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:y1> := <var:C> ; <var:y2> := <var:y1> * <var:C> ; <var:y3> := <var:y2> * <var:C> ; <var:y0> := <nat:2> ; <var:y2> := <var:y2> * <nat:1> ; <var:y3> := <var:y3> * <nat:1> ; <var:p> := <var:y3> <var:p> := <var:p> + <var:y2> <var:p> := <var:p> + <var:y0> \end{verbatim} Allowing $ <var:C> = <var:W> $ prior to running this segment of code it must be that we have $ <var:p> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:2> $ after segment of code has executed . \end{theorem} \begin{proof} The argument for the series of commands is shown with standard Hoare techniques . Following , the assignment statement assigning $ <var:C> $ toward $ <var:y1>$ . This advances $ \{ <var:C> = <var:W> \} $ as the postcondition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \} $ . Shifting focus toward the proceeding step contained in our segment of code , we have the binding line yielding $ <var:y1> * <var:C> $ toward $ <var:y2>$ . This code moves the condition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \} $ into the postcondition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <var:W> ^ <nat:2> \} $ . This is guaranteed by the assignment rule from standard Hoare reasoning . Moving on , the binding line \verb | <var:y3> := <var:y2> * <var:C> ; | . This moves $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <var:W> ^ <nat:2> \} $ toward $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <var:W> ^ <nat:2> \land <var:y3> = <var:W> ^ <nat:3> \} $ . This is ensured by the assignment inference rule from usual Hoare reasoning . Observing the next line of code seen in the list of instructions , we have the variable binding command binding $ <nat:2> $ toward $ <var:y0>$ . This moves the condition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <var:W> ^ <nat:2> \land <var:y3> = <var:W> ^ <nat:3> \} $ toward the condition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <var:W> ^ <nat:2> \land <var:y3> = <var:W> ^ <nat:3> \land <var:y0> = <nat:2> \} $ . This is known to be sound using the assignment scheme of typical Hoare reasoning . Observing the upcoming step seen in our segment of code , we see the binding statement letting $ <var:y2> * <nat:1> $ toward $ <var:y2>$ . This statement forwards the precondition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <var:W> ^ <nat:2> \land <var:y3> = <var:W> ^ <nat:3> \land <var:y0> = <nat:2> \} $ as the postcondition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:y3> = <var:W> ^ <nat:3> \land <var:y0> = <nat:2> \} $ . Taking a look at the subsequent line of code found in the set of commands , we see the variable assignmet statement defining $ <var:y3> * <nat:1> $ toward $ <var:y3>$ . This line forwards the condition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:y3> = <var:W> ^ <nat:3> \land <var:y0> = <nat:2> \} $ to the condition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:W> ^ <nat:3> \land <var:y0> = <nat:2> \} $ . This is ensured using the assignment scheme found in Hoare techniques . Looking at the upcoming line contained in our code segment , the binding code binding $ <var:y3$ toward $ <var:p>$ . This transfers the condition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:W> ^ <nat:3> \land <var:y0> = <nat:2> \} $ toward $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:y0> = <nat:2> \land <var:p> = <nat:1> \cdot <var:W> ^ <nat:3> \} $ . Now , the environment update code \verb | <var:p> := <var:p> + <var:y2> | . This moves the precondition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:y0> = <nat:2> \land <var:p> = <nat:1> \cdot <var:W> ^ <nat:3> \} $ to the condition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y0> = <nat:2> \land <var:p> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> \} $ . This is given by the assignment rule from usual Hoare reasoning . Shifting focus toward the next bit of code found in our code segment , we have the assignment code binding $ <var:p> + <var:y0$ into $ <var:p>$ . This line advances the precondition $ \{ <var:C> = <var:W> \land <var:y1> = <var:W> \land <var:y0> = <nat:2> \land <var:p> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> \} $ toward the condition $ \{ <var:C> = <var:W> \land <var:p> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:C> = <var:W> }} <var:y1> := <var:C> ; <var:y2> := <var:y1> * <var:C> ; <var:y3> := <var:y2> * <var:C> ; <var:y0> := <nat:2> ; <var:y2> := <var:y2> * <nat:1> ; <var:y3> := <var:y3> * <nat:1> ; <var:p> := <var:y3> <var:p> := <var:p> + <var:y2> <var:p> := <var:p> + <var:y0> {{ <var:p> = <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:y1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:y1> = <var:W> /\ <var:y2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:y1> = <var:W> /\ <var:y2> = <var:W> ^ <nat:2> /\ <var:y3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:y1> = <var:W> /\ <var:y2> = <var:W> ^ <nat:2> /\ <var:y3> = <var:W> ^ <nat:3> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:y1> = <var:W> /\ <var:y2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:y3> = <var:W> ^ <nat:3> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:y1> = <var:W> /\ <var:y2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:W> ^ <nat:3> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:y1> = <var:W> /\ <var:y2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:y0> = <nat:2> /\ <var:p> = <nat:1> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:y1> = <var:W> /\ <var:y0> = <nat:2> /\ <var:p> = <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:p> = <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 