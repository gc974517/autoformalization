\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:9> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:M> ; <var:L2> := <nat:7> ; <var:L2> := <var:L2> * <var:M> ; <var:L2> := <var:L2> * <var:M> ; <var:L3> := <nat:1> ; <var:L3> := <var:L3> * <var:M> ; <var:L3> := <var:L3> * <var:M> ; <var:L3> := <var:L3> * <var:M> ; <var:g> := <var:L3> ; <var:g> := <var:g> + <var:L2> ; <var:g> := <var:g> + <var:L1> ; <var:g> := <var:g> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:M> = <var:G> $ ahead of executing our segment of code , it must be that $ <var:g> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> + <nat:9> \cdot <var:G> + <nat:9> $ after list of instructions has finished executing . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:M> = <var:G> \} \\ <var:L0> := <nat:9> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \} \\ <var:L1> := <nat:9> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \} \\ <var:L1> := <var:L1> * <var:M> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \} \\ <var:L2> := <nat:7> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:L2> = <nat:7> \} \\ <var:L2> := <var:L2> * <var:M> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:L2> = <nat:7> \times <var:G> \} \\ <var:L2> := <var:L2> * <var:M> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:L2> = <nat:7> \times <var:G> ^ <nat:2> \} \\ <var:L3> := <nat:1> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:L2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:L3> = <nat:1> \} \\ <var:L3> := <var:L3> * <var:M> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:L2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:L3> = <nat:1> \times <var:G> \} \\ <var:L3> := <var:L3> * <var:M> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:L2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:L3> = <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:L3> := <var:L3> * <var:M> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:L2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:L3> = <nat:1> \times <var:G> ^ <nat:3> \} \\ <var:g> := <var:L3> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:L2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:g> = <nat:1> \times <var:G> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:L2> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:L1> = <nat:9> \times <var:G> \land <var:g> = <nat:1> \times <var:G> ^ <nat:3> + <nat:7> \times <var:G> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:L1> ; \\ \{ <var:M> = <var:G> \land <var:L0> = <nat:9> \land <var:g> = <nat:1> \times <var:G> ^ <nat:3> + <nat:7> \times <var:G> ^ <nat:2> + <nat:9> \times <var:G> \} \\ <var:g> := <var:g> + <var:L0> \\ \{ <var:M> = <var:G> \land <var:g> = <nat:1> \times <var:G> ^ <nat:3> + <nat:7> \times <var:G> ^ <nat:2> + <nat:9> \times <var:G> + <nat:9> \} \end{eqnarray} As a result , the set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L0> := <nat:9> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:M> ; <var:L2> := <nat:7> ; <var:L2> := <var:L2> * <var:M> ; <var:L2> := <var:L2> * <var:M> ; <var:L3> := <nat:1> ; <var:L3> := <var:L3> * <var:M> ; <var:L3> := <var:L3> * <var:M> ; <var:L3> := <var:L3> * <var:M> ; <var:g> := <var:L3> ; <var:g> := <var:g> + <var:L2> ; <var:g> := <var:g> + <var:L1> ; <var:g> := <var:g> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:M> = <var:G> }} <def:poly> {{ <var:g> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:L2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:L2> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:L2> = <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:L2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:L3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:L2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:L3> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:L2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:L3> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:L2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:L3> = <nat:1> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:L2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:g> = <nat:1> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:9> * <var:G> /\ <var:g> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:L0> = <nat:9> /\ <var:g> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:g> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 