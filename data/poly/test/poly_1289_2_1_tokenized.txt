\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:7> ; <var:a> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:Y> = <var:G> $ ( given every natural numbers $ <var:G> $ ) ahead of the evaluation of this code segment it holds that we have $ <var:a> = <nat:7> $ . \end{theorem} \begin{proof} The course of logic for the segment of code is done through typical Hoare techniques . Advancing to the upcoming statement found in our program , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:G> \} & <var:d0> := <nat:7> & \{ <var:Y> = <var:G> \land <var:d0> = <nat:7> \} \end{tabular} This is known to be sound using the assignment scheme from usual Hoare techniques . Shifting focus toward the proceeding command found in our series of commands , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:G> \} & <var:d0> := <nat:7> & \{ <var:Y> = <var:G> \land <var:d0> = <nat:7> \} \end{tabular} This is shown with the environment update inference rule of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:7> ; <var:a> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Y> = <var:G> }} <def:poly> {{ <var:a> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:a> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 