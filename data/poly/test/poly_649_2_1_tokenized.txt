\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:4> ; <var:P> := <var:B0> \end{verbatim} Allowing $ <var:e> = <var:C> $ prior to executing our series of commands , it must be that we see $ <var:P> = <nat:4> $ after set of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:C> \} \\ <var:B0> := <nat:4> ; \\ \{ <var:e> = <var:C> \land <var:B0> = <nat:4> \} \\ <var:P> := <var:B0> \\ \{ <var:e> = <var:C> \land <var:P> = <nat:4> \} \end{eqnarray} The application of Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:e> = <var:C> }} <var:B0> := <nat:4> ; <var:P> := <var:B0> {{ <var:P> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:P> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 