\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:b0> := <nat:3> ; <var:e> := <var:b0> \end{verbatim} Assume that $ <var:s> = <var:f> $ --- given all positive numbers $ <var:f> $ --- before the execution of this list of instructions , it holds that $ <var:e> = <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:s> = <var:f> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:s> = <var:f> \land <var:b0> = <nat:3> \} \\ <var:e> := <var:b0> \\ \{ <var:s> = <var:f> \land <var:e> = <nat:3> \} \end{eqnarray} As a result , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:s> = <var:f> }} <var:b0> := <nat:3> ; <var:e> := <var:b0> {{ <var:e> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:e> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 