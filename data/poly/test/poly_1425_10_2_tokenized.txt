\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:3> + <var:G> * <var:W> ; <var:G> := <nat:1> + <var:G> * <var:W> ; <var:G> := <nat:4> + <var:G> * <var:W> ; <var:G> := <var:G> * <var:W> ; <var:G> := <var:G> * <var:W> ; <var:G> := <var:G> * <var:W> ; <var:G> := <nat:1> + <var:G> * <var:W> ; <var:G> := <nat:3> + <var:G> * <var:W> ; <var:G> := <nat:4> + <var:G> * <var:W> \end{verbatim} Assuming it to hold that $ <var:W> = <var:t> $ prior to running our set of commands , it must be that $ <var:G> = <nat:4> \times <var:t> ^ <nat:9> + <nat:3> \times <var:t> ^ <nat:8> + <nat:1> \times <var:t> ^ <nat:7> + <nat:4> \times <var:t> ^ <nat:6> + <nat:1> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:4> $ after series of instructions has exited . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be demonstrated by usual Hoare logic . Advancing to the upcoming lines contained in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:W> = <var:t> \} & <var:G> := <nat:4> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \} \\ \{ <var:W> = <var:t> \land <var:G> = <nat:4> \} & <var:G> := <nat:3> + <var:G> * <var:W> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \cdot <var:t> + <nat:3> \} \\ \{ <var:W> = <var:t> \land <var:G> = <nat:4> \cdot <var:t> + <nat:3> \} & <var:G> := <nat:1> + <var:G> * <var:W> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> \} \\ \{ <var:W> = <var:t> \land <var:G> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> \} & <var:G> := <nat:4> + <var:G> * <var:W> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:4> \} \end{tabular} Taking a look at the next line of code seen in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:W> = <var:t> \} & <var:G> := <nat:4> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \} \end{tabular} This is rigorously given through the assignment law given by standard Hoare techniques . Taking a look at the upcoming steps seen in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:W> = <var:t> \} & <var:G> := <nat:4> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \} \\ \{ <var:W> = <var:t> \land <var:G> = <nat:4> \} & <var:G> := <nat:3> + <var:G> * <var:W> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \cdot <var:t> + <nat:3> \} \\ \{ <var:W> = <var:t> \land <var:G> = <nat:4> \cdot <var:t> + <nat:3> \} & <var:G> := <nat:1> + <var:G> * <var:W> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> \} \end{tabular} Observing the following line seen in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:W> = <var:t> \} & <var:G> := <nat:4> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \} \end{tabular} Looking at the next bit of code contained in the list of commands , we have \[ \begin{tabular} {rcl} \{ <var:W> = <var:t> \} & <var:G> := <nat:4> & \{ <var:W> = <var:t> \land <var:G> = <nat:4> \} \end{tabular} This is sound with the variable assignmet law from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:W> = <var:t> }} <var:G> := <nat:4> ; <var:G> := <nat:3> + <var:G> * <var:W> ; <var:G> := <nat:1> + <var:G> * <var:W> ; <var:G> := <nat:4> + <var:G> * <var:W> ; <var:G> := <var:G> * <var:W> ; <var:G> := <var:G> * <var:W> ; <var:G> := <var:G> * <var:W> ; <var:G> := <nat:1> + <var:G> * <var:W> ; <var:G> := <nat:3> + <var:G> * <var:W> ; <var:G> := <nat:4> + <var:G> * <var:W> {{ <var:G> = <nat:4> * <var:t> ^ <nat:9> + <nat:3> * <var:t> ^ <nat:8> + <nat:1> * <var:t> ^ <nat:7> + <nat:4> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> ^ <nat:6> + <nat:3> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> ^ <nat:7> + <nat:3> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> ^ <nat:8> + <nat:3> * <var:t> ^ <nat:7> + <nat:1> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:5> + <nat:1> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:G> = <nat:4> * <var:t> ^ <nat:9> + <nat:3> * <var:t> ^ <nat:8> + <nat:1> * <var:t> ^ <nat:7> + <nat:4> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 