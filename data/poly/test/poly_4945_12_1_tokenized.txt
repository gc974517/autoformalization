\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:L1> := <var:f> ; <var:L2> := <var:L1> * <var:f> ; <var:L3> := <var:L2> * <var:f> ; <var:L4> := <var:L3> * <var:f> ; <var:L0> := <nat:9> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:8> ; <var:L4> := <var:L4> * <nat:1> ; <var:e> := <var:L4> <var:e> := <var:e> + <var:L3> <var:e> := <var:e> + <var:L2> <var:e> := <var:e> + <var:L0> \end{verbatim} Given ( for some $ <var:G> $ ) it to be that $ <var:f> = <var:G> $ ahead of the evaluation of our program it follows that we have $ <var:e> = <nat:1> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is given with standard Hoare reasoning . Paying attention to the next pieces of code found in our series of instructions , we see \begin{verbatim} { <var:f> = <var:G> } <var:L1> := <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> } { <var:f> = <var:G> \land <var:L1> = <var:G> } <var:L2> := <var:L1> * <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> } { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> } <var:L3> := <var:L2> * <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> \land <var:L3> = <var:G> ^ <nat:3> } { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> \land <var:L3> = <var:G> ^ <nat:3> } <var:L4> := <var:L3> * <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> \land <var:L3> = <var:G> ^ <nat:3> \land <var:L4> = <var:G> ^ <nat:4> } \end{verbatim} Moving forward to the next step , \begin{verbatim} { <var:f> = <var:G> } <var:L1> := <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> } { <var:f> = <var:G> \land <var:L1> = <var:G> } <var:L2> := <var:L1> * <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> } { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> } <var:L3> := <var:L2> * <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> \land <var:L3> = <var:G> ^ <nat:3> } { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> \land <var:L3> = <var:G> ^ <nat:3> } <var:L4> := <var:L3> * <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> \land <var:L3> = <var:G> ^ <nat:3> \land <var:L4> = <var:G> ^ <nat:4> } \end{verbatim} Now , we see \begin{verbatim} { <var:f> = <var:G> } <var:L1> := <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> } { <var:f> = <var:G> \land <var:L1> = <var:G> } <var:L2> := <var:L1> * <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> } \end{verbatim} Moving on , we see \begin{verbatim} { <var:f> = <var:G> } <var:L1> := <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> } { <var:f> = <var:G> \land <var:L1> = <var:G> } <var:L2> := <var:L1> * <var:f> { <var:f> = <var:G> \land <var:L1> = <var:G> \land <var:L2> = <var:G> ^ <nat:2> } \end{verbatim} This is shown to be logically sound using the inference rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <var:L4> : string := " <var:L4> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:f> = <var:G> }} <var:L1> := <var:f> ; <var:L2> := <var:L1> * <var:f> ; <var:L3> := <var:L2> * <var:f> ; <var:L4> := <var:L3> * <var:f> ; <var:L0> := <nat:9> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:8> ; <var:L4> := <var:L4> * <nat:1> ; <var:e> := <var:L4> <var:e> := <var:e> + <var:L3> <var:e> := <var:e> + <var:L2> <var:e> := <var:e> + <var:L0> {{ <var:e> = <nat:1> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <var:G> ^ <nat:2> /\ <var:L3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <var:G> ^ <nat:2> /\ <var:L3> = <var:G> ^ <nat:3> /\ <var:L4> = <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <var:G> ^ <nat:2> /\ <var:L3> = <var:G> ^ <nat:3> /\ <var:L4> = <var:G> ^ <nat:4> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:L3> = <var:G> ^ <nat:3> /\ <var:L4> = <var:G> ^ <nat:4> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:L3> = <nat:8> * <var:G> ^ <nat:3> /\ <var:L4> = <var:G> ^ <nat:4> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:L3> = <nat:8> * <var:G> ^ <nat:3> /\ <var:L4> = <nat:1> * <var:G> ^ <nat:4> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:L3> = <nat:8> * <var:G> ^ <nat:3> /\ <var:L0> = <nat:9> /\ <var:e> = <nat:1> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:L0> = <nat:9> /\ <var:e> = <nat:1> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:L1> = <var:G> /\ <var:L0> = <nat:9> /\ <var:e> = <nat:1> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:G> /\ <var:e> = <nat:1> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 