\begin{document} \begin{theorem} We define the following code such that \begin{verbatim} <var:c0> := <nat:2> ; <var:j> := <var:c0> \end{verbatim} Given $ <var:K> = <var:z> $ prior to running the segment of code it follows that we see $ <var:j> = <nat:2> $ after segment of code has executed . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands is evident with typical Hoare reasoning . Shifting focus toward the upcoming piece of code in our program , we see the variable assignmet line binding $ <nat:2> $ as $ <var:c0>$ . This transfers the condition $ \{ <var:K> = <var:z> \} $ as the postcondition $ \{ <var:K> = <var:z> \land <var:c0> = <nat:2> \} $ . This is guaranteed by the assignment scheme of usual Hoare reasoning . Next , we have the assignment line \verb | <var:j> := <var:c0> | . This transfers $ \{ <var:K> = <var:z> \land <var:c0> = <nat:2> \} $ as the postcondition $ \{ <var:K> = <var:z> \land <var:j> = <nat:2> \} $ . This is rigorously given by the assignment rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:K> = <var:z> }} <var:c0> := <nat:2> ; <var:j> := <var:c0> {{ <var:j> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:j> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 