\begin{document} \begin{theorem} Let the following series of instructions as follows \begin{verbatim} <var:m0> := <nat:7> ; <var:N> := <var:m0> \end{verbatim} Assuming it to be that $ <var:T> = <var:k> $ prior to running the segment of code , it follows that we see $ <var:N> = <nat:7> $ after program exits . \end{theorem} \begin{proof} Proving correctness for our list of commands is accomplished through Hoare reasoning . Advancing on , we see \verb | { <var:T> = <var:k> } <var:m0> := <nat:7> { <var:T> = <var:k> \land <var:m0> = <nat:7> } | and \verb | { <var:T> = <var:k> \land <var:m0> = <nat:7> } <var:N> := <var:m0{ <var:T> = <var:k> \land <var:N> = <nat:7> } | . This is known to be sound using the assignment inference rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:T> = <var:k> }} <var:m0> := <nat:7> ; <var:N> := <var:m0> {{ <var:N> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:N> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 