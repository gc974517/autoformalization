\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:F> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:9> ; <var:G> := <var:u1> <var:G> := <var:G> + <var:u0> \end{verbatim} Assuming it to hold that $ <var:F> = <var:v> $ prior to the evaluation of our list of commands it must be that $ <var:G> = <nat:9> \times <var:v> + <nat:2> $ . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:F> = <var:v> \} \\ <var:u1> := <var:F> ; \\ \{ <var:F> = <var:v> \land <var:u1> = <var:v> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:F> = <var:v> \land <var:u1> = <var:v> \land <var:u0> = <nat:2> \} \\ <var:u1> := <var:u1> * <nat:9> ; \\ \{ <var:F> = <var:v> \land <var:u1> = <nat:9> * <var:v> \land <var:u0> = <nat:2> \} \\ <var:G> := <var:u1> \\ \{ <var:F> = <var:v> \land <var:u0> = <nat:2> \land <var:G> = <nat:9> * <var:v> \} \\ <var:G> := <var:G> + <var:u0> \\ \{ <var:F> = <var:v> \land <var:G> = <nat:9> * <var:v> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:F> = <var:v> }} <var:u1> := <var:F> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:9> ; <var:G> := <var:u1> <var:G> := <var:G> + <var:u0> {{ <var:G> = <nat:9> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:u1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:u1> = <var:v> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:u1> = <nat:9> * <var:v> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:u0> = <nat:2> /\ <var:G> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:G> = <nat:9> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 