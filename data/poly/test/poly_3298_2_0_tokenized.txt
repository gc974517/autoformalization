\begin{document} \begin{theorem} Define the following code in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:5> ; <var:v> := <var:z0> \end{verbatim} Given it to be that $ <var:m> = <var:a> $ before the evaluation of our program , it must be that we see $ <var:v> = <nat:5> $ when program has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be done with usual Hoare logic . Keeping momentum , we see the binding statement \verb | <var:z0> := <nat:5> ; | . This transfers the condition $ \{ <var:m> = <var:a> \} $ toward the postcondition $ \{ <var:m> = <var:a> \land <var:z0> = <nat:5> \} $ . This is deduced through the assignment law in standard Hoare reasoning . Stepping through , we see the variable update command binding $ <var:z0$ to $ <var:v>$ . This redefines $ \{ <var:m> = <var:a> \land <var:z0> = <nat:5> \} $ to $ \{ <var:m> = <var:a> \land <var:v> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:m> = <var:a> }} <var:z0> := <nat:5> ; <var:v> := <var:z0> {{ <var:v> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:v> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 