\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:i1> := <var:b> ; <var:i2> := <var:i1> * <var:b> ; <var:i0> := <nat:5> ; <var:i1> := <var:i1> * <nat:8> ; <var:i2> := <var:i2> * <nat:9> ; <var:M> := <var:i2> <var:M> := <var:M> + <var:i1> <var:M> := <var:M> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> . Assume that we have $ <var:b> = <var:h> $ ahead of the execution of our series of instructions , it holds that $ <var:M> = <nat:9> \times <var:h> ^ <nat:2> + <nat:8> \times <var:h> + <nat:5> $ once series of instructions executes . \end{theorem} \begin{proof} The argument for this code segment can be done using the following decorated list of commands . \begin{eqnarray} \{ <var:b> = <var:h> \} \\ <var:i1> := <var:b> ; \\ \{ <var:b> = <var:h> \land <var:i1> = <var:h> \} \\ <var:i2> := <var:i1> * <var:b> ; \\ \{ <var:b> = <var:h> \land <var:i1> = <var:h> \land <var:i2> = <var:h> ^ <nat:2> \} \\ <var:i0> := <nat:5> ; \\ \{ <var:b> = <var:h> \land <var:i1> = <var:h> \land <var:i2> = <var:h> ^ <nat:2> \land <var:i0> = <nat:5> \} \\ <var:i1> := <var:i1> * <nat:8> ; \\ \{ <var:b> = <var:h> \land <var:i1> = <nat:8> * <var:h> \land <var:i2> = <var:h> ^ <nat:2> \land <var:i0> = <nat:5> \} \\ <var:i2> := <var:i2> * <nat:9> ; \\ \{ <var:b> = <var:h> \land <var:i1> = <nat:8> * <var:h> \land <var:i2> = <nat:9> * <var:h> ^ <nat:2> \land <var:i0> = <nat:5> \} \\ <var:M> := <var:i2> \\ \{ <var:b> = <var:h> \land <var:i1> = <nat:8> * <var:h> \land <var:i0> = <nat:5> \land <var:M> = <nat:9> * <var:h> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:i1> \\ \{ <var:b> = <var:h> \land <var:i0> = <nat:5> \land <var:M> = <nat:9> * <var:h> ^ <nat:2> + <nat:8> * <var:h> \} \\ <var:M> := <var:M> + <var:i0> \\ \{ <var:b> = <var:h> \land <var:M> = <nat:9> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:5> \} \end{eqnarray} Advancing the execution of our set of commands gives : \begin{eqnarray} \end{eqnarray} Applying standard Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i1> := <var:b> ; <var:i2> := <var:i1> * <var:b> ; <var:i0> := <nat:5> ; <var:i1> := <var:i1> * <nat:8> ; <var:i2> := <var:i2> * <nat:9> ; <var:M> := <var:i2> <var:M> := <var:M> + <var:i1> <var:M> := <var:M> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:b> = <var:h> }} <def:poly> {{ <var:M> = <nat:9> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:i1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:i1> = <var:h> /\ <var:i2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:i1> = <var:h> /\ <var:i2> = <var:h> ^ <nat:2> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:i1> = <nat:8> * <var:h> /\ <var:i2> = <var:h> ^ <nat:2> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:i1> = <nat:8> * <var:h> /\ <var:i2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:i1> = <nat:8> * <var:h> /\ <var:i0> = <nat:5> /\ <var:M> = <nat:9> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:i0> = <nat:5> /\ <var:M> = <nat:9> * <var:h> ^ <nat:2> + <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:M> = <nat:9> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 