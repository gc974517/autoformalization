\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:s0> := <nat:1> ; <var:g> := <var:s0> \end{verbatim} Allowing --- for any $ <var:D> \in \mathbb{N} $ --- that $ <var:n> = <var:D> $ ahead of evaluating this list of commands then $ <var:g> = <nat:1> $ when series of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:D> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:n> = <var:D> \land <var:s0> = <nat:1> \} \\ <var:g> := <var:s0> \\ \{ <var:n> = <var:D> \land <var:g> = <nat:1> \} \end{eqnarray} The application of Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:n> = <var:D> }} <var:s0> := <nat:1> ; <var:g> := <var:s0> {{ <var:g> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:g> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 