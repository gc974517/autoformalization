\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:N> ; <var:s2> := <var:s1> * <var:N> ; <var:s3> := <var:s2> * <var:N> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:8> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:4> ; <var:A> := <var:s3> <var:A> := <var:A> + <var:s2> <var:A> := <var:A> + <var:s1> <var:A> := <var:A> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for some whole numbers $ <var:z> $ , it to hold that $ <var:N> = <var:z> $ before executing our series of instructions , it follows that we have $ <var:A> = <nat:4> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions is demonstrated through typical Hoare techniques . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:z> \} & <var:s1> := <var:N> & \{ <var:N> = <var:z> \land <var:s1> = <var:z> \} \\ \{ <var:N> = <var:z> \land <var:s1> = <var:z> \} & <var:s2> := <var:s1> * <var:N> & \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \} \\ \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \} & <var:s3> := <var:s2> * <var:N> & \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \} \\ \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \} & <var:s0> := <nat:3> & \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \land <var:s0> = <nat:3> \} & <var:s1> := <var:s1> * <nat:8> & \{ <var:N> = <var:z> \land <var:s1> = <nat:8> * <var:z> \land <var:s2> = <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ \{ <var:N> = <var:z> \land <var:s1> = <nat:8> * <var:z> \land <var:s2> = <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \land <var:s0> = <nat:3> \} & <var:s2> := <var:s2> * <nat:2> & \{ <var:N> = <var:z> \land <var:s1> = <nat:8> * <var:z> \land <var:s2> = <nat:2> * <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ \{ <var:N> = <var:z> \land <var:s1> = <nat:8> * <var:z> \land <var:s2> = <nat:2> * <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \land <var:s0> = <nat:3> \} & <var:s3> := <var:s3> * <nat:4> & \{ <var:N> = <var:z> \land <var:s1> = <nat:8> * <var:z> \land <var:s2> = <nat:2> * <var:z> ^ <nat:2> \land <var:s3> = <nat:4> * <var:z> ^ <nat:3> \land <var:s0> = <nat:3> \} \end{tabular} This is ensured using the assignment inference rule in standard Hoare reasoning . Looking at the upcoming commands in the segment of code , we have \[ \begin{tabular} {rcl} \{ <var:N> = <var:z> \} & <var:s1> := <var:N> & \{ <var:N> = <var:z> \land <var:s1> = <var:z> \} \\ \{ <var:N> = <var:z> \land <var:s1> = <var:z> \} & <var:s2> := <var:s1> * <var:N> & \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \} \\ \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \} & <var:s3> := <var:s2> * <var:N> & \{ <var:N> = <var:z> \land <var:s1> = <var:z> \land <var:s2> = <var:z> ^ <nat:2> \land <var:s3> = <var:z> ^ <nat:3> \} \end{tabular} Stepping through , \[ \begin{tabular} {rcl} \{ <var:N> = <var:z> \} & <var:s1> := <var:N> & \{ <var:N> = <var:z> \land <var:s1> = <var:z> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:N> ; <var:s2> := <var:s1> * <var:N> ; <var:s3> := <var:s2> * <var:N> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:8> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:4> ; <var:A> := <var:s3> <var:A> := <var:A> + <var:s2> <var:A> := <var:A> + <var:s1> <var:A> := <var:A> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:N> = <var:z> }} <def:poly> {{ <var:A> = <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <var:z> /\ <var:s2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <var:z> /\ <var:s2> = <var:z> ^ <nat:2> /\ <var:s3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <var:z> /\ <var:s2> = <var:z> ^ <nat:2> /\ <var:s3> = <var:z> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <nat:8> * <var:z> /\ <var:s2> = <var:z> ^ <nat:2> /\ <var:s3> = <var:z> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <nat:8> * <var:z> /\ <var:s2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:s3> = <var:z> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <nat:8> * <var:z> /\ <var:s2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:z> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <nat:8> * <var:z> /\ <var:s2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:s0> = <nat:3> /\ <var:A> = <nat:4> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s1> = <nat:8> * <var:z> /\ <var:s0> = <nat:3> /\ <var:A> = <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:s0> = <nat:3> /\ <var:A> = <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:A> = <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 