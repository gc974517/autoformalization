\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:1> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:s> ; <var:I> := <var:D1> ; <var:I> := <var:I> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:s> = <var:i> $ prior to running our set of instructions it holds that we see $ <var:I> = <nat:1> * <var:i> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic yields : \begin{eqnarray} \{ <var:s> = <var:i> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:s> = <var:i> \land <var:D0> = <nat:1> \} \\ <var:D1> := <nat:1> ; \\ \{ <var:s> = <var:i> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> \} \\ <var:D1> := <var:D1> * <var:s> ; \\ \{ <var:s> = <var:i> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:i> \} \\ <var:I> := <var:D1> ; \\ \{ <var:s> = <var:i> \land <var:D0> = <nat:1> \land <var:I> = <nat:1> * <var:i> \} \\ <var:I> := <var:I> + <var:D0> \\ \{ <var:s> = <var:i> \land <var:I> = <nat:1> * <var:i> + <nat:1> \} \end{eqnarray} Given the preceding argument , the segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:1> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:s> ; <var:I> := <var:D1> ; <var:I> := <var:I> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:s> = <var:i> }} <def:poly> {{ <var:I> = <nat:1> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:D0> = <nat:1> /\ <var:I> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:I> = <nat:1> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 