\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:t> ; <var:u2> := <nat:4> ; <var:u2> := <var:u2> * <var:t> ; <var:u2> := <var:u2> * <var:t> ; <var:u3> := <nat:4> ; <var:u3> := <var:u3> * <var:t> ; <var:u3> := <var:u3> * <var:t> ; <var:u3> := <var:u3> * <var:t> ; <var:g> := <var:u3> ; <var:g> := <var:g> + <var:u2> ; <var:g> := <var:g> + <var:u1> ; <var:g> := <var:g> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allowing it to be that $ <var:t> = <var:d> $ prior to interpreting the segment of code it follows that $ <var:g> = <nat:4> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:5> $ once program has terminated . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is shown with Hoare reasoning . Focusing on the next pieces of code seen in the code segment , \begin{verbatim} { <var:t> = <var:d> } <var:u0> := <nat:5> { <var:t> = <var:d> \land <var:u0> = <nat:5> } { <var:t> = <var:d> \land <var:u0> = <nat:5> } <var:u1> := <nat:2> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> } <var:u1> := <var:u1> * <var:t> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> } \end{verbatim} This is deduced through the variable update law given by typical Hoare techniques . Keeping momentum , we have \begin{verbatim} { <var:t> = <var:d> } <var:u0> := <nat:5> { <var:t> = <var:d> \land <var:u0> = <nat:5> } { <var:t> = <var:d> \land <var:u0> = <nat:5> } <var:u1> := <nat:2> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> } <var:u1> := <var:u1> * <var:t> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> } <var:u2> := <nat:4> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> } <var:u2> := <var:u2> * <var:t> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> } <var:u2> := <var:u2> * <var:t> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> } <var:u3> := <nat:4> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:u3> = <nat:4> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:u3> = <nat:4> } <var:u3> := <var:u3> * <var:t> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:u3> = <nat:4> \cdot <var:d> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:u3> = <nat:4> \cdot <var:d> } <var:u3> := <var:u3> * <var:t> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:u3> = <nat:4> \cdot <var:d> ^ <nat:2> } { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:u3> = <nat:4> \cdot <var:d> ^ <nat:2> } <var:u3> := <var:u3> * <var:t> { <var:t> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \cdot <var:d> \land <var:u2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:u3> = <nat:4> \cdot <var:d> ^ <nat:3> } \end{verbatim} This is ensured through the variable update law from standard Hoare techniques . Considering the next bit of code found in the code , \begin{verbatim} { <var:t> = <var:d> } <var:u0> := <nat:5> { <var:t> = <var:d> \land <var:u0> = <nat:5> } \end{verbatim} This is shown to be logically sound with the variable update law from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u0> := <nat:5> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:t> ; <var:u2> := <nat:4> ; <var:u2> := <var:u2> * <var:t> ; <var:u2> := <var:u2> * <var:t> ; <var:u3> := <nat:4> ; <var:u3> := <var:u3> * <var:t> ; <var:u3> := <var:u3> * <var:t> ; <var:u3> := <var:u3> * <var:t> ; <var:g> := <var:u3> ; <var:g> := <var:g> + <var:u2> ; <var:g> := <var:g> + <var:u1> ; <var:g> := <var:g> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:t> = <var:d> }} <def:poly> {{ <var:g> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:u2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:g> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:d> /\ <var:g> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:u0> = <nat:5> /\ <var:g> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:g> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 