\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R> := <nat:3> ; <var:R> := <nat:4> + <var:R> * <var:Y> ; <var:R> := <nat:2> + <var:R> * <var:Y> ; <var:R> := <var:R> * <var:Y> ; <var:R> := <nat:2> + <var:R> * <var:Y> ; <var:R> := <nat:3> + <var:R> * <var:Y> ; <var:R> := <nat:3> + <var:R> * <var:Y> ; <var:R> := <nat:3> + <var:R> * <var:Y> ; <var:R> := <var:R> * <var:Y> ; <var:R> := <nat:1> + <var:R> * <var:Y> ; <var:R> := <nat:2> + <var:R> * <var:Y> ; <var:R> := <var:R> * <var:Y> ; <var:R> := <nat:1> + <var:R> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Assume for all positive coefficients $ <var:O> $ that we have $ <var:Y> = <var:O> $ ahead of the evaluation of this set of instructions it holds that we see $ <var:R> = <nat:3> \times <var:O> ^ <nat:12> + <nat:4> \times <var:O> ^ <nat:11> + <nat:2> \times <var:O> ^ <nat:10> + <nat:2> \times <var:O> ^ <nat:8> + <nat:3> \times <var:O> ^ <nat:7> + <nat:3> \times <var:O> ^ <nat:6> + <nat:3> \times <var:O> ^ <nat:5> + <nat:1> \times <var:O> ^ <nat:3> + <nat:2> \times <var:O> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is shown with Hoare logic . Going forward , \begin{verbatim} { <var:Y> = <var:O> } <var:R> := <nat:3> { <var:Y> = <var:O> \land <var:R> = <nat:3> } { <var:Y> = <var:O> \land <var:R> = <nat:3> } <var:R> := <nat:4> + <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> + <nat:4> } { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> + <nat:4> } <var:R> := <nat:2> + <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:2> } { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:2> } <var:R> := <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + } { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + } <var:R> := <nat:2> + <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:4> + <nat:4> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:2> } { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:4> + <nat:4> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:2> } <var:R> := <nat:3> + <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:5> + <nat:4> \cdot <var:O> ^ <nat:4> + <nat:2> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> + <nat:3> } \end{verbatim} Moving onward , \begin{verbatim} { <var:Y> = <var:O> } <var:R> := <nat:3> { <var:Y> = <var:O> \land <var:R> = <nat:3> } \end{verbatim} This is given with the variable assignmet law defined by usual Hoare reasoning . Moving forward to the proceeding lines of codecontained in the program , we see \begin{verbatim} { <var:Y> = <var:O> } <var:R> := <nat:3> { <var:Y> = <var:O> \land <var:R> = <nat:3> } { <var:Y> = <var:O> \land <var:R> = <nat:3> } <var:R> := <nat:4> + <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> + <nat:4> } { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> + <nat:4> } <var:R> := <nat:2> + <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:2> } { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:2> } <var:R> := <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + } \end{verbatim} This is ensured by the variable update inference rule in typical Hoare techniques . Now , we see \begin{verbatim} { <var:Y> = <var:O> } <var:R> := <nat:3> { <var:Y> = <var:O> \land <var:R> = <nat:3> } { <var:Y> = <var:O> \land <var:R> = <nat:3> } <var:R> := <nat:4> + <var:R> * <var:Y> { <var:Y> = <var:O> \land <var:R> = <nat:3> \cdot <var:O> + <nat:4> } \end{verbatim} This is given with the variable update law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:3> ; <var:R> := <nat:4> + <var:R> * <var:Y> ; <var:R> := <nat:2> + <var:R> * <var:Y> ; <var:R> := <var:R> * <var:Y> ; <var:R> := <nat:2> + <var:R> * <var:Y> ; <var:R> := <nat:3> + <var:R> * <var:Y> ; <var:R> := <nat:3> + <var:R> * <var:Y> ; <var:R> := <nat:3> + <var:R> * <var:Y> ; <var:R> := <var:R> * <var:Y> ; <var:R> := <nat:1> + <var:R> * <var:Y> ; <var:R> := <nat:2> + <var:R> * <var:Y> ; <var:R> := <var:R> * <var:Y> ; <var:R> := <nat:1> + <var:R> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Y> = <var:O> }} <def:poly> {{ <var:R> = <nat:3> * <var:O> ^ <nat:12> + <nat:4> * <var:O> ^ <nat:11> + <nat:2> * <var:O> ^ <nat:10> + <nat:2> * <var:O> ^ <nat:8> + <nat:3> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:4> + <nat:4> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:5> + <nat:4> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:6> + <nat:4> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:7> + <nat:4> * <var:O> ^ <nat:6> + <nat:2> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:8> + <nat:4> * <var:O> ^ <nat:7> + <nat:2> * <var:O> ^ <nat:6> + <nat:2> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:9> + <nat:4> * <var:O> ^ <nat:8> + <nat:2> * <var:O> ^ <nat:7> + <nat:2> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:10> + <nat:4> * <var:O> ^ <nat:9> + <nat:2> * <var:O> ^ <nat:8> + <nat:2> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:1> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:11> + <nat:4> * <var:O> ^ <nat:10> + <nat:2> * <var:O> ^ <nat:9> + <nat:2> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:O> /\ <var:R> = <nat:3> * <var:O> ^ <nat:12> + <nat:4> * <var:O> ^ <nat:11> + <nat:2> * <var:O> ^ <nat:10> + <nat:2> * <var:O> ^ <nat:8> + <nat:3> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 