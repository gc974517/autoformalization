\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as \begin{verbatim} <var:q1> := <var:d> ; <var:q2> := <var:q1> * <var:d> ; <var:q3> := <var:q2> * <var:d> ; <var:q4> := <var:q3> * <var:d> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:5> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:6> ; <var:q4> := <var:q4> * <nat:4> ; <var:c> := <var:q4> <var:c> := <var:c> + <var:q3> <var:c> := <var:c> + <var:q2> <var:c> := <var:c> + <var:q1> <var:c> := <var:c> + <var:q0> \end{verbatim} Assume it to hold that $ <var:d> = <var:z> $ ahead of executing our list of commands it must be that we have $ <var:c> = <nat:4> \cdot <var:z> ^ <nat:4> + <nat:6> \cdot <var:z> ^ <nat:3> + <nat:7> \cdot <var:z> ^ <nat:2> + <nat:5> \cdot <var:z> + <nat:1> $ when list of commands has finished executing . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be accomplished by standard Hoare reasoning . Taking another step toward the following step contained in our set of instructions , the variable assignmet statement giving $ <var:d> $ into $ <var:q1>$ . This moves the precondition $ \{ <var:d> = <var:z> \} $ toward the condition $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \} $ . Moving onward , the statement \verb | <var:q2> := <var:q1> * <var:d> ; | . This statement takes the condition $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \} $ as the postcondition $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \} $ . Advancing to the next step , we see the assignment command \verb | <var:q3> := <var:q2> * <var:d> ; | . This takes the condition $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \} $ into the condition $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \} $ . Following , we see the code giving $ <var:q3> * <var:d> $ toward $ <var:q4>$ . This code transfers the precondition $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \} $ toward the postcondition $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \} $ . This is rigorously given using the assignment inference rule from usual Hoare reasoning . Shifting focus toward the next command seen in our series of commands , we see the environment update code defining $ <nat:1> $ to $ <var:q0>$ . This code advances $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \} $ into $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ . This is shown to be logically sound with the assignment scheme given in usual Hoare techniques . Next , we see the variable update line giving $ <var:q1> * <nat:5> $ into $ <var:q1>$ . This statement takes the condition $ \{ <var:d> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ to the condition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ . This is shown to be logically sound by the assignment inference rule defined in Hoare reasoning . Advancing to the next step contained in our set of instructions , we see the variable update line \verb | <var:q2> := <var:q2> * <nat:7> ; | . This line advances the condition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ as the condition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ . Shifting focus toward the following line of code contained in the list of commands , we see the line giving $ <var:q3> * <nat:6> $ toward $ <var:q3>$ . This statement redefines the condition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q3> = <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ as the postcondition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q3> = <nat:6> \times <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ . This is shown to be logically sound using the assignment law obtained from typical Hoare reasoning . Taking a look at the proceeding line of code contained in the set of instructions , the environment update line yielding $ <var:q4> * <nat:4> $ as $ <var:q4>$ . This transfers $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q3> = <nat:6> \times <var:z> ^ <nat:3> \land <var:q4> = <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ to the postcondition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q3> = <nat:6> \times <var:z> ^ <nat:3> \land <var:q4> = <nat:4> \times <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ . This is shown using the assignment inference rule of standard Hoare techniques . Observing the upcoming line of code found in the code , we see the variable assignmet code \verb | <var:c> := <var:q4> | . This statement moves the precondition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q3> = <nat:6> \times <var:z> ^ <nat:3> \land <var:q4> = <nat:4> \times <var:z> ^ <nat:4> \land <var:q0> = <nat:1> \} $ toward $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q3> = <nat:6> \times <var:z> ^ <nat:3> \land <var:q0> = <nat:1> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> \} $ . Going to the next step , the assignment line \verb | <var:c> := <var:c> + <var:q3> | . This moves the condition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q3> = <nat:6> \times <var:z> ^ <nat:3> \land <var:q0> = <nat:1> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> \} $ into $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q0> = <nat:1> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> + <nat:6> \times <var:z> ^ <nat:3> \} $ . This is ensured with the assignment inference rule found in Hoare techniques . Immediately after , we have the assignment code \verb | <var:c> := <var:c> + <var:q2> | . This command forwards the condition $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q0> = <nat:1> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> + <nat:6> \times <var:z> ^ <nat:3> \} $ to $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q0> = <nat:1> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> + <nat:6> \times <var:z> ^ <nat:3> + <nat:7> \times <var:z> ^ <nat:2> \} $ . This is deduced by the assignment rule given by usual Hoare logic . Observing the following command seen in our list of instructions , the binding line letting $ <var:c> + <var:q1$ to $ <var:c>$ . This moves $ \{ <var:d> = <var:z> \land <var:q1> = <nat:5> \times <var:z> \land <var:q0> = <nat:1> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> + <nat:6> \times <var:z> ^ <nat:3> + <nat:7> \times <var:z> ^ <nat:2> \} $ as the condition $ \{ <var:d> = <var:z> \land <var:q0> = <nat:1> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> + <nat:6> \times <var:z> ^ <nat:3> + <nat:7> \times <var:z> ^ <nat:2> + <nat:5> \times <var:z> \} $ . This is rigorously given with the assignment inference rule from Hoare logic . Moving on , we see the statement \verb | <var:c> := <var:c> + <var:q0> | . This code forwards the precondition $ \{ <var:d> = <var:z> \land <var:q0> = <nat:1> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> + <nat:6> \times <var:z> ^ <nat:3> + <nat:7> \times <var:z> ^ <nat:2> + <nat:5> \times <var:z> \} $ to the postcondition $ \{ <var:d> = <var:z> \land <var:c> = <nat:4> \times <var:z> ^ <nat:4> + <nat:6> \times <var:z> ^ <nat:3> + <nat:7> \times <var:z> ^ <nat:2> + <nat:5> \times <var:z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <var:q4> : string := " <var:q4> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:d> = <var:z> }} <var:q1> := <var:d> ; <var:q2> := <var:q1> * <var:d> ; <var:q3> := <var:q2> * <var:d> ; <var:q4> := <var:q3> * <var:d> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:5> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:6> ; <var:q4> := <var:q4> * <nat:4> ; <var:c> := <var:q4> <var:c> := <var:c> + <var:q3> <var:c> := <var:c> + <var:q2> <var:c> := <var:c> + <var:q1> <var:c> := <var:c> + <var:q0> {{ <var:c> = <nat:4> * <var:z> ^ <nat:4> + <nat:6> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:5> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <var:z> ^ <nat:2> /\ <var:q3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <var:z> ^ <nat:2> /\ <var:q3> = <var:z> ^ <nat:3> /\ <var:q4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <var:z> ^ <nat:2> /\ <var:q3> = <var:z> ^ <nat:3> /\ <var:q4> = <var:z> ^ <nat:4> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <nat:5> * <var:z> /\ <var:q2> = <var:z> ^ <nat:2> /\ <var:q3> = <var:z> ^ <nat:3> /\ <var:q4> = <var:z> ^ <nat:4> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <nat:5> * <var:z> /\ <var:q2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:q3> = <var:z> ^ <nat:3> /\ <var:q4> = <var:z> ^ <nat:4> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <nat:5> * <var:z> /\ <var:q2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:z> ^ <nat:3> /\ <var:q4> = <var:z> ^ <nat:4> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <nat:5> * <var:z> /\ <var:q2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:z> ^ <nat:3> /\ <var:q4> = <nat:4> * <var:z> ^ <nat:4> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <nat:5> * <var:z> /\ <var:q2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:z> ^ <nat:3> /\ <var:q0> = <nat:1> /\ <var:c> = <nat:4> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <nat:5> * <var:z> /\ <var:q2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:q0> = <nat:1> /\ <var:c> = <nat:4> * <var:z> ^ <nat:4> + <nat:6> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q1> = <nat:5> * <var:z> /\ <var:q0> = <nat:1> /\ <var:c> = <nat:4> * <var:z> ^ <nat:4> + <nat:6> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:q0> = <nat:1> /\ <var:c> = <nat:4> * <var:z> ^ <nat:4> + <nat:6> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:c> = <nat:4> * <var:z> ^ <nat:4> + <nat:6> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:5> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 