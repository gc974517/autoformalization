\begin{document} \begin{theorem} Take the following set of instructions as \begin{verbatim} <var:A0> := <nat:3> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:T> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:T> ; <var:A2> := <var:A2> * <var:T> ; <var:i> := <var:A2> ; <var:i> := <var:i> + <var:A1> ; <var:i> := <var:i> + <var:A0> \end{verbatim} Given that $ <var:T> = <var:X> $ given every positive coefficients $ <var:X> $ ahead of interpreting our segment of code , then we have $ <var:i> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> $ once program has finished . \end{theorem} \begin{proof} Arguing the correctness of our series of commands is accomplished through typical Hoare logic . Focusing on the following statement found in our segment of code , the variable update command \verb | <var:A0> := <nat:3> ; | . This transfers the precondition $ \{ <var:T> = <var:X> \} $ as $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \} $ . This is shown to be logically sound by the assignment rule in standard Hoare techniques . Moving on to the next step , the binding line defining $ <nat:1> $ as $ <var:A1>$ . This moves $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \} $ into the postcondition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \} $ . This is shown through the assignment rule given by standard Hoare reasoning . Going forward , we have the variable update statement \verb | <var:A1> := <var:A1> * <var:T> ; | . This redefines the condition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \} $ toward the postcondition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \} $ . This is rigorously given through the assignment inference rule found in standard Hoare logic . Going forward , we see the assignment statement \verb | <var:A2> := <nat:3> ; | . This line moves $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \} $ as the postcondition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \land <var:A2> = <nat:3> \} $ . Considering the following line of code in the code , we have the code \verb | <var:A2> := <var:A2> * <var:T> ; | . This forwards the condition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \land <var:A2> = <nat:3> \} $ into the condition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \land <var:A2> = <nat:3> \times <var:X> \} $ . This is sound through the assignment scheme defined in standard Hoare logic . Shifting focus toward the proceeding line found in the series of commands , the variable binding code \verb | <var:A2> := <var:A2> * <var:T> ; | . This forwards the condition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \land <var:A2> = <nat:3> \times <var:X> \} $ into the postcondition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \land <var:A2> = <nat:3> \times <var:X> ^ <nat:2> \} $ . This is given through the assignment inference rule given by typical Hoare techniques . Jumping to the next line of code contained in the code , we have the environment update statement letting $ <var:A2> $ to $ <var:i>$ . This command takes the precondition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \land <var:A2> = <nat:3> \times <var:X> ^ <nat:2> \} $ into the postcondition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \land <var:i> = <nat:3> \times <var:X> ^ <nat:2> \} $ . Keeping momentum , we see the variable assignmet line \verb | <var:i> := <var:i> + <var:A1> ; | . This statement forwards the condition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:A1> = <nat:1> \times <var:X> \land <var:i> = <nat:3> \times <var:X> ^ <nat:2> \} $ to the postcondition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:i> = <nat:3> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> \} $ . Next , we have the environment update code \verb | <var:i> := <var:i> + <var:A0> | . This command forwards the precondition $ \{ <var:T> = <var:X> \land <var:A0> = <nat:3> \land <var:i> = <nat:3> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> \} $ as the condition $ \{ <var:T> = <var:X> \land <var:i> = <nat:3> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:3> \} $ . This is shown to be logically sound with the assignment law in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:T> = <var:X> }} <var:A0> := <nat:3> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:T> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:T> ; <var:A2> := <var:A2> * <var:T> ; <var:i> := <var:A2> ; <var:i> := <var:i> + <var:A1> ; <var:i> := <var:i> + <var:A0> {{ <var:i> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:1> * <var:X> /\ <var:A2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:1> * <var:X> /\ <var:A2> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:1> * <var:X> /\ <var:A2> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:1> * <var:X> /\ <var:i> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:A0> = <nat:3> /\ <var:i> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:i> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 