\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:z1> := <var:l> ; <var:z2> := <var:z1> * <var:l> ; <var:z3> := <var:z2> * <var:l> ; <var:z4> := <var:z3> * <var:l> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:5> ; <var:z2> := <var:z2> * <nat:5> ; <var:z3> := <var:z3> * <nat:1> ; <var:z4> := <var:z4> * <nat:3> ; <var:i> := <var:z4> <var:i> := <var:i> + <var:z3> <var:i> := <var:i> + <var:z2> <var:i> := <var:i> + <var:z1> <var:i> := <var:i> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given some $ <var:C> \in \mathbb{N} $ ) that $ <var:l> = <var:C> $ ahead of interpreting the set of instructions then we have $ <var:i> = <nat:3> \cdot <var:C> ^ <nat:4> + <nat:1> \cdot <var:C> ^ <nat:3> + <nat:5> \cdot <var:C> ^ <nat:2> + <nat:5> \cdot <var:C> + <nat:9> $ once set of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is evident with Hoare techniques . Moving on , we have the environment update code \verb | <var:z1> := <var:l> ; | . This forwards the condition $ \{ <var:l> = <var:C> \} $ toward the postcondition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \} $ . Looking at the subsequent bit of code in the set of instructions , we have the variable binding line letting $ <var:z1> * <var:l> $ to $ <var:z2>$ . This moves the precondition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \} $ as the postcondition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \land <var:z2> = <var:C> ^ <nat:2> \} $ . This is shown by the assignment scheme given by usual Hoare reasoning . Moving forward to the next step , we see the variable assignmet command \verb | <var:z3> := <var:z2> * <var:l> ; | . This redefines the precondition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \land <var:z2> = <var:C> ^ <nat:2> \} $ to the postcondition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \land <var:z2> = <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \} $ . This is rigorously given through the assignment law defined by typical Hoare reasoning . Stepping forward , we see the environment update command yielding $ <var:z3> * <var:l> $ into $ <var:z4>$ . This statement transfers $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \land <var:z2> = <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \} $ toward the condition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \land <var:z2> = <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \} $ . This is rigorously given by the assignment rule given in typical Hoare logic . Considering the next statement found in the code , the binding line \verb | <var:z0> := <nat:9> ; | . This forwards the precondition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \land <var:z2> = <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \} $ toward the condition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \land <var:z2> = <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ . This is deduced by the assignment rule from usual Hoare logic . Immediately after , we have the variable binding code \verb | <var:z1> := <var:z1> * <nat:5> ; | . This statement redefines the condition $ \{ <var:l> = <var:C> \land <var:z1> = <var:C> \land <var:z2> = <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ to the condition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ . Going forward , we see the line \verb | <var:z2> := <var:z2> * <nat:5> ; | . This takes $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ to the postcondition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ . This is shown through the assignment rule given by Hoare techniques . Next , we see the command giving $ <var:z3> * <nat:1> $ to $ <var:z3>$ . This command advances the precondition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z3> = <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ into the postcondition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z3> = <nat:1> * <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ . This is given using the assignment law found in usual Hoare logic . Observing the proceeding statement seen in our list of commands , we see the command binding $ <var:z4> * <nat:3> $ to $ <var:z4>$ . This moves the precondition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z3> = <nat:1> * <var:C> ^ <nat:3> \land <var:z4> = <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ to the postcondition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z3> = <nat:1> * <var:C> ^ <nat:3> \land <var:z4> = <nat:3> * <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ . This is known to be sound using the assignment inference rule given by usual Hoare logic . Moving forward to the next step , we see the binding command \verb | <var:i> := <var:z4> | . This code redefines $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z3> = <nat:1> * <var:C> ^ <nat:3> \land <var:z4> = <nat:3> * <var:C> ^ <nat:4> \land <var:z0> = <nat:9> \} $ to the postcondition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z3> = <nat:1> * <var:C> ^ <nat:3> \land <var:z0> = <nat:9> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> \} $ . This is shown to be logically sound by the assignment law from standard Hoare reasoning . Paying attention to the subsequent statement in the series of commands , we see the variable binding line binding $ <var:i> + <var:z3$ to $ <var:i>$ . This command moves $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z3> = <nat:1> * <var:C> ^ <nat:3> \land <var:z0> = <nat:9> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> \} $ to the condition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z0> = <nat:9> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> \} $ . Paying attention to the subsequent statement found in the series of commands , the line defining $ <var:i> + <var:z2$ toward $ <var:i>$ . This takes the condition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z2> = <nat:5> * <var:C> ^ <nat:2> \land <var:z0> = <nat:9> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> \} $ into the postcondition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z0> = <nat:9> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment rule of usual Hoare reasoning . Stepping through , the assignment line assigning $ <var:i> + <var:z1$ to $ <var:i>$ . This forwards the condition $ \{ <var:l> = <var:C> \land <var:z1> = <nat:5> * <var:C> \land <var:z0> = <nat:9> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> \} $ into $ \{ <var:l> = <var:C> \land <var:z0> = <nat:9> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:5> * <var:C> \} $ . This is rigorously given by the assignment rule from typical Hoare reasoning . Moving forward , the assignment line \verb | <var:i> := <var:i> + <var:z0> | . This code moves the condition $ \{ <var:l> = <var:C> \land <var:z0> = <nat:9> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:5> * <var:C> \} $ as the condition $ \{ <var:l> = <var:C> \land <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:9> \} $ . This is ensured by the assignment law given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <var:z4> : string := " <var:z4> " . Definition <def:poly> := <var:z1> := <var:l> ; <var:z2> := <var:z1> * <var:l> ; <var:z3> := <var:z2> * <var:l> ; <var:z4> := <var:z3> * <var:l> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:5> ; <var:z2> := <var:z2> * <nat:5> ; <var:z3> := <var:z3> * <nat:1> ; <var:z4> := <var:z4> * <nat:3> ; <var:i> := <var:z4> <var:i> := <var:i> + <var:z3> <var:i> := <var:i> + <var:z2> <var:i> := <var:i> + <var:z1> <var:i> := <var:i> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:l> = <var:C> }} <def:poly> {{ <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <var:C> /\ <var:z2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <var:C> /\ <var:z2> = <var:C> ^ <nat:2> /\ <var:z3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <var:C> /\ <var:z2> = <var:C> ^ <nat:2> /\ <var:z3> = <var:C> ^ <nat:3> /\ <var:z4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <var:C> /\ <var:z2> = <var:C> ^ <nat:2> /\ <var:z3> = <var:C> ^ <nat:3> /\ <var:z4> = <var:C> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <nat:5> * <var:C> /\ <var:z2> = <var:C> ^ <nat:2> /\ <var:z3> = <var:C> ^ <nat:3> /\ <var:z4> = <var:C> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <nat:5> * <var:C> /\ <var:z2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:z3> = <var:C> ^ <nat:3> /\ <var:z4> = <var:C> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <nat:5> * <var:C> /\ <var:z2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:C> ^ <nat:3> /\ <var:z4> = <var:C> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <nat:5> * <var:C> /\ <var:z2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:C> ^ <nat:3> /\ <var:z4> = <nat:3> * <var:C> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <nat:5> * <var:C> /\ <var:z2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:C> ^ <nat:3> /\ <var:z0> = <nat:9> /\ <var:i> = <nat:3> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <nat:5> * <var:C> /\ <var:z2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:z0> = <nat:9> /\ <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z1> = <nat:5> * <var:C> /\ <var:z0> = <nat:9> /\ <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:z0> = <nat:9> /\ <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:i> = <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 