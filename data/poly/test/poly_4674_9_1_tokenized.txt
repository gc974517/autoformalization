\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:n1> := <var:t> ; <var:n2> := <var:n1> * <var:t> ; <var:n3> := <var:n2> * <var:t> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:6> ; <var:n3> := <var:n3> * <nat:6> ; <var:L> := <var:n3> <var:L> := <var:L> + <var:n1> <var:L> := <var:L> + <var:n0> \end{verbatim} Assuming that $ <var:t> = <var:j> $ before interpreting this series of commands then we see $ <var:L> = <nat:6> \times <var:j> ^ <nat:3> + <nat:6> \times <var:j> + <nat:4> $ after code is done executing . \end{theorem} \begin{proof} The method of proof for the segment of code can be shown using usual Hoare reasoning . Honing in on the next piece of code in the code , we have the variable assignmet line \verb | <var:n1> := <var:t> ; | . This takes $ \{ <var:t> = <var:j> \} $ to the postcondition $ \{ <var:t> = <var:j> \land <var:n1> = <var:j> \} $ . Advancing , we have the code defining $ <var:n1> * <var:t> $ as $ <var:n2>$ . This moves $ \{ <var:t> = <var:j> \land <var:n1> = <var:j> \} $ to the postcondition $ \{ <var:t> = <var:j> \land <var:n1> = <var:j> \land <var:n2> = <var:j> ^ <nat:2> \} $ . This is sound using the assignment law from standard Hoare reasoning . After , we see the assignment command \verb | <var:n3> := <var:n2> * <var:t> ; | . This redefines $ \{ <var:t> = <var:j> \land <var:n1> = <var:j> \land <var:n2> = <var:j> ^ <nat:2> \} $ to $ \{ <var:t> = <var:j> \land <var:n1> = <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n3> = <var:j> ^ <nat:3> \} $ . This is shown by the assignment scheme given by usual Hoare logic . Keeping momentum , we have the line yielding $ <nat:4> $ to $ <var:n0>$ . This redefines the precondition $ \{ <var:t> = <var:j> \land <var:n1> = <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n3> = <var:j> ^ <nat:3> \} $ toward $ \{ <var:t> = <var:j> \land <var:n1> = <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n3> = <var:j> ^ <nat:3> \land <var:n0> = <nat:4> \} $ . This is shown to be logically sound by the assignment rule given by typical Hoare techniques . Moving forward to the next bit of code in the series of commands , the environment update line \verb | <var:n1> := <var:n1> * <nat:6> ; | . This redefines $ \{ <var:t> = <var:j> \land <var:n1> = <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n3> = <var:j> ^ <nat:3> \land <var:n0> = <nat:4> \} $ into the condition $ \{ <var:t> = <var:j> \land <var:n1> = <nat:6> \cdot <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n3> = <var:j> ^ <nat:3> \land <var:n0> = <nat:4> \} $ . This is shown to be logically sound with the assignment inference rule from standard Hoare techniques . Moving forward to the next step , the assignment code letting $ <var:n3> * <nat:6> $ to $ <var:n3>$ . This redefines $ \{ <var:t> = <var:j> \land <var:n1> = <nat:6> \cdot <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n3> = <var:j> ^ <nat:3> \land <var:n0> = <nat:4> \} $ as the condition $ \{ <var:t> = <var:j> \land <var:n1> = <nat:6> \cdot <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n3> = <nat:6> \cdot <var:j> ^ <nat:3> \land <var:n0> = <nat:4> \} $ . This is guaranteed using the assignment rule given by Hoare logic . Moving forward to the subsequent command in our code , the binding statement \verb | <var:L> := <var:n3> | . This forwards the condition $ \{ <var:t> = <var:j> \land <var:n1> = <nat:6> \cdot <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n3> = <nat:6> \cdot <var:j> ^ <nat:3> \land <var:n0> = <nat:4> \} $ as $ \{ <var:t> = <var:j> \land <var:n1> = <nat:6> \cdot <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n0> = <nat:4> \land <var:L> = <nat:6> \cdot <var:j> ^ <nat:3> \} $ . Observing the following command in our set of instructions , we have the assignment code \verb | <var:L> := <var:L> + <var:n1> | . This statement transfers the precondition $ \{ <var:t> = <var:j> \land <var:n1> = <nat:6> \cdot <var:j> \land <var:n2> = <var:j> ^ <nat:2> \land <var:n0> = <nat:4> \land <var:L> = <nat:6> \cdot <var:j> ^ <nat:3> \} $ to the postcondition $ \{ <var:t> = <var:j> \land <var:n0> = <nat:4> \land <var:L> = <nat:6> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> \} $ . Next , we have the variable assignmet line \verb | <var:L> := <var:L> + <var:n0> | . This advances the condition $ \{ <var:t> = <var:j> \land <var:n0> = <nat:4> \land <var:L> = <nat:6> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> \} $ to the postcondition $ \{ <var:t> = <var:j> \land <var:L> = <nat:6> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:t> = <var:j> }} <var:n1> := <var:t> ; <var:n2> := <var:n1> * <var:t> ; <var:n3> := <var:n2> * <var:t> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:6> ; <var:n3> := <var:n3> * <nat:6> ; <var:L> := <var:n3> <var:L> := <var:L> + <var:n1> <var:L> := <var:L> + <var:n0> {{ <var:L> = <nat:6> * <var:j> ^ <nat:3> + <nat:6> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n1> = <var:j> /\ <var:n2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n1> = <var:j> /\ <var:n2> = <var:j> ^ <nat:2> /\ <var:n3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n1> = <var:j> /\ <var:n2> = <var:j> ^ <nat:2> /\ <var:n3> = <var:j> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n1> = <nat:6> * <var:j> /\ <var:n2> = <var:j> ^ <nat:2> /\ <var:n3> = <var:j> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n1> = <nat:6> * <var:j> /\ <var:n2> = <var:j> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:j> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n1> = <nat:6> * <var:j> /\ <var:n2> = <var:j> ^ <nat:2> /\ <var:n0> = <nat:4> /\ <var:L> = <nat:6> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n0> = <nat:4> /\ <var:L> = <nat:6> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:L> = <nat:6> * <var:j> ^ <nat:3> + <nat:6> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 