\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:1> + <var:U> * <var:s> ; <var:U> := <var:U> * <var:s> ; <var:U> := <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:2> + <var:U> * <var:s> ; <var:U> := <nat:1> + <var:U> * <var:s> ; <var:U> := <nat:2> + <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> \end{verbatim} Allowing that $ <var:s> = <var:O> $ letting $ <var:O> \in \mathbb{N} $ before running our segment of code , it follows that $ <var:U> = <nat:4> * <var:O> ^ <nat:12> + <nat:3> * <var:O> ^ <nat:11> + <nat:3> * <var:O> ^ <nat:10> + <nat:3> * <var:O> ^ <nat:9> + <nat:3> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> $ . \end{theorem} \begin{proof} We can see that the below decorated list of commands . \begin{eqnarray} \{ <var:s> = <var:O> \} \\ <var:U> := <nat:4> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \} \\ <var:U> := <nat:3> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> + <nat:3> \} \\ <var:U> := <nat:3> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:3> \} \\ <var:U> := <nat:3> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:3> \} \\ <var:U> := <nat:3> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:3> \} \\ <var:U> := <nat:1> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:5> + <nat:3> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:1> \} \\ <var:U> := <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:6> + <nat:3> \cdot <var:O> ^ <nat:5> + <nat:3> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + \} \\ <var:U> := <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:7> + <nat:3> \cdot <var:O> ^ <nat:6> + <nat:3> \cdot <var:O> ^ <nat:5> + <nat:3> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + \} \\ <var:U> := <nat:3> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:8> + <nat:3> \cdot <var:O> ^ <nat:7> + <nat:3> \cdot <var:O> ^ <nat:6> + <nat:3> \cdot <var:O> ^ <nat:5> + <nat:3> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> ^ <nat:3> + <nat:3> \} \\ <var:U> := <nat:2> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:9> + <nat:3> \cdot <var:O> ^ <nat:8> + <nat:3> \cdot <var:O> ^ <nat:7> + <nat:3> \cdot <var:O> ^ <nat:6> + <nat:3> \cdot <var:O> ^ <nat:5> + <nat:1> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> + <nat:2> \} \\ <var:U> := <nat:1> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:10> + <nat:3> \cdot <var:O> ^ <nat:9> + <nat:3> \cdot <var:O> ^ <nat:8> + <nat:3> \cdot <var:O> ^ <nat:7> + <nat:3> \cdot <var:O> ^ <nat:6> + <nat:1> \cdot <var:O> ^ <nat:5> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:1> \} \\ <var:U> := <nat:2> + <var:U> * <var:s> ; \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:11> + <nat:3> \cdot <var:O> ^ <nat:10> + <nat:3> \cdot <var:O> ^ <nat:9> + <nat:3> \cdot <var:O> ^ <nat:8> + <nat:3> \cdot <var:O> ^ <nat:7> + <nat:1> \cdot <var:O> ^ <nat:6> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:2> \} \\ <var:U> := <nat:3> + <var:U> * <var:s> \\ \{ <var:s> = <var:O> \land <var:U> = <nat:4> \cdot <var:O> ^ <nat:12> + <nat:3> \cdot <var:O> ^ <nat:11> + <nat:3> \cdot <var:O> ^ <nat:10> + <nat:3> \cdot <var:O> ^ <nat:9> + <nat:3> \cdot <var:O> ^ <nat:8> + <nat:1> \cdot <var:O> ^ <nat:7> + <nat:3> \cdot <var:O> ^ <nat:4> + <nat:2> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:3> \} \end{eqnarray} Using typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:s> = <var:O> }} <var:U> := <nat:4> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:1> + <var:U> * <var:s> ; <var:U> := <var:U> * <var:s> ; <var:U> := <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> ; <var:U> := <nat:2> + <var:U> * <var:s> ; <var:U> := <nat:1> + <var:U> * <var:s> ; <var:U> := <nat:2> + <var:U> * <var:s> ; <var:U> := <nat:3> + <var:U> * <var:s> {{ <var:U> = <nat:4> * <var:O> ^ <nat:12> + <nat:3> * <var:O> ^ <nat:11> + <nat:3> * <var:O> ^ <nat:10> + <nat:3> * <var:O> ^ <nat:9> + <nat:3> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:8> + <nat:3> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:9> + <nat:3> * <var:O> ^ <nat:8> + <nat:3> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:3> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:10> + <nat:3> * <var:O> ^ <nat:9> + <nat:3> * <var:O> ^ <nat:8> + <nat:3> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:11> + <nat:3> * <var:O> ^ <nat:10> + <nat:3> * <var:O> ^ <nat:9> + <nat:3> * <var:O> ^ <nat:8> + <nat:3> * <var:O> ^ <nat:7> + <nat:1> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:U> = <nat:4> * <var:O> ^ <nat:12> + <nat:3> * <var:O> ^ <nat:11> + <nat:3> * <var:O> ^ <nat:10> + <nat:3> * <var:O> ^ <nat:9> + <nat:3> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:3> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 