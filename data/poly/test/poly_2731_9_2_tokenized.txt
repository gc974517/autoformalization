\begin{document} \begin{theorem} Take a list of instructions as \begin{verbatim} <var:B> := <nat:4> ; <var:B> := <nat:3> + <var:B> * <var:M> ; <var:B> := <nat:1> + <var:B> * <var:M> ; <var:B> := <nat:1> + <var:B> * <var:M> ; <var:B> := <var:B> * <var:M> ; <var:B> := <nat:4> + <var:B> * <var:M> ; <var:B> := <nat:2> + <var:B> * <var:M> ; <var:B> := <nat:2> + <var:B> * <var:M> ; <var:B> := <nat:1> + <var:B> * <var:M> \end{verbatim} Allow that $ <var:M> = <var:b> $ ( letting positive integer coefficients $ <var:b> $ ) before evaluating the code segment it holds that we have $ <var:B> = <nat:4> * <var:b> ^ <nat:8> + <nat:3> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:M> = <var:b> \} \\ <var:B> := <nat:4> ; \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \} \\ <var:B> := <nat:3> + <var:B> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> + <nat:3> \} \\ <var:B> := <nat:1> + <var:B> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> + <nat:1> \} \\ <var:B> := <nat:1> + <var:B> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:1> \} \\ <var:B> := <var:B> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:4> + <nat:3> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + \} \\ <var:B> := <nat:4> + <var:B> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:5> + <nat:3> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:4> \} \\ <var:B> := <nat:2> + <var:B> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:6> + <nat:3> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> + <nat:2> \} \\ <var:B> := <nat:2> + <var:B> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:7> + <nat:3> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:2> \} \\ <var:B> := <nat:1> + <var:B> * <var:M> \\ \{ <var:M> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:8> + <nat:3> \cdot <var:b> ^ <nat:7> + <nat:1> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:1> \} \end{eqnarray} Given the above , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:M> = <var:b> }} <var:B> := <nat:4> ; <var:B> := <nat:3> + <var:B> * <var:M> ; <var:B> := <nat:1> + <var:B> * <var:M> ; <var:B> := <nat:1> + <var:B> * <var:M> ; <var:B> := <var:B> * <var:M> ; <var:B> := <nat:4> + <var:B> * <var:M> ; <var:B> := <nat:2> + <var:B> * <var:M> ; <var:B> := <nat:2> + <var:B> * <var:M> ; <var:B> := <nat:1> + <var:B> * <var:M> {{ <var:B> = <nat:4> * <var:b> ^ <nat:8> + <nat:3> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:B> = <nat:4> * <var:b> ^ <nat:8> + <nat:3> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 