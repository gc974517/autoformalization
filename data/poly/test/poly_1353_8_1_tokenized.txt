\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} : \begin{verbatim} <var:H1> := <var:n> ; <var:H2> := <var:H1> * <var:n> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:8> ; <var:H2> := <var:H2> * <nat:6> ; <var:O> := <var:H2> <var:O> := <var:O> + <var:H1> <var:O> := <var:O> + <var:H0> \end{verbatim} Allow it to hold that $ <var:n> = <var:P> $ ahead of the evaluation of the list of commands , it must be that we see $ <var:O> = <nat:6> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:P> \} \\ <var:H1> := <var:n> ; \\ \{ <var:n> = <var:P> \land <var:H1> = <var:P> \} \\ <var:H2> := <var:H1> * <var:n> ; \\ \{ <var:n> = <var:P> \land <var:H1> = <var:P> \land <var:H2> = <var:P> ^ <nat:2> \} \end{eqnarray} Advancing running our set of instructions gives us : \begin{eqnarray} <var:H0> := <nat:4> ; \\ \{ <var:n> = <var:P> \land <var:H1> = <var:P> \land <var:H2> = <var:P> ^ <nat:2> \land <var:H0> = <nat:4> \} \\ <var:H1> := <var:H1> * <nat:8> ; \\ \{ <var:n> = <var:P> \land <var:H1> = <nat:8> \cdot <var:P> \land <var:H2> = <var:P> ^ <nat:2> \land <var:H0> = <nat:4> \} \\ <var:H2> := <var:H2> * <nat:6> ; \\ \{ <var:n> = <var:P> \land <var:H1> = <nat:8> \cdot <var:P> \land <var:H2> = <nat:6> \cdot <var:P> ^ <nat:2> \land <var:H0> = <nat:4> \} \\ <var:O> := <var:H2> \\ \{ <var:n> = <var:P> \land <var:H1> = <nat:8> \cdot <var:P> \land <var:H0> = <nat:4> \land <var:O> = <nat:6> \cdot <var:P> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:H1> \\ \{ <var:n> = <var:P> \land <var:H0> = <nat:4> \land <var:O> = <nat:6> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> \} \\ <var:O> := <var:O> + <var:H0> \\ \{ <var:n> = <var:P> \land <var:O> = <nat:6> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:n> = <var:P> }} <var:H1> := <var:n> ; <var:H2> := <var:H1> * <var:n> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:8> ; <var:H2> := <var:H2> * <nat:6> ; <var:O> := <var:H2> <var:O> := <var:O> + <var:H1> <var:O> := <var:O> + <var:H0> {{ <var:O> = <nat:6> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:H1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:H1> = <var:P> /\ <var:H2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:H1> = <var:P> /\ <var:H2> = <var:P> ^ <nat:2> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:H1> = <nat:8> * <var:P> /\ <var:H2> = <var:P> ^ <nat:2> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:H1> = <nat:8> * <var:P> /\ <var:H2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:H1> = <nat:8> * <var:P> /\ <var:H0> = <nat:4> /\ <var:O> = <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:H0> = <nat:4> /\ <var:O> = <nat:6> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:O> = <nat:6> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 