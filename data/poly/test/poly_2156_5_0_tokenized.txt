\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:6> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:I> ; <var:J> := <var:x1> ; <var:J> := <var:J> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:I> = <var:w> $ prior to the execution of this list of commands , it must be that we see $ <var:J> = <nat:4> \times <var:w> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be given with standard Hoare reasoning . Advancing on , we have \begin{eqnarray} \{ <var:I> = <var:w> \} \, <var:x0> := <nat:6> \, \{ <var:I> = <var:w> \land <var:x0> = <nat:6> \} \\ \{ <var:I> = <var:w> \land <var:x0> = <nat:6> \} \, <var:x1> := <nat:4> \, \{ <var:I> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:4> \} \\ \{ <var:I> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:4> \} \, <var:x1> := <var:x1> * <var:I> \, \{ <var:I> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:4> * <var:w> \} \end{eqnarray} Moving forward to the next step , we see \begin{eqnarray} \{ <var:I> = <var:w> \} \, <var:x0> := <nat:6> \, \{ <var:I> = <var:w> \land <var:x0> = <nat:6> \} \\ \{ <var:I> = <var:w> \land <var:x0> = <nat:6> \} \, <var:x1> := <nat:4> \, \{ <var:I> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x0> := <nat:6> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:I> ; <var:J> := <var:x1> ; <var:J> := <var:J> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:I> = <var:w> }} <def:poly> {{ <var:J> = <nat:4> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:x0> = <nat:6> /\ <var:J> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:J> = <nat:4> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 