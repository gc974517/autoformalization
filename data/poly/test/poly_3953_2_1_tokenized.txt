\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:2> ; <var:t> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assume it to hold that $ <var:U> = <var:Y> $ ( for any positive integer coefficients $ <var:Y> $ ) prior to executing this code segment then $ <var:t> = <nat:2> $ after program has executed . \end{theorem} \begin{proof} The method of proof for the series of commands is done through Hoare reasoning . Advancing , we see \verb | { <var:U> = <var:Y> } <var:y0> := <nat:2> { <var:U> = <var:Y> \land <var:y0> = <nat:2> } | . This is sound by the variable assignmet rule of standard Hoare reasoning . Advancing to the next step seen in the list of instructions , we see \verb | { <var:U> = <var:Y> } <var:y0> := <nat:2> { <var:U> = <var:Y> \land <var:y0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:t> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:U> = <var:Y> }} <def:poly> {{ <var:t> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:t> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 