\begin{document} \begin{theorem} Define a series of commands as follows \begin{verbatim} <var:y> := <nat:1> ; <var:y> := <nat:1> + <var:y> * <var:p> ; <var:y> := <nat:4> + <var:y> * <var:p> \end{verbatim} Allowing that we have $ <var:p> = <var:f> $ , given some $ <var:f> \in \mathbb{Z}^+ $ , before evaluating the program it holds that we have $ <var:y> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our list of instructions is done through usual Hoare reasoning . Moving on to the next step , we see the variable update command letting $ <nat:1> $ toward $ <var:y>$ . This line redefines $ \{ <var:p> = <var:f> \} $ into the condition $ \{ <var:p> = <var:f> \land <var:y> = <nat:1> \} $ . Keeping momentum , we see the variable assignmet code letting $ <nat:1> + <var:y> * <var:p> $ to $ <var:y>$ . This advances $ \{ <var:p> = <var:f> \land <var:y> = <nat:1> \} $ to the condition $ \{ <var:p> = <var:f> \land <var:y> = <nat:1> \times <var:f> + <nat:1> \} $ . This is shown to be logically sound by the assignment inference rule defined by standard Hoare logic . Considering the subsequent step found in the set of instructions , we see the assignment line defining $ <nat:4> + <var:y> * <var:p$ as $ <var:y>$ . This statement takes the precondition $ \{ <var:p> = <var:f> \land <var:y> = <nat:1> \times <var:f> + <nat:1> \} $ as the condition $ \{ <var:p> = <var:f> \land <var:y> = <nat:1> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:4> \} $ . This is known to be sound by the assignment scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:p> = <var:f> }} <var:y> := <nat:1> ; <var:y> := <nat:1> + <var:y> * <var:p> ; <var:y> := <nat:4> + <var:y> * <var:p> {{ <var:y> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:y> = <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:y> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 