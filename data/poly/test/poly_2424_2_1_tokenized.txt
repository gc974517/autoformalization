\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:3> ; <var:z> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Assume taking $ <var:i> \in \mathbb{N} $ it to hold that $ <var:P> = <var:i> $ prior to evaluating our list of instructions , it follows that we see $ <var:z> = <nat:3> $ once segment of code has exited . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is shown by Hoare logic . Observing the following piece of code in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:i> \} & <var:w0> := <nat:3> & \{ <var:P> = <var:i> \land <var:w0> = <nat:3> \} \end{tabular} This is shown to be logically sound by the assignment law in Hoare logic . Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:P> = <var:i> \} & <var:w0> := <nat:3> & \{ <var:P> = <var:i> \land <var:w0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:z> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:P> = <var:i> }} <def:poly> {{ <var:z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 