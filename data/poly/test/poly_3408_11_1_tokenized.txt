\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:P1> := <var:W> ; <var:P2> := <var:P1> * <var:W> ; <var:P3> := <var:P2> * <var:W> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:2> ; <var:P2> := <var:P2> * <nat:4> ; <var:P3> := <var:P3> * <nat:4> ; <var:z> := <var:P3> <var:z> := <var:z> + <var:P2> <var:z> := <var:z> + <var:P1> <var:z> := <var:z> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Allowing $ <var:W> = <var:j> $ before interpreting our list of instructions , then $ <var:z> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands can be accomplished with Hoare techniques . Shifting focus toward the subsequent pieces of code contained in the series of commands , \begin{eqnarray} \{ <var:W> = <var:j> \} \, <var:P1> := <var:W> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \} \\ \{ <var:W> = <var:j> \land <var:P1> = <var:j> \} \, <var:P2> := <var:P1> * <var:W> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \} \\ \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \} \, <var:P3> := <var:P2> * <var:W> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \land <var:P3> = <var:j> ^ <nat:3> \} \\ \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \land <var:P3> = <var:j> ^ <nat:3> \} \, <var:P0> := <nat:1> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \land <var:P3> = <var:j> ^ <nat:3> \land <var:P0> = <nat:1> \} \\ \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \land <var:P3> = <var:j> ^ <nat:3> \land <var:P0> = <nat:1> \} \, <var:P1> := <var:P1> * <nat:2> \, \{ <var:W> = <var:j> \land <var:P1> = <nat:2> * <var:j> \land <var:P2> = <var:j> ^ <nat:2> \land <var:P3> = <var:j> ^ <nat:3> \land <var:P0> = <nat:1> \} \end{eqnarray} This is deduced using the variable assignmet scheme given in typical Hoare techniques . Shifting focus toward the next lines found in the set of commands , we see \begin{eqnarray} \{ <var:W> = <var:j> \} \, <var:P1> := <var:W> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \} \\ \{ <var:W> = <var:j> \land <var:P1> = <var:j> \} \, <var:P2> := <var:P1> * <var:W> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \} \\ \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \} \, <var:P3> := <var:P2> * <var:W> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \land <var:P3> = <var:j> ^ <nat:3> \} \\ \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \land <var:P3> = <var:j> ^ <nat:3> \} \, <var:P0> := <nat:1> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \land <var:P3> = <var:j> ^ <nat:3> \land <var:P0> = <nat:1> \} \end{eqnarray} This is ensured using the variable binding law defined by Hoare reasoning . Focusing on the upcoming lines seen in the list of commands , we have \begin{eqnarray} \{ <var:W> = <var:j> \} \, <var:P1> := <var:W> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \} \\ \{ <var:W> = <var:j> \land <var:P1> = <var:j> \} \, <var:P2> := <var:P1> * <var:W> \, \{ <var:W> = <var:j> \land <var:P1> = <var:j> \land <var:P2> = <var:j> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:W> ; <var:P2> := <var:P1> * <var:W> ; <var:P3> := <var:P2> * <var:W> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:2> ; <var:P2> := <var:P2> * <nat:4> ; <var:P3> := <var:P3> * <nat:4> ; <var:z> := <var:P3> <var:z> := <var:z> + <var:P2> <var:z> := <var:z> + <var:P1> <var:z> := <var:z> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:W> = <var:j> }} <def:poly> {{ <var:z> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <var:j> /\ <var:P2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <var:j> /\ <var:P2> = <var:j> ^ <nat:2> /\ <var:P3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <var:j> /\ <var:P2> = <var:j> ^ <nat:2> /\ <var:P3> = <var:j> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <nat:2> * <var:j> /\ <var:P2> = <var:j> ^ <nat:2> /\ <var:P3> = <var:j> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <nat:2> * <var:j> /\ <var:P2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:P3> = <var:j> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <nat:2> * <var:j> /\ <var:P2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:P3> = <nat:4> * <var:j> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <nat:2> * <var:j> /\ <var:P2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:P0> = <nat:1> /\ <var:z> = <nat:4> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P1> = <nat:2> * <var:j> /\ <var:P0> = <nat:1> /\ <var:z> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:P0> = <nat:1> /\ <var:z> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 