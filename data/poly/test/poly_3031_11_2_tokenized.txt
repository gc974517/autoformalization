\begin{document} \begin{theorem} Consider a segment of code as follows \begin{verbatim} <var:v> := <nat:3> ; <var:v> := <nat:2> + <var:v> * <var:F> ; <var:v> := <nat:2> + <var:v> * <var:F> ; <var:v> := <nat:4> + <var:v> * <var:F> ; <var:v> := <nat:3> + <var:v> * <var:F> ; <var:v> := <nat:4> + <var:v> * <var:F> ; <var:v> := <nat:3> + <var:v> * <var:F> ; <var:v> := <nat:1> + <var:v> * <var:F> ; <var:v> := <var:v> * <var:F> ; <var:v> := <nat:3> + <var:v> * <var:F> ; <var:v> := <nat:2> + <var:v> * <var:F> \end{verbatim} Allow given every $ <var:A> \in \mathbb{N} $ it to hold that $ <var:F> = <var:A> $ ahead of the evaluation of our segment of code , it must be that we see $ <var:v> = <nat:3> \times <var:A> ^ <nat:10> + <nat:2> \times <var:A> ^ <nat:9> + <nat:2> \times <var:A> ^ <nat:8> + <nat:4> \times <var:A> ^ <nat:7> + <nat:3> \times <var:A> ^ <nat:6> + <nat:4> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:1> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> + <nat:2> $ after program executes . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:F> = <var:A> \} \\ <var:v> := <nat:3> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \} \\ <var:v> := <nat:2> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> + <nat:2> \} \\ <var:v> := <nat:2> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:2> \} \\ <var:v> := <nat:4> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:4> \} \\ <var:v> := <nat:3> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:3> \} \\ <var:v> := <nat:4> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:5> + <nat:2> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:4> \} \\ <var:v> := <nat:3> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:6> + <nat:2> \cdot <var:A> ^ <nat:5> + <nat:2> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:3> \} \\ <var:v> := <nat:1> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:7> + <nat:2> \cdot <var:A> ^ <nat:6> + <nat:2> \cdot <var:A> ^ <nat:5> + <nat:4> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:1> \} \\ <var:v> := <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:8> + <nat:2> \cdot <var:A> ^ <nat:7> + <nat:2> \cdot <var:A> ^ <nat:6> + <nat:4> \cdot <var:A> ^ <nat:5> + <nat:3> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + \} \\ <var:v> := <nat:3> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:9> + <nat:2> \cdot <var:A> ^ <nat:8> + <nat:2> \cdot <var:A> ^ <nat:7> + <nat:4> \cdot <var:A> ^ <nat:6> + <nat:3> \cdot <var:A> ^ <nat:5> + <nat:4> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:3> \} \\ <var:v> := <nat:2> + <var:v> * <var:F> \\ \{ <var:F> = <var:A> \land <var:v> = <nat:3> \cdot <var:A> ^ <nat:10> + <nat:2> \cdot <var:A> ^ <nat:9> + <nat:2> \cdot <var:A> ^ <nat:8> + <nat:4> \cdot <var:A> ^ <nat:7> + <nat:3> \cdot <var:A> ^ <nat:6> + <nat:4> \cdot <var:A> ^ <nat:5> + <nat:3> \cdot <var:A> ^ <nat:4> + <nat:1> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> + <nat:2> \} \end{eqnarray} Considering the above , the series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:F> = <var:A> }} <var:v> := <nat:3> ; <var:v> := <nat:2> + <var:v> * <var:F> ; <var:v> := <nat:2> + <var:v> * <var:F> ; <var:v> := <nat:4> + <var:v> * <var:F> ; <var:v> := <nat:3> + <var:v> * <var:F> ; <var:v> := <nat:4> + <var:v> * <var:F> ; <var:v> := <nat:3> + <var:v> * <var:F> ; <var:v> := <nat:1> + <var:v> * <var:F> ; <var:v> := <var:v> * <var:F> ; <var:v> := <nat:3> + <var:v> * <var:F> ; <var:v> := <nat:2> + <var:v> * <var:F> {{ <var:v> = <nat:3> * <var:A> ^ <nat:10> + <nat:2> * <var:A> ^ <nat:9> + <nat:2> * <var:A> ^ <nat:8> + <nat:4> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:8> + <nat:2> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:9> + <nat:2> * <var:A> ^ <nat:8> + <nat:2> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:v> = <nat:3> * <var:A> ^ <nat:10> + <nat:2> * <var:A> ^ <nat:9> + <nat:2> * <var:A> ^ <nat:8> + <nat:4> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 