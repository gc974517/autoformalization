\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} : \begin{verbatim} <var:i1> := <var:j> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:7> ; <var:J> := <var:i1> <var:J> := <var:J> + <var:i0> \end{verbatim} Assume , with some natural numbers $ <var:s> $ , that $ <var:j> = <var:s> $ ahead of interpreting this list of commands it follows that $ <var:J> = <nat:7> * <var:s> + <nat:9> $ . \end{theorem} \begin{proof} The argument for our set of instructions is clear through standard Hoare techniques . Immediately after , \[ \begin{tabular} {rcl} \{ <var:j> = <var:s> \} & <var:i1> := <var:j> & \{ <var:j> = <var:s> \land <var:i1> = <var:s> \} \end{tabular} Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:s> \} & <var:i1> := <var:j> & \{ <var:j> = <var:s> \land <var:i1> = <var:s> \} \\ \{ <var:j> = <var:s> \land <var:i1> = <var:s> \} & <var:i0> := <nat:9> & \{ <var:j> = <var:s> \land <var:i1> = <var:s> \land <var:i0> = <nat:9> \} \\ \{ <var:j> = <var:s> \land <var:i1> = <var:s> \land <var:i0> = <nat:9> \} & <var:i1> := <var:i1> * <nat:7> & \{ <var:j> = <var:s> \land <var:i1> = <nat:7> \cdot <var:s> \land <var:i0> = <nat:9> \} \end{tabular} This is rigorously given through the variable update law found in Hoare reasoning . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:s> \} & <var:i1> := <var:j> & \{ <var:j> = <var:s> \land <var:i1> = <var:s> \} \end{tabular} This is shown to be logically sound through the variable binding rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:j> = <var:s> }} <var:i1> := <var:j> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:7> ; <var:J> := <var:i1> <var:J> := <var:J> + <var:i0> {{ <var:J> = <nat:7> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:i1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:i1> = <var:s> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:i1> = <nat:7> * <var:s> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:i0> = <nat:9> /\ <var:J> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:J> = <nat:7> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 