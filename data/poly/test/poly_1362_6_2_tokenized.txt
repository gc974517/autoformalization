\begin{document} \begin{theorem} Take the following list of commands : \begin{verbatim} <var:e> := <nat:2> ; <var:e> := <nat:1> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> ; <var:e> := <nat:1> + <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> \end{verbatim} Given $ <var:R> = <var:d> $ ahead of executing our segment of code then $ <var:e> = <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our segment of code is done using this decorated program . \begin{eqnarray} \{ <var:R> = <var:d> \} \\ <var:e> := <nat:2> ; \\ \{ <var:R> = <var:d> \land <var:e> = <nat:2> \} \\ <var:e> := <nat:1> + <var:e> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:e> = <nat:2> * <var:d> + <nat:1> \} \\ <var:e> := <nat:4> + <var:e> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:e> = <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> \} \\ <var:e> := <nat:1> + <var:e> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:e> = <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> \} \\ <var:e> := <nat:3> + <var:e> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:e> = <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:3> \} \\ <var:e> := <nat:4> + <var:e> * <var:R> \\ \{ <var:R> = <var:d> \land <var:e> = <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:R> = <var:d> }} <var:e> := <nat:2> ; <var:e> := <nat:1> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> ; <var:e> := <nat:1> + <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> {{ <var:e> = <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:e> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:e> = <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:e> = <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:e> = <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:e> = <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:e> = <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 