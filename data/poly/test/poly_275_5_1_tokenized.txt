\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:L> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:2> ; <var:I> := <var:b1> <var:I> := <var:I> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> . Assume that we have $ <var:L> = <var:G> $ before the evaluation of this set of instructions it holds that we see $ <var:I> = <nat:2> \cdot <var:G> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this list of commands is done with standard Hoare reasoning . Shifting focus toward the upcoming command in the series of commands , the variable assignmet code \verb | <var:b1> := <var:L> ; | . This statement transfers the condition $ \{ <var:L> = <var:G> \} $ to $ \{ <var:L> = <var:G> \land <var:b1> = <var:G> \} $ . This is known to be sound using the assignment rule in standard Hoare reasoning . Keeping momentum , we see the environment update statement defining $ <nat:2> $ to $ <var:b0>$ . This line moves the condition $ \{ <var:L> = <var:G> \land <var:b1> = <var:G> \} $ into $ \{ <var:L> = <var:G> \land <var:b1> = <var:G> \land <var:b0> = <nat:2> \} $ . Stepping forward , the binding code \verb | <var:b1> := <var:b1> * <nat:2> ; | . This line takes the condition $ \{ <var:L> = <var:G> \land <var:b1> = <var:G> \land <var:b0> = <nat:2> \} $ to $ \{ <var:L> = <var:G> \land <var:b1> = <nat:2> \cdot <var:G> \land <var:b0> = <nat:2> \} $ . Next , we have the assignment line \verb | <var:I> := <var:b1> | . This statement advances $ \{ <var:L> = <var:G> \land <var:b1> = <nat:2> \cdot <var:G> \land <var:b0> = <nat:2> \} $ into the postcondition $ \{ <var:L> = <var:G> \land <var:b0> = <nat:2> \land <var:I> = <nat:2> \cdot <var:G> \} $ . This is ensured through the assignment scheme found in Hoare techniques . After , we see the statement \verb | <var:I> := <var:I> + <var:b0> | . This moves $ \{ <var:L> = <var:G> \land <var:b0> = <nat:2> \land <var:I> = <nat:2> \cdot <var:G> \} $ into $ \{ <var:L> = <var:G> \land <var:I> = <nat:2> \cdot <var:G> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:L> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:2> ; <var:I> := <var:b1> <var:I> := <var:I> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:L> = <var:G> }} <def:poly> {{ <var:I> = <nat:2> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:b1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:b1> = <var:G> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:b1> = <nat:2> * <var:G> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:b0> = <nat:2> /\ <var:I> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:I> = <nat:2> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 