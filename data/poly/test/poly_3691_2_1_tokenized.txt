\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:3> ; <var:J> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Allow that $ <var:c> = <var:b> $ before running our set of instructions , it follows that we have $ <var:J> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the list of commands can be accomplished through standard Hoare logic . Moving on to the next step , the variable assignmet statement \verb | <var:m0> := <nat:3> ; | . This statement transfers the condition $ \{ <var:c> = <var:b> \} $ to $ \{ <var:c> = <var:b> \land <var:m0> = <nat:3> \} $ . Shifting focus toward the next command in the program , the environment update statement assigning $ <var:m0$ toward $ <var:J>$ . This command redefines the condition $ \{ <var:c> = <var:b> \land <var:m0> = <nat:3> \} $ toward the condition $ \{ <var:c> = <var:b> \land <var:J> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:J> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:c> = <var:b> }} <def:poly> {{ <var:J> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:b> /\ <var:J> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 