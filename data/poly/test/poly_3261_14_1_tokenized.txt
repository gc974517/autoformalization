\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:b1> := <var:g> ; <var:b2> := <var:b1> * <var:g> ; <var:b3> := <var:b2> * <var:g> ; <var:b4> := <var:b3> * <var:g> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:3> ; <var:b3> := <var:b3> * <nat:7> ; <var:b4> := <var:b4> * <nat:2> ; <var:M> := <var:b4> <var:M> := <var:M> + <var:b3> <var:M> := <var:M> + <var:b2> <var:M> := <var:M> + <var:b1> <var:M> := <var:M> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given --- assuming some integers $ <var:A> $ --- that we have $ <var:g> = <var:A> $ prior to interpreting the segment of code it must be that $ <var:M> = <nat:2> * <var:A> ^ <nat:4> + <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is evident with usual Hoare logic . Observing the next lines of codein the set of instructions , \begin{verbatim} { <var:g> = <var:A> } <var:b1> := <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> } { <var:g> = <var:A> \land <var:b1> = <var:A> } <var:b2> := <var:b1> * <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> } { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> } <var:b3> := <var:b2> * <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> } { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> } <var:b4> := <var:b3> * <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> } { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> } <var:b0> := <nat:9> { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } <var:b1> := <var:b1> * <nat:5> { <var:g> = <var:A> \land <var:b1> = <nat:5> \cdot <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } { <var:g> = <var:A> \land <var:b1> = <nat:5> \cdot <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } <var:b2> := <var:b2> * <nat:3> { <var:g> = <var:A> \land <var:b1> = <nat:5> \cdot <var:A> \land <var:b2> = <nat:3> \cdot <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } { <var:g> = <var:A> \land <var:b1> = <nat:5> \cdot <var:A> \land <var:b2> = <nat:3> \cdot <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } <var:b3> := <var:b3> * <nat:7> { <var:g> = <var:A> \land <var:b1> = <nat:5> \cdot <var:A> \land <var:b2> = <nat:3> \cdot <var:A> ^ <nat:2> \land <var:b3> = <nat:7> \cdot <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } { <var:g> = <var:A> \land <var:b1> = <nat:5> \cdot <var:A> \land <var:b2> = <nat:3> \cdot <var:A> ^ <nat:2> \land <var:b3> = <nat:7> \cdot <var:A> ^ <nat:3> \land <var:b4> = <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } <var:b4> := <var:b4> * <nat:2> { <var:g> = <var:A> \land <var:b1> = <nat:5> \cdot <var:A> \land <var:b2> = <nat:3> \cdot <var:A> ^ <nat:2> \land <var:b3> = <nat:7> \cdot <var:A> ^ <nat:3> \land <var:b4> = <nat:2> \cdot <var:A> ^ <nat:4> \land <var:b0> = <nat:9> } \end{verbatim} This is deduced using the rule from standard Hoare logic . Going forward , we see \begin{verbatim} { <var:g> = <var:A> } <var:b1> := <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> } { <var:g> = <var:A> \land <var:b1> = <var:A> } <var:b2> := <var:b1> * <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> } { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> } <var:b3> := <var:b2> * <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> \land <var:b2> = <var:A> ^ <nat:2> \land <var:b3> = <var:A> ^ <nat:3> } \end{verbatim} Jumping to the upcoming statement in our program , we have \begin{verbatim} { <var:g> = <var:A> } <var:b1> := <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> } \end{verbatim} This is shown by the variable assignmet rule found in Hoare techniques . Going forward , we see \begin{verbatim} { <var:g> = <var:A> } <var:b1> := <var:g> { <var:g> = <var:A> \land <var:b1> = <var:A> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <var:b4> : string := " <var:b4> " . Definition <def:poly> := <var:b1> := <var:g> ; <var:b2> := <var:b1> * <var:g> ; <var:b3> := <var:b2> * <var:g> ; <var:b4> := <var:b3> * <var:g> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:3> ; <var:b3> := <var:b3> * <nat:7> ; <var:b4> := <var:b4> * <nat:2> ; <var:M> := <var:b4> <var:M> := <var:M> + <var:b3> <var:M> := <var:M> + <var:b2> <var:M> := <var:M> + <var:b1> <var:M> := <var:M> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:g> = <var:A> }} <def:poly> {{ <var:M> = <nat:2> * <var:A> ^ <nat:4> + <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <var:A> /\ <var:b2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <var:A> /\ <var:b2> = <var:A> ^ <nat:2> /\ <var:b3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <var:A> /\ <var:b2> = <var:A> ^ <nat:2> /\ <var:b3> = <var:A> ^ <nat:3> /\ <var:b4> = <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <var:A> /\ <var:b2> = <var:A> ^ <nat:2> /\ <var:b3> = <var:A> ^ <nat:3> /\ <var:b4> = <var:A> ^ <nat:4> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <nat:5> * <var:A> /\ <var:b2> = <var:A> ^ <nat:2> /\ <var:b3> = <var:A> ^ <nat:3> /\ <var:b4> = <var:A> ^ <nat:4> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <nat:5> * <var:A> /\ <var:b2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:b3> = <var:A> ^ <nat:3> /\ <var:b4> = <var:A> ^ <nat:4> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <nat:5> * <var:A> /\ <var:b2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:b3> = <nat:7> * <var:A> ^ <nat:3> /\ <var:b4> = <var:A> ^ <nat:4> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <nat:5> * <var:A> /\ <var:b2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:b3> = <nat:7> * <var:A> ^ <nat:3> /\ <var:b4> = <nat:2> * <var:A> ^ <nat:4> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <nat:5> * <var:A> /\ <var:b2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:b3> = <nat:7> * <var:A> ^ <nat:3> /\ <var:b0> = <nat:9> /\ <var:M> = <nat:2> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <nat:5> * <var:A> /\ <var:b2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:b0> = <nat:9> /\ <var:M> = <nat:2> * <var:A> ^ <nat:4> + <nat:7> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b1> = <nat:5> * <var:A> /\ <var:b0> = <nat:9> /\ <var:M> = <nat:2> * <var:A> ^ <nat:4> + <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:b0> = <nat:9> /\ <var:M> = <nat:2> * <var:A> ^ <nat:4> + <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:M> = <nat:2> * <var:A> ^ <nat:4> + <nat:7> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 