\begin{document} \begin{theorem} Take a list of instructions as \begin{verbatim} <var:D> := <nat:3> ; <var:D> := <nat:2> + <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:1> + <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:1> + <var:D> * <var:c> ; <var:D> := <nat:1> + <var:D> * <var:c> ; <var:D> := <nat:2> + <var:D> * <var:c> \end{verbatim} Assume it to be that $ <var:c> = <var:I> $ for any $ <var:I> \in \mathbb{N} $ before interpreting the series of instructions , then we see $ <var:D> = <nat:3> \times <var:I> ^ <nat:11> + <nat:2> \times <var:I> ^ <nat:10> + <nat:3> \times <var:I> ^ <nat:9> + <nat:3> \times <var:I> ^ <nat:8> + <nat:1> \times <var:I> ^ <nat:7> + <nat:3> \times <var:I> ^ <nat:5> + <nat:3> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + <nat:2> $ when code segment has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:I> \} \\ <var:D> := <nat:3> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \} \\ <var:D> := <nat:2> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> + <nat:2> \} \\ <var:D> := <nat:3> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:3> \} \\ <var:D> := <nat:3> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:3> \} \\ <var:D> := <nat:1> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:1> \} \\ <var:D> := <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + \} \\ <var:D> := <nat:3> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \} \\ <var:D> := <nat:3> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:7> + <nat:2> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> + <nat:3> \} \\ <var:D> := <nat:3> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:8> + <nat:2> \cdot <var:I> ^ <nat:7> + <nat:3> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:1> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:3> \} \\ <var:D> := <nat:1> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:9> + <nat:2> \cdot <var:I> ^ <nat:8> + <nat:3> \cdot <var:I> ^ <nat:7> + <nat:3> \cdot <var:I> ^ <nat:6> + <nat:1> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:1> \} \\ <var:D> := <nat:1> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:10> + <nat:2> \cdot <var:I> ^ <nat:9> + <nat:3> \cdot <var:I> ^ <nat:8> + <nat:3> \cdot <var:I> ^ <nat:7> + <nat:1> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:1> \} \\ <var:D> := <nat:2> + <var:D> * <var:c> \\ \{ <var:c> = <var:I> \land <var:D> = <nat:3> \cdot <var:I> ^ <nat:11> + <nat:2> \cdot <var:I> ^ <nat:10> + <nat:3> \cdot <var:I> ^ <nat:9> + <nat:3> \cdot <var:I> ^ <nat:8> + <nat:1> \cdot <var:I> ^ <nat:7> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:2> \} \end{eqnarray} Using usual Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:c> = <var:I> }} <var:D> := <nat:3> ; <var:D> := <nat:2> + <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:1> + <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> ; <var:D> := <nat:1> + <var:D> * <var:c> ; <var:D> := <nat:1> + <var:D> * <var:c> ; <var:D> := <nat:2> + <var:D> * <var:c> {{ <var:D> = <nat:3> * <var:I> ^ <nat:11> + <nat:2> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:D> = <nat:3> * <var:I> ^ <nat:11> + <nat:2> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 