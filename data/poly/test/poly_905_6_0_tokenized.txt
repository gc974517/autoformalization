\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:4> ; <var:E2> := <nat:3> ; <var:E2> := <var:E2> * <var:z> ; <var:E2> := <var:E2> * <var:z> ; <var:Q> := <var:E2> ; <var:Q> := <var:Q> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Assume that $ <var:z> = <var:b> $ --- for any positive coefficients $ <var:b> $ --- before evaluating this code it must be that we see $ <var:Q> = <nat:3> * <var:b> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning gives : \begin{eqnarray} \{ <var:z> = <var:b> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:z> = <var:b> \land <var:E0> = <nat:4> \} \\ <var:E2> := <nat:3> ; \\ \{ <var:z> = <var:b> \land <var:E0> = <nat:4> \land <var:E2> = <nat:3> \} \\ <var:E2> := <var:E2> * <var:z> ; \\ \{ <var:z> = <var:b> \land <var:E0> = <nat:4> \land <var:E2> = <nat:3> \cdot <var:b> \} \\ <var:E2> := <var:E2> * <var:z> ; \\ \{ <var:z> = <var:b> \land <var:E0> = <nat:4> \land <var:E2> = <nat:3> \cdot <var:b> ^ <nat:2> \} \\ <var:Q> := <var:E2> ; \\ \{ <var:z> = <var:b> \land <var:E0> = <nat:4> \land <var:Q> = <nat:3> \cdot <var:b> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:E0> \\ \{ <var:z> = <var:b> \land <var:Q> = <nat:3> \cdot <var:b> ^ <nat:2> + <nat:4> \} \end{eqnarray} Thusly , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:4> ; <var:E2> := <nat:3> ; <var:E2> := <var:E2> * <var:z> ; <var:E2> := <var:E2> * <var:z> ; <var:Q> := <var:E2> ; <var:Q> := <var:Q> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:z> = <var:b> }} <def:poly> {{ <var:Q> = <nat:3> * <var:b> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:E0> = <nat:4> /\ <var:Q> = <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:Q> = <nat:3> * <var:b> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 