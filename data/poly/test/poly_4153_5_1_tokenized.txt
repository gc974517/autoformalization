\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:p1> := <var:R> ; <var:p0> := <nat:9> ; <var:p1> := <var:p1> * <nat:5> ; <var:L> := <var:p1> <var:L> := <var:L> + <var:p0> \end{verbatim} Allow it to be that $ <var:R> = <var:k> $ ahead of evaluating this set of commands it must be that we see $ <var:L> = <nat:5> * <var:k> + <nat:9> $ after list of instructions finishes . \end{theorem} \begin{proof} The flow of logic for our code segment is evident using usual Hoare logic . Moving forward , we see the variable update code \verb | <var:p1> := <var:R> ; | . This transfers the precondition $ \{ <var:R> = <var:k> \} $ into $ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \} $ . This is guaranteed through the assignment scheme in standard Hoare reasoning . Advancing to the next step , the assignment code giving $ <nat:9> $ as $ <var:p0>$ . This command advances the precondition $ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \} $ as $ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \land <var:p0> = <nat:9> \} $ . Next , the statement \verb | <var:p1> := <var:p1> * <nat:5> ; | . This forwards the precondition $ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \land <var:p0> = <nat:9> \} $ into $ \{ <var:R> = <var:k> \land <var:p1> = <nat:5> * <var:k> \land <var:p0> = <nat:9> \} $ . Advancing to the next step , we have the variable update code \verb | <var:L> := <var:p1> | . This moves the condition $ \{ <var:R> = <var:k> \land <var:p1> = <nat:5> * <var:k> \land <var:p0> = <nat:9> \} $ toward the condition $ \{ <var:R> = <var:k> \land <var:p0> = <nat:9> \land <var:L> = <nat:5> * <var:k> \} $ . This is deduced by the assignment scheme defined by typical Hoare reasoning . Observing the proceeding bit of code found in the set of instructions , we see the binding line binding $ <var:L> + <var:p0$ to $ <var:L>$ . This moves the condition $ \{ <var:R> = <var:k> \land <var:p0> = <nat:9> \land <var:L> = <nat:5> * <var:k> \} $ to $ \{ <var:R> = <var:k> \land <var:L> = <nat:5> * <var:k> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:R> = <var:k> }} <var:p1> := <var:R> ; <var:p0> := <nat:9> ; <var:p1> := <var:p1> * <nat:5> ; <var:L> := <var:p1> <var:L> := <var:L> + <var:p0> {{ <var:L> = <nat:5> * <var:k> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <var:k> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <nat:5> * <var:k> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p0> = <nat:9> /\ <var:L> = <nat:5> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:L> = <nat:5> * <var:k> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 