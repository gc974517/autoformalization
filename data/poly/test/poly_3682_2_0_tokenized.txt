\begin{document} \begin{theorem} Define a list of instructions : \begin{verbatim} <var:m0> := <nat:8> ; <var:U> := <var:m0> \end{verbatim} Assume $ <var:J> = <var:X> $ before executing our list of commands , it must be that we see $ <var:U> = <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be done with the below decorated series of instructions . \begin{eqnarray} \{ <var:J> = <var:X> \} \\ <var:m0> := <nat:8> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:8> \} \end{eqnarray} Advancing running this list of instructions gives : \begin{eqnarray} <var:U> := <var:m0> \\ \{ <var:J> = <var:X> \land <var:U> = <nat:8> \} \end{eqnarray} Utilizing Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:J> = <var:X> }} <var:m0> := <nat:8> ; <var:U> := <var:m0> {{ <var:U> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:U> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 