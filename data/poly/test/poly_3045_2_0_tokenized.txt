\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:4> ; <var:s> := <var:M0> \end{verbatim} Assume --- given any $ <var:o> \in \mathbb{N} $ --- it to hold that $ <var:e> = <var:o> $ before evaluating our program , it must be that we have $ <var:s> = <nat:4> $ after program terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:o> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:e> = <var:o> \land <var:M0> = <nat:4> \} \\ <var:s> := <var:M0> \\ \{ <var:e> = <var:o> \land <var:s> = <nat:4> \} \end{eqnarray} Using typical Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:e> = <var:o> }} <var:M0> := <nat:4> ; <var:s> := <var:M0> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 