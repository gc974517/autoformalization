\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:4> ; <var:N> := <var:z0> \end{verbatim} Assuming --- letting positive coefficients $ <var:c> $ --- it to be that $ <var:s> = <var:c> $ prior to the execution of this series of instructions it must be that we see $ <var:N> = <nat:4> $ once code is done . \end{theorem} \begin{proof} Applying typical Hoare logic gives us : \begin{eqnarray} \{ <var:s> = <var:c> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:s> = <var:c> \land <var:z0> = <nat:4> \} \\ <var:N> := <var:z0> \\ \{ <var:s> = <var:c> \land <var:N> = <nat:4> \} \end{eqnarray} Considering the above , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:s> = <var:c> }} <var:z0> := <nat:4> ; <var:N> := <var:z0> {{ <var:N> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:N> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 