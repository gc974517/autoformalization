\begin{document} \begin{theorem} Define a set of instructions such that \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:B> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:B> ; <var:e2> := <var:e2> * <var:B> ; <var:e3> := <nat:2> ; <var:e3> := <var:e3> * <var:B> ; <var:e3> := <var:e3> * <var:B> ; <var:e3> := <var:e3> * <var:B> ; <var:z> := <var:e3> ; <var:z> := <var:z> + <var:e2> ; <var:z> := <var:z> + <var:e1> ; <var:z> := <var:z> + <var:e0> \end{verbatim} Assume , given some $ <var:T> \in \mathbb{Z}^+ $ , that $ <var:B> = <var:T> $ prior to evaluating our set of instructions it must be that we see $ <var:z> = <nat:2> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this code segment can be shown by standard Hoare techniques . Advancing to the following lines of codecontained in the segment of code , \begin{verbatim} { <var:B> = <var:T> } <var:e0> := <nat:3> { <var:B> = <var:T> \land <var:e0> = <nat:3> } { <var:B> = <var:T> \land <var:e0> = <nat:3> } <var:e1> := <nat:1> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> } { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> } <var:e1> := <var:e1> * <var:B> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> } { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> } <var:e2> := <nat:3> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> } { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> } <var:e2> := <var:e2> * <var:B> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> * <var:T> } { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> * <var:T> } <var:e2> := <var:e2> * <var:B> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> * <var:T> ^ <nat:2> } { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> * <var:T> ^ <nat:2> } <var:e3> := <nat:2> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> * <var:T> ^ <nat:2> \land <var:e3> = <nat:2> } { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> * <var:T> ^ <nat:2> \land <var:e3> = <nat:2> } <var:e3> := <var:e3> * <var:B> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> \land <var:e2> = <nat:3> * <var:T> ^ <nat:2> \land <var:e3> = <nat:2> * <var:T> } \end{verbatim} Advancing , we have \begin{verbatim} { <var:B> = <var:T> } <var:e0> := <nat:3> { <var:B> = <var:T> \land <var:e0> = <nat:3> } { <var:B> = <var:T> \land <var:e0> = <nat:3> } <var:e1> := <nat:1> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> } { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> } <var:e1> := <var:e1> * <var:B> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:T> } \end{verbatim} This is deduced with the inference rule given by Hoare logic . Observing the proceeding lines of codeseen in our set of instructions , \begin{verbatim} { <var:B> = <var:T> } <var:e0> := <nat:3> { <var:B> = <var:T> \land <var:e0> = <nat:3> } { <var:B> = <var:T> \land <var:e0> = <nat:3> } <var:e1> := <nat:1> { <var:B> = <var:T> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> } \end{verbatim} This is guaranteed through the binding inference rule in typical Hoare techniques . Moving on to the next line contained in the code segment , we see \begin{verbatim} { <var:B> = <var:T> } <var:e0> := <nat:3> { <var:B> = <var:T> \land <var:e0> = <nat:3> } \end{verbatim} This is sound by the binding inference rule found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:B> = <var:T> }} <var:e0> := <nat:3> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:B> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:B> ; <var:e2> := <var:e2> * <var:B> ; <var:e3> := <nat:2> ; <var:e3> := <var:e3> * <var:B> ; <var:e3> := <var:e3> * <var:B> ; <var:e3> := <var:e3> * <var:B> ; <var:z> := <var:e3> ; <var:z> := <var:z> + <var:e2> ; <var:z> := <var:z> + <var:e1> ; <var:z> := <var:z> + <var:e0> {{ <var:z> = <nat:2> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:e2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:e2> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:e2> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:e2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:e3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:e2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:e2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:e2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:e2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:z> = <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:T> /\ <var:z> = <nat:2> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e0> = <nat:3> /\ <var:z> = <nat:2> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:z> = <nat:2> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 