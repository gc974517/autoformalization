\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:Z> ; <var:v2> := <var:v1> * <var:Z> ; <var:v3> := <var:v2> * <var:Z> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:2> ; <var:v2> := <var:v2> * <nat:4> ; <var:v3> := <var:v3> * <nat:2> ; <var:m> := <var:v3> <var:m> := <var:m> + <var:v2> <var:m> := <var:m> + <var:v1> <var:m> := <var:m> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:Z> = <var:F> $ prior to the execution of this list of commands , it follows that we have $ <var:m> = <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this program can be given by Hoare reasoning . Moving forward , we see the assignment line defining $ <var:Z> $ toward $ <var:v1>$ . This advances the precondition $ \{ <var:Z> = <var:F> \} $ toward $ \{ <var:Z> = <var:F> \land <var:v1> = <var:F> \} $ . This is rigorously given through the assignment scheme given in usual Hoare reasoning . Looking at the next piece of code contained in our list of commands , the variable binding code \verb | <var:v2> := <var:v1> * <var:Z> ; | . This statement forwards the precondition $ \{ <var:Z> = <var:F> \land <var:v1> = <var:F> \} $ toward the condition $ \{ <var:Z> = <var:F> \land <var:v1> = <var:F> \land <var:v2> = <var:F> ^ <nat:2> \} $ . Considering the following command in our code , the variable binding code defining $ <var:v2> * <var:Z> $ as $ <var:v3>$ . This line moves $ \{ <var:Z> = <var:F> \land <var:v1> = <var:F> \land <var:v2> = <var:F> ^ <nat:2> \} $ toward the condition $ \{ <var:Z> = <var:F> \land <var:v1> = <var:F> \land <var:v2> = <var:F> ^ <nat:2> \land <var:v3> = <var:F> ^ <nat:3> \} $ . This is guaranteed through the assignment rule defined in Hoare logic . Moving on to the next line contained in the series of commands , we see the variable assignmet code giving $ <nat:7> $ as $ <var:v0>$ . This redefines the precondition $ \{ <var:Z> = <var:F> \land <var:v1> = <var:F> \land <var:v2> = <var:F> ^ <nat:2> \land <var:v3> = <var:F> ^ <nat:3> \} $ to the postcondition $ \{ <var:Z> = <var:F> \land <var:v1> = <var:F> \land <var:v2> = <var:F> ^ <nat:2> \land <var:v3> = <var:F> ^ <nat:3> \land <var:v0> = <nat:7> \} $ . This is guaranteed through the assignment inference rule defined in typical Hoare reasoning . Following , we have the variable binding code \verb | <var:v1> := <var:v1> * <nat:2> ; | . This command takes the precondition $ \{ <var:Z> = <var:F> \land <var:v1> = <var:F> \land <var:v2> = <var:F> ^ <nat:2> \land <var:v3> = <var:F> ^ <nat:3> \land <var:v0> = <nat:7> \} $ as $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v2> = <var:F> ^ <nat:2> \land <var:v3> = <var:F> ^ <nat:3> \land <var:v0> = <nat:7> \} $ . This is given with the assignment rule found in usual Hoare logic . Moving onward , the binding command defining $ <var:v2> * <nat:4> $ toward $ <var:v2>$ . This statement moves $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v2> = <var:F> ^ <nat:2> \land <var:v3> = <var:F> ^ <nat:3> \land <var:v0> = <nat:7> \} $ to the condition $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v2> = <nat:4> \times <var:F> ^ <nat:2> \land <var:v3> = <var:F> ^ <nat:3> \land <var:v0> = <nat:7> \} $ . This is sound with the assignment law found in usual Hoare techniques . Going forward , we have the environment update code \verb | <var:v3> := <var:v3> * <nat:2> ; | . This moves the precondition $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v2> = <nat:4> \times <var:F> ^ <nat:2> \land <var:v3> = <var:F> ^ <nat:3> \land <var:v0> = <nat:7> \} $ toward the postcondition $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v2> = <nat:4> \times <var:F> ^ <nat:2> \land <var:v3> = <nat:2> \times <var:F> ^ <nat:3> \land <var:v0> = <nat:7> \} $ . Shifting focus toward the following bit of code contained in the list of instructions , the variable assignmet statement giving $ <var:v3$ as $ <var:m>$ . This code forwards the condition $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v2> = <nat:4> \times <var:F> ^ <nat:2> \land <var:v3> = <nat:2> \times <var:F> ^ <nat:3> \land <var:v0> = <nat:7> \} $ as $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v2> = <nat:4> \times <var:F> ^ <nat:2> \land <var:v0> = <nat:7> \land <var:m> = <nat:2> \times <var:F> ^ <nat:3> \} $ . This is sound using the assignment law defined in standard Hoare techniques . Stepping through , the variable update command \verb | <var:m> := <var:m> + <var:v2> | . This line forwards the precondition $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v2> = <nat:4> \times <var:F> ^ <nat:2> \land <var:v0> = <nat:7> \land <var:m> = <nat:2> \times <var:F> ^ <nat:3> \} $ to the condition $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v0> = <nat:7> \land <var:m> = <nat:2> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> \} $ . This is ensured by the assignment scheme from typical Hoare techniques . Taking another step toward the upcoming piece of code contained in the program , we see the variable assignmet code \verb | <var:m> := <var:m> + <var:v1> | . This command redefines the condition $ \{ <var:Z> = <var:F> \land <var:v1> = <nat:2> \times <var:F> \land <var:v0> = <nat:7> \land <var:m> = <nat:2> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> \} $ into $ \{ <var:Z> = <var:F> \land <var:v0> = <nat:7> \land <var:m> = <nat:2> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> \} $ . Paying attention to the next command contained in the list of commands , we have the variable assignmet statement yielding $ <var:m> + <var:v0$ to $ <var:m>$ . This line transfers the precondition $ \{ <var:Z> = <var:F> \land <var:v0> = <nat:7> \land <var:m> = <nat:2> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> \} $ into $ \{ <var:Z> = <var:F> \land <var:m> = <nat:2> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:Z> ; <var:v2> := <var:v1> * <var:Z> ; <var:v3> := <var:v2> * <var:Z> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:2> ; <var:v2> := <var:v2> * <nat:4> ; <var:v3> := <var:v3> * <nat:2> ; <var:m> := <var:v3> <var:m> := <var:m> + <var:v2> <var:m> := <var:m> + <var:v1> <var:m> := <var:m> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:Z> = <var:F> }} <def:poly> {{ <var:m> = <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <var:F> /\ <var:v2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <var:F> /\ <var:v2> = <var:F> ^ <nat:2> /\ <var:v3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <var:F> /\ <var:v2> = <var:F> ^ <nat:2> /\ <var:v3> = <var:F> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <nat:2> * <var:F> /\ <var:v2> = <var:F> ^ <nat:2> /\ <var:v3> = <var:F> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <nat:2> * <var:F> /\ <var:v2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:v3> = <var:F> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <nat:2> * <var:F> /\ <var:v2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:v3> = <nat:2> * <var:F> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <nat:2> * <var:F> /\ <var:v2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:v0> = <nat:7> /\ <var:m> = <nat:2> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v1> = <nat:2> * <var:F> /\ <var:v0> = <nat:7> /\ <var:m> = <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:v0> = <nat:7> /\ <var:m> = <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:F> /\ <var:m> = <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 