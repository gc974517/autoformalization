\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:1> + <var:U> * <var:G> ; <var:U> := <nat:3> + <var:U> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Given ( for all positive integer coefficients $ <var:J> $ ) it to be that $ <var:G> = <var:J> $ ahead of the execution of this code segment , it holds that $ <var:U> = <nat:3> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:3> $ once series of commands terminates . \end{theorem} \begin{proof} Applying Hoare logic results in : \begin{eqnarray} \{ <var:G> = <var:J> \} \\ <var:U> := <nat:3> ; \\ \{ <var:G> = <var:J> \land <var:U> = <nat:3> \} \\ <var:U> := <nat:1> + <var:U> * <var:G> ; \\ \{ <var:G> = <var:J> \land <var:U> = <nat:3> \cdot <var:J> + <nat:1> \} \\ <var:U> := <nat:3> + <var:U> * <var:G> \\ \{ <var:G> = <var:J> \land <var:U> = <nat:3> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:3> \} \end{eqnarray} As a result , our set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <nat:1> + <var:U> * <var:G> ; <var:U> := <nat:3> + <var:U> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:G> = <var:J> }} <def:poly> {{ <var:U> = <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:U> = <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:U> = <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 