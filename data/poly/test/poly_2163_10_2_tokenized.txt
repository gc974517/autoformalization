\begin{document} \begin{theorem} Define the following set of commands as \begin{verbatim} <var:S> := <nat:3> ; <var:S> := <nat:1> + <var:S> * <var:G> ; <var:S> := <nat:2> + <var:S> * <var:G> ; <var:S> := <nat:3> + <var:S> * <var:G> ; <var:S> := <nat:2> + <var:S> * <var:G> ; <var:S> := <nat:1> + <var:S> * <var:G> ; <var:S> := <var:S> * <var:G> ; <var:S> := <var:S> * <var:G> ; <var:S> := <nat:3> + <var:S> * <var:G> ; <var:S> := <nat:4> + <var:S> * <var:G> \end{verbatim} Allow that $ <var:G> = <var:F> $ ( for some whole numbers $ <var:F> $ ) prior to running our series of instructions , it holds that $ <var:S> = <nat:3> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> + <nat:4> $ once series of commands executes . \end{theorem} \begin{proof} The way to prove correctness for the program is done through Hoare techniques . Going forward , the environment update statement binding $ <nat:3> $ as $ <var:S>$ . This redefines the condition $ \{ <var:G> = <var:F> \} $ to the postcondition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> \} $ . Moving onward , we see the variable assignmet command \verb | <var:S> := <nat:1> + <var:S> * <var:G> ; | . This code moves the precondition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> \} $ into $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> + <nat:1> \} $ . This is deduced with the assignment scheme of Hoare reasoning . Keeping momentum , we have the variable update code defining $ <nat:2> + <var:S> * <var:G> $ to $ <var:S>$ . This line redefines the condition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> + <nat:1> \} $ to $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> \} $ . This is ensured through the assignment inference rule defined by standard Hoare reasoning . Focusing on the subsequent statement in the list of commands , the code \verb | <var:S> := <nat:3> + <var:S> * <var:G> ; | . This statement forwards the condition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> \} $ toward $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> \} $ . This is sound using the assignment law found in typical Hoare reasoning . Taking a look at the subsequent command in the set of instructions , the assignment statement \verb | <var:S> := <nat:2> + <var:S> * <var:G> ; | . This takes $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> \} $ to $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:2> \} $ . Going to the next step , the variable update command letting $ <nat:1> + <var:S> * <var:G> $ to $ <var:S>$ . This redefines the condition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:2> \} $ to the condition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> \} $ . This is deduced with the assignment law of typical Hoare logic . Honing in on the upcoming statement contained in the set of instructions , the variable binding command assigning $ <var:S> * <var:G> $ into $ <var:S>$ . This statement transfers $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> \} $ into the postcondition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + \} $ . Moving forward , we see the environment update line assigning $ <var:S> * <var:G> $ into $ <var:S>$ . This command redefines $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + \} $ toward the postcondition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + \} $ . This is rigorously given through the assignment rule of usual Hoare techniques . Next , the variable assignmet command \verb | <var:S> := <nat:3> + <var:S> * <var:G> ; | . This forwards $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + \} $ into $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> \} $ . Moving on to the next step , we have the binding command letting $ <nat:4> + <var:S> * <var:G$ to $ <var:S>$ . This code forwards the condition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> \} $ as the condition $ \{ <var:G> = <var:F> \land <var:S> = <nat:3> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> + <nat:4> \} $ . This is known to be sound through the assignment rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:G> = <var:F> }} <var:S> := <nat:3> ; <var:S> := <nat:1> + <var:S> * <var:G> ; <var:S> := <nat:2> + <var:S> * <var:G> ; <var:S> := <nat:3> + <var:S> * <var:G> ; <var:S> := <nat:2> + <var:S> * <var:G> ; <var:S> := <nat:1> + <var:S> * <var:G> ; <var:S> := <var:S> * <var:G> ; <var:S> := <var:S> * <var:G> ; <var:S> := <nat:3> + <var:S> * <var:G> ; <var:S> := <nat:4> + <var:S> * <var:G> {{ <var:S> = <nat:3> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:S> = <nat:3> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 