\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} such that \begin{verbatim} <var:j> := <nat:4> ; <var:j> := <nat:1> + <var:j> * <var:Q> ; <var:j> := <nat:2> + <var:j> * <var:Q> ; <var:j> := <nat:2> + <var:j> * <var:Q> ; <var:j> := <nat:3> + <var:j> * <var:Q> ; <var:j> := <nat:3> + <var:j> * <var:Q> ; <var:j> := <nat:1> + <var:j> * <var:Q> \end{verbatim} Allow , given every whole numbers $ <var:t> $ , it to hold that $ <var:Q> = <var:t> $ before running our segment of code , it follows that $ <var:j> = <nat:4> \times <var:t> ^ <nat:6> + <nat:1> \times <var:t> ^ <nat:5> + <nat:2> \times <var:t> ^ <nat:4> + <nat:2> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is demonstrated using typical Hoare logic . Advancing on , we see the variable binding code \verb | <var:j> := <nat:4> ; | . This moves the precondition $ \{ <var:Q> = <var:t> \} $ to $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \} $ . Taking another step toward the following command contained in the list of instructions , we have the variable assignmet command letting $ <nat:1> + <var:j> * <var:Q> $ as $ <var:j>$ . This code redefines $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \} $ toward the postcondition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> + <nat:1> \} $ . This is sound through the assignment rule given by usual Hoare techniques . After , we see the environment update line \verb | <var:j> := <nat:2> + <var:j> * <var:Q> ; | . This forwards the precondition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> + <nat:1> \} $ as the postcondition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:2> \} $ . This is guaranteed through the assignment inference rule found in standard Hoare reasoning . Moving forward to the next line seen in the code , the variable assignmet line assigning $ <nat:2> + <var:j> * <var:Q> $ to $ <var:j>$ . This command redefines the precondition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:2> \} $ toward $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:3> + <nat:1> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:2> \} $ . Focusing on the next bit of code found in the set of commands , we have the environment update line \verb | <var:j> := <nat:3> + <var:j> * <var:Q> ; | . This command advances $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:3> + <nat:1> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:2> \} $ into the condition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:4> + <nat:1> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:3> \} $ . This is shown to be logically sound with the assignment inference rule defined in Hoare logic . Considering the subsequent bit of code in the segment of code , we see the environment update code \verb | <var:j> := <nat:3> + <var:j> * <var:Q> ; | . This command takes the condition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:4> + <nat:1> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:3> \} $ as the postcondition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:5> + <nat:1> \times <var:t> ^ <nat:4> + <nat:2> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:3> \} $ . This is deduced by the assignment law defined in Hoare techniques . Stepping through , we see the variable binding statement \verb | <var:j> := <nat:1> + <var:j> * <var:Q> | . This redefines the precondition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:5> + <nat:1> \times <var:t> ^ <nat:4> + <nat:2> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:3> \} $ to the condition $ \{ <var:Q> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:6> + <nat:1> \times <var:t> ^ <nat:5> + <nat:2> \times <var:t> ^ <nat:4> + <nat:2> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Q> = <var:t> }} <var:j> := <nat:4> ; <var:j> := <nat:1> + <var:j> * <var:Q> ; <var:j> := <nat:2> + <var:j> * <var:Q> ; <var:j> := <nat:2> + <var:j> * <var:Q> ; <var:j> := <nat:3> + <var:j> * <var:Q> ; <var:j> := <nat:3> + <var:j> * <var:Q> ; <var:j> := <nat:1> + <var:j> * <var:Q> {{ <var:j> = <nat:4> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j> = <nat:4> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j> = <nat:4> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j> = <nat:4> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j> = <nat:4> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j> = <nat:4> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 