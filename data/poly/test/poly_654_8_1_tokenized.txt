\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:U1> := <var:H> ; <var:U2> := <var:U1> * <var:H> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:8> ; <var:U2> := <var:U2> * <nat:1> ; <var:A> := <var:U2> <var:A> := <var:A> + <var:U1> <var:A> := <var:A> + <var:U0> \end{verbatim} Assume it to be that $ <var:H> = <var:n> $ ahead of executing the list of instructions it must be that $ <var:A> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:8> \cdot <var:n> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is demonstrated with Hoare techniques . Next , we see the variable assignmet command \verb | <var:U1> := <var:H> ; | . This code forwards the condition $ \{ <var:H> = <var:n> \} $ to $ \{ <var:H> = <var:n> \land <var:U1> = <var:n> \} $ . Moving on to the next line seen in the program , we see the line \verb | <var:U2> := <var:U1> * <var:H> ; | . This code forwards the precondition $ \{ <var:H> = <var:n> \land <var:U1> = <var:n> \} $ into the condition $ \{ <var:H> = <var:n> \land <var:U1> = <var:n> \land <var:U2> = <var:n> ^ <nat:2> \} $ . Taking another step toward the subsequent bit of code in the series of instructions , the code \verb | <var:U0> := <nat:9> ; | . This redefines $ \{ <var:H> = <var:n> \land <var:U1> = <var:n> \land <var:U2> = <var:n> ^ <nat:2> \} $ toward the condition $ \{ <var:H> = <var:n> \land <var:U1> = <var:n> \land <var:U2> = <var:n> ^ <nat:2> \land <var:U0> = <nat:9> \} $ . This is sound through the assignment scheme from usual Hoare techniques . Keeping momentum , we see the variable binding statement assigning $ <var:U1> * <nat:8> $ toward $ <var:U1>$ . This code redefines $ \{ <var:H> = <var:n> \land <var:U1> = <var:n> \land <var:U2> = <var:n> ^ <nat:2> \land <var:U0> = <nat:9> \} $ to $ \{ <var:H> = <var:n> \land <var:U1> = <nat:8> \times <var:n> \land <var:U2> = <var:n> ^ <nat:2> \land <var:U0> = <nat:9> \} $ . Advancing on , the variable update code \verb | <var:U2> := <var:U2> * <nat:1> ; | . This command transfers the precondition $ \{ <var:H> = <var:n> \land <var:U1> = <nat:8> \times <var:n> \land <var:U2> = <var:n> ^ <nat:2> \land <var:U0> = <nat:9> \} $ into the condition $ \{ <var:H> = <var:n> \land <var:U1> = <nat:8> \times <var:n> \land <var:U2> = <nat:1> \times <var:n> ^ <nat:2> \land <var:U0> = <nat:9> \} $ . This is deduced with the assignment scheme found in Hoare techniques . Stepping through , we have the binding code yielding $ <var:U2$ into $ <var:A>$ . This command moves the condition $ \{ <var:H> = <var:n> \land <var:U1> = <nat:8> \times <var:n> \land <var:U2> = <nat:1> \times <var:n> ^ <nat:2> \land <var:U0> = <nat:9> \} $ into $ \{ <var:H> = <var:n> \land <var:U1> = <nat:8> \times <var:n> \land <var:U0> = <nat:9> \land <var:A> = <nat:1> \times <var:n> ^ <nat:2> \} $ . Now , the code \verb | <var:A> := <var:A> + <var:U1> | . This line forwards $ \{ <var:H> = <var:n> \land <var:U1> = <nat:8> \times <var:n> \land <var:U0> = <nat:9> \land <var:A> = <nat:1> \times <var:n> ^ <nat:2> \} $ as the postcondition $ \{ <var:H> = <var:n> \land <var:U0> = <nat:9> \land <var:A> = <nat:1> \times <var:n> ^ <nat:2> + <nat:8> \times <var:n> \} $ . Advancing on , we see the variable update code binding $ <var:A> + <var:U0$ into $ <var:A>$ . This redefines $ \{ <var:H> = <var:n> \land <var:U0> = <nat:9> \land <var:A> = <nat:1> \times <var:n> ^ <nat:2> + <nat:8> \times <var:n> \} $ as $ \{ <var:H> = <var:n> \land <var:A> = <nat:1> \times <var:n> ^ <nat:2> + <nat:8> \times <var:n> + <nat:9> \} $ . This is shown through the assignment law found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:H> = <var:n> }} <var:U1> := <var:H> ; <var:U2> := <var:U1> * <var:H> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:8> ; <var:U2> := <var:U2> * <nat:1> ; <var:A> := <var:U2> <var:A> := <var:A> + <var:U1> <var:A> := <var:A> + <var:U0> {{ <var:A> = <nat:1> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:U1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:U1> = <var:n> /\ <var:U2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:U1> = <var:n> /\ <var:U2> = <var:n> ^ <nat:2> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:U1> = <nat:8> * <var:n> /\ <var:U2> = <var:n> ^ <nat:2> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:U1> = <nat:8> * <var:n> /\ <var:U2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:U1> = <nat:8> * <var:n> /\ <var:U0> = <nat:9> /\ <var:A> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:U0> = <nat:9> /\ <var:A> = <nat:1> * <var:n> ^ <nat:2> + <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:A> = <nat:1> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 