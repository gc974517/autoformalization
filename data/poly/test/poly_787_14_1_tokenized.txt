\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W1> := <var:f> ; <var:W2> := <var:W1> * <var:f> ; <var:W3> := <var:W2> * <var:f> ; <var:W4> := <var:W3> * <var:f> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:4> ; <var:W2> := <var:W2> * <nat:4> ; <var:W3> := <var:W3> * <nat:4> ; <var:W4> := <var:W4> * <nat:6> ; <var:V> := <var:W4> <var:V> := <var:V> + <var:W3> <var:V> := <var:V> + <var:W2> <var:V> := <var:V> + <var:W1> <var:V> := <var:V> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Given it to be that $ <var:f> = <var:n> $ ahead of running our code segment , it must be that we see $ <var:V> = <nat:6> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:n> \} \\ <var:W1> := <var:f> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <var:n> \} \\ <var:W2> := <var:W1> * <var:f> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <var:n> \land <var:W2> = <var:n> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:f> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <var:n> \land <var:W2> = <var:n> ^ <nat:2> \land <var:W3> = <var:n> ^ <nat:3> \} \\ <var:W4> := <var:W3> * <var:f> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <var:n> \land <var:W2> = <var:n> ^ <nat:2> \land <var:W3> = <var:n> ^ <nat:3> \land <var:W4> = <var:n> ^ <nat:4> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <var:n> \land <var:W2> = <var:n> ^ <nat:2> \land <var:W3> = <var:n> ^ <nat:3> \land <var:W4> = <var:n> ^ <nat:4> \land <var:W0> = <nat:4> \} \\ <var:W1> := <var:W1> * <nat:4> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <nat:4> \times <var:n> \land <var:W2> = <var:n> ^ <nat:2> \land <var:W3> = <var:n> ^ <nat:3> \land <var:W4> = <var:n> ^ <nat:4> \land <var:W0> = <nat:4> \} \\ <var:W2> := <var:W2> * <nat:4> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <nat:4> \times <var:n> \land <var:W2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:W3> = <var:n> ^ <nat:3> \land <var:W4> = <var:n> ^ <nat:4> \land <var:W0> = <nat:4> \} \\ <var:W3> := <var:W3> * <nat:4> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <nat:4> \times <var:n> \land <var:W2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:W3> = <nat:4> \times <var:n> ^ <nat:3> \land <var:W4> = <var:n> ^ <nat:4> \land <var:W0> = <nat:4> \} \\ <var:W4> := <var:W4> * <nat:6> ; \\ \{ <var:f> = <var:n> \land <var:W1> = <nat:4> \times <var:n> \land <var:W2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:W3> = <nat:4> \times <var:n> ^ <nat:3> \land <var:W4> = <nat:6> \times <var:n> ^ <nat:4> \land <var:W0> = <nat:4> \} \\ <var:V> := <var:W4> \\ \{ <var:f> = <var:n> \land <var:W1> = <nat:4> \times <var:n> \land <var:W2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:W3> = <nat:4> \times <var:n> ^ <nat:3> \land <var:W0> = <nat:4> \land <var:V> = <nat:6> \times <var:n> ^ <nat:4> \} \\ <var:V> := <var:V> + <var:W3> \\ \{ <var:f> = <var:n> \land <var:W1> = <nat:4> \times <var:n> \land <var:W2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:W0> = <nat:4> \land <var:V> = <nat:6> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:W2> \\ \{ <var:f> = <var:n> \land <var:W1> = <nat:4> \times <var:n> \land <var:W0> = <nat:4> \land <var:V> = <nat:6> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:W1> \\ \{ <var:f> = <var:n> \land <var:W0> = <nat:4> \land <var:V> = <nat:6> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> \} \\ <var:V> := <var:V> + <var:W0> \\ \{ <var:f> = <var:n> \land <var:V> = <nat:6> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Definition <def:poly> := <var:W1> := <var:f> ; <var:W2> := <var:W1> * <var:f> ; <var:W3> := <var:W2> * <var:f> ; <var:W4> := <var:W3> * <var:f> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:4> ; <var:W2> := <var:W2> * <nat:4> ; <var:W3> := <var:W3> * <nat:4> ; <var:W4> := <var:W4> * <nat:6> ; <var:V> := <var:W4> <var:V> := <var:V> + <var:W3> <var:V> := <var:V> + <var:W2> <var:V> := <var:V> + <var:W1> <var:V> := <var:V> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:f> = <var:n> }} <def:poly> {{ <var:V> = <nat:6> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <var:n> /\ <var:W2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <var:n> /\ <var:W2> = <var:n> ^ <nat:2> /\ <var:W3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <var:n> /\ <var:W2> = <var:n> ^ <nat:2> /\ <var:W3> = <var:n> ^ <nat:3> /\ <var:W4> = <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <var:n> /\ <var:W2> = <var:n> ^ <nat:2> /\ <var:W3> = <var:n> ^ <nat:3> /\ <var:W4> = <var:n> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <nat:4> * <var:n> /\ <var:W2> = <var:n> ^ <nat:2> /\ <var:W3> = <var:n> ^ <nat:3> /\ <var:W4> = <var:n> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <nat:4> * <var:n> /\ <var:W2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:W3> = <var:n> ^ <nat:3> /\ <var:W4> = <var:n> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <nat:4> * <var:n> /\ <var:W2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:W3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:W4> = <var:n> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <nat:4> * <var:n> /\ <var:W2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:W3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:W4> = <nat:6> * <var:n> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <nat:4> * <var:n> /\ <var:W2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:W3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:W0> = <nat:4> /\ <var:V> = <nat:6> * <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <nat:4> * <var:n> /\ <var:W2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:W0> = <nat:4> /\ <var:V> = <nat:6> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W1> = <nat:4> * <var:n> /\ <var:W0> = <nat:4> /\ <var:V> = <nat:6> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:W0> = <nat:4> /\ <var:V> = <nat:6> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:V> = <nat:6> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 