\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:q> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:q> ; <var:c2> := <var:c2> * <var:q> ; <var:u> := <var:c2> ; <var:u> := <var:u> + <var:c1> ; <var:u> := <var:u> + <var:c0> \end{verbatim} Allow that we have $ <var:q> = <var:r> $ ( for any natural numbers $ <var:r> $ ) before the evaluation of the code , it holds that we see $ <var:u> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the list of commands is shown through usual Hoare logic . Going forward , we see \begin{verbatim} { <var:q> = <var:r> } <var:c0> := <nat:2> { <var:q> = <var:r> \land <var:c0> = <nat:2> } \end{verbatim} This is ensured by the binding rule from standard Hoare logic . Shifting focus toward the upcoming bits of codeseen in the code , we have \begin{verbatim} { <var:q> = <var:r> } <var:c0> := <nat:2> { <var:q> = <var:r> \land <var:c0> = <nat:2> } { <var:q> = <var:r> \land <var:c0> = <nat:2> } <var:c1> := <nat:4> { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> } { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> } <var:c1> := <var:c1> * <var:q> { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> } { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> } <var:c2> := <nat:3> { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> \land <var:c2> = <nat:3> } { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> \land <var:c2> = <nat:3> } <var:c2> := <var:c2> * <var:q> { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> \land <var:c2> = <nat:3> \cdot <var:r> } { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> \land <var:c2> = <nat:3> \cdot <var:r> } <var:c2> := <var:c2> * <var:q> { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> \land <var:c2> = <nat:3> \cdot <var:r> ^ <nat:2> } { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> \land <var:c2> = <nat:3> \cdot <var:r> ^ <nat:2> } <var:u> := <var:c2> { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> \land <var:u> = <nat:3> \cdot <var:r> ^ <nat:2> } { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:c1> = <nat:4> \cdot <var:r> \land <var:u> = <nat:3> \cdot <var:r> ^ <nat:2> } <var:u> := <var:u> + <var:c1> { <var:q> = <var:r> \land <var:c0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:q> = <var:r> }} <var:c0> := <nat:2> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:q> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:q> ; <var:c2> := <var:c2> * <var:q> ; <var:u> := <var:c2> ; <var:u> := <var:u> + <var:c1> ; <var:u> := <var:u> + <var:c0> {{ <var:u> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:4> * <var:r> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:4> * <var:r> /\ <var:c2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:4> * <var:r> /\ <var:c2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:4> * <var:r> /\ <var:u> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:c0> = <nat:2> /\ <var:u> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:u> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 