\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:f> ; <var:Y2> := <nat:8> ; <var:Y2> := <var:Y2> * <var:f> ; <var:Y2> := <var:Y2> * <var:f> ; <var:x> := <var:Y2> ; <var:x> := <var:x> + <var:Y1> ; <var:x> := <var:x> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Assuming ( given some integers $ <var:L> $ ) it to hold that $ <var:f> = <var:L> $ prior to the execution of the list of instructions then we have $ <var:x> = <nat:8> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> $ when program executes . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is done with Hoare logic . Focusing on the upcoming bit of code contained in our series of instructions , the environment update command assigning $ <nat:2> $ as $ <var:Y0>$ . This advances the precondition $ \{ <var:f> = <var:L> \} $ into $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \} $ . This is sound using the assignment inference rule given by usual Hoare reasoning . Moving forward to the following line contained in our program , we have the assignment code \verb | <var:Y1> := <nat:2> ; | . This transfers the condition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \} $ to the postcondition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \} $ . This is deduced with the assignment scheme given by standard Hoare logic . Advancing to the upcoming piece of code contained in the set of instructions , the variable assignmet code \verb | <var:Y1> := <var:Y1> * <var:f> ; | . This transfers the precondition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \} $ to the postcondition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \} $ . This is ensured through the assignment rule defined by typical Hoare techniques . Moving on to the next step , we see the variable binding statement letting $ <nat:8> $ as $ <var:Y2>$ . This code takes the precondition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \} $ into the condition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \land <var:Y2> = <nat:8> \} $ . Moving forward , the assignment statement letting $ <var:Y2> * <var:f> $ as $ <var:Y2>$ . This moves the condition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \land <var:Y2> = <nat:8> \} $ to the condition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \land <var:Y2> = <nat:8> \times <var:L> \} $ . This is guaranteed using the assignment law found in usual Hoare reasoning . Further , we see the variable binding command yielding $ <var:Y2> * <var:f> $ as $ <var:Y2>$ . This command redefines the precondition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \land <var:Y2> = <nat:8> \times <var:L> \} $ as the condition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \land <var:Y2> = <nat:8> \times <var:L> ^ <nat:2> \} $ . This is sound through the assignment law found in typical Hoare logic . Immediately after , the binding command \verb | <var:x> := <var:Y2> ; | . This code advances $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \land <var:Y2> = <nat:8> \times <var:L> ^ <nat:2> \} $ into $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \land <var:x> = <nat:8> \times <var:L> ^ <nat:2> \} $ . Further , we have the variable update code assigning $ <var:x> + <var:Y1> $ toward $ <var:x>$ . This code moves the precondition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:2> \times <var:L> \land <var:x> = <nat:8> \times <var:L> ^ <nat:2> \} $ to $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:x> = <nat:8> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> \} $ . This is sound through the assignment rule found in typical Hoare reasoning . Further , we have the variable assignmet line yielding $ <var:x> + <var:Y0$ as $ <var:x>$ . This statement takes the precondition $ \{ <var:f> = <var:L> \land <var:Y0> = <nat:2> \land <var:x> = <nat:8> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> \} $ as $ \{ <var:f> = <var:L> \land <var:x> = <nat:8> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:f> ; <var:Y2> := <nat:8> ; <var:Y2> := <var:Y2> * <var:f> ; <var:Y2> := <var:Y2> * <var:f> ; <var:x> := <var:Y2> ; <var:x> := <var:x> + <var:Y1> ; <var:x> := <var:x> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:f> = <var:L> }} <def:poly> {{ <var:x> = <nat:8> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:L> /\ <var:Y2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:L> /\ <var:Y2> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:L> /\ <var:Y2> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:2> * <var:L> /\ <var:x> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Y0> = <nat:2> /\ <var:x> = <nat:8> * <var:L> ^ <nat:2> + <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:x> = <nat:8> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 