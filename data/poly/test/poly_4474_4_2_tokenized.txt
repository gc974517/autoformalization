\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <nat:1> + <var:W> * <var:B> ; <var:W> := <nat:4> + <var:W> * <var:B> ; <var:W> := <nat:2> + <var:W> * <var:B> \end{verbatim} Allowing it to hold that $ <var:B> = <var:l> $ before running our set of instructions , it must be that $ <var:W> = <nat:4> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:2> $ . \end{theorem} \begin{proof} Observe the below decorated list of commands . \begin{eqnarray} \{ <var:B> = <var:l> \} \\ <var:W> := <nat:4> ; \\ \{ <var:B> = <var:l> \land <var:W> = <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:B> ; \\ \{ <var:B> = <var:l> \land <var:W> = <nat:4> * <var:l> + <nat:1> \} \\ <var:W> := <nat:4> + <var:W> * <var:B> ; \\ \{ <var:B> = <var:l> \land <var:W> = <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> \} \\ <var:W> := <nat:2> + <var:W> * <var:B> \\ \{ <var:B> = <var:l> \land <var:W> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> \} \end{eqnarray} Using usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:B> = <var:l> }} <var:W> := <nat:4> ; <var:W> := <nat:1> + <var:W> * <var:B> ; <var:W> := <nat:4> + <var:W> * <var:B> ; <var:W> := <nat:2> + <var:W> * <var:B> {{ <var:W> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:W> = <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:W> = <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:W> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 