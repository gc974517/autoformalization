\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:8> ; <var:s> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Allow $ <var:Q> = <var:Z> $ , given every $ <var:Z> \in \mathbb{N} $ , before executing this set of commands , then we see $ <var:s> = <nat:8> $ . \end{theorem} \begin{proof} The proof of the series of instructions is shown by the below decorated code . \begin{eqnarray} \{ <var:Q> = <var:Z> \} \\ <var:Y0> := <nat:8> ; \\ \{ <var:Q> = <var:Z> \land <var:Y0> = <nat:8> \} \\ <var:s> := <var:Y0> \\ \{ <var:Q> = <var:Z> \land <var:s> = <nat:8> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:8> ; <var:s> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Q> = <var:Z> }} <def:poly> {{ <var:s> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:s> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 