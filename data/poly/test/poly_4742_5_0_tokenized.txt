\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:9> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:a> ; <var:D> := <var:A1> ; <var:D> := <var:D> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Assuming that $ <var:a> = <var:e> $ ahead of interpreting this code then $ <var:D> = <nat:6> * <var:e> + <nat:9> $ after segment of code finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this code is clear with typical Hoare techniques . Immediately following , \verb | { <var:a> = <var:e> } <var:A0> := <nat:9> { <var:a> = <var:e> \land <var:A0> = <nat:9> } | , \verb | { <var:a> = <var:e> \land <var:A0> = <nat:9> } <var:A1> := <nat:6> { <var:a> = <var:e> \land <var:A0> = <nat:9> \land <var:A1> = <nat:6> } | and \verb | { <var:a> = <var:e> \land <var:A0> = <nat:9> \land <var:A1> = <nat:6> } <var:A1> := <var:A1> * <var:a> { <var:a> = <var:e> \land <var:A0> = <nat:9> \land <var:A1> = <nat:6> \times <var:e> } | . Advancing to the proceeding line contained in the code , we see \verb | { <var:a> = <var:e> } <var:A0> := <nat:9> { <var:a> = <var:e> \land <var:A0> = <nat:9> } | . This is deduced using the assignment scheme in Hoare logic . Moving on to the next step , we see \verb | { <var:a> = <var:e> } <var:A0> := <nat:9> { <var:a> = <var:e> \land <var:A0> = <nat:9> } | . This is rigorously given using the inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:9> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:a> ; <var:D> := <var:A1> ; <var:D> := <var:D> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:a> = <var:e> }} <def:poly> {{ <var:D> = <nat:6> * <var:e> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:A0> = <nat:9> /\ <var:D> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:D> = <nat:6> * <var:e> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 