\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:9> ; <var:T> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> . Assume that we have $ <var:h> = <var:x> $ before interpreting the list of commands , then we have $ <var:T> = <nat:9> $ when program has terminated . \end{theorem} \begin{proof} The application of typical Hoare logic returns : \begin{eqnarray} \{ <var:h> = <var:x> \} \\ <var:H0> := <nat:9> ; \\ \{ <var:h> = <var:x> \land <var:H0> = <nat:9> \} \\ <var:T> := <var:H0> \\ \{ <var:h> = <var:x> \land <var:T> = <nat:9> \} \end{eqnarray} Considering the above , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:9> ; <var:T> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:h> = <var:x> }} <def:poly> {{ <var:T> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:T> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 