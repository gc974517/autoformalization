\begin{document} \begin{theorem} We define a set of instructions as follows \begin{verbatim} <var:Z1> := <var:X> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Q> := <var:Z1> <var:Q> := <var:Q> + <var:Z0> \end{verbatim} Assuming it to be that $ <var:X> = <var:o> $ ahead of evaluating our series of instructions , it holds that $ <var:Q> = <nat:2> \times <var:o> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare logic produces : \begin{eqnarray} \{ <var:X> = <var:o> \} \\ <var:Z1> := <var:X> ; \\ \{ <var:X> = <var:o> \land <var:Z1> = <var:o> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:X> = <var:o> \land <var:Z1> = <var:o> \land <var:Z0> = <nat:4> \} \\ <var:Z1> := <var:Z1> * <nat:2> ; \\ \{ <var:X> = <var:o> \land <var:Z1> = <nat:2> * <var:o> \land <var:Z0> = <nat:4> \} \\ <var:Q> := <var:Z1> \\ \{ <var:X> = <var:o> \land <var:Z0> = <nat:4> \land <var:Q> = <nat:2> * <var:o> \} \\ <var:Q> := <var:Q> + <var:Z0> \\ \{ <var:X> = <var:o> \land <var:Q> = <nat:2> * <var:o> + <nat:4> \} \end{eqnarray} Hence , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <var:Z1> := <var:X> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Q> := <var:Z1> <var:Q> := <var:Q> + <var:Z0> {{ <var:Q> = <nat:2> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Z1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Z1> = <var:o> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Z1> = <nat:2> * <var:o> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Z0> = <nat:4> /\ <var:Q> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Q> = <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 