\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:4> ; <var:d2> := <nat:1> ; <var:d2> := <var:d2> * <var:M> ; <var:d2> := <var:d2> * <var:M> ; <var:d3> := <nat:2> ; <var:d3> := <var:d3> * <var:M> ; <var:d3> := <var:d3> * <var:M> ; <var:d3> := <var:d3> * <var:M> ; <var:N> := <var:d3> ; <var:N> := <var:N> + <var:d2> ; <var:N> := <var:N> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Assuming it to be that $ <var:M> = <var:q> $ --- taking positive numbers $ <var:q> $ --- ahead of running the set of commands it holds that we have $ <var:N> = <nat:2> \cdot <var:q> ^ <nat:3> + <nat:1> \cdot <var:q> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning results in : \begin{eqnarray} \{ <var:M> = <var:q> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \} \\ <var:d2> := <nat:1> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:d2> = <nat:1> \} \\ <var:d2> := <var:d2> * <var:M> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:d2> = <nat:1> \times <var:q> \} \\ <var:d2> := <var:d2> * <var:M> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:d2> = <nat:1> \times <var:q> ^ <nat:2> \} \\ <var:d3> := <nat:2> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:d2> = <nat:1> \times <var:q> ^ <nat:2> \land <var:d3> = <nat:2> \} \\ <var:d3> := <var:d3> * <var:M> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:d2> = <nat:1> \times <var:q> ^ <nat:2> \land <var:d3> = <nat:2> \times <var:q> \} \\ <var:d3> := <var:d3> * <var:M> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:d2> = <nat:1> \times <var:q> ^ <nat:2> \land <var:d3> = <nat:2> \times <var:q> ^ <nat:2> \} \\ <var:d3> := <var:d3> * <var:M> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:d2> = <nat:1> \times <var:q> ^ <nat:2> \land <var:d3> = <nat:2> \times <var:q> ^ <nat:3> \} \\ <var:N> := <var:d3> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:d2> = <nat:1> \times <var:q> ^ <nat:2> \land <var:N> = <nat:2> \times <var:q> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:d2> ; \\ \{ <var:M> = <var:q> \land <var:d0> = <nat:4> \land <var:N> = <nat:2> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:d0> \\ \{ <var:M> = <var:q> \land <var:N> = <nat:2> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> ^ <nat:2> + <nat:4> \} \end{eqnarray} Given the above , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d2> := <nat:1> ; <var:d2> := <var:d2> * <var:M> ; <var:d2> := <var:d2> * <var:M> ; <var:d3> := <nat:2> ; <var:d3> := <var:d3> * <var:M> ; <var:d3> := <var:d3> * <var:M> ; <var:d3> := <var:d3> * <var:M> ; <var:N> := <var:d3> ; <var:N> := <var:N> + <var:d2> ; <var:N> := <var:N> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:M> = <var:q> }} <def:poly> {{ <var:N> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:d3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:d3> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:d3> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:d3> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:N> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:d0> = <nat:4> /\ <var:N> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:N> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 