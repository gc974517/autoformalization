\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:8> ; <var:k2> := <var:k2> * <nat:5> ; <var:y> := <var:k2> <var:y> := <var:y> + <var:k1> <var:y> := <var:y> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- for every positive numbers $ <var:j> $ --- $ <var:n> = <var:j> $ before evaluating our segment of code , it follows that $ <var:y> = <nat:5> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> + <nat:4> $ after code is done . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions is accomplished through typical Hoare techniques . Taking another step toward the upcoming line found in the code segment , we have the variable assignmet line defining $ <var:n> $ to $ <var:k1>$ . This transfers $ \{ <var:n> = <var:j> \} $ into the condition $ \{ <var:n> = <var:j> \land <var:k1> = <var:j> \} $ . Jumping to the following statement in our list of commands , we see the binding line defining $ <var:k1> * <var:n> $ as $ <var:k2>$ . This moves the precondition $ \{ <var:n> = <var:j> \land <var:k1> = <var:j> \} $ to the condition $ \{ <var:n> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \} $ . Paying attention to the upcoming line found in our series of commands , we have the binding line \verb | <var:k0> := <nat:4> ; | . This advances the precondition $ \{ <var:n> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \} $ into the condition $ \{ <var:n> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k0> = <nat:4> \} $ . This is shown using the assignment scheme from usual Hoare logic . Next , the variable update statement \verb | <var:k1> := <var:k1> * <nat:8> ; | . This takes $ \{ <var:n> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k0> = <nat:4> \} $ into the condition $ \{ <var:n> = <var:j> \land <var:k1> = <nat:8> * <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k0> = <nat:4> \} $ . Stepping through , we have the variable assignmet code defining $ <var:k2> * <nat:5> $ toward $ <var:k2>$ . This statement redefines the condition $ \{ <var:n> = <var:j> \land <var:k1> = <nat:8> * <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k0> = <nat:4> \} $ toward the condition $ \{ <var:n> = <var:j> \land <var:k1> = <nat:8> * <var:j> \land <var:k2> = <nat:5> * <var:j> ^ <nat:2> \land <var:k0> = <nat:4> \} $ . Moving onward , the variable assignmet statement \verb | <var:y> := <var:k2> | . This advances the precondition $ \{ <var:n> = <var:j> \land <var:k1> = <nat:8> * <var:j> \land <var:k2> = <nat:5> * <var:j> ^ <nat:2> \land <var:k0> = <nat:4> \} $ as the postcondition $ \{ <var:n> = <var:j> \land <var:k1> = <nat:8> * <var:j> \land <var:k0> = <nat:4> \land <var:y> = <nat:5> * <var:j> ^ <nat:2> \} $ . This is rigorously given by the assignment inference rule from Hoare reasoning . Taking another step toward the subsequent bit of code found in our set of commands , the code \verb | <var:y> := <var:y> + <var:k1> | . This command advances the precondition $ \{ <var:n> = <var:j> \land <var:k1> = <nat:8> * <var:j> \land <var:k0> = <nat:4> \land <var:y> = <nat:5> * <var:j> ^ <nat:2> \} $ into $ \{ <var:n> = <var:j> \land <var:k0> = <nat:4> \land <var:y> = <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> \} $ . Advancing to the next line of code seen in the set of instructions , we have the variable binding line assigning $ <var:y> + <var:k0$ into $ <var:y>$ . This moves the precondition $ \{ <var:n> = <var:j> \land <var:k0> = <nat:4> \land <var:y> = <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> \} $ into the condition $ \{ <var:n> = <var:j> \land <var:y> = <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:4> \} $ . This is guaranteed with the assignment inference rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <def:poly> := <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:8> ; <var:k2> := <var:k2> * <nat:5> ; <var:y> := <var:k2> <var:y> := <var:y> + <var:k1> <var:y> := <var:y> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:n> = <var:j> }} <def:poly> {{ <var:y> = <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:k1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:k1> = <var:j> /\ <var:k2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:k1> = <var:j> /\ <var:k2> = <var:j> ^ <nat:2> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:k1> = <nat:8> * <var:j> /\ <var:k2> = <var:j> ^ <nat:2> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:k1> = <nat:8> * <var:j> /\ <var:k2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:k1> = <nat:8> * <var:j> /\ <var:k0> = <nat:4> /\ <var:y> = <nat:5> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:k0> = <nat:4> /\ <var:y> = <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:y> = <nat:5> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 