\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:8> ; <var:i1> := <nat:7> ; <var:i1> := <var:i1> * <var:h> ; <var:U> := <var:i1> ; <var:U> := <var:U> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:h> = <var:l> $ prior to executing this program it holds that we see $ <var:U> = <nat:7> \cdot <var:l> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the program is accomplished with standard Hoare techniques . Looking at the proceeding line of code seen in our segment of code , the line assigning $ <nat:8> $ into $ <var:i0>$ . This code advances the precondition $ \{ <var:h> = <var:l> \} $ to $ \{ <var:h> = <var:l> \land <var:i0> = <nat:8> \} $ . Jumping to the upcoming piece of code contained in the set of instructions , we see the variable update code assigning $ <nat:7> $ to $ <var:i1>$ . This command transfers $ \{ <var:h> = <var:l> \land <var:i0> = <nat:8> \} $ to the postcondition $ \{ <var:h> = <var:l> \land <var:i0> = <nat:8> \land <var:i1> = <nat:7> \} $ . Taking a look at the following statement seen in our series of instructions , the binding statement \verb | <var:i1> := <var:i1> * <var:h> ; | . This forwards the precondition $ \{ <var:h> = <var:l> \land <var:i0> = <nat:8> \land <var:i1> = <nat:7> \} $ toward the postcondition $ \{ <var:h> = <var:l> \land <var:i0> = <nat:8> \land <var:i1> = <nat:7> \cdot <var:l> \} $ . This is shown to be logically sound through the assignment inference rule in usual Hoare logic . Looking at the next statement seen in our program , we see the environment update command letting $ <var:i1> $ into $ <var:U>$ . This forwards the precondition $ \{ <var:h> = <var:l> \land <var:i0> = <nat:8> \land <var:i1> = <nat:7> \cdot <var:l> \} $ into $ \{ <var:h> = <var:l> \land <var:i0> = <nat:8> \land <var:U> = <nat:7> \cdot <var:l> \} $ . Advancing to the subsequent command in the segment of code , we have the binding code \verb | <var:U> := <var:U> + <var:i0> | . This forwards the precondition $ \{ <var:h> = <var:l> \land <var:i0> = <nat:8> \land <var:U> = <nat:7> \cdot <var:l> \} $ to $ \{ <var:h> = <var:l> \land <var:U> = <nat:7> \cdot <var:l> + <nat:8> \} $ . This is given by the assignment inference rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:8> ; <var:i1> := <nat:7> ; <var:i1> := <var:i1> * <var:h> ; <var:U> := <var:i1> ; <var:U> := <var:U> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:h> = <var:l> }} <def:poly> {{ <var:U> = <nat:7> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:i0> = <nat:8> /\ <var:U> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:l> /\ <var:U> = <nat:7> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 