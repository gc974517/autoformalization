\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:V> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:V> ; <var:o2> := <var:o2> * <var:V> ; <var:E> := <var:o2> ; <var:E> := <var:E> + <var:o1> ; <var:E> := <var:E> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:V> = <var:U> $ ahead of running our series of commands , it holds that we see $ <var:E> = <nat:5> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment is accomplished through standard Hoare logic . Moving on to the next step , the variable binding statement giving $ <nat:3> $ as $ <var:o0>$ . This statement forwards $ \{ <var:V> = <var:U> \} $ toward $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \} $ . This is given through the assignment inference rule in Hoare techniques . Advancing , we see the environment update line \verb | <var:o1> := <nat:1> ; | . This command forwards the precondition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \} $ as the postcondition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \} $ . This is ensured with the assignment inference rule in standard Hoare reasoning . Advancing to the next step , the binding statement \verb | <var:o1> := <var:o1> * <var:V> ; | . This moves the precondition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \} $ as $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \} $ . This is guaranteed by the assignment scheme given in typical Hoare logic . Next , we see the binding line \verb | <var:o2> := <nat:5> ; | . This code transfers the precondition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \} $ to the postcondition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \land <var:o2> = <nat:5> \} $ . Paying attention to the proceeding step found in our program , we see the code giving $ <var:o2> * <var:V> $ as $ <var:o2>$ . This moves the condition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \land <var:o2> = <nat:5> \} $ into the condition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \land <var:o2> = <nat:5> * <var:U> \} $ . This is guaranteed with the assignment rule from standard Hoare techniques . Moving forward to the proceeding line of code contained in our segment of code , the assignment command \verb | <var:o2> := <var:o2> * <var:V> ; | . This code redefines the precondition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \land <var:o2> = <nat:5> * <var:U> \} $ to the condition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \land <var:o2> = <nat:5> * <var:U> ^ <nat:2> \} $ . Taking another step toward the proceeding statement found in the set of instructions , we have the variable binding statement letting $ <var:o2> $ as $ <var:E>$ . This forwards the precondition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \land <var:o2> = <nat:5> * <var:U> ^ <nat:2> \} $ to the condition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \land <var:E> = <nat:5> * <var:U> ^ <nat:2> \} $ . This is sound through the assignment law of usual Hoare reasoning . Moving on to the upcoming step contained in the list of commands , we see the binding line \verb | <var:E> := <var:E> + <var:o1> ; | . This code forwards $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> * <var:U> \land <var:E> = <nat:5> * <var:U> ^ <nat:2> \} $ into the condition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:E> = <nat:5> * <var:U> ^ <nat:2> + <nat:1> * <var:U> \} $ . This is ensured using the assignment rule given in usual Hoare reasoning . Moving forward to the next step , we see the variable update code assigning $ <var:E> + <var:o0$ to $ <var:E>$ . This command forwards the precondition $ \{ <var:V> = <var:U> \land <var:o0> = <nat:3> \land <var:E> = <nat:5> * <var:U> ^ <nat:2> + <nat:1> * <var:U> \} $ as the postcondition $ \{ <var:V> = <var:U> \land <var:E> = <nat:5> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:V> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:V> ; <var:o2> := <var:o2> * <var:V> ; <var:E> := <var:o2> ; <var:E> := <var:E> + <var:o1> ; <var:E> := <var:E> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:V> = <var:U> }} <def:poly> {{ <var:E> = <nat:5> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:U> /\ <var:o2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:U> /\ <var:E> = <nat:5> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:o0> = <nat:3> /\ <var:E> = <nat:5> * <var:U> ^ <nat:2> + <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:E> = <nat:5> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 