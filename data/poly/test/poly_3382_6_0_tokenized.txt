\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:X0> := <nat:1> ; <var:X2> := <nat:1> ; <var:X2> := <var:X2> * <var:K> ; <var:X2> := <var:X2> * <var:K> ; <var:g> := <var:X2> ; <var:g> := <var:g> + <var:X0> \end{verbatim} Allow it to be that $ <var:K> = <var:G> $ ( with some integers $ <var:G> $ ) ahead of evaluating this series of commands , then we see $ <var:g> = <nat:1> \cdot <var:G> ^ <nat:2> + <nat:1> $ after series of commands exits . \end{theorem} \begin{proof} Note that the following decorated list of commands . \begin{eqnarray} \{ <var:K> = <var:G> \} \\ <var:X0> := <nat:1> ; \\ \{ <var:K> = <var:G> \land <var:X0> = <nat:1> \} \\ <var:X2> := <nat:1> ; \\ \{ <var:K> = <var:G> \land <var:X0> = <nat:1> \land <var:X2> = <nat:1> \} \\ <var:X2> := <var:X2> * <var:K> ; \\ \{ <var:K> = <var:G> \land <var:X0> = <nat:1> \land <var:X2> = <nat:1> \times <var:G> \} \\ <var:X2> := <var:X2> * <var:K> ; \\ \{ <var:K> = <var:G> \land <var:X0> = <nat:1> \land <var:X2> = <nat:1> \times <var:G> ^ <nat:2> \} \end{eqnarray} Furthering evaluating our code yields : \begin{eqnarray} <var:g> := <var:X2> ; \\ \{ <var:K> = <var:G> \land <var:X0> = <nat:1> \land <var:g> = <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:X0> \\ \{ <var:K> = <var:G> \land <var:g> = <nat:1> \times <var:G> ^ <nat:2> + <nat:1> \} \end{eqnarray} The application of typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:K> = <var:G> }} <var:X0> := <nat:1> ; <var:X2> := <nat:1> ; <var:X2> := <var:X2> * <var:K> ; <var:X2> := <var:X2> * <var:K> ; <var:g> := <var:X2> ; <var:g> := <var:g> + <var:X0> {{ <var:g> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:X0> = <nat:1> /\ <var:X2> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:X0> = <nat:1> /\ <var:g> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:g> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 