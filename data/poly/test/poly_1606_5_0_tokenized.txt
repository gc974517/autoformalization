\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:d> ; <var:r> := <var:F1> ; <var:r> := <var:r> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Allowing , taking integers $ <var:N> $ , it to be that $ <var:d> = <var:N> $ prior to the execution of this set of instructions , it must be that we see $ <var:r> = <nat:4> * <var:N> + <nat:2> $ once set of commands has terminated . \end{theorem} \begin{proof} The argument for this set of commands can be seen using Hoare reasoning . Considering the next commands in the set of instructions , we have \begin{eqnarray} \{ <var:d> = <var:N> \} \, <var:F0> := <nat:2> \, \{ <var:d> = <var:N> \land <var:F0> = <nat:2> \} \\ \{ <var:d> = <var:N> \land <var:F0> = <nat:2> \} \, <var:F1> := <nat:4> \, \{ <var:d> = <var:N> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> \} \end{eqnarray} Moving forward , we have \begin{eqnarray} \{ <var:d> = <var:N> \} \, <var:F0> := <nat:2> \, \{ <var:d> = <var:N> \land <var:F0> = <nat:2> \} \end{eqnarray} Stepping forward , \begin{eqnarray} \{ <var:d> = <var:N> \} \, <var:F0> := <nat:2> \, \{ <var:d> = <var:N> \land <var:F0> = <nat:2> \} \end{eqnarray} This is shown to be logically sound through the variable assignmet scheme given in typical Hoare reasoning . Honing in on the following step contained in our program , we see \begin{eqnarray} \{ <var:d> = <var:N> \} \, <var:F0> := <nat:2> \, \{ <var:d> = <var:N> \land <var:F0> = <nat:2> \} \end{eqnarray} This is sound through the scheme of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:2> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:d> ; <var:r> := <var:F1> ; <var:r> := <var:r> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:d> = <var:N> }} <def:poly> {{ <var:r> = <nat:4> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:F0> = <nat:2> /\ <var:r> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:r> = <nat:4> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 