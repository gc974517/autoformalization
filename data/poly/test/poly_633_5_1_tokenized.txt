\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as \begin{verbatim} <var:B1> := <var:q> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:9> ; <var:V> := <var:B1> <var:V> := <var:V> + <var:B0> \end{verbatim} Allowing , given some positive coefficients $ <var:Z> $ , that $ <var:q> = <var:Z> $ before evaluating this series of commands , it holds that we see $ <var:V> = <nat:9> \times <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:q> = <var:Z> \} \\ <var:B1> := <var:q> ; \\ \{ <var:q> = <var:Z> \land <var:B1> = <var:Z> \} \end{eqnarray} Allowing interpreting our set of commands gives : \begin{eqnarray} <var:B0> := <nat:7> ; \\ \{ <var:q> = <var:Z> \land <var:B1> = <var:Z> \land <var:B0> = <nat:7> \} \\ <var:B1> := <var:B1> * <nat:9> ; \\ \{ <var:q> = <var:Z> \land <var:B1> = <nat:9> * <var:Z> \land <var:B0> = <nat:7> \} \\ <var:V> := <var:B1> \\ \{ <var:q> = <var:Z> \land <var:B0> = <nat:7> \land <var:V> = <nat:9> * <var:Z> \} \\ <var:V> := <var:V> + <var:B0> \\ \{ <var:q> = <var:Z> \land <var:V> = <nat:9> * <var:Z> + <nat:7> \} \end{eqnarray} Considering the preceding argument , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:q> = <var:Z> }} <var:B1> := <var:q> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:9> ; <var:V> := <var:B1> <var:V> := <var:V> + <var:B0> {{ <var:V> = <nat:9> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:B1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:B1> = <var:Z> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:B1> = <nat:9> * <var:Z> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:B0> = <nat:7> /\ <var:V> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:V> = <nat:9> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 