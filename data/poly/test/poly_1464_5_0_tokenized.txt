\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:3> ; <var:U1> := <nat:9> ; <var:U1> := <var:U1> * <var:s> ; <var:c> := <var:U1> ; <var:c> := <var:c> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:s> = <var:a> $ ahead of interpreting the code it must be that we see $ <var:c> = <nat:9> \times <var:a> + <nat:3> $ after code segment has exited . \end{theorem} \begin{proof} Arguing the correctness of our code segment is shown with standard Hoare logic . Taking a look at the proceeding piece of code seen in our code , we see the binding statement \verb | <var:U0> := <nat:3> ; | . This moves the condition $ \{ <var:s> = <var:a> \} $ to $ \{ <var:s> = <var:a> \land <var:U0> = <nat:3> \} $ . This is sound through the assignment inference rule from usual Hoare techniques . Moving forward , we see the variable assignmet command \verb | <var:U1> := <nat:9> ; | . This code takes $ \{ <var:s> = <var:a> \land <var:U0> = <nat:3> \} $ toward $ \{ <var:s> = <var:a> \land <var:U0> = <nat:3> \land <var:U1> = <nat:9> \} $ . Advancing on , the variable assignmet statement \verb | <var:U1> := <var:U1> * <var:s> ; | . This takes the precondition $ \{ <var:s> = <var:a> \land <var:U0> = <nat:3> \land <var:U1> = <nat:9> \} $ to $ \{ <var:s> = <var:a> \land <var:U0> = <nat:3> \land <var:U1> = <nat:9> * <var:a> \} $ . Considering the proceeding bit of code seen in our series of instructions , the variable update code \verb | <var:c> := <var:U1> ; | . This command redefines the precondition $ \{ <var:s> = <var:a> \land <var:U0> = <nat:3> \land <var:U1> = <nat:9> * <var:a> \} $ to the postcondition $ \{ <var:s> = <var:a> \land <var:U0> = <nat:3> \land <var:c> = <nat:9> * <var:a> \} $ . This is known to be sound through the assignment law from Hoare reasoning . Now , we have the environment update code \verb | <var:c> := <var:c> + <var:U0> | . This statement transfers the condition $ \{ <var:s> = <var:a> \land <var:U0> = <nat:3> \land <var:c> = <nat:9> * <var:a> \} $ to $ \{ <var:s> = <var:a> \land <var:c> = <nat:9> * <var:a> + <nat:3> \} $ . This is known to be sound using the assignment scheme defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:3> ; <var:U1> := <nat:9> ; <var:U1> := <var:U1> * <var:s> ; <var:c> := <var:U1> ; <var:c> := <var:c> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:s> = <var:a> }} <def:poly> {{ <var:c> = <nat:9> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:U0> = <nat:3> /\ <var:c> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:c> = <nat:9> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 