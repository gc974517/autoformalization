\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:3> ; <var:M> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Allow that $ <var:d> = <var:e> $ ahead of interpreting the set of commands it must be that we see $ <var:M> = <nat:3> $ . \end{theorem} \begin{proof} The proof of this set of instructions is clear using typical Hoare techniques . Observing the next piece of code seen in the series of instructions , we have \begin{eqnarray} \{ <var:d> = <var:e> \} \, <var:W0> := <nat:3> \, \{ <var:d> = <var:e> \land <var:W0> = <nat:3> \} \end{eqnarray} Stepping through , \begin{eqnarray} \{ <var:d> = <var:e> \} \, <var:W0> := <nat:3> \, \{ <var:d> = <var:e> \land <var:W0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:3> ; <var:M> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:d> = <var:e> }} <def:poly> {{ <var:M> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:M> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 