\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:T> := <nat:3> ; <var:T> := <var:T> * <var:N> ; <var:T> := <nat:4> + <var:T> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:N> = <var:f> $ before running this segment of code it must be that we see $ <var:T> = <nat:3> * <var:f> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:N> = <var:f> \} \\ <var:T> := <nat:3> ; \\ \{ <var:N> = <var:f> \land <var:T> = <nat:3> \} \\ <var:T> := <var:T> * <var:N> ; \\ \{ <var:N> = <var:f> \land <var:T> = <nat:3> * <var:f> + \} \end{eqnarray} Allowing evaluating our series of instructions gives : \begin{eqnarray} <var:T> := <nat:4> + <var:T> * <var:N> \\ \{ <var:N> = <var:f> \land <var:T> = <nat:3> * <var:f> ^ <nat:2> + <nat:4> \} \end{eqnarray} Thus , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:T> := <nat:3> ; <var:T> := <var:T> * <var:N> ; <var:T> := <nat:4> + <var:T> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:N> = <var:f> }} <def:poly> {{ <var:T> = <nat:3> * <var:f> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:T> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:T> = <nat:3> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:T> = <nat:3> * <var:f> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 