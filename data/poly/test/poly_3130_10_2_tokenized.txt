\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:G> := <nat:1> ; <var:G> := <nat:1> + <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> ; <var:G> := <nat:1> + <var:G> * <var:L> ; <var:G> := <nat:2> + <var:G> * <var:L> ; <var:G> := <nat:2> + <var:G> * <var:L> ; <var:G> := <nat:1> + <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> ; <var:G> := <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> \end{verbatim} Assuming , with some positive coefficients $ <var:Q> $ , that $ <var:L> = <var:Q> $ prior to the execution of our list of instructions , it must be that $ <var:G> = <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare reasoning yields : \begin{eqnarray} \{ <var:L> = <var:Q> \} \\ <var:G> := <nat:1> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> + <nat:1> \} \\ <var:G> := <nat:4> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> \} \\ <var:G> := <nat:1> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> \} \\ <var:G> := <nat:2> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> \} \\ <var:G> := <nat:2> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> \} \\ <var:G> := <nat:1> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> \} \\ <var:G> := <nat:4> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> \} \\ <var:G> := <var:G> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + \} \\ <var:G> := <nat:4> + <var:G> * <var:L> \\ \{ <var:L> = <var:Q> \land <var:G> = <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> \} \end{eqnarray} Therefore , our segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:L> = <var:Q> }} <var:G> := <nat:1> ; <var:G> := <nat:1> + <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> ; <var:G> := <nat:1> + <var:G> * <var:L> ; <var:G> := <nat:2> + <var:G> * <var:L> ; <var:G> := <nat:2> + <var:G> * <var:L> ; <var:G> := <nat:1> + <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> ; <var:G> := <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> {{ <var:G> = <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:G> = <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 