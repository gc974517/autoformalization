\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:3> ; <var:S> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:t> = <var:u> $ prior to interpreting the series of instructions , then we see $ <var:S> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the list of commands is done with standard Hoare reasoning . Focusing on the following line of code contained in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:t> = <var:u> \} & <var:d0> := <nat:3> & \{ <var:t> = <var:u> \land <var:d0> = <nat:3> \} \end{tabular} This is rigorously given using the variable binding law given by standard Hoare reasoning . Looking at the proceeding line contained in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:t> = <var:u> \} & <var:d0> := <nat:3> & \{ <var:t> = <var:u> \land <var:d0> = <nat:3> \} \end{tabular} This is sound through the variable update scheme found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:3> ; <var:S> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:t> = <var:u> }} <def:poly> {{ <var:S> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:S> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 