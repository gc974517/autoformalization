\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:m> ; <var:O2> := <var:O1> * <var:m> ; <var:O3> := <var:O2> * <var:m> ; <var:O4> := <var:O3> * <var:m> ; <var:O0> := <nat:1> ; <var:O2> := <var:O2> * <nat:9> ; <var:O3> := <var:O3> * <nat:5> ; <var:O4> := <var:O4> * <nat:7> ; <var:L> := <var:O4> <var:L> := <var:L> + <var:O3> <var:L> := <var:L> + <var:O2> <var:L> := <var:L> + <var:O0> \end{verbatim} Assume , given all positive numbers $ <var:Y> $ , it to be that $ <var:m> = <var:Y> $ prior to interpreting our series of instructions it must be that $ <var:L> = <nat:7> \times <var:Y> ^ <nat:4> + <nat:5> \times <var:Y> ^ <nat:3> + <nat:9> \times <var:Y> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} We can see that the below decorated set of commands . \begin{eqnarray} \{ <var:m> = <var:Y> \} \\ <var:O1> := <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \} \\ <var:O2> := <var:O1> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \} \\ <var:O4> := <var:O3> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O4> = <var:Y> ^ <nat:4> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O4> = <var:Y> ^ <nat:4> \land <var:O0> = <nat:1> \} \\ <var:O2> := <var:O2> * <nat:9> ; \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <nat:9> \times <var:Y> ^ <nat:2> \land <var:O3> = <var:Y> ^ <nat:3> \land <var:O4> = <var:Y> ^ <nat:4> \land <var:O0> = <nat:1> \} \\ <var:O3> := <var:O3> * <nat:5> ; \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <nat:9> \times <var:Y> ^ <nat:2> \land <var:O3> = <nat:5> \times <var:Y> ^ <nat:3> \land <var:O4> = <var:Y> ^ <nat:4> \land <var:O0> = <nat:1> \} \\ <var:O4> := <var:O4> * <nat:7> ; \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <nat:9> \times <var:Y> ^ <nat:2> \land <var:O3> = <nat:5> \times <var:Y> ^ <nat:3> \land <var:O4> = <nat:7> \times <var:Y> ^ <nat:4> \land <var:O0> = <nat:1> \} \\ <var:L> := <var:O4> \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <nat:9> \times <var:Y> ^ <nat:2> \land <var:O3> = <nat:5> \times <var:Y> ^ <nat:3> \land <var:O0> = <nat:1> \land <var:L> = <nat:7> \times <var:Y> ^ <nat:4> \} \\ <var:L> := <var:L> + <var:O3> \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O2> = <nat:9> \times <var:Y> ^ <nat:2> \land <var:O0> = <nat:1> \land <var:L> = <nat:7> \times <var:Y> ^ <nat:4> + <nat:5> \times <var:Y> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:O2> \\ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O0> = <nat:1> \land <var:L> = <nat:7> \times <var:Y> ^ <nat:4> + <nat:5> \times <var:Y> ^ <nat:3> + <nat:9> \times <var:Y> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:O0> \\ \{ <var:m> = <var:Y> \land <var:L> = <nat:7> \times <var:Y> ^ <nat:4> + <nat:5> \times <var:Y> ^ <nat:3> + <nat:9> \times <var:Y> ^ <nat:2> + <nat:1> \} \end{eqnarray} The application of usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <var:O4> : string := " <var:O4> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:m> = <var:Y> }} <var:O1> := <var:m> ; <var:O2> := <var:O1> * <var:m> ; <var:O3> := <var:O2> * <var:m> ; <var:O4> := <var:O3> * <var:m> ; <var:O0> := <nat:1> ; <var:O2> := <var:O2> * <nat:9> ; <var:O3> := <var:O3> * <nat:5> ; <var:O4> := <var:O4> * <nat:7> ; <var:L> := <var:O4> <var:L> := <var:L> + <var:O3> <var:L> := <var:L> + <var:O2> <var:L> := <var:L> + <var:O0> {{ <var:L> = <nat:7> * <var:Y> ^ <nat:4> + <nat:5> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> /\ <var:O4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> /\ <var:O4> = <var:Y> ^ <nat:4> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:O3> = <var:Y> ^ <nat:3> /\ <var:O4> = <var:Y> ^ <nat:4> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:Y> ^ <nat:3> /\ <var:O4> = <var:Y> ^ <nat:4> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:Y> ^ <nat:3> /\ <var:O4> = <nat:7> * <var:Y> ^ <nat:4> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:Y> ^ <nat:3> /\ <var:O0> = <nat:1> /\ <var:L> = <nat:7> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:O0> = <nat:1> /\ <var:L> = <nat:7> * <var:Y> ^ <nat:4> + <nat:5> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O0> = <nat:1> /\ <var:L> = <nat:7> * <var:Y> ^ <nat:4> + <nat:5> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:L> = <nat:7> * <var:Y> ^ <nat:4> + <nat:5> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 