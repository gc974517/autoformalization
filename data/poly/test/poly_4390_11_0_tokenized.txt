\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:6> ; <var:A2> := <nat:5> ; <var:A2> := <var:A2> * <var:g> ; <var:A2> := <var:A2> * <var:g> ; <var:A3> := <nat:5> ; <var:A3> := <var:A3> * <var:g> ; <var:A3> := <var:A3> * <var:g> ; <var:A3> := <var:A3> * <var:g> ; <var:E> := <var:A3> ; <var:E> := <var:E> + <var:A2> ; <var:E> := <var:E> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:g> = <var:v> $ for some natural coefficients $ <var:v> $ prior to executing this program then we have $ <var:E> = <nat:5> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning produces : \begin{eqnarray} \{ <var:g> = <var:v> \} \\ <var:A0> := <nat:6> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \} \\ <var:A2> := <nat:5> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:A2> = <nat:5> \} \\ <var:A2> := <var:A2> * <var:g> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:A2> = <nat:5> \times <var:v> \} \\ <var:A2> := <var:A2> * <var:g> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:A2> = <nat:5> \times <var:v> ^ <nat:2> \} \\ <var:A3> := <nat:5> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:A2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:A3> = <nat:5> \} \\ <var:A3> := <var:A3> * <var:g> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:A2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:A3> = <nat:5> \times <var:v> \} \\ <var:A3> := <var:A3> * <var:g> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:A2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:A3> = <nat:5> \times <var:v> ^ <nat:2> \} \\ <var:A3> := <var:A3> * <var:g> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:A2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:A3> = <nat:5> \times <var:v> ^ <nat:3> \} \\ <var:E> := <var:A3> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:A2> = <nat:5> \times <var:v> ^ <nat:2> \land <var:E> = <nat:5> \times <var:v> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:A2> ; \\ \{ <var:g> = <var:v> \land <var:A0> = <nat:6> \land <var:E> = <nat:5> \times <var:v> ^ <nat:3> + <nat:5> \times <var:v> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:A0> \\ \{ <var:g> = <var:v> \land <var:E> = <nat:5> \times <var:v> ^ <nat:3> + <nat:5> \times <var:v> ^ <nat:2> + <nat:6> \} \end{eqnarray} Considering the above , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A0> := <nat:6> ; <var:A2> := <nat:5> ; <var:A2> := <var:A2> * <var:g> ; <var:A2> := <var:A2> * <var:g> ; <var:A3> := <nat:5> ; <var:A3> := <var:A3> * <var:g> ; <var:A3> := <var:A3> * <var:g> ; <var:A3> := <var:A3> * <var:g> ; <var:E> := <var:A3> ; <var:E> := <var:E> + <var:A2> ; <var:E> := <var:E> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:g> = <var:v> }} <def:poly> {{ <var:E> = <nat:5> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:A2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:A2> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:A2> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:A2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:A3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:A2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:A2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:A2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:A2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:E> = <nat:5> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:A0> = <nat:6> /\ <var:E> = <nat:5> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:E> = <nat:5> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 