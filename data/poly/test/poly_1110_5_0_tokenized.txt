\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:6> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:N> ; <var:Z> := <var:V1> ; <var:Z> := <var:Z> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Assume --- given every whole numbers $ <var:O> $ --- that $ <var:N> = <var:O> $ ahead of the execution of this set of instructions it holds that $ <var:Z> = <nat:9> \times <var:O> + <nat:6> $ once list of commands has exited . \end{theorem} \begin{proof} Arguing the correctness of our list of commands is clear through usual Hoare reasoning . Shifting focus toward the subsequent statement contained in our code , we have the assignment command letting $ <nat:6> $ as $ <var:V0>$ . This code forwards the condition $ \{ <var:N> = <var:O> \} $ into the condition $ \{ <var:N> = <var:O> \land <var:V0> = <nat:6> \} $ . Immediately following , we have the binding command yielding $ <nat:9> $ into $ <var:V1>$ . This code forwards the precondition $ \{ <var:N> = <var:O> \land <var:V0> = <nat:6> \} $ as $ \{ <var:N> = <var:O> \land <var:V0> = <nat:6> \land <var:V1> = <nat:9> \} $ . Observing the next bit of code seen in our list of commands , we see the binding statement \verb | <var:V1> := <var:V1> * <var:N> ; | . This transfers the condition $ \{ <var:N> = <var:O> \land <var:V0> = <nat:6> \land <var:V1> = <nat:9> \} $ toward the postcondition $ \{ <var:N> = <var:O> \land <var:V0> = <nat:6> \land <var:V1> = <nat:9> \times <var:O> \} $ . This is guaranteed with the assignment law given by Hoare reasoning . Advancing to the next step , we see the variable binding command \verb | <var:Z> := <var:V1> ; | . This statement advances the precondition $ \{ <var:N> = <var:O> \land <var:V0> = <nat:6> \land <var:V1> = <nat:9> \times <var:O> \} $ to $ \{ <var:N> = <var:O> \land <var:V0> = <nat:6> \land <var:Z> = <nat:9> \times <var:O> \} $ . Looking at the next line of code in our list of commands , we see the variable binding statement assigning $ <var:Z> + <var:V0$ as $ <var:Z>$ . This command forwards the condition $ \{ <var:N> = <var:O> \land <var:V0> = <nat:6> \land <var:Z> = <nat:9> \times <var:O> \} $ toward $ \{ <var:N> = <var:O> \land <var:Z> = <nat:9> \times <var:O> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:6> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:N> ; <var:Z> := <var:V1> ; <var:Z> := <var:Z> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:N> = <var:O> }} <def:poly> {{ <var:Z> = <nat:9> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:V0> = <nat:6> /\ <var:Z> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:Z> = <nat:9> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 