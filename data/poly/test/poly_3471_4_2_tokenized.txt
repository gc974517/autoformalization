\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:E> := <nat:4> ; <var:E> := <nat:1> + <var:E> * <var:c> ; <var:E> := <nat:4> + <var:E> * <var:c> ; <var:E> := <nat:4> + <var:E> * <var:c> \end{verbatim} Allowing given some $ <var:I> $ it to hold that $ <var:c> = <var:I> $ before executing this code segment then we see $ <var:E> = <nat:4> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:4> $ after series of instructions has executed . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions can be shown with usual Hoare logic . Taking another step toward the following line of code contained in our list of commands , we see the variable update statement \verb | <var:E> := <nat:4> ; | . This line redefines the condition $ \{ <var:c> = <var:I> \} $ toward $ \{ <var:c> = <var:I> \land <var:E> = <nat:4> \} $ . This is rigorously given with the assignment inference rule defined in typical Hoare reasoning . Jumping to the proceeding command seen in our program , we have the code \verb | <var:E> := <nat:1> + <var:E> * <var:c> ; | . This transfers $ \{ <var:c> = <var:I> \land <var:E> = <nat:4> \} $ into the condition $ \{ <var:c> = <var:I> \land <var:E> = <nat:4> * <var:I> + <nat:1> \} $ . Moving on to the upcoming piece of code seen in the list of commands , we have the assignment line \verb | <var:E> := <nat:4> + <var:E> * <var:c> ; | . This line takes the condition $ \{ <var:c> = <var:I> \land <var:E> = <nat:4> * <var:I> + <nat:1> \} $ toward the postcondition $ \{ <var:c> = <var:I> \land <var:E> = <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> \} $ . Now , we have the binding line binding $ <nat:4> + <var:E> * <var:c$ to $ <var:E>$ . This code redefines $ \{ <var:c> = <var:I> \land <var:E> = <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> \} $ to the condition $ \{ <var:c> = <var:I> \land <var:E> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:c> = <var:I> }} <var:E> := <nat:4> ; <var:E> := <nat:1> + <var:E> * <var:c> ; <var:E> := <nat:4> + <var:E> * <var:c> ; <var:E> := <nat:4> + <var:E> * <var:c> {{ <var:E> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:E> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:E> = <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:E> = <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:E> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 