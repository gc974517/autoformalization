\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:2> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:q> ; <var:w> := <var:f1> ; <var:w> := <var:w> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:q> = <var:X> $ ahead of the execution of this list of commands it holds that we have $ <var:w> = <nat:1> \cdot <var:X> + <nat:2> $ once set of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be given using typical Hoare logic . Next , we see the environment update line assigning $ <nat:2> $ into $ <var:f0>$ . This code forwards the precondition $ \{ <var:q> = <var:X> \} $ to the condition $ \{ <var:q> = <var:X> \land <var:f0> = <nat:2> \} $ . This is shown to be logically sound with the assignment scheme defined in typical Hoare techniques . Moving forward to the next step , we see the assignment line \verb | <var:f1> := <nat:1> ; | . This transfers the precondition $ \{ <var:q> = <var:X> \land <var:f0> = <nat:2> \} $ to the condition $ \{ <var:q> = <var:X> \land <var:f0> = <nat:2> \land <var:f1> = <nat:1> \} $ . Honing in on the subsequent command found in our list of commands , we see the environment update statement \verb | <var:f1> := <var:f1> * <var:q> ; | . This line takes $ \{ <var:q> = <var:X> \land <var:f0> = <nat:2> \land <var:f1> = <nat:1> \} $ into $ \{ <var:q> = <var:X> \land <var:f0> = <nat:2> \land <var:f1> = <nat:1> \cdot <var:X> \} $ . Moving on to the following statement in the program , we see the variable binding code assigning $ <var:f1> $ as $ <var:w>$ . This takes $ \{ <var:q> = <var:X> \land <var:f0> = <nat:2> \land <var:f1> = <nat:1> \cdot <var:X> \} $ to $ \{ <var:q> = <var:X> \land <var:f0> = <nat:2> \land <var:w> = <nat:1> \cdot <var:X> \} $ . This is known to be sound with the assignment rule given by standard Hoare reasoning . Observing the following command contained in our code segment , we have the environment update statement binding $ <var:w> + <var:f0$ into $ <var:w>$ . This advances $ \{ <var:q> = <var:X> \land <var:f0> = <nat:2> \land <var:w> = <nat:1> \cdot <var:X> \} $ to the condition $ \{ <var:q> = <var:X> \land <var:w> = <nat:1> \cdot <var:X> + <nat:2> \} $ . This is ensured with the assignment inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:2> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:q> ; <var:w> := <var:f1> ; <var:w> := <var:w> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:q> = <var:X> }} <def:poly> {{ <var:w> = <nat:1> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:X> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:X> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:X> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:X> /\ <var:f0> = <nat:2> /\ <var:w> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:X> /\ <var:w> = <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 