\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:5> ; <var:g> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:x> = <var:T> $ before the execution of this code segment it follows that we have $ <var:g> = <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our program can be done through standard Hoare reasoning . Focusing on the subsequent pieces of code found in our segment of code , \verb | { <var:x> = <var:T> } <var:k0> := <nat:5> { <var:x> = <var:T> \land <var:k0> = <nat:5> } | and \verb | { <var:x> = <var:T> \land <var:k0> = <nat:5> } <var:g> := <var:k0{ <var:x> = <var:T> \land <var:g> = <nat:5> } | . This is shown to be logically sound through the variable binding scheme in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:5> ; <var:g> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:x> = <var:T> }} <def:poly> {{ <var:g> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:g> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 