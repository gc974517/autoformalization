\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:1> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:W> ; <var:D> := <var:h1> ; <var:D> := <var:D> + <var:h0> \end{verbatim} Assume it to be that $ <var:W> = <var:d> $ ( letting $ <var:d> \in \mathbb{Z}^+ $ ) ahead of executing our series of instructions , it follows that we see $ <var:D> = <nat:3> \cdot <var:d> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this series of instructions is evident by Hoare reasoning . Following , we have the assignment line giving $ <nat:1> $ as $ <var:h0>$ . This moves $ \{ <var:W> = <var:d> \} $ to the postcondition $ \{ <var:W> = <var:d> \land <var:h0> = <nat:1> \} $ . This is ensured by the assignment scheme defined by typical Hoare techniques . Considering the proceeding statement found in the list of instructions , we have the assignment code assigning $ <nat:3> $ as $ <var:h1>$ . This statement forwards $ \{ <var:W> = <var:d> \land <var:h0> = <nat:1> \} $ to the postcondition $ \{ <var:W> = <var:d> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> \} $ . Going forward , we have the binding statement assigning $ <var:h1> * <var:W> $ as $ <var:h1>$ . This advances the condition $ \{ <var:W> = <var:d> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> \} $ to the condition $ \{ <var:W> = <var:d> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> \cdot <var:d> \} $ . Further , the variable update command letting $ <var:h1> $ toward $ <var:D>$ . This command moves $ \{ <var:W> = <var:d> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> \cdot <var:d> \} $ to $ \{ <var:W> = <var:d> \land <var:h0> = <nat:1> \land <var:D> = <nat:3> \cdot <var:d> \} $ . This is guaranteed using the assignment law given in usual Hoare techniques . Advancing to the next step , the binding statement letting $ <var:D> + <var:h0$ to $ <var:D>$ . This moves the precondition $ \{ <var:W> = <var:d> \land <var:h0> = <nat:1> \land <var:D> = <nat:3> \cdot <var:d> \} $ to the postcondition $ \{ <var:W> = <var:d> \land <var:D> = <nat:3> \cdot <var:d> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:W> = <var:d> }} <var:h0> := <nat:1> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:W> ; <var:D> := <var:h1> ; <var:D> := <var:D> + <var:h0> {{ <var:D> = <nat:3> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:d> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:d> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:d> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:d> /\ <var:h0> = <nat:1> /\ <var:D> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:d> /\ <var:D> = <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 