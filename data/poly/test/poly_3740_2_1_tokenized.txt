\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:5> ; <var:X> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for all positive integer coefficients $ <var:J> $ , it to be that $ <var:l> = <var:J> $ prior to evaluating this set of commands it must be that we see $ <var:X> = <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of the code is demonstrated through typical Hoare techniques . After , the variable binding line letting $ <nat:5> $ as $ <var:j0>$ . This statement redefines $ \{ <var:l> = <var:J> \} $ to the condition $ \{ <var:l> = <var:J> \land <var:j0> = <nat:5> \} $ . This is shown to be logically sound with the assignment inference rule defined in Hoare logic . Paying attention to the next line found in the program , we see the binding statement \verb | <var:X> := <var:j0> | . This code advances the condition $ \{ <var:l> = <var:J> \land <var:j0> = <nat:5> \} $ toward $ \{ <var:l> = <var:J> \land <var:X> = <nat:5> \} $ . This is rigorously given through the assignment rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:5> ; <var:X> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:l> = <var:J> }} <def:poly> {{ <var:X> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:X> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 