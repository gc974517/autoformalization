\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:4> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:l> ; <var:k> := <var:X1> ; <var:k> := <var:k> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Assume --- taking $ <var:W> \in \mathbb{Z}^+ $ --- it to be that $ <var:l> = <var:W> $ ahead of the evaluation of our list of instructions then we have $ <var:k> = <nat:3> * <var:W> + <nat:4> $ . \end{theorem} \begin{proof} Let the below decorated set of commands . \begin{eqnarray} \{ <var:l> = <var:W> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:l> = <var:W> \land <var:X0> = <nat:4> \} \\ <var:X1> := <nat:3> ; \\ \{ <var:l> = <var:W> \land <var:X0> = <nat:4> \land <var:X1> = <nat:3> \} \\ <var:X1> := <var:X1> * <var:l> ; \\ \{ <var:l> = <var:W> \land <var:X0> = <nat:4> \land <var:X1> = <nat:3> \times <var:W> \} \\ <var:k> := <var:X1> ; \\ \{ <var:l> = <var:W> \land <var:X0> = <nat:4> \land <var:k> = <nat:3> \times <var:W> \} \\ <var:k> := <var:k> + <var:X0> \\ \{ <var:l> = <var:W> \land <var:k> = <nat:3> \times <var:W> + <nat:4> \} \end{eqnarray} Using standard Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:4> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:l> ; <var:k> := <var:X1> ; <var:k> := <var:k> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:l> = <var:W> }} <def:poly> {{ <var:k> = <nat:3> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:X0> = <nat:4> /\ <var:k> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:k> = <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 