\begin{document} \begin{theorem} Define the following series of instructions such that \begin{verbatim} <var:u0> := <nat:7> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:n> ; <var:w> := <var:u1> ; <var:w> := <var:w> + <var:u0> \end{verbatim} Assuming , given some natural coefficients $ <var:J> $ , that $ <var:n> = <var:J> $ ahead of running this list of commands , it must be that we see $ <var:w> = <nat:7> \cdot <var:J> + <nat:7> $ after series of commands executes . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:n> = <var:J> \} \\ <var:u0> := <nat:7> ; \\ \{ <var:n> = <var:J> \land <var:u0> = <nat:7> \} \\ <var:u1> := <nat:7> ; \\ \{ <var:n> = <var:J> \land <var:u0> = <nat:7> \land <var:u1> = <nat:7> \} \\ <var:u1> := <var:u1> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:u0> = <nat:7> \land <var:u1> = <nat:7> \cdot <var:J> \} \\ <var:w> := <var:u1> ; \\ \{ <var:n> = <var:J> \land <var:u0> = <nat:7> \land <var:w> = <nat:7> \cdot <var:J> \} \\ <var:w> := <var:w> + <var:u0> \\ \{ <var:n> = <var:J> \land <var:w> = <nat:7> \cdot <var:J> + <nat:7> \} \end{eqnarray} Given the preceding argument , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:n> = <var:J> }} <var:u0> := <nat:7> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:n> ; <var:w> := <var:u1> ; <var:w> := <var:w> + <var:u0> {{ <var:w> = <nat:7> * <var:J> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:u0> = <nat:7> /\ <var:w> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:w> = <nat:7> * <var:J> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 