\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:M> := <nat:2> ; <var:M> := <nat:3> + <var:M> * <var:G> ; <var:M> := <nat:3> + <var:M> * <var:G> ; <var:M> := <nat:1> + <var:M> * <var:G> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Given it to be that $ <var:G> = <var:j> $ ahead of the evaluation of our code segment , it holds that we have $ <var:M> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques produces : \begin{eqnarray} \{ <var:G> = <var:j> \} \\ <var:M> := <nat:2> ; \\ \{ <var:G> = <var:j> \land <var:M> = <nat:2> \} \\ <var:M> := <nat:3> + <var:M> * <var:G> ; \\ \{ <var:G> = <var:j> \land <var:M> = <nat:2> * <var:j> + <nat:3> \} \\ <var:M> := <nat:3> + <var:M> * <var:G> ; \\ \{ <var:G> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} \\ <var:M> := <nat:1> + <var:M> * <var:G> \\ \{ <var:G> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} \end{eqnarray} Considering the above , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:2> ; <var:M> := <nat:3> + <var:M> * <var:G> ; <var:M> := <nat:3> + <var:M> * <var:G> ; <var:M> := <nat:1> + <var:M> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:G> = <var:j> }} <def:poly> {{ <var:M> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:M> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:M> = <nat:2> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 