\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:6> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:Y> ; <var:O> := <var:Z1> ; <var:O> := <var:O> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:Y> = <var:g> $ ahead of evaluating our series of instructions , it holds that we have $ <var:O> = <nat:6> \cdot <var:g> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:Y> = <var:g> \} \\ <var:Z0> := <nat:6> ; \\ \{ <var:Y> = <var:g> \land <var:Z0> = <nat:6> \} \\ <var:Z1> := <nat:6> ; \\ \{ <var:Y> = <var:g> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \} \\ <var:Z1> := <var:Z1> * <var:Y> ; \\ \{ <var:Y> = <var:g> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \cdot <var:g> \} \\ <var:O> := <var:Z1> ; \\ \{ <var:Y> = <var:g> \land <var:Z0> = <nat:6> \land <var:O> = <nat:6> \cdot <var:g> \} \\ <var:O> := <var:O> + <var:Z0> \\ \{ <var:Y> = <var:g> \land <var:O> = <nat:6> \cdot <var:g> + <nat:6> \} \end{eqnarray} As a result , our set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:6> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:Y> ; <var:O> := <var:Z1> ; <var:O> := <var:O> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:Y> = <var:g> }} <def:poly> {{ <var:O> = <nat:6> * <var:g> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:Z0> = <nat:6> /\ <var:O> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:O> = <nat:6> * <var:g> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 