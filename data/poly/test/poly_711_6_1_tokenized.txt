\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:s1> := <var:Z> ; <var:s2> := <var:s1> * <var:Z> ; <var:s0> := <nat:3> ; <var:s2> := <var:s2> * <nat:3> ; <var:a> := <var:s2> <var:a> := <var:a> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:Z> = <var:Q> $ --- for positive integers $ <var:Q> $ --- before interpreting this program , it follows that we have $ <var:a> = <nat:3> * <var:Q> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic results in : \begin{eqnarray} \{ <var:Z> = <var:Q> \} \\ <var:s1> := <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:s1> = <var:Q> \} \\ <var:s2> := <var:s1> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:s1> = <var:Q> \land <var:s2> = <var:Q> ^ <nat:2> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:Z> = <var:Q> \land <var:s1> = <var:Q> \land <var:s2> = <var:Q> ^ <nat:2> \land <var:s0> = <nat:3> \} \\ <var:s2> := <var:s2> * <nat:3> ; \\ \{ <var:Z> = <var:Q> \land <var:s1> = <var:Q> \land <var:s2> = <nat:3> \cdot <var:Q> ^ <nat:2> \land <var:s0> = <nat:3> \} \\ <var:a> := <var:s2> \\ \{ <var:Z> = <var:Q> \land <var:s1> = <var:Q> \land <var:s0> = <nat:3> \land <var:a> = <nat:3> \cdot <var:Q> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:s0> \\ \{ <var:Z> = <var:Q> \land <var:a> = <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:3> \} \end{eqnarray} Given the preceding argument , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s1> := <var:Z> ; <var:s2> := <var:s1> * <var:Z> ; <var:s0> := <nat:3> ; <var:s2> := <var:s2> * <nat:3> ; <var:a> := <var:s2> <var:a> := <var:a> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Z> = <var:Q> }} <def:poly> {{ <var:a> = <nat:3> * <var:Q> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:s1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:s1> = <var:Q> /\ <var:s2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:s1> = <var:Q> /\ <var:s2> = <var:Q> ^ <nat:2> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:s1> = <var:Q> /\ <var:s2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:s1> = <var:Q> /\ <var:s0> = <nat:3> /\ <var:a> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:a> = <nat:3> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 