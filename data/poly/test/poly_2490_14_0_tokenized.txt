\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:J> ; <var:Z2> := <nat:2> ; <var:Z2> := <var:Z2> * <var:J> ; <var:Z2> := <var:Z2> * <var:J> ; <var:Z3> := <nat:3> ; <var:Z3> := <var:Z3> * <var:J> ; <var:Z3> := <var:Z3> * <var:J> ; <var:Z3> := <var:Z3> * <var:J> ; <var:f> := <var:Z3> ; <var:f> := <var:f> + <var:Z2> ; <var:f> := <var:f> + <var:Z1> ; <var:f> := <var:f> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:J> = <var:b> $ ahead of running our list of commands then $ <var:f> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> $ when code has exited . \end{theorem} \begin{proof} Notice the following decorated code segment . \begin{eqnarray} \{ <var:J> = <var:b> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \} \\ <var:Z1> := <nat:3> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \} \\ <var:Z1> := <var:Z1> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \} \\ <var:Z2> := <nat:2> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:Z2> = <nat:2> \} \end{eqnarray} Allowing the execution of this segment of code returns : \begin{eqnarray} <var:Z2> := <var:Z2> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:Z2> = <nat:2> \cdot <var:b> \} \end{eqnarray} Continuing executing the series of instructions gives us : \begin{eqnarray} <var:Z2> := <var:Z2> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:Z2> = <nat:2> \cdot <var:b> ^ <nat:2> \} \\ <var:Z3> := <nat:3> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:Z2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:Z3> = <nat:3> \} \\ <var:Z3> := <var:Z3> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:Z2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:Z3> = <nat:3> \cdot <var:b> \} \end{eqnarray} Continuing the evaluation of our set of instructions gives : \begin{eqnarray} <var:Z3> := <var:Z3> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:Z2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:Z3> = <nat:3> \cdot <var:b> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:Z2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:Z3> = <nat:3> \cdot <var:b> ^ <nat:3> \} \\ <var:f> := <var:Z3> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:Z2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:f> = <nat:3> \cdot <var:b> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:Z2> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \cdot <var:b> \land <var:f> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:Z1> ; \\ \{ <var:J> = <var:b> \land <var:Z0> = <nat:3> \land <var:f> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> \} \\ <var:f> := <var:f> + <var:Z0> \\ \{ <var:J> = <var:b> \land <var:f> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:3> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:J> ; <var:Z2> := <nat:2> ; <var:Z2> := <var:Z2> * <var:J> ; <var:Z2> := <var:Z2> * <var:J> ; <var:Z3> := <nat:3> ; <var:Z3> := <var:Z3> * <var:J> ; <var:Z3> := <var:Z3> * <var:J> ; <var:Z3> := <var:Z3> * <var:J> ; <var:f> := <var:Z3> ; <var:f> := <var:f> + <var:Z2> ; <var:f> := <var:f> + <var:Z1> ; <var:f> := <var:f> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:J> = <var:b> }} <def:poly> {{ <var:f> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:Z2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:Z2> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:Z2> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:Z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:Z3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:Z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:Z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:Z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:Z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:f> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:b> /\ <var:f> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:Z0> = <nat:3> /\ <var:f> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:f> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 