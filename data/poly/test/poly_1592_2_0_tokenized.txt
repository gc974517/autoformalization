\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:4> ; <var:M> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:U> = <var:K> $ prior to running our list of instructions , it follows that we see $ <var:M> = <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:U> = <var:K> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:U> = <var:K> \land <var:t0> = <nat:4> \} \\ <var:M> := <var:t0> \\ \{ <var:U> = <var:K> \land <var:M> = <nat:4> \} \end{eqnarray} Given the preceding argument , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:4> ; <var:M> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:U> = <var:K> }} <def:poly> {{ <var:M> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:M> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 