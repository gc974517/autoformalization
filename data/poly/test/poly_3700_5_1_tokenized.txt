\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:p> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:8> ; <var:j> := <var:N1> <var:j> := <var:j> + <var:N0> \end{verbatim} Assume that we have $ <var:p> = <var:L> $ ( for some whole numbers $ <var:L> $ ) ahead of the execution of our series of commands then we have $ <var:j> = <nat:8> * <var:L> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning yields : \begin{eqnarray} \{ <var:p> = <var:L> \} \\ <var:N1> := <var:p> ; \\ \{ <var:p> = <var:L> \land <var:N1> = <var:L> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:p> = <var:L> \land <var:N1> = <var:L> \land <var:N0> = <nat:4> \} \\ <var:N1> := <var:N1> * <nat:8> ; \\ \{ <var:p> = <var:L> \land <var:N1> = <nat:8> * <var:L> \land <var:N0> = <nat:4> \} \\ <var:j> := <var:N1> \\ \{ <var:p> = <var:L> \land <var:N0> = <nat:4> \land <var:j> = <nat:8> * <var:L> \} \\ <var:j> := <var:j> + <var:N0> \\ \{ <var:p> = <var:L> \land <var:j> = <nat:8> * <var:L> + <nat:4> \} \end{eqnarray} Given the preceding argument , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:p> = <var:L> }} <var:N1> := <var:p> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:8> ; <var:j> := <var:N1> <var:j> := <var:j> + <var:N0> {{ <var:j> = <nat:8> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:N1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:N1> = <var:L> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:N1> = <nat:8> * <var:L> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:N0> = <nat:4> /\ <var:j> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:j> = <nat:8> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 