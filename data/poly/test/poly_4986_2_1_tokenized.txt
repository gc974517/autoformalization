\begin{document} \begin{theorem} Consider the following program : \begin{verbatim} <var:v0> := <nat:1> ; <var:i> := <var:v0> \end{verbatim} Given it to hold that $ <var:t> = <var:M> $ --- for all $ <var:M> $ --- prior to evaluating the set of instructions , then we have $ <var:i> = <nat:1> $ . \end{theorem} \begin{proof} Using Hoare logic results in : \begin{eqnarray} \{ <var:t> = <var:M> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:t> = <var:M> \land <var:v0> = <nat:1> \} \\ <var:i> := <var:v0> \\ \{ <var:t> = <var:M> \land <var:i> = <nat:1> \} \end{eqnarray} Considering the preceding argument , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:t> = <var:M> }} <var:v0> := <nat:1> ; <var:i> := <var:v0> {{ <var:i> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:i> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 