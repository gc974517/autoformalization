\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:3> ; <var:h2> := <nat:9> ; <var:h2> := <var:h2> * <var:Y> ; <var:h2> := <var:h2> * <var:Y> ; <var:h3> := <nat:9> ; <var:h3> := <var:h3> * <var:Y> ; <var:h3> := <var:h3> * <var:Y> ; <var:h3> := <var:h3> * <var:Y> ; <var:T> := <var:h3> ; <var:T> := <var:T> + <var:h2> ; <var:T> := <var:T> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:Y> = <var:N> $ before the evaluation of this code , it holds that we have $ <var:T> = <nat:9> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:3> $ once series of instructions has terminated . \end{theorem} \begin{proof} Observe the following decorated set of instructions . \begin{eqnarray} \{ <var:Y> = <var:N> \} \\ <var:h0> := <nat:3> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \} \\ <var:h2> := <nat:9> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:h2> = <nat:9> \} \\ <var:h2> := <var:h2> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:h2> = <nat:9> * <var:N> \} \\ <var:h2> := <var:h2> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:h2> = <nat:9> * <var:N> ^ <nat:2> \} \\ <var:h3> := <nat:9> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:h2> = <nat:9> * <var:N> ^ <nat:2> \land <var:h3> = <nat:9> \} \\ <var:h3> := <var:h3> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:h2> = <nat:9> * <var:N> ^ <nat:2> \land <var:h3> = <nat:9> * <var:N> \} \\ <var:h3> := <var:h3> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:h2> = <nat:9> * <var:N> ^ <nat:2> \land <var:h3> = <nat:9> * <var:N> ^ <nat:2> \} \\ <var:h3> := <var:h3> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:h2> = <nat:9> * <var:N> ^ <nat:2> \land <var:h3> = <nat:9> * <var:N> ^ <nat:3> \} \\ <var:T> := <var:h3> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:h2> = <nat:9> * <var:N> ^ <nat:2> \land <var:T> = <nat:9> * <var:N> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:h2> ; \\ \{ <var:Y> = <var:N> \land <var:h0> = <nat:3> \land <var:T> = <nat:9> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> \} \end{eqnarray} Furthering interpreting the segment of code produces : \begin{eqnarray} <var:T> := <var:T> + <var:h0> \\ \{ <var:Y> = <var:N> \land <var:T> = <nat:9> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:h2> := <nat:9> ; <var:h2> := <var:h2> * <var:Y> ; <var:h2> := <var:h2> * <var:Y> ; <var:h3> := <nat:9> ; <var:h3> := <var:h3> * <var:Y> ; <var:h3> := <var:h3> * <var:Y> ; <var:h3> := <var:h3> * <var:Y> ; <var:T> := <var:h3> ; <var:T> := <var:T> + <var:h2> ; <var:T> := <var:T> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Y> = <var:N> }} <def:poly> {{ <var:T> = <nat:9> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:h2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:h2> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:h2> = <nat:9> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:h2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:h3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:h2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:h2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:h2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:h2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:T> = <nat:9> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:h0> = <nat:3> /\ <var:T> = <nat:9> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:T> = <nat:9> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 