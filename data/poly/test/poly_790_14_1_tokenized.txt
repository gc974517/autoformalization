\begin{document} \begin{theorem} Take a program in \emph{Imp} : \begin{verbatim} <var:L1> := <var:m> ; <var:L2> := <var:L1> * <var:m> ; <var:L3> := <var:L2> * <var:m> ; <var:L4> := <var:L3> * <var:m> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:8> ; <var:L2> := <var:L2> * <nat:2> ; <var:L3> := <var:L3> * <nat:2> ; <var:L4> := <var:L4> * <nat:6> ; <var:y> := <var:L4> <var:y> := <var:y> + <var:L3> <var:y> := <var:y> + <var:L2> <var:y> := <var:y> + <var:L1> <var:y> := <var:y> + <var:L0> \end{verbatim} Allow it to be that $ <var:m> = <var:P> $ prior to evaluating the segment of code it must be that we have $ <var:y> = <nat:6> \cdot <var:P> ^ <nat:4> + <nat:2> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our code is clear with standard Hoare reasoning . Taking a look at the subsequent statements found in our series of commands , we have \begin{eqnarray} \{ <var:m> = <var:P> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \, <var:L2> := <var:L1> * <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \} \, <var:L3> := <var:L2> * <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \} \, <var:L4> := <var:L3> * <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \land <var:L4> = <var:P> ^ <nat:4> \} \end{eqnarray} Taking a look at the subsequent commands contained in the set of instructions , we see \begin{eqnarray} \{ <var:m> = <var:P> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \, <var:L2> := <var:L1> * <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \} \end{eqnarray} This is rigorously given using the variable assignmet inference rule in typical Hoare reasoning . Taking a look at the proceeding steps in the code , \begin{eqnarray} \{ <var:m> = <var:P> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \, <var:L2> := <var:L1> * <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \} \, <var:L3> := <var:L2> * <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \} \, <var:L4> := <var:L3> * <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \land <var:L4> = <var:P> ^ <nat:4> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \land <var:L4> = <var:P> ^ <nat:4> \} \, <var:L0> := <nat:1> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \land <var:L4> = <var:P> ^ <nat:4> \land <var:L0> = <nat:1> \} \end{eqnarray} Considering the next piece of code seen in our list of commands , we see \begin{eqnarray} \{ <var:m> = <var:P> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \end{eqnarray} Shifting focus toward the upcoming statements seen in our series of instructions , we have \begin{eqnarray} \{ <var:m> = <var:P> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \\ \{ <var:m> = <var:P> \land <var:L1> = <var:P> \} \, <var:L2> := <var:L1> * <var:m> \, \{ <var:m> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \} \end{eqnarray} This is known to be sound by the environment update scheme given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <var:L4> : string := " <var:L4> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:m> = <var:P> }} <var:L1> := <var:m> ; <var:L2> := <var:L1> * <var:m> ; <var:L3> := <var:L2> * <var:m> ; <var:L4> := <var:L3> * <var:m> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:8> ; <var:L2> := <var:L2> * <nat:2> ; <var:L3> := <var:L3> * <nat:2> ; <var:L4> := <var:L4> * <nat:6> ; <var:y> := <var:L4> <var:y> := <var:y> + <var:L3> <var:y> := <var:y> + <var:L2> <var:y> := <var:y> + <var:L1> <var:y> := <var:y> + <var:L0> {{ <var:y> = <nat:6> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <var:P> /\ <var:L2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <var:P> /\ <var:L2> = <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <var:P> /\ <var:L2> = <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> /\ <var:L4> = <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <var:P> /\ <var:L2> = <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> /\ <var:L4> = <var:P> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <nat:8> * <var:P> /\ <var:L2> = <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> /\ <var:L4> = <var:P> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <nat:8> * <var:P> /\ <var:L2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> /\ <var:L4> = <var:P> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <nat:8> * <var:P> /\ <var:L2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:L3> = <nat:2> * <var:P> ^ <nat:3> /\ <var:L4> = <var:P> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <nat:8> * <var:P> /\ <var:L2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:L3> = <nat:2> * <var:P> ^ <nat:3> /\ <var:L4> = <nat:6> * <var:P> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <nat:8> * <var:P> /\ <var:L2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:L3> = <nat:2> * <var:P> ^ <nat:3> /\ <var:L0> = <nat:1> /\ <var:y> = <nat:6> * <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <nat:8> * <var:P> /\ <var:L2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:L0> = <nat:1> /\ <var:y> = <nat:6> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L1> = <nat:8> * <var:P> /\ <var:L0> = <nat:1> /\ <var:y> = <nat:6> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:L0> = <nat:1> /\ <var:y> = <nat:6> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:y> = <nat:6> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 