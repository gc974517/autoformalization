\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:x0> := <nat:5> ; <var:q> := <var:x0> \end{verbatim} Given it to hold that $ <var:A> = <var:W> $ ahead of evaluating the set of commands it holds that we have $ <var:q> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:W> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:A> = <var:W> \land <var:x0> = <nat:5> \} \\ <var:q> := <var:x0> \\ \{ <var:A> = <var:W> \land <var:q> = <nat:5> \} \end{eqnarray} Allowing evaluating our series of instructions gives us : \begin{eqnarray} \end{eqnarray} Utilizing Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:A> = <var:W> }} <var:x0> := <nat:5> ; <var:q> := <var:x0> {{ <var:q> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:q> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 