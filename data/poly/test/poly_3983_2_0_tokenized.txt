\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:2> ; <var:m> := <var:E0> \end{verbatim} Assuming it to be that $ <var:F> = <var:P> $ given every positive integers $ <var:P> $ ahead of the execution of this code , it must be that we have $ <var:m> = <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be demonstrated through standard Hoare techniques . Moving on to the following line found in our segment of code , the variable binding code letting $ <nat:2> $ into $ <var:E0>$ . This moves the precondition $ \{ <var:F> = <var:P> \} $ toward the condition $ \{ <var:F> = <var:P> \land <var:E0> = <nat:2> \} $ . Further , the code defining $ <var:E0$ to $ <var:m>$ . This takes the precondition $ \{ <var:F> = <var:P> \land <var:E0> = <nat:2> \} $ into the condition $ \{ <var:F> = <var:P> \land <var:m> = <nat:2> \} $ . This is shown to be logically sound using the assignment law found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:F> = <var:P> }} <var:E0> := <nat:2> ; <var:m> := <var:E0> {{ <var:m> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:m> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 