\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <nat:2> + <var:k> * <var:D> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <var:k> * <var:D> ; <var:k> := <nat:2> + <var:k> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Allow --- given some $ <var:W> \in \mathbb{Z}^+ $ --- that $ <var:D> = <var:W> $ prior to executing our segment of code it follows that we see $ <var:k> = <nat:3> \cdot <var:W> ^ <nat:10> + <nat:4> \cdot <var:W> ^ <nat:9> + <nat:1> \cdot <var:W> ^ <nat:8> + <nat:4> \cdot <var:W> ^ <nat:7> + <nat:4> \cdot <var:W> ^ <nat:6> + <nat:1> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:1> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:2> $ when series of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for our list of commands can be seen using the below decorated series of instructions . \begin{eqnarray} \{ <var:D> = <var:W> \} \\ <var:k> := <nat:3> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> \} \\ <var:k> := <nat:4> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> + <nat:4> \} \\ <var:k> := <nat:1> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> \} \\ <var:k> := <nat:4> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:4> \} \\ <var:k> := <nat:4> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> \} \\ <var:k> := <nat:1> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> \} \\ <var:k> := <nat:2> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> \} \\ <var:k> := <nat:1> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> \} \\ <var:k> := <nat:4> + <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:4> \} \\ <var:k> := <var:k> * <var:D> ; \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + \} \\ <var:k> := <nat:2> + <var:k> * <var:D> \\ \{ <var:D> = <var:W> \land <var:k> = <nat:3> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:1> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:2> \} \end{eqnarray} Advancing running the program results in : \begin{eqnarray} \end{eqnarray} The application of usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <nat:2> + <var:k> * <var:D> ; <var:k> := <nat:1> + <var:k> * <var:D> ; <var:k> := <nat:4> + <var:k> * <var:D> ; <var:k> := <var:k> * <var:D> ; <var:k> := <nat:2> + <var:k> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:D> = <var:W> }} <def:poly> {{ <var:k> = <nat:3> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:1> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:W> /\ <var:k> = <nat:3> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:1> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 