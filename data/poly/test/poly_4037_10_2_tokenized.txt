\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r> := <nat:3> ; <var:r> := <nat:4> + <var:r> * <var:T> ; <var:r> := <nat:3> + <var:r> * <var:T> ; <var:r> := <var:r> * <var:T> ; <var:r> := <nat:1> + <var:r> * <var:T> ; <var:r> := <nat:2> + <var:r> * <var:T> ; <var:r> := <nat:2> + <var:r> * <var:T> ; <var:r> := <nat:4> + <var:r> * <var:T> ; <var:r> := <nat:1> + <var:r> * <var:T> ; <var:r> := <nat:2> + <var:r> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:T> = <var:L> $ ( given every natural coefficients $ <var:L> $ ) ahead of executing our segment of code , it must be that we see $ <var:r> = <nat:3> \times <var:L> ^ <nat:9> + <nat:4> \times <var:L> ^ <nat:8> + <nat:3> \times <var:L> ^ <nat:7> + <nat:1> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions can be done through standard Hoare logic . Going to the next step , we see the code \verb | <var:r> := <nat:3> ; | . This advances the precondition $ \{ <var:T> = <var:L> \} $ into $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \} $ . Further , we have the variable assignmet statement \verb | <var:r> := <nat:4> + <var:r> * <var:T> ; | . This moves the precondition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \} $ into the postcondition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> + <nat:4> \} $ . Now , the variable binding statement \verb | <var:r> := <nat:3> + <var:r> * <var:T> ; | . This moves the precondition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> + <nat:4> \} $ to the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:3> \} $ . Honing in on the proceeding piece of code found in our set of instructions , we see the line letting $ <var:r> * <var:T> $ to $ <var:r>$ . This transfers the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:3> \} $ as the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + \} $ . This is guaranteed with the assignment rule given in standard Hoare techniques . Focusing on the following statement contained in our list of instructions , we see the variable update statement binding $ <nat:1> + <var:r> * <var:T> $ into $ <var:r>$ . This transfers the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + \} $ to the postcondition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:1> \} $ . This is rigorously given with the assignment rule given in standard Hoare logic . Advancing to the next step , we see the variable binding code \verb | <var:r> := <nat:2> + <var:r> * <var:T> ; | . This transfers the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:1> \} $ as the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:5> + <nat:4> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> + <nat:2> \} $ . Immediately following , we see the environment update command \verb | <var:r> := <nat:2> + <var:r> * <var:T> ; | . This forwards the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:5> + <nat:4> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> + <nat:2> \} $ to $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:6> + <nat:4> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> \} $ . Following , we see the variable binding code yielding $ <nat:4> + <var:r> * <var:T> $ to $ <var:r>$ . This transfers $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:6> + <nat:4> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> \} $ toward the postcondition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:7> + <nat:4> \times <var:L> ^ <nat:6> + <nat:3> \times <var:L> ^ <nat:5> + <nat:1> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:4> \} $ . This is guaranteed by the assignment rule from typical Hoare techniques . Now , the assignment statement \verb | <var:r> := <nat:1> + <var:r> * <var:T> ; | . This command redefines the precondition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:7> + <nat:4> \times <var:L> ^ <nat:6> + <nat:3> \times <var:L> ^ <nat:5> + <nat:1> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:4> \} $ as the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:7> + <nat:3> \times <var:L> ^ <nat:6> + <nat:1> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:1> \} $ . Taking a look at the subsequent command found in the list of commands , the variable update code binding $ <nat:2> + <var:r> * <var:T$ to $ <var:r>$ . This redefines the condition $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:7> + <nat:3> \times <var:L> ^ <nat:6> + <nat:1> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:1> \} $ to $ \{ <var:T> = <var:L> \land <var:r> = <nat:3> \times <var:L> ^ <nat:9> + <nat:4> \times <var:L> ^ <nat:8> + <nat:3> \times <var:L> ^ <nat:7> + <nat:1> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:3> ; <var:r> := <nat:4> + <var:r> * <var:T> ; <var:r> := <nat:3> + <var:r> * <var:T> ; <var:r> := <var:r> * <var:T> ; <var:r> := <nat:1> + <var:r> * <var:T> ; <var:r> := <nat:2> + <var:r> * <var:T> ; <var:r> := <nat:2> + <var:r> * <var:T> ; <var:r> := <nat:4> + <var:r> * <var:T> ; <var:r> := <nat:1> + <var:r> * <var:T> ; <var:r> := <nat:2> + <var:r> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:T> = <var:L> }} <def:poly> {{ <var:r> = <nat:3> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:r> = <nat:3> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 