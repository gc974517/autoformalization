\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:5> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:P> ; <var:t2> := <nat:3> ; <var:t2> := <var:t2> * <var:P> ; <var:t2> := <var:t2> * <var:P> ; <var:t3> := <nat:8> ; <var:t3> := <var:t3> * <var:P> ; <var:t3> := <var:t3> * <var:P> ; <var:t3> := <var:t3> * <var:P> ; <var:w> := <var:t3> ; <var:w> := <var:w> + <var:t2> ; <var:w> := <var:w> + <var:t1> ; <var:w> := <var:w> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allowing given every $ <var:K> \in \mathbb{Z}^+ $ that $ <var:P> = <var:K> $ prior to executing our list of commands , it must be that we have $ <var:w> = <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:5> $ . \end{theorem} \begin{proof} Using Hoare logic results in : \begin{eqnarray} \{ <var:P> = <var:K> \} \\ <var:t0> := <nat:5> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \} \\ <var:t1> := <nat:4> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> \} \\ <var:t1> := <var:t1> * <var:P> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \} \\ <var:t2> := <nat:3> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:t2> = <nat:3> \} \\ <var:t2> := <var:t2> * <var:P> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:t2> = <nat:3> * <var:K> \} \\ <var:t2> := <var:t2> * <var:P> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:t2> = <nat:3> * <var:K> ^ <nat:2> \} \\ <var:t3> := <nat:8> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:t2> = <nat:3> * <var:K> ^ <nat:2> \land <var:t3> = <nat:8> \} \\ <var:t3> := <var:t3> * <var:P> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:t2> = <nat:3> * <var:K> ^ <nat:2> \land <var:t3> = <nat:8> * <var:K> \} \\ <var:t3> := <var:t3> * <var:P> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:t2> = <nat:3> * <var:K> ^ <nat:2> \land <var:t3> = <nat:8> * <var:K> ^ <nat:2> \} \\ <var:t3> := <var:t3> * <var:P> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:t2> = <nat:3> * <var:K> ^ <nat:2> \land <var:t3> = <nat:8> * <var:K> ^ <nat:3> \} \\ <var:w> := <var:t3> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:t2> = <nat:3> * <var:K> ^ <nat:2> \land <var:w> = <nat:8> * <var:K> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:t2> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:t1> = <nat:4> * <var:K> \land <var:w> = <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:t1> ; \\ \{ <var:P> = <var:K> \land <var:t0> = <nat:5> \land <var:w> = <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> \} \\ <var:w> := <var:w> + <var:t0> \\ \{ <var:P> = <var:K> \land <var:w> = <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:5> \} \end{eqnarray} Considering the above , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t0> := <nat:5> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:P> ; <var:t2> := <nat:3> ; <var:t2> := <var:t2> * <var:P> ; <var:t2> := <var:t2> * <var:P> ; <var:t3> := <nat:8> ; <var:t3> := <var:t3> * <var:P> ; <var:t3> := <var:t3> * <var:P> ; <var:t3> := <var:t3> * <var:P> ; <var:w> := <var:t3> ; <var:w> := <var:w> + <var:t2> ; <var:w> := <var:w> + <var:t1> ; <var:w> := <var:w> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:P> = <var:K> }} <def:poly> {{ <var:w> = <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:t2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:t2> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:t2> = <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:t2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:t3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:t2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:t3> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:t2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:t3> = <nat:8> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:t2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:t3> = <nat:8> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:t2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:w> = <nat:8> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:t1> = <nat:4> * <var:K> /\ <var:w> = <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:t0> = <nat:5> /\ <var:w> = <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:w> = <nat:8> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 