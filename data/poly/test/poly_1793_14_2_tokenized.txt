\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N> := <nat:2> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <var:N> * <var:h> ; <var:N> := <nat:1> + <var:N> * <var:h> ; <var:N> := <nat:1> + <var:N> * <var:h> ; <var:N> := <nat:4> + <var:N> * <var:h> ; <var:N> := <nat:4> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:2> + <var:N> * <var:h> ; <var:N> := <nat:4> + <var:N> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Assume that we have $ <var:h> = <var:Y> $ prior to running the set of commands , then we see $ <var:N> = <nat:2> * <var:Y> ^ <nat:13> + <nat:3> * <var:Y> ^ <nat:12> + <nat:3> * <var:Y> ^ <nat:11> + <nat:3> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code is given using the below decorated list of instructions . \begin{eqnarray} \{ <var:h> = <var:Y> \} \\ <var:N> := <nat:2> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> \} \\ <var:N> := <nat:3> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> + <nat:3> \} \\ <var:N> := <nat:3> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} \\ <var:N> := <nat:3> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} \\ <var:N> := <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + \} \\ <var:N> := <nat:1> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> \} \\ <var:N> := <nat:1> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> + <nat:1> \} \\ <var:N> := <nat:4> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> \} \\ <var:N> := <nat:4> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> \} \\ <var:N> := <nat:3> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> \} \\ <var:N> := <nat:3> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} \\ <var:N> := <nat:3> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:11> + <nat:3> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} \\ <var:N> := <nat:2> + <var:N> * <var:h> ; \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:12> + <nat:3> * <var:Y> ^ <nat:11> + <nat:3> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:1> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> \} \\ <var:N> := <nat:4> + <var:N> * <var:h> \\ \{ <var:h> = <var:Y> \land <var:N> = <nat:2> * <var:Y> ^ <nat:13> + <nat:3> * <var:Y> ^ <nat:12> + <nat:3> * <var:Y> ^ <nat:11> + <nat:3> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> \} \end{eqnarray} The application of Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:2> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <var:N> * <var:h> ; <var:N> := <nat:1> + <var:N> * <var:h> ; <var:N> := <nat:1> + <var:N> * <var:h> ; <var:N> := <nat:4> + <var:N> * <var:h> ; <var:N> := <nat:4> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:3> + <var:N> * <var:h> ; <var:N> := <nat:2> + <var:N> * <var:h> ; <var:N> := <nat:4> + <var:N> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:h> = <var:Y> }} <def:poly> {{ <var:N> = <nat:2> * <var:Y> ^ <nat:13> + <nat:3> * <var:Y> ^ <nat:12> + <nat:3> * <var:Y> ^ <nat:11> + <nat:3> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:11> + <nat:3> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:12> + <nat:3> * <var:Y> ^ <nat:11> + <nat:3> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:1> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> ^ <nat:13> + <nat:3> * <var:Y> ^ <nat:12> + <nat:3> * <var:Y> ^ <nat:11> + <nat:3> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 