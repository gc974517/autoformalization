\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:g1> := <var:u> ; <var:g2> := <var:g1> * <var:u> ; <var:g3> := <var:g2> * <var:u> ; <var:g4> := <var:g3> * <var:u> ; <var:g0> := <nat:7> ; <var:g1> := <var:g1> * <nat:7> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:2> ; <var:g4> := <var:g4> * <nat:5> ; <var:M> := <var:g4> <var:M> := <var:M> + <var:g3> <var:M> := <var:M> + <var:g2> <var:M> := <var:M> + <var:g1> <var:M> := <var:M> + <var:g0> \end{verbatim} Allowing it to hold that $ <var:u> = <var:j> $ for every whole numbers $ <var:j> $ prior to executing the list of commands , it follows that $ <var:M> = <nat:5> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> + <nat:7> \cdot <var:j> + <nat:7> $ when series of instructions terminates . \end{theorem} \begin{proof} The method of proof for our list of instructions can be shown by the following decorated series of commands . \begin{eqnarray} \{ <var:u> = <var:j> \} \\ <var:g1> := <var:u> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <var:j> \} \\ <var:g2> := <var:g1> * <var:u> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:u> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \} \\ <var:g4> := <var:g3> * <var:u> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \land <var:g0> = <nat:7> \} \\ <var:g1> := <var:g1> * <nat:7> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <nat:7> \cdot <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \land <var:g0> = <nat:7> \} \\ <var:g2> := <var:g2> * <nat:7> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <nat:7> \cdot <var:j> \land <var:g2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \land <var:g0> = <nat:7> \} \\ <var:g3> := <var:g3> * <nat:2> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <nat:7> \cdot <var:j> \land <var:g2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \land <var:g0> = <nat:7> \} \\ <var:g4> := <var:g4> * <nat:5> ; \\ \{ <var:u> = <var:j> \land <var:g1> = <nat:7> \cdot <var:j> \land <var:g2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:j> ^ <nat:3> \land <var:g4> = <nat:5> \cdot <var:j> ^ <nat:4> \land <var:g0> = <nat:7> \} \\ <var:M> := <var:g4> \\ \{ <var:u> = <var:j> \land <var:g1> = <nat:7> \cdot <var:j> \land <var:g2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:j> ^ <nat:3> \land <var:g0> = <nat:7> \land <var:M> = <nat:5> \cdot <var:j> ^ <nat:4> \} \\ <var:M> := <var:M> + <var:g3> \\ \{ <var:u> = <var:j> \land <var:g1> = <nat:7> \cdot <var:j> \land <var:g2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:g0> = <nat:7> \land <var:M> = <nat:5> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:g2> \\ \{ <var:u> = <var:j> \land <var:g1> = <nat:7> \cdot <var:j> \land <var:g0> = <nat:7> \land <var:M> = <nat:5> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:g1> \\ \{ <var:u> = <var:j> \land <var:g0> = <nat:7> \land <var:M> = <nat:5> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> + <nat:7> \cdot <var:j> \} \\ <var:M> := <var:M> + <var:g0> \\ \{ <var:u> = <var:j> \land <var:M> = <nat:5> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> + <nat:7> \cdot <var:j> + <nat:7> \} \end{eqnarray} Using Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:u> = <var:j> }} <var:g1> := <var:u> ; <var:g2> := <var:g1> * <var:u> ; <var:g3> := <var:g2> * <var:u> ; <var:g4> := <var:g3> * <var:u> ; <var:g0> := <nat:7> ; <var:g1> := <var:g1> * <nat:7> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:2> ; <var:g4> := <var:g4> * <nat:5> ; <var:M> := <var:g4> <var:M> := <var:M> + <var:g3> <var:M> := <var:M> + <var:g2> <var:M> := <var:M> + <var:g1> <var:M> := <var:M> + <var:g0> {{ <var:M> = <nat:5> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:7> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g4> = <var:j> ^ <nat:4> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <nat:7> * <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g4> = <var:j> ^ <nat:4> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <nat:7> * <var:j> /\ <var:g2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g4> = <var:j> ^ <nat:4> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <nat:7> * <var:j> /\ <var:g2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:g4> = <var:j> ^ <nat:4> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <nat:7> * <var:j> /\ <var:g2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:g4> = <nat:5> * <var:j> ^ <nat:4> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <nat:7> * <var:j> /\ <var:g2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:g0> = <nat:7> /\ <var:M> = <nat:5> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <nat:7> * <var:j> /\ <var:g2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:g0> = <nat:7> /\ <var:M> = <nat:5> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g1> = <nat:7> * <var:j> /\ <var:g0> = <nat:7> /\ <var:M> = <nat:5> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:g0> = <nat:7> /\ <var:M> = <nat:5> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:j> /\ <var:M> = <nat:5> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:7> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 