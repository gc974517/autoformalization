\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:1> ; <var:Z> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:v> = <var:B> $ before interpreting this list of instructions it must be that we see $ <var:Z> = <nat:1> $ . \end{theorem} \begin{proof} Using typical Hoare techniques results in : \begin{eqnarray} \{ <var:v> = <var:B> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:v> = <var:B> \land <var:q0> = <nat:1> \} \\ <var:Z> := <var:q0> \\ \{ <var:v> = <var:B> \land <var:Z> = <nat:1> \} \end{eqnarray} As a result , the set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:1> ; <var:Z> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:v> = <var:B> }} <def:poly> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:B> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:B> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 