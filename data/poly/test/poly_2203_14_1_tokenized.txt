\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:m> ; <var:k2> := <var:k1> * <var:m> ; <var:k3> := <var:k2> * <var:m> ; <var:k4> := <var:k3> * <var:m> ; <var:k0> := <nat:8> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:2> ; <var:k4> := <var:k4> * <nat:8> ; <var:C> := <var:k4> <var:C> := <var:C> + <var:k3> <var:C> := <var:C> + <var:k2> <var:C> := <var:C> + <var:k1> <var:C> := <var:C> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:m> = <var:j> $ given some natural numbers $ <var:j> $ ahead of interpreting our list of instructions , it holds that we see $ <var:C> = <nat:8> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for our segment of code can be done by usual Hoare logic . Keeping momentum , the assignment command letting $ <var:m> $ as $ <var:k1>$ . This takes $ \{ <var:m> = <var:j> \} $ as $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \} $ . This is given by the assignment law found in typical Hoare reasoning . Moving forward to the following piece of code contained in our set of instructions , we see the binding code binding $ <var:k1> * <var:m> $ into $ <var:k2>$ . This transfers $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \} $ to the postcondition $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \} $ . This is given using the assignment law given in standard Hoare reasoning . Going forward , we see the assignment line \verb | <var:k3> := <var:k2> * <var:m> ; | . This transfers the condition $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \} $ into the condition $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \} $ . This is sound with the assignment rule in usual Hoare reasoning . Now , the assignment command \verb | <var:k4> := <var:k3> * <var:m> ; | . This transfers $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \} $ into the postcondition $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \} $ . Advancing , we see the variable binding code \verb | <var:k0> := <nat:8> ; | . This forwards the precondition $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \} $ as the postcondition $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ . Shifting focus toward the upcoming command seen in the list of instructions , we have the variable binding command defining $ <var:k1> * <nat:3> $ into $ <var:k1>$ . This command advances the precondition $ \{ <var:m> = <var:j> \land <var:k1> = <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ toward the postcondition $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ . This is deduced through the assignment inference rule in usual Hoare techniques . Jumping to the upcoming command seen in the series of commands , we see the environment update command defining $ <var:k2> * <nat:1> $ to $ <var:k2>$ . This forwards the precondition $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ to the postcondition $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ . This is sound with the assignment law given in typical Hoare reasoning . Immediately following , the variable update line \verb | <var:k3> := <var:k3> * <nat:2> ; | . This code transfers the condition $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k3> = <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ to $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ . Moving forward , we have the variable assignmet statement \verb | <var:k4> := <var:k4> * <nat:8> ; | . This transfers $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:j> ^ <nat:3> \land <var:k4> = <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ to $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:j> ^ <nat:3> \land <var:k4> = <nat:8> \times <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ . Keeping momentum , we see the environment update code binding $ <var:k4$ to $ <var:C>$ . This takes $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:j> ^ <nat:3> \land <var:k4> = <nat:8> \times <var:j> ^ <nat:4> \land <var:k0> = <nat:8> \} $ into the condition $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:j> ^ <nat:3> \land <var:k0> = <nat:8> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> \} $ . Immediately after , we have the binding code defining $ <var:C> + <var:k3$ toward $ <var:C>$ . This command moves $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:j> ^ <nat:3> \land <var:k0> = <nat:8> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> \} $ into the condition $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k0> = <nat:8> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> \} $ . This is known to be sound through the assignment rule defined by usual Hoare reasoning . Jumping to the following bit of code in our list of instructions , the variable binding line binding $ <var:C> + <var:k2$ as $ <var:C>$ . This code takes $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:k0> = <nat:8> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> \} $ to $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k0> = <nat:8> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> \} $ . Further , we see the assignment statement giving $ <var:C> + <var:k1$ as $ <var:C>$ . This redefines the precondition $ \{ <var:m> = <var:j> \land <var:k1> = <nat:3> \times <var:j> \land <var:k0> = <nat:8> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> \} $ to $ \{ <var:m> = <var:j> \land <var:k0> = <nat:8> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> \} $ . Focusing on the proceeding line of code found in our series of instructions , we see the variable update code assigning $ <var:C> + <var:k0$ as $ <var:C>$ . This code advances the condition $ \{ <var:m> = <var:j> \land <var:k0> = <nat:8> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> \} $ into the condition $ \{ <var:m> = <var:j> \land <var:C> = <nat:8> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Definition <def:poly> := <var:k1> := <var:m> ; <var:k2> := <var:k1> * <var:m> ; <var:k3> := <var:k2> * <var:m> ; <var:k4> := <var:k3> * <var:m> ; <var:k0> := <nat:8> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:2> ; <var:k4> := <var:k4> * <nat:8> ; <var:C> := <var:k4> <var:C> := <var:C> + <var:k3> <var:C> := <var:C> + <var:k2> <var:C> := <var:C> + <var:k1> <var:C> := <var:C> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:m> = <var:j> }} <def:poly> {{ <var:C> = <nat:8> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <var:j> /\ <var:k2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <var:j> /\ <var:k2> = <var:j> ^ <nat:2> /\ <var:k3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <var:j> /\ <var:k2> = <var:j> ^ <nat:2> /\ <var:k3> = <var:j> ^ <nat:3> /\ <var:k4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <var:j> /\ <var:k2> = <var:j> ^ <nat:2> /\ <var:k3> = <var:j> ^ <nat:3> /\ <var:k4> = <var:j> ^ <nat:4> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <nat:3> * <var:j> /\ <var:k2> = <var:j> ^ <nat:2> /\ <var:k3> = <var:j> ^ <nat:3> /\ <var:k4> = <var:j> ^ <nat:4> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <nat:3> * <var:j> /\ <var:k2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:k3> = <var:j> ^ <nat:3> /\ <var:k4> = <var:j> ^ <nat:4> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <nat:3> * <var:j> /\ <var:k2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:k4> = <var:j> ^ <nat:4> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <nat:3> * <var:j> /\ <var:k2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:k4> = <nat:8> * <var:j> ^ <nat:4> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <nat:3> * <var:j> /\ <var:k2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:k0> = <nat:8> /\ <var:C> = <nat:8> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <nat:3> * <var:j> /\ <var:k2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:k0> = <nat:8> /\ <var:C> = <nat:8> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k1> = <nat:3> * <var:j> /\ <var:k0> = <nat:8> /\ <var:C> = <nat:8> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:k0> = <nat:8> /\ <var:C> = <nat:8> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:C> = <nat:8> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 