\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:3> ; <var:W> := <var:Y0> \end{verbatim} Assume that we have $ <var:Z> = <var:n> $ , for positive coefficients $ <var:n> $ , ahead of evaluating this set of instructions , it holds that $ <var:W> = <nat:3> $ . \end{theorem} \begin{proof} The argument for this list of commands is evident through standard Hoare techniques . Going forward , we have the assignment statement \verb | <var:Y0> := <nat:3> ; | . This transfers $ \{ <var:Z> = <var:n> \} $ into $ \{ <var:Z> = <var:n> \land <var:Y0> = <nat:3> \} $ . Moving on to the proceeding statement in the program , we see the line \verb | <var:W> := <var:Y0> | . This redefines $ \{ <var:Z> = <var:n> \land <var:Y0> = <nat:3> \} $ toward the condition $ \{ <var:Z> = <var:n> \land <var:W> = <nat:3> \} $ . This is sound using the assignment scheme of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Z> = <var:n> }} <var:Y0> := <nat:3> ; <var:W> := <var:Y0> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 