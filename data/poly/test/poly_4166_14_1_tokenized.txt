\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:Z> ; <var:X2> := <var:X1> * <var:Z> ; <var:X3> := <var:X2> * <var:Z> ; <var:X4> := <var:X3> * <var:Z> ; <var:X0> := <nat:8> ; <var:X1> := <var:X1> * <nat:9> ; <var:X2> := <var:X2> * <nat:4> ; <var:X3> := <var:X3> * <nat:1> ; <var:X4> := <var:X4> * <nat:8> ; <var:i> := <var:X4> <var:i> := <var:i> + <var:X3> <var:i> := <var:i> + <var:X2> <var:i> := <var:i> + <var:X1> <var:i> := <var:i> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Allowing that $ <var:Z> = <var:l> $ prior to the evaluation of this set of instructions it follows that we have $ <var:i> = <nat:8> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning produces : \begin{eqnarray} \{ <var:Z> = <var:l> \} \\ <var:X1> := <var:Z> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <var:l> \} \\ <var:X2> := <var:X1> * <var:Z> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <var:l> \land <var:X2> = <var:l> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:Z> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <var:l> \land <var:X2> = <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \} \\ <var:X4> := <var:X3> * <var:Z> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <var:l> \land <var:X2> = <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \land <var:X4> = <var:l> ^ <nat:4> \} \\ <var:X0> := <nat:8> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <var:l> \land <var:X2> = <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \land <var:X4> = <var:l> ^ <nat:4> \land <var:X0> = <nat:8> \} \\ <var:X1> := <var:X1> * <nat:9> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <nat:9> \times <var:l> \land <var:X2> = <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \land <var:X4> = <var:l> ^ <nat:4> \land <var:X0> = <nat:8> \} \\ <var:X2> := <var:X2> * <nat:4> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <nat:9> \times <var:l> \land <var:X2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \land <var:X4> = <var:l> ^ <nat:4> \land <var:X0> = <nat:8> \} \\ <var:X3> := <var:X3> * <nat:1> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <nat:9> \times <var:l> \land <var:X2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:X3> = <nat:1> \times <var:l> ^ <nat:3> \land <var:X4> = <var:l> ^ <nat:4> \land <var:X0> = <nat:8> \} \\ <var:X4> := <var:X4> * <nat:8> ; \\ \{ <var:Z> = <var:l> \land <var:X1> = <nat:9> \times <var:l> \land <var:X2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:X3> = <nat:1> \times <var:l> ^ <nat:3> \land <var:X4> = <nat:8> \times <var:l> ^ <nat:4> \land <var:X0> = <nat:8> \} \\ <var:i> := <var:X4> \\ \{ <var:Z> = <var:l> \land <var:X1> = <nat:9> \times <var:l> \land <var:X2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:X3> = <nat:1> \times <var:l> ^ <nat:3> \land <var:X0> = <nat:8> \land <var:i> = <nat:8> \times <var:l> ^ <nat:4> \} \\ <var:i> := <var:i> + <var:X3> \\ \{ <var:Z> = <var:l> \land <var:X1> = <nat:9> \times <var:l> \land <var:X2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:X0> = <nat:8> \land <var:i> = <nat:8> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:X2> \\ \{ <var:Z> = <var:l> \land <var:X1> = <nat:9> \times <var:l> \land <var:X0> = <nat:8> \land <var:i> = <nat:8> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:X1> \\ \{ <var:Z> = <var:l> \land <var:X0> = <nat:8> \land <var:i> = <nat:8> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:9> \times <var:l> \} \\ <var:i> := <var:i> + <var:X0> \\ \{ <var:Z> = <var:l> \land <var:i> = <nat:8> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:9> \times <var:l> + <nat:8> \} \end{eqnarray} As a consequence , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <var:X4> : string := " <var:X4> " . Definition <def:poly> := <var:X1> := <var:Z> ; <var:X2> := <var:X1> * <var:Z> ; <var:X3> := <var:X2> * <var:Z> ; <var:X4> := <var:X3> * <var:Z> ; <var:X0> := <nat:8> ; <var:X1> := <var:X1> * <nat:9> ; <var:X2> := <var:X2> * <nat:4> ; <var:X3> := <var:X3> * <nat:1> ; <var:X4> := <var:X4> * <nat:8> ; <var:i> := <var:X4> <var:i> := <var:i> + <var:X3> <var:i> := <var:i> + <var:X2> <var:i> := <var:i> + <var:X1> <var:i> := <var:i> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Z> = <var:l> }} <def:poly> {{ <var:i> = <nat:8> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <var:l> /\ <var:X2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <var:l> /\ <var:X2> = <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <var:l> /\ <var:X2> = <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> /\ <var:X4> = <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <var:l> /\ <var:X2> = <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> /\ <var:X4> = <var:l> ^ <nat:4> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> /\ <var:X4> = <var:l> ^ <nat:4> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> /\ <var:X4> = <var:l> ^ <nat:4> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:l> ^ <nat:3> /\ <var:X4> = <var:l> ^ <nat:4> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:l> ^ <nat:3> /\ <var:X4> = <nat:8> * <var:l> ^ <nat:4> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:l> ^ <nat:3> /\ <var:X0> = <nat:8> /\ <var:i> = <nat:8> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:X0> = <nat:8> /\ <var:i> = <nat:8> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X0> = <nat:8> /\ <var:i> = <nat:8> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:X0> = <nat:8> /\ <var:i> = <nat:8> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:i> = <nat:8> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 