\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G1> := <var:A> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:2> ; <var:j> := <var:G1> <var:j> := <var:j> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:A> = <var:O> $ prior to the evaluation of the list of commands it follows that we have $ <var:j> = <nat:2> \times <var:O> + <nat:3> $ after series of instructions is done . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:A> = <var:O> \} \\ <var:G1> := <var:A> ; \\ \{ <var:A> = <var:O> \land <var:G1> = <var:O> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:A> = <var:O> \land <var:G1> = <var:O> \land <var:G0> = <nat:3> \} \\ <var:G1> := <var:G1> * <nat:2> ; \\ \{ <var:A> = <var:O> \land <var:G1> = <nat:2> \times <var:O> \land <var:G0> = <nat:3> \} \\ <var:j> := <var:G1> \\ \{ <var:A> = <var:O> \land <var:G0> = <nat:3> \land <var:j> = <nat:2> \times <var:O> \} \\ <var:j> := <var:j> + <var:G0> \\ \{ <var:A> = <var:O> \land <var:j> = <nat:2> \times <var:O> + <nat:3> \} \end{eqnarray} Therefore , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:A> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:2> ; <var:j> := <var:G1> <var:j> := <var:j> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:A> = <var:O> }} <def:poly> {{ <var:j> = <nat:2> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:G1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:G1> = <var:O> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:G1> = <nat:2> * <var:O> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:G0> = <nat:3> /\ <var:j> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:j> = <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 