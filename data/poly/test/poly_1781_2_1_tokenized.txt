\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:1> ; <var:Z> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming , letting whole numbers $ <var:M> $ , that $ <var:m> = <var:M> $ ahead of executing our segment of code it holds that $ <var:Z> = <nat:1> $ once series of instructions finishes . \end{theorem} \begin{proof} Using usual Hoare reasoning produces : \begin{eqnarray} \{ <var:m> = <var:M> \} \\ <var:R0> := <nat:1> ; \\ \{ <var:m> = <var:M> \land <var:R0> = <nat:1> \} \\ <var:Z> := <var:R0> \\ \{ <var:m> = <var:M> \land <var:Z> = <nat:1> \} \end{eqnarray} Hence , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:1> ; <var:Z> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:m> = <var:M> }} <def:poly> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 