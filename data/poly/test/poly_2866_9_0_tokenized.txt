\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:8> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:X> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:X> ; <var:G2> := <var:G2> * <var:X> ; <var:i> := <var:G2> ; <var:i> := <var:i> + <var:G1> ; <var:i> := <var:i> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Given , for all $ <var:t> $ , it to hold that $ <var:X> = <var:t> $ before running this list of commands , it follows that $ <var:i> = <nat:3> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:t> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:X> = <var:t> \land <var:G0> = <nat:8> \} \\ <var:G1> := <nat:3> ; \\ \{ <var:X> = <var:t> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \} \\ <var:G1> := <var:G1> * <var:X> ; \\ \{ <var:X> = <var:t> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \times <var:t> \} \\ <var:G2> := <nat:3> ; \\ \{ <var:X> = <var:t> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \times <var:t> \land <var:G2> = <nat:3> \} \\ <var:G2> := <var:G2> * <var:X> ; \\ \{ <var:X> = <var:t> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \times <var:t> \land <var:G2> = <nat:3> \times <var:t> \} \\ <var:G2> := <var:G2> * <var:X> ; \\ \{ <var:X> = <var:t> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \times <var:t> \land <var:G2> = <nat:3> \times <var:t> ^ <nat:2> \} \\ <var:i> := <var:G2> ; \\ \{ <var:X> = <var:t> \land <var:G0> = <nat:8> \land <var:G1> = <nat:3> \times <var:t> \land <var:i> = <nat:3> \times <var:t> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:G1> ; \\ \{ <var:X> = <var:t> \land <var:G0> = <nat:8> \land <var:i> = <nat:3> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> \} \\ <var:i> := <var:i> + <var:G0> \\ \{ <var:X> = <var:t> \land <var:i> = <nat:3> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:8> \} \end{eqnarray} Using usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:X> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:X> ; <var:G2> := <var:G2> * <var:X> ; <var:i> := <var:G2> ; <var:i> := <var:i> + <var:G1> ; <var:i> := <var:i> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:X> = <var:t> }} <def:poly> {{ <var:i> = <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:3> * <var:t> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:3> * <var:t> /\ <var:G2> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:3> * <var:t> /\ <var:G2> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:3> * <var:t> /\ <var:i> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:G0> = <nat:8> /\ <var:i> = <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:i> = <nat:3> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 