\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:I> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:6> ; <var:d> := <var:h1> <var:d> := <var:d> + <var:h0> \end{verbatim} Allow ( assuming some natural numbers $ <var:W> $ ) $ <var:I> = <var:W> $ prior to the evaluation of this code it follows that we see $ <var:d> = <nat:6> * <var:W> + <nat:4> $ when program has executed . \end{theorem} \begin{proof} The argument for the program is shown through usual Hoare reasoning . Moving on to the next command contained in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:I> = <var:W> \} & <var:h1> := <var:I> & \{ <var:I> = <var:W> \land <var:h1> = <var:W> \} \end{tabular} This is sound through the inference rule in Hoare techniques . Stepping forward , \[ \begin{tabular} {rcl} \{ <var:I> = <var:W> \} & <var:h1> := <var:I> & \{ <var:I> = <var:W> \land <var:h1> = <var:W> \} \\ \{ <var:I> = <var:W> \land <var:h1> = <var:W> \} & <var:h0> := <nat:4> & \{ <var:I> = <var:W> \land <var:h1> = <var:W> \land <var:h0> = <nat:4> \} \end{tabular} This is ensured through the environment update rule obtained from standard Hoare techniques . Considering the proceeding pieces of code seen in the program , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:W> \} & <var:h1> := <var:I> & \{ <var:I> = <var:W> \land <var:h1> = <var:W> \} \\ \{ <var:I> = <var:W> \land <var:h1> = <var:W> \} & <var:h0> := <nat:4> & \{ <var:I> = <var:W> \land <var:h1> = <var:W> \land <var:h0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:I> = <var:W> }} <var:h1> := <var:I> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:6> ; <var:d> := <var:h1> <var:d> := <var:d> + <var:h0> {{ <var:d> = <nat:6> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:h1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:h1> = <var:W> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:h1> = <nat:6> * <var:W> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:h0> = <nat:4> /\ <var:d> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:d> = <nat:6> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 