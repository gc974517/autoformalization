\begin{document} \begin{theorem} Take a list of instructions as \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:c> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:c> ; <var:p2> := <var:p2> * <var:c> ; <var:p3> := <nat:2> ; <var:p3> := <var:p3> * <var:c> ; <var:p3> := <var:p3> * <var:c> ; <var:p3> := <var:p3> * <var:c> ; <var:G> := <var:p3> ; <var:G> := <var:G> + <var:p2> ; <var:G> := <var:G> + <var:p1> ; <var:G> := <var:G> + <var:p0> \end{verbatim} Assume for whole numbers $ <var:m> $ it to be that $ <var:c> = <var:m> $ ahead of the evaluation of our program then $ <var:G> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> + <nat:3> $ when list of instructions has exited . \end{theorem} \begin{proof} The argument for our series of commands is clear with Hoare techniques . Taking a look at the proceeding commands seen in the segment of code , we have \begin{verbatim} { <var:c> = <var:m> } <var:p0> := <nat:3> { <var:c> = <var:m> \land <var:p0> = <nat:3> } { <var:c> = <var:m> \land <var:p0> = <nat:3> } <var:p1> := <nat:9> { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> } \end{verbatim} This is shown to be logically sound using the binding law found in typical Hoare techniques . Looking at the upcoming lines seen in our code , we have \begin{verbatim} { <var:c> = <var:m> } <var:p0> := <nat:3> { <var:c> = <var:m> \land <var:p0> = <nat:3> } { <var:c> = <var:m> \land <var:p0> = <nat:3> } <var:p1> := <nat:9> { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> } { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> } <var:p1> := <var:p1> * <var:c> { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> } { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> } <var:p2> := <nat:1> { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> \land <var:p2> = <nat:1> } { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> \land <var:p2> = <nat:1> } <var:p2> := <var:p2> * <var:c> { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> \land <var:p2> = <nat:1> \cdot <var:m> } { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> \land <var:p2> = <nat:1> \cdot <var:m> } <var:p2> := <var:p2> * <var:c> { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> \land <var:p2> = <nat:1> \cdot <var:m> ^ <nat:2> } { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> \land <var:p2> = <nat:1> \cdot <var:m> ^ <nat:2> } <var:p3> := <nat:2> { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \cdot <var:m> \land <var:p2> = <nat:1> \cdot <var:m> ^ <nat:2> \land <var:p3> = <nat:2> } \end{verbatim} Further , we have \begin{verbatim} { <var:c> = <var:m> } <var:p0> := <nat:3> { <var:c> = <var:m> \land <var:p0> = <nat:3> } \end{verbatim} This is given using the environment update scheme given in Hoare techniques . Further , we have \begin{verbatim} { <var:c> = <var:m> } <var:p0> := <nat:3> { <var:c> = <var:m> \land <var:p0> = <nat:3> } { <var:c> = <var:m> \land <var:p0> = <nat:3> } <var:p1> := <nat:9> { <var:c> = <var:m> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> } \end{verbatim} Taking a look at the subsequent line of code seen in our list of commands , we have \begin{verbatim} { <var:c> = <var:m> } <var:p0> := <nat:3> { <var:c> = <var:m> \land <var:p0> = <nat:3> } \end{verbatim} Observing the proceeding command in the set of instructions , \begin{verbatim} { <var:c> = <var:m> } <var:p0> := <nat:3> { <var:c> = <var:m> \land <var:p0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:c> = <var:m> }} <var:p0> := <nat:3> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:c> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:c> ; <var:p2> := <var:p2> * <var:c> ; <var:p3> := <nat:2> ; <var:p3> := <var:p3> * <var:c> ; <var:p3> := <var:p3> * <var:c> ; <var:p3> := <var:p3> * <var:c> ; <var:G> := <var:p3> ; <var:G> := <var:G> + <var:p2> ; <var:G> := <var:G> + <var:p1> ; <var:G> := <var:G> + <var:p0> {{ <var:G> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:p2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:p2> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:p2> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:p2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:p2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:p2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:p2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:p2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:G> = <nat:2> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:m> /\ <var:G> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:p0> = <nat:3> /\ <var:G> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:m> /\ <var:G> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 