\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:7> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:a> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:a> ; <var:A2> := <var:A2> * <var:a> ; <var:A3> := <nat:5> ; <var:A3> := <var:A3> * <var:a> ; <var:A3> := <var:A3> * <var:a> ; <var:A3> := <var:A3> * <var:a> ; <var:s> := <var:A3> ; <var:s> := <var:s> + <var:A2> ; <var:s> := <var:s> + <var:A1> ; <var:s> := <var:s> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:a> = <var:J> $ prior to interpreting the set of commands it must be that we see $ <var:s> = <nat:5> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:6> \cdot <var:J> + <nat:7> $ . \end{theorem} \begin{proof} The argument for our program can be done by typical Hoare reasoning . Focusing on the following command in the list of instructions , we have the command \verb | <var:A0> := <nat:7> ; | . This takes the condition $ \{ <var:a> = <var:J> \} $ as $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \} $ . This is shown to be logically sound by the assignment rule defined in typical Hoare reasoning . Focusing on the proceeding bit of code seen in our series of commands , we see the environment update command binding $ <nat:6> $ to $ <var:A1>$ . This command advances $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \} $ toward $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> \} $ . Immediately following , the variable assignmet command letting $ <var:A1> * <var:a> $ to $ <var:A1>$ . This takes $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> \} $ to the postcondition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \} $ . This is deduced using the assignment rule defined by Hoare reasoning . Shifting focus toward the upcoming piece of code seen in the code , we see the assignment code \verb | <var:A2> := <nat:2> ; | . This code forwards $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \} $ toward $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> \} $ . This is deduced with the assignment inference rule defined by typical Hoare logic . Observing the next command contained in our code segment , we have the variable binding statement \verb | <var:A2> := <var:A2> * <var:a> ; | . This redefines the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> \} $ . Taking another step toward the following statement in our list of commands , the binding statement \verb | <var:A2> := <var:A2> * <var:a> ; | . This command takes the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> \} $ as the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \} $ . Looking at the subsequent line of code found in the code segment , we have the variable assignmet command assigning $ <nat:5> $ as $ <var:A3>$ . This line redefines $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \} $ to the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:A3> = <nat:5> \} $ . Following , we see the assignment code letting $ <var:A3> * <var:a> $ toward $ <var:A3>$ . This moves the precondition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:A3> = <nat:5> \} $ as the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:A3> = <nat:5> * <var:J> \} $ . This is shown with the assignment scheme from Hoare logic . Immediately following , we have the binding line giving $ <var:A3> * <var:a> $ to $ <var:A3>$ . This code transfers $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:A3> = <nat:5> * <var:J> \} $ as $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:A3> = <nat:5> * <var:J> ^ <nat:2> \} $ . Advancing to the next statement in our program , we see the environment update statement \verb | <var:A3> := <var:A3> * <var:a> ; | . This transfers the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:A3> = <nat:5> * <var:J> ^ <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:A3> = <nat:5> * <var:J> ^ <nat:3> \} $ . Paying attention to the next bit of code found in the list of instructions , the variable binding command defining $ <var:A3> $ into $ <var:s>$ . This moves $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:A3> = <nat:5> * <var:J> ^ <nat:3> \} $ toward the postcondition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:s> = <nat:5> * <var:J> ^ <nat:3> \} $ . Taking a look at the proceeding statement in our list of commands , we have the assignment code \verb | <var:s> := <var:s> + <var:A2> ; | . This line moves the precondition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:A2> = <nat:2> * <var:J> ^ <nat:2> \land <var:s> = <nat:5> * <var:J> ^ <nat:3> \} $ as $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> \} $ . Going to the next step , we see the variable assignmet statement binding $ <var:s> + <var:A1> $ as $ <var:s>$ . This advances the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> * <var:J> \land <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> \} $ into the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:6> * <var:J> \} $ . Going forward , we have the line \verb | <var:s> := <var:s> + <var:A0> | . This takes the condition $ \{ <var:a> = <var:J> \land <var:A0> = <nat:7> \land <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:6> * <var:J> \} $ into the postcondition $ \{ <var:a> = <var:J> \land <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:7> \} $ . This is given by the assignment inference rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A0> := <nat:7> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:a> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:a> ; <var:A2> := <var:A2> * <var:a> ; <var:A3> := <nat:5> ; <var:A3> := <var:A3> * <var:a> ; <var:A3> := <var:A3> * <var:a> ; <var:A3> := <var:A3> * <var:a> ; <var:s> := <var:A3> ; <var:s> := <var:s> + <var:A2> ; <var:s> := <var:s> + <var:A1> ; <var:s> := <var:s> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:a> = <var:J> }} <def:poly> {{ <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:A2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:A2> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:A2> = <nat:2> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:A2> = <nat:2> * <var:J> ^ <nat:2> /\ <var:A3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:A2> = <nat:2> * <var:J> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:A2> = <nat:2> * <var:J> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:A2> = <nat:2> * <var:J> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:A2> = <nat:2> * <var:J> ^ <nat:2> /\ <var:s> = <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:J> /\ <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:A0> = <nat:7> /\ <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:s> = <nat:5> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 