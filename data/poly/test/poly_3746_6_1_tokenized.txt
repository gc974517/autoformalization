\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} : \begin{verbatim} <var:B1> := <var:d> ; <var:B2> := <var:B1> * <var:d> ; <var:B0> := <nat:3> ; <var:B2> := <var:B2> * <nat:1> ; <var:M> := <var:B2> <var:M> := <var:M> + <var:B0> \end{verbatim} Assume that we have $ <var:d> = <var:c> $ ahead of interpreting our set of commands , it must be that we see $ <var:M> = <nat:1> \cdot <var:c> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the program can be shown using standard Hoare logic . Paying attention to the proceeding bit of code contained in our code segment , we have \begin{eqnarray} \{ <var:d> = <var:c> \} \, <var:B1> := <var:d> \, \{ <var:d> = <var:c> \land <var:B1> = <var:c> \} \end{eqnarray} After , we see \begin{eqnarray} \{ <var:d> = <var:c> \} \, <var:B1> := <var:d> \, \{ <var:d> = <var:c> \land <var:B1> = <var:c> \} \\ \{ <var:d> = <var:c> \land <var:B1> = <var:c> \} \, <var:B2> := <var:B1> * <var:d> \, \{ <var:d> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \} \\ \{ <var:d> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \} \, <var:B0> := <nat:3> \, \{ <var:d> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B0> = <nat:3> \} \\ \{ <var:d> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <var:c> ^ <nat:2> \land <var:B0> = <nat:3> \} \, <var:B2> := <var:B2> * <nat:1> \, \{ <var:d> = <var:c> \land <var:B1> = <var:c> \land <var:B2> = <nat:1> \times <var:c> ^ <nat:2> \land <var:B0> = <nat:3> \} \end{eqnarray} This is sound using the environment update inference rule defined in standard Hoare reasoning . Advancing to the next step , we have \begin{eqnarray} \{ <var:d> = <var:c> \} \, <var:B1> := <var:d> \, \{ <var:d> = <var:c> \land <var:B1> = <var:c> \} \end{eqnarray} This is shown with the assignment law given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:d> = <var:c> }} <var:B1> := <var:d> ; <var:B2> := <var:B1> * <var:d> ; <var:B0> := <nat:3> ; <var:B2> := <var:B2> * <nat:1> ; <var:M> := <var:B2> <var:M> := <var:M> + <var:B0> {{ <var:M> = <nat:1> * <var:c> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:B1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:B1> = <var:c> /\ <var:B2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:B1> = <var:c> /\ <var:B2> = <var:c> ^ <nat:2> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:B1> = <var:c> /\ <var:B2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:B1> = <var:c> /\ <var:B0> = <nat:3> /\ <var:M> = <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:M> = <nat:1> * <var:c> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 