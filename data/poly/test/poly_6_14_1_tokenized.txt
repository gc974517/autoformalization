\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:s> ; <var:d2> := <var:d1> * <var:s> ; <var:d3> := <var:d2> * <var:s> ; <var:d4> := <var:d3> * <var:s> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:4> ; <var:d3> := <var:d3> * <nat:9> ; <var:d4> := <var:d4> * <nat:8> ; <var:z> := <var:d4> <var:z> := <var:z> + <var:d3> <var:z> := <var:z> + <var:d2> <var:z> := <var:z> + <var:d1> <var:z> := <var:z> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Assume $ <var:s> = <var:w> $ prior to running the program then $ <var:z> = <nat:8> \times <var:w> ^ <nat:4> + <nat:9> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:7> \times <var:w> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of the segment of code is demonstrated by standard Hoare logic . Advancing to the subsequent statement found in our series of commands , we have the variable update command \verb | <var:d1> := <var:s> ; | . This statement moves the condition $ \{ <var:s> = <var:w> \} $ toward the condition $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \} $ . This is deduced by the assignment rule given by typical Hoare techniques . Moving forward to the next step in the series of instructions , the variable update command \verb | <var:d2> := <var:d1> * <var:s> ; | . This forwards the precondition $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \} $ as $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \land <var:d2> = <var:w> ^ <nat:2> \} $ . This is deduced with the assignment rule from usual Hoare reasoning . Considering the next line of code seen in our list of instructions , we have the environment update statement \verb | <var:d3> := <var:d2> * <var:s> ; | . This takes the condition $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \land <var:d2> = <var:w> ^ <nat:2> \} $ to the condition $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \land <var:d2> = <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \} $ . Focusing on the proceeding command in our code , the environment update line defining $ <var:d3> * <var:s> $ into $ <var:d4>$ . This code advances $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \land <var:d2> = <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \} $ to the condition $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \land <var:d2> = <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \} $ . Keeping momentum , the binding line letting $ <nat:8> $ to $ <var:d0>$ . This transfers the condition $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \land <var:d2> = <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \} $ toward $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \land <var:d2> = <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ . Stepping forward , we see the assignment command \verb | <var:d1> := <var:d1> * <nat:7> ; | . This statement takes the precondition $ \{ <var:s> = <var:w> \land <var:d1> = <var:w> \land <var:d2> = <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ to $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ . This is rigorously given using the assignment law of Hoare techniques . Jumping to the next line found in our program , the binding statement binding $ <var:d2> * <nat:4> $ into $ <var:d2>$ . This moves the condition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ into $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ . Advancing to the upcoming statement in our set of commands , we have the environment update command binding $ <var:d3> * <nat:9> $ into $ <var:d3>$ . This forwards the precondition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d3> = <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ toward the postcondition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d3> = <nat:9> * <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ . This is rigorously given using the assignment scheme obtained from standard Hoare techniques . Taking a look at the subsequent step seen in the set of commands , we have the variable binding code letting $ <var:d4> * <nat:8> $ toward $ <var:d4>$ . This code takes the condition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d3> = <nat:9> * <var:w> ^ <nat:3> \land <var:d4> = <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ as the condition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d3> = <nat:9> * <var:w> ^ <nat:3> \land <var:d4> = <nat:8> * <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ . Paying attention to the subsequent piece of code in the set of commands , the environment update code \verb | <var:z> := <var:d4> | . This command transfers the precondition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d3> = <nat:9> * <var:w> ^ <nat:3> \land <var:d4> = <nat:8> * <var:w> ^ <nat:4> \land <var:d0> = <nat:8> \} $ into the condition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d3> = <nat:9> * <var:w> ^ <nat:3> \land <var:d0> = <nat:8> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> \} $ . Looking at the following line in the list of commands , we have the variable binding code defining $ <var:z> + <var:d3$ toward $ <var:z>$ . This forwards $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d3> = <nat:9> * <var:w> ^ <nat:3> \land <var:d0> = <nat:8> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> \} $ into the condition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d0> = <nat:8> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> \} $ . This is shown using the assignment rule found in standard Hoare reasoning . Going to the next step , the statement binding $ <var:z> + <var:d2$ to $ <var:z>$ . This moves the condition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d2> = <nat:4> * <var:w> ^ <nat:2> \land <var:d0> = <nat:8> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> \} $ into the condition $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d0> = <nat:8> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> \} $ . This is rigorously given by the assignment scheme of standard Hoare logic . Considering the proceeding command contained in the segment of code , we see the variable assignmet code defining $ <var:z> + <var:d1$ toward $ <var:z>$ . This code advances $ \{ <var:s> = <var:w> \land <var:d1> = <nat:7> * <var:w> \land <var:d0> = <nat:8> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> \} $ toward the condition $ \{ <var:s> = <var:w> \land <var:d0> = <nat:8> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> \} $ . This is shown through the assignment scheme in standard Hoare reasoning . Observing the proceeding line contained in the segment of code , we see the binding code \verb | <var:z> := <var:z> + <var:d0> | . This command forwards $ \{ <var:s> = <var:w> \land <var:d0> = <nat:8> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> \} $ as $ \{ <var:s> = <var:w> \land <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Definition <def:poly> := <var:d1> := <var:s> ; <var:d2> := <var:d1> * <var:s> ; <var:d3> := <var:d2> * <var:s> ; <var:d4> := <var:d3> * <var:s> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:4> ; <var:d3> := <var:d3> * <nat:9> ; <var:d4> := <var:d4> * <nat:8> ; <var:z> := <var:d4> <var:z> := <var:z> + <var:d3> <var:z> := <var:z> + <var:d2> <var:z> := <var:z> + <var:d1> <var:z> := <var:z> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:s> = <var:w> }} <def:poly> {{ <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <var:w> /\ <var:d2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <var:w> /\ <var:d2> = <var:w> ^ <nat:2> /\ <var:d3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <var:w> /\ <var:d2> = <var:w> ^ <nat:2> /\ <var:d3> = <var:w> ^ <nat:3> /\ <var:d4> = <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <var:w> /\ <var:d2> = <var:w> ^ <nat:2> /\ <var:d3> = <var:w> ^ <nat:3> /\ <var:d4> = <var:w> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <nat:7> * <var:w> /\ <var:d2> = <var:w> ^ <nat:2> /\ <var:d3> = <var:w> ^ <nat:3> /\ <var:d4> = <var:w> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <nat:7> * <var:w> /\ <var:d2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:d3> = <var:w> ^ <nat:3> /\ <var:d4> = <var:w> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <nat:7> * <var:w> /\ <var:d2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:w> ^ <nat:3> /\ <var:d4> = <var:w> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <nat:7> * <var:w> /\ <var:d2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:w> ^ <nat:3> /\ <var:d4> = <nat:8> * <var:w> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <nat:7> * <var:w> /\ <var:d2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:w> ^ <nat:3> /\ <var:d0> = <nat:8> /\ <var:z> = <nat:8> * <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <nat:7> * <var:w> /\ <var:d2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:d0> = <nat:8> /\ <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d1> = <nat:7> * <var:w> /\ <var:d0> = <nat:8> /\ <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:d0> = <nat:8> /\ <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:z> = <nat:8> * <var:w> ^ <nat:4> + <nat:9> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 