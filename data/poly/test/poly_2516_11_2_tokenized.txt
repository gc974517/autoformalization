\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <var:E> * <var:D> ; <var:E> := <nat:4> + <var:E> * <var:D> ; <var:E> := <nat:1> + <var:E> * <var:D> ; <var:E> := <nat:1> + <var:E> * <var:D> ; <var:E> := <nat:2> + <var:E> * <var:D> ; <var:E> := <nat:4> + <var:E> * <var:D> ; <var:E> := <nat:3> + <var:E> * <var:D> ; <var:E> := <nat:2> + <var:E> * <var:D> ; <var:E> := <nat:1> + <var:E> * <var:D> ; <var:E> := <nat:4> + <var:E> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Allowing ( given all $ <var:e> \in \mathbb{Z}^+ $ ) it to hold that $ <var:D> = <var:e> $ before the execution of the series of commands it must be that we see $ <var:E> = <nat:3> * <var:e> ^ <nat:10> + <nat:4> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program is evident by standard Hoare techniques . Moving forward to the upcoming pieces of code seen in our segment of code , we have \begin{verbatim} { <var:D> = <var:e> } <var:E> := <nat:3> { <var:D> = <var:e> \land <var:E> = <nat:3> } { <var:D> = <var:e> \land <var:E> = <nat:3> } <var:E> := <var:E> * <var:D> { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> + } { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> + } <var:E> := <nat:4> + <var:E> * <var:D> { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> } { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> } <var:E> := <nat:1> + <var:E> * <var:D> { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:1> } \end{verbatim} This is deduced with the binding inference rule of typical Hoare logic . Moving on to the proceeding commands contained in our set of commands , \begin{verbatim} { <var:D> = <var:e> } <var:E> := <nat:3> { <var:D> = <var:e> \land <var:E> = <nat:3> } { <var:D> = <var:e> \land <var:E> = <nat:3> } <var:E> := <var:E> * <var:D> { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> + } { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> + } <var:E> := <nat:4> + <var:E> * <var:D> { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> } { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> } <var:E> := <nat:1> + <var:E> * <var:D> { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:1> } \end{verbatim} This is known to be sound by the assignment rule of Hoare reasoning . Observing the next bits of codein our list of instructions , we have \begin{verbatim} { <var:D> = <var:e> } <var:E> := <nat:3> { <var:D> = <var:e> \land <var:E> = <nat:3> } { <var:D> = <var:e> \land <var:E> = <nat:3> } <var:E> := <var:E> * <var:D> { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> + } { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> + } <var:E> := <nat:4> + <var:E> * <var:D> { <var:D> = <var:e> \land <var:E> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> } \end{verbatim} This is ensured with the variable update rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:3> ; <var:E> := <var:E> * <var:D> ; <var:E> := <nat:4> + <var:E> * <var:D> ; <var:E> := <nat:1> + <var:E> * <var:D> ; <var:E> := <nat:1> + <var:E> * <var:D> ; <var:E> := <nat:2> + <var:E> * <var:D> ; <var:E> := <nat:4> + <var:E> * <var:D> ; <var:E> := <nat:3> + <var:E> * <var:D> ; <var:E> := <nat:2> + <var:E> * <var:D> ; <var:E> := <nat:1> + <var:E> * <var:D> ; <var:E> := <nat:4> + <var:E> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:D> = <var:e> }} <def:poly> {{ <var:E> = <nat:3> * <var:e> ^ <nat:10> + <nat:4> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:9> + <nat:4> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:e> /\ <var:E> = <nat:3> * <var:e> ^ <nat:10> + <nat:4> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 