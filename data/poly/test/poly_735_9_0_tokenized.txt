\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:3> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:x> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:x> ; <var:n2> := <var:n2> * <var:x> ; <var:k> := <var:n2> ; <var:k> := <var:k> + <var:n1> ; <var:k> := <var:k> + <var:n0> \end{verbatim} Allow --- given all $ <var:r> \in \mathbb{Z}^+ $ --- $ <var:x> = <var:r> $ before the execution of the series of instructions , then we see $ <var:k> = <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this segment of code is demonstrated with the following decorated list of instructions . \begin{eqnarray} \{ <var:x> = <var:r> \} \\ <var:n0> := <nat:3> ; \\ \{ <var:x> = <var:r> \land <var:n0> = <nat:3> \} \\ <var:n1> := <nat:2> ; \\ \{ <var:x> = <var:r> \land <var:n0> = <nat:3> \land <var:n1> = <nat:2> \} \\ <var:n1> := <var:n1> * <var:x> ; \\ \{ <var:x> = <var:r> \land <var:n0> = <nat:3> \land <var:n1> = <nat:2> * <var:r> \} \\ <var:n2> := <nat:4> ; \\ \{ <var:x> = <var:r> \land <var:n0> = <nat:3> \land <var:n1> = <nat:2> * <var:r> \land <var:n2> = <nat:4> \} \\ <var:n2> := <var:n2> * <var:x> ; \\ \{ <var:x> = <var:r> \land <var:n0> = <nat:3> \land <var:n1> = <nat:2> * <var:r> \land <var:n2> = <nat:4> * <var:r> \} \\ <var:n2> := <var:n2> * <var:x> ; \\ \{ <var:x> = <var:r> \land <var:n0> = <nat:3> \land <var:n1> = <nat:2> * <var:r> \land <var:n2> = <nat:4> * <var:r> ^ <nat:2> \} \\ <var:k> := <var:n2> ; \\ \{ <var:x> = <var:r> \land <var:n0> = <nat:3> \land <var:n1> = <nat:2> * <var:r> \land <var:k> = <nat:4> * <var:r> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:n1> ; \\ \{ <var:x> = <var:r> \land <var:n0> = <nat:3> \land <var:k> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> \} \\ <var:k> := <var:k> + <var:n0> \\ \{ <var:x> = <var:r> \land <var:k> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> \} \end{eqnarray} Furthering the evaluation of this series of instructions gives : \begin{eqnarray} \end{eqnarray} Using standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:x> = <var:r> }} <var:n0> := <nat:3> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:x> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:x> ; <var:n2> := <var:n2> * <var:x> ; <var:k> := <var:n2> ; <var:k> := <var:k> + <var:n1> ; <var:k> := <var:k> + <var:n0> {{ <var:k> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:2> * <var:r> /\ <var:n2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:2> * <var:r> /\ <var:n2> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:2> * <var:r> /\ <var:n2> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:2> * <var:r> /\ <var:k> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n0> = <nat:3> /\ <var:k> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:k> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 