\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:2> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:t> ; <var:k2> := <var:k2> * <var:t> ; <var:d> := <var:k2> ; <var:d> := <var:d> + <var:k0> \end{verbatim} Allowing that we have $ <var:t> = <var:I> $ before evaluating our series of commands , it follows that we see $ <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> $ when set of instructions has finished . \end{theorem} \begin{proof} The course of logic for this set of commands can be accomplished with standard Hoare logic . Looking at the subsequent lines of codecontained in the list of instructions , \begin{eqnarray} \{ <var:t> = <var:I> \} \, <var:k0> := <nat:2> \, \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \} \\ \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \} \, <var:k2> := <nat:3> \, \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \land <var:k2> = <nat:3> \} \\ \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \land <var:k2> = <nat:3> \} \, <var:k2> := <var:k2> * <var:t> \, \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \land <var:k2> = <nat:3> \cdot <var:I> \} \\ \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \land <var:k2> = <nat:3> \cdot <var:I> \} \, <var:k2> := <var:k2> * <var:t> \, \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \land <var:k2> = <nat:3> \cdot <var:I> ^ <nat:2> \} \\ \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \land <var:k2> = <nat:3> \cdot <var:I> ^ <nat:2> \} \, <var:d> := <var:k2> \, \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \land <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> \} \\ \{ <var:t> = <var:I> \land <var:k0> = <nat:2> \land <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> \} \, <var:d> := <var:d> + <var:k0\, \{ <var:t> = <var:I> \land <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \} \end{eqnarray} This is rigorously given through the binding scheme of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:t> = <var:I> }} <var:k0> := <nat:2> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:t> ; <var:k2> := <var:k2> * <var:t> ; <var:d> := <var:k2> ; <var:d> := <var:d> + <var:k0> {{ <var:d> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:k0> = <nat:2> /\ <var:k2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:k0> = <nat:2> /\ <var:k2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:k0> = <nat:2> /\ <var:k2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:k0> = <nat:2> /\ <var:d> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:d> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 