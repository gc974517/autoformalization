\begin{document} \begin{theorem} Take a segment of code : \begin{verbatim} <var:c> := <nat:4> ; <var:c> := <nat:4> + <var:c> * <var:V> ; <var:c> := <nat:4> + <var:c> * <var:V> ; <var:c> := <nat:2> + <var:c> * <var:V> \end{verbatim} Allow ( for all $ <var:a> $ ) it to hold that $ <var:V> = <var:a> $ prior to the evaluation of this set of instructions , it holds that $ <var:c> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this code is clear using standard Hoare techniques . Going to the next step , we see \begin{eqnarray} \{ <var:V> = <var:a> \} \, <var:c> := <nat:4> \, \{ <var:V> = <var:a> \land <var:c> = <nat:4> \} \end{eqnarray} This is shown to be logically sound by the assignment scheme obtained from standard Hoare logic . Moving onward , we see \begin{eqnarray} \{ <var:V> = <var:a> \} \, <var:c> := <nat:4> \, \{ <var:V> = <var:a> \land <var:c> = <nat:4> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:V> = <var:a> \} \, <var:c> := <nat:4> \, \{ <var:V> = <var:a> \land <var:c> = <nat:4> \} \end{eqnarray} This is sound with the assignment rule found in typical Hoare reasoning . Considering the subsequent line in the set of commands , we have \begin{eqnarray} \{ <var:V> = <var:a> \} \, <var:c> := <nat:4> \, \{ <var:V> = <var:a> \land <var:c> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:V> = <var:a> }} <var:c> := <nat:4> ; <var:c> := <nat:4> + <var:c> * <var:V> ; <var:c> := <nat:4> + <var:c> * <var:V> ; <var:c> := <nat:2> + <var:c> * <var:V> {{ <var:c> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:c> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:c> = <nat:4> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:c> = <nat:4> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:c> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 