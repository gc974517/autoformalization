\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:1> ; <var:Q> := <nat:1> + <var:Q> * <var:G> ; <var:Q> := <nat:2> + <var:Q> * <var:G> ; <var:Q> := <nat:3> + <var:Q> * <var:G> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Given it to hold that $ <var:G> = <var:p> $ before the execution of our code segment then $ <var:Q> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> $ once set of commands has terminated . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is done with standard Hoare reasoning . Moving forward to the subsequent pieces of code contained in our segment of code , \begin{verbatim} { <var:G> = <var:p> } <var:Q> := <nat:1> { <var:G> = <var:p> \land <var:Q> = <nat:1> } { <var:G> = <var:p> \land <var:Q> = <nat:1> } <var:Q> := <nat:1> + <var:Q> * <var:G> { <var:G> = <var:p> \land <var:Q> = <nat:1> \cdot <var:p> + <nat:1> } \end{verbatim} This is ensured by the law given in usual Hoare reasoning . Honing in on the subsequent bit of code contained in our list of instructions , we have \begin{verbatim} { <var:G> = <var:p> } <var:Q> := <nat:1> { <var:G> = <var:p> \land <var:Q> = <nat:1> } \end{verbatim} Taking another step toward the upcoming statement in the list of instructions , we have \begin{verbatim} { <var:G> = <var:p> } <var:Q> := <nat:1> { <var:G> = <var:p> \land <var:Q> = <nat:1> } \end{verbatim} This is sound with the variable binding rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:1> ; <var:Q> := <nat:1> + <var:Q> * <var:G> ; <var:Q> := <nat:2> + <var:Q> * <var:G> ; <var:Q> := <nat:3> + <var:Q> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:G> = <var:p> }} <def:poly> {{ <var:Q> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:Q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:Q> = <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:Q> = <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:p> /\ <var:Q> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 