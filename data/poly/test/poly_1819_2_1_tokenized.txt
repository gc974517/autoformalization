\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:8> ; <var:R> := <var:V0> \end{verbatim} Assume $ <var:e> = <var:C> $ --- taking positive numbers $ <var:C> $ --- ahead of evaluating our code segment , it follows that $ <var:R> = <nat:8> $ . \end{theorem} \begin{proof} The course of logic for our segment of code can be seen with Hoare techniques . Next , the variable assignmet command giving $ <nat:8> $ into $ <var:V0>$ . This redefines $ \{ <var:e> = <var:C> \} $ into the condition $ \{ <var:e> = <var:C> \land <var:V0> = <nat:8> \} $ . This is given with the assignment inference rule given by typical Hoare reasoning . Looking at the subsequent command seen in the list of commands , we see the assignment statement defining $ <var:V0$ toward $ <var:R>$ . This forwards the condition $ \{ <var:e> = <var:C> \land <var:V0> = <nat:8> \} $ to $ \{ <var:e> = <var:C> \land <var:R> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:e> = <var:C> }} <var:V0> := <nat:8> ; <var:R> := <var:V0> {{ <var:R> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:R> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 