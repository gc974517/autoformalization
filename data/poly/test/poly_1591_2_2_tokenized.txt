\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:4> ; <var:Q> := <nat:1> + <var:Q> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:t> = <var:d> $ prior to the evaluation of this code segment , it follows that we have $ <var:Q> = <nat:4> \times <var:d> + <nat:1> $ when list of instructions terminates . \end{theorem} \begin{proof} Demonstrating correctness of the code segment can be demonstrated with Hoare techniques . Looking at the proceeding line of code seen in our series of instructions , \begin{eqnarray} \{ <var:t> = <var:d> \} \, <var:Q> := <nat:4> \, \{ <var:t> = <var:d> \land <var:Q> = <nat:4> \} \end{eqnarray} Following , we see \begin{eqnarray} \{ <var:t> = <var:d> \} \, <var:Q> := <nat:4> \, \{ <var:t> = <var:d> \land <var:Q> = <nat:4> \} \end{eqnarray} This is shown to be logically sound through the rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:4> ; <var:Q> := <nat:1> + <var:Q> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:t> = <var:d> }} <def:poly> {{ <var:Q> = <nat:4> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:Q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:Q> = <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 