\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:k1> := <var:o> ; <var:k2> := <var:k1> * <var:o> ; <var:k3> := <var:k2> * <var:o> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:6> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:5> ; <var:Y> := <var:k3> <var:Y> := <var:Y> + <var:k2> <var:Y> := <var:Y> + <var:k1> <var:Y> := <var:Y> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for every $ <var:t> $ ) it to hold that $ <var:o> = <var:t> $ before the execution of this series of instructions it must be that we see $ <var:Y> = <nat:5> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this series of commands is accomplished through typical Hoare reasoning . Taking another step toward the following commands contained in the set of commands , we see \begin{verbatim} { <var:o> = <var:t> } <var:k1> := <var:o> { <var:o> = <var:t> \land <var:k1> = <var:t> } { <var:o> = <var:t> \land <var:k1> = <var:t> } <var:k2> := <var:k1> * <var:o> { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> } { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> } <var:k3> := <var:k2> * <var:o> { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> } { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> } <var:k0> := <nat:1> { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> \land <var:k0> = <nat:1> } \end{verbatim} Next , we have \begin{verbatim} { <var:o> = <var:t> } <var:k1> := <var:o> { <var:o> = <var:t> \land <var:k1> = <var:t> } { <var:o> = <var:t> \land <var:k1> = <var:t> } <var:k2> := <var:k1> * <var:o> { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> } { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> } <var:k3> := <var:k2> * <var:o> { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> } { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> } <var:k0> := <nat:1> { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> \land <var:k0> = <nat:1> } { <var:o> = <var:t> \land <var:k1> = <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> \land <var:k0> = <nat:1> } <var:k1> := <var:k1> * <nat:6> { <var:o> = <var:t> \land <var:k1> = <nat:6> \times <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> \land <var:k0> = <nat:1> } { <var:o> = <var:t> \land <var:k1> = <nat:6> \times <var:t> \land <var:k2> = <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> \land <var:k0> = <nat:1> } <var:k2> := <var:k2> * <nat:1> { <var:o> = <var:t> \land <var:k1> = <nat:6> \times <var:t> \land <var:k2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> \land <var:k0> = <nat:1> } { <var:o> = <var:t> \land <var:k1> = <nat:6> \times <var:t> \land <var:k2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:k3> = <var:t> ^ <nat:3> \land <var:k0> = <nat:1> } <var:k3> := <var:k3> * <nat:5> { <var:o> = <var:t> \land <var:k1> = <nat:6> \times <var:t> \land <var:k2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:t> ^ <nat:3> \land <var:k0> = <nat:1> } \end{verbatim} This is shown using the assignment inference rule found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:o> ; <var:k2> := <var:k1> * <var:o> ; <var:k3> := <var:k2> * <var:o> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:6> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:5> ; <var:Y> := <var:k3> <var:Y> := <var:Y> + <var:k2> <var:Y> := <var:Y> + <var:k1> <var:Y> := <var:Y> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:o> = <var:t> }} <def:poly> {{ <var:Y> = <nat:5> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <var:t> /\ <var:k2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <var:t> /\ <var:k2> = <var:t> ^ <nat:2> /\ <var:k3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <var:t> /\ <var:k2> = <var:t> ^ <nat:2> /\ <var:k3> = <var:t> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <nat:6> * <var:t> /\ <var:k2> = <var:t> ^ <nat:2> /\ <var:k3> = <var:t> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <nat:6> * <var:t> /\ <var:k2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:k3> = <var:t> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <nat:6> * <var:t> /\ <var:k2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:t> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <nat:6> * <var:t> /\ <var:k2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:k0> = <nat:1> /\ <var:Y> = <nat:5> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k1> = <nat:6> * <var:t> /\ <var:k0> = <nat:1> /\ <var:Y> = <nat:5> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:k0> = <nat:1> /\ <var:Y> = <nat:5> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:Y> = <nat:5> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 