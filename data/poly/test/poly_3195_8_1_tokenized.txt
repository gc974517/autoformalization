\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:n> ; <var:l2> := <var:l1> * <var:n> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:1> ; <var:l2> := <var:l2> * <nat:4> ; <var:I> := <var:l2> <var:I> := <var:I> + <var:l1> <var:I> := <var:I> + <var:l0> \end{verbatim} Given given all positive integers $ <var:R> $ $ <var:n> = <var:R> $ prior to running our series of commands it must be that we have $ <var:I> = <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning results in : \begin{eqnarray} \{ <var:n> = <var:R> \} \\ <var:l1> := <var:n> ; \\ \{ <var:n> = <var:R> \land <var:l1> = <var:R> \} \\ <var:l2> := <var:l1> * <var:n> ; \\ \{ <var:n> = <var:R> \land <var:l1> = <var:R> \land <var:l2> = <var:R> ^ <nat:2> \} \\ <var:l0> := <nat:3> ; \\ \{ <var:n> = <var:R> \land <var:l1> = <var:R> \land <var:l2> = <var:R> ^ <nat:2> \land <var:l0> = <nat:3> \} \\ <var:l1> := <var:l1> * <nat:1> ; \\ \{ <var:n> = <var:R> \land <var:l1> = <nat:1> \times <var:R> \land <var:l2> = <var:R> ^ <nat:2> \land <var:l0> = <nat:3> \} \\ <var:l2> := <var:l2> * <nat:4> ; \\ \{ <var:n> = <var:R> \land <var:l1> = <nat:1> \times <var:R> \land <var:l2> = <nat:4> \times <var:R> ^ <nat:2> \land <var:l0> = <nat:3> \} \\ <var:I> := <var:l2> \\ \{ <var:n> = <var:R> \land <var:l1> = <nat:1> \times <var:R> \land <var:l0> = <nat:3> \land <var:I> = <nat:4> \times <var:R> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:l1> \\ \{ <var:n> = <var:R> \land <var:l0> = <nat:3> \land <var:I> = <nat:4> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> \} \\ <var:I> := <var:I> + <var:l0> \\ \{ <var:n> = <var:R> \land <var:I> = <nat:4> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> \} \end{eqnarray} As a consequence , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:n> = <var:R> }} <var:l1> := <var:n> ; <var:l2> := <var:l1> * <var:n> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:1> ; <var:l2> := <var:l2> * <nat:4> ; <var:I> := <var:l2> <var:I> := <var:I> + <var:l1> <var:I> := <var:I> + <var:l0> {{ <var:I> = <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:l1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:l1> = <var:R> /\ <var:l2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:l1> = <var:R> /\ <var:l2> = <var:R> ^ <nat:2> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:l1> = <nat:1> * <var:R> /\ <var:l2> = <var:R> ^ <nat:2> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:l1> = <nat:1> * <var:R> /\ <var:l2> = <nat:4> * <var:R> ^ <nat:2> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:l1> = <nat:1> * <var:R> /\ <var:l0> = <nat:3> /\ <var:I> = <nat:4> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:l0> = <nat:3> /\ <var:I> = <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:I> = <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 