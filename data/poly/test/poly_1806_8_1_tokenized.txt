\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:I1> := <var:e> ; <var:I2> := <var:I1> * <var:e> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:2> ; <var:B> := <var:I2> <var:B> := <var:B> + <var:I1> <var:B> := <var:B> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:e> = <var:l> $ before the execution of our list of commands , it holds that $ <var:B> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:3> $ once code segment is done . \end{theorem} \begin{proof} Utilizing Hoare techniques produces : \begin{eqnarray} \{ <var:e> = <var:l> \} \\ <var:I1> := <var:e> ; \\ \{ <var:e> = <var:l> \land <var:I1> = <var:l> \} \\ <var:I2> := <var:I1> * <var:e> ; \\ \{ <var:e> = <var:l> \land <var:I1> = <var:l> \land <var:I2> = <var:l> ^ <nat:2> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:e> = <var:l> \land <var:I1> = <var:l> \land <var:I2> = <var:l> ^ <nat:2> \land <var:I0> = <nat:3> \} \\ <var:I1> := <var:I1> * <nat:9> ; \\ \{ <var:e> = <var:l> \land <var:I1> = <nat:9> \cdot <var:l> \land <var:I2> = <var:l> ^ <nat:2> \land <var:I0> = <nat:3> \} \\ <var:I2> := <var:I2> * <nat:2> ; \\ \{ <var:e> = <var:l> \land <var:I1> = <nat:9> \cdot <var:l> \land <var:I2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:I0> = <nat:3> \} \\ <var:B> := <var:I2> \\ \{ <var:e> = <var:l> \land <var:I1> = <nat:9> \cdot <var:l> \land <var:I0> = <nat:3> \land <var:B> = <nat:2> \cdot <var:l> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:I1> \\ \{ <var:e> = <var:l> \land <var:I0> = <nat:3> \land <var:B> = <nat:2> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> \} \\ <var:B> := <var:B> + <var:I0> \\ \{ <var:e> = <var:l> \land <var:B> = <nat:2> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> + <nat:3> \} \end{eqnarray} Thus , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I1> := <var:e> ; <var:I2> := <var:I1> * <var:e> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:2> ; <var:B> := <var:I2> <var:B> := <var:B> + <var:I1> <var:B> := <var:B> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:e> = <var:l> }} <def:poly> {{ <var:B> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:I1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:I1> = <var:l> /\ <var:I2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:I1> = <var:l> /\ <var:I2> = <var:l> ^ <nat:2> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:I1> = <nat:9> * <var:l> /\ <var:I2> = <var:l> ^ <nat:2> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:I1> = <nat:9> * <var:l> /\ <var:I2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:I1> = <nat:9> * <var:l> /\ <var:I0> = <nat:3> /\ <var:B> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:I0> = <nat:3> /\ <var:B> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:B> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 