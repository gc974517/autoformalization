\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:v1> := <var:Q> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:4> ; <var:T> := <var:v1> <var:T> := <var:T> + <var:v0> \end{verbatim} Assuming it to hold that $ <var:Q> = <var:I> $ , for any whole numbers $ <var:I> $ , prior to interpreting this list of commands , it must be that $ <var:T> = <nat:4> \cdot <var:I> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:Q> = <var:I> \} \\ <var:v1> := <var:Q> ; \\ \{ <var:Q> = <var:I> \land <var:v1> = <var:I> \} \\ <var:v0> := <nat:2> ; \\ \{ <var:Q> = <var:I> \land <var:v1> = <var:I> \land <var:v0> = <nat:2> \} \\ <var:v1> := <var:v1> * <nat:4> ; \\ \{ <var:Q> = <var:I> \land <var:v1> = <nat:4> \cdot <var:I> \land <var:v0> = <nat:2> \} \\ <var:T> := <var:v1> \\ \{ <var:Q> = <var:I> \land <var:v0> = <nat:2> \land <var:T> = <nat:4> \cdot <var:I> \} \\ <var:T> := <var:T> + <var:v0> \\ \{ <var:Q> = <var:I> \land <var:T> = <nat:4> \cdot <var:I> + <nat:2> \} \end{eqnarray} Therefore , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:Q> = <var:I> }} <var:v1> := <var:Q> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:4> ; <var:T> := <var:v1> <var:T> := <var:T> + <var:v0> {{ <var:T> = <nat:4> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:v1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:v1> = <var:I> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:v1> = <nat:4> * <var:I> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:v0> = <nat:2> /\ <var:T> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:T> = <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 