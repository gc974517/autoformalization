\begin{document} \begin{theorem} We define a segment of code : \begin{verbatim} <var:P0> := <nat:5> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:q> ; <var:P2> := <nat:6> ; <var:P2> := <var:P2> * <var:q> ; <var:P2> := <var:P2> * <var:q> ; <var:u> := <var:P2> ; <var:u> := <var:u> + <var:P1> ; <var:u> := <var:u> + <var:P0> \end{verbatim} Assume that we have $ <var:q> = <var:O> $ prior to interpreting our list of commands it must be that we have $ <var:u> = <nat:6> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> + <nat:5> $ when segment of code is done executing . \end{theorem} \begin{proof} See that the below decorated code segment . \begin{eqnarray} \{ <var:q> = <var:O> \} \\ <var:P0> := <nat:5> ; \\ \{ <var:q> = <var:O> \land <var:P0> = <nat:5> \} \\ <var:P1> := <nat:2> ; \\ \{ <var:q> = <var:O> \land <var:P0> = <nat:5> \land <var:P1> = <nat:2> \} \\ <var:P1> := <var:P1> * <var:q> ; \\ \{ <var:q> = <var:O> \land <var:P0> = <nat:5> \land <var:P1> = <nat:2> \times <var:O> \} \\ <var:P2> := <nat:6> ; \\ \{ <var:q> = <var:O> \land <var:P0> = <nat:5> \land <var:P1> = <nat:2> \times <var:O> \land <var:P2> = <nat:6> \} \\ <var:P2> := <var:P2> * <var:q> ; \\ \{ <var:q> = <var:O> \land <var:P0> = <nat:5> \land <var:P1> = <nat:2> \times <var:O> \land <var:P2> = <nat:6> \times <var:O> \} \\ <var:P2> := <var:P2> * <var:q> ; \\ \{ <var:q> = <var:O> \land <var:P0> = <nat:5> \land <var:P1> = <nat:2> \times <var:O> \land <var:P2> = <nat:6> \times <var:O> ^ <nat:2> \} \\ <var:u> := <var:P2> ; \\ \{ <var:q> = <var:O> \land <var:P0> = <nat:5> \land <var:P1> = <nat:2> \times <var:O> \land <var:u> = <nat:6> \times <var:O> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:P1> ; \\ \{ <var:q> = <var:O> \land <var:P0> = <nat:5> \land <var:u> = <nat:6> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> \} \\ <var:u> := <var:u> + <var:P0> \\ \{ <var:q> = <var:O> \land <var:u> = <nat:6> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> + <nat:5> \} \end{eqnarray} Using Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:q> = <var:O> }} <var:P0> := <nat:5> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:q> ; <var:P2> := <nat:6> ; <var:P2> := <var:P2> * <var:q> ; <var:P2> := <var:P2> * <var:q> ; <var:u> := <var:P2> ; <var:u> := <var:u> + <var:P1> ; <var:u> := <var:u> + <var:P0> {{ <var:u> = <nat:6> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:2> * <var:O> /\ <var:P2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:2> * <var:O> /\ <var:P2> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:2> * <var:O> /\ <var:P2> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:P0> = <nat:5> /\ <var:P1> = <nat:2> * <var:O> /\ <var:u> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:P0> = <nat:5> /\ <var:u> = <nat:6> * <var:O> ^ <nat:2> + <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:u> = <nat:6> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 