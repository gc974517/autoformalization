\begin{document} \begin{theorem} Consider a program in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:f> ; <var:G> := <var:A1> ; <var:G> := <var:G> + <var:A0> \end{verbatim} Allowing $ <var:f> = <var:o> $ ( with some natural coefficients $ <var:o> $ ) before evaluating this segment of code , it holds that we see $ <var:G> = <nat:6> * <var:o> + <nat:4> $ after set of instructions finishes . \end{theorem} \begin{proof} The application of Hoare techniques returns : \begin{eqnarray} \{ <var:f> = <var:o> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:f> = <var:o> \land <var:A0> = <nat:4> \} \\ <var:A1> := <nat:6> ; \\ \{ <var:f> = <var:o> \land <var:A0> = <nat:4> \land <var:A1> = <nat:6> \} \\ <var:A1> := <var:A1> * <var:f> ; \\ \{ <var:f> = <var:o> \land <var:A0> = <nat:4> \land <var:A1> = <nat:6> \times <var:o> \} \\ <var:G> := <var:A1> ; \\ \{ <var:f> = <var:o> \land <var:A0> = <nat:4> \land <var:G> = <nat:6> \times <var:o> \} \\ <var:G> := <var:G> + <var:A0> \\ \{ <var:f> = <var:o> \land <var:G> = <nat:6> \times <var:o> + <nat:4> \} \end{eqnarray} Given the preceding argument , our series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:f> = <var:o> }} <var:A0> := <nat:4> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:f> ; <var:G> := <var:A1> ; <var:G> := <var:G> + <var:A0> {{ <var:G> = <nat:6> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:A0> = <nat:4> /\ <var:G> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:G> = <nat:6> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 