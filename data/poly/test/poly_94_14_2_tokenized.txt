\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <nat:1> + <var:i> * <var:s> ; <var:i> := <nat:1> + <var:i> * <var:s> ; <var:i> := <nat:3> + <var:i> * <var:s> ; <var:i> := <var:i> * <var:s> ; <var:i> := <var:i> * <var:s> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <var:i> * <var:s> ; <var:i> := <nat:1> + <var:i> * <var:s> ; <var:i> := <nat:1> + <var:i> * <var:s> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <var:i> * <var:s> ; <var:i> := <nat:4> + <var:i> * <var:s> \end{verbatim} Assume $ <var:s> = <var:b> $ , given any positive integers $ <var:b> $ , prior to the evaluation of our list of instructions it must be that we have $ <var:i> = <nat:3> \times <var:b> ^ <nat:13> + <nat:2> \times <var:b> ^ <nat:12> + <nat:1> \times <var:b> ^ <nat:11> + <nat:1> \times <var:b> ^ <nat:10> + <nat:3> \times <var:b> ^ <nat:9> + <nat:2> \times <var:b> ^ <nat:6> + <nat:1> \times <var:b> ^ <nat:4> + <nat:1> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is clear by the following decorated code . \begin{eqnarray} \{ <var:s> = <var:b> \} \\ <var:i> := <nat:3> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \} \\ <var:i> := <nat:2> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> + <nat:2> \} \\ <var:i> := <nat:1> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:1> \} \\ <var:i> := <nat:1> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:1> \} \\ <var:i> := <nat:3> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:3> \} \\ <var:i> := <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:5> + <nat:2> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> + \} \\ <var:i> := <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:6> + <nat:2> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> ^ <nat:2> + \} \\ <var:i> := <nat:2> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:7> + <nat:2> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:3> \cdot <var:b> ^ <nat:3> + <nat:2> \} \\ <var:i> := <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:8> + <nat:2> \cdot <var:b> ^ <nat:7> + <nat:1> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:5> + <nat:3> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> + \} \\ <var:i> := <nat:1> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:9> + <nat:2> \cdot <var:b> ^ <nat:8> + <nat:1> \cdot <var:b> ^ <nat:7> + <nat:1> \cdot <var:b> ^ <nat:6> + <nat:3> \cdot <var:b> ^ <nat:5> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:1> \} \\ <var:i> := <nat:1> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:10> + <nat:2> \cdot <var:b> ^ <nat:9> + <nat:1> \cdot <var:b> ^ <nat:8> + <nat:1> \cdot <var:b> ^ <nat:7> + <nat:3> \cdot <var:b> ^ <nat:6> + <nat:2> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> + <nat:1> \} \\ <var:i> := <nat:2> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:11> + <nat:2> \cdot <var:b> ^ <nat:10> + <nat:1> \cdot <var:b> ^ <nat:9> + <nat:1> \cdot <var:b> ^ <nat:8> + <nat:3> \cdot <var:b> ^ <nat:7> + <nat:2> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:2> \} \\ <var:i> := <var:i> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:12> + <nat:2> \cdot <var:b> ^ <nat:11> + <nat:1> \cdot <var:b> ^ <nat:10> + <nat:1> \cdot <var:b> ^ <nat:9> + <nat:3> \cdot <var:b> ^ <nat:8> + <nat:2> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + \} \\ <var:i> := <nat:4> + <var:i> * <var:s> \\ \{ <var:s> = <var:b> \land <var:i> = <nat:3> \cdot <var:b> ^ <nat:13> + <nat:2> \cdot <var:b> ^ <nat:12> + <nat:1> \cdot <var:b> ^ <nat:11> + <nat:1> \cdot <var:b> ^ <nat:10> + <nat:3> \cdot <var:b> ^ <nat:9> + <nat:2> \cdot <var:b> ^ <nat:6> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:s> = <var:b> }} <var:i> := <nat:3> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <nat:1> + <var:i> * <var:s> ; <var:i> := <nat:1> + <var:i> * <var:s> ; <var:i> := <nat:3> + <var:i> * <var:s> ; <var:i> := <var:i> * <var:s> ; <var:i> := <var:i> * <var:s> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <var:i> * <var:s> ; <var:i> := <nat:1> + <var:i> * <var:s> ; <var:i> := <nat:1> + <var:i> * <var:s> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <var:i> * <var:s> ; <var:i> := <nat:4> + <var:i> * <var:s> {{ <var:i> = <nat:3> * <var:b> ^ <nat:13> + <nat:2> * <var:b> ^ <nat:12> + <nat:1> * <var:b> ^ <nat:11> + <nat:1> * <var:b> ^ <nat:10> + <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:10> + <nat:2> * <var:b> ^ <nat:9> + <nat:1> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:11> + <nat:2> * <var:b> ^ <nat:10> + <nat:1> * <var:b> ^ <nat:9> + <nat:1> * <var:b> ^ <nat:8> + <nat:3> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:12> + <nat:2> * <var:b> ^ <nat:11> + <nat:1> * <var:b> ^ <nat:10> + <nat:1> * <var:b> ^ <nat:9> + <nat:3> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:i> = <nat:3> * <var:b> ^ <nat:13> + <nat:2> * <var:b> ^ <nat:12> + <nat:1> * <var:b> ^ <nat:11> + <nat:1> * <var:b> ^ <nat:10> + <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 