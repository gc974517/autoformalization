\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:A1> := <var:Z> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:2> ; <var:t> := <var:A1> <var:t> := <var:t> + <var:A0> \end{verbatim} Assuming that we have $ <var:Z> = <var:y> $ before the evaluation of this list of instructions then $ <var:t> = <nat:2> \cdot <var:y> + <nat:5> $ after set of commands is done executing . \end{theorem} \begin{proof} The application of typical Hoare reasoning yields : \begin{eqnarray} \{ <var:Z> = <var:y> \} \\ <var:A1> := <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:A1> = <var:y> \} \\ <var:A0> := <nat:5> ; \\ \{ <var:Z> = <var:y> \land <var:A1> = <var:y> \land <var:A0> = <nat:5> \} \\ <var:A1> := <var:A1> * <nat:2> ; \\ \{ <var:Z> = <var:y> \land <var:A1> = <nat:2> \cdot <var:y> \land <var:A0> = <nat:5> \} \\ <var:t> := <var:A1> \\ \{ <var:Z> = <var:y> \land <var:A0> = <nat:5> \land <var:t> = <nat:2> \cdot <var:y> \} \\ <var:t> := <var:t> + <var:A0> \\ \{ <var:Z> = <var:y> \land <var:t> = <nat:2> \cdot <var:y> + <nat:5> \} \end{eqnarray} Hence , our program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:Z> = <var:y> }} <var:A1> := <var:Z> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:2> ; <var:t> := <var:A1> <var:t> := <var:t> + <var:A0> {{ <var:t> = <nat:2> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:A1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:A1> = <var:y> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:A1> = <nat:2> * <var:y> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:A0> = <nat:5> /\ <var:t> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:t> = <nat:2> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 