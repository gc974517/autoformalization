\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:s> ; <var:u2> := <var:u1> * <var:s> ; <var:u3> := <var:u2> * <var:s> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:2> ; <var:h> := <var:u3> <var:h> := <var:h> + <var:u2> <var:h> := <var:h> + <var:u1> <var:h> := <var:h> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Allowing $ <var:s> = <var:G> $ prior to running the list of instructions , it holds that $ <var:h> = <nat:2> \times <var:G> ^ <nat:3> + <nat:9> \times <var:G> ^ <nat:2> + <nat:9> \times <var:G> + <nat:2> $ once set of commands has terminated . \end{theorem} \begin{proof} The course of logic for our list of instructions is given through Hoare techniques . Moving forward , \begin{eqnarray} \{ <var:s> = <var:G> \} \, <var:u1> := <var:s> \, \{ <var:s> = <var:G> \land <var:u1> = <var:G> \} \end{eqnarray} Shifting focus toward the upcoming steps in the list of instructions , we see \begin{eqnarray} \{ <var:s> = <var:G> \} \, <var:u1> := <var:s> \, \{ <var:s> = <var:G> \land <var:u1> = <var:G> \} \\ \{ <var:s> = <var:G> \land <var:u1> = <var:G> \} \, <var:u2> := <var:u1> * <var:s> \, \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \} \\ \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \} \, <var:u3> := <var:u2> * <var:s> \, \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \} \\ \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \} \, <var:u0> := <nat:2> \, \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:2> \} \, <var:u1> := <var:u1> * <nat:9> \, \{ <var:s> = <var:G> \land <var:u1> = <nat:9> * <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ \{ <var:s> = <var:G> \land <var:u1> = <nat:9> * <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:2> \} \, <var:u2> := <var:u2> * <nat:9> \, \{ <var:s> = <var:G> \land <var:u1> = <nat:9> * <var:G> \land <var:u2> = <nat:9> * <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ \{ <var:s> = <var:G> \land <var:u1> = <nat:9> * <var:G> \land <var:u2> = <nat:9> * <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \land <var:u0> = <nat:2> \} \, <var:u3> := <var:u3> * <nat:2> \, \{ <var:s> = <var:G> \land <var:u1> = <nat:9> * <var:G> \land <var:u2> = <nat:9> * <var:G> ^ <nat:2> \land <var:u3> = <nat:2> * <var:G> ^ <nat:3> \land <var:u0> = <nat:2> \} \end{eqnarray} Advancing to the proceeding pieces of code found in our set of commands , we have \begin{eqnarray} \{ <var:s> = <var:G> \} \, <var:u1> := <var:s> \, \{ <var:s> = <var:G> \land <var:u1> = <var:G> \} \\ \{ <var:s> = <var:G> \land <var:u1> = <var:G> \} \, <var:u2> := <var:u1> * <var:s> \, \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \} \\ \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \} \, <var:u3> := <var:u2> * <var:s> \, \{ <var:s> = <var:G> \land <var:u1> = <var:G> \land <var:u2> = <var:G> ^ <nat:2> \land <var:u3> = <var:G> ^ <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:s> ; <var:u2> := <var:u1> * <var:s> ; <var:u3> := <var:u2> * <var:s> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:2> ; <var:h> := <var:u3> <var:h> := <var:h> + <var:u2> <var:h> := <var:h> + <var:u1> <var:h> := <var:h> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:s> = <var:G> }} <def:poly> {{ <var:h> = <nat:2> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <var:G> /\ <var:u2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <var:G> /\ <var:u2> = <var:G> ^ <nat:2> /\ <var:u3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <var:G> /\ <var:u2> = <var:G> ^ <nat:2> /\ <var:u3> = <var:G> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <nat:9> * <var:G> /\ <var:u2> = <var:G> ^ <nat:2> /\ <var:u3> = <var:G> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <nat:9> * <var:G> /\ <var:u2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:u3> = <var:G> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <nat:9> * <var:G> /\ <var:u2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:u3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <nat:9> * <var:G> /\ <var:u2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:u0> = <nat:2> /\ <var:h> = <nat:2> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u1> = <nat:9> * <var:G> /\ <var:u0> = <nat:2> /\ <var:h> = <nat:2> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:u0> = <nat:2> /\ <var:h> = <nat:2> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:G> /\ <var:h> = <nat:2> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 