\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:r1> := <var:u> ; <var:r2> := <var:r1> * <var:u> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:7> ; <var:r2> := <var:r2> * <nat:8> ; <var:w> := <var:r2> <var:w> := <var:w> + <var:r1> <var:w> := <var:w> + <var:r0> \end{verbatim} Allow that $ <var:u> = <var:v> $ ahead of evaluating the code segment , then $ <var:w> = <nat:8> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:1> $ when segment of code has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:v> \} \\ <var:r1> := <var:u> ; \\ \{ <var:u> = <var:v> \land <var:r1> = <var:v> \} \\ <var:r2> := <var:r1> * <var:u> ; \\ \{ <var:u> = <var:v> \land <var:r1> = <var:v> \land <var:r2> = <var:v> ^ <nat:2> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:u> = <var:v> \land <var:r1> = <var:v> \land <var:r2> = <var:v> ^ <nat:2> \land <var:r0> = <nat:1> \} \\ <var:r1> := <var:r1> * <nat:7> ; \\ \{ <var:u> = <var:v> \land <var:r1> = <nat:7> \cdot <var:v> \land <var:r2> = <var:v> ^ <nat:2> \land <var:r0> = <nat:1> \} \\ <var:r2> := <var:r2> * <nat:8> ; \\ \{ <var:u> = <var:v> \land <var:r1> = <nat:7> \cdot <var:v> \land <var:r2> = <nat:8> \cdot <var:v> ^ <nat:2> \land <var:r0> = <nat:1> \} \\ <var:w> := <var:r2> \\ \{ <var:u> = <var:v> \land <var:r1> = <nat:7> \cdot <var:v> \land <var:r0> = <nat:1> \land <var:w> = <nat:8> \cdot <var:v> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:r1> \\ \{ <var:u> = <var:v> \land <var:r0> = <nat:1> \land <var:w> = <nat:8> \cdot <var:v> ^ <nat:2> + <nat:7> \cdot <var:v> \} \\ <var:w> := <var:w> + <var:r0> \\ \{ <var:u> = <var:v> \land <var:w> = <nat:8> \cdot <var:v> ^ <nat:2> + <nat:7> \cdot <var:v> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:u> = <var:v> }} <var:r1> := <var:u> ; <var:r2> := <var:r1> * <var:u> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:7> ; <var:r2> := <var:r2> * <nat:8> ; <var:w> := <var:r2> <var:w> := <var:w> + <var:r1> <var:w> := <var:w> + <var:r0> {{ <var:w> = <nat:8> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:r1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:r1> = <var:v> /\ <var:r2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:r1> = <var:v> /\ <var:r2> = <var:v> ^ <nat:2> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:r1> = <nat:7> * <var:v> /\ <var:r2> = <var:v> ^ <nat:2> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:r1> = <nat:7> * <var:v> /\ <var:r2> = <nat:8> * <var:v> ^ <nat:2> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:r1> = <nat:7> * <var:v> /\ <var:r0> = <nat:1> /\ <var:w> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:r0> = <nat:1> /\ <var:w> = <nat:8> * <var:v> ^ <nat:2> + <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:w> = <nat:8> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 