\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <nat:4> + <var:q> * <var:U> ; <var:q> := <nat:3> + <var:q> * <var:U> ; <var:q> := <nat:4> + <var:q> * <var:U> ; <var:q> := <nat:1> + <var:q> * <var:U> ; <var:q> := <nat:1> + <var:q> * <var:U> ; <var:q> := <var:q> * <var:U> ; <var:q> := <nat:4> + <var:q> * <var:U> ; <var:q> := <nat:3> + <var:q> * <var:U> ; <var:q> := <nat:2> + <var:q> * <var:U> \end{verbatim} Given it to hold that $ <var:U> = <var:a> $ given some $ <var:a> $ before the execution of the series of commands it follows that we have $ <var:q> = <nat:4> * <var:a> ^ <nat:9> + <nat:4> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands can be given using Hoare reasoning . Moving forward to the subsequent line in our code , the variable binding command \verb | <var:q> := <nat:4> ; | . This command forwards the condition $ \{ <var:U> = <var:a> \} $ to $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \} $ . This is shown by the assignment inference rule obtained from standard Hoare techniques . Considering the next line contained in the segment of code , we have the assignment code \verb | <var:q> := <nat:4> + <var:q> * <var:U> ; | . This statement takes the precondition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \} $ as the postcondition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> + <nat:4> \} $ . This is known to be sound with the assignment scheme in typical Hoare reasoning . Moving forward , the environment update statement letting $ <nat:3> + <var:q> * <var:U> $ into $ <var:q>$ . This command moves $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> + <nat:4> \} $ as the postcondition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:3> \} $ . This is deduced using the assignment scheme defined by Hoare logic . Considering the upcoming line of code in the set of commands , we have the variable binding statement giving $ <nat:4> + <var:q> * <var:U> $ as $ <var:q>$ . This line redefines the precondition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:3> \} $ as the postcondition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:4> \} $ . Moving forward to the next step , we have the assignment statement yielding $ <nat:1> + <var:q> * <var:U> $ as $ <var:q>$ . This moves the condition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:4> \} $ as the condition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:4> + <nat:4> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:1> \} $ . This is shown to be logically sound through the assignment scheme in standard Hoare techniques . Paying attention to the following bit of code found in the code segment , the variable binding command giving $ <nat:1> + <var:q> * <var:U> $ as $ <var:q>$ . This forwards $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:4> + <nat:4> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:1> \} $ toward $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:5> + <nat:4> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:1> \} $ . This is given with the assignment scheme in typical Hoare logic . Focusing on the following piece of code contained in our series of instructions , we see the variable binding command letting $ <var:q> * <var:U> $ as $ <var:q>$ . This takes the precondition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:5> + <nat:4> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:1> \} $ to $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:6> + <nat:4> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:4> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + \} $ . This is deduced through the assignment inference rule defined by typical Hoare techniques . Taking a look at the next step seen in the set of commands , we see the variable update statement binding $ <nat:4> + <var:q> * <var:U> $ into $ <var:q>$ . This redefines the condition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:6> + <nat:4> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:4> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + \} $ into $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:7> + <nat:4> \cdot <var:a> ^ <nat:6> + <nat:3> \cdot <var:a> ^ <nat:5> + <nat:4> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:4> \} $ . Taking a look at the following step found in the series of commands , we see the variable update line giving $ <nat:3> + <var:q> * <var:U> $ toward $ <var:q>$ . This line forwards the precondition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:7> + <nat:4> \cdot <var:a> ^ <nat:6> + <nat:3> \cdot <var:a> ^ <nat:5> + <nat:4> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:4> \} $ toward the condition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:8> + <nat:4> \cdot <var:a> ^ <nat:7> + <nat:3> \cdot <var:a> ^ <nat:6> + <nat:4> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> + <nat:3> \} $ . This is guaranteed through the assignment inference rule given by usual Hoare techniques . Considering the proceeding command in our series of commands , we see the variable assignmet statement defining $ <nat:2> + <var:q> * <var:U$ toward $ <var:q>$ . This transfers the precondition $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:8> + <nat:4> \cdot <var:a> ^ <nat:7> + <nat:3> \cdot <var:a> ^ <nat:6> + <nat:4> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> + <nat:3> \} $ as $ \{ <var:U> = <var:a> \land <var:q> = <nat:4> \cdot <var:a> ^ <nat:9> + <nat:4> \cdot <var:a> ^ <nat:8> + <nat:3> \cdot <var:a> ^ <nat:7> + <nat:4> \cdot <var:a> ^ <nat:6> + <nat:1> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:U> = <var:a> }} <var:q> := <nat:4> ; <var:q> := <nat:4> + <var:q> * <var:U> ; <var:q> := <nat:3> + <var:q> * <var:U> ; <var:q> := <nat:4> + <var:q> * <var:U> ; <var:q> := <nat:1> + <var:q> * <var:U> ; <var:q> := <nat:1> + <var:q> * <var:U> ; <var:q> := <var:q> * <var:U> ; <var:q> := <nat:4> + <var:q> * <var:U> ; <var:q> := <nat:3> + <var:q> * <var:U> ; <var:q> := <nat:2> + <var:q> * <var:U> {{ <var:q> = <nat:4> * <var:a> ^ <nat:9> + <nat:4> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> ^ <nat:8> + <nat:4> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:q> = <nat:4> * <var:a> ^ <nat:9> + <nat:4> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 