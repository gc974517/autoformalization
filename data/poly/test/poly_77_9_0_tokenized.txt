\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:6> ; <var:l1> := <nat:1> ; <var:l1> := <var:l1> * <var:o> ; <var:l2> := <nat:6> ; <var:l2> := <var:l2> * <var:o> ; <var:l2> := <var:l2> * <var:o> ; <var:w> := <var:l2> ; <var:w> := <var:w> + <var:l1> ; <var:w> := <var:w> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Allowing that $ <var:o> = <var:p> $ ahead of the evaluation of this list of instructions it holds that we have $ <var:w> = <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:6> $ . \end{theorem} \begin{proof} The proof of our set of commands is shown with standard Hoare logic . Taking another step toward the upcoming statement contained in our set of commands , the variable update command \verb | <var:l0> := <nat:6> ; | . This statement redefines the precondition $ \{ <var:o> = <var:p> \} $ as the condition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \} $ . Moving on to the next step , we see the variable assignmet line assigning $ <nat:1> $ as $ <var:l1>$ . This advances $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \} $ toward $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \} $ . This is shown to be logically sound with the assignment rule defined in standard Hoare reasoning . Taking another step toward the upcoming line of code seen in the code segment , we see the binding code \verb | <var:l1> := <var:l1> * <var:o> ; | . This command forwards $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \} $ to the condition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \} $ . Taking another step toward the next bit of code seen in our series of instructions , we see the line yielding $ <nat:6> $ to $ <var:l2>$ . This takes $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \} $ toward the postcondition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:6> \} $ . This is ensured with the assignment scheme of Hoare logic . Shifting focus toward the upcoming command found in the series of instructions , the command \verb | <var:l2> := <var:l2> * <var:o> ; | . This statement transfers the precondition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:6> \} $ toward the condition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:6> \times <var:p> \} $ . This is deduced with the assignment rule defined in Hoare reasoning . Considering the proceeding step seen in the list of commands , we see the variable update command assigning $ <var:l2> * <var:o> $ as $ <var:l2>$ . This transfers the condition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:6> \times <var:p> \} $ toward $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:6> \times <var:p> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule given in Hoare techniques . Keeping momentum , we have the binding command binding $ <var:l2> $ toward $ <var:w>$ . This command advances $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:6> \times <var:p> ^ <nat:2> \} $ into the condition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \land <var:w> = <nat:6> \times <var:p> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule defined by typical Hoare reasoning . Advancing to the subsequent step seen in our program , we have the variable binding code defining $ <var:w> + <var:l1> $ toward $ <var:w>$ . This line takes the precondition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:l1> = <nat:1> \times <var:p> \land <var:w> = <nat:6> \times <var:p> ^ <nat:2> \} $ to $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:w> = <nat:6> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> \} $ . Going to the next step , the variable binding command assigning $ <var:w> + <var:l0$ into $ <var:w>$ . This line redefines the condition $ \{ <var:o> = <var:p> \land <var:l0> = <nat:6> \land <var:w> = <nat:6> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> \} $ toward $ \{ <var:o> = <var:p> \land <var:w> = <nat:6> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l0> := <nat:6> ; <var:l1> := <nat:1> ; <var:l1> := <var:l1> * <var:o> ; <var:l2> := <nat:6> ; <var:l2> := <var:l2> * <var:o> ; <var:l2> := <var:l2> * <var:o> ; <var:w> := <var:l2> ; <var:w> := <var:w> + <var:l1> ; <var:w> := <var:w> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:o> = <var:p> }} <def:poly> {{ <var:w> = <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:1> * <var:p> /\ <var:l2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:1> * <var:p> /\ <var:l2> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:1> * <var:p> /\ <var:l2> = <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:1> * <var:p> /\ <var:w> = <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:l0> = <nat:6> /\ <var:w> = <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:w> = <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 