\begin{document} \begin{theorem} Take the following code segment as follows \begin{verbatim} <var:k1> := <var:w> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:1> ; <var:j> := <var:k1> <var:j> := <var:j> + <var:k0> \end{verbatim} Assuming given all whole numbers $ <var:C> $ that $ <var:w> = <var:C> $ before the execution of our series of commands , then we see $ <var:j> = <nat:1> \times <var:C> + <nat:4> $ when series of commands finishes . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands is evident using Hoare techniques . Moving on to the upcoming line contained in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:w> = <var:C> \} & <var:k1> := <var:w> & \{ <var:w> = <var:C> \land <var:k1> = <var:C> \} \end{tabular} Shifting focus toward the subsequent lines seen in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:C> \} & <var:k1> := <var:w> & \{ <var:w> = <var:C> \land <var:k1> = <var:C> \} \\ \{ <var:w> = <var:C> \land <var:k1> = <var:C> \} & <var:k0> := <nat:4> & \{ <var:w> = <var:C> \land <var:k1> = <var:C> \land <var:k0> = <nat:4> \} \\ \{ <var:w> = <var:C> \land <var:k1> = <var:C> \land <var:k0> = <nat:4> \} & <var:k1> := <var:k1> * <nat:1> & \{ <var:w> = <var:C> \land <var:k1> = <nat:1> \cdot <var:C> \land <var:k0> = <nat:4> \} \\ \{ <var:w> = <var:C> \land <var:k1> = <nat:1> \cdot <var:C> \land <var:k0> = <nat:4> \} & <var:j> := <var:k1& \{ <var:w> = <var:C> \land <var:k0> = <nat:4> \land <var:j> = <nat:1> \cdot <var:C> \} \end{tabular} This is shown to be logically sound through the rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:w> = <var:C> }} <var:k1> := <var:w> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:1> ; <var:j> := <var:k1> <var:j> := <var:j> + <var:k0> {{ <var:j> = <nat:1> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:k1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:k1> = <var:C> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:k1> = <nat:1> * <var:C> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:k0> = <nat:4> /\ <var:j> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:j> = <nat:1> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 