\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:W1> := <var:Y> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:8> ; <var:x> := <var:W1> <var:x> := <var:x> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:Y> = <var:y> $ prior to interpreting this series of instructions it holds that $ <var:x> = <nat:8> \cdot <var:y> + <nat:8> $ when set of commands is done executing . \end{theorem} \begin{proof} Note that this decorated series of commands . \begin{eqnarray} \{ <var:Y> = <var:y> \} \\ <var:W1> := <var:Y> ; \\ \{ <var:Y> = <var:y> \land <var:W1> = <var:y> \} \\ <var:W0> := <nat:8> ; \\ \{ <var:Y> = <var:y> \land <var:W1> = <var:y> \land <var:W0> = <nat:8> \} \\ <var:W1> := <var:W1> * <nat:8> ; \\ \{ <var:Y> = <var:y> \land <var:W1> = <nat:8> \times <var:y> \land <var:W0> = <nat:8> \} \\ <var:x> := <var:W1> \\ \{ <var:Y> = <var:y> \land <var:W0> = <nat:8> \land <var:x> = <nat:8> \times <var:y> \} \\ <var:x> := <var:x> + <var:W0> \\ \{ <var:Y> = <var:y> \land <var:x> = <nat:8> \times <var:y> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:Y> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:8> ; <var:x> := <var:W1> <var:x> := <var:x> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:Y> = <var:y> }} <def:poly> {{ <var:x> = <nat:8> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:y> /\ <var:W1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:y> /\ <var:W1> = <var:y> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:y> /\ <var:W1> = <nat:8> * <var:y> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:y> /\ <var:W0> = <nat:8> /\ <var:x> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:y> /\ <var:x> = <nat:8> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 