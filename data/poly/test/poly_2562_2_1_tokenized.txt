\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:4> ; <var:X> := <var:W0> \end{verbatim} Allowing --- given positive integers $ <var:z> $ --- it to be that $ <var:C> = <var:z> $ before the evaluation of our segment of code , then $ <var:X> = <nat:4> $ when program finishes . \end{theorem} \begin{proof} Arguing the correctness of this program is done through standard Hoare logic . Paying attention to the following command contained in our set of instructions , we see the variable binding statement \verb | <var:W0> := <nat:4> ; | . This command moves the precondition $ \{ <var:C> = <var:z> \} $ toward the condition $ \{ <var:C> = <var:z> \land <var:W0> = <nat:4> \} $ . Going forward , we see the assignment statement letting $ <var:W0$ into $ <var:X>$ . This advances $ \{ <var:C> = <var:z> \land <var:W0> = <nat:4> \} $ into the condition $ \{ <var:C> = <var:z> \land <var:X> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:C> = <var:z> }} <var:W0> := <nat:4> ; <var:X> := <var:W0> {{ <var:X> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:X> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 