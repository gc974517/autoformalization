\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b> := <nat:4> ; <var:b> := <var:b> * <var:C> ; <var:b> := <var:b> * <var:C> ; <var:b> := <nat:2> + <var:b> * <var:C> ; <var:b> := <nat:2> + <var:b> * <var:C> ; <var:b> := <nat:4> + <var:b> * <var:C> ; <var:b> := <nat:1> + <var:b> * <var:C> ; <var:b> := <nat:3> + <var:b> * <var:C> ; <var:b> := <nat:4> + <var:b> * <var:C> ; <var:b> := <nat:3> + <var:b> * <var:C> ; <var:b> := <var:b> * <var:C> ; <var:b> := <nat:1> + <var:b> * <var:C> ; <var:b> := <nat:1> + <var:b> * <var:C> ; <var:b> := <nat:1> + <var:b> * <var:C> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Given that $ <var:C> = <var:x> $ prior to the execution of this program then we see $ <var:b> = <nat:4> \times <var:x> ^ <nat:13> + <nat:2> \times <var:x> ^ <nat:10> + <nat:2> \times <var:x> ^ <nat:9> + <nat:4> \times <var:x> ^ <nat:8> + <nat:1> \times <var:x> ^ <nat:7> + <nat:3> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:5> + <nat:3> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:1> $ after list of commands has terminated . \end{theorem} \begin{proof} The flow of logic for our program is accomplished with usual Hoare logic . Shifting focus toward the next statement in our list of commands , we see \begin{eqnarray} \{ <var:C> = <var:x> \} \, <var:b> := <nat:4> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \} \end{eqnarray} Advancing , \begin{eqnarray} \{ <var:C> = <var:x> \} \, <var:b> := <nat:4> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \} \, <var:b> := <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> + \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> + \} \, <var:b> := <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:2> + \} \end{eqnarray} Moving forward to the proceeding commands found in the series of instructions , \begin{eqnarray} \{ <var:C> = <var:x> \} \, <var:b> := <nat:4> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \} \, <var:b> := <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> + \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> + \} \, <var:b> := <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:2> + \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:2> + \} \, <var:b> := <nat:2> + <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:3> + <nat:2> \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:3> + <nat:2> \} \, <var:b> := <nat:2> + <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> + <nat:2> \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> + <nat:2> \} \, <var:b> := <nat:4> + <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:5> + <nat:2> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:4> \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:5> + <nat:2> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:4> \} \, <var:b> := <nat:1> + <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:6> + <nat:2> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:1> \} \\ \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:6> + <nat:2> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:1> \} \, <var:b> := <nat:3> + <var:b> * <var:C> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \times <var:x> ^ <nat:7> + <nat:2> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:3> \} \end{eqnarray} Advancing to the upcoming piece of code seen in the set of instructions , we see \begin{eqnarray} \{ <var:C> = <var:x> \} \, <var:b> := <nat:4> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \} \end{eqnarray} Keeping momentum , \begin{eqnarray} \{ <var:C> = <var:x> \} \, <var:b> := <nat:4> \, \{ <var:C> = <var:x> \land <var:b> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:4> ; <var:b> := <var:b> * <var:C> ; <var:b> := <var:b> * <var:C> ; <var:b> := <nat:2> + <var:b> * <var:C> ; <var:b> := <nat:2> + <var:b> * <var:C> ; <var:b> := <nat:4> + <var:b> * <var:C> ; <var:b> := <nat:1> + <var:b> * <var:C> ; <var:b> := <nat:3> + <var:b> * <var:C> ; <var:b> := <nat:4> + <var:b> * <var:C> ; <var:b> := <nat:3> + <var:b> * <var:C> ; <var:b> := <var:b> * <var:C> ; <var:b> := <nat:1> + <var:b> * <var:C> ; <var:b> := <nat:1> + <var:b> * <var:C> ; <var:b> := <nat:1> + <var:b> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:C> = <var:x> }} <def:poly> {{ <var:b> = <nat:4> * <var:x> ^ <nat:13> + <nat:2> * <var:x> ^ <nat:10> + <nat:2> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:8> + <nat:1> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:10> + <nat:2> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:11> + <nat:2> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:12> + <nat:2> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:1> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:4> * <var:x> ^ <nat:13> + <nat:2> * <var:x> ^ <nat:10> + <nat:2> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:8> + <nat:1> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 