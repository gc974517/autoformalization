\begin{document} \begin{theorem} Consider a set of instructions such that \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <var:f> * <var:P> ; <var:f> := <nat:2> + <var:f> * <var:P> ; <var:f> := <nat:2> + <var:f> * <var:P> ; <var:f> := <nat:3> + <var:f> * <var:P> ; <var:f> := <nat:2> + <var:f> * <var:P> ; <var:f> := <nat:1> + <var:f> * <var:P> ; <var:f> := <nat:2> + <var:f> * <var:P> ; <var:f> := <nat:4> + <var:f> * <var:P> ; <var:f> := <nat:3> + <var:f> * <var:P> ; <var:f> := <nat:4> + <var:f> * <var:P> ; <var:f> := <nat:3> + <var:f> * <var:P> ; <var:f> := <nat:4> + <var:f> * <var:P> ; <var:f> := <nat:4> + <var:f> * <var:P> \end{verbatim} Assume that $ <var:P> = <var:B> $ ahead of the execution of the code segment , it follows that $ <var:f> = <nat:1> * <var:B> ^ <nat:13> + <nat:2> * <var:B> ^ <nat:11> + <nat:2> * <var:B> ^ <nat:10> + <nat:3> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our list of instructions can be demonstrated through the following decorated code . \begin{eqnarray} \{ <var:P> = <var:B> \} \\ <var:f> := <nat:1> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \} \\ <var:f> := <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> + \} \\ <var:f> := <nat:2> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:2> + <nat:2> \} \\ <var:f> := <nat:2> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> + <nat:2> \} \\ <var:f> := <nat:3> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:3> \} \\ <var:f> := <nat:2> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:2> \} \\ <var:f> := <nat:1> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:6> + <nat:2> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:1> \} \\ <var:f> := <nat:2> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:7> + <nat:2> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:2> \} \\ <var:f> := <nat:4> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:8> + <nat:2> \times <var:B> ^ <nat:6> + <nat:2> \times <var:B> ^ <nat:5> + <nat:3> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:4> \} \\ <var:f> := <nat:3> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:9> + <nat:2> \times <var:B> ^ <nat:7> + <nat:2> \times <var:B> ^ <nat:6> + <nat:3> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:3> \} \\ <var:f> := <nat:4> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:10> + <nat:2> \times <var:B> ^ <nat:8> + <nat:2> \times <var:B> ^ <nat:7> + <nat:3> \times <var:B> ^ <nat:6> + <nat:2> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:4> \} \\ <var:f> := <nat:3> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:11> + <nat:2> \times <var:B> ^ <nat:9> + <nat:2> \times <var:B> ^ <nat:8> + <nat:3> \times <var:B> ^ <nat:7> + <nat:2> \times <var:B> ^ <nat:6> + <nat:1> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:4> + <nat:4> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:3> \} \\ <var:f> := <nat:4> + <var:f> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:12> + <nat:2> \times <var:B> ^ <nat:10> + <nat:2> \times <var:B> ^ <nat:9> + <nat:3> \times <var:B> ^ <nat:8> + <nat:2> \times <var:B> ^ <nat:7> + <nat:1> \times <var:B> ^ <nat:6> + <nat:2> \times <var:B> ^ <nat:5> + <nat:4> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:4> \} \\ <var:f> := <nat:4> + <var:f> * <var:P> \\ \{ <var:P> = <var:B> \land <var:f> = <nat:1> \times <var:B> ^ <nat:13> + <nat:2> \times <var:B> ^ <nat:11> + <nat:2> \times <var:B> ^ <nat:10> + <nat:3> \times <var:B> ^ <nat:9> + <nat:2> \times <var:B> ^ <nat:8> + <nat:1> \times <var:B> ^ <nat:7> + <nat:2> \times <var:B> ^ <nat:6> + <nat:4> \times <var:B> ^ <nat:5> + <nat:3> \times <var:B> ^ <nat:4> + <nat:4> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:P> = <var:B> }} <var:f> := <nat:1> ; <var:f> := <var:f> * <var:P> ; <var:f> := <nat:2> + <var:f> * <var:P> ; <var:f> := <nat:2> + <var:f> * <var:P> ; <var:f> := <nat:3> + <var:f> * <var:P> ; <var:f> := <nat:2> + <var:f> * <var:P> ; <var:f> := <nat:1> + <var:f> * <var:P> ; <var:f> := <nat:2> + <var:f> * <var:P> ; <var:f> := <nat:4> + <var:f> * <var:P> ; <var:f> := <nat:3> + <var:f> * <var:P> ; <var:f> := <nat:4> + <var:f> * <var:P> ; <var:f> := <nat:3> + <var:f> * <var:P> ; <var:f> := <nat:4> + <var:f> * <var:P> ; <var:f> := <nat:4> + <var:f> * <var:P> {{ <var:f> = <nat:1> * <var:B> ^ <nat:13> + <nat:2> * <var:B> ^ <nat:11> + <nat:2> * <var:B> ^ <nat:10> + <nat:3> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:10> + <nat:2> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:11> + <nat:2> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:12> + <nat:2> * <var:B> ^ <nat:10> + <nat:2> * <var:B> ^ <nat:9> + <nat:3> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:13> + <nat:2> * <var:B> ^ <nat:11> + <nat:2> * <var:B> ^ <nat:10> + <nat:3> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 