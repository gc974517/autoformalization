\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:w> ; <var:Q2> := <var:Q1> * <var:w> ; <var:Q0> := <nat:6> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:i> := <var:Q2> <var:i> := <var:i> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:w> = <var:B> $ ahead of running the code it must be that $ <var:i> = <nat:4> \times <var:B> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of commands can be seen using Hoare reasoning . Further , we see \verb | { <var:w> = <var:B> } <var:Q1> := <var:w> { <var:w> = <var:B> \land <var:Q1> = <var:B> } | , \verb | { <var:w> = <var:B> \land <var:Q1> = <var:B> } <var:Q2> := <var:Q1> * <var:w> { <var:w> = <var:B> \land <var:Q1> = <var:B> \land <var:Q2> = <var:B> ^ <nat:2> } | and \verb | { <var:w> = <var:B> \land <var:Q1> = <var:B> \land <var:Q2> = <var:B> ^ <nat:2> } <var:Q0> := <nat:6> { <var:w> = <var:B> \land <var:Q1> = <var:B> \land <var:Q2> = <var:B> ^ <nat:2> \land <var:Q0> = <nat:6> } | . This is shown through the binding scheme in Hoare logic . Honing in on the next commands in the list of instructions , we have \verb | { <var:w> = <var:B> } <var:Q1> := <var:w> { <var:w> = <var:B> \land <var:Q1> = <var:B> } | and \verb | { <var:w> = <var:B> \land <var:Q1> = <var:B> } <var:Q2> := <var:Q1> * <var:w> { <var:w> = <var:B> \land <var:Q1> = <var:B> \land <var:Q2> = <var:B> ^ <nat:2> } | . This is ensured through the variable update law found in Hoare logic . Shifting focus toward the next bit of code seen in the series of commands , \verb | { <var:w> = <var:B> } <var:Q1> := <var:w> { <var:w> = <var:B> \land <var:Q1> = <var:B> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q1> := <var:w> ; <var:Q2> := <var:Q1> * <var:w> ; <var:Q0> := <nat:6> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:i> := <var:Q2> <var:i> := <var:i> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:w> = <var:B> }} <def:poly> {{ <var:i> = <nat:4> * <var:B> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:Q1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:Q1> = <var:B> /\ <var:Q2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:Q1> = <var:B> /\ <var:Q2> = <var:B> ^ <nat:2> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:Q1> = <var:B> /\ <var:Q2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:Q1> = <var:B> /\ <var:Q0> = <nat:6> /\ <var:i> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:i> = <nat:4> * <var:B> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 