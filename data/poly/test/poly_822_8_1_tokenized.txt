\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as \begin{verbatim} <var:K1> := <var:S> ; <var:K2> := <var:K1> * <var:S> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:9> ; <var:Q> := <var:K2> <var:Q> := <var:Q> + <var:K1> <var:Q> := <var:Q> + <var:K0> \end{verbatim} Allowing it to hold that $ <var:S> = <var:P> $ , for any natural numbers $ <var:P> $ , prior to the evaluation of the set of commands , it follows that $ <var:Q> = <nat:9> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our list of instructions can be shown through Hoare techniques . Focusing on the subsequent statements in our program , we have \verb | { <var:S> = <var:P> } <var:K1> := <var:S> { <var:S> = <var:P> \land <var:K1> = <var:P> } | and \verb | { <var:S> = <var:P> \land <var:K1> = <var:P> } <var:K2> := <var:K1> * <var:S> { <var:S> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <var:P> ^ <nat:2> } | . Following , we see \verb | { <var:S> = <var:P> } <var:K1> := <var:S> { <var:S> = <var:P> \land <var:K1> = <var:P> } | and \verb | { <var:S> = <var:P> \land <var:K1> = <var:P> } <var:K2> := <var:K1> * <var:S> { <var:S> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <var:P> ^ <nat:2> } | . Taking a look at the following commands in the set of commands , we have \verb | { <var:S> = <var:P> } <var:K1> := <var:S> { <var:S> = <var:P> \land <var:K1> = <var:P> } | and \verb | { <var:S> = <var:P> \land <var:K1> = <var:P> } <var:K2> := <var:K1> * <var:S> { <var:S> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <var:P> ^ <nat:2> } | . This is given using the environment update scheme of Hoare techniques . Advancing to the subsequent lines contained in our list of commands , \verb | { <var:S> = <var:P> } <var:K1> := <var:S> { <var:S> = <var:P> \land <var:K1> = <var:P> } | and \verb | { <var:S> = <var:P> \land <var:K1> = <var:P> } <var:K2> := <var:K1> * <var:S> { <var:S> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <var:P> ^ <nat:2> } | . This is shown by the variable assignmet rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:S> = <var:P> }} <var:K1> := <var:S> ; <var:K2> := <var:K1> * <var:S> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:9> ; <var:Q> := <var:K2> <var:Q> := <var:Q> + <var:K1> <var:Q> := <var:Q> + <var:K0> {{ <var:Q> = <nat:9> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:K1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:K1> = <var:P> /\ <var:K2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:K1> = <var:P> /\ <var:K2> = <var:P> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:K1> = <nat:4> * <var:P> /\ <var:K2> = <var:P> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:K1> = <nat:4> * <var:P> /\ <var:K2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:K1> = <nat:4> * <var:P> /\ <var:K0> = <nat:9> /\ <var:Q> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:K0> = <nat:9> /\ <var:Q> = <nat:9> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:P> /\ <var:Q> = <nat:9> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 