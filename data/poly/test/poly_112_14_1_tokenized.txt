\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:x1> := <var:q> ; <var:x2> := <var:x1> * <var:q> ; <var:x3> := <var:x2> * <var:q> ; <var:x4> := <var:x3> * <var:q> ; <var:x0> := <nat:8> ; <var:x1> := <var:x1> * <nat:5> ; <var:x2> := <var:x2> * <nat:5> ; <var:x3> := <var:x3> * <nat:7> ; <var:x4> := <var:x4> * <nat:8> ; <var:Z> := <var:x4> <var:Z> := <var:Z> + <var:x3> <var:Z> := <var:Z> + <var:x2> <var:Z> := <var:Z> + <var:x1> <var:Z> := <var:Z> + <var:x0> \end{verbatim} Assume $ <var:q> = <var:T> $ before the execution of our list of commands then we have $ <var:Z> = <nat:8> \cdot <var:T> ^ <nat:4> + <nat:7> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> + <nat:5> \cdot <var:T> + <nat:8> $ when code segment exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:T> \} \\ <var:x1> := <var:q> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <var:T> \} \\ <var:x2> := <var:x1> * <var:q> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <var:T> \land <var:x2> = <var:T> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:q> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <var:T> \land <var:x2> = <var:T> ^ <nat:2> \land <var:x3> = <var:T> ^ <nat:3> \} \\ <var:x4> := <var:x3> * <var:q> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <var:T> \land <var:x2> = <var:T> ^ <nat:2> \land <var:x3> = <var:T> ^ <nat:3> \land <var:x4> = <var:T> ^ <nat:4> \} \\ <var:x0> := <nat:8> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <var:T> \land <var:x2> = <var:T> ^ <nat:2> \land <var:x3> = <var:T> ^ <nat:3> \land <var:x4> = <var:T> ^ <nat:4> \land <var:x0> = <nat:8> \} \\ <var:x1> := <var:x1> * <nat:5> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <nat:5> \times <var:T> \land <var:x2> = <var:T> ^ <nat:2> \land <var:x3> = <var:T> ^ <nat:3> \land <var:x4> = <var:T> ^ <nat:4> \land <var:x0> = <nat:8> \} \\ <var:x2> := <var:x2> * <nat:5> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <nat:5> \times <var:T> \land <var:x2> = <nat:5> \times <var:T> ^ <nat:2> \land <var:x3> = <var:T> ^ <nat:3> \land <var:x4> = <var:T> ^ <nat:4> \land <var:x0> = <nat:8> \} \\ <var:x3> := <var:x3> * <nat:7> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <nat:5> \times <var:T> \land <var:x2> = <nat:5> \times <var:T> ^ <nat:2> \land <var:x3> = <nat:7> \times <var:T> ^ <nat:3> \land <var:x4> = <var:T> ^ <nat:4> \land <var:x0> = <nat:8> \} \\ <var:x4> := <var:x4> * <nat:8> ; \\ \{ <var:q> = <var:T> \land <var:x1> = <nat:5> \times <var:T> \land <var:x2> = <nat:5> \times <var:T> ^ <nat:2> \land <var:x3> = <nat:7> \times <var:T> ^ <nat:3> \land <var:x4> = <nat:8> \times <var:T> ^ <nat:4> \land <var:x0> = <nat:8> \} \\ <var:Z> := <var:x4> \\ \{ <var:q> = <var:T> \land <var:x1> = <nat:5> \times <var:T> \land <var:x2> = <nat:5> \times <var:T> ^ <nat:2> \land <var:x3> = <nat:7> \times <var:T> ^ <nat:3> \land <var:x0> = <nat:8> \land <var:Z> = <nat:8> \times <var:T> ^ <nat:4> \} \\ <var:Z> := <var:Z> + <var:x3> \\ \{ <var:q> = <var:T> \land <var:x1> = <nat:5> \times <var:T> \land <var:x2> = <nat:5> \times <var:T> ^ <nat:2> \land <var:x0> = <nat:8> \land <var:Z> = <nat:8> \times <var:T> ^ <nat:4> + <nat:7> \times <var:T> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:x2> \\ \{ <var:q> = <var:T> \land <var:x1> = <nat:5> \times <var:T> \land <var:x0> = <nat:8> \land <var:Z> = <nat:8> \times <var:T> ^ <nat:4> + <nat:7> \times <var:T> ^ <nat:3> + <nat:5> \times <var:T> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:x1> \\ \{ <var:q> = <var:T> \land <var:x0> = <nat:8> \land <var:Z> = <nat:8> \times <var:T> ^ <nat:4> + <nat:7> \times <var:T> ^ <nat:3> + <nat:5> \times <var:T> ^ <nat:2> + <nat:5> \times <var:T> \} \\ <var:Z> := <var:Z> + <var:x0> \\ \{ <var:q> = <var:T> \land <var:Z> = <nat:8> \times <var:T> ^ <nat:4> + <nat:7> \times <var:T> ^ <nat:3> + <nat:5> \times <var:T> ^ <nat:2> + <nat:5> \times <var:T> + <nat:8> \} \end{eqnarray} Using Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <var:x4> : string := " <var:x4> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:q> = <var:T> }} <var:x1> := <var:q> ; <var:x2> := <var:x1> * <var:q> ; <var:x3> := <var:x2> * <var:q> ; <var:x4> := <var:x3> * <var:q> ; <var:x0> := <nat:8> ; <var:x1> := <var:x1> * <nat:5> ; <var:x2> := <var:x2> * <nat:5> ; <var:x3> := <var:x3> * <nat:7> ; <var:x4> := <var:x4> * <nat:8> ; <var:Z> := <var:x4> <var:Z> := <var:Z> + <var:x3> <var:Z> := <var:Z> + <var:x2> <var:Z> := <var:Z> + <var:x1> <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:8> * <var:T> ^ <nat:4> + <nat:7> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <var:T> /\ <var:x2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <var:T> /\ <var:x2> = <var:T> ^ <nat:2> /\ <var:x3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <var:T> /\ <var:x2> = <var:T> ^ <nat:2> /\ <var:x3> = <var:T> ^ <nat:3> /\ <var:x4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <var:T> /\ <var:x2> = <var:T> ^ <nat:2> /\ <var:x3> = <var:T> ^ <nat:3> /\ <var:x4> = <var:T> ^ <nat:4> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <nat:5> * <var:T> /\ <var:x2> = <var:T> ^ <nat:2> /\ <var:x3> = <var:T> ^ <nat:3> /\ <var:x4> = <var:T> ^ <nat:4> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <nat:5> * <var:T> /\ <var:x2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:x3> = <var:T> ^ <nat:3> /\ <var:x4> = <var:T> ^ <nat:4> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <nat:5> * <var:T> /\ <var:x2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:x3> = <nat:7> * <var:T> ^ <nat:3> /\ <var:x4> = <var:T> ^ <nat:4> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <nat:5> * <var:T> /\ <var:x2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:x3> = <nat:7> * <var:T> ^ <nat:3> /\ <var:x4> = <nat:8> * <var:T> ^ <nat:4> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <nat:5> * <var:T> /\ <var:x2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:x3> = <nat:7> * <var:T> ^ <nat:3> /\ <var:x0> = <nat:8> /\ <var:Z> = <nat:8> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <nat:5> * <var:T> /\ <var:x2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:x0> = <nat:8> /\ <var:Z> = <nat:8> * <var:T> ^ <nat:4> + <nat:7> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x1> = <nat:5> * <var:T> /\ <var:x0> = <nat:8> /\ <var:Z> = <nat:8> * <var:T> ^ <nat:4> + <nat:7> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:x0> = <nat:8> /\ <var:Z> = <nat:8> * <var:T> ^ <nat:4> + <nat:7> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:Z> = <nat:8> * <var:T> ^ <nat:4> + <nat:7> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 