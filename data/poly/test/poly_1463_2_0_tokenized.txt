\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:4> ; <var:C> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Given it to be that $ <var:P> = <var:s> $ ( given all $ <var:s> $ ) prior to the execution of the segment of code , it follows that $ <var:C> = <nat:4> $ . \end{theorem} \begin{proof} Observe that the following decorated program . \begin{eqnarray} \{ <var:P> = <var:s> \} \\ <var:q0> := <nat:4> ; \\ \{ <var:P> = <var:s> \land <var:q0> = <nat:4> \} \\ <var:C> := <var:q0> \\ \{ <var:P> = <var:s> \land <var:C> = <nat:4> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:C> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:P> = <var:s> }} <def:poly> {{ <var:C> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:C> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 