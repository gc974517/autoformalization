\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:Q> ; <var:G0> := <nat:8> ; <var:G1> := <var:G1> * <nat:2> ; <var:X> := <var:G1> <var:X> := <var:X> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:Q> = <var:L> $ prior to evaluating the list of commands it must be that $ <var:X> = <nat:2> * <var:L> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:L> \} \\ <var:G1> := <var:Q> ; \\ \{ <var:Q> = <var:L> \land <var:G1> = <var:L> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:Q> = <var:L> \land <var:G1> = <var:L> \land <var:G0> = <nat:8> \} \\ <var:G1> := <var:G1> * <nat:2> ; \\ \{ <var:Q> = <var:L> \land <var:G1> = <nat:2> \times <var:L> \land <var:G0> = <nat:8> \} \\ <var:X> := <var:G1> \\ \{ <var:Q> = <var:L> \land <var:G0> = <nat:8> \land <var:X> = <nat:2> \times <var:L> \} \end{eqnarray} Continuing running this series of instructions results in : \begin{eqnarray} <var:X> := <var:X> + <var:G0> \\ \{ <var:Q> = <var:L> \land <var:X> = <nat:2> \times <var:L> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:Q> ; <var:G0> := <nat:8> ; <var:G1> := <var:G1> * <nat:2> ; <var:X> := <var:G1> <var:X> := <var:X> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Q> = <var:L> }} <def:poly> {{ <var:X> = <nat:2> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:G1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:G1> = <var:L> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:G1> = <nat:2> * <var:L> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:G0> = <nat:8> /\ <var:X> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:X> = <nat:2> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 