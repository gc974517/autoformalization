\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:S> := <nat:3> ; <var:S> := <nat:1> + <var:S> * <var:k> ; <var:S> := <nat:1> + <var:S> * <var:k> ; <var:S> := <nat:1> + <var:S> * <var:k> ; <var:S> := <nat:3> + <var:S> * <var:k> \end{verbatim} Given ( given some natural coefficients $ <var:X> $ ) it to be that $ <var:k> = <var:X> $ prior to executing the series of commands it must be that we see $ <var:S> = <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives : \begin{eqnarray} \{ <var:k> = <var:X> \} \\ <var:S> := <nat:3> ; \\ \{ <var:k> = <var:X> \land <var:S> = <nat:3> \} \\ <var:S> := <nat:1> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:X> \land <var:S> = <nat:3> \cdot <var:X> + <nat:1> \} \\ <var:S> := <nat:1> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:X> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:1> \} \\ <var:S> := <nat:1> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:X> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:1> \} \\ <var:S> := <nat:3> + <var:S> * <var:k> \\ \{ <var:k> = <var:X> \land <var:S> = <nat:3> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:3> \} \end{eqnarray} Hence , our code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:k> = <var:X> }} <var:S> := <nat:3> ; <var:S> := <nat:1> + <var:S> * <var:k> ; <var:S> := <nat:1> + <var:S> * <var:k> ; <var:S> := <nat:1> + <var:S> * <var:k> ; <var:S> := <nat:3> + <var:S> * <var:k> {{ <var:S> = <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:S> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:S> = <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:S> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:S> = <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:S> = <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 