\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as \begin{verbatim} <var:s> := <nat:1> ; <var:s> := <nat:4> + <var:s> * <var:A> \end{verbatim} Allow it to hold that $ <var:A> = <var:f> $ ahead of executing our list of instructions , it holds that we see $ <var:s> = <nat:1> \cdot <var:f> + <nat:4> $ once set of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is evident through typical Hoare logic . Advancing on , the binding code assigning $ <nat:1> $ to $ <var:s>$ . This line redefines the condition $ \{ <var:A> = <var:f> \} $ to the condition $ \{ <var:A> = <var:f> \land <var:s> = <nat:1> \} $ . This is sound using the assignment scheme given by typical Hoare techniques . Next , we see the binding statement \verb | <var:s> := <nat:4> + <var:s> * <var:A> | . This code forwards $ \{ <var:A> = <var:f> \land <var:s> = <nat:1> \} $ as the postcondition $ \{ <var:A> = <var:f> \land <var:s> = <nat:1> * <var:f> + <nat:4> \} $ . This is shown to be logically sound with the assignment inference rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:A> = <var:f> }} <var:s> := <nat:1> ; <var:s> := <nat:4> + <var:s> * <var:A> {{ <var:s> = <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:s> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:s> = <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 