\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:4> + <var:t> * <var:Q> ; <var:t> := <nat:1> + <var:t> * <var:Q> ; <var:t> := <var:t> * <var:Q> ; <var:t> := <nat:1> + <var:t> * <var:Q> ; <var:t> := <nat:4> + <var:t> * <var:Q> ; <var:t> := <var:t> * <var:Q> ; <var:t> := <nat:4> + <var:t> * <var:Q> ; <var:t> := <nat:1> + <var:t> * <var:Q> ; <var:t> := <nat:3> + <var:t> * <var:Q> \end{verbatim} Assume that $ <var:Q> = <var:f> $ ahead of the evaluation of the series of commands it must be that we see $ <var:t> = <nat:2> \cdot <var:f> ^ <nat:9> + <nat:4> \cdot <var:f> ^ <nat:8> + <nat:1> \cdot <var:f> ^ <nat:7> + <nat:1> \cdot <var:f> ^ <nat:5> + <nat:4> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the code is evident with typical Hoare logic . Moving on to the proceeding statement in the set of commands , we see the assignment command \verb | <var:t> := <nat:2> ; | . This advances $ \{ <var:Q> = <var:f> \} $ as the postcondition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \} $ . After , we see the variable assignmet command binding $ <nat:4> + <var:t> * <var:Q> $ as $ <var:t>$ . This moves the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \} $ as $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> + <nat:4> \} $ . This is shown to be logically sound by the assignment rule of usual Hoare reasoning . Shifting focus toward the next command contained in our set of instructions , the variable update command \verb | <var:t> := <nat:1> + <var:t> * <var:Q> ; | . This takes the precondition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> + <nat:4> \} $ as the postcondition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:1> \} $ . Stepping forward , we have the variable assignmet statement letting $ <var:t> * <var:Q> $ as $ <var:t>$ . This moves $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:1> \} $ as the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + \} $ . This is shown to be logically sound by the assignment rule defined by Hoare reasoning . Considering the upcoming command found in the segment of code , the code \verb | <var:t> := <nat:1> + <var:t> * <var:Q> ; | . This code takes the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + \} $ toward $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \} $ . This is rigorously given using the assignment scheme found in usual Hoare techniques . Paying attention to the upcoming step contained in the set of commands , we have the variable assignmet code defining $ <nat:4> + <var:t> * <var:Q> $ to $ <var:t>$ . This command takes the precondition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \} $ as the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:5> + <nat:4> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> + <nat:4> \} $ . Stepping through , the variable assignmet statement \verb | <var:t> := <var:t> * <var:Q> ; | . This line forwards $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:5> + <nat:4> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> + <nat:4> \} $ as the postcondition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:6> + <nat:4> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + \} $ . This is given using the assignment scheme obtained from usual Hoare logic . Going to the next step , we see the variable binding command \verb | <var:t> := <nat:4> + <var:t> * <var:Q> ; | . This transfers the precondition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:6> + <nat:4> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + \} $ into the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:7> + <nat:4> \cdot <var:f> ^ <nat:6> + <nat:1> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:4> \} $ . Considering the subsequent line seen in our set of instructions , the variable update statement defining $ <nat:1> + <var:t> * <var:Q> $ into $ <var:t>$ . This line advances the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:7> + <nat:4> \cdot <var:f> ^ <nat:6> + <nat:1> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:4> \} $ as the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:8> + <nat:4> \cdot <var:f> ^ <nat:7> + <nat:1> \cdot <var:f> ^ <nat:6> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> + <nat:1> \} $ . Moving forward to the next step , we see the statement \verb | <var:t> := <nat:3> + <var:t> * <var:Q> | . This takes the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:8> + <nat:4> \cdot <var:f> ^ <nat:7> + <nat:1> \cdot <var:f> ^ <nat:6> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> + <nat:1> \} $ to the condition $ \{ <var:Q> = <var:f> \land <var:t> = <nat:2> \cdot <var:f> ^ <nat:9> + <nat:4> \cdot <var:f> ^ <nat:8> + <nat:1> \cdot <var:f> ^ <nat:7> + <nat:1> \cdot <var:f> ^ <nat:5> + <nat:4> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:Q> = <var:f> }} <var:t> := <nat:2> ; <var:t> := <nat:4> + <var:t> * <var:Q> ; <var:t> := <nat:1> + <var:t> * <var:Q> ; <var:t> := <var:t> * <var:Q> ; <var:t> := <nat:1> + <var:t> * <var:Q> ; <var:t> := <nat:4> + <var:t> * <var:Q> ; <var:t> := <var:t> * <var:Q> ; <var:t> := <nat:4> + <var:t> * <var:Q> ; <var:t> := <nat:1> + <var:t> * <var:Q> ; <var:t> := <nat:3> + <var:t> * <var:Q> {{ <var:t> = <nat:2> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:t> = <nat:2> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 