\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:5> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:u> ; <var:t> := <var:b1> ; <var:t> := <var:t> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Given it to be that $ <var:u> = <var:F> $ , given positive integers $ <var:F> $ , before running this list of instructions it follows that we see $ <var:t> = <nat:6> \cdot <var:F> + <nat:5> $ after segment of code finishes . \end{theorem} \begin{proof} The argument for this segment of code can be shown by standard Hoare logic . Shifting focus toward the following pieces of code contained in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:u> = <var:F> \} & <var:b0> := <nat:5> & \{ <var:u> = <var:F> \land <var:b0> = <nat:5> \} \\ \{ <var:u> = <var:F> \land <var:b0> = <nat:5> \} & <var:b1> := <nat:6> & \{ <var:u> = <var:F> \land <var:b0> = <nat:5> \land <var:b1> = <nat:6> \} \\ \{ <var:u> = <var:F> \land <var:b0> = <nat:5> \land <var:b1> = <nat:6> \} & <var:b1> := <var:b1> * <var:u> & \{ <var:u> = <var:F> \land <var:b0> = <nat:5> \land <var:b1> = <nat:6> \times <var:F> \} \\ \{ <var:u> = <var:F> \land <var:b0> = <nat:5> \land <var:b1> = <nat:6> \times <var:F> \} & <var:t> := <var:b1> & \{ <var:u> = <var:F> \land <var:b0> = <nat:5> \land <var:t> = <nat:6> \times <var:F> \} \end{tabular} Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:u> = <var:F> \} & <var:b0> := <nat:5> & \{ <var:u> = <var:F> \land <var:b0> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:5> ; <var:b1> := <nat:6> ; <var:b1> := <var:b1> * <var:u> ; <var:t> := <var:b1> ; <var:t> := <var:t> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:u> = <var:F> }} <def:poly> {{ <var:t> = <nat:6> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:b0> = <nat:5> /\ <var:t> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:t> = <nat:6> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 