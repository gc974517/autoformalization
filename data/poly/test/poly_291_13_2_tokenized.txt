\begin{document} \begin{theorem} Define a set of commands such that \begin{verbatim} <var:d> := <nat:2> ; <var:d> := <nat:2> + <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <nat:2> + <var:d> * <var:O> ; <var:d> := <nat:3> + <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <nat:4> + <var:d> * <var:O> ; <var:d> := <nat:2> + <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <nat:4> + <var:d> * <var:O> \end{verbatim} Allow given any $ <var:C> \in \mathbb{Z}^+ $ that $ <var:O> = <var:C> $ ahead of running this code it holds that we have $ <var:d> = <nat:2> \cdot <var:C> ^ <nat:12> + <nat:2> \cdot <var:C> ^ <nat:11> + <nat:2> \cdot <var:C> ^ <nat:9> + <nat:3> \cdot <var:C> ^ <nat:8> + <nat:4> \cdot <var:C> ^ <nat:5> + <nat:2> \cdot <var:C> ^ <nat:4> + <nat:4> $ . \end{theorem} \begin{proof} Notice this decorated code . \begin{eqnarray} \{ <var:O> = <var:C> \} \\ <var:d> := <nat:2> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \} \\ <var:d> := <nat:2> + <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> + <nat:2> \} \\ <var:d> := <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + \} \\ <var:d> := <nat:2> + <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:2> \} \\ <var:d> := <nat:3> + <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> + <nat:3> \} \\ <var:d> := <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + \} \\ <var:d> := <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + \} \\ <var:d> := <nat:4> + <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:4> \} \\ <var:d> := <nat:2> + <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:8> + <nat:2> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> + <nat:2> \} \\ <var:d> := <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:9> + <nat:2> \times <var:C> ^ <nat:8> + <nat:2> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + \} \\ <var:d> := <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:10> + <nat:2> \times <var:C> ^ <nat:9> + <nat:2> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:4> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + \} \\ <var:d> := <var:d> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:11> + <nat:2> \times <var:C> ^ <nat:10> + <nat:2> \times <var:C> ^ <nat:8> + <nat:3> \times <var:C> ^ <nat:7> + <nat:4> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + \} \\ <var:d> := <nat:4> + <var:d> * <var:O> \\ \{ <var:O> = <var:C> \land <var:d> = <nat:2> \times <var:C> ^ <nat:12> + <nat:2> \times <var:C> ^ <nat:11> + <nat:2> \times <var:C> ^ <nat:9> + <nat:3> \times <var:C> ^ <nat:8> + <nat:4> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:4> \} \end{eqnarray} Using typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:O> = <var:C> }} <var:d> := <nat:2> ; <var:d> := <nat:2> + <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <nat:2> + <var:d> * <var:O> ; <var:d> := <nat:3> + <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <nat:4> + <var:d> * <var:O> ; <var:d> := <nat:2> + <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <var:d> * <var:O> ; <var:d> := <nat:4> + <var:d> * <var:O> {{ <var:d> = <nat:2> * <var:C> ^ <nat:12> + <nat:2> * <var:C> ^ <nat:11> + <nat:2> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:8> + <nat:4> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:7> + <nat:2> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:8> + <nat:2> * <var:C> ^ <nat:7> + <nat:2> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:9> + <nat:2> * <var:C> ^ <nat:8> + <nat:2> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:10> + <nat:2> * <var:C> ^ <nat:9> + <nat:2> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:11> + <nat:2> * <var:C> ^ <nat:10> + <nat:2> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:4> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:d> = <nat:2> * <var:C> ^ <nat:12> + <nat:2> * <var:C> ^ <nat:11> + <nat:2> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:8> + <nat:4> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 