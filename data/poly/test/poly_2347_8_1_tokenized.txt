\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:q> ; <var:e2> := <var:e1> * <var:q> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:8> ; <var:e2> := <var:e2> * <nat:5> ; <var:J> := <var:e2> <var:J> := <var:J> + <var:e1> <var:J> := <var:J> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Assuming --- for $ <var:Y> \in \mathbb{N} $ --- $ <var:q> = <var:Y> $ prior to interpreting this series of commands , it holds that we see $ <var:J> = <nat:5> \cdot <var:Y> ^ <nat:2> + <nat:8> \cdot <var:Y> + <nat:3> $ after list of instructions has finished executing . \end{theorem} \begin{proof} Proving correctness for our segment of code can be given using Hoare logic . Stepping through , we see \begin{verbatim} { <var:q> = <var:Y> } <var:e1> := <var:q> { <var:q> = <var:Y> \land <var:e1> = <var:Y> } { <var:q> = <var:Y> \land <var:e1> = <var:Y> } <var:e2> := <var:e1> * <var:q> { <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> } { <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> } <var:e0> := <nat:3> { <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e0> = <nat:3> } { <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e0> = <nat:3> } <var:e1> := <var:e1> * <nat:8> { <var:q> = <var:Y> \land <var:e1> = <nat:8> \times <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e0> = <nat:3> } \end{verbatim} Moving forward to the next step , we see \begin{verbatim} { <var:q> = <var:Y> } <var:e1> := <var:q> { <var:q> = <var:Y> \land <var:e1> = <var:Y> } { <var:q> = <var:Y> \land <var:e1> = <var:Y> } <var:e2> := <var:e1> * <var:q> { <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> } \end{verbatim} This is given through the variable assignmet inference rule in Hoare reasoning . Observing the subsequent line in the set of commands , \begin{verbatim} { <var:q> = <var:Y> } <var:e1> := <var:q> { <var:q> = <var:Y> \land <var:e1> = <var:Y> } \end{verbatim} Moving on to the next step , we see \begin{verbatim} { <var:q> = <var:Y> } <var:e1> := <var:q> { <var:q> = <var:Y> \land <var:e1> = <var:Y> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e1> := <var:q> ; <var:e2> := <var:e1> * <var:q> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:8> ; <var:e2> := <var:e2> * <nat:5> ; <var:J> := <var:e2> <var:J> := <var:J> + <var:e1> <var:J> := <var:J> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <def:poly> {{ <var:J> = <nat:5> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <nat:8> * <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <nat:8> * <var:Y> /\ <var:e2> = <nat:5> * <var:Y> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <nat:8> * <var:Y> /\ <var:e0> = <nat:3> /\ <var:J> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e0> = <nat:3> /\ <var:J> = <nat:5> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:J> = <nat:5> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 