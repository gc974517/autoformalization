\begin{document} \begin{theorem} Take a set of instructions : \begin{verbatim} <var:t1> := <var:s> ; <var:t2> := <var:t1> * <var:s> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:1> ; <var:F> := <var:t2> <var:F> := <var:F> + <var:t1> <var:F> := <var:F> + <var:t0> \end{verbatim} Assume ( for some positive integers $ <var:K> $ ) it to be that $ <var:s> = <var:K> $ ahead of interpreting the code segment it must be that we see $ <var:F> = <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> $ when set of commands has executed . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:s> = <var:K> \} \\ <var:t1> := <var:s> ; \\ \{ <var:s> = <var:K> \land <var:t1> = <var:K> \} \\ <var:t2> := <var:t1> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:t1> = <var:K> \land <var:t2> = <var:K> ^ <nat:2> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:s> = <var:K> \land <var:t1> = <var:K> \land <var:t2> = <var:K> ^ <nat:2> \land <var:t0> = <nat:2> \} \\ <var:t1> := <var:t1> * <nat:3> ; \\ \{ <var:s> = <var:K> \land <var:t1> = <nat:3> * <var:K> \land <var:t2> = <var:K> ^ <nat:2> \land <var:t0> = <nat:2> \} \\ <var:t2> := <var:t2> * <nat:1> ; \\ \{ <var:s> = <var:K> \land <var:t1> = <nat:3> * <var:K> \land <var:t2> = <nat:1> * <var:K> ^ <nat:2> \land <var:t0> = <nat:2> \} \\ <var:F> := <var:t2> \\ \{ <var:s> = <var:K> \land <var:t1> = <nat:3> * <var:K> \land <var:t0> = <nat:2> \land <var:F> = <nat:1> * <var:K> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:t1> \\ \{ <var:s> = <var:K> \land <var:t0> = <nat:2> \land <var:F> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> \} \\ <var:F> := <var:F> + <var:t0> \\ \{ <var:s> = <var:K> \land <var:F> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> \} \end{eqnarray} As a result , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:s> = <var:K> }} <var:t1> := <var:s> ; <var:t2> := <var:t1> * <var:s> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:1> ; <var:F> := <var:t2> <var:F> := <var:F> + <var:t1> <var:F> := <var:F> + <var:t0> {{ <var:F> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:t1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:t1> = <var:K> /\ <var:t2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:t1> = <var:K> /\ <var:t2> = <var:K> ^ <nat:2> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:t1> = <nat:3> * <var:K> /\ <var:t2> = <var:K> ^ <nat:2> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:t1> = <nat:3> * <var:K> /\ <var:t2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:t1> = <nat:3> * <var:K> /\ <var:t0> = <nat:2> /\ <var:F> = <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:t0> = <nat:2> /\ <var:F> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:F> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 