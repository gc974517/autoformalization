\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:j> := <nat:4> ; <var:j> := <nat:3> + <var:j> * <var:l> ; <var:j> := <nat:2> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> \end{verbatim} Allow it to hold that $ <var:l> = <var:d> $ --- for some natural numbers $ <var:d> $ --- before the evaluation of our list of instructions it follows that we have $ <var:j> = <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> $ when program has finished . \end{theorem} \begin{proof} Arguing the correctness of the program can be seen by Hoare logic . Keeping momentum , we see the environment update line yielding $ <nat:4> $ into $ <var:j>$ . This moves the precondition $ \{ <var:l> = <var:d> \} $ toward the postcondition $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> \} $ . Taking a look at the proceeding piece of code in the list of commands , we see the variable update statement assigning $ <nat:3> + <var:j> * <var:l> $ to $ <var:j>$ . This line takes $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> \} $ toward the condition $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> * <var:d> + <nat:3> \} $ . This is shown with the assignment law given in typical Hoare logic . Jumping to the upcoming statement seen in our code segment , we see the variable assignmet command letting $ <nat:2> + <var:j> * <var:l> $ into $ <var:j>$ . This line advances $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> * <var:d> + <nat:3> \} $ as the postcondition $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> \} $ . This is shown using the assignment inference rule of usual Hoare logic . Moving forward to the next step contained in our list of commands , we see the variable binding statement letting $ <nat:3> + <var:j> * <var:l> $ as $ <var:j>$ . This statement forwards the precondition $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> \} $ to the condition $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> \} $ . Next , we have the binding code \verb | <var:j> := <nat:3> + <var:j> * <var:l> | . This command forwards $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> \} $ to the condition $ \{ <var:l> = <var:d> \land <var:j> = <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> \} $ . This is rigorously given through the assignment inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:l> = <var:d> }} <var:j> := <nat:4> ; <var:j> := <nat:3> + <var:j> * <var:l> ; <var:j> := <nat:2> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> {{ <var:j> = <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:j> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:j> = <nat:4> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:j> = <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:j> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:j> = <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 