\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:p> ; <var:s2> := <var:s1> * <var:p> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:4> ; <var:O> := <var:s2> <var:O> := <var:O> + <var:s1> <var:O> := <var:O> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assuming $ <var:p> = <var:R> $ ( taking $ <var:R> $ ) ahead of running the series of commands it follows that we have $ <var:O> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:1> $ when code finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be seen by typical Hoare techniques . Immediately following , we have \begin{eqnarray} \{ <var:p> = <var:R> \} \, <var:s1> := <var:p> \, \{ <var:p> = <var:R> \land <var:s1> = <var:R> \} \end{eqnarray} Honing in on the following statements contained in the series of instructions , \begin{eqnarray} \{ <var:p> = <var:R> \} \, <var:s1> := <var:p> \, \{ <var:p> = <var:R> \land <var:s1> = <var:R> \} \\ \{ <var:p> = <var:R> \land <var:s1> = <var:R> \} \, <var:s2> := <var:s1> * <var:p> \, \{ <var:p> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \} \\ \{ <var:p> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \} \, <var:s0> := <nat:1> \, \{ <var:p> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s0> = <nat:1> \} \\ \{ <var:p> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s0> = <nat:1> \} \, <var:s1> := <var:s1> * <nat:2> \, \{ <var:p> = <var:R> \land <var:s1> = <nat:2> \times <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s0> = <nat:1> \} \\ \{ <var:p> = <var:R> \land <var:s1> = <nat:2> \times <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s0> = <nat:1> \} \, <var:s2> := <var:s2> * <nat:4> \, \{ <var:p> = <var:R> \land <var:s1> = <nat:2> \times <var:R> \land <var:s2> = <nat:4> \times <var:R> ^ <nat:2> \land <var:s0> = <nat:1> \} \end{eqnarray} This is rigorously given by the rule defined by Hoare logic . Advancing , we see \begin{eqnarray} \{ <var:p> = <var:R> \} \, <var:s1> := <var:p> \, \{ <var:p> = <var:R> \land <var:s1> = <var:R> \} \end{eqnarray} Immediately following , we have \begin{eqnarray} \{ <var:p> = <var:R> \} \, <var:s1> := <var:p> \, \{ <var:p> = <var:R> \land <var:s1> = <var:R> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s1> := <var:p> ; <var:s2> := <var:s1> * <var:p> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:4> ; <var:O> := <var:s2> <var:O> := <var:O> + <var:s1> <var:O> := <var:O> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:p> = <var:R> }} <def:poly> {{ <var:O> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:s1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:s1> = <nat:2> * <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:s1> = <nat:2> * <var:R> /\ <var:s2> = <nat:4> * <var:R> ^ <nat:2> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:s1> = <nat:2> * <var:R> /\ <var:s0> = <nat:1> /\ <var:O> = <nat:4> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:s0> = <nat:1> /\ <var:O> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:O> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 