\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:4> ; <var:p> := <var:L0> \end{verbatim} Assuming it to hold that $ <var:G> = <var:t> $ --- for some natural coefficients $ <var:t> $ --- ahead of evaluating this series of commands it must be that we see $ <var:p> = <nat:4> $ when set of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:t> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:G> = <var:t> \land <var:L0> = <nat:4> \} \\ <var:p> := <var:L0> \\ \{ <var:G> = <var:t> \land <var:p> = <nat:4> \} \end{eqnarray} The application of typical Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:G> = <var:t> }} <var:L0> := <nat:4> ; <var:p> := <var:L0> {{ <var:p> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:p> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 