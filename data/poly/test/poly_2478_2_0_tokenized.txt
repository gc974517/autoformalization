\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:4> ; <var:D> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Allow --- for all positive coefficients $ <var:r> $ --- $ <var:t> = <var:r> $ before interpreting our segment of code , it holds that we have $ <var:D> = <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques yields : \begin{eqnarray} \{ <var:t> = <var:r> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:t> = <var:r> \land <var:x0> = <nat:4> \} \\ <var:D> := <var:x0> \\ \{ <var:t> = <var:r> \land <var:D> = <nat:4> \} \end{eqnarray} Hence , the code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:D> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:t> = <var:r> }} <def:poly> {{ <var:D> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:D> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 