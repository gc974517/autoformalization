\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:2> ; <var:U1> := <var:U1> * <var:Y> ; <var:R> := <var:U1> ; <var:R> := <var:R> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Assuming that $ <var:Y> = <var:c> $ ahead of interpreting our list of instructions , then we have $ <var:R> = <nat:2> * <var:c> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for the segment of code is clear with the following decorated code segment . \begin{eqnarray} \{ <var:Y> = <var:c> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:Y> = <var:c> \land <var:U0> = <nat:9> \} \\ <var:U1> := <nat:2> ; \\ \{ <var:Y> = <var:c> \land <var:U0> = <nat:9> \land <var:U1> = <nat:2> \} \\ <var:U1> := <var:U1> * <var:Y> ; \\ \{ <var:Y> = <var:c> \land <var:U0> = <nat:9> \land <var:U1> = <nat:2> \times <var:c> \} \\ <var:R> := <var:U1> ; \\ \{ <var:Y> = <var:c> \land <var:U0> = <nat:9> \land <var:R> = <nat:2> \times <var:c> \} \\ <var:R> := <var:R> + <var:U0> \\ \{ <var:Y> = <var:c> \land <var:R> = <nat:2> \times <var:c> + <nat:9> \} \end{eqnarray} Applying usual Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:U1> := <nat:2> ; <var:U1> := <var:U1> * <var:Y> ; <var:R> := <var:U1> ; <var:R> := <var:R> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Y> = <var:c> }} <def:poly> {{ <var:R> = <nat:2> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:U0> = <nat:9> /\ <var:R> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:R> = <nat:2> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 