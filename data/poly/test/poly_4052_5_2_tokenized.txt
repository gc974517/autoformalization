\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} : \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <var:B> * <var:F> ; <var:B> := <var:B> * <var:F> ; <var:B> := <nat:3> + <var:B> * <var:F> ; <var:B> := <nat:2> + <var:B> * <var:F> \end{verbatim} Assume ( with some $ <var:c> \in \mathbb{Z}^+ $ ) that $ <var:F> = <var:c> $ prior to executing our set of instructions then we have $ <var:B> = <nat:2> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> + <nat:2> $ once list of instructions has finished executing . \end{theorem} \begin{proof} The proof of the list of instructions is given through standard Hoare techniques . Moving forward , we have \verb | { <var:F> = <var:c> } <var:B> := <nat:2> { <var:F> = <var:c> \land <var:B> = <nat:2> } | . This is guaranteed through the variable update scheme in Hoare logic . Stepping forward , \verb | { <var:F> = <var:c> } <var:B> := <nat:2> { <var:F> = <var:c> \land <var:B> = <nat:2> } | , \verb | { <var:F> = <var:c> \land <var:B> = <nat:2> } <var:B> := <var:B> * <var:F> { <var:F> = <var:c> \land <var:B> = <nat:2> * <var:c> + } | , \verb | { <var:F> = <var:c> \land <var:B> = <nat:2> * <var:c> + } <var:B> := <var:B> * <var:F> { <var:F> = <var:c> \land <var:B> = <nat:2> * <var:c> ^ <nat:2> + } | and \verb | { <var:F> = <var:c> \land <var:B> = <nat:2> * <var:c> ^ <nat:2> + } <var:B> := <nat:3> + <var:B> * <var:F> { <var:F> = <var:c> \land <var:B> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:F> = <var:c> }} <var:B> := <nat:2> ; <var:B> := <var:B> * <var:F> ; <var:B> := <var:B> * <var:F> ; <var:B> := <nat:3> + <var:B> * <var:F> ; <var:B> := <nat:2> + <var:B> * <var:F> {{ <var:B> = <nat:2> * <var:c> ^ <nat:4> + <nat:3> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:B> = <nat:2> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:B> = <nat:2> * <var:c> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:B> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:B> = <nat:2> * <var:c> ^ <nat:4> + <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 