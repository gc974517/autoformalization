\begin{document} \begin{theorem} Define a program in \emph{Imp} as \begin{verbatim} <var:p> := <nat:1> ; <var:p> := <nat:2> + <var:p> * <var:h> ; <var:p> := <nat:4> + <var:p> * <var:h> ; <var:p> := <nat:4> + <var:p> * <var:h> ; <var:p> := <var:p> * <var:h> ; <var:p> := <nat:3> + <var:p> * <var:h> ; <var:p> := <nat:3> + <var:p> * <var:h> \end{verbatim} Allowing letting integers $ <var:b> $ that we have $ <var:h> = <var:b> $ ahead of the execution of this program , it must be that $ <var:p> = <nat:1> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:3> $ when series of instructions has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be shown by standard Hoare reasoning . Next , the binding code \verb | <var:p> := <nat:1> ; | . This code forwards $ \{ <var:h> = <var:b> \} $ as the condition $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \} $ . This is rigorously given by the assignment law defined in typical Hoare techniques . Stepping through , the code assigning $ <nat:2> + <var:p> * <var:h> $ as $ <var:p>$ . This forwards the precondition $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \} $ toward $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> + <nat:2> \} $ . Paying attention to the subsequent command in our series of commands , the variable assignmet line binding $ <nat:4> + <var:p> * <var:h> $ to $ <var:p>$ . This statement transfers $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> + <nat:2> \} $ to the postcondition $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:4> \} $ . Further , we have the variable update line \verb | <var:p> := <nat:4> + <var:p> * <var:h> ; | . This statement takes the condition $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:4> \} $ as the postcondition $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:4> \} $ . Going to the next step , the variable update command \verb | <var:p> := <var:p> * <var:h> ; | . This command redefines the precondition $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:4> \} $ to the postcondition $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + \} $ . Jumping to the proceeding command found in our series of commands , we have the assignment line \verb | <var:p> := <nat:3> + <var:p> * <var:h> ; | . This transfers $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + \} $ toward $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:5> + <nat:2> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:3> \} $ . Considering the following line of code found in the code segment , the line binding $ <nat:3> + <var:p> * <var:h$ into $ <var:p>$ . This transfers the condition $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:5> + <nat:2> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:3> \} $ as $ \{ <var:h> = <var:b> \land <var:p> = <nat:1> \cdot <var:b> ^ <nat:6> + <nat:2> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:h> = <var:b> }} <var:p> := <nat:1> ; <var:p> := <nat:2> + <var:p> * <var:h> ; <var:p> := <nat:4> + <var:p> * <var:h> ; <var:p> := <nat:4> + <var:p> * <var:h> ; <var:p> := <var:p> * <var:h> ; <var:p> := <nat:3> + <var:p> * <var:h> ; <var:p> := <nat:3> + <var:p> * <var:h> {{ <var:p> = <nat:1> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:p> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:p> = <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 