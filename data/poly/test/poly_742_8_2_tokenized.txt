\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <var:Q> * <var:z> ; <var:Q> := <nat:4> + <var:Q> * <var:z> ; <var:Q> := <nat:4> + <var:Q> * <var:z> ; <var:Q> := <nat:1> + <var:Q> * <var:z> ; <var:Q> := <nat:2> + <var:Q> * <var:z> ; <var:Q> := <nat:4> + <var:Q> * <var:z> ; <var:Q> := <nat:1> + <var:Q> * <var:z> \end{verbatim} Assume , for natural numbers $ <var:c> $ , that we have $ <var:z> = <var:c> $ before the evaluation of the list of commands , it follows that we have $ <var:Q> = <nat:3> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> $ after program has exited . \end{theorem} \begin{proof} Notice the following decorated list of instructions . \begin{eqnarray} \{ <var:z> = <var:c> \} \\ <var:Q> := <nat:3> ; \\ \{ <var:z> = <var:c> \land <var:Q> = <nat:3> \} \\ <var:Q> := <var:Q> * <var:z> ; \\ \{ <var:z> = <var:c> \land <var:Q> = <nat:3> \times <var:c> + \} \\ <var:Q> := <nat:4> + <var:Q> * <var:z> ; \\ \{ <var:z> = <var:c> \land <var:Q> = <nat:3> \times <var:c> ^ <nat:2> + <nat:4> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:z> ; \\ \{ <var:z> = <var:c> \land <var:Q> = <nat:3> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> + <nat:4> \} \\ <var:Q> := <nat:1> + <var:Q> * <var:z> ; \\ \{ <var:z> = <var:c> \land <var:Q> = <nat:3> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:1> \} \\ <var:Q> := <nat:2> + <var:Q> * <var:z> ; \\ \{ <var:z> = <var:c> \land <var:Q> = <nat:3> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:2> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:z> ; \\ \{ <var:z> = <var:c> \land <var:Q> = <nat:3> \times <var:c> ^ <nat:6> + <nat:4> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:4> \} \\ <var:Q> := <nat:1> + <var:Q> * <var:z> \\ \{ <var:z> = <var:c> \land <var:Q> = <nat:3> \times <var:c> ^ <nat:7> + <nat:4> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:z> = <var:c> }} <var:Q> := <nat:3> ; <var:Q> := <var:Q> * <var:z> ; <var:Q> := <nat:4> + <var:Q> * <var:z> ; <var:Q> := <nat:4> + <var:Q> * <var:z> ; <var:Q> := <nat:1> + <var:Q> * <var:z> ; <var:Q> := <nat:2> + <var:Q> * <var:z> ; <var:Q> := <nat:4> + <var:Q> * <var:z> ; <var:Q> := <nat:1> + <var:Q> * <var:z> {{ <var:Q> = <nat:3> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:Q> = <nat:3> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:Q> = <nat:3> * <var:c> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:Q> = <nat:3> * <var:c> ^ <nat:3> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:Q> = <nat:3> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:Q> = <nat:3> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:Q> = <nat:3> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:Q> = <nat:3> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 