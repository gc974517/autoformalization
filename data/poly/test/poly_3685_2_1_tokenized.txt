\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:3> ; <var:G> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Given $ <var:H> = <var:r> $ prior to the execution of the list of commands , it holds that $ <var:G> = <nat:3> $ once list of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:r> \} \\ <var:n0> := <nat:3> ; \\ \{ <var:H> = <var:r> \land <var:n0> = <nat:3> \} \\ <var:G> := <var:n0> \\ \{ <var:H> = <var:r> \land <var:G> = <nat:3> \} \end{eqnarray} Utilizing standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:3> ; <var:G> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:H> = <var:r> }} <def:poly> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 