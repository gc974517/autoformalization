\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:I0> := <nat:6> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:j> ; <var:I2> := <nat:7> ; <var:I2> := <var:I2> * <var:j> ; <var:I2> := <var:I2> * <var:j> ; <var:C> := <var:I2> ; <var:C> := <var:C> + <var:I1> ; <var:C> := <var:C> + <var:I0> \end{verbatim} Assume it to hold that $ <var:j> = <var:q> $ prior to evaluating this code , it follows that $ <var:C> = <nat:7> \cdot <var:q> ^ <nat:2> + <nat:9> \cdot <var:q> + <nat:6> $ after segment of code has exited . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be accomplished by typical Hoare reasoning . Going to the next step , we see \verb | { <var:j> = <var:q> } <var:I0> := <nat:6> { <var:j> = <var:q> \land <var:I0> = <nat:6> } | , \verb | { <var:j> = <var:q> \land <var:I0> = <nat:6> } <var:I1> := <nat:9> { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> } | and \verb | { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> } <var:I1> := <var:I1> * <var:j> { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> \cdot <var:q> } | . This is shown to be logically sound through the variable update inference rule given in standard Hoare logic . Honing in on the next statements contained in our list of commands , we have \verb | { <var:j> = <var:q> } <var:I0> := <nat:6> { <var:j> = <var:q> \land <var:I0> = <nat:6> } | , \verb | { <var:j> = <var:q> \land <var:I0> = <nat:6> } <var:I1> := <nat:9> { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> } | and \verb | { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> } <var:I1> := <var:I1> * <var:j> { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> \cdot <var:q> } | . This is rigorously given through the variable assignmet inference rule defined in standard Hoare reasoning . Shifting focus toward the proceeding bits of codeseen in our program , \verb | { <var:j> = <var:q> } <var:I0> := <nat:6> { <var:j> = <var:q> \land <var:I0> = <nat:6> } | , \verb | { <var:j> = <var:q> \land <var:I0> = <nat:6> } <var:I1> := <nat:9> { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> } | and \verb | { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> } <var:I1> := <var:I1> * <var:j> { <var:j> = <var:q> \land <var:I0> = <nat:6> \land <var:I1> = <nat:9> \cdot <var:q> } | . This is shown using the binding scheme defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:j> = <var:q> }} <var:I0> := <nat:6> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:j> ; <var:I2> := <nat:7> ; <var:I2> := <var:I2> * <var:j> ; <var:I2> := <var:I2> * <var:j> ; <var:C> := <var:I2> ; <var:C> := <var:C> + <var:I1> ; <var:C> := <var:C> + <var:I0> {{ <var:C> = <nat:7> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:9> * <var:q> /\ <var:I2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:9> * <var:q> /\ <var:I2> = <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:9> * <var:q> /\ <var:I2> = <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:9> * <var:q> /\ <var:C> = <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:I0> = <nat:6> /\ <var:C> = <nat:7> * <var:q> ^ <nat:2> + <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:C> = <nat:7> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 