\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:1> ; <var:y> := <var:y> * <var:h> ; <var:y> := <nat:1> + <var:y> * <var:h> ; <var:y> := <var:y> * <var:h> ; <var:y> := <nat:4> + <var:y> * <var:h> ; <var:y> := <nat:3> + <var:y> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Allowing --- taking $ <var:w> \in \mathbb{N} $ --- it to hold that $ <var:h> = <var:w> $ prior to the evaluation of our code segment it must be that $ <var:y> = <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare techniques produces : \begin{eqnarray} \{ <var:h> = <var:w> \} \\ <var:y> := <nat:1> ; \\ \{ <var:h> = <var:w> \land <var:y> = <nat:1> \} \\ <var:y> := <var:y> * <var:h> ; \\ \{ <var:h> = <var:w> \land <var:y> = <nat:1> \cdot <var:w> + \} \end{eqnarray} Advancing the evaluation of the set of commands yields : \begin{eqnarray} <var:y> := <nat:1> + <var:y> * <var:h> ; \\ \{ <var:h> = <var:w> \land <var:y> = <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \} \\ <var:y> := <var:y> * <var:h> ; \\ \{ <var:h> = <var:w> \land <var:y> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> + \} \\ <var:y> := <nat:4> + <var:y> * <var:h> ; \\ \{ <var:h> = <var:w> \land <var:y> = <nat:1> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:4> \} \\ <var:y> := <nat:3> + <var:y> * <var:h> \\ \{ <var:h> = <var:w> \land <var:y> = <nat:1> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> + <nat:3> \} \end{eqnarray} Given the preceding argument , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:1> ; <var:y> := <var:y> * <var:h> ; <var:y> := <nat:1> + <var:y> * <var:h> ; <var:y> := <var:y> * <var:h> ; <var:y> := <nat:4> + <var:y> * <var:h> ; <var:y> := <nat:3> + <var:y> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:h> = <var:w> }} <def:poly> {{ <var:y> = <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:y> = <nat:1> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:y> = <nat:1> * <var:w> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:y> = <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:y> = <nat:1> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:y> = <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 