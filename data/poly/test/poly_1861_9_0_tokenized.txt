\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:7> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:i> ; <var:v2> := <nat:5> ; <var:v2> := <var:v2> * <var:i> ; <var:v2> := <var:v2> * <var:i> ; <var:w> := <var:v2> ; <var:w> := <var:w> + <var:v1> ; <var:w> := <var:w> + <var:v0> \end{verbatim} Allow $ <var:i> = <var:m> $ , taking positive integer coefficients $ <var:m> $ , ahead of running this list of instructions , then $ <var:w> = <nat:5> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code is accomplished using standard Hoare techniques . Keeping momentum , \begin{verbatim} { <var:i> = <var:m> } <var:v0> := <nat:7> { <var:i> = <var:m> \land <var:v0> = <nat:7> } \end{verbatim} Taking another step toward the subsequent pieces of code contained in our series of commands , \begin{verbatim} { <var:i> = <var:m> } <var:v0> := <nat:7> { <var:i> = <var:m> \land <var:v0> = <nat:7> } { <var:i> = <var:m> \land <var:v0> = <nat:7> } <var:v1> := <nat:4> { <var:i> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:4> } \end{verbatim} Advancing to the next bits of codeseen in the list of instructions , we have \begin{verbatim} { <var:i> = <var:m> } <var:v0> := <nat:7> { <var:i> = <var:m> \land <var:v0> = <nat:7> } { <var:i> = <var:m> \land <var:v0> = <nat:7> } <var:v1> := <nat:4> { <var:i> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:4> } \end{verbatim} This is shown to be logically sound by the binding inference rule in standard Hoare techniques . Moving forward to the next step , we have \begin{verbatim} { <var:i> = <var:m> } <var:v0> := <nat:7> { <var:i> = <var:m> \land <var:v0> = <nat:7> } \end{verbatim} This is given through the environment update law from typical Hoare techniques . Moving on to the next step , \begin{verbatim} { <var:i> = <var:m> } <var:v0> := <nat:7> { <var:i> = <var:m> \land <var:v0> = <nat:7> } { <var:i> = <var:m> \land <var:v0> = <nat:7> } <var:v1> := <nat:4> { <var:i> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:4> } \end{verbatim} Going forward , we have \begin{verbatim} { <var:i> = <var:m> } <var:v0> := <nat:7> { <var:i> = <var:m> \land <var:v0> = <nat:7> } \end{verbatim} This is sound by the variable binding rule defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:i> = <var:m> }} <var:v0> := <nat:7> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:i> ; <var:v2> := <nat:5> ; <var:v2> := <var:v2> * <var:i> ; <var:v2> := <var:v2> * <var:i> ; <var:w> := <var:v2> ; <var:w> := <var:w> + <var:v1> ; <var:w> := <var:w> + <var:v0> {{ <var:w> = <nat:5> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:4> * <var:m> /\ <var:v2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:4> * <var:m> /\ <var:v2> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:4> * <var:m> /\ <var:v2> = <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:4> * <var:m> /\ <var:w> = <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:7> /\ <var:w> = <nat:5> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:w> = <nat:5> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 