\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:I1> := <var:Q> ; <var:I2> := <var:I1> * <var:Q> ; <var:I0> := <nat:2> ; <var:I2> := <var:I2> * <nat:2> ; <var:B> := <var:I2> <var:B> := <var:B> + <var:I0> \end{verbatim} Assuming $ <var:Q> = <var:h> $ ( given any $ <var:h> \in \mathbb{N} $ ) prior to executing this segment of code it must be that we see $ <var:B> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our program is demonstrated using usual Hoare reasoning . Moving on , we have \begin{eqnarray} \{ <var:Q> = <var:h> \} \, <var:I1> := <var:Q> \, \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \} \end{eqnarray} Shifting focus toward the subsequent statements in our list of commands , we see \begin{eqnarray} \{ <var:Q> = <var:h> \} \, <var:I1> := <var:Q> \, \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \} \\ \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \} \, <var:I2> := <var:I1> * <var:Q> \, \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \land <var:I2> = <var:h> ^ <nat:2> \} \\ \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \land <var:I2> = <var:h> ^ <nat:2> \} \, <var:I0> := <nat:2> \, \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \land <var:I2> = <var:h> ^ <nat:2> \land <var:I0> = <nat:2> \} \end{eqnarray} This is known to be sound using the variable assignmet rule obtained from usual Hoare reasoning . Moving forward to the next statements found in the code , we have \begin{eqnarray} \{ <var:Q> = <var:h> \} \, <var:I1> := <var:Q> \, \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \} \\ \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \} \, <var:I2> := <var:I1> * <var:Q> \, \{ <var:Q> = <var:h> \land <var:I1> = <var:h> \land <var:I2> = <var:h> ^ <nat:2> \} \end{eqnarray} This is given by the binding law from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Q> = <var:h> }} <var:I1> := <var:Q> ; <var:I2> := <var:I1> * <var:Q> ; <var:I0> := <nat:2> ; <var:I2> := <var:I2> * <nat:2> ; <var:B> := <var:I2> <var:B> := <var:B> + <var:I0> {{ <var:B> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:I1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:I1> = <var:h> /\ <var:I2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:I1> = <var:h> /\ <var:I2> = <var:h> ^ <nat:2> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:I1> = <var:h> /\ <var:I2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:I1> = <var:h> /\ <var:I0> = <nat:2> /\ <var:B> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:B> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 