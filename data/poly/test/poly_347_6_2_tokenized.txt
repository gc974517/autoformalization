\begin{document} \begin{theorem} Let the following program : \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <var:u> * <var:L> ; <var:u> := <nat:2> + <var:u> * <var:L> ; <var:u> := <nat:1> + <var:u> * <var:L> ; <var:u> := <nat:1> + <var:u> * <var:L> ; <var:u> := <nat:4> + <var:u> * <var:L> \end{verbatim} Given that we have $ <var:L> = <var:n> $ ( given natural coefficients $ <var:n> $ ) prior to the execution of the segment of code , then we have $ <var:u> = <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:n> \} \\ <var:u> := <nat:2> ; \\ \{ <var:L> = <var:n> \land <var:u> = <nat:2> \} \\ <var:u> := <var:u> * <var:L> ; \\ \{ <var:L> = <var:n> \land <var:u> = <nat:2> \cdot <var:n> + \} \\ <var:u> := <nat:2> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:n> \land <var:u> = <nat:2> \cdot <var:n> ^ <nat:2> + <nat:2> \} \\ <var:u> := <nat:1> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:n> \land <var:u> = <nat:2> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> + <nat:1> \} \\ <var:u> := <nat:1> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:n> \land <var:u> = <nat:2> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:1> \} \\ <var:u> := <nat:4> + <var:u> * <var:L> \\ \{ <var:L> = <var:n> \land <var:u> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:2> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:4> \} \end{eqnarray} Utilizing Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:L> = <var:n> }} <var:u> := <nat:2> ; <var:u> := <var:u> * <var:L> ; <var:u> := <nat:2> + <var:u> * <var:L> ; <var:u> := <nat:1> + <var:u> * <var:L> ; <var:u> := <nat:1> + <var:u> * <var:L> ; <var:u> := <nat:4> + <var:u> * <var:L> {{ <var:u> = <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:u> = <nat:2> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:u> = <nat:2> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:u> = <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:u> = <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:u> = <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 