\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as \begin{verbatim} <var:u1> := <var:o> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:4> ; <var:s> := <var:u1> <var:s> := <var:s> + <var:u0> \end{verbatim} Given it to be that $ <var:o> = <var:m> $ ( for any natural numbers $ <var:m> $ ) ahead of evaluating this code segment then we see $ <var:s> = <nat:4> \cdot <var:m> + <nat:2> $ when list of instructions is done executing . \end{theorem} \begin{proof} The application of usual Hoare techniques produces : \begin{eqnarray} \{ <var:o> = <var:m> \} \\ <var:u1> := <var:o> ; \\ \{ <var:o> = <var:m> \land <var:u1> = <var:m> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:o> = <var:m> \land <var:u1> = <var:m> \land <var:u0> = <nat:2> \} \\ <var:u1> := <var:u1> * <nat:4> ; \\ \{ <var:o> = <var:m> \land <var:u1> = <nat:4> \times <var:m> \land <var:u0> = <nat:2> \} \\ <var:s> := <var:u1> \\ \{ <var:o> = <var:m> \land <var:u0> = <nat:2> \land <var:s> = <nat:4> \times <var:m> \} \\ <var:s> := <var:s> + <var:u0> \\ \{ <var:o> = <var:m> \land <var:s> = <nat:4> \times <var:m> + <nat:2> \} \end{eqnarray} Given the preceding argument , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:o> = <var:m> }} <var:u1> := <var:o> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:4> ; <var:s> := <var:u1> <var:s> := <var:s> + <var:u0> {{ <var:s> = <nat:4> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:u1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:u1> = <var:m> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:u1> = <nat:4> * <var:m> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:u0> = <nat:2> /\ <var:s> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:s> = <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 