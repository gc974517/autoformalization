\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:8> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:p> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:p> ; <var:c2> := <var:c2> * <var:p> ; <var:F> := <var:c2> ; <var:F> := <var:F> + <var:c1> ; <var:F> := <var:F> + <var:c0> \end{verbatim} Given it to hold that $ <var:p> = <var:Z> $ before evaluating our set of commands , it follows that we see $ <var:F> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:8> $ once series of commands executes . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:p> = <var:Z> \} \\ <var:c0> := <nat:8> ; \\ \{ <var:p> = <var:Z> \land <var:c0> = <nat:8> \} \\ <var:c1> := <nat:2> ; \\ \{ <var:p> = <var:Z> \land <var:c0> = <nat:8> \land <var:c1> = <nat:2> \} \\ <var:c1> := <var:c1> * <var:p> ; \\ \{ <var:p> = <var:Z> \land <var:c0> = <nat:8> \land <var:c1> = <nat:2> * <var:Z> \} \\ <var:c2> := <nat:2> ; \\ \{ <var:p> = <var:Z> \land <var:c0> = <nat:8> \land <var:c1> = <nat:2> * <var:Z> \land <var:c2> = <nat:2> \} \\ <var:c2> := <var:c2> * <var:p> ; \\ \{ <var:p> = <var:Z> \land <var:c0> = <nat:8> \land <var:c1> = <nat:2> * <var:Z> \land <var:c2> = <nat:2> * <var:Z> \} \\ <var:c2> := <var:c2> * <var:p> ; \\ \{ <var:p> = <var:Z> \land <var:c0> = <nat:8> \land <var:c1> = <nat:2> * <var:Z> \land <var:c2> = <nat:2> * <var:Z> ^ <nat:2> \} \\ <var:F> := <var:c2> ; \\ \{ <var:p> = <var:Z> \land <var:c0> = <nat:8> \land <var:c1> = <nat:2> * <var:Z> \land <var:F> = <nat:2> * <var:Z> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:c1> ; \\ \{ <var:p> = <var:Z> \land <var:c0> = <nat:8> \land <var:F> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> \} \\ <var:F> := <var:F> + <var:c0> \\ \{ <var:p> = <var:Z> \land <var:F> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:8> \} \end{eqnarray} Given the preceding argument , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:p> = <var:Z> }} <var:c0> := <nat:8> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:p> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:p> ; <var:c2> := <var:c2> * <var:p> ; <var:F> := <var:c2> ; <var:F> := <var:F> + <var:c1> ; <var:F> := <var:F> + <var:c0> {{ <var:F> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:2> * <var:Z> /\ <var:c2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:2> * <var:Z> /\ <var:c2> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:2> * <var:Z> /\ <var:c2> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:2> * <var:Z> /\ <var:F> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:c0> = <nat:8> /\ <var:F> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:F> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 