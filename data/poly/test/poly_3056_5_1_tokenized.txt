\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:K> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:5> ; <var:p> := <var:P1> <var:p> := <var:p> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Allow it to be that $ <var:K> = <var:w> $ prior to executing the list of instructions , then we see $ <var:p> = <nat:5> \times <var:w> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:K> = <var:w> \} \\ <var:P1> := <var:K> ; \\ \{ <var:K> = <var:w> \land <var:P1> = <var:w> \} \\ <var:P0> := <nat:1> ; \\ \{ <var:K> = <var:w> \land <var:P1> = <var:w> \land <var:P0> = <nat:1> \} \\ <var:P1> := <var:P1> * <nat:5> ; \\ \{ <var:K> = <var:w> \land <var:P1> = <nat:5> \times <var:w> \land <var:P0> = <nat:1> \} \\ <var:p> := <var:P1> \\ \{ <var:K> = <var:w> \land <var:P0> = <nat:1> \land <var:p> = <nat:5> \times <var:w> \} \\ <var:p> := <var:p> + <var:P0> \\ \{ <var:K> = <var:w> \land <var:p> = <nat:5> \times <var:w> + <nat:1> \} \end{eqnarray} Thus , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:K> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:5> ; <var:p> := <var:P1> <var:p> := <var:p> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:K> = <var:w> }} <def:poly> {{ <var:p> = <nat:5> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:P1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:P1> = <var:w> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:P1> = <nat:5> * <var:w> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:P0> = <nat:1> /\ <var:p> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:p> = <nat:5> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 