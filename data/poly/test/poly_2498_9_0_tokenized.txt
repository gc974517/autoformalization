\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:b0> := <nat:5> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:n> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:n> ; <var:b2> := <var:b2> * <var:n> ; <var:Q> := <var:b2> ; <var:Q> := <var:Q> + <var:b1> ; <var:Q> := <var:Q> + <var:b0> \end{verbatim} Allow that we have $ <var:n> = <var:m> $ before evaluating the list of instructions it follows that we have $ <var:Q> = <nat:1> \cdot <var:m> ^ <nat:2> + <nat:7> \cdot <var:m> + <nat:5> $ after series of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is evident using Hoare techniques . Further , we see the statement binding $ <nat:5> $ as $ <var:b0>$ . This transfers the condition $ \{ <var:n> = <var:m> \} $ as the postcondition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \} $ . After , we see the variable assignmet statement giving $ <nat:7> $ as $ <var:b1>$ . This line takes $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \} $ into $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \} $ . Going to the next step , we have the assignment line \verb | <var:b1> := <var:b1> * <var:n> ; | . This transfers $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \} $ toward $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \} $ . This is given with the assignment law given by typical Hoare logic . Advancing on , we have the variable update command defining $ <nat:1> $ into $ <var:b2>$ . This statement transfers the precondition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \} $ to $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \land <var:b2> = <nat:1> \} $ . This is known to be sound using the assignment scheme defined in typical Hoare reasoning . Focusing on the subsequent command seen in the set of instructions , the binding code \verb | <var:b2> := <var:b2> * <var:n> ; | . This line moves the precondition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \land <var:b2> = <nat:1> \} $ toward $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \land <var:b2> = <nat:1> \times <var:m> \} $ . This is shown through the assignment inference rule defined by Hoare techniques . Moving forward to the proceeding command contained in our segment of code , the binding code binding $ <var:b2> * <var:n> $ to $ <var:b2>$ . This command transfers the condition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \land <var:b2> = <nat:1> \times <var:m> \} $ as the postcondition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \land <var:b2> = <nat:1> \times <var:m> ^ <nat:2> \} $ . This is ensured using the assignment scheme defined in standard Hoare logic . Taking a look at the next command found in the list of instructions , we have the assignment line \verb | <var:Q> := <var:b2> ; | . This redefines the precondition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \land <var:b2> = <nat:1> \times <var:m> ^ <nat:2> \} $ into the condition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \land <var:Q> = <nat:1> \times <var:m> ^ <nat:2> \} $ . Taking another step toward the proceeding command found in our program , we have the variable binding code \verb | <var:Q> := <var:Q> + <var:b1> ; | . This takes $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:b1> = <nat:7> \times <var:m> \land <var:Q> = <nat:1> \times <var:m> ^ <nat:2> \} $ toward the postcondition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:Q> = <nat:1> \times <var:m> ^ <nat:2> + <nat:7> \times <var:m> \} $ . This is deduced using the assignment rule defined by usual Hoare logic . Advancing on , we have the binding command defining $ <var:Q> + <var:b0$ toward $ <var:Q>$ . This forwards the precondition $ \{ <var:n> = <var:m> \land <var:b0> = <nat:5> \land <var:Q> = <nat:1> \times <var:m> ^ <nat:2> + <nat:7> \times <var:m> \} $ toward the condition $ \{ <var:n> = <var:m> \land <var:Q> = <nat:1> \times <var:m> ^ <nat:2> + <nat:7> \times <var:m> + <nat:5> \} $ . This is deduced using the assignment inference rule found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:n> = <var:m> }} <var:b0> := <nat:5> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:n> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:n> ; <var:b2> := <var:b2> * <var:n> ; <var:Q> := <var:b2> ; <var:Q> := <var:Q> + <var:b1> ; <var:Q> := <var:Q> + <var:b0> {{ <var:Q> = <nat:1> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:7> * <var:m> /\ <var:b2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:7> * <var:m> /\ <var:b2> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:7> * <var:m> /\ <var:b2> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:7> * <var:m> /\ <var:Q> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:5> /\ <var:Q> = <nat:1> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:Q> = <nat:1> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 