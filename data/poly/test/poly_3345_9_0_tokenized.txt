\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:5> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:O> ; <var:E2> := <nat:7> ; <var:E2> := <var:E2> * <var:O> ; <var:E2> := <var:E2> * <var:O> ; <var:R> := <var:E2> ; <var:R> := <var:R> + <var:E1> ; <var:R> := <var:R> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for every natural numbers $ <var:m> $ ) it to hold that $ <var:O> = <var:m> $ before the execution of our list of commands it holds that $ <var:R> = <nat:7> \cdot <var:m> ^ <nat:2> + <nat:7> \cdot <var:m> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is evident using usual Hoare reasoning . Keeping momentum , we have \begin{verbatim} { <var:O> = <var:m> } <var:E0> := <nat:5> { <var:O> = <var:m> \land <var:E0> = <nat:5> } { <var:O> = <var:m> \land <var:E0> = <nat:5> } <var:E1> := <nat:7> { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> } { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> } <var:E1> := <var:E1> * <var:O> { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> \cdot <var:m> } { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> \cdot <var:m> } <var:E2> := <nat:7> { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> \cdot <var:m> \land <var:E2> = <nat:7> } { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> \cdot <var:m> \land <var:E2> = <nat:7> } <var:E2> := <var:E2> * <var:O> { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> \cdot <var:m> \land <var:E2> = <nat:7> \cdot <var:m> } \end{verbatim} This is deduced through the environment update rule defined by typical Hoare reasoning . Focusing on the subsequent commands in our list of instructions , \begin{verbatim} { <var:O> = <var:m> } <var:E0> := <nat:5> { <var:O> = <var:m> \land <var:E0> = <nat:5> } { <var:O> = <var:m> \land <var:E0> = <nat:5> } <var:E1> := <nat:7> { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> } { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> } <var:E1> := <var:E1> * <var:O> { <var:O> = <var:m> \land <var:E0> = <nat:5> \land <var:E1> = <nat:7> \cdot <var:m> } \end{verbatim} Advancing to the proceeding line found in the list of instructions , we have \begin{verbatim} { <var:O> = <var:m> } <var:E0> := <nat:5> { <var:O> = <var:m> \land <var:E0> = <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:5> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:O> ; <var:E2> := <nat:7> ; <var:E2> := <var:E2> * <var:O> ; <var:E2> := <var:E2> * <var:O> ; <var:R> := <var:E2> ; <var:R> := <var:R> + <var:E1> ; <var:R> := <var:R> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:O> = <var:m> }} <def:poly> {{ <var:R> = <nat:7> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:7> * <var:m> /\ <var:E2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:7> * <var:m> /\ <var:E2> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:7> * <var:m> /\ <var:E2> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:7> * <var:m> /\ <var:R> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:E0> = <nat:5> /\ <var:R> = <nat:7> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:R> = <nat:7> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 