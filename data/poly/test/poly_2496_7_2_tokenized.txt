\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:2> + <var:h> * <var:Z> ; <var:h> := <nat:4> + <var:h> * <var:Z> ; <var:h> := <nat:3> + <var:h> * <var:Z> ; <var:h> := <nat:2> + <var:h> * <var:Z> ; <var:h> := <nat:3> + <var:h> * <var:Z> ; <var:h> := <nat:4> + <var:h> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:Z> = <var:d> $ ahead of running the series of commands , it follows that we have $ <var:h> = <nat:4> \cdot <var:d> ^ <nat:6> + <nat:2> \cdot <var:d> ^ <nat:5> + <nat:4> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is clear using Hoare techniques . Next , the environment update code assigning $ <nat:4> $ toward $ <var:h>$ . This code advances the precondition $ \{ <var:Z> = <var:d> \} $ as the condition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \} $ . This is shown using the assignment scheme obtained from standard Hoare logic . Moving on , we have the variable assignmet statement assigning $ <nat:2> + <var:h> * <var:Z> $ toward $ <var:h>$ . This moves the condition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \} $ toward the postcondition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> + <nat:2> \} $ . Moving on , we see the variable update line letting $ <nat:4> + <var:h> * <var:Z> $ toward $ <var:h>$ . This forwards $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> + <nat:2> \} $ toward the condition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> \} $ . Taking another step toward the next step seen in the set of instructions , the variable binding statement letting $ <nat:3> + <var:h> * <var:Z> $ into $ <var:h>$ . This code moves the precondition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> \} $ as the postcondition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:3> \} $ . This is rigorously given with the assignment scheme obtained from usual Hoare reasoning . After , we have the variable binding line \verb | <var:h> := <nat:2> + <var:h> * <var:Z> ; | . This advances the precondition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:3> \} $ into the postcondition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:2> \} $ . Taking another step toward the proceeding command found in the list of commands , the environment update code binding $ <nat:3> + <var:h> * <var:Z> $ to $ <var:h>$ . This redefines the precondition $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:2> \} $ as $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:3> \} $ . This is ensured by the assignment scheme from typical Hoare logic . Taking another step toward the upcoming command found in the list of instructions , the environment update statement giving $ <nat:4> + <var:h> * <var:Z$ into $ <var:h>$ . This takes $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:3> \} $ as $ \{ <var:Z> = <var:d> \land <var:h> = <nat:4> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:3> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:4> ; <var:h> := <nat:2> + <var:h> * <var:Z> ; <var:h> := <nat:4> + <var:h> * <var:Z> ; <var:h> := <nat:3> + <var:h> * <var:Z> ; <var:h> := <nat:2> + <var:h> * <var:Z> ; <var:h> := <nat:3> + <var:h> * <var:Z> ; <var:h> := <nat:4> + <var:h> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:Z> = <var:d> }} <def:poly> {{ <var:h> = <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:h> = <nat:4> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:h> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:h> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:h> = <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:h> = <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:h> = <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 