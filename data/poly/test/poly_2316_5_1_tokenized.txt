\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:X> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:8> ; <var:v> := <var:r1> <var:v> := <var:v> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Allow $ <var:X> = <var:Q> $ before running the series of instructions , then $ <var:v> = <nat:8> \cdot <var:Q> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program is done using typical Hoare logic . Looking at the upcoming command found in the code , we have the variable binding statement \verb | <var:r1> := <var:X> ; | . This code takes $ \{ <var:X> = <var:Q> \} $ to $ \{ <var:X> = <var:Q> \land <var:r1> = <var:Q> \} $ . This is deduced using the assignment law defined in standard Hoare reasoning . Keeping momentum , we see the assignment statement \verb | <var:r0> := <nat:3> ; | . This line redefines $ \{ <var:X> = <var:Q> \land <var:r1> = <var:Q> \} $ into $ \{ <var:X> = <var:Q> \land <var:r1> = <var:Q> \land <var:r0> = <nat:3> \} $ . Shifting focus toward the next bit of code contained in our code segment , we have the variable assignmet code binding $ <var:r1> * <nat:8> $ to $ <var:r1>$ . This moves $ \{ <var:X> = <var:Q> \land <var:r1> = <var:Q> \land <var:r0> = <nat:3> \} $ into $ \{ <var:X> = <var:Q> \land <var:r1> = <nat:8> \times <var:Q> \land <var:r0> = <nat:3> \} $ . This is sound with the assignment law of usual Hoare techniques . Immediately following , we see the statement \verb | <var:v> := <var:r1> | . This transfers the condition $ \{ <var:X> = <var:Q> \land <var:r1> = <nat:8> \times <var:Q> \land <var:r0> = <nat:3> \} $ toward $ \{ <var:X> = <var:Q> \land <var:r0> = <nat:3> \land <var:v> = <nat:8> \times <var:Q> \} $ . This is rigorously given with the assignment law found in typical Hoare logic . Moving forward to the proceeding line of code seen in the list of commands , we have the line letting $ <var:v> + <var:r0$ as $ <var:v>$ . This forwards $ \{ <var:X> = <var:Q> \land <var:r0> = <nat:3> \land <var:v> = <nat:8> \times <var:Q> \} $ into the postcondition $ \{ <var:X> = <var:Q> \land <var:v> = <nat:8> \times <var:Q> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:X> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:8> ; <var:v> := <var:r1> <var:v> := <var:v> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:X> = <var:Q> }} <def:poly> {{ <var:v> = <nat:8> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:r1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:r1> = <nat:8> * <var:Q> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:r0> = <nat:3> /\ <var:v> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:v> = <nat:8> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 