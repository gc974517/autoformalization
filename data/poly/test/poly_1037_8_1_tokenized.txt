\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:s1> := <var:f> ; <var:s2> := <var:s1> * <var:f> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:7> ; <var:s2> := <var:s2> * <nat:6> ; <var:H> := <var:s2> <var:H> := <var:H> + <var:s1> <var:H> := <var:H> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:f> = <var:h> $ prior to the execution of this code segment it must be that we have $ <var:H> = <nat:6> \cdot <var:h> ^ <nat:2> + <nat:7> \cdot <var:h> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the set of commands can be seen through Hoare logic . Advancing to the subsequent statements found in our program , we see \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:s1> := <var:f> \, \{ <var:f> = <var:h> \land <var:s1> = <var:h> \} \\ \{ <var:f> = <var:h> \land <var:s1> = <var:h> \} \, <var:s2> := <var:s1> * <var:f> \, \{ <var:f> = <var:h> \land <var:s1> = <var:h> \land <var:s2> = <var:h> ^ <nat:2> \} \\ \{ <var:f> = <var:h> \land <var:s1> = <var:h> \land <var:s2> = <var:h> ^ <nat:2> \} \, <var:s0> := <nat:1> \, \{ <var:f> = <var:h> \land <var:s1> = <var:h> \land <var:s2> = <var:h> ^ <nat:2> \land <var:s0> = <nat:1> \} \\ \{ <var:f> = <var:h> \land <var:s1> = <var:h> \land <var:s2> = <var:h> ^ <nat:2> \land <var:s0> = <nat:1> \} \, <var:s1> := <var:s1> * <nat:7> \, \{ <var:f> = <var:h> \land <var:s1> = <nat:7> \cdot <var:h> \land <var:s2> = <var:h> ^ <nat:2> \land <var:s0> = <nat:1> \} \\ \{ <var:f> = <var:h> \land <var:s1> = <nat:7> \cdot <var:h> \land <var:s2> = <var:h> ^ <nat:2> \land <var:s0> = <nat:1> \} \, <var:s2> := <var:s2> * <nat:6> \, \{ <var:f> = <var:h> \land <var:s1> = <nat:7> \cdot <var:h> \land <var:s2> = <nat:6> \cdot <var:h> ^ <nat:2> \land <var:s0> = <nat:1> \} \\ \{ <var:f> = <var:h> \land <var:s1> = <nat:7> \cdot <var:h> \land <var:s2> = <nat:6> \cdot <var:h> ^ <nat:2> \land <var:s0> = <nat:1> \} \, <var:H> := <var:s2\, \{ <var:f> = <var:h> \land <var:s1> = <nat:7> \cdot <var:h> \land <var:s0> = <nat:1> \land <var:H> = <nat:6> \cdot <var:h> ^ <nat:2> \} \\ \{ <var:f> = <var:h> \land <var:s1> = <nat:7> \cdot <var:h> \land <var:s0> = <nat:1> \land <var:H> = <nat:6> \cdot <var:h> ^ <nat:2> \} \, <var:H> := <var:H> + <var:s1\, \{ <var:f> = <var:h> \land <var:s0> = <nat:1> \land <var:H> = <nat:6> \cdot <var:h> ^ <nat:2> + <nat:7> \cdot <var:h> \} \end{eqnarray} Moving forward to the subsequent line seen in our list of instructions , \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:s1> := <var:f> \, \{ <var:f> = <var:h> \land <var:s1> = <var:h> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s1> := <var:f> ; <var:s2> := <var:s1> * <var:f> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:7> ; <var:s2> := <var:s2> * <nat:6> ; <var:H> := <var:s2> <var:H> := <var:H> + <var:s1> <var:H> := <var:H> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:f> = <var:h> }} <def:poly> {{ <var:H> = <nat:6> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:s1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:s1> = <var:h> /\ <var:s2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:s1> = <var:h> /\ <var:s2> = <var:h> ^ <nat:2> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:s1> = <nat:7> * <var:h> /\ <var:s2> = <var:h> ^ <nat:2> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:s1> = <nat:7> * <var:h> /\ <var:s2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:s1> = <nat:7> * <var:h> /\ <var:s0> = <nat:1> /\ <var:H> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:s0> = <nat:1> /\ <var:H> = <nat:6> * <var:h> ^ <nat:2> + <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:H> = <nat:6> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 