\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:D> := <nat:4> ; <var:D> := <nat:1> + <var:D> * <var:V> ; <var:D> := <nat:4> + <var:D> * <var:V> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:1> + <var:D> * <var:V> ; <var:D> := <nat:2> + <var:D> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Given $ <var:V> = <var:t> $ ( for every natural coefficients $ <var:t> $ ) prior to evaluating the series of commands it must be that we have $ <var:D> = <nat:4> \times <var:t> ^ <nat:5> + <nat:1> \times <var:t> ^ <nat:4> + <nat:4> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our list of commands is given through Hoare logic . Honing in on the next line seen in our set of commands , we have the environment update line giving $ <nat:4> $ toward $ <var:D>$ . This moves the condition $ \{ <var:V> = <var:t> \} $ into the condition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \} $ . This is given using the assignment rule obtained from typical Hoare reasoning . Honing in on the upcoming statement contained in the series of commands , the environment update statement \verb | <var:D> := <nat:1> + <var:D> * <var:V> ; | . This line moves the condition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \} $ to the condition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> + <nat:1> \} $ . Jumping to the next bit of code seen in our code segment , we have the code yielding $ <nat:4> + <var:D> * <var:V> $ as $ <var:D>$ . This takes the precondition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> + <nat:1> \} $ into the condition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:4> \} $ . Shifting focus toward the subsequent bit of code contained in the list of instructions , we see the variable binding code \verb | <var:D> := <nat:3> + <var:D> * <var:V> ; | . This code advances the condition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:4> \} $ to the postcondition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:1> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:3> \} $ . Moving on to the next step , the binding line \verb | <var:D> := <nat:1> + <var:D> * <var:V> ; | . This statement advances the condition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:1> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:3> \} $ as the postcondition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> \} $ . Following , we have the variable update code yielding $ <nat:2> + <var:D> * <var:V$ into $ <var:D>$ . This statement moves the precondition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> \} $ to the postcondition $ \{ <var:V> = <var:t> \land <var:D> = <nat:4> \cdot <var:t> ^ <nat:5> + <nat:1> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:4> ; <var:D> := <nat:1> + <var:D> * <var:V> ; <var:D> := <nat:4> + <var:D> * <var:V> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:1> + <var:D> * <var:V> ; <var:D> := <nat:2> + <var:D> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:V> = <var:t> }} <def:poly> {{ <var:D> = <nat:4> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:t> /\ <var:D> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:t> /\ <var:D> = <nat:4> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:t> /\ <var:D> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:t> /\ <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:t> /\ <var:D> = <nat:4> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:t> /\ <var:D> = <nat:4> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 