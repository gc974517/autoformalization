\begin{document} \begin{theorem} Consider a set of commands as \begin{verbatim} <var:a0> := <nat:1> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:R> ; <var:p> := <var:a1> ; <var:p> := <var:p> + <var:a0> \end{verbatim} Assume that $ <var:R> = <var:w> $ ahead of the execution of our set of instructions , it follows that $ <var:p> = <nat:2> \times <var:w> + <nat:1> $ . \end{theorem} \begin{proof} See that the following decorated list of commands . \begin{eqnarray} \{ <var:R> = <var:w> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:R> = <var:w> \land <var:a0> = <nat:1> \} \\ <var:a1> := <nat:2> ; \\ \{ <var:R> = <var:w> \land <var:a0> = <nat:1> \land <var:a1> = <nat:2> \} \\ <var:a1> := <var:a1> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:a0> = <nat:1> \land <var:a1> = <nat:2> * <var:w> \} \\ <var:p> := <var:a1> ; \\ \{ <var:R> = <var:w> \land <var:a0> = <nat:1> \land <var:p> = <nat:2> * <var:w> \} \\ <var:p> := <var:p> + <var:a0> \\ \{ <var:R> = <var:w> \land <var:p> = <nat:2> * <var:w> + <nat:1> \} \end{eqnarray} Using standard Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <var:a0> := <nat:1> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:R> ; <var:p> := <var:a1> ; <var:p> := <var:p> + <var:a0> {{ <var:p> = <nat:2> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:a0> = <nat:1> /\ <var:p> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:p> = <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 