\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as \begin{verbatim} <var:z1> := <var:D> ; <var:z2> := <var:z1> * <var:D> ; <var:z3> := <var:z2> * <var:D> ; <var:z0> := <nat:8> ; <var:z1> := <var:z1> * <nat:3> ; <var:z2> := <var:z2> * <nat:3> ; <var:z3> := <var:z3> * <nat:8> ; <var:W> := <var:z3> <var:W> := <var:W> + <var:z2> <var:W> := <var:W> + <var:z1> <var:W> := <var:W> + <var:z0> \end{verbatim} Allowing it to be that $ <var:D> = <var:d> $ for some integers $ <var:d> $ ahead of the execution of our list of instructions then $ <var:W> = <nat:8> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:D> = <var:d> \} \\ <var:z1> := <var:D> ; \\ \{ <var:D> = <var:d> \land <var:z1> = <var:d> \} \\ <var:z2> := <var:z1> * <var:D> ; \\ \{ <var:D> = <var:d> \land <var:z1> = <var:d> \land <var:z2> = <var:d> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:D> ; \\ \{ <var:D> = <var:d> \land <var:z1> = <var:d> \land <var:z2> = <var:d> ^ <nat:2> \land <var:z3> = <var:d> ^ <nat:3> \} \\ <var:z0> := <nat:8> ; \\ \{ <var:D> = <var:d> \land <var:z1> = <var:d> \land <var:z2> = <var:d> ^ <nat:2> \land <var:z3> = <var:d> ^ <nat:3> \land <var:z0> = <nat:8> \} \\ <var:z1> := <var:z1> * <nat:3> ; \\ \{ <var:D> = <var:d> \land <var:z1> = <nat:3> \times <var:d> \land <var:z2> = <var:d> ^ <nat:2> \land <var:z3> = <var:d> ^ <nat:3> \land <var:z0> = <nat:8> \} \\ <var:z2> := <var:z2> * <nat:3> ; \\ \{ <var:D> = <var:d> \land <var:z1> = <nat:3> \times <var:d> \land <var:z2> = <nat:3> \times <var:d> ^ <nat:2> \land <var:z3> = <var:d> ^ <nat:3> \land <var:z0> = <nat:8> \} \\ <var:z3> := <var:z3> * <nat:8> ; \\ \{ <var:D> = <var:d> \land <var:z1> = <nat:3> \times <var:d> \land <var:z2> = <nat:3> \times <var:d> ^ <nat:2> \land <var:z3> = <nat:8> \times <var:d> ^ <nat:3> \land <var:z0> = <nat:8> \} \\ <var:W> := <var:z3> \\ \{ <var:D> = <var:d> \land <var:z1> = <nat:3> \times <var:d> \land <var:z2> = <nat:3> \times <var:d> ^ <nat:2> \land <var:z0> = <nat:8> \land <var:W> = <nat:8> \times <var:d> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:z2> \\ \{ <var:D> = <var:d> \land <var:z1> = <nat:3> \times <var:d> \land <var:z0> = <nat:8> \land <var:W> = <nat:8> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:z1> \\ \{ <var:D> = <var:d> \land <var:z0> = <nat:8> \land <var:W> = <nat:8> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> \} \\ <var:W> := <var:W> + <var:z0> \\ \{ <var:D> = <var:d> \land <var:W> = <nat:8> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:8> \} \end{eqnarray} Given the preceding argument , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:D> = <var:d> }} <var:z1> := <var:D> ; <var:z2> := <var:z1> * <var:D> ; <var:z3> := <var:z2> * <var:D> ; <var:z0> := <nat:8> ; <var:z1> := <var:z1> * <nat:3> ; <var:z2> := <var:z2> * <nat:3> ; <var:z3> := <var:z3> * <nat:8> ; <var:W> := <var:z3> <var:W> := <var:W> + <var:z2> <var:W> := <var:W> + <var:z1> <var:W> := <var:W> + <var:z0> {{ <var:W> = <nat:8> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <var:d> /\ <var:z2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <var:d> /\ <var:z2> = <var:d> ^ <nat:2> /\ <var:z3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <var:d> /\ <var:z2> = <var:d> ^ <nat:2> /\ <var:z3> = <var:d> ^ <nat:3> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <nat:3> * <var:d> /\ <var:z2> = <var:d> ^ <nat:2> /\ <var:z3> = <var:d> ^ <nat:3> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <nat:3> * <var:d> /\ <var:z2> = <nat:3> * <var:d> ^ <nat:2> /\ <var:z3> = <var:d> ^ <nat:3> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <nat:3> * <var:d> /\ <var:z2> = <nat:3> * <var:d> ^ <nat:2> /\ <var:z3> = <nat:8> * <var:d> ^ <nat:3> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <nat:3> * <var:d> /\ <var:z2> = <nat:3> * <var:d> ^ <nat:2> /\ <var:z0> = <nat:8> /\ <var:W> = <nat:8> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z1> = <nat:3> * <var:d> /\ <var:z0> = <nat:8> /\ <var:W> = <nat:8> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:z0> = <nat:8> /\ <var:W> = <nat:8> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:W> = <nat:8> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 