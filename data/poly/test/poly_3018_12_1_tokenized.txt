\begin{document} \begin{theorem} Take a segment of code as follows \begin{verbatim} <var:r1> := <var:z> ; <var:r2> := <var:r1> * <var:z> ; <var:r3> := <var:r2> * <var:z> ; <var:r4> := <var:r3> * <var:z> ; <var:r0> := <nat:1> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:3> ; <var:r4> := <var:r4> * <nat:2> ; <var:t> := <var:r4> <var:t> := <var:t> + <var:r3> <var:t> := <var:t> + <var:r2> <var:t> := <var:t> + <var:r0> \end{verbatim} Allow that $ <var:z> = <var:j> $ before evaluating this code segment it follows that we see $ <var:t> = <nat:2> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning yields : \begin{eqnarray} \{ <var:z> = <var:j> \} \\ <var:r1> := <var:z> ; \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \} \\ <var:r2> := <var:r1> * <var:z> ; \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <var:j> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:z> ; \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <var:j> ^ <nat:2> \land <var:r3> = <var:j> ^ <nat:3> \} \\ <var:r4> := <var:r3> * <var:z> ; \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <var:j> ^ <nat:2> \land <var:r3> = <var:j> ^ <nat:3> \land <var:r4> = <var:j> ^ <nat:4> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <var:j> ^ <nat:2> \land <var:r3> = <var:j> ^ <nat:3> \land <var:r4> = <var:j> ^ <nat:4> \land <var:r0> = <nat:1> \} \\ <var:r2> := <var:r2> * <nat:3> ; \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:r3> = <var:j> ^ <nat:3> \land <var:r4> = <var:j> ^ <nat:4> \land <var:r0> = <nat:1> \} \\ <var:r3> := <var:r3> * <nat:3> ; \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:r3> = <nat:3> \times <var:j> ^ <nat:3> \land <var:r4> = <var:j> ^ <nat:4> \land <var:r0> = <nat:1> \} \\ <var:r4> := <var:r4> * <nat:2> ; \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:r3> = <nat:3> \times <var:j> ^ <nat:3> \land <var:r4> = <nat:2> \times <var:j> ^ <nat:4> \land <var:r0> = <nat:1> \} \end{eqnarray} Continuing the execution of the list of commands yields : \begin{eqnarray} <var:t> := <var:r4> \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:r3> = <nat:3> \times <var:j> ^ <nat:3> \land <var:r0> = <nat:1> \land <var:t> = <nat:2> \times <var:j> ^ <nat:4> \} \\ <var:t> := <var:t> + <var:r3> \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:r0> = <nat:1> \land <var:t> = <nat:2> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:r2> \\ \{ <var:z> = <var:j> \land <var:r1> = <var:j> \land <var:r0> = <nat:1> \land <var:t> = <nat:2> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:r0> \\ \{ <var:z> = <var:j> \land <var:t> = <nat:2> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \} \end{eqnarray} Considering the above , our set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <var:r4> : string := " <var:r4> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:z> = <var:j> }} <var:r1> := <var:z> ; <var:r2> := <var:r1> * <var:z> ; <var:r3> := <var:r2> * <var:z> ; <var:r4> := <var:r3> * <var:z> ; <var:r0> := <nat:1> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:3> ; <var:r4> := <var:r4> * <nat:2> ; <var:t> := <var:r4> <var:t> := <var:t> + <var:r3> <var:t> := <var:t> + <var:r2> <var:t> := <var:t> + <var:r0> {{ <var:t> = <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <var:j> ^ <nat:2> /\ <var:r3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <var:j> ^ <nat:2> /\ <var:r3> = <var:j> ^ <nat:3> /\ <var:r4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <var:j> ^ <nat:2> /\ <var:r3> = <var:j> ^ <nat:3> /\ <var:r4> = <var:j> ^ <nat:4> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:r3> = <var:j> ^ <nat:3> /\ <var:r4> = <var:j> ^ <nat:4> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:r3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:r4> = <var:j> ^ <nat:4> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:r3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:r4> = <nat:2> * <var:j> ^ <nat:4> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:r3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:r0> = <nat:1> /\ <var:t> = <nat:2> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:r0> = <nat:1> /\ <var:t> = <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:r1> = <var:j> /\ <var:r0> = <nat:1> /\ <var:t> = <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:t> = <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 