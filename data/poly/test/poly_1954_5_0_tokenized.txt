\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:8> ; <var:J1> := <var:J1> * <var:S> ; <var:k> := <var:J1> ; <var:k> := <var:k> + <var:J0> \end{verbatim} Assuming that $ <var:S> = <var:R> $ before running this program then we see $ <var:k> = <nat:8> \times <var:R> + <nat:6> $ . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:S> = <var:R> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:S> = <var:R> \land <var:J0> = <nat:6> \} \\ <var:J1> := <nat:8> ; \\ \{ <var:S> = <var:R> \land <var:J0> = <nat:6> \land <var:J1> = <nat:8> \} \end{eqnarray} Continuing evaluating our segment of code returns : \begin{eqnarray} <var:J1> := <var:J1> * <var:S> ; \\ \{ <var:S> = <var:R> \land <var:J0> = <nat:6> \land <var:J1> = <nat:8> \times <var:R> \} \\ <var:k> := <var:J1> ; \\ \{ <var:S> = <var:R> \land <var:J0> = <nat:6> \land <var:k> = <nat:8> \times <var:R> \} \\ <var:k> := <var:k> + <var:J0> \\ \{ <var:S> = <var:R> \land <var:k> = <nat:8> \times <var:R> + <nat:6> \} \end{eqnarray} Given the above , this set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:S> = <var:R> }} <var:J0> := <nat:6> ; <var:J1> := <nat:8> ; <var:J1> := <var:J1> * <var:S> ; <var:k> := <var:J1> ; <var:k> := <var:k> + <var:J0> {{ <var:k> = <nat:8> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:J0> = <nat:6> /\ <var:k> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:k> = <nat:8> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 