\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:4> ; <var:n> := <var:z0> \end{verbatim} Given $ <var:A> = <var:X> $ before interpreting our series of commands it holds that $ <var:n> = <nat:4> $ after program has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:X> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:A> = <var:X> \land <var:z0> = <nat:4> \} \\ <var:n> := <var:z0> \\ \{ <var:A> = <var:X> \land <var:n> = <nat:4> \} \end{eqnarray} Applying typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:A> = <var:X> }} <var:z0> := <nat:4> ; <var:n> := <var:z0> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 