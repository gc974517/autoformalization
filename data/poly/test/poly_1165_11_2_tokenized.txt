\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:1> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:q> = <var:B> $ prior to interpreting this code segment it holds that we have $ <var:e> = <nat:3> \cdot <var:B> ^ <nat:10> + <nat:4> \cdot <var:B> ^ <nat:9> + <nat:3> \cdot <var:B> ^ <nat:8> + <nat:1> \cdot <var:B> ^ <nat:7> + <nat:2> \cdot <var:B> ^ <nat:6> + <nat:4> \cdot <var:B> ^ <nat:5> + <nat:3> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the set of commands can be demonstrated through typical Hoare logic . Next , \verb | { <var:q> = <var:B> } <var:e> := <nat:3> { <var:q> = <var:B> \land <var:e> = <nat:3> } | , \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> } <var:e> := <nat:4> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> + <nat:4> } | , \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> + <nat:4> } <var:e> := <nat:3> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> } | , \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> } <var:e> := <nat:1> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> } | , \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> } <var:e> := <nat:2> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> } | , \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> } <var:e> := <nat:4> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> } | , \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> } <var:e> := <nat:3> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> } | and \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> } <var:e> := <nat:2> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> } | . Taking another step toward the next steps found in the code segment , we have \verb | { <var:q> = <var:B> } <var:e> := <nat:3> { <var:q> = <var:B> \land <var:e> = <nat:3> } | , \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> } <var:e> := <nat:4> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> + <nat:4> } | and \verb | { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> + <nat:4> } <var:e> := <nat:3> + <var:e> * <var:q> { <var:q> = <var:B> \land <var:e> = <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> } | . This is rigorously given with the scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:1> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:q> = <var:B> }} <def:poly> {{ <var:e> = <nat:3> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:3> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:e> = <nat:3> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:3> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 