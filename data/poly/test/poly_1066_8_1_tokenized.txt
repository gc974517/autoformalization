\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:i1> := <var:a> ; <var:i2> := <var:i1> * <var:a> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:9> ; <var:i2> := <var:i2> * <nat:2> ; <var:x> := <var:i2> <var:x> := <var:x> + <var:i1> <var:x> := <var:x> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Given , given all $ <var:c> \in \mathbb{Z}^+ $ , it to hold that $ <var:a> = <var:c> $ ahead of the execution of this set of commands , then we see $ <var:x> = <nat:2> \cdot <var:c> ^ <nat:2> + <nat:9> \cdot <var:c> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:c> \} \\ <var:i1> := <var:a> ; \\ \{ <var:a> = <var:c> \land <var:i1> = <var:c> \} \\ <var:i2> := <var:i1> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:a> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> \land <var:i0> = <nat:3> \} \\ <var:i1> := <var:i1> * <nat:9> ; \\ \{ <var:a> = <var:c> \land <var:i1> = <nat:9> * <var:c> \land <var:i2> = <var:c> ^ <nat:2> \land <var:i0> = <nat:3> \} \\ <var:i2> := <var:i2> * <nat:2> ; \\ \{ <var:a> = <var:c> \land <var:i1> = <nat:9> * <var:c> \land <var:i2> = <nat:2> * <var:c> ^ <nat:2> \land <var:i0> = <nat:3> \} \\ <var:x> := <var:i2> \\ \{ <var:a> = <var:c> \land <var:i1> = <nat:9> * <var:c> \land <var:i0> = <nat:3> \land <var:x> = <nat:2> * <var:c> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:i1> \\ \{ <var:a> = <var:c> \land <var:i0> = <nat:3> \land <var:x> = <nat:2> * <var:c> ^ <nat:2> + <nat:9> * <var:c> \} \\ <var:x> := <var:x> + <var:i0> \\ \{ <var:a> = <var:c> \land <var:x> = <nat:2> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:3> \} \end{eqnarray} Applying standard Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i1> := <var:a> ; <var:i2> := <var:i1> * <var:a> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:9> ; <var:i2> := <var:i2> * <nat:2> ; <var:x> := <var:i2> <var:x> := <var:x> + <var:i1> <var:x> := <var:x> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:a> = <var:c> }} <def:poly> {{ <var:x> = <nat:2> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:i1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:i1> = <var:c> /\ <var:i2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:i1> = <var:c> /\ <var:i2> = <var:c> ^ <nat:2> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:i1> = <nat:9> * <var:c> /\ <var:i2> = <var:c> ^ <nat:2> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:i1> = <nat:9> * <var:c> /\ <var:i2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:i1> = <nat:9> * <var:c> /\ <var:i0> = <nat:3> /\ <var:x> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:i0> = <nat:3> /\ <var:x> = <nat:2> * <var:c> ^ <nat:2> + <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:x> = <nat:2> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 