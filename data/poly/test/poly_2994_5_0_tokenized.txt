\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:1> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:N> ; <var:j> := <var:i1> ; <var:j> := <var:j> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Allow $ <var:N> = <var:a> $ prior to interpreting our series of commands , then $ <var:j> = <nat:3> \cdot <var:a> + <nat:1> $ after set of instructions executes . \end{theorem} \begin{proof} The flow of logic for the series of instructions is accomplished by Hoare reasoning . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:a> \} & <var:i0> := <nat:1> & \{ <var:N> = <var:a> \land <var:i0> = <nat:1> \} \\ \{ <var:N> = <var:a> \land <var:i0> = <nat:1> \} & <var:i1> := <nat:3> & \{ <var:N> = <var:a> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \} \\ \{ <var:N> = <var:a> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \} & <var:i1> := <var:i1> * <var:N> & \{ <var:N> = <var:a> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> * <var:a> \} \end{tabular} Moving onward , \[ \begin{tabular} {rcl} \{ <var:N> = <var:a> \} & <var:i0> := <nat:1> & \{ <var:N> = <var:a> \land <var:i0> = <nat:1> \} \\ \{ <var:N> = <var:a> \land <var:i0> = <nat:1> \} & <var:i1> := <nat:3> & \{ <var:N> = <var:a> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:1> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:N> ; <var:j> := <var:i1> ; <var:j> := <var:j> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:N> = <var:a> }} <def:poly> {{ <var:j> = <nat:3> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:i0> = <nat:1> /\ <var:j> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:j> = <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 