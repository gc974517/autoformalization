\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:z> ; <var:t2> := <var:t1> * <var:z> ; <var:t3> := <var:t2> * <var:z> ; <var:t4> := <var:t3> * <var:z> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:5> ; <var:t3> := <var:t3> * <nat:2> ; <var:t4> := <var:t4> * <nat:5> ; <var:c> := <var:t4> <var:c> := <var:c> + <var:t3> <var:c> := <var:c> + <var:t2> <var:c> := <var:c> + <var:t1> <var:c> := <var:c> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:z> = <var:M> $ ahead of evaluating the set of instructions , then $ <var:c> = <nat:5> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:8> $ once list of instructions exits . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:z> = <var:M> \} \\ <var:t1> := <var:z> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <var:M> \} \\ <var:t2> := <var:t1> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \} \\ <var:t4> := <var:t3> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \} \\ <var:t0> := <nat:8> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:8> \} \\ <var:t1> := <var:t1> * <nat:4> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <nat:4> \cdot <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:8> \} \\ <var:t2> := <var:t2> * <nat:5> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <nat:4> \cdot <var:M> \land <var:t2> = <nat:5> \cdot <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:8> \} \\ <var:t3> := <var:t3> * <nat:2> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <nat:4> \cdot <var:M> \land <var:t2> = <nat:5> \cdot <var:M> ^ <nat:2> \land <var:t3> = <nat:2> \cdot <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:8> \} \\ <var:t4> := <var:t4> * <nat:5> ; \\ \{ <var:z> = <var:M> \land <var:t1> = <nat:4> \cdot <var:M> \land <var:t2> = <nat:5> \cdot <var:M> ^ <nat:2> \land <var:t3> = <nat:2> \cdot <var:M> ^ <nat:3> \land <var:t4> = <nat:5> \cdot <var:M> ^ <nat:4> \land <var:t0> = <nat:8> \} \\ <var:c> := <var:t4> \\ \{ <var:z> = <var:M> \land <var:t1> = <nat:4> \cdot <var:M> \land <var:t2> = <nat:5> \cdot <var:M> ^ <nat:2> \land <var:t3> = <nat:2> \cdot <var:M> ^ <nat:3> \land <var:t0> = <nat:8> \land <var:c> = <nat:5> \cdot <var:M> ^ <nat:4> \} \\ <var:c> := <var:c> + <var:t3> \\ \{ <var:z> = <var:M> \land <var:t1> = <nat:4> \cdot <var:M> \land <var:t2> = <nat:5> \cdot <var:M> ^ <nat:2> \land <var:t0> = <nat:8> \land <var:c> = <nat:5> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:t2> \\ \{ <var:z> = <var:M> \land <var:t1> = <nat:4> \cdot <var:M> \land <var:t0> = <nat:8> \land <var:c> = <nat:5> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> + <nat:5> \cdot <var:M> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:t1> \\ \{ <var:z> = <var:M> \land <var:t0> = <nat:8> \land <var:c> = <nat:5> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> + <nat:5> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> \} \\ <var:c> := <var:c> + <var:t0> \\ \{ <var:z> = <var:M> \land <var:c> = <nat:5> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> + <nat:5> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:8> \} \end{eqnarray} Given the preceding argument , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <var:t4> : string := " <var:t4> " . Definition <def:poly> := <var:t1> := <var:z> ; <var:t2> := <var:t1> * <var:z> ; <var:t3> := <var:t2> * <var:z> ; <var:t4> := <var:t3> * <var:z> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:5> ; <var:t3> := <var:t3> * <nat:2> ; <var:t4> := <var:t4> * <nat:5> ; <var:c> := <var:t4> <var:c> := <var:c> + <var:t3> <var:c> := <var:c> + <var:t2> <var:c> := <var:c> + <var:t1> <var:c> := <var:c> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:z> = <var:M> }} <def:poly> {{ <var:c> = <nat:5> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <var:M> /\ <var:t2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <var:M> /\ <var:t2> = <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <var:M> /\ <var:t2> = <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <var:M> /\ <var:t2> = <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <nat:4> * <var:M> /\ <var:t2> = <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <nat:4> * <var:M> /\ <var:t2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <nat:4> * <var:M> /\ <var:t2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <nat:4> * <var:M> /\ <var:t2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:t4> = <nat:5> * <var:M> ^ <nat:4> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <nat:4> * <var:M> /\ <var:t2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:t0> = <nat:8> /\ <var:c> = <nat:5> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <nat:4> * <var:M> /\ <var:t2> = <nat:5> * <var:M> ^ <nat:2> /\ <var:t0> = <nat:8> /\ <var:c> = <nat:5> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t1> = <nat:4> * <var:M> /\ <var:t0> = <nat:8> /\ <var:c> = <nat:5> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:t0> = <nat:8> /\ <var:c> = <nat:5> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:c> = <nat:5> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 