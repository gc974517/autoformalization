\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:I0> := <nat:1> ; <var:v> := <var:I0> \end{verbatim} Allowing that we have $ <var:D> = <var:n> $ before the evaluation of this set of instructions , it follows that $ <var:v> = <nat:1> $ when code segment finishes . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is shown using Hoare techniques . Now , \begin{verbatim} { <var:D> = <var:n> } <var:I0> := <nat:1> { <var:D> = <var:n> \land <var:I0> = <nat:1> } \end{verbatim} This is ensured using the variable update inference rule defined in usual Hoare logic . Jumping to the upcoming command found in our series of instructions , we have \begin{verbatim} { <var:D> = <var:n> } <var:I0> := <nat:1> { <var:D> = <var:n> \land <var:I0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:D> = <var:n> }} <var:I0> := <nat:1> ; <var:v> := <var:I0> {{ <var:v> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:v> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 