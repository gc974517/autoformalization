\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:2> ; <var:V> := <var:u0> \end{verbatim} Assume $ <var:J> = <var:M> $ before evaluating this segment of code , it follows that we have $ <var:V> = <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this program can be demonstrated through Hoare reasoning . Taking another step toward the upcoming statement in our set of commands , \begin{verbatim} { <var:J> = <var:M> } <var:u0> := <nat:2> { <var:J> = <var:M> \land <var:u0> = <nat:2> } \end{verbatim} Moving on , we have \begin{verbatim} { <var:J> = <var:M> } <var:u0> := <nat:2> { <var:J> = <var:M> \land <var:u0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:J> = <var:M> }} <var:u0> := <nat:2> ; <var:V> := <var:u0> {{ <var:V> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:V> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 