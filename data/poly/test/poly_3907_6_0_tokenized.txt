\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:8> ; <var:T2> := <nat:3> ; <var:T2> := <var:T2> * <var:p> ; <var:T2> := <var:T2> * <var:p> ; <var:C> := <var:T2> ; <var:C> := <var:C> + <var:T0> \end{verbatim} Given that we have $ <var:p> = <var:k> $ before executing the code segment it must be that we have $ <var:C> = <nat:3> * <var:k> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands is clear through usual Hoare reasoning . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:k> \} & <var:T0> := <nat:8> & \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \} \\ \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \} & <var:T2> := <nat:3> & \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \land <var:T2> = <nat:3> \} \\ \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \land <var:T2> = <nat:3> \} & <var:T2> := <var:T2> * <var:p> & \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \land <var:T2> = <nat:3> * <var:k> \} \end{tabular} This is ensured through the variable update inference rule obtained from typical Hoare techniques . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:k> \} & <var:T0> := <nat:8> & \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \} \end{tabular} After , we have \[ \begin{tabular} {rcl} \{ <var:p> = <var:k> \} & <var:T0> := <nat:8> & \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \} \\ \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \} & <var:T2> := <nat:3> & \{ <var:p> = <var:k> \land <var:T0> = <nat:8> \land <var:T2> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:p> = <var:k> }} <var:T0> := <nat:8> ; <var:T2> := <nat:3> ; <var:T2> := <var:T2> * <var:p> ; <var:T2> := <var:T2> * <var:p> ; <var:C> := <var:T2> ; <var:C> := <var:C> + <var:T0> {{ <var:C> = <nat:3> * <var:k> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:T0> = <nat:8> /\ <var:T2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:T0> = <nat:8> /\ <var:T2> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:T0> = <nat:8> /\ <var:T2> = <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:T0> = <nat:8> /\ <var:C> = <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:C> = <nat:3> * <var:k> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 