\begin{document} \begin{theorem} Take the following set of commands as \begin{verbatim} <var:S1> := <var:i> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:8> ; <var:I> := <var:S1> <var:I> := <var:I> + <var:S0> \end{verbatim} Assume it to hold that $ <var:i> = <var:r> $ given every positive integer coefficients $ <var:r> $ prior to the execution of the list of instructions then $ <var:I> = <nat:8> * <var:r> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for our segment of code is given through the below decorated segment of code . \begin{eqnarray} \{ <var:i> = <var:r> \} \\ <var:S1> := <var:i> ; \\ \{ <var:i> = <var:r> \land <var:S1> = <var:r> \} \\ <var:S0> := <nat:7> ; \\ \{ <var:i> = <var:r> \land <var:S1> = <var:r> \land <var:S0> = <nat:7> \} \\ <var:S1> := <var:S1> * <nat:8> ; \\ \{ <var:i> = <var:r> \land <var:S1> = <nat:8> * <var:r> \land <var:S0> = <nat:7> \} \\ <var:I> := <var:S1> \\ \{ <var:i> = <var:r> \land <var:S0> = <nat:7> \land <var:I> = <nat:8> * <var:r> \} \end{eqnarray} Allowing evaluating the list of instructions results in : \begin{eqnarray} <var:I> := <var:I> + <var:S0> \\ \{ <var:i> = <var:r> \land <var:I> = <nat:8> * <var:r> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:i> = <var:r> }} <var:S1> := <var:i> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:8> ; <var:I> := <var:S1> <var:I> := <var:I> + <var:S0> {{ <var:I> = <nat:8> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:S1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:S1> = <var:r> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:S1> = <nat:8> * <var:r> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:S0> = <nat:7> /\ <var:I> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:I> = <nat:8> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 