\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:G> := <nat:1> ; <var:G> := <nat:1> + <var:G> * <var:Z> ; <var:G> := <nat:1> + <var:G> * <var:Z> ; <var:G> := <var:G> * <var:Z> ; <var:G> := <nat:3> + <var:G> * <var:Z> ; <var:G> := <nat:2> + <var:G> * <var:Z> \end{verbatim} Allow it to be that $ <var:Z> = <var:c> $ prior to running this series of instructions it follows that we see $ <var:G> = <nat:1> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:2> $ once program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:c> \} \\ <var:G> := <nat:1> ; \\ \{ <var:Z> = <var:c> \land <var:G> = <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:G> = <nat:1> \times <var:c> + <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:G> = <nat:1> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:1> \} \\ <var:G> := <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:G> = <nat:1> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + \} \\ <var:G> := <nat:3> + <var:G> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:G> = <nat:1> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:3> \} \\ <var:G> := <nat:2> + <var:G> * <var:Z> \\ \{ <var:Z> = <var:c> \land <var:G> = <nat:1> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:2> \} \end{eqnarray} Applying typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Z> = <var:c> }} <var:G> := <nat:1> ; <var:G> := <nat:1> + <var:G> * <var:Z> ; <var:G> := <nat:1> + <var:G> * <var:Z> ; <var:G> := <var:G> * <var:Z> ; <var:G> := <nat:3> + <var:G> * <var:Z> ; <var:G> := <nat:2> + <var:G> * <var:Z> {{ <var:G> = <nat:1> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:G> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:G> = <nat:1> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:G> = <nat:1> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:G> = <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:G> = <nat:1> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:G> = <nat:1> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 