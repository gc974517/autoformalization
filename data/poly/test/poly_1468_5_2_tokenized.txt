\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:3> + <var:y> * <var:T> ; <var:y> := <var:y> * <var:T> ; <var:y> := <var:y> * <var:T> ; <var:y> := <nat:3> + <var:y> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:T> = <var:p> $ ahead of executing the program then we have $ <var:y> = <nat:3> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> $ once code segment terminates . \end{theorem} \begin{proof} Proving correctness for this series of commands can be demonstrated with Hoare reasoning . Considering the proceeding bit of code contained in our code segment , we see the statement \verb | <var:y> := <nat:3> ; | . This moves the precondition $ \{ <var:T> = <var:p> \} $ toward $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \} $ . Taking a look at the subsequent statement contained in our list of instructions , the variable update command binding $ <nat:3> + <var:y> * <var:T> $ into $ <var:y>$ . This line moves $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \} $ as $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \cdot <var:p> + <nat:3> \} $ . Looking at the next command contained in our set of instructions , we have the environment update statement \verb | <var:y> := <var:y> * <var:T> ; | . This advances $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \cdot <var:p> + <nat:3> \} $ into the postcondition $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + \} $ . This is shown to be logically sound through the assignment inference rule found in typical Hoare reasoning . Now , the variable binding line \verb | <var:y> := <var:y> * <var:T> ; | . This line transfers the condition $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + \} $ into $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + \} $ . This is known to be sound using the assignment rule found in usual Hoare reasoning . Moving on to the subsequent step seen in the list of commands , the variable assignmet statement binding $ <nat:3> + <var:y> * <var:T$ into $ <var:y>$ . This forwards the condition $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + \} $ toward the postcondition $ \{ <var:T> = <var:p> \land <var:y> = <nat:3> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:3> ; <var:y> := <nat:3> + <var:y> * <var:T> ; <var:y> := <var:y> * <var:T> ; <var:y> := <var:y> * <var:T> ; <var:y> := <nat:3> + <var:y> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:T> = <var:p> }} <def:poly> {{ <var:y> = <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:y> = <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 