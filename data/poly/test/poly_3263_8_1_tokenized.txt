\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} : \begin{verbatim} <var:K1> := <var:R> ; <var:K2> := <var:K1> * <var:R> ; <var:K0> := <nat:5> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:3> ; <var:f> := <var:K2> <var:f> := <var:f> + <var:K1> <var:f> := <var:f> + <var:K0> \end{verbatim} Allow it to hold that $ <var:R> = <var:q> $ --- given all positive numbers $ <var:q> $ --- before interpreting the list of instructions it holds that we have $ <var:f> = <nat:3> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> + <nat:5> $ after code is done . \end{theorem} \begin{proof} The argument for the series of instructions is accomplished using Hoare reasoning . Taking another step toward the proceeding lines of codefound in the series of commands , we have \begin{verbatim} { <var:R> = <var:q> } <var:K1> := <var:R> { <var:R> = <var:q> \land <var:K1> = <var:q> } { <var:R> = <var:q> \land <var:K1> = <var:q> } <var:K2> := <var:K1> * <var:R> { <var:R> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> } { <var:R> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> } <var:K0> := <nat:5> { <var:R> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> \land <var:K0> = <nat:5> } { <var:R> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> \land <var:K0> = <nat:5> } <var:K1> := <var:K1> * <nat:6> { <var:R> = <var:q> \land <var:K1> = <nat:6> * <var:q> \land <var:K2> = <var:q> ^ <nat:2> \land <var:K0> = <nat:5> } { <var:R> = <var:q> \land <var:K1> = <nat:6> * <var:q> \land <var:K2> = <var:q> ^ <nat:2> \land <var:K0> = <nat:5> } <var:K2> := <var:K2> * <nat:3> { <var:R> = <var:q> \land <var:K1> = <nat:6> * <var:q> \land <var:K2> = <nat:3> * <var:q> ^ <nat:2> \land <var:K0> = <nat:5> } { <var:R> = <var:q> \land <var:K1> = <nat:6> * <var:q> \land <var:K2> = <nat:3> * <var:q> ^ <nat:2> \land <var:K0> = <nat:5> } <var:f> := <var:K2{ <var:R> = <var:q> \land <var:K1> = <nat:6> * <var:q> \land <var:K0> = <nat:5> \land <var:f> = <nat:3> * <var:q> ^ <nat:2> } \end{verbatim} After , we see \begin{verbatim} { <var:R> = <var:q> } <var:K1> := <var:R> { <var:R> = <var:q> \land <var:K1> = <var:q> } { <var:R> = <var:q> \land <var:K1> = <var:q> } <var:K2> := <var:K1> * <var:R> { <var:R> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> } \end{verbatim} This is known to be sound through the law found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:R> = <var:q> }} <var:K1> := <var:R> ; <var:K2> := <var:K1> * <var:R> ; <var:K0> := <nat:5> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:3> ; <var:f> := <var:K2> <var:f> := <var:f> + <var:K1> <var:f> := <var:f> + <var:K0> {{ <var:f> = <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:K1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:K1> = <var:q> /\ <var:K2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:K1> = <var:q> /\ <var:K2> = <var:q> ^ <nat:2> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:K1> = <nat:6> * <var:q> /\ <var:K2> = <var:q> ^ <nat:2> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:K1> = <nat:6> * <var:q> /\ <var:K2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:K1> = <nat:6> * <var:q> /\ <var:K0> = <nat:5> /\ <var:f> = <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:K0> = <nat:5> /\ <var:f> = <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:f> = <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 