\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:8> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:P> ; <var:V2> := <nat:5> ; <var:V2> := <var:V2> * <var:P> ; <var:V2> := <var:V2> * <var:P> ; <var:V3> := <nat:3> ; <var:V3> := <var:V3> * <var:P> ; <var:V3> := <var:V3> * <var:P> ; <var:V3> := <var:V3> * <var:P> ; <var:Y> := <var:V3> ; <var:Y> := <var:Y> + <var:V2> ; <var:Y> := <var:Y> + <var:V1> ; <var:Y> := <var:Y> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:P> = <var:y> $ prior to evaluating our code , it holds that we have $ <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be given by typical Hoare logic . Advancing on , the binding statement \verb | <var:V0> := <nat:8> ; | . This statement redefines the condition $ \{ <var:P> = <var:y> \} $ toward the postcondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \} $ . This is shown to be logically sound using the assignment law given by usual Hoare logic . Advancing to the next step , we have the variable binding code letting $ <nat:1> $ toward $ <var:V1>$ . This moves the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \} $ toward $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> \} $ . This is guaranteed by the assignment scheme given in usual Hoare logic . Moving on to the upcoming bit of code seen in the program , we have the environment update command assigning $ <var:V1> * <var:P> $ into $ <var:V1>$ . This command transfers the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> \} $ as the postcondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \} $ . This is shown to be logically sound using the assignment inference rule defined by standard Hoare logic . Moving on to the following line seen in our code , the variable update command yielding $ <nat:5> $ into $ <var:V2>$ . This statement advances the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \} $ as $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> \} $ . Keeping momentum , the variable binding code \verb | <var:V2> := <var:V2> * <var:P> ; | . This takes the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> \} $ into the postcondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> \} $ . This is given through the assignment inference rule defined in Hoare logic . Jumping to the upcoming line of code contained in the set of instructions , we have the command yielding $ <var:V2> * <var:P> $ to $ <var:V2>$ . This advances the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> \} $ toward the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \} $ . Advancing to the next step , the variable binding command defining $ <nat:3> $ to $ <var:V3>$ . This line takes $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \} $ toward the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:V3> = <nat:3> \} $ . Next , the assignment code \verb | <var:V3> := <var:V3> * <var:P> ; | . This code redefines the precondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:V3> = <nat:3> \} $ to the postcondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:V3> = <nat:3> * <var:y> \} $ . After , we have the variable update code \verb | <var:V3> := <var:V3> * <var:P> ; | . This transfers the precondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:V3> = <nat:3> * <var:y> \} $ into $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:V3> = <nat:3> * <var:y> ^ <nat:2> \} $ . Following , we have the variable assignmet statement letting $ <var:V3> * <var:P> $ toward $ <var:V3>$ . This statement moves the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:V3> = <nat:3> * <var:y> ^ <nat:2> \} $ as the postcondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:V3> = <nat:3> * <var:y> ^ <nat:3> \} $ . This is given using the assignment inference rule defined by Hoare reasoning . Advancing on , we see the statement yielding $ <var:V3> $ into $ <var:Y>$ . This command transfers the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:V3> = <nat:3> * <var:y> ^ <nat:3> \} $ to the postcondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:Y> = <nat:3> * <var:y> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule obtained from standard Hoare logic . Jumping to the next piece of code seen in our code segment , we have the variable update line letting $ <var:Y> + <var:V2> $ as $ <var:Y>$ . This command transfers the precondition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:V2> = <nat:5> * <var:y> ^ <nat:2> \land <var:Y> = <nat:3> * <var:y> ^ <nat:3> \} $ toward $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> \} $ . This is rigorously given with the assignment law found in Hoare logic . Moving onward , we see the variable binding line \verb | <var:Y> := <var:Y> + <var:V1> ; | . This statement forwards $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:1> * <var:y> \land <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> \} $ toward $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:1> * <var:y> \} $ . Taking a look at the next piece of code contained in our program , we see the variable update line defining $ <var:Y> + <var:V0$ to $ <var:Y>$ . This command moves the condition $ \{ <var:P> = <var:y> \land <var:V0> = <nat:8> \land <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:1> * <var:y> \} $ into the postcondition $ \{ <var:P> = <var:y> \land <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:8> \} $ . This is ensured with the assignment inference rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V0> := <nat:8> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:P> ; <var:V2> := <nat:5> ; <var:V2> := <var:V2> * <var:P> ; <var:V2> := <var:V2> * <var:P> ; <var:V3> := <nat:3> ; <var:V3> := <var:V3> * <var:P> ; <var:V3> := <var:V3> * <var:P> ; <var:V3> := <var:V3> * <var:P> ; <var:Y> := <var:V3> ; <var:Y> := <var:Y> + <var:V2> ; <var:Y> := <var:Y> + <var:V1> ; <var:Y> := <var:Y> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:P> = <var:y> }} <def:poly> {{ <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:V2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:V2> = <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:V2> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:V2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:V3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:V2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:V3> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:V2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:V3> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:V2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:V3> = <nat:3> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:V2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:1> * <var:y> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:V0> = <nat:8> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 