\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:3> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:F> ; <var:C3> := <nat:1> ; <var:C3> := <var:C3> * <var:F> ; <var:C3> := <var:C3> * <var:F> ; <var:C3> := <var:C3> * <var:F> ; <var:Z> := <var:C3> ; <var:Z> := <var:Z> + <var:C1> ; <var:Z> := <var:Z> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:F> = <var:A> $ before interpreting our program then we see $ <var:Z> = <nat:1> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is done through usual Hoare reasoning . Paying attention to the upcoming piece of code in our set of instructions , the variable update code \verb | <var:C0> := <nat:3> ; | . This line advances $ \{ <var:F> = <var:A> \} $ toward the postcondition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \} $ . This is rigorously given using the assignment law defined in Hoare logic . Honing in on the next step in our series of instructions , we see the assignment statement \verb | <var:C1> := <nat:3> ; | . This transfers the precondition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \} $ toward the postcondition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> \} $ . Jumping to the proceeding line seen in the series of instructions , the binding command \verb | <var:C1> := <var:C1> * <var:F> ; | . This code moves $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> \} $ to $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \} $ . Jumping to the subsequent command found in the segment of code , we have the assignment line \verb | <var:C3> := <nat:1> ; | . This takes the precondition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \} $ as $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:C3> = <nat:1> \} $ . Focusing on the subsequent step found in the segment of code , we see the environment update statement \verb | <var:C3> := <var:C3> * <var:F> ; | . This takes $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:C3> = <nat:1> \} $ into $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:C3> = <nat:1> * <var:A> \} $ . Paying attention to the proceeding line of code seen in our set of commands , we have the binding command \verb | <var:C3> := <var:C3> * <var:F> ; | . This redefines the condition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:C3> = <nat:1> * <var:A> \} $ into the postcondition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:C3> = <nat:1> * <var:A> ^ <nat:2> \} $ . This is shown using the assignment law found in typical Hoare techniques . Going to the next step , we have the assignment statement letting $ <var:C3> * <var:F> $ toward $ <var:C3>$ . This command moves the condition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:C3> = <nat:1> * <var:A> ^ <nat:2> \} $ as $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:C3> = <nat:1> * <var:A> ^ <nat:3> \} $ . Moving on to the next step , we have the variable update code \verb | <var:Z> := <var:C3> ; | . This statement transfers the condition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:C3> = <nat:1> * <var:A> ^ <nat:3> \} $ as the postcondition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:Z> = <nat:1> * <var:A> ^ <nat:3> \} $ . Advancing , the environment update statement \verb | <var:Z> := <var:Z> + <var:C1> ; | . This command redefines the condition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:A> \land <var:Z> = <nat:1> * <var:A> ^ <nat:3> \} $ into the postcondition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:Z> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> \} $ . Honing in on the following line seen in our program , we see the binding command \verb | <var:Z> := <var:Z> + <var:C0> | . This takes the precondition $ \{ <var:F> = <var:A> \land <var:C0> = <nat:3> \land <var:Z> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> \} $ into $ \{ <var:F> = <var:A> \land <var:Z> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:3> \} $ . This is given using the assignment scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C0> := <nat:3> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:F> ; <var:C3> := <nat:1> ; <var:C3> := <var:C3> * <var:F> ; <var:C3> := <var:C3> * <var:F> ; <var:C3> := <var:C3> * <var:F> ; <var:Z> := <var:C3> ; <var:Z> := <var:Z> + <var:C1> ; <var:Z> := <var:Z> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:F> = <var:A> }} <def:poly> {{ <var:Z> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:A> /\ <var:C3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:A> /\ <var:C3> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:A> /\ <var:C3> = <nat:1> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:A> /\ <var:C3> = <nat:1> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:A> /\ <var:Z> = <nat:1> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:C0> = <nat:3> /\ <var:Z> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:Z> = <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 