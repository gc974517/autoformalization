\begin{document} \begin{theorem} Let the following segment of code as \begin{verbatim} <var:Y0> := <nat:4> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:x> ; <var:Y2> := <nat:8> ; <var:Y2> := <var:Y2> * <var:x> ; <var:Y2> := <var:Y2> * <var:x> ; <var:Y3> := <nat:9> ; <var:Y3> := <var:Y3> * <var:x> ; <var:Y3> := <var:Y3> * <var:x> ; <var:Y3> := <var:Y3> * <var:x> ; <var:C> := <var:Y3> ; <var:C> := <var:C> + <var:Y2> ; <var:C> := <var:C> + <var:Y1> ; <var:C> := <var:C> + <var:Y0> \end{verbatim} Assume that we have $ <var:x> = <var:W> $ , given some $ <var:W> \in \mathbb{Z}^+ $ , prior to evaluating our code segment it must be that we have $ <var:C> = <nat:9> \times <var:W> ^ <nat:3> + <nat:8> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:W> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \} \\ <var:Y1> := <nat:1> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> \} \\ <var:Y1> := <var:Y1> * <var:x> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \} \\ <var:Y2> := <nat:8> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:Y2> = <nat:8> \} \\ <var:Y2> := <var:Y2> * <var:x> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:Y2> = <nat:8> * <var:W> \} \\ <var:Y2> := <var:Y2> * <var:x> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:Y2> = <nat:8> * <var:W> ^ <nat:2> \} \\ <var:Y3> := <nat:9> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:Y2> = <nat:8> * <var:W> ^ <nat:2> \land <var:Y3> = <nat:9> \} \\ <var:Y3> := <var:Y3> * <var:x> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:Y2> = <nat:8> * <var:W> ^ <nat:2> \land <var:Y3> = <nat:9> * <var:W> \} \\ <var:Y3> := <var:Y3> * <var:x> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:Y2> = <nat:8> * <var:W> ^ <nat:2> \land <var:Y3> = <nat:9> * <var:W> ^ <nat:2> \} \\ <var:Y3> := <var:Y3> * <var:x> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:Y2> = <nat:8> * <var:W> ^ <nat:2> \land <var:Y3> = <nat:9> * <var:W> ^ <nat:3> \} \\ <var:C> := <var:Y3> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:Y2> = <nat:8> * <var:W> ^ <nat:2> \land <var:C> = <nat:9> * <var:W> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:Y2> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:1> * <var:W> \land <var:C> = <nat:9> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:Y1> ; \\ \{ <var:x> = <var:W> \land <var:Y0> = <nat:4> \land <var:C> = <nat:9> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> + <nat:1> * <var:W> \} \\ <var:C> := <var:C> + <var:Y0> \\ \{ <var:x> = <var:W> \land <var:C> = <nat:9> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:x> = <var:W> }} <var:Y0> := <nat:4> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:x> ; <var:Y2> := <nat:8> ; <var:Y2> := <var:Y2> * <var:x> ; <var:Y2> := <var:Y2> * <var:x> ; <var:Y3> := <nat:9> ; <var:Y3> := <var:Y3> * <var:x> ; <var:Y3> := <var:Y3> * <var:x> ; <var:Y3> := <var:Y3> * <var:x> ; <var:C> := <var:Y3> ; <var:C> := <var:C> + <var:Y2> ; <var:C> := <var:C> + <var:Y1> ; <var:C> := <var:C> + <var:Y0> {{ <var:C> = <nat:9> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> /\ <var:Y3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> /\ <var:Y3> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> /\ <var:Y3> = <nat:9> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> /\ <var:Y3> = <nat:9> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> /\ <var:C> = <nat:9> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:C> = <nat:9> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:Y0> = <nat:4> /\ <var:C> = <nat:9> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> + <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:C> = <nat:9> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 