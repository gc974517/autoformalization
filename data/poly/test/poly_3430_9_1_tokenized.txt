\begin{document} \begin{theorem} Consider a series of instructions : \begin{verbatim} <var:N1> := <var:i> ; <var:N2> := <var:N1> * <var:i> ; <var:N3> := <var:N2> * <var:i> ; <var:N0> := <nat:2> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:8> ; <var:T> := <var:N3> <var:T> := <var:T> + <var:N2> <var:T> := <var:T> + <var:N0> \end{verbatim} Allow , taking positive numbers $ <var:Q> $ , that we have $ <var:i> = <var:Q> $ ahead of the evaluation of this set of commands , it follows that we have $ <var:T> = <nat:8> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> $ when set of commands terminates . \end{theorem} \begin{proof} Utilizing Hoare logic gives : \begin{eqnarray} \{ <var:i> = <var:Q> \} \\ <var:N1> := <var:i> ; \\ \{ <var:i> = <var:Q> \land <var:N1> = <var:Q> \} \\ <var:N2> := <var:N1> * <var:i> ; \\ \{ <var:i> = <var:Q> \land <var:N1> = <var:Q> \land <var:N2> = <var:Q> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:i> ; \\ \{ <var:i> = <var:Q> \land <var:N1> = <var:Q> \land <var:N2> = <var:Q> ^ <nat:2> \land <var:N3> = <var:Q> ^ <nat:3> \} \\ <var:N0> := <nat:2> ; \\ \{ <var:i> = <var:Q> \land <var:N1> = <var:Q> \land <var:N2> = <var:Q> ^ <nat:2> \land <var:N3> = <var:Q> ^ <nat:3> \land <var:N0> = <nat:2> \} \\ <var:N2> := <var:N2> * <nat:4> ; \\ \{ <var:i> = <var:Q> \land <var:N1> = <var:Q> \land <var:N2> = <nat:4> \times <var:Q> ^ <nat:2> \land <var:N3> = <var:Q> ^ <nat:3> \land <var:N0> = <nat:2> \} \\ <var:N3> := <var:N3> * <nat:8> ; \\ \{ <var:i> = <var:Q> \land <var:N1> = <var:Q> \land <var:N2> = <nat:4> \times <var:Q> ^ <nat:2> \land <var:N3> = <nat:8> \times <var:Q> ^ <nat:3> \land <var:N0> = <nat:2> \} \\ <var:T> := <var:N3> \\ \{ <var:i> = <var:Q> \land <var:N1> = <var:Q> \land <var:N2> = <nat:4> \times <var:Q> ^ <nat:2> \land <var:N0> = <nat:2> \land <var:T> = <nat:8> \times <var:Q> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:N2> \\ \{ <var:i> = <var:Q> \land <var:N1> = <var:Q> \land <var:N0> = <nat:2> \land <var:T> = <nat:8> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:N0> \\ \{ <var:i> = <var:Q> \land <var:T> = <nat:8> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:2> \} \end{eqnarray} Thus , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:i> = <var:Q> }} <var:N1> := <var:i> ; <var:N2> := <var:N1> * <var:i> ; <var:N3> := <var:N2> * <var:i> ; <var:N0> := <nat:2> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:8> ; <var:T> := <var:N3> <var:T> := <var:T> + <var:N2> <var:T> := <var:T> + <var:N0> {{ <var:T> = <nat:8> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:N1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:N1> = <var:Q> /\ <var:N2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:N1> = <var:Q> /\ <var:N2> = <var:Q> ^ <nat:2> /\ <var:N3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:N1> = <var:Q> /\ <var:N2> = <var:Q> ^ <nat:2> /\ <var:N3> = <var:Q> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:N1> = <var:Q> /\ <var:N2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:N3> = <var:Q> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:N1> = <var:Q> /\ <var:N2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:Q> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:N1> = <var:Q> /\ <var:N2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:N0> = <nat:2> /\ <var:T> = <nat:8> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:N1> = <var:Q> /\ <var:N0> = <nat:2> /\ <var:T> = <nat:8> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:T> = <nat:8> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 