\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:X1> := <var:d> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:3> ; <var:u> := <var:X1> <var:u> := <var:u> + <var:X0> \end{verbatim} Assuming it to be that $ <var:d> = <var:k> $ --- given every positive numbers $ <var:k> $ --- prior to running this list of instructions , it follows that we see $ <var:u> = <nat:3> * <var:k> + <nat:2> $ when set of instructions has finished . \end{theorem} \begin{proof} The application of typical Hoare techniques gives : \begin{eqnarray} \{ <var:d> = <var:k> \} \\ <var:X1> := <var:d> ; \\ \{ <var:d> = <var:k> \land <var:X1> = <var:k> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:d> = <var:k> \land <var:X1> = <var:k> \land <var:X0> = <nat:2> \} \\ <var:X1> := <var:X1> * <nat:3> ; \\ \{ <var:d> = <var:k> \land <var:X1> = <nat:3> * <var:k> \land <var:X0> = <nat:2> \} \\ <var:u> := <var:X1> \\ \{ <var:d> = <var:k> \land <var:X0> = <nat:2> \land <var:u> = <nat:3> * <var:k> \} \\ <var:u> := <var:u> + <var:X0> \\ \{ <var:d> = <var:k> \land <var:u> = <nat:3> * <var:k> + <nat:2> \} \end{eqnarray} Thusly , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:d> = <var:k> }} <var:X1> := <var:d> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:3> ; <var:u> := <var:X1> <var:u> := <var:u> + <var:X0> {{ <var:u> = <nat:3> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:X1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:X1> = <var:k> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:X1> = <nat:3> * <var:k> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:X0> = <nat:2> /\ <var:u> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:u> = <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 