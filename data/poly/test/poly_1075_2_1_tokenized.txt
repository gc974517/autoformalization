\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:2> ; <var:A> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:w> = <var:E> $ prior to the execution of the set of commands then we have $ <var:A> = <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our program is demonstrated by usual Hoare techniques . Moving on to the proceeding commands seen in our segment of code , we have \begin{eqnarray} \{ <var:w> = <var:E> \} \, <var:k0> := <nat:2> \, \{ <var:w> = <var:E> \land <var:k0> = <nat:2> \} \\ \{ <var:w> = <var:E> \land <var:k0> = <nat:2> \} \, <var:A> := <var:k0\, \{ <var:w> = <var:E> \land <var:A> = <nat:2> \} \end{eqnarray} This is known to be sound through the variable update scheme obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:A> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:w> = <var:E> }} <def:poly> {{ <var:A> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:E> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:E> /\ <var:A> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 