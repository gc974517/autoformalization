\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:8> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:h> ; <var:Z2> := <nat:7> ; <var:Z2> := <var:Z2> * <var:h> ; <var:Z2> := <var:Z2> * <var:h> ; <var:Z3> := <nat:1> ; <var:Z3> := <var:Z3> * <var:h> ; <var:Z3> := <var:Z3> * <var:h> ; <var:Z3> := <var:Z3> * <var:h> ; <var:S> := <var:Z3> ; <var:S> := <var:S> + <var:Z2> ; <var:S> := <var:S> + <var:Z1> ; <var:S> := <var:S> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:h> = <var:s> $ prior to interpreting this set of commands then we have $ <var:S> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:7> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for this code can be shown by standard Hoare reasoning . Next , we see the line binding $ <nat:8> $ as $ <var:Z0>$ . This statement forwards the precondition $ \{ <var:h> = <var:s> \} $ into the postcondition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \} $ . Looking at the subsequent command seen in our series of instructions , we have the assignment statement \verb | <var:Z1> := <nat:8> ; | . This line forwards the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \} $ toward $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> \} $ . Moving on to the next step , the variable update command \verb | <var:Z1> := <var:Z1> * <var:h> ; | . This command redefines the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> \} $ to $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \} $ . This is guaranteed using the assignment inference rule from usual Hoare techniques . Following , we see the command \verb | <var:Z2> := <nat:7> ; | . This statement moves the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \} $ as the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> \} $ . Observing the proceeding statement contained in the code , the code \verb | <var:Z2> := <var:Z2> * <var:h> ; | . This command forwards the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> \} $ to $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> \} $ . This is guaranteed by the assignment scheme defined in standard Hoare reasoning . Moving on , we see the assignment line letting $ <var:Z2> * <var:h> $ to $ <var:Z2>$ . This takes the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> \} $ into $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \} $ . Moving forward to the next bit of code found in our list of instructions , we see the variable binding command \verb | <var:Z3> := <nat:1> ; | . This takes the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \} $ as $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:Z3> = <nat:1> \} $ . Taking another step toward the subsequent line of code found in the code segment , the assignment line binding $ <var:Z3> * <var:h> $ toward $ <var:Z3>$ . This moves $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:Z3> = <nat:1> \} $ as the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:Z3> = <nat:1> * <var:s> \} $ . Moving on , we have the assignment line yielding $ <var:Z3> * <var:h> $ toward $ <var:Z3>$ . This redefines $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:Z3> = <nat:1> * <var:s> \} $ into the postcondition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:Z3> = <nat:1> * <var:s> ^ <nat:2> \} $ . Moving forward to the next step , we have the assignment line \verb | <var:Z3> := <var:Z3> * <var:h> ; | . This redefines the precondition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:Z3> = <nat:1> * <var:s> ^ <nat:2> \} $ into $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:Z3> = <nat:1> * <var:s> ^ <nat:3> \} $ . Moving forward , we have the environment update command \verb | <var:S> := <var:Z3> ; | . This statement takes $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:Z3> = <nat:1> * <var:s> ^ <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:S> = <nat:1> * <var:s> ^ <nat:3> \} $ . Paying attention to the proceeding statement contained in the code , we see the assignment statement \verb | <var:S> := <var:S> + <var:Z2> ; | . This transfers $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:Z2> = <nat:7> * <var:s> ^ <nat:2> \land <var:S> = <nat:1> * <var:s> ^ <nat:3> \} $ as the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule in standard Hoare techniques . Immediately after , the environment update code \verb | <var:S> := <var:S> + <var:Z1> ; | . This takes $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:8> * <var:s> \land <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> \} $ as the condition $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> \} $ . Considering the next line of code found in the series of instructions , we have the assignment command giving $ <var:S> + <var:Z0$ into $ <var:S>$ . This advances $ \{ <var:h> = <var:s> \land <var:Z0> = <nat:8> \land <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> \} $ toward the postcondition $ \{ <var:h> = <var:s> \land <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:8> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:h> ; <var:Z2> := <nat:7> ; <var:Z2> := <var:Z2> * <var:h> ; <var:Z2> := <var:Z2> * <var:h> ; <var:Z3> := <nat:1> ; <var:Z3> := <var:Z3> * <var:h> ; <var:Z3> := <var:Z3> * <var:h> ; <var:Z3> := <var:Z3> * <var:h> ; <var:S> := <var:Z3> ; <var:S> := <var:S> + <var:Z2> ; <var:S> := <var:S> + <var:Z1> ; <var:S> := <var:S> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:h> = <var:s> }} <def:poly> {{ <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:Z2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:Z2> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:Z2> = <nat:7> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:Z2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:Z3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:Z2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:Z2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:Z2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:Z2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:S> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:8> * <var:s> /\ <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:Z0> = <nat:8> /\ <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:S> = <nat:1> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 