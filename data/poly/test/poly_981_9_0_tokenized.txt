\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:F> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:F> ; <var:y2> := <var:y2> * <var:F> ; <var:D> := <var:y2> ; <var:D> := <var:D> + <var:y1> ; <var:D> := <var:D> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:F> = <var:l> $ given some positive coefficients $ <var:l> $ before interpreting this program it holds that $ <var:D> = <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:1> $ once series of commands has executed . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:F> = <var:l> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:F> = <var:l> \land <var:y0> = <nat:1> \} \\ <var:y1> := <nat:4> ; \\ \{ <var:F> = <var:l> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \} \\ <var:y1> := <var:y1> * <var:F> ; \\ \{ <var:F> = <var:l> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \cdot <var:l> \} \\ <var:y2> := <nat:3> ; \\ \{ <var:F> = <var:l> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \cdot <var:l> \land <var:y2> = <nat:3> \} \\ <var:y2> := <var:y2> * <var:F> ; \\ \{ <var:F> = <var:l> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \cdot <var:l> \land <var:y2> = <nat:3> \cdot <var:l> \} \\ <var:y2> := <var:y2> * <var:F> ; \\ \{ <var:F> = <var:l> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \cdot <var:l> \land <var:y2> = <nat:3> \cdot <var:l> ^ <nat:2> \} \\ <var:D> := <var:y2> ; \\ \{ <var:F> = <var:l> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \cdot <var:l> \land <var:D> = <nat:3> \cdot <var:l> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:y1> ; \\ \{ <var:F> = <var:l> \land <var:y0> = <nat:1> \land <var:D> = <nat:3> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> \} \\ <var:D> := <var:D> + <var:y0> \\ \{ <var:F> = <var:l> \land <var:D> = <nat:3> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:1> \} \end{eqnarray} As a result , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:F> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:F> ; <var:y2> := <var:y2> * <var:F> ; <var:D> := <var:y2> ; <var:D> := <var:D> + <var:y1> ; <var:D> := <var:D> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:F> = <var:l> }} <def:poly> {{ <var:D> = <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:4> * <var:l> /\ <var:y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:4> * <var:l> /\ <var:y2> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:4> * <var:l> /\ <var:y2> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:4> * <var:l> /\ <var:D> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:y0> = <nat:1> /\ <var:D> = <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:D> = <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 