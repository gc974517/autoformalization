\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:Q> := <nat:1> ; <var:Q> := <nat:3> + <var:Q> * <var:T> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <var:Q> * <var:T> ; <var:Q> := <nat:3> + <var:Q> * <var:T> ; <var:Q> := <var:Q> * <var:T> ; <var:Q> := <var:Q> * <var:T> ; <var:Q> := <nat:3> + <var:Q> * <var:T> \end{verbatim} Assume it to hold that $ <var:T> = <var:C> $ for every natural coefficients $ <var:C> $ before executing this code segment it holds that we see $ <var:Q> = <nat:1> \cdot <var:C> ^ <nat:8> + <nat:3> \cdot <var:C> ^ <nat:7> + <nat:2> \cdot <var:C> ^ <nat:6> + <nat:2> \cdot <var:C> ^ <nat:5> + <nat:3> \cdot <var:C> ^ <nat:3> + <nat:3> $ after list of commands has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:T> = <var:C> \} \\ <var:Q> := <nat:1> ; \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \} \\ <var:Q> := <nat:3> + <var:Q> * <var:T> ; \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \times <var:C> + <nat:3> \} \\ <var:Q> := <nat:2> + <var:Q> * <var:T> ; \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:2> \} \\ <var:Q> := <nat:2> + <var:Q> * <var:T> ; \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:2> \} \\ <var:Q> := <var:Q> * <var:T> ; \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + \} \\ <var:Q> := <nat:3> + <var:Q> * <var:T> ; \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:3> \} \\ <var:Q> := <var:Q> * <var:T> ; \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> + \} \\ <var:Q> := <var:Q> * <var:T> ; \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:2> + \} \\ <var:Q> := <nat:3> + <var:Q> * <var:T> \\ \{ <var:T> = <var:C> \land <var:Q> = <nat:1> \times <var:C> ^ <nat:8> + <nat:3> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:3> + <nat:3> \} \end{eqnarray} Hence , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:T> = <var:C> }} <var:Q> := <nat:1> ; <var:Q> := <nat:3> + <var:Q> * <var:T> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <var:Q> * <var:T> ; <var:Q> := <nat:3> + <var:Q> * <var:T> ; <var:Q> := <var:Q> * <var:T> ; <var:Q> := <var:Q> * <var:T> ; <var:Q> := <nat:3> + <var:Q> * <var:T> {{ <var:Q> = <nat:1> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:2> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:3> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:Q> = <nat:1> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:2> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 