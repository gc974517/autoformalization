\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:j0> := <nat:3> ; <var:b> := <var:j0> \end{verbatim} Allow it to be that $ <var:P> = <var:x> $ prior to evaluating this segment of code it must be that $ <var:b> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is clear through the following decorated set of commands . \begin{eqnarray} \{ <var:P> = <var:x> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:P> = <var:x> \land <var:j0> = <nat:3> \} \end{eqnarray} Allowing interpreting the series of instructions results in : \begin{eqnarray} <var:b> := <var:j0> \\ \{ <var:P> = <var:x> \land <var:b> = <nat:3> \} \end{eqnarray} The application of typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:P> = <var:x> }} <var:j0> := <nat:3> ; <var:b> := <var:j0> {{ <var:b> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:b> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 