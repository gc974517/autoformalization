\begin{document} \begin{theorem} Define the following program as \begin{verbatim} <var:y1> := <var:W> ; <var:y2> := <var:y1> * <var:W> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:9> ; <var:g> := <var:y2> <var:g> := <var:g> + <var:y1> <var:g> := <var:g> + <var:y0> \end{verbatim} Assuming it to be that $ <var:W> = <var:L> $ ( given any whole numbers $ <var:L> $ ) ahead of interpreting this program it holds that $ <var:g> = <nat:9> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:9> $ . \end{theorem} \begin{proof} The argument for the list of commands can be given by Hoare logic . Going to the next step , the environment update statement \verb | <var:y1> := <var:W> ; | . This forwards the condition $ \{ <var:W> = <var:L> \} $ toward the condition $ \{ <var:W> = <var:L> \land <var:y1> = <var:L> \} $ . This is known to be sound through the assignment rule of typical Hoare logic . Following , the variable update command \verb | <var:y2> := <var:y1> * <var:W> ; | . This redefines the condition $ \{ <var:W> = <var:L> \land <var:y1> = <var:L> \} $ toward the condition $ \{ <var:W> = <var:L> \land <var:y1> = <var:L> \land <var:y2> = <var:L> ^ <nat:2> \} $ . Immediately after , the binding command \verb | <var:y0> := <nat:9> ; | . This line takes the precondition $ \{ <var:W> = <var:L> \land <var:y1> = <var:L> \land <var:y2> = <var:L> ^ <nat:2> \} $ into the postcondition $ \{ <var:W> = <var:L> \land <var:y1> = <var:L> \land <var:y2> = <var:L> ^ <nat:2> \land <var:y0> = <nat:9> \} $ . Stepping through , we have the variable assignmet statement \verb | <var:y1> := <var:y1> * <nat:4> ; | . This moves $ \{ <var:W> = <var:L> \land <var:y1> = <var:L> \land <var:y2> = <var:L> ^ <nat:2> \land <var:y0> = <nat:9> \} $ toward $ \{ <var:W> = <var:L> \land <var:y1> = <nat:4> \cdot <var:L> \land <var:y2> = <var:L> ^ <nat:2> \land <var:y0> = <nat:9> \} $ . This is sound through the assignment inference rule of Hoare reasoning . Shifting focus toward the subsequent piece of code in our code , we have the environment update line \verb | <var:y2> := <var:y2> * <nat:9> ; | . This moves the condition $ \{ <var:W> = <var:L> \land <var:y1> = <nat:4> \cdot <var:L> \land <var:y2> = <var:L> ^ <nat:2> \land <var:y0> = <nat:9> \} $ as the condition $ \{ <var:W> = <var:L> \land <var:y1> = <nat:4> \cdot <var:L> \land <var:y2> = <nat:9> \cdot <var:L> ^ <nat:2> \land <var:y0> = <nat:9> \} $ . This is rigorously given using the assignment law obtained from typical Hoare techniques . Moving forward to the subsequent step found in our list of commands , we have the variable assignmet command binding $ <var:y2$ to $ <var:g>$ . This statement redefines the condition $ \{ <var:W> = <var:L> \land <var:y1> = <nat:4> \cdot <var:L> \land <var:y2> = <nat:9> \cdot <var:L> ^ <nat:2> \land <var:y0> = <nat:9> \} $ to the postcondition $ \{ <var:W> = <var:L> \land <var:y1> = <nat:4> \cdot <var:L> \land <var:y0> = <nat:9> \land <var:g> = <nat:9> \cdot <var:L> ^ <nat:2> \} $ . Shifting focus toward the upcoming statement seen in the code segment , the line \verb | <var:g> := <var:g> + <var:y1> | . This transfers the precondition $ \{ <var:W> = <var:L> \land <var:y1> = <nat:4> \cdot <var:L> \land <var:y0> = <nat:9> \land <var:g> = <nat:9> \cdot <var:L> ^ <nat:2> \} $ toward $ \{ <var:W> = <var:L> \land <var:y0> = <nat:9> \land <var:g> = <nat:9> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> \} $ . This is rigorously given by the assignment scheme defined by typical Hoare reasoning . Moving forward to the subsequent statement in the segment of code , we see the variable update line \verb | <var:g> := <var:g> + <var:y0> | . This advances the condition $ \{ <var:W> = <var:L> \land <var:y0> = <nat:9> \land <var:g> = <nat:9> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> \} $ to $ \{ <var:W> = <var:L> \land <var:g> = <nat:9> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:9> \} $ . This is shown to be logically sound through the assignment law from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:W> = <var:L> }} <var:y1> := <var:W> ; <var:y2> := <var:y1> * <var:W> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:9> ; <var:g> := <var:y2> <var:g> := <var:g> + <var:y1> <var:g> := <var:g> + <var:y0> {{ <var:g> = <nat:9> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:L> /\ <var:y1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:L> /\ <var:y1> = <var:L> /\ <var:y2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:L> /\ <var:y1> = <var:L> /\ <var:y2> = <var:L> ^ <nat:2> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:L> /\ <var:y1> = <nat:4> * <var:L> /\ <var:y2> = <var:L> ^ <nat:2> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:L> /\ <var:y1> = <nat:4> * <var:L> /\ <var:y2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:L> /\ <var:y1> = <nat:4> * <var:L> /\ <var:y0> = <nat:9> /\ <var:g> = <nat:9> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:L> /\ <var:y0> = <nat:9> /\ <var:g> = <nat:9> * <var:L> ^ <nat:2> + <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:L> /\ <var:g> = <nat:9> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 