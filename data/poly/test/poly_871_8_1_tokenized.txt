\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:m> ; <var:Q2> := <var:Q1> * <var:m> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:H> := <var:Q2> <var:H> := <var:H> + <var:Q1> <var:H> := <var:H> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume given all positive coefficients $ <var:f> $ it to hold that $ <var:m> = <var:f> $ ahead of evaluating the set of instructions , it follows that we have $ <var:H> = <nat:5> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> $ after segment of code is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be seen with typical Hoare techniques . Moving forward to the next pieces of code seen in the code , we see \begin{eqnarray} \{ <var:m> = <var:f> \} \, <var:Q1> := <var:m> \, \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \} \\ \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \} \, <var:Q2> := <var:Q1> * <var:m> \, \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \} \end{eqnarray} Looking at the following lines in the set of instructions , \begin{eqnarray} \{ <var:m> = <var:f> \} \, <var:Q1> := <var:m> \, \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \} \\ \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \} \, <var:Q2> := <var:Q1> * <var:m> \, \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \} \\ \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \} \, <var:Q0> := <nat:3> \, \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q0> = <nat:3> \} \\ \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q0> = <nat:3> \} \, <var:Q1> := <var:Q1> * <nat:1> \, \{ <var:m> = <var:f> \land <var:Q1> = <nat:1> \times <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q0> = <nat:3> \} \end{eqnarray} Jumping to the following line of code seen in the list of commands , we see \begin{eqnarray} \{ <var:m> = <var:f> \} \, <var:Q1> := <var:m> \, \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \} \end{eqnarray} Immediately after , we see \begin{eqnarray} \{ <var:m> = <var:f> \} \, <var:Q1> := <var:m> \, \{ <var:m> = <var:f> \land <var:Q1> = <var:f> \} \end{eqnarray} This is deduced through the environment update rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q1> := <var:m> ; <var:Q2> := <var:Q1> * <var:m> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:H> := <var:Q2> <var:H> := <var:H> + <var:Q1> <var:H> := <var:H> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:m> = <var:f> }} <def:poly> {{ <var:H> = <nat:5> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:Q1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:Q1> = <var:f> /\ <var:Q2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:Q1> = <var:f> /\ <var:Q2> = <var:f> ^ <nat:2> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:Q1> = <nat:1> * <var:f> /\ <var:Q2> = <var:f> ^ <nat:2> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:Q1> = <nat:1> * <var:f> /\ <var:Q2> = <nat:5> * <var:f> ^ <nat:2> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:Q1> = <nat:1> * <var:f> /\ <var:Q0> = <nat:3> /\ <var:H> = <nat:5> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:Q0> = <nat:3> /\ <var:H> = <nat:5> * <var:f> ^ <nat:2> + <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:H> = <nat:5> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 