\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:y> ; <var:f2> := <var:f1> * <var:y> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:4> ; <var:f2> := <var:f2> * <nat:5> ; <var:P> := <var:f2> <var:P> := <var:P> + <var:f1> <var:P> := <var:P> + <var:f0> \end{verbatim} Allow --- given any positive coefficients $ <var:X> $ --- it to hold that $ <var:y> = <var:X> $ before running our program it must be that we have $ <var:P> = <nat:5> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> $ once series of instructions has exited . \end{theorem} \begin{proof} The method of proof for our list of instructions can be seen with Hoare techniques . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:X> \} & <var:f1> := <var:y> & \{ <var:y> = <var:X> \land <var:f1> = <var:X> \} \\ \{ <var:y> = <var:X> \land <var:f1> = <var:X> \} & <var:f2> := <var:f1> * <var:y> & \{ <var:y> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \} \end{tabular} This is shown to be logically sound using the environment update inference rule in standard Hoare logic . Observing the upcoming steps found in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:X> \} & <var:f1> := <var:y> & \{ <var:y> = <var:X> \land <var:f1> = <var:X> \} \\ \{ <var:y> = <var:X> \land <var:f1> = <var:X> \} & <var:f2> := <var:f1> * <var:y> & \{ <var:y> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \} \end{tabular} Focusing on the next bits of codein our code , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:X> \} & <var:f1> := <var:y> & \{ <var:y> = <var:X> \land <var:f1> = <var:X> \} \\ \{ <var:y> = <var:X> \land <var:f1> = <var:X> \} & <var:f2> := <var:f1> * <var:y> & \{ <var:y> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \} \\ \{ <var:y> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \} & <var:f0> := <nat:4> & \{ <var:y> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \land <var:f0> = <nat:4> \} \\ \{ <var:y> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \land <var:f0> = <nat:4> \} & <var:f1> := <var:f1> * <nat:4> & \{ <var:y> = <var:X> \land <var:f1> = <nat:4> \times <var:X> \land <var:f2> = <var:X> ^ <nat:2> \land <var:f0> = <nat:4> \} \end{tabular} This is known to be sound using the law of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:y> = <var:X> }} <var:f1> := <var:y> ; <var:f2> := <var:f1> * <var:y> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:4> ; <var:f2> := <var:f2> * <nat:5> ; <var:P> := <var:f2> <var:P> := <var:P> + <var:f1> <var:P> := <var:P> + <var:f0> {{ <var:P> = <nat:5> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:f1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:f1> = <var:X> /\ <var:f2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:f1> = <var:X> /\ <var:f2> = <var:X> ^ <nat:2> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:f1> = <nat:4> * <var:X> /\ <var:f2> = <var:X> ^ <nat:2> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:f1> = <nat:4> * <var:X> /\ <var:f2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:f1> = <nat:4> * <var:X> /\ <var:f0> = <nat:4> /\ <var:P> = <nat:5> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:f0> = <nat:4> /\ <var:P> = <nat:5> * <var:X> ^ <nat:2> + <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:P> = <nat:5> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 