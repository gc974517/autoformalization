\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <nat:1> + <var:j> * <var:Z> ; <var:j> := <nat:4> + <var:j> * <var:Z> ; <var:j> := <var:j> * <var:Z> ; <var:j> := <nat:2> + <var:j> * <var:Z> ; <var:j> := <nat:3> + <var:j> * <var:Z> ; <var:j> := <nat:1> + <var:j> * <var:Z> ; <var:j> := <nat:2> + <var:j> * <var:Z> ; <var:j> := <nat:3> + <var:j> * <var:Z> ; <var:j> := <nat:3> + <var:j> * <var:Z> ; <var:j> := <nat:4> + <var:j> * <var:Z> ; <var:j> := <nat:1> + <var:j> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Assume it to be that $ <var:Z> = <var:Q> $ prior to interpreting our code then we see $ <var:j> = <nat:3> \times <var:Q> ^ <nat:11> + <nat:1> \times <var:Q> ^ <nat:10> + <nat:4> \times <var:Q> ^ <nat:9> + <nat:2> \times <var:Q> ^ <nat:7> + <nat:3> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:2> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:1> $ when series of commands has finished executing . \end{theorem} \begin{proof} Applying Hoare reasoning produces : \begin{eqnarray} \{ <var:Z> = <var:Q> \} \\ <var:j> := <nat:3> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> \} \\ <var:j> := <nat:1> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> + <nat:1> \} \\ <var:j> := <nat:4> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> \} \\ <var:j> := <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + \} \\ <var:j> := <nat:2> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> \} \\ <var:j> := <nat:3> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:3> \} \\ <var:j> := <nat:1> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> \} \\ <var:j> := <nat:2> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> \} \\ <var:j> := <nat:3> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> \} \\ <var:j> := <nat:3> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> \} \\ <var:j> := <nat:4> + <var:j> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> \} \\ <var:j> := <nat:1> + <var:j> * <var:Z> \\ \{ <var:Z> = <var:Q> \land <var:j> = <nat:3> * <var:Q> ^ <nat:11> + <nat:1> * <var:Q> ^ <nat:10> + <nat:4> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> \} \end{eqnarray} Thusly , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:3> ; <var:j> := <nat:1> + <var:j> * <var:Z> ; <var:j> := <nat:4> + <var:j> * <var:Z> ; <var:j> := <var:j> * <var:Z> ; <var:j> := <nat:2> + <var:j> * <var:Z> ; <var:j> := <nat:3> + <var:j> * <var:Z> ; <var:j> := <nat:1> + <var:j> * <var:Z> ; <var:j> := <nat:2> + <var:j> * <var:Z> ; <var:j> := <nat:3> + <var:j> * <var:Z> ; <var:j> := <nat:3> + <var:j> * <var:Z> ; <var:j> := <nat:4> + <var:j> * <var:Z> ; <var:j> := <nat:1> + <var:j> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Z> = <var:Q> }} <def:poly> {{ <var:j> = <nat:3> * <var:Q> ^ <nat:11> + <nat:1> * <var:Q> ^ <nat:10> + <nat:4> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:j> = <nat:3> * <var:Q> ^ <nat:11> + <nat:1> * <var:Q> ^ <nat:10> + <nat:4> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 