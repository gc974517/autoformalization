\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:B> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:K> := <var:Z1> <var:K> := <var:K> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:B> = <var:S> $ before interpreting the set of instructions , it must be that we see $ <var:K> = <nat:2> \times <var:S> + <nat:3> $ . \end{theorem} \begin{proof} Observe the following decorated program . \begin{eqnarray} \{ <var:B> = <var:S> \} \\ <var:Z1> := <var:B> ; \\ \{ <var:B> = <var:S> \land <var:Z1> = <var:S> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:B> = <var:S> \land <var:Z1> = <var:S> \land <var:Z0> = <nat:3> \} \\ <var:Z1> := <var:Z1> * <nat:2> ; \\ \{ <var:B> = <var:S> \land <var:Z1> = <nat:2> \cdot <var:S> \land <var:Z0> = <nat:3> \} \\ <var:K> := <var:Z1> \\ \{ <var:B> = <var:S> \land <var:Z0> = <nat:3> \land <var:K> = <nat:2> \cdot <var:S> \} \\ <var:K> := <var:K> + <var:Z0> \\ \{ <var:B> = <var:S> \land <var:K> = <nat:2> \cdot <var:S> + <nat:3> \} \end{eqnarray} The application of Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:B> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:K> := <var:Z1> <var:K> := <var:K> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:B> = <var:S> }} <def:poly> {{ <var:K> = <nat:2> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:Z1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:Z1> = <var:S> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:Z1> = <nat:2> * <var:S> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:Z0> = <nat:3> /\ <var:K> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:K> = <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 