\begin{document} \begin{theorem} Let the following list of commands : \begin{verbatim} <var:A0> := <nat:7> ; <var:v> := <var:A0> \end{verbatim} Allow that $ <var:U> = <var:b> $ --- assuming some positive coefficients $ <var:b> $ --- before executing our series of commands , then we see $ <var:v> = <nat:7> $ when code segment terminates . \end{theorem} \begin{proof} Proving correctness for our segment of code can be accomplished with standard Hoare reasoning . Moving forward to the next step , the binding statement binding $ <nat:7> $ toward $ <var:A0>$ . This takes the precondition $ \{ <var:U> = <var:b> \} $ into $ \{ <var:U> = <var:b> \land <var:A0> = <nat:7> \} $ . Advancing to the next step , we have the variable binding line giving $ <var:A0$ into $ <var:v>$ . This transfers the precondition $ \{ <var:U> = <var:b> \land <var:A0> = <nat:7> \} $ toward the condition $ \{ <var:U> = <var:b> \land <var:v> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:U> = <var:b> }} <var:A0> := <nat:7> ; <var:v> := <var:A0> {{ <var:v> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:v> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 