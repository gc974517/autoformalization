\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:o1> := <var:m> ; <var:o2> := <var:o1> * <var:m> ; <var:o3> := <var:o2> * <var:m> ; <var:o0> := <nat:3> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:6> ; <var:o3> := <var:o3> * <nat:7> ; <var:D> := <var:o3> <var:D> := <var:D> + <var:o2> <var:D> := <var:D> + <var:o1> <var:D> := <var:D> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assume , with some positive numbers $ <var:G> $ , it to be that $ <var:m> = <var:G> $ prior to the evaluation of our program then we see $ <var:D> = <nat:7> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> + <nat:8> \cdot <var:G> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our segment of code can be given through usual Hoare logic . Going forward , we see the environment update line \verb | <var:o1> := <var:m> ; | . This command advances the precondition $ \{ <var:m> = <var:G> \} $ toward $ \{ <var:m> = <var:G> \land <var:o1> = <var:G> \} $ . Moving forward to the subsequent bit of code contained in our series of commands , we have the command assigning $ <var:o1> * <var:m> $ to $ <var:o2>$ . This command takes $ \{ <var:m> = <var:G> \land <var:o1> = <var:G> \} $ toward the condition $ \{ <var:m> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \} $ . This is rigorously given by the assignment inference rule in Hoare reasoning . Taking a look at the next command in the series of commands , the variable update statement binding $ <var:o2> * <var:m> $ to $ <var:o3>$ . This transfers the condition $ \{ <var:m> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \} $ toward the condition $ \{ <var:m> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \} $ . Following , we see the variable binding line \verb | <var:o0> := <nat:3> ; | . This takes the precondition $ \{ <var:m> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \} $ into the condition $ \{ <var:m> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:3> \} $ . This is guaranteed by the assignment rule defined in typical Hoare reasoning . Paying attention to the following bit of code contained in the segment of code , we see the variable update command letting $ <var:o1> * <nat:8> $ to $ <var:o1>$ . This command moves $ \{ <var:m> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:3> \} $ into the postcondition $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:3> \} $ . Focusing on the next piece of code in the list of instructions , we see the code \verb | <var:o2> := <var:o2> * <nat:6> ; | . This redefines $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:3> \} $ into the postcondition $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o2> = <nat:6> \times <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:3> \} $ . Following , the binding line \verb | <var:o3> := <var:o3> * <nat:7> ; | . This transfers the condition $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o2> = <nat:6> \times <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:3> \} $ as the postcondition $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o2> = <nat:6> \times <var:G> ^ <nat:2> \land <var:o3> = <nat:7> \times <var:G> ^ <nat:3> \land <var:o0> = <nat:3> \} $ . Immediately after , the statement letting $ <var:o3$ toward $ <var:D>$ . This moves $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o2> = <nat:6> \times <var:G> ^ <nat:2> \land <var:o3> = <nat:7> \times <var:G> ^ <nat:3> \land <var:o0> = <nat:3> \} $ into the postcondition $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o2> = <nat:6> \times <var:G> ^ <nat:2> \land <var:o0> = <nat:3> \land <var:D> = <nat:7> \times <var:G> ^ <nat:3> \} $ . Advancing on , we have the command \verb | <var:D> := <var:D> + <var:o2> | . This advances $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o2> = <nat:6> \times <var:G> ^ <nat:2> \land <var:o0> = <nat:3> \land <var:D> = <nat:7> \times <var:G> ^ <nat:3> \} $ into the condition $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o0> = <nat:3> \land <var:D> = <nat:7> \times <var:G> ^ <nat:3> + <nat:6> \times <var:G> ^ <nat:2> \} $ . Moving forward to the next step , we see the variable update command \verb | <var:D> := <var:D> + <var:o1> | . This statement forwards the condition $ \{ <var:m> = <var:G> \land <var:o1> = <nat:8> \times <var:G> \land <var:o0> = <nat:3> \land <var:D> = <nat:7> \times <var:G> ^ <nat:3> + <nat:6> \times <var:G> ^ <nat:2> \} $ as the postcondition $ \{ <var:m> = <var:G> \land <var:o0> = <nat:3> \land <var:D> = <nat:7> \times <var:G> ^ <nat:3> + <nat:6> \times <var:G> ^ <nat:2> + <nat:8> \times <var:G> \} $ . This is given through the assignment law from standard Hoare logic . Stepping through , we have the variable assignmet code defining $ <var:D> + <var:o0$ into $ <var:D>$ . This command moves the precondition $ \{ <var:m> = <var:G> \land <var:o0> = <nat:3> \land <var:D> = <nat:7> \times <var:G> ^ <nat:3> + <nat:6> \times <var:G> ^ <nat:2> + <nat:8> \times <var:G> \} $ to $ \{ <var:m> = <var:G> \land <var:D> = <nat:7> \times <var:G> ^ <nat:3> + <nat:6> \times <var:G> ^ <nat:2> + <nat:8> \times <var:G> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:m> ; <var:o2> := <var:o1> * <var:m> ; <var:o3> := <var:o2> * <var:m> ; <var:o0> := <nat:3> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:6> ; <var:o3> := <var:o3> * <nat:7> ; <var:D> := <var:o3> <var:D> := <var:D> + <var:o2> <var:D> := <var:D> + <var:o1> <var:D> := <var:D> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:m> = <var:G> }} <def:poly> {{ <var:D> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <var:G> /\ <var:o2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <var:G> /\ <var:o2> = <var:G> ^ <nat:2> /\ <var:o3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <var:G> /\ <var:o2> = <var:G> ^ <nat:2> /\ <var:o3> = <var:G> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <nat:8> * <var:G> /\ <var:o2> = <var:G> ^ <nat:2> /\ <var:o3> = <var:G> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <nat:8> * <var:G> /\ <var:o2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:o3> = <var:G> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <nat:8> * <var:G> /\ <var:o2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:o3> = <nat:7> * <var:G> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <nat:8> * <var:G> /\ <var:o2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:o0> = <nat:3> /\ <var:D> = <nat:7> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o1> = <nat:8> * <var:G> /\ <var:o0> = <nat:3> /\ <var:D> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:o0> = <nat:3> /\ <var:D> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:G> /\ <var:D> = <nat:7> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 