\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m> := <nat:2> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <var:m> * <var:R> ; <var:m> := <nat:1> + <var:m> * <var:R> ; <var:m> := <nat:3> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <var:m> * <var:R> ; <var:m> := <nat:3> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Assume that $ <var:R> = <var:q> $ --- for all positive integer coefficients $ <var:q> $ --- ahead of running the code it holds that $ <var:m> = <nat:2> * <var:q> ^ <nat:12> + <nat:2> * <var:q> ^ <nat:11> + <nat:1> * <var:q> ^ <nat:9> + <nat:3> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> $ after list of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:q> \} \\ <var:m> := <nat:2> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> + <nat:2> \} \\ <var:m> := <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + \} \\ <var:m> := <nat:1> + <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> ^ <nat:2> + <nat:1> \} \\ <var:m> := <nat:3> + <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:4> + <nat:2> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> + <nat:3> \} \\ <var:m> := <nat:2> + <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:5> + <nat:2> \times <var:q> ^ <nat:4> + <nat:1> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:2> \} \\ <var:m> := <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:6> + <nat:2> \times <var:q> ^ <nat:5> + <nat:1> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + \} \\ <var:m> := <nat:2> + <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:7> + <nat:2> \times <var:q> ^ <nat:6> + <nat:1> \times <var:q> ^ <nat:4> + <nat:3> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> ^ <nat:2> + <nat:2> \} \\ <var:m> := <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:8> + <nat:2> \times <var:q> ^ <nat:7> + <nat:1> \times <var:q> ^ <nat:5> + <nat:3> \times <var:q> ^ <nat:4> + <nat:2> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> + \} \\ <var:m> := <nat:3> + <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:9> + <nat:2> \times <var:q> ^ <nat:8> + <nat:1> \times <var:q> ^ <nat:6> + <nat:3> \times <var:q> ^ <nat:5> + <nat:2> \times <var:q> ^ <nat:4> + <nat:2> \times <var:q> ^ <nat:2> + <nat:3> \} \\ <var:m> := <nat:2> + <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:10> + <nat:2> \times <var:q> ^ <nat:9> + <nat:1> \times <var:q> ^ <nat:7> + <nat:3> \times <var:q> ^ <nat:6> + <nat:2> \times <var:q> ^ <nat:5> + <nat:2> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> + <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:11> + <nat:2> \times <var:q> ^ <nat:10> + <nat:1> \times <var:q> ^ <nat:8> + <nat:3> \times <var:q> ^ <nat:7> + <nat:2> \times <var:q> ^ <nat:6> + <nat:2> \times <var:q> ^ <nat:4> + <nat:3> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:R> \\ \{ <var:R> = <var:q> \land <var:m> = <nat:2> \times <var:q> ^ <nat:12> + <nat:2> \times <var:q> ^ <nat:11> + <nat:1> \times <var:q> ^ <nat:9> + <nat:3> \times <var:q> ^ <nat:8> + <nat:2> \times <var:q> ^ <nat:7> + <nat:2> \times <var:q> ^ <nat:5> + <nat:3> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:2> \} \end{eqnarray} Applying Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:2> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <var:m> * <var:R> ; <var:m> := <nat:1> + <var:m> * <var:R> ; <var:m> := <nat:3> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <var:m> * <var:R> ; <var:m> := <nat:3> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:R> = <var:q> }} <def:poly> {{ <var:m> = <nat:2> * <var:q> ^ <nat:12> + <nat:2> * <var:q> ^ <nat:11> + <nat:1> * <var:q> ^ <nat:9> + <nat:3> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:1> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:11> + <nat:2> * <var:q> ^ <nat:10> + <nat:1> * <var:q> ^ <nat:8> + <nat:3> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:m> = <nat:2> * <var:q> ^ <nat:12> + <nat:2> * <var:q> ^ <nat:11> + <nat:1> * <var:q> ^ <nat:9> + <nat:3> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 