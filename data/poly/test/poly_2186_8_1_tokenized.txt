\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:P> ; <var:U2> := <var:U1> * <var:P> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:8> ; <var:n> := <var:U2> <var:n> := <var:n> + <var:U1> <var:n> := <var:n> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Given , given any $ <var:s> \in \mathbb{N} $ , it to hold that $ <var:P> = <var:s> $ ahead of evaluating this code then we have $ <var:n> = <nat:8> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:3> $ once segment of code terminates . \end{theorem} \begin{proof} Proving correctness for our program can be demonstrated using standard Hoare reasoning . Stepping forward , we see the variable assignmet code defining $ <var:P> $ into $ <var:U1>$ . This command moves $ \{ <var:P> = <var:s> \} $ as the postcondition $ \{ <var:P> = <var:s> \land <var:U1> = <var:s> \} $ . This is rigorously given through the assignment law defined in Hoare reasoning . Looking at the proceeding step in the set of instructions , the variable assignmet code giving $ <var:U1> * <var:P> $ toward $ <var:U2>$ . This moves $ \{ <var:P> = <var:s> \land <var:U1> = <var:s> \} $ into the condition $ \{ <var:P> = <var:s> \land <var:U1> = <var:s> \land <var:U2> = <var:s> ^ <nat:2> \} $ . This is rigorously given through the assignment rule obtained from Hoare reasoning . Further , we have the binding statement yielding $ <nat:3> $ toward $ <var:U0>$ . This moves $ \{ <var:P> = <var:s> \land <var:U1> = <var:s> \land <var:U2> = <var:s> ^ <nat:2> \} $ toward $ \{ <var:P> = <var:s> \land <var:U1> = <var:s> \land <var:U2> = <var:s> ^ <nat:2> \land <var:U0> = <nat:3> \} $ . After , we have the command letting $ <var:U1> * <nat:4> $ as $ <var:U1>$ . This advances $ \{ <var:P> = <var:s> \land <var:U1> = <var:s> \land <var:U2> = <var:s> ^ <nat:2> \land <var:U0> = <nat:3> \} $ into the postcondition $ \{ <var:P> = <var:s> \land <var:U1> = <nat:4> * <var:s> \land <var:U2> = <var:s> ^ <nat:2> \land <var:U0> = <nat:3> \} $ . Advancing to the next step , the assignment command \verb | <var:U2> := <var:U2> * <nat:8> ; | . This line forwards $ \{ <var:P> = <var:s> \land <var:U1> = <nat:4> * <var:s> \land <var:U2> = <var:s> ^ <nat:2> \land <var:U0> = <nat:3> \} $ to the postcondition $ \{ <var:P> = <var:s> \land <var:U1> = <nat:4> * <var:s> \land <var:U2> = <nat:8> * <var:s> ^ <nat:2> \land <var:U0> = <nat:3> \} $ . This is shown to be logically sound with the assignment inference rule found in typical Hoare logic . Jumping to the subsequent command seen in our set of commands , the variable update line \verb | <var:n> := <var:U2> | . This takes the precondition $ \{ <var:P> = <var:s> \land <var:U1> = <nat:4> * <var:s> \land <var:U2> = <nat:8> * <var:s> ^ <nat:2> \land <var:U0> = <nat:3> \} $ toward the postcondition $ \{ <var:P> = <var:s> \land <var:U1> = <nat:4> * <var:s> \land <var:U0> = <nat:3> \land <var:n> = <nat:8> * <var:s> ^ <nat:2> \} $ . Moving onward , we see the binding statement letting $ <var:n> + <var:U1$ into $ <var:n>$ . This code redefines $ \{ <var:P> = <var:s> \land <var:U1> = <nat:4> * <var:s> \land <var:U0> = <nat:3> \land <var:n> = <nat:8> * <var:s> ^ <nat:2> \} $ as $ \{ <var:P> = <var:s> \land <var:U0> = <nat:3> \land <var:n> = <nat:8> * <var:s> ^ <nat:2> + <nat:4> * <var:s> \} $ . Focusing on the upcoming statement in the program , the variable update code \verb | <var:n> := <var:n> + <var:U0> | . This takes the condition $ \{ <var:P> = <var:s> \land <var:U0> = <nat:3> \land <var:n> = <nat:8> * <var:s> ^ <nat:2> + <nat:4> * <var:s> \} $ as the postcondition $ \{ <var:P> = <var:s> \land <var:n> = <nat:8> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U1> := <var:P> ; <var:U2> := <var:U1> * <var:P> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:8> ; <var:n> := <var:U2> <var:n> := <var:n> + <var:U1> <var:n> := <var:n> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:P> = <var:s> }} <def:poly> {{ <var:n> = <nat:8> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:U1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:U1> = <var:s> /\ <var:U2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:U1> = <var:s> /\ <var:U2> = <var:s> ^ <nat:2> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:U1> = <nat:4> * <var:s> /\ <var:U2> = <var:s> ^ <nat:2> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:U1> = <nat:4> * <var:s> /\ <var:U2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:U1> = <nat:4> * <var:s> /\ <var:U0> = <nat:3> /\ <var:n> = <nat:8> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:U0> = <nat:3> /\ <var:n> = <nat:8> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n> = <nat:8> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 