\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:l0> := <nat:1> ; <var:l2> := <nat:3> ; <var:l2> := <var:l2> * <var:P> ; <var:l2> := <var:l2> * <var:P> ; <var:l3> := <nat:1> ; <var:l3> := <var:l3> * <var:P> ; <var:l3> := <var:l3> * <var:P> ; <var:l3> := <var:l3> * <var:P> ; <var:T> := <var:l3> ; <var:T> := <var:T> + <var:l2> ; <var:T> := <var:T> + <var:l0> \end{verbatim} Allow that we have $ <var:P> = <var:o> $ ahead of evaluating our set of instructions it follows that $ <var:T> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives us : \begin{eqnarray} \{ <var:P> = <var:o> \} \\ <var:l0> := <nat:1> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \} \\ <var:l2> := <nat:3> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:l2> = <nat:3> \} \\ <var:l2> := <var:l2> * <var:P> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:l2> = <nat:3> \cdot <var:o> \} \\ <var:l2> := <var:l2> * <var:P> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:l2> = <nat:3> \cdot <var:o> ^ <nat:2> \} \\ <var:l3> := <nat:1> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:l2> = <nat:3> \cdot <var:o> ^ <nat:2> \land <var:l3> = <nat:1> \} \\ <var:l3> := <var:l3> * <var:P> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:l2> = <nat:3> \cdot <var:o> ^ <nat:2> \land <var:l3> = <nat:1> \cdot <var:o> \} \\ <var:l3> := <var:l3> * <var:P> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:l2> = <nat:3> \cdot <var:o> ^ <nat:2> \land <var:l3> = <nat:1> \cdot <var:o> ^ <nat:2> \} \\ <var:l3> := <var:l3> * <var:P> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:l2> = <nat:3> \cdot <var:o> ^ <nat:2> \land <var:l3> = <nat:1> \cdot <var:o> ^ <nat:3> \} \\ <var:T> := <var:l3> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:l2> = <nat:3> \cdot <var:o> ^ <nat:2> \land <var:T> = <nat:1> \cdot <var:o> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:l2> ; \\ \{ <var:P> = <var:o> \land <var:l0> = <nat:1> \land <var:T> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:l0> \\ \{ <var:P> = <var:o> \land <var:T> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:1> \} \end{eqnarray} Thus , the series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:P> = <var:o> }} <var:l0> := <nat:1> ; <var:l2> := <nat:3> ; <var:l2> := <var:l2> * <var:P> ; <var:l2> := <var:l2> * <var:P> ; <var:l3> := <nat:1> ; <var:l3> := <var:l3> * <var:P> ; <var:l3> := <var:l3> * <var:P> ; <var:l3> := <var:l3> * <var:P> ; <var:T> := <var:l3> ; <var:T> := <var:T> + <var:l2> ; <var:T> := <var:T> + <var:l0> {{ <var:T> = <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:l3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:T> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:l0> = <nat:1> /\ <var:T> = <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:T> = <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 