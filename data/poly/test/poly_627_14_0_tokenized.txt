\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:4> ; <var:S1> := <var:S1> * <var:h> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:h> ; <var:S2> := <var:S2> * <var:h> ; <var:S3> := <nat:5> ; <var:S3> := <var:S3> * <var:h> ; <var:S3> := <var:S3> * <var:h> ; <var:S3> := <var:S3> * <var:h> ; <var:i> := <var:S3> ; <var:i> := <var:i> + <var:S2> ; <var:i> := <var:i> + <var:S1> ; <var:i> := <var:i> + <var:S0> \end{verbatim} Allow $ <var:h> = <var:c> $ before evaluating our list of instructions , it must be that $ <var:i> = <nat:5> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:9> $ . \end{theorem} \begin{proof} Observe the following decorated series of commands . \begin{eqnarray} \{ <var:h> = <var:c> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \} \\ <var:S1> := <nat:4> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \} \\ <var:S1> := <var:S1> * <var:h> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \} \\ <var:S2> := <nat:3> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:S2> = <nat:3> \} \\ <var:S2> := <var:S2> * <var:h> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:S2> = <nat:3> \cdot <var:c> \} \\ <var:S2> := <var:S2> * <var:h> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:S2> = <nat:3> \cdot <var:c> ^ <nat:2> \} \\ <var:S3> := <nat:5> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:S2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:S3> = <nat:5> \} \\ <var:S3> := <var:S3> * <var:h> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:S2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:S3> = <nat:5> \cdot <var:c> \} \\ <var:S3> := <var:S3> * <var:h> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:S2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:S3> = <nat:5> \cdot <var:c> ^ <nat:2> \} \\ <var:S3> := <var:S3> * <var:h> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:S2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:S3> = <nat:5> \cdot <var:c> ^ <nat:3> \} \\ <var:i> := <var:S3> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:S2> = <nat:3> \cdot <var:c> ^ <nat:2> \land <var:i> = <nat:5> \cdot <var:c> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:S2> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:S1> = <nat:4> \cdot <var:c> \land <var:i> = <nat:5> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:S1> ; \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:9> \land <var:i> = <nat:5> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> \} \\ <var:i> := <var:i> + <var:S0> \\ \{ <var:h> = <var:c> \land <var:i> = <nat:5> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:h> = <var:c> }} <var:S0> := <nat:9> ; <var:S1> := <nat:4> ; <var:S1> := <var:S1> * <var:h> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:h> ; <var:S2> := <var:S2> * <var:h> ; <var:S3> := <nat:5> ; <var:S3> := <var:S3> * <var:h> ; <var:S3> := <var:S3> * <var:h> ; <var:S3> := <var:S3> * <var:h> ; <var:i> := <var:S3> ; <var:i> := <var:i> + <var:S2> ; <var:i> := <var:i> + <var:S1> ; <var:i> := <var:i> + <var:S0> {{ <var:i> = <nat:5> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:S2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:S2> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:S2> = <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:S2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:S3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:S2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:S3> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:S2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:S3> = <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:S2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:S3> = <nat:5> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:S2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:i> = <nat:5> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:4> * <var:c> /\ <var:i> = <nat:5> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:9> /\ <var:i> = <nat:5> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:i> = <nat:5> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 