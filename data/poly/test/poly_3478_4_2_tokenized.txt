\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u> := <nat:3> ; <var:u> := <nat:2> + <var:u> * <var:y> ; <var:u> := <nat:4> + <var:u> * <var:y> ; <var:u> := <nat:3> + <var:u> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Assume given all positive integers $ <var:p> $ it to hold that $ <var:y> = <var:p> $ prior to running our set of instructions it must be that $ <var:u> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:3> $ after set of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:p> \} \\ <var:u> := <nat:3> ; \\ \{ <var:y> = <var:p> \land <var:u> = <nat:3> \} \\ <var:u> := <nat:2> + <var:u> * <var:y> ; \\ \{ <var:y> = <var:p> \land <var:u> = <nat:3> * <var:p> + <nat:2> \} \\ <var:u> := <nat:4> + <var:u> * <var:y> ; \\ \{ <var:y> = <var:p> \land <var:u> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> \} \\ <var:u> := <nat:3> + <var:u> * <var:y> \\ \{ <var:y> = <var:p> \land <var:u> = <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:3> ; <var:u> := <nat:2> + <var:u> * <var:y> ; <var:u> := <nat:4> + <var:u> * <var:y> ; <var:u> := <nat:3> + <var:u> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:y> = <var:p> }} <def:poly> {{ <var:u> = <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:u> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:u> = <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:u> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:u> = <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 