\begin{document} \begin{theorem} Take a code segment : \begin{verbatim} <var:Y1> := <var:M> ; <var:Y2> := <var:Y1> * <var:M> ; <var:Y3> := <var:Y2> * <var:M> ; <var:Y0> := <nat:3> ; <var:Y3> := <var:Y3> * <nat:1> ; <var:c> := <var:Y3> <var:c> := <var:c> + <var:Y0> \end{verbatim} Assuming that $ <var:M> = <var:v> $ ( given every integers $ <var:v> $ ) prior to executing our code segment , then $ <var:c> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> $ after segment of code exits . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands can be demonstrated through standard Hoare techniques . Honing in on the upcoming step in the set of instructions , we see the variable assignmet code letting $ <var:M> $ toward $ <var:Y1>$ . This statement transfers the precondition $ \{ <var:M> = <var:v> \} $ toward $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \} $ . Jumping to the following line found in our code , the variable assignmet command defining $ <var:Y1> * <var:M> $ as $ <var:Y2>$ . This forwards the condition $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \} $ as the condition $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \} $ . Next , we have the code \verb | <var:Y3> := <var:Y2> * <var:M> ; | . This takes $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \} $ to the condition $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <var:v> ^ <nat:3> \} $ . This is rigorously given with the assignment law obtained from usual Hoare logic . Looking at the following command contained in the list of commands , the code \verb | <var:Y0> := <nat:3> ; | . This advances the precondition $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <var:v> ^ <nat:3> \} $ into $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <var:v> ^ <nat:3> \land <var:Y0> = <nat:3> \} $ . Immediately following , we have the variable update command binding $ <var:Y3> * <nat:1> $ as $ <var:Y3>$ . This advances $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <var:v> ^ <nat:3> \land <var:Y0> = <nat:3> \} $ to the condition $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:v> ^ <nat:3> \land <var:Y0> = <nat:3> \} $ . Moving on to the proceeding statement seen in the set of instructions , the variable update statement \verb | <var:c> := <var:Y3> | . This takes the condition $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:v> ^ <nat:3> \land <var:Y0> = <nat:3> \} $ toward $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y0> = <nat:3> \land <var:c> = <nat:1> \times <var:v> ^ <nat:3> \} $ . Advancing to the next step , we have the variable update line \verb | <var:c> := <var:c> + <var:Y0> | . This redefines $ \{ <var:M> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y0> = <nat:3> \land <var:c> = <nat:1> \times <var:v> ^ <nat:3> \} $ to the condition $ \{ <var:M> = <var:v> \land <var:c> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \} $ . This is sound through the assignment law given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:M> = <var:v> }} <var:Y1> := <var:M> ; <var:Y2> := <var:Y1> * <var:M> ; <var:Y3> := <var:Y2> * <var:M> ; <var:Y0> := <nat:3> ; <var:Y3> := <var:Y3> * <nat:1> ; <var:c> := <var:Y3> <var:c> := <var:c> + <var:Y0> {{ <var:c> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:Y1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y3> = <var:v> ^ <nat:3> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y3> = <nat:1> * <var:v> ^ <nat:3> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y0> = <nat:3> /\ <var:c> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:c> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 