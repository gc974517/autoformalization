\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:B> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:B> ; <var:c2> := <var:c2> * <var:B> ; <var:n> := <var:c2> ; <var:n> := <var:n> + <var:c1> ; <var:n> := <var:n> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:B> = <var:g> $ prior to the execution of the set of instructions it must be that we see $ <var:n> = <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:3> $ after series of instructions has executed . \end{theorem} \begin{proof} Observe that this decorated list of commands . \begin{eqnarray} \{ <var:B> = <var:g> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:B> = <var:g> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:4> ; \\ \{ <var:B> = <var:g> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \} \\ <var:c1> := <var:c1> * <var:B> ; \\ \{ <var:B> = <var:g> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \times <var:g> \} \\ <var:c2> := <nat:2> ; \\ \{ <var:B> = <var:g> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \times <var:g> \land <var:c2> = <nat:2> \} \\ <var:c2> := <var:c2> * <var:B> ; \\ \{ <var:B> = <var:g> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \times <var:g> \land <var:c2> = <nat:2> \times <var:g> \} \\ <var:c2> := <var:c2> * <var:B> ; \\ \{ <var:B> = <var:g> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \times <var:g> \land <var:c2> = <nat:2> \times <var:g> ^ <nat:2> \} \\ <var:n> := <var:c2> ; \\ \{ <var:B> = <var:g> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \times <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:c1> ; \\ \{ <var:B> = <var:g> \land <var:c0> = <nat:3> \land <var:n> = <nat:2> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> \} \\ <var:n> := <var:n> + <var:c0> \\ \{ <var:B> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:3> \} \end{eqnarray} Using Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:B> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:B> ; <var:c2> := <var:c2> * <var:B> ; <var:n> := <var:c2> ; <var:n> := <var:n> + <var:c1> ; <var:n> := <var:n> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:B> = <var:g> }} <def:poly> {{ <var:n> = <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:g> /\ <var:c2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:g> /\ <var:c2> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:g> /\ <var:c2> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:c0> = <nat:3> /\ <var:n> = <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 