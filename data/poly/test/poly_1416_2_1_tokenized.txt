\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:z0> := <nat:4> ; <var:K> := <var:z0> \end{verbatim} Given it to be that $ <var:s> = <var:t> $ ahead of executing the set of instructions then we have $ <var:K> = <nat:4> $ after set of instructions has executed . \end{theorem} \begin{proof} The course of logic for this list of commands is clear with typical Hoare logic . After , we have the binding command giving $ <nat:4> $ toward $ <var:z0>$ . This command transfers $ \{ <var:s> = <var:t> \} $ to the postcondition $ \{ <var:s> = <var:t> \land <var:z0> = <nat:4> \} $ . Next , we see the line \verb | <var:K> := <var:z0> | . This transfers the precondition $ \{ <var:s> = <var:t> \land <var:z0> = <nat:4> \} $ into the condition $ \{ <var:s> = <var:t> \land <var:K> = <nat:4> \} $ . This is shown to be logically sound with the assignment scheme obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:s> = <var:t> }} <var:z0> := <nat:4> ; <var:K> := <var:z0> {{ <var:K> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:K> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 