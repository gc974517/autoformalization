\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:m> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:9> ; <var:y> := <var:Z1> <var:y> := <var:y> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume --- for all natural numbers $ <var:x> $ --- that we have $ <var:m> = <var:x> $ before the execution of the series of instructions , then we have $ <var:y> = <nat:9> * <var:x> + <nat:5> $ once set of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of our code segment is shown through standard Hoare reasoning . Further , we have \[ \begin{tabular} {rcl} \{ <var:m> = <var:x> \} & <var:Z1> := <var:m> & \{ <var:m> = <var:x> \land <var:Z1> = <var:x> \} \\ \{ <var:m> = <var:x> \land <var:Z1> = <var:x> \} & <var:Z0> := <nat:5> & \{ <var:m> = <var:x> \land <var:Z1> = <var:x> \land <var:Z0> = <nat:5> \} \\ \{ <var:m> = <var:x> \land <var:Z1> = <var:x> \land <var:Z0> = <nat:5> \} & <var:Z1> := <var:Z1> * <nat:9> & \{ <var:m> = <var:x> \land <var:Z1> = <nat:9> * <var:x> \land <var:Z0> = <nat:5> \} \end{tabular} This is sound with the variable update scheme defined by Hoare logic . Moving forward to the proceeding command in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:x> \} & <var:Z1> := <var:m> & \{ <var:m> = <var:x> \land <var:Z1> = <var:x> \} \end{tabular} This is shown to be logically sound with the scheme given by Hoare techniques . Looking at the next piece of code contained in our code , \[ \begin{tabular} {rcl} \{ <var:m> = <var:x> \} & <var:Z1> := <var:m> & \{ <var:m> = <var:x> \land <var:Z1> = <var:x> \} \end{tabular} This is deduced through the variable binding rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:m> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:9> ; <var:y> := <var:Z1> <var:y> := <var:y> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:m> = <var:x> }} <def:poly> {{ <var:y> = <nat:9> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Z1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Z1> = <var:x> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Z1> = <nat:9> * <var:x> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Z0> = <nat:5> /\ <var:y> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:y> = <nat:9> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 