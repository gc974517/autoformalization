\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:M> ; <var:n2> := <var:n1> * <var:M> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:2> ; <var:p> := <var:n2> <var:p> := <var:p> + <var:n1> <var:p> := <var:p> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:M> = <var:t> $ prior to running this set of instructions , it holds that we have $ <var:p> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:9> $ . \end{theorem} \begin{proof} We can see that the following decorated program . \begin{eqnarray} \{ <var:M> = <var:t> \} \\ <var:n1> := <var:M> ; \\ \{ <var:M> = <var:t> \land <var:n1> = <var:t> \} \\ <var:n2> := <var:n1> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:M> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:n1> := <var:n1> * <nat:3> ; \\ \{ <var:M> = <var:t> \land <var:n1> = <nat:3> \times <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:n2> := <var:n2> * <nat:2> ; \\ \{ <var:M> = <var:t> \land <var:n1> = <nat:3> \times <var:t> \land <var:n2> = <nat:2> \times <var:t> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:p> := <var:n2> \\ \{ <var:M> = <var:t> \land <var:n1> = <nat:3> \times <var:t> \land <var:n0> = <nat:9> \land <var:p> = <nat:2> \times <var:t> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:n1> \\ \{ <var:M> = <var:t> \land <var:n0> = <nat:9> \land <var:p> = <nat:2> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> \} \\ <var:p> := <var:p> + <var:n0> \\ \{ <var:M> = <var:t> \land <var:p> = <nat:2> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:9> \} \end{eqnarray} The application of standard Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n1> := <var:M> ; <var:n2> := <var:n1> * <var:M> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:2> ; <var:p> := <var:n2> <var:p> := <var:p> + <var:n1> <var:p> := <var:p> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:M> = <var:t> }} <def:poly> {{ <var:p> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:n1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:n1> = <nat:3> * <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:n1> = <nat:3> * <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:n1> = <nat:3> * <var:t> /\ <var:n0> = <nat:9> /\ <var:p> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:n0> = <nat:9> /\ <var:p> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:p> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 