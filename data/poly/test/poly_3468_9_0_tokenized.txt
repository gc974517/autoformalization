\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:6> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:U> ; <var:w2> := <nat:6> ; <var:w2> := <var:w2> * <var:U> ; <var:w2> := <var:w2> * <var:U> ; <var:m> := <var:w2> ; <var:m> := <var:m> + <var:w1> ; <var:m> := <var:m> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:U> = <var:S> $ prior to the evaluation of the code segment then we have $ <var:m> = <nat:6> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:U> = <var:S> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:U> = <var:S> \land <var:w0> = <nat:6> \} \\ <var:w1> := <nat:6> ; \\ \{ <var:U> = <var:S> \land <var:w0> = <nat:6> \land <var:w1> = <nat:6> \} \\ <var:w1> := <var:w1> * <var:U> ; \\ \{ <var:U> = <var:S> \land <var:w0> = <nat:6> \land <var:w1> = <nat:6> \cdot <var:S> \} \\ <var:w2> := <nat:6> ; \\ \{ <var:U> = <var:S> \land <var:w0> = <nat:6> \land <var:w1> = <nat:6> \cdot <var:S> \land <var:w2> = <nat:6> \} \\ <var:w2> := <var:w2> * <var:U> ; \\ \{ <var:U> = <var:S> \land <var:w0> = <nat:6> \land <var:w1> = <nat:6> \cdot <var:S> \land <var:w2> = <nat:6> \cdot <var:S> \} \\ <var:w2> := <var:w2> * <var:U> ; \\ \{ <var:U> = <var:S> \land <var:w0> = <nat:6> \land <var:w1> = <nat:6> \cdot <var:S> \land <var:w2> = <nat:6> \cdot <var:S> ^ <nat:2> \} \\ <var:m> := <var:w2> ; \\ \{ <var:U> = <var:S> \land <var:w0> = <nat:6> \land <var:w1> = <nat:6> \cdot <var:S> \land <var:m> = <nat:6> \cdot <var:S> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:w1> ; \\ \{ <var:U> = <var:S> \land <var:w0> = <nat:6> \land <var:m> = <nat:6> \cdot <var:S> ^ <nat:2> + <nat:6> \cdot <var:S> \} \\ <var:m> := <var:m> + <var:w0> \\ \{ <var:U> = <var:S> \land <var:m> = <nat:6> \cdot <var:S> ^ <nat:2> + <nat:6> \cdot <var:S> + <nat:6> \} \end{eqnarray} Given the above , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:6> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:U> ; <var:w2> := <nat:6> ; <var:w2> := <var:w2> * <var:U> ; <var:w2> := <var:w2> * <var:U> ; <var:m> := <var:w2> ; <var:m> := <var:m> + <var:w1> ; <var:m> := <var:m> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:U> = <var:S> }} <def:poly> {{ <var:m> = <nat:6> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:6> * <var:S> /\ <var:w2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:6> * <var:S> /\ <var:w2> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:6> * <var:S> /\ <var:w2> = <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:w0> = <nat:6> /\ <var:w1> = <nat:6> * <var:S> /\ <var:m> = <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:w0> = <nat:6> /\ <var:m> = <nat:6> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:m> = <nat:6> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 