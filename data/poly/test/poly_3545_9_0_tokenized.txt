\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:3> ; <var:y1> := <nat:5> ; <var:y1> := <var:y1> * <var:F> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:F> ; <var:y2> := <var:y2> * <var:F> ; <var:e> := <var:y2> ; <var:e> := <var:e> + <var:y1> ; <var:e> := <var:e> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Given that $ <var:F> = <var:w> $ before the evaluation of our list of commands it must be that we have $ <var:e> = <nat:7> \times <var:w> ^ <nat:2> + <nat:5> \times <var:w> + <nat:3> $ after series of commands finishes . \end{theorem} \begin{proof} The argument for our program can be seen through standard Hoare reasoning . Taking a look at the upcoming statement found in the set of instructions , the assignment line binding $ <nat:3> $ into $ <var:y0>$ . This takes the condition $ \{ <var:F> = <var:w> \} $ as the condition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \} $ . Immediately after , we have the environment update command \verb | <var:y1> := <nat:5> ; | . This takes the precondition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \} $ toward the condition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \} $ . This is given by the assignment scheme defined in typical Hoare reasoning . Moving forward , the binding command \verb | <var:y1> := <var:y1> * <var:F> ; | . This moves the condition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \} $ into the postcondition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \} $ . This is given with the assignment law found in usual Hoare techniques . Looking at the subsequent command found in the series of instructions , we see the variable binding statement giving $ <nat:7> $ into $ <var:y2>$ . This line takes the precondition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \} $ to the condition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \land <var:y2> = <nat:7> \} $ . Moving on to the proceeding step seen in our set of commands , the variable assignmet command letting $ <var:y2> * <var:F> $ into $ <var:y2>$ . This takes the condition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \land <var:y2> = <nat:7> \} $ as the postcondition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \land <var:y2> = <nat:7> \times <var:w> \} $ . This is shown with the assignment inference rule defined in typical Hoare techniques . After , we have the assignment command binding $ <var:y2> * <var:F> $ toward $ <var:y2>$ . This takes the precondition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \land <var:y2> = <nat:7> \times <var:w> \} $ toward $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \land <var:y2> = <nat:7> \times <var:w> ^ <nat:2> \} $ . Shifting focus toward the following line contained in our list of commands , the line \verb | <var:e> := <var:y2> ; | . This line moves the condition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \land <var:y2> = <nat:7> \times <var:w> ^ <nat:2> \} $ to the condition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \land <var:e> = <nat:7> \times <var:w> ^ <nat:2> \} $ . This is sound with the assignment scheme found in standard Hoare logic . Following , the variable binding line letting $ <var:e> + <var:y1> $ into $ <var:e>$ . This code takes the precondition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:y1> = <nat:5> \times <var:w> \land <var:e> = <nat:7> \times <var:w> ^ <nat:2> \} $ as the condition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:e> = <nat:7> \times <var:w> ^ <nat:2> + <nat:5> \times <var:w> \} $ . This is deduced with the assignment scheme in Hoare techniques . Looking at the next statement found in our segment of code , we see the variable binding command letting $ <var:e> + <var:y0$ as $ <var:e>$ . This moves the precondition $ \{ <var:F> = <var:w> \land <var:y0> = <nat:3> \land <var:e> = <nat:7> \times <var:w> ^ <nat:2> + <nat:5> \times <var:w> \} $ toward the postcondition $ \{ <var:F> = <var:w> \land <var:e> = <nat:7> \times <var:w> ^ <nat:2> + <nat:5> \times <var:w> + <nat:3> \} $ . This is guaranteed through the assignment law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:3> ; <var:y1> := <nat:5> ; <var:y1> := <var:y1> * <var:F> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:F> ; <var:y2> := <var:y2> * <var:F> ; <var:e> := <var:y2> ; <var:e> := <var:e> + <var:y1> ; <var:e> := <var:e> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <def:poly> {{ <var:e> = <nat:7> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:5> * <var:w> /\ <var:y2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:5> * <var:w> /\ <var:y2> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:5> * <var:w> /\ <var:y2> = <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:5> * <var:w> /\ <var:e> = <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:y0> = <nat:3> /\ <var:e> = <nat:7> * <var:w> ^ <nat:2> + <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:e> = <nat:7> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 