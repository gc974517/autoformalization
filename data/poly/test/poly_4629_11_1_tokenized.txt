\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as \begin{verbatim} <var:L1> := <var:U> ; <var:L2> := <var:L1> * <var:U> ; <var:L3> := <var:L2> * <var:U> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:3> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:4> ; <var:Y> := <var:L3> <var:Y> := <var:Y> + <var:L2> <var:Y> := <var:Y> + <var:L1> <var:Y> := <var:Y> + <var:L0> \end{verbatim} Allowing that $ <var:U> = <var:E> $ prior to running this segment of code it follows that we see $ <var:Y> = <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the segment of code can be done through typical Hoare reasoning . Taking another step toward the upcoming piece of code found in the series of instructions , we have the binding code yielding $ <var:U> $ to $ <var:L1>$ . This moves the condition $ \{ <var:U> = <var:E> \} $ as the condition $ \{ <var:U> = <var:E> \land <var:L1> = <var:E> \} $ . This is known to be sound using the assignment inference rule given by usual Hoare logic . Immediately following , we see the binding code \verb | <var:L2> := <var:L1> * <var:U> ; | . This transfers $ \{ <var:U> = <var:E> \land <var:L1> = <var:E> \} $ toward the condition $ \{ <var:U> = <var:E> \land <var:L1> = <var:E> \land <var:L2> = <var:E> ^ <nat:2> \} $ . Now , we see the variable update line \verb | <var:L3> := <var:L2> * <var:U> ; | . This command moves the condition $ \{ <var:U> = <var:E> \land <var:L1> = <var:E> \land <var:L2> = <var:E> ^ <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:E> \land <var:L1> = <var:E> \land <var:L2> = <var:E> ^ <nat:2> \land <var:L3> = <var:E> ^ <nat:3> \} $ . Jumping to the upcoming statement found in our set of commands , we see the environment update command \verb | <var:L0> := <nat:3> ; | . This moves the precondition $ \{ <var:U> = <var:E> \land <var:L1> = <var:E> \land <var:L2> = <var:E> ^ <nat:2> \land <var:L3> = <var:E> ^ <nat:3> \} $ into the condition $ \{ <var:U> = <var:E> \land <var:L1> = <var:E> \land <var:L2> = <var:E> ^ <nat:2> \land <var:L3> = <var:E> ^ <nat:3> \land <var:L0> = <nat:3> \} $ . This is shown to be logically sound using the assignment law given by typical Hoare techniques . Advancing to the following piece of code in the series of instructions , the environment update code defining $ <var:L1> * <nat:3> $ into $ <var:L1>$ . This redefines $ \{ <var:U> = <var:E> \land <var:L1> = <var:E> \land <var:L2> = <var:E> ^ <nat:2> \land <var:L3> = <var:E> ^ <nat:3> \land <var:L0> = <nat:3> \} $ as $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L2> = <var:E> ^ <nat:2> \land <var:L3> = <var:E> ^ <nat:3> \land <var:L0> = <nat:3> \} $ . This is shown to be logically sound through the assignment rule given in usual Hoare techniques . Taking another step toward the proceeding piece of code in the code segment , we see the environment update command assigning $ <var:L2> * <nat:4> $ to $ <var:L2>$ . This takes the condition $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L2> = <var:E> ^ <nat:2> \land <var:L3> = <var:E> ^ <nat:3> \land <var:L0> = <nat:3> \} $ toward $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L2> = <nat:4> \times <var:E> ^ <nat:2> \land <var:L3> = <var:E> ^ <nat:3> \land <var:L0> = <nat:3> \} $ . This is ensured using the assignment inference rule defined by usual Hoare logic . Advancing on , we have the binding code defining $ <var:L3> * <nat:4> $ into $ <var:L3>$ . This transfers the precondition $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L2> = <nat:4> \times <var:E> ^ <nat:2> \land <var:L3> = <var:E> ^ <nat:3> \land <var:L0> = <nat:3> \} $ to the condition $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L2> = <nat:4> \times <var:E> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:E> ^ <nat:3> \land <var:L0> = <nat:3> \} $ . This is deduced using the assignment law found in standard Hoare logic . Moving forward , the variable assignmet command \verb | <var:Y> := <var:L3> | . This forwards the precondition $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L2> = <nat:4> \times <var:E> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:E> ^ <nat:3> \land <var:L0> = <nat:3> \} $ to $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L2> = <nat:4> \times <var:E> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> \} $ . This is known to be sound by the assignment scheme from standard Hoare techniques . Next , the variable update statement \verb | <var:Y> := <var:Y> + <var:L2> | . This redefines the condition $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L2> = <nat:4> \times <var:E> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> \} $ toward the postcondition $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L0> = <nat:3> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> \} $ . Paying attention to the following command contained in the series of instructions , we have the variable assignmet line \verb | <var:Y> := <var:Y> + <var:L1> | . This forwards the condition $ \{ <var:U> = <var:E> \land <var:L1> = <nat:3> \times <var:E> \land <var:L0> = <nat:3> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> \} $ as the postcondition $ \{ <var:U> = <var:E> \land <var:L0> = <nat:3> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> \} $ . Jumping to the next line of code in the set of instructions , we have the variable update code \verb | <var:Y> := <var:Y> + <var:L0> | . This transfers the precondition $ \{ <var:U> = <var:E> \land <var:L0> = <nat:3> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> \} $ toward the condition $ \{ <var:U> = <var:E> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> \} $ . This is guaranteed using the assignment inference rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:U> = <var:E> }} <var:L1> := <var:U> ; <var:L2> := <var:L1> * <var:U> ; <var:L3> := <var:L2> * <var:U> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:3> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:4> ; <var:Y> := <var:L3> <var:Y> := <var:Y> + <var:L2> <var:Y> := <var:Y> + <var:L1> <var:Y> := <var:Y> + <var:L0> {{ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <var:E> /\ <var:L2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <var:E> /\ <var:L2> = <var:E> ^ <nat:2> /\ <var:L3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <var:E> /\ <var:L2> = <var:E> ^ <nat:2> /\ <var:L3> = <var:E> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <nat:3> * <var:E> /\ <var:L2> = <var:E> ^ <nat:2> /\ <var:L3> = <var:E> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <nat:3> * <var:E> /\ <var:L2> = <nat:4> * <var:E> ^ <nat:2> /\ <var:L3> = <var:E> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <nat:3> * <var:E> /\ <var:L2> = <nat:4> * <var:E> ^ <nat:2> /\ <var:L3> = <nat:4> * <var:E> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <nat:3> * <var:E> /\ <var:L2> = <nat:4> * <var:E> ^ <nat:2> /\ <var:L0> = <nat:3> /\ <var:Y> = <nat:4> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L1> = <nat:3> * <var:E> /\ <var:L0> = <nat:3> /\ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:L0> = <nat:3> /\ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 