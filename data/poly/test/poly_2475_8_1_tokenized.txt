\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:o> ; <var:j2> := <var:j1> * <var:o> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:2> ; <var:A> := <var:j2> <var:A> := <var:A> + <var:j1> <var:A> := <var:A> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Allowing $ <var:o> = <var:k> $ with some $ <var:k> \in \mathbb{N} $ prior to evaluating this series of commands , it follows that $ <var:A> = <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:6> $ when list of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:k> \} \\ <var:j1> := <var:o> ; \\ \{ <var:o> = <var:k> \land <var:j1> = <var:k> \} \\ <var:j2> := <var:j1> * <var:o> ; \\ \{ <var:o> = <var:k> \land <var:j1> = <var:k> \land <var:j2> = <var:k> ^ <nat:2> \} \\ <var:j0> := <nat:6> ; \\ \{ <var:o> = <var:k> \land <var:j1> = <var:k> \land <var:j2> = <var:k> ^ <nat:2> \land <var:j0> = <nat:6> \} \\ <var:j1> := <var:j1> * <nat:1> ; \\ \{ <var:o> = <var:k> \land <var:j1> = <nat:1> * <var:k> \land <var:j2> = <var:k> ^ <nat:2> \land <var:j0> = <nat:6> \} \\ <var:j2> := <var:j2> * <nat:2> ; \\ \{ <var:o> = <var:k> \land <var:j1> = <nat:1> * <var:k> \land <var:j2> = <nat:2> * <var:k> ^ <nat:2> \land <var:j0> = <nat:6> \} \\ <var:A> := <var:j2> \\ \{ <var:o> = <var:k> \land <var:j1> = <nat:1> * <var:k> \land <var:j0> = <nat:6> \land <var:A> = <nat:2> * <var:k> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:j1> \\ \{ <var:o> = <var:k> \land <var:j0> = <nat:6> \land <var:A> = <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> \} \\ <var:A> := <var:A> + <var:j0> \\ \{ <var:o> = <var:k> \land <var:A> = <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:6> \} \end{eqnarray} Utilizing usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j1> := <var:o> ; <var:j2> := <var:j1> * <var:o> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:2> ; <var:A> := <var:j2> <var:A> := <var:A> + <var:j1> <var:A> := <var:A> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:o> = <var:k> }} <def:poly> {{ <var:A> = <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:j1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:j1> = <var:k> /\ <var:j2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:j1> = <var:k> /\ <var:j2> = <var:k> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:j1> = <nat:1> * <var:k> /\ <var:j2> = <var:k> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:j1> = <nat:1> * <var:k> /\ <var:j2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:j1> = <nat:1> * <var:k> /\ <var:j0> = <nat:6> /\ <var:A> = <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:j0> = <nat:6> /\ <var:A> = <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:A> = <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 