\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:B1> := <var:X> ; <var:B2> := <var:B1> * <var:X> ; <var:B3> := <var:B2> * <var:X> ; <var:B4> := <var:B3> * <var:X> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:1> ; <var:B4> := <var:B4> * <nat:1> ; <var:P> := <var:B4> <var:P> := <var:P> + <var:B3> <var:P> := <var:P> + <var:B2> <var:P> := <var:P> + <var:B1> <var:P> := <var:P> + <var:B0> \end{verbatim} Allowing that $ <var:X> = <var:J> $ ahead of the evaluation of the code segment , then we see $ <var:P> = <nat:1> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands is accomplished with the below decorated set of commands . \begin{eqnarray} \{ <var:X> = <var:J> \} \\ <var:B1> := <var:X> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <var:J> \} \\ <var:B2> := <var:B1> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \} \\ <var:B4> := <var:B3> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \} \\ <var:B0> := <nat:1> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:1> \} \\ <var:B1> := <var:B1> * <nat:2> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:1> \} \\ <var:B2> := <var:B2> * <nat:4> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:4> * <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:1> \} \\ <var:B3> := <var:B3> * <nat:1> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:4> * <var:J> ^ <nat:2> \land <var:B3> = <nat:1> * <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:1> \} \\ <var:B4> := <var:B4> * <nat:1> ; \\ \{ <var:X> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:4> * <var:J> ^ <nat:2> \land <var:B3> = <nat:1> * <var:J> ^ <nat:3> \land <var:B4> = <nat:1> * <var:J> ^ <nat:4> \land <var:B0> = <nat:1> \} \\ <var:P> := <var:B4> \\ \{ <var:X> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:4> * <var:J> ^ <nat:2> \land <var:B3> = <nat:1> * <var:J> ^ <nat:3> \land <var:B0> = <nat:1> \land <var:P> = <nat:1> * <var:J> ^ <nat:4> \} \\ <var:P> := <var:P> + <var:B3> \\ \{ <var:X> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:4> * <var:J> ^ <nat:2> \land <var:B0> = <nat:1> \land <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:B2> \\ \{ <var:X> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B0> = <nat:1> \land <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:B1> \\ \{ <var:X> = <var:J> \land <var:B0> = <nat:1> \land <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> \} \\ <var:P> := <var:P> + <var:B0> \\ \{ <var:X> = <var:J> \land <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> \} \end{eqnarray} Applying standard Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <var:B4> : string := " <var:B4> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:X> = <var:J> }} <var:B1> := <var:X> ; <var:B2> := <var:B1> * <var:X> ; <var:B3> := <var:B2> * <var:X> ; <var:B4> := <var:B3> * <var:X> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:1> ; <var:B4> := <var:B4> * <nat:1> ; <var:P> := <var:B4> <var:P> := <var:P> + <var:B3> <var:P> := <var:P> + <var:B2> <var:P> := <var:P> + <var:B1> <var:P> := <var:P> + <var:B0> {{ <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <var:J> /\ <var:B2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <var:J> /\ <var:B2> = <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <var:J> /\ <var:B2> = <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <var:J> /\ <var:B2> = <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:J> ^ <nat:3> /\ <var:B4> = <nat:1> * <var:J> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:J> ^ <nat:3> /\ <var:B0> = <nat:1> /\ <var:P> = <nat:1> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:B0> = <nat:1> /\ <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B0> = <nat:1> /\ <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B0> = <nat:1> /\ <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:P> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 