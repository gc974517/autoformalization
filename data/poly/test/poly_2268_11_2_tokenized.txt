\begin{document} \begin{theorem} Define the following code segment such that \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <nat:4> + <var:H> * <var:T> ; <var:H> := <nat:2> + <var:H> * <var:T> ; <var:H> := <nat:4> + <var:H> * <var:T> ; <var:H> := <nat:4> + <var:H> * <var:T> ; <var:H> := <nat:2> + <var:H> * <var:T> ; <var:H> := <var:H> * <var:T> ; <var:H> := <nat:2> + <var:H> * <var:T> ; <var:H> := <var:H> * <var:T> ; <var:H> := <nat:1> + <var:H> * <var:T> ; <var:H> := <nat:3> + <var:H> * <var:T> \end{verbatim} Given , given positive coefficients $ <var:P> $ , it to be that $ <var:T> = <var:P> $ ahead of evaluating our program , it must be that $ <var:H> = <nat:1> * <var:P> ^ <nat:10> + <nat:4> * <var:P> ^ <nat:9> + <nat:2> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> + <nat:3> $ after segment of code terminates . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be accomplished by typical Hoare logic . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:T> = <var:P> \} & <var:H> := <nat:1> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} \\ \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} & <var:H> := <nat:4> + <var:H> * <var:T> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> * <var:P> + <nat:4> \} \end{tabular} Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:P> \} & <var:H> := <nat:1> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} \\ \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} & <var:H> := <nat:4> + <var:H> * <var:T> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> * <var:P> + <nat:4> \} \end{tabular} Further , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:P> \} & <var:H> := <nat:1> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} \end{tabular} This is rigorously given using the assignment inference rule defined by standard Hoare reasoning . Moving forward to the following statements found in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:P> \} & <var:H> := <nat:1> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} \\ \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} & <var:H> := <nat:4> + <var:H> * <var:T> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> * <var:P> + <nat:4> \} \\ \{ <var:T> = <var:P> \land <var:H> = <nat:1> * <var:P> + <nat:4> \} & <var:H> := <nat:2> + <var:H> * <var:T> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> \} \\ \{ <var:T> = <var:P> \land <var:H> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> \} & <var:H> := <nat:4> + <var:H> * <var:T> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:4> \} \end{tabular} Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:P> \} & <var:H> := <nat:1> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} \end{tabular} This is shown to be logically sound by the variable assignmet inference rule given in usual Hoare techniques . Immediately after , \[ \begin{tabular} {rcl} \{ <var:T> = <var:P> \} & <var:H> := <nat:1> & \{ <var:T> = <var:P> \land <var:H> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:T> = <var:P> }} <var:H> := <nat:1> ; <var:H> := <nat:4> + <var:H> * <var:T> ; <var:H> := <nat:2> + <var:H> * <var:T> ; <var:H> := <nat:4> + <var:H> * <var:T> ; <var:H> := <nat:4> + <var:H> * <var:T> ; <var:H> := <nat:2> + <var:H> * <var:T> ; <var:H> := <var:H> * <var:T> ; <var:H> := <nat:2> + <var:H> * <var:T> ; <var:H> := <var:H> * <var:T> ; <var:H> := <nat:1> + <var:H> * <var:T> ; <var:H> := <nat:3> + <var:H> * <var:T> {{ <var:H> = <nat:1> * <var:P> ^ <nat:10> + <nat:4> * <var:P> ^ <nat:9> + <nat:2> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:9> + <nat:4> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:10> + <nat:4> * <var:P> ^ <nat:9> + <nat:2> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 