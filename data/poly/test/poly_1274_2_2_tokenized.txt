\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} : \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:X> \end{verbatim} Allowing $ <var:X> = <var:l> $ ahead of interpreting the set of instructions , it holds that we see $ <var:O> = <nat:4> * <var:l> + <nat:2> $ once segment of code exits . \end{theorem} \begin{proof} Observe that the below decorated series of commands . \begin{eqnarray} \{ <var:X> = <var:l> \} \\ <var:O> := <nat:4> ; \\ \{ <var:X> = <var:l> \land <var:O> = <nat:4> \} \\ <var:O> := <nat:2> + <var:O> * <var:X> \\ \{ <var:X> = <var:l> \land <var:O> = <nat:4> \cdot <var:l> + <nat:2> \} \end{eqnarray} Using typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:X> = <var:l> }} <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:X> {{ <var:O> = <nat:4> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:O> = <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 