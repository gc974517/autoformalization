\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:E> ; <var:m0> := <nat:8> ; <var:m1> := <var:m1> * <nat:3> ; <var:I> := <var:m1> <var:I> := <var:I> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:E> = <var:O> $ , with some positive integer coefficients $ <var:O> $ , before the execution of our list of commands , it holds that we have $ <var:I> = <nat:3> \times <var:O> + <nat:8> $ . \end{theorem} \begin{proof} Using Hoare logic gives : \begin{eqnarray} \{ <var:E> = <var:O> \} \\ <var:m1> := <var:E> ; \\ \{ <var:E> = <var:O> \land <var:m1> = <var:O> \} \\ <var:m0> := <nat:8> ; \\ \{ <var:E> = <var:O> \land <var:m1> = <var:O> \land <var:m0> = <nat:8> \} \\ <var:m1> := <var:m1> * <nat:3> ; \\ \{ <var:E> = <var:O> \land <var:m1> = <nat:3> * <var:O> \land <var:m0> = <nat:8> \} \\ <var:I> := <var:m1> \\ \{ <var:E> = <var:O> \land <var:m0> = <nat:8> \land <var:I> = <nat:3> * <var:O> \} \\ <var:I> := <var:I> + <var:m0> \\ \{ <var:E> = <var:O> \land <var:I> = <nat:3> * <var:O> + <nat:8> \} \end{eqnarray} Considering the preceding argument , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:E> ; <var:m0> := <nat:8> ; <var:m1> := <var:m1> * <nat:3> ; <var:I> := <var:m1> <var:I> := <var:I> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:E> = <var:O> }} <def:poly> {{ <var:I> = <nat:3> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:m1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:m1> = <var:O> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:m1> = <nat:3> * <var:O> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:m0> = <nat:8> /\ <var:I> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:I> = <nat:3> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 