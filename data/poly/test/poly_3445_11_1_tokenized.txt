\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N1> := <var:d> ; <var:N2> := <var:N1> * <var:d> ; <var:N3> := <var:N2> * <var:d> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:8> ; <var:N3> := <var:N3> * <nat:7> ; <var:J> := <var:N3> <var:J> := <var:J> + <var:N2> <var:J> := <var:J> + <var:N1> <var:J> := <var:J> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:d> = <var:I> $ ( given every $ <var:I> \in \mathbb{Z}^+ $ ) ahead of the evaluation of our set of commands , it follows that we have $ <var:J> = <nat:7> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:5> $ when code segment has finished executing . \end{theorem} \begin{proof} Observe the below decorated set of instructions . \begin{eqnarray} \{ <var:d> = <var:I> \} \\ <var:N1> := <var:d> ; \\ \{ <var:d> = <var:I> \land <var:N1> = <var:I> \} \\ <var:N2> := <var:N1> * <var:d> ; \\ \{ <var:d> = <var:I> \land <var:N1> = <var:I> \land <var:N2> = <var:I> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:d> ; \\ \{ <var:d> = <var:I> \land <var:N1> = <var:I> \land <var:N2> = <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \} \\ <var:N0> := <nat:5> ; \\ \{ <var:d> = <var:I> \land <var:N1> = <var:I> \land <var:N2> = <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \land <var:N0> = <nat:5> \} \\ <var:N1> := <var:N1> * <nat:5> ; \\ \{ <var:d> = <var:I> \land <var:N1> = <nat:5> * <var:I> \land <var:N2> = <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \land <var:N0> = <nat:5> \} \\ <var:N2> := <var:N2> * <nat:8> ; \\ \{ <var:d> = <var:I> \land <var:N1> = <nat:5> * <var:I> \land <var:N2> = <nat:8> * <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \land <var:N0> = <nat:5> \} \\ <var:N3> := <var:N3> * <nat:7> ; \\ \{ <var:d> = <var:I> \land <var:N1> = <nat:5> * <var:I> \land <var:N2> = <nat:8> * <var:I> ^ <nat:2> \land <var:N3> = <nat:7> * <var:I> ^ <nat:3> \land <var:N0> = <nat:5> \} \\ <var:J> := <var:N3> \\ \{ <var:d> = <var:I> \land <var:N1> = <nat:5> * <var:I> \land <var:N2> = <nat:8> * <var:I> ^ <nat:2> \land <var:N0> = <nat:5> \land <var:J> = <nat:7> * <var:I> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:N2> \\ \{ <var:d> = <var:I> \land <var:N1> = <nat:5> * <var:I> \land <var:N0> = <nat:5> \land <var:J> = <nat:7> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ^ <nat:2> \} \end{eqnarray} Advancing running our series of commands gives us : \begin{eqnarray} <var:J> := <var:J> + <var:N1> \\ \{ <var:d> = <var:I> \land <var:N0> = <nat:5> \land <var:J> = <nat:7> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> \} \\ <var:J> := <var:J> + <var:N0> \\ \{ <var:d> = <var:I> \land <var:J> = <nat:7> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:5> \} \end{eqnarray} Applying typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:d> ; <var:N2> := <var:N1> * <var:d> ; <var:N3> := <var:N2> * <var:d> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:8> ; <var:N3> := <var:N3> * <nat:7> ; <var:J> := <var:N3> <var:J> := <var:J> + <var:N2> <var:J> := <var:J> + <var:N1> <var:J> := <var:J> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:d> = <var:I> }} <def:poly> {{ <var:J> = <nat:7> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <var:I> /\ <var:N2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <var:I> /\ <var:N2> = <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <var:I> /\ <var:N2> = <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <nat:5> * <var:I> /\ <var:N2> = <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <nat:5> * <var:I> /\ <var:N2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <nat:5> * <var:I> /\ <var:N2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:I> ^ <nat:3> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <nat:5> * <var:I> /\ <var:N2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:N0> = <nat:5> /\ <var:J> = <nat:7> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N1> = <nat:5> * <var:I> /\ <var:N0> = <nat:5> /\ <var:J> = <nat:7> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:N0> = <nat:5> /\ <var:J> = <nat:7> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:J> = <nat:7> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 