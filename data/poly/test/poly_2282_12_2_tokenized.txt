\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:2> + <var:W> * <var:t> ; <var:W> := <nat:3> + <var:W> * <var:t> ; <var:W> := <var:W> * <var:t> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:2> + <var:W> * <var:t> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:4> + <var:W> * <var:t> ; <var:W> := <nat:3> + <var:W> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:t> = <var:o> $ ahead of running the set of instructions , it holds that we see $ <var:W> = <nat:1> \times <var:o> ^ <nat:11> + <nat:1> \times <var:o> ^ <nat:10> + <nat:1> \times <var:o> ^ <nat:9> + <nat:2> \times <var:o> ^ <nat:8> + <nat:3> \times <var:o> ^ <nat:7> + <nat:1> \times <var:o> ^ <nat:5> + <nat:2> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> + <nat:3> $ once series of instructions has exited . \end{theorem} \begin{proof} The flow of logic for the list of commands is clear using standard Hoare reasoning . Paying attention to the next step in our list of instructions , we see the binding command \verb | <var:W> := <nat:1> ; | . This redefines the precondition $ \{ <var:t> = <var:o> \} $ as the postcondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \} $ . Moving on to the next bit of code seen in the set of instructions , the environment update line \verb | <var:W> := <nat:1> + <var:W> * <var:t> ; | . This transfers the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \} $ to the postcondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> + <nat:1> \} $ . This is sound using the assignment law obtained from standard Hoare techniques . Further , we see the variable assignmet command \verb | <var:W> := <nat:1> + <var:W> * <var:t> ; | . This transfers the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> + <nat:1> \} $ into the postcondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:1> \} $ . Further , the variable update code defining $ <nat:2> + <var:W> * <var:t> $ toward $ <var:W>$ . This command moves the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:1> \} $ as the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:2> \} $ . This is deduced through the assignment rule given by Hoare techniques . Further , the statement binding $ <nat:3> + <var:W> * <var:t> $ toward $ <var:W>$ . This line moves the precondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:2> \} $ to the postcondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:3> \} $ . This is guaranteed using the assignment inference rule in standard Hoare reasoning . Looking at the subsequent line of code in the series of instructions , the assignment statement yielding $ <var:W> * <var:t> $ into $ <var:W>$ . This redefines the precondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:3> \} $ into $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + \} $ . Focusing on the next command found in our code , we have the statement \verb | <var:W> := <nat:1> + <var:W> * <var:t> ; | . This moves the precondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + \} $ to the postcondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:1> \} $ . This is given with the assignment inference rule of standard Hoare reasoning . Advancing to the next step , we have the environment update line \verb | <var:W> := <nat:2> + <var:W> * <var:t> ; | . This statement redefines the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:1> \} $ into the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:7> + <nat:1> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:3> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> + <nat:2> \} $ . Further , the variable update command letting $ <nat:1> + <var:W> * <var:t> $ toward $ <var:W>$ . This transfers the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:7> + <nat:1> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:3> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> + <nat:2> \} $ as the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:8> + <nat:1> \cdot <var:o> ^ <nat:7> + <nat:1> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:3> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:1> \} $ . This is known to be sound by the assignment inference rule obtained from standard Hoare logic . Paying attention to the upcoming command in the list of instructions , we have the environment update statement \verb | <var:W> := <nat:1> + <var:W> * <var:t> ; | . This transfers $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:8> + <nat:1> \cdot <var:o> ^ <nat:7> + <nat:1> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:3> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:1> \} $ toward the postcondition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:9> + <nat:1> \cdot <var:o> ^ <nat:8> + <nat:1> \cdot <var:o> ^ <nat:7> + <nat:2> \cdot <var:o> ^ <nat:6> + <nat:3> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:1> \} $ . Taking a look at the subsequent bit of code contained in the set of commands , we have the command defining $ <nat:4> + <var:W> * <var:t> $ into $ <var:W>$ . This command redefines $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:9> + <nat:1> \cdot <var:o> ^ <nat:8> + <nat:1> \cdot <var:o> ^ <nat:7> + <nat:2> \cdot <var:o> ^ <nat:6> + <nat:3> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:1> \} $ as $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:10> + <nat:1> \cdot <var:o> ^ <nat:9> + <nat:1> \cdot <var:o> ^ <nat:8> + <nat:2> \cdot <var:o> ^ <nat:7> + <nat:3> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:4> \} $ . Now , we see the environment update command \verb | <var:W> := <nat:3> + <var:W> * <var:t> | . This code moves the condition $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:10> + <nat:1> \cdot <var:o> ^ <nat:9> + <nat:1> \cdot <var:o> ^ <nat:8> + <nat:2> \cdot <var:o> ^ <nat:7> + <nat:3> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:4> \} $ into $ \{ <var:t> = <var:o> \land <var:W> = <nat:1> \cdot <var:o> ^ <nat:11> + <nat:1> \cdot <var:o> ^ <nat:10> + <nat:1> \cdot <var:o> ^ <nat:9> + <nat:2> \cdot <var:o> ^ <nat:8> + <nat:3> \cdot <var:o> ^ <nat:7> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:1> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:2> + <var:W> * <var:t> ; <var:W> := <nat:3> + <var:W> * <var:t> ; <var:W> := <var:W> * <var:t> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:2> + <var:W> * <var:t> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:4> + <var:W> * <var:t> ; <var:W> := <nat:3> + <var:W> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:t> = <var:o> }} <def:poly> {{ <var:W> = <nat:1> * <var:o> ^ <nat:11> + <nat:1> * <var:o> ^ <nat:10> + <nat:1> * <var:o> ^ <nat:9> + <nat:2> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:8> + <nat:1> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:9> + <nat:1> * <var:o> ^ <nat:8> + <nat:1> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:10> + <nat:1> * <var:o> ^ <nat:9> + <nat:1> * <var:o> ^ <nat:8> + <nat:2> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:W> = <nat:1> * <var:o> ^ <nat:11> + <nat:1> * <var:o> ^ <nat:10> + <nat:1> * <var:o> ^ <nat:9> + <nat:2> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 