\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:h0> := <nat:3> ; <var:n> := <var:h0> \end{verbatim} Assuming that we have $ <var:X> = <var:g> $ ( taking natural coefficients $ <var:g> $ ) ahead of running this code it holds that we have $ <var:n> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the segment of code can be seen through usual Hoare reasoning . Considering the following lines of codefound in the set of commands , \begin{eqnarray} \{ <var:X> = <var:g> \} \, <var:h0> := <nat:3> \, \{ <var:X> = <var:g> \land <var:h0> = <nat:3> \} \\ \{ <var:X> = <var:g> \land <var:h0> = <nat:3> \} \, <var:n> := <var:h0\, \{ <var:X> = <var:g> \land <var:n> = <nat:3> \} \end{eqnarray} This is shown to be logically sound by the scheme found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:X> = <var:g> }} <var:h0> := <nat:3> ; <var:n> := <var:h0> {{ <var:n> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:n> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 