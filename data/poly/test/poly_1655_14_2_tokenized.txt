\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y> := <nat:4> ; <var:Y> := <nat:2> + <var:Y> * <var:z> ; <var:Y> := <nat:3> + <var:Y> * <var:z> ; <var:Y> := <nat:3> + <var:Y> * <var:z> ; <var:Y> := <nat:1> + <var:Y> * <var:z> ; <var:Y> := <nat:4> + <var:Y> * <var:z> ; <var:Y> := <nat:2> + <var:Y> * <var:z> ; <var:Y> := <var:Y> * <var:z> ; <var:Y> := <var:Y> * <var:z> ; <var:Y> := <nat:4> + <var:Y> * <var:z> ; <var:Y> := <nat:3> + <var:Y> * <var:z> ; <var:Y> := <nat:3> + <var:Y> * <var:z> ; <var:Y> := <nat:1> + <var:Y> * <var:z> ; <var:Y> := <nat:1> + <var:Y> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Assume ( for $ <var:J> \in \mathbb{Z}^+ $ ) it to hold that $ <var:z> = <var:J> $ before evaluating this program then we see $ <var:Y> = <nat:4> \times <var:J> ^ <nat:13> + <nat:2> \times <var:J> ^ <nat:12> + <nat:3> \times <var:J> ^ <nat:11> + <nat:3> \times <var:J> ^ <nat:10> + <nat:1> \times <var:J> ^ <nat:9> + <nat:4> \times <var:J> ^ <nat:8> + <nat:2> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:J> \} \\ <var:Y> := <nat:4> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> + <nat:2> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> \} \\ <var:Y> := <nat:4> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:4> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> \} \\ <var:Y> := <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + \} \\ <var:Y> := <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + \} \\ <var:Y> := <nat:4> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:9> + <nat:2> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:10> + <nat:2> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> + <nat:3> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:11> + <nat:2> * <var:J> ^ <nat:10> + <nat:3> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:12> + <nat:2> * <var:J> ^ <nat:11> + <nat:3> * <var:J> ^ <nat:10> + <nat:3> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:z> \\ \{ <var:z> = <var:J> \land <var:Y> = <nat:4> * <var:J> ^ <nat:13> + <nat:2> * <var:J> ^ <nat:12> + <nat:3> * <var:J> ^ <nat:11> + <nat:3> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:4> ; <var:Y> := <nat:2> + <var:Y> * <var:z> ; <var:Y> := <nat:3> + <var:Y> * <var:z> ; <var:Y> := <nat:3> + <var:Y> * <var:z> ; <var:Y> := <nat:1> + <var:Y> * <var:z> ; <var:Y> := <nat:4> + <var:Y> * <var:z> ; <var:Y> := <nat:2> + <var:Y> * <var:z> ; <var:Y> := <var:Y> * <var:z> ; <var:Y> := <var:Y> * <var:z> ; <var:Y> := <nat:4> + <var:Y> * <var:z> ; <var:Y> := <nat:3> + <var:Y> * <var:z> ; <var:Y> := <nat:3> + <var:Y> * <var:z> ; <var:Y> := <nat:1> + <var:Y> * <var:z> ; <var:Y> := <nat:1> + <var:Y> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <def:poly> {{ <var:Y> = <nat:4> * <var:J> ^ <nat:13> + <nat:2> * <var:J> ^ <nat:12> + <nat:3> * <var:J> ^ <nat:11> + <nat:3> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:9> + <nat:2> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:10> + <nat:2> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:11> + <nat:2> * <var:J> ^ <nat:10> + <nat:3> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:12> + <nat:2> * <var:J> ^ <nat:11> + <nat:3> * <var:J> ^ <nat:10> + <nat:3> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:13> + <nat:2> * <var:J> ^ <nat:12> + <nat:3> * <var:J> ^ <nat:11> + <nat:3> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 