\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:c1> := <var:T> ; <var:c2> := <var:c1> * <var:T> ; <var:c3> := <var:c2> * <var:T> ; <var:c0> := <nat:2> ; <var:c1> := <var:c1> * <nat:1> ; <var:c2> := <var:c2> * <nat:4> ; <var:c3> := <var:c3> * <nat:2> ; <var:A> := <var:c3> <var:A> := <var:A> + <var:c2> <var:A> := <var:A> + <var:c1> <var:A> := <var:A> + <var:c0> \end{verbatim} Allow given all $ <var:M> $ that we have $ <var:T> = <var:M> $ ahead of interpreting the code , it holds that we see $ <var:A> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:2> $ when list of commands executes . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning yields : \begin{eqnarray} \{ <var:T> = <var:M> \} \\ <var:c1> := <var:T> ; \\ \{ <var:T> = <var:M> \land <var:c1> = <var:M> \} \\ <var:c2> := <var:c1> * <var:T> ; \\ \{ <var:T> = <var:M> \land <var:c1> = <var:M> \land <var:c2> = <var:M> ^ <nat:2> \} \\ <var:c3> := <var:c2> * <var:T> ; \\ \{ <var:T> = <var:M> \land <var:c1> = <var:M> \land <var:c2> = <var:M> ^ <nat:2> \land <var:c3> = <var:M> ^ <nat:3> \} \\ <var:c0> := <nat:2> ; \\ \{ <var:T> = <var:M> \land <var:c1> = <var:M> \land <var:c2> = <var:M> ^ <nat:2> \land <var:c3> = <var:M> ^ <nat:3> \land <var:c0> = <nat:2> \} \\ <var:c1> := <var:c1> * <nat:1> ; \\ \{ <var:T> = <var:M> \land <var:c1> = <nat:1> \cdot <var:M> \land <var:c2> = <var:M> ^ <nat:2> \land <var:c3> = <var:M> ^ <nat:3> \land <var:c0> = <nat:2> \} \\ <var:c2> := <var:c2> * <nat:4> ; \\ \{ <var:T> = <var:M> \land <var:c1> = <nat:1> \cdot <var:M> \land <var:c2> = <nat:4> \cdot <var:M> ^ <nat:2> \land <var:c3> = <var:M> ^ <nat:3> \land <var:c0> = <nat:2> \} \\ <var:c3> := <var:c3> * <nat:2> ; \\ \{ <var:T> = <var:M> \land <var:c1> = <nat:1> \cdot <var:M> \land <var:c2> = <nat:4> \cdot <var:M> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:M> ^ <nat:3> \land <var:c0> = <nat:2> \} \\ <var:A> := <var:c3> \\ \{ <var:T> = <var:M> \land <var:c1> = <nat:1> \cdot <var:M> \land <var:c2> = <nat:4> \cdot <var:M> ^ <nat:2> \land <var:c0> = <nat:2> \land <var:A> = <nat:2> \cdot <var:M> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:c2> \\ \{ <var:T> = <var:M> \land <var:c1> = <nat:1> \cdot <var:M> \land <var:c0> = <nat:2> \land <var:A> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:c1> \\ \{ <var:T> = <var:M> \land <var:c0> = <nat:2> \land <var:A> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> \} \\ <var:A> := <var:A> + <var:c0> \\ \{ <var:T> = <var:M> \land <var:A> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:2> \} \end{eqnarray} Considering the above , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:T> = <var:M> }} <var:c1> := <var:T> ; <var:c2> := <var:c1> * <var:T> ; <var:c3> := <var:c2> * <var:T> ; <var:c0> := <nat:2> ; <var:c1> := <var:c1> * <nat:1> ; <var:c2> := <var:c2> * <nat:4> ; <var:c3> := <var:c3> * <nat:2> ; <var:A> := <var:c3> <var:A> := <var:A> + <var:c2> <var:A> := <var:A> + <var:c1> <var:A> := <var:A> + <var:c0> {{ <var:A> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <var:M> /\ <var:c2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <var:M> /\ <var:c2> = <var:M> ^ <nat:2> /\ <var:c3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <var:M> /\ <var:c2> = <var:M> ^ <nat:2> /\ <var:c3> = <var:M> ^ <nat:3> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <nat:1> * <var:M> /\ <var:c2> = <var:M> ^ <nat:2> /\ <var:c3> = <var:M> ^ <nat:3> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <nat:1> * <var:M> /\ <var:c2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:c3> = <var:M> ^ <nat:3> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <nat:1> * <var:M> /\ <var:c2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <nat:1> * <var:M> /\ <var:c2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:c0> = <nat:2> /\ <var:A> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c1> = <nat:1> * <var:M> /\ <var:c0> = <nat:2> /\ <var:A> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:c0> = <nat:2> /\ <var:A> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:A> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 