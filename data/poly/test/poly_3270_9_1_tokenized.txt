\begin{document} \begin{theorem} We define the following list of instructions as \begin{verbatim} <var:l1> := <var:c> ; <var:l2> := <var:l1> * <var:c> ; <var:l3> := <var:l2> * <var:c> ; <var:l0> := <nat:2> ; <var:l2> := <var:l2> * <nat:4> ; <var:l3> := <var:l3> * <nat:8> ; <var:D> := <var:l3> <var:D> := <var:D> + <var:l2> <var:D> := <var:D> + <var:l0> \end{verbatim} Assuming it to hold that $ <var:c> = <var:F> $ prior to interpreting our set of instructions it must be that $ <var:D> = <nat:8> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:2> $ once code segment executes . \end{theorem} \begin{proof} The argument for the series of commands is given by typical Hoare logic . Moving on to the proceeding piece of code contained in our list of instructions , the variable binding code defining $ <var:c> $ to $ <var:l1>$ . This takes $ \{ <var:c> = <var:F> \} $ as $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \} $ . Immediately after , the binding line letting $ <var:l1> * <var:c> $ toward $ <var:l2>$ . This line forwards the precondition $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \} $ toward $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule given by Hoare techniques . Advancing to the upcoming statement in the list of commands , we have the binding code \verb | <var:l3> := <var:l2> * <var:c> ; | . This code transfers $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \} $ as the condition $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \land <var:l3> = <var:F> ^ <nat:3> \} $ . Stepping forward , the line \verb | <var:l0> := <nat:2> ; | . This command forwards $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \land <var:l3> = <var:F> ^ <nat:3> \} $ to $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \land <var:l3> = <var:F> ^ <nat:3> \land <var:l0> = <nat:2> \} $ . This is rigorously given by the assignment scheme in usual Hoare logic . Focusing on the upcoming piece of code found in our code , we have the assignment line \verb | <var:l2> := <var:l2> * <nat:4> ; | . This line forwards $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \land <var:l3> = <var:F> ^ <nat:3> \land <var:l0> = <nat:2> \} $ to $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:l3> = <var:F> ^ <nat:3> \land <var:l0> = <nat:2> \} $ . Moving on to the next step , the assignment statement binding $ <var:l3> * <nat:8> $ to $ <var:l3>$ . This moves the condition $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:l3> = <var:F> ^ <nat:3> \land <var:l0> = <nat:2> \} $ toward $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:l3> = <nat:8> \cdot <var:F> ^ <nat:3> \land <var:l0> = <nat:2> \} $ . Keeping momentum , the variable binding code binding $ <var:l3$ toward $ <var:D>$ . This command takes $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:l3> = <nat:8> \cdot <var:F> ^ <nat:3> \land <var:l0> = <nat:2> \} $ toward the postcondition $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:l0> = <nat:2> \land <var:D> = <nat:8> \cdot <var:F> ^ <nat:3> \} $ . This is ensured by the assignment rule defined by typical Hoare reasoning . Moving on to the subsequent statement in the series of instructions , we see the assignment statement assigning $ <var:D> + <var:l2$ as $ <var:D>$ . This transfers $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:l0> = <nat:2> \land <var:D> = <nat:8> \cdot <var:F> ^ <nat:3> \} $ into the condition $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l0> = <nat:2> \land <var:D> = <nat:8> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> \} $ . This is rigorously given through the assignment inference rule given in typical Hoare logic . Moving forward to the next piece of code in our series of instructions , we have the command defining $ <var:D> + <var:l0$ as $ <var:D>$ . This redefines the condition $ \{ <var:c> = <var:F> \land <var:l1> = <var:F> \land <var:l0> = <nat:2> \land <var:D> = <nat:8> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> \} $ toward the condition $ \{ <var:c> = <var:F> \land <var:D> = <nat:8> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:c> = <var:F> }} <var:l1> := <var:c> ; <var:l2> := <var:l1> * <var:c> ; <var:l3> := <var:l2> * <var:c> ; <var:l0> := <nat:2> ; <var:l2> := <var:l2> * <nat:4> ; <var:l3> := <var:l3> * <nat:8> ; <var:D> := <var:l3> <var:D> := <var:D> + <var:l2> <var:D> := <var:D> + <var:l0> {{ <var:D> = <nat:8> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:l1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:l1> = <var:F> /\ <var:l2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:l1> = <var:F> /\ <var:l2> = <var:F> ^ <nat:2> /\ <var:l3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:l1> = <var:F> /\ <var:l2> = <var:F> ^ <nat:2> /\ <var:l3> = <var:F> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:l1> = <var:F> /\ <var:l2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:l3> = <var:F> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:l1> = <var:F> /\ <var:l2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:F> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:l1> = <var:F> /\ <var:l2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:l0> = <nat:2> /\ <var:D> = <nat:8> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:l1> = <var:F> /\ <var:l0> = <nat:2> /\ <var:D> = <nat:8> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:D> = <nat:8> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 