\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:4> + <var:U> * <var:q> ; <var:U> := <nat:1> + <var:U> * <var:q> ; <var:U> := <nat:2> + <var:U> * <var:q> ; <var:U> := <var:U> * <var:q> ; <var:U> := <nat:3> + <var:U> * <var:q> ; <var:U> := <var:U> * <var:q> ; <var:U> := <nat:4> + <var:U> * <var:q> ; <var:U> := <nat:3> + <var:U> * <var:q> ; <var:U> := <var:U> * <var:q> ; <var:U> := <nat:2> + <var:U> * <var:q> ; <var:U> := <nat:2> + <var:U> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Allow for every $ <var:M> \in \mathbb{N} $ it to be that $ <var:q> = <var:M> $ before running this set of instructions , then we see $ <var:U> = <nat:3> \cdot <var:M> ^ <nat:11> + <nat:4> \cdot <var:M> ^ <nat:10> + <nat:1> \cdot <var:M> ^ <nat:9> + <nat:2> \cdot <var:M> ^ <nat:8> + <nat:3> \cdot <var:M> ^ <nat:6> + <nat:4> \cdot <var:M> ^ <nat:4> + <nat:3> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is accomplished through usual Hoare reasoning . Immediately after , we see \verb | { <var:q> = <var:M> } <var:U> := <nat:3> { <var:q> = <var:M> \land <var:U> = <nat:3> } | , \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> } <var:U> := <nat:4> + <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> + <nat:4> } | , \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> + <nat:4> } <var:U> := <nat:1> + <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:1> } | , \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:1> } <var:U> := <nat:2> + <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:2> } | , \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:2> } <var:U> := <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + } | and \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + } <var:U> := <nat:3> + <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:3> } | . This is guaranteed by the assignment inference rule from standard Hoare logic . Following , we have \verb | { <var:q> = <var:M> } <var:U> := <nat:3> { <var:q> = <var:M> \land <var:U> = <nat:3> } | , \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> } <var:U> := <nat:4> + <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> + <nat:4> } | , \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> + <nat:4> } <var:U> := <nat:1> + <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:1> } | , \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:1> } <var:U> := <nat:2> + <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:2> } | , \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:2> } <var:U> := <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + } | and \verb | { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + } <var:U> := <nat:3> + <var:U> * <var:q> { <var:q> = <var:M> \land <var:U> = <nat:3> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:3> } | . This is sound by the variable binding law defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <nat:4> + <var:U> * <var:q> ; <var:U> := <nat:1> + <var:U> * <var:q> ; <var:U> := <nat:2> + <var:U> * <var:q> ; <var:U> := <var:U> * <var:q> ; <var:U> := <nat:3> + <var:U> * <var:q> ; <var:U> := <var:U> * <var:q> ; <var:U> := <nat:4> + <var:U> * <var:q> ; <var:U> := <nat:3> + <var:U> * <var:q> ; <var:U> := <var:U> * <var:q> ; <var:U> := <nat:2> + <var:U> * <var:q> ; <var:U> := <nat:2> + <var:U> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:q> = <var:M> }} <def:poly> {{ <var:U> = <nat:3> * <var:M> ^ <nat:11> + <nat:4> * <var:M> ^ <nat:10> + <nat:1> * <var:M> ^ <nat:9> + <nat:2> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:1> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:1> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:9> + <nat:4> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:10> + <nat:4> * <var:M> ^ <nat:9> + <nat:1> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:U> = <nat:3> * <var:M> ^ <nat:11> + <nat:4> * <var:M> ^ <nat:10> + <nat:1> * <var:M> ^ <nat:9> + <nat:2> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 