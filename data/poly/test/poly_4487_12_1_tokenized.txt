\begin{document} \begin{theorem} Consider a set of commands such that \begin{verbatim} <var:A1> := <var:B> ; <var:A2> := <var:A1> * <var:B> ; <var:A3> := <var:A2> * <var:B> ; <var:A4> := <var:A3> * <var:B> ; <var:A0> := <nat:2> ; <var:A2> := <var:A2> * <nat:3> ; <var:A3> := <var:A3> * <nat:4> ; <var:A4> := <var:A4> * <nat:3> ; <var:R> := <var:A4> <var:R> := <var:R> + <var:A3> <var:R> := <var:R> + <var:A2> <var:R> := <var:R> + <var:A0> \end{verbatim} Given $ <var:B> = <var:y> $ --- for all integers $ <var:y> $ --- prior to running our program , it follows that $ <var:R> = <nat:3> \times <var:y> ^ <nat:4> + <nat:4> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:2> $ when list of commands has exited . \end{theorem} \begin{proof} The course of logic for this list of commands is shown using this decorated segment of code . \begin{eqnarray} \{ <var:B> = <var:y> \} \\ <var:A1> := <var:B> ; \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \} \\ <var:A2> := <var:A1> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \} \\ <var:A4> := <var:A3> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A4> = <var:y> ^ <nat:4> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A4> = <var:y> ^ <nat:4> \land <var:A0> = <nat:2> \} \\ <var:A2> := <var:A2> * <nat:3> ; \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A4> = <var:y> ^ <nat:4> \land <var:A0> = <nat:2> \} \\ <var:A3> := <var:A3> * <nat:4> ; \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:A3> = <nat:4> \cdot <var:y> ^ <nat:3> \land <var:A4> = <var:y> ^ <nat:4> \land <var:A0> = <nat:2> \} \\ <var:A4> := <var:A4> * <nat:3> ; \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:A3> = <nat:4> \cdot <var:y> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:y> ^ <nat:4> \land <var:A0> = <nat:2> \} \\ <var:R> := <var:A4> \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:A3> = <nat:4> \cdot <var:y> ^ <nat:3> \land <var:A0> = <nat:2> \land <var:R> = <nat:3> \cdot <var:y> ^ <nat:4> \} \\ <var:R> := <var:R> + <var:A3> \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:A0> = <nat:2> \land <var:R> = <nat:3> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:A2> \\ \{ <var:B> = <var:y> \land <var:A1> = <var:y> \land <var:A0> = <nat:2> \land <var:R> = <nat:3> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:A0> \\ \{ <var:B> = <var:y> \land <var:R> = <nat:3> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:2> \} \end{eqnarray} Using typical Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <var:A4> : string := " <var:A4> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:B> = <var:y> }} <var:A1> := <var:B> ; <var:A2> := <var:A1> * <var:B> ; <var:A3> := <var:A2> * <var:B> ; <var:A4> := <var:A3> * <var:B> ; <var:A0> := <nat:2> ; <var:A2> := <var:A2> * <nat:3> ; <var:A3> := <var:A3> * <nat:4> ; <var:A4> := <var:A4> * <nat:3> ; <var:R> := <var:A4> <var:R> := <var:R> + <var:A3> <var:R> := <var:R> + <var:A2> <var:R> := <var:R> + <var:A0> {{ <var:R> = <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <var:y> ^ <nat:2> /\ <var:A3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <var:y> ^ <nat:2> /\ <var:A3> = <var:y> ^ <nat:3> /\ <var:A4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <var:y> ^ <nat:2> /\ <var:A3> = <var:y> ^ <nat:3> /\ <var:A4> = <var:y> ^ <nat:4> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:A3> = <var:y> ^ <nat:3> /\ <var:A4> = <var:y> ^ <nat:4> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:A3> = <nat:4> * <var:y> ^ <nat:3> /\ <var:A4> = <var:y> ^ <nat:4> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:A3> = <nat:4> * <var:y> ^ <nat:3> /\ <var:A4> = <nat:3> * <var:y> ^ <nat:4> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:A3> = <nat:4> * <var:y> ^ <nat:3> /\ <var:A0> = <nat:2> /\ <var:R> = <nat:3> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:A0> = <nat:2> /\ <var:R> = <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:A1> = <var:y> /\ <var:A0> = <nat:2> /\ <var:R> = <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:R> = <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 