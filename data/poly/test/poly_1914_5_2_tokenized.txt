\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <var:w> * <var:e> ; <var:w> := <nat:1> + <var:w> * <var:e> ; <var:w> := <var:w> * <var:e> ; <var:w> := <nat:4> + <var:w> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Allow it to hold that $ <var:e> = <var:Z> $ before evaluating the code segment , then we see $ <var:w> = <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> $ when code terminates . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions can be done with usual Hoare techniques . Moving forward to the proceeding lines seen in the code segment , we see \begin{verbatim} { <var:e> = <var:Z> } <var:w> := <nat:3> { <var:e> = <var:Z> \land <var:w> = <nat:3> } { <var:e> = <var:Z> \land <var:w> = <nat:3> } <var:w> := <var:w> * <var:e> { <var:e> = <var:Z> \land <var:w> = <nat:3> \times <var:Z> + } \end{verbatim} This is known to be sound through the variable update inference rule obtained from Hoare reasoning . Moving on to the subsequent commands contained in our segment of code , \begin{verbatim} { <var:e> = <var:Z> } <var:w> := <nat:3> { <var:e> = <var:Z> \land <var:w> = <nat:3> } { <var:e> = <var:Z> \land <var:w> = <nat:3> } <var:w> := <var:w> * <var:e> { <var:e> = <var:Z> \land <var:w> = <nat:3> \times <var:Z> + } \end{verbatim} Advancing to the next step , we see \begin{verbatim} { <var:e> = <var:Z> } <var:w> := <nat:3> { <var:e> = <var:Z> \land <var:w> = <nat:3> } \end{verbatim} This is ensured by the assignment law given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:3> ; <var:w> := <var:w> * <var:e> ; <var:w> := <nat:1> + <var:w> * <var:e> ; <var:w> := <var:w> * <var:e> ; <var:w> := <nat:4> + <var:w> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:e> = <var:Z> }} <def:poly> {{ <var:w> = <nat:3> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:w> = <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:w> = <nat:3> * <var:Z> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:w> = <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:w> = <nat:3> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 