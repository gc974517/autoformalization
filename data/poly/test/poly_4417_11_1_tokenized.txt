\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:B> ; <var:R2> := <var:R1> * <var:B> ; <var:R3> := <var:R2> * <var:B> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:5> ; <var:R2> := <var:R2> * <nat:3> ; <var:R3> := <var:R3> * <nat:9> ; <var:g> := <var:R3> <var:g> := <var:g> + <var:R2> <var:g> := <var:g> + <var:R1> <var:g> := <var:g> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:B> = <var:x> $ before evaluating this segment of code , it holds that $ <var:g> = <nat:9> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions is given using standard Hoare reasoning . Advancing on , we see the variable update command \verb | <var:R1> := <var:B> ; | . This advances the precondition $ \{ <var:B> = <var:x> \} $ as $ \{ <var:B> = <var:x> \land <var:R1> = <var:x> \} $ . Moving onward , the environment update statement \verb | <var:R2> := <var:R1> * <var:B> ; | . This transfers the precondition $ \{ <var:B> = <var:x> \land <var:R1> = <var:x> \} $ toward the postcondition $ \{ <var:B> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \} $ . This is given with the assignment rule defined in Hoare techniques . Stepping through , we have the binding line giving $ <var:R2> * <var:B> $ toward $ <var:R3>$ . This advances $ \{ <var:B> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \} $ toward the condition $ \{ <var:B> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \} $ . Going to the next step , we see the code defining $ <nat:3> $ as $ <var:R0>$ . This line redefines the condition $ \{ <var:B> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \} $ into $ \{ <var:B> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:3> \} $ . Taking another step toward the proceeding command in our segment of code , we have the variable assignmet command giving $ <var:R1> * <nat:5> $ into $ <var:R1>$ . This statement moves the condition $ \{ <var:B> = <var:x> \land <var:R1> = <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:3> \} $ toward the condition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:3> \} $ . Jumping to the proceeding step found in our set of instructions , we see the variable update command \verb | <var:R2> := <var:R2> * <nat:3> ; | . This command redefines the condition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R2> = <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:3> \} $ into the condition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:3> \} $ . Advancing , we have the environment update code \verb | <var:R3> := <var:R3> * <nat:9> ; | . This transfers $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:R3> = <var:x> ^ <nat:3> \land <var:R0> = <nat:3> \} $ as the postcondition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:x> ^ <nat:3> \land <var:R0> = <nat:3> \} $ . This is deduced through the assignment law found in Hoare logic . Focusing on the following step seen in our list of commands , the assignment code yielding $ <var:R3$ into $ <var:g>$ . This redefines the condition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:x> ^ <nat:3> \land <var:R0> = <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:R0> = <nat:3> \land <var:g> = <nat:9> \cdot <var:x> ^ <nat:3> \} $ . Observing the next piece of code seen in our set of commands , we have the variable assignmet line \verb | <var:g> := <var:g> + <var:R2> | . This line moves the condition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:R0> = <nat:3> \land <var:g> = <nat:9> \cdot <var:x> ^ <nat:3> \} $ into the condition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R0> = <nat:3> \land <var:g> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> \} $ . Moving on , we see the environment update line \verb | <var:g> := <var:g> + <var:R1> | . This takes the precondition $ \{ <var:B> = <var:x> \land <var:R1> = <nat:5> \cdot <var:x> \land <var:R0> = <nat:3> \land <var:g> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> \} $ into the postcondition $ \{ <var:B> = <var:x> \land <var:R0> = <nat:3> \land <var:g> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> \} $ . This is shown by the assignment law defined by standard Hoare reasoning . Honing in on the subsequent step found in the list of instructions , we have the code \verb | <var:g> := <var:g> + <var:R0> | . This line takes $ \{ <var:B> = <var:x> \land <var:R0> = <nat:3> \land <var:g> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> \} $ as $ \{ <var:B> = <var:x> \land <var:g> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> + <nat:3> \} $ . This is shown to be logically sound by the assignment rule of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:B> ; <var:R2> := <var:R1> * <var:B> ; <var:R3> := <var:R2> * <var:B> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:5> ; <var:R2> := <var:R2> * <nat:3> ; <var:R3> := <var:R3> * <nat:9> ; <var:g> := <var:R3> <var:g> := <var:g> + <var:R2> <var:g> := <var:g> + <var:R1> <var:g> := <var:g> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:B> = <var:x> }} <def:poly> {{ <var:g> = <nat:9> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <var:x> /\ <var:R2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <var:x> /\ <var:R2> = <var:x> ^ <nat:2> /\ <var:R3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <var:x> /\ <var:R2> = <var:x> ^ <nat:2> /\ <var:R3> = <var:x> ^ <nat:3> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <nat:5> * <var:x> /\ <var:R2> = <var:x> ^ <nat:2> /\ <var:R3> = <var:x> ^ <nat:3> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <nat:5> * <var:x> /\ <var:R2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:R3> = <var:x> ^ <nat:3> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <nat:5> * <var:x> /\ <var:R2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:x> ^ <nat:3> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <nat:5> * <var:x> /\ <var:R2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:R0> = <nat:3> /\ <var:g> = <nat:9> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R1> = <nat:5> * <var:x> /\ <var:R0> = <nat:3> /\ <var:g> = <nat:9> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:R0> = <nat:3> /\ <var:g> = <nat:9> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:g> = <nat:9> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 