\begin{document} \begin{theorem} We define a set of commands such that \begin{verbatim} <var:R1> := <var:N> ; <var:R2> := <var:R1> * <var:N> ; <var:R3> := <var:R2> * <var:N> ; <var:R4> := <var:R3> * <var:N> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:7> ; <var:R4> := <var:R4> * <nat:7> ; <var:F> := <var:R4> <var:F> := <var:F> + <var:R3> <var:F> := <var:F> + <var:R2> <var:F> := <var:F> + <var:R1> <var:F> := <var:F> + <var:R0> \end{verbatim} Allow that $ <var:N> = <var:Z> $ before executing this segment of code , then we have $ <var:F> = <nat:7> \times <var:Z> ^ <nat:4> + <nat:7> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:6> $ . \end{theorem} \begin{proof} See that the following decorated set of commands . \begin{eqnarray} \{ <var:N> = <var:Z> \} \\ <var:R1> := <var:N> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <var:Z> \} \\ <var:R2> := <var:R1> * <var:N> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:N> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \} \\ <var:R4> := <var:R3> * <var:N> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \land <var:R4> = <var:Z> ^ <nat:4> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \land <var:R4> = <var:Z> ^ <nat:4> \land <var:R0> = <nat:6> \} \\ <var:R1> := <var:R1> * <nat:4> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <nat:4> \cdot <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \land <var:R4> = <var:Z> ^ <nat:4> \land <var:R0> = <nat:6> \} \\ <var:R2> := <var:R2> * <nat:1> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <nat:4> \cdot <var:Z> \land <var:R2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \land <var:R4> = <var:Z> ^ <nat:4> \land <var:R0> = <nat:6> \} \\ <var:R3> := <var:R3> * <nat:7> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <nat:4> \cdot <var:Z> \land <var:R2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:R3> = <nat:7> \cdot <var:Z> ^ <nat:3> \land <var:R4> = <var:Z> ^ <nat:4> \land <var:R0> = <nat:6> \} \\ <var:R4> := <var:R4> * <nat:7> ; \\ \{ <var:N> = <var:Z> \land <var:R1> = <nat:4> \cdot <var:Z> \land <var:R2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:R3> = <nat:7> \cdot <var:Z> ^ <nat:3> \land <var:R4> = <nat:7> \cdot <var:Z> ^ <nat:4> \land <var:R0> = <nat:6> \} \\ <var:F> := <var:R4> \\ \{ <var:N> = <var:Z> \land <var:R1> = <nat:4> \cdot <var:Z> \land <var:R2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:R3> = <nat:7> \cdot <var:Z> ^ <nat:3> \land <var:R0> = <nat:6> \land <var:F> = <nat:7> \cdot <var:Z> ^ <nat:4> \} \\ <var:F> := <var:F> + <var:R3> \\ \{ <var:N> = <var:Z> \land <var:R1> = <nat:4> \cdot <var:Z> \land <var:R2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:R0> = <nat:6> \land <var:F> = <nat:7> \cdot <var:Z> ^ <nat:4> + <nat:7> \cdot <var:Z> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:R2> \\ \{ <var:N> = <var:Z> \land <var:R1> = <nat:4> \cdot <var:Z> \land <var:R0> = <nat:6> \land <var:F> = <nat:7> \cdot <var:Z> ^ <nat:4> + <nat:7> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:R1> \\ \{ <var:N> = <var:Z> \land <var:R0> = <nat:6> \land <var:F> = <nat:7> \cdot <var:Z> ^ <nat:4> + <nat:7> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> \} \\ <var:F> := <var:F> + <var:R0> \\ \{ <var:N> = <var:Z> \land <var:F> = <nat:7> \cdot <var:Z> ^ <nat:4> + <nat:7> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:6> \} \end{eqnarray} Using usual Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <var:R4> : string := " <var:R4> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:N> = <var:Z> }} <var:R1> := <var:N> ; <var:R2> := <var:R1> * <var:N> ; <var:R3> := <var:R2> * <var:N> ; <var:R4> := <var:R3> * <var:N> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:7> ; <var:R4> := <var:R4> * <nat:7> ; <var:F> := <var:R4> <var:F> := <var:F> + <var:R3> <var:F> := <var:F> + <var:R2> <var:F> := <var:F> + <var:R1> <var:F> := <var:F> + <var:R0> {{ <var:F> = <nat:7> * <var:Z> ^ <nat:4> + <nat:7> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> /\ <var:R4> = <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> /\ <var:R4> = <var:Z> ^ <nat:4> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <nat:4> * <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> /\ <var:R4> = <var:Z> ^ <nat:4> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <nat:4> * <var:Z> /\ <var:R2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> /\ <var:R4> = <var:Z> ^ <nat:4> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <nat:4> * <var:Z> /\ <var:R2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:R3> = <nat:7> * <var:Z> ^ <nat:3> /\ <var:R4> = <var:Z> ^ <nat:4> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <nat:4> * <var:Z> /\ <var:R2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:R3> = <nat:7> * <var:Z> ^ <nat:3> /\ <var:R4> = <nat:7> * <var:Z> ^ <nat:4> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <nat:4> * <var:Z> /\ <var:R2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:R3> = <nat:7> * <var:Z> ^ <nat:3> /\ <var:R0> = <nat:6> /\ <var:F> = <nat:7> * <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <nat:4> * <var:Z> /\ <var:R2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:R0> = <nat:6> /\ <var:F> = <nat:7> * <var:Z> ^ <nat:4> + <nat:7> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R1> = <nat:4> * <var:Z> /\ <var:R0> = <nat:6> /\ <var:F> = <nat:7> * <var:Z> ^ <nat:4> + <nat:7> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:R0> = <nat:6> /\ <var:F> = <nat:7> * <var:Z> ^ <nat:4> + <nat:7> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:F> = <nat:7> * <var:Z> ^ <nat:4> + <nat:7> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 