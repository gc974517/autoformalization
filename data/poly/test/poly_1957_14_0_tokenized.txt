\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:4> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:M> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:M> ; <var:t2> := <var:t2> * <var:M> ; <var:t3> := <nat:1> ; <var:t3> := <var:t3> * <var:M> ; <var:t3> := <var:t3> * <var:M> ; <var:t3> := <var:t3> * <var:M> ; <var:d> := <var:t3> ; <var:d> := <var:d> + <var:t2> ; <var:d> := <var:d> + <var:t1> ; <var:d> := <var:d> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:M> = <var:B> $ prior to running this segment of code , it follows that we have $ <var:d> = <nat:1> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:4> $ . \end{theorem} \begin{proof} The argument for the list of commands can be done using Hoare reasoning . Observing the following steps contained in the series of commands , we have \begin{eqnarray} \{ <var:M> = <var:B> \} \, <var:t0> := <nat:4> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \} \, <var:t1> := <nat:4> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \} \, <var:t1> := <var:t1> * <var:M> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \} \, <var:t2> := <nat:1> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \} \, <var:t2> := <var:t2> * <var:M> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> \} \, <var:t2> := <var:t2> * <var:M> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \} \, <var:t3> := <nat:1> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:t3> = <nat:1> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:t3> = <nat:1> \} \, <var:t3> := <var:t3> * <var:M> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:B> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:B> \} \, <var:t3> := <var:t3> * <var:M> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:B> ^ <nat:2> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:B> ^ <nat:2> \} \, <var:t3> := <var:t3> * <var:M> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:B> ^ <nat:3> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:B> ^ <nat:3> \} \, <var:d> := <var:t3> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:d> = <nat:1> \cdot <var:B> ^ <nat:3> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:t2> = <nat:1> \cdot <var:B> ^ <nat:2> \land <var:d> = <nat:1> \cdot <var:B> ^ <nat:3> \} \, <var:d> := <var:d> + <var:t2> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:d> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> \} \\ \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \cdot <var:B> \land <var:d> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> \} \, <var:d> := <var:d> + <var:t1> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \land <var:d> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> \} \end{eqnarray} Stepping forward , \begin{eqnarray} \{ <var:M> = <var:B> \} \, <var:t0> := <nat:4> \, \{ <var:M> = <var:B> \land <var:t0> = <nat:4> \} \end{eqnarray} This is guaranteed using the law found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t0> := <nat:4> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:M> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:M> ; <var:t2> := <var:t2> * <var:M> ; <var:t3> := <nat:1> ; <var:t3> := <var:t3> * <var:M> ; <var:t3> := <var:t3> * <var:M> ; <var:t3> := <var:t3> * <var:M> ; <var:d> := <var:t3> ; <var:d> := <var:d> + <var:t2> ; <var:d> := <var:d> + <var:t1> ; <var:d> := <var:d> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:M> = <var:B> }} <def:poly> {{ <var:d> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:t2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:t2> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:t2> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:t2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:t3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:t2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:t3> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:t2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:t3> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:t2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:t3> = <nat:1> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:t2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:d> = <nat:1> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:B> /\ <var:d> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:t0> = <nat:4> /\ <var:d> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:d> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 