\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:9> ; <var:G1> := <var:G1> * <var:Q> ; <var:f> := <var:G1> ; <var:f> := <var:f> + <var:G0> \end{verbatim} Given it to hold that $ <var:Q> = <var:b> $ before the execution of our program it follows that we see $ <var:f> = <nat:9> \times <var:b> + <nat:4> $ after list of instructions finishes . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:Q> = <var:b> \} \\ <var:G0> := <nat:4> ; \\ \{ <var:Q> = <var:b> \land <var:G0> = <nat:4> \} \\ <var:G1> := <nat:9> ; \\ \{ <var:Q> = <var:b> \land <var:G0> = <nat:4> \land <var:G1> = <nat:9> \} \\ <var:G1> := <var:G1> * <var:Q> ; \\ \{ <var:Q> = <var:b> \land <var:G0> = <nat:4> \land <var:G1> = <nat:9> \cdot <var:b> \} \end{eqnarray} Allowing executing our code results in : \begin{eqnarray} <var:f> := <var:G1> ; \\ \{ <var:Q> = <var:b> \land <var:G0> = <nat:4> \land <var:f> = <nat:9> \cdot <var:b> \} \\ <var:f> := <var:f> + <var:G0> \\ \{ <var:Q> = <var:b> \land <var:f> = <nat:9> \cdot <var:b> + <nat:4> \} \end{eqnarray} Considering the above , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Q> = <var:b> }} <var:G0> := <nat:4> ; <var:G1> := <nat:9> ; <var:G1> := <var:G1> * <var:Q> ; <var:f> := <var:G1> ; <var:f> := <var:f> + <var:G0> {{ <var:f> = <nat:9> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G0> = <nat:4> /\ <var:f> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:f> = <nat:9> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 