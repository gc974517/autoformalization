\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:H> ; <var:g2> := <var:g1> * <var:H> ; <var:g3> := <var:g2> * <var:H> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:4> ; <var:g3> := <var:g3> * <nat:4> ; <var:D> := <var:g3> <var:D> := <var:D> + <var:g2> <var:D> := <var:D> + <var:g1> <var:D> := <var:D> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:H> = <var:t> $ ahead of interpreting this segment of code , it holds that we see $ <var:D> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment is given through usual Hoare techniques . Now , we see the binding code \verb | <var:g1> := <var:H> ; | . This transfers the precondition $ \{ <var:H> = <var:t> \} $ as the condition $ \{ <var:H> = <var:t> \land <var:g1> = <var:t> \} $ . Keeping momentum , the variable update code \verb | <var:g2> := <var:g1> * <var:H> ; | . This moves the precondition $ \{ <var:H> = <var:t> \land <var:g1> = <var:t> \} $ into the condition $ \{ <var:H> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \} $ . This is rigorously given using the assignment rule defined in typical Hoare reasoning . Looking at the following line of code found in our code , the variable assignmet statement giving $ <var:g2> * <var:H> $ into $ <var:g3>$ . This statement moves the condition $ \{ <var:H> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \} $ toward the condition $ \{ <var:H> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \} $ . This is rigorously given with the assignment inference rule defined in usual Hoare logic . After , the variable assignmet command binding $ <nat:1> $ toward $ <var:g0>$ . This statement takes the precondition $ \{ <var:H> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \} $ as $ \{ <var:H> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:1> \} $ . Going forward , we see the statement yielding $ <var:g1> * <nat:4> $ into $ <var:g1>$ . This redefines the precondition $ \{ <var:H> = <var:t> \land <var:g1> = <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:1> \} $ as the postcondition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:1> \} $ . Stepping through , we see the command \verb | <var:g2> := <var:g2> * <nat:4> ; | . This statement moves the condition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g2> = <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:1> \} $ as $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g2> = <nat:4> * <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:1> \} $ . This is known to be sound through the assignment rule of Hoare logic . Jumping to the proceeding bit of code found in our code , we have the variable binding command giving $ <var:g3> * <nat:4> $ toward $ <var:g3>$ . This command takes the precondition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g2> = <nat:4> * <var:t> ^ <nat:2> \land <var:g3> = <var:t> ^ <nat:3> \land <var:g0> = <nat:1> \} $ into the condition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g2> = <nat:4> * <var:t> ^ <nat:2> \land <var:g3> = <nat:4> * <var:t> ^ <nat:3> \land <var:g0> = <nat:1> \} $ . This is deduced with the assignment law defined by standard Hoare techniques . Moving forward to the subsequent line of code contained in the set of commands , we see the variable binding line giving $ <var:g3$ as $ <var:D>$ . This transfers the precondition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g2> = <nat:4> * <var:t> ^ <nat:2> \land <var:g3> = <nat:4> * <var:t> ^ <nat:3> \land <var:g0> = <nat:1> \} $ as the condition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g2> = <nat:4> * <var:t> ^ <nat:2> \land <var:g0> = <nat:1> \land <var:D> = <nat:4> * <var:t> ^ <nat:3> \} $ . This is guaranteed using the assignment inference rule of standard Hoare logic . Keeping momentum , we have the binding statement \verb | <var:D> := <var:D> + <var:g2> | . This advances the precondition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g2> = <nat:4> * <var:t> ^ <nat:2> \land <var:g0> = <nat:1> \land <var:D> = <nat:4> * <var:t> ^ <nat:3> \} $ as the postcondition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g0> = <nat:1> \land <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> \} $ . This is deduced with the assignment scheme defined by typical Hoare reasoning . Advancing to the next step , we have the variable binding line yielding $ <var:D> + <var:g1$ toward $ <var:D>$ . This forwards the precondition $ \{ <var:H> = <var:t> \land <var:g1> = <nat:4> * <var:t> \land <var:g0> = <nat:1> \land <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> \} $ to $ \{ <var:H> = <var:t> \land <var:g0> = <nat:1> \land <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> \} $ . This is shown with the assignment inference rule found in standard Hoare logic . Looking at the proceeding command seen in our code segment , we see the variable binding command \verb | <var:D> := <var:D> + <var:g0> | . This code advances the precondition $ \{ <var:H> = <var:t> \land <var:g0> = <nat:1> \land <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> \} $ to the condition $ \{ <var:H> = <var:t> \land <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:H> ; <var:g2> := <var:g1> * <var:H> ; <var:g3> := <var:g2> * <var:H> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:4> ; <var:g3> := <var:g3> * <nat:4> ; <var:D> := <var:g3> <var:D> := <var:D> + <var:g2> <var:D> := <var:D> + <var:g1> <var:D> := <var:D> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:H> = <var:t> }} <def:poly> {{ <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <var:t> /\ <var:g2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <var:t> /\ <var:g2> = <var:t> ^ <nat:2> /\ <var:g3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <var:t> /\ <var:g2> = <var:t> ^ <nat:2> /\ <var:g3> = <var:t> ^ <nat:3> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g2> = <var:t> ^ <nat:2> /\ <var:g3> = <var:t> ^ <nat:3> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:g3> = <var:t> ^ <nat:3> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:g3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:g0> = <nat:1> /\ <var:D> = <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g1> = <nat:4> * <var:t> /\ <var:g0> = <nat:1> /\ <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:g0> = <nat:1> /\ <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:D> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 