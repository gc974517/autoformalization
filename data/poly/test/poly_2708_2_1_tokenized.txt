\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:2> ; <var:M> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing , letting positive coefficients $ <var:n> $ , it to be that $ <var:z> = <var:n> $ before the evaluation of our series of instructions , then we have $ <var:M> = <nat:2> $ when segment of code terminates . \end{theorem} \begin{proof} The method of proof for the code can be seen by Hoare techniques . Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:z> = <var:n> \} & <var:I0> := <nat:2> & \{ <var:z> = <var:n> \land <var:I0> = <nat:2> \} \\ \{ <var:z> = <var:n> \land <var:I0> = <nat:2> \} & <var:M> := <var:I0& \{ <var:z> = <var:n> \land <var:M> = <nat:2> \} \end{tabular} This is given through the variable binding scheme of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:2> ; <var:M> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:z> = <var:n> }} <def:poly> {{ <var:M> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:M> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 