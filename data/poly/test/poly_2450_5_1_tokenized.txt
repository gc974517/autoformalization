\begin{document} \begin{theorem} Consider a code as follows \begin{verbatim} <var:L1> := <var:l> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:2> ; <var:k> := <var:L1> <var:k> := <var:k> + <var:L0> \end{verbatim} Assuming --- with some natural numbers $ <var:A> $ --- it to hold that $ <var:l> = <var:A> $ prior to interpreting this set of commands , it must be that $ <var:k> = <nat:2> \cdot <var:A> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning returns : \begin{eqnarray} \{ <var:l> = <var:A> \} \\ <var:L1> := <var:l> ; \\ \{ <var:l> = <var:A> \land <var:L1> = <var:A> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:l> = <var:A> \land <var:L1> = <var:A> \land <var:L0> = <nat:4> \} \\ <var:L1> := <var:L1> * <nat:2> ; \\ \{ <var:l> = <var:A> \land <var:L1> = <nat:2> * <var:A> \land <var:L0> = <nat:4> \} \\ <var:k> := <var:L1> \\ \{ <var:l> = <var:A> \land <var:L0> = <nat:4> \land <var:k> = <nat:2> * <var:A> \} \\ <var:k> := <var:k> + <var:L0> \\ \{ <var:l> = <var:A> \land <var:k> = <nat:2> * <var:A> + <nat:4> \} \end{eqnarray} Given the preceding argument , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:l> = <var:A> }} <var:L1> := <var:l> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:2> ; <var:k> := <var:L1> <var:k> := <var:k> + <var:L0> {{ <var:k> = <nat:2> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:L1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:L1> = <var:A> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:L1> = <nat:2> * <var:A> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:L0> = <nat:4> /\ <var:k> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:A> /\ <var:k> = <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 