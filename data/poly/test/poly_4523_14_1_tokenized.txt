\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:q1> := <var:n> ; <var:q2> := <var:q1> * <var:n> ; <var:q3> := <var:q2> * <var:n> ; <var:q4> := <var:q3> * <var:n> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:2> ; <var:q3> := <var:q3> * <nat:1> ; <var:q4> := <var:q4> * <nat:7> ; <var:S> := <var:q4> <var:S> := <var:S> + <var:q3> <var:S> := <var:S> + <var:q2> <var:S> := <var:S> + <var:q1> <var:S> := <var:S> + <var:q0> \end{verbatim} Given --- given natural numbers $ <var:U> $ --- $ <var:n> = <var:U> $ prior to evaluating our set of instructions then $ <var:S> = <nat:7> \cdot <var:U> ^ <nat:4> + <nat:1> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:3> $ once code is done . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:n> = <var:U> \} \\ <var:q1> := <var:n> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <var:U> \} \\ <var:q2> := <var:q1> * <var:n> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \} \\ <var:q3> := <var:q2> * <var:n> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \} \\ <var:q4> := <var:q3> * <var:n> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q4> = <var:U> ^ <nat:4> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q4> = <var:U> ^ <nat:4> \land <var:q0> = <nat:3> \} \\ <var:q1> := <var:q1> * <nat:4> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q4> = <var:U> ^ <nat:4> \land <var:q0> = <nat:3> \} \\ <var:q2> := <var:q2> * <nat:2> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q4> = <var:U> ^ <nat:4> \land <var:q0> = <nat:3> \} \\ <var:q3> := <var:q3> * <nat:1> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:1> \times <var:U> ^ <nat:3> \land <var:q4> = <var:U> ^ <nat:4> \land <var:q0> = <nat:3> \} \\ <var:q4> := <var:q4> * <nat:7> ; \\ \{ <var:n> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:1> \times <var:U> ^ <nat:3> \land <var:q4> = <nat:7> \times <var:U> ^ <nat:4> \land <var:q0> = <nat:3> \} \\ <var:S> := <var:q4> \\ \{ <var:n> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:1> \times <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \land <var:S> = <nat:7> \times <var:U> ^ <nat:4> \} \\ <var:S> := <var:S> + <var:q3> \\ \{ <var:n> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q0> = <nat:3> \land <var:S> = <nat:7> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:q2> \\ \{ <var:n> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q0> = <nat:3> \land <var:S> = <nat:7> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:q1> \\ \{ <var:n> = <var:U> \land <var:q0> = <nat:3> \land <var:S> = <nat:7> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> \} \\ <var:S> := <var:S> + <var:q0> \\ \{ <var:n> = <var:U> \land <var:S> = <nat:7> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:3> \} \end{eqnarray} As a consequence , the set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <var:q4> : string := " <var:q4> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:n> = <var:U> }} <var:q1> := <var:n> ; <var:q2> := <var:q1> * <var:n> ; <var:q3> := <var:q2> * <var:n> ; <var:q4> := <var:q3> * <var:n> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:2> ; <var:q3> := <var:q3> * <nat:1> ; <var:q4> := <var:q4> * <nat:7> ; <var:S> := <var:q4> <var:S> := <var:S> + <var:q3> <var:S> := <var:S> + <var:q2> <var:S> := <var:S> + <var:q1> <var:S> := <var:S> + <var:q0> {{ <var:S> = <nat:7> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <var:U> /\ <var:q2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <var:U> /\ <var:q2> = <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <var:U> /\ <var:q2> = <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> /\ <var:q4> = <var:U> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <var:U> /\ <var:q2> = <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> /\ <var:q4> = <var:U> ^ <nat:4> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> /\ <var:q4> = <var:U> ^ <nat:4> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> /\ <var:q4> = <var:U> ^ <nat:4> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:U> ^ <nat:3> /\ <var:q4> = <var:U> ^ <nat:4> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:U> ^ <nat:3> /\ <var:q4> = <nat:7> * <var:U> ^ <nat:4> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:U> ^ <nat:3> /\ <var:q0> = <nat:3> /\ <var:S> = <nat:7> * <var:U> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:q0> = <nat:3> /\ <var:S> = <nat:7> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q0> = <nat:3> /\ <var:S> = <nat:7> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:q0> = <nat:3> /\ <var:S> = <nat:7> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:S> = <nat:7> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 