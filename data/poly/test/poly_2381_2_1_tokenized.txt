\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:7> ; <var:l> := <var:m0> \end{verbatim} Allowing it to hold that $ <var:r> = <var:t> $ prior to running the segment of code , then $ <var:l> = <nat:7> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions is done with Hoare reasoning . Honing in on the following commands contained in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:r> = <var:t> \} & <var:m0> := <nat:7> & \{ <var:r> = <var:t> \land <var:m0> = <nat:7> \} \\ \{ <var:r> = <var:t> \land <var:m0> = <nat:7> \} & <var:l> := <var:m0& \{ <var:r> = <var:t> \land <var:l> = <nat:7> \} \end{tabular} This is guaranteed through the variable binding inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <var:m0> := <nat:7> ; <var:l> := <var:m0> {{ <var:l> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:l> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 