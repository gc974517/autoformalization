\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:Z> ; <var:x2> := <var:x1> * <var:Z> ; <var:x3> := <var:x2> * <var:Z> ; <var:x4> := <var:x3> * <var:Z> ; <var:x0> := <nat:1> ; <var:x2> := <var:x2> * <nat:2> ; <var:x4> := <var:x4> * <nat:4> ; <var:R> := <var:x4> <var:R> := <var:R> + <var:x2> <var:R> := <var:R> + <var:x0> \end{verbatim} Assuming ( given any whole numbers $ <var:W> $ ) $ <var:Z> = <var:W> $ before the execution of our segment of code it must be that we have $ <var:R> = <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code is done through the below decorated segment of code . \begin{eqnarray} \{ <var:Z> = <var:W> \} \\ <var:x1> := <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \} \\ <var:x2> := <var:x1> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \} \\ <var:x4> := <var:x3> * <var:Z> ; \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x4> = <var:W> ^ <nat:4> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x4> = <var:W> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x2> := <var:x2> * <nat:2> ; \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <nat:2> \cdot <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x4> = <var:W> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x4> := <var:x4> * <nat:4> ; \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <nat:2> \cdot <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x4> = <nat:4> \cdot <var:W> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:R> := <var:x4> \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <nat:2> \cdot <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x0> = <nat:1> \land <var:R> = <nat:4> \cdot <var:W> ^ <nat:4> \} \\ <var:R> := <var:R> + <var:x2> \\ \{ <var:Z> = <var:W> \land <var:x1> = <var:W> \land <var:x0> = <nat:1> \land <var:R> = <nat:4> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:x0> \\ \{ <var:Z> = <var:W> \land <var:R> = <nat:4> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <var:x4> : string := " <var:x4> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Z> = <var:W> }} <var:x1> := <var:Z> ; <var:x2> := <var:x1> * <var:Z> ; <var:x3> := <var:x2> * <var:Z> ; <var:x4> := <var:x3> * <var:Z> ; <var:x0> := <nat:1> ; <var:x2> := <var:x2> * <nat:2> ; <var:x4> := <var:x4> * <nat:4> ; <var:R> := <var:x4> <var:R> := <var:R> + <var:x2> <var:R> := <var:R> + <var:x0> {{ <var:R> = <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x4> = <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x4> = <var:W> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x4> = <var:W> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x4> = <nat:4> * <var:W> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x0> = <nat:1> /\ <var:R> = <nat:4> * <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:x1> = <var:W> /\ <var:x0> = <nat:1> /\ <var:R> = <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:R> = <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 