\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S> := <nat:4> ; <var:S> := <var:S> * <var:j> ; <var:S> := <nat:4> + <var:S> * <var:j> ; <var:S> := <nat:1> + <var:S> * <var:j> ; <var:S> := <nat:1> + <var:S> * <var:j> ; <var:S> := <nat:4> + <var:S> * <var:j> ; <var:S> := <var:S> * <var:j> ; <var:S> := <nat:3> + <var:S> * <var:j> ; <var:S> := <nat:3> + <var:S> * <var:j> ; <var:S> := <nat:1> + <var:S> * <var:j> ; <var:S> := <nat:1> + <var:S> * <var:j> ; <var:S> := <nat:3> + <var:S> * <var:j> ; <var:S> := <nat:2> + <var:S> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Assuming it to be that $ <var:j> = <var:b> $ ahead of the execution of this program then we see $ <var:S> = <nat:4> \cdot <var:b> ^ <nat:12> + <nat:4> \cdot <var:b> ^ <nat:10> + <nat:1> \cdot <var:b> ^ <nat:9> + <nat:1> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:3> \cdot <var:b> ^ <nat:5> + <nat:3> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our program can be given with the below decorated code . \begin{eqnarray} \{ <var:j> = <var:b> \} \\ <var:S> := <nat:4> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> \} \\ <var:S> := <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> + \} \\ <var:S> := <nat:4> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:2> + <nat:4> \} \\ <var:S> := <nat:1> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:1> \} \\ <var:S> := <nat:1> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> \} \\ <var:S> := <nat:4> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> \} \\ <var:S> := <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + \} \\ <var:S> := <nat:3> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> \} \\ <var:S> := <nat:3> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:3> \} \\ <var:S> := <nat:1> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> \} \\ <var:S> := <nat:1> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> \} \\ <var:S> := <nat:3> + <var:S> * <var:j> ; \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:9> + <nat:1> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> \} \\ <var:S> := <nat:2> + <var:S> * <var:j> \\ \{ <var:j> = <var:b> \land <var:S> = <nat:4> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:10> + <nat:1> * <var:b> ^ <nat:9> + <nat:1> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> \} \end{eqnarray} Using usual Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:4> ; <var:S> := <var:S> * <var:j> ; <var:S> := <nat:4> + <var:S> * <var:j> ; <var:S> := <nat:1> + <var:S> * <var:j> ; <var:S> := <nat:1> + <var:S> * <var:j> ; <var:S> := <nat:4> + <var:S> * <var:j> ; <var:S> := <var:S> * <var:j> ; <var:S> := <nat:3> + <var:S> * <var:j> ; <var:S> := <nat:3> + <var:S> * <var:j> ; <var:S> := <nat:1> + <var:S> * <var:j> ; <var:S> := <nat:1> + <var:S> * <var:j> ; <var:S> := <nat:3> + <var:S> * <var:j> ; <var:S> := <nat:2> + <var:S> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:j> = <var:b> }} <def:poly> {{ <var:S> = <nat:4> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:10> + <nat:1> * <var:b> ^ <nat:9> + <nat:1> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:9> + <nat:1> * <var:b> ^ <nat:8> + <nat:1> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:S> = <nat:4> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:10> + <nat:1> * <var:b> ^ <nat:9> + <nat:1> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 