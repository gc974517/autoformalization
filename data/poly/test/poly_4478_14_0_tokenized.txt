\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:9> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:J> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:J> ; <var:n2> := <var:n2> * <var:J> ; <var:n3> := <nat:3> ; <var:n3> := <var:n3> * <var:J> ; <var:n3> := <var:n3> * <var:J> ; <var:n3> := <var:n3> * <var:J> ; <var:Q> := <var:n3> ; <var:Q> := <var:Q> + <var:n2> ; <var:Q> := <var:Q> + <var:n1> ; <var:Q> := <var:Q> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allowing it to be that $ <var:J> = <var:Y> $ before the evaluation of this set of instructions , then we see $ <var:Q> = <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:5> \cdot <var:Y> + <nat:9> $ . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:J> = <var:Y> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \} \\ <var:n1> := <nat:5> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> \} \\ <var:n1> := <var:n1> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \} \\ <var:n2> := <nat:4> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:n2> = <nat:4> \} \\ <var:n2> := <var:n2> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:n2> = <nat:4> * <var:Y> \} \\ <var:n2> := <var:n2> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:n2> = <nat:4> * <var:Y> ^ <nat:2> \} \\ <var:n3> := <nat:3> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:n2> = <nat:4> * <var:Y> ^ <nat:2> \land <var:n3> = <nat:3> \} \\ <var:n3> := <var:n3> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:n2> = <nat:4> * <var:Y> ^ <nat:2> \land <var:n3> = <nat:3> * <var:Y> \} \\ <var:n3> := <var:n3> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:n2> = <nat:4> * <var:Y> ^ <nat:2> \land <var:n3> = <nat:3> * <var:Y> ^ <nat:2> \} \\ <var:n3> := <var:n3> * <var:J> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:n2> = <nat:4> * <var:Y> ^ <nat:2> \land <var:n3> = <nat:3> * <var:Y> ^ <nat:3> \} \\ <var:Q> := <var:n3> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:n2> = <nat:4> * <var:Y> ^ <nat:2> \land <var:Q> = <nat:3> * <var:Y> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:n2> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:5> * <var:Y> \land <var:Q> = <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> \} \end{eqnarray} Furthering executing the list of instructions returns : \begin{eqnarray} <var:Q> := <var:Q> + <var:n1> ; \\ \{ <var:J> = <var:Y> \land <var:n0> = <nat:9> \land <var:Q> = <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> \} \\ <var:Q> := <var:Q> + <var:n0> \\ \{ <var:J> = <var:Y> \land <var:Q> = <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> + <nat:9> \} \end{eqnarray} Thus , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n0> := <nat:9> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:J> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:J> ; <var:n2> := <var:n2> * <var:J> ; <var:n3> := <nat:3> ; <var:n3> := <var:n3> * <var:J> ; <var:n3> := <var:n3> * <var:J> ; <var:n3> := <var:n3> * <var:J> ; <var:Q> := <var:n3> ; <var:Q> := <var:Q> + <var:n2> ; <var:Q> := <var:Q> + <var:n1> ; <var:Q> := <var:Q> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:J> = <var:Y> }} <def:poly> {{ <var:Q> = <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:n2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:n2> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:n2> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:n2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:n3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:n2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:n3> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:n2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:n3> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:n2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:n3> = <nat:3> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:n2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:Q> = <nat:3> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:5> * <var:Y> /\ <var:Q> = <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:n0> = <nat:9> /\ <var:Q> = <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:Q> = <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 