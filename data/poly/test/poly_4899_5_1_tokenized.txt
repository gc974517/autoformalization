\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:W> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:5> ; <var:f> := <var:m1> <var:f> := <var:f> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:W> = <var:A> $ , taking positive integer coefficients $ <var:A> $ , prior to interpreting the code segment , it holds that we have $ <var:f> = <nat:5> \cdot <var:A> + <nat:7> $ when set of commands executes . \end{theorem} \begin{proof} Applying usual Hoare logic gives : \begin{eqnarray} \{ <var:W> = <var:A> \} \\ <var:m1> := <var:W> ; \\ \{ <var:W> = <var:A> \land <var:m1> = <var:A> \} \\ <var:m0> := <nat:7> ; \\ \{ <var:W> = <var:A> \land <var:m1> = <var:A> \land <var:m0> = <nat:7> \} \end{eqnarray} Continuing the execution of our series of commands returns : \begin{eqnarray} <var:m1> := <var:m1> * <nat:5> ; \\ \{ <var:W> = <var:A> \land <var:m1> = <nat:5> * <var:A> \land <var:m0> = <nat:7> \} \\ <var:f> := <var:m1> \\ \{ <var:W> = <var:A> \land <var:m0> = <nat:7> \land <var:f> = <nat:5> * <var:A> \} \\ <var:f> := <var:f> + <var:m0> \\ \{ <var:W> = <var:A> \land <var:f> = <nat:5> * <var:A> + <nat:7> \} \end{eqnarray} As a consequence , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:W> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:5> ; <var:f> := <var:m1> <var:f> := <var:f> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:W> = <var:A> }} <def:poly> {{ <var:f> = <nat:5> * <var:A> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:m1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:m1> = <var:A> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:m1> = <nat:5> * <var:A> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:m0> = <nat:7> /\ <var:f> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:f> = <nat:5> * <var:A> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 