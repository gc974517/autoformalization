\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:N> ; <var:c0> := <nat:9> ; <var:c1> := <var:c1> * <nat:1> ; <var:r> := <var:c1> <var:r> := <var:r> + <var:c0> \end{verbatim} Allowing it to be that $ <var:N> = <var:M> $ ahead of running our code segment it follows that we have $ <var:r> = <nat:1> \cdot <var:M> + <nat:9> $ when code terminates . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:N> = <var:M> \} \\ <var:c1> := <var:N> ; \\ \{ <var:N> = <var:M> \land <var:c1> = <var:M> \} \\ <var:c0> := <nat:9> ; \\ \{ <var:N> = <var:M> \land <var:c1> = <var:M> \land <var:c0> = <nat:9> \} \\ <var:c1> := <var:c1> * <nat:1> ; \\ \{ <var:N> = <var:M> \land <var:c1> = <nat:1> \cdot <var:M> \land <var:c0> = <nat:9> \} \\ <var:r> := <var:c1> \\ \{ <var:N> = <var:M> \land <var:c0> = <nat:9> \land <var:r> = <nat:1> \cdot <var:M> \} \\ <var:r> := <var:r> + <var:c0> \\ \{ <var:N> = <var:M> \land <var:r> = <nat:1> \cdot <var:M> + <nat:9> \} \end{eqnarray} Given the above , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:N> = <var:M> }} <var:c1> := <var:N> ; <var:c0> := <nat:9> ; <var:c1> := <var:c1> * <nat:1> ; <var:r> := <var:c1> <var:r> := <var:r> + <var:c0> {{ <var:r> = <nat:1> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:c1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:c1> = <var:M> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:c1> = <nat:1> * <var:M> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:c0> = <nat:9> /\ <var:r> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:r> = <nat:1> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 