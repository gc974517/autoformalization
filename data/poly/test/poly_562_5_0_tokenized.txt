\begin{document} \begin{theorem} We define the following set of instructions as \begin{verbatim} <var:v0> := <nat:3> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:i> ; <var:c> := <var:v1> ; <var:c> := <var:c> + <var:v0> \end{verbatim} Given given every whole numbers $ <var:H> $ it to hold that $ <var:i> = <var:H> $ before the execution of the segment of code it holds that we see $ <var:c> = <nat:3> \times <var:H> + <nat:3> $ . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:i> = <var:H> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:i> = <var:H> \land <var:v0> = <nat:3> \} \\ <var:v1> := <nat:3> ; \\ \{ <var:i> = <var:H> \land <var:v0> = <nat:3> \land <var:v1> = <nat:3> \} \\ <var:v1> := <var:v1> * <var:i> ; \\ \{ <var:i> = <var:H> \land <var:v0> = <nat:3> \land <var:v1> = <nat:3> * <var:H> \} \\ <var:c> := <var:v1> ; \\ \{ <var:i> = <var:H> \land <var:v0> = <nat:3> \land <var:c> = <nat:3> * <var:H> \} \\ <var:c> := <var:c> + <var:v0> \\ \{ <var:i> = <var:H> \land <var:c> = <nat:3> * <var:H> + <nat:3> \} \end{eqnarray} Hence , the series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:i> = <var:H> }} <var:v0> := <nat:3> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:i> ; <var:c> := <var:v1> ; <var:c> := <var:c> + <var:v0> {{ <var:c> = <nat:3> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:v0> = <nat:3> /\ <var:c> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:c> = <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 