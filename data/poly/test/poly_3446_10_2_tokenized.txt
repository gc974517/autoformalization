\begin{document} \begin{theorem} Let the following code in \emph{Imp} such that \begin{verbatim} <var:J> := <nat:4> ; <var:J> := <var:J> * <var:V> ; <var:J> := <nat:4> + <var:J> * <var:V> ; <var:J> := <var:J> * <var:V> ; <var:J> := <var:J> * <var:V> ; <var:J> := <nat:3> + <var:J> * <var:V> ; <var:J> := <var:J> * <var:V> ; <var:J> := <nat:4> + <var:J> * <var:V> ; <var:J> := <nat:2> + <var:J> * <var:V> ; <var:J> := <nat:1> + <var:J> * <var:V> \end{verbatim} Allowing $ <var:V> = <var:S> $ ahead of executing the segment of code , it must be that we see $ <var:J> = <nat:4> * <var:S> ^ <nat:9> + <nat:4> * <var:S> ^ <nat:7> + <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> $ when series of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:S> \} \\ <var:J> := <nat:4> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \} \\ <var:J> := <var:J> * <var:V> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> + \} \\ <var:J> := <nat:4> + <var:J> * <var:V> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:4> \} \\ <var:J> := <var:J> * <var:V> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> + \} \\ <var:J> := <var:J> * <var:V> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> ^ <nat:4> + <nat:4> \cdot <var:S> ^ <nat:2> + \} \\ <var:J> := <nat:3> + <var:J> * <var:V> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> ^ <nat:5> + <nat:4> \cdot <var:S> ^ <nat:3> + <nat:3> \} \\ <var:J> := <var:J> * <var:V> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> ^ <nat:6> + <nat:4> \cdot <var:S> ^ <nat:4> + <nat:3> \cdot <var:S> + \} \\ <var:J> := <nat:4> + <var:J> * <var:V> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> ^ <nat:7> + <nat:4> \cdot <var:S> ^ <nat:5> + <nat:3> \cdot <var:S> ^ <nat:2> + <nat:4> \} \\ <var:J> := <nat:2> + <var:J> * <var:V> ; \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> ^ <nat:8> + <nat:4> \cdot <var:S> ^ <nat:6> + <nat:3> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> + <nat:2> \} \\ <var:J> := <nat:1> + <var:J> * <var:V> \\ \{ <var:V> = <var:S> \land <var:J> = <nat:4> \cdot <var:S> ^ <nat:9> + <nat:4> \cdot <var:S> ^ <nat:7> + <nat:3> \cdot <var:S> ^ <nat:4> + <nat:4> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:V> = <var:S> }} <var:J> := <nat:4> ; <var:J> := <var:J> * <var:V> ; <var:J> := <nat:4> + <var:J> * <var:V> ; <var:J> := <var:J> * <var:V> ; <var:J> := <var:J> * <var:V> ; <var:J> := <nat:3> + <var:J> * <var:V> ; <var:J> := <var:J> * <var:V> ; <var:J> := <nat:4> + <var:J> * <var:V> ; <var:J> := <nat:2> + <var:J> * <var:V> ; <var:J> := <nat:1> + <var:J> * <var:V> {{ <var:J> = <nat:4> * <var:S> ^ <nat:9> + <nat:4> * <var:S> ^ <nat:7> + <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:4> + <nat:3> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> ^ <nat:8> + <nat:4> * <var:S> ^ <nat:6> + <nat:3> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:S> /\ <var:J> = <nat:4> * <var:S> ^ <nat:9> + <nat:4> * <var:S> ^ <nat:7> + <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 