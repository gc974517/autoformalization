\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:1> ; <var:l1> := <nat:5> ; <var:l1> := <var:l1> * <var:C> ; <var:V> := <var:l1> ; <var:V> := <var:V> + <var:l0> \end{verbatim} Assume it to hold that $ <var:C> = <var:t> $ before interpreting this program it must be that we have $ <var:V> = <nat:5> * <var:t> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:C> = <var:t> \} \\ <var:l0> := <nat:1> ; \\ \{ <var:C> = <var:t> \land <var:l0> = <nat:1> \} \\ <var:l1> := <nat:5> ; \\ \{ <var:C> = <var:t> \land <var:l0> = <nat:1> \land <var:l1> = <nat:5> \} \\ <var:l1> := <var:l1> * <var:C> ; \\ \{ <var:C> = <var:t> \land <var:l0> = <nat:1> \land <var:l1> = <nat:5> * <var:t> \} \\ <var:V> := <var:l1> ; \\ \{ <var:C> = <var:t> \land <var:l0> = <nat:1> \land <var:V> = <nat:5> * <var:t> \} \\ <var:V> := <var:V> + <var:l0> \\ \{ <var:C> = <var:t> \land <var:V> = <nat:5> * <var:t> + <nat:1> \} \end{eqnarray} Considering the above , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:C> = <var:t> }} <var:l0> := <nat:1> ; <var:l1> := <nat:5> ; <var:l1> := <var:l1> * <var:C> ; <var:V> := <var:l1> ; <var:V> := <var:V> + <var:l0> {{ <var:V> = <nat:5> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:l0> = <nat:1> /\ <var:l1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:l0> = <nat:1> /\ <var:l1> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:l0> = <nat:1> /\ <var:V> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:V> = <nat:5> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 