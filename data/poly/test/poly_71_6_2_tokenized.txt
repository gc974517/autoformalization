\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:1> ; <var:P> := <nat:1> + <var:P> * <var:L> ; <var:P> := <var:P> * <var:L> ; <var:P> := <var:P> * <var:L> ; <var:P> := <nat:1> + <var:P> * <var:L> ; <var:P> := <nat:1> + <var:P> * <var:L> \end{verbatim} Assume it to hold that $ <var:L> = <var:f> $ prior to running this list of instructions , it holds that we see $ <var:P> = <nat:1> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is accomplished with Hoare techniques . Shifting focus toward the upcoming lines seen in the code segment , \[ \begin{tabular} {rcl} \{ <var:L> = <var:f> \} & <var:P> := <nat:1> & \{ <var:L> = <var:f> \land <var:P> = <nat:1> \} \\ \{ <var:L> = <var:f> \land <var:P> = <nat:1> \} & <var:P> := <nat:1> + <var:P> * <var:L> & \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> + <nat:1> \} \\ \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> + <nat:1> \} & <var:P> := <var:P> * <var:L> & \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + \} \\ \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + \} & <var:P> := <var:P> * <var:L> & \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> ^ <nat:2> + \} \\ \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> ^ <nat:2> + \} & <var:P> := <nat:1> + <var:P> * <var:L> & \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \} \\ \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \} & <var:P> := <nat:1> + <var:P> * <var:L& \{ <var:L> = <var:f> \land <var:P> = <nat:1> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> + <nat:1> \} \end{tabular} This is sound using the variable assignmet inference rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:L> = <var:f> }} <var:P> := <nat:1> ; <var:P> := <nat:1> + <var:P> * <var:L> ; <var:P> := <var:P> * <var:L> ; <var:P> := <var:P> * <var:L> ; <var:P> := <nat:1> + <var:P> * <var:L> ; <var:P> := <nat:1> + <var:P> * <var:L> {{ <var:P> = <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:P> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:P> = <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:P> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:P> = <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:P> = <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:P> = <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 