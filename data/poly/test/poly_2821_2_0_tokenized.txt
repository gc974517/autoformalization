\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:1> ; <var:Z> := <var:o0> \end{verbatim} Assume $ <var:H> = <var:Y> $ for $ <var:Y> \in \mathbb{N} $ prior to the execution of our segment of code , it holds that we have $ <var:Z> = <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the set of instructions is demonstrated through usual Hoare reasoning . Advancing to the proceeding command found in our series of commands , we see the variable update statement \verb | <var:o0> := <nat:1> ; | . This moves the condition $ \{ <var:H> = <var:Y> \} $ as the postcondition $ \{ <var:H> = <var:Y> \land <var:o0> = <nat:1> \} $ . Focusing on the proceeding line found in the list of commands , the environment update command binding $ <var:o0$ into $ <var:Z>$ . This redefines $ \{ <var:H> = <var:Y> \land <var:o0> = <nat:1> \} $ to the condition $ \{ <var:H> = <var:Y> \land <var:Z> = <nat:1> \} $ . This is ensured with the assignment inference rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:H> = <var:Y> }} <var:o0> := <nat:1> ; <var:Z> := <var:o0> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Y> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Y> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 