\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:4> ; <var:P> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:V> = <var:i> $ ahead of running this segment of code it holds that we see $ <var:P> = <nat:4> $ once series of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:i> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:V> = <var:i> \land <var:J0> = <nat:4> \} \\ <var:P> := <var:J0> \\ \{ <var:V> = <var:i> \land <var:P> = <nat:4> \} \end{eqnarray} Using typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:P> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:V> = <var:i> }} <def:poly> {{ <var:P> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:P> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 