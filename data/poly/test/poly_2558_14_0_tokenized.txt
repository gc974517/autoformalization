\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:9> ; <var:v1> := <nat:6> ; <var:v1> := <var:v1> * <var:w> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:w> ; <var:v2> := <var:v2> * <var:w> ; <var:v3> := <nat:4> ; <var:v3> := <var:v3> * <var:w> ; <var:v3> := <var:v3> * <var:w> ; <var:v3> := <var:v3> * <var:w> ; <var:P> := <var:v3> ; <var:P> := <var:P> + <var:v2> ; <var:P> := <var:P> + <var:v1> ; <var:P> := <var:P> + <var:v0> \end{verbatim} Assuming that we have $ <var:w> = <var:U> $ ahead of executing this program then we have $ <var:P> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:9> $ once list of instructions is done executing . \end{theorem} \begin{proof} Arguing the correctness of this program can be seen by the following decorated list of commands . \begin{eqnarray} \{ <var:w> = <var:U> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \} \\ <var:v1> := <nat:6> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> \} \\ <var:v1> := <var:v1> * <var:w> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \} \\ <var:v2> := <nat:7> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:v2> = <nat:7> \} \\ <var:v2> := <var:v2> * <var:w> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:v2> = <nat:7> * <var:U> \} \\ <var:v2> := <var:v2> * <var:w> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:v2> = <nat:7> * <var:U> ^ <nat:2> \} \\ <var:v3> := <nat:4> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:v2> = <nat:7> * <var:U> ^ <nat:2> \land <var:v3> = <nat:4> \} \\ <var:v3> := <var:v3> * <var:w> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:v2> = <nat:7> * <var:U> ^ <nat:2> \land <var:v3> = <nat:4> * <var:U> \} \\ <var:v3> := <var:v3> * <var:w> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:v2> = <nat:7> * <var:U> ^ <nat:2> \land <var:v3> = <nat:4> * <var:U> ^ <nat:2> \} \\ <var:v3> := <var:v3> * <var:w> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:v2> = <nat:7> * <var:U> ^ <nat:2> \land <var:v3> = <nat:4> * <var:U> ^ <nat:3> \} \\ <var:P> := <var:v3> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:v2> = <nat:7> * <var:U> ^ <nat:2> \land <var:P> = <nat:4> * <var:U> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:v2> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:v1> = <nat:6> * <var:U> \land <var:P> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:v1> ; \\ \{ <var:w> = <var:U> \land <var:v0> = <nat:9> \land <var:P> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:6> * <var:U> \} \\ <var:P> := <var:P> + <var:v0> \\ \{ <var:w> = <var:U> \land <var:P> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:9> \} \end{eqnarray} Utilizing Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:w> = <var:U> }} <var:v0> := <nat:9> ; <var:v1> := <nat:6> ; <var:v1> := <var:v1> * <var:w> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:w> ; <var:v2> := <var:v2> * <var:w> ; <var:v3> := <nat:4> ; <var:v3> := <var:v3> * <var:w> ; <var:v3> := <var:v3> * <var:w> ; <var:v3> := <var:v3> * <var:w> ; <var:P> := <var:v3> ; <var:P> := <var:P> + <var:v2> ; <var:P> := <var:P> + <var:v1> ; <var:P> := <var:P> + <var:v0> {{ <var:P> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:v2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:v2> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:v2> = <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:v2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:v3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:v2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:v2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:v2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:v2> = <nat:7> * <var:U> ^ <nat:2> /\ <var:P> = <nat:4> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:6> * <var:U> /\ <var:P> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:v0> = <nat:9> /\ <var:P> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:P> = <nat:4> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 