\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:7> ; <var:F1> := <var:F1> * <var:y> ; <var:W> := <var:F1> ; <var:W> := <var:W> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( given every whole numbers $ <var:G> $ ) that $ <var:y> = <var:G> $ prior to running this segment of code it follows that we see $ <var:W> = <nat:7> * <var:G> + <nat:4> $ once list of instructions is done executing . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:y> = <var:G> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:y> = <var:G> \land <var:F0> = <nat:4> \} \\ <var:F1> := <nat:7> ; \\ \{ <var:y> = <var:G> \land <var:F0> = <nat:4> \land <var:F1> = <nat:7> \} \\ <var:F1> := <var:F1> * <var:y> ; \\ \{ <var:y> = <var:G> \land <var:F0> = <nat:4> \land <var:F1> = <nat:7> \times <var:G> \} \\ <var:W> := <var:F1> ; \\ \{ <var:y> = <var:G> \land <var:F0> = <nat:4> \land <var:W> = <nat:7> \times <var:G> \} \\ <var:W> := <var:W> + <var:F0> \\ \{ <var:y> = <var:G> \land <var:W> = <nat:7> \times <var:G> + <nat:4> \} \end{eqnarray} Hence , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:F1> := <nat:7> ; <var:F1> := <var:F1> * <var:y> ; <var:W> := <var:F1> ; <var:W> := <var:W> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:y> = <var:G> }} <def:poly> {{ <var:W> = <nat:7> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:F0> = <nat:4> /\ <var:W> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:W> = <nat:7> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 