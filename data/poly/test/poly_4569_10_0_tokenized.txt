\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:2> ; <var:b1> := <nat:8> ; <var:b1> := <var:b1> * <var:q> ; <var:b3> := <nat:7> ; <var:b3> := <var:b3> * <var:q> ; <var:b3> := <var:b3> * <var:q> ; <var:b3> := <var:b3> * <var:q> ; <var:T> := <var:b3> ; <var:T> := <var:T> + <var:b1> ; <var:T> := <var:T> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Assuming it to hold that $ <var:q> = <var:N> $ prior to evaluating the segment of code then we see $ <var:T> = <nat:7> * <var:N> ^ <nat:3> + <nat:8> * <var:N> + <nat:2> $ after code executes . \end{theorem} \begin{proof} See that the below decorated series of instructions . \begin{eqnarray} \{ <var:q> = <var:N> \} \\ <var:b0> := <nat:2> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \} \\ <var:b1> := <nat:8> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \land <var:b1> = <nat:8> \} \\ <var:b1> := <var:b1> * <var:q> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \land <var:b1> = <nat:8> * <var:N> \} \\ <var:b3> := <nat:7> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \land <var:b1> = <nat:8> * <var:N> \land <var:b3> = <nat:7> \} \\ <var:b3> := <var:b3> * <var:q> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \land <var:b1> = <nat:8> * <var:N> \land <var:b3> = <nat:7> * <var:N> \} \\ <var:b3> := <var:b3> * <var:q> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \land <var:b1> = <nat:8> * <var:N> \land <var:b3> = <nat:7> * <var:N> ^ <nat:2> \} \\ <var:b3> := <var:b3> * <var:q> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \land <var:b1> = <nat:8> * <var:N> \land <var:b3> = <nat:7> * <var:N> ^ <nat:3> \} \\ <var:T> := <var:b3> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \land <var:b1> = <nat:8> * <var:N> \land <var:T> = <nat:7> * <var:N> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:b1> ; \\ \{ <var:q> = <var:N> \land <var:b0> = <nat:2> \land <var:T> = <nat:7> * <var:N> ^ <nat:3> + <nat:8> * <var:N> \} \\ <var:T> := <var:T> + <var:b0> \\ \{ <var:q> = <var:N> \land <var:T> = <nat:7> * <var:N> ^ <nat:3> + <nat:8> * <var:N> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b0> := <nat:2> ; <var:b1> := <nat:8> ; <var:b1> := <var:b1> * <var:q> ; <var:b3> := <nat:7> ; <var:b3> := <var:b3> * <var:q> ; <var:b3> := <var:b3> * <var:q> ; <var:b3> := <var:b3> * <var:q> ; <var:T> := <var:b3> ; <var:T> := <var:T> + <var:b1> ; <var:T> := <var:T> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:q> = <var:N> }} <def:poly> {{ <var:T> = <nat:7> * <var:N> ^ <nat:3> + <nat:8> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:8> * <var:N> /\ <var:b3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:8> * <var:N> /\ <var:b3> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:8> * <var:N> /\ <var:b3> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:8> * <var:N> /\ <var:b3> = <nat:7> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:8> * <var:N> /\ <var:T> = <nat:7> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:b0> = <nat:2> /\ <var:T> = <nat:7> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:T> = <nat:7> * <var:N> ^ <nat:3> + <nat:8> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 