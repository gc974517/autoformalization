\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:L> ; <var:E2> := <var:E1> * <var:L> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:2> ; <var:G> := <var:E2> <var:G> := <var:G> + <var:E1> <var:G> := <var:G> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for any natural coefficients $ <var:h> $ , $ <var:L> = <var:h> $ before the execution of this set of commands , then we have $ <var:G> = <nat:2> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:3> $ after series of instructions has finished . \end{theorem} \begin{proof} The way to prove correctness for our program is done using typical Hoare reasoning . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:h> \} & <var:E1> := <var:L> & \{ <var:L> = <var:h> \land <var:E1> = <var:h> \} \\ \{ <var:L> = <var:h> \land <var:E1> = <var:h> \} & <var:E2> := <var:E1> * <var:L> & \{ <var:L> = <var:h> \land <var:E1> = <var:h> \land <var:E2> = <var:h> ^ <nat:2> \} \\ \{ <var:L> = <var:h> \land <var:E1> = <var:h> \land <var:E2> = <var:h> ^ <nat:2> \} & <var:E0> := <nat:3> & \{ <var:L> = <var:h> \land <var:E1> = <var:h> \land <var:E2> = <var:h> ^ <nat:2> \land <var:E0> = <nat:3> \} \\ \{ <var:L> = <var:h> \land <var:E1> = <var:h> \land <var:E2> = <var:h> ^ <nat:2> \land <var:E0> = <nat:3> \} & <var:E1> := <var:E1> * <nat:2> & \{ <var:L> = <var:h> \land <var:E1> = <nat:2> \times <var:h> \land <var:E2> = <var:h> ^ <nat:2> \land <var:E0> = <nat:3> \} \\ \{ <var:L> = <var:h> \land <var:E1> = <nat:2> \times <var:h> \land <var:E2> = <var:h> ^ <nat:2> \land <var:E0> = <nat:3> \} & <var:E2> := <var:E2> * <nat:2> & \{ <var:L> = <var:h> \land <var:E1> = <nat:2> \times <var:h> \land <var:E2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:E0> = <nat:3> \} \\ \{ <var:L> = <var:h> \land <var:E1> = <nat:2> \times <var:h> \land <var:E2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:E0> = <nat:3> \} & <var:G> := <var:E2& \{ <var:L> = <var:h> \land <var:E1> = <nat:2> \times <var:h> \land <var:E0> = <nat:3> \land <var:G> = <nat:2> \times <var:h> ^ <nat:2> \} \\ \{ <var:L> = <var:h> \land <var:E1> = <nat:2> \times <var:h> \land <var:E0> = <nat:3> \land <var:G> = <nat:2> \times <var:h> ^ <nat:2> \} & <var:G> := <var:G> + <var:E1& \{ <var:L> = <var:h> \land <var:E0> = <nat:3> \land <var:G> = <nat:2> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} \end{tabular} Taking a look at the following bit of code seen in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:L> = <var:h> \} & <var:E1> := <var:L> & \{ <var:L> = <var:h> \land <var:E1> = <var:h> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E1> := <var:L> ; <var:E2> := <var:E1> * <var:L> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:2> ; <var:G> := <var:E2> <var:G> := <var:G> + <var:E1> <var:G> := <var:G> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:L> = <var:h> }} <def:poly> {{ <var:G> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:E1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:E1> = <var:h> /\ <var:E2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:E1> = <var:h> /\ <var:E2> = <var:h> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:E1> = <nat:2> * <var:h> /\ <var:E2> = <var:h> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:E1> = <nat:2> * <var:h> /\ <var:E2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:E1> = <nat:2> * <var:h> /\ <var:E0> = <nat:3> /\ <var:G> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:E0> = <nat:3> /\ <var:G> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:G> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 