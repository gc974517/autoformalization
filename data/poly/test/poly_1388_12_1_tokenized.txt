\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as \begin{verbatim} <var:C1> := <var:B> ; <var:C2> := <var:C1> * <var:B> ; <var:C3> := <var:C2> * <var:B> ; <var:C4> := <var:C3> * <var:B> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:3> ; <var:C2> := <var:C2> * <nat:2> ; <var:C4> := <var:C4> * <nat:3> ; <var:G> := <var:C4> <var:G> := <var:G> + <var:C2> <var:G> := <var:G> + <var:C1> <var:G> := <var:G> + <var:C0> \end{verbatim} Given that we have $ <var:B> = <var:m> $ for some natural coefficients $ <var:m> $ prior to the execution of our list of instructions it must be that $ <var:G> = <nat:3> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:4> $ when list of instructions has finished . \end{theorem} \begin{proof} Applying typical Hoare logic returns : \begin{eqnarray} \{ <var:B> = <var:m> \} \\ <var:C1> := <var:B> ; \\ \{ <var:B> = <var:m> \land <var:C1> = <var:m> \} \\ <var:C2> := <var:C1> * <var:B> ; \\ \{ <var:B> = <var:m> \land <var:C1> = <var:m> \land <var:C2> = <var:m> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:B> ; \\ \{ <var:B> = <var:m> \land <var:C1> = <var:m> \land <var:C2> = <var:m> ^ <nat:2> \land <var:C3> = <var:m> ^ <nat:3> \} \\ <var:C4> := <var:C3> * <var:B> ; \\ \{ <var:B> = <var:m> \land <var:C1> = <var:m> \land <var:C2> = <var:m> ^ <nat:2> \land <var:C3> = <var:m> ^ <nat:3> \land <var:C4> = <var:m> ^ <nat:4> \} \\ <var:C0> := <nat:4> ; \\ \{ <var:B> = <var:m> \land <var:C1> = <var:m> \land <var:C2> = <var:m> ^ <nat:2> \land <var:C3> = <var:m> ^ <nat:3> \land <var:C4> = <var:m> ^ <nat:4> \land <var:C0> = <nat:4> \} \\ <var:C1> := <var:C1> * <nat:3> ; \\ \{ <var:B> = <var:m> \land <var:C1> = <nat:3> \times <var:m> \land <var:C2> = <var:m> ^ <nat:2> \land <var:C3> = <var:m> ^ <nat:3> \land <var:C4> = <var:m> ^ <nat:4> \land <var:C0> = <nat:4> \} \\ <var:C2> := <var:C2> * <nat:2> ; \\ \{ <var:B> = <var:m> \land <var:C1> = <nat:3> \times <var:m> \land <var:C2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:C3> = <var:m> ^ <nat:3> \land <var:C4> = <var:m> ^ <nat:4> \land <var:C0> = <nat:4> \} \\ <var:C4> := <var:C4> * <nat:3> ; \\ \{ <var:B> = <var:m> \land <var:C1> = <nat:3> \times <var:m> \land <var:C2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:C3> = <var:m> ^ <nat:3> \land <var:C4> = <nat:3> \times <var:m> ^ <nat:4> \land <var:C0> = <nat:4> \} \\ <var:G> := <var:C4> \\ \{ <var:B> = <var:m> \land <var:C1> = <nat:3> \times <var:m> \land <var:C2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:C3> = <var:m> ^ <nat:3> \land <var:C0> = <nat:4> \land <var:G> = <nat:3> \times <var:m> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:C2> \\ \{ <var:B> = <var:m> \land <var:C1> = <nat:3> \times <var:m> \land <var:C0> = <nat:4> \land <var:G> = <nat:3> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:C1> \\ \{ <var:B> = <var:m> \land <var:C0> = <nat:4> \land <var:G> = <nat:3> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> \} \\ <var:G> := <var:G> + <var:C0> \\ \{ <var:B> = <var:m> \land <var:G> = <nat:3> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:4> \} \end{eqnarray} As a consequence , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <var:C4> : string := " <var:C4> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:B> = <var:m> }} <var:C1> := <var:B> ; <var:C2> := <var:C1> * <var:B> ; <var:C3> := <var:C2> * <var:B> ; <var:C4> := <var:C3> * <var:B> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:3> ; <var:C2> := <var:C2> * <nat:2> ; <var:C4> := <var:C4> * <nat:3> ; <var:G> := <var:C4> <var:G> := <var:G> + <var:C2> <var:G> := <var:G> + <var:C1> <var:G> := <var:G> + <var:C0> {{ <var:G> = <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <var:m> /\ <var:C2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <var:m> /\ <var:C2> = <var:m> ^ <nat:2> /\ <var:C3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <var:m> /\ <var:C2> = <var:m> ^ <nat:2> /\ <var:C3> = <var:m> ^ <nat:3> /\ <var:C4> = <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <var:m> /\ <var:C2> = <var:m> ^ <nat:2> /\ <var:C3> = <var:m> ^ <nat:3> /\ <var:C4> = <var:m> ^ <nat:4> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <nat:3> * <var:m> /\ <var:C2> = <var:m> ^ <nat:2> /\ <var:C3> = <var:m> ^ <nat:3> /\ <var:C4> = <var:m> ^ <nat:4> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <nat:3> * <var:m> /\ <var:C2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:C3> = <var:m> ^ <nat:3> /\ <var:C4> = <var:m> ^ <nat:4> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <nat:3> * <var:m> /\ <var:C2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:C3> = <var:m> ^ <nat:3> /\ <var:C4> = <nat:3> * <var:m> ^ <nat:4> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <nat:3> * <var:m> /\ <var:C2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:C3> = <var:m> ^ <nat:3> /\ <var:C0> = <nat:4> /\ <var:G> = <nat:3> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C1> = <nat:3> * <var:m> /\ <var:C0> = <nat:4> /\ <var:G> = <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C0> = <nat:4> /\ <var:G> = <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:G> = <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 