\begin{document} \begin{theorem} Consider the following list of commands as \begin{verbatim} <var:d1> := <var:w> ; <var:d2> := <var:d1> * <var:w> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:5> ; <var:d2> := <var:d2> * <nat:3> ; <var:b> := <var:d2> <var:b> := <var:b> + <var:d1> <var:b> := <var:b> + <var:d0> \end{verbatim} Allow that $ <var:w> = <var:K> $ before executing this set of instructions , it follows that we see $ <var:b> = <nat:3> \cdot <var:K> ^ <nat:2> + <nat:5> \cdot <var:K> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for our code is given using usual Hoare reasoning . Immediately following , \verb | { <var:w> = <var:K> } <var:d1> := <var:w> { <var:w> = <var:K> \land <var:d1> = <var:K> } | , \verb | { <var:w> = <var:K> \land <var:d1> = <var:K> } <var:d2> := <var:d1> * <var:w> { <var:w> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> } | , \verb | { <var:w> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> } <var:d0> := <nat:5> { <var:w> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d0> = <nat:5> } | , \verb | { <var:w> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d0> = <nat:5> } <var:d1> := <var:d1> * <nat:5> { <var:w> = <var:K> \land <var:d1> = <nat:5> \times <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d0> = <nat:5> } | , \verb | { <var:w> = <var:K> \land <var:d1> = <nat:5> \times <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d0> = <nat:5> } <var:d2> := <var:d2> * <nat:3> { <var:w> = <var:K> \land <var:d1> = <nat:5> \times <var:K> \land <var:d2> = <nat:3> \times <var:K> ^ <nat:2> \land <var:d0> = <nat:5> } | , \verb | { <var:w> = <var:K> \land <var:d1> = <nat:5> \times <var:K> \land <var:d2> = <nat:3> \times <var:K> ^ <nat:2> \land <var:d0> = <nat:5> } <var:b> := <var:d2{ <var:w> = <var:K> \land <var:d1> = <nat:5> \times <var:K> \land <var:d0> = <nat:5> \land <var:b> = <nat:3> \times <var:K> ^ <nat:2> } | , \verb | { <var:w> = <var:K> \land <var:d1> = <nat:5> \times <var:K> \land <var:d0> = <nat:5> \land <var:b> = <nat:3> \times <var:K> ^ <nat:2> } <var:b> := <var:b> + <var:d1{ <var:w> = <var:K> \land <var:d0> = <nat:5> \land <var:b> = <nat:3> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> } | and \verb | { <var:w> = <var:K> \land <var:d0> = <nat:5> \land <var:b> = <nat:3> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> } <var:b> := <var:b> + <var:d0{ <var:w> = <var:K> \land <var:b> = <nat:3> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> + <nat:5> } | . This is sound using the rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:w> = <var:K> }} <var:d1> := <var:w> ; <var:d2> := <var:d1> * <var:w> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:5> ; <var:d2> := <var:d2> * <nat:3> ; <var:b> := <var:d2> <var:b> := <var:b> + <var:d1> <var:b> := <var:b> + <var:d0> {{ <var:b> = <nat:3> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:d1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:d1> = <var:K> /\ <var:d2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:d1> = <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:d1> = <nat:5> * <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:d1> = <nat:5> * <var:K> /\ <var:d2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:d1> = <nat:5> * <var:K> /\ <var:d0> = <nat:5> /\ <var:b> = <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:d0> = <nat:5> /\ <var:b> = <nat:3> * <var:K> ^ <nat:2> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b> = <nat:3> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 