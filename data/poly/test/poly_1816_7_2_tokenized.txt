\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K> := <nat:4> ; <var:K> := <nat:3> + <var:K> * <var:O> ; <var:K> := <nat:4> + <var:K> * <var:O> ; <var:K> := <nat:3> + <var:K> * <var:O> ; <var:K> := <nat:3> + <var:K> * <var:O> ; <var:K> := <nat:1> + <var:K> * <var:O> ; <var:K> := <nat:1> + <var:K> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Assuming it to hold that $ <var:O> = <var:x> $ before running the set of commands it follows that we see $ <var:K> = <nat:4> \cdot <var:x> ^ <nat:6> + <nat:3> \cdot <var:x> ^ <nat:5> + <nat:4> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:1> $ once set of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of the code is given using typical Hoare logic . Taking a look at the proceeding lines of codefound in our series of instructions , we have \verb | { <var:O> = <var:x> } <var:K> := <nat:4> { <var:O> = <var:x> \land <var:K> = <nat:4> } | , \verb | { <var:O> = <var:x> \land <var:K> = <nat:4> } <var:K> := <nat:3> + <var:K> * <var:O> { <var:O> = <var:x> \land <var:K> = <nat:4> \cdot <var:x> + <nat:3> } | , \verb | { <var:O> = <var:x> \land <var:K> = <nat:4> \cdot <var:x> + <nat:3> } <var:K> := <nat:4> + <var:K> * <var:O> { <var:O> = <var:x> \land <var:K> = <nat:4> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:4> } | and \verb | { <var:O> = <var:x> \land <var:K> = <nat:4> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:4> } <var:K> := <nat:3> + <var:K> * <var:O> { <var:O> = <var:x> \land <var:K> = <nat:4> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:4> \cdot <var:x> + <nat:3> } | . Immediately following , we see \verb | { <var:O> = <var:x> } <var:K> := <nat:4> { <var:O> = <var:x> \land <var:K> = <nat:4> } | . This is sound with the variable update scheme given in usual Hoare techniques . Taking another step toward the subsequent bits of codefound in the list of instructions , we see \verb | { <var:O> = <var:x> } <var:K> := <nat:4> { <var:O> = <var:x> \land <var:K> = <nat:4> } | and \verb | { <var:O> = <var:x> \land <var:K> = <nat:4> } <var:K> := <nat:3> + <var:K> * <var:O> { <var:O> = <var:x> \land <var:K> = <nat:4> \cdot <var:x> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:4> ; <var:K> := <nat:3> + <var:K> * <var:O> ; <var:K> := <nat:4> + <var:K> * <var:O> ; <var:K> := <nat:3> + <var:K> * <var:O> ; <var:K> := <nat:3> + <var:K> * <var:O> ; <var:K> := <nat:1> + <var:K> * <var:O> ; <var:K> := <nat:1> + <var:K> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:O> = <var:x> }} <def:poly> {{ <var:K> = <nat:4> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:K> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:K> = <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:K> = <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:K> = <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:K> = <nat:4> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:K> = <nat:4> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:K> = <nat:4> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 