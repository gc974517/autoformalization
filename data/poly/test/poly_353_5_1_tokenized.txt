\begin{document} \begin{theorem} Let the following list of commands such that \begin{verbatim} <var:U1> := <var:r> ; <var:U0> := <nat:5> ; <var:U1> := <var:U1> * <nat:4> ; <var:l> := <var:U1> <var:l> := <var:l> + <var:U0> \end{verbatim} Assume it to hold that $ <var:r> = <var:o> $ prior to the evaluation of the series of commands , it follows that we have $ <var:l> = <nat:4> \cdot <var:o> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning returns : \begin{eqnarray} \{ <var:r> = <var:o> \} \\ <var:U1> := <var:r> ; \\ \{ <var:r> = <var:o> \land <var:U1> = <var:o> \} \\ <var:U0> := <nat:5> ; \\ \{ <var:r> = <var:o> \land <var:U1> = <var:o> \land <var:U0> = <nat:5> \} \\ <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:r> = <var:o> \land <var:U1> = <nat:4> \cdot <var:o> \land <var:U0> = <nat:5> \} \\ <var:l> := <var:U1> \\ \{ <var:r> = <var:o> \land <var:U0> = <nat:5> \land <var:l> = <nat:4> \cdot <var:o> \} \\ <var:l> := <var:l> + <var:U0> \\ \{ <var:r> = <var:o> \land <var:l> = <nat:4> \cdot <var:o> + <nat:5> \} \end{eqnarray} Considering the preceding argument , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:r> = <var:o> }} <var:U1> := <var:r> ; <var:U0> := <nat:5> ; <var:U1> := <var:U1> * <nat:4> ; <var:l> := <var:U1> <var:l> := <var:l> + <var:U0> {{ <var:l> = <nat:4> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:U1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:U1> = <var:o> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:U1> = <nat:4> * <var:o> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:U0> = <nat:5> /\ <var:l> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:l> = <nat:4> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 