\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:q> ; <var:e2> := <var:e1> * <var:q> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:2> ; <var:L> := <var:e2> <var:L> := <var:L> + <var:e1> <var:L> := <var:L> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:q> = <var:c> $ before executing the code segment it follows that $ <var:L> = <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:4> $ . \end{theorem} \begin{proof} Applying usual Hoare logic produces : \begin{eqnarray} \{ <var:q> = <var:c> \} \\ <var:e1> := <var:q> ; \\ \{ <var:q> = <var:c> \land <var:e1> = <var:c> \} \\ <var:e2> := <var:e1> * <var:q> ; \\ \{ <var:q> = <var:c> \land <var:e1> = <var:c> \land <var:e2> = <var:c> ^ <nat:2> \} \\ <var:e0> := <nat:4> ; \\ \{ <var:q> = <var:c> \land <var:e1> = <var:c> \land <var:e2> = <var:c> ^ <nat:2> \land <var:e0> = <nat:4> \} \\ <var:e1> := <var:e1> * <nat:2> ; \\ \{ <var:q> = <var:c> \land <var:e1> = <nat:2> * <var:c> \land <var:e2> = <var:c> ^ <nat:2> \land <var:e0> = <nat:4> \} \\ <var:e2> := <var:e2> * <nat:2> ; \\ \{ <var:q> = <var:c> \land <var:e1> = <nat:2> * <var:c> \land <var:e2> = <nat:2> * <var:c> ^ <nat:2> \land <var:e0> = <nat:4> \} \\ <var:L> := <var:e2> \\ \{ <var:q> = <var:c> \land <var:e1> = <nat:2> * <var:c> \land <var:e0> = <nat:4> \land <var:L> = <nat:2> * <var:c> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:e1> \\ \{ <var:q> = <var:c> \land <var:e0> = <nat:4> \land <var:L> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> \} \\ <var:L> := <var:L> + <var:e0> \\ \{ <var:q> = <var:c> \land <var:L> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e1> := <var:q> ; <var:e2> := <var:e1> * <var:q> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:2> ; <var:L> := <var:e2> <var:L> := <var:L> + <var:e1> <var:L> := <var:L> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:q> = <var:c> }} <def:poly> {{ <var:L> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:e1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:e1> = <var:c> /\ <var:e2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:e1> = <var:c> /\ <var:e2> = <var:c> ^ <nat:2> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:e1> = <nat:2> * <var:c> /\ <var:e2> = <var:c> ^ <nat:2> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:e1> = <nat:2> * <var:c> /\ <var:e2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:e1> = <nat:2> * <var:c> /\ <var:e0> = <nat:4> /\ <var:L> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:e0> = <nat:4> /\ <var:L> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:L> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 