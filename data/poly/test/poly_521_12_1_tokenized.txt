\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} : \begin{verbatim} <var:H1> := <var:z> ; <var:H2> := <var:H1> * <var:z> ; <var:H3> := <var:H2> * <var:z> ; <var:H4> := <var:H3> * <var:z> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:3> ; <var:H3> := <var:H3> * <nat:9> ; <var:H4> := <var:H4> * <nat:4> ; <var:s> := <var:H4> <var:s> := <var:s> + <var:H3> <var:s> := <var:s> + <var:H1> <var:s> := <var:s> + <var:H0> \end{verbatim} Allow it to hold that $ <var:z> = <var:q> $ taking positive integer coefficients $ <var:q> $ before executing our segment of code it holds that we see $ <var:s> = <nat:4> \times <var:q> ^ <nat:4> + <nat:9> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> + <nat:7> $ . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:z> = <var:q> \} \\ <var:H1> := <var:z> ; \\ \{ <var:z> = <var:q> \land <var:H1> = <var:q> \} \\ <var:H2> := <var:H1> * <var:z> ; \\ \{ <var:z> = <var:q> \land <var:H1> = <var:q> \land <var:H2> = <var:q> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:z> ; \\ \{ <var:z> = <var:q> \land <var:H1> = <var:q> \land <var:H2> = <var:q> ^ <nat:2> \land <var:H3> = <var:q> ^ <nat:3> \} \\ <var:H4> := <var:H3> * <var:z> ; \\ \{ <var:z> = <var:q> \land <var:H1> = <var:q> \land <var:H2> = <var:q> ^ <nat:2> \land <var:H3> = <var:q> ^ <nat:3> \land <var:H4> = <var:q> ^ <nat:4> \} \\ <var:H0> := <nat:7> ; \\ \{ <var:z> = <var:q> \land <var:H1> = <var:q> \land <var:H2> = <var:q> ^ <nat:2> \land <var:H3> = <var:q> ^ <nat:3> \land <var:H4> = <var:q> ^ <nat:4> \land <var:H0> = <nat:7> \} \\ <var:H1> := <var:H1> * <nat:3> ; \\ \{ <var:z> = <var:q> \land <var:H1> = <nat:3> * <var:q> \land <var:H2> = <var:q> ^ <nat:2> \land <var:H3> = <var:q> ^ <nat:3> \land <var:H4> = <var:q> ^ <nat:4> \land <var:H0> = <nat:7> \} \\ <var:H3> := <var:H3> * <nat:9> ; \\ \{ <var:z> = <var:q> \land <var:H1> = <nat:3> * <var:q> \land <var:H2> = <var:q> ^ <nat:2> \land <var:H3> = <nat:9> * <var:q> ^ <nat:3> \land <var:H4> = <var:q> ^ <nat:4> \land <var:H0> = <nat:7> \} \\ <var:H4> := <var:H4> * <nat:4> ; \\ \{ <var:z> = <var:q> \land <var:H1> = <nat:3> * <var:q> \land <var:H2> = <var:q> ^ <nat:2> \land <var:H3> = <nat:9> * <var:q> ^ <nat:3> \land <var:H4> = <nat:4> * <var:q> ^ <nat:4> \land <var:H0> = <nat:7> \} \\ <var:s> := <var:H4> \\ \{ <var:z> = <var:q> \land <var:H1> = <nat:3> * <var:q> \land <var:H2> = <var:q> ^ <nat:2> \land <var:H3> = <nat:9> * <var:q> ^ <nat:3> \land <var:H0> = <nat:7> \land <var:s> = <nat:4> * <var:q> ^ <nat:4> \} \\ <var:s> := <var:s> + <var:H3> \\ \{ <var:z> = <var:q> \land <var:H1> = <nat:3> * <var:q> \land <var:H2> = <var:q> ^ <nat:2> \land <var:H0> = <nat:7> \land <var:s> = <nat:4> * <var:q> ^ <nat:4> + <nat:9> * <var:q> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:H1> \\ \{ <var:z> = <var:q> \land <var:H0> = <nat:7> \land <var:s> = <nat:4> * <var:q> ^ <nat:4> + <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> \} \\ <var:s> := <var:s> + <var:H0> \\ \{ <var:z> = <var:q> \land <var:s> = <nat:4> * <var:q> ^ <nat:4> + <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:7> \} \end{eqnarray} Hence , our list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:z> = <var:q> }} <var:H1> := <var:z> ; <var:H2> := <var:H1> * <var:z> ; <var:H3> := <var:H2> * <var:z> ; <var:H4> := <var:H3> * <var:z> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:3> ; <var:H3> := <var:H3> * <nat:9> ; <var:H4> := <var:H4> * <nat:4> ; <var:s> := <var:H4> <var:s> := <var:s> + <var:H3> <var:s> := <var:s> + <var:H1> <var:s> := <var:s> + <var:H0> {{ <var:s> = <nat:4> * <var:q> ^ <nat:4> + <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <var:q> /\ <var:H2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <var:q> /\ <var:H2> = <var:q> ^ <nat:2> /\ <var:H3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <var:q> /\ <var:H2> = <var:q> ^ <nat:2> /\ <var:H3> = <var:q> ^ <nat:3> /\ <var:H4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <var:q> /\ <var:H2> = <var:q> ^ <nat:2> /\ <var:H3> = <var:q> ^ <nat:3> /\ <var:H4> = <var:q> ^ <nat:4> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <nat:3> * <var:q> /\ <var:H2> = <var:q> ^ <nat:2> /\ <var:H3> = <var:q> ^ <nat:3> /\ <var:H4> = <var:q> ^ <nat:4> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <nat:3> * <var:q> /\ <var:H2> = <var:q> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:q> ^ <nat:3> /\ <var:H4> = <var:q> ^ <nat:4> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <nat:3> * <var:q> /\ <var:H2> = <var:q> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:q> ^ <nat:3> /\ <var:H4> = <nat:4> * <var:q> ^ <nat:4> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <nat:3> * <var:q> /\ <var:H2> = <var:q> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:q> ^ <nat:3> /\ <var:H0> = <nat:7> /\ <var:s> = <nat:4> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H1> = <nat:3> * <var:q> /\ <var:H2> = <var:q> ^ <nat:2> /\ <var:H0> = <nat:7> /\ <var:s> = <nat:4> * <var:q> ^ <nat:4> + <nat:9> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:H0> = <nat:7> /\ <var:s> = <nat:4> * <var:q> ^ <nat:4> + <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:s> = <nat:4> * <var:q> ^ <nat:4> + <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 