\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:f> ; <var:o2> := <var:o1> * <var:f> ; <var:o3> := <var:o2> * <var:f> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:1> ; <var:o3> := <var:o3> * <nat:5> ; <var:L> := <var:o3> <var:L> := <var:L> + <var:o2> <var:L> := <var:L> + <var:o1> <var:L> := <var:L> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:f> = <var:z> $ before executing our set of instructions , it follows that we see $ <var:L> = <nat:5> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:7> \times <var:z> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for this list of commands is demonstrated through standard Hoare techniques . Taking a look at the upcoming steps in the code segment , \[ \begin{tabular} {rcl} \{ <var:f> = <var:z> \} & <var:o1> := <var:f> & \{ <var:f> = <var:z> \land <var:o1> = <var:z> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <var:z> \} & <var:o2> := <var:o1> * <var:f> & \{ <var:f> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \} & <var:o3> := <var:o2> * <var:f> & \{ <var:f> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o3> = <var:z> ^ <nat:3> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o3> = <var:z> ^ <nat:3> \} & <var:o0> := <nat:8> & \{ <var:f> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o3> = <var:z> ^ <nat:3> \land <var:o0> = <nat:8> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o3> = <var:z> ^ <nat:3> \land <var:o0> = <nat:8> \} & <var:o1> := <var:o1> * <nat:7> & \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o3> = <var:z> ^ <nat:3> \land <var:o0> = <nat:8> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o3> = <var:z> ^ <nat:3> \land <var:o0> = <nat:8> \} & <var:o2> := <var:o2> * <nat:1> & \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:o3> = <var:z> ^ <nat:3> \land <var:o0> = <nat:8> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:o3> = <var:z> ^ <nat:3> \land <var:o0> = <nat:8> \} & <var:o3> := <var:o3> * <nat:5> & \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:o3> = <nat:5> \times <var:z> ^ <nat:3> \land <var:o0> = <nat:8> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:o3> = <nat:5> \times <var:z> ^ <nat:3> \land <var:o0> = <nat:8> \} & <var:L> := <var:o3& \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:o0> = <nat:8> \land <var:L> = <nat:5> \times <var:z> ^ <nat:3> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:o0> = <nat:8> \land <var:L> = <nat:5> \times <var:z> ^ <nat:3> \} & <var:L> := <var:L> + <var:o2& \{ <var:f> = <var:z> \land <var:o1> = <nat:7> \times <var:z> \land <var:o0> = <nat:8> \land <var:L> = <nat:5> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> \} \end{tabular} This is deduced using the variable binding rule found in typical Hoare reasoning . Paying attention to the next steps found in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:z> \} & <var:o1> := <var:f> & \{ <var:f> = <var:z> \land <var:o1> = <var:z> \} \\ \{ <var:f> = <var:z> \land <var:o1> = <var:z> \} & <var:o2> := <var:o1> * <var:f> & \{ <var:f> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \} \end{tabular} This is ensured with the inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:f> ; <var:o2> := <var:o1> * <var:f> ; <var:o3> := <var:o2> * <var:f> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:1> ; <var:o3> := <var:o3> * <nat:5> ; <var:L> := <var:o3> <var:L> := <var:L> + <var:o2> <var:L> := <var:L> + <var:o1> <var:L> := <var:L> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <def:poly> {{ <var:L> = <nat:5> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:7> * <var:z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <var:z> /\ <var:o2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <var:z> /\ <var:o2> = <var:z> ^ <nat:2> /\ <var:o3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <var:z> /\ <var:o2> = <var:z> ^ <nat:2> /\ <var:o3> = <var:z> ^ <nat:3> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <nat:7> * <var:z> /\ <var:o2> = <var:z> ^ <nat:2> /\ <var:o3> = <var:z> ^ <nat:3> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <nat:7> * <var:z> /\ <var:o2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:o3> = <var:z> ^ <nat:3> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <nat:7> * <var:z> /\ <var:o2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:o3> = <nat:5> * <var:z> ^ <nat:3> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <nat:7> * <var:z> /\ <var:o2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:o0> = <nat:8> /\ <var:L> = <nat:5> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o1> = <nat:7> * <var:z> /\ <var:o0> = <nat:8> /\ <var:L> = <nat:5> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:o0> = <nat:8> /\ <var:L> = <nat:5> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:L> = <nat:5> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:7> * <var:z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 