\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} : \begin{verbatim} <var:X> := <nat:1> ; <var:X> := <nat:3> + <var:X> * <var:H> ; <var:X> := <nat:2> + <var:X> * <var:H> ; <var:X> := <nat:2> + <var:X> * <var:H> ; <var:X> := <nat:4> + <var:X> * <var:H> ; <var:X> := <var:X> * <var:H> ; <var:X> := <nat:4> + <var:X> * <var:H> \end{verbatim} Assuming it to hold that $ <var:H> = <var:v> $ taking whole numbers $ <var:v> $ prior to executing the list of instructions it follows that we have $ <var:X> = <nat:1> \cdot <var:v> ^ <nat:6> + <nat:3> \cdot <var:v> ^ <nat:5> + <nat:2> \cdot <var:v> ^ <nat:4> + <nat:2> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:4> $ when code has executed . \end{theorem} \begin{proof} The method of proof for the list of instructions can be shown by typical Hoare reasoning . Immediately following , we see \begin{verbatim} { <var:H> = <var:v> } <var:X> := <nat:1> { <var:H> = <var:v> \land <var:X> = <nat:1> } { <var:H> = <var:v> \land <var:X> = <nat:1> } <var:X> := <nat:3> + <var:X> * <var:H> { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> + <nat:3> } { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> + <nat:3> } <var:X> := <nat:2> + <var:X> * <var:H> { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:2> } { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:2> } <var:X> := <nat:2> + <var:X> * <var:H> { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:2> } { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:2> } <var:X> := <nat:4> + <var:X> * <var:H> { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:4> } { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:4> } <var:X> := <var:X> * <var:H> { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:2> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + } { <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:2> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + } <var:X> := <nat:4> + <var:X> * <var:H{ <var:H> = <var:v> \land <var:X> = <nat:1> \cdot <var:v> ^ <nat:6> + <nat:3> \cdot <var:v> ^ <nat:5> + <nat:2> \cdot <var:v> ^ <nat:4> + <nat:2> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:4> } \end{verbatim} This is given through the binding law from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:H> = <var:v> }} <var:X> := <nat:1> ; <var:X> := <nat:3> + <var:X> * <var:H> ; <var:X> := <nat:2> + <var:X> * <var:H> ; <var:X> := <nat:2> + <var:X> * <var:H> ; <var:X> := <nat:4> + <var:X> * <var:H> ; <var:X> := <var:X> * <var:H> ; <var:X> := <nat:4> + <var:X> * <var:H> {{ <var:X> = <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:X> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:X> = <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:X> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:X> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:X> = <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:X> = <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:X> = <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 