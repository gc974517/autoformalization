\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:Z> := <nat:3> ; <var:Z> := <nat:4> + <var:Z> * <var:d> \end{verbatim} Allowing that $ <var:d> = <var:c> $ prior to the execution of the code it follows that $ <var:Z> = <nat:3> \times <var:c> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:c> \} \\ <var:Z> := <nat:3> ; \\ \{ <var:d> = <var:c> \land <var:Z> = <nat:3> \} \\ <var:Z> := <nat:4> + <var:Z> * <var:d> \\ \{ <var:d> = <var:c> \land <var:Z> = <nat:3> * <var:c> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:d> = <var:c> }} <var:Z> := <nat:3> ; <var:Z> := <nat:4> + <var:Z> * <var:d> {{ <var:Z> = <nat:3> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:Z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:c> /\ <var:Z> = <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 