\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:s> := <nat:2> ; <var:s> := <nat:2> + <var:s> * <var:S> ; <var:s> := <nat:1> + <var:s> * <var:S> ; <var:s> := <nat:3> + <var:s> * <var:S> ; <var:s> := <nat:3> + <var:s> * <var:S> ; <var:s> := <nat:4> + <var:s> * <var:S> ; <var:s> := <nat:4> + <var:s> * <var:S> ; <var:s> := <nat:3> + <var:s> * <var:S> ; <var:s> := <nat:3> + <var:s> * <var:S> \end{verbatim} Given $ <var:S> = <var:k> $ , letting integers $ <var:k> $ , prior to interpreting our code segment it follows that $ <var:s> = <nat:2> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> $ once code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:k> \} \\ <var:s> := <nat:2> ; \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \} \\ <var:s> := <nat:2> + <var:s> * <var:S> ; \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \times <var:k> + <nat:2> \} \\ <var:s> := <nat:1> + <var:s> * <var:S> ; \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> \} \\ <var:s> := <nat:3> + <var:s> * <var:S> ; \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:3> \} \\ <var:s> := <nat:3> + <var:s> * <var:S> ; \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \times <var:k> ^ <nat:4> + <nat:2> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} \\ <var:s> := <nat:4> + <var:s> * <var:S> ; \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \times <var:k> ^ <nat:5> + <nat:2> \times <var:k> ^ <nat:4> + <nat:1> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:4> \} \\ <var:s> := <nat:4> + <var:s> * <var:S> ; \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \times <var:k> ^ <nat:6> + <nat:2> \times <var:k> ^ <nat:5> + <nat:1> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:4> \} \\ <var:s> := <nat:3> + <var:s> * <var:S> ; \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \times <var:k> ^ <nat:7> + <nat:2> \times <var:k> ^ <nat:6> + <nat:1> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:3> \} \end{eqnarray} Furthering the execution of this list of instructions yields : \begin{eqnarray} <var:s> := <nat:3> + <var:s> * <var:S> \\ \{ <var:S> = <var:k> \land <var:s> = <nat:2> \times <var:k> ^ <nat:8> + <nat:2> \times <var:k> ^ <nat:7> + <nat:1> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:4> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} \end{eqnarray} The application of usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:S> = <var:k> }} <var:s> := <nat:2> ; <var:s> := <nat:2> + <var:s> * <var:S> ; <var:s> := <nat:1> + <var:s> * <var:S> ; <var:s> := <nat:3> + <var:s> * <var:S> ; <var:s> := <nat:3> + <var:s> * <var:S> ; <var:s> := <nat:4> + <var:s> * <var:S> ; <var:s> := <nat:4> + <var:s> * <var:S> ; <var:s> := <nat:3> + <var:s> * <var:S> ; <var:s> := <nat:3> + <var:s> * <var:S> {{ <var:s> = <nat:2> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 