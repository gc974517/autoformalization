\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:9> ; <var:Z> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assuming $ <var:K> = <var:I> $ prior to executing this set of instructions , it follows that we see $ <var:Z> = <nat:9> $ when series of instructions terminates . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be done through this decorated program . \begin{eqnarray} \{ <var:K> = <var:I> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:K> = <var:I> \land <var:S0> = <nat:9> \} \\ <var:Z> := <var:S0> \\ \{ <var:K> = <var:I> \land <var:Z> = <nat:9> \} \end{eqnarray} The application of Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:9> ; <var:Z> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:K> = <var:I> }} <def:poly> {{ <var:Z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:Z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 