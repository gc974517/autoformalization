\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:Q> ; <var:E2> := <var:E1> * <var:Q> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:3> ; <var:E2> := <var:E2> * <nat:4> ; <var:n> := <var:E2> <var:n> := <var:n> + <var:E1> <var:n> := <var:n> + <var:E0> \end{verbatim} Given that $ <var:Q> = <var:c> $ before the evaluation of the list of instructions , it holds that we see $ <var:n> = <nat:4> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:8> $ once list of commands has terminated . \end{theorem} \begin{proof} Proving correctness for the program can be given with usual Hoare techniques . Considering the next steps found in our series of instructions , we have \begin{eqnarray} \{ <var:Q> = <var:c> \} \, <var:E1> := <var:Q> \, \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \} \\ \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \} \, <var:E2> := <var:E1> * <var:Q> \, \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \} \\ \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \} \, <var:E0> := <nat:8> \, \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \land <var:E0> = <nat:8> \} \\ \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \land <var:E0> = <nat:8> \} \, <var:E1> := <var:E1> * <nat:3> \, \{ <var:Q> = <var:c> \land <var:E1> = <nat:3> \cdot <var:c> \land <var:E2> = <var:c> ^ <nat:2> \land <var:E0> = <nat:8> \} \\ \{ <var:Q> = <var:c> \land <var:E1> = <nat:3> \cdot <var:c> \land <var:E2> = <var:c> ^ <nat:2> \land <var:E0> = <nat:8> \} \, <var:E2> := <var:E2> * <nat:4> \, \{ <var:Q> = <var:c> \land <var:E1> = <nat:3> \cdot <var:c> \land <var:E2> = <nat:4> \cdot <var:c> ^ <nat:2> \land <var:E0> = <nat:8> \} \end{eqnarray} This is shown using the variable assignmet scheme from typical Hoare reasoning . Stepping forward , we see \begin{eqnarray} \{ <var:Q> = <var:c> \} \, <var:E1> := <var:Q> \, \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \} \\ \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \} \, <var:E2> := <var:E1> * <var:Q> \, \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \} \end{eqnarray} Honing in on the next piece of code seen in our code segment , we see \begin{eqnarray} \{ <var:Q> = <var:c> \} \, <var:E1> := <var:Q> \, \{ <var:Q> = <var:c> \land <var:E1> = <var:c> \} \end{eqnarray} This is rigorously given by the environment update rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Q> = <var:c> }} <var:E1> := <var:Q> ; <var:E2> := <var:E1> * <var:Q> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:3> ; <var:E2> := <var:E2> * <nat:4> ; <var:n> := <var:E2> <var:n> := <var:n> + <var:E1> <var:n> := <var:n> + <var:E0> {{ <var:n> = <nat:4> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:E1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:E1> = <var:c> /\ <var:E2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:E1> = <var:c> /\ <var:E2> = <var:c> ^ <nat:2> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:E1> = <nat:3> * <var:c> /\ <var:E2> = <var:c> ^ <nat:2> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:E1> = <nat:3> * <var:c> /\ <var:E2> = <nat:4> * <var:c> ^ <nat:2> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:E1> = <nat:3> * <var:c> /\ <var:E0> = <nat:8> /\ <var:n> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:E0> = <nat:8> /\ <var:n> = <nat:4> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:n> = <nat:4> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 