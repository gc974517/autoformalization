\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t> := <nat:3> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <var:t> * <var:B> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:B> = <var:m> $ prior to evaluating our series of instructions , it follows that we see $ <var:t> = <nat:3> \cdot <var:m> ^ <nat:8> + <nat:2> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:2> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the series of commands is evident through typical Hoare techniques . Taking another step toward the proceeding statement contained in our code , the variable assignmet statement letting $ <nat:3> $ into $ <var:t>$ . This redefines the condition $ \{ <var:B> = <var:m> \} $ toward the condition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> \} $ . This is guaranteed with the assignment scheme found in typical Hoare techniques . Going to the next step , we have the variable update line \verb | <var:t> := <nat:2> + <var:t> * <var:B> ; | . This code advances $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> \} $ toward the condition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> + <nat:2> \} $ . Further , we see the variable update command giving $ <var:t> * <var:B> $ to $ <var:t>$ . This line takes $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> + <nat:2> \} $ as the postcondition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + \} $ . Following , the assignment line \verb | <var:t> := <nat:1> + <var:t> * <var:B> ; | . This moves the precondition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + \} $ to the postcondition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> \} $ . This is given with the assignment inference rule defined in usual Hoare reasoning . Honing in on the following bit of code found in the segment of code , we see the variable binding line giving $ <nat:4> + <var:t> * <var:B> $ to $ <var:t>$ . This forwards the condition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> \} $ into the postcondition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:4> \} $ . This is guaranteed with the assignment law from Hoare reasoning . Advancing to the next step , the binding code \verb | <var:t> := <nat:2> + <var:t> * <var:B> ; | . This forwards the precondition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:4> \} $ into the postcondition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> \} $ . This is rigorously given with the assignment inference rule defined by typical Hoare logic . Advancing to the next step , the variable update statement \verb | <var:t> := <nat:4> + <var:t> * <var:B> ; | . This statement moves $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> \} $ to the condition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> \} $ . Honing in on the next line found in our program , we have the variable binding line \verb | <var:t> := <nat:2> + <var:t> * <var:B> ; | . This statement forwards the precondition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> \} $ to the condition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> \} $ . Going to the next step , the variable assignmet line assigning $ <nat:2> + <var:t> * <var:B$ to $ <var:t>$ . This line takes the precondition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> \} $ toward the condition $ \{ <var:B> = <var:m> \land <var:t> = <nat:3> * <var:m> ^ <nat:8> + <nat:2> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:3> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <var:t> * <var:B> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:B> = <var:m> }} <def:poly> {{ <var:t> = <nat:3> * <var:m> ^ <nat:8> + <nat:2> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:t> = <nat:3> * <var:m> ^ <nat:8> + <nat:2> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 