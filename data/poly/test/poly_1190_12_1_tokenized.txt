\begin{document} \begin{theorem} We define a code in \emph{Imp} as \begin{verbatim} <var:s1> := <var:g> ; <var:s2> := <var:s1> * <var:g> ; <var:s3> := <var:s2> * <var:g> ; <var:s4> := <var:s3> * <var:g> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:2> ; <var:s4> := <var:s4> * <nat:4> ; <var:M> := <var:s4> <var:M> := <var:M> + <var:s2> <var:M> := <var:M> + <var:s1> <var:M> := <var:M> + <var:s0> \end{verbatim} Assuming given any positive integer coefficients $ <var:R> $ that we have $ <var:g> = <var:R> $ ahead of the execution of our program , it must be that we have $ <var:M> = <nat:4> \times <var:R> ^ <nat:4> + <nat:2> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our code can be accomplished through this decorated segment of code . \begin{eqnarray} \{ <var:g> = <var:R> \} \\ <var:s1> := <var:g> ; \\ \{ <var:g> = <var:R> \land <var:s1> = <var:R> \} \\ <var:s2> := <var:s1> * <var:g> ; \\ \{ <var:g> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:g> ; \\ \{ <var:g> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \} \\ <var:s4> := <var:s3> * <var:g> ; \\ \{ <var:g> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s4> = <var:R> ^ <nat:4> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:g> = <var:R> \land <var:s1> = <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s4> = <var:R> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:s1> := <var:s1> * <nat:1> ; \\ \{ <var:g> = <var:R> \land <var:s1> = <nat:1> \cdot <var:R> \land <var:s2> = <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s4> = <var:R> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:s2> := <var:s2> * <nat:2> ; \\ \{ <var:g> = <var:R> \land <var:s1> = <nat:1> \cdot <var:R> \land <var:s2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s4> = <var:R> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:s4> := <var:s4> * <nat:4> ; \\ \{ <var:g> = <var:R> \land <var:s1> = <nat:1> \cdot <var:R> \land <var:s2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s4> = <nat:4> \cdot <var:R> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:M> := <var:s4> \\ \{ <var:g> = <var:R> \land <var:s1> = <nat:1> \cdot <var:R> \land <var:s2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:s3> = <var:R> ^ <nat:3> \land <var:s0> = <nat:3> \land <var:M> = <nat:4> \cdot <var:R> ^ <nat:4> \} \\ <var:M> := <var:M> + <var:s2> \\ \{ <var:g> = <var:R> \land <var:s1> = <nat:1> \cdot <var:R> \land <var:s0> = <nat:3> \land <var:M> = <nat:4> \cdot <var:R> ^ <nat:4> + <nat:2> \cdot <var:R> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:s1> \\ \{ <var:g> = <var:R> \land <var:s0> = <nat:3> \land <var:M> = <nat:4> \cdot <var:R> ^ <nat:4> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> \} \\ <var:M> := <var:M> + <var:s0> \\ \{ <var:g> = <var:R> \land <var:M> = <nat:4> \cdot <var:R> ^ <nat:4> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:g> = <var:R> }} <var:s1> := <var:g> ; <var:s2> := <var:s1> * <var:g> ; <var:s3> := <var:s2> * <var:g> ; <var:s4> := <var:s3> * <var:g> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:2> ; <var:s4> := <var:s4> * <nat:4> ; <var:M> := <var:s4> <var:M> := <var:M> + <var:s2> <var:M> := <var:M> + <var:s1> <var:M> := <var:M> + <var:s0> {{ <var:M> = <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s4> = <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s4> = <var:R> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <nat:1> * <var:R> /\ <var:s2> = <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s4> = <var:R> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <nat:1> * <var:R> /\ <var:s2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s4> = <var:R> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <nat:1> * <var:R> /\ <var:s2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s4> = <nat:4> * <var:R> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <nat:1> * <var:R> /\ <var:s2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:s3> = <var:R> ^ <nat:3> /\ <var:s0> = <nat:3> /\ <var:M> = <nat:4> * <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s1> = <nat:1> * <var:R> /\ <var:s0> = <nat:3> /\ <var:M> = <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:s0> = <nat:3> /\ <var:M> = <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:M> = <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 