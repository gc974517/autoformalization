\begin{document} \begin{theorem} Let the following set of commands as follows \begin{verbatim} <var:V1> := <var:r> ; <var:V2> := <var:V1> * <var:r> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:9> ; <var:V2> := <var:V2> * <nat:9> ; <var:F> := <var:V2> <var:F> := <var:F> + <var:V1> <var:F> := <var:F> + <var:V0> \end{verbatim} Allow that $ <var:r> = <var:p> $ ahead of evaluating this set of commands it holds that we have $ <var:F> = <nat:9> \times <var:p> ^ <nat:2> + <nat:9> \times <var:p> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands is accomplished through standard Hoare reasoning . Jumping to the subsequent lines of codecontained in our list of instructions , we have \begin{eqnarray} \{ <var:r> = <var:p> \} \, <var:V1> := <var:r> \, \{ <var:r> = <var:p> \land <var:V1> = <var:p> \} \\ \{ <var:r> = <var:p> \land <var:V1> = <var:p> \} \, <var:V2> := <var:V1> * <var:r> \, \{ <var:r> = <var:p> \land <var:V1> = <var:p> \land <var:V2> = <var:p> ^ <nat:2> \} \\ \{ <var:r> = <var:p> \land <var:V1> = <var:p> \land <var:V2> = <var:p> ^ <nat:2> \} \, <var:V0> := <nat:2> \, \{ <var:r> = <var:p> \land <var:V1> = <var:p> \land <var:V2> = <var:p> ^ <nat:2> \land <var:V0> = <nat:2> \} \\ \{ <var:r> = <var:p> \land <var:V1> = <var:p> \land <var:V2> = <var:p> ^ <nat:2> \land <var:V0> = <nat:2> \} \, <var:V1> := <var:V1> * <nat:9> \, \{ <var:r> = <var:p> \land <var:V1> = <nat:9> \times <var:p> \land <var:V2> = <var:p> ^ <nat:2> \land <var:V0> = <nat:2> \} \\ \{ <var:r> = <var:p> \land <var:V1> = <nat:9> \times <var:p> \land <var:V2> = <var:p> ^ <nat:2> \land <var:V0> = <nat:2> \} \, <var:V2> := <var:V2> * <nat:9> \, \{ <var:r> = <var:p> \land <var:V1> = <nat:9> \times <var:p> \land <var:V2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:V0> = <nat:2> \} \\ \{ <var:r> = <var:p> \land <var:V1> = <nat:9> \times <var:p> \land <var:V2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:V0> = <nat:2> \} \, <var:F> := <var:V2\, \{ <var:r> = <var:p> \land <var:V1> = <nat:9> \times <var:p> \land <var:V0> = <nat:2> \land <var:F> = <nat:9> \times <var:p> ^ <nat:2> \} \\ \{ <var:r> = <var:p> \land <var:V1> = <nat:9> \times <var:p> \land <var:V0> = <nat:2> \land <var:F> = <nat:9> \times <var:p> ^ <nat:2> \} \, <var:F> := <var:F> + <var:V1\, \{ <var:r> = <var:p> \land <var:V0> = <nat:2> \land <var:F> = <nat:9> \times <var:p> ^ <nat:2> + <nat:9> \times <var:p> \} \\ \{ <var:r> = <var:p> \land <var:V0> = <nat:2> \land <var:F> = <nat:9> \times <var:p> ^ <nat:2> + <nat:9> \times <var:p> \} \, <var:F> := <var:F> + <var:V0\, \{ <var:r> = <var:p> \land <var:F> = <nat:9> \times <var:p> ^ <nat:2> + <nat:9> \times <var:p> + <nat:2> \} \end{eqnarray} This is guaranteed by the assignment rule defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:r> = <var:p> }} <var:V1> := <var:r> ; <var:V2> := <var:V1> * <var:r> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:9> ; <var:V2> := <var:V2> * <nat:9> ; <var:F> := <var:V2> <var:F> := <var:F> + <var:V1> <var:F> := <var:F> + <var:V0> {{ <var:F> = <nat:9> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:V1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:V1> = <var:p> /\ <var:V2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:V1> = <var:p> /\ <var:V2> = <var:p> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:V1> = <nat:9> * <var:p> /\ <var:V2> = <var:p> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:V1> = <nat:9> * <var:p> /\ <var:V2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:V1> = <nat:9> * <var:p> /\ <var:V0> = <nat:2> /\ <var:F> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:V0> = <nat:2> /\ <var:F> = <nat:9> * <var:p> ^ <nat:2> + <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:p> /\ <var:F> = <nat:9> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 