\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:p> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:L> = <var:u> $ with some positive integer coefficients $ <var:u> $ ahead of interpreting the code then $ <var:p> = <nat:3> $ after code segment has terminated . \end{theorem} \begin{proof} The method of proof for our list of instructions can be given by standard Hoare techniques . Moving forward , the variable assignmet code binding $ <nat:3> $ to $ <var:c0>$ . This redefines the precondition $ \{ <var:L> = <var:u> \} $ toward the postcondition $ \{ <var:L> = <var:u> \land <var:c0> = <nat:3> \} $ . This is ensured through the assignment rule from typical Hoare logic . Shifting focus toward the next bit of code contained in the code segment , we see the variable update code \verb | <var:p> := <var:c0> | . This forwards the precondition $ \{ <var:L> = <var:u> \land <var:c0> = <nat:3> \} $ as $ \{ <var:L> = <var:u> \land <var:p> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:p> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:L> = <var:u> }} <def:poly> {{ <var:p> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:p> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 