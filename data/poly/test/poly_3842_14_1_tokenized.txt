\begin{document} \begin{theorem} Consider a code : \begin{verbatim} <var:o1> := <var:s> ; <var:o2> := <var:o1> * <var:s> ; <var:o3> := <var:o2> * <var:s> ; <var:o4> := <var:o3> * <var:s> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:9> ; <var:o3> := <var:o3> * <nat:3> ; <var:o4> := <var:o4> * <nat:6> ; <var:O> := <var:o4> <var:O> := <var:O> + <var:o3> <var:O> := <var:O> + <var:o2> <var:O> := <var:O> + <var:o1> <var:O> := <var:O> + <var:o0> \end{verbatim} Assuming , for integers $ <var:j> $ , that $ <var:s> = <var:j> $ prior to running this list of instructions it must be that $ <var:O> = <nat:6> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:6> $ after list of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:j> \} \\ <var:o1> := <var:s> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <var:j> \} \\ <var:o2> := <var:o1> * <var:s> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <var:j> \land <var:o2> = <var:j> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:s> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <var:j> \land <var:o2> = <var:j> ^ <nat:2> \land <var:o3> = <var:j> ^ <nat:3> \} \\ <var:o4> := <var:o3> * <var:s> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <var:j> \land <var:o2> = <var:j> ^ <nat:2> \land <var:o3> = <var:j> ^ <nat:3> \land <var:o4> = <var:j> ^ <nat:4> \} \\ <var:o0> := <nat:6> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <var:j> \land <var:o2> = <var:j> ^ <nat:2> \land <var:o3> = <var:j> ^ <nat:3> \land <var:o4> = <var:j> ^ <nat:4> \land <var:o0> = <nat:6> \} \\ <var:o1> := <var:o1> * <nat:8> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <nat:8> \cdot <var:j> \land <var:o2> = <var:j> ^ <nat:2> \land <var:o3> = <var:j> ^ <nat:3> \land <var:o4> = <var:j> ^ <nat:4> \land <var:o0> = <nat:6> \} \\ <var:o2> := <var:o2> * <nat:9> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <nat:8> \cdot <var:j> \land <var:o2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:o3> = <var:j> ^ <nat:3> \land <var:o4> = <var:j> ^ <nat:4> \land <var:o0> = <nat:6> \} \\ <var:o3> := <var:o3> * <nat:3> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <nat:8> \cdot <var:j> \land <var:o2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:o3> = <nat:3> \cdot <var:j> ^ <nat:3> \land <var:o4> = <var:j> ^ <nat:4> \land <var:o0> = <nat:6> \} \\ <var:o4> := <var:o4> * <nat:6> ; \\ \{ <var:s> = <var:j> \land <var:o1> = <nat:8> \cdot <var:j> \land <var:o2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:o3> = <nat:3> \cdot <var:j> ^ <nat:3> \land <var:o4> = <nat:6> \cdot <var:j> ^ <nat:4> \land <var:o0> = <nat:6> \} \\ <var:O> := <var:o4> \\ \{ <var:s> = <var:j> \land <var:o1> = <nat:8> \cdot <var:j> \land <var:o2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:o3> = <nat:3> \cdot <var:j> ^ <nat:3> \land <var:o0> = <nat:6> \land <var:O> = <nat:6> \cdot <var:j> ^ <nat:4> \} \\ <var:O> := <var:O> + <var:o3> \\ \{ <var:s> = <var:j> \land <var:o1> = <nat:8> \cdot <var:j> \land <var:o2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:o0> = <nat:6> \land <var:O> = <nat:6> \cdot <var:j> ^ <nat:4> + <nat:3> \cdot <var:j> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:o2> \\ \{ <var:s> = <var:j> \land <var:o1> = <nat:8> \cdot <var:j> \land <var:o0> = <nat:6> \land <var:O> = <nat:6> \cdot <var:j> ^ <nat:4> + <nat:3> \cdot <var:j> ^ <nat:3> + <nat:9> \cdot <var:j> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:o1> \\ \{ <var:s> = <var:j> \land <var:o0> = <nat:6> \land <var:O> = <nat:6> \cdot <var:j> ^ <nat:4> + <nat:3> \cdot <var:j> ^ <nat:3> + <nat:9> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> \} \\ <var:O> := <var:O> + <var:o0> \\ \{ <var:s> = <var:j> \land <var:O> = <nat:6> \cdot <var:j> ^ <nat:4> + <nat:3> \cdot <var:j> ^ <nat:3> + <nat:9> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> + <nat:6> \} \end{eqnarray} Applying standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <var:o4> : string := " <var:o4> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:s> = <var:j> }} <var:o1> := <var:s> ; <var:o2> := <var:o1> * <var:s> ; <var:o3> := <var:o2> * <var:s> ; <var:o4> := <var:o3> * <var:s> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:9> ; <var:o3> := <var:o3> * <nat:3> ; <var:o4> := <var:o4> * <nat:6> ; <var:O> := <var:o4> <var:O> := <var:O> + <var:o3> <var:O> := <var:O> + <var:o2> <var:O> := <var:O> + <var:o1> <var:O> := <var:O> + <var:o0> {{ <var:O> = <nat:6> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <var:j> /\ <var:o2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <var:j> /\ <var:o2> = <var:j> ^ <nat:2> /\ <var:o3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <var:j> /\ <var:o2> = <var:j> ^ <nat:2> /\ <var:o3> = <var:j> ^ <nat:3> /\ <var:o4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <var:j> /\ <var:o2> = <var:j> ^ <nat:2> /\ <var:o3> = <var:j> ^ <nat:3> /\ <var:o4> = <var:j> ^ <nat:4> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <nat:8> * <var:j> /\ <var:o2> = <var:j> ^ <nat:2> /\ <var:o3> = <var:j> ^ <nat:3> /\ <var:o4> = <var:j> ^ <nat:4> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <nat:8> * <var:j> /\ <var:o2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:o3> = <var:j> ^ <nat:3> /\ <var:o4> = <var:j> ^ <nat:4> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <nat:8> * <var:j> /\ <var:o2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:o4> = <var:j> ^ <nat:4> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <nat:8> * <var:j> /\ <var:o2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:o4> = <nat:6> * <var:j> ^ <nat:4> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <nat:8> * <var:j> /\ <var:o2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:o0> = <nat:6> /\ <var:O> = <nat:6> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <nat:8> * <var:j> /\ <var:o2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:o0> = <nat:6> /\ <var:O> = <nat:6> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o1> = <nat:8> * <var:j> /\ <var:o0> = <nat:6> /\ <var:O> = <nat:6> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:o0> = <nat:6> /\ <var:O> = <nat:6> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:O> = <nat:6> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 