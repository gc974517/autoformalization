\begin{document} \begin{theorem} Define the following code in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:1> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:a> ; <var:o> := <var:d1> ; <var:o> := <var:o> + <var:d0> \end{verbatim} Assuming it to be that $ <var:a> = <var:x> $ ahead of executing our set of instructions , it must be that we have $ <var:o> = <nat:7> \cdot <var:x> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the program can be demonstrated through typical Hoare logic . Moving onward , \begin{eqnarray} \{ <var:a> = <var:x> \} \, <var:d0> := <nat:1> \, \{ <var:a> = <var:x> \land <var:d0> = <nat:1> \} \\ \{ <var:a> = <var:x> \land <var:d0> = <nat:1> \} \, <var:d1> := <nat:7> \, \{ <var:a> = <var:x> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \} \\ \{ <var:a> = <var:x> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \} \, <var:d1> := <var:d1> * <var:a> \, \{ <var:a> = <var:x> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:x> \} \end{eqnarray} Focusing on the subsequent command in the code segment , we see \begin{eqnarray} \{ <var:a> = <var:x> \} \, <var:d0> := <nat:1> \, \{ <var:a> = <var:x> \land <var:d0> = <nat:1> \} \end{eqnarray} This is sound through the variable binding inference rule from Hoare logic . Moving on to the next step , \begin{eqnarray} \{ <var:a> = <var:x> \} \, <var:d0> := <nat:1> \, \{ <var:a> = <var:x> \land <var:d0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:a> = <var:x> }} <var:d0> := <nat:1> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:a> ; <var:o> := <var:d1> ; <var:o> := <var:o> + <var:d0> {{ <var:o> = <nat:7> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:x> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:x> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:x> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:x> /\ <var:d0> = <nat:1> /\ <var:o> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:x> /\ <var:o> = <nat:7> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 