\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:B> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:5> ; <var:A> := <var:n1> <var:A> := <var:A> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:B> = <var:C> $ , assuming some positive integers $ <var:C> $ , before executing the series of commands , it follows that we see $ <var:A> = <nat:5> \cdot <var:C> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives : \begin{eqnarray} \{ <var:B> = <var:C> \} \\ <var:n1> := <var:B> ; \\ \{ <var:B> = <var:C> \land <var:n1> = <var:C> \} \\ <var:n0> := <nat:6> ; \\ \{ <var:B> = <var:C> \land <var:n1> = <var:C> \land <var:n0> = <nat:6> \} \\ <var:n1> := <var:n1> * <nat:5> ; \\ \{ <var:B> = <var:C> \land <var:n1> = <nat:5> \times <var:C> \land <var:n0> = <nat:6> \} \\ <var:A> := <var:n1> \\ \{ <var:B> = <var:C> \land <var:n0> = <nat:6> \land <var:A> = <nat:5> \times <var:C> \} \\ <var:A> := <var:A> + <var:n0> \\ \{ <var:B> = <var:C> \land <var:A> = <nat:5> \times <var:C> + <nat:6> \} \end{eqnarray} As a consequence , the list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n1> := <var:B> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:5> ; <var:A> := <var:n1> <var:A> := <var:A> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:B> = <var:C> }} <def:poly> {{ <var:A> = <nat:5> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:n1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:n1> = <var:C> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:n1> = <nat:5> * <var:C> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:n0> = <nat:6> /\ <var:A> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:A> = <nat:5> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 