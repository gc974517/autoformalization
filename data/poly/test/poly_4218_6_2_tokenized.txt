\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <nat:4> + <var:E> * <var:e> ; <var:E> := <var:E> * <var:e> ; <var:E> := <nat:4> + <var:E> * <var:e> ; <var:E> := <var:E> * <var:e> ; <var:E> := <nat:3> + <var:E> * <var:e> \end{verbatim} Given that $ <var:e> = <var:r> $ prior to running the code it follows that we see $ <var:E> = <nat:3> \cdot <var:r> ^ <nat:5> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our series of commands is given with standard Hoare logic . Moving forward to the next steps contained in the series of instructions , \[ \begin{tabular} {rcl} \{ <var:e> = <var:r> \} & <var:E> := <nat:3> & \{ <var:e> = <var:r> \land <var:E> = <nat:3> \} \\ \{ <var:e> = <var:r> \land <var:E> = <nat:3> \} & <var:E> := <nat:4> + <var:E> * <var:e> & \{ <var:e> = <var:r> \land <var:E> = <nat:3> \times <var:r> + <nat:4> \} \\ \{ <var:e> = <var:r> \land <var:E> = <nat:3> \times <var:r> + <nat:4> \} & <var:E> := <var:E> * <var:e> & \{ <var:e> = <var:r> \land <var:E> = <nat:3> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + \} \\ \{ <var:e> = <var:r> \land <var:E> = <nat:3> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + \} & <var:E> := <nat:4> + <var:E> * <var:e> & \{ <var:e> = <var:r> \land <var:E> = <nat:3> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:4> \} \\ \{ <var:e> = <var:r> \land <var:E> = <nat:3> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:4> \} & <var:E> := <var:E> * <var:e> & \{ <var:e> = <var:r> \land <var:E> = <nat:3> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> + \} \end{tabular} This is shown to be logically sound by the binding rule defined in standard Hoare techniques . Moving onward , \[ \begin{tabular} {rcl} \{ <var:e> = <var:r> \} & <var:E> := <nat:3> & \{ <var:e> = <var:r> \land <var:E> = <nat:3> \} \end{tabular} This is deduced by the environment update inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:e> = <var:r> }} <var:E> := <nat:3> ; <var:E> := <nat:4> + <var:E> * <var:e> ; <var:E> := <var:E> * <var:e> ; <var:E> := <nat:4> + <var:E> * <var:e> ; <var:E> := <var:E> * <var:e> ; <var:E> := <nat:3> + <var:E> * <var:e> {{ <var:E> = <nat:3> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:E> = <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:E> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:E> = <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:E> = <nat:3> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:E> = <nat:3> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 