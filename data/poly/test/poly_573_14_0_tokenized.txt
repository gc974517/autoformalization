\begin{document} \begin{theorem} Take the following program as follows \begin{verbatim} <var:s0> := <nat:8> ; <var:s1> := <nat:8> ; <var:s1> := <var:s1> * <var:O> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:O> ; <var:s2> := <var:s2> * <var:O> ; <var:s3> := <nat:6> ; <var:s3> := <var:s3> * <var:O> ; <var:s3> := <var:s3> * <var:O> ; <var:s3> := <var:s3> * <var:O> ; <var:U> := <var:s3> ; <var:U> := <var:U> + <var:s2> ; <var:U> := <var:U> + <var:s1> ; <var:U> := <var:U> + <var:s0> \end{verbatim} Assuming for every $ <var:C> \in \mathbb{N} $ that we have $ <var:O> = <var:C> $ before executing the list of instructions it holds that we have $ <var:U> = <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:8> $ . \end{theorem} \begin{proof} Note that the below decorated set of instructions . \begin{eqnarray} \{ <var:O> = <var:C> \} \\ <var:s0> := <nat:8> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \} \\ <var:s1> := <nat:8> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> \} \\ <var:s1> := <var:s1> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \} \\ <var:s2> := <nat:2> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:s2> = <nat:2> \} \\ <var:s2> := <var:s2> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:s2> = <nat:2> * <var:C> \} \\ <var:s2> := <var:s2> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \} \\ <var:s3> := <nat:6> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s3> = <nat:6> \} \\ <var:s3> := <var:s3> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s3> = <nat:6> * <var:C> \} \\ <var:s3> := <var:s3> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s3> = <nat:6> * <var:C> ^ <nat:2> \} \\ <var:s3> := <var:s3> * <var:O> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s3> = <nat:6> * <var:C> ^ <nat:3> \} \\ <var:U> := <var:s3> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:U> = <nat:6> * <var:C> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:s2> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:s1> = <nat:8> * <var:C> \land <var:U> = <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:s1> ; \\ \{ <var:O> = <var:C> \land <var:s0> = <nat:8> \land <var:U> = <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> \} \\ <var:U> := <var:U> + <var:s0> \\ \{ <var:O> = <var:C> \land <var:U> = <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:8> \} \end{eqnarray} Allowing the evaluation of this list of instructions produces : \begin{eqnarray} \end{eqnarray} The application of standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:O> = <var:C> }} <var:s0> := <nat:8> ; <var:s1> := <nat:8> ; <var:s1> := <var:s1> * <var:O> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:O> ; <var:s2> := <var:s2> * <var:O> ; <var:s3> := <nat:6> ; <var:s3> := <var:s3> * <var:O> ; <var:s3> := <var:s3> * <var:O> ; <var:s3> := <var:s3> * <var:O> ; <var:U> := <var:s3> ; <var:U> := <var:U> + <var:s2> ; <var:U> := <var:U> + <var:s1> ; <var:U> := <var:U> + <var:s0> {{ <var:U> = <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:s2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:U> = <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:8> * <var:C> /\ <var:U> = <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:s0> = <nat:8> /\ <var:U> = <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:C> /\ <var:U> = <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 