\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <nat:2> + <var:L> * <var:q> ; <var:L> := <nat:3> + <var:L> * <var:q> ; <var:L> := <nat:3> + <var:L> * <var:q> ; <var:L> := <nat:2> + <var:L> * <var:q> ; <var:L> := <nat:2> + <var:L> * <var:q> \end{verbatim} Allowing it to be that $ <var:q> = <var:y> $ for all positive integer coefficients $ <var:y> $ ahead of interpreting our segment of code it must be that we see $ <var:L> = <nat:2> \times <var:y> ^ <nat:5> + <nat:2> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning produces : \begin{eqnarray} \{ <var:q> = <var:y> \} \\ <var:L> := <nat:2> ; \\ \{ <var:q> = <var:y> \land <var:L> = <nat:2> \} \\ <var:L> := <nat:2> + <var:L> * <var:q> ; \\ \{ <var:q> = <var:y> \land <var:L> = <nat:2> * <var:y> + <nat:2> \} \\ <var:L> := <nat:3> + <var:L> * <var:q> ; \\ \{ <var:q> = <var:y> \land <var:L> = <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> \} \\ <var:L> := <nat:3> + <var:L> * <var:q> ; \\ \{ <var:q> = <var:y> \land <var:L> = <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> \} \\ <var:L> := <nat:2> + <var:L> * <var:q> ; \\ \{ <var:q> = <var:y> \land <var:L> = <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> \} \\ <var:L> := <nat:2> + <var:L> * <var:q> \\ \{ <var:q> = <var:y> \land <var:L> = <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> \} \end{eqnarray} Given the preceding argument , our set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:q> = <var:y> }} <var:L> := <nat:2> ; <var:L> := <nat:2> + <var:L> * <var:q> ; <var:L> := <nat:3> + <var:L> * <var:q> ; <var:L> := <nat:3> + <var:L> * <var:q> ; <var:L> := <nat:2> + <var:L> * <var:q> ; <var:L> := <nat:2> + <var:L> * <var:q> {{ <var:L> = <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:L> = <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:L> = <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:L> = <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:L> = <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:L> = <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 