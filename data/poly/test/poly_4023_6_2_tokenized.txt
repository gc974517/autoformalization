\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R> := <nat:1> ; <var:R> := <var:R> * <var:S> ; <var:R> := <nat:2> + <var:R> * <var:S> ; <var:R> := <nat:4> + <var:R> * <var:S> ; <var:R> := <nat:1> + <var:R> * <var:S> ; <var:R> := <nat:4> + <var:R> * <var:S> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Given given all natural coefficients $ <var:w> $ that $ <var:S> = <var:w> $ prior to the execution of this program , then $ <var:R> = <nat:1> \times <var:w> ^ <nat:5> + <nat:2> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> $ after program has terminated . \end{theorem} \begin{proof} The method of proof for the list of commands can be done by the following decorated series of commands . \begin{eqnarray} \{ <var:S> = <var:w> \} \\ <var:R> := <nat:1> ; \\ \{ <var:S> = <var:w> \land <var:R> = <nat:1> \} \\ <var:R> := <var:R> * <var:S> ; \\ \{ <var:S> = <var:w> \land <var:R> = <nat:1> * <var:w> + \} \\ <var:R> := <nat:2> + <var:R> * <var:S> ; \\ \{ <var:S> = <var:w> \land <var:R> = <nat:1> * <var:w> ^ <nat:2> + <nat:2> \} \\ <var:R> := <nat:4> + <var:R> * <var:S> ; \\ \{ <var:S> = <var:w> \land <var:R> = <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> + <nat:4> \} \\ <var:R> := <nat:1> + <var:R> * <var:S> ; \\ \{ <var:S> = <var:w> \land <var:R> = <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> \} \\ <var:R> := <nat:4> + <var:R> * <var:S> \\ \{ <var:S> = <var:w> \land <var:R> = <nat:1> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> \} \end{eqnarray} The application of Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:1> ; <var:R> := <var:R> * <var:S> ; <var:R> := <nat:2> + <var:R> * <var:S> ; <var:R> := <nat:4> + <var:R> * <var:S> ; <var:R> := <nat:1> + <var:R> * <var:S> ; <var:R> := <nat:4> + <var:R> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:S> = <var:w> }} <def:poly> {{ <var:R> = <nat:1> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:R> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:R> = <nat:1> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:R> = <nat:1> * <var:w> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:R> = <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:R> = <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:R> = <nat:1> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 