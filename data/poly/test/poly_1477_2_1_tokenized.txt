\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:1> ; <var:V> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Given it to be that $ <var:P> = <var:w> $ ( given some positive coefficients $ <var:w> $ ) prior to running our set of instructions it must be that we see $ <var:V> = <nat:1> $ . \end{theorem} \begin{proof} Note that the below decorated set of commands . \begin{eqnarray} \{ <var:P> = <var:w> \} \\ <var:A0> := <nat:1> ; \\ \{ <var:P> = <var:w> \land <var:A0> = <nat:1> \} \\ <var:V> := <var:A0> \\ \{ <var:P> = <var:w> \land <var:V> = <nat:1> \} \end{eqnarray} Applying typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:1> ; <var:V> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:P> = <var:w> }} <def:poly> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 