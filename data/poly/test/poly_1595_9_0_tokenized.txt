\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:8> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:G> ; <var:q2> := <nat:7> ; <var:q2> := <var:q2> * <var:G> ; <var:q2> := <var:q2> * <var:G> ; <var:J> := <var:q2> ; <var:J> := <var:J> + <var:q1> ; <var:J> := <var:J> + <var:q0> \end{verbatim} Allow that $ <var:G> = <var:W> $ ahead of the execution of this segment of code , then we see $ <var:J> = <nat:7> \cdot <var:W> ^ <nat:2> + <nat:7> \cdot <var:W> + <nat:8> $ . \end{theorem} \begin{proof} The proof of our set of instructions is evident with standard Hoare techniques . Focusing on the proceeding lines of codein the list of instructions , we see \begin{verbatim} { <var:G> = <var:W> } <var:q0> := <nat:8> { <var:G> = <var:W> \land <var:q0> = <nat:8> } { <var:G> = <var:W> \land <var:q0> = <nat:8> } <var:q1> := <nat:7> { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> } { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> } <var:q1> := <var:q1> * <var:G> { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> \times <var:W> } { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> \times <var:W> } <var:q2> := <nat:7> { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> \times <var:W> \land <var:q2> = <nat:7> } \end{verbatim} This is rigorously given by the binding rule defined in standard Hoare techniques . Looking at the next pieces of code in our list of instructions , we have \begin{verbatim} { <var:G> = <var:W> } <var:q0> := <nat:8> { <var:G> = <var:W> \land <var:q0> = <nat:8> } { <var:G> = <var:W> \land <var:q0> = <nat:8> } <var:q1> := <nat:7> { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> } \end{verbatim} This is known to be sound through the variable assignmet rule given by Hoare reasoning . Honing in on the upcoming commands in our list of commands , we have \begin{verbatim} { <var:G> = <var:W> } <var:q0> := <nat:8> { <var:G> = <var:W> \land <var:q0> = <nat:8> } { <var:G> = <var:W> \land <var:q0> = <nat:8> } <var:q1> := <nat:7> { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> } { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> } <var:q1> := <var:q1> * <var:G> { <var:G> = <var:W> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> \times <var:W> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:G> = <var:W> }} <var:q0> := <nat:8> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:G> ; <var:q2> := <nat:7> ; <var:q2> := <var:q2> * <var:G> ; <var:q2> := <var:q2> * <var:G> ; <var:J> := <var:q2> ; <var:J> := <var:J> + <var:q1> ; <var:J> := <var:J> + <var:q0> {{ <var:J> = <nat:7> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:W> /\ <var:q2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:W> /\ <var:q2> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:W> /\ <var:q2> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:W> /\ <var:J> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:q0> = <nat:8> /\ <var:J> = <nat:7> * <var:W> ^ <nat:2> + <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:J> = <nat:7> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 