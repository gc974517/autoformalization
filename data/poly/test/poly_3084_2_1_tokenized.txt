\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:8> ; <var:q> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Assuming it to hold that $ <var:A> = <var:L> $ before evaluating our code , then we see $ <var:q> = <nat:8> $ when code has finished executing . \end{theorem} \begin{proof} The course of logic for our series of commands is given through usual Hoare techniques . Moving onward , we see the variable update command binding $ <nat:8> $ to $ <var:Q0>$ . This moves the condition $ \{ <var:A> = <var:L> \} $ to the postcondition $ \{ <var:A> = <var:L> \land <var:Q0> = <nat:8> \} $ . Taking a look at the following command contained in our set of commands , we see the variable binding line \verb | <var:q> := <var:Q0> | . This code transfers the precondition $ \{ <var:A> = <var:L> \land <var:Q0> = <nat:8> \} $ into $ \{ <var:A> = <var:L> \land <var:q> = <nat:8> \} $ . This is guaranteed through the assignment rule defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:8> ; <var:q> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:A> = <var:L> }} <def:poly> {{ <var:q> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:L> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:L> /\ <var:q> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 