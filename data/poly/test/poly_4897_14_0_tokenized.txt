\begin{document} \begin{theorem} Take the following list of instructions : \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:v> ; <var:W2> := <nat:5> ; <var:W2> := <var:W2> * <var:v> ; <var:W2> := <var:W2> * <var:v> ; <var:W3> := <nat:8> ; <var:W3> := <var:W3> * <var:v> ; <var:W3> := <var:W3> * <var:v> ; <var:W3> := <var:W3> * <var:v> ; <var:y> := <var:W3> ; <var:y> := <var:y> + <var:W2> ; <var:y> := <var:y> + <var:W1> ; <var:y> := <var:y> + <var:W0> \end{verbatim} Allow --- for $ <var:p> \in \mathbb{Z}^+ $ --- that $ <var:v> = <var:p> $ prior to the evaluation of our code , it must be that $ <var:y> = <nat:8> \times <var:p> ^ <nat:3> + <nat:5> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare techniques gives us : \begin{eqnarray} \{ <var:v> = <var:p> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \} \\ <var:W1> := <nat:4> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \} \\ <var:W1> := <var:W1> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \} \\ <var:W2> := <nat:5> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:W2> = <nat:5> \} \\ <var:W2> := <var:W2> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:W2> = <nat:5> * <var:p> \} \\ <var:W2> := <var:W2> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:W2> = <nat:5> * <var:p> ^ <nat:2> \} \\ <var:W3> := <nat:8> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:W2> = <nat:5> * <var:p> ^ <nat:2> \land <var:W3> = <nat:8> \} \\ <var:W3> := <var:W3> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:W2> = <nat:5> * <var:p> ^ <nat:2> \land <var:W3> = <nat:8> * <var:p> \} \\ <var:W3> := <var:W3> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:W2> = <nat:5> * <var:p> ^ <nat:2> \land <var:W3> = <nat:8> * <var:p> ^ <nat:2> \} \\ <var:W3> := <var:W3> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:W2> = <nat:5> * <var:p> ^ <nat:2> \land <var:W3> = <nat:8> * <var:p> ^ <nat:3> \} \\ <var:y> := <var:W3> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:W2> = <nat:5> * <var:p> ^ <nat:2> \land <var:y> = <nat:8> * <var:p> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:W2> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> * <var:p> \land <var:y> = <nat:8> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:W1> ; \\ \{ <var:v> = <var:p> \land <var:W0> = <nat:1> \land <var:y> = <nat:8> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:4> * <var:p> \} \\ <var:y> := <var:y> + <var:W0> \\ \{ <var:v> = <var:p> \land <var:y> = <nat:8> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> \} \end{eqnarray} As a result , this list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:v> = <var:p> }} <var:W0> := <nat:1> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:v> ; <var:W2> := <nat:5> ; <var:W2> := <var:W2> * <var:v> ; <var:W2> := <var:W2> * <var:v> ; <var:W3> := <nat:8> ; <var:W3> := <var:W3> * <var:v> ; <var:W3> := <var:W3> * <var:v> ; <var:W3> := <var:W3> * <var:v> ; <var:y> := <var:W3> ; <var:y> := <var:y> + <var:W2> ; <var:y> := <var:y> + <var:W1> ; <var:y> := <var:y> + <var:W0> {{ <var:y> = <nat:8> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:W2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:W2> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:W2> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:W2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:W3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:W2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:W2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:W2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:W2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:y> = <nat:8> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:p> /\ <var:y> = <nat:8> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:W0> = <nat:1> /\ <var:y> = <nat:8> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:y> = <nat:8> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 