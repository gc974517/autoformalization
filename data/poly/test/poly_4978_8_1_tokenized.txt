\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:V> ; <var:b2> := <var:b1> * <var:V> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:3> ; <var:s> := <var:b2> <var:s> := <var:s> + <var:b1> <var:s> := <var:s> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Assuming $ <var:V> = <var:r> $ ahead of the evaluation of our series of instructions , then we have $ <var:s> = <nat:3> \times <var:r> ^ <nat:2> + <nat:5> \times <var:r> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this code is accomplished through standard Hoare techniques . Moving on to the proceeding statement found in our program , we see the assignment statement \verb | <var:b1> := <var:V> ; | . This statement redefines the precondition $ \{ <var:V> = <var:r> \} $ as the postcondition $ \{ <var:V> = <var:r> \land <var:b1> = <var:r> \} $ . After , the environment update command binding $ <var:b1> * <var:V> $ toward $ <var:b2>$ . This moves the condition $ \{ <var:V> = <var:r> \land <var:b1> = <var:r> \} $ to the condition $ \{ <var:V> = <var:r> \land <var:b1> = <var:r> \land <var:b2> = <var:r> ^ <nat:2> \} $ . Taking another step toward the subsequent piece of code in the set of instructions , we have the variable binding command yielding $ <nat:2> $ toward $ <var:b0>$ . This takes the precondition $ \{ <var:V> = <var:r> \land <var:b1> = <var:r> \land <var:b2> = <var:r> ^ <nat:2> \} $ toward the condition $ \{ <var:V> = <var:r> \land <var:b1> = <var:r> \land <var:b2> = <var:r> ^ <nat:2> \land <var:b0> = <nat:2> \} $ . This is deduced with the assignment inference rule defined by standard Hoare techniques . Stepping through , we have the environment update line binding $ <var:b1> * <nat:5> $ toward $ <var:b1>$ . This transfers $ \{ <var:V> = <var:r> \land <var:b1> = <var:r> \land <var:b2> = <var:r> ^ <nat:2> \land <var:b0> = <nat:2> \} $ to the condition $ \{ <var:V> = <var:r> \land <var:b1> = <nat:5> \times <var:r> \land <var:b2> = <var:r> ^ <nat:2> \land <var:b0> = <nat:2> \} $ . Moving forward to the next line of code in our list of instructions , we have the variable assignmet code letting $ <var:b2> * <nat:3> $ to $ <var:b2>$ . This statement forwards the precondition $ \{ <var:V> = <var:r> \land <var:b1> = <nat:5> \times <var:r> \land <var:b2> = <var:r> ^ <nat:2> \land <var:b0> = <nat:2> \} $ toward the condition $ \{ <var:V> = <var:r> \land <var:b1> = <nat:5> \times <var:r> \land <var:b2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:b0> = <nat:2> \} $ . This is shown by the assignment rule found in standard Hoare reasoning . Advancing on , we have the variable update line assigning $ <var:b2$ to $ <var:s>$ . This code transfers the condition $ \{ <var:V> = <var:r> \land <var:b1> = <nat:5> \times <var:r> \land <var:b2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:b0> = <nat:2> \} $ to the postcondition $ \{ <var:V> = <var:r> \land <var:b1> = <nat:5> \times <var:r> \land <var:b0> = <nat:2> \land <var:s> = <nat:3> \times <var:r> ^ <nat:2> \} $ . This is ensured using the assignment scheme defined in Hoare techniques . Immediately after , we see the binding statement \verb | <var:s> := <var:s> + <var:b1> | . This line takes the condition $ \{ <var:V> = <var:r> \land <var:b1> = <nat:5> \times <var:r> \land <var:b0> = <nat:2> \land <var:s> = <nat:3> \times <var:r> ^ <nat:2> \} $ to the condition $ \{ <var:V> = <var:r> \land <var:b0> = <nat:2> \land <var:s> = <nat:3> \times <var:r> ^ <nat:2> + <nat:5> \times <var:r> \} $ . This is deduced by the assignment inference rule defined by usual Hoare reasoning . Focusing on the following bit of code contained in our code , we see the environment update code \verb | <var:s> := <var:s> + <var:b0> | . This advances $ \{ <var:V> = <var:r> \land <var:b0> = <nat:2> \land <var:s> = <nat:3> \times <var:r> ^ <nat:2> + <nat:5> \times <var:r> \} $ to the condition $ \{ <var:V> = <var:r> \land <var:s> = <nat:3> \times <var:r> ^ <nat:2> + <nat:5> \times <var:r> + <nat:2> \} $ . This is given using the assignment law found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b1> := <var:V> ; <var:b2> := <var:b1> * <var:V> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:3> ; <var:s> := <var:b2> <var:s> := <var:s> + <var:b1> <var:s> := <var:s> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:V> = <var:r> }} <def:poly> {{ <var:s> = <nat:3> * <var:r> ^ <nat:2> + <nat:5> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:b1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:b1> = <var:r> /\ <var:b2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:b1> = <var:r> /\ <var:b2> = <var:r> ^ <nat:2> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:b1> = <nat:5> * <var:r> /\ <var:b2> = <var:r> ^ <nat:2> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:b1> = <nat:5> * <var:r> /\ <var:b2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:b1> = <nat:5> * <var:r> /\ <var:b0> = <nat:2> /\ <var:s> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:b0> = <nat:2> /\ <var:s> = <nat:3> * <var:r> ^ <nat:2> + <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:s> = <nat:3> * <var:r> ^ <nat:2> + <nat:5> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 