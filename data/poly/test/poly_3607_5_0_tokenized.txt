\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:v0> := <nat:4> ; <var:v1> := <nat:9> ; <var:v1> := <var:v1> * <var:c> ; <var:F> := <var:v1> ; <var:F> := <var:F> + <var:v0> \end{verbatim} Allowing $ <var:c> = <var:R> $ before interpreting the list of commands , then we see $ <var:F> = <nat:9> \times <var:R> + <nat:4> $ once list of commands has terminated . \end{theorem} \begin{proof} The course of logic for this set of instructions can be given by typical Hoare techniques . Looking at the proceeding line contained in the code segment , \[ \begin{tabular} {rcl} \{ <var:c> = <var:R> \} & <var:v0> := <nat:4> & \{ <var:c> = <var:R> \land <var:v0> = <nat:4> \} \end{tabular} This is given using the assignment inference rule from Hoare techniques . Now , \[ \begin{tabular} {rcl} \{ <var:c> = <var:R> \} & <var:v0> := <nat:4> & \{ <var:c> = <var:R> \land <var:v0> = <nat:4> \} \\ \{ <var:c> = <var:R> \land <var:v0> = <nat:4> \} & <var:v1> := <nat:9> & \{ <var:c> = <var:R> \land <var:v0> = <nat:4> \land <var:v1> = <nat:9> \} \end{tabular} This is known to be sound with the assignment inference rule given by Hoare logic . Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:R> \} & <var:v0> := <nat:4> & \{ <var:c> = <var:R> \land <var:v0> = <nat:4> \} \end{tabular} This is known to be sound by the environment update inference rule defined by standard Hoare techniques . After , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:R> \} & <var:v0> := <nat:4> & \{ <var:c> = <var:R> \land <var:v0> = <nat:4> \} \end{tabular} This is rigorously given using the binding inference rule in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:c> = <var:R> }} <var:v0> := <nat:4> ; <var:v1> := <nat:9> ; <var:v1> := <var:v1> * <var:c> ; <var:F> := <var:v1> ; <var:F> := <var:F> + <var:v0> {{ <var:F> = <nat:9> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:v0> = <nat:4> /\ <var:F> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F> = <nat:9> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 