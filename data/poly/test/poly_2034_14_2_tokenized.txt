\begin{document} \begin{theorem} We define the following set of commands such that \begin{verbatim} <var:n> := <nat:4> ; <var:n> := <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:4> + <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:4> + <var:n> * <var:t> ; <var:n> := <nat:3> + <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:3> + <var:n> * <var:t> ; <var:n> := <nat:1> + <var:n> * <var:t> ; <var:n> := <nat:1> + <var:n> * <var:t> ; <var:n> := <nat:3> + <var:n> * <var:t> \end{verbatim} Assuming that we have $ <var:t> = <var:j> $ for $ <var:j> \in \mathbb{Z}^+ $ before interpreting this code segment it holds that we see $ <var:n> = <nat:4> \times <var:j> ^ <nat:13> + <nat:2> \times <var:j> ^ <nat:11> + <nat:2> \times <var:j> ^ <nat:10> + <nat:2> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:8> + <nat:2> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:3> \times <var:j> ^ <nat:5> + <nat:2> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our series of commands can be seen with usual Hoare reasoning . Moving forward , the environment update line binding $ <nat:4> $ as $ <var:n>$ . This statement forwards the condition $ \{ <var:t> = <var:j> \} $ toward the postcondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> \} $ . This is given using the assignment scheme from usual Hoare techniques . Paying attention to the next statement contained in the series of commands , the binding line \verb | <var:n> := <var:n> * <var:t> ; | . This advances the condition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> \} $ as the postcondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> + \} $ . This is ensured by the assignment inference rule given by usual Hoare reasoning . Following , we have the variable assignmet command yielding $ <nat:2> + <var:n> * <var:t> $ toward $ <var:n>$ . This command redefines the condition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> + \} $ into the condition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> \} $ . This is given with the assignment law defined in usual Hoare logic . Moving on to the subsequent command found in our list of instructions , we have the environment update line \verb | <var:n> := <nat:2> + <var:n> * <var:t> ; | . This redefines $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> \} $ into $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:2> \} $ . This is sound with the assignment rule in standard Hoare techniques . Taking a look at the subsequent piece of code seen in our code , the environment update code assigning $ <nat:2> + <var:n> * <var:t> $ toward $ <var:n>$ . This takes $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:2> \} $ into the postcondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> \} $ . This is deduced with the assignment law from typical Hoare techniques . Stepping forward , we have the environment update statement \verb | <var:n> := <nat:4> + <var:n> * <var:t> ; | . This command transfers $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> \} $ to $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> \} $ . This is sound through the assignment law defined in usual Hoare logic . Jumping to the upcoming piece of code found in the code , we see the variable assignmet line \verb | <var:n> := <nat:2> + <var:n> * <var:t> ; | . This command takes the condition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> \} $ to the postcondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> \} $ . Considering the next line of code in the segment of code , we see the variable binding line letting $ <nat:4> + <var:n> * <var:t> $ as $ <var:n>$ . This command advances $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> \} $ to the postcondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> \} $ . This is guaranteed with the assignment scheme found in Hoare reasoning . Further , the variable assignmet statement giving $ <nat:3> + <var:n> * <var:t> $ into $ <var:n>$ . This command moves $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> \} $ into the postcondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} $ . This is known to be sound by the assignment scheme given by usual Hoare techniques . Moving on , we see the assignment command \verb | <var:n> := <nat:2> + <var:n> * <var:t> ; | . This redefines $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} $ toward $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> \} $ . Honing in on the upcoming line of code seen in our list of commands , we have the variable assignmet command \verb | <var:n> := <nat:3> + <var:n> * <var:t> ; | . This line takes $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> \} $ toward the condition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> \} $ . This is known to be sound by the assignment rule in usual Hoare techniques . Going to the next step , we see the variable binding command \verb | <var:n> := <nat:1> + <var:n> * <var:t> ; | . This code advances the precondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> \} $ into the condition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:11> + <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} $ . Moving on to the proceeding piece of code in the series of commands , we see the variable update statement yielding $ <nat:1> + <var:n> * <var:t> $ as $ <var:n>$ . This advances the precondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:11> + <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} $ toward the condition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:12> + <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> \} $ . Following , we have the variable binding code \verb | <var:n> := <nat:3> + <var:n> * <var:t> | . This moves the precondition $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:12> + <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> \} $ toward $ \{ <var:t> = <var:j> \land <var:n> = <nat:4> * <var:j> ^ <nat:13> + <nat:2> * <var:j> ^ <nat:11> + <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> \} $ . This is guaranteed with the assignment rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:t> = <var:j> }} <var:n> := <nat:4> ; <var:n> := <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:4> + <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:4> + <var:n> * <var:t> ; <var:n> := <nat:3> + <var:n> * <var:t> ; <var:n> := <nat:2> + <var:n> * <var:t> ; <var:n> := <nat:3> + <var:n> * <var:t> ; <var:n> := <nat:1> + <var:n> * <var:t> ; <var:n> := <nat:1> + <var:n> * <var:t> ; <var:n> := <nat:3> + <var:n> * <var:t> {{ <var:n> = <nat:4> * <var:j> ^ <nat:13> + <nat:2> * <var:j> ^ <nat:11> + <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:11> + <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:12> + <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:n> = <nat:4> * <var:j> ^ <nat:13> + <nat:2> * <var:j> ^ <nat:11> + <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 