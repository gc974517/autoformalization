\begin{document} \begin{theorem} We define a list of instructions such that \begin{verbatim} <var:p0> := <nat:2> ; <var:I> := <var:p0> \end{verbatim} Allow that $ <var:t> = <var:m> $ ahead of evaluating our program , it holds that we see $ <var:I> = <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning produces : \begin{eqnarray} \{ <var:t> = <var:m> \} \\ <var:p0> := <nat:2> ; \\ \{ <var:t> = <var:m> \land <var:p0> = <nat:2> \} \\ <var:I> := <var:p0> \\ \{ <var:t> = <var:m> \land <var:I> = <nat:2> \} \end{eqnarray} Thusly , our series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:t> = <var:m> }} <var:p0> := <nat:2> ; <var:I> := <var:p0> {{ <var:I> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:I> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 