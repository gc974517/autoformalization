\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:4> + <var:e> * <var:u> ; <var:e> := <nat:4> + <var:e> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Assume that $ <var:u> = <var:k> $ prior to evaluating the code , it holds that we have $ <var:e> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:4> $ after code segment has exited . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:u> = <var:k> \} \\ <var:e> := <nat:3> ; \\ \{ <var:u> = <var:k> \land <var:e> = <nat:3> \} \\ <var:e> := <nat:4> + <var:e> * <var:u> ; \\ \{ <var:u> = <var:k> \land <var:e> = <nat:3> \cdot <var:k> + <nat:4> \} \\ <var:e> := <nat:4> + <var:e> * <var:u> \\ \{ <var:u> = <var:k> \land <var:e> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:4> \} \end{eqnarray} Thusly , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <nat:4> + <var:e> * <var:u> ; <var:e> := <nat:4> + <var:e> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:u> = <var:k> }} <def:poly> {{ <var:e> = <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:e> = <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:e> = <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 