\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:5> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:Z> ; <var:r> := <var:f1> ; <var:r> := <var:r> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Assuming it to be that $ <var:Z> = <var:w> $ ahead of interpreting our set of commands it follows that $ <var:r> = <nat:3> \times <var:w> + <nat:5> $ once list of instructions is done . \end{theorem} \begin{proof} Arguing the correctness of the program is accomplished through usual Hoare techniques . Considering the following pieces of code contained in the segment of code , \begin{verbatim} { <var:Z> = <var:w> } <var:f0> := <nat:5> { <var:Z> = <var:w> \land <var:f0> = <nat:5> } { <var:Z> = <var:w> \land <var:f0> = <nat:5> } <var:f1> := <nat:3> { <var:Z> = <var:w> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> } \end{verbatim} This is rigorously given with the variable assignmet inference rule obtained from standard Hoare techniques . Next , \begin{verbatim} { <var:Z> = <var:w> } <var:f0> := <nat:5> { <var:Z> = <var:w> \land <var:f0> = <nat:5> } { <var:Z> = <var:w> \land <var:f0> = <nat:5> } <var:f1> := <nat:3> { <var:Z> = <var:w> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> } \end{verbatim} This is shown to be logically sound using the variable binding scheme defined in Hoare techniques . Next , we have \begin{verbatim} { <var:Z> = <var:w> } <var:f0> := <nat:5> { <var:Z> = <var:w> \land <var:f0> = <nat:5> } \end{verbatim} This is given through the variable update inference rule defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:5> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:Z> ; <var:r> := <var:f1> ; <var:r> := <var:r> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Z> = <var:w> }} <def:poly> {{ <var:r> = <nat:3> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:f0> = <nat:5> /\ <var:r> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:r> = <nat:3> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 