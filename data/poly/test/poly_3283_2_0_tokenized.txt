\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:3> ; <var:x> := <var:X0> \end{verbatim} Assume it to be that $ <var:e> = <var:z> $ ahead of evaluating this code it must be that we see $ <var:x> = <nat:3> $ when series of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions is clear through standard Hoare logic . Focusing on the following bits of codefound in our set of commands , \verb | { <var:e> = <var:z> } <var:X0> := <nat:3> { <var:e> = <var:z> \land <var:X0> = <nat:3> } | and \verb | { <var:e> = <var:z> \land <var:X0> = <nat:3> } <var:x> := <var:X0{ <var:e> = <var:z> \land <var:x> = <nat:3> } | . This is rigorously given by the assignment inference rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:e> = <var:z> }} <var:X0> := <nat:3> ; <var:x> := <var:X0> {{ <var:x> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 