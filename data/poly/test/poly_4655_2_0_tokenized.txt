\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:6> ; <var:R> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:t> = <var:s> $ before executing our code , it must be that we see $ <var:R> = <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of our segment of code can be given by typical Hoare techniques . Now , we have \verb | { <var:t> = <var:s> } <var:u0> := <nat:6> { <var:t> = <var:s> \land <var:u0> = <nat:6> } | . This is shown with the environment update law given by typical Hoare techniques . Going to the next step , we see \verb | { <var:t> = <var:s> } <var:u0> := <nat:6> { <var:t> = <var:s> \land <var:u0> = <nat:6> } | . This is rigorously given using the inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:R> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <def:poly> {{ <var:R> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:R> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 