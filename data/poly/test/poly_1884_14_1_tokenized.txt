\begin{document} \begin{theorem} We define a segment of code such that \begin{verbatim} <var:u1> := <var:g> ; <var:u2> := <var:u1> * <var:g> ; <var:u3> := <var:u2> * <var:g> ; <var:u4> := <var:u3> * <var:g> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:5> ; <var:u3> := <var:u3> * <nat:6> ; <var:u4> := <var:u4> * <nat:1> ; <var:q> := <var:u4> <var:q> := <var:q> + <var:u3> <var:q> := <var:q> + <var:u2> <var:q> := <var:q> + <var:u1> <var:q> := <var:q> + <var:u0> \end{verbatim} Assume given some positive integers $ <var:r> $ that we have $ <var:g> = <var:r> $ prior to evaluating this code segment , it follows that we see $ <var:q> = <nat:1> \times <var:r> ^ <nat:4> + <nat:6> \times <var:r> ^ <nat:3> + <nat:5> \times <var:r> ^ <nat:2> + <nat:6> \times <var:r> + <nat:1> $ after series of instructions has terminated . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be shown through standard Hoare techniques . Considering the proceeding bits of codein our code segment , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:r> \} & <var:u1> := <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \} & <var:u2> := <var:u1> * <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} & <var:u3> := <var:u2> * <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \} & <var:u4> := <var:u3> * <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \} & <var:u0> := <nat:1> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:1> \} \end{tabular} Moving forward , \[ \begin{tabular} {rcl} \{ <var:g> = <var:r> \} & <var:u1> := <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \} & <var:u2> := <var:u1> * <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} & <var:u3> := <var:u2> * <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \} & <var:u4> := <var:u3> * <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \} & <var:u0> := <nat:1> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:1> \} & <var:u1> := <var:u1> * <nat:6> & \{ <var:g> = <var:r> \land <var:u1> = <nat:6> \cdot <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <nat:6> \cdot <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:1> \} & <var:u2> := <var:u2> * <nat:5> & \{ <var:g> = <var:r> \land <var:u1> = <nat:6> \cdot <var:r> \land <var:u2> = <nat:5> \cdot <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:1> \} \end{tabular} Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:r> \} & <var:u1> := <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \} \\ \{ <var:g> = <var:r> \land <var:u1> = <var:r> \} & <var:u2> := <var:u1> * <var:g> & \{ <var:g> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \end{tabular} This is guaranteed using the variable assignmet rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:g> = <var:r> }} <var:u1> := <var:g> ; <var:u2> := <var:u1> * <var:g> ; <var:u3> := <var:u2> * <var:g> ; <var:u4> := <var:u3> * <var:g> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:5> ; <var:u3> := <var:u3> * <nat:6> ; <var:u4> := <var:u4> * <nat:1> ; <var:q> := <var:u4> <var:q> := <var:q> + <var:u3> <var:q> := <var:q> + <var:u2> <var:q> := <var:q> + <var:u1> <var:q> := <var:q> + <var:u0> {{ <var:q> = <nat:1> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:6> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <nat:6> * <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <nat:6> * <var:r> /\ <var:u2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <nat:6> * <var:r> /\ <var:u2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:u3> = <nat:6> * <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <nat:6> * <var:r> /\ <var:u2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:u3> = <nat:6> * <var:r> ^ <nat:3> /\ <var:u4> = <nat:1> * <var:r> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <nat:6> * <var:r> /\ <var:u2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:u3> = <nat:6> * <var:r> ^ <nat:3> /\ <var:u0> = <nat:1> /\ <var:q> = <nat:1> * <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <nat:6> * <var:r> /\ <var:u2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:q> = <nat:1> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u1> = <nat:6> * <var:r> /\ <var:u0> = <nat:1> /\ <var:q> = <nat:1> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:u0> = <nat:1> /\ <var:q> = <nat:1> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:6> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:q> = <nat:1> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:6> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 