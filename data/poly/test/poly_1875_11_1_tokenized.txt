\begin{document} \begin{theorem} Let the following program as \begin{verbatim} <var:s1> := <var:f> ; <var:s2> := <var:s1> * <var:f> ; <var:s3> := <var:s2> * <var:f> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:4> ; <var:C> := <var:s3> <var:C> := <var:C> + <var:s2> <var:C> := <var:C> + <var:s1> <var:C> := <var:C> + <var:s0> \end{verbatim} Allowing that $ <var:f> = <var:j> $ prior to evaluating our set of commands , it must be that $ <var:C> = <nat:4> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the code can be shown using usual Hoare techniques . Focusing on the next line of code found in our series of instructions , we see \begin{eqnarray} \{ <var:f> = <var:j> \} \, <var:s1> := <var:f> \, \{ <var:f> = <var:j> \land <var:s1> = <var:j> \} \end{eqnarray} Considering the proceeding lines seen in the list of commands , we have \begin{eqnarray} \{ <var:f> = <var:j> \} \, <var:s1> := <var:f> \, \{ <var:f> = <var:j> \land <var:s1> = <var:j> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <var:j> \} \, <var:s2> := <var:s1> * <var:f> \, \{ <var:f> = <var:j> \land <var:s1> = <var:j> \land <var:s2> = <var:j> ^ <nat:2> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <var:j> \land <var:s2> = <var:j> ^ <nat:2> \} \, <var:s3> := <var:s2> * <var:f> \, \{ <var:f> = <var:j> \land <var:s1> = <var:j> \land <var:s2> = <var:j> ^ <nat:2> \land <var:s3> = <var:j> ^ <nat:3> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <var:j> \land <var:s2> = <var:j> ^ <nat:2> \land <var:s3> = <var:j> ^ <nat:3> \} \, <var:s0> := <nat:4> \, \{ <var:f> = <var:j> \land <var:s1> = <var:j> \land <var:s2> = <var:j> ^ <nat:2> \land <var:s3> = <var:j> ^ <nat:3> \land <var:s0> = <nat:4> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <var:j> \land <var:s2> = <var:j> ^ <nat:2> \land <var:s3> = <var:j> ^ <nat:3> \land <var:s0> = <nat:4> \} \, <var:s1> := <var:s1> * <nat:4> \, \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s2> = <var:j> ^ <nat:2> \land <var:s3> = <var:j> ^ <nat:3> \land <var:s0> = <nat:4> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s2> = <var:j> ^ <nat:2> \land <var:s3> = <var:j> ^ <nat:3> \land <var:s0> = <nat:4> \} \, <var:s2> := <var:s2> * <nat:3> \, \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:s3> = <var:j> ^ <nat:3> \land <var:s0> = <nat:4> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:s3> = <var:j> ^ <nat:3> \land <var:s0> = <nat:4> \} \, <var:s3> := <var:s3> * <nat:4> \, \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:s3> = <nat:4> \cdot <var:j> ^ <nat:3> \land <var:s0> = <nat:4> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:s3> = <nat:4> \cdot <var:j> ^ <nat:3> \land <var:s0> = <nat:4> \} \, <var:C> := <var:s3\, \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:s0> = <nat:4> \land <var:C> = <nat:4> \cdot <var:j> ^ <nat:3> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:s0> = <nat:4> \land <var:C> = <nat:4> \cdot <var:j> ^ <nat:3> \} \, <var:C> := <var:C> + <var:s2\, \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s0> = <nat:4> \land <var:C> = <nat:4> \cdot <var:j> ^ <nat:3> + <nat:3> \cdot <var:j> ^ <nat:2> \} \\ \{ <var:f> = <var:j> \land <var:s1> = <nat:4> \cdot <var:j> \land <var:s0> = <nat:4> \land <var:C> = <nat:4> \cdot <var:j> ^ <nat:3> + <nat:3> \cdot <var:j> ^ <nat:2> \} \, <var:C> := <var:C> + <var:s1\, \{ <var:f> = <var:j> \land <var:s0> = <nat:4> \land <var:C> = <nat:4> \cdot <var:j> ^ <nat:3> + <nat:3> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> \} \end{eqnarray} This is deduced by the variable binding rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:f> = <var:j> }} <var:s1> := <var:f> ; <var:s2> := <var:s1> * <var:f> ; <var:s3> := <var:s2> * <var:f> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:4> ; <var:C> := <var:s3> <var:C> := <var:C> + <var:s2> <var:C> := <var:C> + <var:s1> <var:C> := <var:C> + <var:s0> {{ <var:C> = <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <var:j> /\ <var:s2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <var:j> /\ <var:s2> = <var:j> ^ <nat:2> /\ <var:s3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <var:j> /\ <var:s2> = <var:j> ^ <nat:2> /\ <var:s3> = <var:j> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <nat:4> * <var:j> /\ <var:s2> = <var:j> ^ <nat:2> /\ <var:s3> = <var:j> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <nat:4> * <var:j> /\ <var:s2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:s3> = <var:j> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <nat:4> * <var:j> /\ <var:s2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:j> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <nat:4> * <var:j> /\ <var:s2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:s0> = <nat:4> /\ <var:C> = <nat:4> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s1> = <nat:4> * <var:j> /\ <var:s0> = <nat:4> /\ <var:C> = <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:s0> = <nat:4> /\ <var:C> = <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:C> = <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 