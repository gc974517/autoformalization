\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:u> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:3> ; <var:L> := <var:C1> <var:L> := <var:L> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:u> = <var:I> $ before evaluating the set of instructions then $ <var:L> = <nat:3> * <var:I> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be accomplished by standard Hoare reasoning . Moving forward , we have \begin{eqnarray} \{ <var:u> = <var:I> \} \, <var:C1> := <var:u> \, \{ <var:u> = <var:I> \land <var:C1> = <var:I> \} \\ \{ <var:u> = <var:I> \land <var:C1> = <var:I> \} \, <var:C0> := <nat:4> \, \{ <var:u> = <var:I> \land <var:C1> = <var:I> \land <var:C0> = <nat:4> \} \\ \{ <var:u> = <var:I> \land <var:C1> = <var:I> \land <var:C0> = <nat:4> \} \, <var:C1> := <var:C1> * <nat:3> \, \{ <var:u> = <var:I> \land <var:C1> = <nat:3> \times <var:I> \land <var:C0> = <nat:4> \} \\ \{ <var:u> = <var:I> \land <var:C1> = <nat:3> \times <var:I> \land <var:C0> = <nat:4> \} \, <var:L> := <var:C1\, \{ <var:u> = <var:I> \land <var:C0> = <nat:4> \land <var:L> = <nat:3> \times <var:I> \} \end{eqnarray} Moving forward , we see \begin{eqnarray} \{ <var:u> = <var:I> \} \, <var:C1> := <var:u> \, \{ <var:u> = <var:I> \land <var:C1> = <var:I> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:u> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:3> ; <var:L> := <var:C1> <var:L> := <var:L> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:u> = <var:I> }} <def:poly> {{ <var:L> = <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:C1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:C1> = <var:I> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:C1> = <nat:3> * <var:I> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:C0> = <nat:4> /\ <var:L> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:L> = <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 