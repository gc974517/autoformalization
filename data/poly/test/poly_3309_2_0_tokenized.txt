\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:1> ; <var:M> := <var:Y0> \end{verbatim} Allow it to be that $ <var:m> = <var:n> $ prior to evaluating this series of instructions it follows that we see $ <var:M> = <nat:1> $ when code is done executing . \end{theorem} \begin{proof} The method of proof for this list of instructions can be demonstrated with the following decorated series of instructions . \begin{eqnarray} \{ <var:m> = <var:n> \} \\ <var:Y0> := <nat:1> ; \\ \{ <var:m> = <var:n> \land <var:Y0> = <nat:1> \} \\ <var:M> := <var:Y0> \\ \{ <var:m> = <var:n> \land <var:M> = <nat:1> \} \end{eqnarray} Using typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:m> = <var:n> }} <var:Y0> := <nat:1> ; <var:M> := <var:Y0> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 