\begin{document} \begin{theorem} We define the following segment of code as \begin{verbatim} <var:y1> := <var:f> ; <var:y2> := <var:y1> * <var:f> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:6> ; <var:y2> := <var:y2> * <nat:7> ; <var:V> := <var:y2> <var:V> := <var:V> + <var:y1> <var:V> := <var:V> + <var:y0> \end{verbatim} Given ( taking positive integers $ <var:E> $ ) that $ <var:f> = <var:E> $ ahead of evaluating this set of instructions , it holds that we see $ <var:V> = <nat:7> \times <var:E> ^ <nat:2> + <nat:6> \times <var:E> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques produces : \begin{eqnarray} \{ <var:f> = <var:E> \} \\ <var:y1> := <var:f> ; \\ \{ <var:f> = <var:E> \land <var:y1> = <var:E> \} \\ <var:y2> := <var:y1> * <var:f> ; \\ \{ <var:f> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:f> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y0> = <nat:1> \} \\ <var:y1> := <var:y1> * <nat:6> ; \\ \{ <var:f> = <var:E> \land <var:y1> = <nat:6> * <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y0> = <nat:1> \} \\ <var:y2> := <var:y2> * <nat:7> ; \\ \{ <var:f> = <var:E> \land <var:y1> = <nat:6> * <var:E> \land <var:y2> = <nat:7> * <var:E> ^ <nat:2> \land <var:y0> = <nat:1> \} \\ <var:V> := <var:y2> \\ \{ <var:f> = <var:E> \land <var:y1> = <nat:6> * <var:E> \land <var:y0> = <nat:1> \land <var:V> = <nat:7> * <var:E> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:y1> \\ \{ <var:f> = <var:E> \land <var:y0> = <nat:1> \land <var:V> = <nat:7> * <var:E> ^ <nat:2> + <nat:6> * <var:E> \} \\ <var:V> := <var:V> + <var:y0> \\ \{ <var:f> = <var:E> \land <var:V> = <nat:7> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:1> \} \end{eqnarray} Given the above , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:f> = <var:E> }} <var:y1> := <var:f> ; <var:y2> := <var:y1> * <var:f> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:6> ; <var:y2> := <var:y2> * <nat:7> ; <var:V> := <var:y2> <var:V> := <var:V> + <var:y1> <var:V> := <var:V> + <var:y0> {{ <var:V> = <nat:7> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:y1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:y1> = <var:E> /\ <var:y2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:y1> = <var:E> /\ <var:y2> = <var:E> ^ <nat:2> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:y1> = <nat:6> * <var:E> /\ <var:y2> = <var:E> ^ <nat:2> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:y1> = <nat:6> * <var:E> /\ <var:y2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:y1> = <nat:6> * <var:E> /\ <var:y0> = <nat:1> /\ <var:V> = <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:y0> = <nat:1> /\ <var:V> = <nat:7> * <var:E> ^ <nat:2> + <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:E> /\ <var:V> = <nat:7> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 