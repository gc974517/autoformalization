\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:P> ; <var:Y2> := <var:Y1> * <var:P> ; <var:Y3> := <var:Y2> * <var:P> ; <var:Y4> := <var:Y3> * <var:P> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:Y3> := <var:Y3> * <nat:2> ; <var:Y4> := <var:Y4> * <nat:3> ; <var:y> := <var:Y4> <var:y> := <var:y> + <var:Y3> <var:y> := <var:y> + <var:Y2> <var:y> := <var:y> + <var:Y1> <var:y> := <var:y> + <var:Y0> \end{verbatim} Assuming $ <var:P> = <var:w> $ prior to interpreting our segment of code , it must be that $ <var:y> = <nat:3> \times <var:w> ^ <nat:4> + <nat:2> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:7> \times <var:w> + <nat:6> $ when list of commands exits . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be done by Hoare logic . Advancing , we see the variable binding code binding $ <var:P> $ into $ <var:Y1>$ . This moves the precondition $ \{ <var:P> = <var:w> \} $ into the postcondition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \} $ . This is given through the assignment law given by Hoare logic . Considering the next bit of code contained in our code segment , we have the binding command \verb | <var:Y2> := <var:Y1> * <var:P> ; | . This redefines the precondition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \} $ as the postcondition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \} $ . This is rigorously given with the assignment scheme obtained from usual Hoare logic . Going forward , we have the binding command \verb | <var:Y3> := <var:Y2> * <var:P> ; | . This command moves the precondition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \} $ as the condition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \} $ . This is given through the assignment scheme in usual Hoare techniques . Advancing to the following line in our list of instructions , we see the assignment command \verb | <var:Y4> := <var:Y3> * <var:P> ; | . This statement takes the precondition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \} $ as the postcondition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \} $ . This is ensured with the assignment law given in Hoare techniques . Immediately following , we see the variable update code \verb | <var:Y0> := <nat:6> ; | . This redefines $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \} $ into the condition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ . Taking another step toward the subsequent step in our segment of code , we see the environment update statement giving $ <var:Y1> * <nat:7> $ toward $ <var:Y1>$ . This statement moves the condition $ \{ <var:P> = <var:w> \land <var:Y1> = <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ as the postcondition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ . This is deduced using the assignment inference rule obtained from Hoare logic . Moving forward to the subsequent statement seen in our code , the environment update statement yielding $ <var:Y2> * <nat:4> $ into $ <var:Y2>$ . This code advances the condition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ as $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ . This is known to be sound through the assignment rule found in typical Hoare reasoning . Moving forward to the following step contained in the list of commands , we have the variable binding code \verb | <var:Y3> := <var:Y3> * <nat:2> ; | . This moves the condition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y3> = <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ to the postcondition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ . This is rigorously given with the assignment law defined by standard Hoare logic . Advancing , we have the variable assignmet line \verb | <var:Y4> := <var:Y4> * <nat:3> ; | . This takes the precondition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:Y4> = <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ as $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:Y4> = <nat:3> \cdot <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ . This is deduced with the assignment scheme in standard Hoare logic . After , we see the variable update statement \verb | <var:y> := <var:Y4> | . This redefines the condition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:Y4> = <nat:3> \cdot <var:w> ^ <nat:4> \land <var:Y0> = <nat:6> \} $ to $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> \} $ . Taking another step toward the proceeding line of code seen in the code segment , we see the binding code \verb | <var:y> := <var:y> + <var:Y3> | . This advances $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> \} $ toward the postcondition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> \} $ . This is rigorously given with the assignment law given in usual Hoare reasoning . Advancing to the upcoming piece of code found in our set of commands , we have the code assigning $ <var:y> + <var:Y2$ to $ <var:y>$ . This command takes the precondition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y2> = <nat:4> \cdot <var:w> ^ <nat:2> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> \} $ as the postcondition $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> \} $ . Next , the variable assignmet statement giving $ <var:y> + <var:Y1$ to $ <var:y>$ . This takes $ \{ <var:P> = <var:w> \land <var:Y1> = <nat:7> \cdot <var:w> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> \} $ as the condition $ \{ <var:P> = <var:w> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:7> \cdot <var:w> \} $ . This is given with the assignment inference rule obtained from Hoare techniques . Keeping momentum , we see the code assigning $ <var:y> + <var:Y0$ toward $ <var:y>$ . This advances the condition $ \{ <var:P> = <var:w> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:7> \cdot <var:w> \} $ as the postcondition $ \{ <var:P> = <var:w> \land <var:y> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:7> \cdot <var:w> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <var:Y4> : string := " <var:Y4> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:P> = <var:w> }} <var:Y1> := <var:P> ; <var:Y2> := <var:Y1> * <var:P> ; <var:Y3> := <var:Y2> * <var:P> ; <var:Y4> := <var:Y3> * <var:P> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:Y3> := <var:Y3> * <nat:2> ; <var:Y4> := <var:Y4> * <nat:3> ; <var:y> := <var:Y4> <var:y> := <var:y> + <var:Y3> <var:y> := <var:y> + <var:Y2> <var:y> := <var:y> + <var:Y1> <var:y> := <var:y> + <var:Y0> {{ <var:y> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <var:w> /\ <var:Y2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <var:w> /\ <var:Y2> = <var:w> ^ <nat:2> /\ <var:Y3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <var:w> /\ <var:Y2> = <var:w> ^ <nat:2> /\ <var:Y3> = <var:w> ^ <nat:3> /\ <var:Y4> = <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <var:w> /\ <var:Y2> = <var:w> ^ <nat:2> /\ <var:Y3> = <var:w> ^ <nat:3> /\ <var:Y4> = <var:w> ^ <nat:4> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <nat:7> * <var:w> /\ <var:Y2> = <var:w> ^ <nat:2> /\ <var:Y3> = <var:w> ^ <nat:3> /\ <var:Y4> = <var:w> ^ <nat:4> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <nat:7> * <var:w> /\ <var:Y2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:Y3> = <var:w> ^ <nat:3> /\ <var:Y4> = <var:w> ^ <nat:4> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <nat:7> * <var:w> /\ <var:Y2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:Y3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:Y4> = <var:w> ^ <nat:4> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <nat:7> * <var:w> /\ <var:Y2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:Y3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:Y4> = <nat:3> * <var:w> ^ <nat:4> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <nat:7> * <var:w> /\ <var:Y2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:Y3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:Y0> = <nat:6> /\ <var:y> = <nat:3> * <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <nat:7> * <var:w> /\ <var:Y2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:Y0> = <nat:6> /\ <var:y> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y1> = <nat:7> * <var:w> /\ <var:Y0> = <nat:6> /\ <var:y> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:Y0> = <nat:6> /\ <var:y> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:y> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 