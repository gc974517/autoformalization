\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:R> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:4> ; <var:U> := <var:f1> <var:U> := <var:U> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:R> = <var:J> $ before executing the series of commands then we see $ <var:U> = <nat:4> \cdot <var:J> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our program is done by standard Hoare techniques . Taking a look at the upcoming line seen in the segment of code , we have the assignment code binding $ <var:R> $ to $ <var:f1>$ . This statement moves $ \{ <var:R> = <var:J> \} $ to the condition $ \{ <var:R> = <var:J> \land <var:f1> = <var:J> \} $ . Following , we have the variable assignmet code binding $ <nat:8> $ into $ <var:f0>$ . This command advances the condition $ \{ <var:R> = <var:J> \land <var:f1> = <var:J> \} $ to the postcondition $ \{ <var:R> = <var:J> \land <var:f1> = <var:J> \land <var:f0> = <nat:8> \} $ . Moving forward , the variable assignmet statement binding $ <var:f1> * <nat:4> $ into $ <var:f1>$ . This transfers the condition $ \{ <var:R> = <var:J> \land <var:f1> = <var:J> \land <var:f0> = <nat:8> \} $ to the condition $ \{ <var:R> = <var:J> \land <var:f1> = <nat:4> \cdot <var:J> \land <var:f0> = <nat:8> \} $ . This is guaranteed with the assignment inference rule defined by usual Hoare techniques . Moving on , we have the variable binding command yielding $ <var:f1$ as $ <var:U>$ . This transfers the condition $ \{ <var:R> = <var:J> \land <var:f1> = <nat:4> \cdot <var:J> \land <var:f0> = <nat:8> \} $ as $ \{ <var:R> = <var:J> \land <var:f0> = <nat:8> \land <var:U> = <nat:4> \cdot <var:J> \} $ . This is known to be sound using the assignment rule given in usual Hoare logic . Honing in on the next command contained in the code , the command yielding $ <var:U> + <var:f0$ as $ <var:U>$ . This statement forwards the condition $ \{ <var:R> = <var:J> \land <var:f0> = <nat:8> \land <var:U> = <nat:4> \cdot <var:J> \} $ into the postcondition $ \{ <var:R> = <var:J> \land <var:U> = <nat:4> \cdot <var:J> + <nat:8> \} $ . This is shown with the assignment inference rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f1> := <var:R> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:4> ; <var:U> := <var:f1> <var:U> := <var:U> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:R> = <var:J> }} <def:poly> {{ <var:U> = <nat:4> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:f1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:f1> = <var:J> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:f1> = <nat:4> * <var:J> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:f0> = <nat:8> /\ <var:U> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:U> = <nat:4> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 