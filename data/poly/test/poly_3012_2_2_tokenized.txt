\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:s> := <nat:2> ; <var:s> := <nat:1> + <var:s> * <var:E> \end{verbatim} Allowing that we have $ <var:E> = <var:G> $ ( assuming some $ <var:G> \in \mathbb{N} $ ) prior to the execution of the set of instructions , it follows that $ <var:s> = <nat:2> * <var:G> + <nat:1> $ when list of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is shown through standard Hoare techniques . Observing the following step in the list of instructions , we see the variable binding command \verb | <var:s> := <nat:2> ; | . This moves $ \{ <var:E> = <var:G> \} $ to $ \{ <var:E> = <var:G> \land <var:s> = <nat:2> \} $ . Following , the command \verb | <var:s> := <nat:1> + <var:s> * <var:E> | . This code transfers the condition $ \{ <var:E> = <var:G> \land <var:s> = <nat:2> \} $ into the postcondition $ \{ <var:E> = <var:G> \land <var:s> = <nat:2> * <var:G> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:E> = <var:G> }} <var:s> := <nat:2> ; <var:s> := <nat:1> + <var:s> * <var:E> {{ <var:s> = <nat:2> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:s> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:s> = <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 