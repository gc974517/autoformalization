\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:X> ; <var:h2> := <var:h1> * <var:X> ; <var:h0> := <nat:7> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:9> ; <var:F> := <var:h2> <var:F> := <var:F> + <var:h1> <var:F> := <var:F> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:X> = <var:o> $ before the evaluation of the code segment it must be that we see $ <var:F> = <nat:9> \cdot <var:o> ^ <nat:2> + <nat:6> \cdot <var:o> + <nat:7> $ after series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:o> \} \\ <var:h1> := <var:X> ; \\ \{ <var:X> = <var:o> \land <var:h1> = <var:o> \} \\ <var:h2> := <var:h1> * <var:X> ; \\ \{ <var:X> = <var:o> \land <var:h1> = <var:o> \land <var:h2> = <var:o> ^ <nat:2> \} \\ <var:h0> := <nat:7> ; \\ \{ <var:X> = <var:o> \land <var:h1> = <var:o> \land <var:h2> = <var:o> ^ <nat:2> \land <var:h0> = <nat:7> \} \\ <var:h1> := <var:h1> * <nat:6> ; \\ \{ <var:X> = <var:o> \land <var:h1> = <nat:6> \cdot <var:o> \land <var:h2> = <var:o> ^ <nat:2> \land <var:h0> = <nat:7> \} \\ <var:h2> := <var:h2> * <nat:9> ; \\ \{ <var:X> = <var:o> \land <var:h1> = <nat:6> \cdot <var:o> \land <var:h2> = <nat:9> \cdot <var:o> ^ <nat:2> \land <var:h0> = <nat:7> \} \\ <var:F> := <var:h2> \\ \{ <var:X> = <var:o> \land <var:h1> = <nat:6> \cdot <var:o> \land <var:h0> = <nat:7> \land <var:F> = <nat:9> \cdot <var:o> ^ <nat:2> \} \end{eqnarray} Continuing evaluating our set of instructions gives : \begin{eqnarray} <var:F> := <var:F> + <var:h1> \\ \{ <var:X> = <var:o> \land <var:h0> = <nat:7> \land <var:F> = <nat:9> \cdot <var:o> ^ <nat:2> + <nat:6> \cdot <var:o> \} \\ <var:F> := <var:F> + <var:h0> \\ \{ <var:X> = <var:o> \land <var:F> = <nat:9> \cdot <var:o> ^ <nat:2> + <nat:6> \cdot <var:o> + <nat:7> \} \end{eqnarray} The application of usual Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h1> := <var:X> ; <var:h2> := <var:h1> * <var:X> ; <var:h0> := <nat:7> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:9> ; <var:F> := <var:h2> <var:F> := <var:F> + <var:h1> <var:F> := <var:F> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <def:poly> {{ <var:F> = <nat:9> * <var:o> ^ <nat:2> + <nat:6> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:h1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:h1> = <var:o> /\ <var:h2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:h1> = <var:o> /\ <var:h2> = <var:o> ^ <nat:2> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:h1> = <nat:6> * <var:o> /\ <var:h2> = <var:o> ^ <nat:2> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:h1> = <nat:6> * <var:o> /\ <var:h2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:h1> = <nat:6> * <var:o> /\ <var:h0> = <nat:7> /\ <var:F> = <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:h0> = <nat:7> /\ <var:F> = <nat:9> * <var:o> ^ <nat:2> + <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:F> = <nat:9> * <var:o> ^ <nat:2> + <nat:6> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 