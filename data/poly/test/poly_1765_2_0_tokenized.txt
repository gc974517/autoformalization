\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:1> ; <var:E> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Allow $ <var:s> = <var:d> $ for some natural coefficients $ <var:d> $ before running the list of instructions it holds that we see $ <var:E> = <nat:1> $ once series of commands finishes . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:s> = <var:d> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:s> = <var:d> \land <var:x0> = <nat:1> \} \\ <var:E> := <var:x0> \\ \{ <var:s> = <var:d> \land <var:E> = <nat:1> \} \end{eqnarray} Given the above , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:E> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:s> = <var:d> }} <def:poly> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:d> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:d> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 