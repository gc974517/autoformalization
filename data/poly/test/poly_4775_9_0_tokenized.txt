\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:9> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:D> ; <var:l2> := <nat:1> ; <var:l2> := <var:l2> * <var:D> ; <var:l2> := <var:l2> * <var:D> ; <var:u> := <var:l2> ; <var:u> := <var:u> + <var:l1> ; <var:u> := <var:u> + <var:l0> \end{verbatim} Given , for positive numbers $ <var:b> $ , it to be that $ <var:D> = <var:b> $ before interpreting our list of instructions , it follows that $ <var:u> = <nat:1> \times <var:b> ^ <nat:2> + <nat:8> \times <var:b> + <nat:9> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:D> = <var:b> \} \\ <var:l0> := <nat:9> ; \\ \{ <var:D> = <var:b> \land <var:l0> = <nat:9> \} \\ <var:l1> := <nat:8> ; \\ \{ <var:D> = <var:b> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \} \\ <var:l1> := <var:l1> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \times <var:b> \} \\ <var:l2> := <nat:1> ; \\ \{ <var:D> = <var:b> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \times <var:b> \land <var:l2> = <nat:1> \} \\ <var:l2> := <var:l2> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \times <var:b> \land <var:l2> = <nat:1> \times <var:b> \} \\ <var:l2> := <var:l2> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \times <var:b> \land <var:l2> = <nat:1> \times <var:b> ^ <nat:2> \} \\ <var:u> := <var:l2> ; \\ \{ <var:D> = <var:b> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \times <var:b> \land <var:u> = <nat:1> \times <var:b> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:l1> ; \\ \{ <var:D> = <var:b> \land <var:l0> = <nat:9> \land <var:u> = <nat:1> \times <var:b> ^ <nat:2> + <nat:8> \times <var:b> \} \\ <var:u> := <var:u> + <var:l0> \\ \{ <var:D> = <var:b> \land <var:u> = <nat:1> \times <var:b> ^ <nat:2> + <nat:8> \times <var:b> + <nat:9> \} \end{eqnarray} Thus , this list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <var:l0> := <nat:9> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:D> ; <var:l2> := <nat:1> ; <var:l2> := <var:l2> * <var:D> ; <var:l2> := <var:l2> * <var:D> ; <var:u> := <var:l2> ; <var:u> := <var:u> + <var:l1> ; <var:u> := <var:u> + <var:l0> {{ <var:u> = <nat:1> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:8> * <var:b> /\ <var:l2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:8> * <var:b> /\ <var:l2> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:8> * <var:b> /\ <var:l2> = <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:8> * <var:b> /\ <var:u> = <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:l0> = <nat:9> /\ <var:u> = <nat:1> * <var:b> ^ <nat:2> + <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:u> = <nat:1> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 