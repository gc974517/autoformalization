\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:1> ; <var:F> := <var:r0> \end{verbatim} Allowing it to be that $ <var:O> = <var:D> $ ahead of interpreting our set of instructions , it holds that we see $ <var:F> = <nat:1> $ after program has terminated . \end{theorem} \begin{proof} The method of proof for the series of instructions can be demonstrated by standard Hoare techniques . Moving forward to the next step , we see the variable update line yielding $ <nat:1> $ as $ <var:r0>$ . This transfers $ \{ <var:O> = <var:D> \} $ as $ \{ <var:O> = <var:D> \land <var:r0> = <nat:1> \} $ . Considering the upcoming step seen in the program , we have the variable update statement binding $ <var:r0$ into $ <var:F>$ . This code transfers $ \{ <var:O> = <var:D> \land <var:r0> = <nat:1> \} $ as the postcondition $ \{ <var:O> = <var:D> \land <var:F> = <nat:1> \} $ . This is known to be sound with the assignment law given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:O> = <var:D> }} <var:r0> := <nat:1> ; <var:F> := <var:r0> {{ <var:F> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:F> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 