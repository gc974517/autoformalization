\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:1> ; <var:G> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:I> = <var:f> $ ahead of evaluating this list of commands , it must be that we see $ <var:G> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions can be given through usual Hoare logic . Shifting focus toward the next bit of code in the series of instructions , we see the variable binding command binding $ <nat:1> $ toward $ <var:V0>$ . This command transfers the condition $ \{ <var:I> = <var:f> \} $ to $ \{ <var:I> = <var:f> \land <var:V0> = <nat:1> \} $ . This is sound by the assignment law from usual Hoare logic . Moving on to the next step , the variable binding code defining $ <var:V0$ as $ <var:G>$ . This line transfers $ \{ <var:I> = <var:f> \land <var:V0> = <nat:1> \} $ into the postcondition $ \{ <var:I> = <var:f> \land <var:G> = <nat:1> \} $ . This is shown using the assignment scheme of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:1> ; <var:G> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:I> = <var:f> }} <def:poly> {{ <var:G> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:G> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 