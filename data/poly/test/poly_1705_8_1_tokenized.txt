\begin{document} \begin{theorem} We define the following code as \begin{verbatim} <var:u1> := <var:N> ; <var:u2> := <var:u1> * <var:N> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:2> ; <var:u2> := <var:u2> * <nat:2> ; <var:I> := <var:u2> <var:I> := <var:I> + <var:u1> <var:I> := <var:I> + <var:u0> \end{verbatim} Allow with some natural numbers $ <var:Z> $ that $ <var:N> = <var:Z> $ ahead of interpreting this series of commands it holds that we see $ <var:I> = <nat:2> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:4> $ once set of instructions finishes . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:N> = <var:Z> \} \\ <var:u1> := <var:N> ; \\ \{ <var:N> = <var:Z> \land <var:u1> = <var:Z> \} \\ <var:u2> := <var:u1> * <var:N> ; \\ \{ <var:N> = <var:Z> \land <var:u1> = <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \} \\ <var:u0> := <nat:4> ; \\ \{ <var:N> = <var:Z> \land <var:u1> = <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} \\ <var:u1> := <var:u1> * <nat:2> ; \\ \{ <var:N> = <var:Z> \land <var:u1> = <nat:2> \times <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} \\ <var:u2> := <var:u2> * <nat:2> ; \\ \{ <var:N> = <var:Z> \land <var:u1> = <nat:2> \times <var:Z> \land <var:u2> = <nat:2> \times <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} \\ <var:I> := <var:u2> \\ \{ <var:N> = <var:Z> \land <var:u1> = <nat:2> \times <var:Z> \land <var:u0> = <nat:4> \land <var:I> = <nat:2> \times <var:Z> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:u1> \\ \{ <var:N> = <var:Z> \land <var:u0> = <nat:4> \land <var:I> = <nat:2> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> \} \\ <var:I> := <var:I> + <var:u0> \\ \{ <var:N> = <var:Z> \land <var:I> = <nat:2> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:4> \} \end{eqnarray} As a result , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:N> = <var:Z> }} <var:u1> := <var:N> ; <var:u2> := <var:u1> * <var:N> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:2> ; <var:u2> := <var:u2> * <nat:2> ; <var:I> := <var:u2> <var:I> := <var:I> + <var:u1> <var:I> := <var:I> + <var:u0> {{ <var:I> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:u1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:u1> = <var:Z> /\ <var:u2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:u1> = <var:Z> /\ <var:u2> = <var:Z> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:u1> = <nat:2> * <var:Z> /\ <var:u2> = <var:Z> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:u1> = <nat:2> * <var:Z> /\ <var:u2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:u1> = <nat:2> * <var:Z> /\ <var:u0> = <nat:4> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:u0> = <nat:4> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 