\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:M> ; <var:N2> := <var:N1> * <var:M> ; <var:N3> := <var:N2> * <var:M> ; <var:N0> := <nat:6> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:8> ; <var:g> := <var:N3> <var:g> := <var:g> + <var:N2> <var:g> := <var:g> + <var:N1> <var:g> := <var:g> + <var:N0> \end{verbatim} Assuming that we have $ <var:M> = <var:O> $ before evaluating our list of instructions , it follows that $ <var:g> = <nat:8> \times <var:O> ^ <nat:3> + <nat:7> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> + <nat:6> $ when list of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:O> \} \\ <var:N1> := <var:M> ; \\ \{ <var:M> = <var:O> \land <var:N1> = <var:O> \} \\ <var:N2> := <var:N1> * <var:M> ; \\ \{ <var:M> = <var:O> \land <var:N1> = <var:O> \land <var:N2> = <var:O> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:M> ; \\ \{ <var:M> = <var:O> \land <var:N1> = <var:O> \land <var:N2> = <var:O> ^ <nat:2> \land <var:N3> = <var:O> ^ <nat:3> \} \\ <var:N0> := <nat:6> ; \\ \{ <var:M> = <var:O> \land <var:N1> = <var:O> \land <var:N2> = <var:O> ^ <nat:2> \land <var:N3> = <var:O> ^ <nat:3> \land <var:N0> = <nat:6> \} \\ <var:N1> := <var:N1> * <nat:2> ; \\ \{ <var:M> = <var:O> \land <var:N1> = <nat:2> * <var:O> \land <var:N2> = <var:O> ^ <nat:2> \land <var:N3> = <var:O> ^ <nat:3> \land <var:N0> = <nat:6> \} \\ <var:N2> := <var:N2> * <nat:7> ; \\ \{ <var:M> = <var:O> \land <var:N1> = <nat:2> * <var:O> \land <var:N2> = <nat:7> * <var:O> ^ <nat:2> \land <var:N3> = <var:O> ^ <nat:3> \land <var:N0> = <nat:6> \} \\ <var:N3> := <var:N3> * <nat:8> ; \\ \{ <var:M> = <var:O> \land <var:N1> = <nat:2> * <var:O> \land <var:N2> = <nat:7> * <var:O> ^ <nat:2> \land <var:N3> = <nat:8> * <var:O> ^ <nat:3> \land <var:N0> = <nat:6> \} \\ <var:g> := <var:N3> \\ \{ <var:M> = <var:O> \land <var:N1> = <nat:2> * <var:O> \land <var:N2> = <nat:7> * <var:O> ^ <nat:2> \land <var:N0> = <nat:6> \land <var:g> = <nat:8> * <var:O> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:N2> \\ \{ <var:M> = <var:O> \land <var:N1> = <nat:2> * <var:O> \land <var:N0> = <nat:6> \land <var:g> = <nat:8> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:N1> \\ \{ <var:M> = <var:O> \land <var:N0> = <nat:6> \land <var:g> = <nat:8> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> \} \\ <var:g> := <var:g> + <var:N0> \\ \{ <var:M> = <var:O> \land <var:g> = <nat:8> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:6> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:M> = <var:O> }} <var:N1> := <var:M> ; <var:N2> := <var:N1> * <var:M> ; <var:N3> := <var:N2> * <var:M> ; <var:N0> := <nat:6> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:8> ; <var:g> := <var:N3> <var:g> := <var:g> + <var:N2> <var:g> := <var:g> + <var:N1> <var:g> := <var:g> + <var:N0> {{ <var:g> = <nat:8> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <var:O> /\ <var:N2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <var:O> /\ <var:N2> = <var:O> ^ <nat:2> /\ <var:N3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <var:O> /\ <var:N2> = <var:O> ^ <nat:2> /\ <var:N3> = <var:O> ^ <nat:3> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <nat:2> * <var:O> /\ <var:N2> = <var:O> ^ <nat:2> /\ <var:N3> = <var:O> ^ <nat:3> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <nat:2> * <var:O> /\ <var:N2> = <nat:7> * <var:O> ^ <nat:2> /\ <var:N3> = <var:O> ^ <nat:3> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <nat:2> * <var:O> /\ <var:N2> = <nat:7> * <var:O> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:O> ^ <nat:3> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <nat:2> * <var:O> /\ <var:N2> = <nat:7> * <var:O> ^ <nat:2> /\ <var:N0> = <nat:6> /\ <var:g> = <nat:8> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N1> = <nat:2> * <var:O> /\ <var:N0> = <nat:6> /\ <var:g> = <nat:8> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:N0> = <nat:6> /\ <var:g> = <nat:8> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:g> = <nat:8> * <var:O> ^ <nat:3> + <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 