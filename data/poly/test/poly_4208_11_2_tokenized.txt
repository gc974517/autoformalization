\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:H> := <nat:4> ; <var:H> := <nat:4> + <var:H> * <var:L> ; <var:H> := <var:H> * <var:L> ; <var:H> := <nat:4> + <var:H> * <var:L> ; <var:H> := <var:H> * <var:L> ; <var:H> := <nat:2> + <var:H> * <var:L> ; <var:H> := <nat:3> + <var:H> * <var:L> ; <var:H> := <nat:1> + <var:H> * <var:L> ; <var:H> := <var:H> * <var:L> ; <var:H> := <nat:2> + <var:H> * <var:L> ; <var:H> := <nat:2> + <var:H> * <var:L> \end{verbatim} Allowing it to hold that $ <var:L> = <var:G> $ prior to interpreting this code segment , it follows that we see $ <var:H> = <nat:4> * <var:G> ^ <nat:10> + <nat:4> * <var:G> ^ <nat:9> + <nat:4> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:2> $ . \end{theorem} \begin{proof} Let this decorated series of instructions . \begin{eqnarray} \{ <var:L> = <var:G> \} \\ <var:H> := <nat:4> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \} \\ <var:H> := <nat:4> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> + <nat:4> \} \\ <var:H> := <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + \} \\ <var:H> := <nat:4> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:4> \} \\ <var:H> := <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> + \} \end{eqnarray} Advancing the execution of this set of commands gives : \begin{eqnarray} <var:H> := <nat:2> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:5> + <nat:4> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:2> \} \\ <var:H> := <nat:3> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:6> + <nat:4> \cdot <var:G> ^ <nat:5> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> + <nat:3> \} \end{eqnarray} Furthering the evaluation of the list of commands results in : \begin{eqnarray} <var:H> := <nat:1> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:7> + <nat:4> \cdot <var:G> ^ <nat:6> + <nat:4> \cdot <var:G> ^ <nat:4> + <nat:2> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:1> \} \\ <var:H> := <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:8> + <nat:4> \cdot <var:G> ^ <nat:7> + <nat:4> \cdot <var:G> ^ <nat:5> + <nat:2> \cdot <var:G> ^ <nat:3> + <nat:3> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + \} \\ <var:H> := <nat:2> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:9> + <nat:4> \cdot <var:G> ^ <nat:8> + <nat:4> \cdot <var:G> ^ <nat:6> + <nat:2> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:2> \} \\ <var:H> := <nat:2> + <var:H> * <var:L> \\ \{ <var:L> = <var:G> \land <var:H> = <nat:4> \cdot <var:G> ^ <nat:10> + <nat:4> \cdot <var:G> ^ <nat:9> + <nat:4> \cdot <var:G> ^ <nat:7> + <nat:2> \cdot <var:G> ^ <nat:5> + <nat:3> \cdot <var:G> ^ <nat:4> + <nat:1> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> + <nat:2> \} \end{eqnarray} The application of standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:L> = <var:G> }} <var:H> := <nat:4> ; <var:H> := <nat:4> + <var:H> * <var:L> ; <var:H> := <var:H> * <var:L> ; <var:H> := <nat:4> + <var:H> * <var:L> ; <var:H> := <var:H> * <var:L> ; <var:H> := <nat:2> + <var:H> * <var:L> ; <var:H> := <nat:3> + <var:H> * <var:L> ; <var:H> := <nat:1> + <var:H> * <var:L> ; <var:H> := <var:H> * <var:L> ; <var:H> := <nat:2> + <var:H> * <var:L> ; <var:H> := <nat:2> + <var:H> * <var:L> {{ <var:H> = <nat:4> * <var:G> ^ <nat:10> + <nat:4> * <var:G> ^ <nat:9> + <nat:4> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:8> + <nat:4> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:9> + <nat:4> * <var:G> ^ <nat:8> + <nat:4> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:H> = <nat:4> * <var:G> ^ <nat:10> + <nat:4> * <var:G> ^ <nat:9> + <nat:4> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 