\begin{document} \begin{theorem} Consider a code in \emph{Imp} as \begin{verbatim} <var:c1> := <var:e> ; <var:c0> := <nat:8> ; <var:c1> := <var:c1> * <nat:9> ; <var:F> := <var:c1> <var:F> := <var:F> + <var:c0> \end{verbatim} Given it to hold that $ <var:e> = <var:V> $ prior to executing the set of instructions , it holds that we have $ <var:F> = <nat:9> * <var:V> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:V> \} \\ <var:c1> := <var:e> ; \\ \{ <var:e> = <var:V> \land <var:c1> = <var:V> \} \\ <var:c0> := <nat:8> ; \\ \{ <var:e> = <var:V> \land <var:c1> = <var:V> \land <var:c0> = <nat:8> \} \\ <var:c1> := <var:c1> * <nat:9> ; \\ \{ <var:e> = <var:V> \land <var:c1> = <nat:9> \times <var:V> \land <var:c0> = <nat:8> \} \\ <var:F> := <var:c1> \\ \{ <var:e> = <var:V> \land <var:c0> = <nat:8> \land <var:F> = <nat:9> \times <var:V> \} \\ <var:F> := <var:F> + <var:c0> \\ \{ <var:e> = <var:V> \land <var:F> = <nat:9> \times <var:V> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:e> = <var:V> }} <var:c1> := <var:e> ; <var:c0> := <nat:8> ; <var:c1> := <var:c1> * <nat:9> ; <var:F> := <var:c1> <var:F> := <var:F> + <var:c0> {{ <var:F> = <nat:9> * <var:V> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:c1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:c1> = <var:V> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:c1> = <nat:9> * <var:V> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:c0> = <nat:8> /\ <var:F> = <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:F> = <nat:9> * <var:V> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 