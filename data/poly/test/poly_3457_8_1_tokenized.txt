\begin{document} \begin{theorem} Take a code such that \begin{verbatim} <var:b1> := <var:w> ; <var:b2> := <var:b1> * <var:w> ; <var:b0> := <nat:6> ; <var:b1> := <var:b1> * <nat:2> ; <var:b2> := <var:b2> * <nat:8> ; <var:M> := <var:b2> <var:M> := <var:M> + <var:b1> <var:M> := <var:M> + <var:b0> \end{verbatim} Allow that $ <var:w> = <var:G> $ for some natural numbers $ <var:G> $ prior to running this program it follows that $ <var:M> = <nat:8> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:6> $ after series of commands executes . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:w> = <var:G> \} \\ <var:b1> := <var:w> ; \\ \{ <var:w> = <var:G> \land <var:b1> = <var:G> \} \\ <var:b2> := <var:b1> * <var:w> ; \\ \{ <var:w> = <var:G> \land <var:b1> = <var:G> \land <var:b2> = <var:G> ^ <nat:2> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:w> = <var:G> \land <var:b1> = <var:G> \land <var:b2> = <var:G> ^ <nat:2> \land <var:b0> = <nat:6> \} \\ <var:b1> := <var:b1> * <nat:2> ; \\ \{ <var:w> = <var:G> \land <var:b1> = <nat:2> \times <var:G> \land <var:b2> = <var:G> ^ <nat:2> \land <var:b0> = <nat:6> \} \\ <var:b2> := <var:b2> * <nat:8> ; \\ \{ <var:w> = <var:G> \land <var:b1> = <nat:2> \times <var:G> \land <var:b2> = <nat:8> \times <var:G> ^ <nat:2> \land <var:b0> = <nat:6> \} \\ <var:M> := <var:b2> \\ \{ <var:w> = <var:G> \land <var:b1> = <nat:2> \times <var:G> \land <var:b0> = <nat:6> \land <var:M> = <nat:8> \times <var:G> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:b1> \\ \{ <var:w> = <var:G> \land <var:b0> = <nat:6> \land <var:M> = <nat:8> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> \} \\ <var:M> := <var:M> + <var:b0> \\ \{ <var:w> = <var:G> \land <var:M> = <nat:8> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:6> \} \end{eqnarray} Given the preceding argument , the list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:w> = <var:G> }} <var:b1> := <var:w> ; <var:b2> := <var:b1> * <var:w> ; <var:b0> := <nat:6> ; <var:b1> := <var:b1> * <nat:2> ; <var:b2> := <var:b2> * <nat:8> ; <var:M> := <var:b2> <var:M> := <var:M> + <var:b1> <var:M> := <var:M> + <var:b0> {{ <var:M> = <nat:8> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:b1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:b1> = <var:G> /\ <var:b2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:b1> = <var:G> /\ <var:b2> = <var:G> ^ <nat:2> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:b1> = <nat:2> * <var:G> /\ <var:b2> = <var:G> ^ <nat:2> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:b1> = <nat:2> * <var:G> /\ <var:b2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:b1> = <nat:2> * <var:G> /\ <var:b0> = <nat:6> /\ <var:M> = <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:b0> = <nat:6> /\ <var:M> = <nat:8> * <var:G> ^ <nat:2> + <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:M> = <nat:8> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 