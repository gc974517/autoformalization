\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w1> := <var:K> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:6> ; <var:S> := <var:w1> <var:S> := <var:S> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:K> = <var:d> $ , for all positive integers $ <var:d> $ , before the evaluation of the list of instructions it follows that we see $ <var:S> = <nat:6> \times <var:d> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for our list of instructions can be done using standard Hoare logic . Advancing on , we have the variable update line \verb | <var:w1> := <var:K> ; | . This forwards $ \{ <var:K> = <var:d> \} $ toward $ \{ <var:K> = <var:d> \land <var:w1> = <var:d> \} $ . This is sound through the assignment inference rule defined in typical Hoare reasoning . Moving on to the next step , we see the variable update statement \verb | <var:w0> := <nat:7> ; | . This line takes the condition $ \{ <var:K> = <var:d> \land <var:w1> = <var:d> \} $ to $ \{ <var:K> = <var:d> \land <var:w1> = <var:d> \land <var:w0> = <nat:7> \} $ . This is sound with the assignment rule found in standard Hoare reasoning . Moving forward , we have the binding line \verb | <var:w1> := <var:w1> * <nat:6> ; | . This forwards $ \{ <var:K> = <var:d> \land <var:w1> = <var:d> \land <var:w0> = <nat:7> \} $ as the condition $ \{ <var:K> = <var:d> \land <var:w1> = <nat:6> \times <var:d> \land <var:w0> = <nat:7> \} $ . This is shown to be logically sound by the assignment law given in Hoare techniques . Stepping forward , we have the statement binding $ <var:w1$ into $ <var:S>$ . This forwards the precondition $ \{ <var:K> = <var:d> \land <var:w1> = <nat:6> \times <var:d> \land <var:w0> = <nat:7> \} $ as the postcondition $ \{ <var:K> = <var:d> \land <var:w0> = <nat:7> \land <var:S> = <nat:6> \times <var:d> \} $ . Shifting focus toward the upcoming line in our series of commands , we have the environment update line binding $ <var:S> + <var:w0$ as $ <var:S>$ . This code redefines the precondition $ \{ <var:K> = <var:d> \land <var:w0> = <nat:7> \land <var:S> = <nat:6> \times <var:d> \} $ toward $ \{ <var:K> = <var:d> \land <var:S> = <nat:6> \times <var:d> + <nat:7> \} $ . This is sound using the assignment rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:K> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:6> ; <var:S> := <var:w1> <var:S> := <var:S> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:K> = <var:d> }} <def:poly> {{ <var:S> = <nat:6> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:w1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:w1> = <var:d> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:w1> = <nat:6> * <var:d> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:w0> = <nat:7> /\ <var:S> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:S> = <nat:6> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 