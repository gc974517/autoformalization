\begin{document} \begin{theorem} Take the following list of commands as \begin{verbatim} <var:K1> := <var:t> ; <var:K2> := <var:K1> * <var:t> ; <var:K3> := <var:K2> * <var:t> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:2> ; <var:K2> := <var:K2> * <nat:2> ; <var:K3> := <var:K3> * <nat:5> ; <var:z> := <var:K3> <var:z> := <var:z> + <var:K2> <var:z> := <var:z> + <var:K1> <var:z> := <var:z> + <var:K0> \end{verbatim} Allow it to be that $ <var:t> = <var:p> $ ahead of evaluating this set of instructions it holds that $ <var:z> = <nat:5> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is given by typical Hoare techniques . Shifting focus toward the following pieces of code found in our segment of code , \begin{eqnarray} \{ <var:t> = <var:p> \} \, <var:K1> := <var:t> \, \{ <var:t> = <var:p> \land <var:K1> = <var:p> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <var:p> \} \, <var:K2> := <var:K1> * <var:t> \, \{ <var:t> = <var:p> \land <var:K1> = <var:p> \land <var:K2> = <var:p> ^ <nat:2> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <var:p> \land <var:K2> = <var:p> ^ <nat:2> \} \, <var:K3> := <var:K2> * <var:t> \, \{ <var:t> = <var:p> \land <var:K1> = <var:p> \land <var:K2> = <var:p> ^ <nat:2> \land <var:K3> = <var:p> ^ <nat:3> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <var:p> \land <var:K2> = <var:p> ^ <nat:2> \land <var:K3> = <var:p> ^ <nat:3> \} \, <var:K0> := <nat:9> \, \{ <var:t> = <var:p> \land <var:K1> = <var:p> \land <var:K2> = <var:p> ^ <nat:2> \land <var:K3> = <var:p> ^ <nat:3> \land <var:K0> = <nat:9> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <var:p> \land <var:K2> = <var:p> ^ <nat:2> \land <var:K3> = <var:p> ^ <nat:3> \land <var:K0> = <nat:9> \} \, <var:K1> := <var:K1> * <nat:2> \, \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K2> = <var:p> ^ <nat:2> \land <var:K3> = <var:p> ^ <nat:3> \land <var:K0> = <nat:9> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K2> = <var:p> ^ <nat:2> \land <var:K3> = <var:p> ^ <nat:3> \land <var:K0> = <nat:9> \} \, <var:K2> := <var:K2> * <nat:2> \, \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K2> = <nat:2> * <var:p> ^ <nat:2> \land <var:K3> = <var:p> ^ <nat:3> \land <var:K0> = <nat:9> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K2> = <nat:2> * <var:p> ^ <nat:2> \land <var:K3> = <var:p> ^ <nat:3> \land <var:K0> = <nat:9> \} \, <var:K3> := <var:K3> * <nat:5> \, \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K2> = <nat:2> * <var:p> ^ <nat:2> \land <var:K3> = <nat:5> * <var:p> ^ <nat:3> \land <var:K0> = <nat:9> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K2> = <nat:2> * <var:p> ^ <nat:2> \land <var:K3> = <nat:5> * <var:p> ^ <nat:3> \land <var:K0> = <nat:9> \} \, <var:z> := <var:K3\, \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K2> = <nat:2> * <var:p> ^ <nat:2> \land <var:K0> = <nat:9> \land <var:z> = <nat:5> * <var:p> ^ <nat:3> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K2> = <nat:2> * <var:p> ^ <nat:2> \land <var:K0> = <nat:9> \land <var:z> = <nat:5> * <var:p> ^ <nat:3> \} \, <var:z> := <var:z> + <var:K2\, \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K0> = <nat:9> \land <var:z> = <nat:5> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> \} \\ \{ <var:t> = <var:p> \land <var:K1> = <nat:2> * <var:p> \land <var:K0> = <nat:9> \land <var:z> = <nat:5> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> \} \, <var:z> := <var:z> + <var:K1\, \{ <var:t> = <var:p> \land <var:K0> = <nat:9> \land <var:z> = <nat:5> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> \} \end{eqnarray} This is ensured through the environment update rule given by standard Hoare logic . Advancing to the next bit of code found in the program , \begin{eqnarray} \{ <var:t> = <var:p> \} \, <var:K1> := <var:t> \, \{ <var:t> = <var:p> \land <var:K1> = <var:p> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:t> = <var:p> }} <var:K1> := <var:t> ; <var:K2> := <var:K1> * <var:t> ; <var:K3> := <var:K2> * <var:t> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:2> ; <var:K2> := <var:K2> * <nat:2> ; <var:K3> := <var:K3> * <nat:5> ; <var:z> := <var:K3> <var:z> := <var:z> + <var:K2> <var:z> := <var:z> + <var:K1> <var:z> := <var:z> + <var:K0> {{ <var:z> = <nat:5> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <var:p> /\ <var:K2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <var:p> /\ <var:K2> = <var:p> ^ <nat:2> /\ <var:K3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <var:p> /\ <var:K2> = <var:p> ^ <nat:2> /\ <var:K3> = <var:p> ^ <nat:3> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <nat:2> * <var:p> /\ <var:K2> = <var:p> ^ <nat:2> /\ <var:K3> = <var:p> ^ <nat:3> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <nat:2> * <var:p> /\ <var:K2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:K3> = <var:p> ^ <nat:3> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <nat:2> * <var:p> /\ <var:K2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:p> ^ <nat:3> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <nat:2> * <var:p> /\ <var:K2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:K0> = <nat:9> /\ <var:z> = <nat:5> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K1> = <nat:2> * <var:p> /\ <var:K0> = <nat:9> /\ <var:z> = <nat:5> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:K0> = <nat:9> /\ <var:z> = <nat:5> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:z> = <nat:5> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 