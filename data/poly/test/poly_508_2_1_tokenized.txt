\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:Y0> := <nat:3> ; <var:P> := <var:Y0> \end{verbatim} Given it to be that $ <var:N> = <var:C> $ , given natural numbers $ <var:C> $ , ahead of the evaluation of our segment of code , it follows that we see $ <var:P> = <nat:3> $ . \end{theorem} \begin{proof} Observe that this decorated series of commands . \begin{eqnarray} \{ <var:N> = <var:C> \} \\ <var:Y0> := <nat:3> ; \\ \{ <var:N> = <var:C> \land <var:Y0> = <nat:3> \} \\ <var:P> := <var:Y0> \\ \{ <var:N> = <var:C> \land <var:P> = <nat:3> \} \end{eqnarray} The application of standard Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:N> = <var:C> }} <var:Y0> := <nat:3> ; <var:P> := <var:Y0> {{ <var:P> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:P> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 