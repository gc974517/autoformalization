\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x> := <nat:4> ; <var:x> := <var:x> * <var:X> ; <var:x> := <nat:4> + <var:x> * <var:X> ; <var:x> := <nat:4> + <var:x> * <var:X> ; <var:x> := <var:x> * <var:X> ; <var:x> := <nat:1> + <var:x> * <var:X> ; <var:x> := <var:x> * <var:X> ; <var:x> := <nat:3> + <var:x> * <var:X> ; <var:x> := <nat:2> + <var:x> * <var:X> ; <var:x> := <nat:3> + <var:x> * <var:X> ; <var:x> := <nat:1> + <var:x> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allowing that $ <var:X> = <var:T> $ ahead of interpreting our series of commands , it holds that we see $ <var:x> = <nat:4> * <var:T> ^ <nat:10> + <nat:4> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> $ after list of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this code segment is accomplished by standard Hoare reasoning . Looking at the proceeding bits of codeseen in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:X> = <var:T> \} & <var:x> := <nat:4> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \} \\ \{ <var:X> = <var:T> \land <var:x> = <nat:4> \} & <var:x> := <var:x> * <var:X> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> + \} \\ \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> + \} & <var:x> := <nat:4> + <var:x> * <var:X> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:2> + <nat:4> \} \\ \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:2> + <nat:4> \} & <var:x> := <nat:4> + <var:x> * <var:X> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> + <nat:4> \} \\ \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> + <nat:4> \} & <var:x> := <var:x> * <var:X> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:4> \cdot <var:T> + \} \\ \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:4> \cdot <var:T> + \} & <var:x> := <nat:1> + <var:x> * <var:X> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:5> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:1> \} \\ \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:5> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:1> \} & <var:x> := <var:x> * <var:X> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> ^ <nat:6> + <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:1> \cdot <var:T> + \} \end{tabular} Looking at the upcoming bits of codein the code segment , \[ \begin{tabular} {rcl} \{ <var:X> = <var:T> \} & <var:x> := <nat:4> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \} \\ \{ <var:X> = <var:T> \land <var:x> = <nat:4> \} & <var:x> := <var:x> * <var:X> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \cdot <var:T> + \} \end{tabular} This is sound with the variable update law defined in standard Hoare logic . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:X> = <var:T> \} & <var:x> := <nat:4> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \} \end{tabular} This is shown to be logically sound using the assignment rule given by typical Hoare techniques . Moving forward , \[ \begin{tabular} {rcl} \{ <var:X> = <var:T> \} & <var:x> := <nat:4> & \{ <var:X> = <var:T> \land <var:x> = <nat:4> \} \end{tabular} This is shown to be logically sound by the binding inference rule defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:4> ; <var:x> := <var:x> * <var:X> ; <var:x> := <nat:4> + <var:x> * <var:X> ; <var:x> := <nat:4> + <var:x> * <var:X> ; <var:x> := <var:x> * <var:X> ; <var:x> := <nat:1> + <var:x> * <var:X> ; <var:x> := <var:x> * <var:X> ; <var:x> := <nat:3> + <var:x> * <var:X> ; <var:x> := <nat:2> + <var:x> * <var:X> ; <var:x> := <nat:3> + <var:x> * <var:X> ; <var:x> := <nat:1> + <var:x> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:X> = <var:T> }} <def:poly> {{ <var:x> = <nat:4> * <var:T> ^ <nat:10> + <nat:4> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:3> + <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:9> + <nat:4> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:x> = <nat:4> * <var:T> ^ <nat:10> + <nat:4> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 