\begin{document} \begin{theorem} Take the following series of instructions : \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:2> + <var:s> * <var:i> ; <var:s> := <nat:3> + <var:s> * <var:i> ; <var:s> := <var:s> * <var:i> ; <var:s> := <var:s> * <var:i> ; <var:s> := <nat:3> + <var:s> * <var:i> ; <var:s> := <nat:2> + <var:s> * <var:i> ; <var:s> := <var:s> * <var:i> ; <var:s> := <nat:4> + <var:s> * <var:i> ; <var:s> := <nat:4> + <var:s> * <var:i> \end{verbatim} Allowing that we have $ <var:i> = <var:g> $ , given every natural numbers $ <var:g> $ , prior to interpreting the series of commands it holds that we see $ <var:s> = <nat:4> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> + <nat:4> $ after series of commands has executed . \end{theorem} \begin{proof} The proof of the set of instructions is accomplished using standard Hoare techniques . Taking another step toward the proceeding lines found in the set of instructions , \begin{eqnarray} \{ <var:i> = <var:g> \} \, <var:s> := <nat:4> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \} \\ \{ <var:i> = <var:g> \land <var:s> = <nat:4> \} \, <var:s> := <nat:2> + <var:s> * <var:i> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \times <var:g> + <nat:2> \} \\ \{ <var:i> = <var:g> \land <var:s> = <nat:4> \times <var:g> + <nat:2> \} \, <var:s> := <nat:3> + <var:s> * <var:i> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> \} \end{eqnarray} This is ensured through the variable binding scheme in usual Hoare techniques . Honing in on the proceeding step seen in the code , we have \begin{eqnarray} \{ <var:i> = <var:g> \} \, <var:s> := <nat:4> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \} \end{eqnarray} This is deduced with the environment update scheme defined in standard Hoare techniques . Taking a look at the subsequent bits of codeseen in our series of commands , \begin{eqnarray} \{ <var:i> = <var:g> \} \, <var:s> := <nat:4> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \} \\ \{ <var:i> = <var:g> \land <var:s> = <nat:4> \} \, <var:s> := <nat:2> + <var:s> * <var:i> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \times <var:g> + <nat:2> \} \end{eqnarray} This is ensured with the binding scheme from typical Hoare techniques . Next , \begin{eqnarray} \{ <var:i> = <var:g> \} \, <var:s> := <nat:4> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \} \\ \{ <var:i> = <var:g> \land <var:s> = <nat:4> \} \, <var:s> := <nat:2> + <var:s> * <var:i> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \times <var:g> + <nat:2> \} \\ \{ <var:i> = <var:g> \land <var:s> = <nat:4> \times <var:g> + <nat:2> \} \, <var:s> := <nat:3> + <var:s> * <var:i> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> \} \end{eqnarray} Moving on to the proceeding line seen in our series of commands , \begin{eqnarray} \{ <var:i> = <var:g> \} \, <var:s> := <nat:4> \, \{ <var:i> = <var:g> \land <var:s> = <nat:4> \} \end{eqnarray} This is shown by the variable update rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:i> = <var:g> }} <var:s> := <nat:4> ; <var:s> := <nat:2> + <var:s> * <var:i> ; <var:s> := <nat:3> + <var:s> * <var:i> ; <var:s> := <var:s> * <var:i> ; <var:s> := <var:s> * <var:i> ; <var:s> := <nat:3> + <var:s> * <var:i> ; <var:s> := <nat:2> + <var:s> * <var:i> ; <var:s> := <var:s> * <var:i> ; <var:s> := <nat:4> + <var:s> * <var:i> ; <var:s> := <nat:4> + <var:s> * <var:i> {{ <var:s> = <nat:4> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:s> = <nat:4> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 