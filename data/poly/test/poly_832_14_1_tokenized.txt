\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:D1> := <var:C> ; <var:D2> := <var:D1> * <var:C> ; <var:D3> := <var:D2> * <var:C> ; <var:D4> := <var:D3> * <var:C> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:9> ; <var:D2> := <var:D2> * <nat:7> ; <var:D3> := <var:D3> * <nat:5> ; <var:D4> := <var:D4> * <nat:2> ; <var:E> := <var:D4> <var:E> := <var:E> + <var:D3> <var:E> := <var:E> + <var:D2> <var:E> := <var:E> + <var:D1> <var:E> := <var:E> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given every $ <var:q> \in \mathbb{N} $ --- it to be that $ <var:C> = <var:q> $ before executing this program it holds that $ <var:E> = <nat:2> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> + <nat:8> $ when segment of code exits . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code is shown with standard Hoare techniques . Moving on to the next step , we see the statement \verb | <var:D1> := <var:C> ; | . This forwards the condition $ \{ <var:C> = <var:q> \} $ into the condition $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \} $ . This is ensured through the assignment scheme from usual Hoare logic . Keeping momentum , we see the binding code \verb | <var:D2> := <var:D1> * <var:C> ; | . This takes the condition $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \} $ into the postcondition $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \land <var:D2> = <var:q> ^ <nat:2> \} $ . This is deduced with the assignment law found in standard Hoare reasoning . Focusing on the next step seen in the code , the variable assignmet command binding $ <var:D2> * <var:C> $ as $ <var:D3>$ . This takes the condition $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \land <var:D2> = <var:q> ^ <nat:2> \} $ as the condition $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \land <var:D2> = <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \} $ . Observing the subsequent line in the code , we have the binding code \verb | <var:D4> := <var:D3> * <var:C> ; | . This command forwards $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \land <var:D2> = <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \} $ into the postcondition $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \land <var:D2> = <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \} $ . This is guaranteed using the assignment rule found in Hoare techniques . Paying attention to the subsequent line found in our segment of code , the command binding $ <nat:8> $ toward $ <var:D0>$ . This takes the condition $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \land <var:D2> = <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \} $ toward $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \land <var:D2> = <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ . Considering the proceeding piece of code contained in the set of commands , the assignment line \verb | <var:D1> := <var:D1> * <nat:9> ; | . This code moves the precondition $ \{ <var:C> = <var:q> \land <var:D1> = <var:q> \land <var:D2> = <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ toward the postcondition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ . Advancing to the upcoming step contained in the series of commands , the binding statement letting $ <var:D2> * <nat:7> $ into $ <var:D2>$ . This forwards the precondition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ to the postcondition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ . This is known to be sound through the assignment inference rule from standard Hoare logic . Moving forward to the next step , we see the assignment command \verb | <var:D3> := <var:D3> * <nat:5> ; | . This line forwards the condition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D3> = <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ as the condition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ . Moving forward to the next step , we see the variable update command letting $ <var:D4> * <nat:2> $ as $ <var:D4>$ . This statement moves the condition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:q> ^ <nat:3> \land <var:D4> = <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ into the condition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:q> ^ <nat:3> \land <var:D4> = <nat:2> \times <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ . Paying attention to the subsequent piece of code in our series of instructions , the assignment code \verb | <var:E> := <var:D4> | . This advances the precondition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:q> ^ <nat:3> \land <var:D4> = <nat:2> \times <var:q> ^ <nat:4> \land <var:D0> = <nat:8> \} $ into $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:q> ^ <nat:3> \land <var:D0> = <nat:8> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> \} $ . Taking another step toward the subsequent line found in the code , the assignment code giving $ <var:E> + <var:D3$ into $ <var:E>$ . This command moves $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D3> = <nat:5> \times <var:q> ^ <nat:3> \land <var:D0> = <nat:8> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> \} $ as the condition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D0> = <nat:8> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:3> \} $ . Honing in on the proceeding piece of code in our list of instructions , we see the command \verb | <var:E> := <var:E> + <var:D2> | . This statement takes the precondition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:D0> = <nat:8> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:3> \} $ as $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D0> = <nat:8> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> \} $ . This is shown by the assignment scheme found in usual Hoare reasoning . Advancing to the subsequent command contained in our segment of code , we see the variable update statement letting $ <var:E> + <var:D1$ as $ <var:E>$ . This statement takes the condition $ \{ <var:C> = <var:q> \land <var:D1> = <nat:9> \times <var:q> \land <var:D0> = <nat:8> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> \} $ toward the postcondition $ \{ <var:C> = <var:q> \land <var:D0> = <nat:8> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> \} $ . Taking another step toward the following step contained in the program , we see the binding command \verb | <var:E> := <var:E> + <var:D0> | . This statement advances the condition $ \{ <var:C> = <var:q> \land <var:D0> = <nat:8> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> \} $ to the condition $ \{ <var:C> = <var:q> \land <var:E> = <nat:2> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> + <nat:8> \} $ . This is given through the assignment rule found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <var:D4> : string := " <var:D4> " . Definition <def:poly> := <var:D1> := <var:C> ; <var:D2> := <var:D1> * <var:C> ; <var:D3> := <var:D2> * <var:C> ; <var:D4> := <var:D3> * <var:C> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:9> ; <var:D2> := <var:D2> * <nat:7> ; <var:D3> := <var:D3> * <nat:5> ; <var:D4> := <var:D4> * <nat:2> ; <var:E> := <var:D4> <var:E> := <var:E> + <var:D3> <var:E> := <var:E> + <var:D2> <var:E> := <var:E> + <var:D1> <var:E> := <var:E> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:C> = <var:q> }} <def:poly> {{ <var:E> = <nat:2> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <var:q> /\ <var:D2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <var:q> /\ <var:D2> = <var:q> ^ <nat:2> /\ <var:D3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <var:q> /\ <var:D2> = <var:q> ^ <nat:2> /\ <var:D3> = <var:q> ^ <nat:3> /\ <var:D4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <var:q> /\ <var:D2> = <var:q> ^ <nat:2> /\ <var:D3> = <var:q> ^ <nat:3> /\ <var:D4> = <var:q> ^ <nat:4> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <nat:9> * <var:q> /\ <var:D2> = <var:q> ^ <nat:2> /\ <var:D3> = <var:q> ^ <nat:3> /\ <var:D4> = <var:q> ^ <nat:4> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <nat:9> * <var:q> /\ <var:D2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:D3> = <var:q> ^ <nat:3> /\ <var:D4> = <var:q> ^ <nat:4> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <nat:9> * <var:q> /\ <var:D2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:q> ^ <nat:3> /\ <var:D4> = <var:q> ^ <nat:4> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <nat:9> * <var:q> /\ <var:D2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:q> ^ <nat:3> /\ <var:D4> = <nat:2> * <var:q> ^ <nat:4> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <nat:9> * <var:q> /\ <var:D2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:q> ^ <nat:3> /\ <var:D0> = <nat:8> /\ <var:E> = <nat:2> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <nat:9> * <var:q> /\ <var:D2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:D0> = <nat:8> /\ <var:E> = <nat:2> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D1> = <nat:9> * <var:q> /\ <var:D0> = <nat:8> /\ <var:E> = <nat:2> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:D0> = <nat:8> /\ <var:E> = <nat:2> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:E> = <nat:2> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 