\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:A> ; <var:M2> := <var:M1> * <var:A> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:7> ; <var:M2> := <var:M2> * <nat:4> ; <var:Z> := <var:M2> <var:Z> := <var:Z> + <var:M1> <var:Z> := <var:Z> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for any whole numbers $ <var:I> $ , $ <var:A> = <var:I> $ ahead of interpreting our list of instructions then $ <var:Z> = <nat:4> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:6> $ when code finishes . \end{theorem} \begin{proof} The flow of logic for the series of commands is accomplished with typical Hoare techniques . Focusing on the following pieces of code found in the code , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:I> \} & <var:M1> := <var:A> & \{ <var:A> = <var:I> \land <var:M1> = <var:I> \} \\ \{ <var:A> = <var:I> \land <var:M1> = <var:I> \} & <var:M2> := <var:M1> * <var:A> & \{ <var:A> = <var:I> \land <var:M1> = <var:I> \land <var:M2> = <var:I> ^ <nat:2> \} \\ \{ <var:A> = <var:I> \land <var:M1> = <var:I> \land <var:M2> = <var:I> ^ <nat:2> \} & <var:M0> := <nat:6> & \{ <var:A> = <var:I> \land <var:M1> = <var:I> \land <var:M2> = <var:I> ^ <nat:2> \land <var:M0> = <nat:6> \} \\ \{ <var:A> = <var:I> \land <var:M1> = <var:I> \land <var:M2> = <var:I> ^ <nat:2> \land <var:M0> = <nat:6> \} & <var:M1> := <var:M1> * <nat:7> & \{ <var:A> = <var:I> \land <var:M1> = <nat:7> \cdot <var:I> \land <var:M2> = <var:I> ^ <nat:2> \land <var:M0> = <nat:6> \} \\ \{ <var:A> = <var:I> \land <var:M1> = <nat:7> \cdot <var:I> \land <var:M2> = <var:I> ^ <nat:2> \land <var:M0> = <nat:6> \} & <var:M2> := <var:M2> * <nat:4> & \{ <var:A> = <var:I> \land <var:M1> = <nat:7> \cdot <var:I> \land <var:M2> = <nat:4> \cdot <var:I> ^ <nat:2> \land <var:M0> = <nat:6> \} \\ \{ <var:A> = <var:I> \land <var:M1> = <nat:7> \cdot <var:I> \land <var:M2> = <nat:4> \cdot <var:I> ^ <nat:2> \land <var:M0> = <nat:6> \} & <var:Z> := <var:M2& \{ <var:A> = <var:I> \land <var:M1> = <nat:7> \cdot <var:I> \land <var:M0> = <nat:6> \land <var:Z> = <nat:4> \cdot <var:I> ^ <nat:2> \} \end{tabular} This is deduced using the variable update inference rule given by usual Hoare logic . Jumping to the upcoming statement in the segment of code , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:I> \} & <var:M1> := <var:A> & \{ <var:A> = <var:I> \land <var:M1> = <var:I> \} \end{tabular} After , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:I> \} & <var:M1> := <var:A> & \{ <var:A> = <var:I> \land <var:M1> = <var:I> \} \end{tabular} This is sound using the binding inference rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M1> := <var:A> ; <var:M2> := <var:M1> * <var:A> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:7> ; <var:M2> := <var:M2> * <nat:4> ; <var:Z> := <var:M2> <var:Z> := <var:Z> + <var:M1> <var:Z> := <var:Z> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:A> = <var:I> }} <def:poly> {{ <var:Z> = <nat:4> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:M1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:M1> = <var:I> /\ <var:M2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:M1> = <var:I> /\ <var:M2> = <var:I> ^ <nat:2> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:M1> = <nat:7> * <var:I> /\ <var:M2> = <var:I> ^ <nat:2> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:M1> = <nat:7> * <var:I> /\ <var:M2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:M1> = <nat:7> * <var:I> /\ <var:M0> = <nat:6> /\ <var:Z> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:M0> = <nat:6> /\ <var:Z> = <nat:4> * <var:I> ^ <nat:2> + <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:Z> = <nat:4> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 