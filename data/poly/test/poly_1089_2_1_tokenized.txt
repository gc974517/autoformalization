\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:9> ; <var:x> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> in \emph{Imp} . Assume ( given $ <var:K> $ ) $ <var:P> = <var:K> $ ahead of the execution of the series of instructions , it holds that $ <var:x> = <nat:9> $ once segment of code is done . \end{theorem} \begin{proof} Observe that the following decorated code . \begin{eqnarray} \{ <var:P> = <var:K> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:P> = <var:K> \land <var:z0> = <nat:9> \} \\ <var:x> := <var:z0> \\ \{ <var:P> = <var:K> \land <var:x> = <nat:9> \} \end{eqnarray} Using standard Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:9> ; <var:x> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:P> = <var:K> }} <def:poly> {{ <var:x> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:x> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 