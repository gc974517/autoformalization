\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:7> ; <var:n> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Assume that we have $ <var:B> = <var:g> $ ( for all positive numbers $ <var:g> $ ) before evaluating our series of instructions , it must be that we have $ <var:n> = <nat:7> $ . \end{theorem} \begin{proof} Using typical Hoare techniques yields : \begin{eqnarray} \{ <var:B> = <var:g> \} \\ <var:G0> := <nat:7> ; \\ \{ <var:B> = <var:g> \land <var:G0> = <nat:7> \} \\ <var:n> := <var:G0> \\ \{ <var:B> = <var:g> \land <var:n> = <nat:7> \} \end{eqnarray} Given the preceding argument , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:7> ; <var:n> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:B> = <var:g> }} <def:poly> {{ <var:n> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:n> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 