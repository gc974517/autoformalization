\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:D> ; <var:o2> := <var:o1> * <var:D> ; <var:o3> := <var:o2> * <var:D> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:1> ; <var:o2> := <var:o2> * <nat:2> ; <var:o3> := <var:o3> * <nat:3> ; <var:q> := <var:o3> <var:q> := <var:q> + <var:o2> <var:q> := <var:q> + <var:o1> <var:q> := <var:q> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> . Assume that we have $ <var:D> = <var:v> $ given some integers $ <var:v> $ ahead of evaluating the set of commands , it must be that we have $ <var:q> = <nat:3> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> $ when list of instructions is done executing . \end{theorem} \begin{proof} Arguing the correctness of the series of commands is accomplished using standard Hoare logic . Focusing on the upcoming lines in our series of commands , we see \verb | { <var:D> = <var:v> } <var:o1> := <var:D> { <var:D> = <var:v> \land <var:o1> = <var:v> } | , \verb | { <var:D> = <var:v> \land <var:o1> = <var:v> } <var:o2> := <var:o1> * <var:D> { <var:D> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> } | , \verb | { <var:D> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> } <var:o3> := <var:o2> * <var:D> { <var:D> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> } | , \verb | { <var:D> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> } <var:o0> := <nat:2> { <var:D> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:2> } | , \verb | { <var:D> = <var:v> \land <var:o1> = <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:2> } <var:o1> := <var:o1> * <nat:1> { <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:2> } | , \verb | { <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o2> = <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:2> } <var:o2> := <var:o2> * <nat:2> { <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o2> = <nat:2> * <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:2> } | , \verb | { <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o2> = <nat:2> * <var:v> ^ <nat:2> \land <var:o3> = <var:v> ^ <nat:3> \land <var:o0> = <nat:2> } <var:o3> := <var:o3> * <nat:3> { <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o2> = <nat:2> * <var:v> ^ <nat:2> \land <var:o3> = <nat:3> * <var:v> ^ <nat:3> \land <var:o0> = <nat:2> } | , \verb | { <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o2> = <nat:2> * <var:v> ^ <nat:2> \land <var:o3> = <nat:3> * <var:v> ^ <nat:3> \land <var:o0> = <nat:2> } <var:q> := <var:o3{ <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o2> = <nat:2> * <var:v> ^ <nat:2> \land <var:o0> = <nat:2> \land <var:q> = <nat:3> * <var:v> ^ <nat:3> } | and \verb | { <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o2> = <nat:2> * <var:v> ^ <nat:2> \land <var:o0> = <nat:2> \land <var:q> = <nat:3> * <var:v> ^ <nat:3> } <var:q> := <var:q> + <var:o2{ <var:D> = <var:v> \land <var:o1> = <nat:1> * <var:v> \land <var:o0> = <nat:2> \land <var:q> = <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> } | . Moving forward , we have \verb | { <var:D> = <var:v> } <var:o1> := <var:D> { <var:D> = <var:v> \land <var:o1> = <var:v> } | . Immediately after , \verb | { <var:D> = <var:v> } <var:o1> := <var:D> { <var:D> = <var:v> \land <var:o1> = <var:v> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:D> ; <var:o2> := <var:o1> * <var:D> ; <var:o3> := <var:o2> * <var:D> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:1> ; <var:o2> := <var:o2> * <nat:2> ; <var:o3> := <var:o3> * <nat:3> ; <var:q> := <var:o3> <var:q> := <var:q> + <var:o2> <var:q> := <var:q> + <var:o1> <var:q> := <var:q> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:D> = <var:v> }} <def:poly> {{ <var:q> = <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <var:v> /\ <var:o2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <var:v> /\ <var:o2> = <var:v> ^ <nat:2> /\ <var:o3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <var:v> /\ <var:o2> = <var:v> ^ <nat:2> /\ <var:o3> = <var:v> ^ <nat:3> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o2> = <var:v> ^ <nat:2> /\ <var:o3> = <var:v> ^ <nat:3> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:o3> = <var:v> ^ <nat:3> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:v> ^ <nat:3> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:o0> = <nat:2> /\ <var:q> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o0> = <nat:2> /\ <var:q> = <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o0> = <nat:2> /\ <var:q> = <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 