\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:a> ; <var:b2> := <var:b1> * <var:a> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:7> ; <var:b2> := <var:b2> * <nat:3> ; <var:d> := <var:b2> <var:d> := <var:d> + <var:b1> <var:d> := <var:d> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Allow ( letting $ <var:I> \in \mathbb{N} $ ) it to be that $ <var:a> = <var:I> $ before interpreting this list of instructions , it holds that we have $ <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> + <nat:2> $ once series of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for our program is evident by usual Hoare reasoning . Paying attention to the following step contained in our series of instructions , we have the variable update statement letting $ <var:a> $ to $ <var:b1>$ . This transfers the precondition $ \{ <var:a> = <var:I> \} $ into $ \{ <var:a> = <var:I> \land <var:b1> = <var:I> \} $ . This is sound with the assignment scheme obtained from standard Hoare reasoning . Looking at the following statement seen in our segment of code , we see the assignment code yielding $ <var:b1> * <var:a> $ toward $ <var:b2>$ . This code advances $ \{ <var:a> = <var:I> \land <var:b1> = <var:I> \} $ to the postcondition $ \{ <var:a> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \} $ . This is sound through the assignment inference rule in Hoare techniques . Moving onward , the environment update code giving $ <nat:2> $ to $ <var:b0>$ . This moves the precondition $ \{ <var:a> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \} $ to $ \{ <var:a> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b0> = <nat:2> \} $ . This is given with the assignment inference rule defined in usual Hoare techniques . Following , we see the variable update statement \verb | <var:b1> := <var:b1> * <nat:7> ; | . This transfers $ \{ <var:a> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b0> = <nat:2> \} $ as the postcondition $ \{ <var:a> = <var:I> \land <var:b1> = <nat:7> \cdot <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b0> = <nat:2> \} $ . Considering the upcoming statement contained in the code segment , we have the variable binding code defining $ <var:b2> * <nat:3> $ to $ <var:b2>$ . This advances the precondition $ \{ <var:a> = <var:I> \land <var:b1> = <nat:7> \cdot <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b0> = <nat:2> \} $ toward the condition $ \{ <var:a> = <var:I> \land <var:b1> = <nat:7> \cdot <var:I> \land <var:b2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:b0> = <nat:2> \} $ . This is shown to be logically sound through the assignment law from Hoare reasoning . Moving on to the upcoming line contained in the series of commands , the variable binding statement defining $ <var:b2$ to $ <var:d>$ . This code forwards the precondition $ \{ <var:a> = <var:I> \land <var:b1> = <nat:7> \cdot <var:I> \land <var:b2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:b0> = <nat:2> \} $ as the condition $ \{ <var:a> = <var:I> \land <var:b1> = <nat:7> \cdot <var:I> \land <var:b0> = <nat:2> \land <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ . This is ensured using the assignment scheme defined by typical Hoare reasoning . Observing the next step contained in the series of commands , we see the environment update statement \verb | <var:d> := <var:d> + <var:b1> | . This code advances $ \{ <var:a> = <var:I> \land <var:b1> = <nat:7> \cdot <var:I> \land <var:b0> = <nat:2> \land <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:I> \land <var:b0> = <nat:2> \land <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> \} $ . This is shown by the assignment scheme given in typical Hoare reasoning . Moving on to the next step , the assignment code letting $ <var:d> + <var:b0$ as $ <var:d>$ . This moves the condition $ \{ <var:a> = <var:I> \land <var:b0> = <nat:2> \land <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> \} $ as the postcondition $ \{ <var:a> = <var:I> \land <var:d> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:7> \cdot <var:I> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b1> := <var:a> ; <var:b2> := <var:b1> * <var:a> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:7> ; <var:b2> := <var:b2> * <nat:3> ; <var:d> := <var:b2> <var:d> := <var:d> + <var:b1> <var:d> := <var:d> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:a> = <var:I> }} <def:poly> {{ <var:d> = <nat:3> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:b1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:b1> = <var:I> /\ <var:b2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:b1> = <var:I> /\ <var:b2> = <var:I> ^ <nat:2> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:b1> = <nat:7> * <var:I> /\ <var:b2> = <var:I> ^ <nat:2> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:b1> = <nat:7> * <var:I> /\ <var:b2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:b1> = <nat:7> * <var:I> /\ <var:b0> = <nat:2> /\ <var:d> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:b0> = <nat:2> /\ <var:d> = <nat:3> * <var:I> ^ <nat:2> + <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:d> = <nat:3> * <var:I> ^ <nat:2> + <nat:7> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 