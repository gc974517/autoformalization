\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:1> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:h> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:h> ; <var:O2> := <var:O2> * <var:h> ; <var:w> := <var:O2> ; <var:w> := <var:w> + <var:O1> ; <var:w> := <var:w> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:h> = <var:g> $ ( assuming some natural coefficients $ <var:g> $ ) prior to running this list of instructions , it must be that we have $ <var:w> = <nat:1> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:1> $ when series of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is shown using standard Hoare reasoning . Honing in on the next line of code in the code segment , we have the binding line yielding $ <nat:1> $ to $ <var:O0>$ . This code redefines the condition $ \{ <var:h> = <var:g> \} $ to the postcondition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \} $ . Following , we see the assignment statement \verb | <var:O1> := <nat:3> ; | . This moves the precondition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \} $ into the condition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \} $ . This is guaranteed using the assignment scheme obtained from typical Hoare logic . Moving on to the subsequent statement contained in the program , we have the variable binding command \verb | <var:O1> := <var:O1> * <var:h> ; | . This statement forwards the condition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \} $ toward the condition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \} $ . Looking at the next line of code found in our series of instructions , we have the assignment line assigning $ <nat:1> $ as $ <var:O2>$ . This line redefines the precondition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \} $ as the condition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \land <var:O2> = <nat:1> \} $ . This is ensured through the assignment law found in standard Hoare reasoning . Shifting focus toward the upcoming statement seen in the code , the environment update code assigning $ <var:O2> * <var:h> $ into $ <var:O2>$ . This statement forwards the precondition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \land <var:O2> = <nat:1> \} $ toward $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \land <var:O2> = <nat:1> \cdot <var:g> \} $ . This is shown to be logically sound using the assignment law from usual Hoare techniques . Observing the next command in the segment of code , we see the variable update code binding $ <var:O2> * <var:h> $ as $ <var:O2>$ . This moves $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \land <var:O2> = <nat:1> \cdot <var:g> \} $ to $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \land <var:O2> = <nat:1> \cdot <var:g> ^ <nat:2> \} $ . Looking at the proceeding line found in our series of commands , we have the binding command \verb | <var:w> := <var:O2> ; | . This command moves the condition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \land <var:O2> = <nat:1> \cdot <var:g> ^ <nat:2> \} $ to $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \land <var:w> = <nat:1> \cdot <var:g> ^ <nat:2> \} $ . This is deduced by the assignment rule obtained from standard Hoare techniques . Moving on to the next step , the variable update code \verb | <var:w> := <var:w> + <var:O1> ; | . This line takes $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \cdot <var:g> \land <var:w> = <nat:1> \cdot <var:g> ^ <nat:2> \} $ as the postcondition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:w> = <nat:1> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> \} $ . This is guaranteed through the assignment scheme defined in typical Hoare logic . Advancing to the next step , we have the variable binding command letting $ <var:w> + <var:O0$ as $ <var:w>$ . This statement redefines the condition $ \{ <var:h> = <var:g> \land <var:O0> = <nat:1> \land <var:w> = <nat:1> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> \} $ to the postcondition $ \{ <var:h> = <var:g> \land <var:w> = <nat:1> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:1> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:h> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:h> ; <var:O2> := <var:O2> * <var:h> ; <var:w> := <var:O2> ; <var:w> := <var:w> + <var:O1> ; <var:w> := <var:w> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <def:poly> {{ <var:w> = <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:3> * <var:g> /\ <var:O2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:3> * <var:g> /\ <var:O2> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:3> * <var:g> /\ <var:O2> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:3> * <var:g> /\ <var:w> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:O0> = <nat:1> /\ <var:w> = <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:w> = <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 