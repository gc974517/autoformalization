\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <nat:1> + <var:q> * <var:S> ; <var:q> := <nat:2> + <var:q> * <var:S> ; <var:q> := <nat:4> + <var:q> * <var:S> ; <var:q> := <var:q> * <var:S> ; <var:q> := <nat:2> + <var:q> * <var:S> ; <var:q> := <nat:2> + <var:q> * <var:S> ; <var:q> := <nat:1> + <var:q> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:S> = <var:C> $ before the execution of this set of commands it follows that we see $ <var:q> = <nat:4> \cdot <var:C> ^ <nat:7> + <nat:1> \cdot <var:C> ^ <nat:6> + <nat:2> \cdot <var:C> ^ <nat:5> + <nat:4> \cdot <var:C> ^ <nat:4> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this code can be done using the following decorated set of instructions . \begin{eqnarray} \{ <var:S> = <var:C> \} \\ <var:q> := <nat:4> ; \\ \{ <var:S> = <var:C> \land <var:q> = <nat:4> \} \\ <var:q> := <nat:1> + <var:q> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:q> = <nat:4> \cdot <var:C> + <nat:1> \} \\ <var:q> := <nat:2> + <var:q> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:q> = <nat:4> \cdot <var:C> ^ <nat:2> + <nat:1> \cdot <var:C> + <nat:2> \} \\ <var:q> := <nat:4> + <var:q> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:q> = <nat:4> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:4> \} \\ <var:q> := <var:q> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:q> = <nat:4> \cdot <var:C> ^ <nat:4> + <nat:1> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + \} \\ <var:q> := <nat:2> + <var:q> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:q> = <nat:4> \cdot <var:C> ^ <nat:5> + <nat:1> \cdot <var:C> ^ <nat:4> + <nat:2> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> ^ <nat:2> + <nat:2> \} \\ <var:q> := <nat:2> + <var:q> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:q> = <nat:4> \cdot <var:C> ^ <nat:6> + <nat:1> \cdot <var:C> ^ <nat:5> + <nat:2> \cdot <var:C> ^ <nat:4> + <nat:4> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> + <nat:2> \} \\ <var:q> := <nat:1> + <var:q> * <var:S> \\ \{ <var:S> = <var:C> \land <var:q> = <nat:4> \cdot <var:C> ^ <nat:7> + <nat:1> \cdot <var:C> ^ <nat:6> + <nat:2> \cdot <var:C> ^ <nat:5> + <nat:4> \cdot <var:C> ^ <nat:4> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:4> ; <var:q> := <nat:1> + <var:q> * <var:S> ; <var:q> := <nat:2> + <var:q> * <var:S> ; <var:q> := <nat:4> + <var:q> * <var:S> ; <var:q> := <var:q> * <var:S> ; <var:q> := <nat:2> + <var:q> * <var:S> ; <var:q> := <nat:2> + <var:q> * <var:S> ; <var:q> := <nat:1> + <var:q> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <def:poly> {{ <var:q> = <nat:4> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:q> = <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 