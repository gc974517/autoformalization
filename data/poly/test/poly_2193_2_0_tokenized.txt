\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:7> ; <var:r> := <var:M0> \end{verbatim} Allowing that we have $ <var:W> = <var:O> $ prior to running our series of instructions , it holds that $ <var:r> = <nat:7> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning yields : \begin{eqnarray} \{ <var:W> = <var:O> \} \\ <var:M0> := <nat:7> ; \\ \{ <var:W> = <var:O> \land <var:M0> = <nat:7> \} \\ <var:r> := <var:M0> \\ \{ <var:W> = <var:O> \land <var:r> = <nat:7> \} \end{eqnarray} As a consequence , our list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:W> = <var:O> }} <var:M0> := <nat:7> ; <var:r> := <var:M0> {{ <var:r> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:r> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 