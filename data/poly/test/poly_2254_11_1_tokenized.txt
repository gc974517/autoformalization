\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:w> ; <var:l2> := <var:l1> * <var:w> ; <var:l3> := <var:l2> * <var:w> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:9> ; <var:l2> := <var:l2> * <nat:4> ; <var:l3> := <var:l3> * <nat:8> ; <var:J> := <var:l3> <var:J> := <var:J> + <var:l2> <var:J> := <var:J> + <var:l1> <var:J> := <var:J> + <var:l0> \end{verbatim} Allow --- given every natural numbers $ <var:d> $ --- that $ <var:w> = <var:d> $ prior to evaluating this code segment , it must be that $ <var:J> = <nat:8> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> + <nat:3> $ after list of commands has exited . \end{theorem} \begin{proof} Proving correctness for this series of commands is done by Hoare techniques . Shifting focus toward the subsequent statement seen in the series of commands , we have the statement \verb | <var:l1> := <var:w> ; | . This line transfers $ \{ <var:w> = <var:d> \} $ into $ \{ <var:w> = <var:d> \land <var:l1> = <var:d> \} $ . This is deduced by the assignment scheme defined in typical Hoare logic . Further , the code yielding $ <var:l1> * <var:w> $ to $ <var:l2>$ . This command redefines $ \{ <var:w> = <var:d> \land <var:l1> = <var:d> \} $ to $ \{ <var:w> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \} $ . This is deduced with the assignment rule of typical Hoare techniques . Now , we have the environment update statement binding $ <var:l2> * <var:w> $ to $ <var:l3>$ . This redefines the precondition $ \{ <var:w> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \} $ into $ \{ <var:w> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \} $ . This is shown using the assignment law in Hoare techniques . Taking another step toward the proceeding command in our code , we have the line \verb | <var:l0> := <nat:3> ; | . This transfers the condition $ \{ <var:w> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \} $ to the postcondition $ \{ <var:w> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:3> \} $ . This is known to be sound by the assignment inference rule defined by standard Hoare reasoning . Advancing to the next step , we see the assignment line letting $ <var:l1> * <nat:9> $ as $ <var:l1>$ . This statement takes $ \{ <var:w> = <var:d> \land <var:l1> = <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:3> \} $ into the postcondition $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:3> \} $ . This is ensured through the assignment scheme given by standard Hoare logic . Jumping to the next line of code found in the set of commands , we see the environment update statement defining $ <var:l2> * <nat:4> $ to $ <var:l2>$ . This statement advances the condition $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l2> = <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:3> \} $ toward the postcondition $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:3> \} $ . This is shown to be logically sound with the assignment rule of usual Hoare reasoning . Taking another step toward the subsequent line contained in our set of instructions , we see the variable assignmet line letting $ <var:l3> * <nat:8> $ to $ <var:l3>$ . This line transfers the precondition $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:l3> = <var:d> ^ <nat:3> \land <var:l0> = <nat:3> \} $ into the condition $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:l3> = <nat:8> \times <var:d> ^ <nat:3> \land <var:l0> = <nat:3> \} $ . This is rigorously given using the assignment law obtained from standard Hoare logic . Considering the next command found in our series of instructions , we see the line assigning $ <var:l3$ into $ <var:J>$ . This forwards $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:l3> = <nat:8> \times <var:d> ^ <nat:3> \land <var:l0> = <nat:3> \} $ to the condition $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:l0> = <nat:3> \land <var:J> = <nat:8> \times <var:d> ^ <nat:3> \} $ . This is sound with the assignment rule defined in standard Hoare techniques . Advancing on , we have the variable binding command \verb | <var:J> := <var:J> + <var:l2> | . This statement takes the precondition $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:l0> = <nat:3> \land <var:J> = <nat:8> \times <var:d> ^ <nat:3> \} $ to $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l0> = <nat:3> \land <var:J> = <nat:8> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> \} $ . Considering the upcoming line contained in our list of instructions , the variable update command \verb | <var:J> := <var:J> + <var:l1> | . This redefines the condition $ \{ <var:w> = <var:d> \land <var:l1> = <nat:9> \times <var:d> \land <var:l0> = <nat:3> \land <var:J> = <nat:8> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> \} $ into the postcondition $ \{ <var:w> = <var:d> \land <var:l0> = <nat:3> \land <var:J> = <nat:8> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:9> \times <var:d> \} $ . Immediately after , we have the binding line defining $ <var:J> + <var:l0$ as $ <var:J>$ . This code redefines the precondition $ \{ <var:w> = <var:d> \land <var:l0> = <nat:3> \land <var:J> = <nat:8> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:9> \times <var:d> \} $ as $ \{ <var:w> = <var:d> \land <var:J> = <nat:8> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:9> \times <var:d> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:w> = <var:d> }} <var:l1> := <var:w> ; <var:l2> := <var:l1> * <var:w> ; <var:l3> := <var:l2> * <var:w> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:9> ; <var:l2> := <var:l2> * <nat:4> ; <var:l3> := <var:l3> * <nat:8> ; <var:J> := <var:l3> <var:J> := <var:J> + <var:l2> <var:J> := <var:J> + <var:l1> <var:J> := <var:J> + <var:l0> {{ <var:J> = <nat:8> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <var:d> /\ <var:l2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <var:d> /\ <var:l2> = <var:d> ^ <nat:2> /\ <var:l3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <var:d> /\ <var:l2> = <var:d> ^ <nat:2> /\ <var:l3> = <var:d> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <nat:9> * <var:d> /\ <var:l2> = <var:d> ^ <nat:2> /\ <var:l3> = <var:d> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <nat:9> * <var:d> /\ <var:l2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:l3> = <var:d> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <nat:9> * <var:d> /\ <var:l2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:d> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <nat:9> * <var:d> /\ <var:l2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:l0> = <nat:3> /\ <var:J> = <nat:8> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l1> = <nat:9> * <var:d> /\ <var:l0> = <nat:3> /\ <var:J> = <nat:8> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:l0> = <nat:3> /\ <var:J> = <nat:8> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:J> = <nat:8> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 