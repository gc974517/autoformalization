\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:U> ; <var:O> := <var:G1> ; <var:O> := <var:O> + <var:G0> \end{verbatim} Assuming , for every positive integers $ <var:d> $ , $ <var:U> = <var:d> $ before evaluating the code , it holds that we see $ <var:O> = <nat:3> \cdot <var:d> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code is clear using usual Hoare reasoning . Further , we have the variable assignmet code \verb | <var:G0> := <nat:4> ; | . This code takes the precondition $ \{ <var:U> = <var:d> \} $ as $ \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \} $ . Next , we see the variable binding command giving $ <nat:3> $ toward $ <var:G1>$ . This code redefines the precondition $ \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \} $ to $ \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \land <var:G1> = <nat:3> \} $ . Stepping through , the assignment line \verb | <var:G1> := <var:G1> * <var:U> ; | . This command forwards the precondition $ \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \land <var:G1> = <nat:3> \} $ toward the condition $ \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \land <var:G1> = <nat:3> \cdot <var:d> \} $ . Following , we have the statement letting $ <var:G1> $ toward $ <var:O>$ . This forwards the condition $ \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \land <var:G1> = <nat:3> \cdot <var:d> \} $ as the postcondition $ \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \land <var:O> = <nat:3> \cdot <var:d> \} $ . Stepping forward , the assignment statement letting $ <var:O> + <var:G0$ as $ <var:O>$ . This takes the condition $ \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \land <var:O> = <nat:3> \cdot <var:d> \} $ into the condition $ \{ <var:U> = <var:d> \land <var:O> = <nat:3> \cdot <var:d> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:U> = <var:d> }} <var:G0> := <nat:4> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:U> ; <var:O> := <var:G1> ; <var:O> := <var:O> + <var:G0> {{ <var:O> = <nat:3> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:G0> = <nat:4> /\ <var:O> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:O> = <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 