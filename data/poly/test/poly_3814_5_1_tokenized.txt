\begin{document} \begin{theorem} Let the following segment of code such that \begin{verbatim} <var:G1> := <var:p> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:1> ; <var:m> := <var:G1> <var:m> := <var:m> + <var:G0> \end{verbatim} Allowing that we have $ <var:p> = <var:h> $ , with some positive integer coefficients $ <var:h> $ , ahead of executing our code , it follows that $ <var:m> = <nat:1> \times <var:h> + <nat:1> $ once set of commands has finished executing . \end{theorem} \begin{proof} The flow of logic for the code is demonstrated using typical Hoare logic . Jumping to the upcoming pieces of code found in our code segment , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:h> \} & <var:G1> := <var:p> & \{ <var:p> = <var:h> \land <var:G1> = <var:h> \} \\ \{ <var:p> = <var:h> \land <var:G1> = <var:h> \} & <var:G0> := <nat:1> & \{ <var:p> = <var:h> \land <var:G1> = <var:h> \land <var:G0> = <nat:1> \} \end{tabular} This is sound using the variable update scheme of usual Hoare techniques . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:h> \} & <var:G1> := <var:p> & \{ <var:p> = <var:h> \land <var:G1> = <var:h> \} \end{tabular} Paying attention to the subsequent statements contained in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:p> = <var:h> \} & <var:G1> := <var:p> & \{ <var:p> = <var:h> \land <var:G1> = <var:h> \} \\ \{ <var:p> = <var:h> \land <var:G1> = <var:h> \} & <var:G0> := <nat:1> & \{ <var:p> = <var:h> \land <var:G1> = <var:h> \land <var:G0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:p> = <var:h> }} <var:G1> := <var:p> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:1> ; <var:m> := <var:G1> <var:m> := <var:m> + <var:G0> {{ <var:m> = <nat:1> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:G1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:G1> = <var:h> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:G1> = <nat:1> * <var:h> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:G0> = <nat:1> /\ <var:m> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:m> = <nat:1> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 