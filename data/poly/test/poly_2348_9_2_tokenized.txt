\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:M> ; <var:b> := <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <nat:4> + <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <nat:1> + <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Given --- for every $ <var:v> $ --- $ <var:M> = <var:v> $ ahead of interpreting this set of commands it follows that we have $ <var:b> = <nat:3> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives : \begin{eqnarray} \{ <var:M> = <var:v> \} \\ <var:b> := <nat:3> ; \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> \} \\ <var:b> := <nat:1> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> * <var:v> + <nat:1> \} \\ <var:b> := <var:b> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + \} \\ <var:b> := <nat:2> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> \} \\ <var:b> := <nat:2> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:2> \} \\ <var:b> := <nat:4> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:4> \} \\ <var:b> := <nat:2> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> \} \\ <var:b> := <nat:1> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> \} \\ <var:b> := <nat:2> + <var:b> * <var:M> \\ \{ <var:M> = <var:v> \land <var:b> = <nat:3> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> \} \end{eqnarray} Given the above , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:M> ; <var:b> := <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <nat:4> + <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <nat:1> + <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:M> = <var:v> }} <def:poly> {{ <var:b> = <nat:3> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:b> = <nat:3> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 