\begin{document} \begin{theorem} Take the following code segment : \begin{verbatim} <var:b0> := <nat:3> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:V> ; <var:b2> := <var:b2> * <var:V> ; <var:u> := <var:b2> ; <var:u> := <var:u> + <var:b0> \end{verbatim} Assume it to hold that $ <var:V> = <var:w> $ ahead of the evaluation of our series of instructions it holds that we have $ <var:u> = <nat:1> \times <var:w> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} We can see that this decorated set of commands . \begin{eqnarray} \{ <var:V> = <var:w> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:V> = <var:w> \land <var:b0> = <nat:3> \} \\ <var:b2> := <nat:1> ; \\ \{ <var:V> = <var:w> \land <var:b0> = <nat:3> \land <var:b2> = <nat:1> \} \\ <var:b2> := <var:b2> * <var:V> ; \\ \{ <var:V> = <var:w> \land <var:b0> = <nat:3> \land <var:b2> = <nat:1> \times <var:w> \} \\ <var:b2> := <var:b2> * <var:V> ; \\ \{ <var:V> = <var:w> \land <var:b0> = <nat:3> \land <var:b2> = <nat:1> \times <var:w> ^ <nat:2> \} \\ <var:u> := <var:b2> ; \\ \{ <var:V> = <var:w> \land <var:b0> = <nat:3> \land <var:u> = <nat:1> \times <var:w> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:b0> \\ \{ <var:V> = <var:w> \land <var:u> = <nat:1> \times <var:w> ^ <nat:2> + <nat:3> \} \end{eqnarray} The application of usual Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:V> = <var:w> }} <var:b0> := <nat:3> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:V> ; <var:b2> := <var:b2> * <var:V> ; <var:u> := <var:b2> ; <var:u> := <var:u> + <var:b0> {{ <var:u> = <nat:1> * <var:w> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:b0> = <nat:3> /\ <var:b2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:b0> = <nat:3> /\ <var:b2> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:b0> = <nat:3> /\ <var:b2> = <nat:1> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:b0> = <nat:3> /\ <var:u> = <nat:1> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:u> = <nat:1> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 