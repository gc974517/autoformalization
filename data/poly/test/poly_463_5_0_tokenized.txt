\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:7> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:y> ; <var:b> := <var:R1> ; <var:b> := <var:b> + <var:R0> \end{verbatim} Assuming $ <var:y> = <var:T> $ before evaluating our series of commands , it follows that $ <var:b> = <nat:5> \cdot <var:T> + <nat:7> $ once segment of code terminates . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be shown with usual Hoare logic . Considering the upcoming piece of code found in our set of commands , we see the assignment code \verb | <var:R0> := <nat:7> ; | . This moves the condition $ \{ <var:y> = <var:T> \} $ into the postcondition $ \{ <var:y> = <var:T> \land <var:R0> = <nat:7> \} $ . Now , we have the assignment line assigning $ <nat:5> $ as $ <var:R1>$ . This advances the precondition $ \{ <var:y> = <var:T> \land <var:R0> = <nat:7> \} $ as the postcondition $ \{ <var:y> = <var:T> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> \} $ . This is given with the assignment scheme of typical Hoare reasoning . Advancing on , we have the command defining $ <var:R1> * <var:y> $ to $ <var:R1>$ . This line advances the condition $ \{ <var:y> = <var:T> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> \} $ toward $ \{ <var:y> = <var:T> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> \times <var:T> \} $ . Shifting focus toward the upcoming bit of code in our code , the statement \verb | <var:b> := <var:R1> ; | . This advances the condition $ \{ <var:y> = <var:T> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> \times <var:T> \} $ toward the postcondition $ \{ <var:y> = <var:T> \land <var:R0> = <nat:7> \land <var:b> = <nat:5> \times <var:T> \} $ . This is shown with the assignment inference rule in usual Hoare techniques . Moving forward , we have the command defining $ <var:b> + <var:R0$ into $ <var:b>$ . This moves $ \{ <var:y> = <var:T> \land <var:R0> = <nat:7> \land <var:b> = <nat:5> \times <var:T> \} $ toward $ \{ <var:y> = <var:T> \land <var:b> = <nat:5> \times <var:T> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:y> = <var:T> }} <var:R0> := <nat:7> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:y> ; <var:b> := <var:R1> ; <var:b> := <var:b> + <var:R0> {{ <var:b> = <nat:5> * <var:T> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:R0> = <nat:7> /\ <var:b> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b> = <nat:5> * <var:T> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 