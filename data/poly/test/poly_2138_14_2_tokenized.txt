\begin{document} \begin{theorem} Take a program in \emph{Imp} : \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:2> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:1> + <var:e> * <var:Z> ; <var:e> := <nat:2> + <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> \end{verbatim} Assuming given some positive integers $ <var:Q> $ that we have $ <var:Z> = <var:Q> $ ahead of the evaluation of our list of instructions it must be that $ <var:e> = <nat:4> \cdot <var:Q> ^ <nat:13> + <nat:3> \cdot <var:Q> ^ <nat:12> + <nat:3> \cdot <var:Q> ^ <nat:10> + <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:4> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is shown by the below decorated set of commands . \begin{eqnarray} \{ <var:Z> = <var:Q> \} \\ <var:e> := <nat:4> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \} \end{eqnarray} Furthering the execution of this segment of code yields : \begin{eqnarray} <var:e> := <nat:3> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> + <nat:3> \} \\ <var:e> := <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + \} \\ <var:e> := <nat:3> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:3> \} \\ <var:e> := <nat:2> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> + <nat:2> \} \\ <var:e> := <nat:4> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:4> \} \\ <var:e> := <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + \} \\ <var:e> := <nat:1> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:1> \} \\ <var:e> := <nat:2> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> + <nat:2> \} \\ <var:e> := <nat:3> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:3> \} \\ <var:e> := <nat:4> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:4> \} \\ <var:e> := <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:11> + <nat:3> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + \} \\ <var:e> := <nat:4> + <var:e> * <var:Z> ; \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:12> + <nat:3> \cdot <var:Q> ^ <nat:11> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:2> \cdot <var:Q> ^ <nat:8> + <nat:4> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:4> \} \\ <var:e> := <nat:4> + <var:e> * <var:Z> \\ \{ <var:Z> = <var:Q> \land <var:e> = <nat:4> \cdot <var:Q> ^ <nat:13> + <nat:3> \cdot <var:Q> ^ <nat:12> + <nat:3> \cdot <var:Q> ^ <nat:10> + <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:4> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> + <nat:4> \} \end{eqnarray} Applying standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Z> = <var:Q> }} <var:e> := <nat:4> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:2> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:1> + <var:e> * <var:Z> ; <var:e> := <nat:2> + <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> {{ <var:e> = <nat:4> * <var:Q> ^ <nat:13> + <nat:3> * <var:Q> ^ <nat:12> + <nat:3> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:10> + <nat:3> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:10> + <nat:3> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:12> + <nat:3> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Q> /\ <var:e> = <nat:4> * <var:Q> ^ <nat:13> + <nat:3> * <var:Q> ^ <nat:12> + <nat:3> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 