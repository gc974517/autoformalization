\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:2> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:w> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:w> ; <var:m2> := <var:m2> * <var:w> ; <var:L> := <var:m2> ; <var:L> := <var:L> + <var:m1> ; <var:L> := <var:L> + <var:m0> \end{verbatim} Allowing ( with some natural coefficients $ <var:D> $ ) it to be that $ <var:w> = <var:D> $ prior to the evaluation of this set of instructions it holds that $ <var:L> = <nat:2> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> + <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare logic results in : \begin{eqnarray} \{ <var:w> = <var:D> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:w> = <var:D> \land <var:m0> = <nat:2> \} \\ <var:m1> := <nat:5> ; \\ \{ <var:w> = <var:D> \land <var:m0> = <nat:2> \land <var:m1> = <nat:5> \} \\ <var:m1> := <var:m1> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:m0> = <nat:2> \land <var:m1> = <nat:5> * <var:D> \} \\ <var:m2> := <nat:2> ; \\ \{ <var:w> = <var:D> \land <var:m0> = <nat:2> \land <var:m1> = <nat:5> * <var:D> \land <var:m2> = <nat:2> \} \\ <var:m2> := <var:m2> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:m0> = <nat:2> \land <var:m1> = <nat:5> * <var:D> \land <var:m2> = <nat:2> * <var:D> \} \\ <var:m2> := <var:m2> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:m0> = <nat:2> \land <var:m1> = <nat:5> * <var:D> \land <var:m2> = <nat:2> * <var:D> ^ <nat:2> \} \\ <var:L> := <var:m2> ; \\ \{ <var:w> = <var:D> \land <var:m0> = <nat:2> \land <var:m1> = <nat:5> * <var:D> \land <var:L> = <nat:2> * <var:D> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:m1> ; \\ \{ <var:w> = <var:D> \land <var:m0> = <nat:2> \land <var:L> = <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> \} \\ <var:L> := <var:L> + <var:m0> \\ \{ <var:w> = <var:D> \land <var:L> = <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:2> \} \end{eqnarray} Considering the preceding argument , this code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <var:m0> := <nat:2> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:w> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:w> ; <var:m2> := <var:m2> * <var:w> ; <var:L> := <var:m2> ; <var:L> := <var:L> + <var:m1> ; <var:L> := <var:L> + <var:m0> {{ <var:L> = <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:5> * <var:D> /\ <var:m2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:5> * <var:D> /\ <var:m2> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:5> * <var:D> /\ <var:m2> = <nat:2> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:5> * <var:D> /\ <var:L> = <nat:2> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:m0> = <nat:2> /\ <var:L> = <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L> = <nat:2> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 