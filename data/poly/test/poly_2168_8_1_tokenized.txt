\begin{document} \begin{theorem} Define the following set of instructions as \begin{verbatim} <var:q1> := <var:p> ; <var:q2> := <var:q1> * <var:p> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:7> ; <var:q2> := <var:q2> * <nat:2> ; <var:j> := <var:q2> <var:j> := <var:j> + <var:q1> <var:j> := <var:j> + <var:q0> \end{verbatim} Allowing it to be that $ <var:p> = <var:x> $ prior to evaluating our set of instructions , it holds that we have $ <var:j> = <nat:2> \times <var:x> ^ <nat:2> + <nat:7> \times <var:x> + <nat:2> $ once series of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be accomplished with typical Hoare logic . Moving forward to the next step , we see the variable assignmet code defining $ <var:p> $ to $ <var:q1>$ . This statement forwards the precondition $ \{ <var:p> = <var:x> \} $ toward $ \{ <var:p> = <var:x> \land <var:q1> = <var:x> \} $ . This is rigorously given by the assignment scheme of standard Hoare logic . Moving forward , the assignment command giving $ <var:q1> * <var:p> $ to $ <var:q2>$ . This takes the condition $ \{ <var:p> = <var:x> \land <var:q1> = <var:x> \} $ into $ \{ <var:p> = <var:x> \land <var:q1> = <var:x> \land <var:q2> = <var:x> ^ <nat:2> \} $ . This is guaranteed with the assignment law in Hoare reasoning . Immediately after , we have the binding command \verb | <var:q0> := <nat:2> ; | . This statement moves the precondition $ \{ <var:p> = <var:x> \land <var:q1> = <var:x> \land <var:q2> = <var:x> ^ <nat:2> \} $ to $ \{ <var:p> = <var:x> \land <var:q1> = <var:x> \land <var:q2> = <var:x> ^ <nat:2> \land <var:q0> = <nat:2> \} $ . Moving onward , we see the variable binding line assigning $ <var:q1> * <nat:7> $ to $ <var:q1>$ . This transfers the precondition $ \{ <var:p> = <var:x> \land <var:q1> = <var:x> \land <var:q2> = <var:x> ^ <nat:2> \land <var:q0> = <nat:2> \} $ as $ \{ <var:p> = <var:x> \land <var:q1> = <nat:7> * <var:x> \land <var:q2> = <var:x> ^ <nat:2> \land <var:q0> = <nat:2> \} $ . Advancing on , the variable assignmet code yielding $ <var:q2> * <nat:2> $ as $ <var:q2>$ . This takes the condition $ \{ <var:p> = <var:x> \land <var:q1> = <nat:7> * <var:x> \land <var:q2> = <var:x> ^ <nat:2> \land <var:q0> = <nat:2> \} $ as the condition $ \{ <var:p> = <var:x> \land <var:q1> = <nat:7> * <var:x> \land <var:q2> = <nat:2> * <var:x> ^ <nat:2> \land <var:q0> = <nat:2> \} $ . Considering the upcoming command in our segment of code , we have the environment update statement assigning $ <var:q2$ as $ <var:j>$ . This command takes $ \{ <var:p> = <var:x> \land <var:q1> = <nat:7> * <var:x> \land <var:q2> = <nat:2> * <var:x> ^ <nat:2> \land <var:q0> = <nat:2> \} $ toward $ \{ <var:p> = <var:x> \land <var:q1> = <nat:7> * <var:x> \land <var:q0> = <nat:2> \land <var:j> = <nat:2> * <var:x> ^ <nat:2> \} $ . This is ensured using the assignment law given in typical Hoare techniques . Now , the binding statement binding $ <var:j> + <var:q1$ to $ <var:j>$ . This takes the condition $ \{ <var:p> = <var:x> \land <var:q1> = <nat:7> * <var:x> \land <var:q0> = <nat:2> \land <var:j> = <nat:2> * <var:x> ^ <nat:2> \} $ to the condition $ \{ <var:p> = <var:x> \land <var:q0> = <nat:2> \land <var:j> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> \} $ . This is shown to be logically sound with the assignment scheme obtained from Hoare techniques . Following , we see the binding code \verb | <var:j> := <var:j> + <var:q0> | . This command transfers the condition $ \{ <var:p> = <var:x> \land <var:q0> = <nat:2> \land <var:j> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> \} $ to the postcondition $ \{ <var:p> = <var:x> \land <var:j> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:p> = <var:x> }} <var:q1> := <var:p> ; <var:q2> := <var:q1> * <var:p> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:7> ; <var:q2> := <var:q2> * <nat:2> ; <var:j> := <var:q2> <var:j> := <var:j> + <var:q1> <var:j> := <var:j> + <var:q0> {{ <var:j> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:q1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:q1> = <var:x> /\ <var:q2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:q1> = <var:x> /\ <var:q2> = <var:x> ^ <nat:2> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:q1> = <nat:7> * <var:x> /\ <var:q2> = <var:x> ^ <nat:2> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:q1> = <nat:7> * <var:x> /\ <var:q2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:q1> = <nat:7> * <var:x> /\ <var:q0> = <nat:2> /\ <var:j> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:q0> = <nat:2> /\ <var:j> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:j> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 