\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:6> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:e> ; <var:f2> := <nat:7> ; <var:f2> := <var:f2> * <var:e> ; <var:f2> := <var:f2> * <var:e> ; <var:v> := <var:f2> ; <var:v> := <var:v> + <var:f1> ; <var:v> := <var:v> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Assume --- taking integers $ <var:W> $ --- it to hold that $ <var:e> = <var:W> $ ahead of the evaluation of this program it must be that we have $ <var:v> = <nat:7> \cdot <var:W> ^ <nat:2> + <nat:9> \cdot <var:W> + <nat:6> $ when series of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is accomplished by this decorated program . \begin{eqnarray} \{ <var:e> = <var:W> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:e> = <var:W> \land <var:f0> = <nat:6> \} \\ <var:f1> := <nat:9> ; \\ \{ <var:e> = <var:W> \land <var:f0> = <nat:6> \land <var:f1> = <nat:9> \} \\ <var:f1> := <var:f1> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:f0> = <nat:6> \land <var:f1> = <nat:9> \cdot <var:W> \} \\ <var:f2> := <nat:7> ; \\ \{ <var:e> = <var:W> \land <var:f0> = <nat:6> \land <var:f1> = <nat:9> \cdot <var:W> \land <var:f2> = <nat:7> \} \\ <var:f2> := <var:f2> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:f0> = <nat:6> \land <var:f1> = <nat:9> \cdot <var:W> \land <var:f2> = <nat:7> \cdot <var:W> \} \\ <var:f2> := <var:f2> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:f0> = <nat:6> \land <var:f1> = <nat:9> \cdot <var:W> \land <var:f2> = <nat:7> \cdot <var:W> ^ <nat:2> \} \\ <var:v> := <var:f2> ; \\ \{ <var:e> = <var:W> \land <var:f0> = <nat:6> \land <var:f1> = <nat:9> \cdot <var:W> \land <var:v> = <nat:7> \cdot <var:W> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:f1> ; \\ \{ <var:e> = <var:W> \land <var:f0> = <nat:6> \land <var:v> = <nat:7> \cdot <var:W> ^ <nat:2> + <nat:9> \cdot <var:W> \} \\ <var:v> := <var:v> + <var:f0> \\ \{ <var:e> = <var:W> \land <var:v> = <nat:7> \cdot <var:W> ^ <nat:2> + <nat:9> \cdot <var:W> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f0> := <nat:6> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:e> ; <var:f2> := <nat:7> ; <var:f2> := <var:f2> * <var:e> ; <var:f2> := <var:f2> * <var:e> ; <var:v> := <var:f2> ; <var:v> := <var:v> + <var:f1> ; <var:v> := <var:v> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:e> = <var:W> }} <def:poly> {{ <var:v> = <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:9> * <var:W> /\ <var:f2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:9> * <var:W> /\ <var:f2> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:9> * <var:W> /\ <var:f2> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:9> * <var:W> /\ <var:v> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:6> /\ <var:v> = <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:v> = <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 