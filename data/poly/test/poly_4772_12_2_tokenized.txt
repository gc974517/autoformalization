\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:b> := <nat:2> ; <var:b> := <nat:4> + <var:b> * <var:M> ; <var:b> := <nat:3> + <var:b> * <var:M> ; <var:b> := <nat:3> + <var:b> * <var:M> ; <var:b> := <nat:3> + <var:b> * <var:M> ; <var:b> := <nat:3> + <var:b> * <var:M> ; <var:b> := <nat:4> + <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> \end{verbatim} Given ( letting positive coefficients $ <var:W> $ ) it to be that $ <var:M> = <var:W> $ before running this program it holds that we see $ <var:b> = <nat:2> \cdot <var:W> ^ <nat:11> + <nat:4> \cdot <var:W> ^ <nat:10> + <nat:3> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:4> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:2> $ when series of instructions is done executing . \end{theorem} \begin{proof} The way to prove correctness for this code is given using the following decorated set of instructions . \begin{eqnarray} \{ <var:M> = <var:W> \} \\ <var:b> := <nat:2> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> \} \\ <var:b> := <nat:4> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> + <nat:4> \} \\ <var:b> := <nat:3> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> \} \end{eqnarray} Continuing running the list of instructions yields : \begin{eqnarray} <var:b> := <nat:3> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> \} \\ <var:b> := <nat:3> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> \} \\ <var:b> := <nat:3> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> \} \\ <var:b> := <nat:4> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:4> \} \\ <var:b> := <nat:2> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:2> \} \\ <var:b> := <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + \} \\ <var:b> := <nat:2> + <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> \} \\ <var:b> := <var:b> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + \} \\ <var:b> := <nat:2> + <var:b> * <var:M> \\ \{ <var:M> = <var:W> \land <var:b> = <nat:2> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> \} \end{eqnarray} Applying Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:M> = <var:W> }} <var:b> := <nat:2> ; <var:b> := <nat:4> + <var:b> * <var:M> ; <var:b> := <nat:3> + <var:b> * <var:M> ; <var:b> := <nat:3> + <var:b> * <var:M> ; <var:b> := <nat:3> + <var:b> * <var:M> ; <var:b> := <nat:3> + <var:b> * <var:M> ; <var:b> := <nat:4> + <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> ; <var:b> := <var:b> * <var:M> ; <var:b> := <nat:2> + <var:b> * <var:M> {{ <var:b> = <nat:2> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:b> = <nat:2> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 