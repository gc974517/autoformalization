\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:5> ; <var:Y1> := <nat:8> ; <var:Y1> := <var:Y1> * <var:m> ; <var:Y2> := <nat:6> ; <var:Y2> := <var:Y2> * <var:m> ; <var:Y2> := <var:Y2> * <var:m> ; <var:Y3> := <nat:6> ; <var:Y3> := <var:Y3> * <var:m> ; <var:Y3> := <var:Y3> * <var:m> ; <var:Y3> := <var:Y3> * <var:m> ; <var:N> := <var:Y3> ; <var:N> := <var:N> + <var:Y2> ; <var:N> := <var:N> + <var:Y1> ; <var:N> := <var:N> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Given ( for any positive integers $ <var:A> $ ) that $ <var:m> = <var:A> $ ahead of executing this set of commands then $ <var:N> = <nat:6> \cdot <var:A> ^ <nat:3> + <nat:6> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> + <nat:5> $ when program is done . \end{theorem} \begin{proof} The application of typical Hoare techniques yields : \begin{eqnarray} \{ <var:m> = <var:A> \} \\ <var:Y0> := <nat:5> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \} \\ <var:Y1> := <nat:8> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> \} \\ <var:Y1> := <var:Y1> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \} \\ <var:Y2> := <nat:6> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:Y2> = <nat:6> \} \\ <var:Y2> := <var:Y2> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:Y2> = <nat:6> * <var:A> \} \\ <var:Y2> := <var:Y2> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:Y2> = <nat:6> * <var:A> ^ <nat:2> \} \\ <var:Y3> := <nat:6> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:Y2> = <nat:6> * <var:A> ^ <nat:2> \land <var:Y3> = <nat:6> \} \\ <var:Y3> := <var:Y3> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:Y2> = <nat:6> * <var:A> ^ <nat:2> \land <var:Y3> = <nat:6> * <var:A> \} \\ <var:Y3> := <var:Y3> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:Y2> = <nat:6> * <var:A> ^ <nat:2> \land <var:Y3> = <nat:6> * <var:A> ^ <nat:2> \} \\ <var:Y3> := <var:Y3> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:Y2> = <nat:6> * <var:A> ^ <nat:2> \land <var:Y3> = <nat:6> * <var:A> ^ <nat:3> \} \\ <var:N> := <var:Y3> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:Y2> = <nat:6> * <var:A> ^ <nat:2> \land <var:N> = <nat:6> * <var:A> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:Y2> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:8> * <var:A> \land <var:N> = <nat:6> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:Y1> ; \\ \{ <var:m> = <var:A> \land <var:Y0> = <nat:5> \land <var:N> = <nat:6> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:8> * <var:A> \} \\ <var:N> := <var:N> + <var:Y0> \\ \{ <var:m> = <var:A> \land <var:N> = <nat:6> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:5> \} \end{eqnarray} As a result , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <def:poly> := <var:Y0> := <nat:5> ; <var:Y1> := <nat:8> ; <var:Y1> := <var:Y1> * <var:m> ; <var:Y2> := <nat:6> ; <var:Y2> := <var:Y2> * <var:m> ; <var:Y2> := <var:Y2> * <var:m> ; <var:Y3> := <nat:6> ; <var:Y3> := <var:Y3> * <var:m> ; <var:Y3> := <var:Y3> * <var:m> ; <var:Y3> := <var:Y3> * <var:m> ; <var:N> := <var:Y3> ; <var:N> := <var:N> + <var:Y2> ; <var:N> := <var:N> + <var:Y1> ; <var:N> := <var:N> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:m> = <var:A> }} <def:poly> {{ <var:N> = <nat:6> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:6> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:Y3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:Y3> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:Y3> = <nat:6> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:Y3> = <nat:6> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:N> = <nat:6> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:N> = <nat:6> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:Y0> = <nat:5> /\ <var:N> = <nat:6> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:N> = <nat:6> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 