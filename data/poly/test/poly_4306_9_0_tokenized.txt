\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:9> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:n> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:n> ; <var:k2> := <var:k2> * <var:n> ; <var:f> := <var:k2> ; <var:f> := <var:f> + <var:k1> ; <var:f> := <var:f> + <var:k0> \end{verbatim} Allowing that we have $ <var:n> = <var:q> $ prior to running our set of commands it must be that we see $ <var:f> = <nat:5> \cdot <var:q> ^ <nat:2> + <nat:7> \cdot <var:q> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:n> = <var:q> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:n> = <var:q> \land <var:k0> = <nat:9> \} \\ <var:k1> := <nat:7> ; \\ \{ <var:n> = <var:q> \land <var:k0> = <nat:9> \land <var:k1> = <nat:7> \} \\ <var:k1> := <var:k1> * <var:n> ; \\ \{ <var:n> = <var:q> \land <var:k0> = <nat:9> \land <var:k1> = <nat:7> * <var:q> \} \\ <var:k2> := <nat:5> ; \\ \{ <var:n> = <var:q> \land <var:k0> = <nat:9> \land <var:k1> = <nat:7> * <var:q> \land <var:k2> = <nat:5> \} \\ <var:k2> := <var:k2> * <var:n> ; \\ \{ <var:n> = <var:q> \land <var:k0> = <nat:9> \land <var:k1> = <nat:7> * <var:q> \land <var:k2> = <nat:5> * <var:q> \} \\ <var:k2> := <var:k2> * <var:n> ; \\ \{ <var:n> = <var:q> \land <var:k0> = <nat:9> \land <var:k1> = <nat:7> * <var:q> \land <var:k2> = <nat:5> * <var:q> ^ <nat:2> \} \\ <var:f> := <var:k2> ; \\ \{ <var:n> = <var:q> \land <var:k0> = <nat:9> \land <var:k1> = <nat:7> * <var:q> \land <var:f> = <nat:5> * <var:q> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:k1> ; \\ \{ <var:n> = <var:q> \land <var:k0> = <nat:9> \land <var:f> = <nat:5> * <var:q> ^ <nat:2> + <nat:7> * <var:q> \} \\ <var:f> := <var:f> + <var:k0> \\ \{ <var:n> = <var:q> \land <var:f> = <nat:5> * <var:q> ^ <nat:2> + <nat:7> * <var:q> + <nat:9> \} \end{eqnarray} Given the above , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:n> = <var:q> }} <var:k0> := <nat:9> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:n> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:n> ; <var:k2> := <var:k2> * <var:n> ; <var:f> := <var:k2> ; <var:f> := <var:f> + <var:k1> ; <var:f> := <var:f> + <var:k0> {{ <var:f> = <nat:5> * <var:q> ^ <nat:2> + <nat:7> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:7> * <var:q> /\ <var:k2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:7> * <var:q> /\ <var:k2> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:7> * <var:q> /\ <var:k2> = <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k0> = <nat:9> /\ <var:k1> = <nat:7> * <var:q> /\ <var:f> = <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:k0> = <nat:9> /\ <var:f> = <nat:5> * <var:q> ^ <nat:2> + <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:f> = <nat:5> * <var:q> ^ <nat:2> + <nat:7> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 