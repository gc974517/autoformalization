\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:K> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:1> ; <var:O> := <var:i1> <var:O> := <var:O> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:K> = <var:z> $ before evaluating the set of instructions it follows that $ <var:O> = <nat:1> \times <var:z> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the list of commands is evident through Hoare reasoning . Jumping to the subsequent statements found in the code segment , we have \begin{verbatim} { <var:K> = <var:z> } <var:i1> := <var:K> { <var:K> = <var:z> \land <var:i1> = <var:z> } { <var:K> = <var:z> \land <var:i1> = <var:z> } <var:i0> := <nat:3> { <var:K> = <var:z> \land <var:i1> = <var:z> \land <var:i0> = <nat:3> } { <var:K> = <var:z> \land <var:i1> = <var:z> \land <var:i0> = <nat:3> } <var:i1> := <var:i1> * <nat:1> { <var:K> = <var:z> \land <var:i1> = <nat:1> \cdot <var:z> \land <var:i0> = <nat:3> } { <var:K> = <var:z> \land <var:i1> = <nat:1> \cdot <var:z> \land <var:i0> = <nat:3> } <var:O> := <var:i1{ <var:K> = <var:z> \land <var:i0> = <nat:3> \land <var:O> = <nat:1> \cdot <var:z> } { <var:K> = <var:z> \land <var:i0> = <nat:3> \land <var:O> = <nat:1> \cdot <var:z> } <var:O> := <var:O> + <var:i0{ <var:K> = <var:z> \land <var:O> = <nat:1> \cdot <var:z> + <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:K> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:1> ; <var:O> := <var:i1> <var:O> := <var:O> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:K> = <var:z> }} <def:poly> {{ <var:O> = <nat:1> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:i1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:i1> = <var:z> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:i1> = <nat:1> * <var:z> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:i0> = <nat:3> /\ <var:O> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:O> = <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 