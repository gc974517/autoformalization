\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:2> ; <var:T1> := <nat:8> ; <var:T1> := <var:T1> * <var:P> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:P> ; <var:T2> := <var:T2> * <var:P> ; <var:z> := <var:T2> ; <var:z> := <var:z> + <var:T1> ; <var:z> := <var:z> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Allowing it to hold that $ <var:P> = <var:w> $ ahead of executing our list of instructions then we have $ <var:z> = <nat:7> \cdot <var:w> ^ <nat:2> + <nat:8> \cdot <var:w> + <nat:2> $ after program has executed . \end{theorem} \begin{proof} The method of proof for the set of instructions can be seen using standard Hoare reasoning . Stepping forward , the assignment line yielding $ <nat:2> $ into $ <var:T0>$ . This redefines the precondition $ \{ <var:P> = <var:w> \} $ as the postcondition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \} $ . Immediately after , we have the variable assignmet command \verb | <var:T1> := <nat:8> ; | . This advances $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \} $ toward the condition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \} $ . Observing the proceeding line of code found in the series of instructions , we see the binding command yielding $ <var:T1> * <var:P> $ as $ <var:T1>$ . This statement takes the precondition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \} $ toward $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \} $ . This is deduced through the assignment rule found in standard Hoare reasoning . Moving on , we have the variable assignmet line \verb | <var:T2> := <nat:7> ; | . This command moves the precondition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \} $ into the postcondition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \land <var:T2> = <nat:7> \} $ . Looking at the following piece of code contained in our program , we have the binding command giving $ <var:T2> * <var:P> $ toward $ <var:T2>$ . This advances $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \land <var:T2> = <nat:7> \} $ toward the condition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \land <var:T2> = <nat:7> \times <var:w> \} $ . Shifting focus toward the subsequent line in the series of commands , we see the variable update code \verb | <var:T2> := <var:T2> * <var:P> ; | . This command advances the precondition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \land <var:T2> = <nat:7> \times <var:w> \} $ toward the postcondition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \land <var:T2> = <nat:7> \times <var:w> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme given in Hoare reasoning . Following , we have the variable update statement \verb | <var:z> := <var:T2> ; | . This redefines the condition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \land <var:T2> = <nat:7> \times <var:w> ^ <nat:2> \} $ to $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \land <var:z> = <nat:7> \times <var:w> ^ <nat:2> \} $ . This is ensured through the assignment law in standard Hoare techniques . Focusing on the following piece of code found in our set of instructions , the line yielding $ <var:z> + <var:T1> $ into $ <var:z>$ . This statement moves the precondition $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:w> \land <var:z> = <nat:7> \times <var:w> ^ <nat:2> \} $ to $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:z> = <nat:7> \times <var:w> ^ <nat:2> + <nat:8> \times <var:w> \} $ . Following , we see the binding statement letting $ <var:z> + <var:T0$ toward $ <var:z>$ . This code moves $ \{ <var:P> = <var:w> \land <var:T0> = <nat:2> \land <var:z> = <nat:7> \times <var:w> ^ <nat:2> + <nat:8> \times <var:w> \} $ toward the postcondition $ \{ <var:P> = <var:w> \land <var:z> = <nat:7> \times <var:w> ^ <nat:2> + <nat:8> \times <var:w> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:2> ; <var:T1> := <nat:8> ; <var:T1> := <var:T1> * <var:P> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:P> ; <var:T2> := <var:T2> * <var:P> ; <var:z> := <var:T2> ; <var:z> := <var:z> + <var:T1> ; <var:z> := <var:z> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:P> = <var:w> }} <def:poly> {{ <var:z> = <nat:7> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:w> /\ <var:T2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:w> /\ <var:T2> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:w> /\ <var:T2> = <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:w> /\ <var:z> = <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:T0> = <nat:2> /\ <var:z> = <nat:7> * <var:w> ^ <nat:2> + <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:z> = <nat:7> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 