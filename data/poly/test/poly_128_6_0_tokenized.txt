\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:6> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:e> ; <var:v2> := <var:v2> * <var:e> ; <var:x> := <var:v2> ; <var:x> := <var:x> + <var:v0> \end{verbatim} Assuming it to be that $ <var:e> = <var:O> $ prior to interpreting this program it must be that we have $ <var:x> = <nat:6> \times <var:O> ^ <nat:2> + <nat:6> $ after set of instructions exits . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:e> = <var:O> \} \\ <var:v0> := <nat:6> ; \\ \{ <var:e> = <var:O> \land <var:v0> = <nat:6> \} \\ <var:v2> := <nat:6> ; \\ \{ <var:e> = <var:O> \land <var:v0> = <nat:6> \land <var:v2> = <nat:6> \} \\ <var:v2> := <var:v2> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:v0> = <nat:6> \land <var:v2> = <nat:6> \cdot <var:O> \} \\ <var:v2> := <var:v2> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:v0> = <nat:6> \land <var:v2> = <nat:6> \cdot <var:O> ^ <nat:2> \} \\ <var:x> := <var:v2> ; \\ \{ <var:e> = <var:O> \land <var:v0> = <nat:6> \land <var:x> = <nat:6> \cdot <var:O> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:v0> \\ \{ <var:e> = <var:O> \land <var:x> = <nat:6> \cdot <var:O> ^ <nat:2> + <nat:6> \} \end{eqnarray} Given the preceding argument , the segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:e> = <var:O> }} <var:v0> := <nat:6> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:e> ; <var:v2> := <var:v2> * <var:e> ; <var:x> := <var:v2> ; <var:x> := <var:x> + <var:v0> {{ <var:x> = <nat:6> * <var:O> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:v0> = <nat:6> /\ <var:v2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:v0> = <nat:6> /\ <var:v2> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:v0> = <nat:6> /\ <var:v2> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:v0> = <nat:6> /\ <var:x> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:x> = <nat:6> * <var:O> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 