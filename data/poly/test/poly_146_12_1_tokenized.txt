\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:O> ; <var:L2> := <var:L1> * <var:O> ; <var:L3> := <var:L2> * <var:O> ; <var:L4> := <var:L3> * <var:O> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:8> ; <var:L2> := <var:L2> * <nat:8> ; <var:L4> := <var:L4> * <nat:7> ; <var:z> := <var:L4> <var:z> := <var:z> + <var:L2> <var:z> := <var:z> + <var:L1> <var:z> := <var:z> + <var:L0> \end{verbatim} Given , given any natural coefficients $ <var:x> $ , $ <var:O> = <var:x> $ before evaluating the set of instructions then we see $ <var:z> = <nat:7> \times <var:x> ^ <nat:4> + <nat:8> \times <var:x> ^ <nat:2> + <nat:8> \times <var:x> + <nat:6> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:O> = <var:x> \} \\ <var:L1> := <var:O> ; \\ \{ <var:O> = <var:x> \land <var:L1> = <var:x> \} \end{eqnarray} Allowing evaluating our series of instructions gives : \begin{eqnarray} <var:L2> := <var:L1> * <var:O> ; \\ \{ <var:O> = <var:x> \land <var:L1> = <var:x> \land <var:L2> = <var:x> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:O> ; \\ \{ <var:O> = <var:x> \land <var:L1> = <var:x> \land <var:L2> = <var:x> ^ <nat:2> \land <var:L3> = <var:x> ^ <nat:3> \} \\ <var:L4> := <var:L3> * <var:O> ; \\ \{ <var:O> = <var:x> \land <var:L1> = <var:x> \land <var:L2> = <var:x> ^ <nat:2> \land <var:L3> = <var:x> ^ <nat:3> \land <var:L4> = <var:x> ^ <nat:4> \} \\ <var:L0> := <nat:6> ; \\ \{ <var:O> = <var:x> \land <var:L1> = <var:x> \land <var:L2> = <var:x> ^ <nat:2> \land <var:L3> = <var:x> ^ <nat:3> \land <var:L4> = <var:x> ^ <nat:4> \land <var:L0> = <nat:6> \} \\ <var:L1> := <var:L1> * <nat:8> ; \\ \{ <var:O> = <var:x> \land <var:L1> = <nat:8> * <var:x> \land <var:L2> = <var:x> ^ <nat:2> \land <var:L3> = <var:x> ^ <nat:3> \land <var:L4> = <var:x> ^ <nat:4> \land <var:L0> = <nat:6> \} \\ <var:L2> := <var:L2> * <nat:8> ; \\ \{ <var:O> = <var:x> \land <var:L1> = <nat:8> * <var:x> \land <var:L2> = <nat:8> * <var:x> ^ <nat:2> \land <var:L3> = <var:x> ^ <nat:3> \land <var:L4> = <var:x> ^ <nat:4> \land <var:L0> = <nat:6> \} \\ <var:L4> := <var:L4> * <nat:7> ; \\ \{ <var:O> = <var:x> \land <var:L1> = <nat:8> * <var:x> \land <var:L2> = <nat:8> * <var:x> ^ <nat:2> \land <var:L3> = <var:x> ^ <nat:3> \land <var:L4> = <nat:7> * <var:x> ^ <nat:4> \land <var:L0> = <nat:6> \} \\ <var:z> := <var:L4> \\ \{ <var:O> = <var:x> \land <var:L1> = <nat:8> * <var:x> \land <var:L2> = <nat:8> * <var:x> ^ <nat:2> \land <var:L3> = <var:x> ^ <nat:3> \land <var:L0> = <nat:6> \land <var:z> = <nat:7> * <var:x> ^ <nat:4> \} \\ <var:z> := <var:z> + <var:L2> \\ \{ <var:O> = <var:x> \land <var:L1> = <nat:8> * <var:x> \land <var:L0> = <nat:6> \land <var:z> = <nat:7> * <var:x> ^ <nat:4> + <nat:8> * <var:x> ^ <nat:2> \} \end{eqnarray} Allowing interpreting the set of commands gives us : \begin{eqnarray} <var:z> := <var:z> + <var:L1> \\ \{ <var:O> = <var:x> \land <var:L0> = <nat:6> \land <var:z> = <nat:7> * <var:x> ^ <nat:4> + <nat:8> * <var:x> ^ <nat:2> + <nat:8> * <var:x> \} \\ <var:z> := <var:z> + <var:L0> \\ \{ <var:O> = <var:x> \land <var:z> = <nat:7> * <var:x> ^ <nat:4> + <nat:8> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:6> \} \end{eqnarray} As a consequence , the series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <var:L4> : string := " <var:L4> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:O> = <var:x> }} <var:L1> := <var:O> ; <var:L2> := <var:L1> * <var:O> ; <var:L3> := <var:L2> * <var:O> ; <var:L4> := <var:L3> * <var:O> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:8> ; <var:L2> := <var:L2> * <nat:8> ; <var:L4> := <var:L4> * <nat:7> ; <var:z> := <var:L4> <var:z> := <var:z> + <var:L2> <var:z> := <var:z> + <var:L1> <var:z> := <var:z> + <var:L0> {{ <var:z> = <nat:7> * <var:x> ^ <nat:4> + <nat:8> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <var:x> /\ <var:L2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <var:x> /\ <var:L2> = <var:x> ^ <nat:2> /\ <var:L3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <var:x> /\ <var:L2> = <var:x> ^ <nat:2> /\ <var:L3> = <var:x> ^ <nat:3> /\ <var:L4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <var:x> /\ <var:L2> = <var:x> ^ <nat:2> /\ <var:L3> = <var:x> ^ <nat:3> /\ <var:L4> = <var:x> ^ <nat:4> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <nat:8> * <var:x> /\ <var:L2> = <var:x> ^ <nat:2> /\ <var:L3> = <var:x> ^ <nat:3> /\ <var:L4> = <var:x> ^ <nat:4> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <nat:8> * <var:x> /\ <var:L2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:L3> = <var:x> ^ <nat:3> /\ <var:L4> = <var:x> ^ <nat:4> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <nat:8> * <var:x> /\ <var:L2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:L3> = <var:x> ^ <nat:3> /\ <var:L4> = <nat:7> * <var:x> ^ <nat:4> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <nat:8> * <var:x> /\ <var:L2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:L3> = <var:x> ^ <nat:3> /\ <var:L0> = <nat:6> /\ <var:z> = <nat:7> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L1> = <nat:8> * <var:x> /\ <var:L0> = <nat:6> /\ <var:z> = <nat:7> * <var:x> ^ <nat:4> + <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:L0> = <nat:6> /\ <var:z> = <nat:7> * <var:x> ^ <nat:4> + <nat:8> * <var:x> ^ <nat:2> + <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:z> = <nat:7> * <var:x> ^ <nat:4> + <nat:8> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 