\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:L> ; <var:f2> := <var:f1> * <var:L> ; <var:f3> := <var:f2> * <var:L> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:2> ; <var:f2> := <var:f2> * <nat:3> ; <var:f3> := <var:f3> * <nat:7> ; <var:H> := <var:f3> <var:H> := <var:H> + <var:f2> <var:H> := <var:H> + <var:f1> <var:H> := <var:H> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:L> = <var:B> $ ahead of the evaluation of this series of commands , it holds that we have $ <var:H> = <nat:7> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning produces : \begin{eqnarray} \{ <var:L> = <var:B> \} \\ <var:f1> := <var:L> ; \\ \{ <var:L> = <var:B> \land <var:f1> = <var:B> \} \\ <var:f2> := <var:f1> * <var:L> ; \\ \{ <var:L> = <var:B> \land <var:f1> = <var:B> \land <var:f2> = <var:B> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:L> ; \\ \{ <var:L> = <var:B> \land <var:f1> = <var:B> \land <var:f2> = <var:B> ^ <nat:2> \land <var:f3> = <var:B> ^ <nat:3> \} \\ <var:f0> := <nat:8> ; \\ \{ <var:L> = <var:B> \land <var:f1> = <var:B> \land <var:f2> = <var:B> ^ <nat:2> \land <var:f3> = <var:B> ^ <nat:3> \land <var:f0> = <nat:8> \} \\ <var:f1> := <var:f1> * <nat:2> ; \\ \{ <var:L> = <var:B> \land <var:f1> = <nat:2> \times <var:B> \land <var:f2> = <var:B> ^ <nat:2> \land <var:f3> = <var:B> ^ <nat:3> \land <var:f0> = <nat:8> \} \\ <var:f2> := <var:f2> * <nat:3> ; \\ \{ <var:L> = <var:B> \land <var:f1> = <nat:2> \times <var:B> \land <var:f2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:f3> = <var:B> ^ <nat:3> \land <var:f0> = <nat:8> \} \\ <var:f3> := <var:f3> * <nat:7> ; \\ \{ <var:L> = <var:B> \land <var:f1> = <nat:2> \times <var:B> \land <var:f2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:f3> = <nat:7> \times <var:B> ^ <nat:3> \land <var:f0> = <nat:8> \} \\ <var:H> := <var:f3> \\ \{ <var:L> = <var:B> \land <var:f1> = <nat:2> \times <var:B> \land <var:f2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:f0> = <nat:8> \land <var:H> = <nat:7> \times <var:B> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:f2> \\ \{ <var:L> = <var:B> \land <var:f1> = <nat:2> \times <var:B> \land <var:f0> = <nat:8> \land <var:H> = <nat:7> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:f1> \\ \{ <var:L> = <var:B> \land <var:f0> = <nat:8> \land <var:H> = <nat:7> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> \} \\ <var:H> := <var:H> + <var:f0> \\ \{ <var:L> = <var:B> \land <var:H> = <nat:7> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:8> \} \end{eqnarray} Hence , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:L> ; <var:f2> := <var:f1> * <var:L> ; <var:f3> := <var:f2> * <var:L> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:2> ; <var:f2> := <var:f2> * <nat:3> ; <var:f3> := <var:f3> * <nat:7> ; <var:H> := <var:f3> <var:H> := <var:H> + <var:f2> <var:H> := <var:H> + <var:f1> <var:H> := <var:H> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:L> = <var:B> }} <def:poly> {{ <var:H> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <var:B> /\ <var:f2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <var:B> /\ <var:f2> = <var:B> ^ <nat:2> /\ <var:f3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <var:B> /\ <var:f2> = <var:B> ^ <nat:2> /\ <var:f3> = <var:B> ^ <nat:3> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <nat:2> * <var:B> /\ <var:f2> = <var:B> ^ <nat:2> /\ <var:f3> = <var:B> ^ <nat:3> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <nat:2> * <var:B> /\ <var:f2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:f3> = <var:B> ^ <nat:3> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <nat:2> * <var:B> /\ <var:f2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:f3> = <nat:7> * <var:B> ^ <nat:3> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <nat:2> * <var:B> /\ <var:f2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:f0> = <nat:8> /\ <var:H> = <nat:7> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f1> = <nat:2> * <var:B> /\ <var:f0> = <nat:8> /\ <var:H> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:f0> = <nat:8> /\ <var:H> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:H> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 