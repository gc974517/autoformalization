\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as \begin{verbatim} <var:R1> := <var:n> ; <var:R2> := <var:R1> * <var:n> ; <var:R3> := <var:R2> * <var:n> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:9> ; <var:R2> := <var:R2> * <nat:3> ; <var:R3> := <var:R3> * <nat:7> ; <var:k> := <var:R3> <var:k> := <var:k> + <var:R2> <var:k> := <var:k> + <var:R1> <var:k> := <var:k> + <var:R0> \end{verbatim} Assuming that $ <var:n> = <var:L> $ before the evaluation of the list of instructions then we see $ <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:7> $ once code segment has finished . \end{theorem} \begin{proof} Proving correctness for this set of instructions can be shown by Hoare logic . Observing the proceeding statement contained in the program , the binding statement \verb | <var:R1> := <var:n> ; | . This command advances $ \{ <var:n> = <var:L> \} $ into the condition $ \{ <var:n> = <var:L> \land <var:R1> = <var:L> \} $ . This is ensured with the assignment rule of usual Hoare reasoning . Advancing , the variable binding line \verb | <var:R2> := <var:R1> * <var:n> ; | . This command redefines $ \{ <var:n> = <var:L> \land <var:R1> = <var:L> \} $ toward the postcondition $ \{ <var:n> = <var:L> \land <var:R1> = <var:L> \land <var:R2> = <var:L> ^ <nat:2> \} $ . Observing the upcoming line of code seen in the program , the line \verb | <var:R3> := <var:R2> * <var:n> ; | . This forwards the precondition $ \{ <var:n> = <var:L> \land <var:R1> = <var:L> \land <var:R2> = <var:L> ^ <nat:2> \} $ to the postcondition $ \{ <var:n> = <var:L> \land <var:R1> = <var:L> \land <var:R2> = <var:L> ^ <nat:2> \land <var:R3> = <var:L> ^ <nat:3> \} $ . This is sound through the assignment scheme obtained from typical Hoare techniques . Advancing to the next command in our list of commands , we have the code defining $ <nat:7> $ toward $ <var:R0>$ . This code transfers the condition $ \{ <var:n> = <var:L> \land <var:R1> = <var:L> \land <var:R2> = <var:L> ^ <nat:2> \land <var:R3> = <var:L> ^ <nat:3> \} $ toward the postcondition $ \{ <var:n> = <var:L> \land <var:R1> = <var:L> \land <var:R2> = <var:L> ^ <nat:2> \land <var:R3> = <var:L> ^ <nat:3> \land <var:R0> = <nat:7> \} $ . Taking a look at the next line of code in our set of commands , we have the variable update command binding $ <var:R1> * <nat:9> $ toward $ <var:R1>$ . This forwards $ \{ <var:n> = <var:L> \land <var:R1> = <var:L> \land <var:R2> = <var:L> ^ <nat:2> \land <var:R3> = <var:L> ^ <nat:3> \land <var:R0> = <nat:7> \} $ to $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R2> = <var:L> ^ <nat:2> \land <var:R3> = <var:L> ^ <nat:3> \land <var:R0> = <nat:7> \} $ . This is ensured through the assignment rule given by typical Hoare logic . Taking a look at the next line found in the series of commands , we see the variable assignmet line defining $ <var:R2> * <nat:3> $ toward $ <var:R2>$ . This line takes $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R2> = <var:L> ^ <nat:2> \land <var:R3> = <var:L> ^ <nat:3> \land <var:R0> = <nat:7> \} $ as the condition $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R2> = <nat:3> * <var:L> ^ <nat:2> \land <var:R3> = <var:L> ^ <nat:3> \land <var:R0> = <nat:7> \} $ . This is sound by the assignment inference rule given in Hoare techniques . Looking at the following line of code seen in our list of instructions , we have the code \verb | <var:R3> := <var:R3> * <nat:7> ; | . This code forwards the condition $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R2> = <nat:3> * <var:L> ^ <nat:2> \land <var:R3> = <var:L> ^ <nat:3> \land <var:R0> = <nat:7> \} $ toward $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R2> = <nat:3> * <var:L> ^ <nat:2> \land <var:R3> = <nat:7> * <var:L> ^ <nat:3> \land <var:R0> = <nat:7> \} $ . Shifting focus toward the following command found in our set of commands , we have the variable update command letting $ <var:R3$ as $ <var:k>$ . This line redefines $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R2> = <nat:3> * <var:L> ^ <nat:2> \land <var:R3> = <nat:7> * <var:L> ^ <nat:3> \land <var:R0> = <nat:7> \} $ into the postcondition $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R2> = <nat:3> * <var:L> ^ <nat:2> \land <var:R0> = <nat:7> \land <var:k> = <nat:7> * <var:L> ^ <nat:3> \} $ . Following , we see the variable update code yielding $ <var:k> + <var:R2$ to $ <var:k>$ . This command forwards $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R2> = <nat:3> * <var:L> ^ <nat:2> \land <var:R0> = <nat:7> \land <var:k> = <nat:7> * <var:L> ^ <nat:3> \} $ to the postcondition $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R0> = <nat:7> \land <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> \} $ . Moving forward to the next step , we have the variable assignmet line \verb | <var:k> := <var:k> + <var:R1> | . This statement moves $ \{ <var:n> = <var:L> \land <var:R1> = <nat:9> * <var:L> \land <var:R0> = <nat:7> \land <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> \} $ to $ \{ <var:n> = <var:L> \land <var:R0> = <nat:7> \land <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:9> * <var:L> \} $ . This is sound with the assignment law of usual Hoare logic . After , the environment update command yielding $ <var:k> + <var:R0$ into $ <var:k>$ . This redefines the precondition $ \{ <var:n> = <var:L> \land <var:R0> = <nat:7> \land <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:9> * <var:L> \} $ to $ \{ <var:n> = <var:L> \land <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:7> \} $ . This is deduced through the assignment scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:n> = <var:L> }} <var:R1> := <var:n> ; <var:R2> := <var:R1> * <var:n> ; <var:R3> := <var:R2> * <var:n> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:9> ; <var:R2> := <var:R2> * <nat:3> ; <var:R3> := <var:R3> * <nat:7> ; <var:k> := <var:R3> <var:k> := <var:k> + <var:R2> <var:k> := <var:k> + <var:R1> <var:k> := <var:k> + <var:R0> {{ <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <var:L> /\ <var:R2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <var:L> /\ <var:R2> = <var:L> ^ <nat:2> /\ <var:R3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <var:L> /\ <var:R2> = <var:L> ^ <nat:2> /\ <var:R3> = <var:L> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <nat:9> * <var:L> /\ <var:R2> = <var:L> ^ <nat:2> /\ <var:R3> = <var:L> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <nat:9> * <var:L> /\ <var:R2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:R3> = <var:L> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <nat:9> * <var:L> /\ <var:R2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:R3> = <nat:7> * <var:L> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <nat:9> * <var:L> /\ <var:R2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:R0> = <nat:7> /\ <var:k> = <nat:7> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R1> = <nat:9> * <var:L> /\ <var:R0> = <nat:7> /\ <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:R0> = <nat:7> /\ <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k> = <nat:7> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 