\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:J> := <nat:3> ; <var:J> := <nat:4> + <var:J> * <var:Z> ; <var:J> := <nat:2> + <var:J> * <var:Z> ; <var:J> := <nat:2> + <var:J> * <var:Z> ; <var:J> := <nat:2> + <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> ; <var:J> := <nat:2> + <var:J> * <var:Z> ; <var:J> := <nat:4> + <var:J> * <var:Z> ; <var:J> := <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> ; <var:J> := <nat:4> + <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> \end{verbatim} Allow , for all natural numbers $ <var:y> $ , that we have $ <var:Z> = <var:y> $ prior to evaluating this set of instructions , it follows that we have $ <var:J> = <nat:3> * <var:y> ^ <nat:13> + <nat:4> * <var:y> ^ <nat:12> + <nat:2> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> $ when set of commands has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:Z> = <var:y> \} \\ <var:J> := <nat:3> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> \} \\ <var:J> := <nat:4> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> + <nat:4> \} \\ <var:J> := <nat:2> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> \} \\ <var:J> := <nat:2> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> \} \\ <var:J> := <nat:2> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> \} \\ <var:J> := <nat:3> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> \} \\ <var:J> := <nat:3> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> \} \\ <var:J> := <nat:3> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> \} \\ <var:J> := <nat:2> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> \} \\ <var:J> := <nat:4> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:4> \} \\ <var:J> := <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + \} \\ <var:J> := <nat:3> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:11> + <nat:4> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> \} \\ <var:J> := <nat:4> + <var:J> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> + <nat:4> \} \\ <var:J> := <nat:3> + <var:J> * <var:Z> \\ \{ <var:Z> = <var:y> \land <var:J> = <nat:3> * <var:y> ^ <nat:13> + <nat:4> * <var:y> ^ <nat:12> + <nat:2> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> \} \end{eqnarray} Given the above , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:Z> = <var:y> }} <var:J> := <nat:3> ; <var:J> := <nat:4> + <var:J> * <var:Z> ; <var:J> := <nat:2> + <var:J> * <var:Z> ; <var:J> := <nat:2> + <var:J> * <var:Z> ; <var:J> := <nat:2> + <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> ; <var:J> := <nat:2> + <var:J> * <var:Z> ; <var:J> := <nat:4> + <var:J> * <var:Z> ; <var:J> := <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> ; <var:J> := <nat:4> + <var:J> * <var:Z> ; <var:J> := <nat:3> + <var:J> * <var:Z> {{ <var:J> = <nat:3> * <var:y> ^ <nat:13> + <nat:4> * <var:y> ^ <nat:12> + <nat:2> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:11> + <nat:4> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:J> = <nat:3> * <var:y> ^ <nat:13> + <nat:4> * <var:y> ^ <nat:12> + <nat:2> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 