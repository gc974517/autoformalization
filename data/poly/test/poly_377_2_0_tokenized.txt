\begin{document} \begin{theorem} We define a segment of code as \begin{verbatim} <var:Z0> := <nat:4> ; <var:j> := <var:Z0> \end{verbatim} Given given natural coefficients $ <var:B> $ it to hold that $ <var:u> = <var:B> $ ahead of evaluating the code segment then we have $ <var:j> = <nat:4> $ after set of instructions executes . \end{theorem} \begin{proof} Utilizing Hoare logic results in : \begin{eqnarray} \{ <var:u> = <var:B> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:u> = <var:B> \land <var:Z0> = <nat:4> \} \\ <var:j> := <var:Z0> \\ \{ <var:u> = <var:B> \land <var:j> = <nat:4> \} \end{eqnarray} Considering the preceding argument , this series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:u> = <var:B> }} <var:Z0> := <nat:4> ; <var:j> := <var:Z0> {{ <var:j> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:j> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 