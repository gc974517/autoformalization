\begin{document} \begin{theorem} We define the following code segment as \begin{verbatim} <var:t0> := <nat:7> ; <var:M> := <var:t0> \end{verbatim} Given that $ <var:R> = <var:d> $ ahead of executing this program , it holds that we have $ <var:M> = <nat:7> $ once series of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions can be accomplished by standard Hoare techniques . Taking a look at the subsequent command in the code segment , the variable assignmet statement \verb | <var:t0> := <nat:7> ; | . This code advances the condition $ \{ <var:R> = <var:d> \} $ as the postcondition $ \{ <var:R> = <var:d> \land <var:t0> = <nat:7> \} $ . This is deduced using the assignment rule of usual Hoare reasoning . Paying attention to the subsequent step contained in the series of commands , we have the binding line \verb | <var:M> := <var:t0> | . This redefines the condition $ \{ <var:R> = <var:d> \land <var:t0> = <nat:7> \} $ toward the condition $ \{ <var:R> = <var:d> \land <var:M> = <nat:7> \} $ . This is known to be sound using the assignment inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:R> = <var:d> }} <var:t0> := <nat:7> ; <var:M> := <var:t0> {{ <var:M> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:M> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 