\begin{document} \begin{theorem} Take a list of commands as follows \begin{verbatim} <var:j0> := <nat:1> ; <var:j1> := <nat:3> ; <var:j1> := <var:j1> * <var:Q> ; <var:j2> := <nat:7> ; <var:j2> := <var:j2> * <var:Q> ; <var:j2> := <var:j2> * <var:Q> ; <var:j3> := <nat:6> ; <var:j3> := <var:j3> * <var:Q> ; <var:j3> := <var:j3> * <var:Q> ; <var:j3> := <var:j3> * <var:Q> ; <var:Y> := <var:j3> ; <var:Y> := <var:Y> + <var:j2> ; <var:Y> := <var:Y> + <var:j1> ; <var:Y> := <var:Y> + <var:j0> \end{verbatim} Allow , for some positive integer coefficients $ <var:t> $ , that we have $ <var:Q> = <var:t> $ before evaluating the set of commands it follows that we see $ <var:Y> = <nat:6> \cdot <var:t> ^ <nat:3> + <nat:7> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare logic results in : \begin{eqnarray} \{ <var:Q> = <var:t> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \} \\ <var:j1> := <nat:3> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \} \\ <var:j1> := <var:j1> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \} \\ <var:j2> := <nat:7> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:j2> = <nat:7> \} \\ <var:j2> := <var:j2> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:j2> = <nat:7> \cdot <var:t> \} \\ <var:j2> := <var:j2> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:j2> = <nat:7> \cdot <var:t> ^ <nat:2> \} \\ <var:j3> := <nat:6> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:j2> = <nat:7> \cdot <var:t> ^ <nat:2> \land <var:j3> = <nat:6> \} \\ <var:j3> := <var:j3> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:j2> = <nat:7> \cdot <var:t> ^ <nat:2> \land <var:j3> = <nat:6> \cdot <var:t> \} \\ <var:j3> := <var:j3> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:j2> = <nat:7> \cdot <var:t> ^ <nat:2> \land <var:j3> = <nat:6> \cdot <var:t> ^ <nat:2> \} \\ <var:j3> := <var:j3> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:j2> = <nat:7> \cdot <var:t> ^ <nat:2> \land <var:j3> = <nat:6> \cdot <var:t> ^ <nat:3> \} \\ <var:Y> := <var:j3> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:j2> = <nat:7> \cdot <var:t> ^ <nat:2> \land <var:Y> = <nat:6> \cdot <var:t> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:j2> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:3> \cdot <var:t> \land <var:Y> = <nat:6> \cdot <var:t> ^ <nat:3> + <nat:7> \cdot <var:t> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:j1> ; \\ \{ <var:Q> = <var:t> \land <var:j0> = <nat:1> \land <var:Y> = <nat:6> \cdot <var:t> ^ <nat:3> + <nat:7> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> \} \\ <var:Y> := <var:Y> + <var:j0> \\ \{ <var:Q> = <var:t> \land <var:Y> = <nat:6> \cdot <var:t> ^ <nat:3> + <nat:7> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> \} \end{eqnarray} Thus , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Q> = <var:t> }} <var:j0> := <nat:1> ; <var:j1> := <nat:3> ; <var:j1> := <var:j1> * <var:Q> ; <var:j2> := <nat:7> ; <var:j2> := <var:j2> * <var:Q> ; <var:j2> := <var:j2> * <var:Q> ; <var:j3> := <nat:6> ; <var:j3> := <var:j3> * <var:Q> ; <var:j3> := <var:j3> * <var:Q> ; <var:j3> := <var:j3> * <var:Q> ; <var:Y> := <var:j3> ; <var:Y> := <var:Y> + <var:j2> ; <var:Y> := <var:Y> + <var:j1> ; <var:Y> := <var:Y> + <var:j0> {{ <var:Y> = <nat:6> * <var:t> ^ <nat:3> + <nat:7> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:j2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:j2> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:j2> = <nat:7> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:j2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:j3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:j2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:j2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:j2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:j2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:Y> = <nat:6> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:3> * <var:t> /\ <var:Y> = <nat:6> * <var:t> ^ <nat:3> + <nat:7> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:j0> = <nat:1> /\ <var:Y> = <nat:6> * <var:t> ^ <nat:3> + <nat:7> * <var:t> ^ <nat:2> + <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:Y> = <nat:6> * <var:t> ^ <nat:3> + <nat:7> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 