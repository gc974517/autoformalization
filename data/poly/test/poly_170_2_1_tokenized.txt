\begin{document} \begin{theorem} Consider the following program such that \begin{verbatim} <var:P0> := <nat:4> ; <var:S> := <var:P0> \end{verbatim} Allow that $ <var:f> = <var:T> $ prior to evaluating the program , then $ <var:S> = <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques results in : \begin{eqnarray} \{ <var:f> = <var:T> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:f> = <var:T> \land <var:P0> = <nat:4> \} \\ <var:S> := <var:P0> \\ \{ <var:f> = <var:T> \land <var:S> = <nat:4> \} \end{eqnarray} Therefore , this series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:f> = <var:T> }} <var:P0> := <nat:4> ; <var:S> := <var:P0> {{ <var:S> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:S> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 