\begin{document} \begin{theorem} Consider the following list of instructions : \begin{verbatim} <var:e0> := <nat:9> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:Q> ; <var:e2> := <var:e2> * <var:Q> ; <var:I> := <var:e2> ; <var:I> := <var:I> + <var:e0> \end{verbatim} Given it to hold that $ <var:Q> = <var:l> $ ahead of the execution of this set of commands , it follows that we have $ <var:I> = <nat:3> * <var:l> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Using standard Hoare techniques results in : \begin{eqnarray} \{ <var:Q> = <var:l> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:Q> = <var:l> \land <var:e0> = <nat:9> \} \\ <var:e2> := <nat:3> ; \\ \{ <var:Q> = <var:l> \land <var:e0> = <nat:9> \land <var:e2> = <nat:3> \} \\ <var:e2> := <var:e2> * <var:Q> ; \\ \{ <var:Q> = <var:l> \land <var:e0> = <nat:9> \land <var:e2> = <nat:3> * <var:l> \} \\ <var:e2> := <var:e2> * <var:Q> ; \\ \{ <var:Q> = <var:l> \land <var:e0> = <nat:9> \land <var:e2> = <nat:3> * <var:l> ^ <nat:2> \} \\ <var:I> := <var:e2> ; \\ \{ <var:Q> = <var:l> \land <var:e0> = <nat:9> \land <var:I> = <nat:3> * <var:l> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:e0> \\ \{ <var:Q> = <var:l> \land <var:I> = <nat:3> * <var:l> ^ <nat:2> + <nat:9> \} \end{eqnarray} Therefore , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Q> = <var:l> }} <var:e0> := <nat:9> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:Q> ; <var:e2> := <var:e2> * <var:Q> ; <var:I> := <var:e2> ; <var:I> := <var:I> + <var:e0> {{ <var:I> = <nat:3> * <var:l> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:e0> = <nat:9> /\ <var:e2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:e0> = <nat:9> /\ <var:e2> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:e0> = <nat:9> /\ <var:e2> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:e0> = <nat:9> /\ <var:I> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:I> = <nat:3> * <var:l> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 