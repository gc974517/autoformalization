\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:8> ; <var:g> := <var:U0> \end{verbatim} Allowing ( given some whole numbers $ <var:p> $ ) it to hold that $ <var:P> = <var:p> $ prior to interpreting the list of instructions it follows that $ <var:g> = <nat:8> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:P> = <var:p> \} \\ <var:U0> := <nat:8> ; \\ \{ <var:P> = <var:p> \land <var:U0> = <nat:8> \} \\ <var:g> := <var:U0> \\ \{ <var:P> = <var:p> \land <var:g> = <nat:8> \} \end{eqnarray} As a result , this series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:P> = <var:p> }} <var:U0> := <nat:8> ; <var:g> := <var:U0> {{ <var:g> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:p> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:p> /\ <var:g> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 