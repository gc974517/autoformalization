\begin{document} \begin{theorem} Define a code such that \begin{verbatim} <var:p1> := <var:b> ; <var:p2> := <var:p1> * <var:b> ; <var:p3> := <var:p2> * <var:b> ; <var:p4> := <var:p3> * <var:b> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:4> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:3> ; <var:p4> := <var:p4> * <nat:4> ; <var:x> := <var:p4> <var:x> := <var:x> + <var:p3> <var:x> := <var:x> + <var:p2> <var:x> := <var:x> + <var:p1> <var:x> := <var:x> + <var:p0> \end{verbatim} Given letting positive integer coefficients $ <var:O> $ it to be that $ <var:b> = <var:O> $ ahead of running this segment of code , then $ <var:x> = <nat:4> \times <var:O> ^ <nat:4> + <nat:3> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions can be accomplished using Hoare techniques . Focusing on the upcoming command seen in the program , we have the variable assignmet code defining $ <var:b> $ into $ <var:p1>$ . This statement transfers the condition $ \{ <var:b> = <var:O> \} $ into $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \} $ . This is given using the assignment rule from typical Hoare reasoning . Stepping forward , we have the variable update command \verb | <var:p2> := <var:p1> * <var:b> ; | . This forwards the condition $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \} $ to $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \} $ . Now , we have the command \verb | <var:p3> := <var:p2> * <var:b> ; | . This line forwards the condition $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \} $ to $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \} $ . Focusing on the upcoming piece of code contained in our code , we see the line \verb | <var:p4> := <var:p3> * <var:b> ; | . This command redefines the precondition $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \} $ as the postcondition $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \} $ . This is sound with the assignment rule in usual Hoare reasoning . Going forward , the binding command giving $ <nat:2> $ into $ <var:p0>$ . This line takes the precondition $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \} $ as the condition $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . This is known to be sound using the assignment rule in typical Hoare techniques . Taking a look at the following statement in the series of instructions , the assignment line \verb | <var:p1> := <var:p1> * <nat:4> ; | . This takes the precondition $ \{ <var:b> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ toward the condition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . Moving onward , we have the variable binding statement \verb | <var:p2> := <var:p2> * <nat:4> ; | . This redefines the condition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ to $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . Advancing , we see the assignment code defining $ <var:p3> * <nat:3> $ toward $ <var:p3>$ . This line advances the precondition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ into the postcondition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . This is ensured by the assignment scheme given in standard Hoare logic . Shifting focus toward the next step contained in our series of instructions , we have the assignment statement \verb | <var:p4> := <var:p4> * <nat:4> ; | . This advances $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:O> ^ <nat:3> \land <var:p4> = <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ as the postcondition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:O> ^ <nat:3> \land <var:p4> = <nat:4> \cdot <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . This is ensured by the assignment rule from Hoare techniques . After , we have the environment update statement giving $ <var:p4$ as $ <var:x>$ . This takes $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:O> ^ <nat:3> \land <var:p4> = <nat:4> \cdot <var:O> ^ <nat:4> \land <var:p0> = <nat:2> \} $ toward the postcondition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:O> ^ <nat:3> \land <var:p0> = <nat:2> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> \} $ . This is known to be sound with the assignment scheme defined by typical Hoare reasoning . Moving onward , we have the assignment command \verb | <var:x> := <var:x> + <var:p3> | . This transfers $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:O> ^ <nat:3> \land <var:p0> = <nat:2> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> \} $ as the condition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p0> = <nat:2> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> \} $ . This is known to be sound through the assignment scheme obtained from usual Hoare logic . Shifting focus toward the upcoming piece of code contained in the series of instructions , we see the environment update line \verb | <var:x> := <var:x> + <var:p2> | . This advances the condition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:p0> = <nat:2> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> \} $ into the postcondition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p0> = <nat:2> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> \} $ . Moving forward to the next step seen in our list of commands , we see the assignment command \verb | <var:x> := <var:x> + <var:p1> | . This line takes the precondition $ \{ <var:b> = <var:O> \land <var:p1> = <nat:4> \cdot <var:O> \land <var:p0> = <nat:2> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> \} $ into $ \{ <var:b> = <var:O> \land <var:p0> = <nat:2> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> \} $ . This is deduced using the assignment inference rule obtained from Hoare techniques . Advancing on , the variable binding command letting $ <var:x> + <var:p0$ toward $ <var:x>$ . This statement redefines the condition $ \{ <var:b> = <var:O> \land <var:p0> = <nat:2> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> \} $ as the postcondition $ \{ <var:b> = <var:O> \land <var:x> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:b> = <var:O> }} <var:p1> := <var:b> ; <var:p2> := <var:p1> * <var:b> ; <var:p3> := <var:p2> * <var:b> ; <var:p4> := <var:p3> * <var:b> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:4> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:3> ; <var:p4> := <var:p4> * <nat:4> ; <var:x> := <var:p4> <var:x> := <var:x> + <var:p3> <var:x> := <var:x> + <var:p2> <var:x> := <var:x> + <var:p1> <var:x> := <var:x> + <var:p0> {{ <var:x> = <nat:4> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <var:O> /\ <var:p2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <var:O> /\ <var:p2> = <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <var:O> /\ <var:p2> = <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> /\ <var:p4> = <var:O> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <var:O> /\ <var:p2> = <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> /\ <var:p4> = <var:O> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <nat:4> * <var:O> /\ <var:p2> = <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> /\ <var:p4> = <var:O> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <nat:4> * <var:O> /\ <var:p2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> /\ <var:p4> = <var:O> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <nat:4> * <var:O> /\ <var:p2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:O> ^ <nat:3> /\ <var:p4> = <var:O> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <nat:4> * <var:O> /\ <var:p2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:O> ^ <nat:3> /\ <var:p4> = <nat:4> * <var:O> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <nat:4> * <var:O> /\ <var:p2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:O> ^ <nat:3> /\ <var:p0> = <nat:2> /\ <var:x> = <nat:4> * <var:O> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <nat:4> * <var:O> /\ <var:p2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:p0> = <nat:2> /\ <var:x> = <nat:4> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p1> = <nat:4> * <var:O> /\ <var:p0> = <nat:2> /\ <var:x> = <nat:4> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:p0> = <nat:2> /\ <var:x> = <nat:4> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:x> = <nat:4> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 