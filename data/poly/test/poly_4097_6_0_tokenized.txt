\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y2> := <nat:7> ; <var:Y2> := <var:Y2> * <var:V> ; <var:Y2> := <var:Y2> * <var:V> ; <var:j> := <var:Y2> ; <var:j> := <var:j> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume for every $ <var:n> $ $ <var:V> = <var:n> $ prior to executing the series of instructions , then $ <var:j> = <nat:7> * <var:n> ^ <nat:2> + <nat:2> $ after code terminates . \end{theorem} \begin{proof} Demonstrating correctness of our code segment is done through Hoare logic . Advancing on , we see \begin{eqnarray} \{ <var:V> = <var:n> \} \, <var:Y0> := <nat:2> \, \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \} \\ \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \} \, <var:Y2> := <nat:7> \, \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \land <var:Y2> = <nat:7> \} \end{eqnarray} This is known to be sound through the inference rule found in standard Hoare techniques . Jumping to the proceeding commands contained in the series of instructions , we have \begin{eqnarray} \{ <var:V> = <var:n> \} \, <var:Y0> := <nat:2> \, \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \} \\ \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \} \, <var:Y2> := <nat:7> \, \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \land <var:Y2> = <nat:7> \} \\ \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \land <var:Y2> = <nat:7> \} \, <var:Y2> := <var:Y2> * <var:V> \, \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \land <var:Y2> = <nat:7> \cdot <var:n> \} \end{eqnarray} Advancing to the next line of code contained in the program , \begin{eqnarray} \{ <var:V> = <var:n> \} \, <var:Y0> := <nat:2> \, \{ <var:V> = <var:n> \land <var:Y0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:Y2> := <nat:7> ; <var:Y2> := <var:Y2> * <var:V> ; <var:Y2> := <var:Y2> * <var:V> ; <var:j> := <var:Y2> ; <var:j> := <var:j> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:V> = <var:n> }} <def:poly> {{ <var:j> = <nat:7> * <var:n> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:Y0> = <nat:2> /\ <var:Y2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:Y0> = <nat:2> /\ <var:Y2> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:Y0> = <nat:2> /\ <var:Y2> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:Y0> = <nat:2> /\ <var:j> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:j> = <nat:7> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 