\begin{document} \begin{theorem} Define a program as \begin{verbatim} <var:T1> := <var:d> ; <var:T2> := <var:T1> * <var:d> ; <var:T3> := <var:T2> * <var:d> ; <var:T4> := <var:T3> * <var:d> ; <var:T5> := <var:T4> * <var:d> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:1> ; <var:T3> := <var:T3> * <nat:4> ; <var:T5> := <var:T5> * <nat:2> ; <var:A> := <var:T5> <var:A> := <var:A> + <var:T3> <var:A> := <var:A> + <var:T1> <var:A> := <var:A> + <var:T0> \end{verbatim} Given , for every positive coefficients $ <var:n> $ , that $ <var:d> = <var:n> $ prior to running the list of instructions , it follows that $ <var:A> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> + <nat:4> $ when code terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:n> \} \\ <var:T1> := <var:d> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <var:n> \} \\ <var:T2> := <var:T1> * <var:d> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \} \end{eqnarray} Furthering evaluating this series of commands produces : \begin{eqnarray} <var:T3> := <var:T2> * <var:d> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \} \\ <var:T4> := <var:T3> * <var:d> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \land <var:T4> = <var:n> ^ <nat:4> \} \\ <var:T5> := <var:T4> * <var:d> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \land <var:T4> = <var:n> ^ <nat:4> \land <var:T5> = <var:n> ^ <nat:5> \} \\ <var:T0> := <nat:4> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \land <var:T4> = <var:n> ^ <nat:4> \land <var:T5> = <var:n> ^ <nat:5> \land <var:T0> = <nat:4> \} \\ <var:T1> := <var:T1> * <nat:1> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <nat:1> \cdot <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \land <var:T4> = <var:n> ^ <nat:4> \land <var:T5> = <var:n> ^ <nat:5> \land <var:T0> = <nat:4> \} \\ <var:T3> := <var:T3> * <nat:4> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <nat:1> \cdot <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <nat:4> \cdot <var:n> ^ <nat:3> \land <var:T4> = <var:n> ^ <nat:4> \land <var:T5> = <var:n> ^ <nat:5> \land <var:T0> = <nat:4> \} \\ <var:T5> := <var:T5> * <nat:2> ; \\ \{ <var:d> = <var:n> \land <var:T1> = <nat:1> \cdot <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <nat:4> \cdot <var:n> ^ <nat:3> \land <var:T4> = <var:n> ^ <nat:4> \land <var:T5> = <nat:2> \cdot <var:n> ^ <nat:5> \land <var:T0> = <nat:4> \} \\ <var:A> := <var:T5> \\ \{ <var:d> = <var:n> \land <var:T1> = <nat:1> \cdot <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <nat:4> \cdot <var:n> ^ <nat:3> \land <var:T4> = <var:n> ^ <nat:4> \land <var:T0> = <nat:4> \land <var:A> = <nat:2> \cdot <var:n> ^ <nat:5> \} \\ <var:A> := <var:A> + <var:T3> \\ \{ <var:d> = <var:n> \land <var:T1> = <nat:1> \cdot <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T0> = <nat:4> \land <var:A> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:T1> \\ \{ <var:d> = <var:n> \land <var:T0> = <nat:4> \land <var:A> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> \} \\ <var:A> := <var:A> + <var:T0> \\ \{ <var:d> = <var:n> \land <var:A> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> + <nat:4> \} \end{eqnarray} Using standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <var:T4> : string := " <var:T4> " . Definition <var:T5> : string := " <var:T5> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:d> = <var:n> }} <var:T1> := <var:d> ; <var:T2> := <var:T1> * <var:d> ; <var:T3> := <var:T2> * <var:d> ; <var:T4> := <var:T3> * <var:d> ; <var:T5> := <var:T4> * <var:d> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:1> ; <var:T3> := <var:T3> * <nat:4> ; <var:T5> := <var:T5> * <nat:2> ; <var:A> := <var:T5> <var:A> := <var:A> + <var:T3> <var:A> := <var:A> + <var:T1> <var:A> := <var:A> + <var:T0> {{ <var:A> = <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> /\ <var:T4> = <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> /\ <var:T4> = <var:n> ^ <nat:4> /\ <var:T5> = <var:n> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> /\ <var:T4> = <var:n> ^ <nat:4> /\ <var:T5> = <var:n> ^ <nat:5> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <nat:1> * <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> /\ <var:T4> = <var:n> ^ <nat:4> /\ <var:T5> = <var:n> ^ <nat:5> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <nat:1> * <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:T4> = <var:n> ^ <nat:4> /\ <var:T5> = <var:n> ^ <nat:5> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <nat:1> * <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:T4> = <var:n> ^ <nat:4> /\ <var:T5> = <nat:2> * <var:n> ^ <nat:5> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <nat:1> * <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:T4> = <var:n> ^ <nat:4> /\ <var:T0> = <nat:4> /\ <var:A> = <nat:2> * <var:n> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T1> = <nat:1> * <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T0> = <nat:4> /\ <var:A> = <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:T0> = <nat:4> /\ <var:A> = <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:A> = <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 