\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t1> := <var:v> ; <var:t2> := <var:t1> * <var:v> ; <var:t3> := <var:t2> * <var:v> ; <var:t4> := <var:t3> * <var:v> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:1> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:4> ; <var:t4> := <var:t4> * <nat:3> ; <var:z> := <var:t4> <var:z> := <var:z> + <var:t3> <var:z> := <var:z> + <var:t2> <var:z> := <var:z> + <var:t1> <var:z> := <var:z> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given any positive coefficients $ <var:x> $ , that $ <var:v> = <var:x> $ before evaluating the code segment , it follows that $ <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:9> $ after code has finished executing . \end{theorem} \begin{proof} The course of logic for our series of instructions is evident with typical Hoare reasoning . Taking a look at the proceeding line of code seen in the set of commands , we see the variable update command \verb | <var:t1> := <var:v> ; | . This statement redefines the precondition $ \{ <var:v> = <var:x> \} $ to $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \} $ . This is shown to be logically sound by the assignment scheme obtained from Hoare reasoning . Going to the next step , we see the variable update statement defining $ <var:t1> * <var:v> $ to $ <var:t2>$ . This code redefines the precondition $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \} $ toward $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \} $ . Paying attention to the proceeding step found in the code segment , we have the command \verb | <var:t3> := <var:t2> * <var:v> ; | . This command transfers $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \} $ toward the condition $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \} $ . This is known to be sound with the assignment rule given by usual Hoare logic . Immediately after , we have the variable update code yielding $ <var:t3> * <var:v> $ into $ <var:t4>$ . This forwards $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \} $ as the condition $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \} $ . This is guaranteed by the assignment scheme given by standard Hoare reasoning . Moving onward , we see the variable binding line yielding $ <nat:9> $ to $ <var:t0>$ . This command moves $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \} $ as the condition $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ . This is shown with the assignment law found in standard Hoare techniques . Keeping momentum , the variable assignmet line \verb | <var:t1> := <var:t1> * <nat:1> ; | . This code moves $ \{ <var:v> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ into $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ . This is given through the assignment rule given by usual Hoare reasoning . Moving forward to the following bit of code seen in our code segment , the binding command letting $ <var:t2> * <nat:2> $ as $ <var:t2>$ . This code forwards the condition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ as the postcondition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ . Moving on to the next step , we see the binding statement \verb | <var:t3> := <var:t3> * <nat:4> ; | . This command advances the condition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ as $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t3> = <nat:4> * <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ . This is known to be sound by the assignment rule of usual Hoare logic . Moving forward , we see the environment update code \verb | <var:t4> := <var:t4> * <nat:3> ; | . This code forwards the condition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t3> = <nat:4> * <var:x> ^ <nat:3> \land <var:t4> = <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ to the postcondition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t3> = <nat:4> * <var:x> ^ <nat:3> \land <var:t4> = <nat:3> * <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ . Going to the next step , we have the environment update code letting $ <var:t4$ into $ <var:z>$ . This command redefines the condition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t3> = <nat:4> * <var:x> ^ <nat:3> \land <var:t4> = <nat:3> * <var:x> ^ <nat:4> \land <var:t0> = <nat:9> \} $ as the condition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t3> = <nat:4> * <var:x> ^ <nat:3> \land <var:t0> = <nat:9> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> \} $ . This is known to be sound by the assignment scheme found in standard Hoare reasoning . Observing the proceeding step contained in the set of commands , we have the variable binding line \verb | <var:z> := <var:z> + <var:t3> | . This transfers the condition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t3> = <nat:4> * <var:x> ^ <nat:3> \land <var:t0> = <nat:9> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> \} $ to the postcondition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t0> = <nat:9> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> \} $ . Further , the variable update command binding $ <var:z> + <var:t2$ toward $ <var:z>$ . This advances the precondition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t2> = <nat:2> * <var:x> ^ <nat:2> \land <var:t0> = <nat:9> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> \} $ toward $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t0> = <nat:9> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> \} $ . This is shown through the assignment law in standard Hoare techniques . Moving on to the subsequent piece of code seen in our set of instructions , we see the variable update command letting $ <var:z> + <var:t1$ as $ <var:z>$ . This advances the precondition $ \{ <var:v> = <var:x> \land <var:t1> = <nat:1> * <var:x> \land <var:t0> = <nat:9> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> \} $ to the postcondition $ \{ <var:v> = <var:x> \land <var:t0> = <nat:9> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> \} $ . Stepping forward , we have the statement \verb | <var:z> := <var:z> + <var:t0> | . This command redefines the precondition $ \{ <var:v> = <var:x> \land <var:t0> = <nat:9> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> \} $ to $ \{ <var:v> = <var:x> \land <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:9> \} $ . This is ensured by the assignment law given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <var:t4> : string := " <var:t4> " . Definition <def:poly> := <var:t1> := <var:v> ; <var:t2> := <var:t1> * <var:v> ; <var:t3> := <var:t2> * <var:v> ; <var:t4> := <var:t3> * <var:v> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:1> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:4> ; <var:t4> := <var:t4> * <nat:3> ; <var:z> := <var:t4> <var:z> := <var:z> + <var:t3> <var:z> := <var:z> + <var:t2> <var:z> := <var:z> + <var:t1> <var:z> := <var:z> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:v> = <var:x> }} <def:poly> {{ <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> /\ <var:t4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> /\ <var:t4> = <var:x> ^ <nat:4> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <nat:1> * <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> /\ <var:t4> = <var:x> ^ <nat:4> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <nat:1> * <var:x> /\ <var:t2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> /\ <var:t4> = <var:x> ^ <nat:4> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <nat:1> * <var:x> /\ <var:t2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:t3> = <nat:4> * <var:x> ^ <nat:3> /\ <var:t4> = <var:x> ^ <nat:4> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <nat:1> * <var:x> /\ <var:t2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:t3> = <nat:4> * <var:x> ^ <nat:3> /\ <var:t4> = <nat:3> * <var:x> ^ <nat:4> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <nat:1> * <var:x> /\ <var:t2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:t3> = <nat:4> * <var:x> ^ <nat:3> /\ <var:t0> = <nat:9> /\ <var:z> = <nat:3> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <nat:1> * <var:x> /\ <var:t2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:t0> = <nat:9> /\ <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t1> = <nat:1> * <var:x> /\ <var:t0> = <nat:9> /\ <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:t0> = <nat:9> /\ <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:z> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 