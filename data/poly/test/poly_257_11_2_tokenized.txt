\begin{document} \begin{theorem} Consider a set of commands : \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <var:h> * <var:a> ; <var:h> := <nat:2> + <var:h> * <var:a> ; <var:h> := <nat:4> + <var:h> * <var:a> ; <var:h> := <nat:2> + <var:h> * <var:a> ; <var:h> := <nat:2> + <var:h> * <var:a> ; <var:h> := <nat:4> + <var:h> * <var:a> ; <var:h> := <var:h> * <var:a> ; <var:h> := <var:h> * <var:a> ; <var:h> := <nat:4> + <var:h> * <var:a> ; <var:h> := <nat:2> + <var:h> * <var:a> \end{verbatim} Given ( for every positive integer coefficients $ <var:d> $ ) that we have $ <var:a> = <var:d> $ prior to running this series of commands it follows that we have $ <var:h> = <nat:3> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:4> * <var:d> + <nat:2> $ after code segment has finished executing . \end{theorem} \begin{proof} The method of proof for our set of instructions is given using standard Hoare techniques . Focusing on the next statements in the list of commands , we have \begin{verbatim} { <var:a> = <var:d> } <var:h> := <nat:3> { <var:a> = <var:d> \land <var:h> = <nat:3> } { <var:a> = <var:d> \land <var:h> = <nat:3> } <var:h> := <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> + } { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> + } <var:h> := <nat:2> + <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:2> + <nat:2> } { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:2> + <nat:2> } <var:h> := <nat:4> + <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> + <nat:4> } { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> + <nat:4> } <var:h> := <nat:2> + <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:2> } { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:2> } <var:h> := <nat:2> + <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:2> } { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:2> } <var:h> := <nat:4> + <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> } { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> } <var:h> := <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:7> + <nat:2> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + } { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:7> + <nat:2> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + } <var:h> := <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> ^ <nat:8> + <nat:2> \times <var:d> ^ <nat:6> + <nat:4> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + } \end{verbatim} This is ensured through the variable binding scheme in typical Hoare logic . Considering the subsequent bits of codecontained in the series of commands , \begin{verbatim} { <var:a> = <var:d> } <var:h> := <nat:3> { <var:a> = <var:d> \land <var:h> = <nat:3> } { <var:a> = <var:d> \land <var:h> = <nat:3> } <var:h> := <var:h> * <var:a> { <var:a> = <var:d> \land <var:h> = <nat:3> \times <var:d> + } \end{verbatim} This is known to be sound with the binding rule found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:a> = <var:d> }} <var:h> := <nat:3> ; <var:h> := <var:h> * <var:a> ; <var:h> := <nat:2> + <var:h> * <var:a> ; <var:h> := <nat:4> + <var:h> * <var:a> ; <var:h> := <nat:2> + <var:h> * <var:a> ; <var:h> := <nat:2> + <var:h> * <var:a> ; <var:h> := <nat:4> + <var:h> * <var:a> ; <var:h> := <var:h> * <var:a> ; <var:h> := <var:h> * <var:a> ; <var:h> := <nat:4> + <var:h> * <var:a> ; <var:h> := <nat:2> + <var:h> * <var:a> {{ <var:h> = <nat:3> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:4> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:h> = <nat:3> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:4> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 