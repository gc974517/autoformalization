\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:F1> := <var:B> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:5> ; <var:Z> := <var:F1> <var:Z> := <var:Z> + <var:F0> \end{verbatim} Allowing that $ <var:B> = <var:A> $ before interpreting this series of instructions , it follows that we see $ <var:Z> = <nat:5> \times <var:A> + <nat:1> $ once code has finished . \end{theorem} \begin{proof} The argument for our series of instructions is done using usual Hoare techniques . Next , we see the binding command defining $ <var:B> $ into $ <var:F1>$ . This forwards the condition $ \{ <var:B> = <var:A> \} $ to the postcondition $ \{ <var:B> = <var:A> \land <var:F1> = <var:A> \} $ . Immediately following , we see the binding statement yielding $ <nat:1> $ toward $ <var:F0>$ . This takes $ \{ <var:B> = <var:A> \land <var:F1> = <var:A> \} $ as the condition $ \{ <var:B> = <var:A> \land <var:F1> = <var:A> \land <var:F0> = <nat:1> \} $ . Shifting focus toward the subsequent piece of code contained in our code , we have the variable assignmet statement defining $ <var:F1> * <nat:5> $ to $ <var:F1>$ . This line redefines $ \{ <var:B> = <var:A> \land <var:F1> = <var:A> \land <var:F0> = <nat:1> \} $ toward $ \{ <var:B> = <var:A> \land <var:F1> = <nat:5> * <var:A> \land <var:F0> = <nat:1> \} $ . This is guaranteed with the assignment scheme of Hoare techniques . Keeping momentum , the environment update code yielding $ <var:F1$ as $ <var:Z>$ . This transfers $ \{ <var:B> = <var:A> \land <var:F1> = <nat:5> * <var:A> \land <var:F0> = <nat:1> \} $ as $ \{ <var:B> = <var:A> \land <var:F0> = <nat:1> \land <var:Z> = <nat:5> * <var:A> \} $ . Stepping through , the variable update statement \verb | <var:Z> := <var:Z> + <var:F0> | . This code redefines the precondition $ \{ <var:B> = <var:A> \land <var:F0> = <nat:1> \land <var:Z> = <nat:5> * <var:A> \} $ as $ \{ <var:B> = <var:A> \land <var:Z> = <nat:5> * <var:A> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:B> = <var:A> }} <var:F1> := <var:B> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:5> ; <var:Z> := <var:F1> <var:Z> := <var:Z> + <var:F0> {{ <var:Z> = <nat:5> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:F1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:F1> = <var:A> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:F1> = <nat:5> * <var:A> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:F0> = <nat:1> /\ <var:Z> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:Z> = <nat:5> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 