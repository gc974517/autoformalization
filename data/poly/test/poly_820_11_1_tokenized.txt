\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:N> ; <var:a2> := <var:a1> * <var:N> ; <var:a3> := <var:a2> * <var:N> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:1> ; <var:a2> := <var:a2> * <nat:5> ; <var:a3> := <var:a3> * <nat:2> ; <var:Q> := <var:a3> <var:Q> := <var:Q> + <var:a2> <var:Q> := <var:Q> + <var:a1> <var:Q> := <var:Q> + <var:a0> \end{verbatim} Allow it to hold that $ <var:N> = <var:k> $ before the evaluation of the code segment it must be that we have $ <var:Q> = <nat:2> \cdot <var:k> ^ <nat:3> + <nat:5> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + <nat:4> $ when series of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is shown with usual Hoare techniques . Jumping to the proceeding steps in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:a1> := <var:N> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <var:k> \} & <var:a2> := <var:a1> * <var:N> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \} & <var:a3> := <var:a2> * <var:N> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \} & <var:a0> := <nat:4> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \land <var:a0> = <nat:4> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \land <var:a0> = <nat:4> \} & <var:a1> := <var:a1> * <nat:1> & \{ <var:N> = <var:k> \land <var:a1> = <nat:1> * <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \land <var:a0> = <nat:4> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <nat:1> * <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \land <var:a0> = <nat:4> \} & <var:a2> := <var:a2> * <nat:5> & \{ <var:N> = <var:k> \land <var:a1> = <nat:1> * <var:k> \land <var:a2> = <nat:5> * <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \land <var:a0> = <nat:4> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <nat:1> * <var:k> \land <var:a2> = <nat:5> * <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \land <var:a0> = <nat:4> \} & <var:a3> := <var:a3> * <nat:2> & \{ <var:N> = <var:k> \land <var:a1> = <nat:1> * <var:k> \land <var:a2> = <nat:5> * <var:k> ^ <nat:2> \land <var:a3> = <nat:2> * <var:k> ^ <nat:3> \land <var:a0> = <nat:4> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <nat:1> * <var:k> \land <var:a2> = <nat:5> * <var:k> ^ <nat:2> \land <var:a3> = <nat:2> * <var:k> ^ <nat:3> \land <var:a0> = <nat:4> \} & <var:Q> := <var:a3& \{ <var:N> = <var:k> \land <var:a1> = <nat:1> * <var:k> \land <var:a2> = <nat:5> * <var:k> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:Q> = <nat:2> * <var:k> ^ <nat:3> \} \end{tabular} Advancing , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:a1> := <var:N> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \} \end{tabular} Focusing on the upcoming statements in our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:a1> := <var:N> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \} \\ \{ <var:N> = <var:k> \land <var:a1> = <var:k> \} & <var:a2> := <var:a1> * <var:N> & \{ <var:N> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:N> = <var:k> }} <var:a1> := <var:N> ; <var:a2> := <var:a1> * <var:N> ; <var:a3> := <var:a2> * <var:N> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:1> ; <var:a2> := <var:a2> * <nat:5> ; <var:a3> := <var:a3> * <nat:2> ; <var:Q> := <var:a3> <var:Q> := <var:Q> + <var:a2> <var:Q> := <var:Q> + <var:a1> <var:Q> := <var:Q> + <var:a0> {{ <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <var:k> /\ <var:a2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <var:k> /\ <var:a2> = <var:k> ^ <nat:2> /\ <var:a3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <var:k> /\ <var:a2> = <var:k> ^ <nat:2> /\ <var:a3> = <var:k> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <nat:1> * <var:k> /\ <var:a2> = <var:k> ^ <nat:2> /\ <var:a3> = <var:k> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <nat:1> * <var:k> /\ <var:a2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:a3> = <var:k> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <nat:1> * <var:k> /\ <var:a2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:k> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <nat:1> * <var:k> /\ <var:a2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:a0> = <nat:4> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a1> = <nat:1> * <var:k> /\ <var:a0> = <nat:4> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:a0> = <nat:4> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 