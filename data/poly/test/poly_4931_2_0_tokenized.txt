\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:6> ; <var:T> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Assume it to be that $ <var:e> = <var:W> $ prior to the evaluation of this series of commands it holds that we have $ <var:T> = <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is shown by Hoare reasoning . Further , we have \verb | { <var:e> = <var:W> } <var:J0> := <nat:6> { <var:e> = <var:W> \land <var:J0> = <nat:6> } | and \verb | { <var:e> = <var:W> \land <var:J0> = <nat:6> } <var:T> := <var:J0{ <var:e> = <var:W> \land <var:T> = <nat:6> } | . This is sound with the assignment inference rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:T> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:e> = <var:W> }} <def:poly> {{ <var:T> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:T> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 