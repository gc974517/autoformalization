\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:k> := <nat:1> ; <var:k> := <nat:1> + <var:k> * <var:V> ; <var:k> := <var:k> * <var:V> ; <var:k> := <nat:2> + <var:k> * <var:V> ; <var:k> := <nat:2> + <var:k> * <var:V> ; <var:k> := <var:k> * <var:V> ; <var:k> := <nat:2> + <var:k> * <var:V> ; <var:k> := <nat:3> + <var:k> * <var:V> ; <var:k> := <nat:3> + <var:k> * <var:V> \end{verbatim} Assume $ <var:V> = <var:O> $ ( for any positive integers $ <var:O> $ ) ahead of executing our set of commands it follows that we see $ <var:k> = <nat:1> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:2> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be shown using standard Hoare logic . Immediately following , \[ \begin{tabular} {rcl} \{ <var:V> = <var:O> \} & <var:k> := <nat:1> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> \} \\ \{ <var:V> = <var:O> \land <var:k> = <nat:1> \} & <var:k> := <nat:1> + <var:k> * <var:V> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> + <nat:1> \} \\ \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> + <nat:1> \} & <var:k> := <var:k> * <var:V> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + \} \\ \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + \} & <var:k> := <nat:2> + <var:k> * <var:V> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> \} \\ \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> \} & <var:k> := <nat:2> + <var:k> * <var:V> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> + <nat:2> \} \\ \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> + <nat:2> \} & <var:k> := <var:k> * <var:V> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + \} \\ \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + \} & <var:k> := <nat:2> + <var:k> * <var:V> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:2> \} \end{tabular} Observing the following bits of codefound in our series of commands , \[ \begin{tabular} {rcl} \{ <var:V> = <var:O> \} & <var:k> := <nat:1> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> \} \\ \{ <var:V> = <var:O> \land <var:k> = <nat:1> \} & <var:k> := <nat:1> + <var:k> * <var:V> & \{ <var:V> = <var:O> \land <var:k> = <nat:1> * <var:O> + <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:V> = <var:O> }} <var:k> := <nat:1> ; <var:k> := <nat:1> + <var:k> * <var:V> ; <var:k> := <var:k> * <var:V> ; <var:k> := <nat:2> + <var:k> * <var:V> ; <var:k> := <nat:2> + <var:k> * <var:V> ; <var:k> := <var:k> * <var:V> ; <var:k> := <nat:2> + <var:k> * <var:V> ; <var:k> := <nat:3> + <var:k> * <var:V> ; <var:k> := <nat:3> + <var:k> * <var:V> {{ <var:k> = <nat:1> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:2> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> * <var:O> ^ <nat:5> + <nat:1> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> * <var:O> ^ <nat:6> + <nat:1> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> * <var:O> ^ <nat:7> + <nat:1> * <var:O> ^ <nat:6> + <nat:2> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:k> = <nat:1> * <var:O> ^ <nat:8> + <nat:1> * <var:O> ^ <nat:7> + <nat:2> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 