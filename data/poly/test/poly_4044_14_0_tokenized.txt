\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:B> ; <var:b2> := <nat:6> ; <var:b2> := <var:b2> * <var:B> ; <var:b2> := <var:b2> * <var:B> ; <var:b3> := <nat:3> ; <var:b3> := <var:b3> * <var:B> ; <var:b3> := <var:b3> * <var:B> ; <var:b3> := <var:b3> * <var:B> ; <var:Q> := <var:b3> ; <var:Q> := <var:Q> + <var:b2> ; <var:Q> := <var:Q> + <var:b1> ; <var:Q> := <var:Q> + <var:b0> \end{verbatim} Allowing it to hold that $ <var:B> = <var:W> $ prior to evaluating the set of instructions it follows that we have $ <var:Q> = <nat:3> \times <var:W> ^ <nat:3> + <nat:6> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:8> $ . \end{theorem} \begin{proof} Note that the following decorated set of instructions . \begin{eqnarray} \{ <var:B> = <var:W> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \} \\ <var:b1> := <nat:1> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \} \\ <var:b1> := <var:b1> * <var:B> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \} \\ <var:b2> := <nat:6> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:b2> = <nat:6> \} \\ <var:b2> := <var:b2> * <var:B> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:b2> = <nat:6> \cdot <var:W> \} \\ <var:b2> := <var:b2> * <var:B> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:b2> = <nat:6> \cdot <var:W> ^ <nat:2> \} \\ <var:b3> := <nat:3> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:b2> = <nat:6> \cdot <var:W> ^ <nat:2> \land <var:b3> = <nat:3> \} \\ <var:b3> := <var:b3> * <var:B> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:b2> = <nat:6> \cdot <var:W> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:W> \} \\ <var:b3> := <var:b3> * <var:B> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:b2> = <nat:6> \cdot <var:W> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:W> ^ <nat:2> \} \\ <var:b3> := <var:b3> * <var:B> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:b2> = <nat:6> \cdot <var:W> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:W> ^ <nat:3> \} \\ <var:Q> := <var:b3> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:b2> = <nat:6> \cdot <var:W> ^ <nat:2> \land <var:Q> = <nat:3> \cdot <var:W> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:b2> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:1> \cdot <var:W> \land <var:Q> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:6> \cdot <var:W> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:b1> ; \\ \{ <var:B> = <var:W> \land <var:b0> = <nat:8> \land <var:Q> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:6> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} \\ <var:Q> := <var:Q> + <var:b0> \\ \{ <var:B> = <var:W> \land <var:Q> = <nat:3> \cdot <var:W> ^ <nat:3> + <nat:6> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:8> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:B> = <var:W> }} <var:b0> := <nat:8> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:B> ; <var:b2> := <nat:6> ; <var:b2> := <var:b2> * <var:B> ; <var:b2> := <var:b2> * <var:B> ; <var:b3> := <nat:3> ; <var:b3> := <var:b3> * <var:B> ; <var:b3> := <var:b3> * <var:B> ; <var:b3> := <var:b3> * <var:B> ; <var:Q> := <var:b3> ; <var:Q> := <var:Q> + <var:b2> ; <var:Q> := <var:Q> + <var:b1> ; <var:Q> := <var:Q> + <var:b0> {{ <var:Q> = <nat:3> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:b2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:b2> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:b2> = <nat:6> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:b2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:b3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:b2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:b2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:b2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:b2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:1> * <var:W> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:b0> = <nat:8> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 