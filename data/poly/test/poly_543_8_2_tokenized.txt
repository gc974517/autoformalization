\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:1> + <var:e> * <var:S> ; <var:e> := <var:e> * <var:S> ; <var:e> := <nat:2> + <var:e> * <var:S> ; <var:e> := <var:e> * <var:S> ; <var:e> := <nat:1> + <var:e> * <var:S> ; <var:e> := <nat:1> + <var:e> * <var:S> ; <var:e> := <nat:2> + <var:e> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Given that we have $ <var:S> = <var:f> $ prior to executing the code segment , it follows that we see $ <var:e> = <nat:4> \cdot <var:f> ^ <nat:7> + <nat:1> \cdot <var:f> ^ <nat:6> + <nat:2> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands can be given through typical Hoare reasoning . Advancing , \verb | { <var:S> = <var:f> } <var:e> := <nat:4> { <var:S> = <var:f> \land <var:e> = <nat:4> } | and \verb | { <var:S> = <var:f> \land <var:e> = <nat:4> } <var:e> := <nat:1> + <var:e> * <var:S> { <var:S> = <var:f> \land <var:e> = <nat:4> * <var:f> + <nat:1> } | . Advancing to the next steps contained in our set of commands , \verb | { <var:S> = <var:f> } <var:e> := <nat:4> { <var:S> = <var:f> \land <var:e> = <nat:4> } | and \verb | { <var:S> = <var:f> \land <var:e> = <nat:4> } <var:e> := <nat:1> + <var:e> * <var:S> { <var:S> = <var:f> \land <var:e> = <nat:4> * <var:f> + <nat:1> } | . Moving on , we have \verb | { <var:S> = <var:f> } <var:e> := <nat:4> { <var:S> = <var:f> \land <var:e> = <nat:4> } | and \verb | { <var:S> = <var:f> \land <var:e> = <nat:4> } <var:e> := <nat:1> + <var:e> * <var:S> { <var:S> = <var:f> \land <var:e> = <nat:4> * <var:f> + <nat:1> } | . This is ensured through the environment update scheme obtained from usual Hoare logic . Considering the subsequent bit of code seen in the code segment , we see \verb | { <var:S> = <var:f> } <var:e> := <nat:4> { <var:S> = <var:f> \land <var:e> = <nat:4> } | . This is deduced with the variable assignmet scheme in usual Hoare logic . Paying attention to the following statement in our set of commands , we have \verb | { <var:S> = <var:f> } <var:e> := <nat:4> { <var:S> = <var:f> \land <var:e> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:4> ; <var:e> := <nat:1> + <var:e> * <var:S> ; <var:e> := <var:e> * <var:S> ; <var:e> := <nat:2> + <var:e> * <var:S> ; <var:e> := <var:e> * <var:S> ; <var:e> := <nat:1> + <var:e> * <var:S> ; <var:e> := <nat:1> + <var:e> * <var:S> ; <var:e> := <nat:2> + <var:e> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:S> = <var:f> }} <def:poly> {{ <var:e> = <nat:4> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:e> = <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:e> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:e> = <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:e> = <nat:4> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:e> = <nat:4> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:e> = <nat:4> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:e> = <nat:4> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 