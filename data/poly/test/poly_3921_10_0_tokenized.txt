\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:7> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:f> ; <var:m3> := <nat:2> ; <var:m3> := <var:m3> * <var:f> ; <var:m3> := <var:m3> * <var:f> ; <var:m3> := <var:m3> * <var:f> ; <var:G> := <var:m3> ; <var:G> := <var:G> + <var:m1> ; <var:G> := <var:G> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:f> = <var:M> $ prior to the evaluation of this list of commands it holds that we see $ <var:G> = <nat:2> \times <var:M> ^ <nat:3> + <nat:5> \times <var:M> + <nat:7> $ . \end{theorem} \begin{proof} The proof of this list of commands is done by Hoare reasoning . Honing in on the next bit of code found in the program , we see the variable update line giving $ <nat:7> $ as $ <var:m0>$ . This transfers the precondition $ \{ <var:f> = <var:M> \} $ into $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \} $ . Jumping to the upcoming statement contained in the code segment , we see the code yielding $ <nat:5> $ as $ <var:m1>$ . This statement redefines $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \} $ to the condition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> \} $ . This is guaranteed through the assignment scheme found in Hoare techniques . Considering the proceeding line of code contained in the list of commands , the line \verb | <var:m1> := <var:m1> * <var:f> ; | . This redefines $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> \} $ toward the condition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \} $ . Advancing on , the variable binding command \verb | <var:m3> := <nat:2> ; | . This forwards $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \} $ to the condition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:m3> = <nat:2> \} $ . Paying attention to the next piece of code seen in the series of instructions , we see the binding statement \verb | <var:m3> := <var:m3> * <var:f> ; | . This forwards the precondition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:m3> = <nat:2> \} $ toward $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:m3> = <nat:2> * <var:M> \} $ . This is rigorously given with the assignment rule defined in usual Hoare logic . Moving forward to the next step , we have the assignment code yielding $ <var:m3> * <var:f> $ toward $ <var:m3>$ . This command transfers the precondition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:m3> = <nat:2> * <var:M> \} $ into the condition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:m3> = <nat:2> * <var:M> ^ <nat:2> \} $ . Taking another step toward the upcoming step in the list of commands , we see the assignment command yielding $ <var:m3> * <var:f> $ toward $ <var:m3>$ . This moves the precondition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:m3> = <nat:2> * <var:M> ^ <nat:2> \} $ toward $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:m3> = <nat:2> * <var:M> ^ <nat:3> \} $ . This is sound by the assignment law defined by usual Hoare logic . Advancing , we see the code assigning $ <var:m3> $ into $ <var:G>$ . This moves $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:m3> = <nat:2> * <var:M> ^ <nat:3> \} $ to the condition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:G> = <nat:2> * <var:M> ^ <nat:3> \} $ . This is rigorously given through the assignment law of typical Hoare techniques . Immediately following , we see the statement \verb | <var:G> := <var:G> + <var:m1> ; | . This statement redefines the condition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:M> \land <var:G> = <nat:2> * <var:M> ^ <nat:3> \} $ as the condition $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:G> = <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> \} $ . This is guaranteed using the assignment inference rule given by Hoare reasoning . Shifting focus toward the upcoming command seen in our series of commands , the assignment statement giving $ <var:G> + <var:m0$ as $ <var:G>$ . This statement redefines $ \{ <var:f> = <var:M> \land <var:m0> = <nat:7> \land <var:G> = <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> \} $ toward $ \{ <var:f> = <var:M> \land <var:G> = <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m0> := <nat:7> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:f> ; <var:m3> := <nat:2> ; <var:m3> := <var:m3> * <var:f> ; <var:m3> := <var:m3> * <var:f> ; <var:m3> := <var:m3> * <var:f> ; <var:G> := <var:m3> ; <var:G> := <var:G> + <var:m1> ; <var:G> := <var:G> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:f> = <var:M> }} <def:poly> {{ <var:G> = <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:M> /\ <var:m3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:M> /\ <var:m3> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:M> /\ <var:m3> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:M> /\ <var:m3> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:M> /\ <var:G> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:m0> = <nat:7> /\ <var:G> = <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:G> = <nat:2> * <var:M> ^ <nat:3> + <nat:5> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 