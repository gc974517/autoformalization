\begin{document} \begin{theorem} We define the following segment of code as \begin{verbatim} <var:c> := <nat:4> ; <var:c> := <nat:4> + <var:c> * <var:F> ; <var:c> := <nat:2> + <var:c> * <var:F> ; <var:c> := <nat:1> + <var:c> * <var:F> ; <var:c> := <nat:1> + <var:c> * <var:F> ; <var:c> := <nat:4> + <var:c> * <var:F> ; <var:c> := <nat:4> + <var:c> * <var:F> \end{verbatim} Allow that we have $ <var:F> = <var:O> $ before interpreting this code segment then we have $ <var:c> = <nat:4> \times <var:O> ^ <nat:6> + <nat:4> \times <var:O> ^ <nat:5> + <nat:2> \times <var:O> ^ <nat:4> + <nat:1> \times <var:O> ^ <nat:3> + <nat:1> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this segment of code is clear through standard Hoare logic . Paying attention to the subsequent bits of codein the code segment , we see \begin{eqnarray} \{ <var:F> = <var:O> \} \, <var:c> := <nat:4> \, \{ <var:F> = <var:O> \land <var:c> = <nat:4> \} \\ \{ <var:F> = <var:O> \land <var:c> = <nat:4> \} \, <var:c> := <nat:4> + <var:c> * <var:F> \, \{ <var:F> = <var:O> \land <var:c> = <nat:4> * <var:O> + <nat:4> \} \\ \{ <var:F> = <var:O> \land <var:c> = <nat:4> * <var:O> + <nat:4> \} \, <var:c> := <nat:2> + <var:c> * <var:F> \, \{ <var:F> = <var:O> \land <var:c> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> \} \\ \{ <var:F> = <var:O> \land <var:c> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> \} \, <var:c> := <nat:1> + <var:c> * <var:F> \, \{ <var:F> = <var:O> \land <var:c> = <nat:4> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> \} \end{eqnarray} This is guaranteed using the variable binding scheme found in standard Hoare logic . Immediately following , we see \begin{eqnarray} \{ <var:F> = <var:O> \} \, <var:c> := <nat:4> \, \{ <var:F> = <var:O> \land <var:c> = <nat:4> \} \\ \{ <var:F> = <var:O> \land <var:c> = <nat:4> \} \, <var:c> := <nat:4> + <var:c> * <var:F> \, \{ <var:F> = <var:O> \land <var:c> = <nat:4> * <var:O> + <nat:4> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet law found in typical Hoare reasoning . Keeping momentum , \begin{eqnarray} \{ <var:F> = <var:O> \} \, <var:c> := <nat:4> \, \{ <var:F> = <var:O> \land <var:c> = <nat:4> \} \end{eqnarray} This is known to be sound with the binding rule defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:F> = <var:O> }} <var:c> := <nat:4> ; <var:c> := <nat:4> + <var:c> * <var:F> ; <var:c> := <nat:2> + <var:c> * <var:F> ; <var:c> := <nat:1> + <var:c> * <var:F> ; <var:c> := <nat:1> + <var:c> * <var:F> ; <var:c> := <nat:4> + <var:c> * <var:F> ; <var:c> := <nat:4> + <var:c> * <var:F> {{ <var:c> = <nat:4> * <var:O> ^ <nat:6> + <nat:4> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:c> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:c> = <nat:4> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:c> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:c> = <nat:4> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:c> = <nat:4> * <var:O> ^ <nat:4> + <nat:4> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:c> = <nat:4> * <var:O> ^ <nat:5> + <nat:4> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:c> = <nat:4> * <var:O> ^ <nat:6> + <nat:4> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 