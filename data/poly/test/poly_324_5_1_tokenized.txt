\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:X> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:3> ; <var:m> := <var:a1> <var:m> := <var:m> + <var:a0> \end{verbatim} Allowing that we have $ <var:X> = <var:l> $ , given all whole numbers $ <var:l> $ , before evaluating the program , then $ <var:m> = <nat:3> * <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions is given with usual Hoare logic . Keeping momentum , the environment update statement \verb | <var:a1> := <var:X> ; | . This line takes the precondition $ \{ <var:X> = <var:l> \} $ as the condition $ \{ <var:X> = <var:l> \land <var:a1> = <var:l> \} $ . Further , we see the variable update command \verb | <var:a0> := <nat:4> ; | . This line transfers the precondition $ \{ <var:X> = <var:l> \land <var:a1> = <var:l> \} $ toward the postcondition $ \{ <var:X> = <var:l> \land <var:a1> = <var:l> \land <var:a0> = <nat:4> \} $ . This is shown to be logically sound using the assignment scheme from standard Hoare logic . Considering the subsequent step found in the set of commands , we have the binding line defining $ <var:a1> * <nat:3> $ as $ <var:a1>$ . This takes the precondition $ \{ <var:X> = <var:l> \land <var:a1> = <var:l> \land <var:a0> = <nat:4> \} $ to $ \{ <var:X> = <var:l> \land <var:a1> = <nat:3> * <var:l> \land <var:a0> = <nat:4> \} $ . This is given through the assignment law from standard Hoare techniques . Now , we have the variable update code \verb | <var:m> := <var:a1> | . This moves $ \{ <var:X> = <var:l> \land <var:a1> = <nat:3> * <var:l> \land <var:a0> = <nat:4> \} $ toward the condition $ \{ <var:X> = <var:l> \land <var:a0> = <nat:4> \land <var:m> = <nat:3> * <var:l> \} $ . This is guaranteed with the assignment rule given by standard Hoare logic . Paying attention to the following command contained in our program , we see the assignment command \verb | <var:m> := <var:m> + <var:a0> | . This forwards $ \{ <var:X> = <var:l> \land <var:a0> = <nat:4> \land <var:m> = <nat:3> * <var:l> \} $ toward the postcondition $ \{ <var:X> = <var:l> \land <var:m> = <nat:3> * <var:l> + <nat:4> \} $ . This is known to be sound with the assignment inference rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:X> = <var:l> }} <var:a1> := <var:X> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:3> ; <var:m> := <var:a1> <var:m> := <var:m> + <var:a0> {{ <var:m> = <nat:3> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:a1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:a1> = <var:l> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:a1> = <nat:3> * <var:l> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:a0> = <nat:4> /\ <var:m> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:m> = <nat:3> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 