\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:1> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:u> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:u> ; <var:t2> := <var:t2> * <var:u> ; <var:S> := <var:t2> ; <var:S> := <var:S> + <var:t1> ; <var:S> := <var:S> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Allowing it to be that $ <var:u> = <var:l> $ ahead of interpreting our code segment , then we see $ <var:S> = <nat:7> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> + <nat:1> $ once list of commands has finished executing . \end{theorem} \begin{proof} The argument for this list of instructions is shown with typical Hoare techniques . Jumping to the subsequent steps seen in our series of instructions , \begin{eqnarray} \{ <var:u> = <var:l> \} \, <var:t0> := <nat:1> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \} \\ \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \} \, <var:t1> := <nat:8> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> \} \end{eqnarray} Immediately following , we have \begin{eqnarray} \{ <var:u> = <var:l> \} \, <var:t0> := <nat:1> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \} \\ \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \} \, <var:t1> := <nat:8> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> \} \end{eqnarray} Advancing to the proceeding bits of codeseen in the series of instructions , we have \begin{eqnarray} \{ <var:u> = <var:l> \} \, <var:t0> := <nat:1> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \} \\ \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \} \, <var:t1> := <nat:8> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> \} \\ \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> \} \, <var:t1> := <var:t1> * <var:u> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> * <var:l> \} \\ \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> * <var:l> \} \, <var:t2> := <nat:7> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> * <var:l> \land <var:t2> = <nat:7> \} \\ \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> * <var:l> \land <var:t2> = <nat:7> \} \, <var:t2> := <var:t2> * <var:u> \, \{ <var:u> = <var:l> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> * <var:l> \land <var:t2> = <nat:7> * <var:l> \} \end{eqnarray} This is known to be sound through the binding law obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:1> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:u> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:u> ; <var:t2> := <var:t2> * <var:u> ; <var:S> := <var:t2> ; <var:S> := <var:S> + <var:t1> ; <var:S> := <var:S> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:u> = <var:l> }} <def:poly> {{ <var:S> = <nat:7> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:8> * <var:l> /\ <var:t2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:8> * <var:l> /\ <var:t2> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:8> * <var:l> /\ <var:t2> = <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:8> * <var:l> /\ <var:S> = <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:t0> = <nat:1> /\ <var:S> = <nat:7> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:S> = <nat:7> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 