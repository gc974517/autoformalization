\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:2> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:d> ; <var:W2> := <nat:5> ; <var:W2> := <var:W2> * <var:d> ; <var:W2> := <var:W2> * <var:d> ; <var:W3> := <nat:9> ; <var:W3> := <var:W3> * <var:d> ; <var:W3> := <var:W3> * <var:d> ; <var:W3> := <var:W3> * <var:d> ; <var:o> := <var:W3> ; <var:o> := <var:o> + <var:W2> ; <var:o> := <var:o> + <var:W1> ; <var:o> := <var:o> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:d> = <var:T> $ before evaluating the series of commands , it must be that we have $ <var:o> = <nat:9> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:2> $ after series of commands has finished executing . \end{theorem} \begin{proof} Proving correctness for our program is shown using standard Hoare logic . Now , we see the variable update statement \verb | <var:W0> := <nat:2> ; | . This command redefines $ \{ <var:d> = <var:T> \} $ toward $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \} $ . Observing the next line of code found in our set of commands , we have the variable assignmet line letting $ <nat:2> $ into $ <var:W1>$ . This command transfers $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \} $ to the condition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \} $ . This is given with the assignment rule defined in standard Hoare reasoning . Considering the proceeding statement in the program , the environment update command \verb | <var:W1> := <var:W1> * <var:d> ; | . This moves the precondition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \} $ to $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \} $ . This is ensured by the assignment rule in usual Hoare logic . Advancing to the next step , we see the environment update statement binding $ <nat:5> $ toward $ <var:W2>$ . This code takes $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \} $ into $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \} $ . Advancing on , the environment update command giving $ <var:W2> * <var:d> $ into $ <var:W2>$ . This line forwards the precondition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \} $ as $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> \} $ . This is ensured through the assignment rule obtained from Hoare techniques . Observing the upcoming line of code in our set of instructions , we have the environment update line defining $ <var:W2> * <var:d> $ to $ <var:W2>$ . This command moves $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> \} $ to the postcondition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \} $ . This is rigorously given by the assignment inference rule from usual Hoare techniques . Looking at the next step contained in our code segment , we have the line \verb | <var:W3> := <nat:9> ; | . This transfers the condition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \} $ to $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:W3> = <nat:9> \} $ . Paying attention to the upcoming command contained in the list of commands , the command yielding $ <var:W3> * <var:d> $ into $ <var:W3>$ . This forwards the condition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:W3> = <nat:9> \} $ to $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:W3> = <nat:9> \cdot <var:T> \} $ . Moving forward , the variable update line giving $ <var:W3> * <var:d> $ into $ <var:W3>$ . This forwards the condition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:W3> = <nat:9> \cdot <var:T> \} $ into the condition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:W3> = <nat:9> \cdot <var:T> ^ <nat:2> \} $ . Shifting focus toward the proceeding piece of code contained in the series of instructions , we have the variable update code \verb | <var:W3> := <var:W3> * <var:d> ; | . This redefines the condition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:W3> = <nat:9> \cdot <var:T> ^ <nat:2> \} $ to the condition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:W3> = <nat:9> \cdot <var:T> ^ <nat:3> \} $ . This is ensured with the assignment scheme given by Hoare logic . Moving on , we have the variable update line assigning $ <var:W3> $ to $ <var:o>$ . This moves the precondition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:W3> = <nat:9> \cdot <var:T> ^ <nat:3> \} $ toward $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:o> = <nat:9> \cdot <var:T> ^ <nat:3> \} $ . Advancing to the following command contained in the series of instructions , we have the binding command giving $ <var:o> + <var:W2> $ as $ <var:o>$ . This forwards the precondition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:o> = <nat:9> \cdot <var:T> ^ <nat:3> \} $ into $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:o> = <nat:9> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> \} $ . Moving forward to the proceeding command in the code segment , we have the variable update command giving $ <var:o> + <var:W1> $ as $ <var:o>$ . This moves the precondition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:o> = <nat:9> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> \} $ toward the condition $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:o> = <nat:9> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> \} $ . Focusing on the next command in our code , we see the binding command binding $ <var:o> + <var:W0$ toward $ <var:o>$ . This advances $ \{ <var:d> = <var:T> \land <var:W0> = <nat:2> \land <var:o> = <nat:9> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> \} $ toward $ \{ <var:d> = <var:T> \land <var:o> = <nat:9> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:2> \} $ . This is shown using the assignment law from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W0> := <nat:2> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:d> ; <var:W2> := <nat:5> ; <var:W2> := <var:W2> * <var:d> ; <var:W2> := <var:W2> * <var:d> ; <var:W3> := <nat:9> ; <var:W3> := <var:W3> * <var:d> ; <var:W3> := <var:W3> * <var:d> ; <var:W3> := <var:W3> * <var:d> ; <var:o> := <var:W3> ; <var:o> := <var:o> + <var:W2> ; <var:o> := <var:o> + <var:W1> ; <var:o> := <var:o> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:d> = <var:T> }} <def:poly> {{ <var:o> = <nat:9> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:W3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:W3> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:W3> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:W3> = <nat:9> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:o> = <nat:9> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:o> = <nat:9> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:W0> = <nat:2> /\ <var:o> = <nat:9> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:o> = <nat:9> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 