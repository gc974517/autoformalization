\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:5> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:G> ; <var:J2> := <nat:1> ; <var:J2> := <var:J2> * <var:G> ; <var:J2> := <var:J2> * <var:G> ; <var:J3> := <nat:4> ; <var:J3> := <var:J3> * <var:G> ; <var:J3> := <var:J3> * <var:G> ; <var:J3> := <var:J3> * <var:G> ; <var:Y> := <var:J3> ; <var:Y> := <var:Y> + <var:J2> ; <var:Y> := <var:Y> + <var:J1> ; <var:Y> := <var:Y> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:G> = <var:g> $ prior to the evaluation of our set of instructions , it must be that $ <var:Y> = <nat:4> \cdot <var:g> ^ <nat:3> + <nat:1> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:G> = <var:g> \} \\ <var:J0> := <nat:5> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \} \\ <var:J1> := <nat:3> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \} \\ <var:J1> := <var:J1> * <var:G> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \} \\ <var:J2> := <nat:1> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:J2> = <nat:1> \} \\ <var:J2> := <var:J2> * <var:G> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:J2> = <nat:1> \times <var:g> \} \\ <var:J2> := <var:J2> * <var:G> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:J2> = <nat:1> \times <var:g> ^ <nat:2> \} \\ <var:J3> := <nat:4> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:J2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:J3> = <nat:4> \} \\ <var:J3> := <var:J3> * <var:G> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:J2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:J3> = <nat:4> \times <var:g> \} \\ <var:J3> := <var:J3> * <var:G> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:J2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:J3> = <nat:4> \times <var:g> ^ <nat:2> \} \\ <var:J3> := <var:J3> * <var:G> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:J2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:J3> = <nat:4> \times <var:g> ^ <nat:3> \} \\ <var:Y> := <var:J3> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:J2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Y> = <nat:4> \times <var:g> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:J2> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:J1> = <nat:3> \times <var:g> \land <var:Y> = <nat:4> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> \} \end{eqnarray} Furthering evaluating our code segment gives : \begin{eqnarray} <var:Y> := <var:Y> + <var:J1> ; \\ \{ <var:G> = <var:g> \land <var:J0> = <nat:5> \land <var:Y> = <nat:4> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> \} \\ <var:Y> := <var:Y> + <var:J0> \\ \{ <var:G> = <var:g> \land <var:Y> = <nat:4> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:5> \} \end{eqnarray} Furthering the execution of our list of commands yields : \begin{eqnarray} \end{eqnarray} As a result , the series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J0> := <nat:5> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:G> ; <var:J2> := <nat:1> ; <var:J2> := <var:J2> * <var:G> ; <var:J2> := <var:J2> * <var:G> ; <var:J3> := <nat:4> ; <var:J3> := <var:J3> * <var:G> ; <var:J3> := <var:J3> * <var:G> ; <var:J3> := <var:J3> * <var:G> ; <var:Y> := <var:J3> ; <var:Y> := <var:Y> + <var:J2> ; <var:Y> := <var:Y> + <var:J1> ; <var:Y> := <var:Y> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:G> = <var:g> }} <def:poly> {{ <var:Y> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:J2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:J2> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:J2> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:J2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:J3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:J2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:J2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:J2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:J2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:Y> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:3> * <var:g> /\ <var:Y> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:J0> = <nat:5> /\ <var:Y> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:Y> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 