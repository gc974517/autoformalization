\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E> := <nat:2> ; <var:E> := <nat:1> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <nat:2> + <var:E> * <var:a> ; <var:E> := <nat:1> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Allowing it to be that $ <var:a> = <var:K> $ prior to executing our series of instructions then we see $ <var:E> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> $ . \end{theorem} \begin{proof} Using typical Hoare logic gives us : \begin{eqnarray} \{ <var:a> = <var:K> \} \\ <var:E> := <nat:2> ; \\ \{ <var:a> = <var:K> \land <var:E> = <nat:2> \} \\ <var:E> := <nat:1> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:K> \land <var:E> = <nat:2> * <var:K> + <nat:1> \} \\ <var:E> := <nat:3> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:K> \land <var:E> = <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> \} \\ <var:E> := <nat:2> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:K> \land <var:E> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> \} \\ <var:E> := <nat:1> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:K> \land <var:E> = <nat:2> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> \} \\ <var:E> := <nat:3> + <var:E> * <var:a> \\ \{ <var:a> = <var:K> \land <var:E> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> \} \end{eqnarray} Continuing the evaluation of this segment of code results in : \begin{eqnarray} \end{eqnarray} Considering the above , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:2> ; <var:E> := <nat:1> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <nat:2> + <var:E> * <var:a> ; <var:E> := <nat:1> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:a> = <var:K> }} <def:poly> {{ <var:E> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:E> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:E> = <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:E> = <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:E> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:E> = <nat:2> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:E> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 