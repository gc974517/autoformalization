\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:6> ; <var:J> := <var:a0> \end{verbatim} Allow $ <var:K> = <var:B> $ prior to running this series of instructions , it holds that we have $ <var:J> = <nat:6> $ when segment of code has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our code is clear by the following decorated code segment . \begin{eqnarray} \{ <var:K> = <var:B> \} \\ <var:a0> := <nat:6> ; \\ \{ <var:K> = <var:B> \land <var:a0> = <nat:6> \} \\ <var:J> := <var:a0> \\ \{ <var:K> = <var:B> \land <var:J> = <nat:6> \} \end{eqnarray} Using standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:K> = <var:B> }} <var:a0> := <nat:6> ; <var:J> := <var:a0> {{ <var:J> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:J> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 