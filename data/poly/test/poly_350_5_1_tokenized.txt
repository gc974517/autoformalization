\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:e> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:3> ; <var:I> := <var:u1> <var:I> := <var:I> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:e> = <var:r> $ for some natural numbers $ <var:r> $ prior to the evaluation of this series of instructions it follows that $ <var:I> = <nat:3> * <var:r> + <nat:1> $ after series of instructions terminates . \end{theorem} \begin{proof} The method of proof for the series of instructions can be demonstrated by standard Hoare reasoning . Moving forward , \verb | { <var:e> = <var:r> } <var:u1> := <var:e> { <var:e> = <var:r> \land <var:u1> = <var:r> } | , \verb | { <var:e> = <var:r> \land <var:u1> = <var:r> } <var:u0> := <nat:1> { <var:e> = <var:r> \land <var:u1> = <var:r> \land <var:u0> = <nat:1> } | , \verb | { <var:e> = <var:r> \land <var:u1> = <var:r> \land <var:u0> = <nat:1> } <var:u1> := <var:u1> * <nat:3> { <var:e> = <var:r> \land <var:u1> = <nat:3> \cdot <var:r> \land <var:u0> = <nat:1> } | and \verb | { <var:e> = <var:r> \land <var:u1> = <nat:3> \cdot <var:r> \land <var:u0> = <nat:1> } <var:I> := <var:u1{ <var:e> = <var:r> \land <var:u0> = <nat:1> \land <var:I> = <nat:3> \cdot <var:r> } | . Honing in on the following bit of code found in the segment of code , we have \verb | { <var:e> = <var:r> } <var:u1> := <var:e> { <var:e> = <var:r> \land <var:u1> = <var:r> } | . This is guaranteed with the variable assignmet law from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:e> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:3> ; <var:I> := <var:u1> <var:I> := <var:I> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:e> = <var:r> }} <def:poly> {{ <var:I> = <nat:3> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:u1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:u1> = <var:r> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:u1> = <nat:3> * <var:r> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:u0> = <nat:1> /\ <var:I> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:I> = <nat:3> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 