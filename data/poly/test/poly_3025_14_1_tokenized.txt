\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:g> ; <var:m2> := <var:m1> * <var:g> ; <var:m3> := <var:m2> * <var:g> ; <var:m4> := <var:m3> * <var:g> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:4> ; <var:m2> := <var:m2> * <nat:9> ; <var:m3> := <var:m3> * <nat:8> ; <var:m4> := <var:m4> * <nat:6> ; <var:D> := <var:m4> <var:D> := <var:D> + <var:m3> <var:D> := <var:D> + <var:m2> <var:D> := <var:D> + <var:m1> <var:D> := <var:D> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Allowing that we have $ <var:g> = <var:k> $ ahead of evaluating our code segment , then we see $ <var:D> = <nat:6> \times <var:k> ^ <nat:4> + <nat:8> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions is clear by typical Hoare logic . Moving forward to the next step , we have the assignment command letting $ <var:g> $ to $ <var:m1>$ . This line advances $ \{ <var:g> = <var:k> \} $ as $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \} $ . This is deduced through the assignment inference rule from standard Hoare reasoning . Taking a look at the following line contained in the set of commands , the variable assignmet command assigning $ <var:m1> * <var:g> $ as $ <var:m2>$ . This moves $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \} $ toward the postcondition $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment rule of typical Hoare reasoning . Taking another step toward the following line of code seen in our series of instructions , we have the assignment code \verb | <var:m3> := <var:m2> * <var:g> ; | . This transfers the condition $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \} $ to the condition $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \} $ . This is deduced using the assignment law given in typical Hoare reasoning . Focusing on the next command in the code , we see the variable update code letting $ <var:m3> * <var:g> $ to $ <var:m4>$ . This statement redefines $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \} $ into $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \} $ . This is rigorously given using the assignment scheme given in standard Hoare techniques . Focusing on the proceeding command contained in our series of commands , the command \verb | <var:m0> := <nat:3> ; | . This command transfers $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \} $ as $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . Keeping momentum , the assignment code \verb | <var:m1> := <var:m1> * <nat:4> ; | . This moves $ \{ <var:g> = <var:k> \land <var:m1> = <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ to the postcondition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . Moving forward , the statement \verb | <var:m2> := <var:m2> * <nat:9> ; | . This transfers the condition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ as the postcondition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . Considering the upcoming bit of code seen in our set of instructions , the variable update line giving $ <var:m3> * <nat:8> $ to $ <var:m3>$ . This advances the precondition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m3> = <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ toward the condition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . This is shown with the assignment rule given by typical Hoare logic . Taking another step toward the following line found in the list of instructions , we have the variable assignmet code assigning $ <var:m4> * <nat:6> $ toward $ <var:m4>$ . This transfers $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:m4> = <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ to the postcondition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:m4> = <nat:6> \cdot <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . Immediately after , we see the environment update statement defining $ <var:m4$ toward $ <var:D>$ . This statement takes the precondition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:m4> = <nat:6> \cdot <var:k> ^ <nat:4> \land <var:m0> = <nat:3> \} $ to $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:m0> = <nat:3> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> \} $ . Looking at the next step found in the list of instructions , we see the command \verb | <var:D> := <var:D> + <var:m3> | . This takes $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:m0> = <nat:3> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> \} $ to the postcondition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m0> = <nat:3> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> \} $ . This is guaranteed through the assignment scheme given in typical Hoare techniques . Going to the next step , we see the assignment code \verb | <var:D> := <var:D> + <var:m2> | . This code forwards the condition $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:m0> = <nat:3> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> \} $ toward $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m0> = <nat:3> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> \} $ . This is given through the assignment law obtained from standard Hoare logic . Going to the next step , we have the variable binding command \verb | <var:D> := <var:D> + <var:m1> | . This advances $ \{ <var:g> = <var:k> \land <var:m1> = <nat:4> \cdot <var:k> \land <var:m0> = <nat:3> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> \} $ into the condition $ \{ <var:g> = <var:k> \land <var:m0> = <nat:3> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> \} $ . Moving forward to the next step , the binding command giving $ <var:D> + <var:m0$ to $ <var:D>$ . This code takes $ \{ <var:g> = <var:k> \land <var:m0> = <nat:3> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> \} $ to the postcondition $ \{ <var:g> = <var:k> \land <var:D> = <nat:6> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Definition <def:poly> := <var:m1> := <var:g> ; <var:m2> := <var:m1> * <var:g> ; <var:m3> := <var:m2> * <var:g> ; <var:m4> := <var:m3> * <var:g> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:4> ; <var:m2> := <var:m2> * <nat:9> ; <var:m3> := <var:m3> * <nat:8> ; <var:m4> := <var:m4> * <nat:6> ; <var:D> := <var:m4> <var:D> := <var:D> + <var:m3> <var:D> := <var:D> + <var:m2> <var:D> := <var:D> + <var:m1> <var:D> := <var:D> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:g> = <var:k> }} <def:poly> {{ <var:D> = <nat:6> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <var:k> /\ <var:m2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <var:k> /\ <var:m2> = <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <var:k> /\ <var:m2> = <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> /\ <var:m4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <var:k> /\ <var:m2> = <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> /\ <var:m4> = <var:k> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <nat:4> * <var:k> /\ <var:m2> = <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> /\ <var:m4> = <var:k> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <nat:4> * <var:k> /\ <var:m2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:m3> = <var:k> ^ <nat:3> /\ <var:m4> = <var:k> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <nat:4> * <var:k> /\ <var:m2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:m4> = <var:k> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <nat:4> * <var:k> /\ <var:m2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:m4> = <nat:6> * <var:k> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <nat:4> * <var:k> /\ <var:m2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:m0> = <nat:3> /\ <var:D> = <nat:6> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <nat:4> * <var:k> /\ <var:m2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:m0> = <nat:3> /\ <var:D> = <nat:6> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m1> = <nat:4> * <var:k> /\ <var:m0> = <nat:3> /\ <var:D> = <nat:6> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:m0> = <nat:3> /\ <var:D> = <nat:6> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:D> = <nat:6> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 