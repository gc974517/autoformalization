\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:z1> := <var:o> ; <var:z2> := <var:z1> * <var:o> ; <var:z3> := <var:z2> * <var:o> ; <var:z4> := <var:z3> * <var:o> ; <var:z0> := <nat:7> ; <var:z1> := <var:z1> * <nat:9> ; <var:z2> := <var:z2> * <nat:9> ; <var:z3> := <var:z3> * <nat:8> ; <var:z4> := <var:z4> * <nat:1> ; <var:f> := <var:z4> <var:f> := <var:f> + <var:z3> <var:f> := <var:f> + <var:z2> <var:f> := <var:f> + <var:z1> <var:f> := <var:f> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:o> = <var:j> $ ahead of the evaluation of our set of instructions , it follows that we have $ <var:f> = <nat:1> \cdot <var:j> ^ <nat:4> + <nat:8> \cdot <var:j> ^ <nat:3> + <nat:9> \cdot <var:j> ^ <nat:2> + <nat:9> \cdot <var:j> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for the list of commands is accomplished using the following decorated program . \begin{eqnarray} \{ <var:o> = <var:j> \} \\ <var:z1> := <var:o> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <var:j> \} \\ <var:z2> := <var:z1> * <var:o> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <var:j> \land <var:z2> = <var:j> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:o> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <var:j> \land <var:z2> = <var:j> ^ <nat:2> \land <var:z3> = <var:j> ^ <nat:3> \} \\ <var:z4> := <var:z3> * <var:o> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <var:j> \land <var:z2> = <var:j> ^ <nat:2> \land <var:z3> = <var:j> ^ <nat:3> \land <var:z4> = <var:j> ^ <nat:4> \} \\ <var:z0> := <nat:7> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <var:j> \land <var:z2> = <var:j> ^ <nat:2> \land <var:z3> = <var:j> ^ <nat:3> \land <var:z4> = <var:j> ^ <nat:4> \land <var:z0> = <nat:7> \} \\ <var:z1> := <var:z1> * <nat:9> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <nat:9> * <var:j> \land <var:z2> = <var:j> ^ <nat:2> \land <var:z3> = <var:j> ^ <nat:3> \land <var:z4> = <var:j> ^ <nat:4> \land <var:z0> = <nat:7> \} \\ <var:z2> := <var:z2> * <nat:9> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <nat:9> * <var:j> \land <var:z2> = <nat:9> * <var:j> ^ <nat:2> \land <var:z3> = <var:j> ^ <nat:3> \land <var:z4> = <var:j> ^ <nat:4> \land <var:z0> = <nat:7> \} \\ <var:z3> := <var:z3> * <nat:8> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <nat:9> * <var:j> \land <var:z2> = <nat:9> * <var:j> ^ <nat:2> \land <var:z3> = <nat:8> * <var:j> ^ <nat:3> \land <var:z4> = <var:j> ^ <nat:4> \land <var:z0> = <nat:7> \} \\ <var:z4> := <var:z4> * <nat:1> ; \\ \{ <var:o> = <var:j> \land <var:z1> = <nat:9> * <var:j> \land <var:z2> = <nat:9> * <var:j> ^ <nat:2> \land <var:z3> = <nat:8> * <var:j> ^ <nat:3> \land <var:z4> = <nat:1> * <var:j> ^ <nat:4> \land <var:z0> = <nat:7> \} \\ <var:f> := <var:z4> \\ \{ <var:o> = <var:j> \land <var:z1> = <nat:9> * <var:j> \land <var:z2> = <nat:9> * <var:j> ^ <nat:2> \land <var:z3> = <nat:8> * <var:j> ^ <nat:3> \land <var:z0> = <nat:7> \land <var:f> = <nat:1> * <var:j> ^ <nat:4> \} \\ <var:f> := <var:f> + <var:z3> \\ \{ <var:o> = <var:j> \land <var:z1> = <nat:9> * <var:j> \land <var:z2> = <nat:9> * <var:j> ^ <nat:2> \land <var:z0> = <nat:7> \land <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:z2> \\ \{ <var:o> = <var:j> \land <var:z1> = <nat:9> * <var:j> \land <var:z0> = <nat:7> \land <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:z1> \\ \{ <var:o> = <var:j> \land <var:z0> = <nat:7> \land <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:9> * <var:j> \} \\ <var:f> := <var:f> + <var:z0> \\ \{ <var:o> = <var:j> \land <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:7> \} \end{eqnarray} Applying standard Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <var:z4> : string := " <var:z4> " . Definition <def:poly> := <var:z1> := <var:o> ; <var:z2> := <var:z1> * <var:o> ; <var:z3> := <var:z2> * <var:o> ; <var:z4> := <var:z3> * <var:o> ; <var:z0> := <nat:7> ; <var:z1> := <var:z1> * <nat:9> ; <var:z2> := <var:z2> * <nat:9> ; <var:z3> := <var:z3> * <nat:8> ; <var:z4> := <var:z4> * <nat:1> ; <var:f> := <var:z4> <var:f> := <var:f> + <var:z3> <var:f> := <var:f> + <var:z2> <var:f> := <var:f> + <var:z1> <var:f> := <var:f> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:o> = <var:j> }} <def:poly> {{ <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <var:j> /\ <var:z2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <var:j> /\ <var:z2> = <var:j> ^ <nat:2> /\ <var:z3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <var:j> /\ <var:z2> = <var:j> ^ <nat:2> /\ <var:z3> = <var:j> ^ <nat:3> /\ <var:z4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <var:j> /\ <var:z2> = <var:j> ^ <nat:2> /\ <var:z3> = <var:j> ^ <nat:3> /\ <var:z4> = <var:j> ^ <nat:4> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <nat:9> * <var:j> /\ <var:z2> = <var:j> ^ <nat:2> /\ <var:z3> = <var:j> ^ <nat:3> /\ <var:z4> = <var:j> ^ <nat:4> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <nat:9> * <var:j> /\ <var:z2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:z3> = <var:j> ^ <nat:3> /\ <var:z4> = <var:j> ^ <nat:4> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <nat:9> * <var:j> /\ <var:z2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:z3> = <nat:8> * <var:j> ^ <nat:3> /\ <var:z4> = <var:j> ^ <nat:4> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <nat:9> * <var:j> /\ <var:z2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:z3> = <nat:8> * <var:j> ^ <nat:3> /\ <var:z4> = <nat:1> * <var:j> ^ <nat:4> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <nat:9> * <var:j> /\ <var:z2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:z3> = <nat:8> * <var:j> ^ <nat:3> /\ <var:z0> = <nat:7> /\ <var:f> = <nat:1> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <nat:9> * <var:j> /\ <var:z2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:z0> = <nat:7> /\ <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z1> = <nat:9> * <var:j> /\ <var:z0> = <nat:7> /\ <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:z0> = <nat:7> /\ <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:f> = <nat:1> * <var:j> ^ <nat:4> + <nat:8> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 