\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:e> ; <var:Z> := <var:y1> ; <var:Z> := <var:Z> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Allow it to hold that $ <var:e> = <var:r> $ prior to evaluating the series of instructions then we see $ <var:Z> = <nat:2> * <var:r> + <nat:1> $ once series of instructions has executed . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is shown through Hoare reasoning . Jumping to the proceeding bit of code seen in the series of instructions , we have the command defining $ <nat:1> $ into $ <var:y0>$ . This takes $ \{ <var:e> = <var:r> \} $ as the condition $ \{ <var:e> = <var:r> \land <var:y0> = <nat:1> \} $ . This is given through the assignment scheme found in Hoare logic . Now , we have the variable assignmet code yielding $ <nat:2> $ to $ <var:y1>$ . This code moves the precondition $ \{ <var:e> = <var:r> \land <var:y0> = <nat:1> \} $ toward the postcondition $ \{ <var:e> = <var:r> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \} $ . Next , we see the line \verb | <var:y1> := <var:y1> * <var:e> ; | . This command advances $ \{ <var:e> = <var:r> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \} $ into the condition $ \{ <var:e> = <var:r> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> * <var:r> \} $ . Observing the proceeding bit of code found in our segment of code , we have the binding code \verb | <var:Z> := <var:y1> ; | . This moves the condition $ \{ <var:e> = <var:r> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> * <var:r> \} $ toward $ \{ <var:e> = <var:r> \land <var:y0> = <nat:1> \land <var:Z> = <nat:2> * <var:r> \} $ . This is deduced through the assignment rule given by usual Hoare techniques . Going forward , the variable binding statement \verb | <var:Z> := <var:Z> + <var:y0> | . This line redefines the condition $ \{ <var:e> = <var:r> \land <var:y0> = <nat:1> \land <var:Z> = <nat:2> * <var:r> \} $ toward $ \{ <var:e> = <var:r> \land <var:Z> = <nat:2> * <var:r> + <nat:1> \} $ . This is deduced through the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:e> ; <var:Z> := <var:y1> ; <var:Z> := <var:Z> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:e> = <var:r> }} <def:poly> {{ <var:Z> = <nat:2> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:y0> = <nat:1> /\ <var:Z> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:Z> = <nat:2> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 