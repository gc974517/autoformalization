\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:Z> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:3> ; <var:E> := <var:x1> <var:E> := <var:E> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for all positive numbers $ <var:r> $ --- that we have $ <var:Z> = <var:r> $ prior to running our list of commands then we have $ <var:E> = <nat:3> * <var:r> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands is demonstrated using standard Hoare logic . Paying attention to the upcoming steps found in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:r> \} & <var:x1> := <var:Z> & \{ <var:Z> = <var:r> \land <var:x1> = <var:r> \} \\ \{ <var:Z> = <var:r> \land <var:x1> = <var:r> \} & <var:x0> := <nat:7> & \{ <var:Z> = <var:r> \land <var:x1> = <var:r> \land <var:x0> = <nat:7> \} \\ \{ <var:Z> = <var:r> \land <var:x1> = <var:r> \land <var:x0> = <nat:7> \} & <var:x1> := <var:x1> * <nat:3> & \{ <var:Z> = <var:r> \land <var:x1> = <nat:3> \times <var:r> \land <var:x0> = <nat:7> \} \end{tabular} This is known to be sound using the variable assignmet rule defined by usual Hoare techniques . After , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:r> \} & <var:x1> := <var:Z> & \{ <var:Z> = <var:r> \land <var:x1> = <var:r> \} \\ \{ <var:Z> = <var:r> \land <var:x1> = <var:r> \} & <var:x0> := <nat:7> & \{ <var:Z> = <var:r> \land <var:x1> = <var:r> \land <var:x0> = <nat:7> \} \end{tabular} This is known to be sound with the inference rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:Z> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:3> ; <var:E> := <var:x1> <var:E> := <var:E> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Z> = <var:r> }} <def:poly> {{ <var:E> = <nat:3> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:x1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:x1> = <var:r> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:x1> = <nat:3> * <var:r> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:x0> = <nat:7> /\ <var:E> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:E> = <nat:3> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 