\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:M0> := <nat:7> ; <var:M1> := <nat:6> ; <var:M1> := <var:M1> * <var:i> ; <var:y> := <var:M1> ; <var:y> := <var:y> + <var:M0> \end{verbatim} Allow ( for any natural numbers $ <var:Q> $ ) it to hold that $ <var:i> = <var:Q> $ ahead of the execution of this program it follows that we have $ <var:y> = <nat:6> \cdot <var:Q> + <nat:7> $ when set of commands has exited . \end{theorem} \begin{proof} Observe the below decorated list of instructions . \begin{eqnarray} \{ <var:i> = <var:Q> \} \\ <var:M0> := <nat:7> ; \\ \{ <var:i> = <var:Q> \land <var:M0> = <nat:7> \} \\ <var:M1> := <nat:6> ; \\ \{ <var:i> = <var:Q> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \} \\ <var:M1> := <var:M1> * <var:i> ; \\ \{ <var:i> = <var:Q> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:Q> \} \\ <var:y> := <var:M1> ; \\ \{ <var:i> = <var:Q> \land <var:M0> = <nat:7> \land <var:y> = <nat:6> \times <var:Q> \} \\ <var:y> := <var:y> + <var:M0> \\ \{ <var:i> = <var:Q> \land <var:y> = <nat:6> \times <var:Q> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:i> = <var:Q> }} <var:M0> := <nat:7> ; <var:M1> := <nat:6> ; <var:M1> := <var:M1> * <var:i> ; <var:y> := <var:M1> ; <var:y> := <var:y> + <var:M0> {{ <var:y> = <nat:6> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:M0> = <nat:7> /\ <var:y> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:y> = <nat:6> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 