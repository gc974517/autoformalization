\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:2> ; <var:k> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Allowing , for some natural coefficients $ <var:h> $ , it to hold that $ <var:x> = <var:h> $ prior to running this set of commands , it follows that we see $ <var:k> = <nat:2> $ once segment of code executes . \end{theorem} \begin{proof} Notice the below decorated set of instructions . \begin{eqnarray} \{ <var:x> = <var:h> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:x> = <var:h> \land <var:C0> = <nat:2> \} \\ <var:k> := <var:C0> \\ \{ <var:x> = <var:h> \land <var:k> = <nat:2> \} \end{eqnarray} The application of standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:k> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:x> = <var:h> }} <def:poly> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:h> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:h> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 