\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <nat:2> + <var:m> * <var:L> \end{verbatim} Assuming , given every positive integers $ <var:v> $ , $ <var:L> = <var:v> $ before running the code segment , then $ <var:m> = <nat:3> * <var:v> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the segment of code is shown using usual Hoare reasoning . Moving forward , \begin{eqnarray} \{ <var:L> = <var:v> \} \, <var:m> := <nat:3> \, \{ <var:L> = <var:v> \land <var:m> = <nat:3> \} \\ \{ <var:L> = <var:v> \land <var:m> = <nat:3> \} \, <var:m> := <nat:2> + <var:m> * <var:L\, \{ <var:L> = <var:v> \land <var:m> = <nat:3> * <var:v> + <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:L> = <var:v> }} <var:m> := <nat:3> ; <var:m> := <nat:2> + <var:m> * <var:L> {{ <var:m> = <nat:3> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:m> = <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 