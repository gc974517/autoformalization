\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:E> := <nat:1> ; <var:E> := <nat:2> + <var:E> * <var:m> ; <var:E> := <nat:1> + <var:E> * <var:m> ; <var:E> := <nat:4> + <var:E> * <var:m> ; <var:E> := <nat:2> + <var:E> * <var:m> ; <var:E> := <nat:4> + <var:E> * <var:m> ; <var:E> := <var:E> * <var:m> ; <var:E> := <nat:1> + <var:E> * <var:m> ; <var:E> := <nat:1> + <var:E> * <var:m> ; <var:E> := <nat:4> + <var:E> * <var:m> ; <var:E> := <var:E> * <var:m> ; <var:E> := <var:E> * <var:m> ; <var:E> := <nat:2> + <var:E> * <var:m> ; <var:E> := <nat:3> + <var:E> * <var:m> \end{verbatim} Allow it to be that $ <var:m> = <var:p> $ , letting natural numbers $ <var:p> $ , before interpreting this program it holds that we see $ <var:E> = <nat:1> \cdot <var:p> ^ <nat:13> + <nat:2> \cdot <var:p> ^ <nat:12> + <nat:1> \cdot <var:p> ^ <nat:11> + <nat:4> \cdot <var:p> ^ <nat:10> + <nat:2> \cdot <var:p> ^ <nat:9> + <nat:4> \cdot <var:p> ^ <nat:8> + <nat:1> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:5> + <nat:4> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is given by typical Hoare reasoning . Going forward , we see the variable assignmet line \verb | <var:E> := <nat:1> ; | . This moves the precondition $ \{ <var:m> = <var:p> \} $ into $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \} $ . This is known to be sound with the assignment inference rule in standard Hoare techniques . Going to the next step , we have the environment update command \verb | <var:E> := <nat:2> + <var:E> * <var:m> ; | . This moves the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \} $ into $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> + <nat:2> \} $ . Now , we see the assignment code letting $ <nat:1> + <var:E> * <var:m> $ toward $ <var:E>$ . This redefines the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> + <nat:2> \} $ toward the condition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:1> \} $ . Following , the variable update line giving $ <nat:4> + <var:E> * <var:m> $ to $ <var:E>$ . This moves the condition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:1> \} $ to the condition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> \} $ . This is ensured by the assignment law from usual Hoare reasoning . Moving on to the next step , the assignment code \verb | <var:E> := <nat:2> + <var:E> * <var:m> ; | . This line moves $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> \} $ as the postcondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule in standard Hoare techniques . Paying attention to the subsequent piece of code seen in our segment of code , we have the environment update command \verb | <var:E> := <nat:4> + <var:E> * <var:m> ; | . This code forwards the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:2> \} $ as $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> \} $ . This is shown by the assignment scheme in typical Hoare techniques . Advancing to the proceeding bit of code found in the code segment , we see the variable assignmet command \verb | <var:E> := <var:E> * <var:m> ; | . This transfers the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> \} $ toward the postcondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + \} $ . This is sound through the assignment rule of usual Hoare techniques . Looking at the subsequent command found in our list of commands , we have the variable binding code yielding $ <nat:1> + <var:E> * <var:m> $ into $ <var:E>$ . This takes the condition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + \} $ to $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:1> \} $ . Advancing to the next step , we see the environment update command \verb | <var:E> := <nat:1> + <var:E> * <var:m> ; | . This statement redefines the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:1> \} $ to $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:1> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> + <nat:1> \} $ . This is given using the assignment scheme defined in usual Hoare logic . Taking another step toward the following command in our series of instructions , we have the environment update code giving $ <nat:4> + <var:E> * <var:m> $ into $ <var:E>$ . This command takes the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:1> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> + <nat:1> \} $ as $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:8> + <nat:1> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> \} $ . Moving on to the next piece of code in our segment of code , we have the command giving $ <var:E> * <var:m> $ into $ <var:E>$ . This code redefines the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:8> + <nat:1> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> \} $ into the condition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:10> + <nat:2> \times <var:p> ^ <nat:9> + <nat:1> \times <var:p> ^ <nat:8> + <nat:4> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + \} $ . Taking a look at the following piece of code in our code segment , we see the variable assignmet command \verb | <var:E> := <var:E> * <var:m> ; | . This forwards the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:10> + <nat:2> \times <var:p> ^ <nat:9> + <nat:1> \times <var:p> ^ <nat:8> + <nat:4> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + \} $ toward $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:11> + <nat:2> \times <var:p> ^ <nat:10> + <nat:1> \times <var:p> ^ <nat:9> + <nat:4> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + \} $ . This is guaranteed using the assignment inference rule obtained from typical Hoare techniques . Considering the following step contained in our set of commands , we have the variable binding line \verb | <var:E> := <nat:2> + <var:E> * <var:m> ; | . This redefines the precondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:11> + <nat:2> \times <var:p> ^ <nat:10> + <nat:1> \times <var:p> ^ <nat:9> + <nat:4> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + \} $ into $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:12> + <nat:2> \times <var:p> ^ <nat:11> + <nat:1> \times <var:p> ^ <nat:10> + <nat:4> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:8> + <nat:4> \times <var:p> ^ <nat:7> + <nat:1> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \} $ . This is known to be sound through the assignment scheme defined in usual Hoare reasoning . Taking a look at the following bit of code seen in our set of instructions , we have the variable binding command giving $ <nat:3> + <var:E> * <var:m$ as $ <var:E>$ . This statement transfers the condition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:12> + <nat:2> \times <var:p> ^ <nat:11> + <nat:1> \times <var:p> ^ <nat:10> + <nat:4> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:8> + <nat:4> \times <var:p> ^ <nat:7> + <nat:1> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \} $ to the postcondition $ \{ <var:m> = <var:p> \land <var:E> = <nat:1> \times <var:p> ^ <nat:13> + <nat:2> \times <var:p> ^ <nat:12> + <nat:1> \times <var:p> ^ <nat:11> + <nat:4> \times <var:p> ^ <nat:10> + <nat:2> \times <var:p> ^ <nat:9> + <nat:4> \times <var:p> ^ <nat:8> + <nat:1> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> + <nat:3> \} $ . This is deduced with the assignment inference rule obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:m> = <var:p> }} <var:E> := <nat:1> ; <var:E> := <nat:2> + <var:E> * <var:m> ; <var:E> := <nat:1> + <var:E> * <var:m> ; <var:E> := <nat:4> + <var:E> * <var:m> ; <var:E> := <nat:2> + <var:E> * <var:m> ; <var:E> := <nat:4> + <var:E> * <var:m> ; <var:E> := <var:E> * <var:m> ; <var:E> := <nat:1> + <var:E> * <var:m> ; <var:E> := <nat:1> + <var:E> * <var:m> ; <var:E> := <nat:4> + <var:E> * <var:m> ; <var:E> := <var:E> * <var:m> ; <var:E> := <var:E> * <var:m> ; <var:E> := <nat:2> + <var:E> * <var:m> ; <var:E> := <nat:3> + <var:E> * <var:m> {{ <var:E> = <nat:1> * <var:p> ^ <nat:13> + <nat:2> * <var:p> ^ <nat:12> + <nat:1> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:11> + <nat:2> * <var:p> ^ <nat:10> + <nat:1> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:12> + <nat:2> * <var:p> ^ <nat:11> + <nat:1> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:p> /\ <var:E> = <nat:1> * <var:p> ^ <nat:13> + <nat:2> * <var:p> ^ <nat:12> + <nat:1> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 