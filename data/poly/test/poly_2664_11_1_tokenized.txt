\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:a> ; <var:O2> := <var:O1> * <var:a> ; <var:O3> := <var:O2> * <var:a> ; <var:O0> := <nat:7> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:5> ; <var:O3> := <var:O3> * <nat:6> ; <var:q> := <var:O3> <var:q> := <var:q> + <var:O2> <var:q> := <var:q> + <var:O1> <var:q> := <var:q> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:a> = <var:A> $ prior to interpreting our code segment it holds that we see $ <var:q> = <nat:6> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this segment of code is demonstrated using standard Hoare logic . Going to the next step , the binding command \verb | <var:O1> := <var:a> ; | . This statement transfers the condition $ \{ <var:a> = <var:A> \} $ as $ \{ <var:a> = <var:A> \land <var:O1> = <var:A> \} $ . This is shown with the assignment inference rule from usual Hoare reasoning . Taking another step toward the subsequent statement in the program , we have the line giving $ <var:O1> * <var:a> $ to $ <var:O2>$ . This command moves $ \{ <var:a> = <var:A> \land <var:O1> = <var:A> \} $ as $ \{ <var:a> = <var:A> \land <var:O1> = <var:A> \land <var:O2> = <var:A> ^ <nat:2> \} $ . Advancing , the variable update line yielding $ <var:O2> * <var:a> $ to $ <var:O3>$ . This statement transfers the condition $ \{ <var:a> = <var:A> \land <var:O1> = <var:A> \land <var:O2> = <var:A> ^ <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:A> \land <var:O1> = <var:A> \land <var:O2> = <var:A> ^ <nat:2> \land <var:O3> = <var:A> ^ <nat:3> \} $ . Jumping to the next step in the series of commands , we see the variable binding line \verb | <var:O0> := <nat:7> ; | . This moves the precondition $ \{ <var:a> = <var:A> \land <var:O1> = <var:A> \land <var:O2> = <var:A> ^ <nat:2> \land <var:O3> = <var:A> ^ <nat:3> \} $ as the postcondition $ \{ <var:a> = <var:A> \land <var:O1> = <var:A> \land <var:O2> = <var:A> ^ <nat:2> \land <var:O3> = <var:A> ^ <nat:3> \land <var:O0> = <nat:7> \} $ . Further , we see the variable assignmet command \verb | <var:O1> := <var:O1> * <nat:9> ; | . This takes $ \{ <var:a> = <var:A> \land <var:O1> = <var:A> \land <var:O2> = <var:A> ^ <nat:2> \land <var:O3> = <var:A> ^ <nat:3> \land <var:O0> = <nat:7> \} $ to the postcondition $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O2> = <var:A> ^ <nat:2> \land <var:O3> = <var:A> ^ <nat:3> \land <var:O0> = <nat:7> \} $ . Taking another step toward the following line seen in the set of instructions , the assignment line assigning $ <var:O2> * <nat:5> $ into $ <var:O2>$ . This code takes $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O2> = <var:A> ^ <nat:2> \land <var:O3> = <var:A> ^ <nat:3> \land <var:O0> = <nat:7> \} $ into $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O2> = <nat:5> \times <var:A> ^ <nat:2> \land <var:O3> = <var:A> ^ <nat:3> \land <var:O0> = <nat:7> \} $ . Moving onward , we see the variable binding statement assigning $ <var:O3> * <nat:6> $ to $ <var:O3>$ . This code redefines $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O2> = <nat:5> \times <var:A> ^ <nat:2> \land <var:O3> = <var:A> ^ <nat:3> \land <var:O0> = <nat:7> \} $ as the condition $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O2> = <nat:5> \times <var:A> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:A> ^ <nat:3> \land <var:O0> = <nat:7> \} $ . Observing the proceeding piece of code contained in the set of instructions , we see the binding command binding $ <var:O3$ as $ <var:q>$ . This statement transfers $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O2> = <nat:5> \times <var:A> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:A> ^ <nat:3> \land <var:O0> = <nat:7> \} $ as the condition $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O2> = <nat:5> \times <var:A> ^ <nat:2> \land <var:O0> = <nat:7> \land <var:q> = <nat:6> \times <var:A> ^ <nat:3> \} $ . Taking another step toward the proceeding piece of code found in our program , we see the binding code \verb | <var:q> := <var:q> + <var:O2> | . This command redefines the condition $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O2> = <nat:5> \times <var:A> ^ <nat:2> \land <var:O0> = <nat:7> \land <var:q> = <nat:6> \times <var:A> ^ <nat:3> \} $ toward the postcondition $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O0> = <nat:7> \land <var:q> = <nat:6> \times <var:A> ^ <nat:3> + <nat:5> \times <var:A> ^ <nat:2> \} $ . Taking another step toward the proceeding statement in our set of commands , the binding statement \verb | <var:q> := <var:q> + <var:O1> | . This advances the condition $ \{ <var:a> = <var:A> \land <var:O1> = <nat:9> \times <var:A> \land <var:O0> = <nat:7> \land <var:q> = <nat:6> \times <var:A> ^ <nat:3> + <nat:5> \times <var:A> ^ <nat:2> \} $ to $ \{ <var:a> = <var:A> \land <var:O0> = <nat:7> \land <var:q> = <nat:6> \times <var:A> ^ <nat:3> + <nat:5> \times <var:A> ^ <nat:2> + <nat:9> \times <var:A> \} $ . This is given by the assignment scheme given in usual Hoare techniques . Honing in on the following piece of code found in the segment of code , we have the command \verb | <var:q> := <var:q> + <var:O0> | . This redefines $ \{ <var:a> = <var:A> \land <var:O0> = <nat:7> \land <var:q> = <nat:6> \times <var:A> ^ <nat:3> + <nat:5> \times <var:A> ^ <nat:2> + <nat:9> \times <var:A> \} $ to $ \{ <var:a> = <var:A> \land <var:q> = <nat:6> \times <var:A> ^ <nat:3> + <nat:5> \times <var:A> ^ <nat:2> + <nat:9> \times <var:A> + <nat:7> \} $ . This is ensured by the assignment inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:a> ; <var:O2> := <var:O1> * <var:a> ; <var:O3> := <var:O2> * <var:a> ; <var:O0> := <nat:7> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:5> ; <var:O3> := <var:O3> * <nat:6> ; <var:q> := <var:O3> <var:q> := <var:q> + <var:O2> <var:q> := <var:q> + <var:O1> <var:q> := <var:q> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:a> = <var:A> }} <def:poly> {{ <var:q> = <nat:6> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <var:A> /\ <var:O2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <var:A> /\ <var:O2> = <var:A> ^ <nat:2> /\ <var:O3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <var:A> /\ <var:O2> = <var:A> ^ <nat:2> /\ <var:O3> = <var:A> ^ <nat:3> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <nat:9> * <var:A> /\ <var:O2> = <var:A> ^ <nat:2> /\ <var:O3> = <var:A> ^ <nat:3> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <nat:9> * <var:A> /\ <var:O2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:O3> = <var:A> ^ <nat:3> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <nat:9> * <var:A> /\ <var:O2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:O3> = <nat:6> * <var:A> ^ <nat:3> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <nat:9> * <var:A> /\ <var:O2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:O0> = <nat:7> /\ <var:q> = <nat:6> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O1> = <nat:9> * <var:A> /\ <var:O0> = <nat:7> /\ <var:q> = <nat:6> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:O0> = <nat:7> /\ <var:q> = <nat:6> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:q> = <nat:6> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 