\begin{document} \begin{theorem} We define a set of commands as follows \begin{verbatim} <var:S1> := <var:c> ; <var:S2> := <var:S1> * <var:c> ; <var:S0> := <nat:8> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:8> ; <var:X> := <var:S2> <var:X> := <var:X> + <var:S1> <var:X> := <var:X> + <var:S0> \end{verbatim} Given that we have $ <var:c> = <var:L> $ prior to executing the code segment then we have $ <var:X> = <nat:8> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:c> = <var:L> \} \\ <var:S1> := <var:c> ; \\ \{ <var:c> = <var:L> \land <var:S1> = <var:L> \} \\ <var:S2> := <var:S1> * <var:c> ; \\ \{ <var:c> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:c> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S0> = <nat:8> \} \\ <var:S1> := <var:S1> * <nat:2> ; \\ \{ <var:c> = <var:L> \land <var:S1> = <nat:2> \cdot <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S0> = <nat:8> \} \\ <var:S2> := <var:S2> * <nat:8> ; \\ \{ <var:c> = <var:L> \land <var:S1> = <nat:2> \cdot <var:L> \land <var:S2> = <nat:8> \cdot <var:L> ^ <nat:2> \land <var:S0> = <nat:8> \} \\ <var:X> := <var:S2> \\ \{ <var:c> = <var:L> \land <var:S1> = <nat:2> \cdot <var:L> \land <var:S0> = <nat:8> \land <var:X> = <nat:8> \cdot <var:L> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:S1> \\ \{ <var:c> = <var:L> \land <var:S0> = <nat:8> \land <var:X> = <nat:8> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> \} \\ <var:X> := <var:X> + <var:S0> \\ \{ <var:c> = <var:L> \land <var:X> = <nat:8> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:8> \} \end{eqnarray} Considering the above , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:c> = <var:L> }} <var:S1> := <var:c> ; <var:S2> := <var:S1> * <var:c> ; <var:S0> := <nat:8> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:8> ; <var:X> := <var:S2> <var:X> := <var:X> + <var:S1> <var:X> := <var:X> + <var:S0> {{ <var:X> = <nat:8> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:S1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:S1> = <var:L> /\ <var:S2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:S1> = <var:L> /\ <var:S2> = <var:L> ^ <nat:2> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:S1> = <nat:2> * <var:L> /\ <var:S2> = <var:L> ^ <nat:2> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:S1> = <nat:2> * <var:L> /\ <var:S2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:S1> = <nat:2> * <var:L> /\ <var:S0> = <nat:8> /\ <var:X> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:S0> = <nat:8> /\ <var:X> = <nat:8> * <var:L> ^ <nat:2> + <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:X> = <nat:8> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 