\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N> := <nat:3> ; <var:N> := <nat:1> + <var:N> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:C> = <var:b> $ before interpreting our set of instructions , it holds that we have $ <var:N> = <nat:3> \times <var:b> + <nat:1> $ once code has terminated . \end{theorem} \begin{proof} Observe this decorated code . \begin{eqnarray} \{ <var:C> = <var:b> \} \\ <var:N> := <nat:3> ; \\ \{ <var:C> = <var:b> \land <var:N> = <nat:3> \} \\ <var:N> := <nat:1> + <var:N> * <var:C> \\ \{ <var:C> = <var:b> \land <var:N> = <nat:3> \cdot <var:b> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:3> ; <var:N> := <nat:1> + <var:N> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:C> = <var:b> }} <def:poly> {{ <var:N> = <nat:3> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:b> /\ <var:N> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:b> /\ <var:N> = <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 