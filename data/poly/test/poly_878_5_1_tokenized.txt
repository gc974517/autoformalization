\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:e> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:3> ; <var:o> := <var:d1> <var:o> := <var:o> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:e> = <var:j> $ before the execution of the series of instructions it must be that we see $ <var:o> = <nat:3> * <var:j> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning produces : \begin{eqnarray} \{ <var:e> = <var:j> \} \\ <var:d1> := <var:e> ; \\ \{ <var:e> = <var:j> \land <var:d1> = <var:j> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:e> = <var:j> \land <var:d1> = <var:j> \land <var:d0> = <nat:4> \} \\ <var:d1> := <var:d1> * <nat:3> ; \\ \{ <var:e> = <var:j> \land <var:d1> = <nat:3> \cdot <var:j> \land <var:d0> = <nat:4> \} \\ <var:o> := <var:d1> \\ \{ <var:e> = <var:j> \land <var:d0> = <nat:4> \land <var:o> = <nat:3> \cdot <var:j> \} \\ <var:o> := <var:o> + <var:d0> \\ \{ <var:e> = <var:j> \land <var:o> = <nat:3> \cdot <var:j> + <nat:4> \} \end{eqnarray} Thus , our set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:e> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:3> ; <var:o> := <var:d1> <var:o> := <var:o> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:e> = <var:j> }} <def:poly> {{ <var:o> = <nat:3> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:d1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:d1> = <var:j> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:d1> = <nat:3> * <var:j> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:d0> = <nat:4> /\ <var:o> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:o> = <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 