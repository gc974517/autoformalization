\begin{document} \begin{theorem} Take a set of commands as follows \begin{verbatim} <var:c0> := <nat:1> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:J> ; <var:M> := <var:c1> ; <var:M> := <var:M> + <var:c0> \end{verbatim} Allow --- for positive coefficients $ <var:S> $ --- $ <var:J> = <var:S> $ prior to evaluating our list of instructions , it must be that we have $ <var:M> = <nat:1> * <var:S> + <nat:1> $ after set of commands has finished . \end{theorem} \begin{proof} The argument for the set of commands is evident through usual Hoare reasoning . Moving on to the next bit of code contained in the series of commands , we see the variable update statement \verb | <var:c0> := <nat:1> ; | . This takes the precondition $ \{ <var:J> = <var:S> \} $ into the condition $ \{ <var:J> = <var:S> \land <var:c0> = <nat:1> \} $ . Advancing to the following step in our program , we have the assignment command assigning $ <nat:1> $ toward $ <var:c1>$ . This takes the condition $ \{ <var:J> = <var:S> \land <var:c0> = <nat:1> \} $ as the condition $ \{ <var:J> = <var:S> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \} $ . Advancing on , we have the assignment code \verb | <var:c1> := <var:c1> * <var:J> ; | . This line transfers $ \{ <var:J> = <var:S> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \} $ to $ \{ <var:J> = <var:S> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> * <var:S> \} $ . Moving forward to the next step , we have the variable update statement \verb | <var:M> := <var:c1> ; | . This takes the condition $ \{ <var:J> = <var:S> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> * <var:S> \} $ toward the postcondition $ \{ <var:J> = <var:S> \land <var:c0> = <nat:1> \land <var:M> = <nat:1> * <var:S> \} $ . Moving on to the upcoming command found in the set of instructions , we see the variable update command letting $ <var:M> + <var:c0$ to $ <var:M>$ . This forwards the condition $ \{ <var:J> = <var:S> \land <var:c0> = <nat:1> \land <var:M> = <nat:1> * <var:S> \} $ toward $ \{ <var:J> = <var:S> \land <var:M> = <nat:1> * <var:S> + <nat:1> \} $ . This is guaranteed using the assignment rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:J> = <var:S> }} <var:c0> := <nat:1> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:J> ; <var:M> := <var:c1> ; <var:M> := <var:M> + <var:c0> {{ <var:M> = <nat:1> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:c0> = <nat:1> /\ <var:M> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:M> = <nat:1> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 