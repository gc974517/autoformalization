\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:8> ; <var:A> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Assuming --- assuming some positive numbers $ <var:y> $ --- it to hold that $ <var:u> = <var:y> $ before the evaluation of this series of commands it must be that we have $ <var:A> = <nat:8> $ after code is done executing . \end{theorem} \begin{proof} The method of proof for our set of commands is accomplished with standard Hoare logic . Moving forward to the subsequent command in our series of instructions , the variable update command \verb | <var:m0> := <nat:8> ; | . This forwards the condition $ \{ <var:u> = <var:y> \} $ toward the condition $ \{ <var:u> = <var:y> \land <var:m0> = <nat:8> \} $ . This is given using the assignment scheme obtained from standard Hoare reasoning . Stepping forward , we see the assignment command \verb | <var:A> := <var:m0> | . This command takes the condition $ \{ <var:u> = <var:y> \land <var:m0> = <nat:8> \} $ as the postcondition $ \{ <var:u> = <var:y> \land <var:A> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:8> ; <var:A> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:u> = <var:y> }} <def:poly> {{ <var:A> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:A> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 