\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:s> := <nat:2> ; <var:s> := <nat:2> + <var:s> * <var:e> ; <var:s> := <nat:3> + <var:s> * <var:e> ; <var:s> := <nat:1> + <var:s> * <var:e> ; <var:s> := <nat:2> + <var:s> * <var:e> ; <var:s> := <nat:3> + <var:s> * <var:e> \end{verbatim} Assume --- with some natural coefficients $ <var:Z> $ --- that we have $ <var:e> = <var:Z> $ ahead of the execution of our program , it must be that we have $ <var:s> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this code is accomplished with typical Hoare techniques . Taking another step toward the subsequent piece of code contained in our list of instructions , we have the variable update code binding $ <nat:2> $ into $ <var:s>$ . This line redefines $ \{ <var:e> = <var:Z> \} $ into the condition $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \} $ . Advancing to the subsequent piece of code found in the series of instructions , the variable binding code \verb | <var:s> := <nat:2> + <var:s> * <var:e> ; | . This transfers the condition $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \} $ to the postcondition $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> + <nat:2> \} $ . This is ensured with the assignment law given by typical Hoare techniques . Observing the upcoming step contained in our program , we see the command \verb | <var:s> := <nat:3> + <var:s> * <var:e> ; | . This takes $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> + <nat:2> \} $ as $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:3> \} $ . This is deduced by the assignment scheme given by standard Hoare reasoning . Moving on to the proceeding command in the series of instructions , we have the environment update line letting $ <nat:1> + <var:s> * <var:e> $ into $ <var:s>$ . This advances the condition $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:3> \} $ to the condition $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:1> \} $ . This is known to be sound using the assignment rule from typical Hoare reasoning . Looking at the upcoming step seen in the list of commands , the variable update line letting $ <nat:2> + <var:s> * <var:e> $ toward $ <var:s>$ . This code advances $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:1> \} $ into the postcondition $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> ^ <nat:4> + <nat:2> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:2> \} $ . Moving forward , we see the environment update statement \verb | <var:s> := <nat:3> + <var:s> * <var:e> | . This advances the condition $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> ^ <nat:4> + <nat:2> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:2> \} $ as the postcondition $ \{ <var:e> = <var:Z> \land <var:s> = <nat:2> \times <var:Z> ^ <nat:5> + <nat:2> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:3> \} $ . This is shown by the assignment rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:e> = <var:Z> }} <var:s> := <nat:2> ; <var:s> := <nat:2> + <var:s> * <var:e> ; <var:s> := <nat:3> + <var:s> * <var:e> ; <var:s> := <nat:1> + <var:s> * <var:e> ; <var:s> := <nat:2> + <var:s> * <var:e> ; <var:s> := <nat:3> + <var:s> * <var:e> {{ <var:s> = <nat:2> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:s> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:s> = <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:s> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:s> = <nat:2> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:s> = <nat:2> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:s> = <nat:2> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 