\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:o> ; <var:s0> := <nat:6> ; <var:s1> := <var:s1> * <nat:7> ; <var:T> := <var:s1> <var:T> := <var:T> + <var:s0> \end{verbatim} Allow that we have $ <var:o> = <var:f> $ --- assuming some positive coefficients $ <var:f> $ --- ahead of interpreting this program it holds that $ <var:T> = <nat:7> \cdot <var:f> + <nat:6> $ after set of instructions exits . \end{theorem} \begin{proof} The flow of logic for our segment of code is shown using Hoare reasoning . Stepping forward , we see the assignment line \verb | <var:s1> := <var:o> ; | . This redefines the precondition $ \{ <var:o> = <var:f> \} $ to $ \{ <var:o> = <var:f> \land <var:s1> = <var:f> \} $ . Advancing , the code \verb | <var:s0> := <nat:6> ; | . This command moves the precondition $ \{ <var:o> = <var:f> \land <var:s1> = <var:f> \} $ into $ \{ <var:o> = <var:f> \land <var:s1> = <var:f> \land <var:s0> = <nat:6> \} $ . Advancing on , the environment update code \verb | <var:s1> := <var:s1> * <nat:7> ; | . This code redefines $ \{ <var:o> = <var:f> \land <var:s1> = <var:f> \land <var:s0> = <nat:6> \} $ toward the postcondition $ \{ <var:o> = <var:f> \land <var:s1> = <nat:7> \times <var:f> \land <var:s0> = <nat:6> \} $ . Jumping to the upcoming line of code found in the code segment , we have the binding code binding $ <var:s1$ to $ <var:T>$ . This command redefines the condition $ \{ <var:o> = <var:f> \land <var:s1> = <nat:7> \times <var:f> \land <var:s0> = <nat:6> \} $ to the postcondition $ \{ <var:o> = <var:f> \land <var:s0> = <nat:6> \land <var:T> = <nat:7> \times <var:f> \} $ . Now , we see the environment update code \verb | <var:T> := <var:T> + <var:s0> | . This code redefines the precondition $ \{ <var:o> = <var:f> \land <var:s0> = <nat:6> \land <var:T> = <nat:7> \times <var:f> \} $ into the postcondition $ \{ <var:o> = <var:f> \land <var:T> = <nat:7> \times <var:f> + <nat:6> \} $ . This is rigorously given through the assignment rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:o> = <var:f> }} <var:s1> := <var:o> ; <var:s0> := <nat:6> ; <var:s1> := <var:s1> * <nat:7> ; <var:T> := <var:s1> <var:T> := <var:T> + <var:s0> {{ <var:T> = <nat:7> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:s1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:s1> = <var:f> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:s1> = <nat:7> * <var:f> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:s0> = <nat:6> /\ <var:T> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:T> = <nat:7> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 