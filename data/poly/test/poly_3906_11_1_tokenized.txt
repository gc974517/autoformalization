\begin{document} \begin{theorem} Let the following code in \emph{Imp} such that \begin{verbatim} <var:T1> := <var:D> ; <var:T2> := <var:T1> * <var:D> ; <var:T3> := <var:T2> * <var:D> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:2> ; <var:T2> := <var:T2> * <nat:6> ; <var:T3> := <var:T3> * <nat:4> ; <var:Y> := <var:T3> <var:Y> := <var:Y> + <var:T2> <var:Y> := <var:Y> + <var:T1> <var:Y> := <var:Y> + <var:T0> \end{verbatim} Allow for some positive integer coefficients $ <var:q> $ that we have $ <var:D> = <var:q> $ before interpreting the segment of code it holds that $ <var:Y> = <nat:4> \times <var:q> ^ <nat:3> + <nat:6> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:2> $ when program has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:q> \} \\ <var:T1> := <var:D> ; \\ \{ <var:D> = <var:q> \land <var:T1> = <var:q> \} \\ <var:T2> := <var:T1> * <var:D> ; \\ \{ <var:D> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:D> ; \\ \{ <var:D> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \} \\ <var:T0> := <nat:2> ; \\ \{ <var:D> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:2> \} \\ <var:T1> := <var:T1> * <nat:2> ; \\ \{ <var:D> = <var:q> \land <var:T1> = <nat:2> * <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:2> \} \\ <var:T2> := <var:T2> * <nat:6> ; \\ \{ <var:D> = <var:q> \land <var:T1> = <nat:2> * <var:q> \land <var:T2> = <nat:6> * <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:2> \} \\ <var:T3> := <var:T3> * <nat:4> ; \\ \{ <var:D> = <var:q> \land <var:T1> = <nat:2> * <var:q> \land <var:T2> = <nat:6> * <var:q> ^ <nat:2> \land <var:T3> = <nat:4> * <var:q> ^ <nat:3> \land <var:T0> = <nat:2> \} \\ <var:Y> := <var:T3> \\ \{ <var:D> = <var:q> \land <var:T1> = <nat:2> * <var:q> \land <var:T2> = <nat:6> * <var:q> ^ <nat:2> \land <var:T0> = <nat:2> \land <var:Y> = <nat:4> * <var:q> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:T2> \\ \{ <var:D> = <var:q> \land <var:T1> = <nat:2> * <var:q> \land <var:T0> = <nat:2> \land <var:Y> = <nat:4> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:T1> \\ \{ <var:D> = <var:q> \land <var:T0> = <nat:2> \land <var:Y> = <nat:4> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:2> * <var:q> \} \\ <var:Y> := <var:Y> + <var:T0> \\ \{ <var:D> = <var:q> \land <var:Y> = <nat:4> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> \} \end{eqnarray} Applying Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:D> = <var:q> }} <var:T1> := <var:D> ; <var:T2> := <var:T1> * <var:D> ; <var:T3> := <var:T2> * <var:D> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:2> ; <var:T2> := <var:T2> * <nat:6> ; <var:T3> := <var:T3> * <nat:4> ; <var:Y> := <var:T3> <var:Y> := <var:Y> + <var:T2> <var:Y> := <var:Y> + <var:T1> <var:Y> := <var:Y> + <var:T0> {{ <var:Y> = <nat:4> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <var:q> /\ <var:T2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <var:q> /\ <var:T2> = <var:q> ^ <nat:2> /\ <var:T3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <var:q> /\ <var:T2> = <var:q> ^ <nat:2> /\ <var:T3> = <var:q> ^ <nat:3> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <nat:2> * <var:q> /\ <var:T2> = <var:q> ^ <nat:2> /\ <var:T3> = <var:q> ^ <nat:3> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <nat:2> * <var:q> /\ <var:T2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:T3> = <var:q> ^ <nat:3> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <nat:2> * <var:q> /\ <var:T2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:T3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <nat:2> * <var:q> /\ <var:T2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:T0> = <nat:2> /\ <var:Y> = <nat:4> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T1> = <nat:2> * <var:q> /\ <var:T0> = <nat:2> /\ <var:Y> = <nat:4> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:T0> = <nat:2> /\ <var:Y> = <nat:4> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:Y> = <nat:4> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 