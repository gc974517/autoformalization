\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:J1> := <var:O> ; <var:J2> := <var:J1> * <var:O> ; <var:J3> := <var:J2> * <var:O> ; <var:J4> := <var:J3> * <var:O> ; <var:J0> := <nat:9> ; <var:J2> := <var:J2> * <nat:5> ; <var:J3> := <var:J3> * <nat:2> ; <var:J4> := <var:J4> * <nat:3> ; <var:B> := <var:J4> <var:B> := <var:B> + <var:J3> <var:B> := <var:B> + <var:J2> <var:B> := <var:B> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Allow --- given all $ <var:b> \in \mathbb{Z}^+ $ --- it to be that $ <var:O> = <var:b> $ prior to interpreting our series of commands , it follows that $ <var:B> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> ^ <nat:3> + <nat:5> \cdot <var:b> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our segment of code is accomplished using Hoare techniques . Observing the proceeding steps seen in the program , \[ \begin{tabular} {rcl} \{ <var:O> = <var:b> \} & <var:J1> := <var:O> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \} & <var:J2> := <var:J1> * <var:O> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \} & <var:J3> := <var:J2> * <var:O> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \} & <var:J4> := <var:J3> * <var:O> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \} & <var:J0> := <nat:9> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:9> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:9> \} & <var:J2> := <var:J2> * <nat:5> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:9> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:9> \} & <var:J3> := <var:J3> * <nat:2> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:2> \cdot <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:9> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:2> \cdot <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:9> \} & <var:J4> := <var:J4> * <nat:3> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:2> \cdot <var:b> ^ <nat:3> \land <var:J4> = <nat:3> \cdot <var:b> ^ <nat:4> \land <var:J0> = <nat:9> \} \end{tabular} This is ensured through the assignment scheme found in typical Hoare techniques . Advancing to the following pieces of code contained in our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:b> \} & <var:J1> := <var:O> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \} & <var:J2> := <var:J1> * <var:O> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \} \\ \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \} & <var:J3> := <var:J2> * <var:O> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \} \end{tabular} This is ensured by the environment update inference rule given in typical Hoare techniques . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:O> = <var:b> \} & <var:J1> := <var:O> & \{ <var:O> = <var:b> \land <var:J1> = <var:b> \} \end{tabular} This is shown through the variable assignmet inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Definition <def:poly> := <var:J1> := <var:O> ; <var:J2> := <var:J1> * <var:O> ; <var:J3> := <var:J2> * <var:O> ; <var:J4> := <var:J3> * <var:O> ; <var:J0> := <nat:9> ; <var:J2> := <var:J2> * <nat:5> ; <var:J3> := <var:J3> * <nat:2> ; <var:J4> := <var:J4> * <nat:3> ; <var:B> := <var:J4> <var:B> := <var:B> + <var:J3> <var:B> := <var:B> + <var:J2> <var:B> := <var:B> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:O> = <var:b> }} <def:poly> {{ <var:B> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:b> ^ <nat:3> /\ <var:J4> = <nat:3> * <var:b> ^ <nat:4> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:b> ^ <nat:3> /\ <var:J0> = <nat:9> /\ <var:B> = <nat:3> * <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:J0> = <nat:9> /\ <var:B> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:J1> = <var:b> /\ <var:J0> = <nat:9> /\ <var:B> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:B> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 