\begin{document} \begin{theorem} Consider a code as follows \begin{verbatim} <var:Z1> := <var:f> ; <var:Z2> := <var:Z1> * <var:f> ; <var:Z3> := <var:Z2> * <var:f> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z2> := <var:Z2> * <nat:7> ; <var:Z3> := <var:Z3> * <nat:7> ; <var:T> := <var:Z3> <var:T> := <var:T> + <var:Z2> <var:T> := <var:T> + <var:Z1> <var:T> := <var:T> + <var:Z0> \end{verbatim} Allow that we have $ <var:f> = <var:h> $ for all natural numbers $ <var:h> $ before the execution of the set of commands then we see $ <var:T> = <nat:7> \cdot <var:h> ^ <nat:3> + <nat:7> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:2> $ after set of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions is shown by Hoare reasoning . Moving forward to the following line found in our segment of code , we have the variable update line yielding $ <var:f> $ to $ <var:Z1>$ . This code forwards the condition $ \{ <var:f> = <var:h> \} $ toward $ \{ <var:f> = <var:h> \land <var:Z1> = <var:h> \} $ . This is guaranteed by the assignment rule defined by typical Hoare techniques . Advancing to the next command found in our set of commands , the line \verb | <var:Z2> := <var:Z1> * <var:f> ; | . This advances $ \{ <var:f> = <var:h> \land <var:Z1> = <var:h> \} $ as the condition $ \{ <var:f> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \} $ . Honing in on the proceeding bit of code in our set of commands , we see the variable binding code yielding $ <var:Z2> * <var:f> $ as $ <var:Z3>$ . This statement takes the condition $ \{ <var:f> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \} $ toward the condition $ \{ <var:f> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \} $ . This is deduced with the assignment inference rule given by Hoare techniques . Advancing to the next step , the line \verb | <var:Z0> := <nat:2> ; | . This statement takes $ \{ <var:f> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \} $ as the condition $ \{ <var:f> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ . Immediately following , we see the environment update code assigning $ <var:Z1> * <nat:2> $ to $ <var:Z1>$ . This redefines the condition $ \{ <var:f> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ toward $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ . This is rigorously given through the assignment law given in usual Hoare techniques . Considering the next command seen in the segment of code , the variable binding code letting $ <var:Z2> * <nat:7> $ as $ <var:Z2>$ . This command advances the condition $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ toward the postcondition $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z2> = <nat:7> * <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ . Honing in on the subsequent step in our program , the environment update line \verb | <var:Z3> := <var:Z3> * <nat:7> ; | . This statement redefines $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z2> = <nat:7> * <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ toward the postcondition $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z2> = <nat:7> * <var:h> ^ <nat:2> \land <var:Z3> = <nat:7> * <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ . This is shown to be logically sound with the assignment scheme given by usual Hoare reasoning . Moving forward to the following statement in the series of instructions , the line \verb | <var:T> := <var:Z3> | . This code forwards the precondition $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z2> = <nat:7> * <var:h> ^ <nat:2> \land <var:Z3> = <nat:7> * <var:h> ^ <nat:3> \land <var:Z0> = <nat:2> \} $ toward the postcondition $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z2> = <nat:7> * <var:h> ^ <nat:2> \land <var:Z0> = <nat:2> \land <var:T> = <nat:7> * <var:h> ^ <nat:3> \} $ . This is deduced through the assignment rule from Hoare logic . Following , we see the variable update command giving $ <var:T> + <var:Z2$ toward $ <var:T>$ . This code advances the precondition $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z2> = <nat:7> * <var:h> ^ <nat:2> \land <var:Z0> = <nat:2> \land <var:T> = <nat:7> * <var:h> ^ <nat:3> \} $ toward $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z0> = <nat:2> \land <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> \} $ . Shifting focus toward the next step contained in the code , the assignment line binding $ <var:T> + <var:Z1$ toward $ <var:T>$ . This line transfers the condition $ \{ <var:f> = <var:h> \land <var:Z1> = <nat:2> * <var:h> \land <var:Z0> = <nat:2> \land <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> \} $ to the condition $ \{ <var:f> = <var:h> \land <var:Z0> = <nat:2> \land <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> \} $ . Further , the environment update statement giving $ <var:T> + <var:Z0$ to $ <var:T>$ . This command forwards $ \{ <var:f> = <var:h> \land <var:Z0> = <nat:2> \land <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> \} $ toward $ \{ <var:f> = <var:h> \land <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> \} $ . This is guaranteed through the assignment law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:f> = <var:h> }} <var:Z1> := <var:f> ; <var:Z2> := <var:Z1> * <var:f> ; <var:Z3> := <var:Z2> * <var:f> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z2> := <var:Z2> * <nat:7> ; <var:Z3> := <var:Z3> * <nat:7> ; <var:T> := <var:Z3> <var:T> := <var:T> + <var:Z2> <var:T> := <var:T> + <var:Z1> <var:T> := <var:T> + <var:Z0> {{ <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <nat:2> * <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <nat:2> * <var:h> /\ <var:Z2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <nat:2> * <var:h> /\ <var:Z2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:Z3> = <nat:7> * <var:h> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <nat:2> * <var:h> /\ <var:Z2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:Z0> = <nat:2> /\ <var:T> = <nat:7> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z1> = <nat:2> * <var:h> /\ <var:Z0> = <nat:2> /\ <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:Z0> = <nat:2> /\ <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:T> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 