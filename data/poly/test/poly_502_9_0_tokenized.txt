\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:Z> ; <var:p2> := <nat:3> ; <var:p2> := <var:p2> * <var:Z> ; <var:p2> := <var:p2> * <var:Z> ; <var:F> := <var:p2> ; <var:F> := <var:F> + <var:p1> ; <var:F> := <var:F> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:Z> = <var:t> $ --- for every positive integers $ <var:t> $ --- prior to the execution of our list of commands , it must be that we see $ <var:F> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> + <nat:3> $ after code segment has finished executing . \end{theorem} \begin{proof} Using typical Hoare techniques produces : \begin{eqnarray} \{ <var:Z> = <var:t> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:Z> = <var:t> \land <var:p0> = <nat:3> \} \\ <var:p1> := <nat:9> ; \\ \{ <var:Z> = <var:t> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \} \\ <var:p1> := <var:p1> * <var:Z> ; \\ \{ <var:Z> = <var:t> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \times <var:t> \} \\ <var:p2> := <nat:3> ; \\ \{ <var:Z> = <var:t> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \times <var:t> \land <var:p2> = <nat:3> \} \\ <var:p2> := <var:p2> * <var:Z> ; \\ \{ <var:Z> = <var:t> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \times <var:t> \land <var:p2> = <nat:3> \times <var:t> \} \\ <var:p2> := <var:p2> * <var:Z> ; \\ \{ <var:Z> = <var:t> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \times <var:t> \land <var:p2> = <nat:3> \times <var:t> ^ <nat:2> \} \\ <var:F> := <var:p2> ; \\ \{ <var:Z> = <var:t> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \times <var:t> \land <var:F> = <nat:3> \times <var:t> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:p1> ; \\ \{ <var:Z> = <var:t> \land <var:p0> = <nat:3> \land <var:F> = <nat:3> \times <var:t> ^ <nat:2> + <nat:9> \times <var:t> \} \\ <var:F> := <var:F> + <var:p0> \\ \{ <var:Z> = <var:t> \land <var:F> = <nat:3> \times <var:t> ^ <nat:2> + <nat:9> \times <var:t> + <nat:3> \} \end{eqnarray} Thusly , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:Z> ; <var:p2> := <nat:3> ; <var:p2> := <var:p2> * <var:Z> ; <var:p2> := <var:p2> * <var:Z> ; <var:F> := <var:p2> ; <var:F> := <var:F> + <var:p1> ; <var:F> := <var:F> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Z> = <var:t> }} <def:poly> {{ <var:F> = <nat:3> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:t> /\ <var:p2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:t> /\ <var:p2> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:t> /\ <var:p2> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:t> /\ <var:F> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:p0> = <nat:3> /\ <var:F> = <nat:3> * <var:t> ^ <nat:2> + <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:t> /\ <var:F> = <nat:3> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 