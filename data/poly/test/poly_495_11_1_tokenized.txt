\begin{document} \begin{theorem} We define a program : \begin{verbatim} <var:g1> := <var:q> ; <var:g2> := <var:g1> * <var:q> ; <var:g3> := <var:g2> * <var:q> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:2> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:8> ; <var:B> := <var:g3> <var:B> := <var:B> + <var:g2> <var:B> := <var:B> + <var:g1> <var:B> := <var:B> + <var:g0> \end{verbatim} Allowing for all $ <var:r> \in \mathbb{Z}^+ $ $ <var:q> = <var:r> $ before interpreting our segment of code it must be that $ <var:B> = <nat:8> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:9> $ after series of commands finishes . \end{theorem} \begin{proof} The argument for our list of commands is given using Hoare logic . Jumping to the following bits of codecontained in the list of commands , we see \verb | { <var:q> = <var:r> } <var:g1> := <var:q> { <var:q> = <var:r> \land <var:g1> = <var:r> } | , \verb | { <var:q> = <var:r> \land <var:g1> = <var:r> } <var:g2> := <var:g1> * <var:q> { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> } | , \verb | { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> } <var:g3> := <var:g2> * <var:q> { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g3> = <var:r> ^ <nat:3> } | , \verb | { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g3> = <var:r> ^ <nat:3> } <var:g0> := <nat:9> { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g3> = <var:r> ^ <nat:3> \land <var:g0> = <nat:9> } | and \verb | { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g3> = <var:r> ^ <nat:3> \land <var:g0> = <nat:9> } <var:g1> := <var:g1> * <nat:2> { <var:q> = <var:r> \land <var:g1> = <nat:2> * <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g3> = <var:r> ^ <nat:3> \land <var:g0> = <nat:9> } | . Paying attention to the following pieces of code seen in our segment of code , we have \verb | { <var:q> = <var:r> } <var:g1> := <var:q> { <var:q> = <var:r> \land <var:g1> = <var:r> } | , \verb | { <var:q> = <var:r> \land <var:g1> = <var:r> } <var:g2> := <var:g1> * <var:q> { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> } | , \verb | { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> } <var:g3> := <var:g2> * <var:q> { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g3> = <var:r> ^ <nat:3> } | and \verb | { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g3> = <var:r> ^ <nat:3> } <var:g0> := <nat:9> { <var:q> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g3> = <var:r> ^ <nat:3> \land <var:g0> = <nat:9> } | . Advancing to the subsequent step in the segment of code , we see \verb | { <var:q> = <var:r> } <var:g1> := <var:q> { <var:q> = <var:r> \land <var:g1> = <var:r> } | . Moving forward to the next step , we see \verb | { <var:q> = <var:r> } <var:g1> := <var:q> { <var:q> = <var:r> \land <var:g1> = <var:r> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:q> = <var:r> }} <var:g1> := <var:q> ; <var:g2> := <var:g1> * <var:q> ; <var:g3> := <var:g2> * <var:q> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:2> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:8> ; <var:B> := <var:g3> <var:B> := <var:B> + <var:g2> <var:B> := <var:B> + <var:g1> <var:B> := <var:B> + <var:g0> {{ <var:B> = <nat:8> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <var:r> /\ <var:g2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <var:r> /\ <var:g2> = <var:r> ^ <nat:2> /\ <var:g3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <var:r> /\ <var:g2> = <var:r> ^ <nat:2> /\ <var:g3> = <var:r> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <nat:2> * <var:r> /\ <var:g2> = <var:r> ^ <nat:2> /\ <var:g3> = <var:r> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <nat:2> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:g3> = <var:r> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <nat:2> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:g3> = <nat:8> * <var:r> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <nat:2> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:g0> = <nat:9> /\ <var:B> = <nat:8> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g1> = <nat:2> * <var:r> /\ <var:g0> = <nat:9> /\ <var:B> = <nat:8> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:g0> = <nat:9> /\ <var:B> = <nat:8> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:B> = <nat:8> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 