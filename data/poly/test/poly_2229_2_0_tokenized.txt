\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:5> ; <var:W> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:A> = <var:q> $ prior to evaluating our list of commands , then we see $ <var:W> = <nat:5> $ once segment of code finishes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning yields : \begin{eqnarray} \{ <var:A> = <var:q> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:A> = <var:q> \land <var:L0> = <nat:5> \} \\ <var:W> := <var:L0> \\ \{ <var:A> = <var:q> \land <var:W> = <nat:5> \} \end{eqnarray} Considering the preceding argument , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:5> ; <var:W> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:A> = <var:q> }} <def:poly> {{ <var:W> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:W> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 