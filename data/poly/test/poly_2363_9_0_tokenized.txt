\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:1> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:W> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:W> ; <var:m2> := <var:m2> * <var:W> ; <var:g> := <var:m2> ; <var:g> := <var:g> + <var:m1> ; <var:g> := <var:g> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:W> = <var:R> $ for any $ <var:R> \in \mathbb{N} $ ahead of executing our code , it follows that we have $ <var:g> = <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> $ once series of commands has exited . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be demonstrated with Hoare logic . Taking a look at the following steps seen in our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:W> = <var:R> \} & <var:m0> := <nat:1> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \} \\ \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \} & <var:m1> := <nat:4> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \} \\ \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \} & <var:m1> := <var:m1> * <var:W> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \cdot <var:R> \} \end{tabular} This is shown through the assignment law defined by Hoare reasoning . Moving on , we have \[ \begin{tabular} {rcl} \{ <var:W> = <var:R> \} & <var:m0> := <nat:1> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \} \end{tabular} Moving on to the following statements contained in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:W> = <var:R> \} & <var:m0> := <nat:1> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \} \\ \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \} & <var:m1> := <nat:4> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \} \\ \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \} & <var:m1> := <var:m1> * <var:W> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \cdot <var:R> \} \\ \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \cdot <var:R> \} & <var:m2> := <nat:1> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \cdot <var:R> \land <var:m2> = <nat:1> \} \\ \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \cdot <var:R> \land <var:m2> = <nat:1> \} & <var:m2> := <var:m2> * <var:W> & \{ <var:W> = <var:R> \land <var:m0> = <nat:1> \land <var:m1> = <nat:4> \cdot <var:R> \land <var:m2> = <nat:1> \cdot <var:R> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m0> := <nat:1> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:W> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:W> ; <var:m2> := <var:m2> * <var:W> ; <var:g> := <var:m2> ; <var:g> := <var:g> + <var:m1> ; <var:g> := <var:g> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:W> = <var:R> }} <def:poly> {{ <var:g> = <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:R> /\ <var:m2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:R> /\ <var:m2> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:R> /\ <var:m2> = <nat:1> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:4> * <var:R> /\ <var:g> = <nat:1> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:m0> = <nat:1> /\ <var:g> = <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:g> = <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 