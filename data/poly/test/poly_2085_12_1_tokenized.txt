\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:J> ; <var:Z2> := <var:Z1> * <var:J> ; <var:Z3> := <var:Z2> * <var:J> ; <var:Z4> := <var:Z3> * <var:J> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:5> ; <var:Z2> := <var:Z2> * <nat:7> ; <var:Z4> := <var:Z4> * <nat:1> ; <var:Y> := <var:Z4> <var:Y> := <var:Y> + <var:Z2> <var:Y> := <var:Y> + <var:Z1> <var:Y> := <var:Y> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:J> = <var:R> $ ahead of the evaluation of the set of commands then $ <var:Y> = <nat:1> \times <var:R> ^ <nat:4> + <nat:7> \times <var:R> ^ <nat:2> + <nat:5> \times <var:R> + <nat:2> $ after code has exited . \end{theorem} \begin{proof} The way to prove correctness for our program is evident using typical Hoare reasoning . Shifting focus toward the upcoming lines contained in the segment of code , we see \begin{eqnarray} \{ <var:J> = <var:R> \} \, <var:Z1> := <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \} \\ \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \} \, <var:Z2> := <var:Z1> * <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \} \end{eqnarray} Moving on to the following lines of codeseen in our list of instructions , \begin{eqnarray} \{ <var:J> = <var:R> \} \, <var:Z1> := <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \} \\ \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \} \, <var:Z2> := <var:Z1> * <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \} \\ \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \} \, <var:Z3> := <var:Z2> * <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z3> = <var:R> ^ <nat:3> \} \\ \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z3> = <var:R> ^ <nat:3> \} \, <var:Z4> := <var:Z3> * <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z3> = <var:R> ^ <nat:3> \land <var:Z4> = <var:R> ^ <nat:4> \} \end{eqnarray} This is ensured with the variable update law in Hoare logic . Looking at the proceeding commands seen in our set of instructions , \begin{eqnarray} \{ <var:J> = <var:R> \} \, <var:Z1> := <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \} \\ \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \} \, <var:Z2> := <var:Z1> * <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \} \\ \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \} \, <var:Z3> := <var:Z2> * <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z3> = <var:R> ^ <nat:3> \} \\ \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z3> = <var:R> ^ <nat:3> \} \, <var:Z4> := <var:Z3> * <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z3> = <var:R> ^ <nat:3> \land <var:Z4> = <var:R> ^ <nat:4> \} \end{eqnarray} Considering the next step in the segment of code , we have \begin{eqnarray} \{ <var:J> = <var:R> \} \, <var:Z1> := <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \} \end{eqnarray} This is deduced by the variable binding inference rule found in usual Hoare techniques . Taking another step toward the subsequent command seen in the series of instructions , we have \begin{eqnarray} \{ <var:J> = <var:R> \} \, <var:Z1> := <var:J> \, \{ <var:J> = <var:R> \land <var:Z1> = <var:R> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <var:Z4> : string := " <var:Z4> " . Definition <def:poly> := <var:Z1> := <var:J> ; <var:Z2> := <var:Z1> * <var:J> ; <var:Z3> := <var:Z2> * <var:J> ; <var:Z4> := <var:Z3> * <var:J> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:5> ; <var:Z2> := <var:Z2> * <nat:7> ; <var:Z4> := <var:Z4> * <nat:1> ; <var:Y> := <var:Z4> <var:Y> := <var:Y> + <var:Z2> <var:Y> := <var:Y> + <var:Z1> <var:Y> := <var:Y> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:J> = <var:R> }} <def:poly> {{ <var:Y> = <nat:1> * <var:R> ^ <nat:4> + <nat:7> * <var:R> ^ <nat:2> + <nat:5> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <var:R> /\ <var:Z2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <var:R> /\ <var:Z2> = <var:R> ^ <nat:2> /\ <var:Z3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <var:R> /\ <var:Z2> = <var:R> ^ <nat:2> /\ <var:Z3> = <var:R> ^ <nat:3> /\ <var:Z4> = <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <var:R> /\ <var:Z2> = <var:R> ^ <nat:2> /\ <var:Z3> = <var:R> ^ <nat:3> /\ <var:Z4> = <var:R> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <nat:5> * <var:R> /\ <var:Z2> = <var:R> ^ <nat:2> /\ <var:Z3> = <var:R> ^ <nat:3> /\ <var:Z4> = <var:R> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <nat:5> * <var:R> /\ <var:Z2> = <nat:7> * <var:R> ^ <nat:2> /\ <var:Z3> = <var:R> ^ <nat:3> /\ <var:Z4> = <var:R> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <nat:5> * <var:R> /\ <var:Z2> = <nat:7> * <var:R> ^ <nat:2> /\ <var:Z3> = <var:R> ^ <nat:3> /\ <var:Z4> = <nat:1> * <var:R> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <nat:5> * <var:R> /\ <var:Z2> = <nat:7> * <var:R> ^ <nat:2> /\ <var:Z3> = <var:R> ^ <nat:3> /\ <var:Z0> = <nat:2> /\ <var:Y> = <nat:1> * <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z1> = <nat:5> * <var:R> /\ <var:Z0> = <nat:2> /\ <var:Y> = <nat:1> * <var:R> ^ <nat:4> + <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Z0> = <nat:2> /\ <var:Y> = <nat:1> * <var:R> ^ <nat:4> + <nat:7> * <var:R> ^ <nat:2> + <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:Y> = <nat:1> * <var:R> ^ <nat:4> + <nat:7> * <var:R> ^ <nat:2> + <nat:5> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 