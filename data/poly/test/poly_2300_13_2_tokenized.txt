\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s> := <nat:1> ; <var:s> := <nat:1> + <var:s> * <var:L> ; <var:s> := <nat:3> + <var:s> * <var:L> ; <var:s> := <var:s> * <var:L> ; <var:s> := <nat:4> + <var:s> * <var:L> ; <var:s> := <nat:4> + <var:s> * <var:L> ; <var:s> := <nat:2> + <var:s> * <var:L> ; <var:s> := <nat:3> + <var:s> * <var:L> ; <var:s> := <var:s> * <var:L> ; <var:s> := <nat:2> + <var:s> * <var:L> ; <var:s> := <nat:4> + <var:s> * <var:L> ; <var:s> := <nat:1> + <var:s> * <var:L> ; <var:s> := <nat:1> + <var:s> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:L> = <var:R> $ before running the series of commands , it follows that we have $ <var:s> = <nat:1> * <var:R> ^ <nat:12> + <nat:1> * <var:R> ^ <nat:11> + <nat:3> * <var:R> ^ <nat:10> + <nat:4> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> $ once set of instructions has exited . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be seen with Hoare reasoning . Moving forward to the upcoming statements found in the set of commands , we have \verb | { <var:L> = <var:R> } <var:s> := <nat:1> { <var:L> = <var:R> \land <var:s> = <nat:1> } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> } <var:s> := <nat:1> + <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> + <nat:1> } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> + <nat:1> } <var:s> := <nat:3> + <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> } <var:s> := <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + } <var:s> := <nat:4> + <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:4> } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:4> } <var:s> := <nat:4> + <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> + <nat:4> } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> + <nat:4> } <var:s> := <nat:2> + <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:2> } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:2> } <var:s> := <nat:3> + <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:3> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:3> } | and \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:3> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:3> } <var:s> := <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:8> + <nat:1> \times <var:R> ^ <nat:7> + <nat:3> \times <var:R> ^ <nat:6> + <nat:4> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + } | . This is guaranteed by the assignment rule given in usual Hoare logic . Taking another step toward the subsequent commands in the code segment , we have \verb | { <var:L> = <var:R> } <var:s> := <nat:1> { <var:L> = <var:R> \land <var:s> = <nat:1> } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> } <var:s> := <nat:1> + <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> + <nat:1> } | , \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> + <nat:1> } <var:s> := <nat:3> + <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> } | and \verb | { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> } <var:s> := <var:s> * <var:L> { <var:L> = <var:R> \land <var:s> = <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:1> ; <var:s> := <nat:1> + <var:s> * <var:L> ; <var:s> := <nat:3> + <var:s> * <var:L> ; <var:s> := <var:s> * <var:L> ; <var:s> := <nat:4> + <var:s> * <var:L> ; <var:s> := <nat:4> + <var:s> * <var:L> ; <var:s> := <nat:2> + <var:s> * <var:L> ; <var:s> := <nat:3> + <var:s> * <var:L> ; <var:s> := <var:s> * <var:L> ; <var:s> := <nat:2> + <var:s> * <var:L> ; <var:s> := <nat:4> + <var:s> * <var:L> ; <var:s> := <nat:1> + <var:s> * <var:L> ; <var:s> := <nat:1> + <var:s> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:L> = <var:R> }} <def:poly> {{ <var:s> = <nat:1> * <var:R> ^ <nat:12> + <nat:1> * <var:R> ^ <nat:11> + <nat:3> * <var:R> ^ <nat:10> + <nat:4> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:9> + <nat:1> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:10> + <nat:1> * <var:R> ^ <nat:9> + <nat:3> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:11> + <nat:1> * <var:R> ^ <nat:10> + <nat:3> * <var:R> ^ <nat:9> + <nat:4> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:12> + <nat:1> * <var:R> ^ <nat:11> + <nat:3> * <var:R> ^ <nat:10> + <nat:4> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 