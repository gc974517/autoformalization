\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:U1> := <var:X> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:8> ; <var:M> := <var:U1> <var:M> := <var:M> + <var:U0> \end{verbatim} Assume that we have $ <var:X> = <var:e> $ , given every positive numbers $ <var:e> $ , ahead of running our set of commands it must be that we have $ <var:M> = <nat:8> * <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this list of commands can be shown using usual Hoare logic . Paying attention to the next piece of code in the series of instructions , the variable binding command \verb | <var:U1> := <var:X> ; | . This line forwards $ \{ <var:X> = <var:e> \} $ to the postcondition $ \{ <var:X> = <var:e> \land <var:U1> = <var:e> \} $ . Keeping momentum , we see the variable binding statement \verb | <var:U0> := <nat:1> ; | . This statement forwards the precondition $ \{ <var:X> = <var:e> \land <var:U1> = <var:e> \} $ as $ \{ <var:X> = <var:e> \land <var:U1> = <var:e> \land <var:U0> = <nat:1> \} $ . This is shown to be logically sound using the assignment inference rule defined by usual Hoare techniques . Honing in on the proceeding line of code in our series of commands , we see the assignment code \verb | <var:U1> := <var:U1> * <nat:8> ; | . This line redefines the condition $ \{ <var:X> = <var:e> \land <var:U1> = <var:e> \land <var:U0> = <nat:1> \} $ into $ \{ <var:X> = <var:e> \land <var:U1> = <nat:8> * <var:e> \land <var:U0> = <nat:1> \} $ . This is given by the assignment scheme of typical Hoare logic . Keeping momentum , we see the code assigning $ <var:U1$ into $ <var:M>$ . This command advances $ \{ <var:X> = <var:e> \land <var:U1> = <nat:8> * <var:e> \land <var:U0> = <nat:1> \} $ to $ \{ <var:X> = <var:e> \land <var:U0> = <nat:1> \land <var:M> = <nat:8> * <var:e> \} $ . This is guaranteed by the assignment scheme defined in typical Hoare techniques . Advancing on , we have the environment update command binding $ <var:M> + <var:U0$ toward $ <var:M>$ . This statement forwards the condition $ \{ <var:X> = <var:e> \land <var:U0> = <nat:1> \land <var:M> = <nat:8> * <var:e> \} $ into the postcondition $ \{ <var:X> = <var:e> \land <var:M> = <nat:8> * <var:e> + <nat:1> \} $ . This is known to be sound by the assignment scheme defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:X> = <var:e> }} <var:U1> := <var:X> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:8> ; <var:M> := <var:U1> <var:M> := <var:M> + <var:U0> {{ <var:M> = <nat:8> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:U1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:U1> = <var:e> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:U1> = <nat:8> * <var:e> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:U0> = <nat:1> /\ <var:M> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:M> = <nat:8> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 