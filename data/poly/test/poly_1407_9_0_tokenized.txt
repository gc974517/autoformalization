\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:q> ; <var:L2> := <nat:2> ; <var:L2> := <var:L2> * <var:q> ; <var:L2> := <var:L2> * <var:q> ; <var:G> := <var:L2> ; <var:G> := <var:G> + <var:L1> ; <var:G> := <var:G> + <var:L0> \end{verbatim} Allowing $ <var:q> = <var:S> $ prior to the execution of this code segment it holds that $ <var:G> = <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:4> $ after list of commands has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is given using standard Hoare logic . Now , we see the assignment line yielding $ <nat:4> $ as $ <var:L0>$ . This code forwards $ \{ <var:q> = <var:S> \} $ to the condition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \} $ . This is known to be sound through the assignment law given in usual Hoare techniques . Honing in on the proceeding command found in our set of commands , we see the variable update command \verb | <var:L1> := <nat:2> ; | . This code moves the condition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \} $ into the condition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \} $ . Going forward , we have the variable assignmet statement \verb | <var:L1> := <var:L1> * <var:q> ; | . This transfers the precondition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \} $ to the postcondition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \} $ . Observing the subsequent bit of code contained in our segment of code , we see the environment update line \verb | <var:L2> := <nat:2> ; | . This line transfers $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \} $ to the postcondition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \land <var:L2> = <nat:2> \} $ . Going to the next step , we have the environment update line letting $ <var:L2> * <var:q> $ toward $ <var:L2>$ . This transfers $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \land <var:L2> = <nat:2> \} $ as $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \land <var:L2> = <nat:2> * <var:S> \} $ . This is shown to be logically sound with the assignment rule found in Hoare techniques . Going to the next step , we see the assignment command \verb | <var:L2> := <var:L2> * <var:q> ; | . This statement transfers the condition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \land <var:L2> = <nat:2> * <var:S> \} $ to $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \land <var:L2> = <nat:2> * <var:S> ^ <nat:2> \} $ . Keeping momentum , the variable update command \verb | <var:G> := <var:L2> ; | . This moves $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \land <var:L2> = <nat:2> * <var:S> ^ <nat:2> \} $ as the postcondition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \land <var:G> = <nat:2> * <var:S> ^ <nat:2> \} $ . Jumping to the following bit of code in the code , we see the assignment code defining $ <var:G> + <var:L1> $ to $ <var:G>$ . This code advances the precondition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> * <var:S> \land <var:G> = <nat:2> * <var:S> ^ <nat:2> \} $ into the postcondition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:G> = <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> \} $ . Stepping forward , we see the variable binding line \verb | <var:G> := <var:G> + <var:L0> | . This redefines the condition $ \{ <var:q> = <var:S> \land <var:L0> = <nat:4> \land <var:G> = <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> \} $ as $ \{ <var:q> = <var:S> \land <var:G> = <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:q> = <var:S> }} <var:L0> := <nat:4> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:q> ; <var:L2> := <nat:2> ; <var:L2> := <var:L2> * <var:q> ; <var:L2> := <var:L2> * <var:q> ; <var:G> := <var:L2> ; <var:G> := <var:G> + <var:L1> ; <var:G> := <var:G> + <var:L0> {{ <var:G> = <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L2> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L2> = <nat:2> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:G> = <nat:2> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:L0> = <nat:4> /\ <var:G> = <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:G> = <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 