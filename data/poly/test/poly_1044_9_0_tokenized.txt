\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:9> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:W> ; <var:I2> := <nat:3> ; <var:I2> := <var:I2> * <var:W> ; <var:I2> := <var:I2> * <var:W> ; <var:A> := <var:I2> ; <var:A> := <var:A> + <var:I1> ; <var:A> := <var:A> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Assume $ <var:W> = <var:F> $ before the execution of the segment of code it follows that we see $ <var:A> = <nat:3> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:F> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:W> = <var:F> \land <var:I0> = <nat:9> \} \\ <var:I1> := <nat:5> ; \\ \{ <var:W> = <var:F> \land <var:I0> = <nat:9> \land <var:I1> = <nat:5> \} \\ <var:I1> := <var:I1> * <var:W> ; \\ \{ <var:W> = <var:F> \land <var:I0> = <nat:9> \land <var:I1> = <nat:5> * <var:F> \} \\ <var:I2> := <nat:3> ; \\ \{ <var:W> = <var:F> \land <var:I0> = <nat:9> \land <var:I1> = <nat:5> * <var:F> \land <var:I2> = <nat:3> \} \\ <var:I2> := <var:I2> * <var:W> ; \\ \{ <var:W> = <var:F> \land <var:I0> = <nat:9> \land <var:I1> = <nat:5> * <var:F> \land <var:I2> = <nat:3> * <var:F> \} \\ <var:I2> := <var:I2> * <var:W> ; \\ \{ <var:W> = <var:F> \land <var:I0> = <nat:9> \land <var:I1> = <nat:5> * <var:F> \land <var:I2> = <nat:3> * <var:F> ^ <nat:2> \} \\ <var:A> := <var:I2> ; \\ \{ <var:W> = <var:F> \land <var:I0> = <nat:9> \land <var:I1> = <nat:5> * <var:F> \land <var:A> = <nat:3> * <var:F> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:I1> ; \\ \{ <var:W> = <var:F> \land <var:I0> = <nat:9> \land <var:A> = <nat:3> * <var:F> ^ <nat:2> + <nat:5> * <var:F> \} \end{eqnarray} Advancing the evaluation of this code segment returns : \begin{eqnarray} <var:A> := <var:A> + <var:I0> \\ \{ <var:W> = <var:F> \land <var:A> = <nat:3> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:9> \} \end{eqnarray} The application of Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:9> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:W> ; <var:I2> := <nat:3> ; <var:I2> := <var:I2> * <var:W> ; <var:I2> := <var:I2> * <var:W> ; <var:A> := <var:I2> ; <var:A> := <var:A> + <var:I1> ; <var:A> := <var:A> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:W> = <var:F> }} <def:poly> {{ <var:A> = <nat:3> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:5> * <var:F> /\ <var:I2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:5> * <var:F> /\ <var:I2> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:5> * <var:F> /\ <var:I2> = <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:5> * <var:F> /\ <var:A> = <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:I0> = <nat:9> /\ <var:A> = <nat:3> * <var:F> ^ <nat:2> + <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:A> = <nat:3> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 