\begin{document} \begin{theorem} Take a set of commands : \begin{verbatim} <var:K0> := <nat:6> ; <var:K1> := <nat:8> ; <var:K1> := <var:K1> * <var:U> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:U> ; <var:K2> := <var:K2> * <var:U> ; <var:K3> := <nat:2> ; <var:K3> := <var:K3> * <var:U> ; <var:K3> := <var:K3> * <var:U> ; <var:K3> := <var:K3> * <var:U> ; <var:W> := <var:K3> ; <var:W> := <var:W> + <var:K2> ; <var:W> := <var:W> + <var:K1> ; <var:W> := <var:W> + <var:K0> \end{verbatim} Allowing it to hold that $ <var:U> = <var:V> $ --- for all $ <var:V> \in \mathbb{Z}^+ $ --- before interpreting this code segment , it holds that we have $ <var:W> = <nat:2> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:8> \times <var:V> + <nat:6> $ after code segment finishes . \end{theorem} \begin{proof} The flow of logic for the series of commands is demonstrated through typical Hoare techniques . Honing in on the next line of code contained in the code , we see the assignment code defining $ <nat:6> $ as $ <var:K0>$ . This line forwards the condition $ \{ <var:U> = <var:V> \} $ into $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \} $ . This is given by the assignment inference rule found in typical Hoare techniques . Moving on to the upcoming piece of code contained in the list of instructions , we have the variable update statement \verb | <var:K1> := <nat:8> ; | . This moves $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \} $ toward the condition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> \} $ . Taking another step toward the subsequent step in the series of commands , the environment update statement \verb | <var:K1> := <var:K1> * <var:U> ; | . This transfers the precondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> \} $ as the condition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \} $ . This is sound with the assignment inference rule from typical Hoare logic . Moving on to the proceeding step seen in our list of instructions , the variable update command letting $ <nat:1> $ into $ <var:K2>$ . This redefines the condition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \} $ toward the condition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> \} $ . This is ensured through the assignment rule from usual Hoare logic . Advancing , the variable binding line binding $ <var:K2> * <var:U> $ to $ <var:K2>$ . This redefines the precondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> \} $ as the postcondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> \} $ . This is rigorously given through the assignment inference rule in standard Hoare reasoning . Keeping momentum , the variable update command assigning $ <var:K2> * <var:U> $ into $ <var:K2>$ . This moves $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> \} $ into $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \} $ . This is known to be sound through the assignment law given in standard Hoare logic . Honing in on the proceeding bit of code contained in our code segment , we see the variable binding command \verb | <var:K3> := <nat:2> ; | . This advances the precondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \} $ as the condition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:K3> = <nat:2> \} $ . Shifting focus toward the upcoming bit of code in our segment of code , we see the assignment statement letting $ <var:K3> * <var:U> $ into $ <var:K3>$ . This forwards the precondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:K3> = <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:K3> = <nat:2> * <var:V> \} $ . This is given by the assignment law from usual Hoare reasoning . Considering the next line seen in our set of instructions , the binding statement \verb | <var:K3> := <var:K3> * <var:U> ; | . This line redefines $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:K3> = <nat:2> * <var:V> \} $ as the condition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:K3> = <nat:2> * <var:V> ^ <nat:2> \} $ . Immediately following , we see the binding command \verb | <var:K3> := <var:K3> * <var:U> ; | . This code moves $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:K3> = <nat:2> * <var:V> ^ <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:K3> = <nat:2> * <var:V> ^ <nat:3> \} $ . This is given using the assignment law obtained from typical Hoare logic . Immediately following , we see the environment update statement \verb | <var:W> := <var:K3> ; | . This advances $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:K3> = <nat:2> * <var:V> ^ <nat:3> \} $ as the postcondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:W> = <nat:2> * <var:V> ^ <nat:3> \} $ . This is given through the assignment scheme obtained from usual Hoare techniques . Moving forward to the following statement found in our series of instructions , we have the environment update code defining $ <var:W> + <var:K2> $ as $ <var:W>$ . This code forwards the condition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:K2> = <nat:1> * <var:V> ^ <nat:2> \land <var:W> = <nat:2> * <var:V> ^ <nat:3> \} $ as the postcondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> \} $ . This is ensured through the assignment inference rule defined in Hoare techniques . Considering the subsequent piece of code seen in our code , we see the variable assignmet code \verb | <var:W> := <var:W> + <var:K1> ; | . This command forwards the precondition $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:K1> = <nat:8> * <var:V> \land <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> \} $ into $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> \} $ . Observing the next command in the series of instructions , the line \verb | <var:W> := <var:W> + <var:K0> | . This statement advances $ \{ <var:U> = <var:V> \land <var:K0> = <nat:6> \land <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> \} $ into the postcondition $ \{ <var:U> = <var:V> \land <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:6> \} $ . This is ensured using the assignment scheme given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:U> = <var:V> }} <var:K0> := <nat:6> ; <var:K1> := <nat:8> ; <var:K1> := <var:K1> * <var:U> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:U> ; <var:K2> := <var:K2> * <var:U> ; <var:K3> := <nat:2> ; <var:K3> := <var:K3> * <var:U> ; <var:K3> := <var:K3> * <var:U> ; <var:K3> := <var:K3> * <var:U> ; <var:W> := <var:K3> ; <var:W> := <var:W> + <var:K2> ; <var:W> := <var:W> + <var:K1> ; <var:W> := <var:W> + <var:K0> {{ <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:K2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:K2> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:K2> = <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:K2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:K3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:K2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:K2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:K2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:K2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:W> = <nat:2> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:8> * <var:V> /\ <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:K0> = <nat:6> /\ <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:W> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 