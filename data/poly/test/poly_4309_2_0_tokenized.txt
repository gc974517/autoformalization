\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:7> ; <var:n> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:X> = <var:p> $ prior to the evaluation of the code it holds that we see $ <var:n> = <nat:7> $ once list of commands has terminated . \end{theorem} \begin{proof} The argument for this list of instructions can be seen with standard Hoare techniques . Moving forward , we have \verb | { <var:X> = <var:p> } <var:E0> := <nat:7> { <var:X> = <var:p> \land <var:E0> = <nat:7> } | and \verb | { <var:X> = <var:p> \land <var:E0> = <nat:7> } <var:n> := <var:E0{ <var:X> = <var:p> \land <var:n> = <nat:7> } | . This is given by the rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:7> ; <var:n> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:X> = <var:p> }} <def:poly> {{ <var:n> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:p> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:p> /\ <var:n> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 