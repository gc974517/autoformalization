\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:9> ; <var:m1> := <nat:6> ; <var:m1> := <var:m1> * <var:J> ; <var:M> := <var:m1> ; <var:M> := <var:M> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> in \emph{Imp} . Assume it to hold that $ <var:J> = <var:A> $ ahead of interpreting our series of instructions then $ <var:M> = <nat:6> * <var:A> + <nat:9> $ when set of instructions has exited . \end{theorem} \begin{proof} The method of proof for the code segment can be accomplished through usual Hoare reasoning . Jumping to the upcoming step found in our set of instructions , the variable assignmet code \verb | <var:m0> := <nat:9> ; | . This advances the precondition $ \{ <var:J> = <var:A> \} $ into $ \{ <var:J> = <var:A> \land <var:m0> = <nat:9> \} $ . This is rigorously given by the assignment scheme obtained from standard Hoare logic . Stepping forward , we have the binding command yielding $ <nat:6> $ as $ <var:m1>$ . This statement takes the precondition $ \{ <var:J> = <var:A> \land <var:m0> = <nat:9> \} $ into $ \{ <var:J> = <var:A> \land <var:m0> = <nat:9> \land <var:m1> = <nat:6> \} $ . Taking another step toward the next bit of code found in the set of instructions , we see the assignment statement letting $ <var:m1> * <var:J> $ into $ <var:m1>$ . This moves the precondition $ \{ <var:J> = <var:A> \land <var:m0> = <nat:9> \land <var:m1> = <nat:6> \} $ into the postcondition $ \{ <var:J> = <var:A> \land <var:m0> = <nat:9> \land <var:m1> = <nat:6> * <var:A> \} $ . This is given by the assignment inference rule in standard Hoare reasoning . Moving on to the proceeding piece of code seen in the set of instructions , we have the binding command letting $ <var:m1> $ as $ <var:M>$ . This statement transfers the condition $ \{ <var:J> = <var:A> \land <var:m0> = <nat:9> \land <var:m1> = <nat:6> * <var:A> \} $ as the condition $ \{ <var:J> = <var:A> \land <var:m0> = <nat:9> \land <var:M> = <nat:6> * <var:A> \} $ . Next , we have the binding statement giving $ <var:M> + <var:m0$ as $ <var:M>$ . This statement moves $ \{ <var:J> = <var:A> \land <var:m0> = <nat:9> \land <var:M> = <nat:6> * <var:A> \} $ into the condition $ \{ <var:J> = <var:A> \land <var:M> = <nat:6> * <var:A> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:9> ; <var:m1> := <nat:6> ; <var:m1> := <var:m1> * <var:J> ; <var:M> := <var:m1> ; <var:M> := <var:M> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:J> = <var:A> }} <def:poly> {{ <var:M> = <nat:6> * <var:A> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:m0> = <nat:9> /\ <var:M> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:M> = <nat:6> * <var:A> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 