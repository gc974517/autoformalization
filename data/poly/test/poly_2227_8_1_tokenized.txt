\begin{document} \begin{theorem} Consider the following list of instructions as follows \begin{verbatim} <var:V1> := <var:n> ; <var:V2> := <var:V1> * <var:n> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:7> ; <var:V2> := <var:V2> * <nat:2> ; <var:y> := <var:V2> <var:y> := <var:y> + <var:V1> <var:y> := <var:y> + <var:V0> \end{verbatim} Assume $ <var:n> = <var:w> $ prior to the execution of our list of commands , it holds that we see $ <var:y> = <nat:2> \times <var:w> ^ <nat:2> + <nat:7> \times <var:w> + <nat:2> $ when segment of code finishes . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is evident using typical Hoare logic . Further , we have the variable binding command assigning $ <var:n> $ toward $ <var:V1>$ . This takes the condition $ \{ <var:n> = <var:w> \} $ as the condition $ \{ <var:n> = <var:w> \land <var:V1> = <var:w> \} $ . Honing in on the upcoming piece of code in our code , we have the environment update statement yielding $ <var:V1> * <var:n> $ as $ <var:V2>$ . This takes the precondition $ \{ <var:n> = <var:w> \land <var:V1> = <var:w> \} $ to the condition $ \{ <var:n> = <var:w> \land <var:V1> = <var:w> \land <var:V2> = <var:w> ^ <nat:2> \} $ . Taking a look at the following piece of code seen in our set of instructions , we have the variable update statement \verb | <var:V0> := <nat:2> ; | . This transfers $ \{ <var:n> = <var:w> \land <var:V1> = <var:w> \land <var:V2> = <var:w> ^ <nat:2> \} $ as the postcondition $ \{ <var:n> = <var:w> \land <var:V1> = <var:w> \land <var:V2> = <var:w> ^ <nat:2> \land <var:V0> = <nat:2> \} $ . This is sound by the assignment inference rule given in standard Hoare logic . Taking another step toward the following step contained in our list of instructions , we have the environment update command \verb | <var:V1> := <var:V1> * <nat:7> ; | . This moves $ \{ <var:n> = <var:w> \land <var:V1> = <var:w> \land <var:V2> = <var:w> ^ <nat:2> \land <var:V0> = <nat:2> \} $ toward $ \{ <var:n> = <var:w> \land <var:V1> = <nat:7> \cdot <var:w> \land <var:V2> = <var:w> ^ <nat:2> \land <var:V0> = <nat:2> \} $ . This is deduced with the assignment scheme of usual Hoare reasoning . Honing in on the next step seen in the code segment , we see the line assigning $ <var:V2> * <nat:2> $ into $ <var:V2>$ . This takes the precondition $ \{ <var:n> = <var:w> \land <var:V1> = <nat:7> \cdot <var:w> \land <var:V2> = <var:w> ^ <nat:2> \land <var:V0> = <nat:2> \} $ into $ \{ <var:n> = <var:w> \land <var:V1> = <nat:7> \cdot <var:w> \land <var:V2> = <nat:2> \cdot <var:w> ^ <nat:2> \land <var:V0> = <nat:2> \} $ . Keeping momentum , the environment update code assigning $ <var:V2$ to $ <var:y>$ . This forwards $ \{ <var:n> = <var:w> \land <var:V1> = <nat:7> \cdot <var:w> \land <var:V2> = <nat:2> \cdot <var:w> ^ <nat:2> \land <var:V0> = <nat:2> \} $ into $ \{ <var:n> = <var:w> \land <var:V1> = <nat:7> \cdot <var:w> \land <var:V0> = <nat:2> \land <var:y> = <nat:2> \cdot <var:w> ^ <nat:2> \} $ . Jumping to the proceeding statement in our program , the variable assignmet code defining $ <var:y> + <var:V1$ as $ <var:y>$ . This forwards $ \{ <var:n> = <var:w> \land <var:V1> = <nat:7> \cdot <var:w> \land <var:V0> = <nat:2> \land <var:y> = <nat:2> \cdot <var:w> ^ <nat:2> \} $ as the condition $ \{ <var:n> = <var:w> \land <var:V0> = <nat:2> \land <var:y> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:7> \cdot <var:w> \} $ . This is known to be sound by the assignment scheme defined by typical Hoare reasoning . Immediately after , we have the variable update command \verb | <var:y> := <var:y> + <var:V0> | . This line advances the precondition $ \{ <var:n> = <var:w> \land <var:V0> = <nat:2> \land <var:y> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:7> \cdot <var:w> \} $ into the condition $ \{ <var:n> = <var:w> \land <var:y> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:7> \cdot <var:w> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:n> = <var:w> }} <var:V1> := <var:n> ; <var:V2> := <var:V1> * <var:n> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:7> ; <var:V2> := <var:V2> * <nat:2> ; <var:y> := <var:V2> <var:y> := <var:y> + <var:V1> <var:y> := <var:y> + <var:V0> {{ <var:y> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:V1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:V1> = <var:w> /\ <var:V2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:V1> = <var:w> /\ <var:V2> = <var:w> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <var:w> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V0> = <nat:2> /\ <var:y> = <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:V0> = <nat:2> /\ <var:y> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:y> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 