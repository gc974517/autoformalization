\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:5> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:b> ; <var:v> := <var:q1> ; <var:v> := <var:v> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:b> = <var:r> $ prior to evaluating the set of commands , it holds that $ <var:v> = <nat:7> \cdot <var:r> + <nat:5> $ when series of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of this code segment can be seen by typical Hoare reasoning . Keeping momentum , the variable assignmet line letting $ <nat:5> $ to $ <var:q0>$ . This redefines $ \{ <var:b> = <var:r> \} $ to the condition $ \{ <var:b> = <var:r> \land <var:q0> = <nat:5> \} $ . Advancing to the next step , we have the binding code assigning $ <nat:7> $ as $ <var:q1>$ . This command transfers the precondition $ \{ <var:b> = <var:r> \land <var:q0> = <nat:5> \} $ to the condition $ \{ <var:b> = <var:r> \land <var:q0> = <nat:5> \land <var:q1> = <nat:7> \} $ . Going forward , the variable assignmet statement yielding $ <var:q1> * <var:b> $ into $ <var:q1>$ . This advances the precondition $ \{ <var:b> = <var:r> \land <var:q0> = <nat:5> \land <var:q1> = <nat:7> \} $ to the postcondition $ \{ <var:b> = <var:r> \land <var:q0> = <nat:5> \land <var:q1> = <nat:7> \cdot <var:r> \} $ . Focusing on the next statement seen in the code , we see the variable binding code assigning $ <var:q1> $ toward $ <var:v>$ . This moves the condition $ \{ <var:b> = <var:r> \land <var:q0> = <nat:5> \land <var:q1> = <nat:7> \cdot <var:r> \} $ toward $ \{ <var:b> = <var:r> \land <var:q0> = <nat:5> \land <var:v> = <nat:7> \cdot <var:r> \} $ . This is rigorously given using the assignment law found in standard Hoare reasoning . Focusing on the subsequent command in our series of commands , the variable assignmet code giving $ <var:v> + <var:q0$ into $ <var:v>$ . This command redefines the condition $ \{ <var:b> = <var:r> \land <var:q0> = <nat:5> \land <var:v> = <nat:7> \cdot <var:r> \} $ as $ \{ <var:b> = <var:r> \land <var:v> = <nat:7> \cdot <var:r> + <nat:5> \} $ . This is rigorously given using the assignment law from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:b> ; <var:v> := <var:q1> ; <var:v> := <var:v> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:b> = <var:r> }} <def:poly> {{ <var:v> = <nat:7> * <var:r> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:q0> = <nat:5> /\ <var:v> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:v> = <nat:7> * <var:r> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 