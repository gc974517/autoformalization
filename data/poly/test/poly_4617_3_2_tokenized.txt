\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:M> ; <var:k> := <nat:2> + <var:k> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:M> = <var:D> $ prior to executing our set of instructions it holds that we see $ <var:k> = <nat:3> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is evident with usual Hoare logic . Advancing on , \[ \begin{tabular} {rcl} \{ <var:M> = <var:D> \} & <var:k> := <nat:3> & \{ <var:M> = <var:D> \land <var:k> = <nat:3> \} \\ \{ <var:M> = <var:D> \land <var:k> = <nat:3> \} & <var:k> := <nat:4> + <var:k> * <var:M> & \{ <var:M> = <var:D> \land <var:k> = <nat:3> * <var:D> + <nat:4> \} \end{tabular} After , we have \[ \begin{tabular} {rcl} \{ <var:M> = <var:D> \} & <var:k> := <nat:3> & \{ <var:M> = <var:D> \land <var:k> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:M> ; <var:k> := <nat:2> + <var:k> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:M> = <var:D> }} <def:poly> {{ <var:k> = <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:k> = <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:k> = <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 