\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:c> ; <var:Q2> := <var:Q1> * <var:c> ; <var:Q0> := <nat:8> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:z> := <var:Q2> <var:z> := <var:z> + <var:Q1> <var:z> := <var:z> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:c> = <var:L> $ before interpreting the segment of code , it follows that we have $ <var:z> = <nat:5> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:8> $ . \end{theorem} \begin{proof} Observe that the below decorated series of instructions . \begin{eqnarray} \{ <var:c> = <var:L> \} \\ <var:Q1> := <var:c> ; \\ \{ <var:c> = <var:L> \land <var:Q1> = <var:L> \} \\ <var:Q2> := <var:Q1> * <var:c> ; \\ \{ <var:c> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:c> = <var:L> \land <var:Q1> = <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \land <var:Q0> = <nat:8> \} \\ <var:Q1> := <var:Q1> * <nat:6> ; \\ \{ <var:c> = <var:L> \land <var:Q1> = <nat:6> \times <var:L> \land <var:Q2> = <var:L> ^ <nat:2> \land <var:Q0> = <nat:8> \} \end{eqnarray} Allowing executing the code gives us : \begin{eqnarray} <var:Q2> := <var:Q2> * <nat:5> ; \\ \{ <var:c> = <var:L> \land <var:Q1> = <nat:6> \times <var:L> \land <var:Q2> = <nat:5> \times <var:L> ^ <nat:2> \land <var:Q0> = <nat:8> \} \\ <var:z> := <var:Q2> \\ \{ <var:c> = <var:L> \land <var:Q1> = <nat:6> \times <var:L> \land <var:Q0> = <nat:8> \land <var:z> = <nat:5> \times <var:L> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:Q1> \\ \{ <var:c> = <var:L> \land <var:Q0> = <nat:8> \land <var:z> = <nat:5> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> \} \\ <var:z> := <var:z> + <var:Q0> \\ \{ <var:c> = <var:L> \land <var:z> = <nat:5> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> + <nat:8> \} \end{eqnarray} Utilizing usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q1> := <var:c> ; <var:Q2> := <var:Q1> * <var:c> ; <var:Q0> := <nat:8> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:z> := <var:Q2> <var:z> := <var:z> + <var:Q1> <var:z> := <var:z> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:c> = <var:L> }} <def:poly> {{ <var:z> = <nat:5> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:Q1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:Q1> = <var:L> /\ <var:Q2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:Q1> = <var:L> /\ <var:Q2> = <var:L> ^ <nat:2> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:Q1> = <nat:6> * <var:L> /\ <var:Q2> = <var:L> ^ <nat:2> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:Q1> = <nat:6> * <var:L> /\ <var:Q2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:Q1> = <nat:6> * <var:L> /\ <var:Q0> = <nat:8> /\ <var:z> = <nat:5> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:Q0> = <nat:8> /\ <var:z> = <nat:5> * <var:L> ^ <nat:2> + <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:z> = <nat:5> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 