\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:9> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:g> ; <var:b> := <var:e1> ; <var:b> := <var:b> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allowing that we have $ <var:g> = <var:r> $ ahead of evaluating this code segment , it must be that $ <var:b> = <nat:1> \cdot <var:r> + <nat:9> $ after series of commands has exited . \end{theorem} \begin{proof} Using typical Hoare reasoning returns : \begin{eqnarray} \{ <var:g> = <var:r> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:g> = <var:r> \land <var:e0> = <nat:9> \} \\ <var:e1> := <nat:1> ; \\ \{ <var:g> = <var:r> \land <var:e0> = <nat:9> \land <var:e1> = <nat:1> \} \\ <var:e1> := <var:e1> * <var:g> ; \\ \{ <var:g> = <var:r> \land <var:e0> = <nat:9> \land <var:e1> = <nat:1> * <var:r> \} \\ <var:b> := <var:e1> ; \\ \{ <var:g> = <var:r> \land <var:e0> = <nat:9> \land <var:b> = <nat:1> * <var:r> \} \\ <var:b> := <var:b> + <var:e0> \\ \{ <var:g> = <var:r> \land <var:b> = <nat:1> * <var:r> + <nat:9> \} \end{eqnarray} Given the above , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:9> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:g> ; <var:b> := <var:e1> ; <var:b> := <var:b> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:g> = <var:r> }} <def:poly> {{ <var:b> = <nat:1> * <var:r> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:e0> = <nat:9> /\ <var:b> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:b> = <nat:1> * <var:r> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 