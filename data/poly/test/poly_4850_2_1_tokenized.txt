\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:1> ; <var:R> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:e> = <var:h> $ prior to evaluating our code segment it holds that we see $ <var:R> = <nat:1> $ once list of commands has terminated . \end{theorem} \begin{proof} The method of proof for our series of instructions can be seen using typical Hoare logic . Paying attention to the proceeding line in our code segment , the line binding $ <nat:1> $ toward $ <var:x0>$ . This transfers the precondition $ \{ <var:e> = <var:h> \} $ to the condition $ \{ <var:e> = <var:h> \land <var:x0> = <nat:1> \} $ . Immediately after , the variable assignmet statement \verb | <var:R> := <var:x0> | . This transfers the condition $ \{ <var:e> = <var:h> \land <var:x0> = <nat:1> \} $ to the condition $ \{ <var:e> = <var:h> \land <var:R> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:R> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:e> = <var:h> }} <def:poly> {{ <var:R> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 