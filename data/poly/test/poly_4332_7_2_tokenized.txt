\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:3> ; <var:P> := <nat:2> + <var:P> * <var:O> ; <var:P> := <nat:4> + <var:P> * <var:O> ; <var:P> := <nat:2> + <var:P> * <var:O> ; <var:P> := <var:P> * <var:O> ; <var:P> := <nat:2> + <var:P> * <var:O> ; <var:P> := <nat:4> + <var:P> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Allowing that we have $ <var:O> = <var:T> $ , for $ <var:T> \in \mathbb{Z}^+ $ , ahead of the evaluation of the list of commands , it follows that we see $ <var:P> = <nat:3> \times <var:T> ^ <nat:6> + <nat:2> \times <var:T> ^ <nat:5> + <nat:4> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:2> \times <var:T> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques gives : \begin{eqnarray} \{ <var:O> = <var:T> \} \\ <var:P> := <nat:3> ; \\ \{ <var:O> = <var:T> \land <var:P> = <nat:3> \} \\ <var:P> := <nat:2> + <var:P> * <var:O> ; \\ \{ <var:O> = <var:T> \land <var:P> = <nat:3> \cdot <var:T> + <nat:2> \} \\ <var:P> := <nat:4> + <var:P> * <var:O> ; \\ \{ <var:O> = <var:T> \land <var:P> = <nat:3> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:4> \} \\ <var:P> := <nat:2> + <var:P> * <var:O> ; \\ \{ <var:O> = <var:T> \land <var:P> = <nat:3> \cdot <var:T> ^ <nat:3> + <nat:2> \cdot <var:T> ^ <nat:2> + <nat:4> \cdot <var:T> + <nat:2> \} \\ <var:P> := <var:P> * <var:O> ; \\ \{ <var:O> = <var:T> \land <var:P> = <nat:3> \cdot <var:T> ^ <nat:4> + <nat:2> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + \} \\ <var:P> := <nat:2> + <var:P> * <var:O> ; \\ \{ <var:O> = <var:T> \land <var:P> = <nat:3> \cdot <var:T> ^ <nat:5> + <nat:2> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:2> \cdot <var:T> ^ <nat:2> + <nat:2> \} \\ <var:P> := <nat:4> + <var:P> * <var:O> \\ \{ <var:O> = <var:T> \land <var:P> = <nat:3> \cdot <var:T> ^ <nat:6> + <nat:2> \cdot <var:T> ^ <nat:5> + <nat:4> \cdot <var:T> ^ <nat:4> + <nat:2> \cdot <var:T> ^ <nat:3> + <nat:2> \cdot <var:T> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:3> ; <var:P> := <nat:2> + <var:P> * <var:O> ; <var:P> := <nat:4> + <var:P> * <var:O> ; <var:P> := <nat:2> + <var:P> * <var:O> ; <var:P> := <var:P> * <var:O> ; <var:P> := <nat:2> + <var:P> * <var:O> ; <var:P> := <nat:4> + <var:P> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:O> = <var:T> }} <def:poly> {{ <var:P> = <nat:3> * <var:T> ^ <nat:6> + <nat:2> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:P> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:P> = <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:P> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:P> = <nat:3> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:P> = <nat:3> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:P> = <nat:3> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:P> = <nat:3> * <var:T> ^ <nat:6> + <nat:2> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 