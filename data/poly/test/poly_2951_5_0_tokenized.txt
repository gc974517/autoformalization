\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:5> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:U> ; <var:r> := <var:w1> ; <var:r> := <var:r> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:U> = <var:K> $ ahead of evaluating this set of commands , it follows that we have $ <var:r> = <nat:7> * <var:K> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is demonstrated through standard Hoare logic . Jumping to the proceeding bit of code found in the segment of code , we see the environment update line letting $ <nat:5> $ as $ <var:w0>$ . This takes the precondition $ \{ <var:U> = <var:K> \} $ to the condition $ \{ <var:U> = <var:K> \land <var:w0> = <nat:5> \} $ . This is rigorously given using the assignment rule given in usual Hoare logic . Advancing to the next step , we see the variable assignmet command binding $ <nat:7> $ into $ <var:w1>$ . This redefines the precondition $ \{ <var:U> = <var:K> \land <var:w0> = <nat:5> \} $ as $ \{ <var:U> = <var:K> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \} $ . This is guaranteed with the assignment scheme obtained from standard Hoare logic . Looking at the next bit of code seen in the code , we see the environment update line yielding $ <var:w1> * <var:U> $ as $ <var:w1>$ . This transfers the condition $ \{ <var:U> = <var:K> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \} $ into the condition $ \{ <var:U> = <var:K> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> * <var:K> \} $ . This is known to be sound by the assignment law obtained from Hoare techniques . Moving onward , the line \verb | <var:r> := <var:w1> ; | . This code redefines $ \{ <var:U> = <var:K> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> * <var:K> \} $ as the postcondition $ \{ <var:U> = <var:K> \land <var:w0> = <nat:5> \land <var:r> = <nat:7> * <var:K> \} $ . This is ensured through the assignment inference rule given by usual Hoare techniques . Taking another step toward the subsequent piece of code in the series of instructions , we see the command \verb | <var:r> := <var:r> + <var:w0> | . This forwards the condition $ \{ <var:U> = <var:K> \land <var:w0> = <nat:5> \land <var:r> = <nat:7> * <var:K> \} $ as $ \{ <var:U> = <var:K> \land <var:r> = <nat:7> * <var:K> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:5> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:U> ; <var:r> := <var:w1> ; <var:r> := <var:r> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:U> = <var:K> }} <def:poly> {{ <var:r> = <nat:7> * <var:K> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:w0> = <nat:5> /\ <var:r> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:r> = <nat:7> * <var:K> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 