\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:I> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:u> := <var:Z1> <var:u> := <var:u> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:I> = <var:M> $ ( assuming some natural coefficients $ <var:M> $ ) prior to running the list of instructions , it holds that $ <var:u> = <nat:7> * <var:M> + <nat:1> $ . \end{theorem} \begin{proof} The application of typical Hoare logic returns : \begin{eqnarray} \{ <var:I> = <var:M> \} \\ <var:Z1> := <var:I> ; \\ \{ <var:I> = <var:M> \land <var:Z1> = <var:M> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:I> = <var:M> \land <var:Z1> = <var:M> \land <var:Z0> = <nat:1> \} \\ <var:Z1> := <var:Z1> * <nat:7> ; \\ \{ <var:I> = <var:M> \land <var:Z1> = <nat:7> \times <var:M> \land <var:Z0> = <nat:1> \} \\ <var:u> := <var:Z1> \\ \{ <var:I> = <var:M> \land <var:Z0> = <nat:1> \land <var:u> = <nat:7> \times <var:M> \} \\ <var:u> := <var:u> + <var:Z0> \\ \{ <var:I> = <var:M> \land <var:u> = <nat:7> \times <var:M> + <nat:1> \} \end{eqnarray} Hence , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:I> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:u> := <var:Z1> <var:u> := <var:u> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:I> = <var:M> }} <def:poly> {{ <var:u> = <nat:7> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:Z1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:Z1> = <var:M> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:Z1> = <nat:7> * <var:M> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:Z0> = <nat:1> /\ <var:u> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:u> = <nat:7> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 