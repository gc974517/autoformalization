\begin{document} \begin{theorem} Take a code segment : \begin{verbatim} <var:J> := <nat:2> ; <var:J> := <nat:1> + <var:J> * <var:y> \end{verbatim} Given $ <var:y> = <var:M> $ , for some $ <var:M> $ , before the evaluation of our set of commands it holds that we have $ <var:J> = <nat:2> \times <var:M> + <nat:1> $ after segment of code finishes . \end{theorem} \begin{proof} The application of standard Hoare reasoning results in : \begin{eqnarray} \{ <var:y> = <var:M> \} \\ <var:J> := <nat:2> ; \\ \{ <var:y> = <var:M> \land <var:J> = <nat:2> \} \\ <var:J> := <nat:1> + <var:J> * <var:y> \\ \{ <var:y> = <var:M> \land <var:J> = <nat:2> * <var:M> + <nat:1> \} \end{eqnarray} As a result , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:y> = <var:M> }} <var:J> := <nat:2> ; <var:J> := <nat:1> + <var:J> * <var:y> {{ <var:J> = <nat:2> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:J> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:J> = <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 