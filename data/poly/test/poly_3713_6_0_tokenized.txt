\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:5> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:t> ; <var:n2> := <var:n2> * <var:t> ; <var:U> := <var:n2> ; <var:U> := <var:U> + <var:n0> \end{verbatim} Allowing $ <var:t> = <var:L> $ ( given any positive coefficients $ <var:L> $ ) prior to the execution of this list of commands , then $ <var:U> = <nat:8> \times <var:L> ^ <nat:2> + <nat:5> $ once series of instructions finishes . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:t> = <var:L> \} \\ <var:n0> := <nat:5> ; \\ \{ <var:t> = <var:L> \land <var:n0> = <nat:5> \} \\ <var:n2> := <nat:8> ; \\ \{ <var:t> = <var:L> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> \} \\ <var:n2> := <var:n2> * <var:t> ; \\ \{ <var:t> = <var:L> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> * <var:L> \} \end{eqnarray} Furthering evaluating this list of instructions results in : \begin{eqnarray} <var:n2> := <var:n2> * <var:t> ; \\ \{ <var:t> = <var:L> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> * <var:L> ^ <nat:2> \} \\ <var:U> := <var:n2> ; \\ \{ <var:t> = <var:L> \land <var:n0> = <nat:5> \land <var:U> = <nat:8> * <var:L> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:n0> \\ \{ <var:t> = <var:L> \land <var:U> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> \} \end{eqnarray} Thusly , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:t> = <var:L> }} <var:n0> := <nat:5> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:t> ; <var:n2> := <var:n2> * <var:t> ; <var:U> := <var:n2> ; <var:U> := <var:U> + <var:n0> {{ <var:U> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:n0> = <nat:5> /\ <var:n2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:n0> = <nat:5> /\ <var:n2> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:n0> = <nat:5> /\ <var:n2> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:n0> = <nat:5> /\ <var:U> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:U> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 