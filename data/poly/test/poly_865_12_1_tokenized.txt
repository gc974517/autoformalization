\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:Y> ; <var:E2> := <var:E1> * <var:Y> ; <var:E3> := <var:E2> * <var:Y> ; <var:E4> := <var:E3> * <var:Y> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:5> ; <var:E2> := <var:E2> * <nat:2> ; <var:E4> := <var:E4> * <nat:4> ; <var:F> := <var:E4> <var:F> := <var:F> + <var:E2> <var:F> := <var:F> + <var:E1> <var:F> := <var:F> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Allowing it to be that $ <var:Y> = <var:c> $ for any natural coefficients $ <var:c> $ before the evaluation of this program it follows that $ <var:F> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:9> $ when series of instructions has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare techniques returns : \begin{eqnarray} \{ <var:Y> = <var:c> \} \\ <var:E1> := <var:Y> ; \\ \{ <var:Y> = <var:c> \land <var:E1> = <var:c> \} \\ <var:E2> := <var:E1> * <var:Y> ; \\ \{ <var:Y> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:Y> ; \\ \{ <var:Y> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \land <var:E3> = <var:c> ^ <nat:3> \} \\ <var:E4> := <var:E3> * <var:Y> ; \\ \{ <var:Y> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \land <var:E3> = <var:c> ^ <nat:3> \land <var:E4> = <var:c> ^ <nat:4> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:Y> = <var:c> \land <var:E1> = <var:c> \land <var:E2> = <var:c> ^ <nat:2> \land <var:E3> = <var:c> ^ <nat:3> \land <var:E4> = <var:c> ^ <nat:4> \land <var:E0> = <nat:9> \} \end{eqnarray} Advancing the execution of the series of commands results in : \begin{eqnarray} <var:E1> := <var:E1> * <nat:5> ; \\ \{ <var:Y> = <var:c> \land <var:E1> = <nat:5> \cdot <var:c> \land <var:E2> = <var:c> ^ <nat:2> \land <var:E3> = <var:c> ^ <nat:3> \land <var:E4> = <var:c> ^ <nat:4> \land <var:E0> = <nat:9> \} \\ <var:E2> := <var:E2> * <nat:2> ; \\ \{ <var:Y> = <var:c> \land <var:E1> = <nat:5> \cdot <var:c> \land <var:E2> = <nat:2> \cdot <var:c> ^ <nat:2> \land <var:E3> = <var:c> ^ <nat:3> \land <var:E4> = <var:c> ^ <nat:4> \land <var:E0> = <nat:9> \} \\ <var:E4> := <var:E4> * <nat:4> ; \\ \{ <var:Y> = <var:c> \land <var:E1> = <nat:5> \cdot <var:c> \land <var:E2> = <nat:2> \cdot <var:c> ^ <nat:2> \land <var:E3> = <var:c> ^ <nat:3> \land <var:E4> = <nat:4> \cdot <var:c> ^ <nat:4> \land <var:E0> = <nat:9> \} \\ <var:F> := <var:E4> \\ \{ <var:Y> = <var:c> \land <var:E1> = <nat:5> \cdot <var:c> \land <var:E2> = <nat:2> \cdot <var:c> ^ <nat:2> \land <var:E3> = <var:c> ^ <nat:3> \land <var:E0> = <nat:9> \land <var:F> = <nat:4> \cdot <var:c> ^ <nat:4> \} \end{eqnarray} Furthering evaluating our list of commands produces : \begin{eqnarray} <var:F> := <var:F> + <var:E2> \\ \{ <var:Y> = <var:c> \land <var:E1> = <nat:5> \cdot <var:c> \land <var:E0> = <nat:9> \land <var:F> = <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:2> \} \end{eqnarray} Allowing executing our list of instructions returns : \begin{eqnarray} <var:F> := <var:F> + <var:E1> \\ \{ <var:Y> = <var:c> \land <var:E0> = <nat:9> \land <var:F> = <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> \} \\ <var:F> := <var:F> + <var:E0> \\ \{ <var:Y> = <var:c> \land <var:F> = <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> + <nat:9> \} \end{eqnarray} Therefore , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <var:E4> : string := " <var:E4> " . Definition <def:poly> := <var:E1> := <var:Y> ; <var:E2> := <var:E1> * <var:Y> ; <var:E3> := <var:E2> * <var:Y> ; <var:E4> := <var:E3> * <var:Y> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:5> ; <var:E2> := <var:E2> * <nat:2> ; <var:E4> := <var:E4> * <nat:4> ; <var:F> := <var:E4> <var:F> := <var:F> + <var:E2> <var:F> := <var:F> + <var:E1> <var:F> := <var:F> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Y> = <var:c> }} <def:poly> {{ <var:F> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <var:c> /\ <var:E2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <var:c> /\ <var:E2> = <var:c> ^ <nat:2> /\ <var:E3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <var:c> /\ <var:E2> = <var:c> ^ <nat:2> /\ <var:E3> = <var:c> ^ <nat:3> /\ <var:E4> = <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <var:c> /\ <var:E2> = <var:c> ^ <nat:2> /\ <var:E3> = <var:c> ^ <nat:3> /\ <var:E4> = <var:c> ^ <nat:4> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <nat:5> * <var:c> /\ <var:E2> = <var:c> ^ <nat:2> /\ <var:E3> = <var:c> ^ <nat:3> /\ <var:E4> = <var:c> ^ <nat:4> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <nat:5> * <var:c> /\ <var:E2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:E3> = <var:c> ^ <nat:3> /\ <var:E4> = <var:c> ^ <nat:4> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <nat:5> * <var:c> /\ <var:E2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:E3> = <var:c> ^ <nat:3> /\ <var:E4> = <nat:4> * <var:c> ^ <nat:4> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <nat:5> * <var:c> /\ <var:E2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:E3> = <var:c> ^ <nat:3> /\ <var:E0> = <nat:9> /\ <var:F> = <nat:4> * <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E1> = <nat:5> * <var:c> /\ <var:E0> = <nat:9> /\ <var:F> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:9> /\ <var:F> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:F> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 