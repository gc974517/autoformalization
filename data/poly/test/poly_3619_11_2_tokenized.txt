\begin{document} \begin{theorem} Consider a segment of code as \begin{verbatim} <var:Y> := <nat:4> ; <var:Y> := <var:Y> * <var:U> ; <var:Y> := <nat:4> + <var:Y> * <var:U> ; <var:Y> := <nat:1> + <var:Y> * <var:U> ; <var:Y> := <nat:3> + <var:Y> * <var:U> ; <var:Y> := <nat:3> + <var:Y> * <var:U> ; <var:Y> := <nat:4> + <var:Y> * <var:U> ; <var:Y> := <nat:1> + <var:Y> * <var:U> ; <var:Y> := <nat:4> + <var:Y> * <var:U> ; <var:Y> := <nat:2> + <var:Y> * <var:U> ; <var:Y> := <nat:3> + <var:Y> * <var:U> \end{verbatim} Allowing ( given all $ <var:n> \in \mathbb{Z}^+ $ ) that $ <var:U> = <var:n> $ prior to running our code , it must be that we see $ <var:Y> = <nat:4> \cdot <var:n> ^ <nat:10> + <nat:4> \cdot <var:n> ^ <nat:8> + <nat:1> \cdot <var:n> ^ <nat:7> + <nat:3> \cdot <var:n> ^ <nat:6> + <nat:3> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions is clear with usual Hoare techniques . Focusing on the next bit of code in the program , we have the code yielding $ <nat:4> $ as $ <var:Y>$ . This takes the precondition $ \{ <var:U> = <var:n> \} $ into $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \} $ . This is given with the assignment scheme of standard Hoare logic . Following , we see the variable update code assigning $ <var:Y> * <var:U> $ into $ <var:Y>$ . This advances $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \} $ to the condition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> + \} $ . Now , we see the code yielding $ <nat:4> + <var:Y> * <var:U> $ into $ <var:Y>$ . This code takes $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> + \} $ to the postcondition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:2> + <nat:4> \} $ . Honing in on the next piece of code seen in the list of instructions , we see the variable binding code binding $ <nat:1> + <var:Y> * <var:U> $ to $ <var:Y>$ . This forwards the condition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:2> + <nat:4> \} $ into $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> + <nat:1> \} $ . Now , we have the variable binding command \verb | <var:Y> := <nat:3> + <var:Y> * <var:U> ; | . This forwards $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> + <nat:1> \} $ toward $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:3> \} $ . This is deduced with the assignment rule defined by standard Hoare techniques . Going forward , we see the variable update statement \verb | <var:Y> := <nat:3> + <var:Y> * <var:U> ; | . This transfers the precondition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:3> \} $ as $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:3> \} $ . This is shown to be logically sound by the assignment law found in usual Hoare techniques . Next , we see the assignment statement \verb | <var:Y> := <nat:4> + <var:Y> * <var:U> ; | . This transfers the precondition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:3> \} $ into the condition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:6> + <nat:4> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:4> \} $ . This is ensured through the assignment scheme found in usual Hoare reasoning . Taking a look at the proceeding bit of code seen in the series of commands , we have the variable assignmet statement \verb | <var:Y> := <nat:1> + <var:Y> * <var:U> ; | . This code moves the condition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:6> + <nat:4> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:4> \} $ into the condition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:7> + <nat:4> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:1> \} $ . Taking a look at the next command contained in our program , we have the variable assignmet line yielding $ <nat:4> + <var:Y> * <var:U> $ toward $ <var:Y>$ . This takes the precondition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:7> + <nat:4> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:1> \} $ into $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:8> + <nat:4> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:4> \} $ . This is deduced through the assignment scheme obtained from standard Hoare logic . Observing the proceeding line found in the list of instructions , the variable assignmet command \verb | <var:Y> := <nat:2> + <var:Y> * <var:U> ; | . This line moves the condition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:8> + <nat:4> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:4> \} $ toward $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:9> + <nat:4> \times <var:n> ^ <nat:7> + <nat:1> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> \} $ . This is ensured by the assignment inference rule given in standard Hoare reasoning . Going to the next step , we have the variable update command binding $ <nat:3> + <var:Y> * <var:U$ into $ <var:Y>$ . This command transfers the precondition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:9> + <nat:4> \times <var:n> ^ <nat:7> + <nat:1> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:n> \land <var:Y> = <nat:4> \times <var:n> ^ <nat:10> + <nat:4> \times <var:n> ^ <nat:8> + <nat:1> \times <var:n> ^ <nat:7> + <nat:3> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:3> \} $ . This is shown through the assignment law given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:U> = <var:n> }} <var:Y> := <nat:4> ; <var:Y> := <var:Y> * <var:U> ; <var:Y> := <nat:4> + <var:Y> * <var:U> ; <var:Y> := <nat:1> + <var:Y> * <var:U> ; <var:Y> := <nat:3> + <var:Y> * <var:U> ; <var:Y> := <nat:3> + <var:Y> * <var:U> ; <var:Y> := <nat:4> + <var:Y> * <var:U> ; <var:Y> := <nat:1> + <var:Y> * <var:U> ; <var:Y> := <nat:4> + <var:Y> * <var:U> ; <var:Y> := <nat:2> + <var:Y> * <var:U> ; <var:Y> := <nat:3> + <var:Y> * <var:U> {{ <var:Y> = <nat:4> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:Y> = <nat:4> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 