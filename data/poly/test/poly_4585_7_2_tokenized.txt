\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <var:d> * <var:U> ; <var:d> := <nat:1> + <var:d> * <var:U> ; <var:d> := <nat:3> + <var:d> * <var:U> ; <var:d> := <nat:2> + <var:d> * <var:U> ; <var:d> := <var:d> * <var:U> ; <var:d> := <nat:2> + <var:d> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Allow $ <var:U> = <var:K> $ before the evaluation of this list of instructions then we see $ <var:d> = <nat:1> \times <var:K> ^ <nat:6> + <nat:1> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:2> $ after segment of code is done . \end{theorem} \begin{proof} Observe that this decorated code segment . \begin{eqnarray} \{ <var:U> = <var:K> \} \\ <var:d> := <nat:1> ; \\ \{ <var:U> = <var:K> \land <var:d> = <nat:1> \} \\ <var:d> := <var:d> * <var:U> ; \\ \{ <var:U> = <var:K> \land <var:d> = <nat:1> * <var:K> + \} \\ <var:d> := <nat:1> + <var:d> * <var:U> ; \\ \{ <var:U> = <var:K> \land <var:d> = <nat:1> * <var:K> ^ <nat:2> + <nat:1> \} \\ <var:d> := <nat:3> + <var:d> * <var:U> ; \\ \{ <var:U> = <var:K> \land <var:d> = <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> + <nat:3> \} \\ <var:d> := <nat:2> + <var:d> * <var:U> ; \\ \{ <var:U> = <var:K> \land <var:d> = <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> \} \\ <var:d> := <var:d> * <var:U> ; \\ \{ <var:U> = <var:K> \land <var:d> = <nat:1> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + \} \\ <var:d> := <nat:2> + <var:d> * <var:U> \\ \{ <var:U> = <var:K> \land <var:d> = <nat:1> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> \} \end{eqnarray} Using typical Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:1> ; <var:d> := <var:d> * <var:U> ; <var:d> := <nat:1> + <var:d> * <var:U> ; <var:d> := <nat:3> + <var:d> * <var:U> ; <var:d> := <nat:2> + <var:d> * <var:U> ; <var:d> := <var:d> * <var:U> ; <var:d> := <nat:2> + <var:d> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:U> = <var:K> }} <def:poly> {{ <var:d> = <nat:1> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:d> = <nat:1> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:d> = <nat:1> * <var:K> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:d> = <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:d> = <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:d> = <nat:1> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:d> = <nat:1> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 