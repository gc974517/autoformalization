\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:8> ; <var:c1> := <nat:9> ; <var:c1> := <var:c1> * <var:y> ; <var:c2> := <nat:8> ; <var:c2> := <var:c2> * <var:y> ; <var:c2> := <var:c2> * <var:y> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:y> ; <var:c3> := <var:c3> * <var:y> ; <var:c3> := <var:c3> * <var:y> ; <var:o> := <var:c3> ; <var:o> := <var:o> + <var:c2> ; <var:o> := <var:o> + <var:c1> ; <var:o> := <var:o> + <var:c0> \end{verbatim} Assume it to be that $ <var:y> = <var:T> $ prior to the evaluation of this code then we see $ <var:o> = <nat:3> \cdot <var:T> ^ <nat:3> + <nat:8> \cdot <var:T> ^ <nat:2> + <nat:9> \cdot <var:T> + <nat:8> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:y> = <var:T> \} \\ <var:c0> := <nat:8> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \} \\ <var:c1> := <nat:9> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \} \\ <var:c1> := <var:c1> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \} \\ <var:c2> := <nat:8> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:c2> = <nat:8> \} \\ <var:c2> := <var:c2> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:c2> = <nat:8> \times <var:T> \} \\ <var:c2> := <var:c2> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:c2> = <nat:8> \times <var:T> ^ <nat:2> \} \\ <var:c3> := <nat:3> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:c2> = <nat:8> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:3> \} \\ <var:c3> := <var:c3> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:c2> = <nat:8> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:T> \} \\ <var:c3> := <var:c3> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:c2> = <nat:8> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:T> ^ <nat:2> \} \\ <var:c3> := <var:c3> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:c2> = <nat:8> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:T> ^ <nat:3> \} \\ <var:o> := <var:c3> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:c2> = <nat:8> \times <var:T> ^ <nat:2> \land <var:o> = <nat:3> \times <var:T> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:c2> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \times <var:T> \land <var:o> = <nat:3> \times <var:T> ^ <nat:3> + <nat:8> \times <var:T> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:c1> ; \\ \{ <var:y> = <var:T> \land <var:c0> = <nat:8> \land <var:o> = <nat:3> \times <var:T> ^ <nat:3> + <nat:8> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> \} \\ <var:o> := <var:o> + <var:c0> \\ \{ <var:y> = <var:T> \land <var:o> = <nat:3> \times <var:T> ^ <nat:3> + <nat:8> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> + <nat:8> \} \end{eqnarray} Hence , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:y> = <var:T> }} <var:c0> := <nat:8> ; <var:c1> := <nat:9> ; <var:c1> := <var:c1> * <var:y> ; <var:c2> := <nat:8> ; <var:c2> := <var:c2> * <var:y> ; <var:c2> := <var:c2> * <var:y> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:y> ; <var:c3> := <var:c3> * <var:y> ; <var:c3> := <var:c3> * <var:y> ; <var:o> := <var:c3> ; <var:o> := <var:o> + <var:c2> ; <var:o> := <var:o> + <var:c1> ; <var:o> := <var:o> + <var:c0> {{ <var:o> = <nat:3> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:c2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:c2> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:c2> = <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:c2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:c3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:c2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:c2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:c2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:c2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:o> = <nat:3> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:T> /\ <var:o> = <nat:3> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:c0> = <nat:8> /\ <var:o> = <nat:3> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:o> = <nat:3> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 