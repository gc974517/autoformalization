\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:9> ; <var:H> := <var:R0> \end{verbatim} Allowing it to hold that $ <var:I> = <var:m> $ before running this program it holds that $ <var:H> = <nat:9> $ once series of commands terminates . \end{theorem} \begin{proof} The course of logic for the list of commands is shown through Hoare techniques . Stepping through , we have \verb | { <var:I> = <var:m> } <var:R0> := <nat:9> { <var:I> = <var:m> \land <var:R0> = <nat:9> } | and \verb | { <var:I> = <var:m> \land <var:R0> = <nat:9> } <var:H> := <var:R0{ <var:I> = <var:m> \land <var:H> = <nat:9> } | . This is rigorously given through the variable binding inference rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:I> = <var:m> }} <var:R0> := <nat:9> ; <var:H> := <var:R0> {{ <var:H> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:H> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 