\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as \begin{verbatim} <var:P> := <nat:2> ; <var:P> := <nat:3> + <var:P> * <var:v> ; <var:P> := <var:P> * <var:v> ; <var:P> := <nat:1> + <var:P> * <var:v> ; <var:P> := <nat:1> + <var:P> * <var:v> ; <var:P> := <nat:1> + <var:P> * <var:v> ; <var:P> := <nat:2> + <var:P> * <var:v> \end{verbatim} Allow it to be that $ <var:v> = <var:d> $ ( given integers $ <var:d> $ ) ahead of executing the segment of code it must be that we see $ <var:P> = <nat:2> \cdot <var:d> ^ <nat:6> + <nat:3> \cdot <var:d> ^ <nat:5> + <nat:1> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:2> $ after series of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:d> \} \\ <var:P> := <nat:2> ; \\ \{ <var:v> = <var:d> \land <var:P> = <nat:2> \} \\ <var:P> := <nat:3> + <var:P> * <var:v> ; \\ \{ <var:v> = <var:d> \land <var:P> = <nat:2> \times <var:d> + <nat:3> \} \\ <var:P> := <var:P> * <var:v> ; \\ \{ <var:v> = <var:d> \land <var:P> = <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + \} \\ <var:P> := <nat:1> + <var:P> * <var:v> ; \\ \{ <var:v> = <var:d> \land <var:P> = <nat:2> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:1> \} \\ <var:P> := <nat:1> + <var:P> * <var:v> ; \\ \{ <var:v> = <var:d> \land <var:P> = <nat:2> \times <var:d> ^ <nat:4> + <nat:3> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> + <nat:1> \} \\ <var:P> := <nat:1> + <var:P> * <var:v> ; \\ \{ <var:v> = <var:d> \land <var:P> = <nat:2> \times <var:d> ^ <nat:5> + <nat:3> \times <var:d> ^ <nat:4> + <nat:1> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:1> \} \\ <var:P> := <nat:2> + <var:P> * <var:v> \\ \{ <var:v> = <var:d> \land <var:P> = <nat:2> \times <var:d> ^ <nat:6> + <nat:3> \times <var:d> ^ <nat:5> + <nat:1> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> \} \end{eqnarray} Utilizing Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:v> = <var:d> }} <var:P> := <nat:2> ; <var:P> := <nat:3> + <var:P> * <var:v> ; <var:P> := <var:P> * <var:v> ; <var:P> := <nat:1> + <var:P> * <var:v> ; <var:P> := <nat:1> + <var:P> * <var:v> ; <var:P> := <nat:1> + <var:P> * <var:v> ; <var:P> := <nat:2> + <var:P> * <var:v> {{ <var:P> = <nat:2> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:d> /\ <var:P> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:d> /\ <var:P> = <nat:2> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:d> /\ <var:P> = <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:d> /\ <var:P> = <nat:2> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:d> /\ <var:P> = <nat:2> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:1> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:d> /\ <var:P> = <nat:2> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:d> /\ <var:P> = <nat:2> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 