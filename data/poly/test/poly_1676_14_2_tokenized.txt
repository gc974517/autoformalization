\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:q> := <nat:2> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> ; <var:q> := <nat:1> + <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:4> + <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> ; <var:q> := <var:q> * <var:w> ; <var:q> := <nat:1> + <var:q> * <var:w> ; <var:q> := <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:w> = <var:l> $ ahead of evaluating the series of instructions , it follows that we have $ <var:q> = <nat:2> \cdot <var:l> ^ <nat:13> + <nat:3> \cdot <var:l> ^ <nat:12> + <nat:2> \cdot <var:l> ^ <nat:11> + <nat:1> \cdot <var:l> ^ <nat:10> + <nat:2> \cdot <var:l> ^ <nat:9> + <nat:3> \cdot <var:l> ^ <nat:8> + <nat:3> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is accomplished using typical Hoare logic . Moving on to the next step , we have the statement binding $ <nat:2> $ into $ <var:q>$ . This advances the precondition $ \{ <var:w> = <var:l> \} $ toward $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \} $ . This is shown to be logically sound using the assignment rule from typical Hoare logic . Moving on to the next statement found in the program , the variable update command \verb | <var:q> := <nat:3> + <var:q> * <var:w> ; | . This command forwards the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \} $ as the postcondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> + <nat:3> \} $ . This is sound using the assignment scheme given by Hoare reasoning . Moving on to the proceeding piece of code contained in the code segment , we see the command giving $ <nat:2> + <var:q> * <var:w> $ to $ <var:q>$ . This redefines the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> + <nat:3> \} $ toward the postcondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:2> \} $ . Looking at the upcoming bit of code in our series of commands , we have the binding code binding $ <nat:1> + <var:q> * <var:w> $ into $ <var:q>$ . This line advances $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:2> \} $ into $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:1> \} $ . This is shown to be logically sound with the assignment scheme from Hoare reasoning . Moving onward , we have the variable binding command \verb | <var:q> := <nat:2> + <var:q> * <var:w> ; | . This code advances the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:1> \} $ into the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:2> \} $ . This is deduced through the assignment law defined in typical Hoare techniques . Looking at the subsequent bit of code seen in our code , we see the variable update statement \verb | <var:q> := <nat:3> + <var:q> * <var:w> ; | . This forwards the precondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:2> \} $ as the postcondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:3> \} $ . This is sound using the assignment rule given in standard Hoare logic . Next , we have the binding command \verb | <var:q> := <nat:3> + <var:q> * <var:w> ; | . This code redefines the precondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:3> \} $ as the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:6> + <nat:3> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:3> \} $ . This is guaranteed using the assignment law defined in standard Hoare logic . Following , we have the binding code binding $ <nat:4> + <var:q> * <var:w> $ to $ <var:q>$ . This transfers the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:6> + <nat:3> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:3> \} $ into the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:7> + <nat:3> \times <var:l> ^ <nat:6> + <nat:2> \times <var:l> ^ <nat:5> + <nat:1> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:4> \} $ . After , the variable assignmet code \verb | <var:q> := <nat:2> + <var:q> * <var:w> ; | . This command transfers the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:7> + <nat:3> \times <var:l> ^ <nat:6> + <nat:2> \times <var:l> ^ <nat:5> + <nat:1> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:4> \} $ to the postcondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:8> + <nat:3> \times <var:l> ^ <nat:7> + <nat:2> \times <var:l> ^ <nat:6> + <nat:1> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:2> \} $ . This is shown by the assignment law defined in usual Hoare logic . Going forward , we see the variable binding command giving $ <nat:2> + <var:q> * <var:w> $ toward $ <var:q>$ . This moves the precondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:8> + <nat:3> \times <var:l> ^ <nat:7> + <nat:2> \times <var:l> ^ <nat:6> + <nat:1> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:2> \} $ into the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:9> + <nat:3> \times <var:l> ^ <nat:8> + <nat:2> \times <var:l> ^ <nat:7> + <nat:1> \times <var:l> ^ <nat:6> + <nat:2> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:2> \} $ . After , we have the variable assignmet command binding $ <var:q> * <var:w> $ toward $ <var:q>$ . This line transfers the precondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:9> + <nat:3> \times <var:l> ^ <nat:8> + <nat:2> \times <var:l> ^ <nat:7> + <nat:1> \times <var:l> ^ <nat:6> + <nat:2> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:2> \} $ toward the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:10> + <nat:3> \times <var:l> ^ <nat:9> + <nat:2> \times <var:l> ^ <nat:8> + <nat:1> \times <var:l> ^ <nat:7> + <nat:2> \times <var:l> ^ <nat:6> + <nat:3> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + \} $ . This is known to be sound using the assignment rule given in typical Hoare logic . Considering the next piece of code seen in our list of instructions , we have the variable binding code giving $ <nat:1> + <var:q> * <var:w> $ toward $ <var:q>$ . This statement takes $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:10> + <nat:3> \times <var:l> ^ <nat:9> + <nat:2> \times <var:l> ^ <nat:8> + <nat:1> \times <var:l> ^ <nat:7> + <nat:2> \times <var:l> ^ <nat:6> + <nat:3> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + \} $ to $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:11> + <nat:3> \times <var:l> ^ <nat:10> + <nat:2> \times <var:l> ^ <nat:9> + <nat:1> \times <var:l> ^ <nat:8> + <nat:2> \times <var:l> ^ <nat:7> + <nat:3> \times <var:l> ^ <nat:6> + <nat:3> \times <var:l> ^ <nat:5> + <nat:4> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \} $ . Advancing on , we see the environment update statement \verb | <var:q> := <var:q> * <var:w> ; | . This takes $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:11> + <nat:3> \times <var:l> ^ <nat:10> + <nat:2> \times <var:l> ^ <nat:9> + <nat:1> \times <var:l> ^ <nat:8> + <nat:2> \times <var:l> ^ <nat:7> + <nat:3> \times <var:l> ^ <nat:6> + <nat:3> \times <var:l> ^ <nat:5> + <nat:4> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \} $ into the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:12> + <nat:3> \times <var:l> ^ <nat:11> + <nat:2> \times <var:l> ^ <nat:10> + <nat:1> \times <var:l> ^ <nat:9> + <nat:2> \times <var:l> ^ <nat:8> + <nat:3> \times <var:l> ^ <nat:7> + <nat:3> \times <var:l> ^ <nat:6> + <nat:4> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> + \} $ . This is ensured with the assignment rule obtained from typical Hoare logic . Looking at the proceeding statement contained in the set of instructions , we see the variable assignmet code letting $ <nat:2> + <var:q> * <var:w$ to $ <var:q>$ . This transfers the precondition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:12> + <nat:3> \times <var:l> ^ <nat:11> + <nat:2> \times <var:l> ^ <nat:10> + <nat:1> \times <var:l> ^ <nat:9> + <nat:2> \times <var:l> ^ <nat:8> + <nat:3> \times <var:l> ^ <nat:7> + <nat:3> \times <var:l> ^ <nat:6> + <nat:4> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> + \} $ into the condition $ \{ <var:w> = <var:l> \land <var:q> = <nat:2> \times <var:l> ^ <nat:13> + <nat:3> \times <var:l> ^ <nat:12> + <nat:2> \times <var:l> ^ <nat:11> + <nat:1> \times <var:l> ^ <nat:10> + <nat:2> \times <var:l> ^ <nat:9> + <nat:3> \times <var:l> ^ <nat:8> + <nat:3> \times <var:l> ^ <nat:7> + <nat:4> \times <var:l> ^ <nat:6> + <nat:2> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:2> + <nat:2> \} $ . This is shown using the assignment scheme given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:2> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> ; <var:q> := <nat:1> + <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:4> + <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> ; <var:q> := <var:q> * <var:w> ; <var:q> := <nat:1> + <var:q> * <var:w> ; <var:q> := <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:w> = <var:l> }} <def:poly> {{ <var:q> = <nat:2> * <var:l> ^ <nat:13> + <nat:3> * <var:l> ^ <nat:12> + <nat:2> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:2> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:10> + <nat:3> * <var:l> ^ <nat:9> + <nat:2> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:11> + <nat:3> * <var:l> ^ <nat:10> + <nat:2> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:12> + <nat:3> * <var:l> ^ <nat:11> + <nat:2> * <var:l> ^ <nat:10> + <nat:1> * <var:l> ^ <nat:9> + <nat:2> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:q> = <nat:2> * <var:l> ^ <nat:13> + <nat:3> * <var:l> ^ <nat:12> + <nat:2> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:2> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 