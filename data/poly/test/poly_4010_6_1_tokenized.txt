\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U1> := <var:H> ; <var:U2> := <var:U1> * <var:H> ; <var:U0> := <nat:2> ; <var:U2> := <var:U2> * <nat:1> ; <var:C> := <var:U2> <var:C> := <var:C> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Assume it to be that $ <var:H> = <var:p> $ given any $ <var:p> \in \mathbb{N} $ ahead of evaluating this list of commands , it holds that we see $ <var:C> = <nat:1> \times <var:p> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The argument for this series of commands can be seen with Hoare techniques . Observing the proceeding line of code found in the program , we see the variable binding code defining $ <var:H> $ into $ <var:U1>$ . This advances the condition $ \{ <var:H> = <var:p> \} $ to the condition $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \} $ . This is ensured using the assignment law defined by standard Hoare reasoning . Observing the following line of code contained in the set of commands , we see the assignment code giving $ <var:U1> * <var:H> $ to $ <var:U2>$ . This code transfers $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \} $ toward $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \land <var:U2> = <var:p> ^ <nat:2> \} $ . Observing the next statement in the list of commands , we see the environment update command \verb | <var:U0> := <nat:2> ; | . This transfers $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \land <var:U2> = <var:p> ^ <nat:2> \} $ into $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \land <var:U2> = <var:p> ^ <nat:2> \land <var:U0> = <nat:2> \} $ . This is deduced using the assignment law obtained from Hoare logic . Going to the next step , we have the variable update code binding $ <var:U2> * <nat:1> $ as $ <var:U2>$ . This line moves the condition $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \land <var:U2> = <var:p> ^ <nat:2> \land <var:U0> = <nat:2> \} $ toward the postcondition $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \land <var:U2> = <nat:1> * <var:p> ^ <nat:2> \land <var:U0> = <nat:2> \} $ . Paying attention to the subsequent bit of code in our set of commands , we see the environment update statement \verb | <var:C> := <var:U2> | . This moves the precondition $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \land <var:U2> = <nat:1> * <var:p> ^ <nat:2> \land <var:U0> = <nat:2> \} $ into the postcondition $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \land <var:U0> = <nat:2> \land <var:C> = <nat:1> * <var:p> ^ <nat:2> \} $ . Shifting focus toward the proceeding bit of code contained in the list of commands , the binding code \verb | <var:C> := <var:C> + <var:U0> | . This takes the condition $ \{ <var:H> = <var:p> \land <var:U1> = <var:p> \land <var:U0> = <nat:2> \land <var:C> = <nat:1> * <var:p> ^ <nat:2> \} $ as $ \{ <var:H> = <var:p> \land <var:C> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> \} $ . This is guaranteed through the assignment rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U1> := <var:H> ; <var:U2> := <var:U1> * <var:H> ; <var:U0> := <nat:2> ; <var:U2> := <var:U2> * <nat:1> ; <var:C> := <var:U2> <var:C> := <var:C> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:H> = <var:p> }} <def:poly> {{ <var:C> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:U1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:U1> = <var:p> /\ <var:U2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:U1> = <var:p> /\ <var:U2> = <var:p> ^ <nat:2> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:U1> = <var:p> /\ <var:U2> = <nat:1> * <var:p> ^ <nat:2> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:U1> = <var:p> /\ <var:U0> = <nat:2> /\ <var:C> = <nat:1> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:C> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 