\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:B1> := <var:c> ; <var:B2> := <var:B1> * <var:c> ; <var:B3> := <var:B2> * <var:c> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:2> ; <var:B3> := <var:B3> * <nat:4> ; <var:s> := <var:B3> <var:s> := <var:s> + <var:B1> <var:s> := <var:s> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:c> = <var:S> $ prior to evaluating this list of instructions it follows that we have $ <var:s> = <nat:4> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> + <nat:4> $ after code is done executing . \end{theorem} \begin{proof} The course of logic for the set of commands can be seen through Hoare logic . Going to the next step , we see \begin{verbatim} { <var:c> = <var:S> } <var:B1> := <var:c> { <var:c> = <var:S> \land <var:B1> = <var:S> } { <var:c> = <var:S> \land <var:B1> = <var:S> } <var:B2> := <var:B1> * <var:c> { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> } \end{verbatim} This is given using the variable assignmet inference rule found in usual Hoare logic . Honing in on the next lines in our series of instructions , we see \begin{verbatim} { <var:c> = <var:S> } <var:B1> := <var:c> { <var:c> = <var:S> \land <var:B1> = <var:S> } { <var:c> = <var:S> \land <var:B1> = <var:S> } <var:B2> := <var:B1> * <var:c> { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> } { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> } <var:B3> := <var:B2> * <var:c> { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> \land <var:B3> = <var:S> ^ <nat:3> } { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> \land <var:B3> = <var:S> ^ <nat:3> } <var:B0> := <nat:4> { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> \land <var:B3> = <var:S> ^ <nat:3> \land <var:B0> = <nat:4> } \end{verbatim} This is deduced through the variable assignmet scheme defined in typical Hoare techniques . Focusing on the proceeding lines of codeseen in our code segment , we have \begin{verbatim} { <var:c> = <var:S> } <var:B1> := <var:c> { <var:c> = <var:S> \land <var:B1> = <var:S> } { <var:c> = <var:S> \land <var:B1> = <var:S> } <var:B2> := <var:B1> * <var:c> { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> } { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> } <var:B3> := <var:B2> * <var:c> { <var:c> = <var:S> \land <var:B1> = <var:S> \land <var:B2> = <var:S> ^ <nat:2> \land <var:B3> = <var:S> ^ <nat:3> } \end{verbatim} This is guaranteed by the environment update scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:c> ; <var:B2> := <var:B1> * <var:c> ; <var:B3> := <var:B2> * <var:c> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:2> ; <var:B3> := <var:B3> * <nat:4> ; <var:s> := <var:B3> <var:s> := <var:s> + <var:B1> <var:s> := <var:s> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:c> = <var:S> }} <def:poly> {{ <var:s> = <nat:4> * <var:S> ^ <nat:3> + <nat:2> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:B1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:B1> = <var:S> /\ <var:B2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:B1> = <var:S> /\ <var:B2> = <var:S> ^ <nat:2> /\ <var:B3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:B1> = <var:S> /\ <var:B2> = <var:S> ^ <nat:2> /\ <var:B3> = <var:S> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:B1> = <nat:2> * <var:S> /\ <var:B2> = <var:S> ^ <nat:2> /\ <var:B3> = <var:S> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:B1> = <nat:2> * <var:S> /\ <var:B2> = <var:S> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:S> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:B1> = <nat:2> * <var:S> /\ <var:B2> = <var:S> ^ <nat:2> /\ <var:B0> = <nat:4> /\ <var:s> = <nat:4> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:B0> = <nat:4> /\ <var:s> = <nat:4> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:s> = <nat:4> * <var:S> ^ <nat:3> + <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 