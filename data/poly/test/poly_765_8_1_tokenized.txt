\begin{document} \begin{theorem} Take a set of instructions such that \begin{verbatim} <var:c1> := <var:o> ; <var:c2> := <var:c1> * <var:o> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:7> ; <var:c2> := <var:c2> * <nat:2> ; <var:v> := <var:c2> <var:v> := <var:v> + <var:c1> <var:v> := <var:v> + <var:c0> \end{verbatim} Given $ <var:o> = <var:M> $ --- for all positive coefficients $ <var:M> $ --- prior to the evaluation of the code segment then we see $ <var:v> = <nat:2> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:o> = <var:M> \} \\ <var:c1> := <var:o> ; \\ \{ <var:o> = <var:M> \land <var:c1> = <var:M> \} \\ <var:c2> := <var:c1> * <var:o> ; \\ \{ <var:o> = <var:M> \land <var:c1> = <var:M> \land <var:c2> = <var:M> ^ <nat:2> \} \\ <var:c0> := <nat:6> ; \\ \{ <var:o> = <var:M> \land <var:c1> = <var:M> \land <var:c2> = <var:M> ^ <nat:2> \land <var:c0> = <nat:6> \} \\ <var:c1> := <var:c1> * <nat:7> ; \\ \{ <var:o> = <var:M> \land <var:c1> = <nat:7> * <var:M> \land <var:c2> = <var:M> ^ <nat:2> \land <var:c0> = <nat:6> \} \\ <var:c2> := <var:c2> * <nat:2> ; \\ \{ <var:o> = <var:M> \land <var:c1> = <nat:7> * <var:M> \land <var:c2> = <nat:2> * <var:M> ^ <nat:2> \land <var:c0> = <nat:6> \} \\ <var:v> := <var:c2> \\ \{ <var:o> = <var:M> \land <var:c1> = <nat:7> * <var:M> \land <var:c0> = <nat:6> \land <var:v> = <nat:2> * <var:M> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:c1> \\ \{ <var:o> = <var:M> \land <var:c0> = <nat:6> \land <var:v> = <nat:2> * <var:M> ^ <nat:2> + <nat:7> * <var:M> \} \\ <var:v> := <var:v> + <var:c0> \\ \{ <var:o> = <var:M> \land <var:v> = <nat:2> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:6> \} \end{eqnarray} Therefore , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:o> = <var:M> }} <var:c1> := <var:o> ; <var:c2> := <var:c1> * <var:o> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:7> ; <var:c2> := <var:c2> * <nat:2> ; <var:v> := <var:c2> <var:v> := <var:v> + <var:c1> <var:v> := <var:v> + <var:c0> {{ <var:v> = <nat:2> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:c1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:c1> = <var:M> /\ <var:c2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:c1> = <var:M> /\ <var:c2> = <var:M> ^ <nat:2> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:c1> = <nat:7> * <var:M> /\ <var:c2> = <var:M> ^ <nat:2> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:c1> = <nat:7> * <var:M> /\ <var:c2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:c1> = <nat:7> * <var:M> /\ <var:c0> = <nat:6> /\ <var:v> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:c0> = <nat:6> /\ <var:v> = <nat:2> * <var:M> ^ <nat:2> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:v> = <nat:2> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 