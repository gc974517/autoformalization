\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:1> ; <var:Q> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Assuming that $ <var:W> = <var:q> $ ahead of interpreting this series of commands it holds that we have $ <var:Q> = <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:W> = <var:q> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:W> = <var:q> \land <var:L0> = <nat:1> \} \\ <var:Q> := <var:L0> \\ \{ <var:W> = <var:q> \land <var:Q> = <nat:1> \} \end{eqnarray} Given the above , this segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:1> ; <var:Q> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:W> = <var:q> }} <def:poly> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:q> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:q> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 