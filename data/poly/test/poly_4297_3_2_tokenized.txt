\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s> := <nat:1> ; <var:s> := <var:s> * <var:Y> ; <var:s> := <nat:4> + <var:s> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:Y> = <var:i> $ ahead of evaluating this series of commands it follows that we see $ <var:s> = <nat:1> * <var:i> ^ <nat:2> + <nat:4> $ when set of instructions is done executing . \end{theorem} \begin{proof} The method of proof for our set of commands can be seen through usual Hoare logic . Looking at the following bits of codein the list of instructions , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:i> \} & <var:s> := <nat:1> & \{ <var:Y> = <var:i> \land <var:s> = <nat:1> \} \\ \{ <var:Y> = <var:i> \land <var:s> = <nat:1> \} & <var:s> := <var:s> * <var:Y> & \{ <var:Y> = <var:i> \land <var:s> = <nat:1> * <var:i> + \} \end{tabular} This is given using the environment update inference rule defined by standard Hoare logic . Observing the next bit of code in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:i> \} & <var:s> := <nat:1> & \{ <var:Y> = <var:i> \land <var:s> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:1> ; <var:s> := <var:s> * <var:Y> ; <var:s> := <nat:4> + <var:s> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Y> = <var:i> }} <def:poly> {{ <var:s> = <nat:1> * <var:i> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:s> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:s> = <nat:1> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:s> = <nat:1> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 