\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:1> ; <var:R> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Assume that we have $ <var:F> = <var:K> $ before running the series of commands , it follows that $ <var:R> = <nat:1> $ . \end{theorem} \begin{proof} The argument for our series of instructions can be done by standard Hoare reasoning . Next , the environment update statement giving $ <nat:1> $ toward $ <var:Q0>$ . This takes the precondition $ \{ <var:F> = <var:K> \} $ toward the postcondition $ \{ <var:F> = <var:K> \land <var:Q0> = <nat:1> \} $ . This is ensured with the assignment inference rule given by standard Hoare reasoning . Taking a look at the proceeding statement in the code segment , we see the assignment line binding $ <var:Q0$ toward $ <var:R>$ . This statement transfers the condition $ \{ <var:F> = <var:K> \land <var:Q0> = <nat:1> \} $ into the condition $ \{ <var:F> = <var:K> \land <var:R> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:1> ; <var:R> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:F> = <var:K> }} <def:poly> {{ <var:R> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:R> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 