\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:5> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:P> ; <var:H2> := <nat:5> ; <var:H2> := <var:H2> * <var:P> ; <var:H2> := <var:H2> * <var:P> ; <var:H3> := <nat:9> ; <var:H3> := <var:H3> * <var:P> ; <var:H3> := <var:H3> * <var:P> ; <var:H3> := <var:H3> * <var:P> ; <var:T> := <var:H3> ; <var:T> := <var:T> + <var:H2> ; <var:T> := <var:T> + <var:H1> ; <var:T> := <var:T> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:P> = <var:z> $ before running the list of commands , it must be that we see $ <var:T> = <nat:9> \cdot <var:z> ^ <nat:3> + <nat:5> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:5> $ after set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:z> \} \\ <var:H0> := <nat:5> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \} \\ <var:H1> := <nat:1> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \} \\ <var:H1> := <var:H1> * <var:P> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \} \\ <var:H2> := <nat:5> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:H2> = <nat:5> \} \\ <var:H2> := <var:H2> * <var:P> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:H2> = <nat:5> \times <var:z> \} \\ <var:H2> := <var:H2> * <var:P> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:H2> = <nat:5> \times <var:z> ^ <nat:2> \} \\ <var:H3> := <nat:9> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:H2> = <nat:5> \times <var:z> ^ <nat:2> \land <var:H3> = <nat:9> \} \end{eqnarray} Furthering the evaluation of the list of instructions gives us : \begin{eqnarray} <var:H3> := <var:H3> * <var:P> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:H2> = <nat:5> \times <var:z> ^ <nat:2> \land <var:H3> = <nat:9> \times <var:z> \} \\ <var:H3> := <var:H3> * <var:P> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:H2> = <nat:5> \times <var:z> ^ <nat:2> \land <var:H3> = <nat:9> \times <var:z> ^ <nat:2> \} \\ <var:H3> := <var:H3> * <var:P> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:H2> = <nat:5> \times <var:z> ^ <nat:2> \land <var:H3> = <nat:9> \times <var:z> ^ <nat:3> \} \\ <var:T> := <var:H3> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:H2> = <nat:5> \times <var:z> ^ <nat:2> \land <var:T> = <nat:9> \times <var:z> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:H2> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:H1> = <nat:1> \times <var:z> \land <var:T> = <nat:9> \times <var:z> ^ <nat:3> + <nat:5> \times <var:z> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:H1> ; \\ \{ <var:P> = <var:z> \land <var:H0> = <nat:5> \land <var:T> = <nat:9> \times <var:z> ^ <nat:3> + <nat:5> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> \} \\ <var:T> := <var:T> + <var:H0> \\ \{ <var:P> = <var:z> \land <var:T> = <nat:9> \times <var:z> ^ <nat:3> + <nat:5> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:5> \} \end{eqnarray} Utilizing Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H0> := <nat:5> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:P> ; <var:H2> := <nat:5> ; <var:H2> := <var:H2> * <var:P> ; <var:H2> := <var:H2> * <var:P> ; <var:H3> := <nat:9> ; <var:H3> := <var:H3> * <var:P> ; <var:H3> := <var:H3> * <var:P> ; <var:H3> := <var:H3> * <var:P> ; <var:T> := <var:H3> ; <var:T> := <var:T> + <var:H2> ; <var:T> := <var:T> + <var:H1> ; <var:T> := <var:T> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:P> = <var:z> }} <def:poly> {{ <var:T> = <nat:9> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:H2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:H2> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:H2> = <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:H2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:H3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:H2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:H2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:H2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:H2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:T> = <nat:9> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:1> * <var:z> /\ <var:T> = <nat:9> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:H0> = <nat:5> /\ <var:T> = <nat:9> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:T> = <nat:9> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 