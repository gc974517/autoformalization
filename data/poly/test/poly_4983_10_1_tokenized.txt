\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:b> ; <var:Q2> := <var:Q1> * <var:b> ; <var:Q3> := <var:Q2> * <var:b> ; <var:Q4> := <var:Q3> * <var:b> ; <var:Q0> := <nat:5> ; <var:Q2> := <var:Q2> * <nat:9> ; <var:Q4> := <var:Q4> * <nat:6> ; <var:i> := <var:Q4> <var:i> := <var:i> + <var:Q2> <var:i> := <var:i> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Allowing it to be that $ <var:b> = <var:o> $ prior to the evaluation of the code then $ <var:i> = <nat:6> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:2> + <nat:5> $ once code exits . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code can be demonstrated by usual Hoare techniques . Focusing on the upcoming statement found in our code segment , we see the binding line yielding $ <var:b> $ toward $ <var:Q1>$ . This redefines the condition $ \{ <var:b> = <var:o> \} $ as the postcondition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \} $ . Further , we see the variable update command \verb | <var:Q2> := <var:Q1> * <var:b> ; | . This statement advances the condition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \} $ as the postcondition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \} $ . After , we have the environment update line \verb | <var:Q3> := <var:Q2> * <var:b> ; | . This redefines the condition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \} $ toward the condition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \} $ . This is deduced using the assignment scheme in usual Hoare techniques . Moving onward , we see the variable binding command \verb | <var:Q4> := <var:Q3> * <var:b> ; | . This advances the precondition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \} $ as the postcondition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q4> = <var:o> ^ <nat:4> \} $ . Immediately following , we see the variable assignmet line \verb | <var:Q0> := <nat:5> ; | . This line moves the condition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q4> = <var:o> ^ <nat:4> \} $ toward $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q4> = <var:o> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . Moving onward , we have the variable binding statement \verb | <var:Q2> := <var:Q2> * <nat:9> ; | . This statement moves $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q4> = <var:o> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ toward the condition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q4> = <var:o> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . Moving on to the proceeding piece of code found in our series of instructions , we have the variable update statement letting $ <var:Q4> * <nat:6> $ as $ <var:Q4>$ . This command takes the condition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q4> = <var:o> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ into the postcondition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q4> = <nat:6> \times <var:o> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . Moving forward , we have the variable assignmet command giving $ <var:Q4$ toward $ <var:i>$ . This statement redefines $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q4> = <nat:6> \times <var:o> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ to the postcondition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q0> = <nat:5> \land <var:i> = <nat:6> \times <var:o> ^ <nat:4> \} $ . Immediately following , we have the environment update code binding $ <var:i> + <var:Q2$ as $ <var:i>$ . This command advances the precondition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q0> = <nat:5> \land <var:i> = <nat:6> \times <var:o> ^ <nat:4> \} $ to the condition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q0> = <nat:5> \land <var:i> = <nat:6> \times <var:o> ^ <nat:4> + <nat:9> \times <var:o> ^ <nat:2> \} $ . Looking at the next command in our code segment , we have the environment update statement giving $ <var:i> + <var:Q0$ as $ <var:i>$ . This advances the condition $ \{ <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q0> = <nat:5> \land <var:i> = <nat:6> \times <var:o> ^ <nat:4> + <nat:9> \times <var:o> ^ <nat:2> \} $ to the condition $ \{ <var:b> = <var:o> \land <var:i> = <nat:6> \times <var:o> ^ <nat:4> + <nat:9> \times <var:o> ^ <nat:2> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Definition <def:poly> := <var:Q1> := <var:b> ; <var:Q2> := <var:Q1> * <var:b> ; <var:Q3> := <var:Q2> * <var:b> ; <var:Q4> := <var:Q3> * <var:b> ; <var:Q0> := <nat:5> ; <var:Q2> := <var:Q2> * <nat:9> ; <var:Q4> := <var:Q4> * <nat:6> ; <var:i> := <var:Q4> <var:i> := <var:i> + <var:Q2> <var:i> := <var:i> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:b> = <var:o> }} <def:poly> {{ <var:i> = <nat:6> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> /\ <var:Q4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> /\ <var:Q4> = <var:o> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> /\ <var:Q4> = <var:o> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> /\ <var:Q4> = <nat:6> * <var:o> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> /\ <var:Q0> = <nat:5> /\ <var:i> = <nat:6> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q0> = <nat:5> /\ <var:i> = <nat:6> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:i> = <nat:6> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 