\begin{document} \begin{theorem} Define the following segment of code such that \begin{verbatim} <var:x0> := <nat:3> ; <var:Q> := <var:x0> \end{verbatim} Allowing it to be that $ <var:V> = <var:U> $ ahead of the evaluation of this list of instructions it holds that we see $ <var:Q> = <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare logic results in : \begin{eqnarray} \{ <var:V> = <var:U> \} \\ <var:x0> := <nat:3> ; \\ \{ <var:V> = <var:U> \land <var:x0> = <nat:3> \} \\ <var:Q> := <var:x0> \\ \{ <var:V> = <var:U> \land <var:Q> = <nat:3> \} \end{eqnarray} Thus , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:V> = <var:U> }} <var:x0> := <nat:3> ; <var:Q> := <var:x0> {{ <var:Q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:Q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 