\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:7> ; <var:t1> := <nat:2> ; <var:t1> := <var:t1> * <var:D> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:D> ; <var:t2> := <var:t2> * <var:D> ; <var:t3> := <nat:3> ; <var:t3> := <var:t3> * <var:D> ; <var:t3> := <var:t3> * <var:D> ; <var:t3> := <var:t3> * <var:D> ; <var:f> := <var:t3> ; <var:f> := <var:f> + <var:t2> ; <var:f> := <var:f> + <var:t1> ; <var:f> := <var:f> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:D> = <var:n> $ ahead of the execution of this list of instructions it holds that $ <var:f> = <nat:3> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:7> $ once set of instructions has exited . \end{theorem} \begin{proof} The proof of the program is demonstrated using Hoare techniques . Observing the next command found in the list of commands , we have the variable assignmet command \verb | <var:t0> := <nat:7> ; | . This command redefines the condition $ \{ <var:D> = <var:n> \} $ as $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \} $ . This is guaranteed using the assignment rule obtained from Hoare reasoning . Considering the following piece of code seen in the code , we have the command letting $ <nat:2> $ as $ <var:t1>$ . This forwards $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \} $ to the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \} $ . This is rigorously given through the assignment law found in typical Hoare reasoning . Honing in on the proceeding piece of code in the series of instructions , we see the variable update code \verb | <var:t1> := <var:t1> * <var:D> ; | . This moves the precondition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \} $ to the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \} $ . This is guaranteed with the assignment rule in usual Hoare reasoning . Further , the variable assignmet line defining $ <nat:7> $ toward $ <var:t2>$ . This transfers $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \} $ to the postcondition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \} $ . Taking another step toward the subsequent statement contained in the list of instructions , the assignment statement \verb | <var:t2> := <var:t2> * <var:D> ; | . This takes the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \} $ to the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> \} $ . This is given with the assignment scheme defined by usual Hoare reasoning . Advancing , the command \verb | <var:t2> := <var:t2> * <var:D> ; | . This moves the precondition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> \} $ as the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \} $ . This is sound through the assignment scheme from usual Hoare logic . Honing in on the following step found in the list of commands , we see the binding line binding $ <nat:3> $ into $ <var:t3>$ . This redefines the precondition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \} $ as $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:t3> = <nat:3> \} $ . Going forward , the variable assignmet command yielding $ <var:t3> * <var:D> $ into $ <var:t3>$ . This code redefines the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:t3> = <nat:3> \} $ toward the postcondition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:n> \} $ . Moving forward to the next step , the binding code \verb | <var:t3> := <var:t3> * <var:D> ; | . This transfers $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:n> \} $ toward the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:n> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment scheme defined in usual Hoare logic . Keeping momentum , the line defining $ <var:t3> * <var:D> $ to $ <var:t3>$ . This redefines the precondition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:n> ^ <nat:2> \} $ to the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:n> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment scheme of standard Hoare reasoning . Next , we see the variable binding code \verb | <var:f> := <var:t3> ; | . This code moves the precondition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:n> ^ <nat:3> \} $ to $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:f> = <nat:3> \times <var:n> ^ <nat:3> \} $ . Paying attention to the subsequent command contained in our code segment , we have the variable update statement \verb | <var:f> := <var:f> + <var:t2> ; | . This command transfers the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:t2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:f> = <nat:3> \times <var:n> ^ <nat:3> \} $ into the condition $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:f> = <nat:3> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> \} $ . This is rigorously given using the assignment rule of Hoare techniques . Advancing , we see the variable binding code assigning $ <var:f> + <var:t1> $ into $ <var:f>$ . This statement transfers $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \times <var:n> \land <var:f> = <nat:3> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> \} $ as $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:f> = <nat:3> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> \} $ . This is given with the assignment law in standard Hoare logic . Advancing on , the binding command \verb | <var:f> := <var:f> + <var:t0> | . This code transfers $ \{ <var:D> = <var:n> \land <var:t0> = <nat:7> \land <var:f> = <nat:3> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> \} $ into the condition $ \{ <var:D> = <var:n> \land <var:f> = <nat:3> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:7> \} $ . This is known to be sound through the assignment rule found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t0> := <nat:7> ; <var:t1> := <nat:2> ; <var:t1> := <var:t1> * <var:D> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:D> ; <var:t2> := <var:t2> * <var:D> ; <var:t3> := <nat:3> ; <var:t3> := <var:t3> * <var:D> ; <var:t3> := <var:t3> * <var:D> ; <var:t3> := <var:t3> * <var:D> ; <var:f> := <var:t3> ; <var:f> := <var:f> + <var:t2> ; <var:f> := <var:f> + <var:t1> ; <var:f> := <var:f> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:D> = <var:n> }} <def:poly> {{ <var:f> = <nat:3> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:t2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:t2> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:t3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:f> = <nat:3> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:n> /\ <var:f> = <nat:3> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:t0> = <nat:7> /\ <var:f> = <nat:3> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:n> /\ <var:f> = <nat:3> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 