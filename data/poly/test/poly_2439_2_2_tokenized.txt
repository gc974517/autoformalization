\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <nat:1> + <var:l> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> . Allow that we have $ <var:Y> = <var:W> $ ahead of the execution of our set of instructions then we have $ <var:l> = <nat:2> \cdot <var:W> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions is shown with typical Hoare reasoning . Shifting focus toward the upcoming pieces of code found in our set of instructions , \begin{verbatim} { <var:Y> = <var:W> } <var:l> := <nat:2> { <var:Y> = <var:W> \land <var:l> = <nat:2> } { <var:Y> = <var:W> \land <var:l> = <nat:2> } <var:l> := <nat:1> + <var:l> * <var:Y{ <var:Y> = <var:W> \land <var:l> = <nat:2> * <var:W> + <nat:1> } \end{verbatim} This is shown by the variable update inference rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:2> ; <var:l> := <nat:1> + <var:l> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Y> = <var:W> }} <def:poly> {{ <var:l> = <nat:2> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:W> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:W> /\ <var:l> = <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 