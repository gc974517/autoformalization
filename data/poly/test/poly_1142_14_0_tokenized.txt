\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:r> ; <var:c2> := <nat:6> ; <var:c2> := <var:c2> * <var:r> ; <var:c2> := <var:c2> * <var:r> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:r> ; <var:c3> := <var:c3> * <var:r> ; <var:c3> := <var:c3> * <var:r> ; <var:C> := <var:c3> ; <var:C> := <var:C> + <var:c2> ; <var:C> := <var:C> + <var:c1> ; <var:C> := <var:C> + <var:c0> \end{verbatim} Assuming it to be that $ <var:r> = <var:B> $ ahead of evaluating our code it holds that we have $ <var:C> = <nat:3> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this program is given with usual Hoare techniques . Immediately following , we see the environment update line binding $ <nat:2> $ to $ <var:c0>$ . This command takes the condition $ \{ <var:r> = <var:B> \} $ as the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \} $ . This is shown to be logically sound through the assignment rule defined by standard Hoare logic . Immediately following , we have the environment update line assigning $ <nat:3> $ as $ <var:c1>$ . This advances the precondition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \} $ to the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \} $ . Immediately after , the binding code letting $ <var:c1> * <var:r> $ as $ <var:c1>$ . This code advances the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \} $ into the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \} $ . This is shown to be logically sound with the assignment scheme found in typical Hoare logic . Considering the next command contained in our program , we see the assignment code binding $ <nat:6> $ into $ <var:c2>$ . This code redefines the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \} $ as $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \} $ . This is sound with the assignment law of usual Hoare techniques . Moving on , the variable assignmet command yielding $ <var:c2> * <var:r> $ to $ <var:c2>$ . This advances the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \} $ to $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> \} $ . This is shown with the assignment law found in standard Hoare logic . Further , the assignment command \verb | <var:c2> := <var:c2> * <var:r> ; | . This transfers $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> \} $ to the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \} $ . After , we see the variable binding command letting $ <nat:3> $ into $ <var:c3>$ . This transfers the precondition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \} $ into the postcondition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:c3> = <nat:3> \} $ . This is given using the assignment law found in usual Hoare reasoning . Honing in on the next statement in the list of instructions , we see the assignment command yielding $ <var:c3> * <var:r> $ into $ <var:c3>$ . This takes the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:c3> = <nat:3> \} $ toward the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:B> \} $ . This is shown through the assignment inference rule found in usual Hoare reasoning . Shifting focus toward the upcoming bit of code seen in our segment of code , we see the binding line letting $ <var:c3> * <var:r> $ as $ <var:c3>$ . This redefines the precondition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:B> \} $ as the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:B> ^ <nat:2> \} $ . This is rigorously given with the assignment rule defined by standard Hoare reasoning . Considering the subsequent step seen in the program , the statement \verb | <var:c3> := <var:c3> * <var:r> ; | . This command takes $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:B> ^ <nat:2> \} $ to $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:B> ^ <nat:3> \} $ . This is deduced with the assignment inference rule defined in standard Hoare techniques . Moving forward to the upcoming step found in our code segment , we see the variable assignmet command binding $ <var:c3> $ as $ <var:C>$ . This forwards the precondition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:B> ^ <nat:3> \} $ to the postcondition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:C> = <nat:3> \cdot <var:B> ^ <nat:3> \} $ . This is sound through the assignment scheme given in standard Hoare reasoning . Focusing on the subsequent step in our series of commands , the environment update command \verb | <var:C> := <var:C> + <var:c2> ; | . This redefines the precondition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:c2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:C> = <nat:3> \cdot <var:B> ^ <nat:3> \} $ toward $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:C> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> \} $ . This is known to be sound with the assignment law of standard Hoare reasoning . Advancing to the next step , we have the code letting $ <var:C> + <var:c1> $ into $ <var:C>$ . This redefines the condition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \cdot <var:B> \land <var:C> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> \} $ as $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:C> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> \} $ . Taking a look at the next step in the code segment , we see the variable update command assigning $ <var:C> + <var:c0$ to $ <var:C>$ . This takes the precondition $ \{ <var:r> = <var:B> \land <var:c0> = <nat:2> \land <var:C> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> \} $ to the condition $ \{ <var:r> = <var:B> \land <var:C> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:2> \} $ . This is rigorously given with the assignment law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:r> = <var:B> }} <var:c0> := <nat:2> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:r> ; <var:c2> := <nat:6> ; <var:c2> := <var:c2> * <var:r> ; <var:c2> := <var:c2> * <var:r> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:r> ; <var:c3> := <var:c3> * <var:r> ; <var:c3> := <var:c3> * <var:r> ; <var:C> := <var:c3> ; <var:C> := <var:C> + <var:c2> ; <var:C> := <var:C> + <var:c1> ; <var:C> := <var:C> + <var:c0> {{ <var:C> = <nat:3> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:6> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:c3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:C> = <nat:3> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:B> /\ <var:C> = <nat:3> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:c0> = <nat:2> /\ <var:C> = <nat:3> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:C> = <nat:3> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 