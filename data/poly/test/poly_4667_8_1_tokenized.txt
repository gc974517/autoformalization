\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:h> ; <var:A2> := <var:A1> * <var:h> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:3> ; <var:I> := <var:A2> <var:I> := <var:I> + <var:A1> <var:I> := <var:I> + <var:A0> \end{verbatim} Given ( taking integers $ <var:g> $ ) $ <var:h> = <var:g> $ ahead of interpreting our code , then $ <var:I> = <nat:3> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for the series of commands is accomplished by typical Hoare reasoning . Taking another step toward the subsequent statements in our series of commands , \verb | { <var:h> = <var:g> } <var:A1> := <var:h> { <var:h> = <var:g> \land <var:A1> = <var:g> } | , \verb | { <var:h> = <var:g> \land <var:A1> = <var:g> } <var:A2> := <var:A1> * <var:h> { <var:h> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> } | , \verb | { <var:h> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> } <var:A0> := <nat:7> { <var:h> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A0> = <nat:7> } | , \verb | { <var:h> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A0> = <nat:7> } <var:A1> := <var:A1> * <nat:1> { <var:h> = <var:g> \land <var:A1> = <nat:1> \times <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A0> = <nat:7> } | and \verb | { <var:h> = <var:g> \land <var:A1> = <nat:1> \times <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A0> = <nat:7> } <var:A2> := <var:A2> * <nat:3> { <var:h> = <var:g> \land <var:A1> = <nat:1> \times <var:g> \land <var:A2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:A0> = <nat:7> } | . This is rigorously given through the variable binding inference rule of typical Hoare reasoning . Advancing on , \verb | { <var:h> = <var:g> } <var:A1> := <var:h> { <var:h> = <var:g> \land <var:A1> = <var:g> } | . Advancing on , \verb | { <var:h> = <var:g> } <var:A1> := <var:h> { <var:h> = <var:g> \land <var:A1> = <var:g> } | . This is ensured by the variable assignmet inference rule given by standard Hoare techniques . Honing in on the upcoming line seen in the segment of code , \verb | { <var:h> = <var:g> } <var:A1> := <var:h> { <var:h> = <var:g> \land <var:A1> = <var:g> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <var:A1> := <var:h> ; <var:A2> := <var:A1> * <var:h> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:3> ; <var:I> := <var:A2> <var:I> := <var:I> + <var:A1> <var:I> := <var:I> + <var:A0> {{ <var:I> = <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:A1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:A1> = <var:g> /\ <var:A2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:A1> = <var:g> /\ <var:A2> = <var:g> ^ <nat:2> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:A1> = <nat:1> * <var:g> /\ <var:A2> = <var:g> ^ <nat:2> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:A1> = <nat:1> * <var:g> /\ <var:A2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:A1> = <nat:1> * <var:g> /\ <var:A0> = <nat:7> /\ <var:I> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:A0> = <nat:7> /\ <var:I> = <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:I> = <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 