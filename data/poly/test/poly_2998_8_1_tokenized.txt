\begin{document} \begin{theorem} Let the following set of instructions as follows \begin{verbatim} <var:K1> := <var:Y> ; <var:K2> := <var:K1> * <var:Y> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:2> ; <var:R> := <var:K2> <var:R> := <var:R> + <var:K1> <var:R> := <var:R> + <var:K0> \end{verbatim} Given that we have $ <var:Y> = <var:z> $ before interpreting the segment of code , it holds that $ <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:Y> = <var:z> \} \\ <var:K1> := <var:Y> ; \\ \{ <var:Y> = <var:z> \land <var:K1> = <var:z> \} \\ <var:K2> := <var:K1> * <var:Y> ; \\ \{ <var:Y> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:Y> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K0> = <nat:4> \} \\ <var:K1> := <var:K1> * <nat:4> ; \\ \{ <var:Y> = <var:z> \land <var:K1> = <nat:4> \cdot <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K0> = <nat:4> \} \\ <var:K2> := <var:K2> * <nat:2> ; \\ \{ <var:Y> = <var:z> \land <var:K1> = <nat:4> \cdot <var:z> \land <var:K2> = <nat:2> \cdot <var:z> ^ <nat:2> \land <var:K0> = <nat:4> \} \\ <var:R> := <var:K2> \\ \{ <var:Y> = <var:z> \land <var:K1> = <nat:4> \cdot <var:z> \land <var:K0> = <nat:4> \land <var:R> = <nat:2> \cdot <var:z> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:K1> \\ \{ <var:Y> = <var:z> \land <var:K0> = <nat:4> \land <var:R> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> \} \\ <var:R> := <var:R> + <var:K0> \\ \{ <var:Y> = <var:z> \land <var:R> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:4> \} \end{eqnarray} Thus , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Y> = <var:z> }} <var:K1> := <var:Y> ; <var:K2> := <var:K1> * <var:Y> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:2> ; <var:R> := <var:K2> <var:R> := <var:R> + <var:K1> <var:R> := <var:R> + <var:K0> {{ <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:K1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:K1> = <var:z> /\ <var:K2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:K1> = <var:z> /\ <var:K2> = <var:z> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:K1> = <nat:4> * <var:z> /\ <var:K2> = <var:z> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:K1> = <nat:4> * <var:z> /\ <var:K2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:K1> = <nat:4> * <var:z> /\ <var:K0> = <nat:4> /\ <var:R> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:K0> = <nat:4> /\ <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 