\begin{document} \begin{theorem} Define the following program as follows \begin{verbatim} <var:O> := <nat:2> ; <var:O> := <nat:2> + <var:O> * <var:N> \end{verbatim} Assuming it to be that $ <var:N> = <var:P> $ ( given any $ <var:P> \in \mathbb{Z}^+ $ ) ahead of the execution of this list of instructions , it must be that we have $ <var:O> = <nat:2> * <var:P> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands is clear using Hoare logic . Advancing , \begin{verbatim} { <var:N> = <var:P> } <var:O> := <nat:2> { <var:N> = <var:P> \land <var:O> = <nat:2> } { <var:N> = <var:P> \land <var:O> = <nat:2> } <var:O> := <nat:2> + <var:O> * <var:N{ <var:N> = <var:P> \land <var:O> = <nat:2> \cdot <var:P> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:N> = <var:P> }} <var:O> := <nat:2> ; <var:O> := <nat:2> + <var:O> * <var:N> {{ <var:O> = <nat:2> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:O> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:O> = <nat:2> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 