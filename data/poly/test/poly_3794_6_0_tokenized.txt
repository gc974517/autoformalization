\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:8> ; <var:U2> := <nat:5> ; <var:U2> := <var:U2> * <var:c> ; <var:U2> := <var:U2> * <var:c> ; <var:x> := <var:U2> ; <var:x> := <var:x> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for every positive numbers $ <var:J> $ ) that $ <var:c> = <var:J> $ ahead of the execution of our list of instructions , it holds that we see $ <var:x> = <nat:5> * <var:J> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:J> \} \\ <var:U0> := <nat:8> ; \\ \{ <var:c> = <var:J> \land <var:U0> = <nat:8> \} \\ <var:U2> := <nat:5> ; \\ \{ <var:c> = <var:J> \land <var:U0> = <nat:8> \land <var:U2> = <nat:5> \} \\ <var:U2> := <var:U2> * <var:c> ; \\ \{ <var:c> = <var:J> \land <var:U0> = <nat:8> \land <var:U2> = <nat:5> * <var:J> \} \\ <var:U2> := <var:U2> * <var:c> ; \\ \{ <var:c> = <var:J> \land <var:U0> = <nat:8> \land <var:U2> = <nat:5> * <var:J> ^ <nat:2> \} \\ <var:x> := <var:U2> ; \\ \{ <var:c> = <var:J> \land <var:U0> = <nat:8> \land <var:x> = <nat:5> * <var:J> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:U0> \\ \{ <var:c> = <var:J> \land <var:x> = <nat:5> * <var:J> ^ <nat:2> + <nat:8> \} \end{eqnarray} Using Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:8> ; <var:U2> := <nat:5> ; <var:U2> := <var:U2> * <var:c> ; <var:U2> := <var:U2> * <var:c> ; <var:x> := <var:U2> ; <var:x> := <var:x> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:c> = <var:J> }} <def:poly> {{ <var:x> = <nat:5> * <var:J> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:U0> = <nat:8> /\ <var:U2> = <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:U0> = <nat:8> /\ <var:x> = <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:x> = <nat:5> * <var:J> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 