\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as \begin{verbatim} <var:Y> := <nat:2> ; <var:Y> := <var:Y> * <var:s> ; <var:Y> := <nat:1> + <var:Y> * <var:s> ; <var:Y> := <nat:2> + <var:Y> * <var:s> ; <var:Y> := <nat:3> + <var:Y> * <var:s> ; <var:Y> := <nat:4> + <var:Y> * <var:s> ; <var:Y> := <nat:1> + <var:Y> * <var:s> \end{verbatim} Allow with some $ <var:b> $ that we have $ <var:s> = <var:b> $ prior to interpreting the list of commands , it holds that $ <var:Y> = <nat:2> \times <var:b> ^ <nat:6> + <nat:1> \times <var:b> ^ <nat:4> + <nat:2> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:1> $ once list of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is accomplished through this decorated series of instructions . \begin{eqnarray} \{ <var:s> = <var:b> \} \\ <var:Y> := <nat:2> ; \\ \{ <var:s> = <var:b> \land <var:Y> = <nat:2> \} \end{eqnarray} Advancing the execution of the set of commands results in : \begin{eqnarray} <var:Y> := <var:Y> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:Y> = <nat:2> \times <var:b> + \} \\ <var:Y> := <nat:1> + <var:Y> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:Y> = <nat:2> \times <var:b> ^ <nat:2> + <nat:1> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:Y> = <nat:2> \times <var:b> ^ <nat:3> + <nat:1> \times <var:b> + <nat:2> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:Y> = <nat:2> \times <var:b> ^ <nat:4> + <nat:1> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:3> \} \\ <var:Y> := <nat:4> + <var:Y> * <var:s> ; \\ \{ <var:s> = <var:b> \land <var:Y> = <nat:2> \times <var:b> ^ <nat:5> + <nat:1> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:4> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:s> \\ \{ <var:s> = <var:b> \land <var:Y> = <nat:2> \times <var:b> ^ <nat:6> + <nat:1> \times <var:b> ^ <nat:4> + <nat:2> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:1> \} \end{eqnarray} Using Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:s> = <var:b> }} <var:Y> := <nat:2> ; <var:Y> := <var:Y> * <var:s> ; <var:Y> := <nat:1> + <var:Y> * <var:s> ; <var:Y> := <nat:2> + <var:Y> * <var:s> ; <var:Y> := <nat:3> + <var:Y> * <var:s> ; <var:Y> := <nat:4> + <var:Y> * <var:s> ; <var:Y> := <nat:1> + <var:Y> * <var:s> {{ <var:Y> = <nat:2> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:Y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:Y> = <nat:2> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:Y> = <nat:2> * <var:b> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:Y> = <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:Y> = <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:Y> = <nat:2> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:Y> = <nat:2> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 