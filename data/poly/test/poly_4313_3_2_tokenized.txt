\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T> := <nat:2> ; <var:T> := <nat:1> + <var:T> * <var:Y> ; <var:T> := <nat:1> + <var:T> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for some $ <var:V> $ ) that $ <var:Y> = <var:V> $ prior to interpreting the code it must be that we have $ <var:T> = <nat:2> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be shown using Hoare reasoning . Taking a look at the next step seen in our segment of code , we have \begin{eqnarray} \{ <var:Y> = <var:V> \} \, <var:T> := <nat:2> \, \{ <var:Y> = <var:V> \land <var:T> = <nat:2> \} \end{eqnarray} Advancing to the following statements found in our program , we see \begin{eqnarray} \{ <var:Y> = <var:V> \} \, <var:T> := <nat:2> \, \{ <var:Y> = <var:V> \land <var:T> = <nat:2> \} \\ \{ <var:Y> = <var:V> \land <var:T> = <nat:2> \} \, <var:T> := <nat:1> + <var:T> * <var:Y> \, \{ <var:Y> = <var:V> \land <var:T> = <nat:2> \times <var:V> + <nat:1> \} \end{eqnarray} This is known to be sound through the variable update inference rule of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:T> := <nat:2> ; <var:T> := <nat:1> + <var:T> * <var:Y> ; <var:T> := <nat:1> + <var:T> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:Y> = <var:V> }} <def:poly> {{ <var:T> = <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:V> /\ <var:T> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:V> /\ <var:T> = <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:V> /\ <var:T> = <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 