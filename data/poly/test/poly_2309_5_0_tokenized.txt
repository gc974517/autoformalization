\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:7> ; <var:H1> := <nat:7> ; <var:H1> := <var:H1> * <var:h> ; <var:S> := <var:H1> ; <var:S> := <var:S> + <var:H0> \end{verbatim} Allow ( given all natural coefficients $ <var:t> $ ) $ <var:h> = <var:t> $ prior to running the segment of code , it must be that we see $ <var:S> = <nat:7> \cdot <var:t> + <nat:7> $ once code segment finishes . \end{theorem} \begin{proof} The proof of this series of commands can be done using typical Hoare logic . Shifting focus toward the proceeding lines contained in our segment of code , \verb | { <var:h> = <var:t> } <var:H0> := <nat:7> { <var:h> = <var:t> \land <var:H0> = <nat:7> } | and \verb | { <var:h> = <var:t> \land <var:H0> = <nat:7> } <var:H1> := <nat:7> { <var:h> = <var:t> \land <var:H0> = <nat:7> \land <var:H1> = <nat:7> } | . Moving on to the proceeding commands seen in the list of instructions , \verb | { <var:h> = <var:t> } <var:H0> := <nat:7> { <var:h> = <var:t> \land <var:H0> = <nat:7> } | and \verb | { <var:h> = <var:t> \land <var:H0> = <nat:7> } <var:H1> := <nat:7> { <var:h> = <var:t> \land <var:H0> = <nat:7> \land <var:H1> = <nat:7> } | . This is known to be sound through the environment update inference rule defined by typical Hoare logic . After , we see \verb | { <var:h> = <var:t> } <var:H0> := <nat:7> { <var:h> = <var:t> \land <var:H0> = <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:h> = <var:t> }} <var:H0> := <nat:7> ; <var:H1> := <nat:7> ; <var:H1> := <var:H1> * <var:h> ; <var:S> := <var:H1> ; <var:S> := <var:S> + <var:H0> {{ <var:S> = <nat:7> * <var:t> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:H0> = <nat:7> /\ <var:S> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:S> = <nat:7> * <var:t> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 