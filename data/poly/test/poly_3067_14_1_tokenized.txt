\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:M1> := <var:a> ; <var:M2> := <var:M1> * <var:a> ; <var:M3> := <var:M2> * <var:a> ; <var:M4> := <var:M3> * <var:a> ; <var:M5> := <var:M4> * <var:a> ; <var:M6> := <var:M5> * <var:a> ; <var:M0> := <nat:1> ; <var:M3> := <var:M3> * <nat:4> ; <var:M4> := <var:M4> * <nat:4> ; <var:M6> := <var:M6> * <nat:2> ; <var:t> := <var:M6> <var:t> := <var:t> + <var:M4> <var:t> := <var:t> + <var:M3> <var:t> := <var:t> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:a> = <var:l> $ , assuming some natural coefficients $ <var:l> $ , prior to executing this code segment it holds that we see $ <var:t> = <nat:2> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> $ once list of commands has finished executing . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:a> = <var:l> \} \\ <var:M1> := <var:a> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \} \\ <var:M2> := <var:M1> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <var:l> ^ <nat:3> \} \\ <var:M4> := <var:M3> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <var:l> ^ <nat:3> \land <var:M4> = <var:l> ^ <nat:4> \} \\ <var:M5> := <var:M4> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <var:l> ^ <nat:3> \land <var:M4> = <var:l> ^ <nat:4> \land <var:M5> = <var:l> ^ <nat:5> \} \\ <var:M6> := <var:M5> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <var:l> ^ <nat:3> \land <var:M4> = <var:l> ^ <nat:4> \land <var:M5> = <var:l> ^ <nat:5> \land <var:M6> = <var:l> ^ <nat:6> \} \\ <var:M0> := <nat:1> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <var:l> ^ <nat:3> \land <var:M4> = <var:l> ^ <nat:4> \land <var:M5> = <var:l> ^ <nat:5> \land <var:M6> = <var:l> ^ <nat:6> \land <var:M0> = <nat:1> \} \\ <var:M3> := <var:M3> * <nat:4> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:M4> = <var:l> ^ <nat:4> \land <var:M5> = <var:l> ^ <nat:5> \land <var:M6> = <var:l> ^ <nat:6> \land <var:M0> = <nat:1> \} \\ <var:M4> := <var:M4> * <nat:4> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:M4> = <nat:4> \times <var:l> ^ <nat:4> \land <var:M5> = <var:l> ^ <nat:5> \land <var:M6> = <var:l> ^ <nat:6> \land <var:M0> = <nat:1> \} \end{eqnarray} Advancing evaluating this code gives : \begin{eqnarray} <var:M6> := <var:M6> * <nat:2> ; \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:M4> = <nat:4> \times <var:l> ^ <nat:4> \land <var:M5> = <var:l> ^ <nat:5> \land <var:M6> = <nat:2> \times <var:l> ^ <nat:6> \land <var:M0> = <nat:1> \} \\ <var:t> := <var:M6> \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:M4> = <nat:4> \times <var:l> ^ <nat:4> \land <var:M5> = <var:l> ^ <nat:5> \land <var:M0> = <nat:1> \land <var:t> = <nat:2> \times <var:l> ^ <nat:6> \} \\ <var:t> := <var:t> + <var:M4> \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:M0> = <nat:1> \land <var:t> = <nat:2> \times <var:l> ^ <nat:6> + <nat:4> \times <var:l> ^ <nat:4> \} \\ <var:t> := <var:t> + <var:M3> \\ \{ <var:a> = <var:l> \land <var:M1> = <var:l> \land <var:M2> = <var:l> ^ <nat:2> \land <var:M0> = <nat:1> \land <var:t> = <nat:2> \times <var:l> ^ <nat:6> + <nat:4> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:M0> \\ \{ <var:a> = <var:l> \land <var:t> = <nat:2> \times <var:l> ^ <nat:6> + <nat:4> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:1> \} \end{eqnarray} Thus , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <var:M4> : string := " <var:M4> " . Definition <var:M5> : string := " <var:M5> " . Definition <var:M6> : string := " <var:M6> " . Definition <def:poly> := <var:M1> := <var:a> ; <var:M2> := <var:M1> * <var:a> ; <var:M3> := <var:M2> * <var:a> ; <var:M4> := <var:M3> * <var:a> ; <var:M5> := <var:M4> * <var:a> ; <var:M6> := <var:M5> * <var:a> ; <var:M0> := <nat:1> ; <var:M3> := <var:M3> * <nat:4> ; <var:M4> := <var:M4> * <nat:4> ; <var:M6> := <var:M6> * <nat:2> ; <var:t> := <var:M6> <var:t> := <var:t> + <var:M4> <var:t> := <var:t> + <var:M3> <var:t> := <var:t> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:a> = <var:l> }} <def:poly> {{ <var:t> = <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <var:l> ^ <nat:3> /\ <var:M4> = <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <var:l> ^ <nat:3> /\ <var:M4> = <var:l> ^ <nat:4> /\ <var:M5> = <var:l> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <var:l> ^ <nat:3> /\ <var:M4> = <var:l> ^ <nat:4> /\ <var:M5> = <var:l> ^ <nat:5> /\ <var:M6> = <var:l> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <var:l> ^ <nat:3> /\ <var:M4> = <var:l> ^ <nat:4> /\ <var:M5> = <var:l> ^ <nat:5> /\ <var:M6> = <var:l> ^ <nat:6> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:M4> = <var:l> ^ <nat:4> /\ <var:M5> = <var:l> ^ <nat:5> /\ <var:M6> = <var:l> ^ <nat:6> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:M4> = <nat:4> * <var:l> ^ <nat:4> /\ <var:M5> = <var:l> ^ <nat:5> /\ <var:M6> = <var:l> ^ <nat:6> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:M4> = <nat:4> * <var:l> ^ <nat:4> /\ <var:M5> = <var:l> ^ <nat:5> /\ <var:M6> = <nat:2> * <var:l> ^ <nat:6> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:M4> = <nat:4> * <var:l> ^ <nat:4> /\ <var:M5> = <var:l> ^ <nat:5> /\ <var:M0> = <nat:1> /\ <var:t> = <nat:2> * <var:l> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:M0> = <nat:1> /\ <var:t> = <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:M1> = <var:l> /\ <var:M2> = <var:l> ^ <nat:2> /\ <var:M0> = <nat:1> /\ <var:t> = <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:t> = <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 