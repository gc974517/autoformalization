\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N> := <nat:4> ; <var:N> := <nat:3> + <var:N> * <var:F> ; <var:N> := <nat:3> + <var:N> * <var:F> ; <var:N> := <nat:1> + <var:N> * <var:F> ; <var:N> := <nat:4> + <var:N> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Allow it to hold that $ <var:F> = <var:y> $ prior to interpreting this set of commands it must be that we see $ <var:N> = <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions can be demonstrated using typical Hoare techniques . Now , the variable assignmet command \verb | <var:N> := <nat:4> ; | . This takes the precondition $ \{ <var:F> = <var:y> \} $ as the postcondition $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \} $ . This is ensured through the assignment scheme in Hoare techniques . Going forward , we have the assignment statement defining $ <nat:3> + <var:N> * <var:F> $ to $ <var:N>$ . This command forwards $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \} $ into $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \times <var:y> + <nat:3> \} $ . This is rigorously given using the assignment rule of usual Hoare techniques . Moving on to the subsequent step contained in the series of commands , we see the variable binding statement giving $ <nat:3> + <var:N> * <var:F> $ into $ <var:N>$ . This code redefines $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \times <var:y> + <nat:3> \} $ as the condition $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:3> \} $ . This is ensured through the assignment law defined in usual Hoare reasoning . Focusing on the following line in our list of instructions , the binding line giving $ <nat:1> + <var:N> * <var:F> $ toward $ <var:N>$ . This line transfers the precondition $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:3> \} $ toward $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:1> \} $ . This is shown to be logically sound through the assignment law from usual Hoare logic . Following , the assignment line defining $ <nat:4> + <var:N> * <var:F$ toward $ <var:N>$ . This moves the condition $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:1> \} $ to the condition $ \{ <var:F> = <var:y> \land <var:N> = <nat:4> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:4> \} $ . This is ensured by the assignment rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:4> ; <var:N> := <nat:3> + <var:N> * <var:F> ; <var:N> := <nat:3> + <var:N> * <var:F> ; <var:N> := <nat:1> + <var:N> * <var:F> ; <var:N> := <nat:4> + <var:N> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:F> = <var:y> }} <def:poly> {{ <var:N> = <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:N> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:N> = <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:N> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:N> = <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:N> = <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 