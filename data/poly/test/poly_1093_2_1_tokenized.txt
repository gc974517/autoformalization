\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:7> ; <var:X> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Assuming --- for some positive integer coefficients $ <var:f> $ --- $ <var:e> = <var:f> $ before executing the program , then we see $ <var:X> = <nat:7> $ after code executes . \end{theorem} \begin{proof} The way to prove correctness for this set of commands is evident with typical Hoare logic . Stepping forward , we see the assignment code assigning $ <nat:7> $ into $ <var:S0>$ . This code forwards $ \{ <var:e> = <var:f> \} $ as the condition $ \{ <var:e> = <var:f> \land <var:S0> = <nat:7> \} $ . Considering the subsequent line of code found in our list of instructions , the variable assignmet line defining $ <var:S0$ to $ <var:X>$ . This statement forwards the condition $ \{ <var:e> = <var:f> \land <var:S0> = <nat:7> \} $ into the condition $ \{ <var:e> = <var:f> \land <var:X> = <nat:7> \} $ . This is shown to be logically sound through the assignment law obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:7> ; <var:X> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:e> = <var:f> }} <def:poly> {{ <var:X> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:X> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 