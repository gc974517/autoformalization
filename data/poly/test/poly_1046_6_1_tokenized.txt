\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:U> ; <var:P2> := <var:P1> * <var:U> ; <var:P0> := <nat:1> ; <var:P2> := <var:P2> * <nat:3> ; <var:d> := <var:P2> <var:d> := <var:d> + <var:P0> \end{verbatim} Allowing it to hold that $ <var:U> = <var:B> $ before executing the list of instructions , it follows that $ <var:d> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be done by usual Hoare reasoning . Jumping to the subsequent line of code in our set of instructions , we see the variable assignmet command binding $ <var:U> $ toward $ <var:P1>$ . This transfers the condition $ \{ <var:U> = <var:B> \} $ toward the postcondition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \} $ . Considering the proceeding line found in the set of instructions , the variable binding command \verb | <var:P2> := <var:P1> * <var:U> ; | . This takes the condition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \} $ to the condition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <var:B> ^ <nat:2> \} $ . This is deduced by the assignment inference rule defined by Hoare logic . Advancing to the next step , we see the assignment statement giving $ <nat:1> $ as $ <var:P0>$ . This redefines the precondition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <var:B> ^ <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <var:B> ^ <nat:2> \land <var:P0> = <nat:1> \} $ . This is rigorously given with the assignment law from typical Hoare logic . Taking a look at the subsequent step seen in our series of commands , the assignment command assigning $ <var:P2> * <nat:3> $ toward $ <var:P2>$ . This command forwards the condition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <var:B> ^ <nat:2> \land <var:P0> = <nat:1> \} $ into $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P0> = <nat:1> \} $ . This is guaranteed with the assignment scheme in usual Hoare reasoning . Paying attention to the upcoming line contained in the set of commands , we have the variable update code binding $ <var:P2$ to $ <var:d>$ . This redefines the precondition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P0> = <nat:1> \} $ as the condition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \land <var:P0> = <nat:1> \land <var:d> = <nat:3> \times <var:B> ^ <nat:2> \} $ . This is guaranteed using the assignment scheme obtained from standard Hoare logic . Keeping momentum , we have the variable update line binding $ <var:d> + <var:P0$ as $ <var:d>$ . This transfers the condition $ \{ <var:U> = <var:B> \land <var:P1> = <var:B> \land <var:P0> = <nat:1> \land <var:d> = <nat:3> \times <var:B> ^ <nat:2> \} $ to the condition $ \{ <var:U> = <var:B> \land <var:d> = <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \} $ . This is deduced with the assignment inference rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:U> = <var:B> }} <var:P1> := <var:U> ; <var:P2> := <var:P1> * <var:U> ; <var:P0> := <nat:1> ; <var:P2> := <var:P2> * <nat:3> ; <var:d> := <var:P2> <var:d> := <var:d> + <var:P0> {{ <var:d> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:P1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:P1> = <var:B> /\ <var:P2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:P1> = <var:B> /\ <var:P2> = <var:B> ^ <nat:2> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:P1> = <var:B> /\ <var:P2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:P1> = <var:B> /\ <var:P0> = <nat:1> /\ <var:d> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:d> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 