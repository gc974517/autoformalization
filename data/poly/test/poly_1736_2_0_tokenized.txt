\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:4> ; <var:C> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Allow it to be that $ <var:r> = <var:S> $ --- given some whole numbers $ <var:S> $ --- prior to executing the list of commands it must be that we see $ <var:C> = <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our series of instructions is done using standard Hoare logic . Honing in on the subsequent pieces of code contained in our code segment , \begin{verbatim} { <var:r> = <var:S> } <var:U0> := <nat:4> { <var:r> = <var:S> \land <var:U0> = <nat:4> } { <var:r> = <var:S> \land <var:U0> = <nat:4> } <var:C> := <var:U0{ <var:r> = <var:S> \land <var:C> = <nat:4> } \end{verbatim} This is deduced through the variable update scheme of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:C> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:r> = <var:S> }} <def:poly> {{ <var:C> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:C> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 