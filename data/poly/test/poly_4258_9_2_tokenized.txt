\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z> := <nat:3> ; <var:Z> := <nat:2> + <var:Z> * <var:z> ; <var:Z> := <nat:3> + <var:Z> * <var:z> ; <var:Z> := <var:Z> * <var:z> ; <var:Z> := <nat:4> + <var:Z> * <var:z> ; <var:Z> := <var:Z> * <var:z> ; <var:Z> := <nat:3> + <var:Z> * <var:z> ; <var:Z> := <nat:4> + <var:Z> * <var:z> ; <var:Z> := <nat:2> + <var:Z> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Given that we have $ <var:z> = <var:s> $ prior to interpreting the program , it follows that $ <var:Z> = <nat:3> \cdot <var:s> ^ <nat:8> + <nat:2> \cdot <var:s> ^ <nat:7> + <nat:3> \cdot <var:s> ^ <nat:6> + <nat:4> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:2> $ once program terminates . \end{theorem} \begin{proof} The argument for this code is demonstrated with Hoare techniques . Considering the upcoming line contained in the series of instructions , \begin{verbatim} { <var:z> = <var:s> } <var:Z> := <nat:3> { <var:z> = <var:s> \land <var:Z> = <nat:3> } \end{verbatim} Advancing to the following steps contained in the set of commands , \begin{verbatim} { <var:z> = <var:s> } <var:Z> := <nat:3> { <var:z> = <var:s> \land <var:Z> = <nat:3> } { <var:z> = <var:s> \land <var:Z> = <nat:3> } <var:Z> := <nat:2> + <var:Z> * <var:z> { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> + <nat:2> } { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> + <nat:2> } <var:Z> := <nat:3> + <var:Z> * <var:z> { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:3> } { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:3> } <var:Z> := <var:Z> * <var:z> { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + } \end{verbatim} This is guaranteed through the variable binding scheme defined in usual Hoare logic . Considering the proceeding statements found in the series of commands , \begin{verbatim} { <var:z> = <var:s> } <var:Z> := <nat:3> { <var:z> = <var:s> \land <var:Z> = <nat:3> } { <var:z> = <var:s> \land <var:Z> = <nat:3> } <var:Z> := <nat:2> + <var:Z> * <var:z> { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> + <nat:2> } { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> + <nat:2> } <var:Z> := <nat:3> + <var:Z> * <var:z> { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:3> } { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:3> } <var:Z> := <var:Z> * <var:z> { <var:z> = <var:s> \land <var:Z> = <nat:3> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + } \end{verbatim} This is given by the scheme given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:3> ; <var:Z> := <nat:2> + <var:Z> * <var:z> ; <var:Z> := <nat:3> + <var:Z> * <var:z> ; <var:Z> := <var:Z> * <var:z> ; <var:Z> := <nat:4> + <var:Z> * <var:z> ; <var:Z> := <var:Z> * <var:z> ; <var:Z> := <nat:3> + <var:Z> * <var:z> ; <var:Z> := <nat:4> + <var:Z> * <var:z> ; <var:Z> := <nat:2> + <var:Z> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:z> = <var:s> }} <def:poly> {{ <var:Z> = <nat:3> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Z> = <nat:3> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 