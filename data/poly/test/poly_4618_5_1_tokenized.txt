\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:b> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:3> ; <var:m> := <var:d1> <var:m> := <var:m> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Assuming --- for any natural coefficients $ <var:f> $ --- that $ <var:b> = <var:f> $ prior to evaluating this program it must be that we see $ <var:m> = <nat:3> * <var:f> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:f> \} \\ <var:d1> := <var:b> ; \\ \{ <var:b> = <var:f> \land <var:d1> = <var:f> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:b> = <var:f> \land <var:d1> = <var:f> \land <var:d0> = <nat:8> \} \\ <var:d1> := <var:d1> * <nat:3> ; \\ \{ <var:b> = <var:f> \land <var:d1> = <nat:3> \cdot <var:f> \land <var:d0> = <nat:8> \} \\ <var:m> := <var:d1> \\ \{ <var:b> = <var:f> \land <var:d0> = <nat:8> \land <var:m> = <nat:3> \cdot <var:f> \} \end{eqnarray} Allowing the execution of our set of instructions gives : \begin{eqnarray} <var:m> := <var:m> + <var:d0> \\ \{ <var:b> = <var:f> \land <var:m> = <nat:3> \cdot <var:f> + <nat:8> \} \end{eqnarray} Applying typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:b> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:3> ; <var:m> := <var:d1> <var:m> := <var:m> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <def:poly> {{ <var:m> = <nat:3> * <var:f> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:d1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:d1> = <var:f> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:d1> = <nat:3> * <var:f> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:d0> = <nat:8> /\ <var:m> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:m> = <nat:3> * <var:f> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 