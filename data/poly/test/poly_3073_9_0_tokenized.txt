\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:a> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:a> ; <var:c2> := <var:c2> * <var:a> ; <var:G> := <var:c2> ; <var:G> := <var:G> + <var:c1> ; <var:G> := <var:G> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:a> = <var:O> $ ahead of the evaluation of this series of instructions , then $ <var:G> = <nat:3> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:3> $ after code segment has finished executing . \end{theorem} \begin{proof} Using typical Hoare reasoning returns : \begin{eqnarray} \{ <var:a> = <var:O> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:a> = <var:O> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:5> ; \\ \{ <var:a> = <var:O> \land <var:c0> = <nat:3> \land <var:c1> = <nat:5> \} \\ <var:c1> := <var:c1> * <var:a> ; \\ \{ <var:a> = <var:O> \land <var:c0> = <nat:3> \land <var:c1> = <nat:5> \times <var:O> \} \\ <var:c2> := <nat:3> ; \\ \{ <var:a> = <var:O> \land <var:c0> = <nat:3> \land <var:c1> = <nat:5> \times <var:O> \land <var:c2> = <nat:3> \} \\ <var:c2> := <var:c2> * <var:a> ; \\ \{ <var:a> = <var:O> \land <var:c0> = <nat:3> \land <var:c1> = <nat:5> \times <var:O> \land <var:c2> = <nat:3> \times <var:O> \} \\ <var:c2> := <var:c2> * <var:a> ; \\ \{ <var:a> = <var:O> \land <var:c0> = <nat:3> \land <var:c1> = <nat:5> \times <var:O> \land <var:c2> = <nat:3> \times <var:O> ^ <nat:2> \} \\ <var:G> := <var:c2> ; \\ \{ <var:a> = <var:O> \land <var:c0> = <nat:3> \land <var:c1> = <nat:5> \times <var:O> \land <var:G> = <nat:3> \times <var:O> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:c1> ; \\ \{ <var:a> = <var:O> \land <var:c0> = <nat:3> \land <var:G> = <nat:3> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> \} \\ <var:G> := <var:G> + <var:c0> \\ \{ <var:a> = <var:O> \land <var:G> = <nat:3> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> + <nat:3> \} \end{eqnarray} Thus , this program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:a> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:a> ; <var:c2> := <var:c2> * <var:a> ; <var:G> := <var:c2> ; <var:G> := <var:G> + <var:c1> ; <var:G> := <var:G> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:a> = <var:O> }} <def:poly> {{ <var:G> = <nat:3> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:5> * <var:O> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:5> * <var:O> /\ <var:c2> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:5> * <var:O> /\ <var:c2> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:5> * <var:O> /\ <var:G> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:c0> = <nat:3> /\ <var:G> = <nat:3> * <var:O> ^ <nat:2> + <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:G> = <nat:3> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 