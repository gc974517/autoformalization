\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:t> ; <var:T2> := <var:T1> * <var:t> ; <var:T3> := <var:T2> * <var:t> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:1> ; <var:T3> := <var:T3> * <nat:8> ; <var:l> := <var:T3> <var:l> := <var:l> + <var:T2> <var:l> := <var:l> + <var:T1> <var:l> := <var:l> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Assume $ <var:t> = <var:k> $ , for positive coefficients $ <var:k> $ , prior to the execution of this series of instructions , it follows that we see $ <var:l> = <nat:8> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:2> $ once program has finished . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be done by the below decorated set of instructions . \begin{eqnarray} \{ <var:t> = <var:k> \} \\ <var:T1> := <var:t> ; \\ \{ <var:t> = <var:k> \land <var:T1> = <var:k> \} \\ <var:T2> := <var:T1> * <var:t> ; \\ \{ <var:t> = <var:k> \land <var:T1> = <var:k> \land <var:T2> = <var:k> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:t> ; \\ \{ <var:t> = <var:k> \land <var:T1> = <var:k> \land <var:T2> = <var:k> ^ <nat:2> \land <var:T3> = <var:k> ^ <nat:3> \} \\ <var:T0> := <nat:2> ; \\ \{ <var:t> = <var:k> \land <var:T1> = <var:k> \land <var:T2> = <var:k> ^ <nat:2> \land <var:T3> = <var:k> ^ <nat:3> \land <var:T0> = <nat:2> \} \\ <var:T1> := <var:T1> * <nat:4> ; \\ \{ <var:t> = <var:k> \land <var:T1> = <nat:4> * <var:k> \land <var:T2> = <var:k> ^ <nat:2> \land <var:T3> = <var:k> ^ <nat:3> \land <var:T0> = <nat:2> \} \\ <var:T2> := <var:T2> * <nat:1> ; \\ \{ <var:t> = <var:k> \land <var:T1> = <nat:4> * <var:k> \land <var:T2> = <nat:1> * <var:k> ^ <nat:2> \land <var:T3> = <var:k> ^ <nat:3> \land <var:T0> = <nat:2> \} \\ <var:T3> := <var:T3> * <nat:8> ; \\ \{ <var:t> = <var:k> \land <var:T1> = <nat:4> * <var:k> \land <var:T2> = <nat:1> * <var:k> ^ <nat:2> \land <var:T3> = <nat:8> * <var:k> ^ <nat:3> \land <var:T0> = <nat:2> \} \\ <var:l> := <var:T3> \\ \{ <var:t> = <var:k> \land <var:T1> = <nat:4> * <var:k> \land <var:T2> = <nat:1> * <var:k> ^ <nat:2> \land <var:T0> = <nat:2> \land <var:l> = <nat:8> * <var:k> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:T2> \\ \{ <var:t> = <var:k> \land <var:T1> = <nat:4> * <var:k> \land <var:T0> = <nat:2> \land <var:l> = <nat:8> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:T1> \\ \{ <var:t> = <var:k> \land <var:T0> = <nat:2> \land <var:l> = <nat:8> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> \} \\ <var:l> := <var:l> + <var:T0> \\ \{ <var:t> = <var:k> \land <var:l> = <nat:8> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> \} \end{eqnarray} Applying standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:t> ; <var:T2> := <var:T1> * <var:t> ; <var:T3> := <var:T2> * <var:t> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:1> ; <var:T3> := <var:T3> * <nat:8> ; <var:l> := <var:T3> <var:l> := <var:l> + <var:T2> <var:l> := <var:l> + <var:T1> <var:l> := <var:l> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:t> = <var:k> }} <def:poly> {{ <var:l> = <nat:8> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <var:k> /\ <var:T2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <var:k> /\ <var:T2> = <var:k> ^ <nat:2> /\ <var:T3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <var:k> /\ <var:T2> = <var:k> ^ <nat:2> /\ <var:T3> = <var:k> ^ <nat:3> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <nat:4> * <var:k> /\ <var:T2> = <var:k> ^ <nat:2> /\ <var:T3> = <var:k> ^ <nat:3> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <nat:4> * <var:k> /\ <var:T2> = <nat:1> * <var:k> ^ <nat:2> /\ <var:T3> = <var:k> ^ <nat:3> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <nat:4> * <var:k> /\ <var:T2> = <nat:1> * <var:k> ^ <nat:2> /\ <var:T3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <nat:4> * <var:k> /\ <var:T2> = <nat:1> * <var:k> ^ <nat:2> /\ <var:T0> = <nat:2> /\ <var:l> = <nat:8> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T1> = <nat:4> * <var:k> /\ <var:T0> = <nat:2> /\ <var:l> = <nat:8> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:T0> = <nat:2> /\ <var:l> = <nat:8> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:l> = <nat:8> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 