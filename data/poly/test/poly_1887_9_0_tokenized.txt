\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:4> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:t> ; <var:D2> := <nat:1> ; <var:D2> := <var:D2> * <var:t> ; <var:D2> := <var:D2> * <var:t> ; <var:J> := <var:D2> ; <var:J> := <var:J> + <var:D1> ; <var:J> := <var:J> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Given $ <var:t> = <var:w> $ ahead of interpreting our series of commands , then we see $ <var:J> = <nat:1> \times <var:w> ^ <nat:2> + <nat:6> \times <var:w> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the set of commands is evident using usual Hoare reasoning . Advancing to the subsequent lines in the program , we see \begin{eqnarray} \{ <var:t> = <var:w> \} \, <var:D0> := <nat:4> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \} \\ \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \} \, <var:D1> := <nat:6> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \} \end{eqnarray} Observing the upcoming lines of codeseen in our list of instructions , we see \begin{eqnarray} \{ <var:t> = <var:w> \} \, <var:D0> := <nat:4> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \} \\ \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \} \, <var:D1> := <nat:6> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \} \\ \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \} \, <var:D1> := <var:D1> * <var:t> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \times <var:w> \} \\ \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \times <var:w> \} \, <var:D2> := <nat:1> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \times <var:w> \land <var:D2> = <nat:1> \} \\ \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \times <var:w> \land <var:D2> = <nat:1> \} \, <var:D2> := <var:D2> * <var:t> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \times <var:w> \land <var:D2> = <nat:1> \times <var:w> \} \\ \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \times <var:w> \land <var:D2> = <nat:1> \times <var:w> \} \, <var:D2> := <var:D2> * <var:t> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \times <var:w> \land <var:D2> = <nat:1> \times <var:w> ^ <nat:2> \} \end{eqnarray} This is shown with the variable assignmet scheme obtained from Hoare reasoning . Immediately after , we have \begin{eqnarray} \{ <var:t> = <var:w> \} \, <var:D0> := <nat:4> \, \{ <var:t> = <var:w> \land <var:D0> = <nat:4> \} \end{eqnarray} This is guaranteed by the variable binding law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D0> := <nat:4> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:t> ; <var:D2> := <nat:1> ; <var:D2> := <var:D2> * <var:t> ; <var:D2> := <var:D2> * <var:t> ; <var:J> := <var:D2> ; <var:J> := <var:J> + <var:D1> ; <var:J> := <var:J> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:t> = <var:w> }} <def:poly> {{ <var:J> = <nat:1> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:w> /\ <var:D2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:w> /\ <var:D2> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:w> /\ <var:D2> = <nat:1> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:w> /\ <var:J> = <nat:1> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:D0> = <nat:4> /\ <var:J> = <nat:1> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:J> = <nat:1> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 