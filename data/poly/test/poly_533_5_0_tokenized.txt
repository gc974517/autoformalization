\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:2> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:V> ; <var:g> := <var:o1> ; <var:g> := <var:g> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assuming that $ <var:V> = <var:q> $ for all positive integers $ <var:q> $ before the execution of this set of commands it holds that $ <var:g> = <nat:9> * <var:q> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:q> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:V> = <var:q> \land <var:o0> = <nat:2> \} \\ <var:o1> := <nat:9> ; \\ \{ <var:V> = <var:q> \land <var:o0> = <nat:2> \land <var:o1> = <nat:9> \} \\ <var:o1> := <var:o1> * <var:V> ; \\ \{ <var:V> = <var:q> \land <var:o0> = <nat:2> \land <var:o1> = <nat:9> \cdot <var:q> \} \\ <var:g> := <var:o1> ; \\ \{ <var:V> = <var:q> \land <var:o0> = <nat:2> \land <var:g> = <nat:9> \cdot <var:q> \} \\ <var:g> := <var:g> + <var:o0> \\ \{ <var:V> = <var:q> \land <var:g> = <nat:9> \cdot <var:q> + <nat:2> \} \end{eqnarray} Applying typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:2> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:V> ; <var:g> := <var:o1> ; <var:g> := <var:g> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:V> = <var:q> }} <def:poly> {{ <var:g> = <nat:9> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:o0> = <nat:2> /\ <var:g> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:g> = <nat:9> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 