\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:v> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:1> ; <var:H> := <var:k1> <var:H> := <var:H> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow ( letting positive numbers $ <var:O> $ ) it to hold that $ <var:v> = <var:O> $ before evaluating the set of instructions it must be that we see $ <var:H> = <nat:1> \cdot <var:O> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our series of commands is shown with typical Hoare logic . Moving on to the next step , we have \begin{verbatim} { <var:v> = <var:O> } <var:k1> := <var:v> { <var:v> = <var:O> \land <var:k1> = <var:O> } { <var:v> = <var:O> \land <var:k1> = <var:O> } <var:k0> := <nat:2> { <var:v> = <var:O> \land <var:k1> = <var:O> \land <var:k0> = <nat:2> } { <var:v> = <var:O> \land <var:k1> = <var:O> \land <var:k0> = <nat:2> } <var:k1> := <var:k1> * <nat:1> { <var:v> = <var:O> \land <var:k1> = <nat:1> \times <var:O> \land <var:k0> = <nat:2> } { <var:v> = <var:O> \land <var:k1> = <nat:1> \times <var:O> \land <var:k0> = <nat:2> } <var:H> := <var:k1{ <var:v> = <var:O> \land <var:k0> = <nat:2> \land <var:H> = <nat:1> \times <var:O> } { <var:v> = <var:O> \land <var:k0> = <nat:2> \land <var:H> = <nat:1> \times <var:O> } <var:H> := <var:H> + <var:k0{ <var:v> = <var:O> \land <var:H> = <nat:1> \times <var:O> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:v> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:1> ; <var:H> := <var:k1> <var:H> := <var:H> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:v> = <var:O> }} <def:poly> {{ <var:H> = <nat:1> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:k1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:k1> = <var:O> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:k1> = <nat:1> * <var:O> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:k0> = <nat:2> /\ <var:H> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:H> = <nat:1> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 