\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <nat:1> + <var:l> * <var:A> ; <var:l> := <nat:4> + <var:l> * <var:A> ; <var:l> := <var:l> * <var:A> ; <var:l> := <nat:3> + <var:l> * <var:A> ; <var:l> := <var:l> * <var:A> ; <var:l> := <nat:2> + <var:l> * <var:A> ; <var:l> := <nat:1> + <var:l> * <var:A> ; <var:l> := <nat:3> + <var:l> * <var:A> ; <var:l> := <var:l> * <var:A> ; <var:l> := <nat:3> + <var:l> * <var:A> \end{verbatim} Allow that $ <var:A> = <var:R> $ before running the program it holds that we see $ <var:l> = <nat:2> \times <var:R> ^ <nat:10> + <nat:1> \times <var:R> ^ <nat:9> + <nat:4> \times <var:R> ^ <nat:8> + <nat:3> \times <var:R> ^ <nat:6> + <nat:2> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:3> $ after code segment has exited . \end{theorem} \begin{proof} The course of logic for the series of instructions is shown using usual Hoare techniques . After , \verb | { <var:A> = <var:R> } <var:l> := <nat:2> { <var:A> = <var:R> \land <var:l> = <nat:2> } | , \verb | { <var:A> = <var:R> \land <var:l> = <nat:2> } <var:l> := <nat:1> + <var:l> * <var:A> { <var:A> = <var:R> \land <var:l> = <nat:2> \times <var:R> + <nat:1> } | and \verb | { <var:A> = <var:R> \land <var:l> = <nat:2> \times <var:R> + <nat:1> } <var:l> := <nat:4> + <var:l> * <var:A> { <var:A> = <var:R> \land <var:l> = <nat:2> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:4> } | . Moving on , we have \verb | { <var:A> = <var:R> } <var:l> := <nat:2> { <var:A> = <var:R> \land <var:l> = <nat:2> } | and \verb | { <var:A> = <var:R> \land <var:l> = <nat:2> } <var:l> := <nat:1> + <var:l> * <var:A> { <var:A> = <var:R> \land <var:l> = <nat:2> \times <var:R> + <nat:1> } | . Advancing , we have \verb | { <var:A> = <var:R> } <var:l> := <nat:2> { <var:A> = <var:R> \land <var:l> = <nat:2> } | and \verb | { <var:A> = <var:R> \land <var:l> = <nat:2> } <var:l> := <nat:1> + <var:l> * <var:A> { <var:A> = <var:R> \land <var:l> = <nat:2> \times <var:R> + <nat:1> } | . This is given with the variable binding scheme defined in Hoare techniques . Going to the next step , \verb | { <var:A> = <var:R> } <var:l> := <nat:2> { <var:A> = <var:R> \land <var:l> = <nat:2> } | . Further , \verb | { <var:A> = <var:R> } <var:l> := <nat:2> { <var:A> = <var:R> \land <var:l> = <nat:2> } | . This is shown to be logically sound through the variable update rule from typical Hoare reasoning . Considering the upcoming bits of codein our code segment , we see \verb | { <var:A> = <var:R> } <var:l> := <nat:2> { <var:A> = <var:R> \land <var:l> = <nat:2> } | and \verb | { <var:A> = <var:R> \land <var:l> = <nat:2> } <var:l> := <nat:1> + <var:l> * <var:A> { <var:A> = <var:R> \land <var:l> = <nat:2> \times <var:R> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:A> = <var:R> }} <var:l> := <nat:2> ; <var:l> := <nat:1> + <var:l> * <var:A> ; <var:l> := <nat:4> + <var:l> * <var:A> ; <var:l> := <var:l> * <var:A> ; <var:l> := <nat:3> + <var:l> * <var:A> ; <var:l> := <var:l> * <var:A> ; <var:l> := <nat:2> + <var:l> * <var:A> ; <var:l> := <nat:1> + <var:l> * <var:A> ; <var:l> := <nat:3> + <var:l> * <var:A> ; <var:l> := <var:l> * <var:A> ; <var:l> := <nat:3> + <var:l> * <var:A> {{ <var:l> = <nat:2> * <var:R> ^ <nat:10> + <nat:1> * <var:R> ^ <nat:9> + <nat:4> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:9> + <nat:1> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:10> + <nat:1> * <var:R> ^ <nat:9> + <nat:4> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 