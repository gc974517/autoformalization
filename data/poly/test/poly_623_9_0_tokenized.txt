\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:3> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:L> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:L> ; <var:P2> := <var:P2> * <var:L> ; <var:R> := <var:P2> ; <var:R> := <var:R> + <var:P1> ; <var:R> := <var:R> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:L> = <var:r> $ with some positive integers $ <var:r> $ ahead of executing the segment of code , it must be that we have $ <var:R> = <nat:3> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:3> $ after code segment is done . \end{theorem} \begin{proof} Let this decorated program . \begin{eqnarray} \{ <var:L> = <var:r> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:L> = <var:r> \land <var:P0> = <nat:3> \} \\ <var:P1> := <nat:3> ; \\ \{ <var:L> = <var:r> \land <var:P0> = <nat:3> \land <var:P1> = <nat:3> \} \\ <var:P1> := <var:P1> * <var:L> ; \\ \{ <var:L> = <var:r> \land <var:P0> = <nat:3> \land <var:P1> = <nat:3> \times <var:r> \} \\ <var:P2> := <nat:3> ; \\ \{ <var:L> = <var:r> \land <var:P0> = <nat:3> \land <var:P1> = <nat:3> \times <var:r> \land <var:P2> = <nat:3> \} \\ <var:P2> := <var:P2> * <var:L> ; \\ \{ <var:L> = <var:r> \land <var:P0> = <nat:3> \land <var:P1> = <nat:3> \times <var:r> \land <var:P2> = <nat:3> \times <var:r> \} \\ <var:P2> := <var:P2> * <var:L> ; \\ \{ <var:L> = <var:r> \land <var:P0> = <nat:3> \land <var:P1> = <nat:3> \times <var:r> \land <var:P2> = <nat:3> \times <var:r> ^ <nat:2> \} \\ <var:R> := <var:P2> ; \\ \{ <var:L> = <var:r> \land <var:P0> = <nat:3> \land <var:P1> = <nat:3> \times <var:r> \land <var:R> = <nat:3> \times <var:r> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:P1> ; \\ \{ <var:L> = <var:r> \land <var:P0> = <nat:3> \land <var:R> = <nat:3> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> \} \\ <var:R> := <var:R> + <var:P0> \\ \{ <var:L> = <var:r> \land <var:R> = <nat:3> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:3> \} \end{eqnarray} The application of Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P0> := <nat:3> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:L> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:L> ; <var:P2> := <var:P2> * <var:L> ; <var:R> := <var:P2> ; <var:R> := <var:R> + <var:P1> ; <var:R> := <var:R> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:L> = <var:r> }} <def:poly> {{ <var:R> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:3> * <var:r> /\ <var:P2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:3> * <var:r> /\ <var:P2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:3> * <var:r> /\ <var:P2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:3> * <var:r> /\ <var:R> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:P0> = <nat:3> /\ <var:R> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:R> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 