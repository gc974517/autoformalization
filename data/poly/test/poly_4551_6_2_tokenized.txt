\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:f> := <nat:2> ; <var:f> := <nat:4> + <var:f> * <var:Q> ; <var:f> := <nat:4> + <var:f> * <var:Q> ; <var:f> := <nat:2> + <var:f> * <var:Q> ; <var:f> := <nat:2> + <var:f> * <var:Q> ; <var:f> := <nat:2> + <var:f> * <var:Q> \end{verbatim} Allow for any positive integers $ <var:w> $ that we have $ <var:Q> = <var:w> $ prior to interpreting the code , it holds that $ <var:f> = <nat:2> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:2> $ once code has executed . \end{theorem} \begin{proof} The argument for our code is done by standard Hoare techniques . Stepping through , the code \verb | <var:f> := <nat:2> ; | . This code forwards the precondition $ \{ <var:Q> = <var:w> \} $ into $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \} $ . This is known to be sound using the assignment scheme from usual Hoare techniques . Moving on to the upcoming statement in our list of commands , the environment update code giving $ <nat:4> + <var:f> * <var:Q> $ to $ <var:f>$ . This transfers the precondition $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \} $ into $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> + <nat:4> \} $ . Going to the next step , we see the variable binding code letting $ <nat:4> + <var:f> * <var:Q> $ into $ <var:f>$ . This command moves $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> + <nat:4> \} $ toward the condition $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:4> \} $ . Taking another step toward the following piece of code seen in our list of instructions , we see the variable update code \verb | <var:f> := <nat:2> + <var:f> * <var:Q> ; | . This transfers the precondition $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:4> \} $ into $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:2> \} $ . This is guaranteed with the assignment scheme given by Hoare logic . Going forward , the assignment code binding $ <nat:2> + <var:f> * <var:Q> $ into $ <var:f>$ . This moves the condition $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:2> \} $ into the postcondition $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:2> \} $ . Advancing , we see the variable binding line giving $ <nat:2> + <var:f> * <var:Q$ to $ <var:f>$ . This transfers the precondition $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:2> \} $ into the postcondition $ \{ <var:Q> = <var:w> \land <var:f> = <nat:2> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Q> = <var:w> }} <var:f> := <nat:2> ; <var:f> := <nat:4> + <var:f> * <var:Q> ; <var:f> := <nat:4> + <var:f> * <var:Q> ; <var:f> := <nat:2> + <var:f> * <var:Q> ; <var:f> := <nat:2> + <var:f> * <var:Q> ; <var:f> := <nat:2> + <var:f> * <var:Q> {{ <var:f> = <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:f> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:f> = <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:f> = <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:f> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:f> = <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:f> = <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 