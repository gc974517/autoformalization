\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:1> ; <var:l2> := <nat:1> ; <var:l2> := <var:l2> * <var:y> ; <var:l2> := <var:l2> * <var:y> ; <var:l4> := <nat:1> ; <var:l4> := <var:l4> * <var:y> ; <var:l4> := <var:l4> * <var:y> ; <var:l4> := <var:l4> * <var:y> ; <var:l4> := <var:l4> * <var:y> ; <var:z> := <var:l4> ; <var:z> := <var:z> + <var:l2> ; <var:z> := <var:z> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:y> = <var:m> $ prior to the execution of our set of instructions , then $ <var:z> = <nat:1> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this program can be demonstrated through standard Hoare logic . Keeping momentum , \verb | { <var:y> = <var:m> } <var:l0> := <nat:1> { <var:y> = <var:m> \land <var:l0> = <nat:1> } | , \verb | { <var:y> = <var:m> \land <var:l0> = <nat:1> } <var:l2> := <nat:1> { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> } | , \verb | { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> } <var:l2> := <var:l2> * <var:y> { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> } | , \verb | { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> } <var:l2> := <var:l2> * <var:y> { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> ^ <nat:2> } | , \verb | { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> ^ <nat:2> } <var:l4> := <nat:1> { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> ^ <nat:2> \land <var:l4> = <nat:1> } | , \verb | { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> ^ <nat:2> \land <var:l4> = <nat:1> } <var:l4> := <var:l4> * <var:y> { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> ^ <nat:2> \land <var:l4> = <nat:1> \times <var:m> } | and \verb | { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> ^ <nat:2> \land <var:l4> = <nat:1> \times <var:m> } <var:l4> := <var:l4> * <var:y> { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> \times <var:m> ^ <nat:2> \land <var:l4> = <nat:1> \times <var:m> ^ <nat:2> } | . This is known to be sound through the variable binding inference rule defined in typical Hoare techniques . Considering the proceeding pieces of code seen in the segment of code , we have \verb | { <var:y> = <var:m> } <var:l0> := <nat:1> { <var:y> = <var:m> \land <var:l0> = <nat:1> } | and \verb | { <var:y> = <var:m> \land <var:l0> = <nat:1> } <var:l2> := <nat:1> { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> } | . Moving on to the subsequent pieces of code seen in the series of commands , we see \verb | { <var:y> = <var:m> } <var:l0> := <nat:1> { <var:y> = <var:m> \land <var:l0> = <nat:1> } | and \verb | { <var:y> = <var:m> \land <var:l0> = <nat:1> } <var:l2> := <nat:1> { <var:y> = <var:m> \land <var:l0> = <nat:1> \land <var:l2> = <nat:1> } | . This is shown with the binding inference rule of usual Hoare techniques . Observing the subsequent command seen in the series of commands , \verb | { <var:y> = <var:m> } <var:l0> := <nat:1> { <var:y> = <var:m> \land <var:l0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l4> : string := " <var:l4> " . Definition <def:poly> := <var:l0> := <nat:1> ; <var:l2> := <nat:1> ; <var:l2> := <var:l2> * <var:y> ; <var:l2> := <var:l2> * <var:y> ; <var:l4> := <nat:1> ; <var:l4> := <var:l4> * <var:y> ; <var:l4> := <var:l4> * <var:y> ; <var:l4> := <var:l4> * <var:y> ; <var:l4> := <var:l4> * <var:y> ; <var:z> := <var:l4> ; <var:z> := <var:z> + <var:l2> ; <var:z> := <var:z> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <def:poly> {{ <var:z> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:l4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:l4> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:l4> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:l4> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:l4> = <nat:1> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:l2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:z> = <nat:1> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:l0> = <nat:1> /\ <var:z> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:z> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 