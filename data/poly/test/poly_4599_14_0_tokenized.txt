\begin{document} \begin{theorem} We define a code in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:9> ; <var:t1> := <nat:6> ; <var:t1> := <var:t1> * <var:R> ; <var:t2> := <nat:4> ; <var:t2> := <var:t2> * <var:R> ; <var:t2> := <var:t2> * <var:R> ; <var:t3> := <nat:6> ; <var:t3> := <var:t3> * <var:R> ; <var:t3> := <var:t3> * <var:R> ; <var:t3> := <var:t3> * <var:R> ; <var:T> := <var:t3> ; <var:T> := <var:T> + <var:t2> ; <var:T> := <var:T> + <var:t1> ; <var:T> := <var:T> + <var:t0> \end{verbatim} Assuming it to be that $ <var:R> = <var:d> $ prior to executing the list of commands it follows that $ <var:T> = <nat:6> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> + <nat:9> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:R> = <var:d> \} \\ <var:t0> := <nat:9> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \} \\ <var:t1> := <nat:6> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \} \\ <var:t1> := <var:t1> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \} \\ <var:t2> := <nat:4> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:t2> = <nat:4> \} \\ <var:t2> := <var:t2> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:t2> = <nat:4> \cdot <var:d> \} \\ <var:t2> := <var:t2> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:t2> = <nat:4> \cdot <var:d> ^ <nat:2> \} \\ <var:t3> := <nat:6> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:t2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:t3> = <nat:6> \} \\ <var:t3> := <var:t3> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:t2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:t3> = <nat:6> \cdot <var:d> \} \\ <var:t3> := <var:t3> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:t2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:t3> = <nat:6> \cdot <var:d> ^ <nat:2> \} \\ <var:t3> := <var:t3> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:t2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:t3> = <nat:6> \cdot <var:d> ^ <nat:3> \} \\ <var:T> := <var:t3> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:t2> = <nat:4> \cdot <var:d> ^ <nat:2> \land <var:T> = <nat:6> \cdot <var:d> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:t2> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:t1> = <nat:6> \cdot <var:d> \land <var:T> = <nat:6> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:t1> ; \\ \{ <var:R> = <var:d> \land <var:t0> = <nat:9> \land <var:T> = <nat:6> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> \} \\ <var:T> := <var:T> + <var:t0> \\ \{ <var:R> = <var:d> \land <var:T> = <nat:6> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> + <nat:9> \} \end{eqnarray} Therefore , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:R> = <var:d> }} <var:t0> := <nat:9> ; <var:t1> := <nat:6> ; <var:t1> := <var:t1> * <var:R> ; <var:t2> := <nat:4> ; <var:t2> := <var:t2> * <var:R> ; <var:t2> := <var:t2> * <var:R> ; <var:t3> := <nat:6> ; <var:t3> := <var:t3> * <var:R> ; <var:t3> := <var:t3> * <var:R> ; <var:t3> := <var:t3> * <var:R> ; <var:T> := <var:t3> ; <var:T> := <var:T> + <var:t2> ; <var:T> := <var:T> + <var:t1> ; <var:T> := <var:T> + <var:t0> {{ <var:T> = <nat:6> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:t2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:t2> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:t2> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:t2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:t3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:t2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:t3> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:t2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:t3> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:t2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:t3> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:t2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:T> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:6> * <var:d> /\ <var:T> = <nat:6> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:t0> = <nat:9> /\ <var:T> = <nat:6> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:T> = <nat:6> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 