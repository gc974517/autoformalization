\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:8> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:g> ; <var:D2> := <nat:2> ; <var:D2> := <var:D2> * <var:g> ; <var:D2> := <var:D2> * <var:g> ; <var:D3> := <nat:4> ; <var:D3> := <var:D3> * <var:g> ; <var:D3> := <var:D3> * <var:g> ; <var:D3> := <var:D3> * <var:g> ; <var:u> := <var:D3> ; <var:u> := <var:u> + <var:D2> ; <var:u> := <var:u> + <var:D1> ; <var:u> := <var:u> + <var:D0> \end{verbatim} Allowing --- for all $ <var:E> $ --- it to be that $ <var:g> = <var:E> $ prior to the execution of this code segment it must be that we see $ <var:u> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:8> $ once segment of code has exited . \end{theorem} \begin{proof} Using typical Hoare techniques returns : \begin{eqnarray} \{ <var:g> = <var:E> \} \\ <var:D0> := <nat:8> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \} \\ <var:D1> := <nat:4> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \} \\ <var:D1> := <var:D1> * <var:g> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \} \\ <var:D2> := <nat:2> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:D2> = <nat:2> \} \\ <var:D2> := <var:D2> * <var:g> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:D2> = <nat:2> \times <var:E> \} \\ <var:D2> := <var:D2> * <var:g> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:D2> = <nat:2> \times <var:E> ^ <nat:2> \} \\ <var:D3> := <nat:4> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:D2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:D3> = <nat:4> \} \\ <var:D3> := <var:D3> * <var:g> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:D2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:D3> = <nat:4> \times <var:E> \} \\ <var:D3> := <var:D3> * <var:g> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:D2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:D3> = <nat:4> \times <var:E> ^ <nat:2> \} \\ <var:D3> := <var:D3> * <var:g> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:D2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:D3> = <nat:4> \times <var:E> ^ <nat:3> \} \\ <var:u> := <var:D3> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:D2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:u> = <nat:4> \times <var:E> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:D2> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \times <var:E> \land <var:u> = <nat:4> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:D1> ; \\ \{ <var:g> = <var:E> \land <var:D0> = <nat:8> \land <var:u> = <nat:4> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> \} \\ <var:u> := <var:u> + <var:D0> \\ \{ <var:g> = <var:E> \land <var:u> = <nat:4> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:8> \} \end{eqnarray} As a result , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:g> = <var:E> }} <var:D0> := <nat:8> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:g> ; <var:D2> := <nat:2> ; <var:D2> := <var:D2> * <var:g> ; <var:D2> := <var:D2> * <var:g> ; <var:D3> := <nat:4> ; <var:D3> := <var:D3> * <var:g> ; <var:D3> := <var:D3> * <var:g> ; <var:D3> := <var:D3> * <var:g> ; <var:u> := <var:D3> ; <var:u> := <var:u> + <var:D2> ; <var:u> := <var:u> + <var:D1> ; <var:u> := <var:u> + <var:D0> {{ <var:u> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:D2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:D2> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:D2> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:D2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:D3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:D2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:D2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:D2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:D2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:u> = <nat:4> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:E> /\ <var:u> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:D0> = <nat:8> /\ <var:u> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:u> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 