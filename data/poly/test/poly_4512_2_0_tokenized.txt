\begin{document} \begin{theorem} Consider a program as follows \begin{verbatim} <var:T0> := <nat:4> ; <var:U> := <var:T0> \end{verbatim} Assuming $ <var:O> = <var:N> $ , given any $ <var:N> \in \mathbb{N} $ , ahead of running the list of commands it holds that $ <var:U> = <nat:4> $ when list of instructions has finished . \end{theorem} \begin{proof} The flow of logic for the list of instructions is evident using usual Hoare logic . After , we have \begin{verbatim} { <var:O> = <var:N> } <var:T0> := <nat:4> { <var:O> = <var:N> \land <var:T0> = <nat:4> } { <var:O> = <var:N> \land <var:T0> = <nat:4> } <var:U> := <var:T0{ <var:O> = <var:N> \land <var:U> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:O> = <var:N> }} <var:T0> := <nat:4> ; <var:U> := <var:T0> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 