\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:C1> := <var:q> ; <var:C0> := <nat:6> ; <var:C1> := <var:C1> * <nat:4> ; <var:e> := <var:C1> <var:e> := <var:e> + <var:C0> \end{verbatim} Allowing given every positive integer coefficients $ <var:S> $ $ <var:q> = <var:S> $ before interpreting the series of instructions , it holds that $ <var:e> = <nat:4> \times <var:S> + <nat:6> $ when code is done executing . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:q> = <var:S> \} \\ <var:C1> := <var:q> ; \\ \{ <var:q> = <var:S> \land <var:C1> = <var:S> \} \\ <var:C0> := <nat:6> ; \\ \{ <var:q> = <var:S> \land <var:C1> = <var:S> \land <var:C0> = <nat:6> \} \\ <var:C1> := <var:C1> * <nat:4> ; \\ \{ <var:q> = <var:S> \land <var:C1> = <nat:4> \cdot <var:S> \land <var:C0> = <nat:6> \} \\ <var:e> := <var:C1> \\ \{ <var:q> = <var:S> \land <var:C0> = <nat:6> \land <var:e> = <nat:4> \cdot <var:S> \} \\ <var:e> := <var:e> + <var:C0> \\ \{ <var:q> = <var:S> \land <var:e> = <nat:4> \cdot <var:S> + <nat:6> \} \end{eqnarray} Thus , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:q> = <var:S> }} <var:C1> := <var:q> ; <var:C0> := <nat:6> ; <var:C1> := <var:C1> * <nat:4> ; <var:e> := <var:C1> <var:e> := <var:e> + <var:C0> {{ <var:e> = <nat:4> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:C1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:C1> = <var:S> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:C1> = <nat:4> * <var:S> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:C0> = <nat:6> /\ <var:e> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:e> = <nat:4> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 