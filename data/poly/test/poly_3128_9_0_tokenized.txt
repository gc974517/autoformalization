\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:4> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:y> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:y> ; <var:P2> := <var:P2> * <var:y> ; <var:a> := <var:P2> ; <var:a> := <var:a> + <var:P1> ; <var:a> := <var:a> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Allowing --- letting positive numbers $ <var:s> $ --- it to hold that $ <var:y> = <var:s> $ ahead of running our set of commands , it holds that we see $ <var:a> = <nat:3> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:4> $ when series of instructions finishes . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:y> = <var:s> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:y> = <var:s> \land <var:P0> = <nat:4> \} \\ <var:P1> := <nat:3> ; \\ \{ <var:y> = <var:s> \land <var:P0> = <nat:4> \land <var:P1> = <nat:3> \} \\ <var:P1> := <var:P1> * <var:y> ; \\ \{ <var:y> = <var:s> \land <var:P0> = <nat:4> \land <var:P1> = <nat:3> \times <var:s> \} \\ <var:P2> := <nat:3> ; \\ \{ <var:y> = <var:s> \land <var:P0> = <nat:4> \land <var:P1> = <nat:3> \times <var:s> \land <var:P2> = <nat:3> \} \\ <var:P2> := <var:P2> * <var:y> ; \\ \{ <var:y> = <var:s> \land <var:P0> = <nat:4> \land <var:P1> = <nat:3> \times <var:s> \land <var:P2> = <nat:3> \times <var:s> \} \\ <var:P2> := <var:P2> * <var:y> ; \\ \{ <var:y> = <var:s> \land <var:P0> = <nat:4> \land <var:P1> = <nat:3> \times <var:s> \land <var:P2> = <nat:3> \times <var:s> ^ <nat:2> \} \\ <var:a> := <var:P2> ; \\ \{ <var:y> = <var:s> \land <var:P0> = <nat:4> \land <var:P1> = <nat:3> \times <var:s> \land <var:a> = <nat:3> \times <var:s> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:P1> ; \\ \{ <var:y> = <var:s> \land <var:P0> = <nat:4> \land <var:a> = <nat:3> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> \} \\ <var:a> := <var:a> + <var:P0> \\ \{ <var:y> = <var:s> \land <var:a> = <nat:3> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:4> \} \end{eqnarray} Thus , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P0> := <nat:4> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:y> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:y> ; <var:P2> := <var:P2> * <var:y> ; <var:a> := <var:P2> ; <var:a> := <var:a> + <var:P1> ; <var:a> := <var:a> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:y> = <var:s> }} <def:poly> {{ <var:a> = <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:3> * <var:s> /\ <var:P2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:3> * <var:s> /\ <var:P2> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:3> * <var:s> /\ <var:P2> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:3> * <var:s> /\ <var:a> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:P0> = <nat:4> /\ <var:a> = <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:s> /\ <var:a> = <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 