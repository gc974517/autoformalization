\begin{document} \begin{theorem} Take the following code in \emph{Imp} : \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <nat:4> + <var:w> * <var:o> ; <var:w> := <nat:3> + <var:w> * <var:o> ; <var:w> := <nat:3> + <var:w> * <var:o> ; <var:w> := <nat:2> + <var:w> * <var:o> ; <var:w> := <nat:3> + <var:w> * <var:o> ; <var:w> := <nat:4> + <var:w> * <var:o> ; <var:w> := <nat:4> + <var:w> * <var:o> ; <var:w> := <nat:2> + <var:w> * <var:o> ; <var:w> := <nat:1> + <var:w> * <var:o> \end{verbatim} Assuming that we have $ <var:o> = <var:H> $ prior to running this set of commands , then we have $ <var:w> = <nat:3> \times <var:H> ^ <nat:9> + <nat:4> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:1> $ once program has exited . \end{theorem} \begin{proof} The proof of this code segment is demonstrated using usual Hoare techniques . Looking at the next command seen in our segment of code , the code \verb | <var:w> := <nat:3> ; | . This statement moves the precondition $ \{ <var:o> = <var:H> \} $ to the condition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> \} $ . Moving forward to the next step , the assignment line \verb | <var:w> := <nat:4> + <var:w> * <var:o> ; | . This code moves the precondition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> \} $ as the condition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> + <nat:4> \} $ . This is ensured with the assignment inference rule given by usual Hoare techniques . Going to the next step , the variable assignmet code assigning $ <nat:3> + <var:w> * <var:o> $ to $ <var:w>$ . This takes the precondition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> + <nat:4> \} $ as the condition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> \} $ . Considering the following piece of code found in our code , we see the variable binding statement binding $ <nat:3> + <var:w> * <var:o> $ as $ <var:w>$ . This advances the precondition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> \} $ as the condition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> \} $ . This is ensured using the assignment scheme defined by typical Hoare techniques . Advancing to the proceeding line of code found in the program , the environment update statement \verb | <var:w> := <nat:2> + <var:w> * <var:o> ; | . This code takes the condition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> \} $ to $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> \} $ . This is ensured by the assignment law obtained from typical Hoare reasoning . Considering the following statement in the code , the binding code giving $ <nat:3> + <var:w> * <var:o> $ to $ <var:w>$ . This moves $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> \} $ to the condition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> \} $ . This is shown with the assignment inference rule defined by typical Hoare logic . Immediately after , the variable assignmet code \verb | <var:w> := <nat:4> + <var:w> * <var:o> ; | . This statement takes the precondition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> \} $ to the postcondition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> \} $ . This is known to be sound by the assignment law given in standard Hoare reasoning . Moving forward to the subsequent step in our set of instructions , we have the variable binding code \verb | <var:w> := <nat:4> + <var:w> * <var:o> ; | . This command takes $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> \} $ as the condition $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> \} $ . Moving onward , we have the statement letting $ <nat:2> + <var:w> * <var:o> $ as $ <var:w>$ . This advances $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> \} $ toward $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> \} $ . This is known to be sound by the assignment scheme given by typical Hoare logic . Honing in on the proceeding bit of code seen in the code , the binding line \verb | <var:w> := <nat:1> + <var:w> * <var:o> | . This advances $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> \} $ into $ \{ <var:o> = <var:H> \land <var:w> = <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:o> = <var:H> }} <var:w> := <nat:3> ; <var:w> := <nat:4> + <var:w> * <var:o> ; <var:w> := <nat:3> + <var:w> * <var:o> ; <var:w> := <nat:3> + <var:w> * <var:o> ; <var:w> := <nat:2> + <var:w> * <var:o> ; <var:w> := <nat:3> + <var:w> * <var:o> ; <var:w> := <nat:4> + <var:w> * <var:o> ; <var:w> := <nat:4> + <var:w> * <var:o> ; <var:w> := <nat:2> + <var:w> * <var:o> ; <var:w> := <nat:1> + <var:w> * <var:o> {{ <var:w> = <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:w> = <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 