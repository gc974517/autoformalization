\begin{document} \begin{theorem} Consider the following list of commands such that \begin{verbatim} <var:Q0> := <nat:8> ; <var:W> := <var:Q0> \end{verbatim} Given it to hold that $ <var:f> = <var:L> $ ahead of executing the list of instructions , it follows that $ <var:W> = <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for the segment of code is demonstrated with typical Hoare logic . Honing in on the subsequent command seen in our segment of code , we see the variable assignmet command assigning $ <nat:8> $ to $ <var:Q0>$ . This statement transfers the precondition $ \{ <var:f> = <var:L> \} $ as the condition $ \{ <var:f> = <var:L> \land <var:Q0> = <nat:8> \} $ . This is guaranteed with the assignment scheme found in usual Hoare reasoning . Further , the assignment line binding $ <var:Q0$ as $ <var:W>$ . This takes $ \{ <var:f> = <var:L> \land <var:Q0> = <nat:8> \} $ as $ \{ <var:f> = <var:L> \land <var:W> = <nat:8> \} $ . This is known to be sound by the assignment law found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:f> = <var:L> }} <var:Q0> := <nat:8> ; <var:W> := <var:Q0> {{ <var:W> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:W> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 