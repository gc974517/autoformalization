\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:4> ; <var:Y1> := <nat:6> ; <var:Y1> := <var:Y1> * <var:t> ; <var:Y2> := <nat:5> ; <var:Y2> := <var:Y2> * <var:t> ; <var:Y2> := <var:Y2> * <var:t> ; <var:X> := <var:Y2> ; <var:X> := <var:X> + <var:Y1> ; <var:X> := <var:X> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- given some positive integer coefficients $ <var:D> $ --- $ <var:t> = <var:D> $ before the evaluation of this series of commands , it holds that we have $ <var:X> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:4> $ once series of commands executes . \end{theorem} \begin{proof} The method of proof for the code segment is accomplished with Hoare techniques . Considering the subsequent statement found in the set of commands , we have the variable binding statement \verb | <var:Y0> := <nat:4> ; | . This takes the condition $ \{ <var:t> = <var:D> \} $ to $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \} $ . This is ensured through the assignment law obtained from standard Hoare logic . Moving forward to the following step found in our program , the variable assignmet code \verb | <var:Y1> := <nat:6> ; | . This moves the condition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \} $ to $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> \} $ . Taking a look at the next line of code found in the segment of code , we have the statement \verb | <var:Y1> := <var:Y1> * <var:t> ; | . This command redefines the condition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> \} $ as $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \} $ . Now , we see the statement \verb | <var:Y2> := <nat:5> ; | . This statement transfers the condition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \} $ as the postcondition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \land <var:Y2> = <nat:5> \} $ . Taking another step toward the proceeding bit of code contained in our code segment , we see the environment update statement \verb | <var:Y2> := <var:Y2> * <var:t> ; | . This line redefines $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \land <var:Y2> = <nat:5> \} $ toward the postcondition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \land <var:Y2> = <nat:5> * <var:D> \} $ . This is shown through the assignment scheme defined in Hoare reasoning . Going forward , we have the binding code \verb | <var:Y2> := <var:Y2> * <var:t> ; | . This takes the condition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \land <var:Y2> = <nat:5> * <var:D> \} $ into the postcondition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \land <var:Y2> = <nat:5> * <var:D> ^ <nat:2> \} $ . This is given by the assignment rule in typical Hoare reasoning . Advancing to the next bit of code seen in our code segment , the assignment code \verb | <var:X> := <var:Y2> ; | . This advances $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \land <var:Y2> = <nat:5> * <var:D> ^ <nat:2> \} $ toward the condition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \land <var:X> = <nat:5> * <var:D> ^ <nat:2> \} $ . Going forward , we have the variable binding code \verb | <var:X> := <var:X> + <var:Y1> ; | . This takes the condition $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:6> * <var:D> \land <var:X> = <nat:5> * <var:D> ^ <nat:2> \} $ toward $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:X> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> \} $ . Taking another step toward the next command contained in our program , we have the variable assignmet command assigning $ <var:X> + <var:Y0$ into $ <var:X>$ . This moves $ \{ <var:t> = <var:D> \land <var:Y0> = <nat:4> \land <var:X> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> \} $ into $ \{ <var:t> = <var:D> \land <var:X> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:4> ; <var:Y1> := <nat:6> ; <var:Y1> := <var:Y1> * <var:t> ; <var:Y2> := <nat:5> ; <var:Y2> := <var:Y2> * <var:t> ; <var:Y2> := <var:Y2> * <var:t> ; <var:X> := <var:Y2> ; <var:X> := <var:X> + <var:Y1> ; <var:X> := <var:X> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:t> = <var:D> }} <def:poly> {{ <var:X> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:6> * <var:D> /\ <var:Y2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:6> * <var:D> /\ <var:Y2> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:6> * <var:D> /\ <var:Y2> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:6> * <var:D> /\ <var:X> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:X> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:D> /\ <var:X> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 