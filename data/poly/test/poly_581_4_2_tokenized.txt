\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:T> ; <var:Y> := <nat:1> + <var:Y> * <var:T> ; <var:Y> := <nat:3> + <var:Y> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Allowing that we have $ <var:T> = <var:k> $ prior to the execution of the series of instructions it must be that we have $ <var:Y> = <nat:1> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:3> $ after code segment exits . \end{theorem} \begin{proof} Using standard Hoare techniques yields : \begin{eqnarray} \{ <var:T> = <var:k> \} \\ <var:Y> := <nat:1> ; \\ \{ <var:T> = <var:k> \land <var:Y> = <nat:1> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:Y> = <nat:1> \times <var:k> + <nat:2> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:Y> = <nat:1> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:T> \\ \{ <var:T> = <var:k> \land <var:Y> = <nat:1> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:3> \} \end{eqnarray} Given the preceding argument , the program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:T> ; <var:Y> := <nat:1> + <var:Y> * <var:T> ; <var:Y> := <nat:3> + <var:Y> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:T> = <var:k> }} <def:poly> {{ <var:Y> = <nat:1> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Y> = <nat:1> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Y> = <nat:1> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Y> = <nat:1> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 