\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:2> ; <var:a> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> in \emph{Imp} . Assume that we have $ <var:Y> = <var:T> $ prior to executing the segment of code , it holds that we have $ <var:a> = <nat:2> $ after segment of code has finished . \end{theorem} \begin{proof} Applying usual Hoare logic returns : \begin{eqnarray} \{ <var:Y> = <var:T> \} \\ <var:S0> := <nat:2> ; \\ \{ <var:Y> = <var:T> \land <var:S0> = <nat:2> \} \\ <var:a> := <var:S0> \\ \{ <var:Y> = <var:T> \land <var:a> = <nat:2> \} \end{eqnarray} Thusly , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:2> ; <var:a> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Y> = <var:T> }} <def:poly> {{ <var:a> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:a> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 