\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:y> ; <var:q> := <var:W1> ; <var:q> := <var:q> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> . Assume that $ <var:y> = <var:R> $ ( for every positive numbers $ <var:R> $ ) prior to the evaluation of this program it holds that $ <var:q> = <nat:4> \cdot <var:R> + <nat:1> $ once list of commands has terminated . \end{theorem} \begin{proof} The argument for this list of commands is shown through usual Hoare techniques . Advancing , we see the variable assignmet statement \verb | <var:W0> := <nat:1> ; | . This forwards the precondition $ \{ <var:y> = <var:R> \} $ as the postcondition $ \{ <var:y> = <var:R> \land <var:W0> = <nat:1> \} $ . This is shown by the assignment scheme given in Hoare techniques . Paying attention to the upcoming line of code seen in our list of instructions , we have the command assigning $ <nat:4> $ to $ <var:W1>$ . This command advances the precondition $ \{ <var:y> = <var:R> \land <var:W0> = <nat:1> \} $ toward the condition $ \{ <var:y> = <var:R> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \} $ . Moving on to the next step , we see the binding line \verb | <var:W1> := <var:W1> * <var:y> ; | . This line takes the condition $ \{ <var:y> = <var:R> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \} $ as the condition $ \{ <var:y> = <var:R> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \cdot <var:R> \} $ . Honing in on the proceeding line of code seen in the series of commands , we have the command \verb | <var:q> := <var:W1> ; | . This forwards the precondition $ \{ <var:y> = <var:R> \land <var:W0> = <nat:1> \land <var:W1> = <nat:4> \cdot <var:R> \} $ to the condition $ \{ <var:y> = <var:R> \land <var:W0> = <nat:1> \land <var:q> = <nat:4> \cdot <var:R> \} $ . Next , the variable assignmet code \verb | <var:q> := <var:q> + <var:W0> | . This moves the precondition $ \{ <var:y> = <var:R> \land <var:W0> = <nat:1> \land <var:q> = <nat:4> \cdot <var:R> \} $ as the postcondition $ \{ <var:y> = <var:R> \land <var:q> = <nat:4> \cdot <var:R> + <nat:1> \} $ . This is shown using the assignment inference rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:1> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:y> ; <var:q> := <var:W1> ; <var:q> := <var:q> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:y> = <var:R> }} <def:poly> {{ <var:q> = <nat:4> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:1> /\ <var:q> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:q> = <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 