\begin{document} \begin{theorem} Consider the following code segment such that \begin{verbatim} <var:z1> := <var:i> ; <var:z2> := <var:z1> * <var:i> ; <var:z3> := <var:z2> * <var:i> ; <var:z0> := <nat:5> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:4> ; <var:Z> := <var:z3> <var:Z> := <var:Z> + <var:z2> <var:Z> := <var:Z> + <var:z1> <var:Z> := <var:Z> + <var:z0> \end{verbatim} Given , assuming some natural numbers $ <var:N> $ , that $ <var:i> = <var:N> $ ahead of executing this list of commands it holds that $ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:5> $ when set of commands has executed . \end{theorem} \begin{proof} The application of typical Hoare techniques results in : \begin{eqnarray} \{ <var:i> = <var:N> \} \\ <var:z1> := <var:i> ; \\ \{ <var:i> = <var:N> \land <var:z1> = <var:N> \} \\ <var:z2> := <var:z1> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:z1> = <var:N> \land <var:z2> = <var:N> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:z1> = <var:N> \land <var:z2> = <var:N> ^ <nat:2> \land <var:z3> = <var:N> ^ <nat:3> \} \\ <var:z0> := <nat:5> ; \\ \{ <var:i> = <var:N> \land <var:z1> = <var:N> \land <var:z2> = <var:N> ^ <nat:2> \land <var:z3> = <var:N> ^ <nat:3> \land <var:z0> = <nat:5> \} \\ <var:z1> := <var:z1> * <nat:7> ; \\ \{ <var:i> = <var:N> \land <var:z1> = <nat:7> \cdot <var:N> \land <var:z2> = <var:N> ^ <nat:2> \land <var:z3> = <var:N> ^ <nat:3> \land <var:z0> = <nat:5> \} \\ <var:z2> := <var:z2> * <nat:8> ; \\ \{ <var:i> = <var:N> \land <var:z1> = <nat:7> \cdot <var:N> \land <var:z2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:z3> = <var:N> ^ <nat:3> \land <var:z0> = <nat:5> \} \\ <var:z3> := <var:z3> * <nat:4> ; \\ \{ <var:i> = <var:N> \land <var:z1> = <nat:7> \cdot <var:N> \land <var:z2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:z3> = <nat:4> \cdot <var:N> ^ <nat:3> \land <var:z0> = <nat:5> \} \\ <var:Z> := <var:z3> \\ \{ <var:i> = <var:N> \land <var:z1> = <nat:7> \cdot <var:N> \land <var:z2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:z0> = <nat:5> \land <var:Z> = <nat:4> \cdot <var:N> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:z2> \\ \{ <var:i> = <var:N> \land <var:z1> = <nat:7> \cdot <var:N> \land <var:z0> = <nat:5> \land <var:Z> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:z1> \\ \{ <var:i> = <var:N> \land <var:z0> = <nat:5> \land <var:Z> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:7> \cdot <var:N> \} \\ <var:Z> := <var:Z> + <var:z0> \\ \{ <var:i> = <var:N> \land <var:Z> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:7> \cdot <var:N> + <nat:5> \} \end{eqnarray} Given the preceding argument , the code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:i> = <var:N> }} <var:z1> := <var:i> ; <var:z2> := <var:z1> * <var:i> ; <var:z3> := <var:z2> * <var:i> ; <var:z0> := <nat:5> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:4> ; <var:Z> := <var:z3> <var:Z> := <var:Z> + <var:z2> <var:Z> := <var:Z> + <var:z1> <var:Z> := <var:Z> + <var:z0> {{ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <var:N> /\ <var:z2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <var:N> /\ <var:z2> = <var:N> ^ <nat:2> /\ <var:z3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <var:N> /\ <var:z2> = <var:N> ^ <nat:2> /\ <var:z3> = <var:N> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <nat:7> * <var:N> /\ <var:z2> = <var:N> ^ <nat:2> /\ <var:z3> = <var:N> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <nat:7> * <var:N> /\ <var:z2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:z3> = <var:N> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <nat:7> * <var:N> /\ <var:z2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:N> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <nat:7> * <var:N> /\ <var:z2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:z0> = <nat:5> /\ <var:Z> = <nat:4> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z1> = <nat:7> * <var:N> /\ <var:z0> = <nat:5> /\ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:z0> = <nat:5> /\ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 