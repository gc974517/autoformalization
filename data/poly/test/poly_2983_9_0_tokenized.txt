\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:D0> := <nat:4> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:R> ; <var:D2> := <nat:4> ; <var:D2> := <var:D2> * <var:R> ; <var:D2> := <var:D2> * <var:R> ; <var:u> := <var:D2> ; <var:u> := <var:u> + <var:D1> ; <var:u> := <var:u> + <var:D0> \end{verbatim} Assuming it to hold that $ <var:R> = <var:W> $ prior to interpreting the list of instructions it must be that we have $ <var:u> = <nat:4> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:4> $ when set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be done through typical Hoare techniques . Further , we see the environment update statement \verb | <var:D0> := <nat:4> ; | . This transfers the condition $ \{ <var:R> = <var:W> \} $ as the condition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \} $ . This is shown with the assignment law of Hoare logic . Paying attention to the proceeding line in our set of instructions , we see the variable update command giving $ <nat:6> $ into $ <var:D1>$ . This redefines the condition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \} $ as the postcondition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \} $ . Observing the next bit of code contained in our series of instructions , we see the statement \verb | <var:D1> := <var:D1> * <var:R> ; | . This command takes the condition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \} $ into $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \} $ . This is rigorously given using the assignment rule obtained from Hoare reasoning . Jumping to the following line seen in the segment of code , we see the variable update line yielding $ <nat:4> $ as $ <var:D2>$ . This statement redefines the condition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \} $ toward $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \land <var:D2> = <nat:4> \} $ . Now , we see the statement \verb | <var:D2> := <var:D2> * <var:R> ; | . This line redefines $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \land <var:D2> = <nat:4> \} $ toward $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \land <var:D2> = <nat:4> \cdot <var:W> \} $ . This is rigorously given through the assignment scheme of typical Hoare logic . Moving forward to the subsequent line of code seen in the list of instructions , we see the variable assignmet statement defining $ <var:D2> * <var:R> $ into $ <var:D2>$ . This takes the precondition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \land <var:D2> = <nat:4> \cdot <var:W> \} $ toward the postcondition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \land <var:D2> = <nat:4> \cdot <var:W> ^ <nat:2> \} $ . This is guaranteed using the assignment inference rule defined by typical Hoare reasoning . Shifting focus toward the upcoming line in the list of instructions , the assignment statement letting $ <var:D2> $ to $ <var:u>$ . This transfers the precondition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \land <var:D2> = <nat:4> \cdot <var:W> ^ <nat:2> \} $ as the condition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \land <var:u> = <nat:4> \cdot <var:W> ^ <nat:2> \} $ . Observing the proceeding line of code seen in our set of instructions , we see the binding code binding $ <var:u> + <var:D1> $ as $ <var:u>$ . This code redefines $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \cdot <var:W> \land <var:u> = <nat:4> \cdot <var:W> ^ <nat:2> \} $ to the postcondition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:u> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:6> \cdot <var:W> \} $ . Stepping forward , the variable update command defining $ <var:u> + <var:D0$ as $ <var:u>$ . This statement redefines the precondition $ \{ <var:R> = <var:W> \land <var:D0> = <nat:4> \land <var:u> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:6> \cdot <var:W> \} $ to $ \{ <var:R> = <var:W> \land <var:u> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:6> \cdot <var:W> + <nat:4> \} $ . This is given with the assignment rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:R> = <var:W> }} <var:D0> := <nat:4> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:R> ; <var:D2> := <nat:4> ; <var:D2> := <var:D2> * <var:R> ; <var:D2> := <var:D2> * <var:R> ; <var:u> := <var:D2> ; <var:u> := <var:u> + <var:D1> ; <var:u> := <var:u> + <var:D0> {{ <var:u> = <nat:4> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:W> /\ <var:D2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:W> /\ <var:D2> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:W> /\ <var:D2> = <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:W> /\ <var:u> = <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D0> = <nat:4> /\ <var:u> = <nat:4> * <var:W> ^ <nat:2> + <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:u> = <nat:4> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 