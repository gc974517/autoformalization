\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:O1> := <var:z> ; <var:O2> := <var:O1> * <var:z> ; <var:O3> := <var:O2> * <var:z> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:6> ; <var:O2> := <var:O2> * <nat:4> ; <var:O3> := <var:O3> * <nat:5> ; <var:h> := <var:O3> <var:h> := <var:h> + <var:O2> <var:h> := <var:h> + <var:O1> <var:h> := <var:h> + <var:O0> \end{verbatim} Allow it to be that $ <var:z> = <var:N> $ ahead of the evaluation of the set of instructions , it holds that we have $ <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our set of commands is accomplished by Hoare techniques . Moving forward , we have the binding statement defining $ <var:z> $ to $ <var:O1>$ . This moves the condition $ \{ <var:z> = <var:N> \} $ to $ \{ <var:z> = <var:N> \land <var:O1> = <var:N> \} $ . This is deduced by the assignment scheme given by Hoare reasoning . Observing the proceeding line of code found in the segment of code , the variable binding statement \verb | <var:O2> := <var:O1> * <var:z> ; | . This statement transfers the condition $ \{ <var:z> = <var:N> \land <var:O1> = <var:N> \} $ toward the postcondition $ \{ <var:z> = <var:N> \land <var:O1> = <var:N> \land <var:O2> = <var:N> ^ <nat:2> \} $ . Immediately after , we have the statement \verb | <var:O3> := <var:O2> * <var:z> ; | . This redefines $ \{ <var:z> = <var:N> \land <var:O1> = <var:N> \land <var:O2> = <var:N> ^ <nat:2> \} $ to the condition $ \{ <var:z> = <var:N> \land <var:O1> = <var:N> \land <var:O2> = <var:N> ^ <nat:2> \land <var:O3> = <var:N> ^ <nat:3> \} $ . Moving on , we have the binding command defining $ <nat:3> $ toward $ <var:O0>$ . This advances the precondition $ \{ <var:z> = <var:N> \land <var:O1> = <var:N> \land <var:O2> = <var:N> ^ <nat:2> \land <var:O3> = <var:N> ^ <nat:3> \} $ into $ \{ <var:z> = <var:N> \land <var:O1> = <var:N> \land <var:O2> = <var:N> ^ <nat:2> \land <var:O3> = <var:N> ^ <nat:3> \land <var:O0> = <nat:3> \} $ . Keeping momentum , we have the binding line \verb | <var:O1> := <var:O1> * <nat:6> ; | . This forwards the condition $ \{ <var:z> = <var:N> \land <var:O1> = <var:N> \land <var:O2> = <var:N> ^ <nat:2> \land <var:O3> = <var:N> ^ <nat:3> \land <var:O0> = <nat:3> \} $ toward $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O2> = <var:N> ^ <nat:2> \land <var:O3> = <var:N> ^ <nat:3> \land <var:O0> = <nat:3> \} $ . Immediately after , we have the variable update code defining $ <var:O2> * <nat:4> $ as $ <var:O2>$ . This redefines the condition $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O2> = <var:N> ^ <nat:2> \land <var:O3> = <var:N> ^ <nat:3> \land <var:O0> = <nat:3> \} $ to the condition $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O2> = <nat:4> * <var:N> ^ <nat:2> \land <var:O3> = <var:N> ^ <nat:3> \land <var:O0> = <nat:3> \} $ . This is deduced by the assignment rule obtained from typical Hoare logic . Stepping forward , we see the variable update code defining $ <var:O3> * <nat:5> $ toward $ <var:O3>$ . This moves the precondition $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O2> = <nat:4> * <var:N> ^ <nat:2> \land <var:O3> = <var:N> ^ <nat:3> \land <var:O0> = <nat:3> \} $ to the postcondition $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O2> = <nat:4> * <var:N> ^ <nat:2> \land <var:O3> = <nat:5> * <var:N> ^ <nat:3> \land <var:O0> = <nat:3> \} $ . This is given using the assignment inference rule of typical Hoare reasoning . Keeping momentum , we see the variable update line binding $ <var:O3$ to $ <var:h>$ . This command advances the condition $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O2> = <nat:4> * <var:N> ^ <nat:2> \land <var:O3> = <nat:5> * <var:N> ^ <nat:3> \land <var:O0> = <nat:3> \} $ to the condition $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O2> = <nat:4> * <var:N> ^ <nat:2> \land <var:O0> = <nat:3> \land <var:h> = <nat:5> * <var:N> ^ <nat:3> \} $ . This is ensured through the assignment rule of typical Hoare reasoning . Moving forward , the binding command giving $ <var:h> + <var:O2$ into $ <var:h>$ . This line takes the condition $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O2> = <nat:4> * <var:N> ^ <nat:2> \land <var:O0> = <nat:3> \land <var:h> = <nat:5> * <var:N> ^ <nat:3> \} $ toward $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O0> = <nat:3> \land <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> \} $ . Advancing to the next step , the binding statement \verb | <var:h> := <var:h> + <var:O1> | . This advances $ \{ <var:z> = <var:N> \land <var:O1> = <nat:6> * <var:N> \land <var:O0> = <nat:3> \land <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> \} $ to the condition $ \{ <var:z> = <var:N> \land <var:O0> = <nat:3> \land <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> \} $ . This is sound using the assignment law obtained from Hoare reasoning . After , we have the assignment code \verb | <var:h> := <var:h> + <var:O0> | . This advances the precondition $ \{ <var:z> = <var:N> \land <var:O0> = <nat:3> \land <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> \} $ to the condition $ \{ <var:z> = <var:N> \land <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> \} $ . This is deduced through the assignment inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:z> = <var:N> }} <var:O1> := <var:z> ; <var:O2> := <var:O1> * <var:z> ; <var:O3> := <var:O2> * <var:z> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:6> ; <var:O2> := <var:O2> * <nat:4> ; <var:O3> := <var:O3> * <nat:5> ; <var:h> := <var:O3> <var:h> := <var:h> + <var:O2> <var:h> := <var:h> + <var:O1> <var:h> := <var:h> + <var:O0> {{ <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <var:N> /\ <var:O2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <var:N> /\ <var:O2> = <var:N> ^ <nat:2> /\ <var:O3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <var:N> /\ <var:O2> = <var:N> ^ <nat:2> /\ <var:O3> = <var:N> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <nat:6> * <var:N> /\ <var:O2> = <var:N> ^ <nat:2> /\ <var:O3> = <var:N> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <nat:6> * <var:N> /\ <var:O2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:O3> = <var:N> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <nat:6> * <var:N> /\ <var:O2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <nat:6> * <var:N> /\ <var:O2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:O0> = <nat:3> /\ <var:h> = <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O1> = <nat:6> * <var:N> /\ <var:O0> = <nat:3> /\ <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:3> /\ <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:h> = <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 