\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:3> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:G> ; <var:S2> := <nat:4> ; <var:S2> := <var:S2> * <var:G> ; <var:S2> := <var:S2> * <var:G> ; <var:S3> := <nat:2> ; <var:S3> := <var:S3> * <var:G> ; <var:S3> := <var:S3> * <var:G> ; <var:S3> := <var:S3> * <var:G> ; <var:Z> := <var:S3> ; <var:Z> := <var:Z> + <var:S2> ; <var:Z> := <var:Z> + <var:S1> ; <var:Z> := <var:Z> + <var:S0> \end{verbatim} Given --- given every positive integer coefficients $ <var:L> $ --- $ <var:G> = <var:L> $ ahead of interpreting the series of instructions it must be that $ <var:Z> = <nat:2> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:3> $ once program has executed . \end{theorem} \begin{proof} Utilizing standard Hoare techniques produces : \begin{eqnarray} \{ <var:G> = <var:L> \} \\ <var:S0> := <nat:3> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \} \\ <var:S1> := <nat:1> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \} \\ <var:S1> := <var:S1> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \} \\ <var:S2> := <nat:4> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:S2> = <nat:4> \} \\ <var:S2> := <var:S2> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:S2> = <nat:4> \cdot <var:L> \} \\ <var:S2> := <var:S2> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:S2> = <nat:4> \cdot <var:L> ^ <nat:2> \} \\ <var:S3> := <nat:2> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:S2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:S3> = <nat:2> \} \\ <var:S3> := <var:S3> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:S2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:L> \} \\ <var:S3> := <var:S3> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:S2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:L> ^ <nat:2> \} \\ <var:S3> := <var:S3> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:S2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:L> ^ <nat:3> \} \\ <var:Z> := <var:S3> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:S2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:Z> = <nat:2> \cdot <var:L> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:S2> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:S1> = <nat:1> \cdot <var:L> \land <var:Z> = <nat:2> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:S1> ; \\ \{ <var:G> = <var:L> \land <var:S0> = <nat:3> \land <var:Z> = <nat:2> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> \} \\ <var:Z> := <var:Z> + <var:S0> \\ \{ <var:G> = <var:L> \land <var:Z> = <nat:2> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:3> \} \end{eqnarray} Thus , this code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:G> = <var:L> }} <var:S0> := <nat:3> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:G> ; <var:S2> := <nat:4> ; <var:S2> := <var:S2> * <var:G> ; <var:S2> := <var:S2> * <var:G> ; <var:S3> := <nat:2> ; <var:S3> := <var:S3> * <var:G> ; <var:S3> := <var:S3> * <var:G> ; <var:S3> := <var:S3> * <var:G> ; <var:Z> := <var:S3> ; <var:Z> := <var:Z> + <var:S2> ; <var:Z> := <var:Z> + <var:S1> ; <var:Z> := <var:Z> + <var:S0> {{ <var:Z> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:S2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:S2> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:S2> = <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:S2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:S3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:S2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:S3> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:S2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:S3> = <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:S2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:S3> = <nat:2> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:S2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:Z> = <nat:2> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:1> * <var:L> /\ <var:Z> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:S0> = <nat:3> /\ <var:Z> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:Z> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 