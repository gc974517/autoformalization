\begin{document} \begin{theorem} Take a code segment as follows \begin{verbatim} <var:A0> := <nat:7> ; <var:K> := <var:A0> \end{verbatim} Allowing ( for any $ <var:n> $ ) $ <var:F> = <var:n> $ ahead of interpreting the set of commands it holds that we see $ <var:K> = <nat:7> $ after code exits . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code can be accomplished by typical Hoare logic . Observing the next statement in the list of instructions , we see the binding statement giving $ <nat:7> $ to $ <var:A0>$ . This command forwards the precondition $ \{ <var:F> = <var:n> \} $ toward the postcondition $ \{ <var:F> = <var:n> \land <var:A0> = <nat:7> \} $ . Paying attention to the upcoming line of code seen in the code , we see the code \verb | <var:K> := <var:A0> | . This advances the condition $ \{ <var:F> = <var:n> \land <var:A0> = <nat:7> \} $ toward the condition $ \{ <var:F> = <var:n> \land <var:K> = <nat:7> \} $ . This is shown by the assignment law in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:F> = <var:n> }} <var:A0> := <nat:7> ; <var:K> := <var:A0> {{ <var:K> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:K> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 