\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M> := <nat:1> ; <var:M> := <nat:1> + <var:M> * <var:e> ; <var:M> := <nat:3> + <var:M> * <var:e> ; <var:M> := <nat:4> + <var:M> * <var:e> ; <var:M> := <var:M> * <var:e> ; <var:M> := <nat:1> + <var:M> * <var:e> ; <var:M> := <nat:1> + <var:M> * <var:e> ; <var:M> := <nat:1> + <var:M> * <var:e> ; <var:M> := <nat:2> + <var:M> * <var:e> ; <var:M> := <nat:4> + <var:M> * <var:e> ; <var:M> := <nat:2> + <var:M> * <var:e> ; <var:M> := <nat:3> + <var:M> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assuming it to hold that $ <var:e> = <var:f> $ prior to the evaluation of this code it follows that $ <var:M> = <nat:1> \cdot <var:f> ^ <nat:11> + <nat:1> \cdot <var:f> ^ <nat:10> + <nat:3> \cdot <var:f> ^ <nat:9> + <nat:4> \cdot <var:f> ^ <nat:8> + <nat:1> \cdot <var:f> ^ <nat:6> + <nat:1> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:2> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:2> \cdot <var:f> + <nat:3> $ when set of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:f> \} \\ <var:M> := <nat:1> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> \} \\ <var:M> := <nat:1> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> + <nat:1> \} \\ <var:M> := <nat:3> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> \} \\ <var:M> := <nat:4> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:4> \} \\ <var:M> := <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + \} \\ <var:M> := <nat:1> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> \} \\ <var:M> := <nat:1> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:1> \} \\ <var:M> := <nat:1> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> \} \\ <var:M> := <nat:2> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> \} \\ <var:M> := <nat:4> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:9> + <nat:1> * <var:f> ^ <nat:8> + <nat:3> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> \} \\ <var:M> := <nat:2> + <var:M> * <var:e> ; \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:10> + <nat:1> * <var:f> ^ <nat:9> + <nat:3> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> \} \\ <var:M> := <nat:3> + <var:M> * <var:e> \\ \{ <var:e> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:11> + <nat:1> * <var:f> ^ <nat:10> + <nat:3> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> \} \end{eqnarray} Applying typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:1> ; <var:M> := <nat:1> + <var:M> * <var:e> ; <var:M> := <nat:3> + <var:M> * <var:e> ; <var:M> := <nat:4> + <var:M> * <var:e> ; <var:M> := <var:M> * <var:e> ; <var:M> := <nat:1> + <var:M> * <var:e> ; <var:M> := <nat:1> + <var:M> * <var:e> ; <var:M> := <nat:1> + <var:M> * <var:e> ; <var:M> := <nat:2> + <var:M> * <var:e> ; <var:M> := <nat:4> + <var:M> * <var:e> ; <var:M> := <nat:2> + <var:M> * <var:e> ; <var:M> := <nat:3> + <var:M> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:e> = <var:f> }} <def:poly> {{ <var:M> = <nat:1> * <var:f> ^ <nat:11> + <nat:1> * <var:f> ^ <nat:10> + <nat:3> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:9> + <nat:1> * <var:f> ^ <nat:8> + <nat:3> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:10> + <nat:1> * <var:f> ^ <nat:9> + <nat:3> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:11> + <nat:1> * <var:f> ^ <nat:10> + <nat:3> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 