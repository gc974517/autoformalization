\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:2> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:F> ; <var:v2> := <nat:4> ; <var:v2> := <var:v2> * <var:F> ; <var:v2> := <var:v2> * <var:F> ; <var:v3> := <nat:2> ; <var:v3> := <var:v3> * <var:F> ; <var:v3> := <var:v3> * <var:F> ; <var:v3> := <var:v3> * <var:F> ; <var:e> := <var:v3> ; <var:e> := <var:e> + <var:v2> ; <var:e> := <var:e> + <var:v1> ; <var:e> := <var:e> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assuming ( for any natural numbers $ <var:B> $ ) $ <var:F> = <var:B> $ before evaluating this code segment , it must be that $ <var:e> = <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:2> $ when code segment is done . \end{theorem} \begin{proof} The way to prove correctness for this program can be accomplished with usual Hoare logic . Looking at the subsequent statement seen in our set of instructions , we see the variable assignmet code \verb | <var:v0> := <nat:2> ; | . This takes the precondition $ \{ <var:F> = <var:B> \} $ toward the condition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \} $ . Advancing to the next step , we have the variable binding line \verb | <var:v1> := <nat:3> ; | . This moves the precondition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \} $ to $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \} $ . This is shown to be logically sound using the assignment inference rule obtained from typical Hoare logic . Advancing to the proceeding command found in our set of commands , the variable binding command assigning $ <var:v1> * <var:F> $ as $ <var:v1>$ . This forwards the precondition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \} $ to $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \} $ . Focusing on the upcoming statement found in the code segment , the code \verb | <var:v2> := <nat:4> ; | . This redefines $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \} $ as the condition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \} $ . This is ensured through the assignment scheme in typical Hoare logic . Moving on to the next bit of code found in our list of commands , we have the variable update command letting $ <var:v2> * <var:F> $ into $ <var:v2>$ . This line transfers $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \} $ toward the condition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> \} $ . Keeping momentum , the binding command yielding $ <var:v2> * <var:F> $ to $ <var:v2>$ . This transfers $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> \} $ toward the condition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \} $ . After , we have the assignment line binding $ <nat:2> $ toward $ <var:v3>$ . This transfers the condition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \} $ as $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:v3> = <nat:2> \} $ . This is known to be sound through the assignment scheme obtained from standard Hoare logic . Moving onward , the command \verb | <var:v3> := <var:v3> * <var:F> ; | . This command takes $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:v3> = <nat:2> \} $ to the condition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:v3> = <nat:2> \cdot <var:B> \} $ . This is rigorously given using the assignment law given by usual Hoare reasoning . Advancing , the variable binding code \verb | <var:v3> := <var:v3> * <var:F> ; | . This advances the condition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:v3> = <nat:2> \cdot <var:B> \} $ into $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:v3> = <nat:2> \cdot <var:B> ^ <nat:2> \} $ . This is deduced by the assignment law found in usual Hoare reasoning . Moving on , we see the variable binding code \verb | <var:v3> := <var:v3> * <var:F> ; | . This redefines $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:v3> = <nat:2> \cdot <var:B> ^ <nat:2> \} $ toward the postcondition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:v3> = <nat:2> \cdot <var:B> ^ <nat:3> \} $ . Considering the following bit of code contained in the series of commands , we have the variable update line \verb | <var:e> := <var:v3> ; | . This code moves the precondition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:v3> = <nat:2> \cdot <var:B> ^ <nat:3> \} $ into the postcondition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:e> = <nat:2> \cdot <var:B> ^ <nat:3> \} $ . Focusing on the subsequent line of code found in our series of instructions , we have the variable assignmet statement assigning $ <var:e> + <var:v2> $ toward $ <var:e>$ . This statement transfers $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:v2> = <nat:4> \cdot <var:B> ^ <nat:2> \land <var:e> = <nat:2> \cdot <var:B> ^ <nat:3> \} $ to $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:e> = <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> \} $ . This is sound with the assignment rule defined by typical Hoare reasoning . Moving onward , we have the variable update line \verb | <var:e> := <var:e> + <var:v1> ; | . This forwards $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:v1> = <nat:3> \cdot <var:B> \land <var:e> = <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> \} $ into the postcondition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:e> = <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> \} $ . Taking another step toward the subsequent line of code contained in our set of commands , the assignment code \verb | <var:e> := <var:e> + <var:v0> | . This transfers the condition $ \{ <var:F> = <var:B> \land <var:v0> = <nat:2> \land <var:e> = <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> \} $ as the condition $ \{ <var:F> = <var:B> \land <var:e> = <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v0> := <nat:2> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:F> ; <var:v2> := <nat:4> ; <var:v2> := <var:v2> * <var:F> ; <var:v2> := <var:v2> * <var:F> ; <var:v3> := <nat:2> ; <var:v3> := <var:v3> * <var:F> ; <var:v3> := <var:v3> * <var:F> ; <var:v3> := <var:v3> * <var:F> ; <var:e> := <var:v3> ; <var:e> := <var:e> + <var:v2> ; <var:e> := <var:e> + <var:v1> ; <var:e> := <var:e> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:F> = <var:B> }} <def:poly> {{ <var:e> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:v2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:v2> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:v2> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:v2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:v3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:v2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:v3> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:v2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:v3> = <nat:2> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:v2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:v3> = <nat:2> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:v2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:e> = <nat:2> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:3> * <var:B> /\ <var:e> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:v0> = <nat:2> /\ <var:e> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:e> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 