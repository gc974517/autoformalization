\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:Z> ; <var:S2> := <nat:6> ; <var:S2> := <var:S2> * <var:Z> ; <var:S2> := <var:S2> * <var:Z> ; <var:l> := <var:S2> ; <var:l> := <var:l> + <var:S1> ; <var:l> := <var:l> + <var:S0> \end{verbatim} Allow it to hold that $ <var:Z> = <var:U> $ ahead of the evaluation of this list of instructions , then we have $ <var:l> = <nat:6> \times <var:U> ^ <nat:2> + <nat:5> \times <var:U> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the segment of code is given using typical Hoare logic . Moving forward to the next step , \begin{verbatim} { <var:Z> = <var:U> } <var:S0> := <nat:8> { <var:Z> = <var:U> \land <var:S0> = <nat:8> } { <var:Z> = <var:U> \land <var:S0> = <nat:8> } <var:S1> := <nat:5> { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> } { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> } <var:S1> := <var:S1> * <var:Z> { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:U> } { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:U> } <var:S2> := <nat:6> { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:U> \land <var:S2> = <nat:6> } \end{verbatim} This is known to be sound by the variable assignmet rule found in typical Hoare techniques . Advancing to the upcoming commands contained in our code , we see \begin{verbatim} { <var:Z> = <var:U> } <var:S0> := <nat:8> { <var:Z> = <var:U> \land <var:S0> = <nat:8> } { <var:Z> = <var:U> \land <var:S0> = <nat:8> } <var:S1> := <nat:5> { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> } { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> } <var:S1> := <var:S1> * <var:Z> { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:U> } { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:U> } <var:S2> := <nat:6> { <var:Z> = <var:U> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:U> \land <var:S2> = <nat:6> } \end{verbatim} This is sound by the variable assignmet law defined in usual Hoare techniques . Immediately after , \begin{verbatim} { <var:Z> = <var:U> } <var:S0> := <nat:8> { <var:Z> = <var:U> \land <var:S0> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Z> = <var:U> }} <var:S0> := <nat:8> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:Z> ; <var:S2> := <nat:6> ; <var:S2> := <var:S2> * <var:Z> ; <var:S2> := <var:S2> * <var:Z> ; <var:l> := <var:S2> ; <var:l> := <var:l> + <var:S1> ; <var:l> := <var:l> + <var:S0> {{ <var:l> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:U> /\ <var:S2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:U> /\ <var:S2> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:U> /\ <var:S2> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:U> /\ <var:l> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:S0> = <nat:8> /\ <var:l> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:l> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 