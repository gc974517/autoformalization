\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k> := <nat:2> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <nat:1> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Allowing given any positive integers $ <var:J> $ it to be that $ <var:h> = <var:J> $ before interpreting our set of instructions then we have $ <var:k> = <nat:2> \times <var:J> ^ <nat:11> + <nat:4> \times <var:J> ^ <nat:10> + <nat:1> \times <var:J> ^ <nat:9> + <nat:3> \times <var:J> ^ <nat:8> + <nat:3> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:6> + <nat:3> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the set of commands can be accomplished using usual Hoare logic . Advancing on , \begin{eqnarray} \{ <var:h> = <var:J> \} \, <var:k> := <nat:2> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \} \, <var:k> := <nat:4> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> + <nat:4> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> + <nat:4> \} \, <var:k> := <nat:1> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:1> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:1> \} \, <var:k> := <nat:3> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:3> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:3> \} \, <var:k> := <nat:3> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:3> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:3> \} \, <var:k> := <nat:4> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:5> + <nat:4> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:4> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:5> + <nat:4> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:4> \} \, <var:k> := <nat:3> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:6> + <nat:4> \cdot <var:J> ^ <nat:5> + <nat:1> \cdot <var:J> ^ <nat:4> + <nat:3> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:3> \} \end{eqnarray} This is guaranteed through the variable assignmet rule from Hoare techniques . Moving forward to the proceeding commands contained in our code segment , we have \begin{eqnarray} \{ <var:h> = <var:J> \} \, <var:k> := <nat:2> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \} \, <var:k> := <nat:4> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> + <nat:4> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> + <nat:4> \} \, <var:k> := <nat:1> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:1> \} \\ \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:1> \} \, <var:k> := <nat:3> + <var:k> * <var:h> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:3> \} \end{eqnarray} Focusing on the following command found in our series of instructions , we have \begin{eqnarray} \{ <var:h> = <var:J> \} \, <var:k> := <nat:2> \, \{ <var:h> = <var:J> \land <var:k> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:2> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <nat:1> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:h> = <var:J> }} <def:poly> {{ <var:k> = <nat:2> * <var:J> ^ <nat:11> + <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:k> = <nat:2> * <var:J> ^ <nat:11> + <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 