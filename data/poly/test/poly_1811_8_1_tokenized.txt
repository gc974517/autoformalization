\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:J1> := <var:A> ; <var:J2> := <var:J1> * <var:A> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:1> ; <var:J2> := <var:J2> * <nat:1> ; <var:G> := <var:J2> <var:G> := <var:G> + <var:J1> <var:G> := <var:G> + <var:J0> \end{verbatim} Assume $ <var:A> = <var:C> $ before evaluating our list of commands it must be that we see $ <var:G> = <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be shown through typical Hoare logic . Observing the proceeding statements seen in the set of commands , we have \verb | { <var:A> = <var:C> } <var:J1> := <var:A> { <var:A> = <var:C> \land <var:J1> = <var:C> } | , \verb | { <var:A> = <var:C> \land <var:J1> = <var:C> } <var:J2> := <var:J1> * <var:A> { <var:A> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> } | and \verb | { <var:A> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> } <var:J0> := <nat:4> { <var:A> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> \land <var:J0> = <nat:4> } | . This is guaranteed through the environment update rule given in typical Hoare techniques . Paying attention to the following bits of codecontained in the set of commands , \verb | { <var:A> = <var:C> } <var:J1> := <var:A> { <var:A> = <var:C> \land <var:J1> = <var:C> } | , \verb | { <var:A> = <var:C> \land <var:J1> = <var:C> } <var:J2> := <var:J1> * <var:A> { <var:A> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> } | , \verb | { <var:A> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> } <var:J0> := <nat:4> { <var:A> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> \land <var:J0> = <nat:4> } | , \verb | { <var:A> = <var:C> \land <var:J1> = <var:C> \land <var:J2> = <var:C> ^ <nat:2> \land <var:J0> = <nat:4> } <var:J1> := <var:J1> * <nat:1> { <var:A> = <var:C> \land <var:J1> = <nat:1> * <var:C> \land <var:J2> = <var:C> ^ <nat:2> \land <var:J0> = <nat:4> } | and \verb | { <var:A> = <var:C> \land <var:J1> = <nat:1> * <var:C> \land <var:J2> = <var:C> ^ <nat:2> \land <var:J0> = <nat:4> } <var:J2> := <var:J2> * <nat:1> { <var:A> = <var:C> \land <var:J1> = <nat:1> * <var:C> \land <var:J2> = <nat:1> * <var:C> ^ <nat:2> \land <var:J0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:A> = <var:C> }} <var:J1> := <var:A> ; <var:J2> := <var:J1> * <var:A> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:1> ; <var:J2> := <var:J2> * <nat:1> ; <var:G> := <var:J2> <var:G> := <var:G> + <var:J1> <var:G> := <var:G> + <var:J0> {{ <var:G> = <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:J1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:J1> = <var:C> /\ <var:J2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:J1> = <var:C> /\ <var:J2> = <var:C> ^ <nat:2> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:J1> = <nat:1> * <var:C> /\ <var:J2> = <var:C> ^ <nat:2> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:J1> = <nat:1> * <var:C> /\ <var:J2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:J1> = <nat:1> * <var:C> /\ <var:J0> = <nat:4> /\ <var:G> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:J0> = <nat:4> /\ <var:G> = <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:G> = <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 