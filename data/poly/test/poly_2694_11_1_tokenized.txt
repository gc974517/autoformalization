\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:b> ; <var:R2> := <var:R1> * <var:b> ; <var:R3> := <var:R2> * <var:b> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:4> ; <var:r> := <var:R3> <var:r> := <var:r> + <var:R2> <var:r> := <var:r> + <var:R1> <var:r> := <var:r> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Assume $ <var:b> = <var:Z> $ ahead of executing this segment of code , it follows that $ <var:r> = <nat:4> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> $ when series of commands terminates . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:b> = <var:Z> \} \\ <var:R1> := <var:b> ; \\ \{ <var:b> = <var:Z> \land <var:R1> = <var:Z> \} \\ <var:R2> := <var:R1> * <var:b> ; \\ \{ <var:b> = <var:Z> \land <var:R1> = <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:b> ; \\ \{ <var:b> = <var:Z> \land <var:R1> = <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:b> = <var:Z> \land <var:R1> = <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R1> := <var:R1> * <nat:2> ; \\ \{ <var:b> = <var:Z> \land <var:R1> = <nat:2> \times <var:Z> \land <var:R2> = <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R2> := <var:R2> * <nat:5> ; \\ \{ <var:b> = <var:Z> \land <var:R1> = <nat:2> \times <var:Z> \land <var:R2> = <nat:5> \times <var:Z> ^ <nat:2> \land <var:R3> = <var:Z> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:R3> := <var:R3> * <nat:4> ; \\ \{ <var:b> = <var:Z> \land <var:R1> = <nat:2> \times <var:Z> \land <var:R2> = <nat:5> \times <var:Z> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:Z> ^ <nat:3> \land <var:R0> = <nat:2> \} \\ <var:r> := <var:R3> \\ \{ <var:b> = <var:Z> \land <var:R1> = <nat:2> \times <var:Z> \land <var:R2> = <nat:5> \times <var:Z> ^ <nat:2> \land <var:R0> = <nat:2> \land <var:r> = <nat:4> \times <var:Z> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:R2> \\ \{ <var:b> = <var:Z> \land <var:R1> = <nat:2> \times <var:Z> \land <var:R0> = <nat:2> \land <var:r> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:5> \times <var:Z> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:R1> \\ \{ <var:b> = <var:Z> \land <var:R0> = <nat:2> \land <var:r> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:5> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> \} \\ <var:r> := <var:r> + <var:R0> \\ \{ <var:b> = <var:Z> \land <var:r> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:5> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:b> ; <var:R2> := <var:R1> * <var:b> ; <var:R3> := <var:R2> * <var:b> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:4> ; <var:r> := <var:R3> <var:r> := <var:r> + <var:R2> <var:r> := <var:r> + <var:R1> <var:r> := <var:r> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:b> = <var:Z> }} <def:poly> {{ <var:r> = <nat:4> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <nat:2> * <var:Z> /\ <var:R2> = <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <nat:2> * <var:Z> /\ <var:R2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:R3> = <var:Z> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <nat:2> * <var:Z> /\ <var:R2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:Z> ^ <nat:3> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <nat:2> * <var:Z> /\ <var:R2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:R0> = <nat:2> /\ <var:r> = <nat:4> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R1> = <nat:2> * <var:Z> /\ <var:R0> = <nat:2> /\ <var:r> = <nat:4> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:R0> = <nat:2> /\ <var:r> = <nat:4> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:r> = <nat:4> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 