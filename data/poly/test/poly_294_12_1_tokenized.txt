\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:b> ; <var:l2> := <var:l1> * <var:b> ; <var:l3> := <var:l2> * <var:b> ; <var:l4> := <var:l3> * <var:b> ; <var:l0> := <nat:3> ; <var:l2> := <var:l2> * <nat:1> ; <var:l3> := <var:l3> * <nat:1> ; <var:l4> := <var:l4> * <nat:1> ; <var:d> := <var:l4> <var:d> := <var:d> + <var:l3> <var:d> := <var:d> + <var:l2> <var:d> := <var:d> + <var:l0> \end{verbatim} Given ( given some positive coefficients $ <var:Q> $ ) $ <var:b> = <var:Q> $ before the execution of the set of commands , it holds that we see $ <var:d> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code can be shown with Hoare techniques . Shifting focus toward the upcoming steps contained in the list of commands , \verb | { <var:b> = <var:Q> } <var:l1> := <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> } | , \verb | { <var:b> = <var:Q> \land <var:l1> = <var:Q> } <var:l2> := <var:l1> * <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> } | and \verb | { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> } <var:l3> := <var:l2> * <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> \land <var:l3> = <var:Q> ^ <nat:3> } | . Considering the upcoming line of code found in the set of commands , we have \verb | { <var:b> = <var:Q> } <var:l1> := <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> } | . This is ensured using the environment update inference rule obtained from typical Hoare reasoning . Honing in on the upcoming statements found in our list of instructions , \verb | { <var:b> = <var:Q> } <var:l1> := <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> } | , \verb | { <var:b> = <var:Q> \land <var:l1> = <var:Q> } <var:l2> := <var:l1> * <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> } | , \verb | { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> } <var:l3> := <var:l2> * <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> \land <var:l3> = <var:Q> ^ <nat:3> } | and \verb | { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> \land <var:l3> = <var:Q> ^ <nat:3> } <var:l4> := <var:l3> * <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> \land <var:l3> = <var:Q> ^ <nat:3> \land <var:l4> = <var:Q> ^ <nat:4> } | . This is sound through the variable binding law in standard Hoare logic . Moving forward to the next step , \verb | { <var:b> = <var:Q> } <var:l1> := <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> } | and \verb | { <var:b> = <var:Q> \land <var:l1> = <var:Q> } <var:l2> := <var:l1> * <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> \land <var:l2> = <var:Q> ^ <nat:2> } | . This is rigorously given with the variable update scheme defined by typical Hoare techniques . Moving onward , we have \verb | { <var:b> = <var:Q> } <var:l1> := <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> } | . Moving on , \verb | { <var:b> = <var:Q> } <var:l1> := <var:b> { <var:b> = <var:Q> \land <var:l1> = <var:Q> } | . This is shown using the assignment rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <var:l4> : string := " <var:l4> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:b> = <var:Q> }} <var:l1> := <var:b> ; <var:l2> := <var:l1> * <var:b> ; <var:l3> := <var:l2> * <var:b> ; <var:l4> := <var:l3> * <var:b> ; <var:l0> := <nat:3> ; <var:l2> := <var:l2> * <nat:1> ; <var:l3> := <var:l3> * <nat:1> ; <var:l4> := <var:l4> * <nat:1> ; <var:d> := <var:l4> <var:d> := <var:d> + <var:l3> <var:d> := <var:d> + <var:l2> <var:d> := <var:d> + <var:l0> {{ <var:d> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <var:Q> ^ <nat:2> /\ <var:l3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <var:Q> ^ <nat:2> /\ <var:l3> = <var:Q> ^ <nat:3> /\ <var:l4> = <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <var:Q> ^ <nat:2> /\ <var:l3> = <var:Q> ^ <nat:3> /\ <var:l4> = <var:Q> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:l3> = <var:Q> ^ <nat:3> /\ <var:l4> = <var:Q> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:Q> ^ <nat:3> /\ <var:l4> = <var:Q> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:Q> ^ <nat:3> /\ <var:l4> = <nat:1> * <var:Q> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:Q> ^ <nat:3> /\ <var:l0> = <nat:3> /\ <var:d> = <nat:1> * <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:l0> = <nat:3> /\ <var:d> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:l1> = <var:Q> /\ <var:l0> = <nat:3> /\ <var:d> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:d> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 