\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:b> ; <var:y> := <var:z1> ; <var:y> := <var:y> + <var:z0> \end{verbatim} Allowing it to be that $ <var:b> = <var:F> $ ahead of running the segment of code it holds that $ <var:y> = <nat:2> * <var:F> + <nat:4> $ once code has finished . \end{theorem} \begin{proof} Using typical Hoare logic results in : \begin{eqnarray} \{ <var:b> = <var:F> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:b> = <var:F> \land <var:z0> = <nat:4> \} \\ <var:z1> := <nat:2> ; \\ \{ <var:b> = <var:F> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \} \\ <var:z1> := <var:z1> * <var:b> ; \\ \{ <var:b> = <var:F> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \cdot <var:F> \} \\ <var:y> := <var:z1> ; \\ \{ <var:b> = <var:F> \land <var:z0> = <nat:4> \land <var:y> = <nat:2> \cdot <var:F> \} \\ <var:y> := <var:y> + <var:z0> \\ \{ <var:b> = <var:F> \land <var:y> = <nat:2> \cdot <var:F> + <nat:4> \} \end{eqnarray} Hence , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:b> = <var:F> }} <var:z0> := <nat:4> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:b> ; <var:y> := <var:z1> ; <var:y> := <var:y> + <var:z0> {{ <var:y> = <nat:2> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:z0> = <nat:4> /\ <var:y> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:y> = <nat:2> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 