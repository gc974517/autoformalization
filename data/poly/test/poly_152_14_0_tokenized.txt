\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:q> ; <var:S2> := <nat:9> ; <var:S2> := <var:S2> * <var:q> ; <var:S2> := <var:S2> * <var:q> ; <var:S3> := <nat:3> ; <var:S3> := <var:S3> * <var:q> ; <var:S3> := <var:S3> * <var:q> ; <var:S3> := <var:S3> * <var:q> ; <var:n> := <var:S3> ; <var:n> := <var:n> + <var:S2> ; <var:n> := <var:n> + <var:S1> ; <var:n> := <var:n> + <var:S0> \end{verbatim} Assume taking integers $ <var:G> $ it to hold that $ <var:q> = <var:G> $ prior to the execution of our program it must be that we have $ <var:n> = <nat:3> \cdot <var:G> ^ <nat:3> + <nat:9> \cdot <var:G> ^ <nat:2> + <nat:7> \cdot <var:G> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of commands can be given through usual Hoare techniques . Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:q> = <var:G> \} & <var:S0> := <nat:4> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \} & <var:S1> := <nat:7> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \} & <var:S1> := <var:S1> * <var:q> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \} & <var:S2> := <nat:9> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \} & <var:S2> := <var:S2> * <var:q> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> \} & <var:S2> := <var:S2> * <var:q> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \} & <var:S3> := <nat:3> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:S3> = <nat:3> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:S3> = <nat:3> \} & <var:S3> := <var:S3> * <var:q> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:S3> = <nat:3> \times <var:G> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:S3> = <nat:3> \times <var:G> \} & <var:S3> := <var:S3> * <var:q> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:S3> = <nat:3> \times <var:G> ^ <nat:2> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:S3> = <nat:3> \times <var:G> ^ <nat:2> \} & <var:S3> := <var:S3> * <var:q> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:S3> = <nat:3> \times <var:G> ^ <nat:3> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:S3> = <nat:3> \times <var:G> ^ <nat:3> \} & <var:n> := <var:S3> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:n> = <nat:3> \times <var:G> ^ <nat:3> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:S2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:n> = <nat:3> \times <var:G> ^ <nat:3> \} & <var:n> := <var:n> + <var:S2> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:n> = <nat:3> \times <var:G> ^ <nat:3> + <nat:9> \times <var:G> ^ <nat:2> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \times <var:G> \land <var:n> = <nat:3> \times <var:G> ^ <nat:3> + <nat:9> \times <var:G> ^ <nat:2> \} & <var:n> := <var:n> + <var:S1> & \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:n> = <nat:3> \times <var:G> ^ <nat:3> + <nat:9> \times <var:G> ^ <nat:2> + <nat:7> \times <var:G> \} \\ \{ <var:q> = <var:G> \land <var:S0> = <nat:4> \land <var:n> = <nat:3> \times <var:G> ^ <nat:3> + <nat:9> \times <var:G> ^ <nat:2> + <nat:7> \times <var:G> \} & <var:n> := <var:n> + <var:S0& \{ <var:q> = <var:G> \land <var:n> = <nat:3> \times <var:G> ^ <nat:3> + <nat:9> \times <var:G> ^ <nat:2> + <nat:7> \times <var:G> + <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:q> = <var:G> }} <var:S0> := <nat:4> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:q> ; <var:S2> := <nat:9> ; <var:S2> := <var:S2> * <var:q> ; <var:S2> := <var:S2> * <var:q> ; <var:S3> := <nat:3> ; <var:S3> := <var:S3> * <var:q> ; <var:S3> := <var:S3> * <var:q> ; <var:S3> := <var:S3> * <var:q> ; <var:n> := <var:S3> ; <var:n> := <var:n> + <var:S2> ; <var:n> := <var:n> + <var:S1> ; <var:n> := <var:n> + <var:S0> {{ <var:n> = <nat:3> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:S2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:S2> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:S2> = <nat:9> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:S2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:S3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:S2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:S3> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:S2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:S3> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:S2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:S3> = <nat:3> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:S2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:n> = <nat:3> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:G> /\ <var:n> = <nat:3> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:S0> = <nat:4> /\ <var:n> = <nat:3> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:n> = <nat:3> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 