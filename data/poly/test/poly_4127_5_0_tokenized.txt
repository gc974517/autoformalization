\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:m> ; <var:r> := <var:S1> ; <var:r> := <var:r> + <var:S0> \end{verbatim} Allow it to hold that $ <var:m> = <var:M> $ ( for every whole numbers $ <var:M> $ ) ahead of the evaluation of this list of commands , it holds that $ <var:r> = <nat:1> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our list of instructions can be shown by typical Hoare techniques . Taking another step toward the upcoming piece of code contained in the code , we have the binding line \verb | <var:S0> := <nat:4> ; | . This advances the precondition $ \{ <var:m> = <var:M> \} $ toward the postcondition $ \{ <var:m> = <var:M> \land <var:S0> = <nat:4> \} $ . This is rigorously given with the assignment rule found in Hoare logic . Stepping through , the variable binding command binding $ <nat:1> $ toward $ <var:S1>$ . This command takes the condition $ \{ <var:m> = <var:M> \land <var:S0> = <nat:4> \} $ to $ \{ <var:m> = <var:M> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \} $ . This is guaranteed using the assignment law of standard Hoare reasoning . Moving onward , we see the assignment line \verb | <var:S1> := <var:S1> * <var:m> ; | . This statement advances $ \{ <var:m> = <var:M> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \} $ to the condition $ \{ <var:m> = <var:M> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:M> \} $ . This is shown to be logically sound by the assignment rule found in standard Hoare logic . Advancing to the next step , we see the environment update code \verb | <var:r> := <var:S1> ; | . This command moves $ \{ <var:m> = <var:M> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:M> \} $ toward the condition $ \{ <var:m> = <var:M> \land <var:S0> = <nat:4> \land <var:r> = <nat:1> \cdot <var:M> \} $ . This is shown to be logically sound through the assignment scheme found in Hoare reasoning . Next , the variable assignmet command letting $ <var:r> + <var:S0$ as $ <var:r>$ . This redefines the condition $ \{ <var:m> = <var:M> \land <var:S0> = <nat:4> \land <var:r> = <nat:1> \cdot <var:M> \} $ to $ \{ <var:m> = <var:M> \land <var:r> = <nat:1> \cdot <var:M> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:m> = <var:M> }} <var:S0> := <nat:4> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:m> ; <var:r> := <var:S1> ; <var:r> := <var:r> + <var:S0> {{ <var:r> = <nat:1> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:S0> = <nat:4> /\ <var:r> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:r> = <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 