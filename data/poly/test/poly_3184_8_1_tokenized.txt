\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:f> ; <var:W2> := <var:W1> * <var:f> ; <var:W0> := <nat:6> ; <var:W1> := <var:W1> * <nat:9> ; <var:W2> := <var:W2> * <nat:1> ; <var:G> := <var:W2> <var:G> := <var:G> + <var:W1> <var:G> := <var:G> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Allow for any $ <var:s> \in \mathbb{N} $ that we have $ <var:f> = <var:s> $ ahead of the execution of our set of commands , it follows that we have $ <var:G> = <nat:1> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> + <nat:6> $ . \end{theorem} \begin{proof} The proof of our code segment is evident by usual Hoare logic . Moving forward to the subsequent steps contained in our code , we see \verb | { <var:f> = <var:s> } <var:W1> := <var:f> { <var:f> = <var:s> \land <var:W1> = <var:s> } | and \verb | { <var:f> = <var:s> \land <var:W1> = <var:s> } <var:W2> := <var:W1> * <var:f> { <var:f> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> } | . This is sound by the variable binding law from typical Hoare logic . Moving on , \verb | { <var:f> = <var:s> } <var:W1> := <var:f> { <var:f> = <var:s> \land <var:W1> = <var:s> } | , \verb | { <var:f> = <var:s> \land <var:W1> = <var:s> } <var:W2> := <var:W1> * <var:f> { <var:f> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> } | , \verb | { <var:f> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> } <var:W0> := <nat:6> { <var:f> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W0> = <nat:6> } | , \verb | { <var:f> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W0> = <nat:6> } <var:W1> := <var:W1> * <nat:9> { <var:f> = <var:s> \land <var:W1> = <nat:9> * <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W0> = <nat:6> } | and \verb | { <var:f> = <var:s> \land <var:W1> = <nat:9> * <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W0> = <nat:6> } <var:W2> := <var:W2> * <nat:1> { <var:f> = <var:s> \land <var:W1> = <nat:9> * <var:s> \land <var:W2> = <nat:1> * <var:s> ^ <nat:2> \land <var:W0> = <nat:6> } | . This is sound using the environment update inference rule in typical Hoare logic . Immediately following , we see \verb | { <var:f> = <var:s> } <var:W1> := <var:f> { <var:f> = <var:s> \land <var:W1> = <var:s> } | . This is sound with the variable assignmet inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W1> := <var:f> ; <var:W2> := <var:W1> * <var:f> ; <var:W0> := <nat:6> ; <var:W1> := <var:W1> * <nat:9> ; <var:W2> := <var:W2> * <nat:1> ; <var:G> := <var:W2> <var:G> := <var:G> + <var:W1> <var:G> := <var:G> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:f> = <var:s> }} <def:poly> {{ <var:G> = <nat:1> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:W1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:W1> = <var:s> /\ <var:W2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:W1> = <var:s> /\ <var:W2> = <var:s> ^ <nat:2> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:W1> = <nat:9> * <var:s> /\ <var:W2> = <var:s> ^ <nat:2> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:W1> = <nat:9> * <var:s> /\ <var:W2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:W1> = <nat:9> * <var:s> /\ <var:W0> = <nat:6> /\ <var:G> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:W0> = <nat:6> /\ <var:G> = <nat:1> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:G> = <nat:1> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 