\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:F> := <nat:3> ; <var:F> := <nat:3> + <var:F> * <var:P> ; <var:F> := <nat:4> + <var:F> * <var:P> ; <var:F> := <nat:2> + <var:F> * <var:P> ; <var:F> := <nat:1> + <var:F> * <var:P> ; <var:F> := <var:F> * <var:P> ; <var:F> := <nat:3> + <var:F> * <var:P> ; <var:F> := <nat:2> + <var:F> * <var:P> ; <var:F> := <var:F> * <var:P> ; <var:F> := <nat:2> + <var:F> * <var:P> ; <var:F> := <nat:2> + <var:F> * <var:P> ; <var:F> := <var:F> * <var:P> ; <var:F> := <nat:3> + <var:F> * <var:P> ; <var:F> := <nat:3> + <var:F> * <var:P> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Allow $ <var:P> = <var:v> $ ahead of the evaluation of this series of commands , then we have $ <var:F> = <nat:3> * <var:v> ^ <nat:13> + <nat:3> * <var:v> ^ <nat:12> + <nat:4> * <var:v> ^ <nat:11> + <nat:2> * <var:v> ^ <nat:10> + <nat:1> * <var:v> ^ <nat:9> + <nat:3> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:3> $ once segment of code has executed . \end{theorem} \begin{proof} The argument for our list of instructions is evident by typical Hoare reasoning . Observing the subsequent pieces of code contained in our program , \verb | { <var:P> = <var:v> } <var:F> := <nat:3> { <var:P> = <var:v> \land <var:F> = <nat:3> } | , \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> } <var:F> := <nat:3> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> + <nat:3> } | , \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> + <nat:3> } <var:F> := <nat:4> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> } | , \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> } <var:F> := <nat:2> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> } | and \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> } <var:F> := <nat:1> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> } | . Going to the next step , we see \verb | { <var:P> = <var:v> } <var:F> := <nat:3> { <var:P> = <var:v> \land <var:F> = <nat:3> } | . Keeping momentum , we see \verb | { <var:P> = <var:v> } <var:F> := <nat:3> { <var:P> = <var:v> \land <var:F> = <nat:3> } | . Stepping forward , we see \verb | { <var:P> = <var:v> } <var:F> := <nat:3> { <var:P> = <var:v> \land <var:F> = <nat:3> } | , \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> } <var:F> := <nat:3> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> + <nat:3> } | , \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> + <nat:3> } <var:F> := <nat:4> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> } | and \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> } <var:F> := <nat:2> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> } | . Focusing on the following pieces of code found in the series of instructions , we have \verb | { <var:P> = <var:v> } <var:F> := <nat:3> { <var:P> = <var:v> \land <var:F> = <nat:3> } | , \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> } <var:F> := <nat:3> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> + <nat:3> } | and \verb | { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> + <nat:3> } <var:F> := <nat:4> + <var:F> * <var:P> { <var:P> = <var:v> \land <var:F> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> } | . This is shown to be logically sound with the variable binding law defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:3> ; <var:F> := <nat:3> + <var:F> * <var:P> ; <var:F> := <nat:4> + <var:F> * <var:P> ; <var:F> := <nat:2> + <var:F> * <var:P> ; <var:F> := <nat:1> + <var:F> * <var:P> ; <var:F> := <var:F> * <var:P> ; <var:F> := <nat:3> + <var:F> * <var:P> ; <var:F> := <nat:2> + <var:F> * <var:P> ; <var:F> := <var:F> * <var:P> ; <var:F> := <nat:2> + <var:F> * <var:P> ; <var:F> := <nat:2> + <var:F> * <var:P> ; <var:F> := <var:F> * <var:P> ; <var:F> := <nat:3> + <var:F> * <var:P> ; <var:F> := <nat:3> + <var:F> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:P> = <var:v> }} <def:poly> {{ <var:F> = <nat:3> * <var:v> ^ <nat:13> + <nat:3> * <var:v> ^ <nat:12> + <nat:4> * <var:v> ^ <nat:11> + <nat:2> * <var:v> ^ <nat:10> + <nat:1> * <var:v> ^ <nat:9> + <nat:3> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:9> + <nat:3> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:10> + <nat:3> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:9> + <nat:2> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:12> + <nat:3> * <var:v> ^ <nat:11> + <nat:4> * <var:v> ^ <nat:10> + <nat:2> * <var:v> ^ <nat:9> + <nat:1> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:F> = <nat:3> * <var:v> ^ <nat:13> + <nat:3> * <var:v> ^ <nat:12> + <nat:4> * <var:v> ^ <nat:11> + <nat:2> * <var:v> ^ <nat:10> + <nat:1> * <var:v> ^ <nat:9> + <nat:3> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 