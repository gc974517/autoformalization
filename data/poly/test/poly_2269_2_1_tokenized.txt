\begin{document} \begin{theorem} Consider a series of instructions as \begin{verbatim} <var:A0> := <nat:4> ; <var:h> := <var:A0> \end{verbatim} Allowing , for any positive integers $ <var:m> $ , it to hold that $ <var:S> = <var:m> $ prior to interpreting our code segment , it follows that we see $ <var:h> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be accomplished using Hoare logic . Moving on to the upcoming line found in the series of instructions , we have the variable update line letting $ <nat:4> $ toward $ <var:A0>$ . This command moves the precondition $ \{ <var:S> = <var:m> \} $ into the condition $ \{ <var:S> = <var:m> \land <var:A0> = <nat:4> \} $ . This is guaranteed using the assignment rule in usual Hoare reasoning . Jumping to the proceeding statement seen in the series of commands , we have the variable binding statement \verb | <var:h> := <var:A0> | . This statement takes $ \{ <var:S> = <var:m> \land <var:A0> = <nat:4> \} $ as the condition $ \{ <var:S> = <var:m> \land <var:h> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:S> = <var:m> }} <var:A0> := <nat:4> ; <var:h> := <var:A0> {{ <var:h> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:m> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:m> /\ <var:h> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 