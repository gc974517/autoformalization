\begin{document} \begin{theorem} We define the following program : \begin{verbatim} <var:c> := <nat:1> ; <var:c> := <nat:3> + <var:c> * <var:B> ; <var:c> := <nat:3> + <var:c> * <var:B> ; <var:c> := <var:c> * <var:B> ; <var:c> := <nat:2> + <var:c> * <var:B> ; <var:c> := <nat:2> + <var:c> * <var:B> ; <var:c> := <nat:2> + <var:c> * <var:B> \end{verbatim} Assuming ( for all positive numbers $ <var:i> $ ) that $ <var:B> = <var:i> $ prior to the evaluation of this list of instructions , it follows that $ <var:c> = <nat:1> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> $ after code segment is done . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands can be done by typical Hoare logic . Moving onward , the binding code \verb | <var:c> := <nat:1> ; | . This advances $ \{ <var:B> = <var:i> \} $ as $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> \} $ . Focusing on the next step in the code segment , the binding statement binding $ <nat:3> + <var:c> * <var:B> $ as $ <var:c>$ . This takes $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> \} $ to the postcondition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> + <nat:3> \} $ . This is ensured with the assignment rule in usual Hoare logic . Paying attention to the next piece of code found in our code segment , we have the environment update command yielding $ <nat:3> + <var:c> * <var:B> $ to $ <var:c>$ . This redefines the precondition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> + <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> \} $ . This is guaranteed using the assignment rule obtained from typical Hoare logic . Considering the next line of code contained in our series of commands , we have the variable assignmet line defining $ <var:c> * <var:B> $ toward $ <var:c>$ . This advances the precondition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> \} $ to the condition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + \} $ . Considering the next piece of code in the series of instructions , we see the variable update command letting $ <nat:2> + <var:c> * <var:B> $ toward $ <var:c>$ . This code transfers $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + \} $ as the condition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> \} $ . Going forward , we see the variable binding statement \verb | <var:c> := <nat:2> + <var:c> * <var:B> ; | . This command moves the precondition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> \} $ into the postcondition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> + <nat:2> \} $ . Keeping momentum , the line defining $ <nat:2> + <var:c> * <var:B$ to $ <var:c>$ . This line forwards the precondition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> + <nat:2> \} $ to the postcondition $ \{ <var:B> = <var:i> \land <var:c> = <nat:1> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:B> = <var:i> }} <var:c> := <nat:1> ; <var:c> := <nat:3> + <var:c> * <var:B> ; <var:c> := <nat:3> + <var:c> * <var:B> ; <var:c> := <var:c> * <var:B> ; <var:c> := <nat:2> + <var:c> * <var:B> ; <var:c> := <nat:2> + <var:c> * <var:B> ; <var:c> := <nat:2> + <var:c> * <var:B> {{ <var:c> = <nat:1> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:c> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:c> = <nat:1> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:c> = <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:c> = <nat:1> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:c> = <nat:1> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:c> = <nat:1> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:c> = <nat:1> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 