\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <nat:1> + <var:H> * <var:S> ; <var:H> := <nat:2> + <var:H> * <var:S> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Allow that $ <var:S> = <var:l> $ --- given every positive coefficients $ <var:l> $ --- prior to running the list of instructions it follows that $ <var:H> = <nat:1> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:2> $ once series of instructions exits . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:S> = <var:l> \} \\ <var:H> := <nat:1> ; \\ \{ <var:S> = <var:l> \land <var:H> = <nat:1> \} \\ <var:H> := <nat:1> + <var:H> * <var:S> ; \\ \{ <var:S> = <var:l> \land <var:H> = <nat:1> * <var:l> + <nat:1> \} \\ <var:H> := <nat:2> + <var:H> * <var:S> \\ \{ <var:S> = <var:l> \land <var:H> = <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> \} \end{eqnarray} Thusly , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:1> ; <var:H> := <nat:1> + <var:H> * <var:S> ; <var:H> := <nat:2> + <var:H> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:S> = <var:l> }} <def:poly> {{ <var:H> = <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:H> = <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:H> = <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 