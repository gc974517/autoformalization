\begin{document} \begin{theorem} Take the following program in \emph{Imp} : \begin{verbatim} <var:j> := <nat:4> ; <var:j> := <nat:3> + <var:j> * <var:F> ; <var:j> := <nat:1> + <var:j> * <var:F> ; <var:j> := <nat:2> + <var:j> * <var:F> ; <var:j> := <nat:4> + <var:j> * <var:F> ; <var:j> := <nat:2> + <var:j> * <var:F> ; <var:j> := <var:j> * <var:F> ; <var:j> := <nat:4> + <var:j> * <var:F> ; <var:j> := <nat:4> + <var:j> * <var:F> \end{verbatim} Allow that $ <var:F> = <var:Y> $ before evaluating the list of instructions then we see $ <var:j> = <nat:4> \times <var:Y> ^ <nat:8> + <nat:3> \times <var:Y> ^ <nat:7> + <nat:1> \times <var:Y> ^ <nat:6> + <nat:2> \times <var:Y> ^ <nat:5> + <nat:4> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> + <nat:4> $ after set of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:Y> \} \\ <var:j> := <nat:4> ; \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \} \\ <var:j> := <nat:3> + <var:j> * <var:F> ; \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \times <var:Y> + <nat:3> \} \\ <var:j> := <nat:1> + <var:j> * <var:F> ; \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \times <var:Y> ^ <nat:2> + <nat:3> \times <var:Y> + <nat:1> \} \\ <var:j> := <nat:2> + <var:j> * <var:F> ; \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \times <var:Y> ^ <nat:3> + <nat:3> \times <var:Y> ^ <nat:2> + <nat:1> \times <var:Y> + <nat:2> \} \\ <var:j> := <nat:4> + <var:j> * <var:F> ; \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> ^ <nat:2> + <nat:2> \times <var:Y> + <nat:4> \} \\ <var:j> := <nat:2> + <var:j> * <var:F> ; \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \times <var:Y> ^ <nat:5> + <nat:3> \times <var:Y> ^ <nat:4> + <nat:1> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:2> \} \\ <var:j> := <var:j> * <var:F> ; \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \times <var:Y> ^ <nat:6> + <nat:3> \times <var:Y> ^ <nat:5> + <nat:1> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> ^ <nat:2> + <nat:2> \times <var:Y> + \} \\ <var:j> := <nat:4> + <var:j> * <var:F> ; \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \times <var:Y> ^ <nat:7> + <nat:3> \times <var:Y> ^ <nat:6> + <nat:1> \times <var:Y> ^ <nat:5> + <nat:2> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:4> \} \\ <var:j> := <nat:4> + <var:j> * <var:F> \\ \{ <var:F> = <var:Y> \land <var:j> = <nat:4> \times <var:Y> ^ <nat:8> + <nat:3> \times <var:Y> ^ <nat:7> + <nat:1> \times <var:Y> ^ <nat:6> + <nat:2> \times <var:Y> ^ <nat:5> + <nat:4> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> + <nat:4> \} \end{eqnarray} The application of usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:F> = <var:Y> }} <var:j> := <nat:4> ; <var:j> := <nat:3> + <var:j> * <var:F> ; <var:j> := <nat:1> + <var:j> * <var:F> ; <var:j> := <nat:2> + <var:j> * <var:F> ; <var:j> := <nat:4> + <var:j> * <var:F> ; <var:j> := <nat:2> + <var:j> * <var:F> ; <var:j> := <var:j> * <var:F> ; <var:j> := <nat:4> + <var:j> * <var:F> ; <var:j> := <nat:4> + <var:j> * <var:F> {{ <var:j> = <nat:4> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:j> = <nat:4> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 