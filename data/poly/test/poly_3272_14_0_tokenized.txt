\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:5> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:q> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:q> ; <var:f2> := <var:f2> * <var:q> ; <var:f3> := <nat:5> ; <var:f3> := <var:f3> * <var:q> ; <var:f3> := <var:f3> * <var:q> ; <var:f3> := <var:f3> * <var:q> ; <var:G> := <var:f3> ; <var:G> := <var:G> + <var:f2> ; <var:G> := <var:G> + <var:f1> ; <var:G> := <var:G> + <var:f0> \end{verbatim} Allowing that $ <var:q> = <var:m> $ ahead of the execution of this series of instructions , it follows that we see $ <var:G> = <nat:5> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:5> $ once program terminates . \end{theorem} \begin{proof} Applying usual Hoare reasoning returns : \begin{eqnarray} \{ <var:q> = <var:m> \} \\ <var:f0> := <nat:5> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \} \\ <var:f1> := <nat:3> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \} \\ <var:f1> := <var:f1> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \} \\ <var:f2> := <nat:6> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:f2> = <nat:6> \} \\ <var:f2> := <var:f2> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:f2> = <nat:6> \cdot <var:m> \} \\ <var:f2> := <var:f2> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:f2> = <nat:6> \cdot <var:m> ^ <nat:2> \} \\ <var:f3> := <nat:5> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:f2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:f3> = <nat:5> \} \\ <var:f3> := <var:f3> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:f2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:f3> = <nat:5> \cdot <var:m> \} \\ <var:f3> := <var:f3> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:f2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:f3> = <nat:5> \cdot <var:m> ^ <nat:2> \} \\ <var:f3> := <var:f3> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:f2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:f3> = <nat:5> \cdot <var:m> ^ <nat:3> \} \\ <var:G> := <var:f3> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:f2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:G> = <nat:5> \cdot <var:m> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:f2> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:f1> = <nat:3> \cdot <var:m> \land <var:G> = <nat:5> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> \} \end{eqnarray} Advancing running our list of instructions returns : \begin{eqnarray} <var:G> := <var:G> + <var:f1> ; \\ \{ <var:q> = <var:m> \land <var:f0> = <nat:5> \land <var:G> = <nat:5> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> \} \\ <var:G> := <var:G> + <var:f0> \\ \{ <var:q> = <var:m> \land <var:G> = <nat:5> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:5> \} \end{eqnarray} Thusly , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:q> = <var:m> }} <var:f0> := <nat:5> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:q> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:q> ; <var:f2> := <var:f2> * <var:q> ; <var:f3> := <nat:5> ; <var:f3> := <var:f3> * <var:q> ; <var:f3> := <var:f3> * <var:q> ; <var:f3> := <var:f3> * <var:q> ; <var:G> := <var:f3> ; <var:G> := <var:G> + <var:f2> ; <var:G> := <var:G> + <var:f1> ; <var:G> := <var:G> + <var:f0> {{ <var:G> = <nat:5> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:f2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:f2> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:f2> = <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:f2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:f3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:f2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:f3> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:f2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:f3> = <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:f2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:f3> = <nat:5> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:f2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:G> = <nat:5> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:3> * <var:m> /\ <var:G> = <nat:5> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:f0> = <nat:5> /\ <var:G> = <nat:5> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:G> = <nat:5> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 