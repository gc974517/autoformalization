\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:5> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:Z> ; <var:f> := <var:p1> ; <var:f> := <var:f> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:Z> = <var:h> $ prior to running the code , it holds that $ <var:f> = <nat:5> \times <var:h> + <nat:5> $ after program is done . \end{theorem} \begin{proof} The proof of the segment of code can be done with Hoare logic . Considering the following statements seen in our series of commands , \verb | { <var:Z> = <var:h> } <var:p0> := <nat:5> { <var:Z> = <var:h> \land <var:p0> = <nat:5> } | , \verb | { <var:Z> = <var:h> \land <var:p0> = <nat:5> } <var:p1> := <nat:5> { <var:Z> = <var:h> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> } | , \verb | { <var:Z> = <var:h> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> } <var:p1> := <var:p1> * <var:Z> { <var:Z> = <var:h> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \cdot <var:h> } | and \verb | { <var:Z> = <var:h> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \cdot <var:h> } <var:f> := <var:p1> { <var:Z> = <var:h> \land <var:p0> = <nat:5> \land <var:f> = <nat:5> \cdot <var:h> } | . Jumping to the subsequent step found in our code , \verb | { <var:Z> = <var:h> } <var:p0> := <nat:5> { <var:Z> = <var:h> \land <var:p0> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:5> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:Z> ; <var:f> := <var:p1> ; <var:f> := <var:f> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Z> = <var:h> }} <def:poly> {{ <var:f> = <nat:5> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:p0> = <nat:5> /\ <var:f> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:f> = <nat:5> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 