\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:S> := <nat:2> ; <var:S> := <nat:3> + <var:S> * <var:w> ; <var:S> := <nat:4> + <var:S> * <var:w> ; <var:S> := <nat:4> + <var:S> * <var:w> ; <var:S> := <nat:3> + <var:S> * <var:w> ; <var:S> := <var:S> * <var:w> ; <var:S> := <nat:4> + <var:S> * <var:w> ; <var:S> := <var:S> * <var:w> ; <var:S> := <nat:3> + <var:S> * <var:w> ; <var:S> := <nat:4> + <var:S> * <var:w> ; <var:S> := <var:S> * <var:w> ; <var:S> := <var:S> * <var:w> ; <var:S> := <nat:2> + <var:S> * <var:w> ; <var:S> := <nat:2> + <var:S> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Given it to hold that $ <var:w> = <var:W> $ before the execution of the segment of code , it holds that we see $ <var:S> = <nat:2> \cdot <var:W> ^ <nat:13> + <nat:3> \cdot <var:W> ^ <nat:12> + <nat:4> \cdot <var:W> ^ <nat:11> + <nat:4> \cdot <var:W> ^ <nat:10> + <nat:3> \cdot <var:W> ^ <nat:9> + <nat:4> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:4> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> + <nat:2> $ once list of instructions executes . \end{theorem} \begin{proof} Note that this decorated set of commands . \begin{eqnarray} \{ <var:w> = <var:W> \} \\ <var:S> := <nat:2> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> \} \\ <var:S> := <nat:3> + <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> + <nat:3> \} \\ <var:S> := <nat:4> + <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:4> \} \\ <var:S> := <nat:4> + <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> \} \\ <var:S> := <nat:3> + <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> \} \\ <var:S> := <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + \} \\ <var:S> := <nat:4> + <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> \} \\ <var:S> := <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> + \} \\ <var:S> := <nat:3> + <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> \} \\ <var:S> := <nat:4> + <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:4> \} \\ <var:S> := <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + \} \\ <var:S> := <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + \} \\ <var:S> := <nat:2> + <var:S> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:12> + <nat:3> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:2> \} \\ <var:S> := <nat:2> + <var:S> * <var:w> \\ \{ <var:w> = <var:W> \land <var:S> = <nat:2> * <var:W> ^ <nat:13> + <nat:3> * <var:W> ^ <nat:12> + <nat:4> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> + <nat:2> \} \end{eqnarray} Applying Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:2> ; <var:S> := <nat:3> + <var:S> * <var:w> ; <var:S> := <nat:4> + <var:S> * <var:w> ; <var:S> := <nat:4> + <var:S> * <var:w> ; <var:S> := <nat:3> + <var:S> * <var:w> ; <var:S> := <var:S> * <var:w> ; <var:S> := <nat:4> + <var:S> * <var:w> ; <var:S> := <var:S> * <var:w> ; <var:S> := <nat:3> + <var:S> * <var:w> ; <var:S> := <nat:4> + <var:S> * <var:w> ; <var:S> := <var:S> * <var:w> ; <var:S> := <var:S> * <var:w> ; <var:S> := <nat:2> + <var:S> * <var:w> ; <var:S> := <nat:2> + <var:S> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:w> = <var:W> }} <def:poly> {{ <var:S> = <nat:2> * <var:W> ^ <nat:13> + <nat:3> * <var:W> ^ <nat:12> + <nat:4> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:12> + <nat:3> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S> = <nat:2> * <var:W> ^ <nat:13> + <nat:3> * <var:W> ^ <nat:12> + <nat:4> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 