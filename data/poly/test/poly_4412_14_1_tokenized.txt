\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:C1> := <var:a> ; <var:C2> := <var:C1> * <var:a> ; <var:C3> := <var:C2> * <var:a> ; <var:C4> := <var:C3> * <var:a> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:5> ; <var:C3> := <var:C3> * <nat:1> ; <var:C4> := <var:C4> * <nat:6> ; <var:g> := <var:C4> <var:g> := <var:g> + <var:C3> <var:g> := <var:g> + <var:C2> <var:g> := <var:g> + <var:C1> <var:g> := <var:g> + <var:C0> \end{verbatim} Assuming $ <var:a> = <var:i> $ prior to the evaluation of the series of instructions it holds that we see $ <var:g> = <nat:6> \times <var:i> ^ <nat:4> + <nat:1> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> + <nat:6> \times <var:i> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:i> \} \\ <var:C1> := <var:a> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <var:i> \} \\ <var:C2> := <var:C1> * <var:a> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <var:i> \land <var:C2> = <var:i> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:a> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <var:i> \land <var:C2> = <var:i> ^ <nat:2> \land <var:C3> = <var:i> ^ <nat:3> \} \\ <var:C4> := <var:C3> * <var:a> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <var:i> \land <var:C2> = <var:i> ^ <nat:2> \land <var:C3> = <var:i> ^ <nat:3> \land <var:C4> = <var:i> ^ <nat:4> \} \\ <var:C0> := <nat:8> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <var:i> \land <var:C2> = <var:i> ^ <nat:2> \land <var:C3> = <var:i> ^ <nat:3> \land <var:C4> = <var:i> ^ <nat:4> \land <var:C0> = <nat:8> \} \\ <var:C1> := <var:C1> * <nat:6> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <nat:6> \times <var:i> \land <var:C2> = <var:i> ^ <nat:2> \land <var:C3> = <var:i> ^ <nat:3> \land <var:C4> = <var:i> ^ <nat:4> \land <var:C0> = <nat:8> \} \end{eqnarray} Allowing interpreting the list of commands results in : \begin{eqnarray} <var:C2> := <var:C2> * <nat:5> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <nat:6> \times <var:i> \land <var:C2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:C3> = <var:i> ^ <nat:3> \land <var:C4> = <var:i> ^ <nat:4> \land <var:C0> = <nat:8> \} \\ <var:C3> := <var:C3> * <nat:1> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <nat:6> \times <var:i> \land <var:C2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:C3> = <nat:1> \times <var:i> ^ <nat:3> \land <var:C4> = <var:i> ^ <nat:4> \land <var:C0> = <nat:8> \} \\ <var:C4> := <var:C4> * <nat:6> ; \\ \{ <var:a> = <var:i> \land <var:C1> = <nat:6> \times <var:i> \land <var:C2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:C3> = <nat:1> \times <var:i> ^ <nat:3> \land <var:C4> = <nat:6> \times <var:i> ^ <nat:4> \land <var:C0> = <nat:8> \} \\ <var:g> := <var:C4> \\ \{ <var:a> = <var:i> \land <var:C1> = <nat:6> \times <var:i> \land <var:C2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:C3> = <nat:1> \times <var:i> ^ <nat:3> \land <var:C0> = <nat:8> \land <var:g> = <nat:6> \times <var:i> ^ <nat:4> \} \\ <var:g> := <var:g> + <var:C3> \\ \{ <var:a> = <var:i> \land <var:C1> = <nat:6> \times <var:i> \land <var:C2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:C0> = <nat:8> \land <var:g> = <nat:6> \times <var:i> ^ <nat:4> + <nat:1> \times <var:i> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:C2> \\ \{ <var:a> = <var:i> \land <var:C1> = <nat:6> \times <var:i> \land <var:C0> = <nat:8> \land <var:g> = <nat:6> \times <var:i> ^ <nat:4> + <nat:1> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:C1> \\ \{ <var:a> = <var:i> \land <var:C0> = <nat:8> \land <var:g> = <nat:6> \times <var:i> ^ <nat:4> + <nat:1> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> + <nat:6> \times <var:i> \} \\ <var:g> := <var:g> + <var:C0> \\ \{ <var:a> = <var:i> \land <var:g> = <nat:6> \times <var:i> ^ <nat:4> + <nat:1> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> + <nat:6> \times <var:i> + <nat:8> \} \end{eqnarray} The application of typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <var:C4> : string := " <var:C4> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:a> = <var:i> }} <var:C1> := <var:a> ; <var:C2> := <var:C1> * <var:a> ; <var:C3> := <var:C2> * <var:a> ; <var:C4> := <var:C3> * <var:a> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:5> ; <var:C3> := <var:C3> * <nat:1> ; <var:C4> := <var:C4> * <nat:6> ; <var:g> := <var:C4> <var:g> := <var:g> + <var:C3> <var:g> := <var:g> + <var:C2> <var:g> := <var:g> + <var:C1> <var:g> := <var:g> + <var:C0> {{ <var:g> = <nat:6> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <var:i> /\ <var:C2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <var:i> /\ <var:C2> = <var:i> ^ <nat:2> /\ <var:C3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <var:i> /\ <var:C2> = <var:i> ^ <nat:2> /\ <var:C3> = <var:i> ^ <nat:3> /\ <var:C4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <var:i> /\ <var:C2> = <var:i> ^ <nat:2> /\ <var:C3> = <var:i> ^ <nat:3> /\ <var:C4> = <var:i> ^ <nat:4> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <nat:6> * <var:i> /\ <var:C2> = <var:i> ^ <nat:2> /\ <var:C3> = <var:i> ^ <nat:3> /\ <var:C4> = <var:i> ^ <nat:4> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <nat:6> * <var:i> /\ <var:C2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:C3> = <var:i> ^ <nat:3> /\ <var:C4> = <var:i> ^ <nat:4> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <nat:6> * <var:i> /\ <var:C2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:i> ^ <nat:3> /\ <var:C4> = <var:i> ^ <nat:4> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <nat:6> * <var:i> /\ <var:C2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:i> ^ <nat:3> /\ <var:C4> = <nat:6> * <var:i> ^ <nat:4> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <nat:6> * <var:i> /\ <var:C2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:i> ^ <nat:3> /\ <var:C0> = <nat:8> /\ <var:g> = <nat:6> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <nat:6> * <var:i> /\ <var:C2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:C0> = <nat:8> /\ <var:g> = <nat:6> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C1> = <nat:6> * <var:i> /\ <var:C0> = <nat:8> /\ <var:g> = <nat:6> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:C0> = <nat:8> /\ <var:g> = <nat:6> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:g> = <nat:6> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 