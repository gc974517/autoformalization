\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:h> ; <var:k2> := <var:k1> * <var:h> ; <var:k3> := <var:k2> * <var:h> ; <var:k4> := <var:k3> * <var:h> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:6> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:5> ; <var:k4> := <var:k4> * <nat:3> ; <var:w> := <var:k4> <var:w> := <var:w> + <var:k3> <var:w> := <var:w> + <var:k2> <var:w> := <var:w> + <var:k1> <var:w> := <var:w> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Allowing , given natural numbers $ <var:q> $ , that we have $ <var:h> = <var:q> $ prior to executing this set of instructions it must be that we have $ <var:w> = <nat:3> \cdot <var:q> ^ <nat:4> + <nat:5> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:q> \} \\ <var:k1> := <var:h> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <var:q> \} \\ <var:k2> := <var:k1> * <var:h> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <var:q> \land <var:k2> = <var:q> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:h> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <var:q> \land <var:k2> = <var:q> ^ <nat:2> \land <var:k3> = <var:q> ^ <nat:3> \} \\ <var:k4> := <var:k3> * <var:h> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <var:q> \land <var:k2> = <var:q> ^ <nat:2> \land <var:k3> = <var:q> ^ <nat:3> \land <var:k4> = <var:q> ^ <nat:4> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <var:q> \land <var:k2> = <var:q> ^ <nat:2> \land <var:k3> = <var:q> ^ <nat:3> \land <var:k4> = <var:q> ^ <nat:4> \land <var:k0> = <nat:3> \} \\ <var:k1> := <var:k1> * <nat:6> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k2> = <var:q> ^ <nat:2> \land <var:k3> = <var:q> ^ <nat:3> \land <var:k4> = <var:q> ^ <nat:4> \land <var:k0> = <nat:3> \} \\ <var:k2> := <var:k2> * <nat:3> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k2> = <nat:3> * <var:q> ^ <nat:2> \land <var:k3> = <var:q> ^ <nat:3> \land <var:k4> = <var:q> ^ <nat:4> \land <var:k0> = <nat:3> \} \\ <var:k3> := <var:k3> * <nat:5> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k2> = <nat:3> * <var:q> ^ <nat:2> \land <var:k3> = <nat:5> * <var:q> ^ <nat:3> \land <var:k4> = <var:q> ^ <nat:4> \land <var:k0> = <nat:3> \} \\ <var:k4> := <var:k4> * <nat:3> ; \\ \{ <var:h> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k2> = <nat:3> * <var:q> ^ <nat:2> \land <var:k3> = <nat:5> * <var:q> ^ <nat:3> \land <var:k4> = <nat:3> * <var:q> ^ <nat:4> \land <var:k0> = <nat:3> \} \\ <var:w> := <var:k4> \\ \{ <var:h> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k2> = <nat:3> * <var:q> ^ <nat:2> \land <var:k3> = <nat:5> * <var:q> ^ <nat:3> \land <var:k0> = <nat:3> \land <var:w> = <nat:3> * <var:q> ^ <nat:4> \} \\ <var:w> := <var:w> + <var:k3> \\ \{ <var:h> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k2> = <nat:3> * <var:q> ^ <nat:2> \land <var:k0> = <nat:3> \land <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:k2> \\ \{ <var:h> = <var:q> \land <var:k1> = <nat:6> * <var:q> \land <var:k0> = <nat:3> \land <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:k1> \\ \{ <var:h> = <var:q> \land <var:k0> = <nat:3> \land <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> \} \\ <var:w> := <var:w> + <var:k0> \\ \{ <var:h> = <var:q> \land <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Definition <def:poly> := <var:k1> := <var:h> ; <var:k2> := <var:k1> * <var:h> ; <var:k3> := <var:k2> * <var:h> ; <var:k4> := <var:k3> * <var:h> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:6> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:5> ; <var:k4> := <var:k4> * <nat:3> ; <var:w> := <var:k4> <var:w> := <var:w> + <var:k3> <var:w> := <var:w> + <var:k2> <var:w> := <var:w> + <var:k1> <var:w> := <var:w> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:h> = <var:q> }} <def:poly> {{ <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <var:q> /\ <var:k2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <var:q> /\ <var:k2> = <var:q> ^ <nat:2> /\ <var:k3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <var:q> /\ <var:k2> = <var:q> ^ <nat:2> /\ <var:k3> = <var:q> ^ <nat:3> /\ <var:k4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <var:q> /\ <var:k2> = <var:q> ^ <nat:2> /\ <var:k3> = <var:q> ^ <nat:3> /\ <var:k4> = <var:q> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <nat:6> * <var:q> /\ <var:k2> = <var:q> ^ <nat:2> /\ <var:k3> = <var:q> ^ <nat:3> /\ <var:k4> = <var:q> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <nat:6> * <var:q> /\ <var:k2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:k3> = <var:q> ^ <nat:3> /\ <var:k4> = <var:q> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <nat:6> * <var:q> /\ <var:k2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:q> ^ <nat:3> /\ <var:k4> = <var:q> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <nat:6> * <var:q> /\ <var:k2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:q> ^ <nat:3> /\ <var:k4> = <nat:3> * <var:q> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <nat:6> * <var:q> /\ <var:k2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:q> ^ <nat:3> /\ <var:k0> = <nat:3> /\ <var:w> = <nat:3> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <nat:6> * <var:q> /\ <var:k2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:k0> = <nat:3> /\ <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k1> = <nat:6> * <var:q> /\ <var:k0> = <nat:3> /\ <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:k0> = <nat:3> /\ <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:q> /\ <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 