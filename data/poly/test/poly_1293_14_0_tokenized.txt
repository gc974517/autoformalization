\begin{document} \begin{theorem} We define a code in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:8> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:x> ; <var:f2> := <nat:9> ; <var:f2> := <var:f2> * <var:x> ; <var:f2> := <var:f2> * <var:x> ; <var:f3> := <nat:3> ; <var:f3> := <var:f3> * <var:x> ; <var:f3> := <var:f3> * <var:x> ; <var:f3> := <var:f3> * <var:x> ; <var:D> := <var:f3> ; <var:D> := <var:D> + <var:f2> ; <var:D> := <var:D> + <var:f1> ; <var:D> := <var:D> + <var:f0> \end{verbatim} Assume that we have $ <var:x> = <var:m> $ prior to running our set of commands it holds that $ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:8> $ when list of instructions has exited . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:x> = <var:m> \} \\ <var:f0> := <nat:8> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \} \\ <var:f1> := <nat:2> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \} \\ <var:f1> := <var:f1> * <var:x> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \} \\ <var:f2> := <nat:9> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:f2> = <nat:9> \} \end{eqnarray} Continuing running the list of instructions gives : \begin{eqnarray} <var:f2> := <var:f2> * <var:x> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:f2> = <nat:9> \cdot <var:m> \} \\ <var:f2> := <var:f2> * <var:x> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:f2> = <nat:9> \cdot <var:m> ^ <nat:2> \} \\ <var:f3> := <nat:3> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:f2> = <nat:9> \cdot <var:m> ^ <nat:2> \land <var:f3> = <nat:3> \} \\ <var:f3> := <var:f3> * <var:x> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:f2> = <nat:9> \cdot <var:m> ^ <nat:2> \land <var:f3> = <nat:3> \cdot <var:m> \} \\ <var:f3> := <var:f3> * <var:x> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:f2> = <nat:9> \cdot <var:m> ^ <nat:2> \land <var:f3> = <nat:3> \cdot <var:m> ^ <nat:2> \} \\ <var:f3> := <var:f3> * <var:x> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:f2> = <nat:9> \cdot <var:m> ^ <nat:2> \land <var:f3> = <nat:3> \cdot <var:m> ^ <nat:3> \} \\ <var:D> := <var:f3> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:f2> = <nat:9> \cdot <var:m> ^ <nat:2> \land <var:D> = <nat:3> \cdot <var:m> ^ <nat:3> \} \\ <var:D> := <var:D> + <var:f2> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:f1> = <nat:2> \cdot <var:m> \land <var:D> = <nat:3> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:f1> ; \\ \{ <var:x> = <var:m> \land <var:f0> = <nat:8> \land <var:D> = <nat:3> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> \} \\ <var:D> := <var:D> + <var:f0> \\ \{ <var:x> = <var:m> \land <var:D> = <nat:3> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:8> \} \end{eqnarray} Therefore , this program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:x> = <var:m> }} <var:f0> := <nat:8> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:x> ; <var:f2> := <nat:9> ; <var:f2> := <var:f2> * <var:x> ; <var:f2> := <var:f2> * <var:x> ; <var:f3> := <nat:3> ; <var:f3> := <var:f3> * <var:x> ; <var:f3> := <var:f3> * <var:x> ; <var:f3> := <var:f3> * <var:x> ; <var:D> := <var:f3> ; <var:D> := <var:D> + <var:f2> ; <var:D> := <var:D> + <var:f1> ; <var:D> := <var:D> + <var:f0> {{ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:f2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:f2> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:f2> = <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:f2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:f3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:f2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:f2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:f2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:f2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:D> = <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:2> * <var:m> /\ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:f0> = <nat:8> /\ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:D> = <nat:3> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 