\begin{document} \begin{theorem} Let the following program as follows \begin{verbatim} <var:S1> := <var:y> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:3> ; <var:W> := <var:S1> <var:W> := <var:W> + <var:S0> \end{verbatim} Assuming it to be that $ <var:y> = <var:n> $ ( for all positive coefficients $ <var:n> $ ) ahead of the execution of this list of instructions , it holds that we have $ <var:W> = <nat:3> * <var:n> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:n> \} \\ <var:S1> := <var:y> ; \\ \{ <var:y> = <var:n> \land <var:S1> = <var:n> \} \\ <var:S0> := <nat:2> ; \\ \{ <var:y> = <var:n> \land <var:S1> = <var:n> \land <var:S0> = <nat:2> \} \\ <var:S1> := <var:S1> * <nat:3> ; \\ \{ <var:y> = <var:n> \land <var:S1> = <nat:3> \times <var:n> \land <var:S0> = <nat:2> \} \\ <var:W> := <var:S1> \\ \{ <var:y> = <var:n> \land <var:S0> = <nat:2> \land <var:W> = <nat:3> \times <var:n> \} \\ <var:W> := <var:W> + <var:S0> \\ \{ <var:y> = <var:n> \land <var:W> = <nat:3> \times <var:n> + <nat:2> \} \end{eqnarray} Applying standard Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:y> = <var:n> }} <var:S1> := <var:y> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:3> ; <var:W> := <var:S1> <var:W> := <var:W> + <var:S0> {{ <var:W> = <nat:3> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:S1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:S1> = <var:n> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:S1> = <nat:3> * <var:n> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:S0> = <nat:2> /\ <var:W> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:W> = <nat:3> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 