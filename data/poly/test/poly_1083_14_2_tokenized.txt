\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:e> := <nat:1> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <var:e> * <var:R> ; <var:e> := <nat:2> + <var:e> * <var:R> ; <var:e> := <nat:2> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> ; <var:e> := <nat:1> + <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> \end{verbatim} Allow it to be that $ <var:R> = <var:c> $ before evaluating this segment of code it holds that we see $ <var:e> = <nat:1> \times <var:c> ^ <nat:13> + <nat:3> \times <var:c> ^ <nat:12> + <nat:4> \times <var:c> ^ <nat:11> + <nat:3> \times <var:c> ^ <nat:10> + <nat:3> \times <var:c> ^ <nat:9> + <nat:2> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:6> + <nat:4> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:4> $ when program terminates . \end{theorem} \begin{proof} The way to prove correctness for the segment of code can be accomplished using typical Hoare logic . Considering the following piece of code in our list of instructions , we have the assignment code \verb | <var:e> := <nat:1> ; | . This statement takes the precondition $ \{ <var:R> = <var:c> \} $ toward the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \} $ . This is deduced using the assignment inference rule defined by standard Hoare logic . Moving forward , the variable update command assigning $ <nat:3> + <var:e> * <var:R> $ toward $ <var:e>$ . This advances the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \} $ to the postcondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> + <nat:3> \} $ . This is sound using the assignment rule in typical Hoare techniques . Taking a look at the upcoming piece of code in our segment of code , the environment update command assigning $ <nat:4> + <var:e> * <var:R> $ as $ <var:e>$ . This advances the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> + <nat:3> \} $ to $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:4> \} $ . This is guaranteed using the assignment scheme defined by Hoare logic . Moving on , we have the environment update line \verb | <var:e> := <nat:3> + <var:e> * <var:R> ; | . This advances the precondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:4> \} $ to the postcondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:3> \} $ . This is deduced by the assignment inference rule given in Hoare logic . Focusing on the proceeding bit of code in our series of commands , the assignment code \verb | <var:e> := <nat:3> + <var:e> * <var:R> ; | . This line redefines the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:3> \} $ as $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:3> \} $ . Now , we have the variable assignmet statement yielding $ <var:e> * <var:R> $ to $ <var:e>$ . This code forwards the precondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:3> \} $ to the postcondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + \} $ . Looking at the proceeding statement seen in our list of commands , the variable binding line yielding $ <nat:2> + <var:e> * <var:R> $ to $ <var:e>$ . This advances the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + \} $ toward the postcondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:2> \} $ . Moving forward , the variable update line \verb | <var:e> := <nat:2> + <var:e> * <var:R> ; | . This line forwards the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:2> \} $ to $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:7> + <nat:3> \times <var:c> ^ <nat:6> + <nat:4> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> + <nat:2> \} $ . This is known to be sound using the assignment scheme of standard Hoare logic . Advancing , the command letting $ <nat:4> + <var:e> * <var:R> $ to $ <var:e>$ . This transfers $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:7> + <nat:3> \times <var:c> ^ <nat:6> + <nat:4> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> + <nat:2> \} $ into the postcondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:8> + <nat:3> \times <var:c> ^ <nat:7> + <nat:4> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:4> \} $ . This is given through the assignment scheme defined by Hoare logic . Moving onward , we see the binding statement yielding $ <nat:1> + <var:e> * <var:R> $ toward $ <var:e>$ . This line takes $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:8> + <nat:3> \times <var:c> ^ <nat:7> + <nat:4> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:4> \} $ into the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:9> + <nat:3> \times <var:c> ^ <nat:8> + <nat:4> \times <var:c> ^ <nat:7> + <nat:3> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:1> \} $ . This is deduced through the assignment rule obtained from Hoare reasoning . Moving on to the next step , we see the environment update statement \verb | <var:e> := <nat:3> + <var:e> * <var:R> ; | . This statement transfers $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:9> + <nat:3> \times <var:c> ^ <nat:8> + <nat:4> \times <var:c> ^ <nat:7> + <nat:3> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:1> \} $ into the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:10> + <nat:3> \times <var:c> ^ <nat:9> + <nat:4> \times <var:c> ^ <nat:8> + <nat:3> \times <var:c> ^ <nat:7> + <nat:3> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:3> \} $ . This is rigorously given using the assignment inference rule defined in standard Hoare logic . Honing in on the subsequent bit of code in the code , we see the line \verb | <var:e> := <var:e> * <var:R> ; | . This line forwards $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:10> + <nat:3> \times <var:c> ^ <nat:9> + <nat:4> \times <var:c> ^ <nat:8> + <nat:3> \times <var:c> ^ <nat:7> + <nat:3> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:11> + <nat:3> \times <var:c> ^ <nat:10> + <nat:4> \times <var:c> ^ <nat:9> + <nat:3> \times <var:c> ^ <nat:8> + <nat:3> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + \} $ . After , we have the variable assignmet statement \verb | <var:e> := <nat:3> + <var:e> * <var:R> ; | . This transfers the precondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:11> + <nat:3> \times <var:c> ^ <nat:10> + <nat:4> \times <var:c> ^ <nat:9> + <nat:3> \times <var:c> ^ <nat:8> + <nat:3> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + \} $ into the postcondition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:12> + <nat:3> \times <var:c> ^ <nat:11> + <nat:4> \times <var:c> ^ <nat:10> + <nat:3> \times <var:c> ^ <nat:9> + <nat:3> \times <var:c> ^ <nat:8> + <nat:2> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:3> \} $ . Immediately after , we see the environment update statement giving $ <nat:4> + <var:e> * <var:R$ toward $ <var:e>$ . This statement advances $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:12> + <nat:3> \times <var:c> ^ <nat:11> + <nat:4> \times <var:c> ^ <nat:10> + <nat:3> \times <var:c> ^ <nat:9> + <nat:3> \times <var:c> ^ <nat:8> + <nat:2> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:3> \} $ toward the condition $ \{ <var:R> = <var:c> \land <var:e> = <nat:1> \times <var:c> ^ <nat:13> + <nat:3> \times <var:c> ^ <nat:12> + <nat:4> \times <var:c> ^ <nat:11> + <nat:3> \times <var:c> ^ <nat:10> + <nat:3> \times <var:c> ^ <nat:9> + <nat:2> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:6> + <nat:4> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:R> = <var:c> }} <var:e> := <nat:1> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <var:e> * <var:R> ; <var:e> := <nat:2> + <var:e> * <var:R> ; <var:e> := <nat:2> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> ; <var:e> := <nat:1> + <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <var:e> * <var:R> ; <var:e> := <nat:3> + <var:e> * <var:R> ; <var:e> := <nat:4> + <var:e> * <var:R> {{ <var:e> = <nat:1> * <var:c> ^ <nat:13> + <nat:3> * <var:c> ^ <nat:12> + <nat:4> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:4> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:12> + <nat:3> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:e> = <nat:1> * <var:c> ^ <nat:13> + <nat:3> * <var:c> ^ <nat:12> + <nat:4> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 