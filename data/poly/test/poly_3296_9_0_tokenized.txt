\begin{document} \begin{theorem} Define a program in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:g> ; <var:J2> := <nat:1> ; <var:J2> := <var:J2> * <var:g> ; <var:J2> := <var:J2> * <var:g> ; <var:G> := <var:J2> ; <var:G> := <var:G> + <var:J1> ; <var:G> := <var:G> + <var:J0> \end{verbatim} Allow $ <var:g> = <var:n> $ prior to interpreting the list of instructions then we see $ <var:G> = <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives : \begin{eqnarray} \{ <var:g> = <var:n> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:g> = <var:n> \land <var:J0> = <nat:6> \} \\ <var:J1> := <nat:1> ; \\ \{ <var:g> = <var:n> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \} \\ <var:J1> := <var:J1> * <var:g> ; \\ \{ <var:g> = <var:n> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \times <var:n> \} \\ <var:J2> := <nat:1> ; \\ \{ <var:g> = <var:n> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \times <var:n> \land <var:J2> = <nat:1> \} \\ <var:J2> := <var:J2> * <var:g> ; \\ \{ <var:g> = <var:n> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \times <var:n> \land <var:J2> = <nat:1> \times <var:n> \} \\ <var:J2> := <var:J2> * <var:g> ; \\ \{ <var:g> = <var:n> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \times <var:n> \land <var:J2> = <nat:1> \times <var:n> ^ <nat:2> \} \\ <var:G> := <var:J2> ; \\ \{ <var:g> = <var:n> \land <var:J0> = <nat:6> \land <var:J1> = <nat:1> \times <var:n> \land <var:G> = <nat:1> \times <var:n> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:J1> ; \\ \{ <var:g> = <var:n> \land <var:J0> = <nat:6> \land <var:G> = <nat:1> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> \} \\ <var:G> := <var:G> + <var:J0> \\ \{ <var:g> = <var:n> \land <var:G> = <nat:1> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:6> \} \end{eqnarray} As a consequence , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:g> = <var:n> }} <var:J0> := <nat:6> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:g> ; <var:J2> := <nat:1> ; <var:J2> := <var:J2> * <var:g> ; <var:J2> := <var:J2> * <var:g> ; <var:G> := <var:J2> ; <var:G> := <var:G> + <var:J1> ; <var:G> := <var:G> + <var:J0> {{ <var:G> = <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:n> /\ <var:J2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:n> /\ <var:J2> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:n> /\ <var:J2> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:1> * <var:n> /\ <var:G> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:J0> = <nat:6> /\ <var:G> = <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:G> = <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 