\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:6> ; <var:i1> := <nat:2> ; <var:i1> := <var:i1> * <var:E> ; <var:i2> := <nat:1> ; <var:i2> := <var:i2> * <var:E> ; <var:i2> := <var:i2> * <var:E> ; <var:i3> := <nat:3> ; <var:i3> := <var:i3> * <var:E> ; <var:i3> := <var:i3> * <var:E> ; <var:i3> := <var:i3> * <var:E> ; <var:K> := <var:i3> ; <var:K> := <var:K> + <var:i2> ; <var:K> := <var:K> + <var:i1> ; <var:K> := <var:K> + <var:i0> \end{verbatim} Given given any $ <var:Q> \in \mathbb{N} $ $ <var:E> = <var:Q> $ before running the series of instructions , it holds that we have $ <var:K> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:6> $ . \end{theorem} \begin{proof} The argument for the set of commands is clear with typical Hoare logic . Immediately after , we have the variable update code \verb | <var:i0> := <nat:6> ; | . This command forwards $ \{ <var:E> = <var:Q> \} $ to $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \} $ . Following , we see the command letting $ <nat:2> $ into $ <var:i1>$ . This line advances the condition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \} $ as $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \} $ . This is given with the assignment inference rule defined by usual Hoare logic . Focusing on the subsequent line contained in the program , the variable binding code giving $ <var:i1> * <var:E> $ as $ <var:i1>$ . This advances $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \} $ toward the postcondition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \} $ . Stepping through , we have the command defining $ <nat:1> $ toward $ <var:i2>$ . This advances $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \} $ toward the condition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \} $ . After , we see the code \verb | <var:i2> := <var:i2> * <var:E> ; | . This advances $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \} $ into $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> \} $ . Moving forward , we have the variable binding code giving $ <var:i2> * <var:E> $ to $ <var:i2>$ . This code forwards the precondition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> \} $ toward the condition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \} $ . This is sound by the assignment law of Hoare techniques . Advancing to the upcoming bit of code in the code segment , we see the statement binding $ <nat:3> $ into $ <var:i3>$ . This moves $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \} $ as $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:i3> = <nat:3> \} $ . Taking another step toward the subsequent piece of code found in the series of instructions , we have the variable assignmet command letting $ <var:i3> * <var:E> $ as $ <var:i3>$ . This redefines $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:i3> = <nat:3> \} $ to $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:Q> \} $ . This is deduced by the assignment law given by Hoare logic . Next , the assignment line \verb | <var:i3> := <var:i3> * <var:E> ; | . This moves $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:Q> \} $ as the postcondition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:Q> ^ <nat:2> \} $ . Moving on , we see the assignment statement letting $ <var:i3> * <var:E> $ as $ <var:i3>$ . This forwards the condition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:Q> ^ <nat:2> \} $ toward $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:Q> ^ <nat:3> \} $ . This is deduced with the assignment inference rule defined by Hoare reasoning . Moving onward , the environment update code defining $ <var:i3> $ as $ <var:K>$ . This moves $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:Q> ^ <nat:3> \} $ into the condition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:K> = <nat:3> \times <var:Q> ^ <nat:3> \} $ . This is ensured using the assignment scheme defined in Hoare techniques . Focusing on the following line of code seen in the set of instructions , the environment update code yielding $ <var:K> + <var:i2> $ into $ <var:K>$ . This moves $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:i2> = <nat:1> \times <var:Q> ^ <nat:2> \land <var:K> = <nat:3> \times <var:Q> ^ <nat:3> \} $ as $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:K> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> \} $ . Focusing on the subsequent line of code contained in the code , we see the assignment line letting $ <var:K> + <var:i1> $ into $ <var:K>$ . This moves the precondition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:i1> = <nat:2> \times <var:Q> \land <var:K> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> \} $ into $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:K> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> \} $ . Moving onward , we have the binding line \verb | <var:K> := <var:K> + <var:i0> | . This statement takes the condition $ \{ <var:E> = <var:Q> \land <var:i0> = <nat:6> \land <var:K> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> \} $ into the postcondition $ \{ <var:E> = <var:Q> \land <var:K> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:6> \} $ . This is rigorously given through the assignment inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:E> = <var:Q> }} <var:i0> := <nat:6> ; <var:i1> := <nat:2> ; <var:i1> := <var:i1> * <var:E> ; <var:i2> := <nat:1> ; <var:i2> := <var:i2> * <var:E> ; <var:i2> := <var:i2> * <var:E> ; <var:i3> := <nat:3> ; <var:i3> := <var:i3> * <var:E> ; <var:i3> := <var:i3> * <var:E> ; <var:i3> := <var:i3> * <var:E> ; <var:K> := <var:i3> ; <var:K> := <var:K> + <var:i2> ; <var:K> := <var:K> + <var:i1> ; <var:K> := <var:K> + <var:i0> {{ <var:K> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:i2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:i2> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:i2> = <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:i2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:i3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:i2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:i3> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:i2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:i3> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:i2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:i3> = <nat:3> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:i2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:K> = <nat:3> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:2> * <var:Q> /\ <var:K> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:i0> = <nat:6> /\ <var:K> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:K> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 