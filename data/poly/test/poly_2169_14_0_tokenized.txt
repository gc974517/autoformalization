\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:Z0> := <nat:1> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:d> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:d> ; <var:Z2> := <var:Z2> * <var:d> ; <var:Z3> := <nat:3> ; <var:Z3> := <var:Z3> * <var:d> ; <var:Z3> := <var:Z3> * <var:d> ; <var:Z3> := <var:Z3> * <var:d> ; <var:g> := <var:Z3> ; <var:g> := <var:g> + <var:Z2> ; <var:g> := <var:g> + <var:Z1> ; <var:g> := <var:g> + <var:Z0> \end{verbatim} Assume it to hold that $ <var:d> = <var:T> $ before executing this code segment then we see $ <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:T> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \} \\ <var:Z1> := <nat:3> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \} \\ <var:Z1> := <var:Z1> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \} \\ <var:Z2> := <nat:1> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:Z2> = <nat:1> \} \\ <var:Z2> := <var:Z2> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:Z2> = <nat:1> * <var:T> \} \\ <var:Z2> := <var:Z2> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:Z2> = <nat:1> * <var:T> ^ <nat:2> \} \\ <var:Z3> := <nat:3> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:Z2> = <nat:1> * <var:T> ^ <nat:2> \land <var:Z3> = <nat:3> \} \\ <var:Z3> := <var:Z3> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:Z2> = <nat:1> * <var:T> ^ <nat:2> \land <var:Z3> = <nat:3> * <var:T> \} \\ <var:Z3> := <var:Z3> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:Z2> = <nat:1> * <var:T> ^ <nat:2> \land <var:Z3> = <nat:3> * <var:T> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:Z2> = <nat:1> * <var:T> ^ <nat:2> \land <var:Z3> = <nat:3> * <var:T> ^ <nat:3> \} \\ <var:g> := <var:Z3> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:Z2> = <nat:1> * <var:T> ^ <nat:2> \land <var:g> = <nat:3> * <var:T> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:Z2> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> * <var:T> \land <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:Z1> ; \\ \{ <var:d> = <var:T> \land <var:Z0> = <nat:1> \land <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> \} \\ <var:g> := <var:g> + <var:Z0> \\ \{ <var:d> = <var:T> \land <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> \} \end{eqnarray} Using usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:d> = <var:T> }} <var:Z0> := <nat:1> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:d> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:d> ; <var:Z2> := <var:Z2> * <var:d> ; <var:Z3> := <nat:3> ; <var:Z3> := <var:Z3> * <var:d> ; <var:Z3> := <var:Z3> * <var:d> ; <var:Z3> := <var:Z3> * <var:d> ; <var:g> := <var:Z3> ; <var:g> := <var:g> + <var:Z2> ; <var:g> := <var:g> + <var:Z1> ; <var:g> := <var:g> + <var:Z0> {{ <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:Z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:Z2> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:Z2> = <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:Z2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:Z3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:Z2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:Z2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:Z2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:Z2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:g> = <nat:3> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:T> /\ <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:Z0> = <nat:1> /\ <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 