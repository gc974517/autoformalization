\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:o0> := <nat:4> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:b> ; <var:o2> := <nat:6> ; <var:o2> := <var:o2> * <var:b> ; <var:o2> := <var:o2> * <var:b> ; <var:o3> := <nat:1> ; <var:o3> := <var:o3> * <var:b> ; <var:o3> := <var:o3> * <var:b> ; <var:o3> := <var:o3> * <var:b> ; <var:Q> := <var:o3> ; <var:Q> := <var:Q> + <var:o2> ; <var:Q> := <var:Q> + <var:o1> ; <var:Q> := <var:Q> + <var:o0> \end{verbatim} Assuming that $ <var:b> = <var:f> $ before the evaluation of our series of commands it must be that we have $ <var:Q> = <nat:1> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> + <nat:4> $ when list of commands exits . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is shown using Hoare logic . Observing the subsequent lines of codeseen in our set of instructions , \begin{verbatim} { <var:b> = <var:f> } <var:o0> := <nat:4> { <var:b> = <var:f> \land <var:o0> = <nat:4> } { <var:b> = <var:f> \land <var:o0> = <nat:4> } <var:o1> := <nat:8> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> } <var:o1> := <var:o1> * <var:b> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> } <var:o2> := <nat:6> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> } <var:o2> := <var:o2> * <var:b> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> } <var:o2> := <var:o2> * <var:b> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> } <var:o3> := <nat:1> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> \land <var:o3> = <nat:1> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> \land <var:o3> = <nat:1> } <var:o3> := <var:o3> * <var:b> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> \land <var:o3> = <nat:1> * <var:f> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> \land <var:o3> = <nat:1> * <var:f> } <var:o3> := <var:o3> * <var:b> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> \land <var:o3> = <nat:1> * <var:f> ^ <nat:2> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> \land <var:o3> = <nat:1> * <var:f> ^ <nat:2> } <var:o3> := <var:o3> * <var:b> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> \land <var:o2> = <nat:6> * <var:f> ^ <nat:2> \land <var:o3> = <nat:1> * <var:f> ^ <nat:3> } \end{verbatim} Paying attention to the proceeding lines found in our code segment , \begin{verbatim} { <var:b> = <var:f> } <var:o0> := <nat:4> { <var:b> = <var:f> \land <var:o0> = <nat:4> } { <var:b> = <var:f> \land <var:o0> = <nat:4> } <var:o1> := <nat:8> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> } { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> } <var:o1> := <var:o1> * <var:b> { <var:b> = <var:f> \land <var:o0> = <nat:4> \land <var:o1> = <nat:8> * <var:f> } \end{verbatim} Moving onward , we see \begin{verbatim} { <var:b> = <var:f> } <var:o0> := <nat:4> { <var:b> = <var:f> \land <var:o0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <var:o0> := <nat:4> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:b> ; <var:o2> := <nat:6> ; <var:o2> := <var:o2> * <var:b> ; <var:o2> := <var:o2> * <var:b> ; <var:o3> := <nat:1> ; <var:o3> := <var:o3> * <var:b> ; <var:o3> := <var:o3> * <var:b> ; <var:o3> := <var:o3> * <var:b> ; <var:Q> := <var:o3> ; <var:Q> := <var:Q> + <var:o2> ; <var:Q> := <var:Q> + <var:o1> ; <var:Q> := <var:Q> + <var:o0> {{ <var:Q> = <nat:1> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:o2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:o2> = <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:o2> = <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:o2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:o3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:o2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:o2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:o2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:o2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:Q> = <nat:1> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:o1> = <nat:8> * <var:f> /\ <var:Q> = <nat:1> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:o0> = <nat:4> /\ <var:Q> = <nat:1> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:1> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 