\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E1> := <var:h> ; <var:E2> := <var:E1> * <var:h> ; <var:E3> := <var:E2> * <var:h> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:5> ; <var:E3> := <var:E3> * <nat:6> ; <var:u> := <var:E3> <var:u> := <var:u> + <var:E2> <var:u> := <var:u> + <var:E1> <var:u> := <var:u> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:h> = <var:o> $ prior to running the program , it holds that we see $ <var:u> = <nat:6> \times <var:o> ^ <nat:3> + <nat:5> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:8> $ after set of instructions finishes . \end{theorem} \begin{proof} Using typical Hoare logic gives us : \begin{eqnarray} \{ <var:h> = <var:o> \} \\ <var:E1> := <var:h> ; \\ \{ <var:h> = <var:o> \land <var:E1> = <var:o> \} \\ <var:E2> := <var:E1> * <var:h> ; \\ \{ <var:h> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:h> ; \\ \{ <var:h> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> \land <var:E3> = <var:o> ^ <nat:3> \} \\ <var:E0> := <nat:8> ; \\ \{ <var:h> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> \land <var:E3> = <var:o> ^ <nat:3> \land <var:E0> = <nat:8> \} \\ <var:E1> := <var:E1> * <nat:2> ; \\ \{ <var:h> = <var:o> \land <var:E1> = <nat:2> * <var:o> \land <var:E2> = <var:o> ^ <nat:2> \land <var:E3> = <var:o> ^ <nat:3> \land <var:E0> = <nat:8> \} \\ <var:E2> := <var:E2> * <nat:5> ; \\ \{ <var:h> = <var:o> \land <var:E1> = <nat:2> * <var:o> \land <var:E2> = <nat:5> * <var:o> ^ <nat:2> \land <var:E3> = <var:o> ^ <nat:3> \land <var:E0> = <nat:8> \} \\ <var:E3> := <var:E3> * <nat:6> ; \\ \{ <var:h> = <var:o> \land <var:E1> = <nat:2> * <var:o> \land <var:E2> = <nat:5> * <var:o> ^ <nat:2> \land <var:E3> = <nat:6> * <var:o> ^ <nat:3> \land <var:E0> = <nat:8> \} \\ <var:u> := <var:E3> \\ \{ <var:h> = <var:o> \land <var:E1> = <nat:2> * <var:o> \land <var:E2> = <nat:5> * <var:o> ^ <nat:2> \land <var:E0> = <nat:8> \land <var:u> = <nat:6> * <var:o> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:E2> \\ \{ <var:h> = <var:o> \land <var:E1> = <nat:2> * <var:o> \land <var:E0> = <nat:8> \land <var:u> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:E1> \\ \{ <var:h> = <var:o> \land <var:E0> = <nat:8> \land <var:u> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> + <nat:2> * <var:o> \} \\ <var:u> := <var:u> + <var:E0> \\ \{ <var:h> = <var:o> \land <var:u> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:8> \} \end{eqnarray} Thusly , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:h> ; <var:E2> := <var:E1> * <var:h> ; <var:E3> := <var:E2> * <var:h> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:5> ; <var:E3> := <var:E3> * <nat:6> ; <var:u> := <var:E3> <var:u> := <var:u> + <var:E2> <var:u> := <var:u> + <var:E1> <var:u> := <var:u> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:h> = <var:o> }} <def:poly> {{ <var:u> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <var:o> ^ <nat:2> /\ <var:E3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <var:o> ^ <nat:2> /\ <var:E3> = <var:o> ^ <nat:3> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <nat:2> * <var:o> /\ <var:E2> = <var:o> ^ <nat:2> /\ <var:E3> = <var:o> ^ <nat:3> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <nat:2> * <var:o> /\ <var:E2> = <nat:5> * <var:o> ^ <nat:2> /\ <var:E3> = <var:o> ^ <nat:3> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <nat:2> * <var:o> /\ <var:E2> = <nat:5> * <var:o> ^ <nat:2> /\ <var:E3> = <nat:6> * <var:o> ^ <nat:3> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <nat:2> * <var:o> /\ <var:E2> = <nat:5> * <var:o> ^ <nat:2> /\ <var:E0> = <nat:8> /\ <var:u> = <nat:6> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E1> = <nat:2> * <var:o> /\ <var:E0> = <nat:8> /\ <var:u> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:E0> = <nat:8> /\ <var:u> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> + <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:o> /\ <var:u> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 