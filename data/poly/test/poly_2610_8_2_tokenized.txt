\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:2> + <var:h> * <var:q> ; <var:h> := <nat:2> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Assuming , given all positive integers $ <var:m> $ , $ <var:q> = <var:m> $ prior to executing this set of instructions , it holds that we see $ <var:h> = <nat:3> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this list of instructions can be demonstrated using usual Hoare reasoning . Moving on , we see \begin{verbatim} { <var:q> = <var:m> } <var:h> := <nat:3> { <var:q> = <var:m> \land <var:h> = <nat:3> } { <var:q> = <var:m> \land <var:h> = <nat:3> } <var:h> := <nat:1> + <var:h> * <var:q> { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> + <nat:1> } { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> + <nat:1> } <var:h> := <nat:3> + <var:h> * <var:q> { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:3> } { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:3> } <var:h> := <nat:1> + <var:h> * <var:q> { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:1> } { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:1> } <var:h> := <nat:2> + <var:h> * <var:q> { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:2> } { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:2> } <var:h> := <nat:2> + <var:h> * <var:q> { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:2> } \end{verbatim} This is given with the variable binding law given by typical Hoare reasoning . Keeping momentum , \begin{verbatim} { <var:q> = <var:m> } <var:h> := <nat:3> { <var:q> = <var:m> \land <var:h> = <nat:3> } { <var:q> = <var:m> \land <var:h> = <nat:3> } <var:h> := <nat:1> + <var:h> * <var:q> { <var:q> = <var:m> \land <var:h> = <nat:3> \times <var:m> + <nat:1> } \end{verbatim} This is rigorously given using the environment update rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:3> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:2> + <var:h> * <var:q> ; <var:h> := <nat:2> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:q> = <var:m> }} <def:poly> {{ <var:h> = <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:h> = <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:h> = <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:h> = <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:h> = <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:h> = <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:h> = <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:h> = <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 