\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:6> ; <var:M> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Allowing that we have $ <var:j> = <var:G> $ prior to interpreting this code then we see $ <var:M> = <nat:6> $ once segment of code has terminated . \end{theorem} \begin{proof} Utilizing Hoare logic yields : \begin{eqnarray} \{ <var:j> = <var:G> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:j> = <var:G> \land <var:R0> = <nat:6> \} \\ <var:M> := <var:R0> \\ \{ <var:j> = <var:G> \land <var:M> = <nat:6> \} \end{eqnarray} As a consequence , this segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:M> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:j> = <var:G> }} <def:poly> {{ <var:M> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:M> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 