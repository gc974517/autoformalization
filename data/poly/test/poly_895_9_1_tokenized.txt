\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:b> ; <var:e2> := <var:e1> * <var:b> ; <var:e3> := <var:e2> * <var:b> ; <var:e0> := <nat:9> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:4> ; <var:A> := <var:e3> <var:A> := <var:A> + <var:e2> <var:A> := <var:A> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:b> = <var:G> $ ahead of evaluating this segment of code then we have $ <var:A> = <nat:4> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code is shown using standard Hoare reasoning . Moving forward , \[ \begin{tabular} {rcl} \{ <var:b> = <var:G> \} & <var:e1> := <var:b> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \} \\ \{ <var:b> = <var:G> \land <var:e1> = <var:G> \} & <var:e2> := <var:e1> * <var:b> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \} \\ \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \} & <var:e3> := <var:e2> * <var:b> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \land <var:e3> = <var:G> ^ <nat:3> \} \\ \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \land <var:e3> = <var:G> ^ <nat:3> \} & <var:e0> := <nat:9> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \land <var:e3> = <var:G> ^ <nat:3> \land <var:e0> = <nat:9> \} \end{tabular} This is given using the variable assignmet inference rule defined by usual Hoare logic . Following , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:G> \} & <var:e1> := <var:b> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \} \end{tabular} This is shown to be logically sound by the assignment inference rule from usual Hoare reasoning . Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:G> \} & <var:e1> := <var:b> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \} \\ \{ <var:b> = <var:G> \land <var:e1> = <var:G> \} & <var:e2> := <var:e1> * <var:b> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \} \\ \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \} & <var:e3> := <var:e2> * <var:b> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \land <var:e3> = <var:G> ^ <nat:3> \} \\ \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \land <var:e3> = <var:G> ^ <nat:3> \} & <var:e0> := <nat:9> & \{ <var:b> = <var:G> \land <var:e1> = <var:G> \land <var:e2> = <var:G> ^ <nat:2> \land <var:e3> = <var:G> ^ <nat:3> \land <var:e0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:b> ; <var:e2> := <var:e1> * <var:b> ; <var:e3> := <var:e2> * <var:b> ; <var:e0> := <nat:9> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:4> ; <var:A> := <var:e3> <var:A> := <var:A> + <var:e2> <var:A> := <var:A> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:b> = <var:G> }} <def:poly> {{ <var:A> = <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:e1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:e1> = <var:G> /\ <var:e2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:e1> = <var:G> /\ <var:e2> = <var:G> ^ <nat:2> /\ <var:e3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:e1> = <var:G> /\ <var:e2> = <var:G> ^ <nat:2> /\ <var:e3> = <var:G> ^ <nat:3> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:e1> = <var:G> /\ <var:e2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:e3> = <var:G> ^ <nat:3> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:e1> = <var:G> /\ <var:e2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:G> ^ <nat:3> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:e1> = <var:G> /\ <var:e2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:e0> = <nat:9> /\ <var:A> = <nat:4> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:e1> = <var:G> /\ <var:e0> = <nat:9> /\ <var:A> = <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:G> /\ <var:A> = <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 