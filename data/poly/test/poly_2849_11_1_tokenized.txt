\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as \begin{verbatim} <var:q1> := <var:x> ; <var:q2> := <var:q1> * <var:x> ; <var:q3> := <var:q2> * <var:x> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:1> ; <var:q2> := <var:q2> * <nat:4> ; <var:q3> := <var:q3> * <nat:1> ; <var:l> := <var:q3> <var:l> := <var:l> + <var:q2> <var:l> := <var:l> + <var:q1> <var:l> := <var:l> + <var:q0> \end{verbatim} Allow $ <var:x> = <var:d> $ ahead of executing our series of instructions , it follows that we see $ <var:l> = <nat:1> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:d> \} \\ <var:q1> := <var:x> ; \\ \{ <var:x> = <var:d> \land <var:q1> = <var:d> \} \\ <var:q2> := <var:q1> * <var:x> ; \\ \{ <var:x> = <var:d> \land <var:q1> = <var:d> \land <var:q2> = <var:d> ^ <nat:2> \} \\ <var:q3> := <var:q2> * <var:x> ; \\ \{ <var:x> = <var:d> \land <var:q1> = <var:d> \land <var:q2> = <var:d> ^ <nat:2> \land <var:q3> = <var:d> ^ <nat:3> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:x> = <var:d> \land <var:q1> = <var:d> \land <var:q2> = <var:d> ^ <nat:2> \land <var:q3> = <var:d> ^ <nat:3> \land <var:q0> = <nat:2> \} \\ <var:q1> := <var:q1> * <nat:1> ; \\ \{ <var:x> = <var:d> \land <var:q1> = <nat:1> \times <var:d> \land <var:q2> = <var:d> ^ <nat:2> \land <var:q3> = <var:d> ^ <nat:3> \land <var:q0> = <nat:2> \} \\ <var:q2> := <var:q2> * <nat:4> ; \\ \{ <var:x> = <var:d> \land <var:q1> = <nat:1> \times <var:d> \land <var:q2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:q3> = <var:d> ^ <nat:3> \land <var:q0> = <nat:2> \} \\ <var:q3> := <var:q3> * <nat:1> ; \\ \{ <var:x> = <var:d> \land <var:q1> = <nat:1> \times <var:d> \land <var:q2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:q3> = <nat:1> \times <var:d> ^ <nat:3> \land <var:q0> = <nat:2> \} \\ <var:l> := <var:q3> \\ \{ <var:x> = <var:d> \land <var:q1> = <nat:1> \times <var:d> \land <var:q2> = <nat:4> \times <var:d> ^ <nat:2> \land <var:q0> = <nat:2> \land <var:l> = <nat:1> \times <var:d> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:q2> \\ \{ <var:x> = <var:d> \land <var:q1> = <nat:1> \times <var:d> \land <var:q0> = <nat:2> \land <var:l> = <nat:1> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:q1> \\ \{ <var:x> = <var:d> \land <var:q0> = <nat:2> \land <var:l> = <nat:1> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> \} \\ <var:l> := <var:l> + <var:q0> \\ \{ <var:x> = <var:d> \land <var:l> = <nat:1> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:x> = <var:d> }} <var:q1> := <var:x> ; <var:q2> := <var:q1> * <var:x> ; <var:q3> := <var:q2> * <var:x> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:1> ; <var:q2> := <var:q2> * <nat:4> ; <var:q3> := <var:q3> * <nat:1> ; <var:l> := <var:q3> <var:l> := <var:l> + <var:q2> <var:l> := <var:l> + <var:q1> <var:l> := <var:l> + <var:q0> {{ <var:l> = <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <var:d> /\ <var:q2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <var:d> /\ <var:q2> = <var:d> ^ <nat:2> /\ <var:q3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <var:d> /\ <var:q2> = <var:d> ^ <nat:2> /\ <var:q3> = <var:d> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <nat:1> * <var:d> /\ <var:q2> = <var:d> ^ <nat:2> /\ <var:q3> = <var:d> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <nat:1> * <var:d> /\ <var:q2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:q3> = <var:d> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <nat:1> * <var:d> /\ <var:q2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:d> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <nat:1> * <var:d> /\ <var:q2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:q0> = <nat:2> /\ <var:l> = <nat:1> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q1> = <nat:1> * <var:d> /\ <var:q0> = <nat:2> /\ <var:l> = <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:q0> = <nat:2> /\ <var:l> = <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:l> = <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 