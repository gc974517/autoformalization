\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:s> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:6> ; <var:e> := <var:d1> <var:e> := <var:e> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:s> = <var:H> $ prior to the execution of the code segment it holds that $ <var:e> = <nat:6> * <var:H> + <nat:1> $ when segment of code has terminated . \end{theorem} \begin{proof} We can see that the following decorated list of commands . \begin{eqnarray} \{ <var:s> = <var:H> \} \\ <var:d1> := <var:s> ; \\ \{ <var:s> = <var:H> \land <var:d1> = <var:H> \} \\ <var:d0> := <nat:1> ; \\ \{ <var:s> = <var:H> \land <var:d1> = <var:H> \land <var:d0> = <nat:1> \} \\ <var:d1> := <var:d1> * <nat:6> ; \\ \{ <var:s> = <var:H> \land <var:d1> = <nat:6> \cdot <var:H> \land <var:d0> = <nat:1> \} \\ <var:e> := <var:d1> \\ \{ <var:s> = <var:H> \land <var:d0> = <nat:1> \land <var:e> = <nat:6> \cdot <var:H> \} \\ <var:e> := <var:e> + <var:d0> \\ \{ <var:s> = <var:H> \land <var:e> = <nat:6> \cdot <var:H> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:s> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:6> ; <var:e> := <var:d1> <var:e> := <var:e> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:s> = <var:H> }} <def:poly> {{ <var:e> = <nat:6> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:d1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:d1> = <var:H> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:d1> = <nat:6> * <var:H> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:d0> = <nat:1> /\ <var:e> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:e> = <nat:6> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 