\begin{document} \begin{theorem} We define a set of instructions : \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:2> + <var:C> * <var:g> ; <var:C> := <nat:2> + <var:C> * <var:g> ; <var:C> := <nat:1> + <var:C> * <var:g> ; <var:C> := <nat:1> + <var:C> * <var:g> ; <var:C> := <nat:2> + <var:C> * <var:g> ; <var:C> := <nat:4> + <var:C> * <var:g> ; <var:C> := <nat:4> + <var:C> * <var:g> \end{verbatim} Allowing $ <var:g> = <var:t> $ ahead of executing this set of commands it holds that we have $ <var:C> = <nat:2> \cdot <var:t> ^ <nat:7> + <nat:2> \cdot <var:t> ^ <nat:6> + <nat:2> \cdot <var:t> ^ <nat:5> + <nat:1> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:4> $ once code segment has exited . \end{theorem} \begin{proof} The course of logic for the list of commands is evident by Hoare techniques . Now , \verb | { <var:g> = <var:t> } <var:C> := <nat:2> { <var:g> = <var:t> \land <var:C> = <nat:2> } | and \verb | { <var:g> = <var:t> \land <var:C> = <nat:2> } <var:C> := <nat:2> + <var:C> * <var:g> { <var:g> = <var:t> \land <var:C> = <nat:2> \times <var:t> + <nat:2> } | . This is shown to be logically sound through the inference rule from standard Hoare logic . After , \verb | { <var:g> = <var:t> } <var:C> := <nat:2> { <var:g> = <var:t> \land <var:C> = <nat:2> } | , \verb | { <var:g> = <var:t> \land <var:C> = <nat:2> } <var:C> := <nat:2> + <var:C> * <var:g> { <var:g> = <var:t> \land <var:C> = <nat:2> \times <var:t> + <nat:2> } | , \verb | { <var:g> = <var:t> \land <var:C> = <nat:2> \times <var:t> + <nat:2> } <var:C> := <nat:2> + <var:C> * <var:g> { <var:g> = <var:t> \land <var:C> = <nat:2> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:2> } | and \verb | { <var:g> = <var:t> \land <var:C> = <nat:2> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:2> } <var:C> := <nat:1> + <var:C> * <var:g> { <var:g> = <var:t> \land <var:C> = <nat:2> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:1> } | . Going forward , we have \verb | { <var:g> = <var:t> } <var:C> := <nat:2> { <var:g> = <var:t> \land <var:C> = <nat:2> } | and \verb | { <var:g> = <var:t> \land <var:C> = <nat:2> } <var:C> := <nat:2> + <var:C> * <var:g> { <var:g> = <var:t> \land <var:C> = <nat:2> \times <var:t> + <nat:2> } | . This is given with the binding scheme found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:g> = <var:t> }} <var:C> := <nat:2> ; <var:C> := <nat:2> + <var:C> * <var:g> ; <var:C> := <nat:2> + <var:C> * <var:g> ; <var:C> := <nat:1> + <var:C> * <var:g> ; <var:C> := <nat:1> + <var:C> * <var:g> ; <var:C> := <nat:2> + <var:C> * <var:g> ; <var:C> := <nat:4> + <var:C> * <var:g> ; <var:C> := <nat:4> + <var:C> * <var:g> {{ <var:C> = <nat:2> * <var:t> ^ <nat:7> + <nat:2> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:C> = <nat:2> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:C> = <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:C> = <nat:2> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:C> = <nat:2> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:C> = <nat:2> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:C> = <nat:2> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:C> = <nat:2> * <var:t> ^ <nat:7> + <nat:2> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 