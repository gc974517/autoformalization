\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:y> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:2> ; <var:z> := <var:g1> <var:z> := <var:z> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Allow that $ <var:y> = <var:a> $ , taking positive integers $ <var:a> $ , ahead of executing our code segment , it holds that we have $ <var:z> = <nat:2> * <var:a> + <nat:1> $ once series of instructions is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our program is accomplished by Hoare techniques . Looking at the proceeding pieces of code seen in our set of commands , we see \verb | { <var:y> = <var:a> } <var:g1> := <var:y> { <var:y> = <var:a> \land <var:g1> = <var:a> } | , \verb | { <var:y> = <var:a> \land <var:g1> = <var:a> } <var:g0> := <nat:1> { <var:y> = <var:a> \land <var:g1> = <var:a> \land <var:g0> = <nat:1> } | , \verb | { <var:y> = <var:a> \land <var:g1> = <var:a> \land <var:g0> = <nat:1> } <var:g1> := <var:g1> * <nat:2> { <var:y> = <var:a> \land <var:g1> = <nat:2> \times <var:a> \land <var:g0> = <nat:1> } | and \verb | { <var:y> = <var:a> \land <var:g1> = <nat:2> \times <var:a> \land <var:g0> = <nat:1> } <var:z> := <var:g1{ <var:y> = <var:a> \land <var:g0> = <nat:1> \land <var:z> = <nat:2> \times <var:a> } | . Moving forward , \verb | { <var:y> = <var:a> } <var:g1> := <var:y> { <var:y> = <var:a> \land <var:g1> = <var:a> } | . This is shown to be logically sound with the variable binding law of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:y> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:2> ; <var:z> := <var:g1> <var:z> := <var:z> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:y> = <var:a> }} <def:poly> {{ <var:z> = <nat:2> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:g1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:g1> = <var:a> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:g1> = <nat:2> * <var:a> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:g0> = <nat:1> /\ <var:z> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:z> = <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 