\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:q> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:q> ; <var:g2> := <var:g2> * <var:q> ; <var:g3> := <nat:1> ; <var:g3> := <var:g3> * <var:q> ; <var:g3> := <var:g3> * <var:q> ; <var:g3> := <var:g3> * <var:q> ; <var:e> := <var:g3> ; <var:e> := <var:e> + <var:g2> ; <var:e> := <var:e> + <var:g1> ; <var:e> := <var:e> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Assume that $ <var:q> = <var:u> $ ( given natural coefficients $ <var:u> $ ) before the execution of this list of instructions , then we have $ <var:e> = <nat:1> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:8> $ after code terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is demonstrated by Hoare techniques . Following , we see \begin{verbatim} { <var:q> = <var:u> } <var:g0> := <nat:8> { <var:q> = <var:u> \land <var:g0> = <nat:8> } { <var:q> = <var:u> \land <var:g0> = <nat:8> } <var:g1> := <nat:9> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> } { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> } <var:g1> := <var:g1> * <var:q> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> } { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> } <var:g2> := <nat:6> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> \land <var:g2> = <nat:6> } { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> \land <var:g2> = <nat:6> } <var:g2> := <var:g2> * <var:q> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> \land <var:g2> = <nat:6> * <var:u> } { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> \land <var:g2> = <nat:6> * <var:u> } <var:g2> := <var:g2> * <var:q> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> \land <var:g2> = <nat:6> * <var:u> ^ <nat:2> } \end{verbatim} Advancing to the proceeding step found in the set of instructions , \begin{verbatim} { <var:q> = <var:u> } <var:g0> := <nat:8> { <var:q> = <var:u> \land <var:g0> = <nat:8> } \end{verbatim} This is known to be sound using the variable binding rule given in Hoare reasoning . Shifting focus toward the upcoming commands contained in our code , we have \begin{verbatim} { <var:q> = <var:u> } <var:g0> := <nat:8> { <var:q> = <var:u> \land <var:g0> = <nat:8> } { <var:q> = <var:u> \land <var:g0> = <nat:8> } <var:g1> := <nat:9> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> } { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> } <var:g1> := <var:g1> * <var:q> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> } { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> } <var:g2> := <nat:6> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> \land <var:g2> = <nat:6> } \end{verbatim} This is guaranteed through the variable assignmet inference rule of usual Hoare techniques . Taking another step toward the proceeding bits of codecontained in our series of instructions , we see \begin{verbatim} { <var:q> = <var:u> } <var:g0> := <nat:8> { <var:q> = <var:u> \land <var:g0> = <nat:8> } { <var:q> = <var:u> \land <var:g0> = <nat:8> } <var:g1> := <nat:9> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> } { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> } <var:g1> := <var:g1> * <var:q> { <var:q> = <var:u> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> * <var:u> } \end{verbatim} This is shown by the variable assignmet law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g0> := <nat:8> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:q> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:q> ; <var:g2> := <var:g2> * <var:q> ; <var:g3> := <nat:1> ; <var:g3> := <var:g3> * <var:q> ; <var:g3> := <var:g3> * <var:q> ; <var:g3> := <var:g3> * <var:q> ; <var:e> := <var:g3> ; <var:e> := <var:e> + <var:g2> ; <var:e> := <var:e> + <var:g1> ; <var:e> := <var:e> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:q> = <var:u> }} <def:poly> {{ <var:e> = <nat:1> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:g2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:g2> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:g2> = <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:g2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:g2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:g2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:g2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:g2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:e> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:u> /\ <var:e> = <nat:1> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:g0> = <nat:8> /\ <var:e> = <nat:1> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:e> = <nat:1> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 