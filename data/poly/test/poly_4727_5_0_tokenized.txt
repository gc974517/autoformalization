\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:P0> := <nat:8> ; <var:P1> := <nat:1> ; <var:P1> := <var:P1> * <var:p> ; <var:t> := <var:P1> ; <var:t> := <var:t> + <var:P0> \end{verbatim} Assume letting positive integers $ <var:B> $ that we have $ <var:p> = <var:B> $ ahead of running the set of commands then $ <var:t> = <nat:1> \cdot <var:B> + <nat:8> $ when list of instructions has executed . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is accomplished with Hoare techniques . Moving forward , we see \begin{eqnarray} \{ <var:p> = <var:B> \} \, <var:P0> := <nat:8> \, \{ <var:p> = <var:B> \land <var:P0> = <nat:8> \} \end{eqnarray} This is guaranteed by the binding scheme found in usual Hoare logic . Immediately following , we see \begin{eqnarray} \{ <var:p> = <var:B> \} \, <var:P0> := <nat:8> \, \{ <var:p> = <var:B> \land <var:P0> = <nat:8> \} \\ \{ <var:p> = <var:B> \land <var:P0> = <nat:8> \} \, <var:P1> := <nat:1> \, \{ <var:p> = <var:B> \land <var:P0> = <nat:8> \land <var:P1> = <nat:1> \} \\ \{ <var:p> = <var:B> \land <var:P0> = <nat:8> \land <var:P1> = <nat:1> \} \, <var:P1> := <var:P1> * <var:p> \, \{ <var:p> = <var:B> \land <var:P0> = <nat:8> \land <var:P1> = <nat:1> \times <var:B> \} \end{eqnarray} This is shown by the environment update rule given in Hoare logic . Moving on to the next step , we have \begin{eqnarray} \{ <var:p> = <var:B> \} \, <var:P0> := <nat:8> \, \{ <var:p> = <var:B> \land <var:P0> = <nat:8> \} \end{eqnarray} This is sound with the binding scheme obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:p> = <var:B> }} <var:P0> := <nat:8> ; <var:P1> := <nat:1> ; <var:P1> := <var:P1> * <var:p> ; <var:t> := <var:P1> ; <var:t> := <var:t> + <var:P0> {{ <var:t> = <nat:1> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P0> = <nat:8> /\ <var:t> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:t> = <nat:1> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 