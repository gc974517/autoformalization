\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:7> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:k> ; <var:E> := <var:F1> ; <var:E> := <var:E> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given , for any natural coefficients $ <var:j> $ , that $ <var:k> = <var:j> $ before interpreting the list of commands it follows that $ <var:E> = <nat:4> \cdot <var:j> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for our code can be done through Hoare techniques . Moving on to the next step , the variable update line binding $ <nat:7> $ to $ <var:F0>$ . This takes $ \{ <var:k> = <var:j> \} $ as the postcondition $ \{ <var:k> = <var:j> \land <var:F0> = <nat:7> \} $ . After , we see the environment update statement yielding $ <nat:4> $ into $ <var:F1>$ . This code takes the condition $ \{ <var:k> = <var:j> \land <var:F0> = <nat:7> \} $ into the condition $ \{ <var:k> = <var:j> \land <var:F0> = <nat:7> \land <var:F1> = <nat:4> \} $ . Moving forward to the next step , the variable assignmet code \verb | <var:F1> := <var:F1> * <var:k> ; | . This statement advances the condition $ \{ <var:k> = <var:j> \land <var:F0> = <nat:7> \land <var:F1> = <nat:4> \} $ as the postcondition $ \{ <var:k> = <var:j> \land <var:F0> = <nat:7> \land <var:F1> = <nat:4> \cdot <var:j> \} $ . This is shown to be logically sound using the assignment scheme of Hoare reasoning . Moving forward to the next statement contained in the segment of code , we see the statement \verb | <var:E> := <var:F1> ; | . This redefines $ \{ <var:k> = <var:j> \land <var:F0> = <nat:7> \land <var:F1> = <nat:4> \cdot <var:j> \} $ to the condition $ \{ <var:k> = <var:j> \land <var:F0> = <nat:7> \land <var:E> = <nat:4> \cdot <var:j> \} $ . This is given using the assignment rule defined by typical Hoare logic . Moving on to the proceeding statement contained in our code segment , we have the environment update statement assigning $ <var:E> + <var:F0$ into $ <var:E>$ . This advances $ \{ <var:k> = <var:j> \land <var:F0> = <nat:7> \land <var:E> = <nat:4> \cdot <var:j> \} $ as the condition $ \{ <var:k> = <var:j> \land <var:E> = <nat:4> \cdot <var:j> + <nat:7> \} $ . This is deduced through the assignment scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:7> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:k> ; <var:E> := <var:F1> ; <var:E> := <var:E> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:k> = <var:j> }} <def:poly> {{ <var:E> = <nat:4> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:F0> = <nat:7> /\ <var:E> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:E> = <nat:4> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 