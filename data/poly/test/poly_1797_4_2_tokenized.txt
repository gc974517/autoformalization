\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a> := <nat:2> ; <var:a> := <var:a> * <var:w> ; <var:a> := <nat:3> + <var:a> * <var:w> ; <var:a> := <nat:3> + <var:a> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:w> = <var:U> $ before evaluating this program , it holds that $ <var:a> = <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> + <nat:3> $ after segment of code has executed . \end{theorem} \begin{proof} The course of logic for this code segment can be given through Hoare techniques . Taking a look at the subsequent line of code in the code , we have the variable assignmet command letting $ <nat:2> $ to $ <var:a>$ . This statement redefines $ \{ <var:w> = <var:U> \} $ to the condition $ \{ <var:w> = <var:U> \land <var:a> = <nat:2> \} $ . Moving on to the following command found in the code segment , we see the statement \verb | <var:a> := <var:a> * <var:w> ; | . This command redefines $ \{ <var:w> = <var:U> \land <var:a> = <nat:2> \} $ into the postcondition $ \{ <var:w> = <var:U> \land <var:a> = <nat:2> \times <var:U> + \} $ . This is known to be sound by the assignment law obtained from typical Hoare reasoning . Focusing on the next bit of code seen in the set of commands , we have the variable assignmet line \verb | <var:a> := <nat:3> + <var:a> * <var:w> ; | . This moves the condition $ \{ <var:w> = <var:U> \land <var:a> = <nat:2> \times <var:U> + \} $ into the condition $ \{ <var:w> = <var:U> \land <var:a> = <nat:2> \times <var:U> ^ <nat:2> + <nat:3> \} $ . This is deduced through the assignment inference rule from Hoare logic . Now , we have the variable binding line \verb | <var:a> := <nat:3> + <var:a> * <var:w> | . This line takes the precondition $ \{ <var:w> = <var:U> \land <var:a> = <nat:2> \times <var:U> ^ <nat:2> + <nat:3> \} $ into the condition $ \{ <var:w> = <var:U> \land <var:a> = <nat:2> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> + <nat:3> \} $ . This is rigorously given by the assignment rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:2> ; <var:a> := <var:a> * <var:w> ; <var:a> := <nat:3> + <var:a> * <var:w> ; <var:a> := <nat:3> + <var:a> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:w> = <var:U> }} <def:poly> {{ <var:a> = <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:a> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:a> = <nat:2> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:a> = <nat:2> * <var:U> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:a> = <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 