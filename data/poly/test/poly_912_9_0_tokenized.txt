\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:f0> := <nat:5> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:X> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:X> ; <var:f2> := <var:f2> * <var:X> ; <var:m> := <var:f2> ; <var:m> := <var:m> + <var:f1> ; <var:m> := <var:m> + <var:f0> \end{verbatim} Assume given every positive integer coefficients $ <var:J> $ $ <var:X> = <var:J> $ ahead of the evaluation of this series of commands , then $ <var:m> = <nat:6> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is evident using typical Hoare reasoning . Stepping through , we see the variable assignmet line \verb | <var:f0> := <nat:5> ; | . This code transfers the precondition $ \{ <var:X> = <var:J> \} $ into the postcondition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \} $ . Jumping to the proceeding line found in the code segment , we have the assignment line assigning $ <nat:1> $ toward $ <var:f1>$ . This code moves the precondition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \} $ into the postcondition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \} $ . This is deduced using the assignment scheme of usual Hoare reasoning . Taking another step toward the subsequent line of code found in the program , the variable binding code \verb | <var:f1> := <var:f1> * <var:X> ; | . This forwards $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \} $ to the condition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \} $ . This is shown to be logically sound through the assignment inference rule of typical Hoare reasoning . Taking a look at the subsequent step found in our code , the binding code letting $ <nat:6> $ toward $ <var:f2>$ . This statement forwards $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \} $ to $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \land <var:f2> = <nat:6> \} $ . Looking at the next step in our program , we have the binding line assigning $ <var:f2> * <var:X> $ into $ <var:f2>$ . This line advances the precondition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \land <var:f2> = <nat:6> \} $ toward the condition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \land <var:f2> = <nat:6> \cdot <var:J> \} $ . Advancing to the next step , we see the binding line \verb | <var:f2> := <var:f2> * <var:X> ; | . This statement forwards the condition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \land <var:f2> = <nat:6> \cdot <var:J> \} $ as the postcondition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \land <var:f2> = <nat:6> \cdot <var:J> ^ <nat:2> \} $ . Jumping to the following piece of code found in our segment of code , the command yielding $ <var:f2> $ as $ <var:m>$ . This advances $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \land <var:f2> = <nat:6> \cdot <var:J> ^ <nat:2> \} $ as $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \land <var:m> = <nat:6> \cdot <var:J> ^ <nat:2> \} $ . Immediately following , the variable update line \verb | <var:m> := <var:m> + <var:f1> ; | . This transfers the condition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:f1> = <nat:1> \cdot <var:J> \land <var:m> = <nat:6> \cdot <var:J> ^ <nat:2> \} $ as the condition $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:m> = <nat:6> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> \} $ . This is ensured with the assignment inference rule of standard Hoare techniques . Moving forward , we see the variable binding command \verb | <var:m> := <var:m> + <var:f0> | . This advances $ \{ <var:X> = <var:J> \land <var:f0> = <nat:5> \land <var:m> = <nat:6> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> \} $ to the postcondition $ \{ <var:X> = <var:J> \land <var:m> = <nat:6> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:5> \} $ . This is given by the assignment scheme found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:X> = <var:J> }} <var:f0> := <nat:5> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:X> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:X> ; <var:f2> := <var:f2> * <var:X> ; <var:m> := <var:f2> ; <var:m> := <var:m> + <var:f1> ; <var:m> := <var:m> + <var:f0> {{ <var:m> = <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:1> * <var:J> /\ <var:f2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:1> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:1> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:1> * <var:J> /\ <var:m> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:f0> = <nat:5> /\ <var:m> = <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:m> = <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 