\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:2> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:Q> ; <var:w> := <var:D1> ; <var:w> := <var:w> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given --- given every $ <var:V> $ --- $ <var:Q> = <var:V> $ ahead of the execution of our series of instructions it follows that we have $ <var:w> = <nat:4> \times <var:V> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code can be demonstrated through the following decorated set of commands . \begin{eqnarray} \{ <var:Q> = <var:V> \} \\ <var:D0> := <nat:2> ; \\ \{ <var:Q> = <var:V> \land <var:D0> = <nat:2> \} \\ <var:D1> := <nat:4> ; \\ \{ <var:Q> = <var:V> \land <var:D0> = <nat:2> \land <var:D1> = <nat:4> \} \\ <var:D1> := <var:D1> * <var:Q> ; \\ \{ <var:Q> = <var:V> \land <var:D0> = <nat:2> \land <var:D1> = <nat:4> * <var:V> \} \\ <var:w> := <var:D1> ; \\ \{ <var:Q> = <var:V> \land <var:D0> = <nat:2> \land <var:w> = <nat:4> * <var:V> \} \\ <var:w> := <var:w> + <var:D0> \\ \{ <var:Q> = <var:V> \land <var:w> = <nat:4> * <var:V> + <nat:2> \} \end{eqnarray} Allowing running this list of instructions yields : \begin{eqnarray} \end{eqnarray} Utilizing typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:2> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:Q> ; <var:w> := <var:D1> ; <var:w> := <var:w> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:Q> = <var:V> }} <def:poly> {{ <var:w> = <nat:4> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:D0> = <nat:2> /\ <var:w> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w> = <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 