\begin{document} \begin{theorem} Let the following set of instructions as \begin{verbatim} <var:o1> := <var:F> ; <var:o2> := <var:o1> * <var:F> ; <var:o0> := <nat:4> ; <var:o1> := <var:o1> * <nat:3> ; <var:o2> := <var:o2> * <nat:7> ; <var:v> := <var:o2> <var:v> := <var:v> + <var:o1> <var:v> := <var:v> + <var:o0> \end{verbatim} Assume $ <var:F> = <var:u> $ ahead of the execution of our set of instructions then we see $ <var:v> = <nat:7> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions can be demonstrated using standard Hoare techniques . Moving on , we have \begin{verbatim} { <var:F> = <var:u> } <var:o1> := <var:F> { <var:F> = <var:u> \land <var:o1> = <var:u> } { <var:F> = <var:u> \land <var:o1> = <var:u> } <var:o2> := <var:o1> * <var:F> { <var:F> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> } { <var:F> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> } <var:o0> := <nat:4> { <var:F> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o0> = <nat:4> } { <var:F> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o0> = <nat:4> } <var:o1> := <var:o1> * <nat:3> { <var:F> = <var:u> \land <var:o1> = <nat:3> \cdot <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o0> = <nat:4> } \end{verbatim} This is ensured using the environment update law in Hoare techniques . Focusing on the following piece of code found in the code , we see \begin{verbatim} { <var:F> = <var:u> } <var:o1> := <var:F> { <var:F> = <var:u> \land <var:o1> = <var:u> } \end{verbatim} Further , we have \begin{verbatim} { <var:F> = <var:u> } <var:o1> := <var:F> { <var:F> = <var:u> \land <var:o1> = <var:u> } { <var:F> = <var:u> \land <var:o1> = <var:u> } <var:o2> := <var:o1> * <var:F> { <var:F> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> } \end{verbatim} This is sound by the variable update law of standard Hoare techniques . Advancing to the next step , \begin{verbatim} { <var:F> = <var:u> } <var:o1> := <var:F> { <var:F> = <var:u> \land <var:o1> = <var:u> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:F> = <var:u> }} <var:o1> := <var:F> ; <var:o2> := <var:o1> * <var:F> ; <var:o0> := <nat:4> ; <var:o1> := <var:o1> * <nat:3> ; <var:o2> := <var:o2> * <nat:7> ; <var:v> := <var:o2> <var:v> := <var:v> + <var:o1> <var:v> := <var:v> + <var:o0> {{ <var:v> = <nat:7> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:o1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:o1> = <var:u> /\ <var:o2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:o1> = <var:u> /\ <var:o2> = <var:u> ^ <nat:2> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:o1> = <nat:3> * <var:u> /\ <var:o2> = <var:u> ^ <nat:2> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:o1> = <nat:3> * <var:u> /\ <var:o2> = <nat:7> * <var:u> ^ <nat:2> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:o1> = <nat:3> * <var:u> /\ <var:o0> = <nat:4> /\ <var:v> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:o0> = <nat:4> /\ <var:v> = <nat:7> * <var:u> ^ <nat:2> + <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:v> = <nat:7> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 