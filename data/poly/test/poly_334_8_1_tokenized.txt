\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:T> ; <var:m2> := <var:m1> * <var:T> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:9> ; <var:G> := <var:m2> <var:G> := <var:G> + <var:m1> <var:G> := <var:G> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:T> = <var:Z> $ before the execution of the set of commands it follows that $ <var:G> = <nat:9> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:Z> \} \\ <var:m1> := <var:T> ; \\ \{ <var:T> = <var:Z> \land <var:m1> = <var:Z> \} \\ <var:m2> := <var:m1> * <var:T> ; \\ \{ <var:T> = <var:Z> \land <var:m1> = <var:Z> \land <var:m2> = <var:Z> ^ <nat:2> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:T> = <var:Z> \land <var:m1> = <var:Z> \land <var:m2> = <var:Z> ^ <nat:2> \land <var:m0> = <nat:3> \} \\ <var:m1> := <var:m1> * <nat:2> ; \\ \{ <var:T> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m2> = <var:Z> ^ <nat:2> \land <var:m0> = <nat:3> \} \\ <var:m2> := <var:m2> * <nat:9> ; \\ \{ <var:T> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:m0> = <nat:3> \} \\ <var:G> := <var:m2> \\ \{ <var:T> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m0> = <nat:3> \land <var:G> = <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:m1> \\ \{ <var:T> = <var:Z> \land <var:m0> = <nat:3> \land <var:G> = <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> \} \\ <var:G> := <var:G> + <var:m0> \\ \{ <var:T> = <var:Z> \land <var:G> = <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> \} \end{eqnarray} Using standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m1> := <var:T> ; <var:m2> := <var:m1> * <var:T> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:9> ; <var:G> := <var:m2> <var:G> := <var:G> + <var:m1> <var:G> := <var:G> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:T> = <var:Z> }} <def:poly> {{ <var:G> = <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:m1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:m1> = <var:Z> /\ <var:m2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:m1> = <var:Z> /\ <var:m2> = <var:Z> ^ <nat:2> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m2> = <var:Z> ^ <nat:2> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m0> = <nat:3> /\ <var:G> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:m0> = <nat:3> /\ <var:G> = <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:G> = <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 