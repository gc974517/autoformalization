\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:2> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:S> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:S> ; <var:T2> := <var:T2> * <var:S> ; <var:J> := <var:T2> ; <var:J> := <var:J> + <var:T1> ; <var:J> := <var:J> + <var:T0> \end{verbatim} Given that we have $ <var:S> = <var:y> $ ahead of interpreting our set of commands , it holds that we have $ <var:J> = <nat:7> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the list of commands can be seen using usual Hoare reasoning . Keeping momentum , the assignment command \verb | <var:T0> := <nat:2> ; | . This redefines the precondition $ \{ <var:S> = <var:y> \} $ as the condition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \} $ . This is guaranteed through the assignment law given in usual Hoare logic . Taking another step toward the proceeding piece of code in our program , the environment update code \verb | <var:T1> := <nat:2> ; | . This line takes the condition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \} $ to the condition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \} $ . After , we see the environment update statement binding $ <var:T1> * <var:S> $ as $ <var:T1>$ . This line advances the condition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \} $ as $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \} $ . This is given using the assignment law defined in standard Hoare techniques . Honing in on the subsequent statement found in the series of commands , we see the assignment code \verb | <var:T2> := <nat:7> ; | . This redefines the precondition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \} $ toward the postcondition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \land <var:T2> = <nat:7> \} $ . This is guaranteed through the assignment rule defined in usual Hoare logic . Looking at the subsequent piece of code contained in the series of commands , we see the assignment line \verb | <var:T2> := <var:T2> * <var:S> ; | . This moves the precondition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \land <var:T2> = <nat:7> \} $ as the postcondition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \land <var:T2> = <nat:7> \cdot <var:y> \} $ . Jumping to the proceeding line of code in our code segment , we have the variable binding code defining $ <var:T2> * <var:S> $ into $ <var:T2>$ . This advances the precondition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \land <var:T2> = <nat:7> \cdot <var:y> \} $ as the postcondition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \land <var:T2> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ . This is shown with the assignment inference rule in typical Hoare techniques . Taking a look at the proceeding bit of code in our program , the environment update statement binding $ <var:T2> $ into $ <var:J>$ . This moves the condition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \land <var:T2> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ toward $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \land <var:J> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ . This is deduced with the assignment inference rule in Hoare logic . Honing in on the following step seen in the set of commands , the variable binding command \verb | <var:J> := <var:J> + <var:T1> ; | . This redefines the precondition $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:y> \land <var:J> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ to $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:J> = <nat:7> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> \} $ . Taking another step toward the subsequent bit of code found in our list of commands , we see the environment update command yielding $ <var:J> + <var:T0$ into $ <var:J>$ . This moves $ \{ <var:S> = <var:y> \land <var:T0> = <nat:2> \land <var:J> = <nat:7> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> \} $ into the condition $ \{ <var:S> = <var:y> \land <var:J> = <nat:7> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:S> = <var:y> }} <var:T0> := <nat:2> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:S> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:S> ; <var:T2> := <var:T2> * <var:S> ; <var:J> := <var:T2> ; <var:J> := <var:J> + <var:T1> ; <var:J> := <var:J> + <var:T0> {{ <var:J> = <nat:7> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:y> /\ <var:T2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:y> /\ <var:T2> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:y> /\ <var:T2> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:y> /\ <var:J> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T0> = <nat:2> /\ <var:J> = <nat:7> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:J> = <nat:7> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 