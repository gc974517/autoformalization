\begin{document} \begin{theorem} We define the following code segment such that \begin{verbatim} <var:F1> := <var:h> ; <var:F2> := <var:F1> * <var:h> ; <var:F3> := <var:F2> * <var:h> ; <var:F4> := <var:F3> * <var:h> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:6> ; <var:F2> := <var:F2> * <nat:7> ; <var:F3> := <var:F3> * <nat:9> ; <var:F4> := <var:F4> * <nat:6> ; <var:d> := <var:F4> <var:d> := <var:d> + <var:F3> <var:d> := <var:d> + <var:F2> <var:d> := <var:d> + <var:F1> <var:d> := <var:d> + <var:F0> \end{verbatim} Given it to hold that $ <var:h> = <var:m> $ prior to the execution of the segment of code it holds that we see $ <var:d> = <nat:6> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:1> $ when code finishes . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:h> = <var:m> \} \\ <var:F1> := <var:h> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <var:m> \} \\ <var:F2> := <var:F1> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <var:m> \land <var:F2> = <var:m> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <var:m> \land <var:F2> = <var:m> ^ <nat:2> \land <var:F3> = <var:m> ^ <nat:3> \} \\ <var:F4> := <var:F3> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <var:m> \land <var:F2> = <var:m> ^ <nat:2> \land <var:F3> = <var:m> ^ <nat:3> \land <var:F4> = <var:m> ^ <nat:4> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <var:m> \land <var:F2> = <var:m> ^ <nat:2> \land <var:F3> = <var:m> ^ <nat:3> \land <var:F4> = <var:m> ^ <nat:4> \land <var:F0> = <nat:1> \} \\ <var:F1> := <var:F1> * <nat:6> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <nat:6> \times <var:m> \land <var:F2> = <var:m> ^ <nat:2> \land <var:F3> = <var:m> ^ <nat:3> \land <var:F4> = <var:m> ^ <nat:4> \land <var:F0> = <nat:1> \} \\ <var:F2> := <var:F2> * <nat:7> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <nat:6> \times <var:m> \land <var:F2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:F3> = <var:m> ^ <nat:3> \land <var:F4> = <var:m> ^ <nat:4> \land <var:F0> = <nat:1> \} \\ <var:F3> := <var:F3> * <nat:9> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <nat:6> \times <var:m> \land <var:F2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:m> ^ <nat:3> \land <var:F4> = <var:m> ^ <nat:4> \land <var:F0> = <nat:1> \} \\ <var:F4> := <var:F4> * <nat:6> ; \\ \{ <var:h> = <var:m> \land <var:F1> = <nat:6> \times <var:m> \land <var:F2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:m> ^ <nat:3> \land <var:F4> = <nat:6> \times <var:m> ^ <nat:4> \land <var:F0> = <nat:1> \} \\ <var:d> := <var:F4> \\ \{ <var:h> = <var:m> \land <var:F1> = <nat:6> \times <var:m> \land <var:F2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:m> ^ <nat:3> \land <var:F0> = <nat:1> \land <var:d> = <nat:6> \times <var:m> ^ <nat:4> \} \\ <var:d> := <var:d> + <var:F3> \\ \{ <var:h> = <var:m> \land <var:F1> = <nat:6> \times <var:m> \land <var:F2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:F0> = <nat:1> \land <var:d> = <nat:6> \times <var:m> ^ <nat:4> + <nat:9> \times <var:m> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:F2> \\ \{ <var:h> = <var:m> \land <var:F1> = <nat:6> \times <var:m> \land <var:F0> = <nat:1> \land <var:d> = <nat:6> \times <var:m> ^ <nat:4> + <nat:9> \times <var:m> ^ <nat:3> + <nat:7> \times <var:m> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:F1> \\ \{ <var:h> = <var:m> \land <var:F0> = <nat:1> \land <var:d> = <nat:6> \times <var:m> ^ <nat:4> + <nat:9> \times <var:m> ^ <nat:3> + <nat:7> \times <var:m> ^ <nat:2> + <nat:6> \times <var:m> \} \\ <var:d> := <var:d> + <var:F0> \\ \{ <var:h> = <var:m> \land <var:d> = <nat:6> \times <var:m> ^ <nat:4> + <nat:9> \times <var:m> ^ <nat:3> + <nat:7> \times <var:m> ^ <nat:2> + <nat:6> \times <var:m> + <nat:1> \} \end{eqnarray} Thusly , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <var:F4> : string := " <var:F4> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:h> = <var:m> }} <var:F1> := <var:h> ; <var:F2> := <var:F1> * <var:h> ; <var:F3> := <var:F2> * <var:h> ; <var:F4> := <var:F3> * <var:h> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:6> ; <var:F2> := <var:F2> * <nat:7> ; <var:F3> := <var:F3> * <nat:9> ; <var:F4> := <var:F4> * <nat:6> ; <var:d> := <var:F4> <var:d> := <var:d> + <var:F3> <var:d> := <var:d> + <var:F2> <var:d> := <var:d> + <var:F1> <var:d> := <var:d> + <var:F0> {{ <var:d> = <nat:6> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <var:m> /\ <var:F2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <var:m> /\ <var:F2> = <var:m> ^ <nat:2> /\ <var:F3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <var:m> /\ <var:F2> = <var:m> ^ <nat:2> /\ <var:F3> = <var:m> ^ <nat:3> /\ <var:F4> = <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <var:m> /\ <var:F2> = <var:m> ^ <nat:2> /\ <var:F3> = <var:m> ^ <nat:3> /\ <var:F4> = <var:m> ^ <nat:4> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <nat:6> * <var:m> /\ <var:F2> = <var:m> ^ <nat:2> /\ <var:F3> = <var:m> ^ <nat:3> /\ <var:F4> = <var:m> ^ <nat:4> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <nat:6> * <var:m> /\ <var:F2> = <nat:7> * <var:m> ^ <nat:2> /\ <var:F3> = <var:m> ^ <nat:3> /\ <var:F4> = <var:m> ^ <nat:4> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <nat:6> * <var:m> /\ <var:F2> = <nat:7> * <var:m> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:m> ^ <nat:3> /\ <var:F4> = <var:m> ^ <nat:4> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <nat:6> * <var:m> /\ <var:F2> = <nat:7> * <var:m> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:m> ^ <nat:3> /\ <var:F4> = <nat:6> * <var:m> ^ <nat:4> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <nat:6> * <var:m> /\ <var:F2> = <nat:7> * <var:m> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:m> ^ <nat:3> /\ <var:F0> = <nat:1> /\ <var:d> = <nat:6> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <nat:6> * <var:m> /\ <var:F2> = <nat:7> * <var:m> ^ <nat:2> /\ <var:F0> = <nat:1> /\ <var:d> = <nat:6> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F1> = <nat:6> * <var:m> /\ <var:F0> = <nat:1> /\ <var:d> = <nat:6> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:F0> = <nat:1> /\ <var:d> = <nat:6> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> + <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:d> = <nat:6> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 