\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:y> ; <var:e2> := <nat:6> ; <var:e2> := <var:e2> * <var:y> ; <var:e2> := <var:e2> * <var:y> ; <var:m> := <var:e2> ; <var:m> := <var:m> + <var:e1> ; <var:m> := <var:m> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Assuming --- for any whole numbers $ <var:r> $ --- that we have $ <var:y> = <var:r> $ prior to the execution of the set of commands , then we see $ <var:m> = <nat:6> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + <nat:3> $ once segment of code terminates . \end{theorem} \begin{proof} The application of typical Hoare reasoning yields : \begin{eqnarray} \{ <var:y> = <var:r> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:y> = <var:r> \land <var:e0> = <nat:3> \} \\ <var:e1> := <nat:3> ; \\ \{ <var:y> = <var:r> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \} \\ <var:e1> := <var:e1> * <var:y> ; \\ \{ <var:y> = <var:r> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \cdot <var:r> \} \\ <var:e2> := <nat:6> ; \\ \{ <var:y> = <var:r> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \cdot <var:r> \land <var:e2> = <nat:6> \} \\ <var:e2> := <var:e2> * <var:y> ; \\ \{ <var:y> = <var:r> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \cdot <var:r> \land <var:e2> = <nat:6> \cdot <var:r> \} \\ <var:e2> := <var:e2> * <var:y> ; \\ \{ <var:y> = <var:r> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \cdot <var:r> \land <var:e2> = <nat:6> \cdot <var:r> ^ <nat:2> \} \\ <var:m> := <var:e2> ; \\ \{ <var:y> = <var:r> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \cdot <var:r> \land <var:m> = <nat:6> \cdot <var:r> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:e1> ; \\ \{ <var:y> = <var:r> \land <var:e0> = <nat:3> \land <var:m> = <nat:6> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> \} \\ <var:m> := <var:m> + <var:e0> \\ \{ <var:y> = <var:r> \land <var:m> = <nat:6> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + <nat:3> \} \end{eqnarray} As a result , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:3> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:y> ; <var:e2> := <nat:6> ; <var:e2> := <var:e2> * <var:y> ; <var:e2> := <var:e2> * <var:y> ; <var:m> := <var:e2> ; <var:m> := <var:m> + <var:e1> ; <var:m> := <var:m> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:y> = <var:r> }} <def:poly> {{ <var:m> = <nat:6> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:r> /\ <var:e2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:r> /\ <var:e2> = <nat:6> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:r> /\ <var:e2> = <nat:6> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:r> /\ <var:m> = <nat:6> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:e0> = <nat:3> /\ <var:m> = <nat:6> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:m> = <nat:6> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 