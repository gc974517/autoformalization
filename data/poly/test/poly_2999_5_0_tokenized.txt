\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:3> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:Z> ; <var:f> := <var:g1> ; <var:f> := <var:f> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:Z> = <var:w> $ --- for every $ <var:w> $ --- ahead of running this set of instructions it holds that we have $ <var:f> = <nat:4> \times <var:w> + <nat:3> $ once list of instructions exits . \end{theorem} \begin{proof} Let the below decorated series of instructions . \begin{eqnarray} \{ <var:Z> = <var:w> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:Z> = <var:w> \land <var:g0> = <nat:3> \} \\ <var:g1> := <nat:4> ; \\ \{ <var:Z> = <var:w> \land <var:g0> = <nat:3> \land <var:g1> = <nat:4> \} \\ <var:g1> := <var:g1> * <var:Z> ; \\ \{ <var:Z> = <var:w> \land <var:g0> = <nat:3> \land <var:g1> = <nat:4> \times <var:w> \} \\ <var:f> := <var:g1> ; \\ \{ <var:Z> = <var:w> \land <var:g0> = <nat:3> \land <var:f> = <nat:4> \times <var:w> \} \\ <var:f> := <var:f> + <var:g0> \\ \{ <var:Z> = <var:w> \land <var:f> = <nat:4> \times <var:w> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:Z> ; <var:f> := <var:g1> ; <var:f> := <var:f> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Z> = <var:w> }} <def:poly> {{ <var:f> = <nat:4> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:g0> = <nat:3> /\ <var:f> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:f> = <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 