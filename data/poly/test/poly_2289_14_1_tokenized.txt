\begin{document} \begin{theorem} Consider a set of instructions such that \begin{verbatim} <var:A1> := <var:S> ; <var:A2> := <var:A1> * <var:S> ; <var:A3> := <var:A2> * <var:S> ; <var:A4> := <var:A3> * <var:S> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:8> ; <var:A2> := <var:A2> * <nat:2> ; <var:A3> := <var:A3> * <nat:7> ; <var:A4> := <var:A4> * <nat:6> ; <var:q> := <var:A4> <var:q> := <var:q> + <var:A3> <var:q> := <var:q> + <var:A2> <var:q> := <var:q> + <var:A1> <var:q> := <var:q> + <var:A0> \end{verbatim} Assume ( for any $ <var:g> $ ) $ <var:S> = <var:g> $ before the evaluation of this series of instructions it holds that we have $ <var:q> = <nat:6> \cdot <var:g> ^ <nat:4> + <nat:7> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> + <nat:8> \cdot <var:g> + <nat:7> $ when program executes . \end{theorem} \begin{proof} The course of logic for the program is demonstrated with typical Hoare reasoning . After , we see \begin{eqnarray} \{ <var:S> = <var:g> \} \, <var:A1> := <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \} \, <var:A2> := <var:A1> * <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \} \, <var:A3> := <var:A2> * <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \} \end{eqnarray} This is guaranteed with the assignment law of Hoare logic . Jumping to the following steps seen in our code segment , we have \begin{eqnarray} \{ <var:S> = <var:g> \} \, <var:A1> := <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \} \, <var:A2> := <var:A1> * <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \} \, <var:A3> := <var:A2> * <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \} \end{eqnarray} Advancing , \begin{eqnarray} \{ <var:S> = <var:g> \} \, <var:A1> := <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \} \, <var:A2> := <var:A1> * <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \} \, <var:A3> := <var:A2> * <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \} \, <var:A4> := <var:A3> * <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \land <var:A4> = <var:g> ^ <nat:4> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \land <var:A4> = <var:g> ^ <nat:4> \} \, <var:A0> := <nat:7> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \land <var:A4> = <var:g> ^ <nat:4> \land <var:A0> = <nat:7> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \land <var:A4> = <var:g> ^ <nat:4> \land <var:A0> = <nat:7> \} \, <var:A1> := <var:A1> * <nat:8> \, \{ <var:S> = <var:g> \land <var:A1> = <nat:8> \cdot <var:g> \land <var:A2> = <var:g> ^ <nat:2> \land <var:A3> = <var:g> ^ <nat:3> \land <var:A4> = <var:g> ^ <nat:4> \land <var:A0> = <nat:7> \} \end{eqnarray} This is sound through the variable update law of Hoare techniques . Considering the following bits of codeseen in the series of instructions , we have \begin{eqnarray} \{ <var:S> = <var:g> \} \, <var:A1> := <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \} \\ \{ <var:S> = <var:g> \land <var:A1> = <var:g> \} \, <var:A2> := <var:A1> * <var:S> \, \{ <var:S> = <var:g> \land <var:A1> = <var:g> \land <var:A2> = <var:g> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <var:A4> : string := " <var:A4> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:S> = <var:g> }} <var:A1> := <var:S> ; <var:A2> := <var:A1> * <var:S> ; <var:A3> := <var:A2> * <var:S> ; <var:A4> := <var:A3> * <var:S> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:8> ; <var:A2> := <var:A2> * <nat:2> ; <var:A3> := <var:A3> * <nat:7> ; <var:A4> := <var:A4> * <nat:6> ; <var:q> := <var:A4> <var:q> := <var:q> + <var:A3> <var:q> := <var:q> + <var:A2> <var:q> := <var:q> + <var:A1> <var:q> := <var:q> + <var:A0> {{ <var:q> = <nat:6> * <var:g> ^ <nat:4> + <nat:7> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <var:g> /\ <var:A2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <var:g> /\ <var:A2> = <var:g> ^ <nat:2> /\ <var:A3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <var:g> /\ <var:A2> = <var:g> ^ <nat:2> /\ <var:A3> = <var:g> ^ <nat:3> /\ <var:A4> = <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <var:g> /\ <var:A2> = <var:g> ^ <nat:2> /\ <var:A3> = <var:g> ^ <nat:3> /\ <var:A4> = <var:g> ^ <nat:4> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <var:g> ^ <nat:2> /\ <var:A3> = <var:g> ^ <nat:3> /\ <var:A4> = <var:g> ^ <nat:4> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:A3> = <var:g> ^ <nat:3> /\ <var:A4> = <var:g> ^ <nat:4> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:A3> = <nat:7> * <var:g> ^ <nat:3> /\ <var:A4> = <var:g> ^ <nat:4> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:A3> = <nat:7> * <var:g> ^ <nat:3> /\ <var:A4> = <nat:6> * <var:g> ^ <nat:4> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:A3> = <nat:7> * <var:g> ^ <nat:3> /\ <var:A0> = <nat:7> /\ <var:q> = <nat:6> * <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:A0> = <nat:7> /\ <var:q> = <nat:6> * <var:g> ^ <nat:4> + <nat:7> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A0> = <nat:7> /\ <var:q> = <nat:6> * <var:g> ^ <nat:4> + <nat:7> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A0> = <nat:7> /\ <var:q> = <nat:6> * <var:g> ^ <nat:4> + <nat:7> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:q> = <nat:6> * <var:g> ^ <nat:4> + <nat:7> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 