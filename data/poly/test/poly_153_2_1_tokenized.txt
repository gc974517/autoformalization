\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:8> ; <var:U> := <var:s0> \end{verbatim} Allow that we have $ <var:O> = <var:f> $ before the evaluation of this list of commands it follows that $ <var:U> = <nat:8> $ once program executes . \end{theorem} \begin{proof} The argument for the series of instructions can be done using standard Hoare techniques . Focusing on the proceeding bit of code contained in the list of instructions , we see the line \verb | <var:s0> := <nat:8> ; | . This command moves $ \{ <var:O> = <var:f> \} $ as the condition $ \{ <var:O> = <var:f> \land <var:s0> = <nat:8> \} $ . This is shown by the assignment scheme found in Hoare techniques . Stepping through , we see the variable assignmet code \verb | <var:U> := <var:s0> | . This line forwards the precondition $ \{ <var:O> = <var:f> \land <var:s0> = <nat:8> \} $ as the condition $ \{ <var:O> = <var:f> \land <var:U> = <nat:8> \} $ . This is given with the assignment rule from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:O> = <var:f> }} <var:s0> := <nat:8> ; <var:U> := <var:s0> {{ <var:U> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:U> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 