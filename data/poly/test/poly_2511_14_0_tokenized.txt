\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:6> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:a> ; <var:k2> := <nat:8> ; <var:k2> := <var:k2> * <var:a> ; <var:k2> := <var:k2> * <var:a> ; <var:k3> := <nat:5> ; <var:k3> := <var:k3> * <var:a> ; <var:k3> := <var:k3> * <var:a> ; <var:k3> := <var:k3> * <var:a> ; <var:s> := <var:k3> ; <var:s> := <var:s> + <var:k2> ; <var:s> := <var:s> + <var:k1> ; <var:s> := <var:s> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Given it to hold that $ <var:a> = <var:X> $ prior to running our set of commands , it follows that $ <var:s> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:6> $ when set of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:X> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \} \\ <var:k1> := <nat:1> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \} \\ <var:k1> := <var:k1> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \} \\ <var:k2> := <nat:8> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:k2> = <nat:8> \} \\ <var:k2> := <var:k2> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:k2> = <nat:8> \times <var:X> \} \\ <var:k2> := <var:k2> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:k2> = <nat:8> \times <var:X> ^ <nat:2> \} \\ <var:k3> := <nat:5> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:k2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:k3> = <nat:5> \} \\ <var:k3> := <var:k3> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:k2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:X> \} \\ <var:k3> := <var:k3> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:k2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:X> ^ <nat:2> \} \\ <var:k3> := <var:k3> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:k2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:X> ^ <nat:3> \} \\ <var:s> := <var:k3> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:k2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:s> = <nat:5> \times <var:X> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:k2> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:k1> = <nat:1> \times <var:X> \land <var:s> = <nat:5> \times <var:X> ^ <nat:3> + <nat:8> \times <var:X> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:k1> ; \\ \{ <var:a> = <var:X> \land <var:k0> = <nat:6> \land <var:s> = <nat:5> \times <var:X> ^ <nat:3> + <nat:8> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> \} \\ <var:s> := <var:s> + <var:k0> \\ \{ <var:a> = <var:X> \land <var:s> = <nat:5> \times <var:X> ^ <nat:3> + <nat:8> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:6> \} \end{eqnarray} Applying standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k0> := <nat:6> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:a> ; <var:k2> := <nat:8> ; <var:k2> := <var:k2> * <var:a> ; <var:k2> := <var:k2> * <var:a> ; <var:k3> := <nat:5> ; <var:k3> := <var:k3> * <var:a> ; <var:k3> := <var:k3> * <var:a> ; <var:k3> := <var:k3> * <var:a> ; <var:s> := <var:k3> ; <var:s> := <var:s> + <var:k2> ; <var:s> := <var:s> + <var:k1> ; <var:s> := <var:s> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:a> = <var:X> }} <def:poly> {{ <var:s> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:8> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:k3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:s> = <nat:5> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:1> * <var:X> /\ <var:s> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:k0> = <nat:6> /\ <var:s> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:s> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 