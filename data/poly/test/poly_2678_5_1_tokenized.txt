\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:X1> := <var:x> ; <var:X0> := <nat:3> ; <var:X1> := <var:X1> * <nat:3> ; <var:w> := <var:X1> <var:w> := <var:w> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:x> = <var:R> $ prior to the execution of this series of instructions , then we see $ <var:w> = <nat:3> \times <var:R> + <nat:3> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:x> = <var:R> \} \\ <var:X1> := <var:x> ; \\ \{ <var:x> = <var:R> \land <var:X1> = <var:R> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:x> = <var:R> \land <var:X1> = <var:R> \land <var:X0> = <nat:3> \} \\ <var:X1> := <var:X1> * <nat:3> ; \\ \{ <var:x> = <var:R> \land <var:X1> = <nat:3> * <var:R> \land <var:X0> = <nat:3> \} \\ <var:w> := <var:X1> \\ \{ <var:x> = <var:R> \land <var:X0> = <nat:3> \land <var:w> = <nat:3> * <var:R> \} \\ <var:w> := <var:w> + <var:X0> \\ \{ <var:x> = <var:R> \land <var:w> = <nat:3> * <var:R> + <nat:3> \} \end{eqnarray} As a result , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X1> := <var:x> ; <var:X0> := <nat:3> ; <var:X1> := <var:X1> * <nat:3> ; <var:w> := <var:X1> <var:w> := <var:w> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:x> = <var:R> }} <def:poly> {{ <var:w> = <nat:3> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:R> /\ <var:X1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:R> /\ <var:X1> = <var:R> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:R> /\ <var:X1> = <nat:3> * <var:R> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:R> /\ <var:X0> = <nat:3> /\ <var:w> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:R> /\ <var:w> = <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 