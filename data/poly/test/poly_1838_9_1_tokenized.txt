\begin{document} \begin{theorem} Take the following series of commands such that \begin{verbatim} <var:m1> := <var:X> ; <var:m2> := <var:m1> * <var:X> ; <var:m3> := <var:m2> * <var:X> ; <var:m0> := <nat:5> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:1> ; <var:I> := <var:m3> <var:I> := <var:I> + <var:m2> <var:I> := <var:I> + <var:m0> \end{verbatim} Assuming , given every integers $ <var:h> $ , $ <var:X> = <var:h> $ prior to running our set of commands it holds that we have $ <var:I> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:5> $ once series of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:h> \} \\ <var:m1> := <var:X> ; \\ \{ <var:X> = <var:h> \land <var:m1> = <var:h> \} \\ <var:m2> := <var:m1> * <var:X> ; \\ \{ <var:X> = <var:h> \land <var:m1> = <var:h> \land <var:m2> = <var:h> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:X> ; \\ \{ <var:X> = <var:h> \land <var:m1> = <var:h> \land <var:m2> = <var:h> ^ <nat:2> \land <var:m3> = <var:h> ^ <nat:3> \} \\ <var:m0> := <nat:5> ; \\ \{ <var:X> = <var:h> \land <var:m1> = <var:h> \land <var:m2> = <var:h> ^ <nat:2> \land <var:m3> = <var:h> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ <var:m2> := <var:m2> * <nat:2> ; \\ \{ <var:X> = <var:h> \land <var:m1> = <var:h> \land <var:m2> = <nat:2> * <var:h> ^ <nat:2> \land <var:m3> = <var:h> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ <var:m3> := <var:m3> * <nat:1> ; \\ \{ <var:X> = <var:h> \land <var:m1> = <var:h> \land <var:m2> = <nat:2> * <var:h> ^ <nat:2> \land <var:m3> = <nat:1> * <var:h> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ <var:I> := <var:m3> \\ \{ <var:X> = <var:h> \land <var:m1> = <var:h> \land <var:m2> = <nat:2> * <var:h> ^ <nat:2> \land <var:m0> = <nat:5> \land <var:I> = <nat:1> * <var:h> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:m2> \\ \{ <var:X> = <var:h> \land <var:m1> = <var:h> \land <var:m0> = <nat:5> \land <var:I> = <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:m0> \\ \{ <var:X> = <var:h> \land <var:I> = <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:5> \} \end{eqnarray} The application of Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:X> = <var:h> }} <var:m1> := <var:X> ; <var:m2> := <var:m1> * <var:X> ; <var:m3> := <var:m2> * <var:X> ; <var:m0> := <nat:5> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:1> ; <var:I> := <var:m3> <var:I> := <var:I> + <var:m2> <var:I> := <var:I> + <var:m0> {{ <var:I> = <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:m1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:m1> = <var:h> /\ <var:m2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:m1> = <var:h> /\ <var:m2> = <var:h> ^ <nat:2> /\ <var:m3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:m1> = <var:h> /\ <var:m2> = <var:h> ^ <nat:2> /\ <var:m3> = <var:h> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:m1> = <var:h> /\ <var:m2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:m3> = <var:h> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:m1> = <var:h> /\ <var:m2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:h> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:m1> = <var:h> /\ <var:m2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:m0> = <nat:5> /\ <var:I> = <nat:1> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:m1> = <var:h> /\ <var:m0> = <nat:5> /\ <var:I> = <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:I> = <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 