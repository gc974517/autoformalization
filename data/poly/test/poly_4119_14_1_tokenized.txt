\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:q> ; <var:s2> := <var:s1> * <var:q> ; <var:s3> := <var:s2> * <var:q> ; <var:s4> := <var:s3> * <var:q> ; <var:s0> := <nat:6> ; <var:s1> := <var:s1> * <nat:8> ; <var:s2> := <var:s2> * <nat:8> ; <var:s3> := <var:s3> * <nat:9> ; <var:s4> := <var:s4> * <nat:4> ; <var:n> := <var:s4> <var:n> := <var:n> + <var:s3> <var:n> := <var:n> + <var:s2> <var:n> := <var:n> + <var:s1> <var:n> := <var:n> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:q> = <var:p> $ , assuming some natural numbers $ <var:p> $ , before the evaluation of this segment of code , then we see $ <var:n> = <nat:4> \cdot <var:p> ^ <nat:4> + <nat:9> \cdot <var:p> ^ <nat:3> + <nat:8> \cdot <var:p> ^ <nat:2> + <nat:8> \cdot <var:p> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:p> \} \\ <var:s1> := <var:q> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <var:p> \} \\ <var:s2> := <var:s1> * <var:q> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <var:p> \land <var:s2> = <var:p> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:q> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <var:p> \land <var:s2> = <var:p> ^ <nat:2> \land <var:s3> = <var:p> ^ <nat:3> \} \\ <var:s4> := <var:s3> * <var:q> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <var:p> \land <var:s2> = <var:p> ^ <nat:2> \land <var:s3> = <var:p> ^ <nat:3> \land <var:s4> = <var:p> ^ <nat:4> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <var:p> \land <var:s2> = <var:p> ^ <nat:2> \land <var:s3> = <var:p> ^ <nat:3> \land <var:s4> = <var:p> ^ <nat:4> \land <var:s0> = <nat:6> \} \\ <var:s1> := <var:s1> * <nat:8> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <nat:8> * <var:p> \land <var:s2> = <var:p> ^ <nat:2> \land <var:s3> = <var:p> ^ <nat:3> \land <var:s4> = <var:p> ^ <nat:4> \land <var:s0> = <nat:6> \} \\ <var:s2> := <var:s2> * <nat:8> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <nat:8> * <var:p> \land <var:s2> = <nat:8> * <var:p> ^ <nat:2> \land <var:s3> = <var:p> ^ <nat:3> \land <var:s4> = <var:p> ^ <nat:4> \land <var:s0> = <nat:6> \} \\ <var:s3> := <var:s3> * <nat:9> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <nat:8> * <var:p> \land <var:s2> = <nat:8> * <var:p> ^ <nat:2> \land <var:s3> = <nat:9> * <var:p> ^ <nat:3> \land <var:s4> = <var:p> ^ <nat:4> \land <var:s0> = <nat:6> \} \\ <var:s4> := <var:s4> * <nat:4> ; \\ \{ <var:q> = <var:p> \land <var:s1> = <nat:8> * <var:p> \land <var:s2> = <nat:8> * <var:p> ^ <nat:2> \land <var:s3> = <nat:9> * <var:p> ^ <nat:3> \land <var:s4> = <nat:4> * <var:p> ^ <nat:4> \land <var:s0> = <nat:6> \} \\ <var:n> := <var:s4> \\ \{ <var:q> = <var:p> \land <var:s1> = <nat:8> * <var:p> \land <var:s2> = <nat:8> * <var:p> ^ <nat:2> \land <var:s3> = <nat:9> * <var:p> ^ <nat:3> \land <var:s0> = <nat:6> \land <var:n> = <nat:4> * <var:p> ^ <nat:4> \} \\ <var:n> := <var:n> + <var:s3> \\ \{ <var:q> = <var:p> \land <var:s1> = <nat:8> * <var:p> \land <var:s2> = <nat:8> * <var:p> ^ <nat:2> \land <var:s0> = <nat:6> \land <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:s2> \\ \{ <var:q> = <var:p> \land <var:s1> = <nat:8> * <var:p> \land <var:s0> = <nat:6> \land <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:s1> \\ \{ <var:q> = <var:p> \land <var:s0> = <nat:6> \land <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:8> * <var:p> \} \\ <var:n> := <var:n> + <var:s0> \\ \{ <var:q> = <var:p> \land <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:6> \} \end{eqnarray} The application of typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Definition <def:poly> := <var:s1> := <var:q> ; <var:s2> := <var:s1> * <var:q> ; <var:s3> := <var:s2> * <var:q> ; <var:s4> := <var:s3> * <var:q> ; <var:s0> := <nat:6> ; <var:s1> := <var:s1> * <nat:8> ; <var:s2> := <var:s2> * <nat:8> ; <var:s3> := <var:s3> * <nat:9> ; <var:s4> := <var:s4> * <nat:4> ; <var:n> := <var:s4> <var:n> := <var:n> + <var:s3> <var:n> := <var:n> + <var:s2> <var:n> := <var:n> + <var:s1> <var:n> := <var:n> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:q> = <var:p> }} <def:poly> {{ <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <var:p> /\ <var:s2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <var:p> /\ <var:s2> = <var:p> ^ <nat:2> /\ <var:s3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <var:p> /\ <var:s2> = <var:p> ^ <nat:2> /\ <var:s3> = <var:p> ^ <nat:3> /\ <var:s4> = <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <var:p> /\ <var:s2> = <var:p> ^ <nat:2> /\ <var:s3> = <var:p> ^ <nat:3> /\ <var:s4> = <var:p> ^ <nat:4> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <nat:8> * <var:p> /\ <var:s2> = <var:p> ^ <nat:2> /\ <var:s3> = <var:p> ^ <nat:3> /\ <var:s4> = <var:p> ^ <nat:4> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <nat:8> * <var:p> /\ <var:s2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:s3> = <var:p> ^ <nat:3> /\ <var:s4> = <var:p> ^ <nat:4> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <nat:8> * <var:p> /\ <var:s2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:s3> = <nat:9> * <var:p> ^ <nat:3> /\ <var:s4> = <var:p> ^ <nat:4> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <nat:8> * <var:p> /\ <var:s2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:s3> = <nat:9> * <var:p> ^ <nat:3> /\ <var:s4> = <nat:4> * <var:p> ^ <nat:4> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <nat:8> * <var:p> /\ <var:s2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:s3> = <nat:9> * <var:p> ^ <nat:3> /\ <var:s0> = <nat:6> /\ <var:n> = <nat:4> * <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <nat:8> * <var:p> /\ <var:s2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:s0> = <nat:6> /\ <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s1> = <nat:8> * <var:p> /\ <var:s0> = <nat:6> /\ <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:s0> = <nat:6> /\ <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:n> = <nat:4> * <var:p> ^ <nat:4> + <nat:9> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 