\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:9> ; <var:d1> := <nat:4> ; <var:d1> := <var:d1> * <var:S> ; <var:d2> := <nat:3> ; <var:d2> := <var:d2> * <var:S> ; <var:d2> := <var:d2> * <var:S> ; <var:Z> := <var:d2> ; <var:Z> := <var:Z> + <var:d1> ; <var:Z> := <var:Z> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:S> = <var:O> $ prior to interpreting our series of instructions , it holds that $ <var:Z> = <nat:3> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:9> $ once segment of code has terminated . \end{theorem} \begin{proof} The flow of logic for this program can be seen with standard Hoare logic . Looking at the subsequent piece of code in the segment of code , we have the binding command letting $ <nat:9> $ as $ <var:d0>$ . This forwards the condition $ \{ <var:S> = <var:O> \} $ as the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \} $ . This is shown to be logically sound by the assignment scheme in usual Hoare reasoning . Looking at the upcoming statement in our code segment , we see the variable assignmet line \verb | <var:d1> := <nat:4> ; | . This line redefines the precondition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \} $ as the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \} $ . Next , we have the variable update statement yielding $ <var:d1> * <var:S> $ into $ <var:d1>$ . This command forwards $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \} $ as the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \} $ . Moving onward , we have the variable binding line letting $ <nat:3> $ as $ <var:d2>$ . This line forwards the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \} $ into the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \land <var:d2> = <nat:3> \} $ . This is known to be sound with the assignment rule given in usual Hoare reasoning . Advancing on , the variable binding statement yielding $ <var:d2> * <var:S> $ as $ <var:d2>$ . This advances the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \land <var:d2> = <nat:3> \} $ into the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \land <var:d2> = <nat:3> \cdot <var:O> \} $ . This is guaranteed using the assignment rule from usual Hoare reasoning . Moving forward to the next step , we have the line yielding $ <var:d2> * <var:S> $ as $ <var:d2>$ . This statement forwards the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \land <var:d2> = <nat:3> \cdot <var:O> \} $ as the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \land <var:d2> = <nat:3> \cdot <var:O> ^ <nat:2> \} $ . Focusing on the subsequent step seen in our list of commands , we see the environment update code defining $ <var:d2> $ toward $ <var:Z>$ . This line takes the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \land <var:d2> = <nat:3> \cdot <var:O> ^ <nat:2> \} $ as $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \land <var:Z> = <nat:3> \cdot <var:O> ^ <nat:2> \} $ . This is deduced through the assignment scheme from usual Hoare reasoning . Advancing to the next step found in our segment of code , we have the environment update command assigning $ <var:Z> + <var:d1> $ toward $ <var:Z>$ . This forwards the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:d1> = <nat:4> \cdot <var:O> \land <var:Z> = <nat:3> \cdot <var:O> ^ <nat:2> \} $ to the condition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:Z> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> \} $ . Looking at the next line found in our segment of code , we have the binding statement assigning $ <var:Z> + <var:d0$ toward $ <var:Z>$ . This code transfers the precondition $ \{ <var:S> = <var:O> \land <var:d0> = <nat:9> \land <var:Z> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> \} $ as the condition $ \{ <var:S> = <var:O> \land <var:Z> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d0> := <nat:9> ; <var:d1> := <nat:4> ; <var:d1> := <var:d1> * <var:S> ; <var:d2> := <nat:3> ; <var:d2> := <var:d2> * <var:S> ; <var:d2> := <var:d2> * <var:S> ; <var:Z> := <var:d2> ; <var:Z> := <var:Z> + <var:d1> ; <var:Z> := <var:Z> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:S> = <var:O> }} <def:poly> {{ <var:Z> = <nat:3> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:4> * <var:O> /\ <var:d2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:4> * <var:O> /\ <var:d2> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:4> * <var:O> /\ <var:d2> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:4> * <var:O> /\ <var:Z> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:9> /\ <var:Z> = <nat:3> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:Z> = <nat:3> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 