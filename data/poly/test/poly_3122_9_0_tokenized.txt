\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:7> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:F> ; <var:E2> := <nat:5> ; <var:E2> := <var:E2> * <var:F> ; <var:E2> := <var:E2> * <var:F> ; <var:S> := <var:E2> ; <var:S> := <var:S> + <var:E1> ; <var:S> := <var:S> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Allowing it to be that $ <var:F> = <var:O> $ before executing this series of instructions , it holds that we have $ <var:S> = <nat:5> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:O> \} \\ <var:E0> := <nat:7> ; \\ \{ <var:F> = <var:O> \land <var:E0> = <nat:7> \} \\ <var:E1> := <nat:3> ; \\ \{ <var:F> = <var:O> \land <var:E0> = <nat:7> \land <var:E1> = <nat:3> \} \\ <var:E1> := <var:E1> * <var:F> ; \\ \{ <var:F> = <var:O> \land <var:E0> = <nat:7> \land <var:E1> = <nat:3> \times <var:O> \} \\ <var:E2> := <nat:5> ; \\ \{ <var:F> = <var:O> \land <var:E0> = <nat:7> \land <var:E1> = <nat:3> \times <var:O> \land <var:E2> = <nat:5> \} \\ <var:E2> := <var:E2> * <var:F> ; \\ \{ <var:F> = <var:O> \land <var:E0> = <nat:7> \land <var:E1> = <nat:3> \times <var:O> \land <var:E2> = <nat:5> \times <var:O> \} \\ <var:E2> := <var:E2> * <var:F> ; \\ \{ <var:F> = <var:O> \land <var:E0> = <nat:7> \land <var:E1> = <nat:3> \times <var:O> \land <var:E2> = <nat:5> \times <var:O> ^ <nat:2> \} \\ <var:S> := <var:E2> ; \\ \{ <var:F> = <var:O> \land <var:E0> = <nat:7> \land <var:E1> = <nat:3> \times <var:O> \land <var:S> = <nat:5> \times <var:O> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:E1> ; \\ \{ <var:F> = <var:O> \land <var:E0> = <nat:7> \land <var:S> = <nat:5> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> \} \\ <var:S> := <var:S> + <var:E0> \\ \{ <var:F> = <var:O> \land <var:S> = <nat:5> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> + <nat:7> \} \end{eqnarray} Using typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:7> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:F> ; <var:E2> := <nat:5> ; <var:E2> := <var:E2> * <var:F> ; <var:E2> := <var:E2> * <var:F> ; <var:S> := <var:E2> ; <var:S> := <var:S> + <var:E1> ; <var:S> := <var:S> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:F> = <var:O> }} <def:poly> {{ <var:S> = <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:3> * <var:O> /\ <var:E2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:3> * <var:O> /\ <var:E2> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:3> * <var:O> /\ <var:E2> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:3> * <var:O> /\ <var:S> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:E0> = <nat:7> /\ <var:S> = <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:O> /\ <var:S> = <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 