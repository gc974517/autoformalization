\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:3> ; <var:B> := <nat:2> + <var:B> * <var:P> ; <var:B> := <nat:4> + <var:B> * <var:P> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Assuming , letting positive integer coefficients $ <var:E> $ , that $ <var:P> = <var:E> $ prior to the evaluation of this series of commands , it must be that we have $ <var:B> = <nat:3> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:4> $ . \end{theorem} \begin{proof} See that the following decorated program . \begin{eqnarray} \{ <var:P> = <var:E> \} \\ <var:B> := <nat:3> ; \\ \{ <var:P> = <var:E> \land <var:B> = <nat:3> \} \\ <var:B> := <nat:2> + <var:B> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:B> = <nat:3> \times <var:E> + <nat:2> \} \\ <var:B> := <nat:4> + <var:B> * <var:P> \\ \{ <var:P> = <var:E> \land <var:B> = <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:3> ; <var:B> := <nat:2> + <var:B> * <var:P> ; <var:B> := <nat:4> + <var:B> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:P> = <var:E> }} <def:poly> {{ <var:B> = <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:B> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:B> = <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:B> = <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 