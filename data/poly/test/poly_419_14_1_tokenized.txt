\begin{document} \begin{theorem} Consider a set of commands as follows \begin{verbatim} <var:W1> := <var:b> ; <var:W2> := <var:W1> * <var:b> ; <var:W3> := <var:W2> * <var:b> ; <var:W4> := <var:W3> * <var:b> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:8> ; <var:W3> := <var:W3> * <nat:8> ; <var:W4> := <var:W4> * <nat:9> ; <var:S> := <var:W4> <var:S> := <var:S> + <var:W3> <var:S> := <var:S> + <var:W2> <var:S> := <var:S> + <var:W1> <var:S> := <var:S> + <var:W0> \end{verbatim} Assuming that $ <var:b> = <var:r> $ --- letting $ <var:r> \in \mathbb{N} $ --- ahead of evaluating the series of instructions it holds that we see $ <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be seen with standard Hoare logic . After , the assignment code \verb | <var:W1> := <var:b> ; | . This command redefines the condition $ \{ <var:b> = <var:r> \} $ to the postcondition $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \} $ . Immediately following , we have the statement assigning $ <var:W1> * <var:b> $ toward $ <var:W2>$ . This command forwards $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \} $ to the condition $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \} $ . Immediately following , we have the line assigning $ <var:W2> * <var:b> $ as $ <var:W3>$ . This advances the condition $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \} $ to $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \} $ . Moving on , we see the variable update code yielding $ <var:W3> * <var:b> $ toward $ <var:W4>$ . This forwards the condition $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \} $ toward the condition $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \} $ . Immediately after , we see the variable binding line yielding $ <nat:8> $ to $ <var:W0>$ . This command transfers $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \} $ to the condition $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . Immediately following , we see the assignment line \verb | <var:W1> := <var:W1> * <nat:2> ; | . This forwards the precondition $ \{ <var:b> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ toward $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . This is rigorously given by the assignment inference rule defined by typical Hoare techniques . Moving on to the proceeding command found in the list of instructions , we have the variable assignmet statement giving $ <var:W2> * <nat:8> $ as $ <var:W2>$ . This line moves the condition $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ toward $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . Going to the next step , we see the assignment line binding $ <var:W3> * <nat:8> $ into $ <var:W3>$ . This redefines $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ into the condition $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W3> = <nat:8> * <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . This is known to be sound using the assignment law from standard Hoare techniques . Paying attention to the upcoming bit of code in the set of instructions , we have the variable binding line assigning $ <var:W4> * <nat:9> $ as $ <var:W4>$ . This takes the condition $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W3> = <nat:8> * <var:r> ^ <nat:3> \land <var:W4> = <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ as the postcondition $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W3> = <nat:8> * <var:r> ^ <nat:3> \land <var:W4> = <nat:9> * <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . Following , we have the environment update statement \verb | <var:S> := <var:W4> | . This code takes the condition $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W3> = <nat:8> * <var:r> ^ <nat:3> \land <var:W4> = <nat:9> * <var:r> ^ <nat:4> \land <var:W0> = <nat:8> \} $ as the postcondition $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W3> = <nat:8> * <var:r> ^ <nat:3> \land <var:W0> = <nat:8> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> \} $ . Jumping to the upcoming bit of code contained in the series of commands , we have the variable update code \verb | <var:S> := <var:S> + <var:W3> | . This line transfers $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W3> = <nat:8> * <var:r> ^ <nat:3> \land <var:W0> = <nat:8> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> \} $ toward $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W0> = <nat:8> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> \} $ . This is shown by the assignment inference rule given in usual Hoare reasoning . Observing the upcoming command contained in the segment of code , we have the variable update line \verb | <var:S> := <var:S> + <var:W2> | . This transfers $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W2> = <nat:8> * <var:r> ^ <nat:2> \land <var:W0> = <nat:8> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> \} $ to the postcondition $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W0> = <nat:8> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> \} $ . Moving forward , we have the assignment line assigning $ <var:S> + <var:W1$ to $ <var:S>$ . This code takes $ \{ <var:b> = <var:r> \land <var:W1> = <nat:2> * <var:r> \land <var:W0> = <nat:8> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> \} $ into the condition $ \{ <var:b> = <var:r> \land <var:W0> = <nat:8> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:2> * <var:r> \} $ . Immediately after , the variable update command \verb | <var:S> := <var:S> + <var:W0> | . This forwards $ \{ <var:b> = <var:r> \land <var:W0> = <nat:8> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:2> * <var:r> \} $ to $ \{ <var:b> = <var:r> \land <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:8> \} $ . This is shown by the assignment rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:b> = <var:r> }} <var:W1> := <var:b> ; <var:W2> := <var:W1> * <var:b> ; <var:W3> := <var:W2> * <var:b> ; <var:W4> := <var:W3> * <var:b> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:8> ; <var:W3> := <var:W3> * <nat:8> ; <var:W4> := <var:W4> * <nat:9> ; <var:S> := <var:W4> <var:S> := <var:S> + <var:W3> <var:S> := <var:S> + <var:W2> <var:S> := <var:S> + <var:W1> <var:S> := <var:S> + <var:W0> {{ <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> /\ <var:W4> = <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> /\ <var:W4> = <var:r> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <nat:2> * <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> /\ <var:W4> = <var:r> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <nat:2> * <var:r> /\ <var:W2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> /\ <var:W4> = <var:r> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <nat:2> * <var:r> /\ <var:W2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:r> ^ <nat:3> /\ <var:W4> = <var:r> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <nat:2> * <var:r> /\ <var:W2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:r> ^ <nat:3> /\ <var:W4> = <nat:9> * <var:r> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <nat:2> * <var:r> /\ <var:W2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:r> ^ <nat:3> /\ <var:W0> = <nat:8> /\ <var:S> = <nat:9> * <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <nat:2> * <var:r> /\ <var:W2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:W0> = <nat:8> /\ <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W1> = <nat:2> * <var:r> /\ <var:W0> = <nat:8> /\ <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:W0> = <nat:8> /\ <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:S> = <nat:9> * <var:r> ^ <nat:4> + <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 