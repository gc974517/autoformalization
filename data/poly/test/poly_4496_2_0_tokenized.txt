\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:6> ; <var:j> := <var:y0> \end{verbatim} Allowing it to hold that $ <var:T> = <var:D> $ ahead of interpreting the program it holds that we have $ <var:j> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:D> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:T> = <var:D> \land <var:y0> = <nat:6> \} \\ <var:j> := <var:y0> \\ \{ <var:T> = <var:D> \land <var:j> = <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:T> = <var:D> }} <var:y0> := <nat:6> ; <var:j> := <var:y0> {{ <var:j> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:j> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 