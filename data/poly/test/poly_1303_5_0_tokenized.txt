\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:8> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:o> ; <var:g> := <var:G1> ; <var:g> := <var:g> + <var:G0> \end{verbatim} Given that we have $ <var:o> = <var:Z> $ before running this series of commands , then we see $ <var:g> = <nat:8> * <var:Z> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:Z> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:o> = <var:Z> \land <var:G0> = <nat:8> \} \\ <var:G1> := <nat:8> ; \\ \{ <var:o> = <var:Z> \land <var:G0> = <nat:8> \land <var:G1> = <nat:8> \} \\ <var:G1> := <var:G1> * <var:o> ; \\ \{ <var:o> = <var:Z> \land <var:G0> = <nat:8> \land <var:G1> = <nat:8> \times <var:Z> \} \\ <var:g> := <var:G1> ; \\ \{ <var:o> = <var:Z> \land <var:G0> = <nat:8> \land <var:g> = <nat:8> \times <var:Z> \} \\ <var:g> := <var:g> + <var:G0> \\ \{ <var:o> = <var:Z> \land <var:g> = <nat:8> \times <var:Z> + <nat:8> \} \end{eqnarray} Utilizing usual Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:o> = <var:Z> }} <var:G0> := <nat:8> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:o> ; <var:g> := <var:G1> ; <var:g> := <var:g> + <var:G0> {{ <var:g> = <nat:8> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:G0> = <nat:8> /\ <var:g> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:g> = <nat:8> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 