\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L1> := <var:g> ; <var:L2> := <var:L1> * <var:g> ; <var:L3> := <var:L2> * <var:g> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:7> ; <var:L2> := <var:L2> * <nat:1> ; <var:L3> := <var:L3> * <nat:1> ; <var:b> := <var:L3> <var:b> := <var:b> + <var:L2> <var:b> := <var:b> + <var:L1> <var:b> := <var:b> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( taking natural coefficients $ <var:B> $ ) $ <var:g> = <var:B> $ ahead of evaluating the set of instructions , then we have $ <var:b> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> + <nat:1> $ after list of instructions has finished . \end{theorem} \begin{proof} The flow of logic for this series of commands is given using usual Hoare logic . Advancing , the variable update command \verb | <var:L1> := <var:g> ; | . This code transfers the condition $ \{ <var:g> = <var:B> \} $ into the postcondition $ \{ <var:g> = <var:B> \land <var:L1> = <var:B> \} $ . Moving on to the next step , we see the assignment statement \verb | <var:L2> := <var:L1> * <var:g> ; | . This command redefines $ \{ <var:g> = <var:B> \land <var:L1> = <var:B> \} $ into $ \{ <var:g> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \} $ . Moving on to the next step , the variable binding command \verb | <var:L3> := <var:L2> * <var:g> ; | . This advances the precondition $ \{ <var:g> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \} $ as the condition $ \{ <var:g> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \} $ . This is guaranteed using the assignment law found in Hoare logic . Going forward , we see the statement \verb | <var:L0> := <nat:1> ; | . This code advances the condition $ \{ <var:g> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \} $ toward $ \{ <var:g> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:1> \} $ . This is given through the assignment rule defined by typical Hoare techniques . Immediately following , the variable update command \verb | <var:L1> := <var:L1> * <nat:7> ; | . This line transfers the precondition $ \{ <var:g> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:1> \} $ toward $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:1> \} $ . This is shown to be logically sound by the assignment inference rule in typical Hoare techniques . Stepping forward , we see the variable assignmet statement giving $ <var:L2> * <nat:1> $ toward $ <var:L2>$ . This forwards $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:1> \} $ toward the condition $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L2> = <nat:1> * <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:1> \} $ . Moving forward , we have the binding code defining $ <var:L3> * <nat:1> $ as $ <var:L3>$ . This line forwards the precondition $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L2> = <nat:1> * <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:1> \} $ toward the postcondition $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L2> = <nat:1> * <var:B> ^ <nat:2> \land <var:L3> = <nat:1> * <var:B> ^ <nat:3> \land <var:L0> = <nat:1> \} $ . This is guaranteed through the assignment scheme found in typical Hoare techniques . Observing the proceeding step contained in our program , we have the variable assignmet statement defining $ <var:L3$ as $ <var:b>$ . This forwards the precondition $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L2> = <nat:1> * <var:B> ^ <nat:2> \land <var:L3> = <nat:1> * <var:B> ^ <nat:3> \land <var:L0> = <nat:1> \} $ as the postcondition $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L2> = <nat:1> * <var:B> ^ <nat:2> \land <var:L0> = <nat:1> \land <var:b> = <nat:1> * <var:B> ^ <nat:3> \} $ . Moving on to the proceeding step contained in our series of commands , we see the assignment line \verb | <var:b> := <var:b> + <var:L2> | . This line redefines the condition $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L2> = <nat:1> * <var:B> ^ <nat:2> \land <var:L0> = <nat:1> \land <var:b> = <nat:1> * <var:B> ^ <nat:3> \} $ to the postcondition $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L0> = <nat:1> \land <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> \} $ . This is guaranteed through the assignment scheme defined in standard Hoare logic . Moving on to the following step contained in the series of instructions , the variable binding command \verb | <var:b> := <var:b> + <var:L1> | . This forwards $ \{ <var:g> = <var:B> \land <var:L1> = <nat:7> * <var:B> \land <var:L0> = <nat:1> \land <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> \} $ to the condition $ \{ <var:g> = <var:B> \land <var:L0> = <nat:1> \land <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:7> * <var:B> \} $ . This is guaranteed by the assignment scheme defined in typical Hoare techniques . Moving on to the following statement found in the segment of code , we have the binding command \verb | <var:b> := <var:b> + <var:L0> | . This takes the condition $ \{ <var:g> = <var:B> \land <var:L0> = <nat:1> \land <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:7> * <var:B> \} $ into the postcondition $ \{ <var:g> = <var:B> \land <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:1> \} $ . This is sound using the assignment law given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L1> := <var:g> ; <var:L2> := <var:L1> * <var:g> ; <var:L3> := <var:L2> * <var:g> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:7> ; <var:L2> := <var:L2> * <nat:1> ; <var:L3> := <var:L3> * <nat:1> ; <var:b> := <var:L3> <var:b> := <var:b> + <var:L2> <var:b> := <var:b> + <var:L1> <var:b> := <var:b> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:g> = <var:B> }} <def:poly> {{ <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <nat:7> * <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <nat:7> * <var:B> /\ <var:L2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <nat:7> * <var:B> /\ <var:L2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:L3> = <nat:1> * <var:B> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <nat:7> * <var:B> /\ <var:L2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:L0> = <nat:1> /\ <var:b> = <nat:1> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L1> = <nat:7> * <var:B> /\ <var:L0> = <nat:1> /\ <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:L0> = <nat:1> /\ <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:b> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 