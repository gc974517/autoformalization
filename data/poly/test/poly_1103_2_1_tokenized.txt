\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:6> ; <var:r> := <var:g0> \end{verbatim} Assume $ <var:l> = <var:w> $ ( with some whole numbers $ <var:w> $ ) ahead of the execution of this series of instructions it holds that we have $ <var:r> = <nat:6> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is evident using standard Hoare techniques . Moving on to the next commands seen in our program , we see \begin{eqnarray} \{ <var:l> = <var:w> \} \, <var:g0> := <nat:6> \, \{ <var:l> = <var:w> \land <var:g0> = <nat:6> \} \\ \{ <var:l> = <var:w> \land <var:g0> = <nat:6> \} \, <var:r> := <var:g0\, \{ <var:l> = <var:w> \land <var:r> = <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:l> = <var:w> }} <var:g0> := <nat:6> ; <var:r> := <var:g0> {{ <var:r> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:r> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 