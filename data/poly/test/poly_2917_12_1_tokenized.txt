\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:p1> := <var:A> ; <var:p2> := <var:p1> * <var:A> ; <var:p3> := <var:p2> * <var:A> ; <var:p4> := <var:p3> * <var:A> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:4> ; <var:p2> := <var:p2> * <nat:1> ; <var:p4> := <var:p4> * <nat:4> ; <var:T> := <var:p4> <var:T> := <var:T> + <var:p2> <var:T> := <var:T> + <var:p1> <var:T> := <var:T> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Allowing it to hold that $ <var:A> = <var:q> $ , for some positive coefficients $ <var:q> $ , before the execution of this set of commands , it holds that we see $ <var:T> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> $ . \end{theorem} \begin{proof} Notice this decorated segment of code . \begin{eqnarray} \{ <var:A> = <var:q> \} \\ <var:p1> := <var:A> ; \\ \{ <var:A> = <var:q> \land <var:p1> = <var:q> \} \\ <var:p2> := <var:p1> * <var:A> ; \\ \{ <var:A> = <var:q> \land <var:p1> = <var:q> \land <var:p2> = <var:q> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:A> ; \\ \{ <var:A> = <var:q> \land <var:p1> = <var:q> \land <var:p2> = <var:q> ^ <nat:2> \land <var:p3> = <var:q> ^ <nat:3> \} \\ <var:p4> := <var:p3> * <var:A> ; \\ \{ <var:A> = <var:q> \land <var:p1> = <var:q> \land <var:p2> = <var:q> ^ <nat:2> \land <var:p3> = <var:q> ^ <nat:3> \land <var:p4> = <var:q> ^ <nat:4> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:A> = <var:q> \land <var:p1> = <var:q> \land <var:p2> = <var:q> ^ <nat:2> \land <var:p3> = <var:q> ^ <nat:3> \land <var:p4> = <var:q> ^ <nat:4> \land <var:p0> = <nat:3> \} \\ <var:p1> := <var:p1> * <nat:4> ; \\ \{ <var:A> = <var:q> \land <var:p1> = <nat:4> * <var:q> \land <var:p2> = <var:q> ^ <nat:2> \land <var:p3> = <var:q> ^ <nat:3> \land <var:p4> = <var:q> ^ <nat:4> \land <var:p0> = <nat:3> \} \\ <var:p2> := <var:p2> * <nat:1> ; \\ \{ <var:A> = <var:q> \land <var:p1> = <nat:4> * <var:q> \land <var:p2> = <nat:1> * <var:q> ^ <nat:2> \land <var:p3> = <var:q> ^ <nat:3> \land <var:p4> = <var:q> ^ <nat:4> \land <var:p0> = <nat:3> \} \\ <var:p4> := <var:p4> * <nat:4> ; \\ \{ <var:A> = <var:q> \land <var:p1> = <nat:4> * <var:q> \land <var:p2> = <nat:1> * <var:q> ^ <nat:2> \land <var:p3> = <var:q> ^ <nat:3> \land <var:p4> = <nat:4> * <var:q> ^ <nat:4> \land <var:p0> = <nat:3> \} \\ <var:T> := <var:p4> \\ \{ <var:A> = <var:q> \land <var:p1> = <nat:4> * <var:q> \land <var:p2> = <nat:1> * <var:q> ^ <nat:2> \land <var:p3> = <var:q> ^ <nat:3> \land <var:p0> = <nat:3> \land <var:T> = <nat:4> * <var:q> ^ <nat:4> \} \\ <var:T> := <var:T> + <var:p2> \\ \{ <var:A> = <var:q> \land <var:p1> = <nat:4> * <var:q> \land <var:p0> = <nat:3> \land <var:T> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:p1> \\ \{ <var:A> = <var:q> \land <var:p0> = <nat:3> \land <var:T> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> \} \\ <var:T> := <var:T> + <var:p0> \\ \{ <var:A> = <var:q> \land <var:T> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> \} \end{eqnarray} Applying Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Definition <def:poly> := <var:p1> := <var:A> ; <var:p2> := <var:p1> * <var:A> ; <var:p3> := <var:p2> * <var:A> ; <var:p4> := <var:p3> * <var:A> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:4> ; <var:p2> := <var:p2> * <nat:1> ; <var:p4> := <var:p4> * <nat:4> ; <var:T> := <var:p4> <var:T> := <var:T> + <var:p2> <var:T> := <var:T> + <var:p1> <var:T> := <var:T> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:A> = <var:q> }} <def:poly> {{ <var:T> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <var:q> /\ <var:p2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <var:q> /\ <var:p2> = <var:q> ^ <nat:2> /\ <var:p3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <var:q> /\ <var:p2> = <var:q> ^ <nat:2> /\ <var:p3> = <var:q> ^ <nat:3> /\ <var:p4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <var:q> /\ <var:p2> = <var:q> ^ <nat:2> /\ <var:p3> = <var:q> ^ <nat:3> /\ <var:p4> = <var:q> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <nat:4> * <var:q> /\ <var:p2> = <var:q> ^ <nat:2> /\ <var:p3> = <var:q> ^ <nat:3> /\ <var:p4> = <var:q> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <nat:4> * <var:q> /\ <var:p2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:p3> = <var:q> ^ <nat:3> /\ <var:p4> = <var:q> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <nat:4> * <var:q> /\ <var:p2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:p3> = <var:q> ^ <nat:3> /\ <var:p4> = <nat:4> * <var:q> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <nat:4> * <var:q> /\ <var:p2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:p3> = <var:q> ^ <nat:3> /\ <var:p0> = <nat:3> /\ <var:T> = <nat:4> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p1> = <nat:4> * <var:q> /\ <var:p0> = <nat:3> /\ <var:T> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:p0> = <nat:3> /\ <var:T> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 