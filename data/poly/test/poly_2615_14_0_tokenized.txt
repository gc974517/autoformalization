\begin{document} \begin{theorem} Let the following series of commands as \begin{verbatim} <var:R0> := <nat:4> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:u> ; <var:R2> := <nat:8> ; <var:R2> := <var:R2> * <var:u> ; <var:R2> := <var:R2> * <var:u> ; <var:R3> := <nat:1> ; <var:R3> := <var:R3> * <var:u> ; <var:R3> := <var:R3> * <var:u> ; <var:R3> := <var:R3> * <var:u> ; <var:T> := <var:R3> ; <var:T> := <var:T> + <var:R2> ; <var:T> := <var:T> + <var:R1> ; <var:T> := <var:T> + <var:R0> \end{verbatim} Given $ <var:u> = <var:b> $ before evaluating the code segment it holds that we have $ <var:T> = <nat:1> \cdot <var:b> ^ <nat:3> + <nat:8> \cdot <var:b> ^ <nat:2> + <nat:7> \cdot <var:b> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions is clear through Hoare reasoning . Moving forward to the subsequent command seen in the series of commands , the variable update line \verb | <var:R0> := <nat:4> ; | . This redefines $ \{ <var:u> = <var:b> \} $ toward the condition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \} $ . This is known to be sound with the assignment law from Hoare techniques . Moving forward to the next step , we see the assignment command giving $ <nat:7> $ to $ <var:R1>$ . This code transfers $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \} $ into the condition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \} $ . This is ensured through the assignment scheme from typical Hoare reasoning . Taking another step toward the following statement in our set of instructions , the command \verb | <var:R1> := <var:R1> * <var:u> ; | . This statement advances $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \} $ into $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \} $ . Shifting focus toward the next command seen in the set of instructions , we see the variable update code yielding $ <nat:8> $ as $ <var:R2>$ . This statement moves the precondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \} $ to the postcondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \} $ . This is ensured by the assignment rule defined in typical Hoare techniques . Jumping to the proceeding statement found in the series of instructions , the variable assignmet code assigning $ <var:R2> * <var:u> $ toward $ <var:R2>$ . This statement moves $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \} $ to $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> \} $ . Stepping forward , the statement \verb | <var:R2> := <var:R2> * <var:u> ; | . This takes the condition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> \} $ to $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \} $ . Immediately following , the assignment code \verb | <var:R3> := <nat:1> ; | . This forwards the condition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \} $ into the condition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:R3> = <nat:1> \} $ . Advancing , we have the assignment command \verb | <var:R3> := <var:R3> * <var:u> ; | . This statement redefines the precondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:R3> = <nat:1> \} $ into $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:R3> = <nat:1> \times <var:b> \} $ . This is shown to be logically sound using the assignment scheme defined in standard Hoare logic . Advancing to the subsequent statement in the code segment , we see the variable binding code binding $ <var:R3> * <var:u> $ to $ <var:R3>$ . This code moves the condition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:R3> = <nat:1> \times <var:b> \} $ to the postcondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:R3> = <nat:1> \times <var:b> ^ <nat:2> \} $ . This is guaranteed through the assignment rule obtained from typical Hoare techniques . Taking another step toward the upcoming bit of code seen in our series of instructions , we see the environment update command binding $ <var:R3> * <var:u> $ toward $ <var:R3>$ . This command moves the precondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:R3> = <nat:1> \times <var:b> ^ <nat:2> \} $ into $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:R3> = <nat:1> \times <var:b> ^ <nat:3> \} $ . This is shown using the assignment rule from usual Hoare logic . Looking at the next line in the segment of code , the variable binding line assigning $ <var:R3> $ as $ <var:T>$ . This moves the precondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:R3> = <nat:1> \times <var:b> ^ <nat:3> \} $ into the postcondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:T> = <nat:1> \times <var:b> ^ <nat:3> \} $ . This is known to be sound with the assignment law defined by standard Hoare logic . Jumping to the proceeding statement found in our set of instructions , we have the variable assignmet code \verb | <var:T> := <var:T> + <var:R2> ; | . This transfers the precondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:R2> = <nat:8> \times <var:b> ^ <nat:2> \land <var:T> = <nat:1> \times <var:b> ^ <nat:3> \} $ into the condition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:T> = <nat:1> \times <var:b> ^ <nat:3> + <nat:8> \times <var:b> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme found in typical Hoare reasoning . Going to the next step , we have the assignment command giving $ <var:T> + <var:R1> $ toward $ <var:T>$ . This line forwards the precondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \times <var:b> \land <var:T> = <nat:1> \times <var:b> ^ <nat:3> + <nat:8> \times <var:b> ^ <nat:2> \} $ as $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:T> = <nat:1> \times <var:b> ^ <nat:3> + <nat:8> \times <var:b> ^ <nat:2> + <nat:7> \times <var:b> \} $ . Going to the next step , we see the environment update statement giving $ <var:T> + <var:R0$ as $ <var:T>$ . This command takes the precondition $ \{ <var:u> = <var:b> \land <var:R0> = <nat:4> \land <var:T> = <nat:1> \times <var:b> ^ <nat:3> + <nat:8> \times <var:b> ^ <nat:2> + <nat:7> \times <var:b> \} $ to the postcondition $ \{ <var:u> = <var:b> \land <var:T> = <nat:1> \times <var:b> ^ <nat:3> + <nat:8> \times <var:b> ^ <nat:2> + <nat:7> \times <var:b> + <nat:4> \} $ . This is ensured using the assignment inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:u> = <var:b> }} <var:R0> := <nat:4> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:u> ; <var:R2> := <nat:8> ; <var:R2> := <var:R2> * <var:u> ; <var:R2> := <var:R2> * <var:u> ; <var:R3> := <nat:1> ; <var:R3> := <var:R3> * <var:u> ; <var:R3> := <var:R3> * <var:u> ; <var:R3> := <var:R3> * <var:u> ; <var:T> := <var:R3> ; <var:T> := <var:T> + <var:R2> ; <var:T> := <var:T> + <var:R1> ; <var:T> := <var:T> + <var:R0> {{ <var:T> = <nat:1> * <var:b> ^ <nat:3> + <nat:8> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:R2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:R2> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:R2> = <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:R2> = <nat:8> * <var:b> ^ <nat:2> /\ <var:R3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:R2> = <nat:8> * <var:b> ^ <nat:2> /\ <var:R3> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:R2> = <nat:8> * <var:b> ^ <nat:2> /\ <var:R3> = <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:R2> = <nat:8> * <var:b> ^ <nat:2> /\ <var:R3> = <nat:1> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:R2> = <nat:8> * <var:b> ^ <nat:2> /\ <var:T> = <nat:1> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:b> /\ <var:T> = <nat:1> * <var:b> ^ <nat:3> + <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:R0> = <nat:4> /\ <var:T> = <nat:1> * <var:b> ^ <nat:3> + <nat:8> * <var:b> ^ <nat:2> + <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:T> = <nat:1> * <var:b> ^ <nat:3> + <nat:8> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 