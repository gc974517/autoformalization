\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:L> ; <var:Y> := <nat:1> + <var:Y> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Given it to be that $ <var:L> = <var:w> $ ( for any positive coefficients $ <var:w> $ ) ahead of the evaluation of this list of commands , it holds that we have $ <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:L> = <var:w> \} \\ <var:Y> := <nat:1> ; \\ \{ <var:L> = <var:w> \land <var:Y> = <nat:1> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:L> ; \\ \{ <var:L> = <var:w> \land <var:Y> = <nat:1> * <var:w> + <nat:2> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:L> \\ \{ <var:L> = <var:w> \land <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> \} \end{eqnarray} Thus , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:L> ; <var:Y> := <nat:1> + <var:Y> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:L> = <var:w> }} <def:poly> {{ <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:Y> = <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 