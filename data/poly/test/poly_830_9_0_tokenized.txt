\begin{document} \begin{theorem} Define the following segment of code as follows \begin{verbatim} <var:u0> := <nat:8> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:e> ; <var:u2> := <nat:6> ; <var:u2> := <var:u2> * <var:e> ; <var:u2> := <var:u2> * <var:e> ; <var:H> := <var:u2> ; <var:H> := <var:H> + <var:u1> ; <var:H> := <var:H> + <var:u0> \end{verbatim} Allow it to hold that $ <var:e> = <var:g> $ ahead of the execution of the code it follows that we see $ <var:H> = <nat:6> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:8> $ . \end{theorem} \begin{proof} See that the below decorated series of commands . \begin{eqnarray} \{ <var:e> = <var:g> \} \\ <var:u0> := <nat:8> ; \\ \{ <var:e> = <var:g> \land <var:u0> = <nat:8> \} \\ <var:u1> := <nat:7> ; \\ \{ <var:e> = <var:g> \land <var:u0> = <nat:8> \land <var:u1> = <nat:7> \} \\ <var:u1> := <var:u1> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:u0> = <nat:8> \land <var:u1> = <nat:7> \times <var:g> \} \\ <var:u2> := <nat:6> ; \\ \{ <var:e> = <var:g> \land <var:u0> = <nat:8> \land <var:u1> = <nat:7> \times <var:g> \land <var:u2> = <nat:6> \} \\ <var:u2> := <var:u2> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:u0> = <nat:8> \land <var:u1> = <nat:7> \times <var:g> \land <var:u2> = <nat:6> \times <var:g> \} \\ <var:u2> := <var:u2> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:u0> = <nat:8> \land <var:u1> = <nat:7> \times <var:g> \land <var:u2> = <nat:6> \times <var:g> ^ <nat:2> \} \\ <var:H> := <var:u2> ; \\ \{ <var:e> = <var:g> \land <var:u0> = <nat:8> \land <var:u1> = <nat:7> \times <var:g> \land <var:H> = <nat:6> \times <var:g> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:u1> ; \\ \{ <var:e> = <var:g> \land <var:u0> = <nat:8> \land <var:H> = <nat:6> \times <var:g> ^ <nat:2> + <nat:7> \times <var:g> \} \\ <var:H> := <var:H> + <var:u0> \\ \{ <var:e> = <var:g> \land <var:H> = <nat:6> \times <var:g> ^ <nat:2> + <nat:7> \times <var:g> + <nat:8> \} \end{eqnarray} Utilizing Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:e> = <var:g> }} <var:u0> := <nat:8> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:e> ; <var:u2> := <nat:6> ; <var:u2> := <var:u2> * <var:e> ; <var:u2> := <var:u2> * <var:e> ; <var:H> := <var:u2> ; <var:H> := <var:H> + <var:u1> ; <var:H> := <var:H> + <var:u0> {{ <var:H> = <nat:6> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:7> * <var:g> /\ <var:u2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:7> * <var:g> /\ <var:u2> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:7> * <var:g> /\ <var:u2> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:7> * <var:g> /\ <var:H> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:u0> = <nat:8> /\ <var:H> = <nat:6> * <var:g> ^ <nat:2> + <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:H> = <nat:6> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 