\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:q> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:q> ; <var:M2> := <var:M2> * <var:q> ; <var:Z> := <var:M2> ; <var:Z> := <var:Z> + <var:M1> ; <var:Z> := <var:Z> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:q> = <var:h> $ --- given positive integers $ <var:h> $ --- ahead of running this program , it must be that $ <var:Z> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing Hoare logic produces : \begin{eqnarray} \{ <var:q> = <var:h> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:q> = <var:h> \land <var:M0> = <nat:4> \} \\ <var:M1> := <nat:2> ; \\ \{ <var:q> = <var:h> \land <var:M0> = <nat:4> \land <var:M1> = <nat:2> \} \\ <var:M1> := <var:M1> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:M0> = <nat:4> \land <var:M1> = <nat:2> \cdot <var:h> \} \\ <var:M2> := <nat:2> ; \\ \{ <var:q> = <var:h> \land <var:M0> = <nat:4> \land <var:M1> = <nat:2> \cdot <var:h> \land <var:M2> = <nat:2> \} \\ <var:M2> := <var:M2> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:M0> = <nat:4> \land <var:M1> = <nat:2> \cdot <var:h> \land <var:M2> = <nat:2> \cdot <var:h> \} \\ <var:M2> := <var:M2> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:M0> = <nat:4> \land <var:M1> = <nat:2> \cdot <var:h> \land <var:M2> = <nat:2> \cdot <var:h> ^ <nat:2> \} \\ <var:Z> := <var:M2> ; \\ \{ <var:q> = <var:h> \land <var:M0> = <nat:4> \land <var:M1> = <nat:2> \cdot <var:h> \land <var:Z> = <nat:2> \cdot <var:h> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:M1> ; \\ \{ <var:q> = <var:h> \land <var:M0> = <nat:4> \land <var:Z> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> \} \\ <var:Z> := <var:Z> + <var:M0> \\ \{ <var:q> = <var:h> \land <var:Z> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:4> \} \end{eqnarray} Hence , the series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:4> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:q> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:q> ; <var:M2> := <var:M2> * <var:q> ; <var:Z> := <var:M2> ; <var:Z> := <var:Z> + <var:M1> ; <var:Z> := <var:Z> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:q> = <var:h> }} <def:poly> {{ <var:Z> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:2> * <var:h> /\ <var:M2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:2> * <var:h> /\ <var:M2> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:2> * <var:h> /\ <var:M2> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:2> * <var:h> /\ <var:Z> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:M0> = <nat:4> /\ <var:Z> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:Z> = <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 