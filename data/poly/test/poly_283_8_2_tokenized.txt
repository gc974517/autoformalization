\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:q> := <nat:1> ; <var:q> := <nat:4> + <var:q> * <var:h> ; <var:q> := <nat:1> + <var:q> * <var:h> ; <var:q> := <nat:4> + <var:q> * <var:h> ; <var:q> := <nat:2> + <var:q> * <var:h> ; <var:q> := <nat:4> + <var:q> * <var:h> ; <var:q> := <nat:4> + <var:q> * <var:h> ; <var:q> := <nat:4> + <var:q> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Allowing $ <var:h> = <var:x> $ , for every positive coefficients $ <var:x> $ , before evaluating our list of commands , it follows that we have $ <var:q> = <nat:1> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:6> + <nat:1> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:4> $ when code has finished executing . \end{theorem} \begin{proof} The argument for this list of commands is evident through standard Hoare techniques . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:h> = <var:x> \} & <var:q> := <nat:1> & \{ <var:h> = <var:x> \land <var:q> = <nat:1> \} \end{tabular} This is given by the inference rule of standard Hoare techniques . Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:h> = <var:x> \} & <var:q> := <nat:1> & \{ <var:h> = <var:x> \land <var:q> = <nat:1> \} \\ \{ <var:h> = <var:x> \land <var:q> = <nat:1> \} & <var:q> := <nat:4> + <var:q> * <var:h> & \{ <var:h> = <var:x> \land <var:q> = <nat:1> * <var:x> + <nat:4> \} \\ \{ <var:h> = <var:x> \land <var:q> = <nat:1> * <var:x> + <nat:4> \} & <var:q> := <nat:1> + <var:q> * <var:h> & \{ <var:h> = <var:x> \land <var:q> = <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> \} \\ \{ <var:h> = <var:x> \land <var:q> = <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> \} & <var:q> := <nat:4> + <var:q> * <var:h> & \{ <var:h> = <var:x> \land <var:q> = <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> \} \\ \{ <var:h> = <var:x> \land <var:q> = <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> \} & <var:q> := <nat:2> + <var:q> * <var:h> & \{ <var:h> = <var:x> \land <var:q> = <nat:1> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> \} \end{tabular} Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:h> = <var:x> \} & <var:q> := <nat:1> & \{ <var:h> = <var:x> \land <var:q> = <nat:1> \} \end{tabular} This is deduced with the environment update law in standard Hoare reasoning . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:h> = <var:x> \} & <var:q> := <nat:1> & \{ <var:h> = <var:x> \land <var:q> = <nat:1> \} \end{tabular} This is shown using the variable update rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:1> ; <var:q> := <nat:4> + <var:q> * <var:h> ; <var:q> := <nat:1> + <var:q> * <var:h> ; <var:q> := <nat:4> + <var:q> * <var:h> ; <var:q> := <nat:2> + <var:q> * <var:h> ; <var:q> := <nat:4> + <var:q> * <var:h> ; <var:q> := <nat:4> + <var:q> * <var:h> ; <var:q> := <nat:4> + <var:q> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:h> = <var:x> }} <def:poly> {{ <var:q> = <nat:1> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:q> = <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:q> = <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:q> = <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:q> = <nat:1> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:q> = <nat:1> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:q> = <nat:1> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:q> = <nat:1> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 