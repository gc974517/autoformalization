\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:2> ; <var:d> := <var:m0> \end{verbatim} Assume --- for every $ <var:S> $ --- it to hold that $ <var:J> = <var:S> $ before executing this list of instructions , then we have $ <var:d> = <nat:2> $ after program exits . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:J> = <var:S> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:J> = <var:S> \land <var:m0> = <nat:2> \} \end{eqnarray} Advancing the execution of the set of instructions produces : \begin{eqnarray} <var:d> := <var:m0> \\ \{ <var:J> = <var:S> \land <var:d> = <nat:2> \} \end{eqnarray} As a consequence , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:J> = <var:S> }} <var:m0> := <nat:2> ; <var:d> := <var:m0> {{ <var:d> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:S> /\ <var:d> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 