\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:T> := <nat:4> ; <var:T> := <nat:3> + <var:T> * <var:d> ; <var:T> := <nat:3> + <var:T> * <var:d> \end{verbatim} Assume that we have $ <var:d> = <var:k> $ ahead of the execution of the code segment it holds that we have $ <var:T> = <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:3> $ once code segment has terminated . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:d> = <var:k> \} \\ <var:T> := <nat:4> ; \\ \{ <var:d> = <var:k> \land <var:T> = <nat:4> \} \\ <var:T> := <nat:3> + <var:T> * <var:d> ; \\ \{ <var:d> = <var:k> \land <var:T> = <nat:4> \cdot <var:k> + <nat:3> \} \\ <var:T> := <nat:3> + <var:T> * <var:d> \\ \{ <var:d> = <var:k> \land <var:T> = <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:3> \} \end{eqnarray} As a result , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:d> = <var:k> }} <var:T> := <nat:4> ; <var:T> := <nat:3> + <var:T> * <var:d> ; <var:T> := <nat:3> + <var:T> * <var:d> {{ <var:T> = <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:T> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:T> = <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:T> = <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 