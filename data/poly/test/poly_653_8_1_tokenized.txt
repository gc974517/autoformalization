\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:n> ; <var:f2> := <var:f1> * <var:n> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:1> ; <var:f2> := <var:f2> * <nat:5> ; <var:Z> := <var:f2> <var:Z> := <var:Z> + <var:f1> <var:Z> := <var:Z> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Assume that $ <var:n> = <var:C> $ --- given all positive numbers $ <var:C> $ --- ahead of running this list of commands it must be that $ <var:Z> = <nat:5> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:7> $ . \end{theorem} \begin{proof} Using standard Hoare techniques results in : \begin{eqnarray} \{ <var:n> = <var:C> \} \\ <var:f1> := <var:n> ; \\ \{ <var:n> = <var:C> \land <var:f1> = <var:C> \} \\ <var:f2> := <var:f1> * <var:n> ; \\ \{ <var:n> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \} \\ <var:f0> := <nat:7> ; \\ \{ <var:n> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f0> = <nat:7> \} \\ <var:f1> := <var:f1> * <nat:1> ; \\ \{ <var:n> = <var:C> \land <var:f1> = <nat:1> \times <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f0> = <nat:7> \} \\ <var:f2> := <var:f2> * <nat:5> ; \\ \{ <var:n> = <var:C> \land <var:f1> = <nat:1> \times <var:C> \land <var:f2> = <nat:5> \times <var:C> ^ <nat:2> \land <var:f0> = <nat:7> \} \\ <var:Z> := <var:f2> \\ \{ <var:n> = <var:C> \land <var:f1> = <nat:1> \times <var:C> \land <var:f0> = <nat:7> \land <var:Z> = <nat:5> \times <var:C> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:f1> \\ \{ <var:n> = <var:C> \land <var:f0> = <nat:7> \land <var:Z> = <nat:5> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> \} \\ <var:Z> := <var:Z> + <var:f0> \\ \{ <var:n> = <var:C> \land <var:Z> = <nat:5> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:7> \} \end{eqnarray} As a consequence , the code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f1> := <var:n> ; <var:f2> := <var:f1> * <var:n> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:1> ; <var:f2> := <var:f2> * <nat:5> ; <var:Z> := <var:f2> <var:Z> := <var:Z> + <var:f1> <var:Z> := <var:Z> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:n> = <var:C> }} <def:poly> {{ <var:Z> = <nat:5> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:f1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:f1> = <var:C> /\ <var:f2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:f1> = <var:C> /\ <var:f2> = <var:C> ^ <nat:2> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:f1> = <nat:1> * <var:C> /\ <var:f2> = <var:C> ^ <nat:2> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:f1> = <nat:1> * <var:C> /\ <var:f2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:f1> = <nat:1> * <var:C> /\ <var:f0> = <nat:7> /\ <var:Z> = <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:f0> = <nat:7> /\ <var:Z> = <nat:5> * <var:C> ^ <nat:2> + <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:Z> = <nat:5> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 