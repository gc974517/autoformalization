\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:r1> := <var:g> ; <var:r2> := <var:r1> * <var:g> ; <var:r3> := <var:r2> * <var:g> ; <var:r0> := <nat:8> ; <var:r1> := <var:r1> * <nat:7> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:4> ; <var:V> := <var:r3> <var:V> := <var:V> + <var:r2> <var:V> := <var:V> + <var:r1> <var:V> := <var:V> + <var:r0> \end{verbatim} Given that $ <var:g> = <var:p> $ ( given any positive numbers $ <var:p> $ ) before running our list of commands it must be that we see $ <var:V> = <nat:4> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:7> \cdot <var:p> + <nat:8> $ once list of instructions is done executing . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:g> = <var:p> \} \\ <var:r1> := <var:g> ; \\ \{ <var:g> = <var:p> \land <var:r1> = <var:p> \} \\ <var:r2> := <var:r1> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:r1> = <var:p> \land <var:r2> = <var:p> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:r1> = <var:p> \land <var:r2> = <var:p> ^ <nat:2> \land <var:r3> = <var:p> ^ <nat:3> \} \end{eqnarray} Furthering executing this series of commands gives us : \begin{eqnarray} <var:r0> := <nat:8> ; \\ \{ <var:g> = <var:p> \land <var:r1> = <var:p> \land <var:r2> = <var:p> ^ <nat:2> \land <var:r3> = <var:p> ^ <nat:3> \land <var:r0> = <nat:8> \} \\ <var:r1> := <var:r1> * <nat:7> ; \\ \{ <var:g> = <var:p> \land <var:r1> = <nat:7> \times <var:p> \land <var:r2> = <var:p> ^ <nat:2> \land <var:r3> = <var:p> ^ <nat:3> \land <var:r0> = <nat:8> \} \\ <var:r2> := <var:r2> * <nat:3> ; \\ \{ <var:g> = <var:p> \land <var:r1> = <nat:7> \times <var:p> \land <var:r2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:r3> = <var:p> ^ <nat:3> \land <var:r0> = <nat:8> \} \\ <var:r3> := <var:r3> * <nat:4> ; \\ \{ <var:g> = <var:p> \land <var:r1> = <nat:7> \times <var:p> \land <var:r2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:r3> = <nat:4> \times <var:p> ^ <nat:3> \land <var:r0> = <nat:8> \} \\ <var:V> := <var:r3> \\ \{ <var:g> = <var:p> \land <var:r1> = <nat:7> \times <var:p> \land <var:r2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:r0> = <nat:8> \land <var:V> = <nat:4> \times <var:p> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:r2> \\ \{ <var:g> = <var:p> \land <var:r1> = <nat:7> \times <var:p> \land <var:r0> = <nat:8> \land <var:V> = <nat:4> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:r1> \\ \{ <var:g> = <var:p> \land <var:r0> = <nat:8> \land <var:V> = <nat:4> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:7> \times <var:p> \} \\ <var:V> := <var:V> + <var:r0> \\ \{ <var:g> = <var:p> \land <var:V> = <nat:4> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:7> \times <var:p> + <nat:8> \} \end{eqnarray} As a result , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:g> = <var:p> }} <var:r1> := <var:g> ; <var:r2> := <var:r1> * <var:g> ; <var:r3> := <var:r2> * <var:g> ; <var:r0> := <nat:8> ; <var:r1> := <var:r1> * <nat:7> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:4> ; <var:V> := <var:r3> <var:V> := <var:V> + <var:r2> <var:V> := <var:V> + <var:r1> <var:V> := <var:V> + <var:r0> {{ <var:V> = <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <var:p> /\ <var:r2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <var:p> /\ <var:r2> = <var:p> ^ <nat:2> /\ <var:r3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <var:p> /\ <var:r2> = <var:p> ^ <nat:2> /\ <var:r3> = <var:p> ^ <nat:3> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <nat:7> * <var:p> /\ <var:r2> = <var:p> ^ <nat:2> /\ <var:r3> = <var:p> ^ <nat:3> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <nat:7> * <var:p> /\ <var:r2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:r3> = <var:p> ^ <nat:3> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <nat:7> * <var:p> /\ <var:r2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:r3> = <nat:4> * <var:p> ^ <nat:3> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <nat:7> * <var:p> /\ <var:r2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:r0> = <nat:8> /\ <var:V> = <nat:4> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r1> = <nat:7> * <var:p> /\ <var:r0> = <nat:8> /\ <var:V> = <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:r0> = <nat:8> /\ <var:V> = <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:V> = <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 