\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:1> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:p> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:p> ; <var:U2> := <var:U2> * <var:p> ; <var:n> := <var:U2> ; <var:n> := <var:n> + <var:U1> ; <var:n> := <var:n> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:p> = <var:M> $ ahead of the evaluation of the list of instructions it holds that we have $ <var:n> = <nat:8> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:1> $ when set of commands exits . \end{theorem} \begin{proof} Let the following decorated list of instructions . \begin{eqnarray} \{ <var:p> = <var:M> \} \\ <var:U0> := <nat:1> ; \\ \{ <var:p> = <var:M> \land <var:U0> = <nat:1> \} \end{eqnarray} Advancing the execution of our set of instructions gives : \begin{eqnarray} <var:U1> := <nat:3> ; \\ \{ <var:p> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:3> \} \\ <var:U1> := <var:U1> * <var:p> ; \\ \{ <var:p> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:3> \times <var:M> \} \\ <var:U2> := <nat:8> ; \\ \{ <var:p> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:3> \times <var:M> \land <var:U2> = <nat:8> \} \\ <var:U2> := <var:U2> * <var:p> ; \\ \{ <var:p> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:3> \times <var:M> \land <var:U2> = <nat:8> \times <var:M> \} \\ <var:U2> := <var:U2> * <var:p> ; \\ \{ <var:p> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:3> \times <var:M> \land <var:U2> = <nat:8> \times <var:M> ^ <nat:2> \} \\ <var:n> := <var:U2> ; \\ \{ <var:p> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:3> \times <var:M> \land <var:n> = <nat:8> \times <var:M> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:U1> ; \\ \{ <var:p> = <var:M> \land <var:U0> = <nat:1> \land <var:n> = <nat:8> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> \} \\ <var:n> := <var:n> + <var:U0> \\ \{ <var:p> = <var:M> \land <var:n> = <nat:8> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:1> \} \end{eqnarray} The application of standard Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:1> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:p> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:p> ; <var:U2> := <var:U2> * <var:p> ; <var:n> := <var:U2> ; <var:n> := <var:n> + <var:U1> ; <var:n> := <var:n> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:p> = <var:M> }} <def:poly> {{ <var:n> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:3> * <var:M> /\ <var:U2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:3> * <var:M> /\ <var:U2> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:3> * <var:M> /\ <var:U2> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:3> * <var:M> /\ <var:n> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:U0> = <nat:1> /\ <var:n> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:n> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 