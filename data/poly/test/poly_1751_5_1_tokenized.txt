\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:f1> := <var:D> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:9> ; <var:C> := <var:f1> <var:C> := <var:C> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:D> = <var:c> $ prior to the execution of the list of commands it holds that $ <var:C> = <nat:9> \times <var:c> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for this segment of code can be seen through typical Hoare techniques . Considering the next piece of code in our series of instructions , we have the assignment line assigning $ <var:D> $ to $ <var:f1>$ . This moves the precondition $ \{ <var:D> = <var:c> \} $ toward the condition $ \{ <var:D> = <var:c> \land <var:f1> = <var:c> \} $ . This is shown with the assignment inference rule given in usual Hoare logic . Further , we see the variable binding command \verb | <var:f0> := <nat:8> ; | . This code moves $ \{ <var:D> = <var:c> \land <var:f1> = <var:c> \} $ toward the postcondition $ \{ <var:D> = <var:c> \land <var:f1> = <var:c> \land <var:f0> = <nat:8> \} $ . Observing the subsequent piece of code in our set of commands , we have the environment update line \verb | <var:f1> := <var:f1> * <nat:9> ; | . This command transfers $ \{ <var:D> = <var:c> \land <var:f1> = <var:c> \land <var:f0> = <nat:8> \} $ as the condition $ \{ <var:D> = <var:c> \land <var:f1> = <nat:9> \times <var:c> \land <var:f0> = <nat:8> \} $ . This is guaranteed with the assignment rule given by Hoare techniques . Taking a look at the upcoming step in our series of instructions , we have the environment update command \verb | <var:C> := <var:f1> | . This command transfers the condition $ \{ <var:D> = <var:c> \land <var:f1> = <nat:9> \times <var:c> \land <var:f0> = <nat:8> \} $ to the postcondition $ \{ <var:D> = <var:c> \land <var:f0> = <nat:8> \land <var:C> = <nat:9> \times <var:c> \} $ . Jumping to the following statement in our series of commands , we have the variable assignmet statement letting $ <var:C> + <var:f0$ to $ <var:C>$ . This transfers $ \{ <var:D> = <var:c> \land <var:f0> = <nat:8> \land <var:C> = <nat:9> \times <var:c> \} $ to $ \{ <var:D> = <var:c> \land <var:C> = <nat:9> \times <var:c> + <nat:8> \} $ . This is given through the assignment scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f1> := <var:D> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:9> ; <var:C> := <var:f1> <var:C> := <var:C> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:D> = <var:c> }} <def:poly> {{ <var:C> = <nat:9> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:f1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:f1> = <var:c> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:f1> = <nat:9> * <var:c> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:f0> = <nat:8> /\ <var:C> = <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:C> = <nat:9> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 