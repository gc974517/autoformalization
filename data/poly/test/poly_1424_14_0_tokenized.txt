\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:9> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:P> ; <var:J2> := <nat:6> ; <var:J2> := <var:J2> * <var:P> ; <var:J2> := <var:J2> * <var:P> ; <var:J3> := <nat:7> ; <var:J3> := <var:J3> * <var:P> ; <var:J3> := <var:J3> * <var:P> ; <var:J3> := <var:J3> * <var:P> ; <var:l> := <var:J3> ; <var:l> := <var:l> + <var:J2> ; <var:l> := <var:l> + <var:J1> ; <var:l> := <var:l> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Assuming ( given every natural numbers $ <var:V> $ ) it to hold that $ <var:P> = <var:V> $ ahead of interpreting our set of instructions , it holds that we have $ <var:l> = <nat:7> \times <var:V> ^ <nat:3> + <nat:6> \times <var:V> ^ <nat:2> + <nat:6> \times <var:V> + <nat:9> $ . \end{theorem} \begin{proof} Using Hoare logic returns : \begin{eqnarray} \{ <var:P> = <var:V> \} \\ <var:J0> := <nat:9> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \} \\ <var:J1> := <nat:6> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \} \\ <var:J1> := <var:J1> * <var:P> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \} \\ <var:J2> := <nat:6> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:J2> = <nat:6> \} \end{eqnarray} Allowing running our list of commands results in : \begin{eqnarray} <var:J2> := <var:J2> * <var:P> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:J2> = <nat:6> \times <var:V> \} \\ <var:J2> := <var:J2> * <var:P> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:J2> = <nat:6> \times <var:V> ^ <nat:2> \} \end{eqnarray} Advancing executing our series of commands gives us : \begin{eqnarray} <var:J3> := <nat:7> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:J2> = <nat:6> \times <var:V> ^ <nat:2> \land <var:J3> = <nat:7> \} \\ <var:J3> := <var:J3> * <var:P> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:J2> = <nat:6> \times <var:V> ^ <nat:2> \land <var:J3> = <nat:7> \times <var:V> \} \\ <var:J3> := <var:J3> * <var:P> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:J2> = <nat:6> \times <var:V> ^ <nat:2> \land <var:J3> = <nat:7> \times <var:V> ^ <nat:2> \} \\ <var:J3> := <var:J3> * <var:P> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:J2> = <nat:6> \times <var:V> ^ <nat:2> \land <var:J3> = <nat:7> \times <var:V> ^ <nat:3> \} \\ <var:l> := <var:J3> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:J2> = <nat:6> \times <var:V> ^ <nat:2> \land <var:l> = <nat:7> \times <var:V> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:J2> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:J1> = <nat:6> \times <var:V> \land <var:l> = <nat:7> \times <var:V> ^ <nat:3> + <nat:6> \times <var:V> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:J1> ; \\ \{ <var:P> = <var:V> \land <var:J0> = <nat:9> \land <var:l> = <nat:7> \times <var:V> ^ <nat:3> + <nat:6> \times <var:V> ^ <nat:2> + <nat:6> \times <var:V> \} \\ <var:l> := <var:l> + <var:J0> \\ \{ <var:P> = <var:V> \land <var:l> = <nat:7> \times <var:V> ^ <nat:3> + <nat:6> \times <var:V> ^ <nat:2> + <nat:6> \times <var:V> + <nat:9> \} \end{eqnarray} Thusly , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J0> := <nat:9> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:P> ; <var:J2> := <nat:6> ; <var:J2> := <var:J2> * <var:P> ; <var:J2> := <var:J2> * <var:P> ; <var:J3> := <nat:7> ; <var:J3> := <var:J3> * <var:P> ; <var:J3> := <var:J3> * <var:P> ; <var:J3> := <var:J3> * <var:P> ; <var:l> := <var:J3> ; <var:l> := <var:l> + <var:J2> ; <var:l> := <var:l> + <var:J1> ; <var:l> := <var:l> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:P> = <var:V> }} <def:poly> {{ <var:l> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:J2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:J2> = <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:J2> = <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:J2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:J3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:J2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:J3> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:J2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:J3> = <nat:7> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:J2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:J3> = <nat:7> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:J2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:l> = <nat:7> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:6> * <var:V> /\ <var:l> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:J0> = <nat:9> /\ <var:l> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:l> = <nat:7> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 