\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:D1> := <var:X> ; <var:D2> := <var:D1> * <var:X> ; <var:D0> := <nat:6> ; <var:D2> := <var:D2> * <nat:6> ; <var:Y> := <var:D2> <var:Y> := <var:Y> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assuming $ <var:X> = <var:L> $ before running the set of instructions then we see $ <var:Y> = <nat:6> \cdot <var:L> ^ <nat:2> + <nat:6> $ when program is done . \end{theorem} \begin{proof} The method of proof for the series of instructions is clear by Hoare reasoning . Next , we see \begin{verbatim} { <var:X> = <var:L> } <var:D1> := <var:X> { <var:X> = <var:L> \land <var:D1> = <var:L> } { <var:X> = <var:L> \land <var:D1> = <var:L> } <var:D2> := <var:D1> * <var:X> { <var:X> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> } { <var:X> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> } <var:D0> := <nat:6> { <var:X> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> \land <var:D0> = <nat:6> } \end{verbatim} This is shown using the inference rule defined in Hoare techniques . Moving on to the proceeding piece of code in the list of commands , we see \begin{verbatim} { <var:X> = <var:L> } <var:D1> := <var:X> { <var:X> = <var:L> \land <var:D1> = <var:L> } \end{verbatim} Paying attention to the following pieces of code found in our set of commands , we have \begin{verbatim} { <var:X> = <var:L> } <var:D1> := <var:X> { <var:X> = <var:L> \land <var:D1> = <var:L> } { <var:X> = <var:L> \land <var:D1> = <var:L> } <var:D2> := <var:D1> * <var:X> { <var:X> = <var:L> \land <var:D1> = <var:L> \land <var:D2> = <var:L> ^ <nat:2> } \end{verbatim} This is known to be sound with the binding law found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D1> := <var:X> ; <var:D2> := <var:D1> * <var:X> ; <var:D0> := <nat:6> ; <var:D2> := <var:D2> * <nat:6> ; <var:Y> := <var:D2> <var:Y> := <var:Y> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:X> = <var:L> }} <def:poly> {{ <var:Y> = <nat:6> * <var:L> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:L> /\ <var:D1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:L> /\ <var:D1> = <var:L> /\ <var:D2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:L> /\ <var:D1> = <var:L> /\ <var:D2> = <var:L> ^ <nat:2> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:L> /\ <var:D1> = <var:L> /\ <var:D2> = <nat:6> * <var:L> ^ <nat:2> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:L> /\ <var:D1> = <var:L> /\ <var:D0> = <nat:6> /\ <var:Y> = <nat:6> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:L> /\ <var:Y> = <nat:6> * <var:L> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 