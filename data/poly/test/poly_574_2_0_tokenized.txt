\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:4> ; <var:n> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:M> = <var:p> $ , for whole numbers $ <var:p> $ , prior to the execution of this list of instructions it must be that we see $ <var:n> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:p> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:M> = <var:p> \land <var:I0> = <nat:4> \} \\ <var:n> := <var:I0> \\ \{ <var:M> = <var:p> \land <var:n> = <nat:4> \} \end{eqnarray} Applying usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:4> ; <var:n> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:M> = <var:p> }} <def:poly> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 