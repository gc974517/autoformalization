\begin{document} \begin{theorem} Define a series of instructions : \begin{verbatim} <var:L1> := <var:f> ; <var:L2> := <var:L1> * <var:f> ; <var:L3> := <var:L2> * <var:f> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:1> ; <var:L3> := <var:L3> * <nat:1> ; <var:U> := <var:L3> <var:U> := <var:U> + <var:L2> <var:U> := <var:U> + <var:L1> <var:U> := <var:U> + <var:L0> \end{verbatim} Assuming that $ <var:f> = <var:h> $ prior to the evaluation of our code it holds that we have $ <var:U> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our program is given using Hoare techniques . Focusing on the subsequent command in the program , we see the command \verb | <var:L1> := <var:f> ; | . This transfers $ \{ <var:f> = <var:h> \} $ as $ \{ <var:f> = <var:h> \land <var:L1> = <var:h> \} $ . This is known to be sound through the assignment scheme given by typical Hoare techniques . Looking at the next command in the list of commands , we see the variable update line letting $ <var:L1> * <var:f> $ into $ <var:L2>$ . This advances the condition $ \{ <var:f> = <var:h> \land <var:L1> = <var:h> \} $ to the condition $ \{ <var:f> = <var:h> \land <var:L1> = <var:h> \land <var:L2> = <var:h> ^ <nat:2> \} $ . Immediately after , the line \verb | <var:L3> := <var:L2> * <var:f> ; | . This line takes the condition $ \{ <var:f> = <var:h> \land <var:L1> = <var:h> \land <var:L2> = <var:h> ^ <nat:2> \} $ to the postcondition $ \{ <var:f> = <var:h> \land <var:L1> = <var:h> \land <var:L2> = <var:h> ^ <nat:2> \land <var:L3> = <var:h> ^ <nat:3> \} $ . This is rigorously given using the assignment rule found in typical Hoare reasoning . Following , we see the environment update command binding $ <nat:7> $ toward $ <var:L0>$ . This advances the condition $ \{ <var:f> = <var:h> \land <var:L1> = <var:h> \land <var:L2> = <var:h> ^ <nat:2> \land <var:L3> = <var:h> ^ <nat:3> \} $ as $ \{ <var:f> = <var:h> \land <var:L1> = <var:h> \land <var:L2> = <var:h> ^ <nat:2> \land <var:L3> = <var:h> ^ <nat:3> \land <var:L0> = <nat:7> \} $ . This is deduced with the assignment law from usual Hoare logic . Moving forward to the following piece of code found in the series of commands , we have the environment update statement binding $ <var:L1> * <nat:2> $ as $ <var:L1>$ . This takes the precondition $ \{ <var:f> = <var:h> \land <var:L1> = <var:h> \land <var:L2> = <var:h> ^ <nat:2> \land <var:L3> = <var:h> ^ <nat:3> \land <var:L0> = <nat:7> \} $ toward the condition $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L2> = <var:h> ^ <nat:2> \land <var:L3> = <var:h> ^ <nat:3> \land <var:L0> = <nat:7> \} $ . Paying attention to the following line of code in our list of instructions , the assignment statement \verb | <var:L2> := <var:L2> * <nat:1> ; | . This command redefines $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L2> = <var:h> ^ <nat:2> \land <var:L3> = <var:h> ^ <nat:3> \land <var:L0> = <nat:7> \} $ into the condition $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L2> = <nat:1> \cdot <var:h> ^ <nat:2> \land <var:L3> = <var:h> ^ <nat:3> \land <var:L0> = <nat:7> \} $ . Moving forward , we see the variable update line yielding $ <var:L3> * <nat:1> $ into $ <var:L3>$ . This takes $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L2> = <nat:1> \cdot <var:h> ^ <nat:2> \land <var:L3> = <var:h> ^ <nat:3> \land <var:L0> = <nat:7> \} $ as the condition $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L2> = <nat:1> \cdot <var:h> ^ <nat:2> \land <var:L3> = <nat:1> \cdot <var:h> ^ <nat:3> \land <var:L0> = <nat:7> \} $ . Advancing to the next step , we have the assignment code \verb | <var:U> := <var:L3> | . This command advances the condition $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L2> = <nat:1> \cdot <var:h> ^ <nat:2> \land <var:L3> = <nat:1> \cdot <var:h> ^ <nat:3> \land <var:L0> = <nat:7> \} $ toward $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L2> = <nat:1> \cdot <var:h> ^ <nat:2> \land <var:L0> = <nat:7> \land <var:U> = <nat:1> \cdot <var:h> ^ <nat:3> \} $ . Stepping through , the environment update code assigning $ <var:U> + <var:L2$ into $ <var:U>$ . This code advances the precondition $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L2> = <nat:1> \cdot <var:h> ^ <nat:2> \land <var:L0> = <nat:7> \land <var:U> = <nat:1> \cdot <var:h> ^ <nat:3> \} $ into the postcondition $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L0> = <nat:7> \land <var:U> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> \} $ . Further , we see the assignment line \verb | <var:U> := <var:U> + <var:L1> | . This moves the precondition $ \{ <var:f> = <var:h> \land <var:L1> = <nat:2> \cdot <var:h> \land <var:L0> = <nat:7> \land <var:U> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> \} $ into the postcondition $ \{ <var:f> = <var:h> \land <var:L0> = <nat:7> \land <var:U> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> \} $ . Paying attention to the subsequent bit of code seen in our list of commands , the statement binding $ <var:U> + <var:L0$ toward $ <var:U>$ . This command redefines $ \{ <var:f> = <var:h> \land <var:L0> = <nat:7> \land <var:U> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> \} $ to the postcondition $ \{ <var:f> = <var:h> \land <var:U> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:7> \} $ . This is shown using the assignment law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:f> = <var:h> }} <var:L1> := <var:f> ; <var:L2> := <var:L1> * <var:f> ; <var:L3> := <var:L2> * <var:f> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:1> ; <var:L3> := <var:L3> * <nat:1> ; <var:U> := <var:L3> <var:U> := <var:U> + <var:L2> <var:U> := <var:U> + <var:L1> <var:U> := <var:U> + <var:L0> {{ <var:U> = <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <var:h> /\ <var:L2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <var:h> /\ <var:L2> = <var:h> ^ <nat:2> /\ <var:L3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <var:h> /\ <var:L2> = <var:h> ^ <nat:2> /\ <var:L3> = <var:h> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <nat:2> * <var:h> /\ <var:L2> = <var:h> ^ <nat:2> /\ <var:L3> = <var:h> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <nat:2> * <var:h> /\ <var:L2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:L3> = <var:h> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <nat:2> * <var:h> /\ <var:L2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:L3> = <nat:1> * <var:h> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <nat:2> * <var:h> /\ <var:L2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:L0> = <nat:7> /\ <var:U> = <nat:1> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L1> = <nat:2> * <var:h> /\ <var:L0> = <nat:7> /\ <var:U> = <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:L0> = <nat:7> /\ <var:U> = <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:U> = <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 