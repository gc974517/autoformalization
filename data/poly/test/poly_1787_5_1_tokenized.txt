\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:I> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:3> ; <var:Z> := <var:n1> <var:Z> := <var:Z> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:I> = <var:A> $ ahead of executing the set of commands , it must be that we see $ <var:Z> = <nat:3> \cdot <var:A> + <nat:4> $ when program executes . \end{theorem} \begin{proof} The argument for our code segment is done by Hoare logic . Advancing on , \verb | { <var:I> = <var:A> } <var:n1> := <var:I> { <var:I> = <var:A> \land <var:n1> = <var:A> } | , \verb | { <var:I> = <var:A> \land <var:n1> = <var:A> } <var:n0> := <nat:4> { <var:I> = <var:A> \land <var:n1> = <var:A> \land <var:n0> = <nat:4> } | , \verb | { <var:I> = <var:A> \land <var:n1> = <var:A> \land <var:n0> = <nat:4> } <var:n1> := <var:n1> * <nat:3> { <var:I> = <var:A> \land <var:n1> = <nat:3> * <var:A> \land <var:n0> = <nat:4> } | , \verb | { <var:I> = <var:A> \land <var:n1> = <nat:3> * <var:A> \land <var:n0> = <nat:4> } <var:Z> := <var:n1{ <var:I> = <var:A> \land <var:n0> = <nat:4> \land <var:Z> = <nat:3> * <var:A> } | and \verb | { <var:I> = <var:A> \land <var:n0> = <nat:4> \land <var:Z> = <nat:3> * <var:A> } <var:Z> := <var:Z> + <var:n0{ <var:I> = <var:A> \land <var:Z> = <nat:3> * <var:A> + <nat:4> } | . This is deduced through the environment update inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n1> := <var:I> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:3> ; <var:Z> := <var:n1> <var:Z> := <var:Z> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:I> = <var:A> }} <def:poly> {{ <var:Z> = <nat:3> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:n1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:n1> = <var:A> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:n1> = <nat:3> * <var:A> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:n0> = <nat:4> /\ <var:Z> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:Z> = <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 