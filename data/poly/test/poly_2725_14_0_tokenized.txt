\begin{document} \begin{theorem} Take the following series of instructions as follows \begin{verbatim} <var:x0> := <nat:7> ; <var:x1> := <nat:5> ; <var:x1> := <var:x1> * <var:S> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:S> ; <var:x2> := <var:x2> * <var:S> ; <var:x3> := <nat:9> ; <var:x3> := <var:x3> * <var:S> ; <var:x3> := <var:x3> * <var:S> ; <var:x3> := <var:x3> * <var:S> ; <var:g> := <var:x3> ; <var:g> := <var:g> + <var:x2> ; <var:g> := <var:g> + <var:x1> ; <var:g> := <var:g> + <var:x0> \end{verbatim} Assuming that $ <var:S> = <var:O> $ for any whole numbers $ <var:O> $ ahead of interpreting the code , then we see $ <var:g> = <nat:9> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions can be given using typical Hoare logic . Further , we have the variable binding code binding $ <nat:7> $ toward $ <var:x0>$ . This moves the precondition $ \{ <var:S> = <var:O> \} $ to $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \} $ . Looking at the following step found in the series of commands , we see the environment update statement letting $ <nat:5> $ into $ <var:x1>$ . This transfers the condition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \} $ toward $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \} $ . This is shown to be logically sound through the assignment law from typical Hoare logic . Taking another step toward the following command seen in our segment of code , the environment update command binding $ <var:x1> * <var:S> $ as $ <var:x1>$ . This statement moves the precondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \} $ as the postcondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \} $ . Taking a look at the following bit of code seen in our list of commands , we see the assignment command yielding $ <nat:4> $ as $ <var:x2>$ . This redefines the precondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \} $ as $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \} $ . Observing the proceeding step contained in our segment of code , the code \verb | <var:x2> := <var:x2> * <var:S> ; | . This code advances the precondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \} $ toward $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> \} $ . Paying attention to the subsequent piece of code found in the segment of code , the binding line giving $ <var:x2> * <var:S> $ into $ <var:x2>$ . This takes $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> \} $ to the postcondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \} $ . Moving on to the upcoming step found in our program , we have the environment update statement assigning $ <nat:9> $ as $ <var:x3>$ . This command transfers $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \} $ into the postcondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:x3> = <nat:9> \} $ . This is rigorously given by the assignment law given by usual Hoare techniques . Advancing on , we see the binding command giving $ <var:x3> * <var:S> $ to $ <var:x3>$ . This code forwards the precondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:x3> = <nat:9> \} $ as the postcondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:x3> = <nat:9> \cdot <var:O> \} $ . Advancing to the next step , we have the code \verb | <var:x3> := <var:x3> * <var:S> ; | . This redefines the precondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:x3> = <nat:9> \cdot <var:O> \} $ as $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:x3> = <nat:9> \cdot <var:O> ^ <nat:2> \} $ . This is given using the assignment scheme defined in usual Hoare reasoning . Considering the upcoming statement contained in the series of commands , we have the variable assignmet code assigning $ <var:x3> * <var:S> $ as $ <var:x3>$ . This line moves $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:x3> = <nat:9> \cdot <var:O> ^ <nat:2> \} $ toward the condition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:x3> = <nat:9> \cdot <var:O> ^ <nat:3> \} $ . This is deduced with the assignment inference rule in Hoare reasoning . Immediately following , the assignment command assigning $ <var:x3> $ to $ <var:g>$ . This statement redefines the condition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:x3> = <nat:9> \cdot <var:O> ^ <nat:3> \} $ into $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:g> = <nat:9> \cdot <var:O> ^ <nat:3> \} $ . This is ensured by the assignment law defined in Hoare techniques . Further , we have the variable binding code defining $ <var:g> + <var:x2> $ toward $ <var:g>$ . This takes $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:x2> = <nat:4> \cdot <var:O> ^ <nat:2> \land <var:g> = <nat:9> \cdot <var:O> ^ <nat:3> \} $ toward the postcondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:g> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> \} $ . This is shown using the assignment law defined by usual Hoare techniques . Taking a look at the proceeding step contained in our set of instructions , the variable assignmet statement \verb | <var:g> := <var:g> + <var:x1> ; | . This command redefines the precondition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:x1> = <nat:5> \cdot <var:O> \land <var:g> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> \} $ toward the condition $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:g> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:5> \cdot <var:O> \} $ . Immediately following , the binding statement yielding $ <var:g> + <var:x0$ toward $ <var:g>$ . This statement redefines $ \{ <var:S> = <var:O> \land <var:x0> = <nat:7> \land <var:g> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:5> \cdot <var:O> \} $ to $ \{ <var:S> = <var:O> \land <var:g> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:5> \cdot <var:O> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:S> = <var:O> }} <var:x0> := <nat:7> ; <var:x1> := <nat:5> ; <var:x1> := <var:x1> * <var:S> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:S> ; <var:x2> := <var:x2> * <var:S> ; <var:x3> := <nat:9> ; <var:x3> := <var:x3> * <var:S> ; <var:x3> := <var:x3> * <var:S> ; <var:x3> := <var:x3> * <var:S> ; <var:g> := <var:x3> ; <var:g> := <var:g> + <var:x2> ; <var:g> := <var:g> + <var:x1> ; <var:g> := <var:g> + <var:x0> {{ <var:g> = <nat:9> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:x2> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:x2> = <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:x2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:x3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:x2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:x2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:x2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:x2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:g> = <nat:9> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:5> * <var:O> /\ <var:g> = <nat:9> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:x0> = <nat:7> /\ <var:g> = <nat:9> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:g> = <nat:9> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 