\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:Y> ; <var:s> := <var:p1> ; <var:s> := <var:s> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:Y> = <var:U> $ prior to interpreting this code it must be that we see $ <var:s> = <nat:8> \times <var:U> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this code is accomplished through typical Hoare techniques . Paying attention to the subsequent line found in our code , we see the environment update line giving $ <nat:3> $ into $ <var:p0>$ . This redefines $ \{ <var:Y> = <var:U> \} $ into $ \{ <var:Y> = <var:U> \land <var:p0> = <nat:3> \} $ . This is sound with the assignment law given in usual Hoare techniques . Moving on to the next step , we have the variable assignmet line assigning $ <nat:8> $ to $ <var:p1>$ . This code forwards the precondition $ \{ <var:Y> = <var:U> \land <var:p0> = <nat:3> \} $ to the postcondition $ \{ <var:Y> = <var:U> \land <var:p0> = <nat:3> \land <var:p1> = <nat:8> \} $ . This is rigorously given by the assignment law obtained from typical Hoare techniques . Now , the variable binding statement \verb | <var:p1> := <var:p1> * <var:Y> ; | . This line advances the precondition $ \{ <var:Y> = <var:U> \land <var:p0> = <nat:3> \land <var:p1> = <nat:8> \} $ to the condition $ \{ <var:Y> = <var:U> \land <var:p0> = <nat:3> \land <var:p1> = <nat:8> * <var:U> \} $ . Advancing on , we have the code assigning $ <var:p1> $ to $ <var:s>$ . This transfers $ \{ <var:Y> = <var:U> \land <var:p0> = <nat:3> \land <var:p1> = <nat:8> * <var:U> \} $ into the condition $ \{ <var:Y> = <var:U> \land <var:p0> = <nat:3> \land <var:s> = <nat:8> * <var:U> \} $ . This is given with the assignment inference rule given in typical Hoare reasoning . Moving on to the following line of code in our series of instructions , the binding line letting $ <var:s> + <var:p0$ into $ <var:s>$ . This statement moves $ \{ <var:Y> = <var:U> \land <var:p0> = <nat:3> \land <var:s> = <nat:8> * <var:U> \} $ to the condition $ \{ <var:Y> = <var:U> \land <var:s> = <nat:8> * <var:U> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:Y> ; <var:s> := <var:p1> ; <var:s> := <var:s> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Y> = <var:U> }} <def:poly> {{ <var:s> = <nat:8> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:p0> = <nat:3> /\ <var:s> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:s> = <nat:8> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 