\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:9> ; <var:m> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:j> = <var:p> $ ahead of running our series of instructions , it holds that $ <var:m> = <nat:9> $ when code segment executes . \end{theorem} \begin{proof} The method of proof for the set of instructions can be shown through usual Hoare reasoning . Considering the upcoming line of code seen in our set of commands , we have the code yielding $ <nat:9> $ into $ <var:i0>$ . This advances the condition $ \{ <var:j> = <var:p> \} $ to the condition $ \{ <var:j> = <var:p> \land <var:i0> = <nat:9> \} $ . This is ensured with the assignment scheme of standard Hoare logic . Moving on to the next step , we have the assignment code defining $ <var:i0$ toward $ <var:m>$ . This forwards the condition $ \{ <var:j> = <var:p> \land <var:i0> = <nat:9> \} $ into $ \{ <var:j> = <var:p> \land <var:m> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:9> ; <var:m> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:j> = <var:p> }} <def:poly> {{ <var:m> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:m> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 