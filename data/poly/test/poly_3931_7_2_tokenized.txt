\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:r> := <nat:3> ; <var:r> := <nat:1> + <var:r> * <var:L> ; <var:r> := <var:r> * <var:L> ; <var:r> := <nat:4> + <var:r> * <var:L> ; <var:r> := <nat:2> + <var:r> * <var:L> ; <var:r> := <nat:1> + <var:r> * <var:L> ; <var:r> := <nat:3> + <var:r> * <var:L> \end{verbatim} Allowing ( for some integers $ <var:i> $ ) $ <var:L> = <var:i> $ prior to executing the list of instructions , it follows that we see $ <var:r> = <nat:3> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> $ once set of commands exits . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:L> = <var:i> \} \\ <var:r> := <nat:3> ; \\ \{ <var:L> = <var:i> \land <var:r> = <nat:3> \} \\ <var:r> := <nat:1> + <var:r> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:r> = <nat:3> * <var:i> + <nat:1> \} \\ <var:r> := <var:r> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:r> = <nat:3> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + \} \\ <var:r> := <nat:4> + <var:r> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:r> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> \} \\ <var:r> := <nat:2> + <var:r> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:r> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:2> \} \\ <var:r> := <nat:1> + <var:r> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:r> = <nat:3> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:1> \} \\ <var:r> := <nat:3> + <var:r> * <var:L> \\ \{ <var:L> = <var:i> \land <var:r> = <nat:3> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> \} \end{eqnarray} Considering the above , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:L> = <var:i> }} <var:r> := <nat:3> ; <var:r> := <nat:1> + <var:r> * <var:L> ; <var:r> := <var:r> * <var:L> ; <var:r> := <nat:4> + <var:r> * <var:L> ; <var:r> := <nat:2> + <var:r> * <var:L> ; <var:r> := <nat:1> + <var:r> * <var:L> ; <var:r> := <nat:3> + <var:r> * <var:L> {{ <var:r> = <nat:3> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:r> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:r> = <nat:3> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:r> = <nat:3> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:r> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:r> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:r> = <nat:3> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:r> = <nat:3> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 