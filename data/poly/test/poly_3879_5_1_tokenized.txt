\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:s> ; <var:M0> := <nat:5> ; <var:M1> := <var:M1> * <nat:9> ; <var:U> := <var:M1> <var:U> := <var:U> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:s> = <var:n> $ ahead of interpreting this series of commands it holds that we see $ <var:U> = <nat:9> \cdot <var:n> + <nat:5> $ once set of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:n> \} \\ <var:M1> := <var:s> ; \\ \{ <var:s> = <var:n> \land <var:M1> = <var:n> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:s> = <var:n> \land <var:M1> = <var:n> \land <var:M0> = <nat:5> \} \\ <var:M1> := <var:M1> * <nat:9> ; \\ \{ <var:s> = <var:n> \land <var:M1> = <nat:9> \times <var:n> \land <var:M0> = <nat:5> \} \\ <var:U> := <var:M1> \\ \{ <var:s> = <var:n> \land <var:M0> = <nat:5> \land <var:U> = <nat:9> \times <var:n> \} \\ <var:U> := <var:U> + <var:M0> \\ \{ <var:s> = <var:n> \land <var:U> = <nat:9> \times <var:n> + <nat:5> \} \end{eqnarray} Using standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:s> ; <var:M0> := <nat:5> ; <var:M1> := <var:M1> * <nat:9> ; <var:U> := <var:M1> <var:U> := <var:U> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:s> = <var:n> }} <def:poly> {{ <var:U> = <nat:9> * <var:n> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:M1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:M1> = <var:n> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:M1> = <nat:9> * <var:n> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:M0> = <nat:5> /\ <var:U> = <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:U> = <nat:9> * <var:n> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 