\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} : \begin{verbatim} <var:Y> := <nat:2> ; <var:Y> := <nat:2> + <var:Y> * <var:I> ; <var:Y> := <nat:1> + <var:Y> * <var:I> ; <var:Y> := <var:Y> * <var:I> ; <var:Y> := <nat:2> + <var:Y> * <var:I> \end{verbatim} Assuming $ <var:I> = <var:s> $ before running this code , it follows that $ <var:Y> = <nat:2> \cdot <var:s> ^ <nat:4> + <nat:2> \cdot <var:s> ^ <nat:3> + <nat:1> \cdot <var:s> ^ <nat:2> + <nat:2> $ when series of instructions has terminated . \end{theorem} \begin{proof} The method of proof for this segment of code can be given using standard Hoare logic . Moving on , we have \verb | { <var:I> = <var:s> } <var:Y> := <nat:2> { <var:I> = <var:s> \land <var:Y> = <nat:2> } | , \verb | { <var:I> = <var:s> \land <var:Y> = <nat:2> } <var:Y> := <nat:2> + <var:Y> * <var:I> { <var:I> = <var:s> \land <var:Y> = <nat:2> \cdot <var:s> + <nat:2> } | , \verb | { <var:I> = <var:s> \land <var:Y> = <nat:2> \cdot <var:s> + <nat:2> } <var:Y> := <nat:1> + <var:Y> * <var:I> { <var:I> = <var:s> \land <var:Y> = <nat:2> \cdot <var:s> ^ <nat:2> + <nat:2> \cdot <var:s> + <nat:1> } | , \verb | { <var:I> = <var:s> \land <var:Y> = <nat:2> \cdot <var:s> ^ <nat:2> + <nat:2> \cdot <var:s> + <nat:1> } <var:Y> := <var:Y> * <var:I> { <var:I> = <var:s> \land <var:Y> = <nat:2> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> ^ <nat:2> + <nat:1> \cdot <var:s> + } | and \verb | { <var:I> = <var:s> \land <var:Y> = <nat:2> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> ^ <nat:2> + <nat:1> \cdot <var:s> + } <var:Y> := <nat:2> + <var:Y> * <var:I{ <var:I> = <var:s> \land <var:Y> = <nat:2> \cdot <var:s> ^ <nat:4> + <nat:2> \cdot <var:s> ^ <nat:3> + <nat:1> \cdot <var:s> ^ <nat:2> + <nat:2> } | . This is deduced using the assignment rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:I> = <var:s> }} <var:Y> := <nat:2> ; <var:Y> := <nat:2> + <var:Y> * <var:I> ; <var:Y> := <nat:1> + <var:Y> * <var:I> ; <var:Y> := <var:Y> * <var:I> ; <var:Y> := <nat:2> + <var:Y> * <var:I> {{ <var:Y> = <nat:2> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:Y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:Y> = <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:Y> = <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:Y> = <nat:2> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:Y> = <nat:2> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 