\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:w> := <nat:1> ; <var:w> := <nat:3> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <var:w> * <var:n> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <var:w> * <var:n> ; <var:w> := <nat:3> + <var:w> * <var:n> ; <var:w> := <nat:4> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <var:w> * <var:n> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> \end{verbatim} Allowing $ <var:n> = <var:G> $ prior to executing the segment of code then we see $ <var:w> = <nat:1> \times <var:G> ^ <nat:13> + <nat:3> \times <var:G> ^ <nat:12> + <nat:1> \times <var:G> ^ <nat:11> + <nat:1> \times <var:G> ^ <nat:10> + <nat:2> \times <var:G> ^ <nat:9> + <nat:2> \times <var:G> ^ <nat:7> + <nat:3> \times <var:G> ^ <nat:5> + <nat:4> \times <var:G> ^ <nat:4> + <nat:1> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands can be shown through usual Hoare techniques . Going forward , \begin{eqnarray} \{ <var:n> = <var:G> \} \, <var:w> := <nat:1> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> \} \, <var:w> := <nat:3> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> + <nat:3> \} \end{eqnarray} This is sound through the binding law given by usual Hoare logic . Advancing to the upcoming pieces of code found in the list of commands , we see \begin{eqnarray} \{ <var:n> = <var:G> \} \, <var:w> := <nat:1> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> \} \, <var:w> := <nat:3> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> + <nat:3> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> + <nat:3> \} \, <var:w> := <nat:1> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> \} \, <var:w> := <nat:1> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> \} \, <var:w> := <nat:2> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} \, <var:w> := <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + \} \, <var:w> := <nat:2> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> \} \, <var:w> := <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + \} \, <var:w> := <nat:3> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> \} \end{eqnarray} Moving on , we have \begin{eqnarray} \{ <var:n> = <var:G> \} \, <var:w> := <nat:1> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> \} \, <var:w> := <nat:3> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> + <nat:3> \} \\ \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> + <nat:3> \} \, <var:w> := <nat:1> + <var:w> * <var:n> \, \{ <var:n> = <var:G> \land <var:w> = <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:n> = <var:G> }} <var:w> := <nat:1> ; <var:w> := <nat:3> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <var:w> * <var:n> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <var:w> * <var:n> ; <var:w> := <nat:3> + <var:w> * <var:n> ; <var:w> := <nat:4> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <var:w> * <var:n> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> {{ <var:w> = <nat:1> * <var:G> ^ <nat:13> + <nat:3> * <var:G> ^ <nat:12> + <nat:1> * <var:G> ^ <nat:11> + <nat:1> * <var:G> ^ <nat:10> + <nat:2> * <var:G> ^ <nat:9> + <nat:2> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:9> + <nat:3> * <var:G> ^ <nat:8> + <nat:1> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:10> + <nat:3> * <var:G> ^ <nat:9> + <nat:1> * <var:G> ^ <nat:8> + <nat:1> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:11> + <nat:3> * <var:G> ^ <nat:10> + <nat:1> * <var:G> ^ <nat:9> + <nat:1> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:12> + <nat:3> * <var:G> ^ <nat:11> + <nat:1> * <var:G> ^ <nat:10> + <nat:1> * <var:G> ^ <nat:9> + <nat:2> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:w> = <nat:1> * <var:G> ^ <nat:13> + <nat:3> * <var:G> ^ <nat:12> + <nat:1> * <var:G> ^ <nat:11> + <nat:1> * <var:G> ^ <nat:10> + <nat:2> * <var:G> ^ <nat:9> + <nat:2> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 