\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:8> ; <var:K> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Assuming $ <var:G> = <var:k> $ prior to running the set of commands , it holds that we see $ <var:K> = <nat:8> $ after segment of code exits . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be given using typical Hoare reasoning . Moving onward , we see the variable update command \verb | <var:z0> := <nat:8> ; | . This line transfers $ \{ <var:G> = <var:k> \} $ to $ \{ <var:G> = <var:k> \land <var:z0> = <nat:8> \} $ . This is guaranteed through the assignment scheme found in usual Hoare techniques . Stepping through , we have the variable update code \verb | <var:K> := <var:z0> | . This line advances the precondition $ \{ <var:G> = <var:k> \land <var:z0> = <nat:8> \} $ to the condition $ \{ <var:G> = <var:k> \land <var:K> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:8> ; <var:K> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:G> = <var:k> }} <def:poly> {{ <var:K> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:K> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 