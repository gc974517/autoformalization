\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:7> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:h> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:h> ; <var:F2> := <var:F2> * <var:h> ; <var:U> := <var:F2> ; <var:U> := <var:U> + <var:F1> ; <var:U> := <var:U> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:h> = <var:Q> $ ahead of running this segment of code it follows that we have $ <var:U> = <nat:8> \times <var:Q> ^ <nat:2> + <nat:6> \times <var:Q> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be demonstrated using standard Hoare reasoning . After , \[ \begin{tabular} {rcl} \{ <var:h> = <var:Q> \} & <var:F0> := <nat:7> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \} \\ \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \} & <var:F1> := <nat:6> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> \} \\ \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> \} & <var:F1> := <var:F1> * <var:h> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> * <var:Q> \} \end{tabular} This is shown to be logically sound through the rule from standard Hoare reasoning . Focusing on the upcoming lines of codefound in our code segment , we see \[ \begin{tabular} {rcl} \{ <var:h> = <var:Q> \} & <var:F0> := <nat:7> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \} \\ \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \} & <var:F1> := <nat:6> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> \} \\ \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> \} & <var:F1> := <var:F1> * <var:h> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> * <var:Q> \} \\ \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> * <var:Q> \} & <var:F2> := <nat:8> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> * <var:Q> \land <var:F2> = <nat:8> \} \\ \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> * <var:Q> \land <var:F2> = <nat:8> \} & <var:F2> := <var:F2> * <var:h> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> * <var:Q> \land <var:F2> = <nat:8> * <var:Q> \} \\ \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> * <var:Q> \land <var:F2> = <nat:8> * <var:Q> \} & <var:F2> := <var:F2> * <var:h> & \{ <var:h> = <var:Q> \land <var:F0> = <nat:7> \land <var:F1> = <nat:6> * <var:Q> \land <var:F2> = <nat:8> * <var:Q> ^ <nat:2> \} \end{tabular} This is shown using the environment update rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:7> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:h> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:h> ; <var:F2> := <var:F2> * <var:h> ; <var:U> := <var:F2> ; <var:U> := <var:U> + <var:F1> ; <var:U> := <var:U> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:h> = <var:Q> }} <def:poly> {{ <var:U> = <nat:8> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:6> * <var:Q> /\ <var:F2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:6> * <var:Q> /\ <var:F2> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:6> * <var:Q> /\ <var:F2> = <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:6> * <var:Q> /\ <var:U> = <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:F0> = <nat:7> /\ <var:U> = <nat:8> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:U> = <nat:8> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 