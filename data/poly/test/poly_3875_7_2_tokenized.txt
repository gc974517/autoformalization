\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m> := <nat:4> ; <var:m> := <nat:1> + <var:m> * <var:B> ; <var:m> := <nat:4> + <var:m> * <var:B> ; <var:m> := <nat:4> + <var:m> * <var:B> ; <var:m> := <nat:2> + <var:m> * <var:B> ; <var:m> := <nat:4> + <var:m> * <var:B> ; <var:m> := <nat:1> + <var:m> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Allowing --- for any natural numbers $ <var:A> $ --- that $ <var:B> = <var:A> $ before running the series of commands then we have $ <var:m> = <nat:4> \cdot <var:A> ^ <nat:6> + <nat:1> \cdot <var:A> ^ <nat:5> + <nat:4> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the list of instructions is clear using the below decorated list of commands . \begin{eqnarray} \{ <var:B> = <var:A> \} \\ <var:m> := <nat:4> ; \\ \{ <var:B> = <var:A> \land <var:m> = <nat:4> \} \\ <var:m> := <nat:1> + <var:m> * <var:B> ; \\ \{ <var:B> = <var:A> \land <var:m> = <nat:4> \times <var:A> + <nat:1> \} \\ <var:m> := <nat:4> + <var:m> * <var:B> ; \\ \{ <var:B> = <var:A> \land <var:m> = <nat:4> \times <var:A> ^ <nat:2> + <nat:1> \times <var:A> + <nat:4> \} \\ <var:m> := <nat:4> + <var:m> * <var:B> ; \\ \{ <var:B> = <var:A> \land <var:m> = <nat:4> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:4> \} \\ <var:m> := <nat:2> + <var:m> * <var:B> ; \\ \{ <var:B> = <var:A> \land <var:m> = <nat:4> \times <var:A> ^ <nat:4> + <nat:1> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:2> \} \\ <var:m> := <nat:4> + <var:m> * <var:B> ; \\ \{ <var:B> = <var:A> \land <var:m> = <nat:4> \times <var:A> ^ <nat:5> + <nat:1> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:4> \} \\ <var:m> := <nat:1> + <var:m> * <var:B> \\ \{ <var:B> = <var:A> \land <var:m> = <nat:4> \times <var:A> ^ <nat:6> + <nat:1> \times <var:A> ^ <nat:5> + <nat:4> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:4> ; <var:m> := <nat:1> + <var:m> * <var:B> ; <var:m> := <nat:4> + <var:m> * <var:B> ; <var:m> := <nat:4> + <var:m> * <var:B> ; <var:m> := <nat:2> + <var:m> * <var:B> ; <var:m> := <nat:4> + <var:m> * <var:B> ; <var:m> := <nat:1> + <var:m> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:B> = <var:A> }} <def:poly> {{ <var:m> = <nat:4> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:m> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:m> = <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:m> = <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:m> = <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:m> = <nat:4> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:m> = <nat:4> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:m> = <nat:4> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 