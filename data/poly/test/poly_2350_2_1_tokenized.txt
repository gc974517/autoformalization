\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:3> ; <var:k> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:C> = <var:h> $ for all $ <var:h> $ ahead of the execution of this set of instructions it follows that we see $ <var:k> = <nat:3> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this code is done using standard Hoare techniques . Advancing on , \verb | { <var:C> = <var:h> } <var:j0> := <nat:3> { <var:C> = <var:h> \land <var:j0> = <nat:3> } | and \verb | { <var:C> = <var:h> \land <var:j0> = <nat:3> } <var:k> := <var:j0{ <var:C> = <var:h> \land <var:k> = <nat:3> } | . This is ensured through the environment update scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:3> ; <var:k> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:C> = <var:h> }} <def:poly> {{ <var:k> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:h> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:h> /\ <var:k> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 