\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:C1> := <var:h> ; <var:C2> := <var:C1> * <var:h> ; <var:C3> := <var:C2> * <var:h> ; <var:C4> := <var:C3> * <var:h> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:C3> := <var:C3> * <nat:2> ; <var:C4> := <var:C4> * <nat:4> ; <var:W> := <var:C4> <var:W> := <var:W> + <var:C3> <var:W> := <var:W> + <var:C2> <var:W> := <var:W> + <var:C1> <var:W> := <var:W> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Allow ( for natural coefficients $ <var:e> $ ) $ <var:h> = <var:e> $ ahead of executing this segment of code it must be that we have $ <var:W> = <nat:4> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is clear through the below decorated series of instructions . \begin{eqnarray} \{ <var:h> = <var:e> \} \\ <var:C1> := <var:h> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \} \\ <var:C2> := <var:C1> * <var:h> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:h> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \} \\ <var:C4> := <var:C3> * <var:h> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \land <var:C4> = <var:e> ^ <nat:4> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \land <var:C4> = <var:e> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:2> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <nat:2> * <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \land <var:C4> = <var:e> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:C2> := <var:C2> * <nat:3> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <nat:2> * <var:e> \land <var:C2> = <nat:3> * <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \land <var:C4> = <var:e> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:C3> := <var:C3> * <nat:2> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <nat:2> * <var:e> \land <var:C2> = <nat:3> * <var:e> ^ <nat:2> \land <var:C3> = <nat:2> * <var:e> ^ <nat:3> \land <var:C4> = <var:e> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:C4> := <var:C4> * <nat:4> ; \\ \{ <var:h> = <var:e> \land <var:C1> = <nat:2> * <var:e> \land <var:C2> = <nat:3> * <var:e> ^ <nat:2> \land <var:C3> = <nat:2> * <var:e> ^ <nat:3> \land <var:C4> = <nat:4> * <var:e> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:W> := <var:C4> \\ \{ <var:h> = <var:e> \land <var:C1> = <nat:2> * <var:e> \land <var:C2> = <nat:3> * <var:e> ^ <nat:2> \land <var:C3> = <nat:2> * <var:e> ^ <nat:3> \land <var:C0> = <nat:1> \land <var:W> = <nat:4> * <var:e> ^ <nat:4> \} \\ <var:W> := <var:W> + <var:C3> \\ \{ <var:h> = <var:e> \land <var:C1> = <nat:2> * <var:e> \land <var:C2> = <nat:3> * <var:e> ^ <nat:2> \land <var:C0> = <nat:1> \land <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:C2> \\ \{ <var:h> = <var:e> \land <var:C1> = <nat:2> * <var:e> \land <var:C0> = <nat:1> \land <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:C1> \\ \{ <var:h> = <var:e> \land <var:C0> = <nat:1> \land <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> \} \\ <var:W> := <var:W> + <var:C0> \\ \{ <var:h> = <var:e> \land <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> \} \end{eqnarray} Applying Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <var:C4> : string := " <var:C4> " . Definition <def:poly> := <var:C1> := <var:h> ; <var:C2> := <var:C1> * <var:h> ; <var:C3> := <var:C2> * <var:h> ; <var:C4> := <var:C3> * <var:h> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:C3> := <var:C3> * <nat:2> ; <var:C4> := <var:C4> * <nat:4> ; <var:W> := <var:C4> <var:W> := <var:W> + <var:C3> <var:W> := <var:W> + <var:C2> <var:W> := <var:W> + <var:C1> <var:W> := <var:W> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:h> = <var:e> }} <def:poly> {{ <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> /\ <var:C2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C3> = <var:e> ^ <nat:3> /\ <var:C4> = <var:e> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C3> = <var:e> ^ <nat:3> /\ <var:C4> = <var:e> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C3> = <var:e> ^ <nat:3> /\ <var:C4> = <var:e> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:C3> = <var:e> ^ <nat:3> /\ <var:C4> = <var:e> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:C3> = <nat:2> * <var:e> ^ <nat:3> /\ <var:C4> = <var:e> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:C3> = <nat:2> * <var:e> ^ <nat:3> /\ <var:C4> = <nat:4> * <var:e> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:C3> = <nat:2> * <var:e> ^ <nat:3> /\ <var:C0> = <nat:1> /\ <var:W> = <nat:4> * <var:e> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:C0> = <nat:1> /\ <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C0> = <nat:1> /\ <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C0> = <nat:1> /\ <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:W> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 