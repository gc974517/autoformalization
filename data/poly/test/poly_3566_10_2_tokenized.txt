\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:2> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <var:q> * <var:w> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:4> + <var:q> * <var:w> ; <var:q> := <nat:1> + <var:q> * <var:w> ; <var:q> := <nat:4> + <var:q> * <var:w> ; <var:q> := <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:w> = <var:Y> $ --- for all natural coefficients $ <var:Y> $ --- ahead of running this code , it holds that we have $ <var:q> = <nat:2> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this list of instructions can be done through Hoare techniques . Further , the binding line \verb | <var:q> := <nat:2> ; | . This statement transfers $ \{ <var:w> = <var:Y> \} $ into the condition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> \} $ . Stepping through , we see the variable binding code letting $ <nat:3> + <var:q> * <var:w> $ into $ <var:q>$ . This statement redefines $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> \} $ to the postcondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> + <nat:3> \} $ . This is sound with the assignment scheme from Hoare logic . Jumping to the upcoming piece of code found in the list of instructions , we see the variable assignmet code yielding $ <nat:3> + <var:q> * <var:w> $ as $ <var:q>$ . This code forwards the condition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> + <nat:3> \} $ into the postcondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} $ . Following , we see the environment update statement \verb | <var:q> := <var:q> * <var:w> ; | . This statement takes the precondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} $ as the postcondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + \} $ . Next , we have the variable update statement yielding $ <nat:3> + <var:q> * <var:w> $ to $ <var:q>$ . This command transfers the precondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + \} $ as the postcondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> \} $ . This is sound through the assignment inference rule given by Hoare techniques . Observing the proceeding line of code contained in the series of commands , we see the environment update command \verb | <var:q> := <nat:4> + <var:q> * <var:w> ; | . This code advances the precondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> \} $ toward the postcondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + <nat:4> \} $ . This is deduced with the assignment law in standard Hoare reasoning . Taking a look at the next line found in our series of instructions , we see the variable binding line assigning $ <nat:1> + <var:q> * <var:w> $ to $ <var:q>$ . This code forwards the condition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + <nat:4> \} $ to the condition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> \} $ . This is guaranteed by the assignment rule found in usual Hoare logic . Moving forward to the next step , we have the variable update code \verb | <var:q> := <nat:4> + <var:q> * <var:w> ; | . This advances the condition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> \} $ as the condition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> \} $ . Stepping through , we have the variable binding command binding $ <var:q> * <var:w> $ toward $ <var:q>$ . This forwards the precondition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> \} $ toward the condition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + \} $ . Focusing on the proceeding line of code seen in our list of instructions , we have the variable update line yielding $ <nat:2> + <var:q> * <var:w$ into $ <var:q>$ . This takes $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + \} $ as the condition $ \{ <var:w> = <var:Y> \land <var:q> = <nat:2> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:2> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <var:q> * <var:w> ; <var:q> := <nat:3> + <var:q> * <var:w> ; <var:q> := <nat:4> + <var:q> * <var:w> ; <var:q> := <nat:1> + <var:q> * <var:w> ; <var:q> := <nat:4> + <var:q> * <var:w> ; <var:q> := <var:q> * <var:w> ; <var:q> := <nat:2> + <var:q> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:w> = <var:Y> }} <def:poly> {{ <var:q> = <nat:2> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Y> /\ <var:q> = <nat:2> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 