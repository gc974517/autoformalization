\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:a> := <nat:2> ; <var:a> := <nat:4> + <var:a> * <var:A> ; <var:a> := <nat:4> + <var:a> * <var:A> ; <var:a> := <nat:1> + <var:a> * <var:A> ; <var:a> := <nat:2> + <var:a> * <var:A> ; <var:a> := <nat:4> + <var:a> * <var:A> ; <var:a> := <nat:3> + <var:a> * <var:A> ; <var:a> := <nat:1> + <var:a> * <var:A> ; <var:a> := <nat:4> + <var:a> * <var:A> ; <var:a> := <nat:2> + <var:a> * <var:A> ; <var:a> := <nat:2> + <var:a> * <var:A> \end{verbatim} Assuming that $ <var:A> = <var:M> $ , given any positive coefficients $ <var:M> $ , ahead of running the set of instructions it must be that we see $ <var:a> = <nat:2> \times <var:M> ^ <nat:10> + <nat:4> \times <var:M> ^ <nat:9> + <nat:4> \times <var:M> ^ <nat:8> + <nat:1> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:2> $ when series of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for this series of commands is evident through typical Hoare logic . Immediately following , we see \begin{eqnarray} \{ <var:A> = <var:M> \} \, <var:a> := <nat:2> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> \} \, <var:a> := <nat:4> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> + <nat:4> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> + <nat:4> \} \, <var:a> := <nat:4> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> \} \, <var:a> := <nat:1> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> \} \, <var:a> := <nat:2> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> \} \, <var:a> := <nat:4> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> \} \end{eqnarray} Focusing on the next lines contained in the set of instructions , \begin{eqnarray} \{ <var:A> = <var:M> \} \, <var:a> := <nat:2> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> \} \, <var:a> := <nat:4> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> + <nat:4> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> + <nat:4> \} \, <var:a> := <nat:4> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> \} \, <var:a> := <nat:1> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> \} \\ \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> \} \, <var:a> := <nat:2> + <var:a> * <var:A> \, \{ <var:A> = <var:M> \land <var:a> = <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:A> = <var:M> }} <var:a> := <nat:2> ; <var:a> := <nat:4> + <var:a> * <var:A> ; <var:a> := <nat:4> + <var:a> * <var:A> ; <var:a> := <nat:1> + <var:a> * <var:A> ; <var:a> := <nat:2> + <var:a> * <var:A> ; <var:a> := <nat:4> + <var:a> * <var:A> ; <var:a> := <nat:3> + <var:a> * <var:A> ; <var:a> := <nat:1> + <var:a> * <var:A> ; <var:a> := <nat:4> + <var:a> * <var:A> ; <var:a> := <nat:2> + <var:a> * <var:A> ; <var:a> := <nat:2> + <var:a> * <var:A> {{ <var:a> = <nat:2> * <var:M> ^ <nat:10> + <nat:4> * <var:M> ^ <nat:9> + <nat:4> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:1> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:9> + <nat:4> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:1> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:a> = <nat:2> * <var:M> ^ <nat:10> + <nat:4> * <var:M> ^ <nat:9> + <nat:4> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 