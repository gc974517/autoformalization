\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} : \begin{verbatim} <var:B> := <nat:3> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <var:B> * <var:n> ; <var:B> := <nat:1> + <var:B> * <var:n> ; <var:B> := <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> ; <var:B> := <var:B> * <var:n> ; <var:B> := <nat:1> + <var:B> * <var:n> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> \end{verbatim} Allowing it to hold that $ <var:n> = <var:X> $ ahead of interpreting the code it holds that we have $ <var:B> = <nat:3> * <var:X> ^ <nat:11> + <nat:4> * <var:X> ^ <nat:10> + <nat:2> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions can be shown through typical Hoare logic . Advancing to the next step , we have \begin{eqnarray} \{ <var:n> = <var:X> \} \, <var:B> := <nat:3> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> \} \, <var:B> := <nat:4> + <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> + <nat:4> \} \end{eqnarray} Stepping forward , we see \begin{eqnarray} \{ <var:n> = <var:X> \} \, <var:B> := <nat:3> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> \} \, <var:B> := <nat:4> + <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> + <nat:4> \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> + <nat:4> \} \, <var:B> := <nat:2> + <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> \} \, <var:B> := <nat:4> + <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> \} \, <var:B> := <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + \} \, <var:B> := <nat:1> + <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> \} \, <var:B> := <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + \} \, <var:B> := <nat:2> + <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> \} \, <var:B> := <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + \} \\ \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + \} \, <var:B> := <nat:1> + <var:B> * <var:n> \, \{ <var:n> = <var:X> \land <var:B> = <nat:3> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:n> = <var:X> }} <var:B> := <nat:3> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <var:B> * <var:n> ; <var:B> := <nat:1> + <var:B> * <var:n> ; <var:B> := <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> ; <var:B> := <var:B> * <var:n> ; <var:B> := <nat:1> + <var:B> * <var:n> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> {{ <var:B> = <nat:3> * <var:X> ^ <nat:11> + <nat:4> * <var:X> ^ <nat:10> + <nat:2> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:10> + <nat:4> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:B> = <nat:3> * <var:X> ^ <nat:11> + <nat:4> * <var:X> ^ <nat:10> + <nat:2> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 