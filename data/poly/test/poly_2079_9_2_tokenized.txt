\begin{document} \begin{theorem} Define a set of instructions such that \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <var:L> * <var:K> ; <var:L> := <nat:1> + <var:L> * <var:K> ; <var:L> := <var:L> * <var:K> ; <var:L> := <nat:3> + <var:L> * <var:K> ; <var:L> := <nat:3> + <var:L> * <var:K> ; <var:L> := <nat:2> + <var:L> * <var:K> ; <var:L> := <nat:2> + <var:L> * <var:K> ; <var:L> := <nat:2> + <var:L> * <var:K> \end{verbatim} Allow that we have $ <var:K> = <var:X> $ ahead of running the series of instructions , then we see $ <var:L> = <nat:2> \cdot <var:X> ^ <nat:8> + <nat:1> \cdot <var:X> ^ <nat:6> + <nat:3> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:2> $ after list of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of this code is shown by Hoare reasoning . After , \begin{eqnarray} \{ <var:K> = <var:X> \} \, <var:L> := <nat:2> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \} \\ \{ <var:K> = <var:X> \land <var:L> = <nat:2> \} \, <var:L> := <var:L> * <var:K> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> + \} \\ \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> + \} \, <var:L> := <nat:1> + <var:L> * <var:K> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \} \\ \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \} \, <var:L> := <var:L> * <var:K> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> + \} \\ \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> + \} \, <var:L> := <nat:3> + <var:L> * <var:K> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:2> + <nat:3> \} \\ \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:2> + <nat:3> \} \, <var:L> := <nat:3> + <var:L> * <var:K> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> + <nat:3> \} \\ \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> + <nat:3> \} \, <var:L> := <nat:2> + <var:L> * <var:K> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:2> \} \\ \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:2> \} \, <var:L> := <nat:2> + <var:L> * <var:K> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \times <var:X> ^ <nat:7> + <nat:1> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} \end{eqnarray} Looking at the subsequent piece of code in our series of commands , we see \begin{eqnarray} \{ <var:K> = <var:X> \} \, <var:L> := <nat:2> \, \{ <var:K> = <var:X> \land <var:L> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:K> = <var:X> }} <var:L> := <nat:2> ; <var:L> := <var:L> * <var:K> ; <var:L> := <nat:1> + <var:L> * <var:K> ; <var:L> := <var:L> * <var:K> ; <var:L> := <nat:3> + <var:L> * <var:K> ; <var:L> := <nat:3> + <var:L> * <var:K> ; <var:L> := <nat:2> + <var:L> * <var:K> ; <var:L> := <nat:2> + <var:L> * <var:K> ; <var:L> := <nat:2> + <var:L> * <var:K> {{ <var:L> = <nat:2> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:L> = <nat:2> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 