\begin{document} \begin{theorem} Take the following set of commands such that \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <nat:4> + <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <nat:1> + <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <nat:3> + <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <nat:1> + <var:d> * <var:N> \end{verbatim} Allow ( for some positive integer coefficients $ <var:e> $ ) it to hold that $ <var:N> = <var:e> $ prior to running our set of commands it follows that we see $ <var:d> = <nat:1> \times <var:e> ^ <nat:8> + <nat:4> \times <var:e> ^ <nat:7> + <nat:1> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:2> + <nat:1> $ once program has finished . \end{theorem} \begin{proof} The proof of our set of instructions can be accomplished using usual Hoare techniques . Going forward , we see the assignment code yielding $ <nat:1> $ into $ <var:d>$ . This code moves the condition $ \{ <var:N> = <var:e> \} $ into the condition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \} $ . This is rigorously given by the assignment rule given in standard Hoare reasoning . Paying attention to the upcoming step in the code , the assignment code yielding $ <nat:4> + <var:d> * <var:N> $ to $ <var:d>$ . This takes $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \} $ toward $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> + <nat:4> \} $ . This is ensured through the assignment law given by typical Hoare logic . Moving forward to the subsequent line contained in our set of commands , we see the variable binding code \verb | <var:d> := <var:d> * <var:N> ; | . This transfers the condition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> + <nat:4> \} $ toward the condition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + \} $ . Advancing , the binding code \verb | <var:d> := <nat:1> + <var:d> * <var:N> ; | . This command redefines the condition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + \} $ into the postcondition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:1> \} $ . This is known to be sound through the assignment rule from typical Hoare reasoning . Immediately following , we see the variable assignmet code \verb | <var:d> := <var:d> * <var:N> ; | . This moves the precondition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:1> \} $ into the condition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> + \} $ . Advancing to the next step , we have the variable assignmet command \verb | <var:d> := <var:d> * <var:N> ; | . This code redefines the precondition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> + \} $ into $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:2> + \} $ . Moving forward to the upcoming line found in the segment of code , the variable binding statement defining $ <nat:3> + <var:d> * <var:N> $ to $ <var:d>$ . This forwards the precondition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:2> + \} $ as the condition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:6> + <nat:4> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:3> \} $ . This is ensured by the assignment rule defined in typical Hoare techniques . Jumping to the proceeding piece of code contained in our code segment , the environment update command assigning $ <var:d> * <var:N> $ as $ <var:d>$ . This statement takes $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:6> + <nat:4> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:3> \} $ as $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:7> + <nat:4> \cdot <var:e> ^ <nat:6> + <nat:1> \cdot <var:e> ^ <nat:4> + <nat:3> \cdot <var:e> + \} $ . This is known to be sound by the assignment inference rule found in typical Hoare techniques . Moving forward , we see the environment update command \verb | <var:d> := <nat:1> + <var:d> * <var:N> | . This command forwards the condition $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:7> + <nat:4> \cdot <var:e> ^ <nat:6> + <nat:1> \cdot <var:e> ^ <nat:4> + <nat:3> \cdot <var:e> + \} $ as $ \{ <var:N> = <var:e> \land <var:d> = <nat:1> \cdot <var:e> ^ <nat:8> + <nat:4> \cdot <var:e> ^ <nat:7> + <nat:1> \cdot <var:e> ^ <nat:5> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:N> = <var:e> }} <var:d> := <nat:1> ; <var:d> := <nat:4> + <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <nat:1> + <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <nat:3> + <var:d> * <var:N> ; <var:d> := <var:d> * <var:N> ; <var:d> := <nat:1> + <var:d> * <var:N> {{ <var:d> = <nat:1> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:d> = <nat:1> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 