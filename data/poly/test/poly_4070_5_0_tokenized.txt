\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:9> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:R> ; <var:h> := <var:w1> ; <var:h> := <var:h> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> in \emph{Imp} . Given it to hold that $ <var:R> = <var:c> $ before evaluating our segment of code it holds that we see $ <var:h> = <nat:5> \times <var:c> + <nat:9> $ when code is done . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions is demonstrated using Hoare techniques . Keeping momentum , we have the variable update command \verb | <var:w0> := <nat:9> ; | . This statement takes $ \{ <var:R> = <var:c> \} $ into the condition $ \{ <var:R> = <var:c> \land <var:w0> = <nat:9> \} $ . Immediately after , we see the assignment statement letting $ <nat:5> $ toward $ <var:w1>$ . This advances $ \{ <var:R> = <var:c> \land <var:w0> = <nat:9> \} $ as the postcondition $ \{ <var:R> = <var:c> \land <var:w0> = <nat:9> \land <var:w1> = <nat:5> \} $ . This is rigorously given using the assignment law given in typical Hoare logic . Honing in on the subsequent bit of code in our code , we have the variable update code \verb | <var:w1> := <var:w1> * <var:R> ; | . This forwards $ \{ <var:R> = <var:c> \land <var:w0> = <nat:9> \land <var:w1> = <nat:5> \} $ toward $ \{ <var:R> = <var:c> \land <var:w0> = <nat:9> \land <var:w1> = <nat:5> * <var:c> \} $ . Observing the following bit of code in the list of commands , we have the binding code defining $ <var:w1> $ toward $ <var:h>$ . This line forwards the precondition $ \{ <var:R> = <var:c> \land <var:w0> = <nat:9> \land <var:w1> = <nat:5> * <var:c> \} $ as the condition $ \{ <var:R> = <var:c> \land <var:w0> = <nat:9> \land <var:h> = <nat:5> * <var:c> \} $ . Advancing to the next statement contained in our set of commands , we see the variable assignmet code yielding $ <var:h> + <var:w0$ into $ <var:h>$ . This redefines the condition $ \{ <var:R> = <var:c> \land <var:w0> = <nat:9> \land <var:h> = <nat:5> * <var:c> \} $ to $ \{ <var:R> = <var:c> \land <var:h> = <nat:5> * <var:c> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:9> ; <var:w1> := <nat:5> ; <var:w1> := <var:w1> * <var:R> ; <var:h> := <var:w1> ; <var:h> := <var:h> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:R> = <var:c> }} <def:poly> {{ <var:h> = <nat:5> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:w0> = <nat:9> /\ <var:h> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:h> = <nat:5> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 