\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:2> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:G> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:G> ; <var:e2> := <var:e2> * <var:G> ; <var:e3> := <nat:2> ; <var:e3> := <var:e3> * <var:G> ; <var:e3> := <var:e3> * <var:G> ; <var:e3> := <var:e3> * <var:G> ; <var:k> := <var:e3> ; <var:k> := <var:k> + <var:e2> ; <var:k> := <var:k> + <var:e1> ; <var:k> := <var:k> + <var:e0> \end{verbatim} Assume $ <var:G> = <var:t> $ ahead of evaluating this set of commands then we have $ <var:k> = <nat:2> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:7> \cdot <var:t> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:t> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \} \\ <var:e1> := <nat:7> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> \} \\ <var:e1> := <var:e1> * <var:G> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \} \\ <var:e2> := <nat:3> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:e2> = <nat:3> \} \\ <var:e2> := <var:e2> * <var:G> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:e2> = <nat:3> * <var:t> \} \\ <var:e2> := <var:e2> * <var:G> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:e2> = <nat:3> * <var:t> ^ <nat:2> \} \\ <var:e3> := <nat:2> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:e2> = <nat:3> * <var:t> ^ <nat:2> \land <var:e3> = <nat:2> \} \\ <var:e3> := <var:e3> * <var:G> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:e2> = <nat:3> * <var:t> ^ <nat:2> \land <var:e3> = <nat:2> * <var:t> \} \\ <var:e3> := <var:e3> * <var:G> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:e2> = <nat:3> * <var:t> ^ <nat:2> \land <var:e3> = <nat:2> * <var:t> ^ <nat:2> \} \\ <var:e3> := <var:e3> * <var:G> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:e2> = <nat:3> * <var:t> ^ <nat:2> \land <var:e3> = <nat:2> * <var:t> ^ <nat:3> \} \\ <var:k> := <var:e3> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:e2> = <nat:3> * <var:t> ^ <nat:2> \land <var:k> = <nat:2> * <var:t> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:e2> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:e1> = <nat:7> * <var:t> \land <var:k> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:e1> ; \\ \{ <var:G> = <var:t> \land <var:e0> = <nat:2> \land <var:k> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:7> * <var:t> \} \\ <var:k> := <var:k> + <var:e0> \\ \{ <var:G> = <var:t> \land <var:k> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:2> \} \end{eqnarray} The application of typical Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:G> = <var:t> }} <var:e0> := <nat:2> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:G> ; <var:e2> := <nat:3> ; <var:e2> := <var:e2> * <var:G> ; <var:e2> := <var:e2> * <var:G> ; <var:e3> := <nat:2> ; <var:e3> := <var:e3> * <var:G> ; <var:e3> := <var:e3> * <var:G> ; <var:e3> := <var:e3> * <var:G> ; <var:k> := <var:e3> ; <var:k> := <var:k> + <var:e2> ; <var:k> := <var:k> + <var:e1> ; <var:k> := <var:k> + <var:e0> {{ <var:k> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:e3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:k> = <nat:2> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:7> * <var:t> /\ <var:k> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:e0> = <nat:2> /\ <var:k> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:k> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 