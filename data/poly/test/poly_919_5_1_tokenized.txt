\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:E1> := <var:d> ; <var:E0> := <nat:4> ; <var:E1> := <var:E1> * <nat:9> ; <var:M> := <var:E1> <var:M> := <var:M> + <var:E0> \end{verbatim} Assuming it to be that $ <var:d> = <var:K> $ before running our list of instructions it follows that we have $ <var:M> = <nat:9> * <var:K> + <nat:4> $ when program terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:K> \} \\ <var:E1> := <var:d> ; \\ \{ <var:d> = <var:K> \land <var:E1> = <var:K> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:d> = <var:K> \land <var:E1> = <var:K> \land <var:E0> = <nat:4> \} \\ <var:E1> := <var:E1> * <nat:9> ; \\ \{ <var:d> = <var:K> \land <var:E1> = <nat:9> \cdot <var:K> \land <var:E0> = <nat:4> \} \\ <var:M> := <var:E1> \\ \{ <var:d> = <var:K> \land <var:E0> = <nat:4> \land <var:M> = <nat:9> \cdot <var:K> \} \\ <var:M> := <var:M> + <var:E0> \\ \{ <var:d> = <var:K> \land <var:M> = <nat:9> \cdot <var:K> + <nat:4> \} \end{eqnarray} The application of Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:d> = <var:K> }} <var:E1> := <var:d> ; <var:E0> := <nat:4> ; <var:E1> := <var:E1> * <nat:9> ; <var:M> := <var:E1> <var:M> := <var:M> + <var:E0> {{ <var:M> = <nat:9> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:K> /\ <var:E1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:K> /\ <var:E1> = <var:K> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:K> /\ <var:E1> = <nat:9> * <var:K> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:K> /\ <var:E0> = <nat:4> /\ <var:M> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:K> /\ <var:M> = <nat:9> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 