\begin{document} \begin{theorem} Consider a set of commands such that \begin{verbatim} <var:B0> := <nat:4> ; <var:B1> := <nat:8> ; <var:B1> := <var:B1> * <var:W> ; <var:p> := <var:B1> ; <var:p> := <var:p> + <var:B0> \end{verbatim} Assuming that we have $ <var:W> = <var:y> $ before running this set of instructions it must be that we see $ <var:p> = <nat:8> \times <var:y> + <nat:4> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the code is given using usual Hoare reasoning . Observing the upcoming steps in the series of instructions , \begin{verbatim} { <var:W> = <var:y> } <var:B0> := <nat:4> { <var:W> = <var:y> \land <var:B0> = <nat:4> } { <var:W> = <var:y> \land <var:B0> = <nat:4> } <var:B1> := <nat:8> { <var:W> = <var:y> \land <var:B0> = <nat:4> \land <var:B1> = <nat:8> } { <var:W> = <var:y> \land <var:B0> = <nat:4> \land <var:B1> = <nat:8> } <var:B1> := <var:B1> * <var:W> { <var:W> = <var:y> \land <var:B0> = <nat:4> \land <var:B1> = <nat:8> * <var:y> } { <var:W> = <var:y> \land <var:B0> = <nat:4> \land <var:B1> = <nat:8> * <var:y> } <var:p> := <var:B1> { <var:W> = <var:y> \land <var:B0> = <nat:4> \land <var:p> = <nat:8> * <var:y> } { <var:W> = <var:y> \land <var:B0> = <nat:4> \land <var:p> = <nat:8> * <var:y> } <var:p> := <var:p> + <var:B0{ <var:W> = <var:y> \land <var:p> = <nat:8> * <var:y> + <nat:4> } \end{verbatim} This is rigorously given by the assignment rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:W> = <var:y> }} <var:B0> := <nat:4> ; <var:B1> := <nat:8> ; <var:B1> := <var:B1> * <var:W> ; <var:p> := <var:B1> ; <var:p> := <var:p> + <var:B0> {{ <var:p> = <nat:8> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:B0> = <nat:4> /\ <var:p> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:p> = <nat:8> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 