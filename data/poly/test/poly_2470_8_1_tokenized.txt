\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H1> := <var:l> ; <var:H2> := <var:H1> * <var:l> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:5> ; <var:H2> := <var:H2> * <nat:7> ; <var:V> := <var:H2> <var:V> := <var:V> + <var:H1> <var:V> := <var:V> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Allow it to be that $ <var:l> = <var:j> $ ahead of running our series of instructions then $ <var:V> = <nat:7> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our segment of code is accomplished by this decorated series of instructions . \begin{eqnarray} \{ <var:l> = <var:j> \} \\ <var:H1> := <var:l> ; \\ \{ <var:l> = <var:j> \land <var:H1> = <var:j> \} \\ <var:H2> := <var:H1> * <var:l> ; \\ \{ <var:l> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:l> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H0> = <nat:3> \} \\ <var:H1> := <var:H1> * <nat:5> ; \\ \{ <var:l> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H0> = <nat:3> \} \\ <var:H2> := <var:H2> * <nat:7> ; \\ \{ <var:l> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:H0> = <nat:3> \} \\ <var:V> := <var:H2> \\ \{ <var:l> = <var:j> \land <var:H1> = <nat:5> \cdot <var:j> \land <var:H0> = <nat:3> \land <var:V> = <nat:7> \cdot <var:j> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:H1> \\ \{ <var:l> = <var:j> \land <var:H0> = <nat:3> \land <var:V> = <nat:7> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> \} \\ <var:V> := <var:V> + <var:H0> \\ \{ <var:l> = <var:j> \land <var:V> = <nat:7> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> + <nat:3> \} \end{eqnarray} The application of usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H1> := <var:l> ; <var:H2> := <var:H1> * <var:l> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:5> ; <var:H2> := <var:H2> * <nat:7> ; <var:V> := <var:H2> <var:V> := <var:V> + <var:H1> <var:V> := <var:V> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:l> = <var:j> }} <def:poly> {{ <var:V> = <nat:7> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:H1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:H1> = <var:j> /\ <var:H2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:H1> = <var:j> /\ <var:H2> = <var:j> ^ <nat:2> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:H1> = <nat:5> * <var:j> /\ <var:H2> = <var:j> ^ <nat:2> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:H1> = <nat:5> * <var:j> /\ <var:H2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:H1> = <nat:5> * <var:j> /\ <var:H0> = <nat:3> /\ <var:V> = <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:H0> = <nat:3> /\ <var:V> = <nat:7> * <var:j> ^ <nat:2> + <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:V> = <nat:7> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 