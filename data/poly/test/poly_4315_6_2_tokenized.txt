\begin{document} \begin{theorem} We define a code in \emph{Imp} as follows \begin{verbatim} <var:S> := <nat:4> ; <var:S> := <var:S> * <var:t> ; <var:S> := <nat:2> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> \end{verbatim} Given it to be that $ <var:t> = <var:H> $ before running this segment of code , it must be that we have $ <var:S> = <nat:4> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:t> = <var:H> \} \\ <var:S> := <nat:4> ; \\ \{ <var:t> = <var:H> \land <var:S> = <nat:4> \} \\ <var:S> := <var:S> * <var:t> ; \\ \{ <var:t> = <var:H> \land <var:S> = <nat:4> \cdot <var:H> + \} \\ <var:S> := <nat:2> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:H> \land <var:S> = <nat:4> \cdot <var:H> ^ <nat:2> + <nat:2> \} \\ <var:S> := <nat:4> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:H> \land <var:S> = <nat:4> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> + <nat:4> \} \\ <var:S> := <nat:1> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:H> \land <var:S> = <nat:4> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:1> \} \\ <var:S> := <nat:4> + <var:S> * <var:t> \\ \{ <var:t> = <var:H> \land <var:S> = <nat:4> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:t> = <var:H> }} <var:S> := <nat:4> ; <var:S> := <var:S> * <var:t> ; <var:S> := <nat:2> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> {{ <var:S> = <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:S> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:S> = <nat:4> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:S> = <nat:4> * <var:H> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:S> = <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:S> = <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:H> /\ <var:S> = <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 