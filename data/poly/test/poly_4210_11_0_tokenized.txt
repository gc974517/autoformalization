\begin{document} \begin{theorem} Define a set of instructions as \begin{verbatim} <var:I0> := <nat:6> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:w> ; <var:I2> := <var:I2> * <var:w> ; <var:I3> := <nat:1> ; <var:I3> := <var:I3> * <var:w> ; <var:I3> := <var:I3> * <var:w> ; <var:I3> := <var:I3> * <var:w> ; <var:f> := <var:I3> ; <var:f> := <var:f> + <var:I2> ; <var:f> := <var:f> + <var:I0> \end{verbatim} Given letting $ <var:X> $ it to hold that $ <var:w> = <var:X> $ ahead of evaluating our series of instructions , it must be that we have $ <var:f> = <nat:1> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} The application of standard Hoare logic gives us : \begin{eqnarray} \{ <var:w> = <var:X> \} \\ <var:I0> := <nat:6> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \} \\ <var:I2> := <nat:6> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:I2> = <nat:6> \} \\ <var:I2> := <var:I2> * <var:w> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:I2> = <nat:6> * <var:X> \} \\ <var:I2> := <var:I2> * <var:w> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:I2> = <nat:6> * <var:X> ^ <nat:2> \} \\ <var:I3> := <nat:1> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:I2> = <nat:6> * <var:X> ^ <nat:2> \land <var:I3> = <nat:1> \} \\ <var:I3> := <var:I3> * <var:w> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:I2> = <nat:6> * <var:X> ^ <nat:2> \land <var:I3> = <nat:1> * <var:X> \} \\ <var:I3> := <var:I3> * <var:w> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:I2> = <nat:6> * <var:X> ^ <nat:2> \land <var:I3> = <nat:1> * <var:X> ^ <nat:2> \} \\ <var:I3> := <var:I3> * <var:w> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:I2> = <nat:6> * <var:X> ^ <nat:2> \land <var:I3> = <nat:1> * <var:X> ^ <nat:3> \} \\ <var:f> := <var:I3> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:I2> = <nat:6> * <var:X> ^ <nat:2> \land <var:f> = <nat:1> * <var:X> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:I2> ; \\ \{ <var:w> = <var:X> \land <var:I0> = <nat:6> \land <var:f> = <nat:1> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:I0> \\ \{ <var:w> = <var:X> \land <var:f> = <nat:1> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> + <nat:6> \} \end{eqnarray} Thus , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:w> = <var:X> }} <var:I0> := <nat:6> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:w> ; <var:I2> := <var:I2> * <var:w> ; <var:I3> := <nat:1> ; <var:I3> := <var:I3> * <var:w> ; <var:I3> := <var:I3> * <var:w> ; <var:I3> := <var:I3> * <var:w> ; <var:f> := <var:I3> ; <var:f> := <var:f> + <var:I2> ; <var:f> := <var:f> + <var:I0> {{ <var:f> = <nat:1> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:I3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:I3> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:I3> = <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:I3> = <nat:1> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:f> = <nat:1> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:I0> = <nat:6> /\ <var:f> = <nat:1> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:X> /\ <var:f> = <nat:1> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 