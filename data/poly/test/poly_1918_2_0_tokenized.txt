\begin{document} \begin{theorem} Define the following code as follows \begin{verbatim} <var:e0> := <nat:5> ; <var:S> := <var:e0> \end{verbatim} Allowing it to be that $ <var:c> = <var:g> $ ( given all positive numbers $ <var:g> $ ) ahead of running the program , it follows that $ <var:S> = <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the code can be accomplished by standard Hoare reasoning . Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:g> \} & <var:e0> := <nat:5> & \{ <var:c> = <var:g> \land <var:e0> = <nat:5> \} \end{tabular} Moving on to the next line contained in the list of commands , \[ \begin{tabular} {rcl} \{ <var:c> = <var:g> \} & <var:e0> := <nat:5> & \{ <var:c> = <var:g> \land <var:e0> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:c> = <var:g> }} <var:e0> := <nat:5> ; <var:S> := <var:e0> {{ <var:S> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:g> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:g> /\ <var:S> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 