\begin{document} \begin{theorem} Take a series of commands : \begin{verbatim} <var:l0> := <nat:6> ; <var:I> := <var:l0> \end{verbatim} Given $ <var:k> = <var:Q> $ , given all integers $ <var:Q> $ , ahead of executing the series of instructions then $ <var:I> = <nat:6> $ . \end{theorem} \begin{proof} Observe that this decorated list of instructions . \begin{eqnarray} \{ <var:k> = <var:Q> \} \\ <var:l0> := <nat:6> ; \\ \{ <var:k> = <var:Q> \land <var:l0> = <nat:6> \} \\ <var:I> := <var:l0> \\ \{ <var:k> = <var:Q> \land <var:I> = <nat:6> \} \end{eqnarray} The application of standard Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:k> = <var:Q> }} <var:l0> := <nat:6> ; <var:I> := <var:l0> {{ <var:I> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:I> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 