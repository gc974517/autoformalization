\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:a> := <nat:3> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Allow --- for all positive coefficients $ <var:e> $ --- that we have $ <var:x> = <var:e> $ ahead of running this set of instructions it must be that we have $ <var:a> = <nat:3> \times <var:e> ^ <nat:12> + <nat:4> \times <var:e> ^ <nat:11> + <nat:4> \times <var:e> ^ <nat:8> + <nat:4> \times <var:e> ^ <nat:7> + <nat:1> \times <var:e> ^ <nat:5> + <nat:4> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:2> $ when code segment finishes . \end{theorem} \begin{proof} Proving correctness for the set of commands can be shown using Hoare techniques . Stepping forward , we have \begin{eqnarray} \{ <var:x> = <var:e> \} \, <var:a> := <nat:3> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> \} \, <var:a> := <nat:4> + <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> + <nat:4> \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> + <nat:4> \} \, <var:a> := <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + \} \, <var:a> := <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + \} \end{eqnarray} This is known to be sound by the assignment law given in Hoare techniques . Observing the proceeding statements seen in the code segment , we see \begin{eqnarray} \{ <var:x> = <var:e> \} \, <var:a> := <nat:3> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> \} \, <var:a> := <nat:4> + <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> + <nat:4> \} \end{eqnarray} Paying attention to the following statements seen in the code , \begin{eqnarray} \{ <var:x> = <var:e> \} \, <var:a> := <nat:3> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> \} \, <var:a> := <nat:4> + <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> + <nat:4> \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> + <nat:4> \} \, <var:a> := <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + \} \, <var:a> := <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + \} \, <var:a> := <nat:4> + <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> \} \\ \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> \} \, <var:a> := <nat:4> + <var:a> * <var:x> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> + <nat:4> \} \end{eqnarray} This is sound through the variable update law obtained from usual Hoare reasoning . Observing the upcoming step found in the list of instructions , \begin{eqnarray} \{ <var:x> = <var:e> \} \, <var:a> := <nat:3> \, \{ <var:x> = <var:e> \land <var:a> = <nat:3> \} \end{eqnarray} This is sound using the environment update scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:3> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:x> = <var:e> }} <def:poly> {{ <var:a> = <nat:3> * <var:e> ^ <nat:12> + <nat:4> * <var:e> ^ <nat:11> + <nat:4> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:9> + <nat:4> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:10> + <nat:4> * <var:e> ^ <nat:9> + <nat:4> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:11> + <nat:4> * <var:e> ^ <nat:10> + <nat:4> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:a> = <nat:3> * <var:e> ^ <nat:12> + <nat:4> * <var:e> ^ <nat:11> + <nat:4> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 