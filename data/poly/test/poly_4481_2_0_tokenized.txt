\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:S0> := <nat:9> ; <var:T> := <var:S0> \end{verbatim} Given it to hold that $ <var:w> = <var:t> $ ( for any integers $ <var:t> $ ) ahead of evaluating our segment of code , it holds that we see $ <var:T> = <nat:9> $ when program is done executing . \end{theorem} \begin{proof} The application of Hoare techniques produces : \begin{eqnarray} \{ <var:w> = <var:t> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:w> = <var:t> \land <var:S0> = <nat:9> \} \\ <var:T> := <var:S0> \\ \{ <var:w> = <var:t> \land <var:T> = <nat:9> \} \end{eqnarray} Given the preceding argument , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:w> = <var:t> }} <var:S0> := <nat:9> ; <var:T> := <var:S0> {{ <var:T> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:T> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 