\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j1> := <var:v> ; <var:j2> := <var:j1> * <var:v> ; <var:j3> := <var:j2> * <var:v> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:4> ; <var:F> := <var:j3> <var:F> := <var:F> + <var:j2> <var:F> := <var:F> + <var:j1> <var:F> := <var:F> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:v> = <var:l> $ ( for every positive coefficients $ <var:l> $ ) ahead of the evaluation of the set of instructions , it holds that we see $ <var:F> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:7> \cdot <var:l> ^ <nat:2> + <nat:5> \cdot <var:l> + <nat:6> $ . \end{theorem} \begin{proof} The proof of our code can be accomplished by typical Hoare techniques . Further , we see \begin{eqnarray} \{ <var:v> = <var:l> \} \, <var:j1> := <var:v> \, \{ <var:v> = <var:l> \land <var:j1> = <var:l> \} \\ \{ <var:v> = <var:l> \land <var:j1> = <var:l> \} \, <var:j2> := <var:j1> * <var:v> \, \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \} \\ \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \} \, <var:j3> := <var:j2> * <var:v> \, \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \} \end{eqnarray} This is deduced by the variable binding law obtained from typical Hoare logic . Moving onward , \begin{eqnarray} \{ <var:v> = <var:l> \} \, <var:j1> := <var:v> \, \{ <var:v> = <var:l> \land <var:j1> = <var:l> \} \\ \{ <var:v> = <var:l> \land <var:j1> = <var:l> \} \, <var:j2> := <var:j1> * <var:v> \, \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \} \\ \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \} \, <var:j3> := <var:j2> * <var:v> \, \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \} \\ \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \} \, <var:j0> := <nat:6> \, \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ \{ <var:v> = <var:l> \land <var:j1> = <var:l> \land <var:j2> = <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \land <var:j0> = <nat:6> \} \, <var:j1> := <var:j1> * <nat:5> \, \{ <var:v> = <var:l> \land <var:j1> = <nat:5> * <var:l> \land <var:j2> = <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ \{ <var:v> = <var:l> \land <var:j1> = <nat:5> * <var:l> \land <var:j2> = <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \land <var:j0> = <nat:6> \} \, <var:j2> := <var:j2> * <nat:7> \, \{ <var:v> = <var:l> \land <var:j1> = <nat:5> * <var:l> \land <var:j2> = <nat:7> * <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ \{ <var:v> = <var:l> \land <var:j1> = <nat:5> * <var:l> \land <var:j2> = <nat:7> * <var:l> ^ <nat:2> \land <var:j3> = <var:l> ^ <nat:3> \land <var:j0> = <nat:6> \} \, <var:j3> := <var:j3> * <nat:4> \, \{ <var:v> = <var:l> \land <var:j1> = <nat:5> * <var:l> \land <var:j2> = <nat:7> * <var:l> ^ <nat:2> \land <var:j3> = <nat:4> * <var:l> ^ <nat:3> \land <var:j0> = <nat:6> \} \end{eqnarray} This is known to be sound with the assignment inference rule from typical Hoare reasoning . Observing the following command contained in the list of commands , we have \begin{eqnarray} \{ <var:v> = <var:l> \} \, <var:j1> := <var:v> \, \{ <var:v> = <var:l> \land <var:j1> = <var:l> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j1> := <var:v> ; <var:j2> := <var:j1> * <var:v> ; <var:j3> := <var:j2> * <var:v> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:4> ; <var:F> := <var:j3> <var:F> := <var:F> + <var:j2> <var:F> := <var:F> + <var:j1> <var:F> := <var:F> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <def:poly> {{ <var:F> = <nat:4> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <var:l> /\ <var:j2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <var:l> /\ <var:j2> = <var:l> ^ <nat:2> /\ <var:j3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <var:l> /\ <var:j2> = <var:l> ^ <nat:2> /\ <var:j3> = <var:l> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <nat:5> * <var:l> /\ <var:j2> = <var:l> ^ <nat:2> /\ <var:j3> = <var:l> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <nat:5> * <var:l> /\ <var:j2> = <nat:7> * <var:l> ^ <nat:2> /\ <var:j3> = <var:l> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <nat:5> * <var:l> /\ <var:j2> = <nat:7> * <var:l> ^ <nat:2> /\ <var:j3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <nat:5> * <var:l> /\ <var:j2> = <nat:7> * <var:l> ^ <nat:2> /\ <var:j0> = <nat:6> /\ <var:F> = <nat:4> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j1> = <nat:5> * <var:l> /\ <var:j0> = <nat:6> /\ <var:F> = <nat:4> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:j0> = <nat:6> /\ <var:F> = <nat:4> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ^ <nat:2> + <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:F> = <nat:4> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 