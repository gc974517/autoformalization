\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <var:j> * <var:l> ; <var:j> := <nat:4> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Assume --- with some $ <var:Q> \in \mathbb{Z}^+ $ --- $ <var:l> = <var:Q> $ before running our list of commands it follows that $ <var:j> = <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:3> $ after series of instructions has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the program can be shown with usual Hoare logic . Immediately following , we see \begin{verbatim} { <var:l> = <var:Q> } <var:j> := <nat:2> { <var:l> = <var:Q> \land <var:j> = <nat:2> } { <var:l> = <var:Q> \land <var:j> = <nat:2> } <var:j> := <var:j> * <var:l> { <var:l> = <var:Q> \land <var:j> = <nat:2> \times <var:Q> + } { <var:l> = <var:Q> \land <var:j> = <nat:2> \times <var:Q> + } <var:j> := <nat:4> + <var:j> * <var:l> { <var:l> = <var:Q> \land <var:j> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> } { <var:l> = <var:Q> \land <var:j> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> } <var:j> := <nat:3> + <var:j> * <var:l> { <var:l> = <var:Q> \land <var:j> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> + <nat:3> } { <var:l> = <var:Q> \land <var:j> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> + <nat:3> } <var:j> := <nat:3> + <var:j> * <var:l> { <var:l> = <var:Q> \land <var:j> = <nat:2> \times <var:Q> ^ <nat:4> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:3> } \end{verbatim} Jumping to the proceeding line contained in the series of instructions , we have \begin{verbatim} { <var:l> = <var:Q> } <var:j> := <nat:2> { <var:l> = <var:Q> \land <var:j> = <nat:2> } \end{verbatim} This is given with the scheme obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:2> ; <var:j> := <var:j> * <var:l> ; <var:j> := <nat:4> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> ; <var:j> := <nat:3> + <var:j> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:l> = <var:Q> }} <def:poly> {{ <var:j> = <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:j> = <nat:2> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:j> = <nat:2> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:j> = <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:j> = <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Q> /\ <var:j> = <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 