\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:7> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:C> ; <var:F> := <var:K1> ; <var:F> := <var:F> + <var:K0> \end{verbatim} Assume it to be that $ <var:C> = <var:o> $ ahead of the evaluation of this set of instructions it must be that $ <var:F> = <nat:4> \cdot <var:o> + <nat:7> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning returns : \begin{eqnarray} \{ <var:C> = <var:o> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:C> = <var:o> \land <var:K0> = <nat:7> \} \\ <var:K1> := <nat:4> ; \\ \{ <var:C> = <var:o> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> \} \\ <var:K1> := <var:K1> * <var:C> ; \\ \{ <var:C> = <var:o> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> \cdot <var:o> \} \\ <var:F> := <var:K1> ; \\ \{ <var:C> = <var:o> \land <var:K0> = <nat:7> \land <var:F> = <nat:4> \cdot <var:o> \} \\ <var:F> := <var:F> + <var:K0> \\ \{ <var:C> = <var:o> \land <var:F> = <nat:4> \cdot <var:o> + <nat:7> \} \end{eqnarray} Therefore , this list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:C> = <var:o> }} <var:K0> := <nat:7> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:C> ; <var:F> := <var:K1> ; <var:F> := <var:F> + <var:K0> {{ <var:F> = <nat:4> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:K0> = <nat:7> /\ <var:F> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:F> = <nat:4> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 