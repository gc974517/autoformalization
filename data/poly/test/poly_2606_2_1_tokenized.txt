\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:3> ; <var:E> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assume given $ <var:G> \in \mathbb{N} $ that $ <var:Y> = <var:G> $ prior to the evaluation of the set of commands , it must be that we see $ <var:E> = <nat:3> $ once set of commands terminates . \end{theorem} \begin{proof} The application of typical Hoare techniques yields : \begin{eqnarray} \{ <var:Y> = <var:G> \} \\ <var:F0> := <nat:3> ; \\ \{ <var:Y> = <var:G> \land <var:F0> = <nat:3> \} \\ <var:E> := <var:F0> \\ \{ <var:Y> = <var:G> \land <var:E> = <nat:3> \} \end{eqnarray} Thusly , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:E> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Y> = <var:G> }} <def:poly> {{ <var:E> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:E> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 