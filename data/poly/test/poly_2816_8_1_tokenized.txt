\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:v> ; <var:R2> := <var:R1> * <var:v> ; <var:R0> := <nat:8> ; <var:R1> := <var:R1> * <nat:7> ; <var:R2> := <var:R2> * <nat:3> ; <var:n> := <var:R2> <var:n> := <var:n> + <var:R1> <var:n> := <var:n> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Allow it to be that $ <var:v> = <var:O> $ prior to the evaluation of our series of instructions , then $ <var:n> = <nat:3> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:8> $ after series of instructions has terminated . \end{theorem} \begin{proof} Notice the following decorated segment of code . \begin{eqnarray} \{ <var:v> = <var:O> \} \\ <var:R1> := <var:v> ; \\ \{ <var:v> = <var:O> \land <var:R1> = <var:O> \} \\ <var:R2> := <var:R1> * <var:v> ; \\ \{ <var:v> = <var:O> \land <var:R1> = <var:O> \land <var:R2> = <var:O> ^ <nat:2> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:v> = <var:O> \land <var:R1> = <var:O> \land <var:R2> = <var:O> ^ <nat:2> \land <var:R0> = <nat:8> \} \\ <var:R1> := <var:R1> * <nat:7> ; \\ \{ <var:v> = <var:O> \land <var:R1> = <nat:7> \times <var:O> \land <var:R2> = <var:O> ^ <nat:2> \land <var:R0> = <nat:8> \} \\ <var:R2> := <var:R2> * <nat:3> ; \\ \{ <var:v> = <var:O> \land <var:R1> = <nat:7> \times <var:O> \land <var:R2> = <nat:3> \times <var:O> ^ <nat:2> \land <var:R0> = <nat:8> \} \\ <var:n> := <var:R2> \\ \{ <var:v> = <var:O> \land <var:R1> = <nat:7> \times <var:O> \land <var:R0> = <nat:8> \land <var:n> = <nat:3> \times <var:O> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:R1> \\ \{ <var:v> = <var:O> \land <var:R0> = <nat:8> \land <var:n> = <nat:3> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> \} \\ <var:n> := <var:n> + <var:R0> \\ \{ <var:v> = <var:O> \land <var:n> = <nat:3> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> + <nat:8> \} \end{eqnarray} Applying usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R1> := <var:v> ; <var:R2> := <var:R1> * <var:v> ; <var:R0> := <nat:8> ; <var:R1> := <var:R1> * <nat:7> ; <var:R2> := <var:R2> * <nat:3> ; <var:n> := <var:R2> <var:n> := <var:n> + <var:R1> <var:n> := <var:n> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:v> = <var:O> }} <def:poly> {{ <var:n> = <nat:3> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:R1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:R1> = <var:O> /\ <var:R2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:R1> = <var:O> /\ <var:R2> = <var:O> ^ <nat:2> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:R1> = <nat:7> * <var:O> /\ <var:R2> = <var:O> ^ <nat:2> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:R1> = <nat:7> * <var:O> /\ <var:R2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:R1> = <nat:7> * <var:O> /\ <var:R0> = <nat:8> /\ <var:n> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:R0> = <nat:8> /\ <var:n> = <nat:3> * <var:O> ^ <nat:2> + <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:n> = <nat:3> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 