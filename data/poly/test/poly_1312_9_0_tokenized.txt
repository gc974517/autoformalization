\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:f0> := <nat:7> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:d> ; <var:f2> := <nat:1> ; <var:f2> := <var:f2> * <var:d> ; <var:f2> := <var:f2> * <var:d> ; <var:X> := <var:f2> ; <var:X> := <var:X> + <var:f1> ; <var:X> := <var:X> + <var:f0> \end{verbatim} Allowing given whole numbers $ <var:e> $ that $ <var:d> = <var:e> $ ahead of the evaluation of the program it follows that we have $ <var:X> = <nat:1> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> + <nat:7> $ . \end{theorem} \begin{proof} The argument for this code can be seen using standard Hoare techniques . Considering the upcoming bits of codeseen in our list of commands , \begin{verbatim} { <var:d> = <var:e> } <var:f0> := <nat:7> { <var:d> = <var:e> \land <var:f0> = <nat:7> } { <var:d> = <var:e> \land <var:f0> = <nat:7> } <var:f1> := <nat:9> { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> } { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> } <var:f1> := <var:f1> * <var:d> { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> * <var:e> } { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> * <var:e> } <var:f2> := <nat:1> { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> * <var:e> \land <var:f2> = <nat:1> } { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> * <var:e> \land <var:f2> = <nat:1> } <var:f2> := <var:f2> * <var:d> { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> * <var:e> \land <var:f2> = <nat:1> * <var:e> } { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> * <var:e> \land <var:f2> = <nat:1> * <var:e> } <var:f2> := <var:f2> * <var:d> { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> * <var:e> \land <var:f2> = <nat:1> * <var:e> ^ <nat:2> } \end{verbatim} Keeping momentum , we have \begin{verbatim} { <var:d> = <var:e> } <var:f0> := <nat:7> { <var:d> = <var:e> \land <var:f0> = <nat:7> } { <var:d> = <var:e> \land <var:f0> = <nat:7> } <var:f1> := <nat:9> { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> } { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> } <var:f1> := <var:f1> * <var:d> { <var:d> = <var:e> \land <var:f0> = <nat:7> \land <var:f1> = <nat:9> * <var:e> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:d> = <var:e> }} <var:f0> := <nat:7> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:d> ; <var:f2> := <nat:1> ; <var:f2> := <var:f2> * <var:d> ; <var:f2> := <var:f2> * <var:d> ; <var:X> := <var:f2> ; <var:X> := <var:X> + <var:f1> ; <var:X> := <var:X> + <var:f0> {{ <var:X> = <nat:1> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:9> * <var:e> /\ <var:f2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:9> * <var:e> /\ <var:f2> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:9> * <var:e> /\ <var:f2> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:9> * <var:e> /\ <var:X> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:f0> = <nat:7> /\ <var:X> = <nat:1> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:X> = <nat:1> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 