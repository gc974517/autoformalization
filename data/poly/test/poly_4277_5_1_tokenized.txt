\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:j1> := <var:C> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:7> ; <var:b> := <var:j1> <var:b> := <var:b> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:C> = <var:x> $ prior to evaluating the set of instructions it holds that we have $ <var:b> = <nat:7> * <var:x> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is accomplished by usual Hoare reasoning . Moving onward , we see the environment update code \verb | <var:j1> := <var:C> ; | . This statement forwards $ \{ <var:C> = <var:x> \} $ toward the condition $ \{ <var:C> = <var:x> \land <var:j1> = <var:x> \} $ . This is shown using the assignment inference rule given by usual Hoare logic . Stepping through , the environment update line \verb | <var:j0> := <nat:6> ; | . This redefines the precondition $ \{ <var:C> = <var:x> \land <var:j1> = <var:x> \} $ to the postcondition $ \{ <var:C> = <var:x> \land <var:j1> = <var:x> \land <var:j0> = <nat:6> \} $ . Honing in on the following piece of code seen in our segment of code , we have the variable binding line yielding $ <var:j1> * <nat:7> $ as $ <var:j1>$ . This statement redefines $ \{ <var:C> = <var:x> \land <var:j1> = <var:x> \land <var:j0> = <nat:6> \} $ toward the postcondition $ \{ <var:C> = <var:x> \land <var:j1> = <nat:7> \cdot <var:x> \land <var:j0> = <nat:6> \} $ . Moving onward , we see the variable binding statement assigning $ <var:j1$ toward $ <var:b>$ . This transfers $ \{ <var:C> = <var:x> \land <var:j1> = <nat:7> \cdot <var:x> \land <var:j0> = <nat:6> \} $ toward the postcondition $ \{ <var:C> = <var:x> \land <var:j0> = <nat:6> \land <var:b> = <nat:7> \cdot <var:x> \} $ . This is ensured by the assignment scheme of typical Hoare techniques . Jumping to the subsequent line of code in the set of commands , the variable assignmet code \verb | <var:b> := <var:b> + <var:j0> | . This code transfers $ \{ <var:C> = <var:x> \land <var:j0> = <nat:6> \land <var:b> = <nat:7> \cdot <var:x> \} $ to $ \{ <var:C> = <var:x> \land <var:b> = <nat:7> \cdot <var:x> + <nat:6> \} $ . This is given using the assignment rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:C> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:7> ; <var:b> := <var:j1> <var:b> := <var:b> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:C> = <var:x> }} <def:poly> {{ <var:b> = <nat:7> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:j1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:j1> = <var:x> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:j1> = <nat:7> * <var:x> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:j0> = <nat:6> /\ <var:b> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:b> = <nat:7> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 