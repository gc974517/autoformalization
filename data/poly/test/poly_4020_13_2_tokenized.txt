\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w> := <nat:1> ; <var:w> := <nat:3> + <var:w> * <var:X> ; <var:w> := <nat:3> + <var:w> * <var:X> ; <var:w> := <var:w> * <var:X> ; <var:w> := <nat:1> + <var:w> * <var:X> ; <var:w> := <nat:1> + <var:w> * <var:X> ; <var:w> := <nat:3> + <var:w> * <var:X> ; <var:w> := <nat:2> + <var:w> * <var:X> ; <var:w> := <nat:4> + <var:w> * <var:X> ; <var:w> := <nat:1> + <var:w> * <var:X> ; <var:w> := <var:w> * <var:X> ; <var:w> := <nat:1> + <var:w> * <var:X> ; <var:w> := <nat:3> + <var:w> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:X> = <var:R> $ prior to executing our series of instructions , it follows that $ <var:w> = <nat:1> * <var:R> ^ <nat:12> + <nat:3> * <var:R> ^ <nat:11> + <nat:3> * <var:R> ^ <nat:10> + <nat:1> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> + <nat:3> $ . \end{theorem} \begin{proof} Notice the below decorated list of instructions . \begin{eqnarray} \{ <var:X> = <var:R> \} \\ <var:w> := <nat:1> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \} \\ <var:w> := <nat:3> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> + <nat:3> \} \\ <var:w> := <nat:3> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:3> \} \\ <var:w> := <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + \} \\ <var:w> := <nat:1> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:1> \} \end{eqnarray} Furthering evaluating the set of instructions returns : \begin{eqnarray} <var:w> := <nat:1> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> + <nat:1> \} \\ <var:w> := <nat:3> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:6> + <nat:3> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> \} \\ <var:w> := <nat:2> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:7> + <nat:3> \times <var:R> ^ <nat:6> + <nat:3> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:2> \} \\ <var:w> := <nat:4> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:8> + <nat:3> \times <var:R> ^ <nat:7> + <nat:3> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:4> \} \\ <var:w> := <nat:1> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:9> + <nat:3> \times <var:R> ^ <nat:8> + <nat:3> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:1> \} \\ <var:w> := <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:10> + <nat:3> \times <var:R> ^ <nat:9> + <nat:3> \times <var:R> ^ <nat:8> + <nat:1> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:4> + <nat:2> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + \} \\ <var:w> := <nat:1> + <var:w> * <var:X> ; \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:11> + <nat:3> \times <var:R> ^ <nat:10> + <nat:3> \times <var:R> ^ <nat:9> + <nat:1> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:3> \times <var:R> ^ <nat:5> + <nat:2> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \} \\ <var:w> := <nat:3> + <var:w> * <var:X> \\ \{ <var:X> = <var:R> \land <var:w> = <nat:1> \times <var:R> ^ <nat:12> + <nat:3> \times <var:R> ^ <nat:11> + <nat:3> \times <var:R> ^ <nat:10> + <nat:1> \times <var:R> ^ <nat:8> + <nat:1> \times <var:R> ^ <nat:7> + <nat:3> \times <var:R> ^ <nat:6> + <nat:2> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> + <nat:3> \} \end{eqnarray} Furthering the evaluation of our set of commands gives : \begin{eqnarray} \end{eqnarray} The application of usual Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:1> ; <var:w> := <nat:3> + <var:w> * <var:X> ; <var:w> := <nat:3> + <var:w> * <var:X> ; <var:w> := <var:w> * <var:X> ; <var:w> := <nat:1> + <var:w> * <var:X> ; <var:w> := <nat:1> + <var:w> * <var:X> ; <var:w> := <nat:3> + <var:w> * <var:X> ; <var:w> := <nat:2> + <var:w> * <var:X> ; <var:w> := <nat:4> + <var:w> * <var:X> ; <var:w> := <nat:1> + <var:w> * <var:X> ; <var:w> := <var:w> * <var:X> ; <var:w> := <nat:1> + <var:w> * <var:X> ; <var:w> := <nat:3> + <var:w> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:X> = <var:R> }} <def:poly> {{ <var:w> = <nat:1> * <var:R> ^ <nat:12> + <nat:3> * <var:R> ^ <nat:11> + <nat:3> * <var:R> ^ <nat:10> + <nat:1> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:9> + <nat:3> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:10> + <nat:3> * <var:R> ^ <nat:9> + <nat:3> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:11> + <nat:3> * <var:R> ^ <nat:10> + <nat:3> * <var:R> ^ <nat:9> + <nat:1> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:w> = <nat:1> * <var:R> ^ <nat:12> + <nat:3> * <var:R> ^ <nat:11> + <nat:3> * <var:R> ^ <nat:10> + <nat:1> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 