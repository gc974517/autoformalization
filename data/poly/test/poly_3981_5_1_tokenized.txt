\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:z1> := <var:c> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:3> ; <var:Q> := <var:z1> <var:Q> := <var:Q> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:c> = <var:R> $ prior to interpreting this series of instructions it holds that we see $ <var:Q> = <nat:3> \times <var:R> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands can be shown by the following decorated segment of code . \begin{eqnarray} \{ <var:c> = <var:R> \} \\ <var:z1> := <var:c> ; \\ \{ <var:c> = <var:R> \land <var:z1> = <var:R> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:c> = <var:R> \land <var:z1> = <var:R> \land <var:z0> = <nat:9> \} \\ <var:z1> := <var:z1> * <nat:3> ; \\ \{ <var:c> = <var:R> \land <var:z1> = <nat:3> \cdot <var:R> \land <var:z0> = <nat:9> \} \\ <var:Q> := <var:z1> \\ \{ <var:c> = <var:R> \land <var:z0> = <nat:9> \land <var:Q> = <nat:3> \cdot <var:R> \} \\ <var:Q> := <var:Q> + <var:z0> \\ \{ <var:c> = <var:R> \land <var:Q> = <nat:3> \cdot <var:R> + <nat:9> \} \end{eqnarray} Using typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:c> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:3> ; <var:Q> := <var:z1> <var:Q> := <var:Q> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:c> = <var:R> }} <def:poly> {{ <var:Q> = <nat:3> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:z1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:z1> = <var:R> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:z1> = <nat:3> * <var:R> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:z0> = <nat:9> /\ <var:Q> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:Q> = <nat:3> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 