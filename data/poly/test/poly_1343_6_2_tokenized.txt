\begin{document} \begin{theorem} Consider the following segment of code as \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:2> + <var:s> * <var:P> ; <var:s> := <var:s> * <var:P> ; <var:s> := <nat:2> + <var:s> * <var:P> ; <var:s> := <nat:1> + <var:s> * <var:P> ; <var:s> := <nat:1> + <var:s> * <var:P> \end{verbatim} Assuming --- given positive numbers $ <var:f> $ --- that $ <var:P> = <var:f> $ prior to interpreting our set of commands , it holds that we see $ <var:s> = <nat:4> \cdot <var:f> ^ <nat:5> + <nat:2> \cdot <var:f> ^ <nat:4> + <nat:2> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:1> $ once code segment executes . \end{theorem} \begin{proof} The course of logic for this series of commands can be given by typical Hoare logic . Honing in on the upcoming line of code seen in the list of commands , we see \begin{verbatim} { <var:P> = <var:f> } <var:s> := <nat:4> { <var:P> = <var:f> \land <var:s> = <nat:4> } \end{verbatim} Moving onward , we have \begin{verbatim} { <var:P> = <var:f> } <var:s> := <nat:4> { <var:P> = <var:f> \land <var:s> = <nat:4> } { <var:P> = <var:f> \land <var:s> = <nat:4> } <var:s> := <nat:2> + <var:s> * <var:P> { <var:P> = <var:f> \land <var:s> = <nat:4> \times <var:f> + <nat:2> } { <var:P> = <var:f> \land <var:s> = <nat:4> \times <var:f> + <nat:2> } <var:s> := <var:s> * <var:P> { <var:P> = <var:f> \land <var:s> = <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + } { <var:P> = <var:f> \land <var:s> = <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + } <var:s> := <nat:2> + <var:s> * <var:P> { <var:P> = <var:f> \land <var:s> = <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:2> } \end{verbatim} Moving forward to the next step , we have \begin{verbatim} { <var:P> = <var:f> } <var:s> := <nat:4> { <var:P> = <var:f> \land <var:s> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:P> = <var:f> }} <var:s> := <nat:4> ; <var:s> := <nat:2> + <var:s> * <var:P> ; <var:s> := <var:s> * <var:P> ; <var:s> := <nat:2> + <var:s> * <var:P> ; <var:s> := <nat:1> + <var:s> * <var:P> ; <var:s> := <nat:1> + <var:s> * <var:P> {{ <var:s> = <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:s> = <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:s> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:s> = <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:s> = <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:f> /\ <var:s> = <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 