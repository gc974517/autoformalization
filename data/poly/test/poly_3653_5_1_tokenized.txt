\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:D> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:3> ; <var:z> := <var:M1> <var:z> := <var:z> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> in \emph{Imp} . Allow $ <var:D> = <var:Y> $ for any integers $ <var:Y> $ prior to evaluating this code segment , it follows that we have $ <var:z> = <nat:3> * <var:Y> + <nat:2> $ when program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:Y> \} \\ <var:M1> := <var:D> ; \\ \{ <var:D> = <var:Y> \land <var:M1> = <var:Y> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:D> = <var:Y> \land <var:M1> = <var:Y> \land <var:M0> = <nat:2> \} \\ <var:M1> := <var:M1> * <nat:3> ; \\ \{ <var:D> = <var:Y> \land <var:M1> = <nat:3> \cdot <var:Y> \land <var:M0> = <nat:2> \} \\ <var:z> := <var:M1> \\ \{ <var:D> = <var:Y> \land <var:M0> = <nat:2> \land <var:z> = <nat:3> \cdot <var:Y> \} \\ <var:z> := <var:z> + <var:M0> \\ \{ <var:D> = <var:Y> \land <var:z> = <nat:3> \cdot <var:Y> + <nat:2> \} \end{eqnarray} Using usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:D> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:3> ; <var:z> := <var:M1> <var:z> := <var:z> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:D> = <var:Y> }} <def:poly> {{ <var:z> = <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:M1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:M1> = <nat:3> * <var:Y> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:M0> = <nat:2> /\ <var:z> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:z> = <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 