\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:x1> := <var:n> ; <var:x2> := <var:x1> * <var:n> ; <var:x3> := <var:x2> * <var:n> ; <var:x4> := <var:x3> * <var:n> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:2> ; <var:x2> := <var:x2> * <nat:1> ; <var:x3> := <var:x3> * <nat:2> ; <var:x4> := <var:x4> * <nat:3> ; <var:Q> := <var:x4> <var:Q> := <var:Q> + <var:x3> <var:Q> := <var:Q> + <var:x2> <var:Q> := <var:Q> + <var:x1> <var:Q> := <var:Q> + <var:x0> \end{verbatim} Given it to hold that $ <var:n> = <var:D> $ ( given all $ <var:D> $ ) before the evaluation of the list of commands it holds that we see $ <var:Q> = <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:D> \} \\ <var:x1> := <var:n> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <var:D> \} \\ <var:x2> := <var:x1> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <var:D> \land <var:x2> = <var:D> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <var:D> \land <var:x2> = <var:D> ^ <nat:2> \land <var:x3> = <var:D> ^ <nat:3> \} \\ <var:x4> := <var:x3> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <var:D> \land <var:x2> = <var:D> ^ <nat:2> \land <var:x3> = <var:D> ^ <nat:3> \land <var:x4> = <var:D> ^ <nat:4> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <var:D> \land <var:x2> = <var:D> ^ <nat:2> \land <var:x3> = <var:D> ^ <nat:3> \land <var:x4> = <var:D> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x1> := <var:x1> * <nat:2> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <nat:2> \times <var:D> \land <var:x2> = <var:D> ^ <nat:2> \land <var:x3> = <var:D> ^ <nat:3> \land <var:x4> = <var:D> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x2> := <var:x2> * <nat:1> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <nat:2> \times <var:D> \land <var:x2> = <nat:1> \times <var:D> ^ <nat:2> \land <var:x3> = <var:D> ^ <nat:3> \land <var:x4> = <var:D> ^ <nat:4> \land <var:x0> = <nat:1> \} \end{eqnarray} Furthering evaluating this program results in : \begin{eqnarray} <var:x3> := <var:x3> * <nat:2> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <nat:2> \times <var:D> \land <var:x2> = <nat:1> \times <var:D> ^ <nat:2> \land <var:x3> = <nat:2> \times <var:D> ^ <nat:3> \land <var:x4> = <var:D> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x4> := <var:x4> * <nat:3> ; \\ \{ <var:n> = <var:D> \land <var:x1> = <nat:2> \times <var:D> \land <var:x2> = <nat:1> \times <var:D> ^ <nat:2> \land <var:x3> = <nat:2> \times <var:D> ^ <nat:3> \land <var:x4> = <nat:3> \times <var:D> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:Q> := <var:x4> \\ \{ <var:n> = <var:D> \land <var:x1> = <nat:2> \times <var:D> \land <var:x2> = <nat:1> \times <var:D> ^ <nat:2> \land <var:x3> = <nat:2> \times <var:D> ^ <nat:3> \land <var:x0> = <nat:1> \land <var:Q> = <nat:3> \times <var:D> ^ <nat:4> \} \\ <var:Q> := <var:Q> + <var:x3> \\ \{ <var:n> = <var:D> \land <var:x1> = <nat:2> \times <var:D> \land <var:x2> = <nat:1> \times <var:D> ^ <nat:2> \land <var:x0> = <nat:1> \land <var:Q> = <nat:3> \times <var:D> ^ <nat:4> + <nat:2> \times <var:D> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:x2> \\ \{ <var:n> = <var:D> \land <var:x1> = <nat:2> \times <var:D> \land <var:x0> = <nat:1> \land <var:Q> = <nat:3> \times <var:D> ^ <nat:4> + <nat:2> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:x1> \\ \{ <var:n> = <var:D> \land <var:x0> = <nat:1> \land <var:Q> = <nat:3> \times <var:D> ^ <nat:4> + <nat:2> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> \} \\ <var:Q> := <var:Q> + <var:x0> \\ \{ <var:n> = <var:D> \land <var:Q> = <nat:3> \times <var:D> ^ <nat:4> + <nat:2> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> + <nat:1> \} \end{eqnarray} Using Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <var:x4> : string := " <var:x4> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:n> = <var:D> }} <var:x1> := <var:n> ; <var:x2> := <var:x1> * <var:n> ; <var:x3> := <var:x2> * <var:n> ; <var:x4> := <var:x3> * <var:n> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:2> ; <var:x2> := <var:x2> * <nat:1> ; <var:x3> := <var:x3> * <nat:2> ; <var:x4> := <var:x4> * <nat:3> ; <var:Q> := <var:x4> <var:Q> := <var:Q> + <var:x3> <var:Q> := <var:Q> + <var:x2> <var:Q> := <var:Q> + <var:x1> <var:Q> := <var:Q> + <var:x0> {{ <var:Q> = <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <var:D> /\ <var:x2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <var:D> /\ <var:x2> = <var:D> ^ <nat:2> /\ <var:x3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <var:D> /\ <var:x2> = <var:D> ^ <nat:2> /\ <var:x3> = <var:D> ^ <nat:3> /\ <var:x4> = <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <var:D> /\ <var:x2> = <var:D> ^ <nat:2> /\ <var:x3> = <var:D> ^ <nat:3> /\ <var:x4> = <var:D> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <nat:2> * <var:D> /\ <var:x2> = <var:D> ^ <nat:2> /\ <var:x3> = <var:D> ^ <nat:3> /\ <var:x4> = <var:D> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <nat:2> * <var:D> /\ <var:x2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:x3> = <var:D> ^ <nat:3> /\ <var:x4> = <var:D> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <nat:2> * <var:D> /\ <var:x2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:D> ^ <nat:3> /\ <var:x4> = <var:D> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <nat:2> * <var:D> /\ <var:x2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:D> ^ <nat:3> /\ <var:x4> = <nat:3> * <var:D> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <nat:2> * <var:D> /\ <var:x2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:D> ^ <nat:3> /\ <var:x0> = <nat:1> /\ <var:Q> = <nat:3> * <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <nat:2> * <var:D> /\ <var:x2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:x0> = <nat:1> /\ <var:Q> = <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x1> = <nat:2> * <var:D> /\ <var:x0> = <nat:1> /\ <var:Q> = <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:x0> = <nat:1> /\ <var:Q> = <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:Q> = <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 