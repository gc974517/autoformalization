\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:7> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:g> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:g> ; <var:v2> := <var:v2> * <var:g> ; <var:v3> := <nat:4> ; <var:v3> := <var:v3> * <var:g> ; <var:v3> := <var:v3> * <var:g> ; <var:v3> := <var:v3> * <var:g> ; <var:L> := <var:v3> ; <var:L> := <var:L> + <var:v2> ; <var:L> := <var:L> + <var:v1> ; <var:L> := <var:L> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:g> = <var:m> $ ahead of the evaluation of our code segment it follows that $ <var:L> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> + <nat:7> \cdot <var:m> + <nat:7> $ after program executes . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is demonstrated by Hoare techniques . Advancing to the next lines of codecontained in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:g> = <var:m> \} & <var:v0> := <nat:7> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \} & <var:v1> := <nat:7> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \} & <var:v1> := <var:v1> * <var:g> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \} & <var:v2> := <nat:8> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \} & <var:v2> := <var:v2> * <var:g> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \times <var:m> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \times <var:m> \} & <var:v2> := <var:v2> * <var:g> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \times <var:m> ^ <nat:2> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \times <var:m> ^ <nat:2> \} & <var:v3> := <nat:4> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \times <var:m> ^ <nat:2> \land <var:v3> = <nat:4> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \times <var:m> ^ <nat:2> \land <var:v3> = <nat:4> \} & <var:v3> := <var:v3> * <var:g> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \times <var:m> ^ <nat:2> \land <var:v3> = <nat:4> \times <var:m> \} \end{tabular} Going forward , \[ \begin{tabular} {rcl} \{ <var:g> = <var:m> \} & <var:v0> := <nat:7> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \} & <var:v1> := <nat:7> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \} & <var:v1> := <var:v1> * <var:g> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \} & <var:v2> := <nat:8> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \} \\ \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \} & <var:v2> := <var:v2> * <var:g> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:m> \land <var:v2> = <nat:8> \times <var:m> \} \end{tabular} Going to the next step , \[ \begin{tabular} {rcl} \{ <var:g> = <var:m> \} & <var:v0> := <nat:7> & \{ <var:g> = <var:m> \land <var:v0> = <nat:7> \} \end{tabular} This is known to be sound using the binding law given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v0> := <nat:7> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:g> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:g> ; <var:v2> := <var:v2> * <var:g> ; <var:v3> := <nat:4> ; <var:v3> := <var:v3> * <var:g> ; <var:v3> := <var:v3> * <var:g> ; <var:v3> := <var:v3> * <var:g> ; <var:L> := <var:v3> ; <var:L> := <var:L> + <var:v2> ; <var:L> := <var:L> + <var:v1> ; <var:L> := <var:L> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:g> = <var:m> }} <def:poly> {{ <var:L> = <nat:4> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:v2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:v3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:L> = <nat:4> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:m> /\ <var:L> = <nat:4> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:v0> = <nat:7> /\ <var:L> = <nat:4> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:L> = <nat:4> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 