\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:3> ; <var:u> := <var:F0> \end{verbatim} Assume that $ <var:P> = <var:n> $ ahead of evaluating the program it holds that we see $ <var:u> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions can be demonstrated by standard Hoare logic . Advancing , \[ \begin{tabular} {rcl} \{ <var:P> = <var:n> \} & <var:F0> := <nat:3> & \{ <var:P> = <var:n> \land <var:F0> = <nat:3> \} \end{tabular} Now , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:n> \} & <var:F0> := <nat:3> & \{ <var:P> = <var:n> \land <var:F0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:P> = <var:n> }} <var:F0> := <nat:3> ; <var:u> := <var:F0> {{ <var:u> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:u> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 