\begin{document} \begin{theorem} We define a set of commands as \begin{verbatim} <var:S1> := <var:y> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:1> ; <var:Y> := <var:S1> <var:Y> := <var:Y> + <var:S0> \end{verbatim} Assuming it to be that $ <var:y> = <var:U> $ before the execution of this list of instructions , it follows that $ <var:Y> = <nat:1> * <var:U> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this list of commands can be shown using usual Hoare techniques . Moving on , we see the variable assignmet statement \verb | <var:S1> := <var:y> ; | . This statement redefines the condition $ \{ <var:y> = <var:U> \} $ toward the condition $ \{ <var:y> = <var:U> \land <var:S1> = <var:U> \} $ . Advancing to the proceeding bit of code in the set of commands , we see the line defining $ <nat:3> $ into $ <var:S0>$ . This redefines $ \{ <var:y> = <var:U> \land <var:S1> = <var:U> \} $ toward $ \{ <var:y> = <var:U> \land <var:S1> = <var:U> \land <var:S0> = <nat:3> \} $ . Keeping momentum , we have the environment update statement assigning $ <var:S1> * <nat:1> $ toward $ <var:S1>$ . This line redefines the precondition $ \{ <var:y> = <var:U> \land <var:S1> = <var:U> \land <var:S0> = <nat:3> \} $ to the condition $ \{ <var:y> = <var:U> \land <var:S1> = <nat:1> \cdot <var:U> \land <var:S0> = <nat:3> \} $ . Advancing , we see the variable update statement \verb | <var:Y> := <var:S1> | . This line forwards $ \{ <var:y> = <var:U> \land <var:S1> = <nat:1> \cdot <var:U> \land <var:S0> = <nat:3> \} $ toward the postcondition $ \{ <var:y> = <var:U> \land <var:S0> = <nat:3> \land <var:Y> = <nat:1> \cdot <var:U> \} $ . This is shown through the assignment scheme in typical Hoare logic . Jumping to the proceeding bit of code seen in our code segment , the environment update statement \verb | <var:Y> := <var:Y> + <var:S0> | . This code takes $ \{ <var:y> = <var:U> \land <var:S0> = <nat:3> \land <var:Y> = <nat:1> \cdot <var:U> \} $ toward the postcondition $ \{ <var:y> = <var:U> \land <var:Y> = <nat:1> \cdot <var:U> + <nat:3> \} $ . This is shown through the assignment rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:y> = <var:U> }} <var:S1> := <var:y> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:1> ; <var:Y> := <var:S1> <var:Y> := <var:Y> + <var:S0> {{ <var:Y> = <nat:1> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:S1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:S1> = <var:U> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:S1> = <nat:1> * <var:U> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:S0> = <nat:3> /\ <var:Y> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:Y> = <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 