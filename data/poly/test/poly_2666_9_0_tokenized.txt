\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:m> ; <var:o2> := <nat:4> ; <var:o2> := <var:o2> * <var:m> ; <var:o2> := <var:o2> * <var:m> ; <var:M> := <var:o2> ; <var:M> := <var:M> + <var:o1> ; <var:M> := <var:M> + <var:o0> \end{verbatim} Assume $ <var:m> = <var:z> $ ( given some $ <var:z> $ ) before interpreting this set of instructions , it must be that $ <var:M> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> $ when segment of code finishes . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:m> = <var:z> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:m> = <var:z> \land <var:o0> = <nat:1> \} \\ <var:o1> := <nat:8> ; \\ \{ <var:m> = <var:z> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \} \\ <var:o1> := <var:o1> * <var:m> ; \\ \{ <var:m> = <var:z> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> * <var:z> \} \\ <var:o2> := <nat:4> ; \\ \{ <var:m> = <var:z> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> * <var:z> \land <var:o2> = <nat:4> \} \\ <var:o2> := <var:o2> * <var:m> ; \\ \{ <var:m> = <var:z> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> * <var:z> \land <var:o2> = <nat:4> * <var:z> \} \\ <var:o2> := <var:o2> * <var:m> ; \\ \{ <var:m> = <var:z> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> * <var:z> \land <var:o2> = <nat:4> * <var:z> ^ <nat:2> \} \\ <var:M> := <var:o2> ; \\ \{ <var:m> = <var:z> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> * <var:z> \land <var:M> = <nat:4> * <var:z> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:o1> ; \\ \{ <var:m> = <var:z> \land <var:o0> = <nat:1> \land <var:M> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> \} \\ <var:M> := <var:M> + <var:o0> \\ \{ <var:m> = <var:z> \land <var:M> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> \} \end{eqnarray} Therefore , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:m> = <var:z> }} <var:o0> := <nat:1> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:m> ; <var:o2> := <nat:4> ; <var:o2> := <var:o2> * <var:m> ; <var:o2> := <var:o2> * <var:m> ; <var:M> := <var:o2> ; <var:M> := <var:M> + <var:o1> ; <var:M> := <var:M> + <var:o0> {{ <var:M> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:z> /\ <var:o2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:z> /\ <var:M> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:o0> = <nat:1> /\ <var:M> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:M> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 