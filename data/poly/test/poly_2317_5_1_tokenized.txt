\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:B> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:7> ; <var:v> := <var:M1> <var:v> := <var:v> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Allow it to hold that $ <var:B> = <var:J> $ ahead of the evaluation of the set of commands , it holds that we see $ <var:v> = <nat:7> * <var:J> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our code segment can be seen with usual Hoare techniques . Looking at the following statement in our series of instructions , the variable update statement assigning $ <var:B> $ toward $ <var:M1>$ . This takes the condition $ \{ <var:B> = <var:J> \} $ as $ \{ <var:B> = <var:J> \land <var:M1> = <var:J> \} $ . Advancing to the proceeding line contained in our code , the variable update statement giving $ <nat:1> $ toward $ <var:M0>$ . This code moves the condition $ \{ <var:B> = <var:J> \land <var:M1> = <var:J> \} $ as $ \{ <var:B> = <var:J> \land <var:M1> = <var:J> \land <var:M0> = <nat:1> \} $ . Keeping momentum , we have the assignment line binding $ <var:M1> * <nat:7> $ toward $ <var:M1>$ . This line moves the precondition $ \{ <var:B> = <var:J> \land <var:M1> = <var:J> \land <var:M0> = <nat:1> \} $ into the condition $ \{ <var:B> = <var:J> \land <var:M1> = <nat:7> \times <var:J> \land <var:M0> = <nat:1> \} $ . Honing in on the next statement found in the list of commands , we see the variable binding code \verb | <var:v> := <var:M1> | . This redefines $ \{ <var:B> = <var:J> \land <var:M1> = <nat:7> \times <var:J> \land <var:M0> = <nat:1> \} $ as $ \{ <var:B> = <var:J> \land <var:M0> = <nat:1> \land <var:v> = <nat:7> \times <var:J> \} $ . This is sound with the assignment inference rule found in typical Hoare logic . Stepping forward , the variable assignmet code defining $ <var:v> + <var:M0$ to $ <var:v>$ . This code transfers the condition $ \{ <var:B> = <var:J> \land <var:M0> = <nat:1> \land <var:v> = <nat:7> \times <var:J> \} $ to $ \{ <var:B> = <var:J> \land <var:v> = <nat:7> \times <var:J> + <nat:1> \} $ . This is sound with the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:B> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:7> ; <var:v> := <var:M1> <var:v> := <var:v> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:B> = <var:J> }} <def:poly> {{ <var:v> = <nat:7> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:M1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:M1> = <var:J> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:M1> = <nat:7> * <var:J> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:M0> = <nat:1> /\ <var:v> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v> = <nat:7> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 