\begin{document} \begin{theorem} We define a program in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:S> ; <var:y0> := <nat:7> ; <var:y1> := <var:y1> * <nat:4> ; <var:u> := <var:y1> <var:u> := <var:u> + <var:y0> \end{verbatim} Assume $ <var:S> = <var:M> $ ( with some positive coefficients $ <var:M> $ ) ahead of the evaluation of this series of commands , it follows that $ <var:u> = <nat:4> \times <var:M> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:M> \} \\ <var:y1> := <var:S> ; \\ \{ <var:S> = <var:M> \land <var:y1> = <var:M> \} \\ <var:y0> := <nat:7> ; \\ \{ <var:S> = <var:M> \land <var:y1> = <var:M> \land <var:y0> = <nat:7> \} \\ <var:y1> := <var:y1> * <nat:4> ; \\ \{ <var:S> = <var:M> \land <var:y1> = <nat:4> \times <var:M> \land <var:y0> = <nat:7> \} \\ <var:u> := <var:y1> \\ \{ <var:S> = <var:M> \land <var:y0> = <nat:7> \land <var:u> = <nat:4> \times <var:M> \} \end{eqnarray} Furthering evaluating our program returns : \begin{eqnarray} <var:u> := <var:u> + <var:y0> \\ \{ <var:S> = <var:M> \land <var:u> = <nat:4> \times <var:M> + <nat:7> \} \end{eqnarray} Continuing the execution of this series of instructions gives : \begin{eqnarray} \end{eqnarray} Applying typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:S> = <var:M> }} <var:y1> := <var:S> ; <var:y0> := <nat:7> ; <var:y1> := <var:y1> * <nat:4> ; <var:u> := <var:y1> <var:u> := <var:u> + <var:y0> {{ <var:u> = <nat:4> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:y1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:y1> = <var:M> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:y1> = <nat:4> * <var:M> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:y0> = <nat:7> /\ <var:u> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:u> = <nat:4> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 