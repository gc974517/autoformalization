\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x> := <nat:4> ; <var:x> := <var:x> * <var:I> ; <var:x> := <nat:4> + <var:x> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:I> = <var:Z> $ ahead of evaluating this list of instructions it must be that $ <var:x> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:4> $ when set of commands has executed . \end{theorem} \begin{proof} The flow of logic for our code can be demonstrated with usual Hoare reasoning . Observing the next step seen in our set of commands , we have \begin{eqnarray} \{ <var:I> = <var:Z> \} \, <var:x> := <nat:4> \, \{ <var:I> = <var:Z> \land <var:x> = <nat:4> \} \end{eqnarray} Jumping to the upcoming pieces of code in the series of commands , we see \begin{eqnarray} \{ <var:I> = <var:Z> \} \, <var:x> := <nat:4> \, \{ <var:I> = <var:Z> \land <var:x> = <nat:4> \} \\ \{ <var:I> = <var:Z> \land <var:x> = <nat:4> \} \, <var:x> := <var:x> * <var:I> \, \{ <var:I> = <var:Z> \land <var:x> = <nat:4> * <var:Z> + \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:4> ; <var:x> := <var:x> * <var:I> ; <var:x> := <nat:4> + <var:x> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:I> = <var:Z> }} <def:poly> {{ <var:x> = <nat:4> * <var:Z> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:x> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:x> = <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:x> = <nat:4> * <var:Z> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 