\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:R> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:2> ; <var:d> := <var:c1> <var:d> := <var:d> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:R> = <var:l> $ prior to interpreting this list of instructions it holds that $ <var:d> = <nat:2> \times <var:l> + <nat:1> $ once code is done executing . \end{theorem} \begin{proof} The method of proof for the set of instructions is accomplished with Hoare techniques . Moving forward , we have \verb | { <var:R> = <var:l> } <var:c1> := <var:R> { <var:R> = <var:l> \land <var:c1> = <var:l> } | , \verb | { <var:R> = <var:l> \land <var:c1> = <var:l> } <var:c0> := <nat:1> { <var:R> = <var:l> \land <var:c1> = <var:l> \land <var:c0> = <nat:1> } | , \verb | { <var:R> = <var:l> \land <var:c1> = <var:l> \land <var:c0> = <nat:1> } <var:c1> := <var:c1> * <nat:2> { <var:R> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c0> = <nat:1> } | , \verb | { <var:R> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c0> = <nat:1> } <var:d> := <var:c1{ <var:R> = <var:l> \land <var:c0> = <nat:1> \land <var:d> = <nat:2> \times <var:l> } | and \verb | { <var:R> = <var:l> \land <var:c0> = <nat:1> \land <var:d> = <nat:2> \times <var:l> } <var:d> := <var:d> + <var:c0{ <var:R> = <var:l> \land <var:d> = <nat:2> \times <var:l> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c1> := <var:R> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:2> ; <var:d> := <var:c1> <var:d> := <var:d> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:R> = <var:l> }} <def:poly> {{ <var:d> = <nat:2> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:c1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:c1> = <var:l> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:c1> = <nat:2> * <var:l> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:c0> = <nat:1> /\ <var:d> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:d> = <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 