\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:w0> := <nat:4> ; <var:z> := <var:w0> \end{verbatim} Assuming $ <var:S> = <var:v> $ for whole numbers $ <var:v> $ before the execution of our list of instructions , it follows that we have $ <var:z> = <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be seen by Hoare techniques . After , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:v> \} & <var:w0> := <nat:4> & \{ <var:S> = <var:v> \land <var:w0> = <nat:4> \} \\ \{ <var:S> = <var:v> \land <var:w0> = <nat:4> \} & <var:z> := <var:w0& \{ <var:S> = <var:v> \land <var:z> = <nat:4> \} \end{tabular} This is shown through the environment update scheme from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:S> = <var:v> }} <var:w0> := <nat:4> ; <var:z> := <var:w0> {{ <var:z> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:z> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 