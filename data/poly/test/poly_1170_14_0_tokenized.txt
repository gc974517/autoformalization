\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:b0> := <nat:1> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:h> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:h> ; <var:b2> := <var:b2> * <var:h> ; <var:b3> := <nat:3> ; <var:b3> := <var:b3> * <var:h> ; <var:b3> := <var:b3> * <var:h> ; <var:b3> := <var:b3> * <var:h> ; <var:J> := <var:b3> ; <var:J> := <var:J> + <var:b2> ; <var:J> := <var:J> + <var:b1> ; <var:J> := <var:J> + <var:b0> \end{verbatim} Assuming it to hold that $ <var:h> = <var:i> $ prior to the evaluation of this set of instructions , then we see $ <var:J> = <nat:3> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is clear with typical Hoare reasoning . Shifting focus toward the subsequent bit of code seen in the series of commands , the variable binding command \verb | <var:b0> := <nat:1> ; | . This command forwards the precondition $ \{ <var:h> = <var:i> \} $ as the condition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \} $ . This is deduced with the assignment scheme obtained from usual Hoare techniques . Moving on to the next step , we have the variable update code binding $ <nat:3> $ to $ <var:b1>$ . This takes the precondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \} $ to the condition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \} $ . Shifting focus toward the subsequent bit of code in the code , the variable update statement assigning $ <var:b1> * <var:h> $ toward $ <var:b1>$ . This line forwards $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \} $ . This is sound through the assignment inference rule of usual Hoare techniques . Immediately after , we have the assignment statement \verb | <var:b2> := <nat:2> ; | . This takes the precondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \} $ to the postcondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \} $ . Considering the next line of code found in the code segment , the variable assignmet statement defining $ <var:b2> * <var:h> $ to $ <var:b2>$ . This statement forwards the precondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \} $ toward $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> \} $ . Focusing on the upcoming bit of code in the program , we have the variable assignmet command \verb | <var:b2> := <var:b2> * <var:h> ; | . This forwards the precondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> \} $ toward $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \} $ . Stepping through , the assignment statement \verb | <var:b3> := <nat:3> ; | . This advances the precondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \} $ toward the condition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:b3> = <nat:3> \} $ . Advancing to the proceeding bit of code in our series of commands , we see the assignment code yielding $ <var:b3> * <var:h> $ to $ <var:b3>$ . This line transfers $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:b3> = <nat:3> \} $ toward the condition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:i> \} $ . Taking another step toward the upcoming piece of code found in our code , we see the binding code \verb | <var:b3> := <var:b3> * <var:h> ; | . This moves $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:i> \} $ into $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:i> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment rule obtained from Hoare techniques . Stepping forward , we see the variable assignmet statement \verb | <var:b3> := <var:b3> * <var:h> ; | . This transfers the precondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:i> ^ <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:i> ^ <nat:3> \} $ . Following , the assignment statement \verb | <var:J> := <var:b3> ; | . This moves the precondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:b3> = <nat:3> \cdot <var:i> ^ <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:J> = <nat:3> \cdot <var:i> ^ <nat:3> \} $ . This is given with the assignment rule found in Hoare reasoning . Immediately following , we have the line \verb | <var:J> := <var:J> + <var:b2> ; | . This command transfers $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:b2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:J> = <nat:3> \cdot <var:i> ^ <nat:3> \} $ toward the condition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:J> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> \} $ . Jumping to the subsequent line in the code segment , the command \verb | <var:J> := <var:J> + <var:b1> ; | . This code moves $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:b1> = <nat:3> \cdot <var:i> \land <var:J> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> \} $ into $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:J> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> \} $ . Taking another step toward the subsequent piece of code in our list of commands , the variable binding statement giving $ <var:J> + <var:b0$ as $ <var:J>$ . This command transfers the condition $ \{ <var:h> = <var:i> \land <var:b0> = <nat:1> \land <var:J> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> \} $ as the postcondition $ \{ <var:h> = <var:i> \land <var:J> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:h> = <var:i> }} <var:b0> := <nat:1> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:h> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:h> ; <var:b2> := <var:b2> * <var:h> ; <var:b3> := <nat:3> ; <var:b3> := <var:b3> * <var:h> ; <var:b3> := <var:b3> * <var:h> ; <var:b3> := <var:b3> * <var:h> ; <var:J> := <var:b3> ; <var:J> := <var:J> + <var:b2> ; <var:J> := <var:J> + <var:b1> ; <var:J> := <var:J> + <var:b0> {{ <var:J> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:b2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:b3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:b3> = <nat:3> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:J> = <nat:3> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:3> * <var:i> /\ <var:J> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:b0> = <nat:1> /\ <var:J> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:J> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 