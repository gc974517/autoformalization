\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as \begin{verbatim} <var:S1> := <var:m> ; <var:S2> := <var:S1> * <var:m> ; <var:S3> := <var:S2> * <var:m> ; <var:S4> := <var:S3> * <var:m> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:9> ; <var:S3> := <var:S3> * <nat:6> ; <var:S4> := <var:S4> * <nat:7> ; <var:a> := <var:S4> <var:a> := <var:a> + <var:S3> <var:a> := <var:a> + <var:S2> <var:a> := <var:a> + <var:S1> <var:a> := <var:a> + <var:S0> \end{verbatim} Allow , for all $ <var:w> \in \mathbb{N} $ , that we have $ <var:m> = <var:w> $ prior to the execution of the series of instructions , then we have $ <var:a> = <nat:7> \cdot <var:w> ^ <nat:4> + <nat:6> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:2> $ after series of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for our segment of code is demonstrated through the following decorated list of commands . \begin{eqnarray} \{ <var:m> = <var:w> \} \\ <var:S1> := <var:m> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <var:w> \} \\ <var:S2> := <var:S1> * <var:m> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <var:w> \land <var:S2> = <var:w> ^ <nat:2> \} \\ <var:S3> := <var:S2> * <var:m> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <var:w> \land <var:S2> = <var:w> ^ <nat:2> \land <var:S3> = <var:w> ^ <nat:3> \} \\ <var:S4> := <var:S3> * <var:m> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <var:w> \land <var:S2> = <var:w> ^ <nat:2> \land <var:S3> = <var:w> ^ <nat:3> \land <var:S4> = <var:w> ^ <nat:4> \} \\ <var:S0> := <nat:2> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <var:w> \land <var:S2> = <var:w> ^ <nat:2> \land <var:S3> = <var:w> ^ <nat:3> \land <var:S4> = <var:w> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ <var:S1> := <var:S1> * <nat:2> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <nat:2> \cdot <var:w> \land <var:S2> = <var:w> ^ <nat:2> \land <var:S3> = <var:w> ^ <nat:3> \land <var:S4> = <var:w> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ <var:S2> := <var:S2> * <nat:9> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <nat:2> \cdot <var:w> \land <var:S2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:S3> = <var:w> ^ <nat:3> \land <var:S4> = <var:w> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ <var:S3> := <var:S3> * <nat:6> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <nat:2> \cdot <var:w> \land <var:S2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:S3> = <nat:6> \cdot <var:w> ^ <nat:3> \land <var:S4> = <var:w> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ <var:S4> := <var:S4> * <nat:7> ; \\ \{ <var:m> = <var:w> \land <var:S1> = <nat:2> \cdot <var:w> \land <var:S2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:S3> = <nat:6> \cdot <var:w> ^ <nat:3> \land <var:S4> = <nat:7> \cdot <var:w> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ <var:a> := <var:S4> \\ \{ <var:m> = <var:w> \land <var:S1> = <nat:2> \cdot <var:w> \land <var:S2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:S3> = <nat:6> \cdot <var:w> ^ <nat:3> \land <var:S0> = <nat:2> \land <var:a> = <nat:7> \cdot <var:w> ^ <nat:4> \} \\ <var:a> := <var:a> + <var:S3> \\ \{ <var:m> = <var:w> \land <var:S1> = <nat:2> \cdot <var:w> \land <var:S2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:S0> = <nat:2> \land <var:a> = <nat:7> \cdot <var:w> ^ <nat:4> + <nat:6> \cdot <var:w> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:S2> \\ \{ <var:m> = <var:w> \land <var:S1> = <nat:2> \cdot <var:w> \land <var:S0> = <nat:2> \land <var:a> = <nat:7> \cdot <var:w> ^ <nat:4> + <nat:6> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:S1> \\ \{ <var:m> = <var:w> \land <var:S0> = <nat:2> \land <var:a> = <nat:7> \cdot <var:w> ^ <nat:4> + <nat:6> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> \} \\ <var:a> := <var:a> + <var:S0> \\ \{ <var:m> = <var:w> \land <var:a> = <nat:7> \cdot <var:w> ^ <nat:4> + <nat:6> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:2> \} \end{eqnarray} Using typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:m> = <var:w> }} <var:S1> := <var:m> ; <var:S2> := <var:S1> * <var:m> ; <var:S3> := <var:S2> * <var:m> ; <var:S4> := <var:S3> * <var:m> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:9> ; <var:S3> := <var:S3> * <nat:6> ; <var:S4> := <var:S4> * <nat:7> ; <var:a> := <var:S4> <var:a> := <var:a> + <var:S3> <var:a> := <var:a> + <var:S2> <var:a> := <var:a> + <var:S1> <var:a> := <var:a> + <var:S0> {{ <var:a> = <nat:7> * <var:w> ^ <nat:4> + <nat:6> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <var:w> /\ <var:S2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <var:w> /\ <var:S2> = <var:w> ^ <nat:2> /\ <var:S3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <var:w> /\ <var:S2> = <var:w> ^ <nat:2> /\ <var:S3> = <var:w> ^ <nat:3> /\ <var:S4> = <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <var:w> /\ <var:S2> = <var:w> ^ <nat:2> /\ <var:S3> = <var:w> ^ <nat:3> /\ <var:S4> = <var:w> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <nat:2> * <var:w> /\ <var:S2> = <var:w> ^ <nat:2> /\ <var:S3> = <var:w> ^ <nat:3> /\ <var:S4> = <var:w> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <nat:2> * <var:w> /\ <var:S2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:S3> = <var:w> ^ <nat:3> /\ <var:S4> = <var:w> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <nat:2> * <var:w> /\ <var:S2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:S3> = <nat:6> * <var:w> ^ <nat:3> /\ <var:S4> = <var:w> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <nat:2> * <var:w> /\ <var:S2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:S3> = <nat:6> * <var:w> ^ <nat:3> /\ <var:S4> = <nat:7> * <var:w> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <nat:2> * <var:w> /\ <var:S2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:S3> = <nat:6> * <var:w> ^ <nat:3> /\ <var:S0> = <nat:2> /\ <var:a> = <nat:7> * <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <nat:2> * <var:w> /\ <var:S2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:S0> = <nat:2> /\ <var:a> = <nat:7> * <var:w> ^ <nat:4> + <nat:6> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S1> = <nat:2> * <var:w> /\ <var:S0> = <nat:2> /\ <var:a> = <nat:7> * <var:w> ^ <nat:4> + <nat:6> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:S0> = <nat:2> /\ <var:a> = <nat:7> * <var:w> ^ <nat:4> + <nat:6> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:a> = <nat:7> * <var:w> ^ <nat:4> + <nat:6> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 