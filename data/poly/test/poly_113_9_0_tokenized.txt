\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:e> ; <var:X2> := <nat:1> ; <var:X2> := <var:X2> * <var:e> ; <var:X2> := <var:X2> * <var:e> ; <var:I> := <var:X2> ; <var:I> := <var:I> + <var:X1> ; <var:I> := <var:I> + <var:X0> \end{verbatim} Assume that $ <var:e> = <var:z> $ ahead of the evaluation of this program , it follows that we have $ <var:I> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:z> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:e> = <var:z> \land <var:X0> = <nat:3> \} \\ <var:X1> := <nat:3> ; \\ \{ <var:e> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> \} \\ <var:X1> := <var:X1> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> \times <var:z> \} \\ <var:X2> := <nat:1> ; \\ \{ <var:e> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> \times <var:z> \land <var:X2> = <nat:1> \} \\ <var:X2> := <var:X2> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> \times <var:z> \land <var:X2> = <nat:1> \times <var:z> \} \\ <var:X2> := <var:X2> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> \times <var:z> \land <var:X2> = <nat:1> \times <var:z> ^ <nat:2> \} \\ <var:I> := <var:X2> ; \\ \{ <var:e> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> \times <var:z> \land <var:I> = <nat:1> \times <var:z> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:X1> ; \\ \{ <var:e> = <var:z> \land <var:X0> = <nat:3> \land <var:I> = <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> \} \\ <var:I> := <var:I> + <var:X0> \\ \{ <var:e> = <var:z> \land <var:I> = <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} \end{eqnarray} The application of Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:e> = <var:z> }} <var:X0> := <nat:3> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:e> ; <var:X2> := <nat:1> ; <var:X2> := <var:X2> * <var:e> ; <var:X2> := <var:X2> * <var:e> ; <var:I> := <var:X2> ; <var:I> := <var:I> + <var:X1> ; <var:I> := <var:I> + <var:X0> {{ <var:I> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:z> /\ <var:X2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:z> /\ <var:X2> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:z> /\ <var:X2> = <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:z> /\ <var:I> = <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:X0> = <nat:3> /\ <var:I> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:I> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 