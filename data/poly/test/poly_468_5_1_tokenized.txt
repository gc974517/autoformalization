\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U1> := <var:X> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:2> ; <var:f> := <var:U1> <var:f> := <var:f> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:X> = <var:x> $ prior to the execution of the code segment , it must be that we see $ <var:f> = <nat:2> * <var:x> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the code can be done with typical Hoare logic . Taking another step toward the next statement found in our list of instructions , the binding code yielding $ <var:X> $ toward $ <var:U1>$ . This statement advances the condition $ \{ <var:X> = <var:x> \} $ as the postcondition $ \{ <var:X> = <var:x> \land <var:U1> = <var:x> \} $ . Going to the next step , we see the variable update line \verb | <var:U0> := <nat:2> ; | . This takes the condition $ \{ <var:X> = <var:x> \land <var:U1> = <var:x> \} $ as $ \{ <var:X> = <var:x> \land <var:U1> = <var:x> \land <var:U0> = <nat:2> \} $ . Advancing on , we see the variable update statement yielding $ <var:U1> * <nat:2> $ to $ <var:U1>$ . This moves the condition $ \{ <var:X> = <var:x> \land <var:U1> = <var:x> \land <var:U0> = <nat:2> \} $ to the postcondition $ \{ <var:X> = <var:x> \land <var:U1> = <nat:2> * <var:x> \land <var:U0> = <nat:2> \} $ . Looking at the subsequent piece of code contained in the list of instructions , we have the variable update command \verb | <var:f> := <var:U1> | . This statement moves $ \{ <var:X> = <var:x> \land <var:U1> = <nat:2> * <var:x> \land <var:U0> = <nat:2> \} $ as $ \{ <var:X> = <var:x> \land <var:U0> = <nat:2> \land <var:f> = <nat:2> * <var:x> \} $ . This is rigorously given through the assignment scheme obtained from Hoare reasoning . Taking a look at the following step found in the set of commands , we see the assignment line \verb | <var:f> := <var:f> + <var:U0> | . This forwards the condition $ \{ <var:X> = <var:x> \land <var:U0> = <nat:2> \land <var:f> = <nat:2> * <var:x> \} $ to the postcondition $ \{ <var:X> = <var:x> \land <var:f> = <nat:2> * <var:x> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:X> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:2> ; <var:f> := <var:U1> <var:f> := <var:f> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:X> = <var:x> }} <def:poly> {{ <var:f> = <nat:2> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:U1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:U1> = <var:x> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:U1> = <nat:2> * <var:x> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:U0> = <nat:2> /\ <var:f> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:x> /\ <var:f> = <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 