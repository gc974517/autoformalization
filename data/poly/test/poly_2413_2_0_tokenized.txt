\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:2> ; <var:G> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:P> = <var:K> $ , for some natural numbers $ <var:K> $ , before running the list of commands , it follows that we have $ <var:G> = <nat:2> $ once code has executed . \end{theorem} \begin{proof} Applying usual Hoare logic results in : \begin{eqnarray} \{ <var:P> = <var:K> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:P> = <var:K> \land <var:k0> = <nat:2> \} \\ <var:G> := <var:k0> \\ \{ <var:P> = <var:K> \land <var:G> = <nat:2> \} \end{eqnarray} Therefore , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:G> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:P> = <var:K> }} <def:poly> {{ <var:G> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:G> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 