\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:1> ; <var:z> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Assuming it to be that $ <var:n> = <var:k> $ --- for any positive coefficients $ <var:k> $ --- ahead of interpreting the segment of code it must be that we have $ <var:z> = <nat:1> $ after set of commands finishes . \end{theorem} \begin{proof} The method of proof for our set of instructions is demonstrated with usual Hoare logic . Taking a look at the next pieces of code found in the series of commands , \verb | { <var:n> = <var:k> } <var:g0> := <nat:1> { <var:n> = <var:k> \land <var:g0> = <nat:1> } | and \verb | { <var:n> = <var:k> \land <var:g0> = <nat:1> } <var:z> := <var:g0{ <var:n> = <var:k> \land <var:z> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:1> ; <var:z> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:n> = <var:k> }} <def:poly> {{ <var:z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 