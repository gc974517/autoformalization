\begin{document} \begin{theorem} Define the following code in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:G> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:9> ; <var:Z> := <var:M1> <var:Z> := <var:Z> + <var:M0> \end{verbatim} Given $ <var:G> = <var:P> $ , given any natural numbers $ <var:P> $ , ahead of executing the set of instructions it holds that we see $ <var:Z> = <nat:9> \cdot <var:P> + <nat:3> $ after list of instructions finishes . \end{theorem} \begin{proof} Proving correctness for our series of commands can be demonstrated by standard Hoare reasoning . Moving on to the subsequent step found in our segment of code , we see the variable binding line \verb | <var:M1> := <var:G> ; | . This advances the condition $ \{ <var:G> = <var:P> \} $ into the condition $ \{ <var:G> = <var:P> \land <var:M1> = <var:P> \} $ . Honing in on the upcoming line of code in our series of commands , we see the assignment command \verb | <var:M0> := <nat:3> ; | . This statement transfers the precondition $ \{ <var:G> = <var:P> \land <var:M1> = <var:P> \} $ toward $ \{ <var:G> = <var:P> \land <var:M1> = <var:P> \land <var:M0> = <nat:3> \} $ . This is rigorously given with the assignment law of Hoare reasoning . Focusing on the subsequent piece of code found in our series of instructions , we have the assignment line \verb | <var:M1> := <var:M1> * <nat:9> ; | . This command takes the precondition $ \{ <var:G> = <var:P> \land <var:M1> = <var:P> \land <var:M0> = <nat:3> \} $ as $ \{ <var:G> = <var:P> \land <var:M1> = <nat:9> * <var:P> \land <var:M0> = <nat:3> \} $ . Next , we see the variable binding command \verb | <var:Z> := <var:M1> | . This takes the condition $ \{ <var:G> = <var:P> \land <var:M1> = <nat:9> * <var:P> \land <var:M0> = <nat:3> \} $ into the condition $ \{ <var:G> = <var:P> \land <var:M0> = <nat:3> \land <var:Z> = <nat:9> * <var:P> \} $ . Observing the subsequent bit of code seen in our list of commands , we have the variable update code assigning $ <var:Z> + <var:M0$ toward $ <var:Z>$ . This moves $ \{ <var:G> = <var:P> \land <var:M0> = <nat:3> \land <var:Z> = <nat:9> * <var:P> \} $ to $ \{ <var:G> = <var:P> \land <var:Z> = <nat:9> * <var:P> + <nat:3> \} $ . This is deduced with the assignment inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:G> = <var:P> }} <var:M1> := <var:G> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:9> ; <var:Z> := <var:M1> <var:Z> := <var:Z> + <var:M0> {{ <var:Z> = <nat:9> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:M1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:M1> = <var:P> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:M1> = <nat:9> * <var:P> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:M0> = <nat:3> /\ <var:Z> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:Z> = <nat:9> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 