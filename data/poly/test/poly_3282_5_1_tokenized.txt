\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:r1> := <var:K> ; <var:r0> := <nat:4> ; <var:r1> := <var:r1> * <nat:1> ; <var:l> := <var:r1> <var:l> := <var:l> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given --- assuming some positive coefficients $ <var:H> $ --- that $ <var:K> = <var:H> $ ahead of executing the program it follows that $ <var:l> = <nat:1> \times <var:H> + <nat:4> $ when list of instructions exits . \end{theorem} \begin{proof} Using typical Hoare reasoning returns : \begin{eqnarray} \{ <var:K> = <var:H> \} \\ <var:r1> := <var:K> ; \\ \{ <var:K> = <var:H> \land <var:r1> = <var:H> \} \\ <var:r0> := <nat:4> ; \\ \{ <var:K> = <var:H> \land <var:r1> = <var:H> \land <var:r0> = <nat:4> \} \\ <var:r1> := <var:r1> * <nat:1> ; \\ \{ <var:K> = <var:H> \land <var:r1> = <nat:1> * <var:H> \land <var:r0> = <nat:4> \} \\ <var:l> := <var:r1> \\ \{ <var:K> = <var:H> \land <var:r0> = <nat:4> \land <var:l> = <nat:1> * <var:H> \} \\ <var:l> := <var:l> + <var:r0> \\ \{ <var:K> = <var:H> \land <var:l> = <nat:1> * <var:H> + <nat:4> \} \end{eqnarray} Hence , this list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:K> ; <var:r0> := <nat:4> ; <var:r1> := <var:r1> * <nat:1> ; <var:l> := <var:r1> <var:l> := <var:l> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:K> = <var:H> }} <def:poly> {{ <var:l> = <nat:1> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:r1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:r1> = <var:H> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:r1> = <nat:1> * <var:H> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:r0> = <nat:4> /\ <var:l> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:l> = <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 