\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:E> ; <var:d2> := <nat:7> ; <var:d2> := <var:d2> * <var:E> ; <var:d2> := <var:d2> * <var:E> ; <var:B> := <var:d2> ; <var:B> := <var:B> + <var:d1> ; <var:B> := <var:B> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:E> = <var:y> $ taking $ <var:y> \in \mathbb{Z}^+ $ prior to evaluating the series of instructions , it must be that we have $ <var:B> = <nat:7> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare techniques returns : \begin{eqnarray} \{ <var:E> = <var:y> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:E> = <var:y> \land <var:d0> = <nat:3> \} \\ <var:d1> := <nat:8> ; \\ \{ <var:E> = <var:y> \land <var:d0> = <nat:3> \land <var:d1> = <nat:8> \} \\ <var:d1> := <var:d1> * <var:E> ; \\ \{ <var:E> = <var:y> \land <var:d0> = <nat:3> \land <var:d1> = <nat:8> * <var:y> \} \\ <var:d2> := <nat:7> ; \\ \{ <var:E> = <var:y> \land <var:d0> = <nat:3> \land <var:d1> = <nat:8> * <var:y> \land <var:d2> = <nat:7> \} \\ <var:d2> := <var:d2> * <var:E> ; \\ \{ <var:E> = <var:y> \land <var:d0> = <nat:3> \land <var:d1> = <nat:8> * <var:y> \land <var:d2> = <nat:7> * <var:y> \} \\ <var:d2> := <var:d2> * <var:E> ; \\ \{ <var:E> = <var:y> \land <var:d0> = <nat:3> \land <var:d1> = <nat:8> * <var:y> \land <var:d2> = <nat:7> * <var:y> ^ <nat:2> \} \end{eqnarray} Advancing the execution of this segment of code gives : \begin{eqnarray} <var:B> := <var:d2> ; \\ \{ <var:E> = <var:y> \land <var:d0> = <nat:3> \land <var:d1> = <nat:8> * <var:y> \land <var:B> = <nat:7> * <var:y> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:d1> ; \\ \{ <var:E> = <var:y> \land <var:d0> = <nat:3> \land <var:B> = <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> \} \\ <var:B> := <var:B> + <var:d0> \\ \{ <var:E> = <var:y> \land <var:B> = <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:3> \} \end{eqnarray} Thusly , this series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d0> := <nat:3> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:E> ; <var:d2> := <nat:7> ; <var:d2> := <var:d2> * <var:E> ; <var:d2> := <var:d2> * <var:E> ; <var:B> := <var:d2> ; <var:B> := <var:B> + <var:d1> ; <var:B> := <var:B> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:E> = <var:y> }} <def:poly> {{ <var:B> = <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:8> * <var:y> /\ <var:d2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:8> * <var:y> /\ <var:d2> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:8> * <var:y> /\ <var:d2> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:8> * <var:y> /\ <var:B> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:3> /\ <var:B> = <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:B> = <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 