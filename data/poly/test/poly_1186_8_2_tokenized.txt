\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <nat:1> + <var:Q> * <var:g> ; <var:Q> := <nat:1> + <var:Q> * <var:g> ; <var:Q> := <nat:2> + <var:Q> * <var:g> ; <var:Q> := <var:Q> * <var:g> ; <var:Q> := <nat:3> + <var:Q> * <var:g> ; <var:Q> := <nat:1> + <var:Q> * <var:g> ; <var:Q> := <nat:2> + <var:Q> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Assume --- for some integers $ <var:W> $ --- that $ <var:g> = <var:W> $ prior to evaluating our program , it must be that we have $ <var:Q> = <nat:3> \cdot <var:W> ^ <nat:7> + <nat:1> \cdot <var:W> ^ <nat:6> + <nat:1> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:2> $ after list of commands terminates . \end{theorem} \begin{proof} The method of proof for the code segment can be accomplished with typical Hoare logic . Moving forward to the next lines found in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:g> = <var:W> \} & <var:Q> := <nat:3> & \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \} \\ \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \} & <var:Q> := <nat:1> + <var:Q> * <var:g> & \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \times <var:W> + <nat:1> \} \end{tabular} This is guaranteed through the scheme given by standard Hoare logic . Moving onward , \[ \begin{tabular} {rcl} \{ <var:g> = <var:W> \} & <var:Q> := <nat:3> & \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \} \\ \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \} & <var:Q> := <nat:1> + <var:Q> * <var:g> & \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \times <var:W> + <nat:1> \} \\ \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \times <var:W> + <nat:1> \} & <var:Q> := <nat:1> + <var:Q> * <var:g> & \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:1> \} \\ \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:1> \} & <var:Q> := <nat:2> + <var:Q> * <var:g> & \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:2> \} \\ \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:2> \} & <var:Q> := <var:Q> * <var:g> & \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \times <var:W> ^ <nat:4> + <nat:1> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + \} \end{tabular} This is given through the environment update scheme found in usual Hoare reasoning . Moving forward to the subsequent step contained in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:W> \} & <var:Q> := <nat:3> & \{ <var:g> = <var:W> \land <var:Q> = <nat:3> \} \end{tabular} This is shown to be logically sound by the variable assignmet inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:3> ; <var:Q> := <nat:1> + <var:Q> * <var:g> ; <var:Q> := <nat:1> + <var:Q> * <var:g> ; <var:Q> := <nat:2> + <var:Q> * <var:g> ; <var:Q> := <var:Q> * <var:g> ; <var:Q> := <nat:3> + <var:Q> * <var:g> ; <var:Q> := <nat:1> + <var:Q> * <var:g> ; <var:Q> := <nat:2> + <var:Q> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:g> = <var:W> }} <def:poly> {{ <var:Q> = <nat:3> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:Q> = <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:Q> = <nat:3> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 