\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} : \begin{verbatim} <var:r> := <nat:1> ; <var:r> := <nat:1> + <var:r> * <var:v> \end{verbatim} Allowing that we have $ <var:v> = <var:J> $ before interpreting our code , it follows that we see $ <var:r> = <nat:1> \times <var:J> + <nat:1> $ after series of instructions is done executing . \end{theorem} \begin{proof} The method of proof for this code segment is shown using Hoare techniques . Moving forward , the binding command \verb | <var:r> := <nat:1> ; | . This code advances the condition $ \{ <var:v> = <var:J> \} $ into the condition $ \{ <var:v> = <var:J> \land <var:r> = <nat:1> \} $ . This is shown by the assignment inference rule found in typical Hoare logic . Moving on to the next step , we see the variable assignmet code \verb | <var:r> := <nat:1> + <var:r> * <var:v> | . This redefines the precondition $ \{ <var:v> = <var:J> \land <var:r> = <nat:1> \} $ as the postcondition $ \{ <var:v> = <var:J> \land <var:r> = <nat:1> \times <var:J> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:v> = <var:J> }} <var:r> := <nat:1> ; <var:r> := <nat:1> + <var:r> * <var:v> {{ <var:r> = <nat:1> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:r> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:r> = <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 