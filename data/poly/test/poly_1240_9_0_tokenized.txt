\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:7> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:G> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:G> ; <var:Z2> := <var:Z2> * <var:G> ; <var:t> := <var:Z2> ; <var:t> := <var:t> + <var:Z1> ; <var:t> := <var:t> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:G> = <var:r> $ ahead of running our set of commands then we have $ <var:t> = <nat:4> \times <var:r> ^ <nat:2> + <nat:8> \times <var:r> + <nat:7> $ when list of commands has finished executing . \end{theorem} \begin{proof} The method of proof for the code is given by standard Hoare techniques . Going forward , the variable update command giving $ <nat:7> $ toward $ <var:Z0>$ . This statement moves $ \{ <var:G> = <var:r> \} $ toward the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \} $ . Advancing to the following statement contained in our series of commands , the assignment line \verb | <var:Z1> := <nat:8> ; | . This line transfers the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \} $ to the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \} $ . This is known to be sound by the assignment inference rule defined by typical Hoare techniques . Next , the variable assignmet statement binding $ <var:Z1> * <var:G> $ into $ <var:Z1>$ . This moves the precondition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \} $ into the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \} $ . This is shown with the assignment inference rule found in usual Hoare reasoning . Taking another step toward the proceeding line of code seen in the program , we have the environment update line \verb | <var:Z2> := <nat:4> ; | . This moves the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \} $ into the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \land <var:Z2> = <nat:4> \} $ . This is rigorously given by the assignment law of standard Hoare techniques . Moving on to the next step , we have the variable update command \verb | <var:Z2> := <var:Z2> * <var:G> ; | . This takes the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \land <var:Z2> = <nat:4> \} $ toward $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \land <var:Z2> = <nat:4> \times <var:r> \} $ . This is shown with the assignment scheme found in usual Hoare logic . Taking another step toward the proceeding piece of code seen in our program , we have the binding statement defining $ <var:Z2> * <var:G> $ into $ <var:Z2>$ . This statement takes $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \land <var:Z2> = <nat:4> \times <var:r> \} $ toward the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \land <var:Z2> = <nat:4> \times <var:r> ^ <nat:2> \} $ . This is rigorously given with the assignment scheme defined in usual Hoare logic . Advancing to the next step , we see the variable assignmet statement defining $ <var:Z2> $ into $ <var:t>$ . This moves the precondition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \land <var:Z2> = <nat:4> \times <var:r> ^ <nat:2> \} $ toward the condition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \land <var:t> = <nat:4> \times <var:r> ^ <nat:2> \} $ . This is rigorously given by the assignment rule given by typical Hoare reasoning . Shifting focus toward the subsequent line of code seen in the series of instructions , the statement binding $ <var:t> + <var:Z1> $ as $ <var:t>$ . This advances $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:8> \times <var:r> \land <var:t> = <nat:4> \times <var:r> ^ <nat:2> \} $ into $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:t> = <nat:4> \times <var:r> ^ <nat:2> + <nat:8> \times <var:r> \} $ . This is known to be sound through the assignment law defined by standard Hoare reasoning . Observing the next line found in our set of commands , the code \verb | <var:t> := <var:t> + <var:Z0> | . This takes the precondition $ \{ <var:G> = <var:r> \land <var:Z0> = <nat:7> \land <var:t> = <nat:4> \times <var:r> ^ <nat:2> + <nat:8> \times <var:r> \} $ to $ \{ <var:G> = <var:r> \land <var:t> = <nat:4> \times <var:r> ^ <nat:2> + <nat:8> \times <var:r> + <nat:7> \} $ . This is deduced using the assignment law in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:7> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:G> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:G> ; <var:Z2> := <var:Z2> * <var:G> ; <var:t> := <var:Z2> ; <var:t> := <var:t> + <var:Z1> ; <var:t> := <var:t> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:G> = <var:r> }} <def:poly> {{ <var:t> = <nat:4> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:8> * <var:r> /\ <var:Z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:8> * <var:r> /\ <var:Z2> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:8> * <var:r> /\ <var:Z2> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:8> * <var:r> /\ <var:t> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:Z0> = <nat:7> /\ <var:t> = <nat:4> * <var:r> ^ <nat:2> + <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:t> = <nat:4> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 