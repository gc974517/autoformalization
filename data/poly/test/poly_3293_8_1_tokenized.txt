\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:W> ; <var:o2> := <var:o1> * <var:W> ; <var:o0> := <nat:9> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:9> ; <var:Z> := <var:o2> <var:Z> := <var:Z> + <var:o1> <var:Z> := <var:Z> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Allowing $ <var:W> = <var:s> $ --- taking $ <var:s> \in \mathbb{N} $ --- prior to evaluating our code segment , it must be that $ <var:Z> = <nat:9> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:9> $ . \end{theorem} \begin{proof} The proof of this list of commands can be seen by usual Hoare logic . Focusing on the upcoming statement found in our program , we have the binding statement giving $ <var:W> $ toward $ <var:o1>$ . This forwards the condition $ \{ <var:W> = <var:s> \} $ into the condition $ \{ <var:W> = <var:s> \land <var:o1> = <var:s> \} $ . This is shown to be logically sound with the assignment scheme given by usual Hoare techniques . Taking a look at the next line of code contained in the series of commands , we have the variable binding statement \verb | <var:o2> := <var:o1> * <var:W> ; | . This transfers $ \{ <var:W> = <var:s> \land <var:o1> = <var:s> \} $ into $ \{ <var:W> = <var:s> \land <var:o1> = <var:s> \land <var:o2> = <var:s> ^ <nat:2> \} $ . Jumping to the proceeding command found in the list of commands , the line assigning $ <nat:9> $ into $ <var:o0>$ . This line forwards $ \{ <var:W> = <var:s> \land <var:o1> = <var:s> \land <var:o2> = <var:s> ^ <nat:2> \} $ to the postcondition $ \{ <var:W> = <var:s> \land <var:o1> = <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o0> = <nat:9> \} $ . Shifting focus toward the following command found in the list of instructions , we see the environment update code letting $ <var:o1> * <nat:8> $ to $ <var:o1>$ . This forwards the precondition $ \{ <var:W> = <var:s> \land <var:o1> = <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o0> = <nat:9> \} $ to the postcondition $ \{ <var:W> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o0> = <nat:9> \} $ . Advancing to the upcoming piece of code found in the set of instructions , the environment update statement binding $ <var:o2> * <nat:9> $ to $ <var:o2>$ . This statement forwards the precondition $ \{ <var:W> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o0> = <nat:9> \} $ to $ \{ <var:W> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:o0> = <nat:9> \} $ . Advancing to the following statement found in our list of commands , we have the variable binding statement giving $ <var:o2$ as $ <var:Z>$ . This code advances the precondition $ \{ <var:W> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:o0> = <nat:9> \} $ to $ \{ <var:W> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o0> = <nat:9> \land <var:Z> = <nat:9> \cdot <var:s> ^ <nat:2> \} $ . Taking a look at the next bit of code in our code segment , we see the assignment statement \verb | <var:Z> := <var:Z> + <var:o1> | . This forwards the precondition $ \{ <var:W> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o0> = <nat:9> \land <var:Z> = <nat:9> \cdot <var:s> ^ <nat:2> \} $ to the condition $ \{ <var:W> = <var:s> \land <var:o0> = <nat:9> \land <var:Z> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> \} $ . This is deduced using the assignment scheme given by standard Hoare logic . Immediately after , we have the binding line assigning $ <var:Z> + <var:o0$ into $ <var:Z>$ . This line takes the condition $ \{ <var:W> = <var:s> \land <var:o0> = <nat:9> \land <var:Z> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> \} $ into the condition $ \{ <var:W> = <var:s> \land <var:Z> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> + <nat:9> \} $ . This is rigorously given using the assignment scheme of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o1> := <var:W> ; <var:o2> := <var:o1> * <var:W> ; <var:o0> := <nat:9> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:9> ; <var:Z> := <var:o2> <var:Z> := <var:Z> + <var:o1> <var:Z> := <var:Z> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:W> = <var:s> }} <def:poly> {{ <var:Z> = <nat:9> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:o1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:o1> = <var:s> /\ <var:o2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:o1> = <var:s> /\ <var:o2> = <var:s> ^ <nat:2> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:o1> = <nat:8> * <var:s> /\ <var:o2> = <var:s> ^ <nat:2> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:o1> = <nat:8> * <var:s> /\ <var:o2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:o1> = <nat:8> * <var:s> /\ <var:o0> = <nat:9> /\ <var:Z> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:o0> = <nat:9> /\ <var:Z> = <nat:9> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:Z> = <nat:9> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 