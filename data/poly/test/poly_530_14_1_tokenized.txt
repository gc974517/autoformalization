\begin{document} \begin{theorem} Take a series of commands such that \begin{verbatim} <var:j1> := <var:R> ; <var:j2> := <var:j1> * <var:R> ; <var:j3> := <var:j2> * <var:R> ; <var:j4> := <var:j3> * <var:R> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:3> ; <var:j2> := <var:j2> * <nat:1> ; <var:j3> := <var:j3> * <nat:6> ; <var:j4> := <var:j4> * <nat:1> ; <var:A> := <var:j4> <var:A> := <var:A> + <var:j3> <var:A> := <var:A> + <var:j2> <var:A> := <var:A> + <var:j1> <var:A> := <var:A> + <var:j0> \end{verbatim} Allowing it to hold that $ <var:R> = <var:d> $ before interpreting the set of commands , it holds that we have $ <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> $ when series of instructions is done . \end{theorem} \begin{proof} The course of logic for our code is demonstrated by standard Hoare logic . Going forward , we see the variable update code \verb | <var:j1> := <var:R> ; | . This advances the condition $ \{ <var:R> = <var:d> \} $ into the condition $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \} $ . Stepping forward , we see the binding statement \verb | <var:j2> := <var:j1> * <var:R> ; | . This command redefines the precondition $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \} $ as the postcondition $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \} $ . This is known to be sound using the assignment law of usual Hoare reasoning . Taking a look at the proceeding statement contained in the code segment , we see the variable binding statement letting $ <var:j2> * <var:R> $ to $ <var:j3>$ . This advances $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \} $ . This is sound using the assignment inference rule given in Hoare logic . Observing the subsequent line found in the segment of code , the assignment command \verb | <var:j4> := <var:j3> * <var:R> ; | . This line forwards the precondition $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \} $ toward $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \} $ . This is sound through the assignment inference rule given in typical Hoare logic . Taking another step toward the subsequent line in our code , we see the assignment statement binding $ <nat:1> $ as $ <var:j0>$ . This statement takes $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \} $ into the condition $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . Immediately following , the environment update command \verb | <var:j1> := <var:j1> * <nat:3> ; | . This moves the condition $ \{ <var:R> = <var:d> \land <var:j1> = <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ toward the condition $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . This is ensured using the assignment rule defined by Hoare techniques . Shifting focus toward the following line seen in our series of instructions , we have the variable assignmet command \verb | <var:j2> := <var:j2> * <nat:1> ; | . This moves the precondition $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ to the condition $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . Looking at the subsequent piece of code seen in our program , the binding command defining $ <var:j3> * <nat:6> $ to $ <var:j3>$ . This statement forwards the condition $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j3> = <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ into the postcondition $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j3> = <nat:6> * <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . This is known to be sound by the assignment scheme defined by Hoare reasoning . Observing the next line of code found in our code segment , we have the variable update line \verb | <var:j4> := <var:j4> * <nat:1> ; | . This forwards $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j3> = <nat:6> * <var:d> ^ <nat:3> \land <var:j4> = <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ toward $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j3> = <nat:6> * <var:d> ^ <nat:3> \land <var:j4> = <nat:1> * <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . Shifting focus toward the following bit of code found in the code segment , the environment update code giving $ <var:j4$ into $ <var:A>$ . This code advances $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j3> = <nat:6> * <var:d> ^ <nat:3> \land <var:j4> = <nat:1> * <var:d> ^ <nat:4> \land <var:j0> = <nat:1> \} $ to the condition $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j3> = <nat:6> * <var:d> ^ <nat:3> \land <var:j0> = <nat:1> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> \} $ . Considering the following bit of code found in the set of instructions , we see the variable update statement \verb | <var:A> := <var:A> + <var:j3> | . This statement takes the precondition $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j3> = <nat:6> * <var:d> ^ <nat:3> \land <var:j0> = <nat:1> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> \} $ as the condition $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j0> = <nat:1> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> \} $ . This is rigorously given with the assignment inference rule of usual Hoare reasoning . Now , we see the variable binding statement \verb | <var:A> := <var:A> + <var:j2> | . This transfers $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j2> = <nat:1> * <var:d> ^ <nat:2> \land <var:j0> = <nat:1> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> \} $ into $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j0> = <nat:1> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> \} $ . Further , we have the statement letting $ <var:A> + <var:j1$ as $ <var:A>$ . This moves $ \{ <var:R> = <var:d> \land <var:j1> = <nat:3> * <var:d> \land <var:j0> = <nat:1> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> \} $ into $ \{ <var:R> = <var:d> \land <var:j0> = <nat:1> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> \} $ . This is ensured by the assignment scheme defined by typical Hoare techniques . Considering the following bit of code contained in our series of commands , the binding statement \verb | <var:A> := <var:A> + <var:j0> | . This line transfers the precondition $ \{ <var:R> = <var:d> \land <var:j0> = <nat:1> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> \} $ toward the postcondition $ \{ <var:R> = <var:d> \land <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <var:j4> : string := " <var:j4> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:R> = <var:d> }} <var:j1> := <var:R> ; <var:j2> := <var:j1> * <var:R> ; <var:j3> := <var:j2> * <var:R> ; <var:j4> := <var:j3> * <var:R> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:3> ; <var:j2> := <var:j2> * <nat:1> ; <var:j3> := <var:j3> * <nat:6> ; <var:j4> := <var:j4> * <nat:1> ; <var:A> := <var:j4> <var:A> := <var:A> + <var:j3> <var:A> := <var:A> + <var:j2> <var:A> := <var:A> + <var:j1> <var:A> := <var:A> + <var:j0> {{ <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <var:d> /\ <var:j2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <var:d> /\ <var:j2> = <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <var:d> /\ <var:j2> = <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> /\ <var:j4> = <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <var:d> /\ <var:j2> = <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> /\ <var:j4> = <var:d> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <nat:3> * <var:d> /\ <var:j2> = <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> /\ <var:j4> = <var:d> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <nat:3> * <var:d> /\ <var:j2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:j3> = <var:d> ^ <nat:3> /\ <var:j4> = <var:d> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <nat:3> * <var:d> /\ <var:j2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:d> ^ <nat:3> /\ <var:j4> = <var:d> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <nat:3> * <var:d> /\ <var:j2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:d> ^ <nat:3> /\ <var:j4> = <nat:1> * <var:d> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <nat:3> * <var:d> /\ <var:j2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:d> ^ <nat:3> /\ <var:j0> = <nat:1> /\ <var:A> = <nat:1> * <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <nat:3> * <var:d> /\ <var:j2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:j0> = <nat:1> /\ <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j1> = <nat:3> * <var:d> /\ <var:j0> = <nat:1> /\ <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:j0> = <nat:1> /\ <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:A> = <nat:1> * <var:d> ^ <nat:4> + <nat:6> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 