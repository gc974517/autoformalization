\begin{document} \begin{theorem} We define a set of commands : \begin{verbatim} <var:e0> := <nat:1> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:c> ; <var:s> := <var:e1> ; <var:s> := <var:s> + <var:e0> \end{verbatim} Assuming it to hold that $ <var:c> = <var:J> $ --- given positive coefficients $ <var:J> $ --- prior to evaluating our code segment , it holds that $ <var:s> = <nat:8> * <var:J> + <nat:1> $ after set of instructions has executed . \end{theorem} \begin{proof} Note that the following decorated series of commands . \begin{eqnarray} \{ <var:c> = <var:J> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:c> = <var:J> \land <var:e0> = <nat:1> \} \\ <var:e1> := <nat:8> ; \\ \{ <var:c> = <var:J> \land <var:e0> = <nat:1> \land <var:e1> = <nat:8> \} \\ <var:e1> := <var:e1> * <var:c> ; \\ \{ <var:c> = <var:J> \land <var:e0> = <nat:1> \land <var:e1> = <nat:8> \cdot <var:J> \} \\ <var:s> := <var:e1> ; \\ \{ <var:c> = <var:J> \land <var:e0> = <nat:1> \land <var:s> = <nat:8> \cdot <var:J> \} \\ <var:s> := <var:s> + <var:e0> \\ \{ <var:c> = <var:J> \land <var:s> = <nat:8> \cdot <var:J> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:c> = <var:J> }} <var:e0> := <nat:1> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:c> ; <var:s> := <var:e1> ; <var:s> := <var:s> + <var:e0> {{ <var:s> = <nat:8> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:e0> = <nat:1> /\ <var:s> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:s> = <nat:8> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 