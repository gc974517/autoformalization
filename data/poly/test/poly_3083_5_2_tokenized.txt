\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:b> := <nat:4> ; <var:b> := <nat:4> + <var:b> * <var:B> ; <var:b> := <nat:2> + <var:b> * <var:B> ; <var:b> := <nat:4> + <var:b> * <var:B> ; <var:b> := <nat:1> + <var:b> * <var:B> \end{verbatim} Assume $ <var:B> = <var:u> $ prior to evaluating our code it must be that we have $ <var:b> = <nat:4> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> $ after segment of code exits . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:B> = <var:u> \} \\ <var:b> := <nat:4> ; \\ \{ <var:B> = <var:u> \land <var:b> = <nat:4> \} \\ <var:b> := <nat:4> + <var:b> * <var:B> ; \\ \{ <var:B> = <var:u> \land <var:b> = <nat:4> * <var:u> + <nat:4> \} \\ <var:b> := <nat:2> + <var:b> * <var:B> ; \\ \{ <var:B> = <var:u> \land <var:b> = <nat:4> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:2> \} \\ <var:b> := <nat:4> + <var:b> * <var:B> ; \\ \{ <var:B> = <var:u> \land <var:b> = <nat:4> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:4> \} \\ <var:b> := <nat:1> + <var:b> * <var:B> \\ \{ <var:B> = <var:u> \land <var:b> = <nat:4> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> \} \end{eqnarray} As a result , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:B> = <var:u> }} <var:b> := <nat:4> ; <var:b> := <nat:4> + <var:b> * <var:B> ; <var:b> := <nat:2> + <var:b> * <var:B> ; <var:b> := <nat:4> + <var:b> * <var:B> ; <var:b> := <nat:1> + <var:b> * <var:B> {{ <var:b> = <nat:4> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:b> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:b> = <nat:4> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:b> = <nat:4> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:b> = <nat:4> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:b> = <nat:4> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 