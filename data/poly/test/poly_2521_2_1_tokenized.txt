\begin{document} \begin{theorem} Define a code segment in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:8> ; <var:S> := <var:Y0> \end{verbatim} Given $ <var:f> = <var:z> $ prior to interpreting our code , it holds that we have $ <var:S> = <nat:8> $ . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:f> = <var:z> \} \\ <var:Y0> := <nat:8> ; \\ \{ <var:f> = <var:z> \land <var:Y0> = <nat:8> \} \\ <var:S> := <var:Y0> \\ \{ <var:f> = <var:z> \land <var:S> = <nat:8> \} \end{eqnarray} Considering the preceding argument , our set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <var:Y0> := <nat:8> ; <var:S> := <var:Y0> {{ <var:S> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:S> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 