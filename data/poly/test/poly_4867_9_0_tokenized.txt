\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:x0> := <nat:9> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:n> ; <var:x2> := <nat:8> ; <var:x2> := <var:x2> * <var:n> ; <var:x2> := <var:x2> * <var:n> ; <var:T> := <var:x2> ; <var:T> := <var:T> + <var:x1> ; <var:T> := <var:T> + <var:x0> \end{verbatim} Assume that $ <var:n> = <var:J> $ ( given any whole numbers $ <var:J> $ ) ahead of running the list of commands then $ <var:T> = <nat:8> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:9> $ once set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:J> \} \\ <var:x0> := <nat:9> ; \\ \{ <var:n> = <var:J> \land <var:x0> = <nat:9> \} \\ <var:x1> := <nat:1> ; \\ \{ <var:n> = <var:J> \land <var:x0> = <nat:9> \land <var:x1> = <nat:1> \} \\ <var:x1> := <var:x1> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:x0> = <nat:9> \land <var:x1> = <nat:1> \cdot <var:J> \} \\ <var:x2> := <nat:8> ; \\ \{ <var:n> = <var:J> \land <var:x0> = <nat:9> \land <var:x1> = <nat:1> \cdot <var:J> \land <var:x2> = <nat:8> \} \\ <var:x2> := <var:x2> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:x0> = <nat:9> \land <var:x1> = <nat:1> \cdot <var:J> \land <var:x2> = <nat:8> \cdot <var:J> \} \\ <var:x2> := <var:x2> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:x0> = <nat:9> \land <var:x1> = <nat:1> \cdot <var:J> \land <var:x2> = <nat:8> \cdot <var:J> ^ <nat:2> \} \\ <var:T> := <var:x2> ; \\ \{ <var:n> = <var:J> \land <var:x0> = <nat:9> \land <var:x1> = <nat:1> \cdot <var:J> \land <var:T> = <nat:8> \cdot <var:J> ^ <nat:2> \} \end{eqnarray} Allowing interpreting the set of instructions produces : \begin{eqnarray} <var:T> := <var:T> + <var:x1> ; \\ \{ <var:n> = <var:J> \land <var:x0> = <nat:9> \land <var:T> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> \} \\ <var:T> := <var:T> + <var:x0> \\ \{ <var:n> = <var:J> \land <var:T> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:9> \} \end{eqnarray} Utilizing Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:n> = <var:J> }} <var:x0> := <nat:9> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:n> ; <var:x2> := <nat:8> ; <var:x2> := <var:x2> * <var:n> ; <var:x2> := <var:x2> * <var:n> ; <var:T> := <var:x2> ; <var:T> := <var:T> + <var:x1> ; <var:T> := <var:T> + <var:x0> {{ <var:T> = <nat:8> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:1> * <var:J> /\ <var:x2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:1> * <var:J> /\ <var:x2> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:1> * <var:J> /\ <var:x2> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:1> * <var:J> /\ <var:T> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:x0> = <nat:9> /\ <var:T> = <nat:8> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:T> = <nat:8> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 