\begin{document} \begin{theorem} We define a list of commands : \begin{verbatim} <var:i1> := <var:n> ; <var:i2> := <var:i1> * <var:n> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:7> ; <var:a> := <var:i2> <var:a> := <var:a> + <var:i1> <var:a> := <var:a> + <var:i0> \end{verbatim} Given it to be that $ <var:n> = <var:k> $ before evaluating our code segment it follows that we see $ <var:a> = <nat:7> \times <var:k> ^ <nat:2> + <nat:6> \times <var:k> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:n> = <var:k> \} \\ <var:i1> := <var:n> ; \\ \{ <var:n> = <var:k> \land <var:i1> = <var:k> \} \\ <var:i2> := <var:i1> * <var:n> ; \\ \{ <var:n> = <var:k> \land <var:i1> = <var:k> \land <var:i2> = <var:k> ^ <nat:2> \} \\ <var:i0> := <nat:8> ; \\ \{ <var:n> = <var:k> \land <var:i1> = <var:k> \land <var:i2> = <var:k> ^ <nat:2> \land <var:i0> = <nat:8> \} \\ <var:i1> := <var:i1> * <nat:6> ; \\ \{ <var:n> = <var:k> \land <var:i1> = <nat:6> * <var:k> \land <var:i2> = <var:k> ^ <nat:2> \land <var:i0> = <nat:8> \} \\ <var:i2> := <var:i2> * <nat:7> ; \\ \{ <var:n> = <var:k> \land <var:i1> = <nat:6> * <var:k> \land <var:i2> = <nat:7> * <var:k> ^ <nat:2> \land <var:i0> = <nat:8> \} \\ <var:a> := <var:i2> \\ \{ <var:n> = <var:k> \land <var:i1> = <nat:6> * <var:k> \land <var:i0> = <nat:8> \land <var:a> = <nat:7> * <var:k> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:i1> \\ \{ <var:n> = <var:k> \land <var:i0> = <nat:8> \land <var:a> = <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> \} \\ <var:a> := <var:a> + <var:i0> \\ \{ <var:n> = <var:k> \land <var:a> = <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:8> \} \end{eqnarray} Thus , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:n> = <var:k> }} <var:i1> := <var:n> ; <var:i2> := <var:i1> * <var:n> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:7> ; <var:a> := <var:i2> <var:a> := <var:a> + <var:i1> <var:a> := <var:a> + <var:i0> {{ <var:a> = <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:i1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:i1> = <var:k> /\ <var:i2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:i1> = <var:k> /\ <var:i2> = <var:k> ^ <nat:2> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:i1> = <nat:6> * <var:k> /\ <var:i2> = <var:k> ^ <nat:2> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:i1> = <nat:6> * <var:k> /\ <var:i2> = <nat:7> * <var:k> ^ <nat:2> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:i1> = <nat:6> * <var:k> /\ <var:i0> = <nat:8> /\ <var:a> = <nat:7> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:i0> = <nat:8> /\ <var:a> = <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:k> /\ <var:a> = <nat:7> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 