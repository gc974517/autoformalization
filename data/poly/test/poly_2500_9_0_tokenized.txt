\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:3> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:Q> ; <var:A2> := <nat:1> ; <var:A2> := <var:A2> * <var:Q> ; <var:A2> := <var:A2> * <var:Q> ; <var:i> := <var:A2> ; <var:i> := <var:i> + <var:A1> ; <var:i> := <var:i> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:Q> = <var:s> $ , taking whole numbers $ <var:s> $ , ahead of the evaluation of our code , it follows that $ <var:i> = <nat:1> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:3> $ once program exits . \end{theorem} \begin{proof} Observe that this decorated series of instructions . \begin{eqnarray} \{ <var:Q> = <var:s> \} \\ <var:A0> := <nat:3> ; \\ \{ <var:Q> = <var:s> \land <var:A0> = <nat:3> \} \\ <var:A1> := <nat:4> ; \\ \{ <var:Q> = <var:s> \land <var:A0> = <nat:3> \land <var:A1> = <nat:4> \} \\ <var:A1> := <var:A1> * <var:Q> ; \\ \{ <var:Q> = <var:s> \land <var:A0> = <nat:3> \land <var:A1> = <nat:4> \times <var:s> \} \\ <var:A2> := <nat:1> ; \\ \{ <var:Q> = <var:s> \land <var:A0> = <nat:3> \land <var:A1> = <nat:4> \times <var:s> \land <var:A2> = <nat:1> \} \\ <var:A2> := <var:A2> * <var:Q> ; \\ \{ <var:Q> = <var:s> \land <var:A0> = <nat:3> \land <var:A1> = <nat:4> \times <var:s> \land <var:A2> = <nat:1> \times <var:s> \} \\ <var:A2> := <var:A2> * <var:Q> ; \\ \{ <var:Q> = <var:s> \land <var:A0> = <nat:3> \land <var:A1> = <nat:4> \times <var:s> \land <var:A2> = <nat:1> \times <var:s> ^ <nat:2> \} \end{eqnarray} Furthering the evaluation of the list of commands results in : \begin{eqnarray} <var:i> := <var:A2> ; \\ \{ <var:Q> = <var:s> \land <var:A0> = <nat:3> \land <var:A1> = <nat:4> \times <var:s> \land <var:i> = <nat:1> \times <var:s> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:A1> ; \\ \{ <var:Q> = <var:s> \land <var:A0> = <nat:3> \land <var:i> = <nat:1> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> \} \\ <var:i> := <var:i> + <var:A0> \\ \{ <var:Q> = <var:s> \land <var:i> = <nat:1> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:3> \} \end{eqnarray} The application of standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:3> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:Q> ; <var:A2> := <nat:1> ; <var:A2> := <var:A2> * <var:Q> ; <var:A2> := <var:A2> * <var:Q> ; <var:i> := <var:A2> ; <var:i> := <var:i> + <var:A1> ; <var:i> := <var:i> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Q> = <var:s> }} <def:poly> {{ <var:i> = <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:4> * <var:s> /\ <var:A2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:4> * <var:s> /\ <var:A2> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:4> * <var:s> /\ <var:A2> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:4> * <var:s> /\ <var:i> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:A0> = <nat:3> /\ <var:i> = <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:i> = <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 