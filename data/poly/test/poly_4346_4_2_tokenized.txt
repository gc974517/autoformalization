\begin{document} \begin{theorem} Define the following program as \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <var:e> * <var:f> ; <var:e> := <nat:2> + <var:e> * <var:f> ; <var:e> := <nat:4> + <var:e> * <var:f> \end{verbatim} Allow ( taking natural coefficients $ <var:n> $ ) that $ <var:f> = <var:n> $ before running the code , it holds that we see $ <var:e> = <nat:3> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this code is done with usual Hoare techniques . Moving on to the proceeding commands found in the set of commands , we have \begin{verbatim} { <var:f> = <var:n> } <var:e> := <nat:3> { <var:f> = <var:n> \land <var:e> = <nat:3> } { <var:f> = <var:n> \land <var:e> = <nat:3> } <var:e> := <var:e> * <var:f> { <var:f> = <var:n> \land <var:e> = <nat:3> \times <var:n> + } { <var:f> = <var:n> \land <var:e> = <nat:3> \times <var:n> + } <var:e> := <nat:2> + <var:e> * <var:f> { <var:f> = <var:n> \land <var:e> = <nat:3> \times <var:n> ^ <nat:2> + <nat:2> } \end{verbatim} Immediately after , we see \begin{verbatim} { <var:f> = <var:n> } <var:e> := <nat:3> { <var:f> = <var:n> \land <var:e> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:f> = <var:n> }} <var:e> := <nat:3> ; <var:e> := <var:e> * <var:f> ; <var:e> := <nat:2> + <var:e> * <var:f> ; <var:e> := <nat:4> + <var:e> * <var:f> {{ <var:e> = <nat:3> * <var:n> ^ <nat:3> + <nat:2> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:e> = <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:e> = <nat:3> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:e> = <nat:3> * <var:n> ^ <nat:3> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 