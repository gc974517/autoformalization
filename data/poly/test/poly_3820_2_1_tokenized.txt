\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:3> ; <var:v> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:a> = <var:Q> $ ahead of the execution of this series of commands it follows that we have $ <var:v> = <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:a> = <var:Q> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:a> = <var:Q> \land <var:t0> = <nat:3> \} \\ <var:v> := <var:t0> \\ \{ <var:a> = <var:Q> \land <var:v> = <nat:3> \} \end{eqnarray} Thus , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:v> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:a> = <var:Q> }} <def:poly> {{ <var:v> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:v> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 