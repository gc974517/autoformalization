\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:7> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:E> ; <var:f2> := <nat:5> ; <var:f2> := <var:f2> * <var:E> ; <var:f2> := <var:f2> * <var:E> ; <var:f3> := <nat:1> ; <var:f3> := <var:f3> * <var:E> ; <var:f3> := <var:f3> * <var:E> ; <var:f3> := <var:f3> * <var:E> ; <var:W> := <var:f3> ; <var:W> := <var:W> + <var:f2> ; <var:W> := <var:W> + <var:f1> ; <var:W> := <var:W> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Given $ <var:E> = <var:k> $ , given some natural coefficients $ <var:k> $ , ahead of interpreting this segment of code then $ <var:W> = <nat:1> \cdot <var:k> ^ <nat:3> + <nat:5> \cdot <var:k> ^ <nat:2> + <nat:8> \cdot <var:k> + <nat:7> $ after segment of code has terminated . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:E> = <var:k> \} \\ <var:f0> := <nat:7> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \} \\ <var:f1> := <nat:8> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> \} \\ <var:f1> := <var:f1> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \} \\ <var:f2> := <nat:5> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:f2> = <nat:5> \} \\ <var:f2> := <var:f2> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:f2> = <nat:5> * <var:k> \} \\ <var:f2> := <var:f2> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:f2> = <nat:5> * <var:k> ^ <nat:2> \} \\ <var:f3> := <nat:1> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:f2> = <nat:5> * <var:k> ^ <nat:2> \land <var:f3> = <nat:1> \} \\ <var:f3> := <var:f3> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:f2> = <nat:5> * <var:k> ^ <nat:2> \land <var:f3> = <nat:1> * <var:k> \} \\ <var:f3> := <var:f3> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:f2> = <nat:5> * <var:k> ^ <nat:2> \land <var:f3> = <nat:1> * <var:k> ^ <nat:2> \} \\ <var:f3> := <var:f3> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:f2> = <nat:5> * <var:k> ^ <nat:2> \land <var:f3> = <nat:1> * <var:k> ^ <nat:3> \} \\ <var:W> := <var:f3> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:f2> = <nat:5> * <var:k> ^ <nat:2> \land <var:W> = <nat:1> * <var:k> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:f2> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:f1> = <nat:8> * <var:k> \land <var:W> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:f1> ; \\ \{ <var:E> = <var:k> \land <var:f0> = <nat:7> \land <var:W> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:8> * <var:k> \} \\ <var:W> := <var:W> + <var:f0> \\ \{ <var:E> = <var:k> \land <var:W> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:8> * <var:k> + <nat:7> \} \end{eqnarray} Thus , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f0> := <nat:7> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:E> ; <var:f2> := <nat:5> ; <var:f2> := <var:f2> * <var:E> ; <var:f2> := <var:f2> * <var:E> ; <var:f3> := <nat:1> ; <var:f3> := <var:f3> * <var:E> ; <var:f3> := <var:f3> * <var:E> ; <var:f3> := <var:f3> * <var:E> ; <var:W> := <var:f3> ; <var:W> := <var:W> + <var:f2> ; <var:W> := <var:W> + <var:f1> ; <var:W> := <var:W> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:E> = <var:k> }} <def:poly> {{ <var:W> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:8> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:f2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:f2> = <nat:5> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:f2> = <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:f2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:f3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:f2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:f3> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:f2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:f3> = <nat:1> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:f2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:f3> = <nat:1> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:f2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:W> = <nat:1> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:8> * <var:k> /\ <var:W> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:f0> = <nat:7> /\ <var:W> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:W> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:8> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 