\begin{document} \begin{theorem} We define the following program in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:8> ; <var:b1> := <var:b1> * <var:n> ; <var:b3> := <nat:5> ; <var:b3> := <var:b3> * <var:n> ; <var:b3> := <var:b3> * <var:n> ; <var:b3> := <var:b3> * <var:n> ; <var:B> := <var:b3> ; <var:B> := <var:B> + <var:b1> ; <var:B> := <var:B> + <var:b0> \end{verbatim} Allow , for some positive integer coefficients $ <var:m> $ , $ <var:n> = <var:m> $ before the execution of our list of instructions it must be that $ <var:B> = <nat:5> \times <var:m> ^ <nat:3> + <nat:8> \times <var:m> + <nat:8> $ . \end{theorem} \begin{proof} Notice the following decorated list of commands . \begin{eqnarray} \{ <var:n> = <var:m> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \} \\ <var:b1> := <nat:8> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \land <var:b1> = <nat:8> \} \\ <var:b1> := <var:b1> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \land <var:b1> = <nat:8> * <var:m> \} \\ <var:b3> := <nat:5> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \land <var:b1> = <nat:8> * <var:m> \land <var:b3> = <nat:5> \} \\ <var:b3> := <var:b3> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \land <var:b1> = <nat:8> * <var:m> \land <var:b3> = <nat:5> * <var:m> \} \\ <var:b3> := <var:b3> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \land <var:b1> = <nat:8> * <var:m> \land <var:b3> = <nat:5> * <var:m> ^ <nat:2> \} \\ <var:b3> := <var:b3> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \land <var:b1> = <nat:8> * <var:m> \land <var:b3> = <nat:5> * <var:m> ^ <nat:3> \} \\ <var:B> := <var:b3> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \land <var:b1> = <nat:8> * <var:m> \land <var:B> = <nat:5> * <var:m> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:b1> ; \\ \{ <var:n> = <var:m> \land <var:b0> = <nat:8> \land <var:B> = <nat:5> * <var:m> ^ <nat:3> + <nat:8> * <var:m> \} \\ <var:B> := <var:B> + <var:b0> \\ \{ <var:n> = <var:m> \land <var:B> = <nat:5> * <var:m> ^ <nat:3> + <nat:8> * <var:m> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:n> = <var:m> }} <var:b0> := <nat:8> ; <var:b1> := <nat:8> ; <var:b1> := <var:b1> * <var:n> ; <var:b3> := <nat:5> ; <var:b3> := <var:b3> * <var:n> ; <var:b3> := <var:b3> * <var:n> ; <var:b3> := <var:b3> * <var:n> ; <var:B> := <var:b3> ; <var:B> := <var:B> + <var:b1> ; <var:B> := <var:B> + <var:b0> {{ <var:B> = <nat:5> * <var:m> ^ <nat:3> + <nat:8> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:8> * <var:m> /\ <var:b3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:8> * <var:m> /\ <var:b3> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:8> * <var:m> /\ <var:b3> = <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:8> * <var:m> /\ <var:b3> = <nat:5> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:8> * <var:m> /\ <var:B> = <nat:5> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:b0> = <nat:8> /\ <var:B> = <nat:5> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:B> = <nat:5> * <var:m> ^ <nat:3> + <nat:8> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 