\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:3> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:x> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:x> ; <var:n2> := <var:n2> * <var:x> ; <var:l> := <var:n2> ; <var:l> := <var:l> + <var:n1> ; <var:l> := <var:l> + <var:n0> \end{verbatim} Assuming $ <var:x> = <var:s> $ prior to interpreting our set of instructions it follows that $ <var:l> = <nat:2> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be shown by Hoare logic . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:x> = <var:s> \} & <var:n0> := <nat:3> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \} \\ \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \} & <var:n1> := <nat:8> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> \} \\ \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> \} & <var:n1> := <var:n1> * <var:x> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \} \\ \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \} & <var:n2> := <nat:2> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \land <var:n2> = <nat:2> \} \\ \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \land <var:n2> = <nat:2> \} & <var:n2> := <var:n2> * <var:x> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \land <var:n2> = <nat:2> * <var:s> \} \\ \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \land <var:n2> = <nat:2> * <var:s> \} & <var:n2> := <var:n2> * <var:x> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \land <var:n2> = <nat:2> * <var:s> ^ <nat:2> \} \\ \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \land <var:n2> = <nat:2> * <var:s> ^ <nat:2> \} & <var:l> := <var:n2> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \land <var:l> = <nat:2> * <var:s> ^ <nat:2> \} \\ \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:n1> = <nat:8> * <var:s> \land <var:l> = <nat:2> * <var:s> ^ <nat:2> \} & <var:l> := <var:l> + <var:n1> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \land <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:8> * <var:s> \} \end{tabular} Taking a look at the upcoming line of code in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:x> = <var:s> \} & <var:n0> := <nat:3> & \{ <var:x> = <var:s> \land <var:n0> = <nat:3> \} \end{tabular} This is known to be sound through the variable binding inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:x> = <var:s> }} <var:n0> := <nat:3> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:x> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:x> ; <var:n2> := <var:n2> * <var:x> ; <var:l> := <var:n2> ; <var:l> := <var:l> + <var:n1> ; <var:l> := <var:l> + <var:n0> {{ <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:8> * <var:s> /\ <var:n2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:8> * <var:s> /\ <var:n2> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:8> * <var:s> /\ <var:n2> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:8> * <var:s> /\ <var:l> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:n0> = <nat:3> /\ <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 