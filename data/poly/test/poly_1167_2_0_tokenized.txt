\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:4> ; <var:o> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume for all integers $ <var:p> $ $ <var:i> = <var:p> $ before evaluating our set of commands , it follows that $ <var:o> = <nat:4> $ when code segment has executed . \end{theorem} \begin{proof} The flow of logic for our program can be demonstrated by standard Hoare reasoning . Taking a look at the next lines in the code , \[ \begin{tabular} {rcl} \{ <var:i> = <var:p> \} & <var:q0> := <nat:4> & \{ <var:i> = <var:p> \land <var:q0> = <nat:4> \} \\ \{ <var:i> = <var:p> \land <var:q0> = <nat:4> \} & <var:o> := <var:q0& \{ <var:i> = <var:p> \land <var:o> = <nat:4> \} \end{tabular} This is known to be sound through the variable update rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:o> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:i> = <var:p> }} <def:poly> {{ <var:o> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:o> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 