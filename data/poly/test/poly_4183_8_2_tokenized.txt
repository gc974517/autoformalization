\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:A> := <nat:2> ; <var:A> := <nat:4> + <var:A> * <var:I> ; <var:A> := <nat:1> + <var:A> * <var:I> ; <var:A> := <nat:1> + <var:A> * <var:I> ; <var:A> := <nat:4> + <var:A> * <var:I> ; <var:A> := <nat:1> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Given that $ <var:I> = <var:w> $ given $ <var:w> \in \mathbb{Z}^+ $ before evaluating the program it follows that we have $ <var:A> = <nat:2> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> $ when set of commands is done . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:I> = <var:w> \} \\ <var:A> := <nat:2> ; \\ \{ <var:I> = <var:w> \land <var:A> = <nat:2> \} \\ <var:A> := <nat:4> + <var:A> * <var:I> ; \\ \{ <var:I> = <var:w> \land <var:A> = <nat:2> \times <var:w> + <nat:4> \} \\ <var:A> := <nat:1> + <var:A> * <var:I> ; \\ \{ <var:I> = <var:w> \land <var:A> = <nat:2> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:1> \} \\ <var:A> := <nat:1> + <var:A> * <var:I> ; \\ \{ <var:I> = <var:w> \land <var:A> = <nat:2> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:1> \} \\ <var:A> := <nat:4> + <var:A> * <var:I> ; \\ \{ <var:I> = <var:w> \land <var:A> = <nat:2> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} \\ <var:A> := <nat:1> + <var:A> * <var:I> ; \\ \{ <var:I> = <var:w> \land <var:A> = <nat:2> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:1> \} \\ <var:A> := <nat:3> + <var:A> * <var:I> ; \\ \{ <var:I> = <var:w> \land <var:A> = <nat:2> \times <var:w> ^ <nat:6> + <nat:4> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:3> \} \\ <var:A> := <nat:3> + <var:A> * <var:I> \\ \{ <var:I> = <var:w> \land <var:A> = <nat:2> \times <var:w> ^ <nat:7> + <nat:4> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:3> \} \end{eqnarray} As a result , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:2> ; <var:A> := <nat:4> + <var:A> * <var:I> ; <var:A> := <nat:1> + <var:A> * <var:I> ; <var:A> := <nat:1> + <var:A> * <var:I> ; <var:A> := <nat:4> + <var:A> * <var:I> ; <var:A> := <nat:1> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:I> = <var:w> }} <def:poly> {{ <var:A> = <nat:2> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:A> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:A> = <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:A> = <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:A> = <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:A> = <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:A> = <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:A> = <nat:2> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:A> = <nat:2> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 