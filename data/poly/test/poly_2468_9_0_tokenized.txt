\begin{document} \begin{theorem} Take a code : \begin{verbatim} <var:z0> := <nat:2> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:L> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:L> ; <var:z2> := <var:z2> * <var:L> ; <var:Y> := <var:z2> ; <var:Y> := <var:Y> + <var:z1> ; <var:Y> := <var:Y> + <var:z0> \end{verbatim} Given that $ <var:L> = <var:p> $ --- with some positive integers $ <var:p> $ --- prior to the execution of the set of instructions it follows that we have $ <var:Y> = <nat:1> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:L> = <var:p> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:L> = <var:p> \land <var:z0> = <nat:2> \} \\ <var:z1> := <nat:1> ; \\ \{ <var:L> = <var:p> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> \} \\ <var:z1> := <var:z1> * <var:L> ; \\ \{ <var:L> = <var:p> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> * <var:p> \} \\ <var:z2> := <nat:1> ; \\ \{ <var:L> = <var:p> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> * <var:p> \land <var:z2> = <nat:1> \} \\ <var:z2> := <var:z2> * <var:L> ; \\ \{ <var:L> = <var:p> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> * <var:p> \land <var:z2> = <nat:1> * <var:p> \} \\ <var:z2> := <var:z2> * <var:L> ; \\ \{ <var:L> = <var:p> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> * <var:p> \land <var:z2> = <nat:1> * <var:p> ^ <nat:2> \} \\ <var:Y> := <var:z2> ; \\ \{ <var:L> = <var:p> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> * <var:p> \land <var:Y> = <nat:1> * <var:p> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:z1> ; \\ \{ <var:L> = <var:p> \land <var:z0> = <nat:2> \land <var:Y> = <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> \} \\ <var:Y> := <var:Y> + <var:z0> \\ \{ <var:L> = <var:p> \land <var:Y> = <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> \} \end{eqnarray} Given the preceding argument , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:L> = <var:p> }} <var:z0> := <nat:2> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:L> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:L> ; <var:z2> := <var:z2> * <var:L> ; <var:Y> := <var:z2> ; <var:Y> := <var:Y> + <var:z1> ; <var:Y> := <var:Y> + <var:z0> {{ <var:Y> = <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> * <var:p> /\ <var:z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> * <var:p> /\ <var:z2> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> * <var:p> /\ <var:z2> = <nat:1> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> * <var:p> /\ <var:Y> = <nat:1> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:z0> = <nat:2> /\ <var:Y> = <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:p> /\ <var:Y> = <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 