\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:K1> := <var:V> ; <var:K2> := <var:K1> * <var:V> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:8> ; <var:K2> := <var:K2> * <nat:6> ; <var:N> := <var:K2> <var:N> := <var:N> + <var:K1> <var:N> := <var:N> + <var:K0> \end{verbatim} Given it to hold that $ <var:V> = <var:q> $ prior to executing the code , it follows that we have $ <var:N> = <nat:6> \cdot <var:q> ^ <nat:2> + <nat:8> \cdot <var:q> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our segment of code can be demonstrated with standard Hoare techniques . Now , we see the variable update statement letting $ <var:V> $ toward $ <var:K1>$ . This statement advances the condition $ \{ <var:V> = <var:q> \} $ into $ \{ <var:V> = <var:q> \land <var:K1> = <var:q> \} $ . This is guaranteed by the assignment law of usual Hoare reasoning . Looking at the proceeding line of code in the code , we have the assignment command \verb | <var:K2> := <var:K1> * <var:V> ; | . This code moves the condition $ \{ <var:V> = <var:q> \land <var:K1> = <var:q> \} $ into the condition $ \{ <var:V> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> \} $ . Taking another step toward the proceeding line of code in the set of instructions , the variable assignmet code \verb | <var:K0> := <nat:2> ; | . This statement advances the precondition $ \{ <var:V> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> \} $ as the postcondition $ \{ <var:V> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> \land <var:K0> = <nat:2> \} $ . This is rigorously given with the assignment rule defined in typical Hoare techniques . Immediately after , the variable assignmet command \verb | <var:K1> := <var:K1> * <nat:8> ; | . This statement transfers $ \{ <var:V> = <var:q> \land <var:K1> = <var:q> \land <var:K2> = <var:q> ^ <nat:2> \land <var:K0> = <nat:2> \} $ to the postcondition $ \{ <var:V> = <var:q> \land <var:K1> = <nat:8> \cdot <var:q> \land <var:K2> = <var:q> ^ <nat:2> \land <var:K0> = <nat:2> \} $ . Taking a look at the subsequent line of code in the program , we see the variable binding statement \verb | <var:K2> := <var:K2> * <nat:6> ; | . This code takes $ \{ <var:V> = <var:q> \land <var:K1> = <nat:8> \cdot <var:q> \land <var:K2> = <var:q> ^ <nat:2> \land <var:K0> = <nat:2> \} $ into $ \{ <var:V> = <var:q> \land <var:K1> = <nat:8> \cdot <var:q> \land <var:K2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:K0> = <nat:2> \} $ . Next , we see the variable update command \verb | <var:N> := <var:K2> | . This code forwards the condition $ \{ <var:V> = <var:q> \land <var:K1> = <nat:8> \cdot <var:q> \land <var:K2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:K0> = <nat:2> \} $ to the postcondition $ \{ <var:V> = <var:q> \land <var:K1> = <nat:8> \cdot <var:q> \land <var:K0> = <nat:2> \land <var:N> = <nat:6> \cdot <var:q> ^ <nat:2> \} $ . Taking another step toward the subsequent command in our set of instructions , the statement \verb | <var:N> := <var:N> + <var:K1> | . This takes $ \{ <var:V> = <var:q> \land <var:K1> = <nat:8> \cdot <var:q> \land <var:K0> = <nat:2> \land <var:N> = <nat:6> \cdot <var:q> ^ <nat:2> \} $ toward the postcondition $ \{ <var:V> = <var:q> \land <var:K0> = <nat:2> \land <var:N> = <nat:6> \cdot <var:q> ^ <nat:2> + <nat:8> \cdot <var:q> \} $ . Considering the subsequent statement in our set of commands , we have the assignment line giving $ <var:N> + <var:K0$ as $ <var:N>$ . This statement redefines $ \{ <var:V> = <var:q> \land <var:K0> = <nat:2> \land <var:N> = <nat:6> \cdot <var:q> ^ <nat:2> + <nat:8> \cdot <var:q> \} $ into $ \{ <var:V> = <var:q> \land <var:N> = <nat:6> \cdot <var:q> ^ <nat:2> + <nat:8> \cdot <var:q> + <nat:2> \} $ . This is guaranteed through the assignment law defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:V> = <var:q> }} <var:K1> := <var:V> ; <var:K2> := <var:K1> * <var:V> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:8> ; <var:K2> := <var:K2> * <nat:6> ; <var:N> := <var:K2> <var:N> := <var:N> + <var:K1> <var:N> := <var:N> + <var:K0> {{ <var:N> = <nat:6> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:K1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:K1> = <var:q> /\ <var:K2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:K1> = <var:q> /\ <var:K2> = <var:q> ^ <nat:2> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:K1> = <nat:8> * <var:q> /\ <var:K2> = <var:q> ^ <nat:2> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:K1> = <nat:8> * <var:q> /\ <var:K2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:K1> = <nat:8> * <var:q> /\ <var:K0> = <nat:2> /\ <var:N> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:K0> = <nat:2> /\ <var:N> = <nat:6> * <var:q> ^ <nat:2> + <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:N> = <nat:6> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 