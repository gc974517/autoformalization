\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:2> ; <var:z2> := <nat:4> ; <var:z2> := <var:z2> * <var:w> ; <var:z2> := <var:z2> * <var:w> ; <var:z3> := <nat:1> ; <var:z3> := <var:z3> * <var:w> ; <var:z3> := <var:z3> * <var:w> ; <var:z3> := <var:z3> * <var:w> ; <var:E> := <var:z3> ; <var:E> := <var:E> + <var:z2> ; <var:E> := <var:E> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Allow , given any natural coefficients $ <var:P> $ , that $ <var:w> = <var:P> $ before running the code segment then we have $ <var:E> = <nat:1> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:2> $ when list of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for the set of instructions is done with typical Hoare logic . Taking a look at the proceeding bits of codecontained in our list of commands , \begin{verbatim} { <var:w> = <var:P> } <var:z0> := <nat:2> { <var:w> = <var:P> \land <var:z0> = <nat:2> } { <var:w> = <var:P> \land <var:z0> = <nat:2> } <var:z2> := <nat:4> { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> } { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> } <var:z2> := <var:z2> * <var:w> { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> * <var:P> } { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> * <var:P> } <var:z2> := <var:z2> * <var:w> { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> * <var:P> ^ <nat:2> } { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> * <var:P> ^ <nat:2> } <var:z3> := <nat:1> { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> * <var:P> ^ <nat:2> \land <var:z3> = <nat:1> } { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> * <var:P> ^ <nat:2> \land <var:z3> = <nat:1> } <var:z3> := <var:z3> * <var:w> { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> * <var:P> ^ <nat:2> \land <var:z3> = <nat:1> * <var:P> } \end{verbatim} Immediately after , \begin{verbatim} { <var:w> = <var:P> } <var:z0> := <nat:2> { <var:w> = <var:P> \land <var:z0> = <nat:2> } { <var:w> = <var:P> \land <var:z0> = <nat:2> } <var:z2> := <nat:4> { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> } \end{verbatim} This is rigorously given through the environment update rule obtained from usual Hoare reasoning . Observing the following commands contained in the code segment , \begin{verbatim} { <var:w> = <var:P> } <var:z0> := <nat:2> { <var:w> = <var:P> \land <var:z0> = <nat:2> } { <var:w> = <var:P> \land <var:z0> = <nat:2> } <var:z2> := <nat:4> { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> } { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> } <var:z2> := <var:z2> * <var:w> { <var:w> = <var:P> \land <var:z0> = <nat:2> \land <var:z2> = <nat:4> * <var:P> } \end{verbatim} This is guaranteed by the variable update inference rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <def:poly> := <var:z0> := <nat:2> ; <var:z2> := <nat:4> ; <var:z2> := <var:z2> * <var:w> ; <var:z2> := <var:z2> * <var:w> ; <var:z3> := <nat:1> ; <var:z3> := <var:z3> * <var:w> ; <var:z3> := <var:z3> * <var:w> ; <var:z3> := <var:z3> * <var:w> ; <var:E> := <var:z3> ; <var:E> := <var:E> + <var:z2> ; <var:E> := <var:E> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:w> = <var:P> }} <def:poly> {{ <var:E> = <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:z2> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:z2> = <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:z2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:z3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:z2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:z2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:z2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:z2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:E> = <nat:1> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:z0> = <nat:2> /\ <var:E> = <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:E> = <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 