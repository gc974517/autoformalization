\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:4> ; <var:t> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:A> = <var:J> $ ahead of the evaluation of this list of commands , it must be that $ <var:t> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is given with Hoare techniques . Jumping to the next steps in our list of instructions , we see \verb | { <var:A> = <var:J> } <var:S0> := <nat:4> { <var:A> = <var:J> \land <var:S0> = <nat:4> } | and \verb | { <var:A> = <var:J> \land <var:S0> = <nat:4> } <var:t> := <var:S0{ <var:A> = <var:J> \land <var:t> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:4> ; <var:t> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:A> = <var:J> }} <def:poly> {{ <var:t> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:t> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 