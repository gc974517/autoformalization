\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:W> ; <var:a2> := <var:a1> * <var:W> ; <var:a0> := <nat:2> ; <var:a2> := <var:a2> * <nat:4> ; <var:M> := <var:a2> <var:M> := <var:M> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assume that we have $ <var:W> = <var:Q> $ prior to interpreting the list of instructions , it holds that we have $ <var:M> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be given with usual Hoare techniques . Moving forward to the next bit of code contained in our list of instructions , we see \begin{verbatim} { <var:W> = <var:Q> } <var:a1> := <var:W> { <var:W> = <var:Q> \land <var:a1> = <var:Q> } \end{verbatim} This is shown to be logically sound through the binding law defined in Hoare logic . Looking at the next pieces of code contained in our program , we see \begin{verbatim} { <var:W> = <var:Q> } <var:a1> := <var:W> { <var:W> = <var:Q> \land <var:a1> = <var:Q> } { <var:W> = <var:Q> \land <var:a1> = <var:Q> } <var:a2> := <var:a1> * <var:W> { <var:W> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> } { <var:W> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> } <var:a0> := <nat:2> { <var:W> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a0> = <nat:2> } { <var:W> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a0> = <nat:2> } <var:a2> := <var:a2> * <nat:4> { <var:W> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <nat:4> \cdot <var:Q> ^ <nat:2> \land <var:a0> = <nat:2> } { <var:W> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <nat:4> \cdot <var:Q> ^ <nat:2> \land <var:a0> = <nat:2> } <var:M> := <var:a2{ <var:W> = <var:Q> \land <var:a1> = <var:Q> \land <var:a0> = <nat:2> \land <var:M> = <nat:4> \cdot <var:Q> ^ <nat:2> } \end{verbatim} This is rigorously given with the assignment inference rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a1> := <var:W> ; <var:a2> := <var:a1> * <var:W> ; <var:a0> := <nat:2> ; <var:a2> := <var:a2> * <nat:4> ; <var:M> := <var:a2> <var:M> := <var:M> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:W> = <var:Q> }} <def:poly> {{ <var:M> = <nat:4> * <var:Q> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:a1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:a1> = <var:Q> /\ <var:a2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:a1> = <var:Q> /\ <var:a2> = <var:Q> ^ <nat:2> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:a1> = <var:Q> /\ <var:a2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:a1> = <var:Q> /\ <var:a0> = <nat:2> /\ <var:M> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:M> = <nat:4> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 