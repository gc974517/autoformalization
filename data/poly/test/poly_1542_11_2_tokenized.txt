\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x> := <nat:3> ; <var:x> := <nat:2> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> ; <var:x> := <nat:3> + <var:x> * <var:o> ; <var:x> := <nat:3> + <var:x> * <var:o> ; <var:x> := <nat:2> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> ; <var:x> := <nat:3> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:o> = <var:w> $ ahead of the evaluation of our code segment , it holds that we have $ <var:x> = <nat:3> \times <var:w> ^ <nat:10> + <nat:2> \times <var:w> ^ <nat:9> + <nat:4> \times <var:w> ^ <nat:8> + <nat:3> \times <var:w> ^ <nat:7> + <nat:3> \times <var:w> ^ <nat:6> + <nat:2> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:4> $ . \end{theorem} \begin{proof} Observe that the below decorated series of commands . \begin{eqnarray} \{ <var:o> = <var:w> \} \\ <var:x> := <nat:3> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \} \\ <var:x> := <nat:2> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> + <nat:2> \} \\ <var:x> := <nat:4> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} \\ <var:x> := <nat:3> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:3> \} \\ <var:x> := <nat:3> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:3> \} \\ <var:x> := <nat:2> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:2> \} \\ <var:x> := <nat:4> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} \\ <var:x> := <nat:4> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:5> + <nat:3> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:4> \} \\ <var:x> := <nat:3> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:4> \cdot <var:w> ^ <nat:6> + <nat:3> \cdot <var:w> ^ <nat:5> + <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:3> \} \\ <var:x> := <nat:4> + <var:x> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:9> + <nat:2> \cdot <var:w> ^ <nat:8> + <nat:4> \cdot <var:w> ^ <nat:7> + <nat:3> \cdot <var:w> ^ <nat:6> + <nat:3> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:4> \} \\ <var:x> := <nat:4> + <var:x> * <var:o> \\ \{ <var:o> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:10> + <nat:2> \cdot <var:w> ^ <nat:9> + <nat:4> \cdot <var:w> ^ <nat:8> + <nat:3> \cdot <var:w> ^ <nat:7> + <nat:3> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:4> \} \end{eqnarray} The application of usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:3> ; <var:x> := <nat:2> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> ; <var:x> := <nat:3> + <var:x> * <var:o> ; <var:x> := <nat:3> + <var:x> * <var:o> ; <var:x> := <nat:2> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> ; <var:x> := <nat:3> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> ; <var:x> := <nat:4> + <var:x> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:o> = <var:w> }} <def:poly> {{ <var:x> = <nat:3> * <var:w> ^ <nat:10> + <nat:2> * <var:w> ^ <nat:9> + <nat:4> * <var:w> ^ <nat:8> + <nat:3> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:9> + <nat:2> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:10> + <nat:2> * <var:w> ^ <nat:9> + <nat:4> * <var:w> ^ <nat:8> + <nat:3> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 