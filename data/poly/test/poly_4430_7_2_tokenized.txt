\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:s> := <nat:1> ; <var:s> := <nat:1> + <var:s> * <var:L> ; <var:s> := <var:s> * <var:L> ; <var:s> := <nat:3> + <var:s> * <var:L> ; <var:s> := <nat:1> + <var:s> * <var:L> ; <var:s> := <nat:4> + <var:s> * <var:L> ; <var:s> := <nat:2> + <var:s> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allow $ <var:L> = <var:C> $ --- given some $ <var:C> \in \mathbb{Z}^+ $ --- ahead of the execution of our segment of code , it must be that we have $ <var:s> = <nat:1> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:2> $ once program executes . \end{theorem} \begin{proof} Observe the following decorated list of instructions . \begin{eqnarray} \{ <var:L> = <var:C> \} \\ <var:s> := <nat:1> ; \\ \{ <var:L> = <var:C> \land <var:s> = <nat:1> \} \\ <var:s> := <nat:1> + <var:s> * <var:L> ; \\ \{ <var:L> = <var:C> \land <var:s> = <nat:1> * <var:C> + <nat:1> \} \\ <var:s> := <var:s> * <var:L> ; \\ \{ <var:L> = <var:C> \land <var:s> = <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + \} \\ <var:s> := <nat:3> + <var:s> * <var:L> ; \\ \{ <var:L> = <var:C> \land <var:s> = <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> \} \\ <var:s> := <nat:1> + <var:s> * <var:L> ; \\ \{ <var:L> = <var:C> \land <var:s> = <nat:1> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> + <nat:1> \} \end{eqnarray} Allowing interpreting our list of instructions returns : \begin{eqnarray} <var:s> := <nat:4> + <var:s> * <var:L> ; \\ \{ <var:L> = <var:C> \land <var:s> = <nat:1> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> \} \\ <var:s> := <nat:2> + <var:s> * <var:L> \\ \{ <var:L> = <var:C> \land <var:s> = <nat:1> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:2> \} \end{eqnarray} Using standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:1> ; <var:s> := <nat:1> + <var:s> * <var:L> ; <var:s> := <var:s> * <var:L> ; <var:s> := <nat:3> + <var:s> * <var:L> ; <var:s> := <nat:1> + <var:s> * <var:L> ; <var:s> := <nat:4> + <var:s> * <var:L> ; <var:s> := <nat:2> + <var:s> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:L> = <var:C> }} <def:poly> {{ <var:s> = <nat:1> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s> = <nat:1> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s> = <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s> = <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s> = <nat:1> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s> = <nat:1> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s> = <nat:1> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 