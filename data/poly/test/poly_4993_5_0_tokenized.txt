\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:4> ; <var:L1> := <var:L1> * <var:l> ; <var:Z> := <var:L1> ; <var:Z> := <var:Z> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:l> = <var:E> $ prior to interpreting the series of instructions , then we have $ <var:Z> = <nat:4> \cdot <var:E> + <nat:5> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:l> = <var:E> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:l> = <var:E> \land <var:L0> = <nat:5> \} \\ <var:L1> := <nat:4> ; \\ \{ <var:l> = <var:E> \land <var:L0> = <nat:5> \land <var:L1> = <nat:4> \} \\ <var:L1> := <var:L1> * <var:l> ; \\ \{ <var:l> = <var:E> \land <var:L0> = <nat:5> \land <var:L1> = <nat:4> * <var:E> \} \\ <var:Z> := <var:L1> ; \\ \{ <var:l> = <var:E> \land <var:L0> = <nat:5> \land <var:Z> = <nat:4> * <var:E> \} \\ <var:Z> := <var:Z> + <var:L0> \\ \{ <var:l> = <var:E> \land <var:Z> = <nat:4> * <var:E> + <nat:5> \} \end{eqnarray} Given the above , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:5> ; <var:L1> := <nat:4> ; <var:L1> := <var:L1> * <var:l> ; <var:Z> := <var:L1> ; <var:Z> := <var:Z> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:l> = <var:E> }} <def:poly> {{ <var:Z> = <nat:4> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:L0> = <nat:5> /\ <var:Z> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:Z> = <nat:4> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 