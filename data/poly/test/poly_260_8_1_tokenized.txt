\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} : \begin{verbatim} <var:k1> := <var:a> ; <var:k2> := <var:k1> * <var:a> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:9> ; <var:s> := <var:k2> <var:s> := <var:s> + <var:k1> <var:s> := <var:s> + <var:k0> \end{verbatim} Assume , for every $ <var:C> $ , that we have $ <var:a> = <var:C> $ ahead of evaluating the program , it follows that we see $ <var:s> = <nat:9> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be demonstrated using typical Hoare logic . Now , \begin{verbatim} { <var:a> = <var:C> } <var:k1> := <var:a> { <var:a> = <var:C> \land <var:k1> = <var:C> } { <var:a> = <var:C> \land <var:k1> = <var:C> } <var:k2> := <var:k1> * <var:a> { <var:a> = <var:C> \land <var:k1> = <var:C> \land <var:k2> = <var:C> ^ <nat:2> } { <var:a> = <var:C> \land <var:k1> = <var:C> \land <var:k2> = <var:C> ^ <nat:2> } <var:k0> := <nat:5> { <var:a> = <var:C> \land <var:k1> = <var:C> \land <var:k2> = <var:C> ^ <nat:2> \land <var:k0> = <nat:5> } \end{verbatim} Observing the proceeding piece of code contained in the list of commands , we see \begin{verbatim} { <var:a> = <var:C> } <var:k1> := <var:a> { <var:a> = <var:C> \land <var:k1> = <var:C> } \end{verbatim} Honing in on the subsequent statements in our series of instructions , \begin{verbatim} { <var:a> = <var:C> } <var:k1> := <var:a> { <var:a> = <var:C> \land <var:k1> = <var:C> } { <var:a> = <var:C> \land <var:k1> = <var:C> } <var:k2> := <var:k1> * <var:a> { <var:a> = <var:C> \land <var:k1> = <var:C> \land <var:k2> = <var:C> ^ <nat:2> } \end{verbatim} This is ensured through the variable binding scheme defined in typical Hoare techniques . Advancing to the next step , we see \begin{verbatim} { <var:a> = <var:C> } <var:k1> := <var:a> { <var:a> = <var:C> \land <var:k1> = <var:C> } { <var:a> = <var:C> \land <var:k1> = <var:C> } <var:k2> := <var:k1> * <var:a> { <var:a> = <var:C> \land <var:k1> = <var:C> \land <var:k2> = <var:C> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:a> = <var:C> }} <var:k1> := <var:a> ; <var:k2> := <var:k1> * <var:a> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:9> ; <var:s> := <var:k2> <var:s> := <var:s> + <var:k1> <var:s> := <var:s> + <var:k0> {{ <var:s> = <nat:9> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:k1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:k1> = <var:C> /\ <var:k2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:k1> = <var:C> /\ <var:k2> = <var:C> ^ <nat:2> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:k1> = <nat:3> * <var:C> /\ <var:k2> = <var:C> ^ <nat:2> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:k1> = <nat:3> * <var:C> /\ <var:k2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:k1> = <nat:3> * <var:C> /\ <var:k0> = <nat:5> /\ <var:s> = <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:k0> = <nat:5> /\ <var:s> = <nat:9> * <var:C> ^ <nat:2> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:s> = <nat:9> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 