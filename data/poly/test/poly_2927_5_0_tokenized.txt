\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:7> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:E> ; <var:s> := <var:g1> ; <var:s> := <var:s> + <var:g0> \end{verbatim} Allowing assuming some positive integer coefficients $ <var:D> $ $ <var:E> = <var:D> $ ahead of executing our segment of code , it must be that we have $ <var:s> = <nat:2> \times <var:D> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be demonstrated with the following decorated code . \begin{eqnarray} \{ <var:E> = <var:D> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:E> = <var:D> \land <var:g0> = <nat:7> \} \\ <var:g1> := <nat:2> ; \\ \{ <var:E> = <var:D> \land <var:g0> = <nat:7> \land <var:g1> = <nat:2> \} \\ <var:g1> := <var:g1> * <var:E> ; \\ \{ <var:E> = <var:D> \land <var:g0> = <nat:7> \land <var:g1> = <nat:2> * <var:D> \} \\ <var:s> := <var:g1> ; \\ \{ <var:E> = <var:D> \land <var:g0> = <nat:7> \land <var:s> = <nat:2> * <var:D> \} \\ <var:s> := <var:s> + <var:g0> \\ \{ <var:E> = <var:D> \land <var:s> = <nat:2> * <var:D> + <nat:7> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:E> = <var:D> }} <var:g0> := <nat:7> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:E> ; <var:s> := <var:g1> ; <var:s> := <var:s> + <var:g0> {{ <var:s> = <nat:2> * <var:D> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:g0> = <nat:7> /\ <var:s> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:s> = <nat:2> * <var:D> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 