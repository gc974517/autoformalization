\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:9> ; <var:F1> := <nat:9> ; <var:F1> := <var:F1> * <var:c> ; <var:F2> := <nat:6> ; <var:F2> := <var:F2> * <var:c> ; <var:F2> := <var:F2> * <var:c> ; <var:F3> := <nat:9> ; <var:F3> := <var:F3> * <var:c> ; <var:F3> := <var:F3> * <var:c> ; <var:F3> := <var:F3> * <var:c> ; <var:v> := <var:F3> ; <var:v> := <var:v> + <var:F2> ; <var:v> := <var:v> + <var:F1> ; <var:v> := <var:v> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:c> = <var:R> $ before the execution of this set of instructions , it must be that we see $ <var:v> = <nat:9> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:9> * <var:R> + <nat:9> $ after set of instructions has exited . \end{theorem} \begin{proof} The method of proof for the series of instructions can be demonstrated using Hoare logic . Further , \begin{eqnarray} \{ <var:c> = <var:R> \} \, <var:F0> := <nat:9> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \} \, <var:F1> := <nat:9> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \} \, <var:F1> := <var:F1> * <var:c> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \} \, <var:F2> := <nat:6> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \} \, <var:F2> := <var:F2> * <var:c> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> \} \, <var:F2> := <var:F2> * <var:c> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \} \, <var:F3> := <nat:9> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:F3> = <nat:9> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:F3> = <nat:9> \} \, <var:F3> := <var:F3> * <var:c> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:R> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:R> \} \, <var:F3> := <var:F3> * <var:c> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:R> ^ <nat:2> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:R> ^ <nat:2> \} \, <var:F3> := <var:F3> * <var:c> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:R> ^ <nat:3> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:F3> = <nat:9> \times <var:R> ^ <nat:3> \} \, <var:v> := <var:F3> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \land <var:F2> = <nat:6> \times <var:R> ^ <nat:2> \land <var:v> = <nat:9> \times <var:R> ^ <nat:3> \} \end{eqnarray} Focusing on the next commands found in the code segment , we have \begin{eqnarray} \{ <var:c> = <var:R> \} \, <var:F0> := <nat:9> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \} \, <var:F1> := <nat:9> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \} \\ \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \} \, <var:F1> := <var:F1> * <var:c> \, \{ <var:c> = <var:R> \land <var:F0> = <nat:9> \land <var:F1> = <nat:9> \times <var:R> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F0> := <nat:9> ; <var:F1> := <nat:9> ; <var:F1> := <var:F1> * <var:c> ; <var:F2> := <nat:6> ; <var:F2> := <var:F2> * <var:c> ; <var:F2> := <var:F2> * <var:c> ; <var:F3> := <nat:9> ; <var:F3> := <var:F3> * <var:c> ; <var:F3> := <var:F3> * <var:c> ; <var:F3> := <var:F3> * <var:c> ; <var:v> := <var:F3> ; <var:v> := <var:v> + <var:F2> ; <var:v> := <var:v> + <var:F1> ; <var:v> := <var:v> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:c> = <var:R> }} <def:poly> {{ <var:v> = <nat:9> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:9> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:F2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:F2> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:F2> = <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:F2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:F3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:F2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:F2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:F2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:F2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:v> = <nat:9> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:9> * <var:R> /\ <var:v> = <nat:9> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:F0> = <nat:9> /\ <var:v> = <nat:9> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:v> = <nat:9> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:9> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 