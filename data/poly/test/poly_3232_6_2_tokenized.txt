\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:3> ; <var:l> := <nat:2> + <var:l> * <var:s> ; <var:l> := <nat:4> + <var:l> * <var:s> ; <var:l> := <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:2> + <var:l> * <var:s> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Assuming it to hold that $ <var:s> = <var:m> $ prior to the evaluation of this code segment then we see $ <var:l> = <nat:3> \cdot <var:m> ^ <nat:5> + <nat:2> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this set of commands is evident with usual Hoare techniques . Advancing to the upcoming piece of code seen in the segment of code , we see \begin{verbatim} { <var:s> = <var:m> } <var:l> := <nat:3> { <var:s> = <var:m> \land <var:l> = <nat:3> } \end{verbatim} Honing in on the proceeding statements in the segment of code , we have \begin{verbatim} { <var:s> = <var:m> } <var:l> := <nat:3> { <var:s> = <var:m> \land <var:l> = <nat:3> } { <var:s> = <var:m> \land <var:l> = <nat:3> } <var:l> := <nat:2> + <var:l> * <var:s> { <var:s> = <var:m> \land <var:l> = <nat:3> \cdot <var:m> + <nat:2> } \end{verbatim} Immediately following , we see \begin{verbatim} { <var:s> = <var:m> } <var:l> := <nat:3> { <var:s> = <var:m> \land <var:l> = <nat:3> } { <var:s> = <var:m> \land <var:l> = <nat:3> } <var:l> := <nat:2> + <var:l> * <var:s> { <var:s> = <var:m> \land <var:l> = <nat:3> \cdot <var:m> + <nat:2> } \end{verbatim} Immediately after , we see \begin{verbatim} { <var:s> = <var:m> } <var:l> := <nat:3> { <var:s> = <var:m> \land <var:l> = <nat:3> } \end{verbatim} This is shown with the assignment scheme defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:3> ; <var:l> := <nat:2> + <var:l> * <var:s> ; <var:l> := <nat:4> + <var:l> * <var:s> ; <var:l> := <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:2> + <var:l> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:s> = <var:m> }} <def:poly> {{ <var:l> = <nat:3> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:l> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:l> = <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:l> = <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:l> = <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:l> = <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:l> = <nat:3> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 