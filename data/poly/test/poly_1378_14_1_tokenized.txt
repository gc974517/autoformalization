\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:P> ; <var:u2> := <var:u1> * <var:P> ; <var:u3> := <var:u2> * <var:P> ; <var:u4> := <var:u3> * <var:P> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:1> ; <var:u2> := <var:u2> * <nat:8> ; <var:u3> := <var:u3> * <nat:4> ; <var:u4> := <var:u4> * <nat:3> ; <var:E> := <var:u4> <var:E> := <var:E> + <var:u3> <var:E> := <var:E> + <var:u2> <var:E> := <var:E> + <var:u1> <var:E> := <var:E> + <var:u0> \end{verbatim} Given it to hold that $ <var:P> = <var:a> $ ( for any natural coefficients $ <var:a> $ ) before running the set of commands , then $ <var:E> = <nat:3> \cdot <var:a> ^ <nat:4> + <nat:4> \cdot <var:a> ^ <nat:3> + <nat:8> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:4> $ after list of commands exits . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be given by the below decorated program . \begin{eqnarray} \{ <var:P> = <var:a> \} \\ <var:u1> := <var:P> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <var:a> \} \\ <var:u2> := <var:u1> * <var:P> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <var:a> \land <var:u2> = <var:a> ^ <nat:2> \} \end{eqnarray} Allowing evaluating our code segment returns : \begin{eqnarray} <var:u3> := <var:u2> * <var:P> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <var:a> \land <var:u2> = <var:a> ^ <nat:2> \land <var:u3> = <var:a> ^ <nat:3> \} \\ <var:u4> := <var:u3> * <var:P> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <var:a> \land <var:u2> = <var:a> ^ <nat:2> \land <var:u3> = <var:a> ^ <nat:3> \land <var:u4> = <var:a> ^ <nat:4> \} \\ <var:u0> := <nat:4> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <var:a> \land <var:u2> = <var:a> ^ <nat:2> \land <var:u3> = <var:a> ^ <nat:3> \land <var:u4> = <var:a> ^ <nat:4> \land <var:u0> = <nat:4> \} \\ <var:u1> := <var:u1> * <nat:1> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <nat:1> * <var:a> \land <var:u2> = <var:a> ^ <nat:2> \land <var:u3> = <var:a> ^ <nat:3> \land <var:u4> = <var:a> ^ <nat:4> \land <var:u0> = <nat:4> \} \\ <var:u2> := <var:u2> * <nat:8> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <nat:1> * <var:a> \land <var:u2> = <nat:8> * <var:a> ^ <nat:2> \land <var:u3> = <var:a> ^ <nat:3> \land <var:u4> = <var:a> ^ <nat:4> \land <var:u0> = <nat:4> \} \\ <var:u3> := <var:u3> * <nat:4> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <nat:1> * <var:a> \land <var:u2> = <nat:8> * <var:a> ^ <nat:2> \land <var:u3> = <nat:4> * <var:a> ^ <nat:3> \land <var:u4> = <var:a> ^ <nat:4> \land <var:u0> = <nat:4> \} \\ <var:u4> := <var:u4> * <nat:3> ; \\ \{ <var:P> = <var:a> \land <var:u1> = <nat:1> * <var:a> \land <var:u2> = <nat:8> * <var:a> ^ <nat:2> \land <var:u3> = <nat:4> * <var:a> ^ <nat:3> \land <var:u4> = <nat:3> * <var:a> ^ <nat:4> \land <var:u0> = <nat:4> \} \end{eqnarray} Advancing interpreting this program gives us : \begin{eqnarray} <var:E> := <var:u4> \\ \{ <var:P> = <var:a> \land <var:u1> = <nat:1> * <var:a> \land <var:u2> = <nat:8> * <var:a> ^ <nat:2> \land <var:u3> = <nat:4> * <var:a> ^ <nat:3> \land <var:u0> = <nat:4> \land <var:E> = <nat:3> * <var:a> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:u3> \\ \{ <var:P> = <var:a> \land <var:u1> = <nat:1> * <var:a> \land <var:u2> = <nat:8> * <var:a> ^ <nat:2> \land <var:u0> = <nat:4> \land <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:u2> \\ \{ <var:P> = <var:a> \land <var:u1> = <nat:1> * <var:a> \land <var:u0> = <nat:4> \land <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:u1> \\ \{ <var:P> = <var:a> \land <var:u0> = <nat:4> \land <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:1> * <var:a> \} \\ <var:E> := <var:E> + <var:u0> \\ \{ <var:P> = <var:a> \land <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> \} \end{eqnarray} Utilizing Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:P> = <var:a> }} <var:u1> := <var:P> ; <var:u2> := <var:u1> * <var:P> ; <var:u3> := <var:u2> * <var:P> ; <var:u4> := <var:u3> * <var:P> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:1> ; <var:u2> := <var:u2> * <nat:8> ; <var:u3> := <var:u3> * <nat:4> ; <var:u4> := <var:u4> * <nat:3> ; <var:E> := <var:u4> <var:E> := <var:E> + <var:u3> <var:E> := <var:E> + <var:u2> <var:E> := <var:E> + <var:u1> <var:E> := <var:E> + <var:u0> {{ <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <var:a> /\ <var:u2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <var:a> /\ <var:u2> = <var:a> ^ <nat:2> /\ <var:u3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <var:a> /\ <var:u2> = <var:a> ^ <nat:2> /\ <var:u3> = <var:a> ^ <nat:3> /\ <var:u4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <var:a> /\ <var:u2> = <var:a> ^ <nat:2> /\ <var:u3> = <var:a> ^ <nat:3> /\ <var:u4> = <var:a> ^ <nat:4> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <nat:1> * <var:a> /\ <var:u2> = <var:a> ^ <nat:2> /\ <var:u3> = <var:a> ^ <nat:3> /\ <var:u4> = <var:a> ^ <nat:4> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <nat:1> * <var:a> /\ <var:u2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:u3> = <var:a> ^ <nat:3> /\ <var:u4> = <var:a> ^ <nat:4> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <nat:1> * <var:a> /\ <var:u2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:a> ^ <nat:3> /\ <var:u4> = <var:a> ^ <nat:4> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <nat:1> * <var:a> /\ <var:u2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:a> ^ <nat:3> /\ <var:u4> = <nat:3> * <var:a> ^ <nat:4> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <nat:1> * <var:a> /\ <var:u2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:a> ^ <nat:3> /\ <var:u0> = <nat:4> /\ <var:E> = <nat:3> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <nat:1> * <var:a> /\ <var:u2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:u0> = <nat:4> /\ <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u1> = <nat:1> * <var:a> /\ <var:u0> = <nat:4> /\ <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:u0> = <nat:4> /\ <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:E> = <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 