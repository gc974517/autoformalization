\begin{document} \begin{theorem} We define a set of instructions such that \begin{verbatim} <var:c> := <nat:3> ; <var:c> := <nat:1> + <var:c> * <var:j> ; <var:c> := <nat:2> + <var:c> * <var:j> ; <var:c> := <nat:3> + <var:c> * <var:j> ; <var:c> := <nat:1> + <var:c> * <var:j> ; <var:c> := <nat:1> + <var:c> * <var:j> ; <var:c> := <nat:4> + <var:c> * <var:j> ; <var:c> := <nat:2> + <var:c> * <var:j> ; <var:c> := <nat:3> + <var:c> * <var:j> ; <var:c> := <nat:2> + <var:c> * <var:j> ; <var:c> := <var:c> * <var:j> ; <var:c> := <nat:1> + <var:c> * <var:j> ; <var:c> := <nat:4> + <var:c> * <var:j> ; <var:c> := <nat:1> + <var:c> * <var:j> \end{verbatim} Given that we have $ <var:j> = <var:L> $ given all positive numbers $ <var:L> $ before evaluating the set of instructions , it follows that we have $ <var:c> = <nat:3> \times <var:L> ^ <nat:13> + <nat:1> \times <var:L> ^ <nat:12> + <nat:2> \times <var:L> ^ <nat:11> + <nat:3> \times <var:L> ^ <nat:10> + <nat:1> \times <var:L> ^ <nat:9> + <nat:1> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:7> + <nat:2> \times <var:L> ^ <nat:6> + <nat:3> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:1> $ when code segment executes . \end{theorem} \begin{proof} The argument for the series of instructions is accomplished through usual Hoare reasoning . Moving forward , we see \begin{eqnarray} \{ <var:j> = <var:L> \} \, <var:c> := <nat:3> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \} \, <var:c> := <nat:1> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> + <nat:1> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> + <nat:1> \} \, <var:c> := <nat:2> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> \} \, <var:c> := <nat:3> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:3> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:3> \} \, <var:c> := <nat:1> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:1> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:1> \} \, <var:c> := <nat:1> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:1> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:1> \} \, <var:c> := <nat:4> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:6> + <nat:1> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:4> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:6> + <nat:1> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:4> \} \, <var:c> := <nat:2> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:7> + <nat:1> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:2> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:7> + <nat:1> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:2> \} \, <var:c> := <nat:3> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:8> + <nat:1> \cdot <var:L> ^ <nat:7> + <nat:2> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:3> \} \end{eqnarray} This is guaranteed with the variable assignmet rule of Hoare techniques . Honing in on the proceeding steps in our series of instructions , \begin{eqnarray} \{ <var:j> = <var:L> \} \, <var:c> := <nat:3> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \} \, <var:c> := <nat:1> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> + <nat:1> \} \\ \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> + <nat:1> \} \, <var:c> := <nat:2> + <var:c> * <var:j> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> \} \end{eqnarray} This is sound by the variable assignmet law of typical Hoare logic . Moving forward to the subsequent piece of code contained in our code , \begin{eqnarray} \{ <var:j> = <var:L> \} \, <var:c> := <nat:3> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \} \end{eqnarray} This is deduced through the variable update inference rule given in usual Hoare logic . Further , \begin{eqnarray} \{ <var:j> = <var:L> \} \, <var:c> := <nat:3> \, \{ <var:j> = <var:L> \land <var:c> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:j> = <var:L> }} <var:c> := <nat:3> ; <var:c> := <nat:1> + <var:c> * <var:j> ; <var:c> := <nat:2> + <var:c> * <var:j> ; <var:c> := <nat:3> + <var:c> * <var:j> ; <var:c> := <nat:1> + <var:c> * <var:j> ; <var:c> := <nat:1> + <var:c> * <var:j> ; <var:c> := <nat:4> + <var:c> * <var:j> ; <var:c> := <nat:2> + <var:c> * <var:j> ; <var:c> := <nat:3> + <var:c> * <var:j> ; <var:c> := <nat:2> + <var:c> * <var:j> ; <var:c> := <var:c> * <var:j> ; <var:c> := <nat:1> + <var:c> * <var:j> ; <var:c> := <nat:4> + <var:c> * <var:j> ; <var:c> := <nat:1> + <var:c> * <var:j> {{ <var:c> = <nat:3> * <var:L> ^ <nat:13> + <nat:1> * <var:L> ^ <nat:12> + <nat:2> * <var:L> ^ <nat:11> + <nat:3> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:11> + <nat:1> * <var:L> ^ <nat:10> + <nat:2> * <var:L> ^ <nat:9> + <nat:3> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:12> + <nat:1> * <var:L> ^ <nat:11> + <nat:2> * <var:L> ^ <nat:10> + <nat:3> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:c> = <nat:3> * <var:L> ^ <nat:13> + <nat:1> * <var:L> ^ <nat:12> + <nat:2> * <var:L> ^ <nat:11> + <nat:3> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 