\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} : \begin{verbatim} <var:B1> := <var:x> ; <var:B2> := <var:B1> * <var:x> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:4> ; <var:B2> := <var:B2> * <nat:5> ; <var:m> := <var:B2> <var:m> := <var:m> + <var:B1> <var:m> := <var:m> + <var:B0> \end{verbatim} Assume it to be that $ <var:x> = <var:N> $ ahead of running this list of instructions , it holds that we see $ <var:m> = <nat:5> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:2> $ when code segment has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is evident through standard Hoare techniques . Considering the upcoming line contained in our program , we have the variable assignmet line giving $ <var:x> $ as $ <var:B1>$ . This code redefines the precondition $ \{ <var:x> = <var:N> \} $ as $ \{ <var:x> = <var:N> \land <var:B1> = <var:N> \} $ . Advancing on , the environment update code \verb | <var:B2> := <var:B1> * <var:x> ; | . This forwards the precondition $ \{ <var:x> = <var:N> \land <var:B1> = <var:N> \} $ into the postcondition $ \{ <var:x> = <var:N> \land <var:B1> = <var:N> \land <var:B2> = <var:N> ^ <nat:2> \} $ . Moving onward , we see the assignment statement \verb | <var:B0> := <nat:2> ; | . This advances the precondition $ \{ <var:x> = <var:N> \land <var:B1> = <var:N> \land <var:B2> = <var:N> ^ <nat:2> \} $ toward the condition $ \{ <var:x> = <var:N> \land <var:B1> = <var:N> \land <var:B2> = <var:N> ^ <nat:2> \land <var:B0> = <nat:2> \} $ . This is given through the assignment inference rule defined in usual Hoare logic . Paying attention to the following statement contained in the list of instructions , we have the environment update command defining $ <var:B1> * <nat:4> $ to $ <var:B1>$ . This statement moves $ \{ <var:x> = <var:N> \land <var:B1> = <var:N> \land <var:B2> = <var:N> ^ <nat:2> \land <var:B0> = <nat:2> \} $ into the postcondition $ \{ <var:x> = <var:N> \land <var:B1> = <nat:4> \times <var:N> \land <var:B2> = <var:N> ^ <nat:2> \land <var:B0> = <nat:2> \} $ . Moving forward to the proceeding bit of code contained in our set of commands , we have the assignment code yielding $ <var:B2> * <nat:5> $ to $ <var:B2>$ . This moves the precondition $ \{ <var:x> = <var:N> \land <var:B1> = <nat:4> \times <var:N> \land <var:B2> = <var:N> ^ <nat:2> \land <var:B0> = <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:N> \land <var:B1> = <nat:4> \times <var:N> \land <var:B2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:B0> = <nat:2> \} $ . Considering the subsequent bit of code found in the list of instructions , we have the command assigning $ <var:B2$ toward $ <var:m>$ . This forwards the precondition $ \{ <var:x> = <var:N> \land <var:B1> = <nat:4> \times <var:N> \land <var:B2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:B0> = <nat:2> \} $ to $ \{ <var:x> = <var:N> \land <var:B1> = <nat:4> \times <var:N> \land <var:B0> = <nat:2> \land <var:m> = <nat:5> \times <var:N> ^ <nat:2> \} $ . Moving on to the following bit of code found in the list of commands , the variable assignmet command \verb | <var:m> := <var:m> + <var:B1> | . This advances the precondition $ \{ <var:x> = <var:N> \land <var:B1> = <nat:4> \times <var:N> \land <var:B0> = <nat:2> \land <var:m> = <nat:5> \times <var:N> ^ <nat:2> \} $ as $ \{ <var:x> = <var:N> \land <var:B0> = <nat:2> \land <var:m> = <nat:5> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> \} $ . This is guaranteed with the assignment rule obtained from typical Hoare logic . Jumping to the next command seen in our segment of code , we have the binding line defining $ <var:m> + <var:B0$ as $ <var:m>$ . This command forwards the precondition $ \{ <var:x> = <var:N> \land <var:B0> = <nat:2> \land <var:m> = <nat:5> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> \} $ as $ \{ <var:x> = <var:N> \land <var:m> = <nat:5> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:x> = <var:N> }} <var:B1> := <var:x> ; <var:B2> := <var:B1> * <var:x> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:4> ; <var:B2> := <var:B2> * <nat:5> ; <var:m> := <var:B2> <var:m> := <var:m> + <var:B1> <var:m> := <var:m> + <var:B0> {{ <var:m> = <nat:5> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:B1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:B1> = <var:N> /\ <var:B2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:B1> = <var:N> /\ <var:B2> = <var:N> ^ <nat:2> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:B1> = <nat:4> * <var:N> /\ <var:B2> = <var:N> ^ <nat:2> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:B1> = <nat:4> * <var:N> /\ <var:B2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:B1> = <nat:4> * <var:N> /\ <var:B0> = <nat:2> /\ <var:m> = <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:B0> = <nat:2> /\ <var:m> = <nat:5> * <var:N> ^ <nat:2> + <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:m> = <nat:5> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 