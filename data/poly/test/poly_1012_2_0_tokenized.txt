\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:1> ; <var:Q> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:q> = <var:i> $ ahead of running the list of instructions , it holds that $ <var:Q> = <nat:1> $ after series of commands is done . \end{theorem} \begin{proof} The application of Hoare reasoning gives us : \begin{eqnarray} \{ <var:q> = <var:i> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:q> = <var:i> \land <var:x0> = <nat:1> \} \\ <var:Q> := <var:x0> \\ \{ <var:q> = <var:i> \land <var:Q> = <nat:1> \} \end{eqnarray} Thus , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:Q> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:q> = <var:i> }} <def:poly> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:i> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:i> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 