\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n> := <nat:2> ; <var:n> := <nat:2> + <var:n> * <var:c> ; <var:n> := <nat:1> + <var:n> * <var:c> ; <var:n> := <nat:3> + <var:n> * <var:c> ; <var:n> := <nat:2> + <var:n> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Allowing , given positive integer coefficients $ <var:a> $ , that $ <var:c> = <var:a> $ before executing our series of commands then we see $ <var:n> = <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> $ when code segment executes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is accomplished through Hoare reasoning . Advancing , we have the variable binding command \verb | <var:n> := <nat:2> ; | . This takes $ \{ <var:c> = <var:a> \} $ into $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \} $ . Going forward , the binding code \verb | <var:n> := <nat:2> + <var:n> * <var:c> ; | . This redefines $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \} $ into the condition $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \cdot <var:a> + <nat:2> \} $ . Shifting focus toward the proceeding bit of code contained in the program , we see the variable update command defining $ <nat:1> + <var:n> * <var:c> $ into $ <var:n>$ . This code moves $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \cdot <var:a> + <nat:2> \} $ into the condition $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:1> \} $ . This is ensured using the assignment law from usual Hoare techniques . Advancing on , the assignment code \verb | <var:n> := <nat:3> + <var:n> * <var:c> ; | . This command forwards the precondition $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:1> \} $ as the condition $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:3> \} $ . Moving forward to the following bit of code in our series of instructions , the variable binding command \verb | <var:n> := <nat:2> + <var:n> * <var:c> | . This line forwards the condition $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:3> \} $ to $ \{ <var:c> = <var:a> \land <var:n> = <nat:2> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:2> \} $ . This is sound with the assignment law defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:2> ; <var:n> := <nat:2> + <var:n> * <var:c> ; <var:n> := <nat:1> + <var:n> * <var:c> ; <var:n> := <nat:3> + <var:n> * <var:c> ; <var:n> := <nat:2> + <var:n> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:c> = <var:a> }} <def:poly> {{ <var:n> = <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:a> /\ <var:n> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:a> /\ <var:n> = <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:a> /\ <var:n> = <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:a> /\ <var:n> = <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:a> /\ <var:n> = <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 