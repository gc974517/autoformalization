\begin{document} \begin{theorem} We define a segment of code as \begin{verbatim} <var:s1> := <var:I> ; <var:s2> := <var:s1> * <var:I> ; <var:s0> := <nat:9> ; <var:s1> := <var:s1> * <nat:9> ; <var:s2> := <var:s2> * <nat:7> ; <var:i> := <var:s2> <var:i> := <var:i> + <var:s1> <var:i> := <var:i> + <var:s0> \end{verbatim} Given taking $ <var:w> $ it to be that $ <var:I> = <var:w> $ before interpreting the series of commands , it follows that we see $ <var:i> = <nat:7> \cdot <var:w> ^ <nat:2> + <nat:9> \cdot <var:w> + <nat:9> $ after code exits . \end{theorem} \begin{proof} The course of logic for the list of instructions is given using standard Hoare logic . Immediately after , the line letting $ <var:I> $ toward $ <var:s1>$ . This moves the precondition $ \{ <var:I> = <var:w> \} $ to the condition $ \{ <var:I> = <var:w> \land <var:s1> = <var:w> \} $ . Moving forward , the command \verb | <var:s2> := <var:s1> * <var:I> ; | . This redefines the condition $ \{ <var:I> = <var:w> \land <var:s1> = <var:w> \} $ as the postcondition $ \{ <var:I> = <var:w> \land <var:s1> = <var:w> \land <var:s2> = <var:w> ^ <nat:2> \} $ . This is shown by the assignment rule in usual Hoare techniques . Immediately following , we have the assignment code letting $ <nat:9> $ into $ <var:s0>$ . This command forwards the precondition $ \{ <var:I> = <var:w> \land <var:s1> = <var:w> \land <var:s2> = <var:w> ^ <nat:2> \} $ as the postcondition $ \{ <var:I> = <var:w> \land <var:s1> = <var:w> \land <var:s2> = <var:w> ^ <nat:2> \land <var:s0> = <nat:9> \} $ . This is shown to be logically sound with the assignment rule found in usual Hoare reasoning . Moving forward to the following step contained in the set of commands , we see the variable binding code \verb | <var:s1> := <var:s1> * <nat:9> ; | . This command moves the precondition $ \{ <var:I> = <var:w> \land <var:s1> = <var:w> \land <var:s2> = <var:w> ^ <nat:2> \land <var:s0> = <nat:9> \} $ into the postcondition $ \{ <var:I> = <var:w> \land <var:s1> = <nat:9> * <var:w> \land <var:s2> = <var:w> ^ <nat:2> \land <var:s0> = <nat:9> \} $ . Going to the next step , we see the binding line \verb | <var:s2> := <var:s2> * <nat:7> ; | . This line transfers the precondition $ \{ <var:I> = <var:w> \land <var:s1> = <nat:9> * <var:w> \land <var:s2> = <var:w> ^ <nat:2> \land <var:s0> = <nat:9> \} $ into the condition $ \{ <var:I> = <var:w> \land <var:s1> = <nat:9> * <var:w> \land <var:s2> = <nat:7> * <var:w> ^ <nat:2> \land <var:s0> = <nat:9> \} $ . This is shown by the assignment law given in standard Hoare reasoning . Shifting focus toward the upcoming line contained in the code , we see the environment update code binding $ <var:s2$ toward $ <var:i>$ . This takes $ \{ <var:I> = <var:w> \land <var:s1> = <nat:9> * <var:w> \land <var:s2> = <nat:7> * <var:w> ^ <nat:2> \land <var:s0> = <nat:9> \} $ toward $ \{ <var:I> = <var:w> \land <var:s1> = <nat:9> * <var:w> \land <var:s0> = <nat:9> \land <var:i> = <nat:7> * <var:w> ^ <nat:2> \} $ . This is rigorously given by the assignment rule found in Hoare logic . Advancing to the upcoming piece of code seen in the program , the assignment command yielding $ <var:i> + <var:s1$ toward $ <var:i>$ . This takes the condition $ \{ <var:I> = <var:w> \land <var:s1> = <nat:9> * <var:w> \land <var:s0> = <nat:9> \land <var:i> = <nat:7> * <var:w> ^ <nat:2> \} $ into the condition $ \{ <var:I> = <var:w> \land <var:s0> = <nat:9> \land <var:i> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> \} $ . Looking at the proceeding command seen in our list of commands , we have the variable assignmet line letting $ <var:i> + <var:s0$ into $ <var:i>$ . This advances the precondition $ \{ <var:I> = <var:w> \land <var:s0> = <nat:9> \land <var:i> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> \} $ into $ \{ <var:I> = <var:w> \land <var:i> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:9> \} $ . This is shown using the assignment scheme of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:I> = <var:w> }} <var:s1> := <var:I> ; <var:s2> := <var:s1> * <var:I> ; <var:s0> := <nat:9> ; <var:s1> := <var:s1> * <nat:9> ; <var:s2> := <var:s2> * <nat:7> ; <var:i> := <var:s2> <var:i> := <var:i> + <var:s1> <var:i> := <var:i> + <var:s0> {{ <var:i> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:s1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:s1> = <var:w> /\ <var:s2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:s1> = <var:w> /\ <var:s2> = <var:w> ^ <nat:2> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:s1> = <nat:9> * <var:w> /\ <var:s2> = <var:w> ^ <nat:2> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:s1> = <nat:9> * <var:w> /\ <var:s2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:s1> = <nat:9> * <var:w> /\ <var:s0> = <nat:9> /\ <var:i> = <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:s0> = <nat:9> /\ <var:i> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:i> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 