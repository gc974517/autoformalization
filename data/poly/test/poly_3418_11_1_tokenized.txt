\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:l> ; <var:Z2> := <var:Z1> * <var:l> ; <var:Z3> := <var:Z2> * <var:l> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:Z2> := <var:Z2> * <nat:8> ; <var:Z3> := <var:Z3> * <nat:4> ; <var:G> := <var:Z3> <var:G> := <var:G> + <var:Z2> <var:G> := <var:G> + <var:Z1> <var:G> := <var:G> + <var:Z0> \end{verbatim} Allow it to hold that $ <var:l> = <var:k> $ before evaluating our set of commands , it must be that $ <var:G> = <nat:4> \times <var:k> ^ <nat:3> + <nat:8> \times <var:k> ^ <nat:2> + <nat:7> \times <var:k> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning produces : \begin{eqnarray} \{ <var:l> = <var:k> \} \\ <var:Z1> := <var:l> ; \\ \{ <var:l> = <var:k> \land <var:Z1> = <var:k> \} \\ <var:Z2> := <var:Z1> * <var:l> ; \\ \{ <var:l> = <var:k> \land <var:Z1> = <var:k> \land <var:Z2> = <var:k> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:l> ; \\ \{ <var:l> = <var:k> \land <var:Z1> = <var:k> \land <var:Z2> = <var:k> ^ <nat:2> \land <var:Z3> = <var:k> ^ <nat:3> \} \\ <var:Z0> := <nat:1> ; \\ \{ <var:l> = <var:k> \land <var:Z1> = <var:k> \land <var:Z2> = <var:k> ^ <nat:2> \land <var:Z3> = <var:k> ^ <nat:3> \land <var:Z0> = <nat:1> \} \\ <var:Z1> := <var:Z1> * <nat:7> ; \\ \{ <var:l> = <var:k> \land <var:Z1> = <nat:7> \cdot <var:k> \land <var:Z2> = <var:k> ^ <nat:2> \land <var:Z3> = <var:k> ^ <nat:3> \land <var:Z0> = <nat:1> \} \\ <var:Z2> := <var:Z2> * <nat:8> ; \\ \{ <var:l> = <var:k> \land <var:Z1> = <nat:7> \cdot <var:k> \land <var:Z2> = <nat:8> \cdot <var:k> ^ <nat:2> \land <var:Z3> = <var:k> ^ <nat:3> \land <var:Z0> = <nat:1> \} \\ <var:Z3> := <var:Z3> * <nat:4> ; \\ \{ <var:l> = <var:k> \land <var:Z1> = <nat:7> \cdot <var:k> \land <var:Z2> = <nat:8> \cdot <var:k> ^ <nat:2> \land <var:Z3> = <nat:4> \cdot <var:k> ^ <nat:3> \land <var:Z0> = <nat:1> \} \\ <var:G> := <var:Z3> \\ \{ <var:l> = <var:k> \land <var:Z1> = <nat:7> \cdot <var:k> \land <var:Z2> = <nat:8> \cdot <var:k> ^ <nat:2> \land <var:Z0> = <nat:1> \land <var:G> = <nat:4> \cdot <var:k> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:Z2> \\ \{ <var:l> = <var:k> \land <var:Z1> = <nat:7> \cdot <var:k> \land <var:Z0> = <nat:1> \land <var:G> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:8> \cdot <var:k> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:Z1> \\ \{ <var:l> = <var:k> \land <var:Z0> = <nat:1> \land <var:G> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:8> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> \} \\ <var:G> := <var:G> + <var:Z0> \\ \{ <var:l> = <var:k> \land <var:G> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:8> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> + <nat:1> \} \end{eqnarray} Thusly , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:l> = <var:k> }} <var:Z1> := <var:l> ; <var:Z2> := <var:Z1> * <var:l> ; <var:Z3> := <var:Z2> * <var:l> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:Z2> := <var:Z2> * <nat:8> ; <var:Z3> := <var:Z3> * <nat:4> ; <var:G> := <var:Z3> <var:G> := <var:G> + <var:Z2> <var:G> := <var:G> + <var:Z1> <var:G> := <var:G> + <var:Z0> {{ <var:G> = <nat:4> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <var:k> /\ <var:Z2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <var:k> /\ <var:Z2> = <var:k> ^ <nat:2> /\ <var:Z3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <var:k> /\ <var:Z2> = <var:k> ^ <nat:2> /\ <var:Z3> = <var:k> ^ <nat:3> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <nat:7> * <var:k> /\ <var:Z2> = <var:k> ^ <nat:2> /\ <var:Z3> = <var:k> ^ <nat:3> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <nat:7> * <var:k> /\ <var:Z2> = <nat:8> * <var:k> ^ <nat:2> /\ <var:Z3> = <var:k> ^ <nat:3> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <nat:7> * <var:k> /\ <var:Z2> = <nat:8> * <var:k> ^ <nat:2> /\ <var:Z3> = <nat:4> * <var:k> ^ <nat:3> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <nat:7> * <var:k> /\ <var:Z2> = <nat:8> * <var:k> ^ <nat:2> /\ <var:Z0> = <nat:1> /\ <var:G> = <nat:4> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z1> = <nat:7> * <var:k> /\ <var:Z0> = <nat:1> /\ <var:G> = <nat:4> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:Z0> = <nat:1> /\ <var:G> = <nat:4> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:G> = <nat:4> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 