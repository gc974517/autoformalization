\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:n> ; <var:Y2> := <var:Y1> * <var:n> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:8> ; <var:Y2> := <var:Y2> * <nat:3> ; <var:k> := <var:Y2> <var:k> := <var:k> + <var:Y1> <var:k> := <var:k> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Assuming it to be that $ <var:n> = <var:T> $ before running the program , then we have $ <var:k> = <nat:3> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:1> $ after segment of code has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:T> \} \\ <var:Y1> := <var:n> ; \\ \{ <var:n> = <var:T> \land <var:Y1> = <var:T> \} \\ <var:Y2> := <var:Y1> * <var:n> ; \\ \{ <var:n> = <var:T> \land <var:Y1> = <var:T> \land <var:Y2> = <var:T> ^ <nat:2> \} \\ <var:Y0> := <nat:1> ; \\ \{ <var:n> = <var:T> \land <var:Y1> = <var:T> \land <var:Y2> = <var:T> ^ <nat:2> \land <var:Y0> = <nat:1> \} \\ <var:Y1> := <var:Y1> * <nat:8> ; \\ \{ <var:n> = <var:T> \land <var:Y1> = <nat:8> \times <var:T> \land <var:Y2> = <var:T> ^ <nat:2> \land <var:Y0> = <nat:1> \} \\ <var:Y2> := <var:Y2> * <nat:3> ; \\ \{ <var:n> = <var:T> \land <var:Y1> = <nat:8> \times <var:T> \land <var:Y2> = <nat:3> \times <var:T> ^ <nat:2> \land <var:Y0> = <nat:1> \} \\ <var:k> := <var:Y2> \\ \{ <var:n> = <var:T> \land <var:Y1> = <nat:8> \times <var:T> \land <var:Y0> = <nat:1> \land <var:k> = <nat:3> \times <var:T> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:Y1> \\ \{ <var:n> = <var:T> \land <var:Y0> = <nat:1> \land <var:k> = <nat:3> \times <var:T> ^ <nat:2> + <nat:8> \times <var:T> \} \\ <var:k> := <var:k> + <var:Y0> \\ \{ <var:n> = <var:T> \land <var:k> = <nat:3> \times <var:T> ^ <nat:2> + <nat:8> \times <var:T> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y1> := <var:n> ; <var:Y2> := <var:Y1> * <var:n> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:8> ; <var:Y2> := <var:Y2> * <nat:3> ; <var:k> := <var:Y2> <var:k> := <var:k> + <var:Y1> <var:k> := <var:k> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:n> = <var:T> }} <def:poly> {{ <var:k> = <nat:3> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:Y1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:Y1> = <var:T> /\ <var:Y2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:Y1> = <var:T> /\ <var:Y2> = <var:T> ^ <nat:2> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:Y1> = <nat:8> * <var:T> /\ <var:Y2> = <var:T> ^ <nat:2> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:Y1> = <nat:8> * <var:T> /\ <var:Y2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:Y1> = <nat:8> * <var:T> /\ <var:Y0> = <nat:1> /\ <var:k> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:Y0> = <nat:1> /\ <var:k> = <nat:3> * <var:T> ^ <nat:2> + <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:k> = <nat:3> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 