\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O1> := <var:A> ; <var:O2> := <var:O1> * <var:A> ; <var:O3> := <var:O2> * <var:A> ; <var:O4> := <var:O3> * <var:A> ; <var:O0> := <nat:8> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:3> ; <var:O3> := <var:O3> * <nat:3> ; <var:O4> := <var:O4> * <nat:4> ; <var:V> := <var:O4> <var:V> := <var:V> + <var:O3> <var:V> := <var:V> + <var:O2> <var:V> := <var:V> + <var:O1> <var:V> := <var:V> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:A> = <var:S> $ given whole numbers $ <var:S> $ prior to interpreting our segment of code , then we see $ <var:V> = <nat:4> \cdot <var:S> ^ <nat:4> + <nat:3> \cdot <var:S> ^ <nat:3> + <nat:3> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> + <nat:8> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques yields : \begin{eqnarray} \{ <var:A> = <var:S> \} \\ <var:O1> := <var:A> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <var:S> \} \\ <var:O2> := <var:O1> * <var:A> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <var:S> \land <var:O2> = <var:S> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:A> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <var:S> \land <var:O2> = <var:S> ^ <nat:2> \land <var:O3> = <var:S> ^ <nat:3> \} \\ <var:O4> := <var:O3> * <var:A> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <var:S> \land <var:O2> = <var:S> ^ <nat:2> \land <var:O3> = <var:S> ^ <nat:3> \land <var:O4> = <var:S> ^ <nat:4> \} \\ <var:O0> := <nat:8> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <var:S> \land <var:O2> = <var:S> ^ <nat:2> \land <var:O3> = <var:S> ^ <nat:3> \land <var:O4> = <var:S> ^ <nat:4> \land <var:O0> = <nat:8> \} \\ <var:O1> := <var:O1> * <nat:3> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <var:S> ^ <nat:2> \land <var:O3> = <var:S> ^ <nat:3> \land <var:O4> = <var:S> ^ <nat:4> \land <var:O0> = <nat:8> \} \\ <var:O2> := <var:O2> * <nat:3> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:O3> = <var:S> ^ <nat:3> \land <var:O4> = <var:S> ^ <nat:4> \land <var:O0> = <nat:8> \} \\ <var:O3> := <var:O3> * <nat:3> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:O3> = <nat:3> \times <var:S> ^ <nat:3> \land <var:O4> = <var:S> ^ <nat:4> \land <var:O0> = <nat:8> \} \\ <var:O4> := <var:O4> * <nat:4> ; \\ \{ <var:A> = <var:S> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:O3> = <nat:3> \times <var:S> ^ <nat:3> \land <var:O4> = <nat:4> \times <var:S> ^ <nat:4> \land <var:O0> = <nat:8> \} \\ <var:V> := <var:O4> \\ \{ <var:A> = <var:S> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:O3> = <nat:3> \times <var:S> ^ <nat:3> \land <var:O0> = <nat:8> \land <var:V> = <nat:4> \times <var:S> ^ <nat:4> \} \\ <var:V> := <var:V> + <var:O3> \\ \{ <var:A> = <var:S> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:O0> = <nat:8> \land <var:V> = <nat:4> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:O2> \\ \{ <var:A> = <var:S> \land <var:O1> = <nat:3> \times <var:S> \land <var:O0> = <nat:8> \land <var:V> = <nat:4> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:O1> \\ \{ <var:A> = <var:S> \land <var:O0> = <nat:8> \land <var:V> = <nat:4> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> \} \\ <var:V> := <var:V> + <var:O0> \\ \{ <var:A> = <var:S> \land <var:V> = <nat:4> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:8> \} \end{eqnarray} Thusly , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <var:O4> : string := " <var:O4> " . Definition <def:poly> := <var:O1> := <var:A> ; <var:O2> := <var:O1> * <var:A> ; <var:O3> := <var:O2> * <var:A> ; <var:O4> := <var:O3> * <var:A> ; <var:O0> := <nat:8> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:3> ; <var:O3> := <var:O3> * <nat:3> ; <var:O4> := <var:O4> * <nat:4> ; <var:V> := <var:O4> <var:V> := <var:V> + <var:O3> <var:V> := <var:V> + <var:O2> <var:V> := <var:V> + <var:O1> <var:V> := <var:V> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:A> = <var:S> }} <def:poly> {{ <var:V> = <nat:4> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <var:S> /\ <var:O2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <var:S> /\ <var:O2> = <var:S> ^ <nat:2> /\ <var:O3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <var:S> /\ <var:O2> = <var:S> ^ <nat:2> /\ <var:O3> = <var:S> ^ <nat:3> /\ <var:O4> = <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <var:S> /\ <var:O2> = <var:S> ^ <nat:2> /\ <var:O3> = <var:S> ^ <nat:3> /\ <var:O4> = <var:S> ^ <nat:4> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <var:S> ^ <nat:2> /\ <var:O3> = <var:S> ^ <nat:3> /\ <var:O4> = <var:S> ^ <nat:4> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:O3> = <var:S> ^ <nat:3> /\ <var:O4> = <var:S> ^ <nat:4> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:S> ^ <nat:3> /\ <var:O4> = <var:S> ^ <nat:4> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:S> ^ <nat:3> /\ <var:O4> = <nat:4> * <var:S> ^ <nat:4> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:S> ^ <nat:3> /\ <var:O0> = <nat:8> /\ <var:V> = <nat:4> * <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:O0> = <nat:8> /\ <var:V> = <nat:4> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O0> = <nat:8> /\ <var:V> = <nat:4> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:O0> = <nat:8> /\ <var:V> = <nat:4> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:V> = <nat:4> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 