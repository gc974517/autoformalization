\begin{document} \begin{theorem} We define the following code segment : \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:3> + <var:e> * <var:o> ; <var:e> := <nat:3> + <var:e> * <var:o> ; <var:e> := <nat:1> + <var:e> * <var:o> ; <var:e> := <nat:4> + <var:e> * <var:o> ; <var:e> := <nat:2> + <var:e> * <var:o> ; <var:e> := <nat:2> + <var:e> * <var:o> ; <var:e> := <nat:1> + <var:e> * <var:o> \end{verbatim} Allowing $ <var:o> = <var:z> $ given every positive numbers $ <var:z> $ ahead of running our program then we have $ <var:e> = <nat:3> \cdot <var:z> ^ <nat:7> + <nat:3> \cdot <var:z> ^ <nat:6> + <nat:3> \cdot <var:z> ^ <nat:5> + <nat:1> \cdot <var:z> ^ <nat:4> + <nat:4> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:1> $ after code segment is done . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be seen using Hoare logic . Focusing on the upcoming command contained in our set of instructions , we have the assignment code letting $ <nat:3> $ into $ <var:e>$ . This statement forwards $ \{ <var:o> = <var:z> \} $ into the postcondition $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \} $ . This is known to be sound with the assignment law found in usual Hoare reasoning . Considering the upcoming line contained in the program , we have the assignment command \verb | <var:e> := <nat:3> + <var:e> * <var:o> ; | . This command moves $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \} $ into the postcondition $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> + <nat:3> \} $ . Looking at the upcoming command found in our code segment , the binding code \verb | <var:e> := <nat:3> + <var:e> * <var:o> ; | . This code advances the condition $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> + <nat:3> \} $ as $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:3> \} $ . Going to the next step , we see the environment update line \verb | <var:e> := <nat:1> + <var:e> * <var:o> ; | . This takes $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:3> \} $ into $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:1> \} $ . Shifting focus toward the upcoming step seen in the set of instructions , we see the variable binding code letting $ <nat:4> + <var:e> * <var:o> $ into $ <var:e>$ . This command takes the condition $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:1> \} $ into $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:4> \} $ . Moving onward , the variable assignmet statement \verb | <var:e> := <nat:2> + <var:e> * <var:o> ; | . This command transfers $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:4> \} $ toward the condition $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:2> \} $ . Jumping to the subsequent statement in the set of instructions , the binding statement defining $ <nat:2> + <var:e> * <var:o> $ into $ <var:e>$ . This code transfers the condition $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:2> \} $ into $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:6> + <nat:3> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:2> \} $ . This is deduced using the assignment scheme in standard Hoare reasoning . Going forward , we see the environment update code letting $ <nat:1> + <var:e> * <var:o$ into $ <var:e>$ . This advances the condition $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:6> + <nat:3> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:2> \} $ to the postcondition $ \{ <var:o> = <var:z> \land <var:e> = <nat:3> \cdot <var:z> ^ <nat:7> + <nat:3> \cdot <var:z> ^ <nat:6> + <nat:3> \cdot <var:z> ^ <nat:5> + <nat:1> \cdot <var:z> ^ <nat:4> + <nat:4> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:o> = <var:z> }} <var:e> := <nat:3> ; <var:e> := <nat:3> + <var:e> * <var:o> ; <var:e> := <nat:3> + <var:e> * <var:o> ; <var:e> := <nat:1> + <var:e> * <var:o> ; <var:e> := <nat:4> + <var:e> * <var:o> ; <var:e> := <nat:2> + <var:e> * <var:o> ; <var:e> := <nat:2> + <var:e> * <var:o> ; <var:e> := <nat:1> + <var:e> * <var:o> {{ <var:e> = <nat:3> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:e> = <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:e> = <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:e> = <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:e> = <nat:3> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:e> = <nat:3> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:e> = <nat:3> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:e> = <nat:3> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 