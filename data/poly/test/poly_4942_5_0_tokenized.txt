\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:3> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:I> ; <var:V> := <var:W1> ; <var:V> := <var:V> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given every natural coefficients $ <var:p> $ ) it to be that $ <var:I> = <var:p> $ ahead of interpreting our set of commands it holds that we have $ <var:V> = <nat:9> \cdot <var:p> + <nat:3> $ when list of instructions has finished . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is given through standard Hoare reasoning . Observing the following line of code found in the list of instructions , the assignment line assigning $ <nat:3> $ to $ <var:W0>$ . This takes the condition $ \{ <var:I> = <var:p> \} $ toward the condition $ \{ <var:I> = <var:p> \land <var:W0> = <nat:3> \} $ . This is guaranteed with the assignment law obtained from usual Hoare techniques . Looking at the proceeding command seen in our program , we see the assignment statement yielding $ <nat:9> $ as $ <var:W1>$ . This line forwards the precondition $ \{ <var:I> = <var:p> \land <var:W0> = <nat:3> \} $ as $ \{ <var:I> = <var:p> \land <var:W0> = <nat:3> \land <var:W1> = <nat:9> \} $ . This is guaranteed by the assignment rule found in typical Hoare logic . Taking another step toward the next line seen in the program , we have the assignment line \verb | <var:W1> := <var:W1> * <var:I> ; | . This statement forwards the condition $ \{ <var:I> = <var:p> \land <var:W0> = <nat:3> \land <var:W1> = <nat:9> \} $ toward the postcondition $ \{ <var:I> = <var:p> \land <var:W0> = <nat:3> \land <var:W1> = <nat:9> \times <var:p> \} $ . Jumping to the following line of code found in our program , the line letting $ <var:W1> $ to $ <var:V>$ . This forwards the precondition $ \{ <var:I> = <var:p> \land <var:W0> = <nat:3> \land <var:W1> = <nat:9> \times <var:p> \} $ as the postcondition $ \{ <var:I> = <var:p> \land <var:W0> = <nat:3> \land <var:V> = <nat:9> \times <var:p> \} $ . This is deduced with the assignment law given by Hoare techniques . Moving forward to the following line of code in the set of commands , we have the assignment statement defining $ <var:V> + <var:W0$ toward $ <var:V>$ . This transfers the precondition $ \{ <var:I> = <var:p> \land <var:W0> = <nat:3> \land <var:V> = <nat:9> \times <var:p> \} $ as the condition $ \{ <var:I> = <var:p> \land <var:V> = <nat:9> \times <var:p> + <nat:3> \} $ . This is shown through the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:3> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:I> ; <var:V> := <var:W1> ; <var:V> := <var:V> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:I> = <var:p> }} <def:poly> {{ <var:V> = <nat:9> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W0> = <nat:3> /\ <var:V> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:V> = <nat:9> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 