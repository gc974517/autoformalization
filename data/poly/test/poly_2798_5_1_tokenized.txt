\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j1> := <var:O> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:3> ; <var:t> := <var:j1> <var:t> := <var:t> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assume it to hold that $ <var:O> = <var:R> $ ( assuming some positive integer coefficients $ <var:R> $ ) ahead of the execution of the set of instructions then we have $ <var:t> = <nat:3> \times <var:R> + <nat:6> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques returns : \begin{eqnarray} \{ <var:O> = <var:R> \} \\ <var:j1> := <var:O> ; \\ \{ <var:O> = <var:R> \land <var:j1> = <var:R> \} \\ <var:j0> := <nat:6> ; \\ \{ <var:O> = <var:R> \land <var:j1> = <var:R> \land <var:j0> = <nat:6> \} \\ <var:j1> := <var:j1> * <nat:3> ; \\ \{ <var:O> = <var:R> \land <var:j1> = <nat:3> \cdot <var:R> \land <var:j0> = <nat:6> \} \\ <var:t> := <var:j1> \\ \{ <var:O> = <var:R> \land <var:j0> = <nat:6> \land <var:t> = <nat:3> \cdot <var:R> \} \\ <var:t> := <var:t> + <var:j0> \\ \{ <var:O> = <var:R> \land <var:t> = <nat:3> \cdot <var:R> + <nat:6> \} \end{eqnarray} Thus , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:O> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:3> ; <var:t> := <var:j1> <var:t> := <var:t> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:O> = <var:R> }} <def:poly> {{ <var:t> = <nat:3> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:j1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:j1> = <var:R> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:j1> = <nat:3> * <var:R> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:j0> = <nat:6> /\ <var:t> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:t> = <nat:3> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 