\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:v> ; <var:D2> := <var:D1> * <var:v> ; <var:D3> := <var:D2> * <var:v> ; <var:D4> := <var:D3> * <var:v> ; <var:D0> := <nat:2> ; <var:D2> := <var:D2> * <nat:8> ; <var:D3> := <var:D3> * <nat:6> ; <var:D4> := <var:D4> * <nat:8> ; <var:P> := <var:D4> <var:P> := <var:P> + <var:D3> <var:P> := <var:P> + <var:D2> <var:P> := <var:P> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:v> = <var:X> $ ahead of the evaluation of our code segment , then we see $ <var:P> = <nat:8> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare logic returns : \begin{eqnarray} \{ <var:v> = <var:X> \} \\ <var:D1> := <var:v> ; \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \} \\ <var:D2> := <var:D1> * <var:v> ; \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:v> ; \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \} \\ <var:D4> := <var:D3> * <var:v> ; \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \land <var:D4> = <var:X> ^ <nat:4> \} \\ <var:D0> := <nat:2> ; \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \land <var:D4> = <var:X> ^ <nat:4> \land <var:D0> = <nat:2> \} \\ <var:D2> := <var:D2> * <nat:8> ; \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <nat:8> * <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \land <var:D4> = <var:X> ^ <nat:4> \land <var:D0> = <nat:2> \} \\ <var:D3> := <var:D3> * <nat:6> ; \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <nat:8> * <var:X> ^ <nat:2> \land <var:D3> = <nat:6> * <var:X> ^ <nat:3> \land <var:D4> = <var:X> ^ <nat:4> \land <var:D0> = <nat:2> \} \\ <var:D4> := <var:D4> * <nat:8> ; \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <nat:8> * <var:X> ^ <nat:2> \land <var:D3> = <nat:6> * <var:X> ^ <nat:3> \land <var:D4> = <nat:8> * <var:X> ^ <nat:4> \land <var:D0> = <nat:2> \} \\ <var:P> := <var:D4> \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <nat:8> * <var:X> ^ <nat:2> \land <var:D3> = <nat:6> * <var:X> ^ <nat:3> \land <var:D0> = <nat:2> \land <var:P> = <nat:8> * <var:X> ^ <nat:4> \} \\ <var:P> := <var:P> + <var:D3> \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <nat:8> * <var:X> ^ <nat:2> \land <var:D0> = <nat:2> \land <var:P> = <nat:8> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:D2> \\ \{ <var:v> = <var:X> \land <var:D1> = <var:X> \land <var:D0> = <nat:2> \land <var:P> = <nat:8> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:D0> \\ \{ <var:v> = <var:X> \land <var:P> = <nat:8> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:2> \} \end{eqnarray} Thusly , the code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <var:D4> : string := " <var:D4> " . Definition <def:poly> := <var:D1> := <var:v> ; <var:D2> := <var:D1> * <var:v> ; <var:D3> := <var:D2> * <var:v> ; <var:D4> := <var:D3> * <var:v> ; <var:D0> := <nat:2> ; <var:D2> := <var:D2> * <nat:8> ; <var:D3> := <var:D3> * <nat:6> ; <var:D4> := <var:D4> * <nat:8> ; <var:P> := <var:D4> <var:P> := <var:P> + <var:D3> <var:P> := <var:P> + <var:D2> <var:P> := <var:P> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:v> = <var:X> }} <def:poly> {{ <var:P> = <nat:8> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> /\ <var:D4> = <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> /\ <var:D4> = <var:X> ^ <nat:4> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> /\ <var:D4> = <var:X> ^ <nat:4> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:D3> = <nat:6> * <var:X> ^ <nat:3> /\ <var:D4> = <var:X> ^ <nat:4> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:D3> = <nat:6> * <var:X> ^ <nat:3> /\ <var:D4> = <nat:8> * <var:X> ^ <nat:4> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:D3> = <nat:6> * <var:X> ^ <nat:3> /\ <var:D0> = <nat:2> /\ <var:P> = <nat:8> * <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:D0> = <nat:2> /\ <var:P> = <nat:8> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:D1> = <var:X> /\ <var:D0> = <nat:2> /\ <var:P> = <nat:8> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:X> /\ <var:P> = <nat:8> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 