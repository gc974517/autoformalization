\begin{document} \begin{theorem} Consider the following series of instructions as \begin{verbatim} <var:f0> := <nat:3> ; <var:O> := <var:f0> \end{verbatim} Allow it to hold that $ <var:Y> = <var:k> $ prior to the execution of the program , it follows that we see $ <var:O> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:k> \} \\ <var:f0> := <nat:3> ; \\ \{ <var:Y> = <var:k> \land <var:f0> = <nat:3> \} \\ <var:O> := <var:f0> \\ \{ <var:Y> = <var:k> \land <var:O> = <nat:3> \} \end{eqnarray} Utilizing Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:Y> = <var:k> }} <var:f0> := <nat:3> ; <var:O> := <var:f0> {{ <var:O> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:O> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 