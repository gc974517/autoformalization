\begin{document} \begin{theorem} Take the following set of commands as \begin{verbatim} <var:V1> := <var:L> ; <var:V2> := <var:V1> * <var:L> ; <var:V3> := <var:V2> * <var:L> ; <var:V4> := <var:V3> * <var:L> ; <var:V0> := <nat:9> ; <var:V1> := <var:V1> * <nat:7> ; <var:V2> := <var:V2> * <nat:7> ; <var:V3> := <var:V3> * <nat:4> ; <var:V4> := <var:V4> * <nat:7> ; <var:G> := <var:V4> <var:G> := <var:G> + <var:V3> <var:G> := <var:G> + <var:V2> <var:G> := <var:G> + <var:V1> <var:G> := <var:G> + <var:V0> \end{verbatim} Allow it to hold that $ <var:L> = <var:q> $ --- given any whole numbers $ <var:q> $ --- ahead of executing the segment of code , it holds that we have $ <var:G> = <nat:7> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:7> \cdot <var:q> ^ <nat:2> + <nat:7> \cdot <var:q> + <nat:9> $ . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:L> = <var:q> \} \\ <var:V1> := <var:L> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <var:q> \} \\ <var:V2> := <var:V1> * <var:L> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <var:q> \land <var:V2> = <var:q> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:L> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <var:q> \land <var:V2> = <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \} \\ <var:V4> := <var:V3> * <var:L> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <var:q> \land <var:V2> = <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \land <var:V4> = <var:q> ^ <nat:4> \} \\ <var:V0> := <nat:9> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <var:q> \land <var:V2> = <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \land <var:V4> = <var:q> ^ <nat:4> \land <var:V0> = <nat:9> \} \\ <var:V1> := <var:V1> * <nat:7> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <nat:7> \times <var:q> \land <var:V2> = <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \land <var:V4> = <var:q> ^ <nat:4> \land <var:V0> = <nat:9> \} \\ <var:V2> := <var:V2> * <nat:7> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <nat:7> \times <var:q> \land <var:V2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \land <var:V4> = <var:q> ^ <nat:4> \land <var:V0> = <nat:9> \} \\ <var:V3> := <var:V3> * <nat:4> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <nat:7> \times <var:q> \land <var:V2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:q> ^ <nat:3> \land <var:V4> = <var:q> ^ <nat:4> \land <var:V0> = <nat:9> \} \\ <var:V4> := <var:V4> * <nat:7> ; \\ \{ <var:L> = <var:q> \land <var:V1> = <nat:7> \times <var:q> \land <var:V2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:q> ^ <nat:3> \land <var:V4> = <nat:7> \times <var:q> ^ <nat:4> \land <var:V0> = <nat:9> \} \\ <var:G> := <var:V4> \\ \{ <var:L> = <var:q> \land <var:V1> = <nat:7> \times <var:q> \land <var:V2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:q> ^ <nat:3> \land <var:V0> = <nat:9> \land <var:G> = <nat:7> \times <var:q> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:V3> \\ \{ <var:L> = <var:q> \land <var:V1> = <nat:7> \times <var:q> \land <var:V2> = <nat:7> \times <var:q> ^ <nat:2> \land <var:V0> = <nat:9> \land <var:G> = <nat:7> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:V2> \\ \{ <var:L> = <var:q> \land <var:V1> = <nat:7> \times <var:q> \land <var:V0> = <nat:9> \land <var:G> = <nat:7> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:V1> \\ \{ <var:L> = <var:q> \land <var:V0> = <nat:9> \land <var:G> = <nat:7> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> + <nat:7> \times <var:q> \} \\ <var:G> := <var:G> + <var:V0> \\ \{ <var:L> = <var:q> \land <var:G> = <nat:7> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:3> + <nat:7> \times <var:q> ^ <nat:2> + <nat:7> \times <var:q> + <nat:9> \} \end{eqnarray} Considering the above , our code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <var:V4> : string := " <var:V4> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:L> = <var:q> }} <var:V1> := <var:L> ; <var:V2> := <var:V1> * <var:L> ; <var:V3> := <var:V2> * <var:L> ; <var:V4> := <var:V3> * <var:L> ; <var:V0> := <nat:9> ; <var:V1> := <var:V1> * <nat:7> ; <var:V2> := <var:V2> * <nat:7> ; <var:V3> := <var:V3> * <nat:4> ; <var:V4> := <var:V4> * <nat:7> ; <var:G> := <var:V4> <var:G> := <var:G> + <var:V3> <var:G> := <var:G> + <var:V2> <var:G> := <var:G> + <var:V1> <var:G> := <var:G> + <var:V0> {{ <var:G> = <nat:7> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:7> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <var:q> /\ <var:V2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <var:q> /\ <var:V2> = <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <var:q> /\ <var:V2> = <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> /\ <var:V4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <var:q> /\ <var:V2> = <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> /\ <var:V4> = <var:q> ^ <nat:4> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <nat:7> * <var:q> /\ <var:V2> = <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> /\ <var:V4> = <var:q> ^ <nat:4> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <nat:7> * <var:q> /\ <var:V2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> /\ <var:V4> = <var:q> ^ <nat:4> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <nat:7> * <var:q> /\ <var:V2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:V4> = <var:q> ^ <nat:4> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <nat:7> * <var:q> /\ <var:V2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:V4> = <nat:7> * <var:q> ^ <nat:4> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <nat:7> * <var:q> /\ <var:V2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:V0> = <nat:9> /\ <var:G> = <nat:7> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <nat:7> * <var:q> /\ <var:V2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:V0> = <nat:9> /\ <var:G> = <nat:7> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V1> = <nat:7> * <var:q> /\ <var:V0> = <nat:9> /\ <var:G> = <nat:7> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:V0> = <nat:9> /\ <var:G> = <nat:7> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:G> = <nat:7> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:7> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 