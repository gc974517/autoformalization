\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:4> ; <var:i2> := <nat:3> ; <var:i2> := <var:i2> * <var:V> ; <var:i2> := <var:i2> * <var:V> ; <var:x> := <var:i2> ; <var:x> := <var:x> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allow ( given $ <var:s> \in \mathbb{Z}^+ $ ) that $ <var:V> = <var:s> $ before the evaluation of the set of commands it follows that we see $ <var:x> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:s> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:V> = <var:s> \land <var:i0> = <nat:4> \} \\ <var:i2> := <nat:3> ; \\ \{ <var:V> = <var:s> \land <var:i0> = <nat:4> \land <var:i2> = <nat:3> \} \\ <var:i2> := <var:i2> * <var:V> ; \\ \{ <var:V> = <var:s> \land <var:i0> = <nat:4> \land <var:i2> = <nat:3> \times <var:s> \} \\ <var:i2> := <var:i2> * <var:V> ; \\ \{ <var:V> = <var:s> \land <var:i0> = <nat:4> \land <var:i2> = <nat:3> \times <var:s> ^ <nat:2> \} \\ <var:x> := <var:i2> ; \\ \{ <var:V> = <var:s> \land <var:i0> = <nat:4> \land <var:x> = <nat:3> \times <var:s> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:i0> \\ \{ <var:V> = <var:s> \land <var:x> = <nat:3> \times <var:s> ^ <nat:2> + <nat:4> \} \end{eqnarray} The application of standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:4> ; <var:i2> := <nat:3> ; <var:i2> := <var:i2> * <var:V> ; <var:i2> := <var:i2> * <var:V> ; <var:x> := <var:i2> ; <var:x> := <var:x> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:V> = <var:s> }} <def:poly> {{ <var:x> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:s> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:s> /\ <var:i0> = <nat:4> /\ <var:i2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:s> /\ <var:i0> = <nat:4> /\ <var:i2> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:s> /\ <var:i0> = <nat:4> /\ <var:i2> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:s> /\ <var:i0> = <nat:4> /\ <var:x> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:s> /\ <var:x> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 