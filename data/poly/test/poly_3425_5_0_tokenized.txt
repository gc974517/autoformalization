\begin{document} \begin{theorem} Take a list of commands as follows \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:l> ; <var:D> := <var:s1> ; <var:D> := <var:D> + <var:s0> \end{verbatim} Assuming $ <var:l> = <var:Y> $ , for every positive integer coefficients $ <var:Y> $ , before running our list of instructions , it must be that $ <var:D> = <nat:1> \cdot <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our program is demonstrated with Hoare logic . Observing the following line found in our program , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:Y> \} & <var:s0> := <nat:4> & \{ <var:l> = <var:Y> \land <var:s0> = <nat:4> \} \end{tabular} This is given through the assignment rule defined in usual Hoare reasoning . Looking at the subsequent statements contained in our list of instructions , \[ \begin{tabular} {rcl} \{ <var:l> = <var:Y> \} & <var:s0> := <nat:4> & \{ <var:l> = <var:Y> \land <var:s0> = <nat:4> \} \\ \{ <var:l> = <var:Y> \land <var:s0> = <nat:4> \} & <var:s1> := <nat:1> & \{ <var:l> = <var:Y> \land <var:s0> = <nat:4> \land <var:s1> = <nat:1> \} \end{tabular} Stepping forward , \[ \begin{tabular} {rcl} \{ <var:l> = <var:Y> \} & <var:s0> := <nat:4> & \{ <var:l> = <var:Y> \land <var:s0> = <nat:4> \} \end{tabular} This is sound by the environment update rule found in standard Hoare reasoning . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:l> = <var:Y> \} & <var:s0> := <nat:4> & \{ <var:l> = <var:Y> \land <var:s0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:l> = <var:Y> }} <var:s0> := <nat:4> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:l> ; <var:D> := <var:s1> ; <var:D> := <var:D> + <var:s0> {{ <var:D> = <nat:1> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:s0> = <nat:4> /\ <var:D> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:Y> /\ <var:D> = <nat:1> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 