\begin{document} \begin{theorem} Consider a series of commands such that \begin{verbatim} <var:C1> := <var:L> ; <var:C2> := <var:C1> * <var:L> ; <var:C3> := <var:C2> * <var:L> ; <var:C4> := <var:C3> * <var:L> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:7> ; <var:C3> := <var:C3> * <nat:2> ; <var:C4> := <var:C4> * <nat:3> ; <var:r> := <var:C4> <var:r> := <var:r> + <var:C3> <var:r> := <var:r> + <var:C2> <var:r> := <var:r> + <var:C1> <var:r> := <var:r> + <var:C0> \end{verbatim} Assume it to be that $ <var:L> = <var:E> $ , given some positive coefficients $ <var:E> $ , before running the set of instructions , then $ <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:E> \} \\ <var:C1> := <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <var:E> \} \\ <var:C2> := <var:C1> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <var:E> \land <var:C2> = <var:E> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <var:E> \land <var:C2> = <var:E> ^ <nat:2> \land <var:C3> = <var:E> ^ <nat:3> \} \\ <var:C4> := <var:C3> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <var:E> \land <var:C2> = <var:E> ^ <nat:2> \land <var:C3> = <var:E> ^ <nat:3> \land <var:C4> = <var:E> ^ <nat:4> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <var:E> \land <var:C2> = <var:E> ^ <nat:2> \land <var:C3> = <var:E> ^ <nat:3> \land <var:C4> = <var:E> ^ <nat:4> \land <var:C0> = <nat:5> \} \\ <var:C1> := <var:C1> * <nat:2> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C2> = <var:E> ^ <nat:2> \land <var:C3> = <var:E> ^ <nat:3> \land <var:C4> = <var:E> ^ <nat:4> \land <var:C0> = <nat:5> \} \\ <var:C2> := <var:C2> * <nat:7> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C2> = <nat:7> * <var:E> ^ <nat:2> \land <var:C3> = <var:E> ^ <nat:3> \land <var:C4> = <var:E> ^ <nat:4> \land <var:C0> = <nat:5> \} \\ <var:C3> := <var:C3> * <nat:2> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C2> = <nat:7> * <var:E> ^ <nat:2> \land <var:C3> = <nat:2> * <var:E> ^ <nat:3> \land <var:C4> = <var:E> ^ <nat:4> \land <var:C0> = <nat:5> \} \\ <var:C4> := <var:C4> * <nat:3> ; \\ \{ <var:L> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C2> = <nat:7> * <var:E> ^ <nat:2> \land <var:C3> = <nat:2> * <var:E> ^ <nat:3> \land <var:C4> = <nat:3> * <var:E> ^ <nat:4> \land <var:C0> = <nat:5> \} \\ <var:r> := <var:C4> \\ \{ <var:L> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C2> = <nat:7> * <var:E> ^ <nat:2> \land <var:C3> = <nat:2> * <var:E> ^ <nat:3> \land <var:C0> = <nat:5> \land <var:r> = <nat:3> * <var:E> ^ <nat:4> \} \\ <var:r> := <var:r> + <var:C3> \\ \{ <var:L> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C2> = <nat:7> * <var:E> ^ <nat:2> \land <var:C0> = <nat:5> \land <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:C2> \\ \{ <var:L> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C0> = <nat:5> \land <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:C1> \\ \{ <var:L> = <var:E> \land <var:C0> = <nat:5> \land <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:2> * <var:E> \} \end{eqnarray} Allowing interpreting our set of commands returns : \begin{eqnarray} <var:r> := <var:r> + <var:C0> \\ \{ <var:L> = <var:E> \land <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:5> \} \end{eqnarray} Utilizing standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <var:C4> : string := " <var:C4> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:L> = <var:E> }} <var:C1> := <var:L> ; <var:C2> := <var:C1> * <var:L> ; <var:C3> := <var:C2> * <var:L> ; <var:C4> := <var:C3> * <var:L> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:7> ; <var:C3> := <var:C3> * <nat:2> ; <var:C4> := <var:C4> * <nat:3> ; <var:r> := <var:C4> <var:r> := <var:r> + <var:C3> <var:r> := <var:r> + <var:C2> <var:r> := <var:r> + <var:C1> <var:r> := <var:r> + <var:C0> {{ <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <var:E> /\ <var:C2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <var:E> /\ <var:C2> = <var:E> ^ <nat:2> /\ <var:C3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <var:E> /\ <var:C2> = <var:E> ^ <nat:2> /\ <var:C3> = <var:E> ^ <nat:3> /\ <var:C4> = <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <var:E> /\ <var:C2> = <var:E> ^ <nat:2> /\ <var:C3> = <var:E> ^ <nat:3> /\ <var:C4> = <var:E> ^ <nat:4> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C2> = <var:E> ^ <nat:2> /\ <var:C3> = <var:E> ^ <nat:3> /\ <var:C4> = <var:E> ^ <nat:4> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:C3> = <var:E> ^ <nat:3> /\ <var:C4> = <var:E> ^ <nat:4> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:C3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:C4> = <var:E> ^ <nat:4> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:C3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:C4> = <nat:3> * <var:E> ^ <nat:4> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:C3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:C0> = <nat:5> /\ <var:r> = <nat:3> * <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:C0> = <nat:5> /\ <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C0> = <nat:5> /\ <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C0> = <nat:5> /\ <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:r> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 