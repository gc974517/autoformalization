\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:q> ; <var:F2> := <var:F1> * <var:q> ; <var:F3> := <var:F2> * <var:q> ; <var:F0> := <nat:3> ; <var:F1> := <var:F1> * <nat:5> ; <var:F2> := <var:F2> * <nat:5> ; <var:F3> := <var:F3> * <nat:9> ; <var:l> := <var:F3> <var:l> := <var:l> + <var:F2> <var:l> := <var:l> + <var:F1> <var:l> := <var:l> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- for every positive numbers $ <var:H> $ --- that $ <var:q> = <var:H> $ before evaluating our code segment , it must be that we see $ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:3> $ after set of instructions has finished . \end{theorem} \begin{proof} The course of logic for the set of instructions can be accomplished by typical Hoare logic . Moving forward to the next step , we have \verb | { <var:q> = <var:H> } <var:F1> := <var:q> { <var:q> = <var:H> \land <var:F1> = <var:H> } | , \verb | { <var:q> = <var:H> \land <var:F1> = <var:H> } <var:F2> := <var:F1> * <var:q> { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> } | , \verb | { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> } <var:F3> := <var:F2> * <var:q> { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> \land <var:F3> = <var:H> ^ <nat:3> } | , \verb | { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> \land <var:F3> = <var:H> ^ <nat:3> } <var:F0> := <nat:3> { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> \land <var:F3> = <var:H> ^ <nat:3> \land <var:F0> = <nat:3> } | , \verb | { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> \land <var:F3> = <var:H> ^ <nat:3> \land <var:F0> = <nat:3> } <var:F1> := <var:F1> * <nat:5> { <var:q> = <var:H> \land <var:F1> = <nat:5> \times <var:H> \land <var:F2> = <var:H> ^ <nat:2> \land <var:F3> = <var:H> ^ <nat:3> \land <var:F0> = <nat:3> } | and \verb | { <var:q> = <var:H> \land <var:F1> = <nat:5> \times <var:H> \land <var:F2> = <var:H> ^ <nat:2> \land <var:F3> = <var:H> ^ <nat:3> \land <var:F0> = <nat:3> } <var:F2> := <var:F2> * <nat:5> { <var:q> = <var:H> \land <var:F1> = <nat:5> \times <var:H> \land <var:F2> = <nat:5> \times <var:H> ^ <nat:2> \land <var:F3> = <var:H> ^ <nat:3> \land <var:F0> = <nat:3> } | . This is shown to be logically sound with the assignment law found in Hoare techniques . Moving forward to the upcoming lines of codein the set of commands , we have \verb | { <var:q> = <var:H> } <var:F1> := <var:q> { <var:q> = <var:H> \land <var:F1> = <var:H> } | , \verb | { <var:q> = <var:H> \land <var:F1> = <var:H> } <var:F2> := <var:F1> * <var:q> { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> } | and \verb | { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> } <var:F3> := <var:F2> * <var:q> { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> \land <var:F3> = <var:H> ^ <nat:3> } | . This is deduced by the scheme given in standard Hoare techniques . Taking another step toward the upcoming commands contained in the code segment , we see \verb | { <var:q> = <var:H> } <var:F1> := <var:q> { <var:q> = <var:H> \land <var:F1> = <var:H> } | and \verb | { <var:q> = <var:H> \land <var:F1> = <var:H> } <var:F2> := <var:F1> * <var:q> { <var:q> = <var:H> \land <var:F1> = <var:H> \land <var:F2> = <var:H> ^ <nat:2> } | . This is known to be sound using the assignment scheme given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:q> ; <var:F2> := <var:F1> * <var:q> ; <var:F3> := <var:F2> * <var:q> ; <var:F0> := <nat:3> ; <var:F1> := <var:F1> * <nat:5> ; <var:F2> := <var:F2> * <nat:5> ; <var:F3> := <var:F3> * <nat:9> ; <var:l> := <var:F3> <var:l> := <var:l> + <var:F2> <var:l> := <var:l> + <var:F1> <var:l> := <var:l> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:q> = <var:H> }} <def:poly> {{ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <var:H> /\ <var:F2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <var:H> /\ <var:F2> = <var:H> ^ <nat:2> /\ <var:F3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <var:H> /\ <var:F2> = <var:H> ^ <nat:2> /\ <var:F3> = <var:H> ^ <nat:3> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <nat:5> * <var:H> /\ <var:F2> = <var:H> ^ <nat:2> /\ <var:F3> = <var:H> ^ <nat:3> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <nat:5> * <var:H> /\ <var:F2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:F3> = <var:H> ^ <nat:3> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <nat:5> * <var:H> /\ <var:F2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:H> ^ <nat:3> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <nat:5> * <var:H> /\ <var:F2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:F0> = <nat:3> /\ <var:l> = <nat:9> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F1> = <nat:5> * <var:H> /\ <var:F0> = <nat:3> /\ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:F0> = <nat:3> /\ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 