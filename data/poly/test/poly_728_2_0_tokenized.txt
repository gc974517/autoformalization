\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:3> ; <var:l> := <var:g0> \end{verbatim} Given $ <var:O> = <var:v> $ ahead of running this list of commands then we see $ <var:l> = <nat:3> $ after code segment exits . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is given with Hoare techniques . Moving forward , the assignment code \verb | <var:g0> := <nat:3> ; | . This statement moves the precondition $ \{ <var:O> = <var:v> \} $ to the condition $ \{ <var:O> = <var:v> \land <var:g0> = <nat:3> \} $ . This is sound by the assignment inference rule given in usual Hoare techniques . Moving on to the next step , the environment update code giving $ <var:g0$ as $ <var:l>$ . This statement transfers the condition $ \{ <var:O> = <var:v> \land <var:g0> = <nat:3> \} $ toward the postcondition $ \{ <var:O> = <var:v> \land <var:l> = <nat:3> \} $ . This is deduced with the assignment inference rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:O> = <var:v> }} <var:g0> := <nat:3> ; <var:l> := <var:g0> {{ <var:l> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:l> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 