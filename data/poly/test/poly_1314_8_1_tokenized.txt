\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:U1> := <var:z> ; <var:U2> := <var:U1> * <var:z> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:2> ; <var:U2> := <var:U2> * <nat:9> ; <var:A> := <var:U2> <var:A> := <var:A> + <var:U1> <var:A> := <var:A> + <var:U0> \end{verbatim} Assuming ( for any natural coefficients $ <var:I> $ ) it to be that $ <var:z> = <var:I> $ ahead of the evaluation of our list of instructions , it holds that we have $ <var:A> = <nat:9> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:1> $ when set of commands has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:z> = <var:I> \} \\ <var:U1> := <var:z> ; \\ \{ <var:z> = <var:I> \land <var:U1> = <var:I> \} \\ <var:U2> := <var:U1> * <var:z> ; \\ \{ <var:z> = <var:I> \land <var:U1> = <var:I> \land <var:U2> = <var:I> ^ <nat:2> \} \\ <var:U0> := <nat:1> ; \\ \{ <var:z> = <var:I> \land <var:U1> = <var:I> \land <var:U2> = <var:I> ^ <nat:2> \land <var:U0> = <nat:1> \} \\ <var:U1> := <var:U1> * <nat:2> ; \\ \{ <var:z> = <var:I> \land <var:U1> = <nat:2> \times <var:I> \land <var:U2> = <var:I> ^ <nat:2> \land <var:U0> = <nat:1> \} \\ <var:U2> := <var:U2> * <nat:9> ; \\ \{ <var:z> = <var:I> \land <var:U1> = <nat:2> \times <var:I> \land <var:U2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:U0> = <nat:1> \} \\ <var:A> := <var:U2> \\ \{ <var:z> = <var:I> \land <var:U1> = <nat:2> \times <var:I> \land <var:U0> = <nat:1> \land <var:A> = <nat:9> \times <var:I> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:U1> \\ \{ <var:z> = <var:I> \land <var:U0> = <nat:1> \land <var:A> = <nat:9> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> \} \\ <var:A> := <var:A> + <var:U0> \\ \{ <var:z> = <var:I> \land <var:A> = <nat:9> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:1> \} \end{eqnarray} Given the preceding argument , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:z> = <var:I> }} <var:U1> := <var:z> ; <var:U2> := <var:U1> * <var:z> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:2> ; <var:U2> := <var:U2> * <nat:9> ; <var:A> := <var:U2> <var:A> := <var:A> + <var:U1> <var:A> := <var:A> + <var:U0> {{ <var:A> = <nat:9> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:U1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:U1> = <var:I> /\ <var:U2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:U1> = <var:I> /\ <var:U2> = <var:I> ^ <nat:2> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:U1> = <nat:2> * <var:I> /\ <var:U2> = <var:I> ^ <nat:2> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:U1> = <nat:2> * <var:I> /\ <var:U2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:U1> = <nat:2> * <var:I> /\ <var:U0> = <nat:1> /\ <var:A> = <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:U0> = <nat:1> /\ <var:A> = <nat:9> * <var:I> ^ <nat:2> + <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:A> = <nat:9> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 