\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:M> := <nat:1> ; <var:M> := <nat:1> + <var:M> * <var:h> ; <var:M> := <nat:4> + <var:M> * <var:h> ; <var:M> := <nat:4> + <var:M> * <var:h> ; <var:M> := <nat:2> + <var:M> * <var:h> ; <var:M> := <nat:4> + <var:M> * <var:h> ; <var:M> := <nat:4> + <var:M> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:h> = <var:i> $ --- for any positive integer coefficients $ <var:i> $ --- ahead of executing our code segment , it holds that we see $ <var:M> = <nat:1> \cdot <var:i> ^ <nat:6> + <nat:1> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:4> $ after code has finished . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:h> = <var:i> \} \\ <var:M> := <nat:1> ; \\ \{ <var:h> = <var:i> \land <var:M> = <nat:1> \} \\ <var:M> := <nat:1> + <var:M> * <var:h> ; \\ \{ <var:h> = <var:i> \land <var:M> = <nat:1> \times <var:i> + <nat:1> \} \\ <var:M> := <nat:4> + <var:M> * <var:h> ; \\ \{ <var:h> = <var:i> \land <var:M> = <nat:1> \times <var:i> ^ <nat:2> + <nat:1> \times <var:i> + <nat:4> \} \\ <var:M> := <nat:4> + <var:M> * <var:h> ; \\ \{ <var:h> = <var:i> \land <var:M> = <nat:1> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:4> \} \\ <var:M> := <nat:2> + <var:M> * <var:h> ; \\ \{ <var:h> = <var:i> \land <var:M> = <nat:1> \times <var:i> ^ <nat:4> + <nat:1> \times <var:i> ^ <nat:3> + <nat:4> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:2> \} \\ <var:M> := <nat:4> + <var:M> * <var:h> ; \\ \{ <var:h> = <var:i> \land <var:M> = <nat:1> \times <var:i> ^ <nat:5> + <nat:1> \times <var:i> ^ <nat:4> + <nat:4> \times <var:i> ^ <nat:3> + <nat:4> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:4> \} \\ <var:M> := <nat:4> + <var:M> * <var:h> \\ \{ <var:h> = <var:i> \land <var:M> = <nat:1> \times <var:i> ^ <nat:6> + <nat:1> \times <var:i> ^ <nat:5> + <nat:4> \times <var:i> ^ <nat:4> + <nat:4> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:4> \} \end{eqnarray} As a consequence , this series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:1> ; <var:M> := <nat:1> + <var:M> * <var:h> ; <var:M> := <nat:4> + <var:M> * <var:h> ; <var:M> := <nat:4> + <var:M> * <var:h> ; <var:M> := <nat:2> + <var:M> * <var:h> ; <var:M> := <nat:4> + <var:M> * <var:h> ; <var:M> := <nat:4> + <var:M> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:h> = <var:i> }} <def:poly> {{ <var:M> = <nat:1> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:M> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:M> = <nat:1> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:M> = <nat:1> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:M> = <nat:1> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:M> = <nat:1> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:M> = <nat:1> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:M> = <nat:1> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 