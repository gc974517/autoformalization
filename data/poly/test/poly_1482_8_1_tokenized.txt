\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:u> ; <var:H2> := <var:H1> * <var:u> ; <var:H0> := <nat:2> ; <var:H1> := <var:H1> * <nat:3> ; <var:H2> := <var:H2> * <nat:2> ; <var:G> := <var:H2> <var:G> := <var:G> + <var:H1> <var:G> := <var:G> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:u> = <var:L> $ before running this code it must be that we have $ <var:G> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the code segment can be shown through this decorated code segment . \begin{eqnarray} \{ <var:u> = <var:L> \} \\ <var:H1> := <var:u> ; \\ \{ <var:u> = <var:L> \land <var:H1> = <var:L> \} \\ <var:H2> := <var:H1> * <var:u> ; \\ \{ <var:u> = <var:L> \land <var:H1> = <var:L> \land <var:H2> = <var:L> ^ <nat:2> \} \\ <var:H0> := <nat:2> ; \\ \{ <var:u> = <var:L> \land <var:H1> = <var:L> \land <var:H2> = <var:L> ^ <nat:2> \land <var:H0> = <nat:2> \} \\ <var:H1> := <var:H1> * <nat:3> ; \\ \{ <var:u> = <var:L> \land <var:H1> = <nat:3> \times <var:L> \land <var:H2> = <var:L> ^ <nat:2> \land <var:H0> = <nat:2> \} \\ <var:H2> := <var:H2> * <nat:2> ; \\ \{ <var:u> = <var:L> \land <var:H1> = <nat:3> \times <var:L> \land <var:H2> = <nat:2> \times <var:L> ^ <nat:2> \land <var:H0> = <nat:2> \} \\ <var:G> := <var:H2> \\ \{ <var:u> = <var:L> \land <var:H1> = <nat:3> \times <var:L> \land <var:H0> = <nat:2> \land <var:G> = <nat:2> \times <var:L> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:H1> \\ \{ <var:u> = <var:L> \land <var:H0> = <nat:2> \land <var:G> = <nat:2> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> \} \\ <var:G> := <var:G> + <var:H0> \\ \{ <var:u> = <var:L> \land <var:G> = <nat:2> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:2> \} \end{eqnarray} Applying Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H1> := <var:u> ; <var:H2> := <var:H1> * <var:u> ; <var:H0> := <nat:2> ; <var:H1> := <var:H1> * <nat:3> ; <var:H2> := <var:H2> * <nat:2> ; <var:G> := <var:H2> <var:G> := <var:G> + <var:H1> <var:G> := <var:G> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:u> = <var:L> }} <def:poly> {{ <var:G> = <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H1> = <var:L> /\ <var:H2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H1> = <var:L> /\ <var:H2> = <var:L> ^ <nat:2> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H1> = <nat:3> * <var:L> /\ <var:H2> = <var:L> ^ <nat:2> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H1> = <nat:3> * <var:L> /\ <var:H2> = <nat:2> * <var:L> ^ <nat:2> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H1> = <nat:3> * <var:L> /\ <var:H0> = <nat:2> /\ <var:G> = <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:H0> = <nat:2> /\ <var:G> = <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:G> = <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 