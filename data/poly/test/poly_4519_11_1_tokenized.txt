\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:a> ; <var:P2> := <var:P1> * <var:a> ; <var:P3> := <var:P2> * <var:a> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:5> ; <var:P2> := <var:P2> * <nat:4> ; <var:P3> := <var:P3> * <nat:5> ; <var:q> := <var:P3> <var:q> := <var:q> + <var:P2> <var:q> := <var:q> + <var:P1> <var:q> := <var:q> + <var:P0> \end{verbatim} Assuming it to hold that $ <var:a> = <var:A> $ ( for any $ <var:A> $ ) before evaluating this list of commands it follows that we see $ <var:q> = <nat:5> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:5> \times <var:A> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare logic gives us : \begin{eqnarray} \{ <var:a> = <var:A> \} \\ <var:P1> := <var:a> ; \\ \{ <var:a> = <var:A> \land <var:P1> = <var:A> \} \\ <var:P2> := <var:P1> * <var:a> ; \\ \{ <var:a> = <var:A> \land <var:P1> = <var:A> \land <var:P2> = <var:A> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:a> ; \\ \{ <var:a> = <var:A> \land <var:P1> = <var:A> \land <var:P2> = <var:A> ^ <nat:2> \land <var:P3> = <var:A> ^ <nat:3> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:a> = <var:A> \land <var:P1> = <var:A> \land <var:P2> = <var:A> ^ <nat:2> \land <var:P3> = <var:A> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P1> := <var:P1> * <nat:5> ; \\ \{ <var:a> = <var:A> \land <var:P1> = <nat:5> \cdot <var:A> \land <var:P2> = <var:A> ^ <nat:2> \land <var:P3> = <var:A> ^ <nat:3> \land <var:P0> = <nat:3> \} \end{eqnarray} Furthering the evaluation of our segment of code gives : \begin{eqnarray} <var:P2> := <var:P2> * <nat:4> ; \\ \{ <var:a> = <var:A> \land <var:P1> = <nat:5> \cdot <var:A> \land <var:P2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:P3> = <var:A> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P3> := <var:P3> * <nat:5> ; \\ \{ <var:a> = <var:A> \land <var:P1> = <nat:5> \cdot <var:A> \land <var:P2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:P3> = <nat:5> \cdot <var:A> ^ <nat:3> \land <var:P0> = <nat:3> \} \end{eqnarray} Allowing evaluating this code results in : \begin{eqnarray} <var:q> := <var:P3> \\ \{ <var:a> = <var:A> \land <var:P1> = <nat:5> \cdot <var:A> \land <var:P2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:P0> = <nat:3> \land <var:q> = <nat:5> \cdot <var:A> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:P2> \\ \{ <var:a> = <var:A> \land <var:P1> = <nat:5> \cdot <var:A> \land <var:P0> = <nat:3> \land <var:q> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:P1> \\ \{ <var:a> = <var:A> \land <var:P0> = <nat:3> \land <var:q> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:5> \cdot <var:A> \} \\ <var:q> := <var:q> + <var:P0> \\ \{ <var:a> = <var:A> \land <var:q> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:5> \cdot <var:A> + <nat:3> \} \end{eqnarray} Given the above , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:a> = <var:A> }} <var:P1> := <var:a> ; <var:P2> := <var:P1> * <var:a> ; <var:P3> := <var:P2> * <var:a> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:5> ; <var:P2> := <var:P2> * <nat:4> ; <var:P3> := <var:P3> * <nat:5> ; <var:q> := <var:P3> <var:q> := <var:q> + <var:P2> <var:q> := <var:q> + <var:P1> <var:q> := <var:q> + <var:P0> {{ <var:q> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <var:A> /\ <var:P2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <var:A> /\ <var:P2> = <var:A> ^ <nat:2> /\ <var:P3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <var:A> /\ <var:P2> = <var:A> ^ <nat:2> /\ <var:P3> = <var:A> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <nat:5> * <var:A> /\ <var:P2> = <var:A> ^ <nat:2> /\ <var:P3> = <var:A> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <nat:5> * <var:A> /\ <var:P2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:P3> = <var:A> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <nat:5> * <var:A> /\ <var:P2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:P3> = <nat:5> * <var:A> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <nat:5> * <var:A> /\ <var:P2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:P0> = <nat:3> /\ <var:q> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P1> = <nat:5> * <var:A> /\ <var:P0> = <nat:3> /\ <var:q> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:P0> = <nat:3> /\ <var:q> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:A> /\ <var:q> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 