\begin{document} \begin{theorem} Consider a series of instructions such that \begin{verbatim} <var:l> := <nat:4> ; <var:l> := <nat:3> + <var:l> * <var:X> ; <var:l> := <nat:3> + <var:l> * <var:X> ; <var:l> := <var:l> * <var:X> ; <var:l> := <var:l> * <var:X> ; <var:l> := <var:l> * <var:X> ; <var:l> := <nat:3> + <var:l> * <var:X> ; <var:l> := <nat:2> + <var:l> * <var:X> ; <var:l> := <nat:3> + <var:l> * <var:X> ; <var:l> := <nat:1> + <var:l> * <var:X> ; <var:l> := <nat:1> + <var:l> * <var:X> ; <var:l> := <nat:2> + <var:l> * <var:X> ; <var:l> := <nat:2> + <var:l> * <var:X> \end{verbatim} Given given positive coefficients $ <var:W> $ that $ <var:X> = <var:W> $ prior to the execution of the code segment , it must be that $ <var:l> = <nat:4> * <var:W> ^ <nat:12> + <nat:3> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> $ when list of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be demonstrated using Hoare reasoning . Immediately after , we see the code \verb | <var:l> := <nat:4> ; | . This moves the condition $ \{ <var:X> = <var:W> \} $ into the condition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \} $ . This is shown to be logically sound by the assignment law in standard Hoare reasoning . Advancing to the next step , we see the variable assignmet line giving $ <nat:3> + <var:l> * <var:X> $ into $ <var:l>$ . This forwards the precondition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \} $ to the postcondition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> + <nat:3> \} $ . Taking a look at the upcoming step found in our list of instructions , we see the line assigning $ <nat:3> + <var:l> * <var:X> $ into $ <var:l>$ . This line takes the precondition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> + <nat:3> \} $ into the postcondition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:3> \} $ . Moving on , we see the variable assignmet statement \verb | <var:l> := <var:l> * <var:X> ; | . This moves $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:3> \} $ into the condition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + \} $ . This is shown with the assignment inference rule of typical Hoare logic . Going to the next step , we have the statement letting $ <var:l> * <var:X> $ toward $ <var:l>$ . This advances the precondition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + \} $ as the condition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + \} $ . Considering the next bit of code seen in our segment of code , we see the assignment statement \verb | <var:l> := <var:l> * <var:X> ; | . This moves the precondition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + \} $ toward the condition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + \} $ . This is given by the assignment inference rule given by standard Hoare logic . Stepping through , we see the assignment command assigning $ <nat:3> + <var:l> * <var:X> $ as $ <var:l>$ . This redefines $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + \} $ into the condition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:3> \} $ . Immediately following , the variable binding code yielding $ <nat:2> + <var:l> * <var:X> $ to $ <var:l>$ . This redefines the condition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:3> \} $ to $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> + <nat:2> \} $ . Honing in on the upcoming statement seen in the program , we see the variable update code yielding $ <nat:3> + <var:l> * <var:X> $ into $ <var:l>$ . This statement transfers the precondition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> + <nat:2> \} $ toward $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:3> \} $ . This is sound through the assignment inference rule from Hoare logic . Moving forward to the upcoming bit of code seen in the list of commands , the command \verb | <var:l> := <nat:1> + <var:l> * <var:X> ; | . This statement takes $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:3> \} $ to $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:1> \} $ . This is sound using the assignment inference rule of usual Hoare logic . Stepping forward , we see the variable assignmet statement defining $ <nat:1> + <var:l> * <var:X> $ to $ <var:l>$ . This transfers $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:1> \} $ as $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:10> + <nat:3> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:1> \} $ . This is known to be sound using the assignment scheme from typical Hoare techniques . Now , the assignment statement \verb | <var:l> := <nat:2> + <var:l> * <var:X> ; | . This advances $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:10> + <nat:3> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:1> \} $ as the postcondition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:11> + <nat:3> \cdot <var:W> ^ <nat:10> + <nat:3> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:2> \} $ . This is ensured with the assignment inference rule given by usual Hoare logic . Now , we have the line letting $ <nat:2> + <var:l> * <var:X$ toward $ <var:l>$ . This line redefines $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:11> + <nat:3> \cdot <var:W> ^ <nat:10> + <nat:3> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:2> \} $ toward the condition $ \{ <var:X> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> ^ <nat:12> + <nat:3> \cdot <var:W> ^ <nat:11> + <nat:3> \cdot <var:W> ^ <nat:10> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:2> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:1> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:X> = <var:W> }} <var:l> := <nat:4> ; <var:l> := <nat:3> + <var:l> * <var:X> ; <var:l> := <nat:3> + <var:l> * <var:X> ; <var:l> := <var:l> * <var:X> ; <var:l> := <var:l> * <var:X> ; <var:l> := <var:l> * <var:X> ; <var:l> := <nat:3> + <var:l> * <var:X> ; <var:l> := <nat:2> + <var:l> * <var:X> ; <var:l> := <nat:3> + <var:l> * <var:X> ; <var:l> := <nat:1> + <var:l> * <var:X> ; <var:l> := <nat:1> + <var:l> * <var:X> ; <var:l> := <nat:2> + <var:l> * <var:X> ; <var:l> := <nat:2> + <var:l> * <var:X> {{ <var:l> = <nat:4> * <var:W> ^ <nat:12> + <nat:3> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:l> = <nat:4> * <var:W> ^ <nat:12> + <nat:3> * <var:W> ^ <nat:11> + <nat:3> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 