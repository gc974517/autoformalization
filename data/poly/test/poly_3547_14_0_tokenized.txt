\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:6> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:p> ; <var:g2> := <nat:4> ; <var:g2> := <var:g2> * <var:p> ; <var:g2> := <var:g2> * <var:p> ; <var:g3> := <nat:8> ; <var:g3> := <var:g3> * <var:p> ; <var:g3> := <var:g3> * <var:p> ; <var:g3> := <var:g3> * <var:p> ; <var:i> := <var:g3> ; <var:i> := <var:i> + <var:g2> ; <var:i> := <var:i> + <var:g1> ; <var:i> := <var:i> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Given it to hold that $ <var:p> = <var:l> $ prior to the evaluation of our list of commands , it must be that we have $ <var:i> = <nat:8> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:6> $ once series of commands terminates . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:p> = <var:l> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \} \\ <var:g1> := <nat:9> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \} \\ <var:g1> := <var:g1> * <var:p> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \} \\ <var:g2> := <nat:4> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:g2> = <nat:4> \} \\ <var:g2> := <var:g2> * <var:p> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:g2> = <nat:4> \cdot <var:l> \} \\ <var:g2> := <var:g2> * <var:p> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:g2> = <nat:4> \cdot <var:l> ^ <nat:2> \} \\ <var:g3> := <nat:8> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:g2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:8> \} \\ <var:g3> := <var:g3> * <var:p> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:g2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:l> \} \\ <var:g3> := <var:g3> * <var:p> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:g2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:l> ^ <nat:2> \} \\ <var:g3> := <var:g3> * <var:p> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:g2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:l> ^ <nat:3> \} \\ <var:i> := <var:g3> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:g2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:i> = <nat:8> \cdot <var:l> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:g2> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:g1> = <nat:9> \cdot <var:l> \land <var:i> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:g1> ; \\ \{ <var:p> = <var:l> \land <var:g0> = <nat:6> \land <var:i> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> \} \\ <var:i> := <var:i> + <var:g0> \\ \{ <var:p> = <var:l> \land <var:i> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> + <nat:6> \} \end{eqnarray} Given the above , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g0> := <nat:6> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:p> ; <var:g2> := <nat:4> ; <var:g2> := <var:g2> * <var:p> ; <var:g2> := <var:g2> * <var:p> ; <var:g3> := <nat:8> ; <var:g3> := <var:g3> * <var:p> ; <var:g3> := <var:g3> * <var:p> ; <var:g3> := <var:g3> * <var:p> ; <var:i> := <var:g3> ; <var:i> := <var:i> + <var:g2> ; <var:i> := <var:i> + <var:g1> ; <var:i> := <var:i> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:p> = <var:l> }} <def:poly> {{ <var:i> = <nat:8> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:g2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:g2> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:g2> = <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:g2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:g3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:g2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:g3> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:g2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:g3> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:g2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:g3> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:g2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:i> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:9> * <var:l> /\ <var:i> = <nat:8> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:g0> = <nat:6> /\ <var:i> = <nat:8> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:i> = <nat:8> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 