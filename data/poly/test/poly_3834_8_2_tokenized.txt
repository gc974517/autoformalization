\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} : \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:1> + <var:W> * <var:Y> ; <var:W> := <nat:3> + <var:W> * <var:Y> ; <var:W> := <nat:4> + <var:W> * <var:Y> ; <var:W> := <nat:4> + <var:W> * <var:Y> ; <var:W> := <nat:1> + <var:W> * <var:Y> ; <var:W> := <var:W> * <var:Y> ; <var:W> := <nat:4> + <var:W> * <var:Y> \end{verbatim} Assuming it to be that $ <var:Y> = <var:n> $ before the execution of our set of commands , it holds that we have $ <var:W> = <nat:3> \cdot <var:n> ^ <nat:7> + <nat:1> \cdot <var:n> ^ <nat:6> + <nat:3> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:Y> = <var:n> \} \\ <var:W> := <nat:3> ; \\ \{ <var:Y> = <var:n> \land <var:W> = <nat:3> \} \\ <var:W> := <nat:1> + <var:W> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:W> = <nat:3> * <var:n> + <nat:1> \} \\ <var:W> := <nat:3> + <var:W> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:W> = <nat:3> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> \} \\ <var:W> := <nat:4> + <var:W> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:W> = <nat:3> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> \} \\ <var:W> := <nat:4> + <var:W> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:W> = <nat:3> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:W> = <nat:3> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> \} \\ <var:W> := <var:W> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:W> = <nat:3> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + \} \\ <var:W> := <nat:4> + <var:W> * <var:Y> \\ \{ <var:Y> = <var:n> \land <var:W> = <nat:3> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> \} \end{eqnarray} Given the above , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Y> = <var:n> }} <var:W> := <nat:3> ; <var:W> := <nat:1> + <var:W> * <var:Y> ; <var:W> := <nat:3> + <var:W> * <var:Y> ; <var:W> := <nat:4> + <var:W> * <var:Y> ; <var:W> := <nat:4> + <var:W> * <var:Y> ; <var:W> := <nat:1> + <var:W> * <var:Y> ; <var:W> := <var:W> * <var:Y> ; <var:W> := <nat:4> + <var:W> * <var:Y> {{ <var:W> = <nat:3> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:W> = <nat:3> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:W> = <nat:3> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:W> = <nat:3> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:W> = <nat:3> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:W> = <nat:3> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:W> = <nat:3> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:W> = <nat:3> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 