\begin{document} \begin{theorem} We define the following list of instructions : \begin{verbatim} <var:U0> := <nat:2> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:m> ; <var:N> := <var:U1> ; <var:N> := <var:N> + <var:U0> \end{verbatim} Given it to be that $ <var:m> = <var:Y> $ before evaluating the code segment , it must be that we have $ <var:N> = <nat:3> \cdot <var:Y> + <nat:2> $ once set of instructions has terminated . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning produces : \begin{eqnarray} \{ <var:m> = <var:Y> \} \\ <var:U0> := <nat:2> ; \\ \{ <var:m> = <var:Y> \land <var:U0> = <nat:2> \} \\ <var:U1> := <nat:3> ; \\ \{ <var:m> = <var:Y> \land <var:U0> = <nat:2> \land <var:U1> = <nat:3> \} \\ <var:U1> := <var:U1> * <var:m> ; \\ \{ <var:m> = <var:Y> \land <var:U0> = <nat:2> \land <var:U1> = <nat:3> * <var:Y> \} \\ <var:N> := <var:U1> ; \\ \{ <var:m> = <var:Y> \land <var:U0> = <nat:2> \land <var:N> = <nat:3> * <var:Y> \} \\ <var:N> := <var:N> + <var:U0> \\ \{ <var:m> = <var:Y> \land <var:N> = <nat:3> * <var:Y> + <nat:2> \} \end{eqnarray} As a consequence , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:m> = <var:Y> }} <var:U0> := <nat:2> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:m> ; <var:N> := <var:U1> ; <var:N> := <var:N> + <var:U0> {{ <var:N> = <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:U0> = <nat:2> /\ <var:N> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:N> = <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 