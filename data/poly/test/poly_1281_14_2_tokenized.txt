\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B> := <nat:1> ; <var:B> := <nat:2> + <var:B> * <var:j> ; <var:B> := <var:B> * <var:j> ; <var:B> := <var:B> * <var:j> ; <var:B> := <nat:3> + <var:B> * <var:j> ; <var:B> := <nat:4> + <var:B> * <var:j> ; <var:B> := <var:B> * <var:j> ; <var:B> := <nat:4> + <var:B> * <var:j> ; <var:B> := <nat:1> + <var:B> * <var:j> ; <var:B> := <nat:3> + <var:B> * <var:j> ; <var:B> := <var:B> * <var:j> ; <var:B> := <nat:2> + <var:B> * <var:j> ; <var:B> := <nat:3> + <var:B> * <var:j> ; <var:B> := <nat:3> + <var:B> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Allowing that $ <var:j> = <var:K> $ before the execution of this set of instructions then we see $ <var:B> = <nat:1> \times <var:K> ^ <nat:13> + <nat:2> \times <var:K> ^ <nat:12> + <nat:3> \times <var:K> ^ <nat:9> + <nat:4> \times <var:K> ^ <nat:8> + <nat:4> \times <var:K> ^ <nat:6> + <nat:1> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be given using usual Hoare techniques . Going forward , the variable update code \verb | <var:B> := <nat:1> ; | . This takes the condition $ \{ <var:j> = <var:K> \} $ to $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \} $ . Moving on to the next bit of code found in the segment of code , we have the variable binding statement \verb | <var:B> := <nat:2> + <var:B> * <var:j> ; | . This forwards the precondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \} $ to the postcondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> + <nat:2> \} $ . Advancing to the subsequent command seen in our series of instructions , we have the variable assignmet statement \verb | <var:B> := <var:B> * <var:j> ; | . This takes the precondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> + <nat:2> \} $ into $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + \} $ . This is shown to be logically sound with the assignment scheme defined in Hoare logic . Following , we have the variable assignmet code binding $ <var:B> * <var:j> $ into $ <var:B>$ . This moves the condition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + \} $ into the condition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + \} $ . This is ensured using the assignment inference rule defined in typical Hoare techniques . Keeping momentum , we see the command binding $ <nat:3> + <var:B> * <var:j> $ into $ <var:B>$ . This takes the precondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + \} $ toward the postcondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:3> \} $ . Moving on to the next step , we see the variable update line assigning $ <nat:4> + <var:B> * <var:j> $ toward $ <var:B>$ . This command forwards the condition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:3> \} $ into the postcondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> + <nat:4> \} $ . Further , the variable assignmet command \verb | <var:B> := <var:B> * <var:j> ; | . This transfers the precondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> + <nat:4> \} $ toward the postcondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:6> + <nat:2> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + \} $ . This is ensured using the assignment law obtained from standard Hoare techniques . Taking a look at the following line of code found in the set of commands , we see the binding line \verb | <var:B> := <nat:4> + <var:B> * <var:j> ; | . This forwards $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:6> + <nat:2> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + \} $ to the condition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:4> \} $ . This is deduced by the assignment law in usual Hoare techniques . Looking at the next bit of code contained in our series of instructions , we see the statement \verb | <var:B> := <nat:1> + <var:B> * <var:j> ; | . This advances the precondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:4> \} $ toward the postcondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:8> + <nat:2> \times <var:K> ^ <nat:7> + <nat:3> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> + <nat:1> \} $ . This is deduced using the assignment rule given by usual Hoare logic . Advancing to the next step , we have the assignment code \verb | <var:B> := <nat:3> + <var:B> * <var:j> ; | . This statement moves the precondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:8> + <nat:2> \times <var:K> ^ <nat:7> + <nat:3> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> + <nat:1> \} $ toward the condition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:9> + <nat:2> \times <var:K> ^ <nat:8> + <nat:3> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:3> \} $ . This is deduced using the assignment law of Hoare reasoning . Taking another step toward the following line of code in the series of commands , we see the variable update line letting $ <var:B> * <var:j> $ into $ <var:B>$ . This transfers $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:9> + <nat:2> \times <var:K> ^ <nat:8> + <nat:3> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:3> \} $ into $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:10> + <nat:2> \times <var:K> ^ <nat:9> + <nat:3> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + \} $ . This is known to be sound with the assignment scheme given by standard Hoare techniques . Advancing to the next step , we see the assignment code yielding $ <nat:2> + <var:B> * <var:j> $ as $ <var:B>$ . This command redefines $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:10> + <nat:2> \times <var:K> ^ <nat:9> + <nat:3> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + \} $ as $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:11> + <nat:2> \times <var:K> ^ <nat:10> + <nat:3> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:4> + <nat:1> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:2> \} $ . Immediately following , we see the assignment command \verb | <var:B> := <nat:3> + <var:B> * <var:j> ; | . This advances $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:11> + <nat:2> \times <var:K> ^ <nat:10> + <nat:3> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:4> + <nat:1> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:2> \} $ into the condition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:12> + <nat:2> \times <var:K> ^ <nat:11> + <nat:3> \times <var:K> ^ <nat:8> + <nat:4> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:5> + <nat:1> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> + <nat:3> \} $ . Advancing on , the environment update code \verb | <var:B> := <nat:3> + <var:B> * <var:j> | . This line moves the condition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:12> + <nat:2> \times <var:K> ^ <nat:11> + <nat:3> \times <var:K> ^ <nat:8> + <nat:4> \times <var:K> ^ <nat:7> + <nat:4> \times <var:K> ^ <nat:5> + <nat:1> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> + <nat:3> \} $ toward the postcondition $ \{ <var:j> = <var:K> \land <var:B> = <nat:1> \times <var:K> ^ <nat:13> + <nat:2> \times <var:K> ^ <nat:12> + <nat:3> \times <var:K> ^ <nat:9> + <nat:4> \times <var:K> ^ <nat:8> + <nat:4> \times <var:K> ^ <nat:6> + <nat:1> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:3> \} $ . This is sound by the assignment scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:1> ; <var:B> := <nat:2> + <var:B> * <var:j> ; <var:B> := <var:B> * <var:j> ; <var:B> := <var:B> * <var:j> ; <var:B> := <nat:3> + <var:B> * <var:j> ; <var:B> := <nat:4> + <var:B> * <var:j> ; <var:B> := <var:B> * <var:j> ; <var:B> := <nat:4> + <var:B> * <var:j> ; <var:B> := <nat:1> + <var:B> * <var:j> ; <var:B> := <nat:3> + <var:B> * <var:j> ; <var:B> := <var:B> * <var:j> ; <var:B> := <nat:2> + <var:B> * <var:j> ; <var:B> := <nat:3> + <var:B> * <var:j> ; <var:B> := <nat:3> + <var:B> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:j> = <var:K> }} <def:poly> {{ <var:B> = <nat:1> * <var:K> ^ <nat:13> + <nat:2> * <var:K> ^ <nat:12> + <nat:3> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:3> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:8> + <nat:3> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:10> + <nat:2> * <var:K> ^ <nat:9> + <nat:3> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:11> + <nat:2> * <var:K> ^ <nat:10> + <nat:3> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:12> + <nat:2> * <var:K> ^ <nat:11> + <nat:3> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:13> + <nat:2> * <var:K> ^ <nat:12> + <nat:3> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 