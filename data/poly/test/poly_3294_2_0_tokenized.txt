\begin{document} \begin{theorem} We define a program in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:5> ; <var:i> := <var:w0> \end{verbatim} Assume that $ <var:z> = <var:K> $ ahead of the execution of the set of commands it must be that we see $ <var:i> = <nat:5> $ once series of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:K> \} \\ <var:w0> := <nat:5> ; \\ \{ <var:z> = <var:K> \land <var:w0> = <nat:5> \} \\ <var:i> := <var:w0> \\ \{ <var:z> = <var:K> \land <var:i> = <nat:5> \} \end{eqnarray} Using Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:z> = <var:K> }} <var:w0> := <nat:5> ; <var:i> := <var:w0> {{ <var:i> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:K> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:K> /\ <var:i> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 