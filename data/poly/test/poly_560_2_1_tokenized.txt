\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:1> ; <var:E> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:u> = <var:w> $ ( letting $ <var:w> \in \mathbb{Z}^+ $ ) prior to the evaluation of our code segment , it follows that $ <var:E> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the series of instructions can be done with this decorated program . \begin{eqnarray} \{ <var:u> = <var:w> \} \\ <var:G0> := <nat:1> ; \\ \{ <var:u> = <var:w> \land <var:G0> = <nat:1> \} \\ <var:E> := <var:G0> \\ \{ <var:u> = <var:w> \land <var:E> = <nat:1> \} \end{eqnarray} The application of usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:1> ; <var:E> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:u> = <var:w> }} <def:poly> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:w> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:w> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 