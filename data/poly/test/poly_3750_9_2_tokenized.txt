\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:J> := <nat:1> ; <var:J> := <nat:3> + <var:J> * <var:q> ; <var:J> := <nat:2> + <var:J> * <var:q> ; <var:J> := <var:J> * <var:q> ; <var:J> := <nat:3> + <var:J> * <var:q> ; <var:J> := <var:J> * <var:q> ; <var:J> := <nat:1> + <var:J> * <var:q> ; <var:J> := <nat:1> + <var:J> * <var:q> ; <var:J> := <nat:2> + <var:J> * <var:q> \end{verbatim} Allowing that we have $ <var:q> = <var:u> $ ahead of the evaluation of our series of commands , it follows that we have $ <var:J> = <nat:1> \cdot <var:u> ^ <nat:8> + <nat:3> \cdot <var:u> ^ <nat:7> + <nat:2> \cdot <var:u> ^ <nat:6> + <nat:3> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:2> $ after code has exited . \end{theorem} \begin{proof} Applying Hoare logic results in : \begin{eqnarray} \{ <var:q> = <var:u> \} \\ <var:J> := <nat:1> ; \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \} \\ <var:J> := <nat:3> + <var:J> * <var:q> ; \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \cdot <var:u> + <nat:3> \} \\ <var:J> := <nat:2> + <var:J> * <var:q> ; \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:2> \} \\ <var:J> := <var:J> * <var:q> ; \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> + \} \\ <var:J> := <nat:3> + <var:J> * <var:q> ; \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \cdot <var:u> ^ <nat:4> + <nat:3> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:3> \} \\ <var:J> := <var:J> * <var:q> ; \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \cdot <var:u> ^ <nat:5> + <nat:3> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> + \} \\ <var:J> := <nat:1> + <var:J> * <var:q> ; \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \cdot <var:u> ^ <nat:6> + <nat:3> \cdot <var:u> ^ <nat:5> + <nat:2> \cdot <var:u> ^ <nat:4> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:1> \} \\ <var:J> := <nat:1> + <var:J> * <var:q> ; \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \cdot <var:u> ^ <nat:7> + <nat:3> \cdot <var:u> ^ <nat:6> + <nat:2> \cdot <var:u> ^ <nat:5> + <nat:3> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> + <nat:1> \} \\ <var:J> := <nat:2> + <var:J> * <var:q> \\ \{ <var:q> = <var:u> \land <var:J> = <nat:1> \cdot <var:u> ^ <nat:8> + <nat:3> \cdot <var:u> ^ <nat:7> + <nat:2> \cdot <var:u> ^ <nat:6> + <nat:3> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:2> \} \end{eqnarray} Considering the preceding argument , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:q> = <var:u> }} <var:J> := <nat:1> ; <var:J> := <nat:3> + <var:J> * <var:q> ; <var:J> := <nat:2> + <var:J> * <var:q> ; <var:J> := <var:J> * <var:q> ; <var:J> := <nat:3> + <var:J> * <var:q> ; <var:J> := <var:J> * <var:q> ; <var:J> := <nat:1> + <var:J> * <var:q> ; <var:J> := <nat:1> + <var:J> * <var:q> ; <var:J> := <nat:2> + <var:J> * <var:q> {{ <var:J> = <nat:1> * <var:u> ^ <nat:8> + <nat:3> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:3> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> * <var:u> ^ <nat:6> + <nat:3> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> * <var:u> ^ <nat:7> + <nat:3> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:u> /\ <var:J> = <nat:1> * <var:u> ^ <nat:8> + <nat:3> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 