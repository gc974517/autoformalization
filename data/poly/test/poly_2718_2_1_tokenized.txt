\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:3> ; <var:v> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Allowing $ <var:w> = <var:D> $ before the evaluation of our code it holds that we have $ <var:v> = <nat:3> $ when segment of code exits . \end{theorem} \begin{proof} The proof of our code is demonstrated by usual Hoare reasoning . Observing the subsequent pieces of code seen in our series of instructions , \verb | { <var:w> = <var:D> } <var:i0> := <nat:3> { <var:w> = <var:D> \land <var:i0> = <nat:3> } | and \verb | { <var:w> = <var:D> \land <var:i0> = <nat:3> } <var:v> := <var:i0{ <var:w> = <var:D> \land <var:v> = <nat:3> } | . This is sound using the assignment scheme of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:v> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <def:poly> {{ <var:v> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:v> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 