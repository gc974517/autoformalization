\begin{document} \begin{theorem} Let the following segment of code as follows \begin{verbatim} <var:n1> := <var:o> ; <var:n2> := <var:n1> * <var:o> ; <var:n3> := <var:n2> * <var:o> ; <var:n0> := <nat:5> ; <var:n1> := <var:n1> * <nat:6> ; <var:n2> := <var:n2> * <nat:1> ; <var:n3> := <var:n3> * <nat:7> ; <var:m> := <var:n3> <var:m> := <var:m> + <var:n2> <var:m> := <var:m> + <var:n1> <var:m> := <var:m> + <var:n0> \end{verbatim} Allowing taking positive numbers $ <var:p> $ it to be that $ <var:o> = <var:p> $ prior to running our series of instructions , it holds that we see $ <var:m> = <nat:7> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:6> \cdot <var:p> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the program can be shown by typical Hoare reasoning . Advancing to the next commands in the segment of code , we see \begin{eqnarray} \{ <var:o> = <var:p> \} \, <var:n1> := <var:o> \, \{ <var:o> = <var:p> \land <var:n1> = <var:p> \} \\ \{ <var:o> = <var:p> \land <var:n1> = <var:p> \} \, <var:n2> := <var:n1> * <var:o> \, \{ <var:o> = <var:p> \land <var:n1> = <var:p> \land <var:n2> = <var:p> ^ <nat:2> \} \\ \{ <var:o> = <var:p> \land <var:n1> = <var:p> \land <var:n2> = <var:p> ^ <nat:2> \} \, <var:n3> := <var:n2> * <var:o> \, \{ <var:o> = <var:p> \land <var:n1> = <var:p> \land <var:n2> = <var:p> ^ <nat:2> \land <var:n3> = <var:p> ^ <nat:3> \} \\ \{ <var:o> = <var:p> \land <var:n1> = <var:p> \land <var:n2> = <var:p> ^ <nat:2> \land <var:n3> = <var:p> ^ <nat:3> \} \, <var:n0> := <nat:5> \, \{ <var:o> = <var:p> \land <var:n1> = <var:p> \land <var:n2> = <var:p> ^ <nat:2> \land <var:n3> = <var:p> ^ <nat:3> \land <var:n0> = <nat:5> \} \\ \{ <var:o> = <var:p> \land <var:n1> = <var:p> \land <var:n2> = <var:p> ^ <nat:2> \land <var:n3> = <var:p> ^ <nat:3> \land <var:n0> = <nat:5> \} \, <var:n1> := <var:n1> * <nat:6> \, \{ <var:o> = <var:p> \land <var:n1> = <nat:6> * <var:p> \land <var:n2> = <var:p> ^ <nat:2> \land <var:n3> = <var:p> ^ <nat:3> \land <var:n0> = <nat:5> \} \\ \{ <var:o> = <var:p> \land <var:n1> = <nat:6> * <var:p> \land <var:n2> = <var:p> ^ <nat:2> \land <var:n3> = <var:p> ^ <nat:3> \land <var:n0> = <nat:5> \} \, <var:n2> := <var:n2> * <nat:1> \, \{ <var:o> = <var:p> \land <var:n1> = <nat:6> * <var:p> \land <var:n2> = <nat:1> * <var:p> ^ <nat:2> \land <var:n3> = <var:p> ^ <nat:3> \land <var:n0> = <nat:5> \} \\ \{ <var:o> = <var:p> \land <var:n1> = <nat:6> * <var:p> \land <var:n2> = <nat:1> * <var:p> ^ <nat:2> \land <var:n3> = <var:p> ^ <nat:3> \land <var:n0> = <nat:5> \} \, <var:n3> := <var:n3> * <nat:7> \, \{ <var:o> = <var:p> \land <var:n1> = <nat:6> * <var:p> \land <var:n2> = <nat:1> * <var:p> ^ <nat:2> \land <var:n3> = <nat:7> * <var:p> ^ <nat:3> \land <var:n0> = <nat:5> \} \\ \{ <var:o> = <var:p> \land <var:n1> = <nat:6> * <var:p> \land <var:n2> = <nat:1> * <var:p> ^ <nat:2> \land <var:n3> = <nat:7> * <var:p> ^ <nat:3> \land <var:n0> = <nat:5> \} \, <var:m> := <var:n3\, \{ <var:o> = <var:p> \land <var:n1> = <nat:6> * <var:p> \land <var:n2> = <nat:1> * <var:p> ^ <nat:2> \land <var:n0> = <nat:5> \land <var:m> = <nat:7> * <var:p> ^ <nat:3> \} \end{eqnarray} This is guaranteed by the variable binding scheme obtained from typical Hoare logic . Honing in on the next lines of codeseen in our program , we have \begin{eqnarray} \{ <var:o> = <var:p> \} \, <var:n1> := <var:o> \, \{ <var:o> = <var:p> \land <var:n1> = <var:p> \} \\ \{ <var:o> = <var:p> \land <var:n1> = <var:p> \} \, <var:n2> := <var:n1> * <var:o> \, \{ <var:o> = <var:p> \land <var:n1> = <var:p> \land <var:n2> = <var:p> ^ <nat:2> \} \end{eqnarray} This is ensured with the variable binding inference rule from typical Hoare reasoning . Moving on to the next line found in the code , we have \begin{eqnarray} \{ <var:o> = <var:p> \} \, <var:n1> := <var:o> \, \{ <var:o> = <var:p> \land <var:n1> = <var:p> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:o> = <var:p> }} <var:n1> := <var:o> ; <var:n2> := <var:n1> * <var:o> ; <var:n3> := <var:n2> * <var:o> ; <var:n0> := <nat:5> ; <var:n1> := <var:n1> * <nat:6> ; <var:n2> := <var:n2> * <nat:1> ; <var:n3> := <var:n3> * <nat:7> ; <var:m> := <var:n3> <var:m> := <var:m> + <var:n2> <var:m> := <var:m> + <var:n1> <var:m> := <var:m> + <var:n0> {{ <var:m> = <nat:7> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:6> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <var:p> /\ <var:n2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <var:p> /\ <var:n2> = <var:p> ^ <nat:2> /\ <var:n3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <var:p> /\ <var:n2> = <var:p> ^ <nat:2> /\ <var:n3> = <var:p> ^ <nat:3> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <nat:6> * <var:p> /\ <var:n2> = <var:p> ^ <nat:2> /\ <var:n3> = <var:p> ^ <nat:3> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <nat:6> * <var:p> /\ <var:n2> = <nat:1> * <var:p> ^ <nat:2> /\ <var:n3> = <var:p> ^ <nat:3> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <nat:6> * <var:p> /\ <var:n2> = <nat:1> * <var:p> ^ <nat:2> /\ <var:n3> = <nat:7> * <var:p> ^ <nat:3> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <nat:6> * <var:p> /\ <var:n2> = <nat:1> * <var:p> ^ <nat:2> /\ <var:n0> = <nat:5> /\ <var:m> = <nat:7> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n1> = <nat:6> * <var:p> /\ <var:n0> = <nat:5> /\ <var:m> = <nat:7> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:n0> = <nat:5> /\ <var:m> = <nat:7> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:m> = <nat:7> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:6> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 