\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as \begin{verbatim} <var:g> := <nat:2> ; <var:g> := <var:g> * <var:H> ; <var:g> := <var:g> * <var:H> ; <var:g> := <nat:3> + <var:g> * <var:H> ; <var:g> := <nat:3> + <var:g> * <var:H> ; <var:g> := <nat:1> + <var:g> * <var:H> ; <var:g> := <var:g> * <var:H> ; <var:g> := <nat:1> + <var:g> * <var:H> ; <var:g> := <nat:2> + <var:g> * <var:H> ; <var:g> := <nat:1> + <var:g> * <var:H> ; <var:g> := <nat:4> + <var:g> * <var:H> ; <var:g> := <nat:3> + <var:g> * <var:H> ; <var:g> := <nat:4> + <var:g> * <var:H> ; <var:g> := <nat:2> + <var:g> * <var:H> \end{verbatim} Assuming with some $ <var:V> $ it to be that $ <var:H> = <var:V> $ before running the set of instructions , it holds that $ <var:g> = <nat:2> \cdot <var:V> ^ <nat:13> + <nat:3> \cdot <var:V> ^ <nat:10> + <nat:3> \cdot <var:V> ^ <nat:9> + <nat:1> \cdot <var:V> ^ <nat:8> + <nat:1> \cdot <var:V> ^ <nat:6> + <nat:2> \cdot <var:V> ^ <nat:5> + <nat:1> \cdot <var:V> ^ <nat:4> + <nat:4> \cdot <var:V> ^ <nat:3> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is given by usual Hoare techniques . Moving on to the proceeding bits of codeseen in our list of commands , we see \begin{eqnarray} \{ <var:H> = <var:V> \} \, <var:g> := <nat:2> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> \} \, <var:g> := <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> + \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> + \} \, <var:g> := <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:2> + \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:2> + \} \, <var:g> := <nat:3> + <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:3> + <nat:3> \} \end{eqnarray} This is rigorously given through the scheme found in standard Hoare logic . Focusing on the proceeding bits of codecontained in our list of commands , \begin{eqnarray} \{ <var:H> = <var:V> \} \, <var:g> := <nat:2> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> \} \, <var:g> := <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> + \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> + \} \, <var:g> := <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:2> + \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:2> + \} \, <var:g> := <nat:3> + <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:3> + <nat:3> \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:3> + <nat:3> \} \, <var:g> := <nat:3> + <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> + <nat:3> \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> + <nat:3> \} \, <var:g> := <nat:1> + <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> \} \, <var:g> := <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + \} \, <var:g> := <nat:1> + <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> \} \\ \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> \} \, <var:g> := <nat:2> + <var:g> * <var:H> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:2> \} \end{eqnarray} This is sound with the variable binding scheme of standard Hoare techniques . Advancing to the proceeding piece of code found in the list of instructions , \begin{eqnarray} \{ <var:H> = <var:V> \} \, <var:g> := <nat:2> \, \{ <var:H> = <var:V> \land <var:g> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:H> = <var:V> }} <var:g> := <nat:2> ; <var:g> := <var:g> * <var:H> ; <var:g> := <var:g> * <var:H> ; <var:g> := <nat:3> + <var:g> * <var:H> ; <var:g> := <nat:3> + <var:g> * <var:H> ; <var:g> := <nat:1> + <var:g> * <var:H> ; <var:g> := <var:g> * <var:H> ; <var:g> := <nat:1> + <var:g> * <var:H> ; <var:g> := <nat:2> + <var:g> * <var:H> ; <var:g> := <nat:1> + <var:g> * <var:H> ; <var:g> := <nat:4> + <var:g> * <var:H> ; <var:g> := <nat:3> + <var:g> * <var:H> ; <var:g> := <nat:4> + <var:g> * <var:H> ; <var:g> := <nat:2> + <var:g> * <var:H> {{ <var:g> = <nat:2> * <var:V> ^ <nat:13> + <nat:3> * <var:V> ^ <nat:10> + <nat:3> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:9> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:10> + <nat:3> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:11> + <nat:3> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:12> + <nat:3> * <var:V> ^ <nat:9> + <nat:3> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:V> /\ <var:g> = <nat:2> * <var:V> ^ <nat:13> + <nat:3> * <var:V> ^ <nat:10> + <nat:3> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 