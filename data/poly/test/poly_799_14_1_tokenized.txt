\begin{document} \begin{theorem} Take a list of instructions such that \begin{verbatim} <var:J1> := <var:s> ; <var:J2> := <var:J1> * <var:s> ; <var:J3> := <var:J2> * <var:s> ; <var:J4> := <var:J3> * <var:s> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:8> ; <var:J2> := <var:J2> * <nat:6> ; <var:J3> := <var:J3> * <nat:9> ; <var:J4> := <var:J4> * <nat:3> ; <var:j> := <var:J4> <var:j> := <var:j> + <var:J3> <var:j> := <var:j> + <var:J2> <var:j> := <var:j> + <var:J1> <var:j> := <var:j> + <var:J0> \end{verbatim} Assuming ( given $ <var:a> \in \mathbb{N} $ ) it to be that $ <var:s> = <var:a> $ before the execution of the set of instructions , it holds that $ <var:j> = <nat:3> \times <var:a> ^ <nat:4> + <nat:9> \times <var:a> ^ <nat:3> + <nat:6> \times <var:a> ^ <nat:2> + <nat:8> \times <var:a> + <nat:8> $ after series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:a> \} \\ <var:J1> := <var:s> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <var:a> \} \\ <var:J2> := <var:J1> * <var:s> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <var:a> \land <var:J2> = <var:a> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:s> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <var:a> \land <var:J2> = <var:a> ^ <nat:2> \land <var:J3> = <var:a> ^ <nat:3> \} \\ <var:J4> := <var:J3> * <var:s> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <var:a> \land <var:J2> = <var:a> ^ <nat:2> \land <var:J3> = <var:a> ^ <nat:3> \land <var:J4> = <var:a> ^ <nat:4> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <var:a> \land <var:J2> = <var:a> ^ <nat:2> \land <var:J3> = <var:a> ^ <nat:3> \land <var:J4> = <var:a> ^ <nat:4> \land <var:J0> = <nat:8> \} \\ <var:J1> := <var:J1> * <nat:8> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <nat:8> \times <var:a> \land <var:J2> = <var:a> ^ <nat:2> \land <var:J3> = <var:a> ^ <nat:3> \land <var:J4> = <var:a> ^ <nat:4> \land <var:J0> = <nat:8> \} \\ <var:J2> := <var:J2> * <nat:6> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <nat:8> \times <var:a> \land <var:J2> = <nat:6> \times <var:a> ^ <nat:2> \land <var:J3> = <var:a> ^ <nat:3> \land <var:J4> = <var:a> ^ <nat:4> \land <var:J0> = <nat:8> \} \\ <var:J3> := <var:J3> * <nat:9> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <nat:8> \times <var:a> \land <var:J2> = <nat:6> \times <var:a> ^ <nat:2> \land <var:J3> = <nat:9> \times <var:a> ^ <nat:3> \land <var:J4> = <var:a> ^ <nat:4> \land <var:J0> = <nat:8> \} \\ <var:J4> := <var:J4> * <nat:3> ; \\ \{ <var:s> = <var:a> \land <var:J1> = <nat:8> \times <var:a> \land <var:J2> = <nat:6> \times <var:a> ^ <nat:2> \land <var:J3> = <nat:9> \times <var:a> ^ <nat:3> \land <var:J4> = <nat:3> \times <var:a> ^ <nat:4> \land <var:J0> = <nat:8> \} \\ <var:j> := <var:J4> \\ \{ <var:s> = <var:a> \land <var:J1> = <nat:8> \times <var:a> \land <var:J2> = <nat:6> \times <var:a> ^ <nat:2> \land <var:J3> = <nat:9> \times <var:a> ^ <nat:3> \land <var:J0> = <nat:8> \land <var:j> = <nat:3> \times <var:a> ^ <nat:4> \} \\ <var:j> := <var:j> + <var:J3> \\ \{ <var:s> = <var:a> \land <var:J1> = <nat:8> \times <var:a> \land <var:J2> = <nat:6> \times <var:a> ^ <nat:2> \land <var:J0> = <nat:8> \land <var:j> = <nat:3> \times <var:a> ^ <nat:4> + <nat:9> \times <var:a> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:J2> \\ \{ <var:s> = <var:a> \land <var:J1> = <nat:8> \times <var:a> \land <var:J0> = <nat:8> \land <var:j> = <nat:3> \times <var:a> ^ <nat:4> + <nat:9> \times <var:a> ^ <nat:3> + <nat:6> \times <var:a> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:J1> \\ \{ <var:s> = <var:a> \land <var:J0> = <nat:8> \land <var:j> = <nat:3> \times <var:a> ^ <nat:4> + <nat:9> \times <var:a> ^ <nat:3> + <nat:6> \times <var:a> ^ <nat:2> + <nat:8> \times <var:a> \} \\ <var:j> := <var:j> + <var:J0> \\ \{ <var:s> = <var:a> \land <var:j> = <nat:3> \times <var:a> ^ <nat:4> + <nat:9> \times <var:a> ^ <nat:3> + <nat:6> \times <var:a> ^ <nat:2> + <nat:8> \times <var:a> + <nat:8> \} \end{eqnarray} The application of typical Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:s> = <var:a> }} <var:J1> := <var:s> ; <var:J2> := <var:J1> * <var:s> ; <var:J3> := <var:J2> * <var:s> ; <var:J4> := <var:J3> * <var:s> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:8> ; <var:J2> := <var:J2> * <nat:6> ; <var:J3> := <var:J3> * <nat:9> ; <var:J4> := <var:J4> * <nat:3> ; <var:j> := <var:J4> <var:j> := <var:j> + <var:J3> <var:j> := <var:j> + <var:J2> <var:j> := <var:j> + <var:J1> <var:j> := <var:j> + <var:J0> {{ <var:j> = <nat:3> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:6> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <var:a> /\ <var:J2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <var:a> /\ <var:J2> = <var:a> ^ <nat:2> /\ <var:J3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <var:a> /\ <var:J2> = <var:a> ^ <nat:2> /\ <var:J3> = <var:a> ^ <nat:3> /\ <var:J4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <var:a> /\ <var:J2> = <var:a> ^ <nat:2> /\ <var:J3> = <var:a> ^ <nat:3> /\ <var:J4> = <var:a> ^ <nat:4> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <nat:8> * <var:a> /\ <var:J2> = <var:a> ^ <nat:2> /\ <var:J3> = <var:a> ^ <nat:3> /\ <var:J4> = <var:a> ^ <nat:4> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <nat:8> * <var:a> /\ <var:J2> = <nat:6> * <var:a> ^ <nat:2> /\ <var:J3> = <var:a> ^ <nat:3> /\ <var:J4> = <var:a> ^ <nat:4> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <nat:8> * <var:a> /\ <var:J2> = <nat:6> * <var:a> ^ <nat:2> /\ <var:J3> = <nat:9> * <var:a> ^ <nat:3> /\ <var:J4> = <var:a> ^ <nat:4> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <nat:8> * <var:a> /\ <var:J2> = <nat:6> * <var:a> ^ <nat:2> /\ <var:J3> = <nat:9> * <var:a> ^ <nat:3> /\ <var:J4> = <nat:3> * <var:a> ^ <nat:4> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <nat:8> * <var:a> /\ <var:J2> = <nat:6> * <var:a> ^ <nat:2> /\ <var:J3> = <nat:9> * <var:a> ^ <nat:3> /\ <var:J0> = <nat:8> /\ <var:j> = <nat:3> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <nat:8> * <var:a> /\ <var:J2> = <nat:6> * <var:a> ^ <nat:2> /\ <var:J0> = <nat:8> /\ <var:j> = <nat:3> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J1> = <nat:8> * <var:a> /\ <var:J0> = <nat:8> /\ <var:j> = <nat:3> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:6> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:J0> = <nat:8> /\ <var:j> = <nat:3> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:6> * <var:a> ^ <nat:2> + <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:j> = <nat:3> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:6> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 