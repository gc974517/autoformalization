\begin{document} \begin{theorem} Let the following program as follows \begin{verbatim} <var:C1> := <var:F> ; <var:C2> := <var:C1> * <var:F> ; <var:C0> := <nat:6> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:2> ; <var:K> := <var:C2> <var:K> := <var:K> + <var:C1> <var:K> := <var:K> + <var:C0> \end{verbatim} Allowing $ <var:F> = <var:G> $ ahead of evaluating the list of instructions , it holds that $ <var:K> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:6> \cdot <var:G> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:G> \} \\ <var:C1> := <var:F> ; \\ \{ <var:F> = <var:G> \land <var:C1> = <var:G> \} \\ <var:C2> := <var:C1> * <var:F> ; \\ \{ <var:F> = <var:G> \land <var:C1> = <var:G> \land <var:C2> = <var:G> ^ <nat:2> \} \\ <var:C0> := <nat:6> ; \\ \{ <var:F> = <var:G> \land <var:C1> = <var:G> \land <var:C2> = <var:G> ^ <nat:2> \land <var:C0> = <nat:6> \} \\ <var:C1> := <var:C1> * <nat:6> ; \\ \{ <var:F> = <var:G> \land <var:C1> = <nat:6> \cdot <var:G> \land <var:C2> = <var:G> ^ <nat:2> \land <var:C0> = <nat:6> \} \\ <var:C2> := <var:C2> * <nat:2> ; \\ \{ <var:F> = <var:G> \land <var:C1> = <nat:6> \cdot <var:G> \land <var:C2> = <nat:2> \cdot <var:G> ^ <nat:2> \land <var:C0> = <nat:6> \} \\ <var:K> := <var:C2> \\ \{ <var:F> = <var:G> \land <var:C1> = <nat:6> \cdot <var:G> \land <var:C0> = <nat:6> \land <var:K> = <nat:2> \cdot <var:G> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:C1> \\ \{ <var:F> = <var:G> \land <var:C0> = <nat:6> \land <var:K> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:6> \cdot <var:G> \} \\ <var:K> := <var:K> + <var:C0> \\ \{ <var:F> = <var:G> \land <var:K> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:6> \cdot <var:G> + <nat:6> \} \end{eqnarray} The application of standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:F> = <var:G> }} <var:C1> := <var:F> ; <var:C2> := <var:C1> * <var:F> ; <var:C0> := <nat:6> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:2> ; <var:K> := <var:C2> <var:K> := <var:K> + <var:C1> <var:K> := <var:K> + <var:C0> {{ <var:K> = <nat:2> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:C1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:C1> = <var:G> /\ <var:C2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:C1> = <var:G> /\ <var:C2> = <var:G> ^ <nat:2> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:C1> = <nat:6> * <var:G> /\ <var:C2> = <var:G> ^ <nat:2> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:C1> = <nat:6> * <var:G> /\ <var:C2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:C1> = <nat:6> * <var:G> /\ <var:C0> = <nat:6> /\ <var:K> = <nat:2> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:C0> = <nat:6> /\ <var:K> = <nat:2> * <var:G> ^ <nat:2> + <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:K> = <nat:2> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 