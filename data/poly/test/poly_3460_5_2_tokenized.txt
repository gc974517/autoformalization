\begin{document} \begin{theorem} Consider a series of commands such that \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <nat:1> + <var:u> * <var:W> ; <var:u> := <var:u> * <var:W> ; <var:u> := <nat:2> + <var:u> * <var:W> ; <var:u> := <nat:1> + <var:u> * <var:W> \end{verbatim} Allow it to hold that $ <var:W> = <var:V> $ ahead of running our series of instructions it holds that we see $ <var:u> = <nat:2> \cdot <var:V> ^ <nat:4> + <nat:1> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program can be seen with usual Hoare logic . Now , we have the binding command \verb | <var:u> := <nat:2> ; | . This forwards the precondition $ \{ <var:W> = <var:V> \} $ to the condition $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule obtained from typical Hoare logic . Moving on to the subsequent line of code seen in the series of instructions , we see the assignment command \verb | <var:u> := <nat:1> + <var:u> * <var:W> ; | . This redefines $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \} $ as the condition $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \times <var:V> + <nat:1> \} $ . This is shown through the assignment law found in usual Hoare logic . Stepping through , we see the variable update line \verb | <var:u> := <var:u> * <var:W> ; | . This command transfers $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \times <var:V> + <nat:1> \} $ toward $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + \} $ . This is ensured by the assignment inference rule in typical Hoare logic . Advancing to the following step seen in the list of commands , we see the variable assignmet line \verb | <var:u> := <nat:2> + <var:u> * <var:W> ; | . This advances the condition $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + \} $ as $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:2> \} $ . Jumping to the upcoming step found in our series of commands , the variable binding code defining $ <nat:1> + <var:u> * <var:W$ into $ <var:u>$ . This forwards the precondition $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:2> \} $ into the condition $ \{ <var:W> = <var:V> \land <var:u> = <nat:2> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:W> = <var:V> }} <var:u> := <nat:2> ; <var:u> := <nat:1> + <var:u> * <var:W> ; <var:u> := <var:u> * <var:W> ; <var:u> := <nat:2> + <var:u> * <var:W> ; <var:u> := <nat:1> + <var:u> * <var:W> {{ <var:u> = <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:u> = <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:u> = <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:u> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:u> = <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 