\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:1> ; <var:l> := <var:M0> \end{verbatim} Assuming that we have $ <var:c> = <var:i> $ --- given some $ <var:i> \in \mathbb{Z}^+ $ --- ahead of interpreting our series of commands it must be that we have $ <var:l> = <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this segment of code can be done using Hoare techniques . Moving on to the next command contained in the set of commands , we see the assignment command letting $ <nat:1> $ into $ <var:M0>$ . This forwards $ \{ <var:c> = <var:i> \} $ into the condition $ \{ <var:c> = <var:i> \land <var:M0> = <nat:1> \} $ . Moving on to the upcoming bit of code in the list of commands , we have the variable assignmet statement \verb | <var:l> := <var:M0> | . This takes the condition $ \{ <var:c> = <var:i> \land <var:M0> = <nat:1> \} $ to the postcondition $ \{ <var:c> = <var:i> \land <var:l> = <nat:1> \} $ . This is given by the assignment scheme given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <var:M0> := <nat:1> ; <var:l> := <var:M0> {{ <var:l> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:l> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 