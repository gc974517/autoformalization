\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:1> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:P> ; <var:g2> := <nat:4> ; <var:g2> := <var:g2> * <var:P> ; <var:g2> := <var:g2> * <var:P> ; <var:f> := <var:g2> ; <var:f> := <var:f> + <var:g1> ; <var:f> := <var:f> + <var:g0> \end{verbatim} Assume it to be that $ <var:P> = <var:B> $ ahead of the evaluation of our series of instructions , it follows that we see $ <var:f> = <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:P> = <var:B> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:P> = <var:B> \land <var:g0> = <nat:1> \} \\ <var:g1> := <nat:7> ; \\ \{ <var:P> = <var:B> \land <var:g0> = <nat:1> \land <var:g1> = <nat:7> \} \\ <var:g1> := <var:g1> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:g0> = <nat:1> \land <var:g1> = <nat:7> \times <var:B> \} \\ <var:g2> := <nat:4> ; \\ \{ <var:P> = <var:B> \land <var:g0> = <nat:1> \land <var:g1> = <nat:7> \times <var:B> \land <var:g2> = <nat:4> \} \\ <var:g2> := <var:g2> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:g0> = <nat:1> \land <var:g1> = <nat:7> \times <var:B> \land <var:g2> = <nat:4> \times <var:B> \} \\ <var:g2> := <var:g2> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:g0> = <nat:1> \land <var:g1> = <nat:7> \times <var:B> \land <var:g2> = <nat:4> \times <var:B> ^ <nat:2> \} \\ <var:f> := <var:g2> ; \\ \{ <var:P> = <var:B> \land <var:g0> = <nat:1> \land <var:g1> = <nat:7> \times <var:B> \land <var:f> = <nat:4> \times <var:B> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:g1> ; \\ \{ <var:P> = <var:B> \land <var:g0> = <nat:1> \land <var:f> = <nat:4> \times <var:B> ^ <nat:2> + <nat:7> \times <var:B> \} \\ <var:f> := <var:f> + <var:g0> \\ \{ <var:P> = <var:B> \land <var:f> = <nat:4> \times <var:B> ^ <nat:2> + <nat:7> \times <var:B> + <nat:1> \} \end{eqnarray} Considering the above , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:P> = <var:B> }} <var:g0> := <nat:1> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:P> ; <var:g2> := <nat:4> ; <var:g2> := <var:g2> * <var:P> ; <var:g2> := <var:g2> * <var:P> ; <var:f> := <var:g2> ; <var:f> := <var:f> + <var:g1> ; <var:f> := <var:f> + <var:g0> {{ <var:f> = <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:7> * <var:B> /\ <var:g2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:7> * <var:B> /\ <var:g2> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:7> * <var:B> /\ <var:g2> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:7> * <var:B> /\ <var:f> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:g0> = <nat:1> /\ <var:f> = <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 