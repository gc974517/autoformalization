\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <var:V> * <var:H> ; <var:V> := <nat:4> + <var:V> * <var:H> ; <var:V> := <nat:3> + <var:V> * <var:H> ; <var:V> := <nat:2> + <var:V> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Given --- given every natural coefficients $ <var:q> $ --- $ <var:H> = <var:q> $ ahead of executing this set of commands it holds that $ <var:V> = <nat:4> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:2> $ . \end{theorem} \begin{proof} We can see that the following decorated series of instructions . \begin{eqnarray} \{ <var:H> = <var:q> \} \\ <var:V> := <nat:4> ; \\ \{ <var:H> = <var:q> \land <var:V> = <nat:4> \} \\ <var:V> := <var:V> * <var:H> ; \\ \{ <var:H> = <var:q> \land <var:V> = <nat:4> * <var:q> + \} \\ <var:V> := <nat:4> + <var:V> * <var:H> ; \\ \{ <var:H> = <var:q> \land <var:V> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> \} \\ <var:V> := <nat:3> + <var:V> * <var:H> ; \\ \{ <var:H> = <var:q> \land <var:V> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + <nat:3> \} \\ <var:V> := <nat:2> + <var:V> * <var:H> \\ \{ <var:H> = <var:q> \land <var:V> = <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> \} \end{eqnarray} Applying usual Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:4> ; <var:V> := <var:V> * <var:H> ; <var:V> := <nat:4> + <var:V> * <var:H> ; <var:V> := <nat:3> + <var:V> * <var:H> ; <var:V> := <nat:2> + <var:V> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:H> = <var:q> }} <def:poly> {{ <var:V> = <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:V> = <nat:4> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:V> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:V> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:V> = <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 