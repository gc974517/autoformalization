\begin{document} \begin{theorem} Let the following series of commands as follows \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:K> ; <var:R> := <var:Y1> ; <var:R> := <var:R> + <var:Y0> \end{verbatim} Given it to be that $ <var:K> = <var:s> $ prior to interpreting our series of instructions , it follows that we have $ <var:R> = <nat:5> \cdot <var:s> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be done through the below decorated code segment . \begin{eqnarray} \{ <var:K> = <var:s> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:K> = <var:s> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <nat:5> ; \\ \{ <var:K> = <var:s> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:5> \} \\ <var:Y1> := <var:Y1> * <var:K> ; \\ \{ <var:K> = <var:s> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:5> \times <var:s> \} \\ <var:R> := <var:Y1> ; \\ \{ <var:K> = <var:s> \land <var:Y0> = <nat:7> \land <var:R> = <nat:5> \times <var:s> \} \\ <var:R> := <var:R> + <var:Y0> \\ \{ <var:K> = <var:s> \land <var:R> = <nat:5> \times <var:s> + <nat:7> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:K> = <var:s> }} <var:Y0> := <nat:7> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:K> ; <var:R> := <var:Y1> ; <var:R> := <var:R> + <var:Y0> {{ <var:R> = <nat:5> * <var:s> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:Y0> = <nat:7> /\ <var:R> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:R> = <nat:5> * <var:s> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 