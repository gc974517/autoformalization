\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:G> := <nat:3> ; <var:G> := <var:G> * <var:k> ; <var:G> := <nat:3> + <var:G> * <var:k> ; <var:G> := <var:G> * <var:k> ; <var:G> := <var:G> * <var:k> ; <var:G> := <nat:2> + <var:G> * <var:k> ; <var:G> := <var:G> * <var:k> ; <var:G> := <nat:3> + <var:G> * <var:k> \end{verbatim} Allowing it to hold that $ <var:k> = <var:n> $ before evaluating the code segment , it holds that we have $ <var:G> = <nat:3> \times <var:n> ^ <nat:7> + <nat:3> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:2> + <nat:3> $ after series of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be done using standard Hoare techniques . After , the variable update statement \verb | <var:G> := <nat:3> ; | . This takes the precondition $ \{ <var:k> = <var:n> \} $ toward the postcondition $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \} $ . Moving forward to the next statement contained in our list of commands , we see the command \verb | <var:G> := <var:G> * <var:k> ; | . This redefines the condition $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \} $ into $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> + \} $ . This is shown to be logically sound by the assignment scheme from standard Hoare logic . Taking a look at the subsequent command seen in our program , we see the binding statement assigning $ <nat:3> + <var:G> * <var:k> $ toward $ <var:G>$ . This forwards $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> + \} $ toward the condition $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:2> + <nat:3> \} $ . This is guaranteed using the assignment inference rule from Hoare techniques . Shifting focus toward the proceeding bit of code seen in our list of commands , we see the variable update statement defining $ <var:G> * <var:k> $ toward $ <var:G>$ . This code transfers $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:2> + <nat:3> \} $ toward the postcondition $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> + \} $ . This is rigorously given through the assignment law in usual Hoare logic . Focusing on the proceeding statement in our program , we see the variable update statement \verb | <var:G> := <var:G> * <var:k> ; | . This statement redefines $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> + \} $ to $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:4> + <nat:3> \cdot <var:n> ^ <nat:2> + \} $ . This is ensured through the assignment scheme of typical Hoare techniques . Advancing , we have the assignment code letting $ <nat:2> + <var:G> * <var:k> $ as $ <var:G>$ . This redefines $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:4> + <nat:3> \cdot <var:n> ^ <nat:2> + \} $ toward the postcondition $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:5> + <nat:3> \cdot <var:n> ^ <nat:3> + <nat:2> \} $ . Shifting focus toward the upcoming step seen in our list of commands , we see the line \verb | <var:G> := <var:G> * <var:k> ; | . This moves $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:5> + <nat:3> \cdot <var:n> ^ <nat:3> + <nat:2> \} $ to the postcondition $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:6> + <nat:3> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> + \} $ . This is shown to be logically sound with the assignment inference rule given in standard Hoare techniques . Moving forward to the next step , we see the statement \verb | <var:G> := <nat:3> + <var:G> * <var:k> | . This line takes $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:6> + <nat:3> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> + \} $ into $ \{ <var:k> = <var:n> \land <var:G> = <nat:3> \cdot <var:n> ^ <nat:7> + <nat:3> \cdot <var:n> ^ <nat:5> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:3> \} $ . This is shown by the assignment scheme from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:k> = <var:n> }} <var:G> := <nat:3> ; <var:G> := <var:G> * <var:k> ; <var:G> := <nat:3> + <var:G> * <var:k> ; <var:G> := <var:G> * <var:k> ; <var:G> := <var:G> * <var:k> ; <var:G> := <nat:2> + <var:G> * <var:k> ; <var:G> := <var:G> * <var:k> ; <var:G> := <nat:3> + <var:G> * <var:k> {{ <var:G> = <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:G> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:G> = <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:G> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:G> = <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:G> = <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:G> = <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:G> = <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:G> = <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 