\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:q> := <nat:3> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <nat:2> + <var:q> * <var:P> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <var:q> * <var:P> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <nat:3> + <var:q> * <var:P> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <nat:2> + <var:q> * <var:P> ; <var:q> := <nat:1> + <var:q> * <var:P> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <nat:2> + <var:q> * <var:P> \end{verbatim} Allowing it to hold that $ <var:P> = <var:v> $ , for every $ <var:v> \in \mathbb{Z}^+ $ , ahead of interpreting our set of commands it holds that we see $ <var:q> = <nat:3> * <var:v> ^ <nat:11> + <nat:4> * <var:v> ^ <nat:10> + <nat:2> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is accomplished by Hoare logic . Jumping to the following piece of code seen in the series of commands , we have the variable update code \verb | <var:q> := <nat:3> ; | . This statement moves the precondition $ \{ <var:P> = <var:v> \} $ as the postcondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \} $ . This is shown using the assignment law found in standard Hoare logic . Shifting focus toward the next bit of code in the code segment , the environment update command \verb | <var:q> := <nat:4> + <var:q> * <var:P> ; | . This code redefines the precondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \} $ toward the postcondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> + <nat:4> \} $ . This is known to be sound by the assignment rule obtained from standard Hoare reasoning . Taking a look at the upcoming command seen in our list of commands , we have the assignment line giving $ <nat:2> + <var:q> * <var:P> $ as $ <var:q>$ . This transfers the condition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> + <nat:4> \} $ into the postcondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} $ . This is known to be sound with the assignment rule obtained from typical Hoare reasoning . Stepping through , the binding line yielding $ <nat:4> + <var:q> * <var:P> $ as $ <var:q>$ . This statement moves the condition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} $ as the condition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:4> \} $ . Keeping momentum , the variable update statement \verb | <var:q> := <var:q> * <var:P> ; | . This statement advances $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:4> \} $ into the postcondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + \} $ . Following , we have the variable update command \verb | <var:q> := <nat:4> + <var:q> * <var:P> ; | . This advances $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + \} $ toward the condition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:2> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:4> \} $ . Following , we have the variable binding command \verb | <var:q> := <nat:3> + <var:q> * <var:P> ; | . This advances the condition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:2> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:4> \} $ as the postcondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:6> + <nat:4> \cdot <var:v> ^ <nat:5> + <nat:2> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> + <nat:3> \} $ . This is ensured through the assignment scheme given by Hoare techniques . Advancing to the upcoming piece of code in the segment of code , the line \verb | <var:q> := <nat:4> + <var:q> * <var:P> ; | . This transfers $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:6> + <nat:4> \cdot <var:v> ^ <nat:5> + <nat:2> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> + <nat:3> \} $ into the postcondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:7> + <nat:4> \cdot <var:v> ^ <nat:6> + <nat:2> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} $ . This is ensured through the assignment scheme given by typical Hoare techniques . Moving forward to the subsequent statement seen in our set of instructions , the variable binding statement \verb | <var:q> := <nat:2> + <var:q> * <var:P> ; | . This takes the precondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:7> + <nat:4> \cdot <var:v> ^ <nat:6> + <nat:2> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} $ toward the postcondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:8> + <nat:4> \cdot <var:v> ^ <nat:7> + <nat:2> \cdot <var:v> ^ <nat:6> + <nat:4> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} $ . This is known to be sound with the assignment law from Hoare reasoning . Looking at the following line of code seen in the list of commands , we have the assignment line \verb | <var:q> := <nat:1> + <var:q> * <var:P> ; | . This statement forwards the precondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:8> + <nat:4> \cdot <var:v> ^ <nat:7> + <nat:2> \cdot <var:v> ^ <nat:6> + <nat:4> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} $ into the postcondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:9> + <nat:4> \cdot <var:v> ^ <nat:8> + <nat:2> \cdot <var:v> ^ <nat:7> + <nat:4> \cdot <var:v> ^ <nat:6> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:1> \} $ . Advancing to the next step , we have the statement assigning $ <nat:4> + <var:q> * <var:P> $ as $ <var:q>$ . This statement redefines $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:9> + <nat:4> \cdot <var:v> ^ <nat:8> + <nat:2> \cdot <var:v> ^ <nat:7> + <nat:4> \cdot <var:v> ^ <nat:6> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:1> \} $ to $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:10> + <nat:4> \cdot <var:v> ^ <nat:9> + <nat:2> \cdot <var:v> ^ <nat:8> + <nat:4> \cdot <var:v> ^ <nat:7> + <nat:4> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:4> \} $ . Following , the assignment command \verb | <var:q> := <nat:2> + <var:q> * <var:P> | . This takes the precondition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:10> + <nat:4> \cdot <var:v> ^ <nat:9> + <nat:2> \cdot <var:v> ^ <nat:8> + <nat:4> \cdot <var:v> ^ <nat:7> + <nat:4> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:4> \} $ into the condition $ \{ <var:P> = <var:v> \land <var:q> = <nat:3> \cdot <var:v> ^ <nat:11> + <nat:4> \cdot <var:v> ^ <nat:10> + <nat:2> \cdot <var:v> ^ <nat:9> + <nat:4> \cdot <var:v> ^ <nat:8> + <nat:4> \cdot <var:v> ^ <nat:6> + <nat:3> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:2> \cdot <var:v> ^ <nat:3> + <nat:1> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} $ . This is rigorously given through the assignment inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:P> = <var:v> }} <var:q> := <nat:3> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <nat:2> + <var:q> * <var:P> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <var:q> * <var:P> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <nat:3> + <var:q> * <var:P> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <nat:2> + <var:q> * <var:P> ; <var:q> := <nat:1> + <var:q> * <var:P> ; <var:q> := <nat:4> + <var:q> * <var:P> ; <var:q> := <nat:2> + <var:q> * <var:P> {{ <var:q> = <nat:3> * <var:v> ^ <nat:11> + <nat:4> * <var:v> ^ <nat:10> + <nat:2> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:9> + <nat:2> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:q> = <nat:3> * <var:v> ^ <nat:11> + <nat:4> * <var:v> ^ <nat:10> + <nat:2> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 