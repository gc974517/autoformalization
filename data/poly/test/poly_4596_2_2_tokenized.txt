\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} such that \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <nat:4> + <var:E> * <var:G> \end{verbatim} Assume that we have $ <var:G> = <var:v> $ letting $ <var:v> \in \mathbb{N} $ prior to the evaluation of the program it must be that we see $ <var:E> = <nat:3> \times <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our segment of code is demonstrated through typical Hoare techniques . After , we have \verb | { <var:G> = <var:v> } <var:E> := <nat:3> { <var:G> = <var:v> \land <var:E> = <nat:3> } | and \verb | { <var:G> = <var:v> \land <var:E> = <nat:3> } <var:E> := <nat:4> + <var:E> * <var:G{ <var:G> = <var:v> \land <var:E> = <nat:3> * <var:v> + <nat:4> } | . This is rigorously given using the variable assignmet law found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:G> = <var:v> }} <var:E> := <nat:3> ; <var:E> := <nat:4> + <var:E> * <var:G> {{ <var:E> = <nat:3> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:E> = <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 