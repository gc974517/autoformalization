\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:l0> := <nat:5> ; <var:T> := <var:l0> \end{verbatim} Given that we have $ <var:i> = <var:r> $ prior to the execution of our program it must be that we see $ <var:T> = <nat:5> $ . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:i> = <var:r> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:i> = <var:r> \land <var:l0> = <nat:5> \} \\ <var:T> := <var:l0> \\ \{ <var:i> = <var:r> \land <var:T> = <nat:5> \} \end{eqnarray} Given the preceding argument , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:i> = <var:r> }} <var:l0> := <nat:5> ; <var:T> := <var:l0> {{ <var:T> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:T> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 