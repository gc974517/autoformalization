\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as \begin{verbatim} <var:k1> := <var:Q> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:3> ; <var:H> := <var:k1> <var:H> := <var:H> + <var:k0> \end{verbatim} Assuming $ <var:Q> = <var:G> $ ahead of the evaluation of the list of instructions it holds that $ <var:H> = <nat:3> * <var:G> + <nat:4> $ once series of instructions is done . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:Q> = <var:G> \} \\ <var:k1> := <var:Q> ; \\ \{ <var:Q> = <var:G> \land <var:k1> = <var:G> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:Q> = <var:G> \land <var:k1> = <var:G> \land <var:k0> = <nat:4> \} \\ <var:k1> := <var:k1> * <nat:3> ; \\ \{ <var:Q> = <var:G> \land <var:k1> = <nat:3> \times <var:G> \land <var:k0> = <nat:4> \} \\ <var:H> := <var:k1> \\ \{ <var:Q> = <var:G> \land <var:k0> = <nat:4> \land <var:H> = <nat:3> \times <var:G> \} \\ <var:H> := <var:H> + <var:k0> \\ \{ <var:Q> = <var:G> \land <var:H> = <nat:3> \times <var:G> + <nat:4> \} \end{eqnarray} Thus , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Q> = <var:G> }} <var:k1> := <var:Q> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:3> ; <var:H> := <var:k1> <var:H> := <var:H> + <var:k0> {{ <var:H> = <nat:3> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:k1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:k1> = <var:G> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:k1> = <nat:3> * <var:G> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:k0> = <nat:4> /\ <var:H> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:H> = <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 