\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:B0> := <nat:7> ; <var:B1> := <nat:3> ; <var:B1> := <var:B1> * <var:K> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:K> ; <var:B2> := <var:B2> * <var:K> ; <var:U> := <var:B2> ; <var:U> := <var:U> + <var:B1> ; <var:U> := <var:U> + <var:B0> \end{verbatim} Assume it to hold that $ <var:K> = <var:y> $ ahead of the evaluation of the list of instructions , then we see $ <var:U> = <nat:7> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program can be seen by usual Hoare logic . Paying attention to the following statements in the code segment , \begin{eqnarray} \{ <var:K> = <var:y> \} \, <var:B0> := <nat:7> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \} \\ \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \} \, <var:B1> := <nat:3> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \land <var:B1> = <nat:3> \} \end{eqnarray} Honing in on the proceeding line of code in our list of instructions , \begin{eqnarray} \{ <var:K> = <var:y> \} \, <var:B0> := <nat:7> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \} \end{eqnarray} Going forward , we have \begin{eqnarray} \{ <var:K> = <var:y> \} \, <var:B0> := <nat:7> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \} \\ \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \} \, <var:B1> := <nat:3> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \land <var:B1> = <nat:3> \} \\ \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \land <var:B1> = <nat:3> \} \, <var:B1> := <var:B1> * <var:K> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \land <var:B1> = <nat:3> \times <var:y> \} \\ \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \land <var:B1> = <nat:3> \times <var:y> \} \, <var:B2> := <nat:7> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \land <var:B1> = <nat:3> \times <var:y> \land <var:B2> = <nat:7> \} \end{eqnarray} This is given through the assignment inference rule found in Hoare reasoning . Honing in on the next bits of codeseen in our set of instructions , \begin{eqnarray} \{ <var:K> = <var:y> \} \, <var:B0> := <nat:7> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \} \\ \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \} \, <var:B1> := <nat:3> \, \{ <var:K> = <var:y> \land <var:B0> = <nat:7> \land <var:B1> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:K> = <var:y> }} <var:B0> := <nat:7> ; <var:B1> := <nat:3> ; <var:B1> := <var:B1> * <var:K> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:K> ; <var:B2> := <var:B2> * <var:K> ; <var:U> := <var:B2> ; <var:U> := <var:U> + <var:B1> ; <var:U> := <var:U> + <var:B0> {{ <var:U> = <nat:7> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:3> * <var:y> /\ <var:B2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:3> * <var:y> /\ <var:B2> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:3> * <var:y> /\ <var:B2> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:3> * <var:y> /\ <var:U> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:B0> = <nat:7> /\ <var:U> = <nat:7> * <var:y> ^ <nat:2> + <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:U> = <nat:7> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 