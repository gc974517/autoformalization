\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U> := <nat:1> ; <var:U> := <nat:1> + <var:U> * <var:r> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Given ( for some positive integers $ <var:k> $ ) that $ <var:r> = <var:k> $ ahead of running this series of commands it must be that $ <var:U> = <nat:1> \times <var:k> + <nat:1> $ after program exits . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is done with Hoare reasoning . Observing the following command found in the list of commands , we see the binding code \verb | <var:U> := <nat:1> ; | . This advances $ \{ <var:r> = <var:k> \} $ into $ \{ <var:r> = <var:k> \land <var:U> = <nat:1> \} $ . Advancing to the next piece of code in the list of commands , we have the variable binding statement giving $ <nat:1> + <var:U> * <var:r$ into $ <var:U>$ . This code forwards the precondition $ \{ <var:r> = <var:k> \land <var:U> = <nat:1> \} $ toward $ \{ <var:r> = <var:k> \land <var:U> = <nat:1> * <var:k> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:1> ; <var:U> := <nat:1> + <var:U> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <def:poly> {{ <var:U> = <nat:1> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:U> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:U> = <nat:1> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 