\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j1> := <var:Q> ; <var:j2> := <var:j1> * <var:Q> ; <var:j3> := <var:j2> * <var:Q> ; <var:j4> := <var:j3> * <var:Q> ; <var:j0> := <nat:7> ; <var:j1> := <var:j1> * <nat:7> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:7> ; <var:j4> := <var:j4> * <nat:3> ; <var:F> := <var:j4> <var:F> := <var:F> + <var:j3> <var:F> := <var:F> + <var:j2> <var:F> := <var:F> + <var:j1> <var:F> := <var:F> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Given $ <var:Q> = <var:B> $ --- with some $ <var:B> \in \mathbb{N} $ --- ahead of running the segment of code it must be that we have $ <var:F> = <nat:3> * <var:B> ^ <nat:4> + <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:7> $ . \end{theorem} \begin{proof} The argument for the series of commands is demonstrated with usual Hoare techniques . Immediately following , the variable assignmet code \verb | <var:j1> := <var:Q> ; | . This statement takes $ \{ <var:Q> = <var:B> \} $ as the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \} $ . This is given with the assignment scheme from Hoare logic . Moving on to the subsequent command found in our series of commands , we see the binding statement \verb | <var:j2> := <var:j1> * <var:Q> ; | . This command forwards the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \} $ as the postcondition $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \land <var:j2> = <var:B> ^ <nat:2> \} $ . Observing the proceeding piece of code in the set of commands , we see the variable assignmet line \verb | <var:j3> := <var:j2> * <var:Q> ; | . This advances the precondition $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \land <var:j2> = <var:B> ^ <nat:2> \} $ to the postcondition $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \land <var:j2> = <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \} $ . This is deduced by the assignment rule in usual Hoare reasoning . Further , we see the command \verb | <var:j4> := <var:j3> * <var:Q> ; | . This line advances the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \land <var:j2> = <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \} $ to $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \land <var:j2> = <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \} $ . This is given with the assignment rule given by typical Hoare techniques . Shifting focus toward the proceeding bit of code found in our code segment , the variable assignmet command \verb | <var:j0> := <nat:7> ; | . This line forwards $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \land <var:j2> = <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \} $ as the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \land <var:j2> = <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ . Going to the next step , we see the variable assignmet line \verb | <var:j1> := <var:j1> * <nat:7> ; | . This moves the precondition $ \{ <var:Q> = <var:B> \land <var:j1> = <var:B> \land <var:j2> = <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ to $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ . This is shown by the assignment law of typical Hoare techniques . Going to the next step , the variable assignmet line \verb | <var:j2> := <var:j2> * <nat:6> ; | . This command advances $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ toward the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ . Moving forward , we see the environment update command giving $ <var:j3> * <nat:7> $ to $ <var:j3>$ . This statement transfers the precondition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j3> = <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ into the postcondition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j3> = <nat:7> \cdot <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ . This is rigorously given through the assignment scheme defined by Hoare techniques . Taking another step toward the upcoming line of code seen in the program , we have the environment update statement \verb | <var:j4> := <var:j4> * <nat:3> ; | . This transfers $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j3> = <nat:7> \cdot <var:B> ^ <nat:3> \land <var:j4> = <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ toward the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j3> = <nat:7> \cdot <var:B> ^ <nat:3> \land <var:j4> = <nat:3> \cdot <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ . Moving onward , we have the variable update line binding $ <var:j4$ to $ <var:F>$ . This statement forwards the precondition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j3> = <nat:7> \cdot <var:B> ^ <nat:3> \land <var:j4> = <nat:3> \cdot <var:B> ^ <nat:4> \land <var:j0> = <nat:7> \} $ toward the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j3> = <nat:7> \cdot <var:B> ^ <nat:3> \land <var:j0> = <nat:7> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> \} $ . This is given by the assignment inference rule obtained from usual Hoare reasoning . Moving forward to the next step , the assignment statement \verb | <var:F> := <var:F> + <var:j3> | . This line advances the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j3> = <nat:7> \cdot <var:B> ^ <nat:3> \land <var:j0> = <nat:7> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> \} $ as the postcondition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j0> = <nat:7> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:7> \cdot <var:B> ^ <nat:3> \} $ . Stepping forward , we see the variable assignmet line \verb | <var:F> := <var:F> + <var:j2> | . This redefines $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:j0> = <nat:7> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:7> \cdot <var:B> ^ <nat:3> \} $ to the condition $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j0> = <nat:7> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> \} $ . This is deduced through the assignment rule given by standard Hoare techniques . Taking a look at the subsequent statement in our list of commands , the variable assignmet line giving $ <var:F> + <var:j1$ to $ <var:F>$ . This line takes $ \{ <var:Q> = <var:B> \land <var:j1> = <nat:7> \cdot <var:B> \land <var:j0> = <nat:7> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> \} $ as the condition $ \{ <var:Q> = <var:B> \land <var:j0> = <nat:7> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> \} $ . Considering the next step contained in our list of commands , the assignment code assigning $ <var:F> + <var:j0$ into $ <var:F>$ . This forwards $ \{ <var:Q> = <var:B> \land <var:j0> = <nat:7> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> \} $ to the postcondition $ \{ <var:Q> = <var:B> \land <var:F> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <var:j4> : string := " <var:j4> " . Definition <def:poly> := <var:j1> := <var:Q> ; <var:j2> := <var:j1> * <var:Q> ; <var:j3> := <var:j2> * <var:Q> ; <var:j4> := <var:j3> * <var:Q> ; <var:j0> := <nat:7> ; <var:j1> := <var:j1> * <nat:7> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:7> ; <var:j4> := <var:j4> * <nat:3> ; <var:F> := <var:j4> <var:F> := <var:F> + <var:j3> <var:F> := <var:F> + <var:j2> <var:F> := <var:F> + <var:j1> <var:F> := <var:F> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Q> = <var:B> }} <def:poly> {{ <var:F> = <nat:3> * <var:B> ^ <nat:4> + <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <var:B> /\ <var:j2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <var:B> /\ <var:j2> = <var:B> ^ <nat:2> /\ <var:j3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <var:B> /\ <var:j2> = <var:B> ^ <nat:2> /\ <var:j3> = <var:B> ^ <nat:3> /\ <var:j4> = <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <var:B> /\ <var:j2> = <var:B> ^ <nat:2> /\ <var:j3> = <var:B> ^ <nat:3> /\ <var:j4> = <var:B> ^ <nat:4> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <nat:7> * <var:B> /\ <var:j2> = <var:B> ^ <nat:2> /\ <var:j3> = <var:B> ^ <nat:3> /\ <var:j4> = <var:B> ^ <nat:4> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <nat:7> * <var:B> /\ <var:j2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:j3> = <var:B> ^ <nat:3> /\ <var:j4> = <var:B> ^ <nat:4> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <nat:7> * <var:B> /\ <var:j2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:B> ^ <nat:3> /\ <var:j4> = <var:B> ^ <nat:4> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <nat:7> * <var:B> /\ <var:j2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:B> ^ <nat:3> /\ <var:j4> = <nat:3> * <var:B> ^ <nat:4> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <nat:7> * <var:B> /\ <var:j2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:B> ^ <nat:3> /\ <var:j0> = <nat:7> /\ <var:F> = <nat:3> * <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <nat:7> * <var:B> /\ <var:j2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:j0> = <nat:7> /\ <var:F> = <nat:3> * <var:B> ^ <nat:4> + <nat:7> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j1> = <nat:7> * <var:B> /\ <var:j0> = <nat:7> /\ <var:F> = <nat:3> * <var:B> ^ <nat:4> + <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:j0> = <nat:7> /\ <var:F> = <nat:3> * <var:B> ^ <nat:4> + <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:F> = <nat:3> * <var:B> ^ <nat:4> + <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 