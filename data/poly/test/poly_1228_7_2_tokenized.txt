\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:x> := <nat:2> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:4> + <var:x> * <var:M> \end{verbatim} Allowing that $ <var:M> = <var:u> $ before the evaluation of the code , then we see $ <var:x> = <nat:2> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code can be accomplished with the below decorated code segment . \begin{eqnarray} \{ <var:M> = <var:u> \} \\ <var:x> := <nat:2> ; \\ \{ <var:M> = <var:u> \land <var:x> = <nat:2> \} \\ <var:x> := <nat:1> + <var:x> * <var:M> ; \\ \{ <var:M> = <var:u> \land <var:x> = <nat:2> \cdot <var:u> + <nat:1> \} \\ <var:x> := <nat:1> + <var:x> * <var:M> ; \\ \{ <var:M> = <var:u> \land <var:x> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:1> \} \\ <var:x> := <nat:1> + <var:x> * <var:M> ; \\ \{ <var:M> = <var:u> \land <var:x> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:1> \} \\ <var:x> := <nat:1> + <var:x> * <var:M> ; \\ \{ <var:M> = <var:u> \land <var:x> = <nat:2> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:1> \} \\ <var:x> := <nat:1> + <var:x> * <var:M> ; \\ \{ <var:M> = <var:u> \land <var:x> = <nat:2> \cdot <var:u> ^ <nat:5> + <nat:1> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:1> \} \\ <var:x> := <nat:4> + <var:x> * <var:M> \\ \{ <var:M> = <var:u> \land <var:x> = <nat:2> \cdot <var:u> ^ <nat:6> + <nat:1> \cdot <var:u> ^ <nat:5> + <nat:1> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:4> \} \end{eqnarray} Using standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:M> = <var:u> }} <var:x> := <nat:2> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:1> + <var:x> * <var:M> ; <var:x> := <nat:4> + <var:x> * <var:M> {{ <var:x> = <nat:2> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:x> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:x> = <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:x> = <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:x> = <nat:2> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:x> = <nat:2> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:x> = <nat:2> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:x> = <nat:2> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 