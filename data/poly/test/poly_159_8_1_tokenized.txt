\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:A> ; <var:t2> := <var:t1> * <var:A> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:9> ; <var:t2> := <var:t2> * <nat:8> ; <var:y> := <var:t2> <var:y> := <var:y> + <var:t1> <var:y> := <var:y> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for all natural numbers $ <var:Z> $ ) it to hold that $ <var:A> = <var:Z> $ prior to the execution of the set of commands , it must be that we see $ <var:y> = <nat:8> \times <var:Z> ^ <nat:2> + <nat:9> \times <var:Z> + <nat:9> $ once list of commands has finished . \end{theorem} \begin{proof} Using standard Hoare logic gives : \begin{eqnarray} \{ <var:A> = <var:Z> \} \\ <var:t1> := <var:A> ; \\ \{ <var:A> = <var:Z> \land <var:t1> = <var:Z> \} \\ <var:t2> := <var:t1> * <var:A> ; \\ \{ <var:A> = <var:Z> \land <var:t1> = <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \} \\ <var:t0> := <nat:9> ; \\ \{ <var:A> = <var:Z> \land <var:t1> = <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \land <var:t0> = <nat:9> \} \\ <var:t1> := <var:t1> * <nat:9> ; \\ \{ <var:A> = <var:Z> \land <var:t1> = <nat:9> * <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \land <var:t0> = <nat:9> \} \\ <var:t2> := <var:t2> * <nat:8> ; \\ \{ <var:A> = <var:Z> \land <var:t1> = <nat:9> * <var:Z> \land <var:t2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:t0> = <nat:9> \} \\ <var:y> := <var:t2> \\ \{ <var:A> = <var:Z> \land <var:t1> = <nat:9> * <var:Z> \land <var:t0> = <nat:9> \land <var:y> = <nat:8> * <var:Z> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:t1> \\ \{ <var:A> = <var:Z> \land <var:t0> = <nat:9> \land <var:y> = <nat:8> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> \} \\ <var:y> := <var:y> + <var:t0> \\ \{ <var:A> = <var:Z> \land <var:y> = <nat:8> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> \} \end{eqnarray} As a consequence , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t1> := <var:A> ; <var:t2> := <var:t1> * <var:A> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:9> ; <var:t2> := <var:t2> * <nat:8> ; <var:y> := <var:t2> <var:y> := <var:y> + <var:t1> <var:y> := <var:y> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:A> = <var:Z> }} <def:poly> {{ <var:y> = <nat:8> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Z> /\ <var:t1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Z> /\ <var:t1> = <var:Z> /\ <var:t2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Z> /\ <var:t1> = <var:Z> /\ <var:t2> = <var:Z> ^ <nat:2> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Z> /\ <var:t1> = <nat:9> * <var:Z> /\ <var:t2> = <var:Z> ^ <nat:2> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Z> /\ <var:t1> = <nat:9> * <var:Z> /\ <var:t2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Z> /\ <var:t1> = <nat:9> * <var:Z> /\ <var:t0> = <nat:9> /\ <var:y> = <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:y> = <nat:8> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Z> /\ <var:y> = <nat:8> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 