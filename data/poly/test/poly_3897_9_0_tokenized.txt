\begin{document} \begin{theorem} Take a program as \begin{verbatim} <var:E0> := <nat:4> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:O> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:O> ; <var:E2> := <var:E2> * <var:O> ; <var:a> := <var:E2> ; <var:a> := <var:a> + <var:E1> ; <var:a> := <var:a> + <var:E0> \end{verbatim} Allowing it to be that $ <var:O> = <var:Z> $ ahead of executing our code , then $ <var:a> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this code can be given by Hoare logic . Further , the binding line \verb | <var:E0> := <nat:4> ; | . This transfers the condition $ \{ <var:O> = <var:Z> \} $ toward the postcondition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \} $ . This is given through the assignment scheme defined by standard Hoare logic . Taking a look at the upcoming command contained in the series of instructions , we see the variable binding line \verb | <var:E1> := <nat:2> ; | . This redefines $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \} $ to $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \} $ . Advancing to the next step , the statement \verb | <var:E1> := <var:E1> * <var:O> ; | . This code takes the precondition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \} $ as the condition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \} $ . Paying attention to the proceeding statement contained in the list of commands , we see the binding line giving $ <nat:2> $ to $ <var:E2>$ . This line advances the condition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \} $ toward the condition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \land <var:E2> = <nat:2> \} $ . This is sound through the assignment rule obtained from usual Hoare logic . Considering the subsequent step found in the code , the variable binding statement \verb | <var:E2> := <var:E2> * <var:O> ; | . This command forwards the condition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \land <var:E2> = <nat:2> \} $ toward the condition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \land <var:E2> = <nat:2> \cdot <var:Z> \} $ . Taking a look at the next step contained in our series of commands , we see the environment update statement \verb | <var:E2> := <var:E2> * <var:O> ; | . This advances $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \land <var:E2> = <nat:2> \cdot <var:Z> \} $ into the postcondition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \land <var:E2> = <nat:2> \cdot <var:Z> ^ <nat:2> \} $ . This is ensured with the assignment law defined in usual Hoare reasoning . Shifting focus toward the next command contained in our code , we see the binding statement \verb | <var:a> := <var:E2> ; | . This code moves the condition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \land <var:E2> = <nat:2> \cdot <var:Z> ^ <nat:2> \} $ into the postcondition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \land <var:a> = <nat:2> \cdot <var:Z> ^ <nat:2> \} $ . Honing in on the next line of code found in the series of commands , we have the variable binding command giving $ <var:a> + <var:E1> $ toward $ <var:a>$ . This statement takes $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:E1> = <nat:2> \cdot <var:Z> \land <var:a> = <nat:2> \cdot <var:Z> ^ <nat:2> \} $ toward the condition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:a> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> \} $ . This is shown to be logically sound by the assignment scheme obtained from typical Hoare logic . Keeping momentum , the variable binding statement \verb | <var:a> := <var:a> + <var:E0> | . This statement advances the condition $ \{ <var:O> = <var:Z> \land <var:E0> = <nat:4> \land <var:a> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> \} $ to the postcondition $ \{ <var:O> = <var:Z> \land <var:a> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:O> = <var:Z> }} <var:E0> := <nat:4> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:O> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:O> ; <var:E2> := <var:E2> * <var:O> ; <var:a> := <var:E2> ; <var:a> := <var:a> + <var:E1> ; <var:a> := <var:a> + <var:E0> {{ <var:a> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:2> * <var:Z> /\ <var:E2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:2> * <var:Z> /\ <var:E2> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:2> * <var:Z> /\ <var:E2> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:2> * <var:Z> /\ <var:a> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:E0> = <nat:4> /\ <var:a> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:a> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 