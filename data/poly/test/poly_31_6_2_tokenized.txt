\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:K> := <nat:4> ; <var:K> := <nat:2> + <var:K> * <var:d> ; <var:K> := <nat:1> + <var:K> * <var:d> ; <var:K> := <nat:4> + <var:K> * <var:d> ; <var:K> := <var:K> * <var:d> ; <var:K> := <nat:3> + <var:K> * <var:d> \end{verbatim} Given that we have $ <var:d> = <var:r> $ , for some positive integer coefficients $ <var:r> $ , before evaluating the code segment , it follows that we see $ <var:K> = <nat:4> \times <var:r> ^ <nat:5> + <nat:2> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:3> $ after list of commands is done . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:d> = <var:r> \} \\ <var:K> := <nat:4> ; \\ \{ <var:d> = <var:r> \land <var:K> = <nat:4> \} \\ <var:K> := <nat:2> + <var:K> * <var:d> ; \\ \{ <var:d> = <var:r> \land <var:K> = <nat:4> * <var:r> + <nat:2> \} \\ <var:K> := <nat:1> + <var:K> * <var:d> ; \\ \{ <var:d> = <var:r> \land <var:K> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:1> \} \\ <var:K> := <nat:4> + <var:K> * <var:d> ; \\ \{ <var:d> = <var:r> \land <var:K> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> \} \\ <var:K> := <var:K> * <var:d> ; \\ \{ <var:d> = <var:r> \land <var:K> = <nat:4> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + \} \\ <var:K> := <nat:3> + <var:K> * <var:d> \\ \{ <var:d> = <var:r> \land <var:K> = <nat:4> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> \} \end{eqnarray} Thus , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:d> = <var:r> }} <var:K> := <nat:4> ; <var:K> := <nat:2> + <var:K> * <var:d> ; <var:K> := <nat:1> + <var:K> * <var:d> ; <var:K> := <nat:4> + <var:K> * <var:d> ; <var:K> := <var:K> * <var:d> ; <var:K> := <nat:3> + <var:K> * <var:d> {{ <var:K> = <nat:4> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:K> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:K> = <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:K> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:K> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:K> = <nat:4> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:K> = <nat:4> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 