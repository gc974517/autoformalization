\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:R> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:R> ; <var:z2> := <var:z2> * <var:R> ; <var:M> := <var:z2> ; <var:M> := <var:M> + <var:z1> ; <var:M> := <var:M> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Allow it to hold that $ <var:R> = <var:p> $ ( for any whole numbers $ <var:p> $ ) before evaluating this code segment , it follows that we see $ <var:M> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:4> $ once set of instructions has finished . \end{theorem} \begin{proof} Notice this decorated code . \begin{eqnarray} \{ <var:R> = <var:p> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:R> = <var:p> \land <var:z0> = <nat:4> \} \end{eqnarray} Continuing the evaluation of the list of instructions returns : \begin{eqnarray} <var:z1> := <nat:1> ; \\ \{ <var:R> = <var:p> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \} \\ <var:z1> := <var:z1> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \cdot <var:p> \} \\ <var:z2> := <nat:3> ; \\ \{ <var:R> = <var:p> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \cdot <var:p> \land <var:z2> = <nat:3> \} \\ <var:z2> := <var:z2> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \cdot <var:p> \land <var:z2> = <nat:3> \cdot <var:p> \} \\ <var:z2> := <var:z2> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \cdot <var:p> \land <var:z2> = <nat:3> \cdot <var:p> ^ <nat:2> \} \\ <var:M> := <var:z2> ; \\ \{ <var:R> = <var:p> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \cdot <var:p> \land <var:M> = <nat:3> \cdot <var:p> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:z1> ; \\ \{ <var:R> = <var:p> \land <var:z0> = <nat:4> \land <var:M> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> \} \\ <var:M> := <var:M> + <var:z0> \\ \{ <var:R> = <var:p> \land <var:M> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:4> \} \end{eqnarray} The application of usual Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:R> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:R> ; <var:z2> := <var:z2> * <var:R> ; <var:M> := <var:z2> ; <var:M> := <var:M> + <var:z1> ; <var:M> := <var:M> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:R> = <var:p> }} <def:poly> {{ <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:1> * <var:p> /\ <var:z2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:1> * <var:p> /\ <var:z2> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:1> * <var:p> /\ <var:z2> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:1> * <var:p> /\ <var:M> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:z0> = <nat:4> /\ <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:M> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 