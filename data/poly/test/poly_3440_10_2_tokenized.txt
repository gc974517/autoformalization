\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:A> := <nat:1> ; <var:A> := <nat:1> + <var:A> * <var:F> ; <var:A> := <nat:4> + <var:A> * <var:F> ; <var:A> := <nat:1> + <var:A> * <var:F> ; <var:A> := <nat:3> + <var:A> * <var:F> ; <var:A> := <nat:2> + <var:A> * <var:F> ; <var:A> := <var:A> * <var:F> ; <var:A> := <nat:1> + <var:A> * <var:F> ; <var:A> := <nat:3> + <var:A> * <var:F> ; <var:A> := <nat:4> + <var:A> * <var:F> \end{verbatim} Assume it to be that $ <var:F> = <var:S> $ prior to interpreting the set of commands it must be that we have $ <var:A> = <nat:1> * <var:S> ^ <nat:9> + <nat:1> * <var:S> ^ <nat:8> + <nat:4> * <var:S> ^ <nat:7> + <nat:1> * <var:S> ^ <nat:6> + <nat:3> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for the series of instructions can be demonstrated with Hoare logic . Now , we have \verb | { <var:F> = <var:S> } <var:A> := <nat:1> { <var:F> = <var:S> \land <var:A> = <nat:1> } | , \verb | { <var:F> = <var:S> \land <var:A> = <nat:1> } <var:A> := <nat:1> + <var:A> * <var:F> { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> + <nat:1> } | , \verb | { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> + <nat:1> } <var:A> := <nat:4> + <var:A> * <var:F> { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:4> } | , \verb | { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:4> } <var:A> := <nat:1> + <var:A> * <var:F> { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> } | , \verb | { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> } <var:A> := <nat:3> + <var:A> * <var:F> { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> } | and \verb | { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> } <var:A> := <nat:2> + <var:A> * <var:F> { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> } | . This is known to be sound with the variable assignmet inference rule defined in Hoare reasoning . Advancing to the following statements contained in the code , we see \verb | { <var:F> = <var:S> } <var:A> := <nat:1> { <var:F> = <var:S> \land <var:A> = <nat:1> } | , \verb | { <var:F> = <var:S> \land <var:A> = <nat:1> } <var:A> := <nat:1> + <var:A> * <var:F> { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> + <nat:1> } | , \verb | { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> + <nat:1> } <var:A> := <nat:4> + <var:A> * <var:F> { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:4> } | and \verb | { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:4> } <var:A> := <nat:1> + <var:A> * <var:F> { <var:F> = <var:S> \land <var:A> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:F> = <var:S> }} <var:A> := <nat:1> ; <var:A> := <nat:1> + <var:A> * <var:F> ; <var:A> := <nat:4> + <var:A> * <var:F> ; <var:A> := <nat:1> + <var:A> * <var:F> ; <var:A> := <nat:3> + <var:A> * <var:F> ; <var:A> := <nat:2> + <var:A> * <var:F> ; <var:A> := <var:A> * <var:F> ; <var:A> := <nat:1> + <var:A> * <var:F> ; <var:A> := <nat:3> + <var:A> * <var:F> ; <var:A> := <nat:4> + <var:A> * <var:F> {{ <var:A> = <nat:1> * <var:S> ^ <nat:9> + <nat:1> * <var:S> ^ <nat:8> + <nat:4> * <var:S> ^ <nat:7> + <nat:1> * <var:S> ^ <nat:6> + <nat:3> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> ^ <nat:7> + <nat:1> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> ^ <nat:8> + <nat:1> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:A> = <nat:1> * <var:S> ^ <nat:9> + <nat:1> * <var:S> ^ <nat:8> + <nat:4> * <var:S> ^ <nat:7> + <nat:1> * <var:S> ^ <nat:6> + <nat:3> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 