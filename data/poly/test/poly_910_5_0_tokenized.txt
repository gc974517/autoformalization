\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:9> ; <var:x1> := <nat:6> ; <var:x1> := <var:x1> * <var:F> ; <var:w> := <var:x1> ; <var:w> := <var:w> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:F> = <var:Y> $ --- given some positive integer coefficients $ <var:Y> $ --- prior to running this code then we have $ <var:w> = <nat:6> \cdot <var:Y> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our program can be accomplished by standard Hoare techniques . Moving forward to the subsequent line in the set of instructions , we have the command defining $ <nat:9> $ into $ <var:x0>$ . This redefines the precondition $ \{ <var:F> = <var:Y> \} $ as $ \{ <var:F> = <var:Y> \land <var:x0> = <nat:9> \} $ . This is shown to be logically sound using the assignment scheme obtained from usual Hoare reasoning . Paying attention to the following line contained in the series of instructions , we have the variable assignmet code \verb | <var:x1> := <nat:6> ; | . This redefines $ \{ <var:F> = <var:Y> \land <var:x0> = <nat:9> \} $ as the postcondition $ \{ <var:F> = <var:Y> \land <var:x0> = <nat:9> \land <var:x1> = <nat:6> \} $ . Looking at the following step in the code segment , we see the binding line letting $ <var:x1> * <var:F> $ to $ <var:x1>$ . This moves the condition $ \{ <var:F> = <var:Y> \land <var:x0> = <nat:9> \land <var:x1> = <nat:6> \} $ into $ \{ <var:F> = <var:Y> \land <var:x0> = <nat:9> \land <var:x1> = <nat:6> \cdot <var:Y> \} $ . Further , we have the environment update line yielding $ <var:x1> $ as $ <var:w>$ . This transfers the condition $ \{ <var:F> = <var:Y> \land <var:x0> = <nat:9> \land <var:x1> = <nat:6> \cdot <var:Y> \} $ as $ \{ <var:F> = <var:Y> \land <var:x0> = <nat:9> \land <var:w> = <nat:6> \cdot <var:Y> \} $ . Jumping to the subsequent command found in the set of instructions , we see the assignment command \verb | <var:w> := <var:w> + <var:x0> | . This statement transfers the precondition $ \{ <var:F> = <var:Y> \land <var:x0> = <nat:9> \land <var:w> = <nat:6> \cdot <var:Y> \} $ as $ \{ <var:F> = <var:Y> \land <var:w> = <nat:6> \cdot <var:Y> + <nat:9> \} $ . This is shown to be logically sound through the assignment law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x0> := <nat:9> ; <var:x1> := <nat:6> ; <var:x1> := <var:x1> * <var:F> ; <var:w> := <var:x1> ; <var:w> := <var:w> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:F> = <var:Y> }} <def:poly> {{ <var:w> = <nat:6> * <var:Y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:x0> = <nat:9> /\ <var:w> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:w> = <nat:6> * <var:Y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 