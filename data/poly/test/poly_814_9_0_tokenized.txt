\begin{document} \begin{theorem} Take a set of commands : \begin{verbatim} <var:M0> := <nat:6> ; <var:M1> := <nat:7> ; <var:M1> := <var:M1> * <var:z> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:z> ; <var:M2> := <var:M2> * <var:z> ; <var:K> := <var:M2> ; <var:K> := <var:K> + <var:M1> ; <var:K> := <var:K> + <var:M0> \end{verbatim} Allow that we have $ <var:z> = <var:x> $ ( with some integers $ <var:x> $ ) ahead of running our code segment it holds that $ <var:K> = <nat:5> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:6> $ after series of commands has exited . \end{theorem} \begin{proof} Using standard Hoare reasoning produces : \begin{eqnarray} \{ <var:z> = <var:x> \} \\ <var:M0> := <nat:6> ; \\ \{ <var:z> = <var:x> \land <var:M0> = <nat:6> \} \\ <var:M1> := <nat:7> ; \\ \{ <var:z> = <var:x> \land <var:M0> = <nat:6> \land <var:M1> = <nat:7> \} \\ <var:M1> := <var:M1> * <var:z> ; \\ \{ <var:z> = <var:x> \land <var:M0> = <nat:6> \land <var:M1> = <nat:7> \times <var:x> \} \\ <var:M2> := <nat:5> ; \\ \{ <var:z> = <var:x> \land <var:M0> = <nat:6> \land <var:M1> = <nat:7> \times <var:x> \land <var:M2> = <nat:5> \} \\ <var:M2> := <var:M2> * <var:z> ; \\ \{ <var:z> = <var:x> \land <var:M0> = <nat:6> \land <var:M1> = <nat:7> \times <var:x> \land <var:M2> = <nat:5> \times <var:x> \} \\ <var:M2> := <var:M2> * <var:z> ; \\ \{ <var:z> = <var:x> \land <var:M0> = <nat:6> \land <var:M1> = <nat:7> \times <var:x> \land <var:M2> = <nat:5> \times <var:x> ^ <nat:2> \} \\ <var:K> := <var:M2> ; \\ \{ <var:z> = <var:x> \land <var:M0> = <nat:6> \land <var:M1> = <nat:7> \times <var:x> \land <var:K> = <nat:5> \times <var:x> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:M1> ; \\ \{ <var:z> = <var:x> \land <var:M0> = <nat:6> \land <var:K> = <nat:5> \times <var:x> ^ <nat:2> + <nat:7> \times <var:x> \} \\ <var:K> := <var:K> + <var:M0> \\ \{ <var:z> = <var:x> \land <var:K> = <nat:5> \times <var:x> ^ <nat:2> + <nat:7> \times <var:x> + <nat:6> \} \end{eqnarray} As a result , this code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:z> = <var:x> }} <var:M0> := <nat:6> ; <var:M1> := <nat:7> ; <var:M1> := <var:M1> * <var:z> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:z> ; <var:M2> := <var:M2> * <var:z> ; <var:K> := <var:M2> ; <var:K> := <var:K> + <var:M1> ; <var:K> := <var:K> + <var:M0> {{ <var:K> = <nat:5> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:7> * <var:x> /\ <var:M2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:7> * <var:x> /\ <var:M2> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:7> * <var:x> /\ <var:M2> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:7> * <var:x> /\ <var:K> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:M0> = <nat:6> /\ <var:K> = <nat:5> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:K> = <nat:5> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 