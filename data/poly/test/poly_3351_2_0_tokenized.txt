\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:4> ; <var:V> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:J> = <var:U> $ before interpreting our list of instructions , it must be that we see $ <var:V> = <nat:4> $ when list of commands has finished executing . \end{theorem} \begin{proof} The proof of this list of commands is shown using standard Hoare reasoning . Jumping to the upcoming command contained in the program , we have the assignment statement \verb | <var:S0> := <nat:4> ; | . This advances $ \{ <var:J> = <var:U> \} $ to the condition $ \{ <var:J> = <var:U> \land <var:S0> = <nat:4> \} $ . After , we see the variable assignmet line yielding $ <var:S0$ toward $ <var:V>$ . This moves the precondition $ \{ <var:J> = <var:U> \land <var:S0> = <nat:4> \} $ into $ \{ <var:J> = <var:U> \land <var:V> = <nat:4> \} $ . This is shown with the assignment rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:4> ; <var:V> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:J> = <var:U> }} <def:poly> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 