\begin{document} \begin{theorem} Take the following code in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:3> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:A> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:A> ; <var:C2> := <var:C2> * <var:A> ; <var:F> := <var:C2> ; <var:F> := <var:F> + <var:C1> ; <var:F> := <var:F> + <var:C0> \end{verbatim} Given it to be that $ <var:A> = <var:Y> $ ahead of the execution of this series of commands , it holds that we have $ <var:F> = <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> $ after set of commands exits . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:A> = <var:Y> \} \\ <var:C0> := <nat:3> ; \\ \{ <var:A> = <var:Y> \land <var:C0> = <nat:3> \} \\ <var:C1> := <nat:1> ; \\ \{ <var:A> = <var:Y> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \} \\ <var:C1> := <var:C1> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:Y> \} \\ <var:C2> := <nat:3> ; \\ \{ <var:A> = <var:Y> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:Y> \land <var:C2> = <nat:3> \} \\ <var:C2> := <var:C2> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:Y> \land <var:C2> = <nat:3> \times <var:Y> \} \\ <var:C2> := <var:C2> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:Y> \land <var:C2> = <nat:3> \times <var:Y> ^ <nat:2> \} \\ <var:F> := <var:C2> ; \\ \{ <var:A> = <var:Y> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:Y> \land <var:F> = <nat:3> \times <var:Y> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:C1> ; \\ \{ <var:A> = <var:Y> \land <var:C0> = <nat:3> \land <var:F> = <nat:3> \times <var:Y> ^ <nat:2> + <nat:1> \times <var:Y> \} \\ <var:F> := <var:F> + <var:C0> \\ \{ <var:A> = <var:Y> \land <var:F> = <nat:3> \times <var:Y> ^ <nat:2> + <nat:1> \times <var:Y> + <nat:3> \} \end{eqnarray} Considering the above , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:A> = <var:Y> }} <var:C0> := <nat:3> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:A> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:A> ; <var:C2> := <var:C2> * <var:A> ; <var:F> := <var:C2> ; <var:F> := <var:F> + <var:C1> ; <var:F> := <var:F> + <var:C0> {{ <var:F> = <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:Y> /\ <var:C2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:Y> /\ <var:C2> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:Y> /\ <var:C2> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:Y> /\ <var:F> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:C0> = <nat:3> /\ <var:F> = <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:F> = <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 