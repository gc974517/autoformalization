\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:S> ; <var:d2> := <var:d1> * <var:S> ; <var:d3> := <var:d2> * <var:S> ; <var:d4> := <var:d3> * <var:S> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:3> ; <var:d3> := <var:d3> * <nat:8> ; <var:d4> := <var:d4> * <nat:8> ; <var:P> := <var:d4> <var:P> := <var:P> + <var:d3> <var:P> := <var:P> + <var:d2> <var:P> := <var:P> + <var:d1> <var:P> := <var:P> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:S> = <var:O> $ before the evaluation of this code segment it must be that we see $ <var:P> = <nat:8> \cdot <var:O> ^ <nat:4> + <nat:8> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:7> \cdot <var:O> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this set of commands can be seen through the below decorated segment of code . \begin{eqnarray} \{ <var:S> = <var:O> \} \\ <var:d1> := <var:S> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <var:O> \} \\ <var:d2> := <var:d1> * <var:S> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <var:O> \land <var:d2> = <var:O> ^ <nat:2> \} \end{eqnarray} Furthering evaluating our code segment produces : \begin{eqnarray} <var:d3> := <var:d2> * <var:S> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <var:O> \land <var:d2> = <var:O> ^ <nat:2> \land <var:d3> = <var:O> ^ <nat:3> \} \\ <var:d4> := <var:d3> * <var:S> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <var:O> \land <var:d2> = <var:O> ^ <nat:2> \land <var:d3> = <var:O> ^ <nat:3> \land <var:d4> = <var:O> ^ <nat:4> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <var:O> \land <var:d2> = <var:O> ^ <nat:2> \land <var:d3> = <var:O> ^ <nat:3> \land <var:d4> = <var:O> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d1> := <var:d1> * <nat:7> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <nat:7> \times <var:O> \land <var:d2> = <var:O> ^ <nat:2> \land <var:d3> = <var:O> ^ <nat:3> \land <var:d4> = <var:O> ^ <nat:4> \land <var:d0> = <nat:3> \} \end{eqnarray} Continuing executing this code segment returns : \begin{eqnarray} <var:d2> := <var:d2> * <nat:3> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <nat:7> \times <var:O> \land <var:d2> = <nat:3> \times <var:O> ^ <nat:2> \land <var:d3> = <var:O> ^ <nat:3> \land <var:d4> = <var:O> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d3> := <var:d3> * <nat:8> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <nat:7> \times <var:O> \land <var:d2> = <nat:3> \times <var:O> ^ <nat:2> \land <var:d3> = <nat:8> \times <var:O> ^ <nat:3> \land <var:d4> = <var:O> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d4> := <var:d4> * <nat:8> ; \\ \{ <var:S> = <var:O> \land <var:d1> = <nat:7> \times <var:O> \land <var:d2> = <nat:3> \times <var:O> ^ <nat:2> \land <var:d3> = <nat:8> \times <var:O> ^ <nat:3> \land <var:d4> = <nat:8> \times <var:O> ^ <nat:4> \land <var:d0> = <nat:3> \} \end{eqnarray} Allowing evaluating this code yields : \begin{eqnarray} <var:P> := <var:d4> \\ \{ <var:S> = <var:O> \land <var:d1> = <nat:7> \times <var:O> \land <var:d2> = <nat:3> \times <var:O> ^ <nat:2> \land <var:d3> = <nat:8> \times <var:O> ^ <nat:3> \land <var:d0> = <nat:3> \land <var:P> = <nat:8> \times <var:O> ^ <nat:4> \} \\ <var:P> := <var:P> + <var:d3> \\ \{ <var:S> = <var:O> \land <var:d1> = <nat:7> \times <var:O> \land <var:d2> = <nat:3> \times <var:O> ^ <nat:2> \land <var:d0> = <nat:3> \land <var:P> = <nat:8> \times <var:O> ^ <nat:4> + <nat:8> \times <var:O> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:d2> \\ \{ <var:S> = <var:O> \land <var:d1> = <nat:7> \times <var:O> \land <var:d0> = <nat:3> \land <var:P> = <nat:8> \times <var:O> ^ <nat:4> + <nat:8> \times <var:O> ^ <nat:3> + <nat:3> \times <var:O> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:d1> \\ \{ <var:S> = <var:O> \land <var:d0> = <nat:3> \land <var:P> = <nat:8> \times <var:O> ^ <nat:4> + <nat:8> \times <var:O> ^ <nat:3> + <nat:3> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> \} \\ <var:P> := <var:P> + <var:d0> \\ \{ <var:S> = <var:O> \land <var:P> = <nat:8> \times <var:O> ^ <nat:4> + <nat:8> \times <var:O> ^ <nat:3> + <nat:3> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> + <nat:3> \} \end{eqnarray} Using typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Definition <def:poly> := <var:d1> := <var:S> ; <var:d2> := <var:d1> * <var:S> ; <var:d3> := <var:d2> * <var:S> ; <var:d4> := <var:d3> * <var:S> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:3> ; <var:d3> := <var:d3> * <nat:8> ; <var:d4> := <var:d4> * <nat:8> ; <var:P> := <var:d4> <var:P> := <var:P> + <var:d3> <var:P> := <var:P> + <var:d2> <var:P> := <var:P> + <var:d1> <var:P> := <var:P> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:S> = <var:O> }} <def:poly> {{ <var:P> = <nat:8> * <var:O> ^ <nat:4> + <nat:8> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <var:O> /\ <var:d2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <var:O> /\ <var:d2> = <var:O> ^ <nat:2> /\ <var:d3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <var:O> /\ <var:d2> = <var:O> ^ <nat:2> /\ <var:d3> = <var:O> ^ <nat:3> /\ <var:d4> = <var:O> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <var:O> /\ <var:d2> = <var:O> ^ <nat:2> /\ <var:d3> = <var:O> ^ <nat:3> /\ <var:d4> = <var:O> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <nat:7> * <var:O> /\ <var:d2> = <var:O> ^ <nat:2> /\ <var:d3> = <var:O> ^ <nat:3> /\ <var:d4> = <var:O> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <nat:7> * <var:O> /\ <var:d2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:d3> = <var:O> ^ <nat:3> /\ <var:d4> = <var:O> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <nat:7> * <var:O> /\ <var:d2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:O> ^ <nat:3> /\ <var:d4> = <var:O> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <nat:7> * <var:O> /\ <var:d2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:O> ^ <nat:3> /\ <var:d4> = <nat:8> * <var:O> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <nat:7> * <var:O> /\ <var:d2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:O> ^ <nat:3> /\ <var:d0> = <nat:3> /\ <var:P> = <nat:8> * <var:O> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <nat:7> * <var:O> /\ <var:d2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:d0> = <nat:3> /\ <var:P> = <nat:8> * <var:O> ^ <nat:4> + <nat:8> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d1> = <nat:7> * <var:O> /\ <var:d0> = <nat:3> /\ <var:P> = <nat:8> * <var:O> ^ <nat:4> + <nat:8> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:d0> = <nat:3> /\ <var:P> = <nat:8> * <var:O> ^ <nat:4> + <nat:8> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:O> /\ <var:P> = <nat:8> * <var:O> ^ <nat:4> + <nat:8> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 