\begin{document} \begin{theorem} Define a set of instructions such that \begin{verbatim} <var:h0> := <nat:8> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:Q> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:Q> ; <var:h2> := <var:h2> * <var:Q> ; <var:h3> := <nat:9> ; <var:h3> := <var:h3> * <var:Q> ; <var:h3> := <var:h3> * <var:Q> ; <var:h3> := <var:h3> * <var:Q> ; <var:o> := <var:h3> ; <var:o> := <var:o> + <var:h2> ; <var:o> := <var:o> + <var:h1> ; <var:o> := <var:o> + <var:h0> \end{verbatim} Allowing it to be that $ <var:Q> = <var:M> $ prior to the execution of the list of instructions it follows that we have $ <var:o> = <nat:9> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:8> $ . \end{theorem} \begin{proof} The argument for the program is demonstrated by typical Hoare logic . Taking another step toward the next commands in our list of instructions , we see \verb | { <var:Q> = <var:M> } <var:h0> := <nat:8> { <var:Q> = <var:M> \land <var:h0> = <nat:8> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> } <var:h1> := <nat:2> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> } <var:h1> := <var:h1> * <var:Q> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> } <var:h2> := <nat:8> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> } <var:h2> := <var:h2> * <var:Q> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> } <var:h2> := <var:h2> * <var:Q> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> } <var:h3> := <nat:9> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:h3> = <nat:9> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:h3> = <nat:9> } <var:h3> := <var:h3> * <var:Q> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:M> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:M> } <var:h3> := <var:h3> * <var:Q> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:M> ^ <nat:2> } | , \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:M> ^ <nat:2> } <var:h3> := <var:h3> * <var:Q> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:M> ^ <nat:3> } | and \verb | { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:M> ^ <nat:3> } <var:o> := <var:h3> { <var:Q> = <var:M> \land <var:h0> = <nat:8> \land <var:h1> = <nat:2> \times <var:M> \land <var:h2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:o> = <nat:9> \times <var:M> ^ <nat:3> } | . This is shown using the variable binding law in typical Hoare techniques . Taking another step toward the subsequent line contained in the set of commands , we have \verb | { <var:Q> = <var:M> } <var:h0> := <nat:8> { <var:Q> = <var:M> \land <var:h0> = <nat:8> } | . Taking another step toward the subsequent piece of code seen in our segment of code , we have \verb | { <var:Q> = <var:M> } <var:h0> := <nat:8> { <var:Q> = <var:M> \land <var:h0> = <nat:8> } | . Observing the next command contained in our code segment , we have \verb | { <var:Q> = <var:M> } <var:h0> := <nat:8> { <var:Q> = <var:M> \land <var:h0> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Q> = <var:M> }} <var:h0> := <nat:8> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:Q> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:Q> ; <var:h2> := <var:h2> * <var:Q> ; <var:h3> := <nat:9> ; <var:h3> := <var:h3> * <var:Q> ; <var:h3> := <var:h3> * <var:Q> ; <var:h3> := <var:h3> * <var:Q> ; <var:o> := <var:h3> ; <var:o> := <var:o> + <var:h2> ; <var:o> := <var:o> + <var:h1> ; <var:o> := <var:o> + <var:h0> {{ <var:o> = <nat:9> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:h2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:h2> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:h2> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:h2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:h3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:h2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:h2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:h2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:h2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:o> = <nat:9> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:2> * <var:M> /\ <var:o> = <nat:9> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:h0> = <nat:8> /\ <var:o> = <nat:9> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:o> = <nat:9> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 