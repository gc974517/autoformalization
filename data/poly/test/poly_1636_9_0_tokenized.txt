\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:5> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:j> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:j> ; <var:M2> := <var:M2> * <var:j> ; <var:p> := <var:M2> ; <var:p> := <var:p> + <var:M1> ; <var:p> := <var:p> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Assume it to be that $ <var:j> = <var:z> $ prior to executing our series of instructions it follows that we have $ <var:p> = <nat:9> \times <var:z> ^ <nat:2> + <nat:5> \times <var:z> + <nat:5> $ once series of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is evident by typical Hoare reasoning . Jumping to the next lines contained in the series of instructions , \begin{verbatim} { <var:j> = <var:z> } <var:M0> := <nat:5> { <var:j> = <var:z> \land <var:M0> = <nat:5> } { <var:j> = <var:z> \land <var:M0> = <nat:5> } <var:M1> := <nat:5> { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> } { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> } <var:M1> := <var:M1> * <var:j> { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> } { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> } <var:M2> := <nat:9> { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> \land <var:M2> = <nat:9> } { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> \land <var:M2> = <nat:9> } <var:M2> := <var:M2> * <var:j> { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> \land <var:M2> = <nat:9> \times <var:z> } { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> \land <var:M2> = <nat:9> \times <var:z> } <var:M2> := <var:M2> * <var:j> { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> \land <var:M2> = <nat:9> \times <var:z> ^ <nat:2> } { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> \land <var:M2> = <nat:9> \times <var:z> ^ <nat:2> } <var:p> := <var:M2> { <var:j> = <var:z> \land <var:M0> = <nat:5> \land <var:M1> = <nat:5> \times <var:z> \land <var:p> = <nat:9> \times <var:z> ^ <nat:2> } \end{verbatim} This is shown by the inference rule given in standard Hoare reasoning . Moving on to the next step , \begin{verbatim} { <var:j> = <var:z> } <var:M0> := <nat:5> { <var:j> = <var:z> \land <var:M0> = <nat:5> } \end{verbatim} Taking a look at the proceeding piece of code in the code segment , we have \begin{verbatim} { <var:j> = <var:z> } <var:M0> := <nat:5> { <var:j> = <var:z> \land <var:M0> = <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:5> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:j> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:j> ; <var:M2> := <var:M2> * <var:j> ; <var:p> := <var:M2> ; <var:p> := <var:p> + <var:M1> ; <var:p> := <var:p> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:j> = <var:z> }} <def:poly> {{ <var:p> = <nat:9> * <var:z> ^ <nat:2> + <nat:5> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:5> * <var:z> /\ <var:M2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:5> * <var:z> /\ <var:M2> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:5> * <var:z> /\ <var:M2> = <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:5> * <var:z> /\ <var:p> = <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:M0> = <nat:5> /\ <var:p> = <nat:9> * <var:z> ^ <nat:2> + <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:p> = <nat:9> * <var:z> ^ <nat:2> + <nat:5> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 