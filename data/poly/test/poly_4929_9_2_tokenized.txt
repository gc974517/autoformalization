\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <nat:4> + <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <nat:2> + <var:V> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:m> = <var:z> $ ahead of running our segment of code , it must be that we have $ <var:V> = <nat:4> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions can be demonstrated through typical Hoare reasoning . Further , \[ \begin{tabular} {rcl} \{ <var:m> = <var:z> \} & <var:V> := <nat:4> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> \} \\ \{ <var:m> = <var:z> \land <var:V> = <nat:4> \} & <var:V> := <var:V> * <var:m> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> + \} \\ \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> + \} & <var:V> := <var:V> * <var:m> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> ^ <nat:2> + \} \\ \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> ^ <nat:2> + \} & <var:V> := <nat:4> + <var:V> * <var:m> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> \} \end{tabular} Taking another step toward the upcoming statements contained in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:m> = <var:z> \} & <var:V> := <nat:4> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> \} \\ \{ <var:m> = <var:z> \land <var:V> = <nat:4> \} & <var:V> := <var:V> * <var:m> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> + \} \\ \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> + \} & <var:V> := <var:V> * <var:m> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> ^ <nat:2> + \} \\ \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> ^ <nat:2> + \} & <var:V> := <nat:4> + <var:V> * <var:m> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> \} \\ \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> \} & <var:V> := <var:V> * <var:m> & \{ <var:m> = <var:z> \land <var:V> = <nat:4> * <var:z> ^ <nat:4> + <nat:4> * <var:z> + \} \end{tabular} This is shown using the variable update inference rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:4> ; <var:V> := <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <nat:4> + <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <var:V> * <var:m> ; <var:V> := <nat:2> + <var:V> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:m> = <var:z> }} <def:poly> {{ <var:V> = <nat:4> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> * <var:z> ^ <nat:4> + <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:4> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:V> = <nat:4> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 