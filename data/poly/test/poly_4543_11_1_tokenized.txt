\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m1> := <var:y> ; <var:m2> := <var:m1> * <var:y> ; <var:m3> := <var:m2> * <var:y> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:1> ; <var:v> := <var:m3> <var:v> := <var:v> + <var:m2> <var:v> := <var:v> + <var:m1> <var:v> := <var:v> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:y> = <var:d> $ prior to interpreting this code segment then we have $ <var:v> = <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> $ after set of commands exits . \end{theorem} \begin{proof} See that this decorated segment of code . \begin{eqnarray} \{ <var:y> = <var:d> \} \\ <var:m1> := <var:y> ; \\ \{ <var:y> = <var:d> \land <var:m1> = <var:d> \} \\ <var:m2> := <var:m1> * <var:y> ; \\ \{ <var:y> = <var:d> \land <var:m1> = <var:d> \land <var:m2> = <var:d> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:y> ; \\ \{ <var:y> = <var:d> \land <var:m1> = <var:d> \land <var:m2> = <var:d> ^ <nat:2> \land <var:m3> = <var:d> ^ <nat:3> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:y> = <var:d> \land <var:m1> = <var:d> \land <var:m2> = <var:d> ^ <nat:2> \land <var:m3> = <var:d> ^ <nat:3> \land <var:m0> = <nat:2> \} \\ <var:m1> := <var:m1> * <nat:3> ; \\ \{ <var:y> = <var:d> \land <var:m1> = <nat:3> \times <var:d> \land <var:m2> = <var:d> ^ <nat:2> \land <var:m3> = <var:d> ^ <nat:3> \land <var:m0> = <nat:2> \} \\ <var:m2> := <var:m2> * <nat:2> ; \\ \{ <var:y> = <var:d> \land <var:m1> = <nat:3> \times <var:d> \land <var:m2> = <nat:2> \times <var:d> ^ <nat:2> \land <var:m3> = <var:d> ^ <nat:3> \land <var:m0> = <nat:2> \} \\ <var:m3> := <var:m3> * <nat:1> ; \\ \{ <var:y> = <var:d> \land <var:m1> = <nat:3> \times <var:d> \land <var:m2> = <nat:2> \times <var:d> ^ <nat:2> \land <var:m3> = <nat:1> \times <var:d> ^ <nat:3> \land <var:m0> = <nat:2> \} \\ <var:v> := <var:m3> \\ \{ <var:y> = <var:d> \land <var:m1> = <nat:3> \times <var:d> \land <var:m2> = <nat:2> \times <var:d> ^ <nat:2> \land <var:m0> = <nat:2> \land <var:v> = <nat:1> \times <var:d> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:m2> \\ \{ <var:y> = <var:d> \land <var:m1> = <nat:3> \times <var:d> \land <var:m0> = <nat:2> \land <var:v> = <nat:1> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:m1> \\ \{ <var:y> = <var:d> \land <var:m0> = <nat:2> \land <var:v> = <nat:1> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> \} \\ <var:v> := <var:v> + <var:m0> \\ \{ <var:y> = <var:d> \land <var:v> = <nat:1> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:2> \} \end{eqnarray} Using typical Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:y> ; <var:m2> := <var:m1> * <var:y> ; <var:m3> := <var:m2> * <var:y> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:1> ; <var:v> := <var:m3> <var:v> := <var:v> + <var:m2> <var:v> := <var:v> + <var:m1> <var:v> := <var:v> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:y> = <var:d> }} <def:poly> {{ <var:v> = <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <var:d> /\ <var:m2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <var:d> /\ <var:m2> = <var:d> ^ <nat:2> /\ <var:m3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <var:d> /\ <var:m2> = <var:d> ^ <nat:2> /\ <var:m3> = <var:d> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <nat:3> * <var:d> /\ <var:m2> = <var:d> ^ <nat:2> /\ <var:m3> = <var:d> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <nat:3> * <var:d> /\ <var:m2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:m3> = <var:d> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <nat:3> * <var:d> /\ <var:m2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:d> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <nat:3> * <var:d> /\ <var:m2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:m0> = <nat:2> /\ <var:v> = <nat:1> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m1> = <nat:3> * <var:d> /\ <var:m0> = <nat:2> /\ <var:v> = <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:m0> = <nat:2> /\ <var:v> = <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:v> = <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 