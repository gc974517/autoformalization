\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R> := <nat:3> ; <var:R> := <nat:2> + <var:R> * <var:t> ; <var:R> := <nat:4> + <var:R> * <var:t> ; <var:R> := <var:R> * <var:t> ; <var:R> := <nat:1> + <var:R> * <var:t> ; <var:R> := <nat:1> + <var:R> * <var:t> ; <var:R> := <var:R> * <var:t> ; <var:R> := <nat:3> + <var:R> * <var:t> ; <var:R> := <nat:3> + <var:R> * <var:t> ; <var:R> := <nat:4> + <var:R> * <var:t> ; <var:R> := <nat:4> + <var:R> * <var:t> ; <var:R> := <var:R> * <var:t> ; <var:R> := <nat:3> + <var:R> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Allowing $ <var:t> = <var:Y> $ before the execution of this list of instructions it must be that we have $ <var:R> = <nat:3> * <var:Y> ^ <nat:12> + <nat:2> * <var:Y> ^ <nat:11> + <nat:4> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:Y> \} \\ <var:R> := <nat:3> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> \} \\ <var:R> := <nat:2> + <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> + <nat:2> \} \\ <var:R> := <nat:4> + <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> \} \\ <var:R> := <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + \} \\ <var:R> := <nat:1> + <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> \} \\ <var:R> := <nat:1> + <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> + <nat:1> \} \\ <var:R> := <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + \} \\ <var:R> := <nat:3> + <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> \} \\ <var:R> := <nat:3> + <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + <nat:3> \} \\ <var:R> := <nat:4> + <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:9> + <nat:2> * <var:Y> ^ <nat:8> + <nat:4> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> \} \end{eqnarray} Advancing interpreting our series of instructions gives : \begin{eqnarray} <var:R> := <nat:4> + <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:10> + <nat:2> * <var:Y> ^ <nat:9> + <nat:4> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> \} \\ <var:R> := <var:R> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:11> + <nat:2> * <var:Y> ^ <nat:10> + <nat:4> * <var:Y> ^ <nat:9> + <nat:1> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + \} \\ <var:R> := <nat:3> + <var:R> * <var:t> \\ \{ <var:t> = <var:Y> \land <var:R> = <nat:3> * <var:Y> ^ <nat:12> + <nat:2> * <var:Y> ^ <nat:11> + <nat:4> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:3> ; <var:R> := <nat:2> + <var:R> * <var:t> ; <var:R> := <nat:4> + <var:R> * <var:t> ; <var:R> := <var:R> * <var:t> ; <var:R> := <nat:1> + <var:R> * <var:t> ; <var:R> := <nat:1> + <var:R> * <var:t> ; <var:R> := <var:R> * <var:t> ; <var:R> := <nat:3> + <var:R> * <var:t> ; <var:R> := <nat:3> + <var:R> * <var:t> ; <var:R> := <nat:4> + <var:R> * <var:t> ; <var:R> := <nat:4> + <var:R> * <var:t> ; <var:R> := <var:R> * <var:t> ; <var:R> := <nat:3> + <var:R> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:t> = <var:Y> }} <def:poly> {{ <var:R> = <nat:3> * <var:Y> ^ <nat:12> + <nat:2> * <var:Y> ^ <nat:11> + <nat:4> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:9> + <nat:2> * <var:Y> ^ <nat:8> + <nat:4> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:10> + <nat:2> * <var:Y> ^ <nat:9> + <nat:4> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:11> + <nat:2> * <var:Y> ^ <nat:10> + <nat:4> * <var:Y> ^ <nat:9> + <nat:1> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:R> = <nat:3> * <var:Y> ^ <nat:12> + <nat:2> * <var:Y> ^ <nat:11> + <nat:4> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 