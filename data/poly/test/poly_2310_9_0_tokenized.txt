\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:2> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:y> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:y> ; <var:p2> := <var:p2> * <var:y> ; <var:d> := <var:p2> ; <var:d> := <var:d> + <var:p1> ; <var:d> := <var:d> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Allow ( given any natural numbers $ <var:q> $ ) it to hold that $ <var:y> = <var:q> $ prior to the execution of the set of commands , it holds that we see $ <var:d> = <nat:4> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:2> $ once program is done executing . \end{theorem} \begin{proof} The flow of logic for the program can be done with Hoare techniques . Looking at the proceeding line of code contained in our list of commands , the variable assignmet line assigning $ <nat:2> $ to $ <var:p0>$ . This transfers the precondition $ \{ <var:y> = <var:q> \} $ into the condition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \} $ . This is known to be sound with the assignment scheme given by usual Hoare reasoning . Advancing on , we have the command \verb | <var:p1> := <nat:5> ; | . This transfers the condition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \} $ as $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \} $ . This is known to be sound through the assignment inference rule from standard Hoare techniques . Moving forward to the subsequent piece of code seen in the program , the command letting $ <var:p1> * <var:y> $ as $ <var:p1>$ . This takes the precondition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \} $ toward $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \} $ . This is shown with the assignment rule of typical Hoare logic . Taking another step toward the following command seen in the code , we see the command binding $ <nat:4> $ as $ <var:p2>$ . This redefines the precondition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \} $ toward the condition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \land <var:p2> = <nat:4> \} $ . Next , the code \verb | <var:p2> := <var:p2> * <var:y> ; | . This advances the condition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \land <var:p2> = <nat:4> \} $ to the condition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \land <var:p2> = <nat:4> \times <var:q> \} $ . Immediately after , the environment update command \verb | <var:p2> := <var:p2> * <var:y> ; | . This line redefines the precondition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \land <var:p2> = <nat:4> \times <var:q> \} $ into the postcondition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \land <var:p2> = <nat:4> \times <var:q> ^ <nat:2> \} $ . This is ensured using the assignment law in standard Hoare logic . Observing the next step found in the segment of code , the environment update statement \verb | <var:d> := <var:p2> ; | . This transfers the condition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \land <var:p2> = <nat:4> \times <var:q> ^ <nat:2> \} $ as the postcondition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \land <var:d> = <nat:4> \times <var:q> ^ <nat:2> \} $ . Further , we see the line \verb | <var:d> := <var:d> + <var:p1> ; | . This forwards $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \times <var:q> \land <var:d> = <nat:4> \times <var:q> ^ <nat:2> \} $ into the condition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:d> = <nat:4> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> \} $ . Stepping through , we see the variable update line \verb | <var:d> := <var:d> + <var:p0> | . This command takes the precondition $ \{ <var:y> = <var:q> \land <var:p0> = <nat:2> \land <var:d> = <nat:4> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> \} $ toward the postcondition $ \{ <var:y> = <var:q> \land <var:d> = <nat:4> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:2> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:y> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:y> ; <var:p2> := <var:p2> * <var:y> ; <var:d> := <var:p2> ; <var:d> := <var:d> + <var:p1> ; <var:d> := <var:d> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:y> = <var:q> }} <def:poly> {{ <var:d> = <nat:4> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:5> * <var:q> /\ <var:p2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:5> * <var:q> /\ <var:p2> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:5> * <var:q> /\ <var:p2> = <nat:4> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:5> * <var:q> /\ <var:d> = <nat:4> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:p0> = <nat:2> /\ <var:d> = <nat:4> * <var:q> ^ <nat:2> + <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:q> /\ <var:d> = <nat:4> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 