\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as follows \begin{verbatim} <var:D> := <nat:4> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:1> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:4> + <var:D> * <var:i> ; <var:D> := <nat:2> + <var:D> * <var:i> \end{verbatim} Assume that $ <var:i> = <var:L> $ prior to evaluating this segment of code , it holds that we see $ <var:D> = <nat:4> \times <var:L> ^ <nat:6> + <nat:3> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:2> $ after list of instructions exits . \end{theorem} \begin{proof} Note that the following decorated segment of code . \begin{eqnarray} \{ <var:i> = <var:L> \} \\ <var:D> := <nat:4> ; \\ \{ <var:i> = <var:L> \land <var:D> = <nat:4> \} \\ <var:D> := <nat:3> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:L> \land <var:D> = <nat:4> * <var:L> + <nat:3> \} \\ <var:D> := <nat:3> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:L> \land <var:D> = <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> \} \\ <var:D> := <nat:1> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:L> \land <var:D> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> \} \\ <var:D> := <nat:3> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:L> \land <var:D> = <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> \} \\ <var:D> := <nat:4> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:L> \land <var:D> = <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:4> \} \\ <var:D> := <nat:2> + <var:D> * <var:i> \\ \{ <var:i> = <var:L> \land <var:D> = <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:i> = <var:L> }} <var:D> := <nat:4> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:1> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:4> + <var:D> * <var:i> ; <var:D> := <nat:2> + <var:D> * <var:i> {{ <var:D> = <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:D> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:D> = <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:D> = <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:D> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:D> = <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:D> = <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:D> = <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 