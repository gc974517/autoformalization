\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:N> ; <var:a0> := <nat:9> ; <var:a1> := <var:a1> * <nat:6> ; <var:Y> := <var:a1> <var:Y> := <var:Y> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Allow that we have $ <var:N> = <var:m> $ --- given some positive integers $ <var:m> $ --- prior to interpreting this code segment , it follows that we see $ <var:Y> = <nat:6> \times <var:m> + <nat:9> $ after list of instructions has terminated . \end{theorem} \begin{proof} Arguing the correctness of our program is given by Hoare logic . Paying attention to the subsequent bit of code in our program , we have the code \verb | <var:a1> := <var:N> ; | . This forwards the precondition $ \{ <var:N> = <var:m> \} $ to $ \{ <var:N> = <var:m> \land <var:a1> = <var:m> \} $ . This is known to be sound by the assignment inference rule found in typical Hoare logic . Paying attention to the proceeding statement seen in the program , the assignment line \verb | <var:a0> := <nat:9> ; | . This code forwards $ \{ <var:N> = <var:m> \land <var:a1> = <var:m> \} $ as the postcondition $ \{ <var:N> = <var:m> \land <var:a1> = <var:m> \land <var:a0> = <nat:9> \} $ . Moving on to the next line of code seen in our program , the environment update statement giving $ <var:a1> * <nat:6> $ as $ <var:a1>$ . This redefines the precondition $ \{ <var:N> = <var:m> \land <var:a1> = <var:m> \land <var:a0> = <nat:9> \} $ to the postcondition $ \{ <var:N> = <var:m> \land <var:a1> = <nat:6> \cdot <var:m> \land <var:a0> = <nat:9> \} $ . This is shown using the assignment inference rule given in typical Hoare logic . Following , we see the environment update code \verb | <var:Y> := <var:a1> | . This code advances the condition $ \{ <var:N> = <var:m> \land <var:a1> = <nat:6> \cdot <var:m> \land <var:a0> = <nat:9> \} $ into the postcondition $ \{ <var:N> = <var:m> \land <var:a0> = <nat:9> \land <var:Y> = <nat:6> \cdot <var:m> \} $ . Looking at the next piece of code seen in the program , we see the assignment command binding $ <var:Y> + <var:a0$ to $ <var:Y>$ . This moves $ \{ <var:N> = <var:m> \land <var:a0> = <nat:9> \land <var:Y> = <nat:6> \cdot <var:m> \} $ as $ \{ <var:N> = <var:m> \land <var:Y> = <nat:6> \cdot <var:m> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:N> ; <var:a0> := <nat:9> ; <var:a1> := <var:a1> * <nat:6> ; <var:Y> := <var:a1> <var:Y> := <var:Y> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:N> = <var:m> }} <def:poly> {{ <var:Y> = <nat:6> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:m> /\ <var:a1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:m> /\ <var:a1> = <var:m> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:m> /\ <var:a1> = <nat:6> * <var:m> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:m> /\ <var:a0> = <nat:9> /\ <var:Y> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:m> /\ <var:Y> = <nat:6> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 