\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:4> ; <var:X> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:D> = <var:v> $ for some positive numbers $ <var:v> $ ahead of executing the list of instructions , then we have $ <var:X> = <nat:4> $ when set of commands is done . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions can be accomplished using Hoare techniques . Going to the next step , \verb | { <var:D> = <var:v> } <var:s0> := <nat:4> { <var:D> = <var:v> \land <var:s0> = <nat:4> } | . This is shown using the variable assignmet law of typical Hoare reasoning . Going to the next step , we have \verb | { <var:D> = <var:v> } <var:s0> := <nat:4> { <var:D> = <var:v> \land <var:s0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:X> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:D> = <var:v> }} <def:poly> {{ <var:X> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:X> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 