\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as \begin{verbatim} <var:v1> := <var:a> ; <var:v0> := <nat:4> ; <var:v1> := <var:v1> * <nat:2> ; <var:O> := <var:v1> <var:O> := <var:O> + <var:v0> \end{verbatim} Assuming that we have $ <var:a> = <var:H> $ --- with some natural numbers $ <var:H> $ --- ahead of the evaluation of the program it holds that $ <var:O> = <nat:2> \cdot <var:H> + <nat:4> $ when set of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this code segment can be shown with usual Hoare techniques . Moving on , we see the variable binding statement \verb | <var:v1> := <var:a> ; | . This forwards $ \{ <var:a> = <var:H> \} $ as the condition $ \{ <var:a> = <var:H> \land <var:v1> = <var:H> \} $ . This is guaranteed with the assignment inference rule defined by typical Hoare logic . Moving forward , we see the environment update statement giving $ <nat:4> $ to $ <var:v0>$ . This statement advances the precondition $ \{ <var:a> = <var:H> \land <var:v1> = <var:H> \} $ as the postcondition $ \{ <var:a> = <var:H> \land <var:v1> = <var:H> \land <var:v0> = <nat:4> \} $ . Further , the variable update code giving $ <var:v1> * <nat:2> $ to $ <var:v1>$ . This redefines the precondition $ \{ <var:a> = <var:H> \land <var:v1> = <var:H> \land <var:v0> = <nat:4> \} $ as the postcondition $ \{ <var:a> = <var:H> \land <var:v1> = <nat:2> * <var:H> \land <var:v0> = <nat:4> \} $ . Immediately following , the code \verb | <var:O> := <var:v1> | . This command transfers the precondition $ \{ <var:a> = <var:H> \land <var:v1> = <nat:2> * <var:H> \land <var:v0> = <nat:4> \} $ to $ \{ <var:a> = <var:H> \land <var:v0> = <nat:4> \land <var:O> = <nat:2> * <var:H> \} $ . This is shown to be logically sound by the assignment inference rule of usual Hoare logic . Advancing to the next step , we have the variable binding statement defining $ <var:O> + <var:v0$ as $ <var:O>$ . This code transfers $ \{ <var:a> = <var:H> \land <var:v0> = <nat:4> \land <var:O> = <nat:2> * <var:H> \} $ to $ \{ <var:a> = <var:H> \land <var:O> = <nat:2> * <var:H> + <nat:4> \} $ . This is shown by the assignment inference rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:a> = <var:H> }} <var:v1> := <var:a> ; <var:v0> := <nat:4> ; <var:v1> := <var:v1> * <nat:2> ; <var:O> := <var:v1> <var:O> := <var:O> + <var:v0> {{ <var:O> = <nat:2> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:v1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:v1> = <var:H> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:v1> = <nat:2> * <var:H> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:v0> = <nat:4> /\ <var:O> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:O> = <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 