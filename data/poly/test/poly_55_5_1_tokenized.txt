\begin{document} \begin{theorem} Consider the following series of commands : \begin{verbatim} <var:L1> := <var:p> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:5> ; <var:Q> := <var:L1> <var:Q> := <var:Q> + <var:L0> \end{verbatim} Allowing that we have $ <var:p> = <var:h> $ , for any positive integers $ <var:h> $ , ahead of the evaluation of our program , it follows that we have $ <var:Q> = <nat:5> \times <var:h> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives us : \begin{eqnarray} \{ <var:p> = <var:h> \} \\ <var:L1> := <var:p> ; \\ \{ <var:p> = <var:h> \land <var:L1> = <var:h> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:p> = <var:h> \land <var:L1> = <var:h> \land <var:L0> = <nat:1> \} \\ <var:L1> := <var:L1> * <nat:5> ; \\ \{ <var:p> = <var:h> \land <var:L1> = <nat:5> * <var:h> \land <var:L0> = <nat:1> \} \\ <var:Q> := <var:L1> \\ \{ <var:p> = <var:h> \land <var:L0> = <nat:1> \land <var:Q> = <nat:5> * <var:h> \} \\ <var:Q> := <var:Q> + <var:L0> \\ \{ <var:p> = <var:h> \land <var:Q> = <nat:5> * <var:h> + <nat:1> \} \end{eqnarray} Hence , this series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:p> = <var:h> }} <var:L1> := <var:p> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:5> ; <var:Q> := <var:L1> <var:Q> := <var:Q> + <var:L0> {{ <var:Q> = <nat:5> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:L1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:L1> = <var:h> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:L1> = <nat:5> * <var:h> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:L0> = <nat:1> /\ <var:Q> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:Q> = <nat:5> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 