\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:9> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:O> ; <var:W> := <var:E1> ; <var:W> := <var:W> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume for some $ <var:J> \in \mathbb{Z}^+ $ that we have $ <var:O> = <var:J> $ ahead of the evaluation of our program , then we see $ <var:W> = <nat:3> \times <var:J> + <nat:9> $ when series of instructions has exited . \end{theorem} \begin{proof} Using Hoare techniques returns : \begin{eqnarray} \{ <var:O> = <var:J> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:O> = <var:J> \land <var:E0> = <nat:9> \} \\ <var:E1> := <nat:3> ; \\ \{ <var:O> = <var:J> \land <var:E0> = <nat:9> \land <var:E1> = <nat:3> \} \\ <var:E1> := <var:E1> * <var:O> ; \\ \{ <var:O> = <var:J> \land <var:E0> = <nat:9> \land <var:E1> = <nat:3> \times <var:J> \} \\ <var:W> := <var:E1> ; \\ \{ <var:O> = <var:J> \land <var:E0> = <nat:9> \land <var:W> = <nat:3> \times <var:J> \} \\ <var:W> := <var:W> + <var:E0> \\ \{ <var:O> = <var:J> \land <var:W> = <nat:3> \times <var:J> + <nat:9> \} \end{eqnarray} As a consequence , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:9> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:O> ; <var:W> := <var:E1> ; <var:W> := <var:W> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:O> = <var:J> }} <def:poly> {{ <var:W> = <nat:3> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:E0> = <nat:9> /\ <var:W> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:W> = <nat:3> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 