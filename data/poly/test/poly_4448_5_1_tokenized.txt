\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:C1> := <var:H> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:3> ; <var:O> := <var:C1> <var:O> := <var:O> + <var:C0> \end{verbatim} Assuming ( for $ <var:i> $ ) that $ <var:H> = <var:i> $ before the execution of the code segment , then we see $ <var:O> = <nat:3> * <var:i> + <nat:5> $ after code segment terminates . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is clear through Hoare techniques . Moving on to the subsequent bits of codefound in our series of commands , we have \begin{eqnarray} \{ <var:H> = <var:i> \} \, <var:C1> := <var:H> \, \{ <var:H> = <var:i> \land <var:C1> = <var:i> \} \\ \{ <var:H> = <var:i> \land <var:C1> = <var:i> \} \, <var:C0> := <nat:5> \, \{ <var:H> = <var:i> \land <var:C1> = <var:i> \land <var:C0> = <nat:5> \} \end{eqnarray} This is shown to be logically sound by the binding law found in standard Hoare logic . After , we see \begin{eqnarray} \{ <var:H> = <var:i> \} \, <var:C1> := <var:H> \, \{ <var:H> = <var:i> \land <var:C1> = <var:i> \} \\ \{ <var:H> = <var:i> \land <var:C1> = <var:i> \} \, <var:C0> := <nat:5> \, \{ <var:H> = <var:i> \land <var:C1> = <var:i> \land <var:C0> = <nat:5> \} \\ \{ <var:H> = <var:i> \land <var:C1> = <var:i> \land <var:C0> = <nat:5> \} \, <var:C1> := <var:C1> * <nat:3> \, \{ <var:H> = <var:i> \land <var:C1> = <nat:3> \times <var:i> \land <var:C0> = <nat:5> \} \end{eqnarray} This is guaranteed with the variable binding scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:H> = <var:i> }} <var:C1> := <var:H> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:3> ; <var:O> := <var:C1> <var:O> := <var:O> + <var:C0> {{ <var:O> = <nat:3> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:C1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:C1> = <var:i> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:C1> = <nat:3> * <var:i> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:C0> = <nat:5> /\ <var:O> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:O> = <nat:3> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 