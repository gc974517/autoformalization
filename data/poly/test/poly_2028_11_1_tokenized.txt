\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:x> ; <var:r2> := <var:r1> * <var:x> ; <var:r3> := <var:r2> * <var:x> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:5> ; <var:r2> := <var:r2> * <nat:1> ; <var:r3> := <var:r3> * <nat:9> ; <var:P> := <var:r3> <var:P> := <var:P> + <var:r2> <var:P> := <var:P> + <var:r1> <var:P> := <var:P> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:x> = <var:O> $ prior to running the code it follows that $ <var:P> = <nat:9> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:1> $ after set of commands has executed . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives : \begin{eqnarray} \{ <var:x> = <var:O> \} \\ <var:r1> := <var:x> ; \\ \{ <var:x> = <var:O> \land <var:r1> = <var:O> \} \\ <var:r2> := <var:r1> * <var:x> ; \\ \{ <var:x> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <var:O> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:x> ; \\ \{ <var:x> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <var:O> ^ <nat:2> \land <var:r3> = <var:O> ^ <nat:3> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:x> = <var:O> \land <var:r1> = <var:O> \land <var:r2> = <var:O> ^ <nat:2> \land <var:r3> = <var:O> ^ <nat:3> \land <var:r0> = <nat:1> \} \\ <var:r1> := <var:r1> * <nat:5> ; \\ \{ <var:x> = <var:O> \land <var:r1> = <nat:5> * <var:O> \land <var:r2> = <var:O> ^ <nat:2> \land <var:r3> = <var:O> ^ <nat:3> \land <var:r0> = <nat:1> \} \\ <var:r2> := <var:r2> * <nat:1> ; \\ \{ <var:x> = <var:O> \land <var:r1> = <nat:5> * <var:O> \land <var:r2> = <nat:1> * <var:O> ^ <nat:2> \land <var:r3> = <var:O> ^ <nat:3> \land <var:r0> = <nat:1> \} \\ <var:r3> := <var:r3> * <nat:9> ; \\ \{ <var:x> = <var:O> \land <var:r1> = <nat:5> * <var:O> \land <var:r2> = <nat:1> * <var:O> ^ <nat:2> \land <var:r3> = <nat:9> * <var:O> ^ <nat:3> \land <var:r0> = <nat:1> \} \\ <var:P> := <var:r3> \\ \{ <var:x> = <var:O> \land <var:r1> = <nat:5> * <var:O> \land <var:r2> = <nat:1> * <var:O> ^ <nat:2> \land <var:r0> = <nat:1> \land <var:P> = <nat:9> * <var:O> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:r2> \\ \{ <var:x> = <var:O> \land <var:r1> = <nat:5> * <var:O> \land <var:r0> = <nat:1> \land <var:P> = <nat:9> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:r1> \\ \{ <var:x> = <var:O> \land <var:r0> = <nat:1> \land <var:P> = <nat:9> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:5> * <var:O> \} \\ <var:P> := <var:P> + <var:r0> \\ \{ <var:x> = <var:O> \land <var:P> = <nat:9> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:1> \} \end{eqnarray} Given the above , this code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:x> ; <var:r2> := <var:r1> * <var:x> ; <var:r3> := <var:r2> * <var:x> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:5> ; <var:r2> := <var:r2> * <nat:1> ; <var:r3> := <var:r3> * <nat:9> ; <var:P> := <var:r3> <var:P> := <var:P> + <var:r2> <var:P> := <var:P> + <var:r1> <var:P> := <var:P> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:x> = <var:O> }} <def:poly> {{ <var:P> = <nat:9> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <var:O> ^ <nat:2> /\ <var:r3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <var:O> /\ <var:r2> = <var:O> ^ <nat:2> /\ <var:r3> = <var:O> ^ <nat:3> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <nat:5> * <var:O> /\ <var:r2> = <var:O> ^ <nat:2> /\ <var:r3> = <var:O> ^ <nat:3> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <nat:5> * <var:O> /\ <var:r2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:r3> = <var:O> ^ <nat:3> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <nat:5> * <var:O> /\ <var:r2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:r3> = <nat:9> * <var:O> ^ <nat:3> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <nat:5> * <var:O> /\ <var:r2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:r0> = <nat:1> /\ <var:P> = <nat:9> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r1> = <nat:5> * <var:O> /\ <var:r0> = <nat:1> /\ <var:P> = <nat:9> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:r0> = <nat:1> /\ <var:P> = <nat:9> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:P> = <nat:9> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 