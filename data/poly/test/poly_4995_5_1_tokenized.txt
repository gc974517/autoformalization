\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:j> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:6> ; <var:L> := <var:v1> <var:L> := <var:L> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Assume that $ <var:j> = <var:G> $ prior to executing the set of commands it must be that $ <var:L> = <nat:6> \times <var:G> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions is evident through Hoare logic . Moving forward to the upcoming lines of codein our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:G> \} & <var:v1> := <var:j> & \{ <var:j> = <var:G> \land <var:v1> = <var:G> \} \\ \{ <var:j> = <var:G> \land <var:v1> = <var:G> \} & <var:v0> := <nat:1> & \{ <var:j> = <var:G> \land <var:v1> = <var:G> \land <var:v0> = <nat:1> \} \end{tabular} This is rigorously given using the binding rule given by typical Hoare reasoning . Jumping to the proceeding statements found in the program , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:G> \} & <var:v1> := <var:j> & \{ <var:j> = <var:G> \land <var:v1> = <var:G> \} \\ \{ <var:j> = <var:G> \land <var:v1> = <var:G> \} & <var:v0> := <nat:1> & \{ <var:j> = <var:G> \land <var:v1> = <var:G> \land <var:v0> = <nat:1> \} \end{tabular} This is ensured through the variable update scheme from standard Hoare techniques . Jumping to the next piece of code seen in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:j> = <var:G> \} & <var:v1> := <var:j> & \{ <var:j> = <var:G> \land <var:v1> = <var:G> \} \end{tabular} This is shown to be logically sound using the environment update scheme in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:j> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:6> ; <var:L> := <var:v1> <var:L> := <var:L> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:j> = <var:G> }} <def:poly> {{ <var:L> = <nat:6> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:v1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:v1> = <var:G> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:v1> = <nat:6> * <var:G> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:v0> = <nat:1> /\ <var:L> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:L> = <nat:6> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 