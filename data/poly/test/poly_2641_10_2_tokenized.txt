\begin{document} \begin{theorem} Let the following program as \begin{verbatim} <var:g> := <nat:1> ; <var:g> := <nat:2> + <var:g> * <var:E> ; <var:g> := <nat:4> + <var:g> * <var:E> ; <var:g> := <nat:4> + <var:g> * <var:E> ; <var:g> := <nat:1> + <var:g> * <var:E> ; <var:g> := <nat:2> + <var:g> * <var:E> ; <var:g> := <nat:1> + <var:g> * <var:E> ; <var:g> := <var:g> * <var:E> ; <var:g> := <var:g> * <var:E> ; <var:g> := <nat:3> + <var:g> * <var:E> \end{verbatim} Allow ( for all natural coefficients $ <var:Z> $ ) it to hold that $ <var:E> = <var:Z> $ ahead of interpreting our series of instructions , it must be that we have $ <var:g> = <nat:1> \times <var:Z> ^ <nat:9> + <nat:2> \times <var:Z> ^ <nat:8> + <nat:4> \times <var:Z> ^ <nat:7> + <nat:4> \times <var:Z> ^ <nat:6> + <nat:1> \times <var:Z> ^ <nat:5> + <nat:2> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:Z> \} \\ <var:g> := <nat:1> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \} \\ <var:g> := <nat:2> + <var:g> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> + <nat:2> \} \\ <var:g> := <nat:4> + <var:g> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:4> \} \\ <var:g> := <nat:4> + <var:g> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:4> \} \\ <var:g> := <nat:1> + <var:g> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:1> \} \\ <var:g> := <nat:2> + <var:g> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> ^ <nat:5> + <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:2> \} \\ <var:g> := <nat:1> + <var:g> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> ^ <nat:6> + <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:1> \} \\ <var:g> := <var:g> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> ^ <nat:7> + <nat:2> \cdot <var:Z> ^ <nat:6> + <nat:4> \cdot <var:Z> ^ <nat:5> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + \} \\ <var:g> := <var:g> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> ^ <nat:8> + <nat:2> \cdot <var:Z> ^ <nat:7> + <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:4> \cdot <var:Z> ^ <nat:5> + <nat:1> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + \} \end{eqnarray} Allowing executing this list of commands gives : \begin{eqnarray} <var:g> := <nat:3> + <var:g> * <var:E> \\ \{ <var:E> = <var:Z> \land <var:g> = <nat:1> \cdot <var:Z> ^ <nat:9> + <nat:2> \cdot <var:Z> ^ <nat:8> + <nat:4> \cdot <var:Z> ^ <nat:7> + <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:1> \cdot <var:Z> ^ <nat:5> + <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:E> = <var:Z> }} <var:g> := <nat:1> ; <var:g> := <nat:2> + <var:g> * <var:E> ; <var:g> := <nat:4> + <var:g> * <var:E> ; <var:g> := <nat:4> + <var:g> * <var:E> ; <var:g> := <nat:1> + <var:g> * <var:E> ; <var:g> := <nat:2> + <var:g> * <var:E> ; <var:g> := <nat:1> + <var:g> * <var:E> ; <var:g> := <var:g> * <var:E> ; <var:g> := <var:g> * <var:E> ; <var:g> := <nat:3> + <var:g> * <var:E> {{ <var:g> = <nat:1> * <var:Z> ^ <nat:9> + <nat:2> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g> = <nat:1> * <var:Z> ^ <nat:9> + <nat:2> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 