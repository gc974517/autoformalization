\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j> := <nat:1> ; <var:j> := <var:j> * <var:Q> ; <var:j> := <nat:4> + <var:j> * <var:Q> ; <var:j> := <nat:1> + <var:j> * <var:Q> ; <var:j> := <var:j> * <var:Q> ; <var:j> := <var:j> * <var:Q> ; <var:j> := <var:j> * <var:Q> ; <var:j> := <nat:3> + <var:j> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:Q> = <var:S> $ prior to executing our set of commands , it follows that we have $ <var:j> = <nat:1> \times <var:S> ^ <nat:7> + <nat:4> \times <var:S> ^ <nat:5> + <nat:1> \times <var:S> ^ <nat:4> + <nat:3> $ after segment of code exits . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:Q> = <var:S> \} \\ <var:j> := <nat:1> ; \\ \{ <var:Q> = <var:S> \land <var:j> = <nat:1> \} \\ <var:j> := <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:j> = <nat:1> \cdot <var:S> + \} \end{eqnarray} Continuing executing this code segment returns : \begin{eqnarray} <var:j> := <nat:4> + <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:j> = <nat:1> \cdot <var:S> ^ <nat:2> + <nat:4> \} \\ <var:j> := <nat:1> + <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:j> = <nat:1> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> + <nat:1> \} \\ <var:j> := <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:j> = <nat:1> \cdot <var:S> ^ <nat:4> + <nat:4> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + \} \\ <var:j> := <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:j> = <nat:1> \cdot <var:S> ^ <nat:5> + <nat:4> \cdot <var:S> ^ <nat:3> + <nat:1> \cdot <var:S> ^ <nat:2> + \} \\ <var:j> := <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:j> = <nat:1> \cdot <var:S> ^ <nat:6> + <nat:4> \cdot <var:S> ^ <nat:4> + <nat:1> \cdot <var:S> ^ <nat:3> + \} \\ <var:j> := <nat:3> + <var:j> * <var:Q> \\ \{ <var:Q> = <var:S> \land <var:j> = <nat:1> \cdot <var:S> ^ <nat:7> + <nat:4> \cdot <var:S> ^ <nat:5> + <nat:1> \cdot <var:S> ^ <nat:4> + <nat:3> \} \end{eqnarray} Considering the above , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:1> ; <var:j> := <var:j> * <var:Q> ; <var:j> := <nat:4> + <var:j> * <var:Q> ; <var:j> := <nat:1> + <var:j> * <var:Q> ; <var:j> := <var:j> * <var:Q> ; <var:j> := <var:j> * <var:Q> ; <var:j> := <var:j> * <var:Q> ; <var:j> := <nat:3> + <var:j> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Q> = <var:S> }} <def:poly> {{ <var:j> = <nat:1> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:j> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:j> = <nat:1> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:j> = <nat:1> * <var:S> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:j> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:j> = <nat:1> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:j> = <nat:1> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:j> = <nat:1> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:j> = <nat:1> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 