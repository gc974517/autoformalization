\begin{document} \begin{theorem} Consider a series of commands : \begin{verbatim} <var:g1> := <var:y> ; <var:g0> := <nat:6> ; <var:g1> := <var:g1> * <nat:8> ; <var:j> := <var:g1> <var:j> := <var:j> + <var:g0> \end{verbatim} Assume that $ <var:y> = <var:r> $ prior to the evaluation of this list of instructions , it follows that we have $ <var:j> = <nat:8> * <var:r> + <nat:6> $ after set of instructions is done . \end{theorem} \begin{proof} The proof of this program can be accomplished through this decorated list of instructions . \begin{eqnarray} \{ <var:y> = <var:r> \} \\ <var:g1> := <var:y> ; \\ \{ <var:y> = <var:r> \land <var:g1> = <var:r> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:y> = <var:r> \land <var:g1> = <var:r> \land <var:g0> = <nat:6> \} \\ <var:g1> := <var:g1> * <nat:8> ; \\ \{ <var:y> = <var:r> \land <var:g1> = <nat:8> \cdot <var:r> \land <var:g0> = <nat:6> \} \\ <var:j> := <var:g1> \\ \{ <var:y> = <var:r> \land <var:g0> = <nat:6> \land <var:j> = <nat:8> \cdot <var:r> \} \\ <var:j> := <var:j> + <var:g0> \\ \{ <var:y> = <var:r> \land <var:j> = <nat:8> \cdot <var:r> + <nat:6> \} \end{eqnarray} Applying standard Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:y> = <var:r> }} <var:g1> := <var:y> ; <var:g0> := <nat:6> ; <var:g1> := <var:g1> * <nat:8> ; <var:j> := <var:g1> <var:j> := <var:j> + <var:g0> {{ <var:j> = <nat:8> * <var:r> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:g1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:g1> = <var:r> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:g1> = <nat:8> * <var:r> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:g0> = <nat:6> /\ <var:j> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:j> = <nat:8> * <var:r> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 