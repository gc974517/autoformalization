\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:B> ; <var:Q2> := <var:Q1> * <var:B> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:w> := <var:Q2> <var:w> := <var:w> + <var:Q1> <var:w> := <var:w> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:B> = <var:V> $ ahead of interpreting this segment of code then we have $ <var:w> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> $ after series of commands is done . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:B> = <var:V> \} \\ <var:Q1> := <var:B> ; \\ \{ <var:B> = <var:V> \land <var:Q1> = <var:V> \} \\ <var:Q2> := <var:Q1> * <var:B> ; \\ \{ <var:B> = <var:V> \land <var:Q1> = <var:V> \land <var:Q2> = <var:V> ^ <nat:2> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:B> = <var:V> \land <var:Q1> = <var:V> \land <var:Q2> = <var:V> ^ <nat:2> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <nat:4> ; \\ \{ <var:B> = <var:V> \land <var:Q1> = <nat:4> \cdot <var:V> \land <var:Q2> = <var:V> ^ <nat:2> \land <var:Q0> = <nat:4> \} \\ <var:Q2> := <var:Q2> * <nat:2> ; \\ \{ <var:B> = <var:V> \land <var:Q1> = <nat:4> \cdot <var:V> \land <var:Q2> = <nat:2> \cdot <var:V> ^ <nat:2> \land <var:Q0> = <nat:4> \} \\ <var:w> := <var:Q2> \\ \{ <var:B> = <var:V> \land <var:Q1> = <nat:4> \cdot <var:V> \land <var:Q0> = <nat:4> \land <var:w> = <nat:2> \cdot <var:V> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:Q1> \\ \{ <var:B> = <var:V> \land <var:Q0> = <nat:4> \land <var:w> = <nat:2> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> \} \\ <var:w> := <var:w> + <var:Q0> \\ \{ <var:B> = <var:V> \land <var:w> = <nat:2> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + <nat:4> \} \end{eqnarray} Given the above , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q1> := <var:B> ; <var:Q2> := <var:Q1> * <var:B> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:w> := <var:Q2> <var:w> := <var:w> + <var:Q1> <var:w> := <var:w> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:B> = <var:V> }} <def:poly> {{ <var:w> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Q1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Q1> = <var:V> /\ <var:Q2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Q1> = <var:V> /\ <var:Q2> = <var:V> ^ <nat:2> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Q1> = <nat:4> * <var:V> /\ <var:Q2> = <var:V> ^ <nat:2> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Q1> = <nat:4> * <var:V> /\ <var:Q2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Q1> = <nat:4> * <var:V> /\ <var:Q0> = <nat:4> /\ <var:w> = <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Q0> = <nat:4> /\ <var:w> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:w> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 