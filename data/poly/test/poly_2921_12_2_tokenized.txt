\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:P> := <nat:3> ; <var:P> := <nat:2> + <var:P> * <var:y> ; <var:P> := <nat:4> + <var:P> * <var:y> ; <var:P> := <nat:3> + <var:P> * <var:y> ; <var:P> := <nat:1> + <var:P> * <var:y> ; <var:P> := <nat:1> + <var:P> * <var:y> ; <var:P> := <var:P> * <var:y> ; <var:P> := <nat:2> + <var:P> * <var:y> ; <var:P> := <nat:2> + <var:P> * <var:y> ; <var:P> := <nat:4> + <var:P> * <var:y> ; <var:P> := <nat:3> + <var:P> * <var:y> ; <var:P> := <nat:3> + <var:P> * <var:y> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Assume $ <var:y> = <var:W> $ ahead of interpreting our series of instructions it holds that we have $ <var:P> = <nat:3> \cdot <var:W> ^ <nat:11> + <nat:2> \cdot <var:W> ^ <nat:10> + <nat:4> \cdot <var:W> ^ <nat:9> + <nat:3> \cdot <var:W> ^ <nat:8> + <nat:1> \cdot <var:W> ^ <nat:7> + <nat:1> \cdot <var:W> ^ <nat:6> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program is demonstrated by usual Hoare techniques . Immediately after , we have \begin{verbatim} { <var:y> = <var:W> } <var:P> := <nat:3> { <var:y> = <var:W> \land <var:P> = <nat:3> } { <var:y> = <var:W> \land <var:P> = <nat:3> } <var:P> := <nat:2> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> + <nat:2> } { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> + <nat:2> } <var:P> := <nat:4> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:4> } { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:4> } <var:P> := <nat:3> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> + <nat:3> } { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> + <nat:3> } <var:P> := <nat:1> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:4> + <nat:2> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + <nat:1> } \end{verbatim} This is known to be sound using the assignment scheme from typical Hoare techniques . Considering the next steps contained in the segment of code , \begin{verbatim} { <var:y> = <var:W> } <var:P> := <nat:3> { <var:y> = <var:W> \land <var:P> = <nat:3> } { <var:y> = <var:W> \land <var:P> = <nat:3> } <var:P> := <nat:2> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> + <nat:2> } { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> + <nat:2> } <var:P> := <nat:4> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:4> } { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:4> } <var:P> := <nat:3> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> + <nat:3> } \end{verbatim} This is shown using the environment update rule given by standard Hoare reasoning . Paying attention to the proceeding pieces of code seen in our set of instructions , we see \begin{verbatim} { <var:y> = <var:W> } <var:P> := <nat:3> { <var:y> = <var:W> \land <var:P> = <nat:3> } { <var:y> = <var:W> \land <var:P> = <nat:3> } <var:P> := <nat:2> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> + <nat:2> } { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> + <nat:2> } <var:P> := <nat:4> + <var:P> * <var:y> { <var:y> = <var:W> \land <var:P> = <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:3> ; <var:P> := <nat:2> + <var:P> * <var:y> ; <var:P> := <nat:4> + <var:P> * <var:y> ; <var:P> := <nat:3> + <var:P> * <var:y> ; <var:P> := <nat:1> + <var:P> * <var:y> ; <var:P> := <nat:1> + <var:P> * <var:y> ; <var:P> := <var:P> * <var:y> ; <var:P> := <nat:2> + <var:P> * <var:y> ; <var:P> := <nat:2> + <var:P> * <var:y> ; <var:P> := <nat:4> + <var:P> * <var:y> ; <var:P> := <nat:3> + <var:P> * <var:y> ; <var:P> := <nat:3> + <var:P> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:y> = <var:W> }} <def:poly> {{ <var:P> = <nat:3> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:P> = <nat:3> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 