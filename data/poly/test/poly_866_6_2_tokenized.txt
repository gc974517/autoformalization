\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> ; <var:w> := <nat:3> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Allowing , with some positive coefficients $ <var:R> $ , it to be that $ <var:S> = <var:R> $ prior to the execution of our series of instructions it follows that we see $ <var:w> = <nat:3> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:2> $ . \end{theorem} \begin{proof} Observe that the following decorated segment of code . \begin{eqnarray} \{ <var:S> = <var:R> \} \\ <var:w> := <nat:3> ; \\ \{ <var:S> = <var:R> \land <var:w> = <nat:3> \} \\ <var:w> := <nat:4> + <var:w> * <var:S> ; \\ \{ <var:S> = <var:R> \land <var:w> = <nat:3> \times <var:R> + <nat:4> \} \\ <var:w> := <nat:4> + <var:w> * <var:S> ; \\ \{ <var:S> = <var:R> \land <var:w> = <nat:3> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:4> \} \\ <var:w> := <nat:2> + <var:w> * <var:S> ; \\ \{ <var:S> = <var:R> \land <var:w> = <nat:3> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:2> \} \\ <var:w> := <nat:3> + <var:w> * <var:S> ; \\ \{ <var:S> = <var:R> \land <var:w> = <nat:3> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:3> \} \\ <var:w> := <nat:2> + <var:w> * <var:S> \\ \{ <var:S> = <var:R> \land <var:w> = <nat:3> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:2> \} \end{eqnarray} Applying typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:3> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> ; <var:w> := <nat:3> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:S> = <var:R> }} <def:poly> {{ <var:w> = <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:w> = <nat:3> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:w> = <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:w> = <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:w> = <nat:3> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:w> = <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 