\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:8> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:S> ; <var:L2> := <nat:5> ; <var:L2> := <var:L2> * <var:S> ; <var:L2> := <var:L2> * <var:S> ; <var:G> := <var:L2> ; <var:G> := <var:G> + <var:L1> ; <var:G> := <var:G> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Allowing it to hold that $ <var:S> = <var:I> $ given all $ <var:I> \in \mathbb{Z}^+ $ before interpreting this series of commands it holds that we see $ <var:G> = <nat:5> \times <var:I> ^ <nat:2> + <nat:5> \times <var:I> + <nat:8> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning yields : \begin{eqnarray} \{ <var:S> = <var:I> \} \\ <var:L0> := <nat:8> ; \\ \{ <var:S> = <var:I> \land <var:L0> = <nat:8> \} \\ <var:L1> := <nat:5> ; \\ \{ <var:S> = <var:I> \land <var:L0> = <nat:8> \land <var:L1> = <nat:5> \} \\ <var:L1> := <var:L1> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:L0> = <nat:8> \land <var:L1> = <nat:5> \cdot <var:I> \} \\ <var:L2> := <nat:5> ; \\ \{ <var:S> = <var:I> \land <var:L0> = <nat:8> \land <var:L1> = <nat:5> \cdot <var:I> \land <var:L2> = <nat:5> \} \\ <var:L2> := <var:L2> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:L0> = <nat:8> \land <var:L1> = <nat:5> \cdot <var:I> \land <var:L2> = <nat:5> \cdot <var:I> \} \\ <var:L2> := <var:L2> * <var:S> ; \\ \{ <var:S> = <var:I> \land <var:L0> = <nat:8> \land <var:L1> = <nat:5> \cdot <var:I> \land <var:L2> = <nat:5> \cdot <var:I> ^ <nat:2> \} \\ <var:G> := <var:L2> ; \\ \{ <var:S> = <var:I> \land <var:L0> = <nat:8> \land <var:L1> = <nat:5> \cdot <var:I> \land <var:G> = <nat:5> \cdot <var:I> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:L1> ; \\ \{ <var:S> = <var:I> \land <var:L0> = <nat:8> \land <var:G> = <nat:5> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> \} \\ <var:G> := <var:G> + <var:L0> \\ \{ <var:S> = <var:I> \land <var:G> = <nat:5> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> + <nat:8> \} \end{eqnarray} Allowing the evaluation of the code results in : \begin{eqnarray} \end{eqnarray} Given the preceding argument , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:8> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:S> ; <var:L2> := <nat:5> ; <var:L2> := <var:L2> * <var:S> ; <var:L2> := <var:L2> * <var:S> ; <var:G> := <var:L2> ; <var:G> := <var:G> + <var:L1> ; <var:G> := <var:G> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:S> = <var:I> }} <def:poly> {{ <var:G> = <nat:5> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:5> * <var:I> /\ <var:L2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:5> * <var:I> /\ <var:L2> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:5> * <var:I> /\ <var:L2> = <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:5> * <var:I> /\ <var:G> = <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:L0> = <nat:8> /\ <var:G> = <nat:5> * <var:I> ^ <nat:2> + <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:G> = <nat:5> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 