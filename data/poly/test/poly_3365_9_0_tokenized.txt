\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:2> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:w> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:w> ; <var:E2> := <var:E2> * <var:w> ; <var:D> := <var:E2> ; <var:D> := <var:D> + <var:E1> ; <var:D> := <var:D> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:w> = <var:f> $ for natural coefficients $ <var:f> $ ahead of running the series of instructions , it holds that we see $ <var:D> = <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:f> \} \\ <var:E0> := <nat:2> ; \\ \{ <var:w> = <var:f> \land <var:E0> = <nat:2> \} \\ <var:E1> := <nat:3> ; \\ \{ <var:w> = <var:f> \land <var:E0> = <nat:2> \land <var:E1> = <nat:3> \} \\ <var:E1> := <var:E1> * <var:w> ; \\ \{ <var:w> = <var:f> \land <var:E0> = <nat:2> \land <var:E1> = <nat:3> * <var:f> \} \\ <var:E2> := <nat:1> ; \\ \{ <var:w> = <var:f> \land <var:E0> = <nat:2> \land <var:E1> = <nat:3> * <var:f> \land <var:E2> = <nat:1> \} \\ <var:E2> := <var:E2> * <var:w> ; \\ \{ <var:w> = <var:f> \land <var:E0> = <nat:2> \land <var:E1> = <nat:3> * <var:f> \land <var:E2> = <nat:1> * <var:f> \} \\ <var:E2> := <var:E2> * <var:w> ; \\ \{ <var:w> = <var:f> \land <var:E0> = <nat:2> \land <var:E1> = <nat:3> * <var:f> \land <var:E2> = <nat:1> * <var:f> ^ <nat:2> \} \\ <var:D> := <var:E2> ; \\ \{ <var:w> = <var:f> \land <var:E0> = <nat:2> \land <var:E1> = <nat:3> * <var:f> \land <var:D> = <nat:1> * <var:f> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:E1> ; \\ \{ <var:w> = <var:f> \land <var:E0> = <nat:2> \land <var:D> = <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> \} \\ <var:D> := <var:D> + <var:E0> \\ \{ <var:w> = <var:f> \land <var:D> = <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> \} \end{eqnarray} Using usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:2> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:w> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:w> ; <var:E2> := <var:E2> * <var:w> ; <var:D> := <var:E2> ; <var:D> := <var:D> + <var:E1> ; <var:D> := <var:D> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:w> = <var:f> }} <def:poly> {{ <var:D> = <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:3> * <var:f> /\ <var:E2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:3> * <var:f> /\ <var:E2> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:3> * <var:f> /\ <var:E2> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:3> * <var:f> /\ <var:D> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:E0> = <nat:2> /\ <var:D> = <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:D> = <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 