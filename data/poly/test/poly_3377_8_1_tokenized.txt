\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:J1> := <var:p> ; <var:J2> := <var:J1> * <var:p> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:3> ; <var:z> := <var:J2> <var:z> := <var:z> + <var:J1> <var:z> := <var:z> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:p> = <var:I> $ ( for some $ <var:I> $ ) before running the code segment , it must be that $ <var:z> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:1> $ after series of instructions is done . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:p> = <var:I> \} \\ <var:J1> := <var:p> ; \\ \{ <var:p> = <var:I> \land <var:J1> = <var:I> \} \\ <var:J2> := <var:J1> * <var:p> ; \\ \{ <var:p> = <var:I> \land <var:J1> = <var:I> \land <var:J2> = <var:I> ^ <nat:2> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:p> = <var:I> \land <var:J1> = <var:I> \land <var:J2> = <var:I> ^ <nat:2> \land <var:J0> = <nat:1> \} \\ <var:J1> := <var:J1> * <nat:9> ; \\ \{ <var:p> = <var:I> \land <var:J1> = <nat:9> \times <var:I> \land <var:J2> = <var:I> ^ <nat:2> \land <var:J0> = <nat:1> \} \\ <var:J2> := <var:J2> * <nat:3> ; \\ \{ <var:p> = <var:I> \land <var:J1> = <nat:9> \times <var:I> \land <var:J2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:J0> = <nat:1> \} \\ <var:z> := <var:J2> \\ \{ <var:p> = <var:I> \land <var:J1> = <nat:9> \times <var:I> \land <var:J0> = <nat:1> \land <var:z> = <nat:3> \times <var:I> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:J1> \\ \{ <var:p> = <var:I> \land <var:J0> = <nat:1> \land <var:z> = <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> \} \\ <var:z> := <var:z> + <var:J0> \\ \{ <var:p> = <var:I> \land <var:z> = <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> + <nat:1> \} \end{eqnarray} Given the above , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J1> := <var:p> ; <var:J2> := <var:J1> * <var:p> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:3> ; <var:z> := <var:J2> <var:z> := <var:z> + <var:J1> <var:z> := <var:z> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:p> = <var:I> }} <def:poly> {{ <var:z> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:J1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:J1> = <var:I> /\ <var:J2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:J1> = <var:I> /\ <var:J2> = <var:I> ^ <nat:2> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:J1> = <nat:9> * <var:I> /\ <var:J2> = <var:I> ^ <nat:2> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:J1> = <nat:9> * <var:I> /\ <var:J2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:J1> = <nat:9> * <var:I> /\ <var:J0> = <nat:1> /\ <var:z> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:J0> = <nat:1> /\ <var:z> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:z> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 