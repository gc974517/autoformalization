\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:N1> := <var:Z> ; <var:N2> := <var:N1> * <var:Z> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:6> ; <var:N2> := <var:N2> * <nat:9> ; <var:v> := <var:N2> <var:v> := <var:v> + <var:N1> <var:v> := <var:v> + <var:N0> \end{verbatim} Given it to hold that $ <var:Z> = <var:S> $ before the execution of our list of commands it must be that we have $ <var:v> = <nat:9> \cdot <var:S> ^ <nat:2> + <nat:6> \cdot <var:S> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare logic results in : \begin{eqnarray} \{ <var:Z> = <var:S> \} \\ <var:N1> := <var:Z> ; \\ \{ <var:Z> = <var:S> \land <var:N1> = <var:S> \} \\ <var:N2> := <var:N1> * <var:Z> ; \\ \{ <var:Z> = <var:S> \land <var:N1> = <var:S> \land <var:N2> = <var:S> ^ <nat:2> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:Z> = <var:S> \land <var:N1> = <var:S> \land <var:N2> = <var:S> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:N1> := <var:N1> * <nat:6> ; \\ \{ <var:Z> = <var:S> \land <var:N1> = <nat:6> \times <var:S> \land <var:N2> = <var:S> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:N2> := <var:N2> * <nat:9> ; \\ \{ <var:Z> = <var:S> \land <var:N1> = <nat:6> \times <var:S> \land <var:N2> = <nat:9> \times <var:S> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:v> := <var:N2> \\ \{ <var:Z> = <var:S> \land <var:N1> = <nat:6> \times <var:S> \land <var:N0> = <nat:3> \land <var:v> = <nat:9> \times <var:S> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:N1> \\ \{ <var:Z> = <var:S> \land <var:N0> = <nat:3> \land <var:v> = <nat:9> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> \} \\ <var:v> := <var:v> + <var:N0> \\ \{ <var:Z> = <var:S> \land <var:v> = <nat:9> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> + <nat:3> \} \end{eqnarray} As a result , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Z> = <var:S> }} <var:N1> := <var:Z> ; <var:N2> := <var:N1> * <var:Z> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:6> ; <var:N2> := <var:N2> * <nat:9> ; <var:v> := <var:N2> <var:v> := <var:v> + <var:N1> <var:v> := <var:v> + <var:N0> {{ <var:v> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:N1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:N1> = <var:S> /\ <var:N2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:N1> = <var:S> /\ <var:N2> = <var:S> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:N1> = <nat:6> * <var:S> /\ <var:N2> = <var:S> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:N1> = <nat:6> * <var:S> /\ <var:N2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:N1> = <nat:6> * <var:S> /\ <var:N0> = <nat:3> /\ <var:v> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:N0> = <nat:3> /\ <var:v> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:v> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 