\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:n> ; <var:X2> := <var:X1> * <var:n> ; <var:X3> := <var:X2> * <var:n> ; <var:X0> := <nat:9> ; <var:X1> := <var:X1> * <nat:6> ; <var:X2> := <var:X2> * <nat:6> ; <var:X3> := <var:X3> * <nat:6> ; <var:M> := <var:X3> <var:M> := <var:M> + <var:X2> <var:M> := <var:M> + <var:X1> <var:M> := <var:M> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Given that $ <var:n> = <var:l> $ ahead of the evaluation of this segment of code , then we see $ <var:M> = <nat:6> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:9> $ . \end{theorem} \begin{proof} Applying usual Hoare logic produces : \begin{eqnarray} \{ <var:n> = <var:l> \} \\ <var:X1> := <var:n> ; \\ \{ <var:n> = <var:l> \land <var:X1> = <var:l> \} \\ <var:X2> := <var:X1> * <var:n> ; \\ \{ <var:n> = <var:l> \land <var:X1> = <var:l> \land <var:X2> = <var:l> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:n> ; \\ \{ <var:n> = <var:l> \land <var:X1> = <var:l> \land <var:X2> = <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \} \\ <var:X0> := <nat:9> ; \\ \{ <var:n> = <var:l> \land <var:X1> = <var:l> \land <var:X2> = <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \land <var:X0> = <nat:9> \} \\ <var:X1> := <var:X1> * <nat:6> ; \\ \{ <var:n> = <var:l> \land <var:X1> = <nat:6> * <var:l> \land <var:X2> = <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \land <var:X0> = <nat:9> \} \\ <var:X2> := <var:X2> * <nat:6> ; \\ \{ <var:n> = <var:l> \land <var:X1> = <nat:6> * <var:l> \land <var:X2> = <nat:6> * <var:l> ^ <nat:2> \land <var:X3> = <var:l> ^ <nat:3> \land <var:X0> = <nat:9> \} \\ <var:X3> := <var:X3> * <nat:6> ; \\ \{ <var:n> = <var:l> \land <var:X1> = <nat:6> * <var:l> \land <var:X2> = <nat:6> * <var:l> ^ <nat:2> \land <var:X3> = <nat:6> * <var:l> ^ <nat:3> \land <var:X0> = <nat:9> \} \\ <var:M> := <var:X3> \\ \{ <var:n> = <var:l> \land <var:X1> = <nat:6> * <var:l> \land <var:X2> = <nat:6> * <var:l> ^ <nat:2> \land <var:X0> = <nat:9> \land <var:M> = <nat:6> * <var:l> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:X2> \\ \{ <var:n> = <var:l> \land <var:X1> = <nat:6> * <var:l> \land <var:X0> = <nat:9> \land <var:M> = <nat:6> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:X1> \\ \{ <var:n> = <var:l> \land <var:X0> = <nat:9> \land <var:M> = <nat:6> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:6> * <var:l> \} \\ <var:M> := <var:M> + <var:X0> \\ \{ <var:n> = <var:l> \land <var:M> = <nat:6> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:9> \} \end{eqnarray} As a consequence , our set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <def:poly> := <var:X1> := <var:n> ; <var:X2> := <var:X1> * <var:n> ; <var:X3> := <var:X2> * <var:n> ; <var:X0> := <nat:9> ; <var:X1> := <var:X1> * <nat:6> ; <var:X2> := <var:X2> * <nat:6> ; <var:X3> := <var:X3> * <nat:6> ; <var:M> := <var:X3> <var:M> := <var:M> + <var:X2> <var:M> := <var:M> + <var:X1> <var:M> := <var:M> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <def:poly> {{ <var:M> = <nat:6> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <var:l> /\ <var:X2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <var:l> /\ <var:X2> = <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <var:l> /\ <var:X2> = <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <nat:6> * <var:l> /\ <var:X2> = <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <nat:6> * <var:l> /\ <var:X2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:X3> = <var:l> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <nat:6> * <var:l> /\ <var:X2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:X3> = <nat:6> * <var:l> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <nat:6> * <var:l> /\ <var:X2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:X0> = <nat:9> /\ <var:M> = <nat:6> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X1> = <nat:6> * <var:l> /\ <var:X0> = <nat:9> /\ <var:M> = <nat:6> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:X0> = <nat:9> /\ <var:M> = <nat:6> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:M> = <nat:6> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 