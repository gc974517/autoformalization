\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:z> ; <var:L2> := <var:L1> * <var:z> ; <var:L3> := <var:L2> * <var:z> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:5> ; <var:L2> := <var:L2> * <nat:3> ; <var:L3> := <var:L3> * <nat:9> ; <var:q> := <var:L3> <var:q> := <var:q> + <var:L2> <var:q> := <var:q> + <var:L1> <var:q> := <var:q> + <var:L0> \end{verbatim} Allow for every natural coefficients $ <var:m> $ it to hold that $ <var:z> = <var:m> $ before evaluating this list of instructions , it must be that $ <var:q> = <nat:9> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:6> $ once set of instructions has finished . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be given with typical Hoare techniques . Moving on , we have \verb | { <var:z> = <var:m> } <var:L1> := <var:z> { <var:z> = <var:m> \land <var:L1> = <var:m> } | , \verb | { <var:z> = <var:m> \land <var:L1> = <var:m> } <var:L2> := <var:L1> * <var:z> { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> } | , \verb | { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> } <var:L3> := <var:L2> * <var:z> { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> \land <var:L3> = <var:m> ^ <nat:3> } | and \verb | { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> \land <var:L3> = <var:m> ^ <nat:3> } <var:L0> := <nat:6> { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> \land <var:L3> = <var:m> ^ <nat:3> \land <var:L0> = <nat:6> } | . Taking a look at the proceeding piece of code seen in our code segment , we see \verb | { <var:z> = <var:m> } <var:L1> := <var:z> { <var:z> = <var:m> \land <var:L1> = <var:m> } | . Going forward , we have \verb | { <var:z> = <var:m> } <var:L1> := <var:z> { <var:z> = <var:m> \land <var:L1> = <var:m> } | , \verb | { <var:z> = <var:m> \land <var:L1> = <var:m> } <var:L2> := <var:L1> * <var:z> { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> } | , \verb | { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> } <var:L3> := <var:L2> * <var:z> { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> \land <var:L3> = <var:m> ^ <nat:3> } | , \verb | { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> \land <var:L3> = <var:m> ^ <nat:3> } <var:L0> := <nat:6> { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> \land <var:L3> = <var:m> ^ <nat:3> \land <var:L0> = <nat:6> } | and \verb | { <var:z> = <var:m> \land <var:L1> = <var:m> \land <var:L2> = <var:m> ^ <nat:2> \land <var:L3> = <var:m> ^ <nat:3> \land <var:L0> = <nat:6> } <var:L1> := <var:L1> * <nat:5> { <var:z> = <var:m> \land <var:L1> = <nat:5> * <var:m> \land <var:L2> = <var:m> ^ <nat:2> \land <var:L3> = <var:m> ^ <nat:3> \land <var:L0> = <nat:6> } | . Moving on , \verb | { <var:z> = <var:m> } <var:L1> := <var:z> { <var:z> = <var:m> \land <var:L1> = <var:m> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:z> = <var:m> }} <var:L1> := <var:z> ; <var:L2> := <var:L1> * <var:z> ; <var:L3> := <var:L2> * <var:z> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:5> ; <var:L2> := <var:L2> * <nat:3> ; <var:L3> := <var:L3> * <nat:9> ; <var:q> := <var:L3> <var:q> := <var:q> + <var:L2> <var:q> := <var:q> + <var:L1> <var:q> := <var:q> + <var:L0> {{ <var:q> = <nat:9> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <var:m> /\ <var:L2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <var:m> /\ <var:L2> = <var:m> ^ <nat:2> /\ <var:L3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <var:m> /\ <var:L2> = <var:m> ^ <nat:2> /\ <var:L3> = <var:m> ^ <nat:3> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <nat:5> * <var:m> /\ <var:L2> = <var:m> ^ <nat:2> /\ <var:L3> = <var:m> ^ <nat:3> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <nat:5> * <var:m> /\ <var:L2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:L3> = <var:m> ^ <nat:3> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <nat:5> * <var:m> /\ <var:L2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:L3> = <nat:9> * <var:m> ^ <nat:3> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <nat:5> * <var:m> /\ <var:L2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:L0> = <nat:6> /\ <var:q> = <nat:9> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L1> = <nat:5> * <var:m> /\ <var:L0> = <nat:6> /\ <var:q> = <nat:9> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:L0> = <nat:6> /\ <var:q> = <nat:9> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:q> = <nat:9> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 