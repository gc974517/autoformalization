\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:U> := <nat:1> ; <var:U> := <var:U> * <var:S> ; <var:U> := <nat:1> + <var:U> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Allowing , assuming some natural numbers $ <var:g> $ , it to hold that $ <var:S> = <var:g> $ before the evaluation of this set of instructions , it must be that $ <var:U> = <nat:1> * <var:g> ^ <nat:2> + <nat:1> $ once list of commands is done . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is given with typical Hoare techniques . Honing in on the subsequent steps in the segment of code , we see \verb | { <var:S> = <var:g> } <var:U> := <nat:1> { <var:S> = <var:g> \land <var:U> = <nat:1> } | , \verb | { <var:S> = <var:g> \land <var:U> = <nat:1> } <var:U> := <var:U> * <var:S> { <var:S> = <var:g> \land <var:U> = <nat:1> \times <var:g> + } | and \verb | { <var:S> = <var:g> \land <var:U> = <nat:1> \times <var:g> + } <var:U> := <nat:1> + <var:U> * <var:S{ <var:S> = <var:g> \land <var:U> = <nat:1> \times <var:g> ^ <nat:2> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:1> ; <var:U> := <var:U> * <var:S> ; <var:U> := <nat:1> + <var:U> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:S> = <var:g> }} <def:poly> {{ <var:U> = <nat:1> * <var:g> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:U> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:U> = <nat:1> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:U> = <nat:1> * <var:g> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 