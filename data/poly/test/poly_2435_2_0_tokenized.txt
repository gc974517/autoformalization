\begin{document} \begin{theorem} We define the following list of instructions as \begin{verbatim} <var:s0> := <nat:3> ; <var:y> := <var:s0> \end{verbatim} Allowing it to hold that $ <var:c> = <var:f> $ , for every positive integers $ <var:f> $ , prior to executing our series of commands then we see $ <var:y> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions can be demonstrated using usual Hoare logic . Honing in on the proceeding lines of codeseen in the segment of code , we see \begin{verbatim} { <var:c> = <var:f> } <var:s0> := <nat:3> { <var:c> = <var:f> \land <var:s0> = <nat:3> } { <var:c> = <var:f> \land <var:s0> = <nat:3> } <var:y> := <var:s0{ <var:c> = <var:f> \land <var:y> = <nat:3> } \end{verbatim} This is shown to be logically sound with the assignment law obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:c> = <var:f> }} <var:s0> := <nat:3> ; <var:y> := <var:s0> {{ <var:y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 