\begin{document} \begin{theorem} Consider the following list of instructions as \begin{verbatim} <var:r0> := <nat:6> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:l> ; <var:r2> := <nat:7> ; <var:r2> := <var:r2> * <var:l> ; <var:r2> := <var:r2> * <var:l> ; <var:F> := <var:r2> ; <var:F> := <var:F> + <var:r1> ; <var:F> := <var:F> + <var:r0> \end{verbatim} Given ( letting whole numbers $ <var:C> $ ) it to hold that $ <var:l> = <var:C> $ ahead of evaluating this series of instructions , it must be that $ <var:F> = <nat:7> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:C> \} \\ <var:r0> := <nat:6> ; \\ \{ <var:l> = <var:C> \land <var:r0> = <nat:6> \} \\ <var:r1> := <nat:3> ; \\ \{ <var:l> = <var:C> \land <var:r0> = <nat:6> \land <var:r1> = <nat:3> \} \\ <var:r1> := <var:r1> * <var:l> ; \\ \{ <var:l> = <var:C> \land <var:r0> = <nat:6> \land <var:r1> = <nat:3> \cdot <var:C> \} \\ <var:r2> := <nat:7> ; \\ \{ <var:l> = <var:C> \land <var:r0> = <nat:6> \land <var:r1> = <nat:3> \cdot <var:C> \land <var:r2> = <nat:7> \} \\ <var:r2> := <var:r2> * <var:l> ; \\ \{ <var:l> = <var:C> \land <var:r0> = <nat:6> \land <var:r1> = <nat:3> \cdot <var:C> \land <var:r2> = <nat:7> \cdot <var:C> \} \\ <var:r2> := <var:r2> * <var:l> ; \\ \{ <var:l> = <var:C> \land <var:r0> = <nat:6> \land <var:r1> = <nat:3> \cdot <var:C> \land <var:r2> = <nat:7> \cdot <var:C> ^ <nat:2> \} \\ <var:F> := <var:r2> ; \\ \{ <var:l> = <var:C> \land <var:r0> = <nat:6> \land <var:r1> = <nat:3> \cdot <var:C> \land <var:F> = <nat:7> \cdot <var:C> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:r1> ; \\ \{ <var:l> = <var:C> \land <var:r0> = <nat:6> \land <var:F> = <nat:7> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> \} \\ <var:F> := <var:F> + <var:r0> \\ \{ <var:l> = <var:C> \land <var:F> = <nat:7> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:6> \} \end{eqnarray} Applying Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:l> = <var:C> }} <var:r0> := <nat:6> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:l> ; <var:r2> := <nat:7> ; <var:r2> := <var:r2> * <var:l> ; <var:r2> := <var:r2> * <var:l> ; <var:F> := <var:r2> ; <var:F> := <var:F> + <var:r1> ; <var:F> := <var:F> + <var:r0> {{ <var:F> = <nat:7> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:3> * <var:C> /\ <var:r2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:3> * <var:C> /\ <var:r2> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:3> * <var:C> /\ <var:r2> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:3> * <var:C> /\ <var:F> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:r0> = <nat:6> /\ <var:F> = <nat:7> * <var:C> ^ <nat:2> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:F> = <nat:7> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 