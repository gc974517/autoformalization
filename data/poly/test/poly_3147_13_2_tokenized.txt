\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s> := <nat:2> ; <var:s> := <nat:3> + <var:s> * <var:A> ; <var:s> := <nat:3> + <var:s> * <var:A> ; <var:s> := <nat:1> + <var:s> * <var:A> ; <var:s> := <nat:3> + <var:s> * <var:A> ; <var:s> := <nat:1> + <var:s> * <var:A> ; <var:s> := <nat:4> + <var:s> * <var:A> ; <var:s> := <nat:2> + <var:s> * <var:A> ; <var:s> := <nat:3> + <var:s> * <var:A> ; <var:s> := <nat:4> + <var:s> * <var:A> ; <var:s> := <nat:1> + <var:s> * <var:A> ; <var:s> := <nat:2> + <var:s> * <var:A> ; <var:s> := <nat:4> + <var:s> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Assume that we have $ <var:A> = <var:Q> $ prior to the execution of our set of instructions , it holds that $ <var:s> = <nat:2> * <var:Q> ^ <nat:12> + <nat:3> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> $ when code has terminated . \end{theorem} \begin{proof} The way to prove correctness for our code segment can be demonstrated through standard Hoare reasoning . Keeping momentum , we have the binding command \verb | <var:s> := <nat:2> ; | . This forwards the condition $ \{ <var:A> = <var:Q> \} $ to $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \} $ . Moving on , the variable update command \verb | <var:s> := <nat:3> + <var:s> * <var:A> ; | . This transfers $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \} $ as the postcondition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> + <nat:3> \} $ . Following , the variable update command binding $ <nat:3> + <var:s> * <var:A> $ into $ <var:s>$ . This transfers $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> + <nat:3> \} $ into the postcondition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:3> \} $ . Moving on , the variable binding command \verb | <var:s> := <nat:1> + <var:s> * <var:A> ; | . This takes the condition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:3> \} $ as $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:1> \} $ . This is given with the assignment rule in typical Hoare reasoning . Taking a look at the following line of code in our set of commands , the binding command defining $ <nat:3> + <var:s> * <var:A> $ to $ <var:s>$ . This takes the condition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:1> \} $ to the postcondition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:3> \} $ . This is deduced with the assignment law of usual Hoare logic . Going forward , the variable update command \verb | <var:s> := <nat:1> + <var:s> * <var:A> ; | . This advances the precondition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:3> \} $ to $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:1> \} $ . This is shown by the assignment rule from standard Hoare logic . Going to the next step , we have the command defining $ <nat:4> + <var:s> * <var:A> $ into $ <var:s>$ . This moves the precondition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:1> \} $ to $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:4> \} $ . Advancing , we have the environment update line \verb | <var:s> := <nat:2> + <var:s> * <var:A> ; | . This command redefines $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:4> \} $ toward $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:2> \} $ . This is deduced using the assignment scheme obtained from standard Hoare reasoning . Taking another step toward the subsequent command in our program , we have the variable assignmet statement binding $ <nat:3> + <var:s> * <var:A> $ as $ <var:s>$ . This command takes the condition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:2> \} $ into the postcondition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:3> \} $ . Moving on , the variable assignmet command \verb | <var:s> := <nat:4> + <var:s> * <var:A> ; | . This statement moves the condition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:3> \} $ as the postcondition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:4> \} $ . This is shown with the assignment rule in typical Hoare logic . Advancing , we have the variable binding code assigning $ <nat:1> + <var:s> * <var:A> $ as $ <var:s>$ . This transfers the precondition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:4> \} $ as the condition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:1> \} $ . This is ensured through the assignment scheme obtained from typical Hoare techniques . Stepping forward , we have the variable assignmet command \verb | <var:s> := <nat:2> + <var:s> * <var:A> ; | . This line transfers $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:1> \} $ as the condition $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:11> + <nat:3> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:1> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:2> \} $ . Keeping momentum , we have the assignment statement binding $ <nat:4> + <var:s> * <var:A$ into $ <var:s>$ . This code advances $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:11> + <nat:3> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:1> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:2> \} $ as $ \{ <var:A> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:12> + <nat:3> \cdot <var:Q> ^ <nat:11> + <nat:3> \cdot <var:Q> ^ <nat:10> + <nat:1> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:4> \} $ . This is shown to be logically sound through the assignment law in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:2> ; <var:s> := <nat:3> + <var:s> * <var:A> ; <var:s> := <nat:3> + <var:s> * <var:A> ; <var:s> := <nat:1> + <var:s> * <var:A> ; <var:s> := <nat:3> + <var:s> * <var:A> ; <var:s> := <nat:1> + <var:s> * <var:A> ; <var:s> := <nat:4> + <var:s> * <var:A> ; <var:s> := <nat:2> + <var:s> * <var:A> ; <var:s> := <nat:3> + <var:s> * <var:A> ; <var:s> := <nat:4> + <var:s> * <var:A> ; <var:s> := <nat:1> + <var:s> * <var:A> ; <var:s> := <nat:2> + <var:s> * <var:A> ; <var:s> := <nat:4> + <var:s> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:A> = <var:Q> }} <def:poly> {{ <var:s> = <nat:2> * <var:Q> ^ <nat:12> + <nat:3> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:10> + <nat:3> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:10> + <nat:3> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:12> + <nat:3> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 