\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:6> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:Y> ; <var:M3> := <nat:7> ; <var:M3> := <var:M3> * <var:Y> ; <var:M3> := <var:M3> * <var:Y> ; <var:M3> := <var:M3> * <var:Y> ; <var:m> := <var:M3> ; <var:m> := <var:m> + <var:M1> ; <var:m> := <var:m> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:Y> = <var:b> $ ( for some positive integers $ <var:b> $ ) prior to evaluating this code segment , it follows that we have $ <var:m> = <nat:7> \times <var:b> ^ <nat:3> + <nat:9> \times <var:b> + <nat:6> $ after list of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be seen with Hoare techniques . Immediately following , we have the variable assignmet statement binding $ <nat:6> $ to $ <var:M0>$ . This transfers $ \{ <var:Y> = <var:b> \} $ as the condition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \} $ . Immediately following , we have the variable binding code letting $ <nat:9> $ into $ <var:M1>$ . This statement takes the condition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \} $ toward the condition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \} $ . This is ensured by the assignment law defined in standard Hoare techniques . Jumping to the next command seen in our series of commands , we have the variable assignmet code yielding $ <var:M1> * <var:Y> $ into $ <var:M1>$ . This line advances the condition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \} $ toward the condition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \} $ . This is sound through the assignment scheme defined in standard Hoare reasoning . Moving on to the next step , we have the binding statement defining $ <nat:7> $ to $ <var:M3>$ . This forwards $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \} $ toward the condition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:M3> = <nat:7> \} $ . This is ensured using the assignment scheme defined by standard Hoare reasoning . Stepping forward , we have the variable update line yielding $ <var:M3> * <var:Y> $ as $ <var:M3>$ . This command forwards the precondition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:M3> = <nat:7> \} $ as the postcondition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:M3> = <nat:7> \times <var:b> \} $ . This is ensured through the assignment scheme defined in typical Hoare techniques . Immediately following , we see the variable assignmet line \verb | <var:M3> := <var:M3> * <var:Y> ; | . This moves the precondition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:M3> = <nat:7> \times <var:b> \} $ to the condition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:M3> = <nat:7> \times <var:b> ^ <nat:2> \} $ . Considering the next line of code found in the series of commands , we have the binding code letting $ <var:M3> * <var:Y> $ into $ <var:M3>$ . This redefines $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:M3> = <nat:7> \times <var:b> ^ <nat:2> \} $ to the postcondition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:M3> = <nat:7> \times <var:b> ^ <nat:3> \} $ . Taking a look at the following statement in our series of instructions , the environment update line \verb | <var:m> := <var:M3> ; | . This code redefines the precondition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:M3> = <nat:7> \times <var:b> ^ <nat:3> \} $ toward the postcondition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:m> = <nat:7> \times <var:b> ^ <nat:3> \} $ . Moving on to the next line found in the series of commands , we see the environment update line defining $ <var:m> + <var:M1> $ as $ <var:m>$ . This moves the condition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \times <var:b> \land <var:m> = <nat:7> \times <var:b> ^ <nat:3> \} $ as the postcondition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:m> = <nat:7> \times <var:b> ^ <nat:3> + <nat:9> \times <var:b> \} $ . This is known to be sound with the assignment rule defined by standard Hoare logic . Further , we have the assignment statement \verb | <var:m> := <var:m> + <var:M0> | . This transfers the precondition $ \{ <var:Y> = <var:b> \land <var:M0> = <nat:6> \land <var:m> = <nat:7> \times <var:b> ^ <nat:3> + <nat:9> \times <var:b> \} $ to $ \{ <var:Y> = <var:b> \land <var:m> = <nat:7> \times <var:b> ^ <nat:3> + <nat:9> \times <var:b> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M0> := <nat:6> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:Y> ; <var:M3> := <nat:7> ; <var:M3> := <var:M3> * <var:Y> ; <var:M3> := <var:M3> * <var:Y> ; <var:M3> := <var:M3> * <var:Y> ; <var:m> := <var:M3> ; <var:m> := <var:m> + <var:M1> ; <var:m> := <var:m> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Y> = <var:b> }} <def:poly> {{ <var:m> = <nat:7> * <var:b> ^ <nat:3> + <nat:9> * <var:b> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> * <var:b> /\ <var:M3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> * <var:b> /\ <var:M3> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> * <var:b> /\ <var:M3> = <nat:7> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> * <var:b> /\ <var:M3> = <nat:7> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> * <var:b> /\ <var:m> = <nat:7> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:M0> = <nat:6> /\ <var:m> = <nat:7> * <var:b> ^ <nat:3> + <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:m> = <nat:7> * <var:b> ^ <nat:3> + <nat:9> * <var:b> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 