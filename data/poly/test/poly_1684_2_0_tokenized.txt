\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:9> ; <var:M> := <var:r0> \end{verbatim} Allow --- for any positive numbers $ <var:B> $ --- it to hold that $ <var:w> = <var:B> $ before the evaluation of this series of commands , then we see $ <var:M> = <nat:9> $ . \end{theorem} \begin{proof} The method of proof for this program can be demonstrated by standard Hoare reasoning . Moving onward , we see \begin{verbatim} { <var:w> = <var:B> } <var:r0> := <nat:9> { <var:w> = <var:B> \land <var:r0> = <nat:9> } \end{verbatim} This is shown using the scheme defined in standard Hoare reasoning . Going forward , we see \begin{verbatim} { <var:w> = <var:B> } <var:r0> := <nat:9> { <var:w> = <var:B> \land <var:r0> = <nat:9> } \end{verbatim} This is known to be sound by the variable assignmet inference rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:w> = <var:B> }} <var:r0> := <nat:9> ; <var:M> := <var:r0> {{ <var:M> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:M> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 