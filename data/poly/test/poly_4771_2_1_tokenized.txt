\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:6> ; <var:p> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assuming --- taking positive integers $ <var:h> $ --- it to be that $ <var:V> = <var:h> $ ahead of executing this set of commands it holds that we see $ <var:p> = <nat:6> $ once series of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:h> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:V> = <var:h> \land <var:y0> = <nat:6> \} \\ <var:p> := <var:y0> \\ \{ <var:V> = <var:h> \land <var:p> = <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:6> ; <var:p> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:V> = <var:h> }} <def:poly> {{ <var:p> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:p> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 