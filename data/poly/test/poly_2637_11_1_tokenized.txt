\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:S1> := <var:H> ; <var:S2> := <var:S1> * <var:H> ; <var:S3> := <var:S2> * <var:H> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:7> ; <var:S2> := <var:S2> * <nat:8> ; <var:S3> := <var:S3> * <nat:9> ; <var:k> := <var:S3> <var:k> := <var:k> + <var:S2> <var:k> := <var:k> + <var:S1> <var:k> := <var:k> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:H> = <var:i> $ for some positive integer coefficients $ <var:i> $ before executing the program , it holds that $ <var:k> = <nat:9> \times <var:i> ^ <nat:3> + <nat:8> \times <var:i> ^ <nat:2> + <nat:7> \times <var:i> + <nat:1> $ when set of instructions has terminated . \end{theorem} \begin{proof} The proof of our program is evident through usual Hoare reasoning . Moving on to the proceeding command contained in the list of instructions , the environment update command \verb | <var:S1> := <var:H> ; | . This advances $ \{ <var:H> = <var:i> \} $ as $ \{ <var:H> = <var:i> \land <var:S1> = <var:i> \} $ . Moving forward to the proceeding line seen in the code segment , we have the line \verb | <var:S2> := <var:S1> * <var:H> ; | . This command moves $ \{ <var:H> = <var:i> \land <var:S1> = <var:i> \} $ toward $ \{ <var:H> = <var:i> \land <var:S1> = <var:i> \land <var:S2> = <var:i> ^ <nat:2> \} $ . Focusing on the subsequent statement contained in the segment of code , we see the variable binding statement \verb | <var:S3> := <var:S2> * <var:H> ; | . This command transfers the condition $ \{ <var:H> = <var:i> \land <var:S1> = <var:i> \land <var:S2> = <var:i> ^ <nat:2> \} $ as $ \{ <var:H> = <var:i> \land <var:S1> = <var:i> \land <var:S2> = <var:i> ^ <nat:2> \land <var:S3> = <var:i> ^ <nat:3> \} $ . Paying attention to the subsequent command found in the segment of code , the variable update command \verb | <var:S0> := <nat:1> ; | . This advances $ \{ <var:H> = <var:i> \land <var:S1> = <var:i> \land <var:S2> = <var:i> ^ <nat:2> \land <var:S3> = <var:i> ^ <nat:3> \} $ to the postcondition $ \{ <var:H> = <var:i> \land <var:S1> = <var:i> \land <var:S2> = <var:i> ^ <nat:2> \land <var:S3> = <var:i> ^ <nat:3> \land <var:S0> = <nat:1> \} $ . Going to the next step , we have the variable assignmet line \verb | <var:S1> := <var:S1> * <nat:7> ; | . This redefines $ \{ <var:H> = <var:i> \land <var:S1> = <var:i> \land <var:S2> = <var:i> ^ <nat:2> \land <var:S3> = <var:i> ^ <nat:3> \land <var:S0> = <nat:1> \} $ toward $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S2> = <var:i> ^ <nat:2> \land <var:S3> = <var:i> ^ <nat:3> \land <var:S0> = <nat:1> \} $ . Now , we have the binding code \verb | <var:S2> := <var:S2> * <nat:8> ; | . This command transfers $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S2> = <var:i> ^ <nat:2> \land <var:S3> = <var:i> ^ <nat:3> \land <var:S0> = <nat:1> \} $ as the postcondition $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S2> = <nat:8> * <var:i> ^ <nat:2> \land <var:S3> = <var:i> ^ <nat:3> \land <var:S0> = <nat:1> \} $ . Next , the environment update command \verb | <var:S3> := <var:S3> * <nat:9> ; | . This command transfers the precondition $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S2> = <nat:8> * <var:i> ^ <nat:2> \land <var:S3> = <var:i> ^ <nat:3> \land <var:S0> = <nat:1> \} $ into the condition $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S2> = <nat:8> * <var:i> ^ <nat:2> \land <var:S3> = <nat:9> * <var:i> ^ <nat:3> \land <var:S0> = <nat:1> \} $ . Stepping through , we see the binding statement \verb | <var:k> := <var:S3> | . This statement moves the precondition $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S2> = <nat:8> * <var:i> ^ <nat:2> \land <var:S3> = <nat:9> * <var:i> ^ <nat:3> \land <var:S0> = <nat:1> \} $ as the postcondition $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S2> = <nat:8> * <var:i> ^ <nat:2> \land <var:S0> = <nat:1> \land <var:k> = <nat:9> * <var:i> ^ <nat:3> \} $ . Considering the next command seen in the set of instructions , the variable assignmet command \verb | <var:k> := <var:k> + <var:S2> | . This statement transfers the condition $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S2> = <nat:8> * <var:i> ^ <nat:2> \land <var:S0> = <nat:1> \land <var:k> = <nat:9> * <var:i> ^ <nat:3> \} $ to the condition $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S0> = <nat:1> \land <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> \} $ . This is given with the assignment scheme obtained from Hoare logic . Looking at the proceeding line of code found in our code , the variable update statement defining $ <var:k> + <var:S1$ as $ <var:k>$ . This moves $ \{ <var:H> = <var:i> \land <var:S1> = <nat:7> * <var:i> \land <var:S0> = <nat:1> \land <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> \} $ toward the condition $ \{ <var:H> = <var:i> \land <var:S0> = <nat:1> \land <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:7> * <var:i> \} $ . This is rigorously given using the assignment scheme defined by typical Hoare reasoning . Shifting focus toward the next statement contained in our list of instructions , we have the environment update command \verb | <var:k> := <var:k> + <var:S0> | . This takes the precondition $ \{ <var:H> = <var:i> \land <var:S0> = <nat:1> \land <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:7> * <var:i> \} $ toward the condition $ \{ <var:H> = <var:i> \land <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S1> := <var:H> ; <var:S2> := <var:S1> * <var:H> ; <var:S3> := <var:S2> * <var:H> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:7> ; <var:S2> := <var:S2> * <nat:8> ; <var:S3> := <var:S3> * <nat:9> ; <var:k> := <var:S3> <var:k> := <var:k> + <var:S2> <var:k> := <var:k> + <var:S1> <var:k> := <var:k> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:H> = <var:i> }} <def:poly> {{ <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <var:i> /\ <var:S2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <var:i> /\ <var:S2> = <var:i> ^ <nat:2> /\ <var:S3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <var:i> /\ <var:S2> = <var:i> ^ <nat:2> /\ <var:S3> = <var:i> ^ <nat:3> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <nat:7> * <var:i> /\ <var:S2> = <var:i> ^ <nat:2> /\ <var:S3> = <var:i> ^ <nat:3> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <nat:7> * <var:i> /\ <var:S2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:S3> = <var:i> ^ <nat:3> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <nat:7> * <var:i> /\ <var:S2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:i> ^ <nat:3> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <nat:7> * <var:i> /\ <var:S2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:S0> = <nat:1> /\ <var:k> = <nat:9> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S1> = <nat:7> * <var:i> /\ <var:S0> = <nat:1> /\ <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:S0> = <nat:1> /\ <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:k> = <nat:9> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 