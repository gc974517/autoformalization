\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:2> ; <var:e> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allow $ <var:g> = <var:N> $ --- for some whole numbers $ <var:N> $ --- before evaluating this program , then we see $ <var:e> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is shown using usual Hoare logic . Moving forward to the next bit of code seen in the set of instructions , we see \verb | { <var:g> = <var:N> } <var:a0> := <nat:2> { <var:g> = <var:N> \land <var:a0> = <nat:2> } | . This is sound through the binding inference rule given by Hoare reasoning . Advancing on , \verb | { <var:g> = <var:N> } <var:a0> := <nat:2> { <var:g> = <var:N> \land <var:a0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:2> ; <var:e> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:g> = <var:N> }} <def:poly> {{ <var:e> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:e> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 