\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:1> ; <var:h> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Assuming that $ <var:J> = <var:r> $ prior to the execution of this code then $ <var:h> = <nat:1> $ when series of commands has executed . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:J> = <var:r> \} \\ <var:T0> := <nat:1> ; \\ \{ <var:J> = <var:r> \land <var:T0> = <nat:1> \} \\ <var:h> := <var:T0> \\ \{ <var:J> = <var:r> \land <var:h> = <nat:1> \} \end{eqnarray} Thusly , the list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:1> ; <var:h> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:J> = <var:r> }} <def:poly> {{ <var:h> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:h> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 