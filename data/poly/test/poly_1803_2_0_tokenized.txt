\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:N0> := <nat:8> ; <var:I> := <var:N0> \end{verbatim} Allow that $ <var:G> = <var:D> $ before the evaluation of our list of commands it holds that we have $ <var:I> = <nat:8> $ after segment of code has exited . \end{theorem} \begin{proof} Using standard Hoare techniques produces : \begin{eqnarray} \{ <var:G> = <var:D> \} \\ <var:N0> := <nat:8> ; \\ \{ <var:G> = <var:D> \land <var:N0> = <nat:8> \} \\ <var:I> := <var:N0> \\ \{ <var:G> = <var:D> \land <var:I> = <nat:8> \} \end{eqnarray} Thus , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:G> = <var:D> }} <var:N0> := <nat:8> ; <var:I> := <var:N0> {{ <var:I> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:I> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 