\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <nat:1> + <var:a> * <var:w> ; <var:a> := <nat:1> + <var:a> * <var:w> ; <var:a> := <var:a> * <var:w> ; <var:a> := <nat:4> + <var:a> * <var:w> ; <var:a> := <nat:1> + <var:a> * <var:w> ; <var:a> := <var:a> * <var:w> ; <var:a> := <nat:2> + <var:a> * <var:w> ; <var:a> := <nat:4> + <var:a> * <var:w> ; <var:a> := <nat:2> + <var:a> * <var:w> \end{verbatim} Given that $ <var:w> = <var:S> $ before evaluating our set of instructions , it must be that $ <var:a> = <nat:1> * <var:S> ^ <nat:9> + <nat:1> * <var:S> ^ <nat:8> + <nat:1> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:2> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:w> = <var:S> \} \\ <var:a> := <nat:1> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \} \\ <var:a> := <nat:1> + <var:a> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> + <nat:1> \} \\ <var:a> := <nat:1> + <var:a> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:1> \} \\ <var:a> := <var:a> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> ^ <nat:3> + <nat:1> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + \} \\ <var:a> := <nat:4> + <var:a> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> ^ <nat:4> + <nat:1> \cdot <var:S> ^ <nat:3> + <nat:1> \cdot <var:S> ^ <nat:2> + <nat:4> \} \\ <var:a> := <nat:1> + <var:a> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> ^ <nat:5> + <nat:1> \cdot <var:S> ^ <nat:4> + <nat:1> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> + <nat:1> \} \\ <var:a> := <var:a> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> ^ <nat:6> + <nat:1> \cdot <var:S> ^ <nat:5> + <nat:1> \cdot <var:S> ^ <nat:4> + <nat:4> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + \} \\ <var:a> := <nat:2> + <var:a> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> ^ <nat:7> + <nat:1> \cdot <var:S> ^ <nat:6> + <nat:1> \cdot <var:S> ^ <nat:5> + <nat:4> \cdot <var:S> ^ <nat:3> + <nat:1> \cdot <var:S> ^ <nat:2> + <nat:2> \} \\ <var:a> := <nat:4> + <var:a> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> ^ <nat:8> + <nat:1> \cdot <var:S> ^ <nat:7> + <nat:1> \cdot <var:S> ^ <nat:6> + <nat:4> \cdot <var:S> ^ <nat:4> + <nat:1> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> + <nat:4> \} \\ <var:a> := <nat:2> + <var:a> * <var:w> \\ \{ <var:w> = <var:S> \land <var:a> = <nat:1> \cdot <var:S> ^ <nat:9> + <nat:1> \cdot <var:S> ^ <nat:8> + <nat:1> \cdot <var:S> ^ <nat:7> + <nat:4> \cdot <var:S> ^ <nat:5> + <nat:1> \cdot <var:S> ^ <nat:4> + <nat:2> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> + <nat:2> \} \end{eqnarray} Therefore , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:w> = <var:S> }} <var:a> := <nat:1> ; <var:a> := <nat:1> + <var:a> * <var:w> ; <var:a> := <nat:1> + <var:a> * <var:w> ; <var:a> := <var:a> * <var:w> ; <var:a> := <nat:4> + <var:a> * <var:w> ; <var:a> := <nat:1> + <var:a> * <var:w> ; <var:a> := <var:a> * <var:w> ; <var:a> := <nat:2> + <var:a> * <var:w> ; <var:a> := <nat:4> + <var:a> * <var:w> ; <var:a> := <nat:2> + <var:a> * <var:w> {{ <var:a> = <nat:1> * <var:S> ^ <nat:9> + <nat:1> * <var:S> ^ <nat:8> + <nat:1> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> ^ <nat:7> + <nat:1> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> ^ <nat:8> + <nat:1> * <var:S> ^ <nat:7> + <nat:1> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:a> = <nat:1> * <var:S> ^ <nat:9> + <nat:1> * <var:S> ^ <nat:8> + <nat:1> * <var:S> ^ <nat:7> + <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 