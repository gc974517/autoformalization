\begin{document} \begin{theorem} We define a series of instructions such that \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:r> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:r> ; <var:w2> := <var:w2> * <var:r> ; <var:g> := <var:w2> ; <var:g> := <var:g> + <var:w1> ; <var:g> := <var:g> + <var:w0> \end{verbatim} Assume that we have $ <var:r> = <var:q> $ given integers $ <var:q> $ before the execution of our segment of code then we have $ <var:g> = <nat:8> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is given using typical Hoare techniques . Advancing to the next step , we have \begin{verbatim} { <var:r> = <var:q> } <var:w0> := <nat:3> { <var:r> = <var:q> \land <var:w0> = <nat:3> } { <var:r> = <var:q> \land <var:w0> = <nat:3> } <var:w1> := <nat:9> { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> } { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> } <var:w1> := <var:w1> * <var:r> { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> } { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> } <var:w2> := <nat:8> { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> \land <var:w2> = <nat:8> } { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> \land <var:w2> = <nat:8> } <var:w2> := <var:w2> * <var:r> { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> \land <var:w2> = <nat:8> \times <var:q> } { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> \land <var:w2> = <nat:8> \times <var:q> } <var:w2> := <var:w2> * <var:r> { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> \land <var:w2> = <nat:8> \times <var:q> ^ <nat:2> } { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> \land <var:w2> = <nat:8> \times <var:q> ^ <nat:2> } <var:g> := <var:w2> { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> \land <var:g> = <nat:8> \times <var:q> ^ <nat:2> } { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \times <var:q> \land <var:g> = <nat:8> \times <var:q> ^ <nat:2> } <var:g> := <var:g> + <var:w1> { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:g> = <nat:8> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> } { <var:r> = <var:q> \land <var:w0> = <nat:3> \land <var:g> = <nat:8> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> } <var:g> := <var:g> + <var:w0{ <var:r> = <var:q> \land <var:g> = <nat:8> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> + <nat:3> } \end{verbatim} This is guaranteed with the inference rule in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:r> = <var:q> }} <var:w0> := <nat:3> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:r> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:r> ; <var:w2> := <var:w2> * <var:r> ; <var:g> := <var:w2> ; <var:g> := <var:g> + <var:w1> ; <var:g> := <var:g> + <var:w0> {{ <var:g> = <nat:8> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:9> * <var:q> /\ <var:w2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:9> * <var:q> /\ <var:w2> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:9> * <var:q> /\ <var:w2> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:9> * <var:q> /\ <var:g> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:w0> = <nat:3> /\ <var:g> = <nat:8> * <var:q> ^ <nat:2> + <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:q> /\ <var:g> = <nat:8> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 