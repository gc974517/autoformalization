\begin{document} \begin{theorem} Consider the following segment of code as \begin{verbatim} <var:J> := <nat:3> ; <var:J> := <nat:1> + <var:J> * <var:N> ; <var:J> := <nat:2> + <var:J> * <var:N> ; <var:J> := <nat:1> + <var:J> * <var:N> ; <var:J> := <var:J> * <var:N> ; <var:J> := <nat:2> + <var:J> * <var:N> ; <var:J> := <nat:1> + <var:J> * <var:N> ; <var:J> := <var:J> * <var:N> ; <var:J> := <nat:3> + <var:J> * <var:N> ; <var:J> := <var:J> * <var:N> ; <var:J> := <var:J> * <var:N> ; <var:J> := <nat:3> + <var:J> * <var:N> \end{verbatim} Assuming $ <var:N> = <var:n> $ ( assuming some natural coefficients $ <var:n> $ ) ahead of interpreting the series of commands , it follows that we have $ <var:J> = <nat:3> \cdot <var:n> ^ <nat:11> + <nat:1> \cdot <var:n> ^ <nat:10> + <nat:2> \cdot <var:n> ^ <nat:9> + <nat:1> \cdot <var:n> ^ <nat:8> + <nat:2> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:3> \cdot <var:n> ^ <nat:3> + <nat:3> $ when series of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:n> \} \\ <var:J> := <nat:3> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \} \\ <var:J> := <nat:1> + <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> + <nat:1> \} \\ <var:J> := <nat:2> + <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:2> \} \\ <var:J> := <nat:1> + <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> \} \end{eqnarray} Advancing interpreting the list of instructions gives us : \begin{eqnarray} <var:J> := <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + \} \end{eqnarray} Allowing executing the series of commands yields : \begin{eqnarray} <var:J> := <nat:2> + <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:2> \} \\ <var:J> := <nat:1> + <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> + <nat:1> \} \\ <var:J> := <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:7> + <nat:1> \times <var:n> ^ <nat:6> + <nat:2> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + \} \\ <var:J> := <nat:3> + <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:8> + <nat:1> \times <var:n> ^ <nat:7> + <nat:2> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \} \\ <var:J> := <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:9> + <nat:1> \times <var:n> ^ <nat:8> + <nat:2> \times <var:n> ^ <nat:7> + <nat:1> \times <var:n> ^ <nat:6> + <nat:2> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> + \} \\ <var:J> := <var:J> * <var:N> ; \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:10> + <nat:1> \times <var:n> ^ <nat:9> + <nat:2> \times <var:n> ^ <nat:8> + <nat:1> \times <var:n> ^ <nat:7> + <nat:2> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:2> + \} \\ <var:J> := <nat:3> + <var:J> * <var:N> \\ \{ <var:N> = <var:n> \land <var:J> = <nat:3> \times <var:n> ^ <nat:11> + <nat:1> \times <var:n> ^ <nat:10> + <nat:2> \times <var:n> ^ <nat:9> + <nat:1> \times <var:n> ^ <nat:8> + <nat:2> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:3> + <nat:3> \} \end{eqnarray} Using Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:N> = <var:n> }} <var:J> := <nat:3> ; <var:J> := <nat:1> + <var:J> * <var:N> ; <var:J> := <nat:2> + <var:J> * <var:N> ; <var:J> := <nat:1> + <var:J> * <var:N> ; <var:J> := <var:J> * <var:N> ; <var:J> := <nat:2> + <var:J> * <var:N> ; <var:J> := <nat:1> + <var:J> * <var:N> ; <var:J> := <var:J> * <var:N> ; <var:J> := <nat:3> + <var:J> * <var:N> ; <var:J> := <var:J> * <var:N> ; <var:J> := <var:J> * <var:N> ; <var:J> := <nat:3> + <var:J> * <var:N> {{ <var:J> = <nat:3> * <var:n> ^ <nat:11> + <nat:1> * <var:n> ^ <nat:10> + <nat:2> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:10> + <nat:1> * <var:n> ^ <nat:9> + <nat:2> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:J> = <nat:3> * <var:n> ^ <nat:11> + <nat:1> * <var:n> ^ <nat:10> + <nat:2> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 