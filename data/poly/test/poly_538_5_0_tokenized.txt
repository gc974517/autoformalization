\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:3> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:y> ; <var:b> := <var:f1> ; <var:b> := <var:b> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given every $ <var:P> \in \mathbb{N} $ , it to be that $ <var:y> = <var:P> $ before the evaluation of our code segment then we have $ <var:b> = <nat:8> \times <var:P> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare techniques returns : \begin{eqnarray} \{ <var:y> = <var:P> \} \\ <var:f0> := <nat:3> ; \\ \{ <var:y> = <var:P> \land <var:f0> = <nat:3> \} \\ <var:f1> := <nat:8> ; \\ \{ <var:y> = <var:P> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \} \\ <var:f1> := <var:f1> * <var:y> ; \\ \{ <var:y> = <var:P> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> * <var:P> \} \\ <var:b> := <var:f1> ; \\ \{ <var:y> = <var:P> \land <var:f0> = <nat:3> \land <var:b> = <nat:8> * <var:P> \} \\ <var:b> := <var:b> + <var:f0> \\ \{ <var:y> = <var:P> \land <var:b> = <nat:8> * <var:P> + <nat:3> \} \end{eqnarray} Thus , this code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:3> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:y> ; <var:b> := <var:f1> ; <var:b> := <var:b> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:y> = <var:P> }} <def:poly> {{ <var:b> = <nat:8> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:f0> = <nat:3> /\ <var:b> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:b> = <nat:8> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 