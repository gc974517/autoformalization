\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:H1> := <var:k> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:5> ; <var:R> := <var:H1> <var:R> := <var:R> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:k> = <var:o> $ before evaluating the list of instructions it must be that we see $ <var:R> = <nat:5> * <var:o> + <nat:6> $ once segment of code finishes . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is demonstrated through the following decorated set of commands . \begin{eqnarray} \{ <var:k> = <var:o> \} \\ <var:H1> := <var:k> ; \\ \{ <var:k> = <var:o> \land <var:H1> = <var:o> \} \end{eqnarray} Advancing executing our series of commands produces : \begin{eqnarray} <var:H0> := <nat:6> ; \\ \{ <var:k> = <var:o> \land <var:H1> = <var:o> \land <var:H0> = <nat:6> \} \\ <var:H1> := <var:H1> * <nat:5> ; \\ \{ <var:k> = <var:o> \land <var:H1> = <nat:5> \times <var:o> \land <var:H0> = <nat:6> \} \\ <var:R> := <var:H1> \\ \{ <var:k> = <var:o> \land <var:H0> = <nat:6> \land <var:R> = <nat:5> \times <var:o> \} \\ <var:R> := <var:R> + <var:H0> \\ \{ <var:k> = <var:o> \land <var:R> = <nat:5> \times <var:o> + <nat:6> \} \end{eqnarray} Applying usual Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:k> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:5> ; <var:R> := <var:H1> <var:R> := <var:R> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:k> = <var:o> }} <def:poly> {{ <var:R> = <nat:5> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:H1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:H1> = <var:o> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:H1> = <nat:5> * <var:o> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:H0> = <nat:6> /\ <var:R> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:R> = <nat:5> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 