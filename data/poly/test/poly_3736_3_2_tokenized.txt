\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:z> := <nat:4> ; <var:z> := <nat:1> + <var:z> * <var:e> ; <var:z> := <nat:2> + <var:z> * <var:e> \end{verbatim} Allowing it to be that $ <var:e> = <var:f> $ ahead of executing this code it follows that $ <var:z> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands is given through standard Hoare reasoning . Moving forward to the next step , we see the variable binding code \verb | <var:z> := <nat:4> ; | . This line transfers the condition $ \{ <var:e> = <var:f> \} $ as the condition $ \{ <var:e> = <var:f> \land <var:z> = <nat:4> \} $ . This is ensured through the assignment scheme given in typical Hoare techniques . Moving on to the subsequent statement seen in the series of commands , we see the variable update line \verb | <var:z> := <nat:1> + <var:z> * <var:e> ; | . This command forwards the condition $ \{ <var:e> = <var:f> \land <var:z> = <nat:4> \} $ to the condition $ \{ <var:e> = <var:f> \land <var:z> = <nat:4> * <var:f> + <nat:1> \} $ . Advancing , we see the variable binding command \verb | <var:z> := <nat:2> + <var:z> * <var:e> | . This code forwards $ \{ <var:e> = <var:f> \land <var:z> = <nat:4> * <var:f> + <nat:1> \} $ into the condition $ \{ <var:e> = <var:f> \land <var:z> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:e> = <var:f> }} <var:z> := <nat:4> ; <var:z> := <nat:1> + <var:z> * <var:e> ; <var:z> := <nat:2> + <var:z> * <var:e> {{ <var:z> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:z> = <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:z> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 