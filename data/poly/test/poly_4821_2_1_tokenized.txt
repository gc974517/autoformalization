\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:1> ; <var:x> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> . Assume ( letting positive coefficients $ <var:U> $ ) $ <var:n> = <var:U> $ before the evaluation of our series of instructions , it follows that we see $ <var:x> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:U> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:n> = <var:U> \land <var:z0> = <nat:1> \} \\ <var:x> := <var:z0> \\ \{ <var:n> = <var:U> \land <var:x> = <nat:1> \} \end{eqnarray} The application of Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:1> ; <var:x> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:n> = <var:U> }} <def:poly> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 