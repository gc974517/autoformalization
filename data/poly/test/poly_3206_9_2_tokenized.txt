\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <nat:3> + <var:S> * <var:a> ; <var:S> := <nat:3> + <var:S> * <var:a> ; <var:S> := <nat:1> + <var:S> * <var:a> ; <var:S> := <nat:3> + <var:S> * <var:a> ; <var:S> := <var:S> * <var:a> ; <var:S> := <nat:4> + <var:S> * <var:a> ; <var:S> := <nat:3> + <var:S> * <var:a> ; <var:S> := <nat:1> + <var:S> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:a> = <var:h> $ prior to running our program it must be that $ <var:S> = <nat:1> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> $ once program terminates . \end{theorem} \begin{proof} The flow of logic for our program is given by typical Hoare reasoning . Going to the next step , \begin{eqnarray} \{ <var:a> = <var:h> \} \, <var:S> := <nat:1> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> \} \\ \{ <var:a> = <var:h> \land <var:S> = <nat:1> \} \, <var:S> := <nat:3> + <var:S> * <var:a> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> * <var:h> + <nat:3> \} \\ \{ <var:a> = <var:h> \land <var:S> = <nat:1> * <var:h> + <nat:3> \} \, <var:S> := <nat:3> + <var:S> * <var:a> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> \} \\ \{ <var:a> = <var:h> \land <var:S> = <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> \} \, <var:S> := <nat:1> + <var:S> * <var:a> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> \} \\ \{ <var:a> = <var:h> \land <var:S> = <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> \} \, <var:S> := <nat:3> + <var:S> * <var:a> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> \} \end{eqnarray} This is rigorously given through the variable assignmet scheme given by Hoare logic . Immediately following , \begin{eqnarray} \{ <var:a> = <var:h> \} \, <var:S> := <nat:1> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> \} \\ \{ <var:a> = <var:h> \land <var:S> = <nat:1> \} \, <var:S> := <nat:3> + <var:S> * <var:a> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> * <var:h> + <nat:3> \} \end{eqnarray} Advancing to the next step , \begin{eqnarray} \{ <var:a> = <var:h> \} \, <var:S> := <nat:1> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> \} \end{eqnarray} Immediately after , we see \begin{eqnarray} \{ <var:a> = <var:h> \} \, <var:S> := <nat:1> \, \{ <var:a> = <var:h> \land <var:S> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:1> ; <var:S> := <nat:3> + <var:S> * <var:a> ; <var:S> := <nat:3> + <var:S> * <var:a> ; <var:S> := <nat:1> + <var:S> * <var:a> ; <var:S> := <nat:3> + <var:S> * <var:a> ; <var:S> := <var:S> * <var:a> ; <var:S> := <nat:4> + <var:S> * <var:a> ; <var:S> := <nat:3> + <var:S> * <var:a> ; <var:S> := <nat:1> + <var:S> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:a> = <var:h> }} <def:poly> {{ <var:S> = <nat:1> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:S> = <nat:1> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 