\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:6> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:Z> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:Z> ; <var:h2> := <var:h2> * <var:Z> ; <var:q> := <var:h2> ; <var:q> := <var:q> + <var:h1> ; <var:q> := <var:q> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Allowing that $ <var:Z> = <var:r> $ before the evaluation of this series of instructions it follows that $ <var:q> = <nat:8> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions is shown using typical Hoare techniques . Taking another step toward the subsequent bit of code found in the list of instructions , the variable binding statement \verb | <var:h0> := <nat:6> ; | . This statement moves the precondition $ \{ <var:Z> = <var:r> \} $ into the postcondition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \} $ . This is deduced through the assignment scheme defined by Hoare reasoning . Moving onward , we see the environment update line binding $ <nat:1> $ as $ <var:h1>$ . This transfers the condition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \} $ into $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> \} $ . Moving on to the subsequent piece of code seen in our set of commands , the environment update command \verb | <var:h1> := <var:h1> * <var:Z> ; | . This transfers $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> \} $ into the postcondition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \} $ . This is rigorously given with the assignment inference rule defined by standard Hoare reasoning . Stepping through , we have the assignment statement yielding $ <nat:8> $ to $ <var:h2>$ . This line moves $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \} $ as the condition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \land <var:h2> = <nat:8> \} $ . This is shown to be logically sound by the assignment scheme given in usual Hoare techniques . Moving forward to the subsequent bit of code seen in the program , we see the code assigning $ <var:h2> * <var:Z> $ toward $ <var:h2>$ . This advances the precondition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \land <var:h2> = <nat:8> \} $ toward $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \land <var:h2> = <nat:8> * <var:r> \} $ . This is ensured by the assignment rule obtained from standard Hoare logic . Moving forward to the next step contained in our set of instructions , the variable assignmet command giving $ <var:h2> * <var:Z> $ to $ <var:h2>$ . This code advances the condition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \land <var:h2> = <nat:8> * <var:r> \} $ as $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \land <var:h2> = <nat:8> * <var:r> ^ <nat:2> \} $ . This is guaranteed by the assignment law found in usual Hoare techniques . Going forward , we see the variable assignmet code letting $ <var:h2> $ as $ <var:q>$ . This code takes $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \land <var:h2> = <nat:8> * <var:r> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \land <var:q> = <nat:8> * <var:r> ^ <nat:2> \} $ . Stepping forward , we see the assignment line \verb | <var:q> := <var:q> + <var:h1> ; | . This line takes the condition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:r> \land <var:q> = <nat:8> * <var:r> ^ <nat:2> \} $ toward the condition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:q> = <nat:8> * <var:r> ^ <nat:2> + <nat:1> * <var:r> \} $ . This is deduced through the assignment inference rule obtained from standard Hoare techniques . Immediately following , we have the assignment line yielding $ <var:q> + <var:h0$ into $ <var:q>$ . This transfers the condition $ \{ <var:Z> = <var:r> \land <var:h0> = <nat:6> \land <var:q> = <nat:8> * <var:r> ^ <nat:2> + <nat:1> * <var:r> \} $ as the condition $ \{ <var:Z> = <var:r> \land <var:q> = <nat:8> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:6> \} $ . This is deduced using the assignment scheme obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:6> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:Z> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:Z> ; <var:h2> := <var:h2> * <var:Z> ; <var:q> := <var:h2> ; <var:q> := <var:q> + <var:h1> ; <var:q> := <var:q> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Z> = <var:r> }} <def:poly> {{ <var:q> = <nat:8> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:r> /\ <var:q> = <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h0> = <nat:6> /\ <var:q> = <nat:8> * <var:r> ^ <nat:2> + <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:q> = <nat:8> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 