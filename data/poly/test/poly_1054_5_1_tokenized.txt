\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:L1> := <var:a> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:4> ; <var:K> := <var:L1> <var:K> := <var:K> + <var:L0> \end{verbatim} Assume that we have $ <var:a> = <var:J> $ ( given whole numbers $ <var:J> $ ) before running the segment of code then $ <var:K> = <nat:4> * <var:J> + <nat:3> $ when set of commands exits . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:a> = <var:J> \} \\ <var:L1> := <var:a> ; \\ \{ <var:a> = <var:J> \land <var:L1> = <var:J> \} \\ <var:L0> := <nat:3> ; \\ \{ <var:a> = <var:J> \land <var:L1> = <var:J> \land <var:L0> = <nat:3> \} \\ <var:L1> := <var:L1> * <nat:4> ; \\ \{ <var:a> = <var:J> \land <var:L1> = <nat:4> * <var:J> \land <var:L0> = <nat:3> \} \\ <var:K> := <var:L1> \\ \{ <var:a> = <var:J> \land <var:L0> = <nat:3> \land <var:K> = <nat:4> * <var:J> \} \\ <var:K> := <var:K> + <var:L0> \\ \{ <var:a> = <var:J> \land <var:K> = <nat:4> * <var:J> + <nat:3> \} \end{eqnarray} Thus , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:a> = <var:J> }} <var:L1> := <var:a> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:4> ; <var:K> := <var:L1> <var:K> := <var:K> + <var:L0> {{ <var:K> = <nat:4> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:L1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:L1> = <var:J> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:L1> = <nat:4> * <var:J> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:L0> = <nat:3> /\ <var:K> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:K> = <nat:4> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 