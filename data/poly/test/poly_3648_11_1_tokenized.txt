\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:w> ; <var:X2> := <var:X1> * <var:w> ; <var:X3> := <var:X2> * <var:w> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:9> ; <var:X2> := <var:X2> * <nat:9> ; <var:X3> := <var:X3> * <nat:4> ; <var:A> := <var:X3> <var:A> := <var:A> + <var:X2> <var:A> := <var:A> + <var:X1> <var:A> := <var:A> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Allowing that we have $ <var:w> = <var:i> $ before the evaluation of our list of instructions , it must be that we have $ <var:A> = <nat:4> * <var:i> ^ <nat:3> + <nat:9> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is evident using this decorated segment of code . \begin{eqnarray} \{ <var:w> = <var:i> \} \\ <var:X1> := <var:w> ; \\ \{ <var:w> = <var:i> \land <var:X1> = <var:i> \} \\ <var:X2> := <var:X1> * <var:w> ; \\ \{ <var:w> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:w> ; \\ \{ <var:w> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \} \\ <var:X0> := <nat:7> ; \\ \{ <var:w> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \land <var:X0> = <nat:7> \} \end{eqnarray} Allowing executing this list of commands gives : \begin{eqnarray} <var:X1> := <var:X1> * <nat:9> ; \\ \{ <var:w> = <var:i> \land <var:X1> = <nat:9> \times <var:i> \land <var:X2> = <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \land <var:X0> = <nat:7> \} \\ <var:X2> := <var:X2> * <nat:9> ; \\ \{ <var:w> = <var:i> \land <var:X1> = <nat:9> \times <var:i> \land <var:X2> = <nat:9> \times <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \land <var:X0> = <nat:7> \} \\ <var:X3> := <var:X3> * <nat:4> ; \\ \{ <var:w> = <var:i> \land <var:X1> = <nat:9> \times <var:i> \land <var:X2> = <nat:9> \times <var:i> ^ <nat:2> \land <var:X3> = <nat:4> \times <var:i> ^ <nat:3> \land <var:X0> = <nat:7> \} \\ <var:A> := <var:X3> \\ \{ <var:w> = <var:i> \land <var:X1> = <nat:9> \times <var:i> \land <var:X2> = <nat:9> \times <var:i> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:A> = <nat:4> \times <var:i> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:X2> \\ \{ <var:w> = <var:i> \land <var:X1> = <nat:9> \times <var:i> \land <var:X0> = <nat:7> \land <var:A> = <nat:4> \times <var:i> ^ <nat:3> + <nat:9> \times <var:i> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:X1> \\ \{ <var:w> = <var:i> \land <var:X0> = <nat:7> \land <var:A> = <nat:4> \times <var:i> ^ <nat:3> + <nat:9> \times <var:i> ^ <nat:2> + <nat:9> \times <var:i> \} \\ <var:A> := <var:A> + <var:X0> \\ \{ <var:w> = <var:i> \land <var:A> = <nat:4> \times <var:i> ^ <nat:3> + <nat:9> \times <var:i> ^ <nat:2> + <nat:9> \times <var:i> + <nat:7> \} \end{eqnarray} The application of usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <def:poly> := <var:X1> := <var:w> ; <var:X2> := <var:X1> * <var:w> ; <var:X3> := <var:X2> * <var:w> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:9> ; <var:X2> := <var:X2> * <nat:9> ; <var:X3> := <var:X3> * <nat:4> ; <var:A> := <var:X3> <var:A> := <var:A> + <var:X2> <var:A> := <var:A> + <var:X1> <var:A> := <var:A> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:w> = <var:i> }} <def:poly> {{ <var:A> = <nat:4> * <var:i> ^ <nat:3> + <nat:9> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <var:i> ^ <nat:2> /\ <var:X3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <var:i> ^ <nat:2> /\ <var:X3> = <var:i> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <nat:9> * <var:i> /\ <var:X2> = <var:i> ^ <nat:2> /\ <var:X3> = <var:i> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <nat:9> * <var:i> /\ <var:X2> = <nat:9> * <var:i> ^ <nat:2> /\ <var:X3> = <var:i> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <nat:9> * <var:i> /\ <var:X2> = <nat:9> * <var:i> ^ <nat:2> /\ <var:X3> = <nat:4> * <var:i> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <nat:9> * <var:i> /\ <var:X2> = <nat:9> * <var:i> ^ <nat:2> /\ <var:X0> = <nat:7> /\ <var:A> = <nat:4> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X1> = <nat:9> * <var:i> /\ <var:X0> = <nat:7> /\ <var:A> = <nat:4> * <var:i> ^ <nat:3> + <nat:9> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:X0> = <nat:7> /\ <var:A> = <nat:4> * <var:i> ^ <nat:3> + <nat:9> * <var:i> ^ <nat:2> + <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:A> = <nat:4> * <var:i> ^ <nat:3> + <nat:9> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 