\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:F1> := <var:g> ; <var:F2> := <var:F1> * <var:g> ; <var:F3> := <var:F2> * <var:g> ; <var:F4> := <var:F3> * <var:g> ; <var:F0> := <nat:4> ; <var:F1> := <var:F1> * <nat:2> ; <var:F4> := <var:F4> * <nat:4> ; <var:J> := <var:F4> <var:J> := <var:J> + <var:F1> <var:J> := <var:J> + <var:F0> \end{verbatim} Assuming that we have $ <var:g> = <var:p> $ before executing this program , then $ <var:J> = <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> + <nat:4> $ when list of instructions exits . \end{theorem} \begin{proof} Notice this decorated segment of code . \begin{eqnarray} \{ <var:g> = <var:p> \} \\ <var:F1> := <var:g> ; \\ \{ <var:g> = <var:p> \land <var:F1> = <var:p> \} \\ <var:F2> := <var:F1> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:F1> = <var:p> \land <var:F2> = <var:p> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:F1> = <var:p> \land <var:F2> = <var:p> ^ <nat:2> \land <var:F3> = <var:p> ^ <nat:3> \} \\ <var:F4> := <var:F3> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:F1> = <var:p> \land <var:F2> = <var:p> ^ <nat:2> \land <var:F3> = <var:p> ^ <nat:3> \land <var:F4> = <var:p> ^ <nat:4> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:g> = <var:p> \land <var:F1> = <var:p> \land <var:F2> = <var:p> ^ <nat:2> \land <var:F3> = <var:p> ^ <nat:3> \land <var:F4> = <var:p> ^ <nat:4> \land <var:F0> = <nat:4> \} \\ <var:F1> := <var:F1> * <nat:2> ; \\ \{ <var:g> = <var:p> \land <var:F1> = <nat:2> \times <var:p> \land <var:F2> = <var:p> ^ <nat:2> \land <var:F3> = <var:p> ^ <nat:3> \land <var:F4> = <var:p> ^ <nat:4> \land <var:F0> = <nat:4> \} \\ <var:F4> := <var:F4> * <nat:4> ; \\ \{ <var:g> = <var:p> \land <var:F1> = <nat:2> \times <var:p> \land <var:F2> = <var:p> ^ <nat:2> \land <var:F3> = <var:p> ^ <nat:3> \land <var:F4> = <nat:4> \times <var:p> ^ <nat:4> \land <var:F0> = <nat:4> \} \\ <var:J> := <var:F4> \\ \{ <var:g> = <var:p> \land <var:F1> = <nat:2> \times <var:p> \land <var:F2> = <var:p> ^ <nat:2> \land <var:F3> = <var:p> ^ <nat:3> \land <var:F0> = <nat:4> \land <var:J> = <nat:4> \times <var:p> ^ <nat:4> \} \end{eqnarray} Advancing interpreting the program yields : \begin{eqnarray} <var:J> := <var:J> + <var:F1> \\ \{ <var:g> = <var:p> \land <var:F0> = <nat:4> \land <var:J> = <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> \} \\ <var:J> := <var:J> + <var:F0> \\ \{ <var:g> = <var:p> \land <var:J> = <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <var:F4> : string := " <var:F4> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:g> = <var:p> }} <var:F1> := <var:g> ; <var:F2> := <var:F1> * <var:g> ; <var:F3> := <var:F2> * <var:g> ; <var:F4> := <var:F3> * <var:g> ; <var:F0> := <nat:4> ; <var:F1> := <var:F1> * <nat:2> ; <var:F4> := <var:F4> * <nat:4> ; <var:J> := <var:F4> <var:J> := <var:J> + <var:F1> <var:J> := <var:J> + <var:F0> {{ <var:J> = <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F1> = <var:p> /\ <var:F2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F1> = <var:p> /\ <var:F2> = <var:p> ^ <nat:2> /\ <var:F3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F1> = <var:p> /\ <var:F2> = <var:p> ^ <nat:2> /\ <var:F3> = <var:p> ^ <nat:3> /\ <var:F4> = <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F1> = <var:p> /\ <var:F2> = <var:p> ^ <nat:2> /\ <var:F3> = <var:p> ^ <nat:3> /\ <var:F4> = <var:p> ^ <nat:4> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F1> = <nat:2> * <var:p> /\ <var:F2> = <var:p> ^ <nat:2> /\ <var:F3> = <var:p> ^ <nat:3> /\ <var:F4> = <var:p> ^ <nat:4> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F1> = <nat:2> * <var:p> /\ <var:F2> = <var:p> ^ <nat:2> /\ <var:F3> = <var:p> ^ <nat:3> /\ <var:F4> = <nat:4> * <var:p> ^ <nat:4> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F1> = <nat:2> * <var:p> /\ <var:F2> = <var:p> ^ <nat:2> /\ <var:F3> = <var:p> ^ <nat:3> /\ <var:F0> = <nat:4> /\ <var:J> = <nat:4> * <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:F0> = <nat:4> /\ <var:J> = <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:J> = <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 