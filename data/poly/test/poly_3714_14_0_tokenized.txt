\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:2> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:i> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:i> ; <var:D2> := <var:D2> * <var:i> ; <var:D3> := <nat:7> ; <var:D3> := <var:D3> * <var:i> ; <var:D3> := <var:D3> * <var:i> ; <var:D3> := <var:D3> * <var:i> ; <var:F> := <var:D3> ; <var:F> := <var:F> + <var:D2> ; <var:F> := <var:F> + <var:D1> ; <var:F> := <var:F> + <var:D0> \end{verbatim} Assuming it to be that $ <var:i> = <var:g> $ before interpreting the code segment it holds that we see $ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is done by usual Hoare techniques . Advancing to the next step , \verb | { <var:i> = <var:g> } <var:D0> := <nat:2> { <var:i> = <var:g> \land <var:D0> = <nat:2> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> } <var:D1> := <nat:7> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> } <var:D1> := <var:D1> * <var:i> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> } <var:D2> := <nat:5> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> } <var:D2> := <var:D2> * <var:i> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> } <var:D2> := <var:D2> * <var:i> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> } <var:D3> := <nat:7> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:D3> = <nat:7> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:D3> = <nat:7> } <var:D3> := <var:D3> * <var:i> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:D3> = <nat:7> \cdot <var:g> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:D3> = <nat:7> \cdot <var:g> } <var:D3> := <var:D3> * <var:i> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:D3> = <nat:7> \cdot <var:g> ^ <nat:2> } | , \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:D3> = <nat:7> \cdot <var:g> ^ <nat:2> } <var:D3> := <var:D3> * <var:i> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:D3> = <nat:7> \cdot <var:g> ^ <nat:3> } | and \verb | { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:D3> = <nat:7> \cdot <var:g> ^ <nat:3> } <var:F> := <var:D3> { <var:i> = <var:g> \land <var:D0> = <nat:2> \land <var:D1> = <nat:7> \cdot <var:g> \land <var:D2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:F> = <nat:7> \cdot <var:g> ^ <nat:3> } | . This is shown to be logically sound through the assignment law defined by usual Hoare techniques . Stepping forward , we see \verb | { <var:i> = <var:g> } <var:D0> := <nat:2> { <var:i> = <var:g> \land <var:D0> = <nat:2> } | . This is shown with the variable binding inference rule obtained from standard Hoare logic . Shifting focus toward the following line found in the list of instructions , we see \verb | { <var:i> = <var:g> } <var:D0> := <nat:2> { <var:i> = <var:g> \land <var:D0> = <nat:2> } | . Taking a look at the following line contained in our set of instructions , \verb | { <var:i> = <var:g> } <var:D0> := <nat:2> { <var:i> = <var:g> \land <var:D0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:i> = <var:g> }} <var:D0> := <nat:2> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:i> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:i> ; <var:D2> := <var:D2> * <var:i> ; <var:D3> := <nat:7> ; <var:D3> := <var:D3> * <var:i> ; <var:D3> := <var:D3> * <var:i> ; <var:D3> := <var:D3> * <var:i> ; <var:F> := <var:D3> ; <var:F> := <var:F> + <var:D2> ; <var:F> := <var:F> + <var:D1> ; <var:F> := <var:F> + <var:D0> {{ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:D3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:D3> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:D3> = <nat:7> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:D3> = <nat:7> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:F> = <nat:7> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:7> * <var:g> /\ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:D0> = <nat:2> /\ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 