\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:W> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:4> ; <var:E> := <var:b1> <var:E> := <var:E> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Assuming it to be that $ <var:W> = <var:I> $ for whole numbers $ <var:I> $ ahead of the evaluation of this code it follows that $ <var:E> = <nat:4> \cdot <var:I> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:I> \} \\ <var:b1> := <var:W> ; \\ \{ <var:W> = <var:I> \land <var:b1> = <var:I> \} \\ <var:b0> := <nat:1> ; \\ \{ <var:W> = <var:I> \land <var:b1> = <var:I> \land <var:b0> = <nat:1> \} \\ <var:b1> := <var:b1> * <nat:4> ; \\ \{ <var:W> = <var:I> \land <var:b1> = <nat:4> \times <var:I> \land <var:b0> = <nat:1> \} \\ <var:E> := <var:b1> \\ \{ <var:W> = <var:I> \land <var:b0> = <nat:1> \land <var:E> = <nat:4> \times <var:I> \} \\ <var:E> := <var:E> + <var:b0> \\ \{ <var:W> = <var:I> \land <var:E> = <nat:4> \times <var:I> + <nat:1> \} \end{eqnarray} The application of Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:W> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:4> ; <var:E> := <var:b1> <var:E> := <var:E> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:W> = <var:I> }} <def:poly> {{ <var:E> = <nat:4> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:b1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:b1> = <var:I> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:b1> = <nat:4> * <var:I> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:b0> = <nat:1> /\ <var:E> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:E> = <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 