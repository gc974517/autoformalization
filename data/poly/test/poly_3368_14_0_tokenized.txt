\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:1> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:J> ; <var:h2> := <nat:1> ; <var:h2> := <var:h2> * <var:J> ; <var:h2> := <var:h2> * <var:J> ; <var:h3> := <nat:8> ; <var:h3> := <var:h3> * <var:J> ; <var:h3> := <var:h3> * <var:J> ; <var:h3> := <var:h3> * <var:J> ; <var:v> := <var:h3> ; <var:v> := <var:v> + <var:h2> ; <var:v> := <var:v> + <var:h1> ; <var:v> := <var:v> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assuming , assuming some $ <var:D> $ , that we have $ <var:J> = <var:D> $ before the execution of this series of instructions , then we see $ <var:v> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this list of instructions can be accomplished by usual Hoare techniques . Honing in on the upcoming pieces of code seen in our series of commands , \begin{verbatim} { <var:J> = <var:D> } <var:h0> := <nat:1> { <var:J> = <var:D> \land <var:h0> = <nat:1> } { <var:J> = <var:D> \land <var:h0> = <nat:1> } <var:h1> := <nat:4> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> } \end{verbatim} This is guaranteed through the rule obtained from standard Hoare techniques . Keeping momentum , we have \begin{verbatim} { <var:J> = <var:D> } <var:h0> := <nat:1> { <var:J> = <var:D> \land <var:h0> = <nat:1> } { <var:J> = <var:D> \land <var:h0> = <nat:1> } <var:h1> := <nat:4> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> } { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> } <var:h1> := <var:h1> * <var:J> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> } { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> } <var:h2> := <nat:1> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> } { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> } <var:h2> := <var:h2> * <var:J> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> } { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> } <var:h2> := <var:h2> * <var:J> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> } { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> } <var:h3> := <nat:8> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> \land <var:h3> = <nat:8> } { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> \land <var:h3> = <nat:8> } <var:h3> := <var:h3> * <var:J> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> \land <var:h3> = <nat:8> * <var:D> } { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> \land <var:h3> = <nat:8> * <var:D> } <var:h3> := <var:h3> * <var:J> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> \land <var:h3> = <nat:8> * <var:D> ^ <nat:2> } { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> \land <var:h3> = <nat:8> * <var:D> ^ <nat:2> } <var:h3> := <var:h3> * <var:J> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> * <var:D> \land <var:h2> = <nat:1> * <var:D> ^ <nat:2> \land <var:h3> = <nat:8> * <var:D> ^ <nat:3> } \end{verbatim} Keeping momentum , we see \begin{verbatim} { <var:J> = <var:D> } <var:h0> := <nat:1> { <var:J> = <var:D> \land <var:h0> = <nat:1> } { <var:J> = <var:D> \land <var:h0> = <nat:1> } <var:h1> := <nat:4> { <var:J> = <var:D> \land <var:h0> = <nat:1> \land <var:h1> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:J> ; <var:h2> := <nat:1> ; <var:h2> := <var:h2> * <var:J> ; <var:h2> := <var:h2> * <var:J> ; <var:h3> := <nat:8> ; <var:h3> := <var:h3> * <var:J> ; <var:h3> := <var:h3> * <var:J> ; <var:h3> := <var:h3> * <var:J> ; <var:v> := <var:h3> ; <var:v> := <var:v> + <var:h2> ; <var:v> := <var:v> + <var:h1> ; <var:v> := <var:v> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:J> = <var:D> }} <def:poly> {{ <var:v> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:h2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:h2> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:h2> = <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:h2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:h3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:h2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:h2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:h2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:h2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:v> = <nat:8> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:4> * <var:D> /\ <var:v> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:h0> = <nat:1> /\ <var:v> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:v> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 