\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:5> ; <var:T> := <var:S0> \end{verbatim} Given that we have $ <var:x> = <var:z> $ before executing this set of commands , then $ <var:T> = <nat:5> $ once set of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be shown with usual Hoare techniques . Following , we have the assignment code defining $ <nat:5> $ toward $ <var:S0>$ . This takes the precondition $ \{ <var:x> = <var:z> \} $ as the postcondition $ \{ <var:x> = <var:z> \land <var:S0> = <nat:5> \} $ . This is guaranteed through the assignment rule from Hoare reasoning . Focusing on the proceeding piece of code contained in the set of instructions , we have the assignment statement \verb | <var:T> := <var:S0> | . This code advances the precondition $ \{ <var:x> = <var:z> \land <var:S0> = <nat:5> \} $ toward the postcondition $ \{ <var:x> = <var:z> \land <var:T> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:x> = <var:z> }} <var:S0> := <nat:5> ; <var:T> := <var:S0> {{ <var:T> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:T> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 