\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:n> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:3> ; <var:c> := <var:w1> <var:c> := <var:c> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Given , for all positive integers $ <var:t> $ , $ <var:n> = <var:t> $ ahead of executing our series of commands , it follows that we see $ <var:c> = <nat:3> \times <var:t> + <nat:2> $ when series of instructions is done . \end{theorem} \begin{proof} The proof of this series of instructions is clear using typical Hoare techniques . Jumping to the proceeding statements in our list of instructions , we see \begin{eqnarray} \{ <var:n> = <var:t> \} \, <var:w1> := <var:n> \, \{ <var:n> = <var:t> \land <var:w1> = <var:t> \} \\ \{ <var:n> = <var:t> \land <var:w1> = <var:t> \} \, <var:w0> := <nat:2> \, \{ <var:n> = <var:t> \land <var:w1> = <var:t> \land <var:w0> = <nat:2> \} \end{eqnarray} This is known to be sound with the binding rule from Hoare techniques . Advancing to the following step found in our set of instructions , we have \begin{eqnarray} \{ <var:n> = <var:t> \} \, <var:w1> := <var:n> \, \{ <var:n> = <var:t> \land <var:w1> = <var:t> \} \end{eqnarray} This is shown to be logically sound using the binding law from standard Hoare logic . Going to the next step , we have \begin{eqnarray} \{ <var:n> = <var:t> \} \, <var:w1> := <var:n> \, \{ <var:n> = <var:t> \land <var:w1> = <var:t> \} \end{eqnarray} Honing in on the upcoming statement contained in our set of commands , we see \begin{eqnarray} \{ <var:n> = <var:t> \} \, <var:w1> := <var:n> \, \{ <var:n> = <var:t> \land <var:w1> = <var:t> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:n> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:3> ; <var:c> := <var:w1> <var:c> := <var:c> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:n> = <var:t> }} <def:poly> {{ <var:c> = <nat:3> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:t> /\ <var:w1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:t> /\ <var:w1> = <var:t> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:t> /\ <var:w1> = <nat:3> * <var:t> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:t> /\ <var:w0> = <nat:2> /\ <var:c> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:t> /\ <var:c> = <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 