\begin{document} \begin{theorem} Consider the following series of commands as follows \begin{verbatim} <var:N1> := <var:b> ; <var:N2> := <var:N1> * <var:b> ; <var:N3> := <var:N2> * <var:b> ; <var:N4> := <var:N3> * <var:b> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:9> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:7> ; <var:N4> := <var:N4> * <nat:3> ; <var:O> := <var:N4> <var:O> := <var:O> + <var:N3> <var:O> := <var:O> + <var:N2> <var:O> := <var:O> + <var:N1> <var:O> := <var:O> + <var:N0> \end{verbatim} Allowing it to hold that $ <var:b> = <var:F> $ prior to executing this code then we see $ <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be given through typical Hoare techniques . Further , the variable assignmet statement \verb | <var:N1> := <var:b> ; | . This statement transfers the precondition $ \{ <var:b> = <var:F> \} $ to $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \} $ . Looking at the following step contained in the series of instructions , the variable update code \verb | <var:N2> := <var:N1> * <var:b> ; | . This takes $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \} $ as the postcondition $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \land <var:N2> = <var:F> ^ <nat:2> \} $ . Shifting focus toward the proceeding line of code seen in the program , we have the statement \verb | <var:N3> := <var:N2> * <var:b> ; | . This code moves the precondition $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \land <var:N2> = <var:F> ^ <nat:2> \} $ toward $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \land <var:N2> = <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \} $ . This is given by the assignment inference rule found in Hoare techniques . Paying attention to the proceeding command seen in the code , we have the line defining $ <var:N3> * <var:b> $ to $ <var:N4>$ . This command advances the condition $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \land <var:N2> = <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \} $ to $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \land <var:N2> = <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \} $ . This is sound with the assignment inference rule obtained from typical Hoare reasoning . Stepping through , the binding command defining $ <nat:5> $ into $ <var:N0>$ . This takes $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \land <var:N2> = <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \} $ into $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \land <var:N2> = <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ . Keeping momentum , the variable assignmet code \verb | <var:N1> := <var:N1> * <nat:9> ; | . This code forwards the condition $ \{ <var:b> = <var:F> \land <var:N1> = <var:F> \land <var:N2> = <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ toward the postcondition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ . This is sound with the assignment law given by typical Hoare reasoning . Moving forward to the upcoming command contained in the series of commands , we see the binding line \verb | <var:N2> := <var:N2> * <nat:7> ; | . This code moves the precondition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ toward the condition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ . Taking another step toward the subsequent line of code seen in our segment of code , we see the binding line \verb | <var:N3> := <var:N3> * <nat:7> ; | . This advances $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N3> = <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ into the condition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N3> = <nat:7> * <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ . This is deduced using the assignment inference rule defined in standard Hoare reasoning . Moving on to the next statement seen in the segment of code , we have the code \verb | <var:N4> := <var:N4> * <nat:3> ; | . This statement redefines the precondition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N3> = <nat:7> * <var:F> ^ <nat:3> \land <var:N4> = <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ to the condition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N3> = <nat:7> * <var:F> ^ <nat:3> \land <var:N4> = <nat:3> * <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ . This is rigorously given by the assignment rule found in typical Hoare reasoning . Immediately after , the binding statement yielding $ <var:N4$ as $ <var:O>$ . This moves the condition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N3> = <nat:7> * <var:F> ^ <nat:3> \land <var:N4> = <nat:3> * <var:F> ^ <nat:4> \land <var:N0> = <nat:5> \} $ toward the postcondition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N3> = <nat:7> * <var:F> ^ <nat:3> \land <var:N0> = <nat:5> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> \} $ . Looking at the subsequent piece of code in our series of commands , the binding line \verb | <var:O> := <var:O> + <var:N3> | . This takes the condition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N3> = <nat:7> * <var:F> ^ <nat:3> \land <var:N0> = <nat:5> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> \} $ as $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N0> = <nat:5> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> \} $ . This is deduced using the assignment scheme defined by standard Hoare logic . Going to the next step , we have the binding line binding $ <var:O> + <var:N2$ into $ <var:O>$ . This transfers the precondition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N2> = <nat:7> * <var:F> ^ <nat:2> \land <var:N0> = <nat:5> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> \} $ into the postcondition $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N0> = <nat:5> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> \} $ . This is known to be sound by the assignment law given by Hoare logic . Moving on , we see the code letting $ <var:O> + <var:N1$ to $ <var:O>$ . This line redefines $ \{ <var:b> = <var:F> \land <var:N1> = <nat:9> * <var:F> \land <var:N0> = <nat:5> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> \} $ as the postcondition $ \{ <var:b> = <var:F> \land <var:N0> = <nat:5> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> \} $ . Advancing on , the variable assignmet command \verb | <var:O> := <var:O> + <var:N0> | . This takes the condition $ \{ <var:b> = <var:F> \land <var:N0> = <nat:5> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> \} $ as the postcondition $ \{ <var:b> = <var:F> \land <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:b> = <var:F> }} <var:N1> := <var:b> ; <var:N2> := <var:N1> * <var:b> ; <var:N3> := <var:N2> * <var:b> ; <var:N4> := <var:N3> * <var:b> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:9> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:7> ; <var:N4> := <var:N4> * <nat:3> ; <var:O> := <var:N4> <var:O> := <var:O> + <var:N3> <var:O> := <var:O> + <var:N2> <var:O> := <var:O> + <var:N1> <var:O> := <var:O> + <var:N0> {{ <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <var:F> /\ <var:N2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <var:F> /\ <var:N2> = <var:F> ^ <nat:2> /\ <var:N3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <var:F> /\ <var:N2> = <var:F> ^ <nat:2> /\ <var:N3> = <var:F> ^ <nat:3> /\ <var:N4> = <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <var:F> /\ <var:N2> = <var:F> ^ <nat:2> /\ <var:N3> = <var:F> ^ <nat:3> /\ <var:N4> = <var:F> ^ <nat:4> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <nat:9> * <var:F> /\ <var:N2> = <var:F> ^ <nat:2> /\ <var:N3> = <var:F> ^ <nat:3> /\ <var:N4> = <var:F> ^ <nat:4> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <nat:9> * <var:F> /\ <var:N2> = <nat:7> * <var:F> ^ <nat:2> /\ <var:N3> = <var:F> ^ <nat:3> /\ <var:N4> = <var:F> ^ <nat:4> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <nat:9> * <var:F> /\ <var:N2> = <nat:7> * <var:F> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:F> ^ <nat:3> /\ <var:N4> = <var:F> ^ <nat:4> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <nat:9> * <var:F> /\ <var:N2> = <nat:7> * <var:F> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:F> ^ <nat:3> /\ <var:N4> = <nat:3> * <var:F> ^ <nat:4> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <nat:9> * <var:F> /\ <var:N2> = <nat:7> * <var:F> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:F> ^ <nat:3> /\ <var:N0> = <nat:5> /\ <var:O> = <nat:3> * <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <nat:9> * <var:F> /\ <var:N2> = <nat:7> * <var:F> ^ <nat:2> /\ <var:N0> = <nat:5> /\ <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N1> = <nat:9> * <var:F> /\ <var:N0> = <nat:5> /\ <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:N0> = <nat:5> /\ <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:F> /\ <var:O> = <nat:3> * <var:F> ^ <nat:4> + <nat:7> * <var:F> ^ <nat:3> + <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 