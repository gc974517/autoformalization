\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:f> ; <var:P2> := <var:P1> * <var:f> ; <var:P3> := <var:P2> * <var:f> ; <var:P4> := <var:P3> * <var:f> ; <var:P0> := <nat:6> ; <var:P1> := <var:P1> * <nat:3> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:8> ; <var:P4> := <var:P4> * <nat:6> ; <var:A> := <var:P4> <var:A> := <var:A> + <var:P3> <var:A> := <var:A> + <var:P2> <var:A> := <var:A> + <var:P1> <var:A> := <var:A> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:f> = <var:d> $ prior to interpreting this list of commands it holds that we see $ <var:A> = <nat:6> \cdot <var:d> ^ <nat:4> + <nat:8> \cdot <var:d> ^ <nat:3> + <nat:5> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:6> $ once series of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be accomplished with typical Hoare reasoning . Going forward , \verb | { <var:f> = <var:d> } <var:P1> := <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> } | . This is ensured by the binding law defined by standard Hoare reasoning . Moving forward to the upcoming commands seen in our series of commands , \verb | { <var:f> = <var:d> } <var:P1> := <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> } | , \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> } <var:P2> := <var:P1> * <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> } | , \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> } <var:P3> := <var:P2> * <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> } | , \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> } <var:P4> := <var:P3> * <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> \land <var:P4> = <var:d> ^ <nat:4> } | , \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> \land <var:P4> = <var:d> ^ <nat:4> } <var:P0> := <nat:6> { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> \land <var:P4> = <var:d> ^ <nat:4> \land <var:P0> = <nat:6> } | and \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> \land <var:P4> = <var:d> ^ <nat:4> \land <var:P0> = <nat:6> } <var:P1> := <var:P1> * <nat:3> { <var:f> = <var:d> \land <var:P1> = <nat:3> \times <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> \land <var:P4> = <var:d> ^ <nat:4> \land <var:P0> = <nat:6> } | . Looking at the following lines of codein the code segment , we have \verb | { <var:f> = <var:d> } <var:P1> := <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> } | , \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> } <var:P2> := <var:P1> * <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> } | , \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> } <var:P3> := <var:P2> * <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> } | and \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> } <var:P4> := <var:P3> * <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> \land <var:P3> = <var:d> ^ <nat:3> \land <var:P4> = <var:d> ^ <nat:4> } | . Moving on to the next step , \verb | { <var:f> = <var:d> } <var:P1> := <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> } | and \verb | { <var:f> = <var:d> \land <var:P1> = <var:d> } <var:P2> := <var:P1> * <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> \land <var:P2> = <var:d> ^ <nat:2> } | . Advancing to the following piece of code in our code segment , \verb | { <var:f> = <var:d> } <var:P1> := <var:f> { <var:f> = <var:d> \land <var:P1> = <var:d> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Definition <def:poly> := <var:P1> := <var:f> ; <var:P2> := <var:P1> * <var:f> ; <var:P3> := <var:P2> * <var:f> ; <var:P4> := <var:P3> * <var:f> ; <var:P0> := <nat:6> ; <var:P1> := <var:P1> * <nat:3> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:8> ; <var:P4> := <var:P4> * <nat:6> ; <var:A> := <var:P4> <var:A> := <var:A> + <var:P3> <var:A> := <var:A> + <var:P2> <var:A> := <var:A> + <var:P1> <var:A> := <var:A> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:f> = <var:d> }} <def:poly> {{ <var:A> = <nat:6> * <var:d> ^ <nat:4> + <nat:8> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <var:d> /\ <var:P2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <var:d> /\ <var:P2> = <var:d> ^ <nat:2> /\ <var:P3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <var:d> /\ <var:P2> = <var:d> ^ <nat:2> /\ <var:P3> = <var:d> ^ <nat:3> /\ <var:P4> = <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <var:d> /\ <var:P2> = <var:d> ^ <nat:2> /\ <var:P3> = <var:d> ^ <nat:3> /\ <var:P4> = <var:d> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <nat:3> * <var:d> /\ <var:P2> = <var:d> ^ <nat:2> /\ <var:P3> = <var:d> ^ <nat:3> /\ <var:P4> = <var:d> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <nat:3> * <var:d> /\ <var:P2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:P3> = <var:d> ^ <nat:3> /\ <var:P4> = <var:d> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <nat:3> * <var:d> /\ <var:P2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:d> ^ <nat:3> /\ <var:P4> = <var:d> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <nat:3> * <var:d> /\ <var:P2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:d> ^ <nat:3> /\ <var:P4> = <nat:6> * <var:d> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <nat:3> * <var:d> /\ <var:P2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:d> ^ <nat:3> /\ <var:P0> = <nat:6> /\ <var:A> = <nat:6> * <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <nat:3> * <var:d> /\ <var:P2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:P0> = <nat:6> /\ <var:A> = <nat:6> * <var:d> ^ <nat:4> + <nat:8> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P1> = <nat:3> * <var:d> /\ <var:P0> = <nat:6> /\ <var:A> = <nat:6> * <var:d> ^ <nat:4> + <nat:8> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:P0> = <nat:6> /\ <var:A> = <nat:6> * <var:d> ^ <nat:4> + <nat:8> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:A> = <nat:6> * <var:d> ^ <nat:4> + <nat:8> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 