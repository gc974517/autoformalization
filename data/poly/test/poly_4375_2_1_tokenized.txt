\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:1> ; <var:E> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:h> = <var:F> $ , given any $ <var:F> \in \mathbb{N} $ , ahead of executing our series of instructions , then we have $ <var:E> = <nat:1> $ after series of instructions exits . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning yields : \begin{eqnarray} \{ <var:h> = <var:F> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:h> = <var:F> \land <var:g0> = <nat:1> \} \\ <var:E> := <var:g0> \\ \{ <var:h> = <var:F> \land <var:E> = <nat:1> \} \end{eqnarray} Given the preceding argument , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:1> ; <var:E> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:h> = <var:F> }} <def:poly> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 