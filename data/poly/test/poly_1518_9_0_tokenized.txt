\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:3> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:z> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:z> ; <var:k2> := <var:k2> * <var:z> ; <var:t> := <var:k2> ; <var:t> := <var:t> + <var:k1> ; <var:t> := <var:t> + <var:k0> \end{verbatim} Allowing assuming some $ <var:T> \in \mathbb{Z}^+ $ it to hold that $ <var:z> = <var:T> $ before executing this code segment it holds that $ <var:t> = <nat:5> \times <var:T> ^ <nat:2> + <nat:7> \times <var:T> + <nat:3> $ after list of commands has exited . \end{theorem} \begin{proof} The application of Hoare techniques produces : \begin{eqnarray} \{ <var:z> = <var:T> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:z> = <var:T> \land <var:k0> = <nat:3> \} \\ <var:k1> := <nat:7> ; \\ \{ <var:z> = <var:T> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \} \\ <var:k1> := <var:k1> * <var:z> ; \\ \{ <var:z> = <var:T> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \times <var:T> \} \\ <var:k2> := <nat:5> ; \\ \{ <var:z> = <var:T> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \times <var:T> \land <var:k2> = <nat:5> \} \\ <var:k2> := <var:k2> * <var:z> ; \\ \{ <var:z> = <var:T> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \times <var:T> \land <var:k2> = <nat:5> \times <var:T> \} \\ <var:k2> := <var:k2> * <var:z> ; \\ \{ <var:z> = <var:T> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \times <var:T> \land <var:k2> = <nat:5> \times <var:T> ^ <nat:2> \} \\ <var:t> := <var:k2> ; \\ \{ <var:z> = <var:T> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \times <var:T> \land <var:t> = <nat:5> \times <var:T> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:k1> ; \\ \{ <var:z> = <var:T> \land <var:k0> = <nat:3> \land <var:t> = <nat:5> \times <var:T> ^ <nat:2> + <nat:7> \times <var:T> \} \\ <var:t> := <var:t> + <var:k0> \\ \{ <var:z> = <var:T> \land <var:t> = <nat:5> \times <var:T> ^ <nat:2> + <nat:7> \times <var:T> + <nat:3> \} \end{eqnarray} Hence , the set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:z> = <var:T> }} <var:k0> := <nat:3> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:z> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:z> ; <var:k2> := <var:k2> * <var:z> ; <var:t> := <var:k2> ; <var:t> := <var:t> + <var:k1> ; <var:t> := <var:t> + <var:k0> {{ <var:t> = <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:7> * <var:T> /\ <var:k2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:7> * <var:T> /\ <var:k2> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:7> * <var:T> /\ <var:k2> = <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:7> * <var:T> /\ <var:t> = <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:k0> = <nat:3> /\ <var:t> = <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:t> = <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 