\begin{document} \begin{theorem} Define the following list of instructions : \begin{verbatim} <var:f0> := <nat:7> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:u> ; <var:k> := <var:f1> ; <var:k> := <var:k> + <var:f0> \end{verbatim} Allowing --- for natural coefficients $ <var:b> $ --- that $ <var:u> = <var:b> $ before running the list of commands then we have $ <var:k> = <nat:2> \cdot <var:b> + <nat:7> $ when set of instructions executes . \end{theorem} \begin{proof} Applying Hoare techniques gives us : \begin{eqnarray} \{ <var:u> = <var:b> \} \\ <var:f0> := <nat:7> ; \\ \{ <var:u> = <var:b> \land <var:f0> = <nat:7> \} \\ <var:f1> := <nat:2> ; \\ \{ <var:u> = <var:b> \land <var:f0> = <nat:7> \land <var:f1> = <nat:2> \} \\ <var:f1> := <var:f1> * <var:u> ; \\ \{ <var:u> = <var:b> \land <var:f0> = <nat:7> \land <var:f1> = <nat:2> \cdot <var:b> \} \\ <var:k> := <var:f1> ; \\ \{ <var:u> = <var:b> \land <var:f0> = <nat:7> \land <var:k> = <nat:2> \cdot <var:b> \} \\ <var:k> := <var:k> + <var:f0> \\ \{ <var:u> = <var:b> \land <var:k> = <nat:2> \cdot <var:b> + <nat:7> \} \end{eqnarray} Thus , this code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:u> = <var:b> }} <var:f0> := <nat:7> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:u> ; <var:k> := <var:f1> ; <var:k> := <var:k> + <var:f0> {{ <var:k> = <nat:2> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:f0> = <nat:7> /\ <var:k> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:k> = <nat:2> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 