\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:v> ; <var:u2> := <var:u1> * <var:v> ; <var:u3> := <var:u2> * <var:v> ; <var:u4> := <var:u3> * <var:v> ; <var:u0> := <nat:5> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:6> ; <var:u3> := <var:u3> * <nat:9> ; <var:u4> := <var:u4> * <nat:7> ; <var:H> := <var:u4> <var:H> := <var:H> + <var:u3> <var:H> := <var:H> + <var:u2> <var:H> := <var:H> + <var:u1> <var:H> := <var:H> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Assume that $ <var:v> = <var:l> $ --- for natural numbers $ <var:l> $ --- ahead of evaluating this program it must be that we have $ <var:H> = <nat:7> \times <var:l> ^ <nat:4> + <nat:9> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:9> \times <var:l> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for the program is accomplished using Hoare logic . Advancing to the following line contained in the program , the variable update statement binding $ <var:v> $ toward $ <var:u1>$ . This advances $ \{ <var:v> = <var:l> \} $ to the postcondition $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \} $ . This is rigorously given by the assignment inference rule of usual Hoare techniques . Going forward , the assignment command yielding $ <var:u1> * <var:v> $ toward $ <var:u2>$ . This advances the condition $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \} $ as $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \} $ . Immediately after , we have the environment update line letting $ <var:u2> * <var:v> $ toward $ <var:u3>$ . This code forwards the condition $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \} $ as $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \} $ . Advancing , we have the variable assignmet code yielding $ <var:u3> * <var:v> $ as $ <var:u4>$ . This code redefines the condition $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \} $ toward the condition $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \} $ . Honing in on the proceeding piece of code contained in the segment of code , the variable binding command defining $ <nat:5> $ as $ <var:u0>$ . This redefines the precondition $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \} $ as $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ . This is deduced with the assignment inference rule in typical Hoare logic . Moving forward , the variable assignmet line binding $ <var:u1> * <nat:9> $ as $ <var:u1>$ . This command transfers $ \{ <var:v> = <var:l> \land <var:u1> = <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ into $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ . Moving forward to the next step , we see the statement \verb | <var:u2> := <var:u2> * <nat:6> ; | . This line takes the precondition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ toward the postcondition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ . Moving forward to the proceeding command found in the series of commands , we have the assignment statement assigning $ <var:u3> * <nat:9> $ into $ <var:u3>$ . This command forwards the precondition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u3> = <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ into $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u3> = <nat:9> * <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ . This is shown through the assignment inference rule from Hoare techniques . Moving forward to the upcoming step seen in the list of instructions , we see the variable assignmet code assigning $ <var:u4> * <nat:7> $ into $ <var:u4>$ . This line takes the precondition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u3> = <nat:9> * <var:l> ^ <nat:3> \land <var:u4> = <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ as $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u3> = <nat:9> * <var:l> ^ <nat:3> \land <var:u4> = <nat:7> * <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ . Going forward , the environment update line yielding $ <var:u4$ into $ <var:H>$ . This line forwards $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u3> = <nat:9> * <var:l> ^ <nat:3> \land <var:u4> = <nat:7> * <var:l> ^ <nat:4> \land <var:u0> = <nat:5> \} $ into the condition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u3> = <nat:9> * <var:l> ^ <nat:3> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> \} $ . This is given through the assignment law given in standard Hoare reasoning . Moving forward to the upcoming step found in the set of instructions , we have the statement \verb | <var:H> := <var:H> + <var:u3> | . This statement takes $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u3> = <nat:9> * <var:l> ^ <nat:3> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> \} $ as the postcondition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> \} $ . This is known to be sound using the assignment law defined by usual Hoare techniques . Moving on to the next step , we have the binding line \verb | <var:H> := <var:H> + <var:u2> | . This transfers the condition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u2> = <nat:6> * <var:l> ^ <nat:2> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> \} $ to the postcondition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> \} $ . This is shown using the assignment law from typical Hoare techniques . Moving forward , we see the line binding $ <var:H> + <var:u1$ to $ <var:H>$ . This moves the condition $ \{ <var:v> = <var:l> \land <var:u1> = <nat:9> * <var:l> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> \} $ as the postcondition $ \{ <var:v> = <var:l> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:9> * <var:l> \} $ . After , we see the variable update command \verb | <var:H> := <var:H> + <var:u0> | . This redefines $ \{ <var:v> = <var:l> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:9> * <var:l> \} $ into $ \{ <var:v> = <var:l> \land <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:5> \} $ . This is guaranteed with the assignment inference rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Definition <def:poly> := <var:u1> := <var:v> ; <var:u2> := <var:u1> * <var:v> ; <var:u3> := <var:u2> * <var:v> ; <var:u4> := <var:u3> * <var:v> ; <var:u0> := <nat:5> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:6> ; <var:u3> := <var:u3> * <nat:9> ; <var:u4> := <var:u4> * <nat:7> ; <var:H> := <var:u4> <var:H> := <var:H> + <var:u3> <var:H> := <var:H> + <var:u2> <var:H> := <var:H> + <var:u1> <var:H> := <var:H> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <def:poly> {{ <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <nat:9> * <var:l> /\ <var:u2> = <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <nat:9> * <var:l> /\ <var:u2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:u3> = <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <nat:9> * <var:l> /\ <var:u2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:u3> = <nat:9> * <var:l> ^ <nat:3> /\ <var:u4> = <var:l> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <nat:9> * <var:l> /\ <var:u2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:u3> = <nat:9> * <var:l> ^ <nat:3> /\ <var:u4> = <nat:7> * <var:l> ^ <nat:4> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <nat:9> * <var:l> /\ <var:u2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:u3> = <nat:9> * <var:l> ^ <nat:3> /\ <var:u0> = <nat:5> /\ <var:H> = <nat:7> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <nat:9> * <var:l> /\ <var:u2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:u0> = <nat:5> /\ <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u1> = <nat:9> * <var:l> /\ <var:u0> = <nat:5> /\ <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:u0> = <nat:5> /\ <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:H> = <nat:7> * <var:l> ^ <nat:4> + <nat:9> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 