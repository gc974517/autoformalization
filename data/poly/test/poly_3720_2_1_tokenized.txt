\begin{document} \begin{theorem} We define a list of commands as \begin{verbatim} <var:k0> := <nat:2> ; <var:N> := <var:k0> \end{verbatim} Given that we have $ <var:n> = <var:j> $ before evaluating the program , it must be that $ <var:N> = <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this program is evident by usual Hoare techniques . Shifting focus toward the upcoming line of code contained in our program , the statement \verb | <var:k0> := <nat:2> ; | . This command takes $ \{ <var:n> = <var:j> \} $ toward $ \{ <var:n> = <var:j> \land <var:k0> = <nat:2> \} $ . This is given with the assignment inference rule obtained from Hoare reasoning . Going forward , the variable binding code \verb | <var:N> := <var:k0> | . This redefines the condition $ \{ <var:n> = <var:j> \land <var:k0> = <nat:2> \} $ into the postcondition $ \{ <var:n> = <var:j> \land <var:N> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:n> = <var:j> }} <var:k0> := <nat:2> ; <var:N> := <var:k0> {{ <var:N> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:N> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 