\begin{document} \begin{theorem} We define the following code as \begin{verbatim} <var:B1> := <var:t> ; <var:B2> := <var:B1> * <var:t> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:4> ; <var:n> := <var:B2> <var:n> := <var:n> + <var:B1> <var:n> := <var:n> + <var:B0> \end{verbatim} Allowing ( taking whole numbers $ <var:r> $ ) it to hold that $ <var:t> = <var:r> $ ahead of running this program , it follows that we have $ <var:n> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:2> $ . \end{theorem} \begin{proof} We can see that this decorated set of instructions . \begin{eqnarray} \{ <var:t> = <var:r> \} \\ <var:B1> := <var:t> ; \\ \{ <var:t> = <var:r> \land <var:B1> = <var:r> \} \\ <var:B2> := <var:B1> * <var:t> ; \\ \{ <var:t> = <var:r> \land <var:B1> = <var:r> \land <var:B2> = <var:r> ^ <nat:2> \} \\ <var:B0> := <nat:2> ; \\ \{ <var:t> = <var:r> \land <var:B1> = <var:r> \land <var:B2> = <var:r> ^ <nat:2> \land <var:B0> = <nat:2> \} \\ <var:B1> := <var:B1> * <nat:2> ; \\ \{ <var:t> = <var:r> \land <var:B1> = <nat:2> \cdot <var:r> \land <var:B2> = <var:r> ^ <nat:2> \land <var:B0> = <nat:2> \} \\ <var:B2> := <var:B2> * <nat:4> ; \\ \{ <var:t> = <var:r> \land <var:B1> = <nat:2> \cdot <var:r> \land <var:B2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:B0> = <nat:2> \} \\ <var:n> := <var:B2> \\ \{ <var:t> = <var:r> \land <var:B1> = <nat:2> \cdot <var:r> \land <var:B0> = <nat:2> \land <var:n> = <nat:4> \cdot <var:r> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:B1> \\ \{ <var:t> = <var:r> \land <var:B0> = <nat:2> \land <var:n> = <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> \} \\ <var:n> := <var:n> + <var:B0> \\ \{ <var:t> = <var:r> \land <var:n> = <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:2> \} \end{eqnarray} The application of typical Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:t> = <var:r> }} <var:B1> := <var:t> ; <var:B2> := <var:B1> * <var:t> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:4> ; <var:n> := <var:B2> <var:n> := <var:n> + <var:B1> <var:n> := <var:n> + <var:B0> {{ <var:n> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:B1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:B1> = <var:r> /\ <var:B2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:B1> = <var:r> /\ <var:B2> = <var:r> ^ <nat:2> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:B1> = <nat:2> * <var:r> /\ <var:B2> = <var:r> ^ <nat:2> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:B1> = <nat:2> * <var:r> /\ <var:B2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:B1> = <nat:2> * <var:r> /\ <var:B0> = <nat:2> /\ <var:n> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:B0> = <nat:2> /\ <var:n> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:n> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 