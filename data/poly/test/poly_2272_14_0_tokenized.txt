\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:o0> := <nat:5> ; <var:o1> := <nat:2> ; <var:o1> := <var:o1> * <var:r> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:r> ; <var:o2> := <var:o2> * <var:r> ; <var:o3> := <nat:8> ; <var:o3> := <var:o3> * <var:r> ; <var:o3> := <var:o3> * <var:r> ; <var:o3> := <var:o3> * <var:r> ; <var:N> := <var:o3> ; <var:N> := <var:N> + <var:o2> ; <var:N> := <var:N> + <var:o1> ; <var:N> := <var:N> + <var:o0> \end{verbatim} Assuming $ <var:r> = <var:g> $ before interpreting the series of instructions it holds that we see $ <var:N> = <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:r> = <var:g> \} \\ <var:o0> := <nat:5> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \} \\ <var:o1> := <nat:2> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \} \\ <var:o1> := <var:o1> * <var:r> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \} \\ <var:o2> := <nat:9> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:o2> = <nat:9> \} \\ <var:o2> := <var:o2> * <var:r> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:o2> = <nat:9> \times <var:g> \} \\ <var:o2> := <var:o2> * <var:r> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:o2> = <nat:9> \times <var:g> ^ <nat:2> \} \\ <var:o3> := <nat:8> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:o2> = <nat:9> \times <var:g> ^ <nat:2> \land <var:o3> = <nat:8> \} \\ <var:o3> := <var:o3> * <var:r> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:o2> = <nat:9> \times <var:g> ^ <nat:2> \land <var:o3> = <nat:8> \times <var:g> \} \\ <var:o3> := <var:o3> * <var:r> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:o2> = <nat:9> \times <var:g> ^ <nat:2> \land <var:o3> = <nat:8> \times <var:g> ^ <nat:2> \} \\ <var:o3> := <var:o3> * <var:r> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:o2> = <nat:9> \times <var:g> ^ <nat:2> \land <var:o3> = <nat:8> \times <var:g> ^ <nat:3> \} \\ <var:N> := <var:o3> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:o2> = <nat:9> \times <var:g> ^ <nat:2> \land <var:N> = <nat:8> \times <var:g> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:o2> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:o1> = <nat:2> \times <var:g> \land <var:N> = <nat:8> \times <var:g> ^ <nat:3> + <nat:9> \times <var:g> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:o1> ; \\ \{ <var:r> = <var:g> \land <var:o0> = <nat:5> \land <var:N> = <nat:8> \times <var:g> ^ <nat:3> + <nat:9> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> \} \\ <var:N> := <var:N> + <var:o0> \\ \{ <var:r> = <var:g> \land <var:N> = <nat:8> \times <var:g> ^ <nat:3> + <nat:9> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:5> \} \end{eqnarray} Thusly , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:r> = <var:g> }} <var:o0> := <nat:5> ; <var:o1> := <nat:2> ; <var:o1> := <var:o1> * <var:r> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:r> ; <var:o2> := <var:o2> * <var:r> ; <var:o3> := <nat:8> ; <var:o3> := <var:o3> * <var:r> ; <var:o3> := <var:o3> * <var:r> ; <var:o3> := <var:o3> * <var:r> ; <var:N> := <var:o3> ; <var:N> := <var:N> + <var:o2> ; <var:N> := <var:N> + <var:o1> ; <var:N> := <var:N> + <var:o0> {{ <var:N> = <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:o2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:o2> = <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:o2> = <nat:9> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:o2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:o3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:o2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:o3> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:o2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:o3> = <nat:8> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:o2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:o3> = <nat:8> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:o2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:N> = <nat:8> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:2> * <var:g> /\ <var:N> = <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:o0> = <nat:5> /\ <var:N> = <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> + <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:N> = <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 