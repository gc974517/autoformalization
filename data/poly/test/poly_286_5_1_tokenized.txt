\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:G1> := <var:W> ; <var:G0> := <nat:5> ; <var:G1> := <var:G1> * <nat:2> ; <var:r> := <var:G1> <var:r> := <var:r> + <var:G0> \end{verbatim} Assuming it to be that $ <var:W> = <var:b> $ ( for every integers $ <var:b> $ ) ahead of interpreting the set of commands , it holds that we have $ <var:r> = <nat:2> * <var:b> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the code can be given using typical Hoare reasoning . Jumping to the next step in our set of instructions , the variable assignmet command assigning $ <var:W> $ toward $ <var:G1>$ . This line forwards the precondition $ \{ <var:W> = <var:b> \} $ to the condition $ \{ <var:W> = <var:b> \land <var:G1> = <var:b> \} $ . Advancing on , the environment update line \verb | <var:G0> := <nat:5> ; | . This redefines $ \{ <var:W> = <var:b> \land <var:G1> = <var:b> \} $ into the postcondition $ \{ <var:W> = <var:b> \land <var:G1> = <var:b> \land <var:G0> = <nat:5> \} $ . This is deduced with the assignment inference rule obtained from usual Hoare reasoning . Advancing on , the variable binding code binding $ <var:G1> * <nat:2> $ as $ <var:G1>$ . This code takes the condition $ \{ <var:W> = <var:b> \land <var:G1> = <var:b> \land <var:G0> = <nat:5> \} $ to the condition $ \{ <var:W> = <var:b> \land <var:G1> = <nat:2> \times <var:b> \land <var:G0> = <nat:5> \} $ . This is sound by the assignment scheme given in usual Hoare reasoning . Keeping momentum , the variable binding line \verb | <var:r> := <var:G1> | . This command forwards $ \{ <var:W> = <var:b> \land <var:G1> = <nat:2> \times <var:b> \land <var:G0> = <nat:5> \} $ to $ \{ <var:W> = <var:b> \land <var:G0> = <nat:5> \land <var:r> = <nat:2> \times <var:b> \} $ . This is sound through the assignment scheme found in Hoare techniques . Taking a look at the subsequent bit of code found in our list of commands , the variable update statement giving $ <var:r> + <var:G0$ toward $ <var:r>$ . This code redefines $ \{ <var:W> = <var:b> \land <var:G0> = <nat:5> \land <var:r> = <nat:2> \times <var:b> \} $ to the condition $ \{ <var:W> = <var:b> \land <var:r> = <nat:2> \times <var:b> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:W> = <var:b> }} <var:G1> := <var:W> ; <var:G0> := <nat:5> ; <var:G1> := <var:G1> * <nat:2> ; <var:r> := <var:G1> <var:r> := <var:r> + <var:G0> {{ <var:r> = <nat:2> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:b> /\ <var:G1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:b> /\ <var:G1> = <var:b> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:b> /\ <var:G1> = <nat:2> * <var:b> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:b> /\ <var:G0> = <nat:5> /\ <var:r> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:b> /\ <var:r> = <nat:2> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 