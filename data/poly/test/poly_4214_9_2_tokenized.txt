\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:1> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:j> = <var:G> $ ( taking natural numbers $ <var:G> $ ) ahead of executing our segment of code , it holds that $ <var:l> = <nat:1> \times <var:G> ^ <nat:8> + <nat:2> \times <var:G> ^ <nat:7> + <nat:2> \times <var:G> ^ <nat:5> + <nat:2> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> + <nat:3> $ after list of instructions has finished executing . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:j> = <var:G> \} \\ <var:l> := <nat:1> ; \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \} \\ <var:l> := <nat:2> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \times <var:G> + <nat:2> \} \\ <var:l> := <var:l> * <var:j> ; \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + \} \\ <var:l> := <nat:2> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:2> \} \\ <var:l> := <var:l> * <var:j> ; \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> + \} \\ <var:l> := <nat:2> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \times <var:G> ^ <nat:5> + <nat:2> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:2> + <nat:2> \} \\ <var:l> := <var:l> * <var:j> ; \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \times <var:G> ^ <nat:6> + <nat:2> \times <var:G> ^ <nat:5> + <nat:2> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> + \} \\ <var:l> := <nat:2> + <var:l> * <var:j> ; \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \times <var:G> ^ <nat:7> + <nat:2> \times <var:G> ^ <nat:6> + <nat:2> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:2> + <nat:2> \} \\ <var:l> := <nat:3> + <var:l> * <var:j> \\ \{ <var:j> = <var:G> \land <var:l> = <nat:1> \times <var:G> ^ <nat:8> + <nat:2> \times <var:G> ^ <nat:7> + <nat:2> \times <var:G> ^ <nat:5> + <nat:2> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:1> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <var:l> * <var:j> ; <var:l> := <nat:2> + <var:l> * <var:j> ; <var:l> := <nat:3> + <var:l> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:j> = <var:G> }} <def:poly> {{ <var:l> = <nat:1> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:l> = <nat:1> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 