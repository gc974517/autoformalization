\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q> := <nat:2> ; <var:Q> := <nat:2> + <var:Q> * <var:d> ; <var:Q> := <nat:1> + <var:Q> * <var:d> ; <var:Q> := <nat:3> + <var:Q> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:d> = <var:O> $ prior to running the list of instructions it must be that we see $ <var:Q> = <nat:2> \times <var:O> ^ <nat:3> + <nat:2> \times <var:O> ^ <nat:2> + <nat:1> \times <var:O> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this list of commands can be demonstrated using usual Hoare techniques . Further , we see \begin{eqnarray} \{ <var:d> = <var:O> \} \, <var:Q> := <nat:2> \, \{ <var:d> = <var:O> \land <var:Q> = <nat:2> \} \\ \{ <var:d> = <var:O> \land <var:Q> = <nat:2> \} \, <var:Q> := <nat:2> + <var:Q> * <var:d> \, \{ <var:d> = <var:O> \land <var:Q> = <nat:2> * <var:O> + <nat:2> \} \\ \{ <var:d> = <var:O> \land <var:Q> = <nat:2> * <var:O> + <nat:2> \} \, <var:Q> := <nat:1> + <var:Q> * <var:d> \, \{ <var:d> = <var:O> \land <var:Q> = <nat:2> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> \} \\ \{ <var:d> = <var:O> \land <var:Q> = <nat:2> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> \} \, <var:Q> := <nat:3> + <var:Q> * <var:d\, \{ <var:d> = <var:O> \land <var:Q> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:2> ; <var:Q> := <nat:2> + <var:Q> * <var:d> ; <var:Q> := <nat:1> + <var:Q> * <var:d> ; <var:Q> := <nat:3> + <var:Q> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:d> = <var:O> }} <def:poly> {{ <var:Q> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:Q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:Q> = <nat:2> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:Q> = <nat:2> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:Q> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 