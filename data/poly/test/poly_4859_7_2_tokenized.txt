\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:s> := <nat:1> ; <var:s> := <nat:3> + <var:s> * <var:P> ; <var:s> := <var:s> * <var:P> ; <var:s> := <nat:2> + <var:s> * <var:P> ; <var:s> := <nat:3> + <var:s> * <var:P> ; <var:s> := <nat:1> + <var:s> * <var:P> ; <var:s> := <nat:3> + <var:s> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:P> = <var:R> $ prior to interpreting the program , it holds that we see $ <var:s> = <nat:1> \cdot <var:R> ^ <nat:6> + <nat:3> \cdot <var:R> ^ <nat:5> + <nat:2> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:3> $ when series of instructions executes . \end{theorem} \begin{proof} Proving correctness for this program is clear using usual Hoare reasoning . Moving onward , we see \begin{eqnarray} \{ <var:P> = <var:R> \} \, <var:s> := <nat:1> \, \{ <var:P> = <var:R> \land <var:s> = <nat:1> \} \\ \{ <var:P> = <var:R> \land <var:s> = <nat:1> \} \, <var:s> := <nat:3> + <var:s> * <var:P> \, \{ <var:P> = <var:R> \land <var:s> = <nat:1> \cdot <var:R> + <nat:3> \} \\ \{ <var:P> = <var:R> \land <var:s> = <nat:1> \cdot <var:R> + <nat:3> \} \, <var:s> := <var:s> * <var:P> \, \{ <var:P> = <var:R> \land <var:s> = <nat:1> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + \} \\ \{ <var:P> = <var:R> \land <var:s> = <nat:1> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + \} \, <var:s> := <nat:2> + <var:s> * <var:P> \, \{ <var:P> = <var:R> \land <var:s> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:2> \} \\ \{ <var:P> = <var:R> \land <var:s> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:2> \} \, <var:s> := <nat:3> + <var:s> * <var:P> \, \{ <var:P> = <var:R> \land <var:s> = <nat:1> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> + <nat:3> \} \end{eqnarray} This is ensured through the binding law given in usual Hoare techniques . Considering the next bits of codecontained in the code segment , \begin{eqnarray} \{ <var:P> = <var:R> \} \, <var:s> := <nat:1> \, \{ <var:P> = <var:R> \land <var:s> = <nat:1> \} \\ \{ <var:P> = <var:R> \land <var:s> = <nat:1> \} \, <var:s> := <nat:3> + <var:s> * <var:P> \, \{ <var:P> = <var:R> \land <var:s> = <nat:1> \cdot <var:R> + <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:1> ; <var:s> := <nat:3> + <var:s> * <var:P> ; <var:s> := <var:s> * <var:P> ; <var:s> := <nat:2> + <var:s> * <var:P> ; <var:s> := <nat:3> + <var:s> * <var:P> ; <var:s> := <nat:1> + <var:s> * <var:P> ; <var:s> := <nat:3> + <var:s> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:P> = <var:R> }} <def:poly> {{ <var:s> = <nat:1> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:s> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:s> = <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:s> = <nat:1> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 