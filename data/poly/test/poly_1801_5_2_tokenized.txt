\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} such that \begin{verbatim} <var:g> := <nat:3> ; <var:g> := <nat:4> + <var:g> * <var:O> ; <var:g> := <nat:3> + <var:g> * <var:O> ; <var:g> := <nat:4> + <var:g> * <var:O> ; <var:g> := <nat:4> + <var:g> * <var:O> \end{verbatim} Assuming $ <var:O> = <var:x> $ , assuming some positive integers $ <var:x> $ , ahead of the evaluation of this list of commands , it holds that $ <var:g> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is evident through typical Hoare techniques . Stepping through , we see the environment update code \verb | <var:g> := <nat:3> ; | . This statement redefines the condition $ \{ <var:O> = <var:x> \} $ into $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> \} $ . This is known to be sound through the assignment rule in typical Hoare logic . Keeping momentum , we see the variable update code \verb | <var:g> := <nat:4> + <var:g> * <var:O> ; | . This redefines the condition $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> \} $ into the condition $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> * <var:x> + <nat:4> \} $ . Stepping forward , we see the variable assignmet command \verb | <var:g> := <nat:3> + <var:g> * <var:O> ; | . This line redefines the precondition $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> * <var:x> + <nat:4> \} $ toward the postcondition $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> \} $ . Next , we have the variable assignmet command letting $ <nat:4> + <var:g> * <var:O> $ into $ <var:g>$ . This statement advances $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> \} $ as $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> \} $ . Moving forward to the subsequent command seen in the code , we see the code binding $ <nat:4> + <var:g> * <var:O$ as $ <var:g>$ . This forwards the precondition $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> \} $ toward the condition $ \{ <var:O> = <var:x> \land <var:g> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> \} $ . This is ensured through the assignment law defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:O> = <var:x> }} <var:g> := <nat:3> ; <var:g> := <nat:4> + <var:g> * <var:O> ; <var:g> := <nat:3> + <var:g> * <var:O> ; <var:g> := <nat:4> + <var:g> * <var:O> ; <var:g> := <nat:4> + <var:g> * <var:O> {{ <var:g> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:g> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:g> = <nat:3> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:g> = <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:g> = <nat:3> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:g> = <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 