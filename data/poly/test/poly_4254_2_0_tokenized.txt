\begin{document} \begin{theorem} Let the following code such that \begin{verbatim} <var:Q0> := <nat:6> ; <var:n> := <var:Q0> \end{verbatim} Assuming it to hold that $ <var:V> = <var:T> $ , for all positive coefficients $ <var:T> $ , prior to evaluating the program it holds that we have $ <var:n> = <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:V> = <var:T> \} \\ <var:Q0> := <nat:6> ; \\ \{ <var:V> = <var:T> \land <var:Q0> = <nat:6> \} \\ <var:n> := <var:Q0> \\ \{ <var:V> = <var:T> \land <var:n> = <nat:6> \} \end{eqnarray} As a consequence , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:V> = <var:T> }} <var:Q0> := <nat:6> ; <var:n> := <var:Q0> {{ <var:n> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:n> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 