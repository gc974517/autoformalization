\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v> := <nat:3> ; <var:v> := <nat:1> + <var:v> * <var:o> ; <var:v> := <nat:3> + <var:v> * <var:o> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:o> = <var:U> $ before executing our segment of code it follows that we see $ <var:v> = <nat:3> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:3> $ . \end{theorem} \begin{proof} Let the following decorated list of instructions . \begin{eqnarray} \{ <var:o> = <var:U> \} \\ <var:v> := <nat:3> ; \\ \{ <var:o> = <var:U> \land <var:v> = <nat:3> \} \\ <var:v> := <nat:1> + <var:v> * <var:o> ; \\ \{ <var:o> = <var:U> \land <var:v> = <nat:3> * <var:U> + <nat:1> \} \\ <var:v> := <nat:3> + <var:v> * <var:o> \\ \{ <var:o> = <var:U> \land <var:v> = <nat:3> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:3> ; <var:v> := <nat:1> + <var:v> * <var:o> ; <var:v> := <nat:3> + <var:v> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:o> = <var:U> }} <def:poly> {{ <var:v> = <nat:3> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:v> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:v> = <nat:3> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:v> = <nat:3> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 