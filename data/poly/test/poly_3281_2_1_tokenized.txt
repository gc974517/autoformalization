\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:1> ; <var:N> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:v> = <var:g> $ given all natural numbers $ <var:g> $ prior to interpreting our set of instructions , it holds that $ <var:N> = <nat:1> $ once code has terminated . \end{theorem} \begin{proof} The method of proof for the code segment can be shown by standard Hoare techniques . Moving on to the next lines in the segment of code , we have \begin{eqnarray} \{ <var:v> = <var:g> \} \, <var:e0> := <nat:1> \, \{ <var:v> = <var:g> \land <var:e0> = <nat:1> \} \\ \{ <var:v> = <var:g> \land <var:e0> = <nat:1> \} \, <var:N> := <var:e0\, \{ <var:v> = <var:g> \land <var:N> = <nat:1> \} \end{eqnarray} This is given using the binding law in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:1> ; <var:N> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:v> = <var:g> }} <def:poly> {{ <var:N> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:N> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 