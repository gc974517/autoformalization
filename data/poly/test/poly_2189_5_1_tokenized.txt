\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:E> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:7> ; <var:c> := <var:r1> <var:c> := <var:c> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:E> = <var:d> $ before the execution of our set of commands , then $ <var:c> = <nat:7> * <var:d> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands is shown by usual Hoare logic . Moving forward , we have the binding command letting $ <var:E> $ as $ <var:r1>$ . This line forwards the precondition $ \{ <var:E> = <var:d> \} $ to the condition $ \{ <var:E> = <var:d> \land <var:r1> = <var:d> \} $ . Advancing to the next step , we have the variable update command \verb | <var:r0> := <nat:1> ; | . This command advances the condition $ \{ <var:E> = <var:d> \land <var:r1> = <var:d> \} $ as $ \{ <var:E> = <var:d> \land <var:r1> = <var:d> \land <var:r0> = <nat:1> \} $ . This is ensured with the assignment law in Hoare reasoning . Moving on , the assignment line defining $ <var:r1> * <nat:7> $ as $ <var:r1>$ . This statement takes the condition $ \{ <var:E> = <var:d> \land <var:r1> = <var:d> \land <var:r0> = <nat:1> \} $ as the postcondition $ \{ <var:E> = <var:d> \land <var:r1> = <nat:7> * <var:d> \land <var:r0> = <nat:1> \} $ . Now , the assignment line yielding $ <var:r1$ to $ <var:c>$ . This forwards the condition $ \{ <var:E> = <var:d> \land <var:r1> = <nat:7> * <var:d> \land <var:r0> = <nat:1> \} $ toward the postcondition $ \{ <var:E> = <var:d> \land <var:r0> = <nat:1> \land <var:c> = <nat:7> * <var:d> \} $ . This is sound with the assignment law given by Hoare techniques . Honing in on the following statement contained in our code segment , we see the assignment statement letting $ <var:c> + <var:r0$ to $ <var:c>$ . This code forwards the condition $ \{ <var:E> = <var:d> \land <var:r0> = <nat:1> \land <var:c> = <nat:7> * <var:d> \} $ as the postcondition $ \{ <var:E> = <var:d> \land <var:c> = <nat:7> * <var:d> + <nat:1> \} $ . This is deduced through the assignment law given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:E> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:7> ; <var:c> := <var:r1> <var:c> := <var:c> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:E> = <var:d> }} <def:poly> {{ <var:c> = <nat:7> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:r1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:r1> = <var:d> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:r1> = <nat:7> * <var:d> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:r0> = <nat:1> /\ <var:c> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:c> = <nat:7> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 