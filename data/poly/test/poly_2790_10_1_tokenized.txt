\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:J1> := <var:z> ; <var:J2> := <var:J1> * <var:z> ; <var:J3> := <var:J2> * <var:z> ; <var:J4> := <var:J3> * <var:z> ; <var:J0> := <nat:2> ; <var:J2> := <var:J2> * <nat:3> ; <var:J4> := <var:J4> * <nat:1> ; <var:A> := <var:J4> <var:A> := <var:A> + <var:J2> <var:A> := <var:A> + <var:J0> \end{verbatim} Given $ <var:z> = <var:h> $ before interpreting our code segment it follows that $ <var:A> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives : \begin{eqnarray} \{ <var:z> = <var:h> \} \\ <var:J1> := <var:z> ; \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \} \\ <var:J2> := <var:J1> * <var:z> ; \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \land <var:J2> = <var:h> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:z> ; \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \land <var:J2> = <var:h> ^ <nat:2> \land <var:J3> = <var:h> ^ <nat:3> \} \\ <var:J4> := <var:J3> * <var:z> ; \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \land <var:J2> = <var:h> ^ <nat:2> \land <var:J3> = <var:h> ^ <nat:3> \land <var:J4> = <var:h> ^ <nat:4> \} \\ <var:J0> := <nat:2> ; \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \land <var:J2> = <var:h> ^ <nat:2> \land <var:J3> = <var:h> ^ <nat:3> \land <var:J4> = <var:h> ^ <nat:4> \land <var:J0> = <nat:2> \} \\ <var:J2> := <var:J2> * <nat:3> ; \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \land <var:J2> = <nat:3> * <var:h> ^ <nat:2> \land <var:J3> = <var:h> ^ <nat:3> \land <var:J4> = <var:h> ^ <nat:4> \land <var:J0> = <nat:2> \} \\ <var:J4> := <var:J4> * <nat:1> ; \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \land <var:J2> = <nat:3> * <var:h> ^ <nat:2> \land <var:J3> = <var:h> ^ <nat:3> \land <var:J4> = <nat:1> * <var:h> ^ <nat:4> \land <var:J0> = <nat:2> \} \\ <var:A> := <var:J4> \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \land <var:J2> = <nat:3> * <var:h> ^ <nat:2> \land <var:J3> = <var:h> ^ <nat:3> \land <var:J0> = <nat:2> \land <var:A> = <nat:1> * <var:h> ^ <nat:4> \} \\ <var:A> := <var:A> + <var:J2> \\ \{ <var:z> = <var:h> \land <var:J1> = <var:h> \land <var:J0> = <nat:2> \land <var:A> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:J0> \\ \{ <var:z> = <var:h> \land <var:A> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> \} \end{eqnarray} Thusly , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:z> = <var:h> }} <var:J1> := <var:z> ; <var:J2> := <var:J1> * <var:z> ; <var:J3> := <var:J2> * <var:z> ; <var:J4> := <var:J3> * <var:z> ; <var:J0> := <nat:2> ; <var:J2> := <var:J2> * <nat:3> ; <var:J4> := <var:J4> * <nat:1> ; <var:A> := <var:J4> <var:A> := <var:A> + <var:J2> <var:A> := <var:A> + <var:J0> {{ <var:A> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> /\ <var:J2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> /\ <var:J2> = <var:h> ^ <nat:2> /\ <var:J3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> /\ <var:J2> = <var:h> ^ <nat:2> /\ <var:J3> = <var:h> ^ <nat:3> /\ <var:J4> = <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> /\ <var:J2> = <var:h> ^ <nat:2> /\ <var:J3> = <var:h> ^ <nat:3> /\ <var:J4> = <var:h> ^ <nat:4> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> /\ <var:J2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:J3> = <var:h> ^ <nat:3> /\ <var:J4> = <var:h> ^ <nat:4> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> /\ <var:J2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:J3> = <var:h> ^ <nat:3> /\ <var:J4> = <nat:1> * <var:h> ^ <nat:4> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> /\ <var:J2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:J3> = <var:h> ^ <nat:3> /\ <var:J0> = <nat:2> /\ <var:A> = <nat:1> * <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:J1> = <var:h> /\ <var:J0> = <nat:2> /\ <var:A> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:A> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 