\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:f> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:4> ; <var:Y> := <var:L1> <var:Y> := <var:Y> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assuming given some whole numbers $ <var:p> $ it to hold that $ <var:f> = <var:p> $ before the execution of our series of commands it follows that we see $ <var:Y> = <nat:4> \cdot <var:p> + <nat:4> $ once list of instructions exits . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:f> = <var:p> \} \\ <var:L1> := <var:f> ; \\ \{ <var:f> = <var:p> \land <var:L1> = <var:p> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:f> = <var:p> \land <var:L1> = <var:p> \land <var:L0> = <nat:4> \} \\ <var:L1> := <var:L1> * <nat:4> ; \\ \{ <var:f> = <var:p> \land <var:L1> = <nat:4> * <var:p> \land <var:L0> = <nat:4> \} \\ <var:Y> := <var:L1> \\ \{ <var:f> = <var:p> \land <var:L0> = <nat:4> \land <var:Y> = <nat:4> * <var:p> \} \\ <var:Y> := <var:Y> + <var:L0> \\ \{ <var:f> = <var:p> \land <var:Y> = <nat:4> * <var:p> + <nat:4> \} \end{eqnarray} Given the preceding argument , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L1> := <var:f> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:4> ; <var:Y> := <var:L1> <var:Y> := <var:Y> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:f> = <var:p> }} <def:poly> {{ <var:Y> = <nat:4> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:L1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:L1> = <var:p> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:L1> = <nat:4> * <var:p> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:L0> = <nat:4> /\ <var:Y> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:Y> = <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 