\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:x> ; <var:d2> := <var:d1> * <var:x> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:8> ; <var:d2> := <var:d2> * <nat:3> ; <var:k> := <var:d2> <var:k> := <var:k> + <var:d1> <var:k> := <var:k> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:x> = <var:Y> $ , for any positive integers $ <var:Y> $ , ahead of the execution of the set of instructions it holds that $ <var:k> = <nat:3> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:5> $ once list of instructions is done executing . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is accomplished through Hoare techniques . Honing in on the following pieces of code contained in the code , we have \begin{eqnarray} \{ <var:x> = <var:Y> \} \, <var:d1> := <var:x> \, \{ <var:x> = <var:Y> \land <var:d1> = <var:Y> \} \\ \{ <var:x> = <var:Y> \land <var:d1> = <var:Y> \} \, <var:d2> := <var:d1> * <var:x> \, \{ <var:x> = <var:Y> \land <var:d1> = <var:Y> \land <var:d2> = <var:Y> ^ <nat:2> \} \\ \{ <var:x> = <var:Y> \land <var:d1> = <var:Y> \land <var:d2> = <var:Y> ^ <nat:2> \} \, <var:d0> := <nat:5> \, \{ <var:x> = <var:Y> \land <var:d1> = <var:Y> \land <var:d2> = <var:Y> ^ <nat:2> \land <var:d0> = <nat:5> \} \\ \{ <var:x> = <var:Y> \land <var:d1> = <var:Y> \land <var:d2> = <var:Y> ^ <nat:2> \land <var:d0> = <nat:5> \} \, <var:d1> := <var:d1> * <nat:8> \, \{ <var:x> = <var:Y> \land <var:d1> = <nat:8> \cdot <var:Y> \land <var:d2> = <var:Y> ^ <nat:2> \land <var:d0> = <nat:5> \} \\ \{ <var:x> = <var:Y> \land <var:d1> = <nat:8> \cdot <var:Y> \land <var:d2> = <var:Y> ^ <nat:2> \land <var:d0> = <nat:5> \} \, <var:d2> := <var:d2> * <nat:3> \, \{ <var:x> = <var:Y> \land <var:d1> = <nat:8> \cdot <var:Y> \land <var:d2> = <nat:3> \cdot <var:Y> ^ <nat:2> \land <var:d0> = <nat:5> \} \\ \{ <var:x> = <var:Y> \land <var:d1> = <nat:8> \cdot <var:Y> \land <var:d2> = <nat:3> \cdot <var:Y> ^ <nat:2> \land <var:d0> = <nat:5> \} \, <var:k> := <var:d2\, \{ <var:x> = <var:Y> \land <var:d1> = <nat:8> \cdot <var:Y> \land <var:d0> = <nat:5> \land <var:k> = <nat:3> \cdot <var:Y> ^ <nat:2> \} \\ \{ <var:x> = <var:Y> \land <var:d1> = <nat:8> \cdot <var:Y> \land <var:d0> = <nat:5> \land <var:k> = <nat:3> \cdot <var:Y> ^ <nat:2> \} \, <var:k> := <var:k> + <var:d1\, \{ <var:x> = <var:Y> \land <var:d0> = <nat:5> \land <var:k> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:8> \cdot <var:Y> \} \\ \{ <var:x> = <var:Y> \land <var:d0> = <nat:5> \land <var:k> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:8> \cdot <var:Y> \} \, <var:k> := <var:k> + <var:d0\, \{ <var:x> = <var:Y> \land <var:k> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:8> \cdot <var:Y> + <nat:5> \} \end{eqnarray} This is shown through the assignment inference rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d1> := <var:x> ; <var:d2> := <var:d1> * <var:x> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:8> ; <var:d2> := <var:d2> * <nat:3> ; <var:k> := <var:d2> <var:k> := <var:k> + <var:d1> <var:k> := <var:k> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:x> = <var:Y> }} <def:poly> {{ <var:k> = <nat:3> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:d1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:d1> = <var:Y> /\ <var:d2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:d1> = <var:Y> /\ <var:d2> = <var:Y> ^ <nat:2> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:d1> = <nat:8> * <var:Y> /\ <var:d2> = <var:Y> ^ <nat:2> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:d1> = <nat:8> * <var:Y> /\ <var:d2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:d1> = <nat:8> * <var:Y> /\ <var:d0> = <nat:5> /\ <var:k> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:d0> = <nat:5> /\ <var:k> = <nat:3> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:k> = <nat:3> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 