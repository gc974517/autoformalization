\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:1> ; <var:e> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:M> = <var:R> $ ahead of the evaluation of the code , it holds that we see $ <var:e> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is evident using standard Hoare reasoning . Immediately following , we have the assignment line \verb | <var:C0> := <nat:1> ; | . This redefines the precondition $ \{ <var:M> = <var:R> \} $ toward the postcondition $ \{ <var:M> = <var:R> \land <var:C0> = <nat:1> \} $ . This is sound by the assignment rule obtained from Hoare techniques . Moving on to the upcoming step seen in the series of instructions , we see the environment update statement binding $ <var:C0$ to $ <var:e>$ . This code transfers $ \{ <var:M> = <var:R> \land <var:C0> = <nat:1> \} $ to the postcondition $ \{ <var:M> = <var:R> \land <var:e> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:1> ; <var:e> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:M> = <var:R> }} <def:poly> {{ <var:e> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:e> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 