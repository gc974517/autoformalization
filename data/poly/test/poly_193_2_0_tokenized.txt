\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:4> ; <var:w> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:h> = <var:n> $ before the evaluation of our series of instructions then we see $ <var:w> = <nat:4> $ once set of commands exits . \end{theorem} \begin{proof} The application of usual Hoare logic gives : \begin{eqnarray} \{ <var:h> = <var:n> \} \\ <var:v0> := <nat:4> ; \\ \{ <var:h> = <var:n> \land <var:v0> = <nat:4> \} \\ <var:w> := <var:v0> \\ \{ <var:h> = <var:n> \land <var:w> = <nat:4> \} \end{eqnarray} Hence , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:w> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:h> = <var:n> }} <def:poly> {{ <var:w> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:w> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 