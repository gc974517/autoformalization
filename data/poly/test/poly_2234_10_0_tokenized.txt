\begin{document} \begin{theorem} Define a program in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:9> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:I> ; <var:p3> := <nat:9> ; <var:p3> := <var:p3> * <var:I> ; <var:p3> := <var:p3> * <var:I> ; <var:p3> := <var:p3> * <var:I> ; <var:Z> := <var:p3> ; <var:Z> := <var:Z> + <var:p1> ; <var:Z> := <var:Z> + <var:p0> \end{verbatim} Allowing --- given every $ <var:e> \in \mathbb{N} $ --- that $ <var:I> = <var:e> $ ahead of running this code , then we see $ <var:Z> = <nat:9> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be seen using Hoare techniques . Immediately following , we see the variable assignmet line \verb | <var:p0> := <nat:9> ; | . This code transfers the condition $ \{ <var:I> = <var:e> \} $ into $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \} $ . Honing in on the following bit of code in the set of instructions , the environment update code letting $ <nat:1> $ toward $ <var:p1>$ . This command transfers $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \} $ as the condition $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \} $ . Immediately after , we see the environment update statement assigning $ <var:p1> * <var:I> $ into $ <var:p1>$ . This redefines the precondition $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \} $ to $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \} $ . This is guaranteed by the assignment inference rule found in typical Hoare techniques . Moving on , the binding code binding $ <nat:9> $ into $ <var:p3>$ . This line moves $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \} $ toward the condition $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:p3> = <nat:9> \} $ . This is given through the assignment law from typical Hoare techniques . Paying attention to the next line of code in our segment of code , we see the binding command assigning $ <var:p3> * <var:I> $ into $ <var:p3>$ . This transfers the precondition $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:p3> = <nat:9> \} $ toward the condition $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:p3> = <nat:9> \times <var:e> \} $ . Keeping momentum , we have the assignment line yielding $ <var:p3> * <var:I> $ toward $ <var:p3>$ . This code forwards $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:p3> = <nat:9> \times <var:e> \} $ toward the condition $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:p3> = <nat:9> \times <var:e> ^ <nat:2> \} $ . This is rigorously given using the assignment rule defined by typical Hoare reasoning . Looking at the proceeding statement contained in our list of commands , we see the binding command \verb | <var:p3> := <var:p3> * <var:I> ; | . This redefines $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:p3> = <nat:9> \times <var:e> ^ <nat:2> \} $ into $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:p3> = <nat:9> \times <var:e> ^ <nat:3> \} $ . Focusing on the subsequent step in the program , the code assigning $ <var:p3> $ as $ <var:Z>$ . This takes $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:p3> = <nat:9> \times <var:e> ^ <nat:3> \} $ to $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:Z> = <nat:9> \times <var:e> ^ <nat:3> \} $ . Following , the variable update line \verb | <var:Z> := <var:Z> + <var:p1> ; | . This code advances the condition $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:p1> = <nat:1> \times <var:e> \land <var:Z> = <nat:9> \times <var:e> ^ <nat:3> \} $ as the condition $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:Z> = <nat:9> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> \} $ . This is rigorously given through the assignment rule from typical Hoare techniques . Immediately following , we see the variable assignmet line assigning $ <var:Z> + <var:p0$ into $ <var:Z>$ . This forwards $ \{ <var:I> = <var:e> \land <var:p0> = <nat:9> \land <var:Z> = <nat:9> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> \} $ to the condition $ \{ <var:I> = <var:e> \land <var:Z> = <nat:9> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> + <nat:9> \} $ . This is known to be sound by the assignment inference rule of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:I> = <var:e> }} <var:p0> := <nat:9> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:I> ; <var:p3> := <nat:9> ; <var:p3> := <var:p3> * <var:I> ; <var:p3> := <var:p3> * <var:I> ; <var:p3> := <var:p3> * <var:I> ; <var:Z> := <var:p3> ; <var:Z> := <var:Z> + <var:p1> ; <var:Z> := <var:Z> + <var:p0> {{ <var:Z> = <nat:9> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:1> * <var:e> /\ <var:p3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:1> * <var:e> /\ <var:p3> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:1> * <var:e> /\ <var:p3> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:1> * <var:e> /\ <var:p3> = <nat:9> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:1> * <var:e> /\ <var:Z> = <nat:9> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:p0> = <nat:9> /\ <var:Z> = <nat:9> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:Z> = <nat:9> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 