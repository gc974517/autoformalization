\begin{document} \begin{theorem} Take a code as follows \begin{verbatim} <var:e1> := <var:L> ; <var:e2> := <var:e1> * <var:L> ; <var:e3> := <var:e2> * <var:L> ; <var:e4> := <var:e3> * <var:L> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:1> ; <var:e2> := <var:e2> * <nat:3> ; <var:e3> := <var:e3> * <nat:1> ; <var:e4> := <var:e4> * <nat:2> ; <var:B> := <var:e4> <var:B> := <var:B> + <var:e3> <var:B> := <var:B> + <var:e2> <var:B> := <var:B> + <var:e1> <var:B> := <var:B> + <var:e0> \end{verbatim} Assume that $ <var:L> = <var:M> $ prior to the execution of the code , it follows that we see $ <var:B> = <nat:2> \cdot <var:M> ^ <nat:4> + <nat:1> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this code segment is shown using Hoare reasoning . Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:M> \} & <var:e1> := <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \} & <var:e2> := <var:e1> * <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \} & <var:e3> := <var:e2> * <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \} & <var:e4> := <var:e3> * <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \} & <var:e0> := <nat:4> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \land <var:e0> = <nat:4> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \land <var:e0> = <nat:4> \} & <var:e1> := <var:e1> * <nat:1> & \{ <var:L> = <var:M> \land <var:e1> = <nat:1> * <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \land <var:e0> = <nat:4> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <nat:1> * <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \land <var:e0> = <nat:4> \} & <var:e2> := <var:e2> * <nat:3> & \{ <var:L> = <var:M> \land <var:e1> = <nat:1> * <var:M> \land <var:e2> = <nat:3> * <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \land <var:e0> = <nat:4> \} \end{tabular} Next , \[ \begin{tabular} {rcl} \{ <var:L> = <var:M> \} & <var:e1> := <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \} & <var:e2> := <var:e1> * <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \} & <var:e3> := <var:e2> * <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \} & <var:e4> := <var:e3> * <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \} & <var:e0> := <nat:4> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \land <var:e3> = <var:M> ^ <nat:3> \land <var:e4> = <var:M> ^ <nat:4> \land <var:e0> = <nat:4> \} \end{tabular} This is shown to be logically sound with the binding law defined in Hoare reasoning . Next , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:M> \} & <var:e1> := <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \} \\ \{ <var:L> = <var:M> \land <var:e1> = <var:M> \} & <var:e2> := <var:e1> * <var:L> & \{ <var:L> = <var:M> \land <var:e1> = <var:M> \land <var:e2> = <var:M> ^ <nat:2> \} \end{tabular} This is shown by the binding law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <var:e4> : string := " <var:e4> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <var:e1> := <var:L> ; <var:e2> := <var:e1> * <var:L> ; <var:e3> := <var:e2> * <var:L> ; <var:e4> := <var:e3> * <var:L> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:1> ; <var:e2> := <var:e2> * <nat:3> ; <var:e3> := <var:e3> * <nat:1> ; <var:e4> := <var:e4> * <nat:2> ; <var:B> := <var:e4> <var:B> := <var:B> + <var:e3> <var:B> := <var:B> + <var:e2> <var:B> := <var:B> + <var:e1> <var:B> := <var:B> + <var:e0> {{ <var:B> = <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <var:M> /\ <var:e2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <var:M> /\ <var:e2> = <var:M> ^ <nat:2> /\ <var:e3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <var:M> /\ <var:e2> = <var:M> ^ <nat:2> /\ <var:e3> = <var:M> ^ <nat:3> /\ <var:e4> = <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <var:M> /\ <var:e2> = <var:M> ^ <nat:2> /\ <var:e3> = <var:M> ^ <nat:3> /\ <var:e4> = <var:M> ^ <nat:4> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <nat:1> * <var:M> /\ <var:e2> = <var:M> ^ <nat:2> /\ <var:e3> = <var:M> ^ <nat:3> /\ <var:e4> = <var:M> ^ <nat:4> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <nat:1> * <var:M> /\ <var:e2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:e3> = <var:M> ^ <nat:3> /\ <var:e4> = <var:M> ^ <nat:4> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <nat:1> * <var:M> /\ <var:e2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:M> ^ <nat:3> /\ <var:e4> = <var:M> ^ <nat:4> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <nat:1> * <var:M> /\ <var:e2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:M> ^ <nat:3> /\ <var:e4> = <nat:2> * <var:M> ^ <nat:4> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <nat:1> * <var:M> /\ <var:e2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:M> ^ <nat:3> /\ <var:e0> = <nat:4> /\ <var:B> = <nat:2> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <nat:1> * <var:M> /\ <var:e2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:e0> = <nat:4> /\ <var:B> = <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e1> = <nat:1> * <var:M> /\ <var:e0> = <nat:4> /\ <var:B> = <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:e0> = <nat:4> /\ <var:B> = <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:B> = <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 