\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:2> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:L> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:L> ; <var:m2> := <var:m2> * <var:L> ; <var:H> := <var:m2> ; <var:H> := <var:H> + <var:m1> ; <var:H> := <var:H> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Given ( for positive integer coefficients $ <var:h> $ ) it to be that $ <var:L> = <var:h> $ ahead of executing the segment of code , then we see $ <var:H> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be seen with the following decorated series of instructions . \begin{eqnarray} \{ <var:L> = <var:h> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:L> = <var:h> \land <var:m0> = <nat:2> \} \\ <var:m1> := <nat:2> ; \\ \{ <var:L> = <var:h> \land <var:m0> = <nat:2> \land <var:m1> = <nat:2> \} \\ <var:m1> := <var:m1> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:m0> = <nat:2> \land <var:m1> = <nat:2> \times <var:h> \} \\ <var:m2> := <nat:3> ; \\ \{ <var:L> = <var:h> \land <var:m0> = <nat:2> \land <var:m1> = <nat:2> \times <var:h> \land <var:m2> = <nat:3> \} \\ <var:m2> := <var:m2> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:m0> = <nat:2> \land <var:m1> = <nat:2> \times <var:h> \land <var:m2> = <nat:3> \times <var:h> \} \\ <var:m2> := <var:m2> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:m0> = <nat:2> \land <var:m1> = <nat:2> \times <var:h> \land <var:m2> = <nat:3> \times <var:h> ^ <nat:2> \} \\ <var:H> := <var:m2> ; \\ \{ <var:L> = <var:h> \land <var:m0> = <nat:2> \land <var:m1> = <nat:2> \times <var:h> \land <var:H> = <nat:3> \times <var:h> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:m1> ; \\ \{ <var:L> = <var:h> \land <var:m0> = <nat:2> \land <var:H> = <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} \\ <var:H> := <var:H> + <var:m0> \\ \{ <var:L> = <var:h> \land <var:H> = <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:2> \} \end{eqnarray} Applying typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:L> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:L> ; <var:m2> := <var:m2> * <var:L> ; <var:H> := <var:m2> ; <var:H> := <var:H> + <var:m1> ; <var:H> := <var:H> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:L> = <var:h> }} <def:poly> {{ <var:H> = <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:2> * <var:h> /\ <var:m2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:2> * <var:h> /\ <var:m2> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:2> * <var:h> /\ <var:m2> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:2> * <var:h> /\ <var:H> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m0> = <nat:2> /\ <var:H> = <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:H> = <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 