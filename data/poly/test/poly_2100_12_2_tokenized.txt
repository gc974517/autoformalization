\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:Z> := <nat:3> ; <var:Z> := <nat:3> + <var:Z> * <var:l> ; <var:Z> := <var:Z> * <var:l> ; <var:Z> := <nat:2> + <var:Z> * <var:l> ; <var:Z> := <nat:2> + <var:Z> * <var:l> ; <var:Z> := <nat:1> + <var:Z> * <var:l> ; <var:Z> := <nat:4> + <var:Z> * <var:l> ; <var:Z> := <var:Z> * <var:l> ; <var:Z> := <var:Z> * <var:l> ; <var:Z> := <nat:2> + <var:Z> * <var:l> ; <var:Z> := <nat:1> + <var:Z> * <var:l> ; <var:Z> := <nat:4> + <var:Z> * <var:l> \end{verbatim} Assuming $ <var:l> = <var:u> $ ( assuming some positive integer coefficients $ <var:u> $ ) prior to the evaluation of the series of instructions , it must be that we have $ <var:Z> = <nat:3> * <var:u> ^ <nat:11> + <nat:3> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> $ once code terminates . \end{theorem} \begin{proof} The way to prove correctness for this program is done through standard Hoare techniques . Stepping through , \[ \begin{tabular} {rcl} \{ <var:l> = <var:u> \} & <var:Z> := <nat:3> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \} & <var:Z> := <nat:3> + <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> + <nat:3> \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> + <nat:3> \} & <var:Z> := <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + \} & <var:Z> := <nat:2> + <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \} & <var:Z> := <nat:2> + <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> + <nat:2> \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> + <nat:2> \} & <var:Z> := <nat:1> + <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:5> + <nat:3> \times <var:u> ^ <nat:4> + <nat:2> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:1> \} \end{tabular} This is known to be sound by the assignment rule in usual Hoare techniques . Moving forward to the next statements seen in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:u> \} & <var:Z> := <nat:3> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \} & <var:Z> := <nat:3> + <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> + <nat:3> \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> + <nat:3> \} & <var:Z> := <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + \} & <var:Z> := <nat:2> + <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \} & <var:Z> := <nat:2> + <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> + <nat:2> \} \\ \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> + <nat:2> \} & <var:Z> := <nat:1> + <var:Z> * <var:l> & \{ <var:l> = <var:u> \land <var:Z> = <nat:3> \times <var:u> ^ <nat:5> + <nat:3> \times <var:u> ^ <nat:4> + <nat:2> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:l> = <var:u> }} <var:Z> := <nat:3> ; <var:Z> := <nat:3> + <var:Z> * <var:l> ; <var:Z> := <var:Z> * <var:l> ; <var:Z> := <nat:2> + <var:Z> * <var:l> ; <var:Z> := <nat:2> + <var:Z> * <var:l> ; <var:Z> := <nat:1> + <var:Z> * <var:l> ; <var:Z> := <nat:4> + <var:Z> * <var:l> ; <var:Z> := <var:Z> * <var:l> ; <var:Z> := <var:Z> * <var:l> ; <var:Z> := <nat:2> + <var:Z> * <var:l> ; <var:Z> := <nat:1> + <var:Z> * <var:l> ; <var:Z> := <nat:4> + <var:Z> * <var:l> {{ <var:Z> = <nat:3> * <var:u> ^ <nat:11> + <nat:3> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:5> + <nat:3> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:6> + <nat:3> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:7> + <nat:3> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:8> + <nat:3> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:9> + <nat:3> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:10> + <nat:3> * <var:u> ^ <nat:9> + <nat:2> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:Z> = <nat:3> * <var:u> ^ <nat:11> + <nat:3> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 