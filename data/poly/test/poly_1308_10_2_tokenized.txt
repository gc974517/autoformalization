\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:2> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:1> + <var:e> * <var:m> ; <var:e> := <nat:3> + <var:e> * <var:m> ; <var:e> := <nat:1> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:3> + <var:e> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> . Assuming it to be that $ <var:m> = <var:F> $ prior to the evaluation of this set of instructions , it must be that $ <var:e> = <nat:3> \cdot <var:F> ^ <nat:9> + <nat:2> \cdot <var:F> ^ <nat:8> + <nat:4> \cdot <var:F> ^ <nat:7> + <nat:4> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:3> $ once set of instructions terminates . \end{theorem} \begin{proof} The flow of logic for our code segment can be done with the below decorated series of instructions . \begin{eqnarray} \{ <var:m> = <var:F> \} \\ <var:e> := <nat:3> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> \} \\ <var:e> := <nat:2> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> + <nat:2> \} \\ <var:e> := <nat:4> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> \} \\ <var:e> := <nat:4> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> \} \\ <var:e> := <nat:1> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> \} \\ <var:e> := <nat:3> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:3> \} \\ <var:e> := <nat:1> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> \} \\ <var:e> := <nat:4> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> \} \\ <var:e> := <nat:4> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> \} \\ <var:e> := <nat:3> + <var:e> * <var:m> \\ \{ <var:m> = <var:F> \land <var:e> = <nat:3> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <nat:2> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:1> + <var:e> * <var:m> ; <var:e> := <nat:3> + <var:e> * <var:m> ; <var:e> := <nat:1> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:3> + <var:e> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:m> = <var:F> }} <def:poly> {{ <var:e> = <nat:3> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:e> = <nat:3> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 