\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:A> ; <var:o2> := <var:o1> * <var:A> ; <var:o3> := <var:o2> * <var:A> ; <var:o0> := <nat:1> ; <var:o2> := <var:o2> * <nat:4> ; <var:o3> := <var:o3> * <nat:3> ; <var:z> := <var:o3> <var:z> := <var:z> + <var:o2> <var:z> := <var:z> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Given ( given positive integers $ <var:m> $ ) it to be that $ <var:A> = <var:m> $ prior to executing this set of commands it holds that we have $ <var:z> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives : \begin{eqnarray} \{ <var:A> = <var:m> \} \\ <var:o1> := <var:A> ; \\ \{ <var:A> = <var:m> \land <var:o1> = <var:m> \} \\ <var:o2> := <var:o1> * <var:A> ; \\ \{ <var:A> = <var:m> \land <var:o1> = <var:m> \land <var:o2> = <var:m> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:A> ; \\ \{ <var:A> = <var:m> \land <var:o1> = <var:m> \land <var:o2> = <var:m> ^ <nat:2> \land <var:o3> = <var:m> ^ <nat:3> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:A> = <var:m> \land <var:o1> = <var:m> \land <var:o2> = <var:m> ^ <nat:2> \land <var:o3> = <var:m> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o2> := <var:o2> * <nat:4> ; \\ \{ <var:A> = <var:m> \land <var:o1> = <var:m> \land <var:o2> = <nat:4> * <var:m> ^ <nat:2> \land <var:o3> = <var:m> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o3> := <var:o3> * <nat:3> ; \\ \{ <var:A> = <var:m> \land <var:o1> = <var:m> \land <var:o2> = <nat:4> * <var:m> ^ <nat:2> \land <var:o3> = <nat:3> * <var:m> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:z> := <var:o3> \\ \{ <var:A> = <var:m> \land <var:o1> = <var:m> \land <var:o2> = <nat:4> * <var:m> ^ <nat:2> \land <var:o0> = <nat:1> \land <var:z> = <nat:3> * <var:m> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:o2> \\ \{ <var:A> = <var:m> \land <var:o1> = <var:m> \land <var:o0> = <nat:1> \land <var:z> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:o0> \\ \{ <var:A> = <var:m> \land <var:z> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> \} \end{eqnarray} As a result , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:A> ; <var:o2> := <var:o1> * <var:A> ; <var:o3> := <var:o2> * <var:A> ; <var:o0> := <nat:1> ; <var:o2> := <var:o2> * <nat:4> ; <var:o3> := <var:o3> * <nat:3> ; <var:z> := <var:o3> <var:z> := <var:z> + <var:o2> <var:z> := <var:z> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:A> = <var:m> }} <def:poly> {{ <var:z> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:o1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:o1> = <var:m> /\ <var:o2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:o1> = <var:m> /\ <var:o2> = <var:m> ^ <nat:2> /\ <var:o3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:o1> = <var:m> /\ <var:o2> = <var:m> ^ <nat:2> /\ <var:o3> = <var:m> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:o1> = <var:m> /\ <var:o2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:o3> = <var:m> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:o1> = <var:m> /\ <var:o2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:o1> = <var:m> /\ <var:o2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:o0> = <nat:1> /\ <var:z> = <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:o1> = <var:m> /\ <var:o0> = <nat:1> /\ <var:z> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:z> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 