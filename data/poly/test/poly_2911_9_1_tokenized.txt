\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:P> ; <var:n2> := <var:n1> * <var:P> ; <var:n3> := <var:n2> * <var:P> ; <var:n0> := <nat:3> ; <var:n2> := <var:n2> * <nat:9> ; <var:n3> := <var:n3> * <nat:9> ; <var:W> := <var:n3> <var:W> := <var:W> + <var:n2> <var:W> := <var:W> + <var:n0> \end{verbatim} Assume , for every positive numbers $ <var:s> $ , that we have $ <var:P> = <var:s> $ prior to the execution of the code it holds that $ <var:W> = <nat:9> \times <var:s> ^ <nat:3> + <nat:9> \times <var:s> ^ <nat:2> + <nat:3> $ once set of instructions is done . \end{theorem} \begin{proof} Arguing the correctness of the program is evident through typical Hoare techniques . Moving on to the subsequent lines found in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:P> = <var:s> \} & <var:n1> := <var:P> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \} \\ \{ <var:P> = <var:s> \land <var:n1> = <var:s> \} & <var:n2> := <var:n1> * <var:P> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \land <var:n2> = <var:s> ^ <nat:2> \} \\ \{ <var:P> = <var:s> \land <var:n1> = <var:s> \land <var:n2> = <var:s> ^ <nat:2> \} & <var:n3> := <var:n2> * <var:P> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \land <var:n2> = <var:s> ^ <nat:2> \land <var:n3> = <var:s> ^ <nat:3> \} \\ \{ <var:P> = <var:s> \land <var:n1> = <var:s> \land <var:n2> = <var:s> ^ <nat:2> \land <var:n3> = <var:s> ^ <nat:3> \} & <var:n0> := <nat:3> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \land <var:n2> = <var:s> ^ <nat:2> \land <var:n3> = <var:s> ^ <nat:3> \land <var:n0> = <nat:3> \} \end{tabular} This is given using the rule given by usual Hoare logic . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:s> \} & <var:n1> := <var:P> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \} \\ \{ <var:P> = <var:s> \land <var:n1> = <var:s> \} & <var:n2> := <var:n1> * <var:P> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \land <var:n2> = <var:s> ^ <nat:2> \} \\ \{ <var:P> = <var:s> \land <var:n1> = <var:s> \land <var:n2> = <var:s> ^ <nat:2> \} & <var:n3> := <var:n2> * <var:P> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \land <var:n2> = <var:s> ^ <nat:2> \land <var:n3> = <var:s> ^ <nat:3> \} \end{tabular} This is sound through the environment update law defined by standard Hoare logic . Shifting focus toward the following statement found in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:s> \} & <var:n1> := <var:P> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \} \end{tabular} This is guaranteed through the variable update inference rule from standard Hoare logic . Paying attention to the following bit of code found in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:s> \} & <var:n1> := <var:P> & \{ <var:P> = <var:s> \land <var:n1> = <var:s> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:P> = <var:s> }} <var:n1> := <var:P> ; <var:n2> := <var:n1> * <var:P> ; <var:n3> := <var:n2> * <var:P> ; <var:n0> := <nat:3> ; <var:n2> := <var:n2> * <nat:9> ; <var:n3> := <var:n3> * <nat:9> ; <var:W> := <var:n3> <var:W> := <var:W> + <var:n2> <var:W> := <var:W> + <var:n0> {{ <var:W> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n1> = <var:s> /\ <var:n2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n1> = <var:s> /\ <var:n2> = <var:s> ^ <nat:2> /\ <var:n3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n1> = <var:s> /\ <var:n2> = <var:s> ^ <nat:2> /\ <var:n3> = <var:s> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n1> = <var:s> /\ <var:n2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:n3> = <var:s> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n1> = <var:s> /\ <var:n2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:n3> = <nat:9> * <var:s> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n1> = <var:s> /\ <var:n2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:n0> = <nat:3> /\ <var:W> = <nat:9> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:n1> = <var:s> /\ <var:n0> = <nat:3> /\ <var:W> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:s> /\ <var:W> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 