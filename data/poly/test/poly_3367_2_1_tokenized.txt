\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:6> ; <var:R> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:S> = <var:F> $ before the execution of the code segment it must be that we see $ <var:R> = <nat:6> $ after code segment has finished executing . \end{theorem} \begin{proof} The course of logic for the series of commands is demonstrated by usual Hoare techniques . Moving forward to the following statement found in the series of commands , we see the variable update line \verb | <var:j0> := <nat:6> ; | . This moves the precondition $ \{ <var:S> = <var:F> \} $ into the postcondition $ \{ <var:S> = <var:F> \land <var:j0> = <nat:6> \} $ . Next , we see the variable binding line defining $ <var:j0$ into $ <var:R>$ . This line redefines the precondition $ \{ <var:S> = <var:F> \land <var:j0> = <nat:6> \} $ to $ \{ <var:S> = <var:F> \land <var:R> = <nat:6> \} $ . This is known to be sound with the assignment rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:6> ; <var:R> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:S> = <var:F> }} <def:poly> {{ <var:R> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:R> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 