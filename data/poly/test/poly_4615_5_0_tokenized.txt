\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:2> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:p> ; <var:Y> := <var:o1> ; <var:Y> := <var:Y> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Assuming $ <var:p> = <var:G> $ ahead of running this series of commands , it holds that we see $ <var:Y> = <nat:5> * <var:G> + <nat:2> $ when list of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be done by standard Hoare reasoning . Following , \verb | { <var:p> = <var:G> } <var:o0> := <nat:2> { <var:p> = <var:G> \land <var:o0> = <nat:2> } | . This is deduced through the variable update inference rule defined by usual Hoare logic . Jumping to the following statement in the list of instructions , we see \verb | { <var:p> = <var:G> } <var:o0> := <nat:2> { <var:p> = <var:G> \land <var:o0> = <nat:2> } | . This is given with the binding rule of usual Hoare reasoning . After , we see \verb | { <var:p> = <var:G> } <var:o0> := <nat:2> { <var:p> = <var:G> \land <var:o0> = <nat:2> } | , \verb | { <var:p> = <var:G> \land <var:o0> = <nat:2> } <var:o1> := <nat:5> { <var:p> = <var:G> \land <var:o0> = <nat:2> \land <var:o1> = <nat:5> } | and \verb | { <var:p> = <var:G> \land <var:o0> = <nat:2> \land <var:o1> = <nat:5> } <var:o1> := <var:o1> * <var:p> { <var:p> = <var:G> \land <var:o0> = <nat:2> \land <var:o1> = <nat:5> * <var:G> } | . This is guaranteed by the variable update law from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:2> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:p> ; <var:Y> := <var:o1> ; <var:Y> := <var:Y> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:p> = <var:G> }} <def:poly> {{ <var:Y> = <nat:5> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:5> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:o0> = <nat:2> /\ <var:Y> = <nat:5> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:G> /\ <var:Y> = <nat:5> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 