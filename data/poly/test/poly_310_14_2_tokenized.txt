\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:U> := <nat:2> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Given it to be that $ <var:Q> = <var:n> $ ahead of running our segment of code then $ <var:U> = <nat:2> * <var:n> ^ <nat:13> + <nat:2> * <var:n> ^ <nat:12> + <nat:1> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be shown by Hoare logic . Moving forward , \begin{eqnarray} \{ <var:Q> = <var:n> \} \, <var:U> := <nat:2> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \} \, <var:U> := <nat:2> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> + <nat:2> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> + <nat:2> \} \, <var:U> := <nat:1> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> \} \, <var:U> := <nat:3> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:3> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:3> \} \, <var:U> := <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \, <var:U> := <nat:4> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \} \end{eqnarray} Advancing to the next step , \begin{eqnarray} \{ <var:Q> = <var:n> \} \, <var:U> := <nat:2> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \} \end{eqnarray} Keeping momentum , we see \begin{eqnarray} \{ <var:Q> = <var:n> \} \, <var:U> := <nat:2> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \} \, <var:U> := <nat:2> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> + <nat:2> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> + <nat:2> \} \, <var:U> := <nat:1> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> \} \, <var:U> := <nat:3> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:3> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:3> \} \, <var:U> := <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \, <var:U> := <nat:4> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \} \\ \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \} \, <var:U> := <nat:1> + <var:U> * <var:Q> \, \{ <var:Q> = <var:n> \land <var:U> = <nat:2> \times <var:n> ^ <nat:6> + <nat:2> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:2> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> ; <var:U> := <nat:1> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:3> + <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> ; <var:U> := <nat:2> + <var:U> * <var:Q> ; <var:U> := <nat:4> + <var:U> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Q> = <var:n> }} <def:poly> {{ <var:U> = <nat:2> * <var:n> ^ <nat:13> + <nat:2> * <var:n> ^ <nat:12> + <nat:1> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:9> + <nat:2> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:10> + <nat:2> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:11> + <nat:2> * <var:n> ^ <nat:10> + <nat:1> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:12> + <nat:2> * <var:n> ^ <nat:11> + <nat:1> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:U> = <nat:2> * <var:n> ^ <nat:13> + <nat:2> * <var:n> ^ <nat:12> + <nat:1> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 