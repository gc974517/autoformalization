\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} : \begin{verbatim} <var:G1> := <var:d> ; <var:G2> := <var:G1> * <var:d> ; <var:G3> := <var:G2> * <var:d> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:2> ; <var:z> := <var:G3> <var:z> := <var:z> + <var:G2> <var:z> := <var:z> + <var:G1> <var:z> := <var:z> + <var:G0> \end{verbatim} Allow $ <var:d> = <var:w> $ , given every $ <var:w> $ , prior to interpreting the set of instructions , it must be that we see $ <var:z> = <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives : \begin{eqnarray} \{ <var:d> = <var:w> \} \\ <var:G1> := <var:d> ; \\ \{ <var:d> = <var:w> \land <var:G1> = <var:w> \} \\ <var:G2> := <var:G1> * <var:d> ; \\ \{ <var:d> = <var:w> \land <var:G1> = <var:w> \land <var:G2> = <var:w> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:d> ; \\ \{ <var:d> = <var:w> \land <var:G1> = <var:w> \land <var:G2> = <var:w> ^ <nat:2> \land <var:G3> = <var:w> ^ <nat:3> \} \\ <var:G0> := <nat:4> ; \\ \{ <var:d> = <var:w> \land <var:G1> = <var:w> \land <var:G2> = <var:w> ^ <nat:2> \land <var:G3> = <var:w> ^ <nat:3> \land <var:G0> = <nat:4> \} \\ <var:G1> := <var:G1> * <nat:4> ; \\ \{ <var:d> = <var:w> \land <var:G1> = <nat:4> \times <var:w> \land <var:G2> = <var:w> ^ <nat:2> \land <var:G3> = <var:w> ^ <nat:3> \land <var:G0> = <nat:4> \} \\ <var:G2> := <var:G2> * <nat:2> ; \\ \{ <var:d> = <var:w> \land <var:G1> = <nat:4> \times <var:w> \land <var:G2> = <nat:2> \times <var:w> ^ <nat:2> \land <var:G3> = <var:w> ^ <nat:3> \land <var:G0> = <nat:4> \} \\ <var:G3> := <var:G3> * <nat:2> ; \\ \{ <var:d> = <var:w> \land <var:G1> = <nat:4> \times <var:w> \land <var:G2> = <nat:2> \times <var:w> ^ <nat:2> \land <var:G3> = <nat:2> \times <var:w> ^ <nat:3> \land <var:G0> = <nat:4> \} \\ <var:z> := <var:G3> \\ \{ <var:d> = <var:w> \land <var:G1> = <nat:4> \times <var:w> \land <var:G2> = <nat:2> \times <var:w> ^ <nat:2> \land <var:G0> = <nat:4> \land <var:z> = <nat:2> \times <var:w> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:G2> \\ \{ <var:d> = <var:w> \land <var:G1> = <nat:4> \times <var:w> \land <var:G0> = <nat:4> \land <var:z> = <nat:2> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:G1> \\ \{ <var:d> = <var:w> \land <var:G0> = <nat:4> \land <var:z> = <nat:2> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> \} \\ <var:z> := <var:z> + <var:G0> \\ \{ <var:d> = <var:w> \land <var:z> = <nat:2> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:4> \} \end{eqnarray} Thusly , the code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:d> = <var:w> }} <var:G1> := <var:d> ; <var:G2> := <var:G1> * <var:d> ; <var:G3> := <var:G2> * <var:d> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:2> ; <var:z> := <var:G3> <var:z> := <var:z> + <var:G2> <var:z> := <var:z> + <var:G1> <var:z> := <var:z> + <var:G0> {{ <var:z> = <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <var:w> /\ <var:G2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <var:w> /\ <var:G2> = <var:w> ^ <nat:2> /\ <var:G3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <var:w> /\ <var:G2> = <var:w> ^ <nat:2> /\ <var:G3> = <var:w> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <nat:4> * <var:w> /\ <var:G2> = <var:w> ^ <nat:2> /\ <var:G3> = <var:w> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <nat:4> * <var:w> /\ <var:G2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:G3> = <var:w> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <nat:4> * <var:w> /\ <var:G2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <nat:4> * <var:w> /\ <var:G2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:G0> = <nat:4> /\ <var:z> = <nat:2> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G1> = <nat:4> * <var:w> /\ <var:G0> = <nat:4> /\ <var:z> = <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:G0> = <nat:4> /\ <var:z> = <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:w> /\ <var:z> = <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 