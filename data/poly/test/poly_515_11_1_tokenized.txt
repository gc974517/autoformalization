\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:G> ; <var:K2> := <var:K1> * <var:G> ; <var:K3> := <var:K2> * <var:G> ; <var:K0> := <nat:8> ; <var:K1> := <var:K1> * <nat:8> ; <var:K2> := <var:K2> * <nat:6> ; <var:K3> := <var:K3> * <nat:5> ; <var:r> := <var:K3> <var:r> := <var:r> + <var:K2> <var:r> := <var:r> + <var:K1> <var:r> := <var:r> + <var:K0> \end{verbatim} Allowing it to be that $ <var:G> = <var:g> $ prior to the execution of the series of instructions , it follows that we see $ <var:r> = <nat:5> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:8> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:G> = <var:g> \} \\ <var:K1> := <var:G> ; \\ \{ <var:G> = <var:g> \land <var:K1> = <var:g> \} \\ <var:K2> := <var:K1> * <var:G> ; \\ \{ <var:G> = <var:g> \land <var:K1> = <var:g> \land <var:K2> = <var:g> ^ <nat:2> \} \\ <var:K3> := <var:K2> * <var:G> ; \\ \{ <var:G> = <var:g> \land <var:K1> = <var:g> \land <var:K2> = <var:g> ^ <nat:2> \land <var:K3> = <var:g> ^ <nat:3> \} \\ <var:K0> := <nat:8> ; \\ \{ <var:G> = <var:g> \land <var:K1> = <var:g> \land <var:K2> = <var:g> ^ <nat:2> \land <var:K3> = <var:g> ^ <nat:3> \land <var:K0> = <nat:8> \} \\ <var:K1> := <var:K1> * <nat:8> ; \\ \{ <var:G> = <var:g> \land <var:K1> = <nat:8> \times <var:g> \land <var:K2> = <var:g> ^ <nat:2> \land <var:K3> = <var:g> ^ <nat:3> \land <var:K0> = <nat:8> \} \\ <var:K2> := <var:K2> * <nat:6> ; \\ \{ <var:G> = <var:g> \land <var:K1> = <nat:8> \times <var:g> \land <var:K2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:K3> = <var:g> ^ <nat:3> \land <var:K0> = <nat:8> \} \\ <var:K3> := <var:K3> * <nat:5> ; \\ \{ <var:G> = <var:g> \land <var:K1> = <nat:8> \times <var:g> \land <var:K2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:K3> = <nat:5> \times <var:g> ^ <nat:3> \land <var:K0> = <nat:8> \} \\ <var:r> := <var:K3> \\ \{ <var:G> = <var:g> \land <var:K1> = <nat:8> \times <var:g> \land <var:K2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:K0> = <nat:8> \land <var:r> = <nat:5> \times <var:g> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:K2> \\ \{ <var:G> = <var:g> \land <var:K1> = <nat:8> \times <var:g> \land <var:K0> = <nat:8> \land <var:r> = <nat:5> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:K1> \\ \{ <var:G> = <var:g> \land <var:K0> = <nat:8> \land <var:r> = <nat:5> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> + <nat:8> \times <var:g> \} \\ <var:r> := <var:r> + <var:K0> \\ \{ <var:G> = <var:g> \land <var:r> = <nat:5> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> + <nat:8> \times <var:g> + <nat:8> \} \end{eqnarray} Considering the above , our code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:G> = <var:g> }} <var:K1> := <var:G> ; <var:K2> := <var:K1> * <var:G> ; <var:K3> := <var:K2> * <var:G> ; <var:K0> := <nat:8> ; <var:K1> := <var:K1> * <nat:8> ; <var:K2> := <var:K2> * <nat:6> ; <var:K3> := <var:K3> * <nat:5> ; <var:r> := <var:K3> <var:r> := <var:r> + <var:K2> <var:r> := <var:r> + <var:K1> <var:r> := <var:r> + <var:K0> {{ <var:r> = <nat:5> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <var:g> /\ <var:K2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <var:g> /\ <var:K2> = <var:g> ^ <nat:2> /\ <var:K3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <var:g> /\ <var:K2> = <var:g> ^ <nat:2> /\ <var:K3> = <var:g> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <nat:8> * <var:g> /\ <var:K2> = <var:g> ^ <nat:2> /\ <var:K3> = <var:g> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <nat:8> * <var:g> /\ <var:K2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:K3> = <var:g> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <nat:8> * <var:g> /\ <var:K2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:g> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <nat:8> * <var:g> /\ <var:K2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:K0> = <nat:8> /\ <var:r> = <nat:5> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K1> = <nat:8> * <var:g> /\ <var:K0> = <nat:8> /\ <var:r> = <nat:5> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:K0> = <nat:8> /\ <var:r> = <nat:5> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:r> = <nat:5> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 