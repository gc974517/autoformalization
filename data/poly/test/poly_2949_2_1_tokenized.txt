\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:2> ; <var:F> := <var:w0> \end{verbatim} Allow that we have $ <var:k> = <var:Y> $ prior to running our program then we have $ <var:F> = <nat:2> $ after program is done . \end{theorem} \begin{proof} Using typical Hoare logic produces : \begin{eqnarray} \{ <var:k> = <var:Y> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:k> = <var:Y> \land <var:w0> = <nat:2> \} \\ <var:F> := <var:w0> \\ \{ <var:k> = <var:Y> \land <var:F> = <nat:2> \} \end{eqnarray} Given the preceding argument , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:k> = <var:Y> }} <var:w0> := <nat:2> ; <var:F> := <var:w0> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 