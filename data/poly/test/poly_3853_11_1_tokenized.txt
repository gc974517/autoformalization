\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:G> ; <var:d2> := <var:d1> * <var:G> ; <var:d3> := <var:d2> * <var:G> ; <var:d0> := <nat:6> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:6> ; <var:d3> := <var:d3> * <nat:3> ; <var:Q> := <var:d3> <var:Q> := <var:Q> + <var:d2> <var:Q> := <var:Q> + <var:d1> <var:Q> := <var:Q> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:G> = <var:b> $ ( given every integers $ <var:b> $ ) prior to the evaluation of our code segment , then we have $ <var:Q> = <nat:3> \times <var:b> ^ <nat:3> + <nat:6> \times <var:b> ^ <nat:2> + <nat:7> \times <var:b> + <nat:6> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:G> = <var:b> \} \\ <var:d1> := <var:G> ; \\ \{ <var:G> = <var:b> \land <var:d1> = <var:b> \} \\ <var:d2> := <var:d1> * <var:G> ; \\ \{ <var:G> = <var:b> \land <var:d1> = <var:b> \land <var:d2> = <var:b> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:G> ; \\ \{ <var:G> = <var:b> \land <var:d1> = <var:b> \land <var:d2> = <var:b> ^ <nat:2> \land <var:d3> = <var:b> ^ <nat:3> \} \\ <var:d0> := <nat:6> ; \\ \{ <var:G> = <var:b> \land <var:d1> = <var:b> \land <var:d2> = <var:b> ^ <nat:2> \land <var:d3> = <var:b> ^ <nat:3> \land <var:d0> = <nat:6> \} \\ <var:d1> := <var:d1> * <nat:7> ; \\ \{ <var:G> = <var:b> \land <var:d1> = <nat:7> \times <var:b> \land <var:d2> = <var:b> ^ <nat:2> \land <var:d3> = <var:b> ^ <nat:3> \land <var:d0> = <nat:6> \} \\ <var:d2> := <var:d2> * <nat:6> ; \\ \{ <var:G> = <var:b> \land <var:d1> = <nat:7> \times <var:b> \land <var:d2> = <nat:6> \times <var:b> ^ <nat:2> \land <var:d3> = <var:b> ^ <nat:3> \land <var:d0> = <nat:6> \} \\ <var:d3> := <var:d3> * <nat:3> ; \\ \{ <var:G> = <var:b> \land <var:d1> = <nat:7> \times <var:b> \land <var:d2> = <nat:6> \times <var:b> ^ <nat:2> \land <var:d3> = <nat:3> \times <var:b> ^ <nat:3> \land <var:d0> = <nat:6> \} \\ <var:Q> := <var:d3> \\ \{ <var:G> = <var:b> \land <var:d1> = <nat:7> \times <var:b> \land <var:d2> = <nat:6> \times <var:b> ^ <nat:2> \land <var:d0> = <nat:6> \land <var:Q> = <nat:3> \times <var:b> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:d2> \\ \{ <var:G> = <var:b> \land <var:d1> = <nat:7> \times <var:b> \land <var:d0> = <nat:6> \land <var:Q> = <nat:3> \times <var:b> ^ <nat:3> + <nat:6> \times <var:b> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:d1> \\ \{ <var:G> = <var:b> \land <var:d0> = <nat:6> \land <var:Q> = <nat:3> \times <var:b> ^ <nat:3> + <nat:6> \times <var:b> ^ <nat:2> + <nat:7> \times <var:b> \} \end{eqnarray} Allowing interpreting our segment of code produces : \begin{eqnarray} <var:Q> := <var:Q> + <var:d0> \\ \{ <var:G> = <var:b> \land <var:Q> = <nat:3> \times <var:b> ^ <nat:3> + <nat:6> \times <var:b> ^ <nat:2> + <nat:7> \times <var:b> + <nat:6> \} \end{eqnarray} As a result , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:G> ; <var:d2> := <var:d1> * <var:G> ; <var:d3> := <var:d2> * <var:G> ; <var:d0> := <nat:6> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:6> ; <var:d3> := <var:d3> * <nat:3> ; <var:Q> := <var:d3> <var:Q> := <var:Q> + <var:d2> <var:Q> := <var:Q> + <var:d1> <var:Q> := <var:Q> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:G> = <var:b> }} <def:poly> {{ <var:Q> = <nat:3> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <var:b> /\ <var:d2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <var:b> /\ <var:d2> = <var:b> ^ <nat:2> /\ <var:d3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <var:b> /\ <var:d2> = <var:b> ^ <nat:2> /\ <var:d3> = <var:b> ^ <nat:3> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <nat:7> * <var:b> /\ <var:d2> = <var:b> ^ <nat:2> /\ <var:d3> = <var:b> ^ <nat:3> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <nat:7> * <var:b> /\ <var:d2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:d3> = <var:b> ^ <nat:3> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <nat:7> * <var:b> /\ <var:d2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:d3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <nat:7> * <var:b> /\ <var:d2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:d0> = <nat:6> /\ <var:Q> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d1> = <nat:7> * <var:b> /\ <var:d0> = <nat:6> /\ <var:Q> = <nat:3> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:d0> = <nat:6> /\ <var:Q> = <nat:3> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:Q> = <nat:3> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 