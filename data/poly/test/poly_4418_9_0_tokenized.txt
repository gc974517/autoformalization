\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:i> ; <var:X2> := <nat:8> ; <var:X2> := <var:X2> * <var:i> ; <var:X2> := <var:X2> * <var:i> ; <var:x> := <var:X2> ; <var:x> := <var:x> + <var:X1> ; <var:x> := <var:x> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:i> = <var:W> $ --- given positive integers $ <var:W> $ --- prior to running our series of commands it follows that $ <var:x> = <nat:8> \times <var:W> ^ <nat:2> + <nat:9> \times <var:W> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives : \begin{eqnarray} \{ <var:i> = <var:W> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:i> = <var:W> \land <var:X0> = <nat:3> \} \\ <var:X1> := <nat:9> ; \\ \{ <var:i> = <var:W> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \} \\ <var:X1> := <var:X1> * <var:i> ; \\ \{ <var:i> = <var:W> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \cdot <var:W> \} \\ <var:X2> := <nat:8> ; \\ \{ <var:i> = <var:W> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \cdot <var:W> \land <var:X2> = <nat:8> \} \\ <var:X2> := <var:X2> * <var:i> ; \\ \{ <var:i> = <var:W> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \cdot <var:W> \land <var:X2> = <nat:8> \cdot <var:W> \} \\ <var:X2> := <var:X2> * <var:i> ; \\ \{ <var:i> = <var:W> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \cdot <var:W> \land <var:X2> = <nat:8> \cdot <var:W> ^ <nat:2> \} \\ <var:x> := <var:X2> ; \\ \{ <var:i> = <var:W> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \cdot <var:W> \land <var:x> = <nat:8> \cdot <var:W> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:X1> ; \\ \{ <var:i> = <var:W> \land <var:X0> = <nat:3> \land <var:x> = <nat:8> \cdot <var:W> ^ <nat:2> + <nat:9> \cdot <var:W> \} \\ <var:x> := <var:x> + <var:X0> \\ \{ <var:i> = <var:W> \land <var:x> = <nat:8> \cdot <var:W> ^ <nat:2> + <nat:9> \cdot <var:W> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X0> := <nat:3> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:i> ; <var:X2> := <nat:8> ; <var:X2> := <var:X2> * <var:i> ; <var:X2> := <var:X2> * <var:i> ; <var:x> := <var:X2> ; <var:x> := <var:x> + <var:X1> ; <var:x> := <var:x> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:i> = <var:W> }} <def:poly> {{ <var:x> = <nat:8> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> * <var:W> /\ <var:X2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> * <var:W> /\ <var:X2> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> * <var:W> /\ <var:X2> = <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> * <var:W> /\ <var:x> = <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:X0> = <nat:3> /\ <var:x> = <nat:8> * <var:W> ^ <nat:2> + <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:x> = <nat:8> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 