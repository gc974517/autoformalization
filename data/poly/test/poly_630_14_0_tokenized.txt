\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:6> ; <var:P1> := <nat:8> ; <var:P1> := <var:P1> * <var:R> ; <var:P2> := <nat:4> ; <var:P2> := <var:P2> * <var:R> ; <var:P2> := <var:P2> * <var:R> ; <var:P3> := <nat:2> ; <var:P3> := <var:P3> * <var:R> ; <var:P3> := <var:P3> * <var:R> ; <var:P3> := <var:P3> * <var:R> ; <var:w> := <var:P3> ; <var:w> := <var:w> + <var:P2> ; <var:w> := <var:w> + <var:P1> ; <var:w> := <var:w> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:R> = <var:y> $ , for all $ <var:y> \in \mathbb{Z}^+ $ , before executing our program it follows that we see $ <var:w> = <nat:2> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> + <nat:6> $ . \end{theorem} \begin{proof} Observe the below decorated series of instructions . \begin{eqnarray} \{ <var:R> = <var:y> \} \\ <var:P0> := <nat:6> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \} \\ <var:P1> := <nat:8> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \} \\ <var:P1> := <var:P1> * <var:R> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \} \\ <var:P2> := <nat:4> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:P2> = <nat:4> \} \\ <var:P2> := <var:P2> * <var:R> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:P2> = <nat:4> \times <var:y> \} \\ <var:P2> := <var:P2> * <var:R> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:P2> = <nat:4> \times <var:y> ^ <nat:2> \} \\ <var:P3> := <nat:2> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:P2> = <nat:4> \times <var:y> ^ <nat:2> \land <var:P3> = <nat:2> \} \\ <var:P3> := <var:P3> * <var:R> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:P2> = <nat:4> \times <var:y> ^ <nat:2> \land <var:P3> = <nat:2> \times <var:y> \} \end{eqnarray} Allowing executing the program gives : \begin{eqnarray} <var:P3> := <var:P3> * <var:R> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:P2> = <nat:4> \times <var:y> ^ <nat:2> \land <var:P3> = <nat:2> \times <var:y> ^ <nat:2> \} \\ <var:P3> := <var:P3> * <var:R> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:P2> = <nat:4> \times <var:y> ^ <nat:2> \land <var:P3> = <nat:2> \times <var:y> ^ <nat:3> \} \\ <var:w> := <var:P3> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:P2> = <nat:4> \times <var:y> ^ <nat:2> \land <var:w> = <nat:2> \times <var:y> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:P2> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:y> \land <var:w> = <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:P1> ; \\ \{ <var:R> = <var:y> \land <var:P0> = <nat:6> \land <var:w> = <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> \} \\ <var:w> := <var:w> + <var:P0> \\ \{ <var:R> = <var:y> \land <var:w> = <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:6> \} \end{eqnarray} Using usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:P1> := <nat:8> ; <var:P1> := <var:P1> * <var:R> ; <var:P2> := <nat:4> ; <var:P2> := <var:P2> * <var:R> ; <var:P2> := <var:P2> * <var:R> ; <var:P3> := <nat:2> ; <var:P3> := <var:P3> * <var:R> ; <var:P3> := <var:P3> * <var:R> ; <var:P3> := <var:P3> * <var:R> ; <var:w> := <var:P3> ; <var:w> := <var:w> + <var:P2> ; <var:w> := <var:w> + <var:P1> ; <var:w> := <var:w> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:R> = <var:y> }} <def:poly> {{ <var:w> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:P3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:P3> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:P3> = <nat:2> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:P3> = <nat:2> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:w> = <nat:2> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:y> /\ <var:w> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:P0> = <nat:6> /\ <var:w> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:w> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 