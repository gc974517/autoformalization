\begin{document} \begin{theorem} Let the following list of commands as follows \begin{verbatim} <var:P1> := <var:E> ; <var:P2> := <var:P1> * <var:E> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:2> ; <var:W> := <var:P2> <var:W> := <var:W> + <var:P1> <var:W> := <var:W> + <var:P0> \end{verbatim} Allowing --- assuming some natural numbers $ <var:V> $ --- it to be that $ <var:E> = <var:V> $ prior to the execution of the series of commands it must be that we see $ <var:W> = <nat:2> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + <nat:2> $ after list of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our series of commands is shown using typical Hoare techniques . Keeping momentum , the variable binding code assigning $ <var:E> $ into $ <var:P1>$ . This transfers the condition $ \{ <var:E> = <var:V> \} $ into the postcondition $ \{ <var:E> = <var:V> \land <var:P1> = <var:V> \} $ . After , the binding code \verb | <var:P2> := <var:P1> * <var:E> ; | . This code takes the condition $ \{ <var:E> = <var:V> \land <var:P1> = <var:V> \} $ to the postcondition $ \{ <var:E> = <var:V> \land <var:P1> = <var:V> \land <var:P2> = <var:V> ^ <nat:2> \} $ . Focusing on the next line in the set of instructions , we see the assignment command \verb | <var:P0> := <nat:2> ; | . This code redefines the precondition $ \{ <var:E> = <var:V> \land <var:P1> = <var:V> \land <var:P2> = <var:V> ^ <nat:2> \} $ toward $ \{ <var:E> = <var:V> \land <var:P1> = <var:V> \land <var:P2> = <var:V> ^ <nat:2> \land <var:P0> = <nat:2> \} $ . Advancing on , we see the assignment statement \verb | <var:P1> := <var:P1> * <nat:4> ; | . This code takes the precondition $ \{ <var:E> = <var:V> \land <var:P1> = <var:V> \land <var:P2> = <var:V> ^ <nat:2> \land <var:P0> = <nat:2> \} $ as $ \{ <var:E> = <var:V> \land <var:P1> = <nat:4> * <var:V> \land <var:P2> = <var:V> ^ <nat:2> \land <var:P0> = <nat:2> \} $ . This is known to be sound through the assignment inference rule from standard Hoare reasoning . Advancing to the next piece of code contained in our code segment , we have the code defining $ <var:P2> * <nat:2> $ as $ <var:P2>$ . This line moves the precondition $ \{ <var:E> = <var:V> \land <var:P1> = <nat:4> * <var:V> \land <var:P2> = <var:V> ^ <nat:2> \land <var:P0> = <nat:2> \} $ into the postcondition $ \{ <var:E> = <var:V> \land <var:P1> = <nat:4> * <var:V> \land <var:P2> = <nat:2> * <var:V> ^ <nat:2> \land <var:P0> = <nat:2> \} $ . Moving onward , we have the variable binding command \verb | <var:W> := <var:P2> | . This command forwards the condition $ \{ <var:E> = <var:V> \land <var:P1> = <nat:4> * <var:V> \land <var:P2> = <nat:2> * <var:V> ^ <nat:2> \land <var:P0> = <nat:2> \} $ as $ \{ <var:E> = <var:V> \land <var:P1> = <nat:4> * <var:V> \land <var:P0> = <nat:2> \land <var:W> = <nat:2> * <var:V> ^ <nat:2> \} $ . This is known to be sound by the assignment rule given in standard Hoare reasoning . Moving forward to the following line found in the list of commands , the binding code yielding $ <var:W> + <var:P1$ as $ <var:W>$ . This forwards the condition $ \{ <var:E> = <var:V> \land <var:P1> = <nat:4> * <var:V> \land <var:P0> = <nat:2> \land <var:W> = <nat:2> * <var:V> ^ <nat:2> \} $ as the condition $ \{ <var:E> = <var:V> \land <var:P0> = <nat:2> \land <var:W> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> \} $ . Advancing to the next statement in the series of instructions , we see the environment update line binding $ <var:W> + <var:P0$ to $ <var:W>$ . This moves the condition $ \{ <var:E> = <var:V> \land <var:P0> = <nat:2> \land <var:W> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> \} $ into $ \{ <var:E> = <var:V> \land <var:W> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> \} $ . This is shown to be logically sound through the assignment law of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:E> = <var:V> }} <var:P1> := <var:E> ; <var:P2> := <var:P1> * <var:E> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:2> ; <var:W> := <var:P2> <var:W> := <var:W> + <var:P1> <var:W> := <var:W> + <var:P0> {{ <var:W> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:P1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:P1> = <var:V> /\ <var:P2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:P1> = <var:V> /\ <var:P2> = <var:V> ^ <nat:2> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:P1> = <nat:4> * <var:V> /\ <var:P2> = <var:V> ^ <nat:2> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:P1> = <nat:4> * <var:V> /\ <var:P2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:P1> = <nat:4> * <var:V> /\ <var:P0> = <nat:2> /\ <var:W> = <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:P0> = <nat:2> /\ <var:W> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:W> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 