\begin{document} \begin{theorem} Consider the following code segment as \begin{verbatim} <var:Z1> := <var:n> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:w> := <var:Z1> <var:w> := <var:w> + <var:Z0> \end{verbatim} Given that $ <var:n> = <var:M> $ , letting whole numbers $ <var:M> $ , ahead of the execution of our set of instructions , it follows that $ <var:w> = <nat:1> \cdot <var:M> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the set of commands can be demonstrated by Hoare logic . Jumping to the proceeding commands contained in the code segment , we have \begin{verbatim} { <var:n> = <var:M> } <var:Z1> := <var:n> { <var:n> = <var:M> \land <var:Z1> = <var:M> } { <var:n> = <var:M> \land <var:Z1> = <var:M> } <var:Z0> := <nat:3> { <var:n> = <var:M> \land <var:Z1> = <var:M> \land <var:Z0> = <nat:3> } \end{verbatim} After , \begin{verbatim} { <var:n> = <var:M> } <var:Z1> := <var:n> { <var:n> = <var:M> \land <var:Z1> = <var:M> } { <var:n> = <var:M> \land <var:Z1> = <var:M> } <var:Z0> := <nat:3> { <var:n> = <var:M> \land <var:Z1> = <var:M> \land <var:Z0> = <nat:3> } { <var:n> = <var:M> \land <var:Z1> = <var:M> \land <var:Z0> = <nat:3> } <var:Z1> := <var:Z1> * <nat:1> { <var:n> = <var:M> \land <var:Z1> = <nat:1> * <var:M> \land <var:Z0> = <nat:3> } \end{verbatim} This is sound with the variable update scheme given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:n> = <var:M> }} <var:Z1> := <var:n> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:w> := <var:Z1> <var:w> := <var:w> + <var:Z0> {{ <var:w> = <nat:1> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:Z1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:Z1> = <var:M> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:Z1> = <nat:1> * <var:M> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:Z0> = <nat:3> /\ <var:w> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:w> = <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 