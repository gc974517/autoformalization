\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:o0> := <nat:3> ; <var:L> := <var:o0> \end{verbatim} Assuming letting positive integer coefficients $ <var:e> $ that $ <var:F> = <var:e> $ ahead of evaluating the set of instructions it must be that $ <var:L> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be done using standard Hoare reasoning . Going to the next step , the variable binding line assigning $ <nat:3> $ as $ <var:o0>$ . This command forwards the precondition $ \{ <var:F> = <var:e> \} $ toward $ \{ <var:F> = <var:e> \land <var:o0> = <nat:3> \} $ . This is rigorously given by the assignment rule found in Hoare techniques . Advancing , we see the variable update line \verb | <var:L> := <var:o0> | . This forwards $ \{ <var:F> = <var:e> \land <var:o0> = <nat:3> \} $ toward $ \{ <var:F> = <var:e> \land <var:L> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:F> = <var:e> }} <var:o0> := <nat:3> ; <var:L> := <var:o0> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 