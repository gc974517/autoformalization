\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:V> := <nat:3> ; <var:V> := <nat:3> + <var:V> * <var:N> \end{verbatim} Allowing , for positive coefficients $ <var:e> $ , it to hold that $ <var:N> = <var:e> $ prior to the evaluation of the series of commands , then we have $ <var:V> = <nat:3> * <var:e> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the series of commands can be given through standard Hoare logic . Moving on to the proceeding line in the code , we see the variable assignmet statement binding $ <nat:3> $ as $ <var:V>$ . This transfers $ \{ <var:N> = <var:e> \} $ as the condition $ \{ <var:N> = <var:e> \land <var:V> = <nat:3> \} $ . This is shown with the assignment rule given in usual Hoare reasoning . Honing in on the next line of code in our code segment , we have the assignment code \verb | <var:V> := <nat:3> + <var:V> * <var:N> | . This transfers the condition $ \{ <var:N> = <var:e> \land <var:V> = <nat:3> \} $ into the postcondition $ \{ <var:N> = <var:e> \land <var:V> = <nat:3> \cdot <var:e> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:N> = <var:e> }} <var:V> := <nat:3> ; <var:V> := <nat:3> + <var:V> * <var:N> {{ <var:V> = <nat:3> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:V> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:e> /\ <var:V> = <nat:3> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 