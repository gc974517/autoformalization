\begin{document} \begin{theorem} We define a list of instructions as \begin{verbatim} <var:A1> := <var:w> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:4> ; <var:B> := <var:A1> <var:B> := <var:B> + <var:A0> \end{verbatim} Assuming that $ <var:w> = <var:Z> $ prior to running the list of instructions , then we see $ <var:B> = <nat:4> * <var:Z> + <nat:7> $ when code has executed . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:w> = <var:Z> \} \\ <var:A1> := <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:A1> = <var:Z> \} \\ <var:A0> := <nat:7> ; \\ \{ <var:w> = <var:Z> \land <var:A1> = <var:Z> \land <var:A0> = <nat:7> \} \\ <var:A1> := <var:A1> * <nat:4> ; \\ \{ <var:w> = <var:Z> \land <var:A1> = <nat:4> \times <var:Z> \land <var:A0> = <nat:7> \} \\ <var:B> := <var:A1> \\ \{ <var:w> = <var:Z> \land <var:A0> = <nat:7> \land <var:B> = <nat:4> \times <var:Z> \} \\ <var:B> := <var:B> + <var:A0> \\ \{ <var:w> = <var:Z> \land <var:B> = <nat:4> \times <var:Z> + <nat:7> \} \end{eqnarray} As a result , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:w> = <var:Z> }} <var:A1> := <var:w> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:4> ; <var:B> := <var:A1> <var:B> := <var:B> + <var:A0> {{ <var:B> = <nat:4> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:A1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:A1> = <var:Z> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:A1> = <nat:4> * <var:Z> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:A0> = <nat:7> /\ <var:B> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:B> = <nat:4> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 