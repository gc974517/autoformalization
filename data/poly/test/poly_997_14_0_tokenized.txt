\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:m0> := <nat:8> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:o> ; <var:m2> := <nat:5> ; <var:m2> := <var:m2> * <var:o> ; <var:m2> := <var:m2> * <var:o> ; <var:m3> := <nat:1> ; <var:m3> := <var:m3> * <var:o> ; <var:m3> := <var:m3> * <var:o> ; <var:m3> := <var:m3> * <var:o> ; <var:q> := <var:m3> ; <var:q> := <var:q> + <var:m2> ; <var:q> := <var:q> + <var:m1> ; <var:q> := <var:q> + <var:m0> \end{verbatim} Given --- with some positive integer coefficients $ <var:y> $ --- that $ <var:o> = <var:y> $ before running this series of instructions , it holds that we have $ <var:q> = <nat:1> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:8> $ when series of instructions has executed . \end{theorem} \begin{proof} The way to prove correctness for this code can be accomplished using Hoare techniques . Looking at the following lines of codeseen in our code segment , \begin{eqnarray} \{ <var:o> = <var:y> \} \, <var:m0> := <nat:8> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \} \, <var:m1> := <nat:8> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> \} \, <var:m1> := <var:m1> * <var:o> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \} \, <var:m2> := <nat:5> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \land <var:m2> = <nat:5> \} \end{eqnarray} This is guaranteed by the variable update law given by standard Hoare techniques . Taking a look at the proceeding bits of codein the program , we see \begin{eqnarray} \{ <var:o> = <var:y> \} \, <var:m0> := <nat:8> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \} \, <var:m1> := <nat:8> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> \} \, <var:m1> := <var:m1> * <var:o> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \} \, <var:m2> := <nat:5> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \land <var:m2> = <nat:5> \} \end{eqnarray} This is guaranteed by the environment update law defined in Hoare reasoning . Now , \begin{eqnarray} \{ <var:o> = <var:y> \} \, <var:m0> := <nat:8> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \} \, <var:m1> := <nat:8> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> \} \, <var:m1> := <var:m1> * <var:o> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \} \, <var:m2> := <nat:5> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \land <var:m2> = <nat:5> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \land <var:m2> = <nat:5> \} \, <var:m2> := <var:m2> * <var:o> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \land <var:m2> = <nat:5> * <var:y> \} \\ \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \land <var:m2> = <nat:5> * <var:y> \} \, <var:m2> := <var:m2> * <var:o> \, \{ <var:o> = <var:y> \land <var:m0> = <nat:8> \land <var:m1> = <nat:8> * <var:y> \land <var:m2> = <nat:5> * <var:y> ^ <nat:2> \} \end{eqnarray} This is known to be sound by the variable update scheme in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:o> = <var:y> }} <var:m0> := <nat:8> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:o> ; <var:m2> := <nat:5> ; <var:m2> := <var:m2> * <var:o> ; <var:m2> := <var:m2> * <var:o> ; <var:m3> := <nat:1> ; <var:m3> := <var:m3> * <var:o> ; <var:m3> := <var:m3> * <var:o> ; <var:m3> := <var:m3> * <var:o> ; <var:q> := <var:m3> ; <var:q> := <var:q> + <var:m2> ; <var:q> := <var:q> + <var:m1> ; <var:q> := <var:q> + <var:m0> {{ <var:q> = <nat:1> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:m2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:m2> = <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:m2> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:m2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:m3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:m2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:m2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:m2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:m2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:q> = <nat:1> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:8> * <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:m0> = <nat:8> /\ <var:q> = <nat:1> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 