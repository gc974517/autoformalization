\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:2> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:O> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:O> ; <var:Z2> := <var:Z2> * <var:O> ; <var:Z3> := <nat:3> ; <var:Z3> := <var:Z3> * <var:O> ; <var:Z3> := <var:Z3> * <var:O> ; <var:Z3> := <var:Z3> * <var:O> ; <var:u> := <var:Z3> ; <var:u> := <var:u> + <var:Z2> ; <var:u> := <var:u> + <var:Z1> ; <var:u> := <var:u> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Allow taking $ <var:N> \in \mathbb{N} $ it to be that $ <var:O> = <var:N> $ ahead of evaluating this segment of code , it holds that we see $ <var:u> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> $ after code segment has terminated . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:O> = <var:N> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \} \\ <var:Z1> := <nat:8> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \} \\ <var:Z1> := <var:Z1> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \} \\ <var:Z2> := <nat:1> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:Z2> = <nat:1> \} \\ <var:Z2> := <var:Z2> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:Z2> = <nat:1> \times <var:N> \} \\ <var:Z2> := <var:Z2> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:Z2> = <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:Z3> := <nat:3> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:Z2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:3> \} \\ <var:Z3> := <var:Z3> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:Z2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:N> \} \\ <var:Z3> := <var:Z3> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:Z2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:N> ^ <nat:2> \} \end{eqnarray} Advancing running this set of instructions results in : \begin{eqnarray} <var:Z3> := <var:Z3> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:Z2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:N> ^ <nat:3> \} \\ <var:u> := <var:Z3> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:Z2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:u> = <nat:3> \times <var:N> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:Z2> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:N> \land <var:u> = <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:Z1> ; \\ \{ <var:O> = <var:N> \land <var:Z0> = <nat:2> \land <var:u> = <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:8> \times <var:N> \} \end{eqnarray} Allowing running the code returns : \begin{eqnarray} <var:u> := <var:u> + <var:Z0> \\ \{ <var:O> = <var:N> \land <var:u> = <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:8> \times <var:N> + <nat:2> \} \end{eqnarray} Given the above , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:2> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:O> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:O> ; <var:Z2> := <var:Z2> * <var:O> ; <var:Z3> := <nat:3> ; <var:Z3> := <var:Z3> * <var:O> ; <var:Z3> := <var:Z3> * <var:O> ; <var:Z3> := <var:Z3> * <var:O> ; <var:u> := <var:Z3> ; <var:u> := <var:u> + <var:Z2> ; <var:u> := <var:u> + <var:Z1> ; <var:u> := <var:u> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:O> = <var:N> }} <def:poly> {{ <var:u> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:Z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:Z2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:Z2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:Z2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:Z2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:Z2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:Z2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:Z2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:u> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:N> /\ <var:u> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:u> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:u> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 