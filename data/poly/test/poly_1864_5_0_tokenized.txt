\begin{document} \begin{theorem} Take a series of instructions as \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:G> ; <var:K> := <var:U1> ; <var:K> := <var:K> + <var:U0> \end{verbatim} Assuming , assuming some $ <var:P> \in \mathbb{Z}^+ $ , that $ <var:G> = <var:P> $ ahead of interpreting our list of instructions , it holds that we have $ <var:K> = <nat:4> \cdot <var:P> + <nat:9> $ once code has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:P> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \} \\ <var:U1> := <nat:4> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \} \\ <var:U1> := <var:U1> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \cdot <var:P> \} \\ <var:K> := <var:U1> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:K> = <nat:4> \cdot <var:P> \} \\ <var:K> := <var:K> + <var:U0> \\ \{ <var:G> = <var:P> \land <var:K> = <nat:4> \cdot <var:P> + <nat:9> \} \end{eqnarray} Utilizing usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:G> = <var:P> }} <var:U0> := <nat:9> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:G> ; <var:K> := <var:U1> ; <var:K> := <var:K> + <var:U0> {{ <var:K> = <nat:4> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:K> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:K> = <nat:4> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 