\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:1> + <var:C> * <var:k> ; <var:C> := <var:C> * <var:k> ; <var:C> := <nat:3> + <var:C> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Allowing given any $ <var:q> \in \mathbb{Z}^+ $ that $ <var:k> = <var:q> $ ahead of evaluating this segment of code it must be that we see $ <var:C> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the code can be demonstrated using standard Hoare techniques . Moving forward , we have \begin{verbatim} { <var:k> = <var:q> } <var:C> := <nat:2> { <var:k> = <var:q> \land <var:C> = <nat:2> } { <var:k> = <var:q> \land <var:C> = <nat:2> } <var:C> := <nat:1> + <var:C> * <var:k> { <var:k> = <var:q> \land <var:C> = <nat:2> \times <var:q> + <nat:1> } { <var:k> = <var:q> \land <var:C> = <nat:2> \times <var:q> + <nat:1> } <var:C> := <var:C> * <var:k> { <var:k> = <var:q> \land <var:C> = <nat:2> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + } \end{verbatim} This is shown to be logically sound using the environment update rule defined by standard Hoare reasoning . Paying attention to the subsequent step contained in the program , we have \begin{verbatim} { <var:k> = <var:q> } <var:C> := <nat:2> { <var:k> = <var:q> \land <var:C> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:2> ; <var:C> := <nat:1> + <var:C> * <var:k> ; <var:C> := <var:C> * <var:k> ; <var:C> := <nat:3> + <var:C> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:k> = <var:q> }} <def:poly> {{ <var:C> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:C> = <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:C> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:C> = <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 