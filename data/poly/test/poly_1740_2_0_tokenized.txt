\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:s0> := <nat:1> ; <var:U> := <var:s0> \end{verbatim} Allowing $ <var:J> = <var:F> $ prior to the execution of this series of instructions , it follows that $ <var:U> = <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:J> = <var:F> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:J> = <var:F> \land <var:s0> = <nat:1> \} \\ <var:U> := <var:s0> \\ \{ <var:J> = <var:F> \land <var:U> = <nat:1> \} \end{eqnarray} Given the preceding argument , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:J> = <var:F> }} <var:s0> := <nat:1> ; <var:U> := <var:s0> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:F> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:F> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 