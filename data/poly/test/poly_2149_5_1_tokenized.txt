\begin{document} \begin{theorem} Take the following list of commands as \begin{verbatim} <var:b1> := <var:n> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:2> ; <var:V> := <var:b1> <var:V> := <var:V> + <var:b0> \end{verbatim} Assume ( taking $ <var:K> $ ) that $ <var:n> = <var:K> $ before executing the program it holds that we have $ <var:V> = <nat:2> * <var:K> + <nat:4> $ when series of commands has finished . \end{theorem} \begin{proof} Utilizing usual Hoare techniques returns : \begin{eqnarray} \{ <var:n> = <var:K> \} \\ <var:b1> := <var:n> ; \\ \{ <var:n> = <var:K> \land <var:b1> = <var:K> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:n> = <var:K> \land <var:b1> = <var:K> \land <var:b0> = <nat:4> \} \\ <var:b1> := <var:b1> * <nat:2> ; \\ \{ <var:n> = <var:K> \land <var:b1> = <nat:2> \times <var:K> \land <var:b0> = <nat:4> \} \\ <var:V> := <var:b1> \\ \{ <var:n> = <var:K> \land <var:b0> = <nat:4> \land <var:V> = <nat:2> \times <var:K> \} \\ <var:V> := <var:V> + <var:b0> \\ \{ <var:n> = <var:K> \land <var:V> = <nat:2> \times <var:K> + <nat:4> \} \end{eqnarray} Therefore , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:n> = <var:K> }} <var:b1> := <var:n> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:2> ; <var:V> := <var:b1> <var:V> := <var:V> + <var:b0> {{ <var:V> = <nat:2> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:b1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:b1> = <var:K> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:b1> = <nat:2> * <var:K> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:b0> = <nat:4> /\ <var:V> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:V> = <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 