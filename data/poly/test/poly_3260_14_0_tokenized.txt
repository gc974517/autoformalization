\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:8> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:Q> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:Q> ; <var:V2> := <var:V2> * <var:Q> ; <var:V3> := <nat:8> ; <var:V3> := <var:V3> * <var:Q> ; <var:V3> := <var:V3> * <var:Q> ; <var:V3> := <var:V3> * <var:Q> ; <var:Z> := <var:V3> ; <var:Z> := <var:Z> + <var:V2> ; <var:Z> := <var:Z> + <var:V1> ; <var:Z> := <var:Z> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:Q> = <var:O> $ before the evaluation of our code , it must be that we have $ <var:Z> = <nat:8> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the list of commands is done through Hoare reasoning . Moving forward , the environment update code letting $ <nat:8> $ as $ <var:V0>$ . This line transfers the precondition $ \{ <var:Q> = <var:O> \} $ as the postcondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \} $ . Advancing to the next step , we see the variable assignmet command giving $ <nat:5> $ to $ <var:V1>$ . This moves the condition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \} $ toward $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \} $ . Paying attention to the next bit of code found in the series of instructions , we see the statement \verb | <var:V1> := <var:V1> * <var:Q> ; | . This takes the condition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \} $ as the postcondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \} $ . This is deduced by the assignment rule given by Hoare techniques . Moving on to the next step , the statement yielding $ <nat:6> $ as $ <var:V2>$ . This redefines $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \} $ toward $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \} $ . This is guaranteed with the assignment law defined in Hoare logic . Shifting focus toward the upcoming line of code in our series of commands , we see the binding command yielding $ <var:V2> * <var:Q> $ to $ <var:V2>$ . This takes the precondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \} $ as the postcondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> \} $ . This is rigorously given by the assignment scheme obtained from Hoare reasoning . Advancing on , the binding command yielding $ <var:V2> * <var:Q> $ toward $ <var:V2>$ . This advances the condition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> \} $ toward the postcondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \} $ . Looking at the next line seen in our set of commands , the environment update command giving $ <nat:8> $ toward $ <var:V3>$ . This advances the condition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \} $ as $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:V3> = <nat:8> \} $ . This is sound through the assignment rule defined by typical Hoare techniques . Moving on , we see the assignment line \verb | <var:V3> := <var:V3> * <var:Q> ; | . This takes $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:V3> = <nat:8> \} $ toward the postcondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:V3> = <nat:8> \times <var:O> \} $ . This is guaranteed by the assignment scheme given by typical Hoare logic . Stepping through , we have the variable update code \verb | <var:V3> := <var:V3> * <var:Q> ; | . This code forwards $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:V3> = <nat:8> \times <var:O> \} $ toward the postcondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:V3> = <nat:8> \times <var:O> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment scheme given by typical Hoare techniques . Immediately following , the variable assignmet statement assigning $ <var:V3> * <var:Q> $ to $ <var:V3>$ . This forwards $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:V3> = <nat:8> \times <var:O> ^ <nat:2> \} $ into $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:V3> = <nat:8> \times <var:O> ^ <nat:3> \} $ . This is given by the assignment scheme obtained from typical Hoare logic . Moving on to the next line found in the series of commands , we see the variable binding command \verb | <var:Z> := <var:V3> ; | . This statement redefines the condition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:V3> = <nat:8> \times <var:O> ^ <nat:3> \} $ toward the condition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:Z> = <nat:8> \times <var:O> ^ <nat:3> \} $ . This is sound with the assignment rule defined by Hoare logic . Now , the variable update statement yielding $ <var:Z> + <var:V2> $ toward $ <var:Z>$ . This code redefines $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:V2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:Z> = <nat:8> \times <var:O> ^ <nat:3> \} $ into $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:Z> = <nat:8> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> \} $ . Considering the subsequent line of code seen in our segment of code , we have the binding line giving $ <var:Z> + <var:V1> $ into $ <var:Z>$ . This transfers the precondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:V1> = <nat:5> \times <var:O> \land <var:Z> = <nat:8> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> \} $ into the postcondition $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:Z> = <nat:8> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> \} $ . This is guaranteed with the assignment law obtained from Hoare reasoning . Honing in on the proceeding command contained in our list of instructions , we see the environment update command \verb | <var:Z> := <var:Z> + <var:V0> | . This advances $ \{ <var:Q> = <var:O> \land <var:V0> = <nat:8> \land <var:Z> = <nat:8> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> \} $ as the postcondition $ \{ <var:Q> = <var:O> \land <var:Z> = <nat:8> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> + <nat:8> \} $ . This is guaranteed with the assignment rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V0> := <nat:8> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:Q> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:Q> ; <var:V2> := <var:V2> * <var:Q> ; <var:V3> := <nat:8> ; <var:V3> := <var:V3> * <var:Q> ; <var:V3> := <var:V3> * <var:Q> ; <var:V3> := <var:V3> * <var:Q> ; <var:Z> := <var:V3> ; <var:Z> := <var:Z> + <var:V2> ; <var:Z> := <var:Z> + <var:V1> ; <var:Z> := <var:Z> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Q> = <var:O> }} <def:poly> {{ <var:Z> = <nat:8> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:V2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:V2> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:V2> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:V2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:V3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:V2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:V3> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:V2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:V3> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:V2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:V3> = <nat:8> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:V2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:Z> = <nat:8> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:5> * <var:O> /\ <var:Z> = <nat:8> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:V0> = <nat:8> /\ <var:Z> = <nat:8> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:Z> = <nat:8> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 