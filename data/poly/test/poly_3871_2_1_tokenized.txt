\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:7> ; <var:V> := <var:D0> \end{verbatim} Allow that $ <var:U> = <var:H> $ before interpreting this series of instructions it must be that we see $ <var:V> = <nat:7> $ after set of instructions has executed . \end{theorem} \begin{proof} Using Hoare logic results in : \begin{eqnarray} \{ <var:U> = <var:H> \} \\ <var:D0> := <nat:7> ; \\ \{ <var:U> = <var:H> \land <var:D0> = <nat:7> \} \\ <var:V> := <var:D0> \\ \{ <var:U> = <var:H> \land <var:V> = <nat:7> \} \end{eqnarray} Thusly , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:U> = <var:H> }} <var:D0> := <nat:7> ; <var:V> := <var:D0> {{ <var:V> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:V> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 