\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:6> ; <var:P1> := <nat:1> ; <var:P1> := <var:P1> * <var:J> ; <var:h> := <var:P1> ; <var:h> := <var:h> + <var:P0> \end{verbatim} Assume that $ <var:J> = <var:d> $ --- with some natural coefficients $ <var:d> $ --- prior to running this series of commands , it follows that $ <var:h> = <nat:1> \times <var:d> + <nat:6> $ . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:J> = <var:d> \} \\ <var:P0> := <nat:6> ; \\ \{ <var:J> = <var:d> \land <var:P0> = <nat:6> \} \\ <var:P1> := <nat:1> ; \\ \{ <var:J> = <var:d> \land <var:P0> = <nat:6> \land <var:P1> = <nat:1> \} \\ <var:P1> := <var:P1> * <var:J> ; \\ \{ <var:J> = <var:d> \land <var:P0> = <nat:6> \land <var:P1> = <nat:1> \cdot <var:d> \} \\ <var:h> := <var:P1> ; \\ \{ <var:J> = <var:d> \land <var:P0> = <nat:6> \land <var:h> = <nat:1> \cdot <var:d> \} \\ <var:h> := <var:h> + <var:P0> \\ \{ <var:J> = <var:d> \land <var:h> = <nat:1> \cdot <var:d> + <nat:6> \} \end{eqnarray} Therefore , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:J> = <var:d> }} <var:P0> := <nat:6> ; <var:P1> := <nat:1> ; <var:P1> := <var:P1> * <var:J> ; <var:h> := <var:P1> ; <var:h> := <var:h> + <var:P0> {{ <var:h> = <nat:1> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:P0> = <nat:6> /\ <var:h> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:d> /\ <var:h> = <nat:1> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 