\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as \begin{verbatim} <var:r1> := <var:x> ; <var:r2> := <var:r1> * <var:x> ; <var:r0> := <nat:3> ; <var:r2> := <var:r2> * <nat:4> ; <var:B> := <var:r2> <var:B> := <var:B> + <var:r0> \end{verbatim} Given given every $ <var:Y> \in \mathbb{Z}^+ $ $ <var:x> = <var:Y> $ ahead of evaluating the series of instructions then $ <var:B> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> $ after series of commands has terminated . \end{theorem} \begin{proof} The application of standard Hoare logic gives us : \begin{eqnarray} \{ <var:x> = <var:Y> \} \\ <var:r1> := <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:r1> = <var:Y> \} \\ <var:r2> := <var:r1> * <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:r1> = <var:Y> \land <var:r2> = <var:Y> ^ <nat:2> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:x> = <var:Y> \land <var:r1> = <var:Y> \land <var:r2> = <var:Y> ^ <nat:2> \land <var:r0> = <nat:3> \} \\ <var:r2> := <var:r2> * <nat:4> ; \\ \{ <var:x> = <var:Y> \land <var:r1> = <var:Y> \land <var:r2> = <nat:4> * <var:Y> ^ <nat:2> \land <var:r0> = <nat:3> \} \\ <var:B> := <var:r2> \\ \{ <var:x> = <var:Y> \land <var:r1> = <var:Y> \land <var:r0> = <nat:3> \land <var:B> = <nat:4> * <var:Y> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:r0> \\ \{ <var:x> = <var:Y> \land <var:B> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> \} \end{eqnarray} As a result , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:x> = <var:Y> }} <var:r1> := <var:x> ; <var:r2> := <var:r1> * <var:x> ; <var:r0> := <nat:3> ; <var:r2> := <var:r2> * <nat:4> ; <var:B> := <var:r2> <var:B> := <var:B> + <var:r0> {{ <var:B> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:r1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:r1> = <var:Y> /\ <var:r2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:r1> = <var:Y> /\ <var:r2> = <var:Y> ^ <nat:2> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:r1> = <var:Y> /\ <var:r2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:r1> = <var:Y> /\ <var:r0> = <nat:3> /\ <var:B> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:B> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 