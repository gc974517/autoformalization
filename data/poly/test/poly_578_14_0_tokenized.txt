\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:6> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:c> ; <var:g2> := <nat:5> ; <var:g2> := <var:g2> * <var:c> ; <var:g2> := <var:g2> * <var:c> ; <var:g3> := <nat:7> ; <var:g3> := <var:g3> * <var:c> ; <var:g3> := <var:g3> * <var:c> ; <var:g3> := <var:g3> * <var:c> ; <var:C> := <var:g3> ; <var:C> := <var:C> + <var:g2> ; <var:C> := <var:C> + <var:g1> ; <var:C> := <var:C> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:c> = <var:I> $ prior to interpreting our list of commands it must be that we see $ <var:C> = <nat:7> \cdot <var:I> ^ <nat:3> + <nat:5> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> + <nat:6> $ when list of commands exits . \end{theorem} \begin{proof} Utilizing typical Hoare logic produces : \begin{eqnarray} \{ <var:c> = <var:I> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \} \\ <var:g1> := <nat:6> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \} \\ <var:g1> := <var:g1> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \} \\ <var:g2> := <nat:5> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:g2> = <nat:5> \} \\ <var:g2> := <var:g2> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:g2> = <nat:5> \times <var:I> \} \\ <var:g2> := <var:g2> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:g2> = <nat:5> \times <var:I> ^ <nat:2> \} \\ <var:g3> := <nat:7> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:g2> = <nat:5> \times <var:I> ^ <nat:2> \land <var:g3> = <nat:7> \} \\ <var:g3> := <var:g3> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:g2> = <nat:5> \times <var:I> ^ <nat:2> \land <var:g3> = <nat:7> \times <var:I> \} \\ <var:g3> := <var:g3> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:g2> = <nat:5> \times <var:I> ^ <nat:2> \land <var:g3> = <nat:7> \times <var:I> ^ <nat:2> \} \\ <var:g3> := <var:g3> * <var:c> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:g2> = <nat:5> \times <var:I> ^ <nat:2> \land <var:g3> = <nat:7> \times <var:I> ^ <nat:3> \} \\ <var:C> := <var:g3> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:g2> = <nat:5> \times <var:I> ^ <nat:2> \land <var:C> = <nat:7> \times <var:I> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:g2> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:I> \land <var:C> = <nat:7> \times <var:I> ^ <nat:3> + <nat:5> \times <var:I> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:g1> ; \\ \{ <var:c> = <var:I> \land <var:g0> = <nat:6> \land <var:C> = <nat:7> \times <var:I> ^ <nat:3> + <nat:5> \times <var:I> ^ <nat:2> + <nat:6> \times <var:I> \} \\ <var:C> := <var:C> + <var:g0> \\ \{ <var:c> = <var:I> \land <var:C> = <nat:7> \times <var:I> ^ <nat:3> + <nat:5> \times <var:I> ^ <nat:2> + <nat:6> \times <var:I> + <nat:6> \} \end{eqnarray} Hence , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g0> := <nat:6> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:c> ; <var:g2> := <nat:5> ; <var:g2> := <var:g2> * <var:c> ; <var:g2> := <var:g2> * <var:c> ; <var:g3> := <nat:7> ; <var:g3> := <var:g3> * <var:c> ; <var:g3> := <var:g3> * <var:c> ; <var:g3> := <var:g3> * <var:c> ; <var:C> := <var:g3> ; <var:C> := <var:C> + <var:g2> ; <var:C> := <var:C> + <var:g1> ; <var:C> := <var:C> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:c> = <var:I> }} <def:poly> {{ <var:C> = <nat:7> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g2> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g2> = <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:g3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:C> = <nat:7> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:I> /\ <var:C> = <nat:7> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:g0> = <nat:6> /\ <var:C> = <nat:7> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:I> /\ <var:C> = <nat:7> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 