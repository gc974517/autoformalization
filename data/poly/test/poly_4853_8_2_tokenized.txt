\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:V> := <nat:3> ; <var:V> := <nat:2> + <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> ; <var:V> := <nat:2> + <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> \end{verbatim} Given that we have $ <var:Y> = <var:G> $ for all whole numbers $ <var:G> $ prior to interpreting the list of instructions , it must be that $ <var:V> = <nat:3> \cdot <var:G> ^ <nat:7> + <nat:2> \cdot <var:G> ^ <nat:6> + <nat:1> \cdot <var:G> ^ <nat:5> + <nat:2> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:3> $ after code segment has finished . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands is clear by usual Hoare logic . Advancing , we see \begin{verbatim} { <var:Y> = <var:G> } <var:V> := <nat:3> { <var:Y> = <var:G> \land <var:V> = <nat:3> } { <var:Y> = <var:G> \land <var:V> = <nat:3> } <var:V> := <nat:2> + <var:V> * <var:Y> { <var:Y> = <var:G> \land <var:V> = <nat:3> \times <var:G> + <nat:2> } { <var:Y> = <var:G> \land <var:V> = <nat:3> \times <var:G> + <nat:2> } <var:V> := <nat:1> + <var:V> * <var:Y> { <var:Y> = <var:G> \land <var:V> = <nat:3> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:1> } \end{verbatim} This is ensured with the rule defined in standard Hoare logic . Jumping to the proceeding lines in the code segment , \begin{verbatim} { <var:Y> = <var:G> } <var:V> := <nat:3> { <var:Y> = <var:G> \land <var:V> = <nat:3> } { <var:Y> = <var:G> \land <var:V> = <nat:3> } <var:V> := <nat:2> + <var:V> * <var:Y> { <var:Y> = <var:G> \land <var:V> = <nat:3> \times <var:G> + <nat:2> } { <var:Y> = <var:G> \land <var:V> = <nat:3> \times <var:G> + <nat:2> } <var:V> := <nat:1> + <var:V> * <var:Y> { <var:Y> = <var:G> \land <var:V> = <nat:3> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:1> } \end{verbatim} This is guaranteed by the assignment law found in typical Hoare logic . Taking a look at the upcoming statement seen in the code , we see \begin{verbatim} { <var:Y> = <var:G> } <var:V> := <nat:3> { <var:Y> = <var:G> \land <var:V> = <nat:3> } \end{verbatim} Focusing on the next command contained in our program , we see \begin{verbatim} { <var:Y> = <var:G> } <var:V> := <nat:3> { <var:Y> = <var:G> \land <var:V> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Y> = <var:G> }} <var:V> := <nat:3> ; <var:V> := <nat:2> + <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> ; <var:V> := <nat:2> + <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> {{ <var:V> = <nat:3> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:3> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:3> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 