\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <var:e> * <var:h> ; <var:e> := <nat:3> + <var:e> * <var:h> ; <var:e> := <nat:3> + <var:e> * <var:h> ; <var:e> := <var:e> * <var:h> ; <var:e> := <var:e> * <var:h> ; <var:e> := <nat:4> + <var:e> * <var:h> ; <var:e> := <nat:3> + <var:e> * <var:h> ; <var:e> := <nat:3> + <var:e> * <var:h> \end{verbatim} Given that we have $ <var:h> = <var:S> $ before interpreting our program it must be that we see $ <var:e> = <nat:4> \times <var:S> ^ <nat:8> + <nat:3> \times <var:S> ^ <nat:6> + <nat:3> \times <var:S> ^ <nat:5> + <nat:4> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:3> $ after list of commands has finished . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be seen by usual Hoare techniques . Moving onward , the variable binding command letting $ <nat:4> $ to $ <var:e>$ . This line takes the condition $ \{ <var:h> = <var:S> \} $ toward the condition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \} $ . This is guaranteed using the assignment scheme defined in Hoare techniques . Next , we see the assignment statement \verb | <var:e> := <var:e> * <var:h> ; | . This transfers the precondition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \} $ as the postcondition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> + \} $ . Immediately after , the variable update command binding $ <nat:3> + <var:e> * <var:h> $ toward $ <var:e>$ . This code moves the condition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> + \} $ into the condition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:2> + <nat:3> \} $ . This is guaranteed through the assignment scheme defined by Hoare reasoning . Moving onward , we see the variable binding code assigning $ <nat:3> + <var:e> * <var:h> $ toward $ <var:e>$ . This moves the precondition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:2> + <nat:3> \} $ into $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> + <nat:3> \} $ . Now , we have the binding line defining $ <var:e> * <var:h> $ to $ <var:e>$ . This code moves the condition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> + <nat:3> \} $ to $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + \} $ . Immediately after , we see the binding line \verb | <var:e> := <var:e> * <var:h> ; | . This moves $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + \} $ toward the condition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:5> + <nat:3> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + \} $ . Advancing to the next piece of code seen in our series of commands , we have the variable binding line \verb | <var:e> := <nat:4> + <var:e> * <var:h> ; | . This forwards $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:5> + <nat:3> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + \} $ into $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:6> + <nat:3> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:3> + <nat:4> \} $ . Following , we see the variable binding code defining $ <nat:3> + <var:e> * <var:h> $ toward $ <var:e>$ . This moves $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:6> + <nat:3> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:3> + <nat:4> \} $ into $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:7> + <nat:3> \times <var:S> ^ <nat:5> + <nat:3> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> + <nat:3> \} $ . Moving forward to the next step , we have the variable assignmet code \verb | <var:e> := <nat:3> + <var:e> * <var:h> | . This line transfers the condition $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:7> + <nat:3> \times <var:S> ^ <nat:5> + <nat:3> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> + <nat:3> \} $ into $ \{ <var:h> = <var:S> \land <var:e> = <nat:4> \times <var:S> ^ <nat:8> + <nat:3> \times <var:S> ^ <nat:6> + <nat:3> \times <var:S> ^ <nat:5> + <nat:4> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:3> \} $ . This is deduced through the assignment rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:h> = <var:S> }} <var:e> := <nat:4> ; <var:e> := <var:e> * <var:h> ; <var:e> := <nat:3> + <var:e> * <var:h> ; <var:e> := <nat:3> + <var:e> * <var:h> ; <var:e> := <var:e> * <var:h> ; <var:e> := <var:e> * <var:h> ; <var:e> := <nat:4> + <var:e> * <var:h> ; <var:e> := <nat:3> + <var:e> * <var:h> ; <var:e> := <nat:3> + <var:e> * <var:h> {{ <var:e> = <nat:4> * <var:S> ^ <nat:8> + <nat:3> * <var:S> ^ <nat:6> + <nat:3> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> * <var:S> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> * <var:S> ^ <nat:6> + <nat:3> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> * <var:S> ^ <nat:7> + <nat:3> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:e> = <nat:4> * <var:S> ^ <nat:8> + <nat:3> * <var:S> ^ <nat:6> + <nat:3> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 