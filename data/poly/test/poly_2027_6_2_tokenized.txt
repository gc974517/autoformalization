\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:m> := <nat:1> ; <var:m> := <var:m> * <var:G> ; <var:m> := <nat:4> + <var:m> * <var:G> ; <var:m> := <nat:3> + <var:m> * <var:G> ; <var:m> := <nat:2> + <var:m> * <var:G> ; <var:m> := <nat:3> + <var:m> * <var:G> \end{verbatim} Allowing $ <var:G> = <var:M> $ before evaluating the segment of code , then we have $ <var:m> = <nat:1> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is done by usual Hoare logic . Paying attention to the following statement contained in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:M> \} & <var:m> := <nat:1> & \{ <var:G> = <var:M> \land <var:m> = <nat:1> \} \end{tabular} This is guaranteed using the binding inference rule found in standard Hoare reasoning . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:M> \} & <var:m> := <nat:1> & \{ <var:G> = <var:M> \land <var:m> = <nat:1> \} \\ \{ <var:G> = <var:M> \land <var:m> = <nat:1> \} & <var:m> := <var:m> * <var:G> & \{ <var:G> = <var:M> \land <var:m> = <nat:1> \times <var:M> + \} \\ \{ <var:G> = <var:M> \land <var:m> = <nat:1> \times <var:M> + \} & <var:m> := <nat:4> + <var:m> * <var:G> & \{ <var:G> = <var:M> \land <var:m> = <nat:1> \times <var:M> ^ <nat:2> + <nat:4> \} \end{tabular} Stepping forward , \[ \begin{tabular} {rcl} \{ <var:G> = <var:M> \} & <var:m> := <nat:1> & \{ <var:G> = <var:M> \land <var:m> = <nat:1> \} \\ \{ <var:G> = <var:M> \land <var:m> = <nat:1> \} & <var:m> := <var:m> * <var:G> & \{ <var:G> = <var:M> \land <var:m> = <nat:1> \times <var:M> + \} \end{tabular} This is ensured with the assignment law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:G> = <var:M> }} <var:m> := <nat:1> ; <var:m> := <var:m> * <var:G> ; <var:m> := <nat:4> + <var:m> * <var:G> ; <var:m> := <nat:3> + <var:m> * <var:G> ; <var:m> := <nat:2> + <var:m> * <var:G> ; <var:m> := <nat:3> + <var:m> * <var:G> {{ <var:m> = <nat:1> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:m> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:m> = <nat:1> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:m> = <nat:1> * <var:M> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:m> = <nat:1> * <var:M> ^ <nat:3> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:m> = <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:m> = <nat:1> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 