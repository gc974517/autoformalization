\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:4> ; <var:E> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assuming $ <var:A> = <var:U> $ before executing the segment of code , then $ <var:E> = <nat:4> $ once set of commands has terminated . \end{theorem} \begin{proof} Note that the below decorated series of instructions . \begin{eqnarray} \{ <var:A> = <var:U> \} \\ <var:R0> := <nat:4> ; \\ \{ <var:A> = <var:U> \land <var:R0> = <nat:4> \} \\ <var:E> := <var:R0> \\ \{ <var:A> = <var:U> \land <var:E> = <nat:4> \} \end{eqnarray} Using Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:4> ; <var:E> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:A> = <var:U> }} <def:poly> {{ <var:E> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:U> /\ <var:E> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 