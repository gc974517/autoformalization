\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:G1> := <var:S> ; <var:G2> := <var:G1> * <var:S> ; <var:G3> := <var:G2> * <var:S> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:2> ; <var:p> := <var:G3> <var:p> := <var:p> + <var:G2> <var:p> := <var:p> + <var:G1> <var:p> := <var:p> + <var:G0> \end{verbatim} Allowing it to hold that $ <var:S> = <var:o> $ letting whole numbers $ <var:o> $ prior to running our program , it follows that $ <var:p> = <nat:2> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + <nat:3> $ once code has finished executing . \end{theorem} \begin{proof} The method of proof for our series of instructions is demonstrated through Hoare logic . Focusing on the next piece of code in the code segment , \begin{verbatim} { <var:S> = <var:o> } <var:G1> := <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> } \end{verbatim} Going forward , we have \begin{verbatim} { <var:S> = <var:o> } <var:G1> := <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> } { <var:S> = <var:o> \land <var:G1> = <var:o> } <var:G2> := <var:G1> * <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> } { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> } <var:G3> := <var:G2> * <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> \land <var:G3> = <var:o> ^ <nat:3> } \end{verbatim} This is shown with the assignment law of standard Hoare techniques . Observing the following bits of codecontained in the list of commands , \begin{verbatim} { <var:S> = <var:o> } <var:G1> := <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> } { <var:S> = <var:o> \land <var:G1> = <var:o> } <var:G2> := <var:G1> * <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> } { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> } <var:G3> := <var:G2> * <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> \land <var:G3> = <var:o> ^ <nat:3> } { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> \land <var:G3> = <var:o> ^ <nat:3> } <var:G0> := <nat:3> { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> \land <var:G3> = <var:o> ^ <nat:3> \land <var:G0> = <nat:3> } { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> \land <var:G3> = <var:o> ^ <nat:3> \land <var:G0> = <nat:3> } <var:G1> := <var:G1> * <nat:1> { <var:S> = <var:o> \land <var:G1> = <nat:1> \cdot <var:o> \land <var:G2> = <var:o> ^ <nat:2> \land <var:G3> = <var:o> ^ <nat:3> \land <var:G0> = <nat:3> } \end{verbatim} This is known to be sound by the binding rule found in standard Hoare logic . After , we see \begin{verbatim} { <var:S> = <var:o> } <var:G1> := <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> } { <var:S> = <var:o> \land <var:G1> = <var:o> } <var:G2> := <var:G1> * <var:S> { <var:S> = <var:o> \land <var:G1> = <var:o> \land <var:G2> = <var:o> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:S> = <var:o> }} <var:G1> := <var:S> ; <var:G2> := <var:G1> * <var:S> ; <var:G3> := <var:G2> * <var:S> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:2> ; <var:p> := <var:G3> <var:p> := <var:p> + <var:G2> <var:p> := <var:p> + <var:G1> <var:p> := <var:p> + <var:G0> {{ <var:p> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <var:o> /\ <var:G2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <var:o> /\ <var:G2> = <var:o> ^ <nat:2> /\ <var:G3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <var:o> /\ <var:G2> = <var:o> ^ <nat:2> /\ <var:G3> = <var:o> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <nat:1> * <var:o> /\ <var:G2> = <var:o> ^ <nat:2> /\ <var:G3> = <var:o> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <nat:1> * <var:o> /\ <var:G2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:G3> = <var:o> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <nat:1> * <var:o> /\ <var:G2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:o> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <nat:1> * <var:o> /\ <var:G2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:G0> = <nat:3> /\ <var:p> = <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G1> = <nat:1> * <var:o> /\ <var:G0> = <nat:3> /\ <var:p> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:G0> = <nat:3> /\ <var:p> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:p> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 