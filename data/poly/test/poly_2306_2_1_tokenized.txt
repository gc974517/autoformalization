\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:Q0> := <nat:6> ; <var:T> := <var:Q0> \end{verbatim} Assume that we have $ <var:W> = <var:P> $ before the evaluation of the list of commands , it must be that we have $ <var:T> = <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:W> = <var:P> \} \\ <var:Q0> := <nat:6> ; \\ \{ <var:W> = <var:P> \land <var:Q0> = <nat:6> \} \\ <var:T> := <var:Q0> \\ \{ <var:W> = <var:P> \land <var:T> = <nat:6> \} \end{eqnarray} As a result , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:W> = <var:P> }} <var:Q0> := <nat:6> ; <var:T> := <var:Q0> {{ <var:T> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:T> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 