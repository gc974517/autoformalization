\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:K> := <nat:2> ; <var:K> := <nat:2> + <var:K> * <var:J> \end{verbatim} Allow that we have $ <var:J> = <var:M> $ prior to evaluating this segment of code , then we see $ <var:K> = <nat:2> \cdot <var:M> + <nat:2> $ once series of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:M> \} \\ <var:K> := <nat:2> ; \\ \{ <var:J> = <var:M> \land <var:K> = <nat:2> \} \\ <var:K> := <nat:2> + <var:K> * <var:J> \\ \{ <var:J> = <var:M> \land <var:K> = <nat:2> * <var:M> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:J> = <var:M> }} <var:K> := <nat:2> ; <var:K> := <nat:2> + <var:K> * <var:J> {{ <var:K> = <nat:2> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:K> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:K> = <nat:2> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 