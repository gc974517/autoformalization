\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:c> ; <var:x2> := <var:x1> * <var:c> ; <var:x0> := <nat:7> ; <var:x2> := <var:x2> * <nat:5> ; <var:Q> := <var:x2> <var:Q> := <var:Q> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:c> = <var:i> $ ( given every $ <var:i> $ ) before the execution of the list of instructions then $ <var:Q> = <nat:5> \cdot <var:i> ^ <nat:2> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions can be demonstrated by Hoare reasoning . Advancing on , we have \begin{eqnarray} \{ <var:c> = <var:i> \} \, <var:x1> := <var:c> \, \{ <var:c> = <var:i> \land <var:x1> = <var:i> \} \\ \{ <var:c> = <var:i> \land <var:x1> = <var:i> \} \, <var:x2> := <var:x1> * <var:c> \, \{ <var:c> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \} \\ \{ <var:c> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \} \, <var:x0> := <nat:7> \, \{ <var:c> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \land <var:x0> = <nat:7> \} \\ \{ <var:c> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <var:i> ^ <nat:2> \land <var:x0> = <nat:7> \} \, <var:x2> := <var:x2> * <nat:5> \, \{ <var:c> = <var:i> \land <var:x1> = <var:i> \land <var:x2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:x0> = <nat:7> \} \end{eqnarray} This is rigorously given by the binding inference rule of usual Hoare logic . Paying attention to the following line of code in the list of commands , \begin{eqnarray} \{ <var:c> = <var:i> \} \, <var:x1> := <var:c> \, \{ <var:c> = <var:i> \land <var:x1> = <var:i> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:c> = <var:i> \} \, <var:x1> := <var:c> \, \{ <var:c> = <var:i> \land <var:x1> = <var:i> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x1> := <var:c> ; <var:x2> := <var:x1> * <var:c> ; <var:x0> := <nat:7> ; <var:x2> := <var:x2> * <nat:5> ; <var:Q> := <var:x2> <var:Q> := <var:Q> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <def:poly> {{ <var:Q> = <nat:5> * <var:i> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:x1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:x1> = <var:i> /\ <var:x2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:x1> = <var:i> /\ <var:x2> = <var:i> ^ <nat:2> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:x1> = <var:i> /\ <var:x2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:x1> = <var:i> /\ <var:x0> = <nat:7> /\ <var:Q> = <nat:5> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Q> = <nat:5> * <var:i> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 