\begin{document} \begin{theorem} Define the following series of instructions : \begin{verbatim} <var:M1> := <var:T> ; <var:M0> := <nat:5> ; <var:M1> := <var:M1> * <nat:7> ; <var:o> := <var:M1> <var:o> := <var:o> + <var:M0> \end{verbatim} Assume that we have $ <var:T> = <var:d> $ ahead of the evaluation of this code segment , it holds that $ <var:o> = <nat:7> \cdot <var:d> + <nat:5> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives : \begin{eqnarray} \{ <var:T> = <var:d> \} \\ <var:M1> := <var:T> ; \\ \{ <var:T> = <var:d> \land <var:M1> = <var:d> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:T> = <var:d> \land <var:M1> = <var:d> \land <var:M0> = <nat:5> \} \\ <var:M1> := <var:M1> * <nat:7> ; \\ \{ <var:T> = <var:d> \land <var:M1> = <nat:7> \times <var:d> \land <var:M0> = <nat:5> \} \\ <var:o> := <var:M1> \\ \{ <var:T> = <var:d> \land <var:M0> = <nat:5> \land <var:o> = <nat:7> \times <var:d> \} \\ <var:o> := <var:o> + <var:M0> \\ \{ <var:T> = <var:d> \land <var:o> = <nat:7> \times <var:d> + <nat:5> \} \end{eqnarray} Therefore , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:T> = <var:d> }} <var:M1> := <var:T> ; <var:M0> := <nat:5> ; <var:M1> := <var:M1> * <nat:7> ; <var:o> := <var:M1> <var:o> := <var:o> + <var:M0> {{ <var:o> = <nat:7> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:M1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:M1> = <var:d> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:M0> = <nat:5> /\ <var:o> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:o> = <nat:7> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 