\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:y0> := <nat:3> ; <var:F> := <var:y0> \end{verbatim} Allow ( taking natural coefficients $ <var:R> $ ) it to hold that $ <var:w> = <var:R> $ before the execution of our series of commands , it follows that we see $ <var:F> = <nat:3> $ once program has terminated . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be shown using usual Hoare reasoning . Advancing to the proceeding line of code found in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:R> \} & <var:y0> := <nat:3> & \{ <var:w> = <var:R> \land <var:y0> = <nat:3> \} \end{tabular} This is guaranteed with the law defined by Hoare techniques . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:R> \} & <var:y0> := <nat:3> & \{ <var:w> = <var:R> \land <var:y0> = <nat:3> \} \end{tabular} This is ensured using the variable binding rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:w> = <var:R> }} <var:y0> := <nat:3> ; <var:F> := <var:y0> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 