\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <nat:1> + <var:H> * <var:a> ; <var:H> := <nat:1> + <var:H> * <var:a> ; <var:H> := <nat:2> + <var:H> * <var:a> ; <var:H> := <var:H> * <var:a> ; <var:H> := <nat:2> + <var:H> * <var:a> ; <var:H> := <nat:4> + <var:H> * <var:a> ; <var:H> := <nat:2> + <var:H> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:a> = <var:Y> $ ahead of running the segment of code it holds that we see $ <var:H> = <nat:3> \times <var:Y> ^ <nat:7> + <nat:1> \times <var:Y> ^ <nat:6> + <nat:1> \times <var:Y> ^ <nat:5> + <nat:2> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} Applying Hoare techniques yields : \begin{eqnarray} \{ <var:a> = <var:Y> \} \\ <var:H> := <nat:3> ; \\ \{ <var:a> = <var:Y> \land <var:H> = <nat:3> \} \\ <var:H> := <nat:1> + <var:H> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:H> = <nat:3> \cdot <var:Y> + <nat:1> \} \\ <var:H> := <nat:1> + <var:H> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:H> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:1> \} \\ <var:H> := <nat:2> + <var:H> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:H> = <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:2> \} \\ <var:H> := <var:H> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:H> = <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + \} \\ <var:H> := <nat:2> + <var:H> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:H> = <nat:3> \cdot <var:Y> ^ <nat:5> + <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:2> \} \\ <var:H> := <nat:4> + <var:H> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:H> = <nat:3> \cdot <var:Y> ^ <nat:6> + <nat:1> \cdot <var:Y> ^ <nat:5> + <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> + <nat:4> \} \\ <var:H> := <nat:2> + <var:H> * <var:a> \\ \{ <var:a> = <var:Y> \land <var:H> = <nat:3> \cdot <var:Y> ^ <nat:7> + <nat:1> \cdot <var:Y> ^ <nat:6> + <nat:1> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:2> \} \end{eqnarray} Hence , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:3> ; <var:H> := <nat:1> + <var:H> * <var:a> ; <var:H> := <nat:1> + <var:H> * <var:a> ; <var:H> := <nat:2> + <var:H> * <var:a> ; <var:H> := <var:H> * <var:a> ; <var:H> := <nat:2> + <var:H> * <var:a> ; <var:H> := <nat:4> + <var:H> * <var:a> ; <var:H> := <nat:2> + <var:H> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:a> = <var:Y> }} <def:poly> {{ <var:H> = <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:H> = <nat:3> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:H> = <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:H> = <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:H> = <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:H> = <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:H> = <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:H> = <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 