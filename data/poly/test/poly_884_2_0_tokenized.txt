\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:6> ; <var:W> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Allow , given some integers $ <var:C> $ , that we have $ <var:g> = <var:C> $ prior to the evaluation of the series of instructions , it must be that $ <var:W> = <nat:6> $ after series of instructions terminates . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:g> = <var:C> \} \\ <var:P0> := <nat:6> ; \\ \{ <var:g> = <var:C> \land <var:P0> = <nat:6> \} \\ <var:W> := <var:P0> \\ \{ <var:g> = <var:C> \land <var:W> = <nat:6> \} \end{eqnarray} Therefore , this set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:W> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:g> = <var:C> }} <def:poly> {{ <var:W> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:C> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:C> /\ <var:W> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 