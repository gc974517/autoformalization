\begin{document} \begin{theorem} We define a program : \begin{verbatim} <var:C0> := <nat:6> ; <var:C1> := <nat:9> ; <var:C1> := <var:C1> * <var:Z> ; <var:C2> := <nat:7> ; <var:C2> := <var:C2> * <var:Z> ; <var:C2> := <var:C2> * <var:Z> ; <var:C3> := <nat:1> ; <var:C3> := <var:C3> * <var:Z> ; <var:C3> := <var:C3> * <var:Z> ; <var:C3> := <var:C3> * <var:Z> ; <var:x> := <var:C3> ; <var:x> := <var:x> + <var:C2> ; <var:x> := <var:x> + <var:C1> ; <var:x> := <var:x> + <var:C0> \end{verbatim} Allow it to hold that $ <var:Z> = <var:J> $ prior to the evaluation of the set of commands it holds that $ <var:x> = <nat:1> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:J> \} \\ <var:C0> := <nat:6> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \} \\ <var:C1> := <nat:9> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \} \\ <var:C1> := <var:C1> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \} \\ <var:C2> := <nat:7> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:C2> = <nat:7> \} \\ <var:C2> := <var:C2> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:C2> = <nat:7> \cdot <var:J> \} \\ <var:C2> := <var:C2> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:C2> = <nat:7> \cdot <var:J> ^ <nat:2> \} \\ <var:C3> := <nat:1> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:C2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:C3> = <nat:1> \} \\ <var:C3> := <var:C3> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:C2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:C3> = <nat:1> \cdot <var:J> \} \\ <var:C3> := <var:C3> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:C2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:C3> = <nat:1> \cdot <var:J> ^ <nat:2> \} \\ <var:C3> := <var:C3> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:C2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:C3> = <nat:1> \cdot <var:J> ^ <nat:3> \} \\ <var:x> := <var:C3> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:C2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:x> = <nat:1> \cdot <var:J> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:C2> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:9> \cdot <var:J> \land <var:x> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:C1> ; \\ \{ <var:Z> = <var:J> \land <var:C0> = <nat:6> \land <var:x> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> + <nat:9> \cdot <var:J> \} \\ <var:x> := <var:x> + <var:C0> \\ \{ <var:Z> = <var:J> \land <var:x> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> + <nat:9> \cdot <var:J> + <nat:6> \} \end{eqnarray} Applying usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Z> = <var:J> }} <var:C0> := <nat:6> ; <var:C1> := <nat:9> ; <var:C1> := <var:C1> * <var:Z> ; <var:C2> := <nat:7> ; <var:C2> := <var:C2> * <var:Z> ; <var:C2> := <var:C2> * <var:Z> ; <var:C3> := <nat:1> ; <var:C3> := <var:C3> * <var:Z> ; <var:C3> := <var:C3> * <var:Z> ; <var:C3> := <var:C3> * <var:Z> ; <var:x> := <var:C3> ; <var:x> := <var:x> + <var:C2> ; <var:x> := <var:x> + <var:C1> ; <var:x> := <var:x> + <var:C0> {{ <var:x> = <nat:1> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:C2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:C2> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:C2> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:C2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:C3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:C2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:C2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:C2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:C2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:x> = <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:9> * <var:J> /\ <var:x> = <nat:1> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:C0> = <nat:6> /\ <var:x> = <nat:1> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:x> = <nat:1> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 