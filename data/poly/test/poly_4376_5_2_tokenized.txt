\begin{document} \begin{theorem} Define the following code in \emph{Imp} as \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <var:a> * <var:I> ; <var:a> := <nat:2> + <var:a> * <var:I> ; <var:a> := <var:a> * <var:I> ; <var:a> := <nat:1> + <var:a> * <var:I> \end{verbatim} Allowing it to be that $ <var:I> = <var:B> $ before the execution of the set of commands , it must be that $ <var:a> = <nat:1> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:B> \} \\ <var:a> := <nat:1> ; \\ \{ <var:I> = <var:B> \land <var:a> = <nat:1> \} \\ <var:a> := <var:a> * <var:I> ; \\ \{ <var:I> = <var:B> \land <var:a> = <nat:1> * <var:B> + \} \\ <var:a> := <nat:2> + <var:a> * <var:I> ; \\ \{ <var:I> = <var:B> \land <var:a> = <nat:1> * <var:B> ^ <nat:2> + <nat:2> \} \\ <var:a> := <var:a> * <var:I> ; \\ \{ <var:I> = <var:B> \land <var:a> = <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + \} \\ <var:a> := <nat:1> + <var:a> * <var:I> \\ \{ <var:I> = <var:B> \land <var:a> = <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:I> = <var:B> }} <var:a> := <nat:1> ; <var:a> := <var:a> * <var:I> ; <var:a> := <nat:2> + <var:a> * <var:I> ; <var:a> := <var:a> * <var:I> ; <var:a> := <nat:1> + <var:a> * <var:I> {{ <var:a> = <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:a> = <nat:1> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:a> = <nat:1> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:a> = <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:a> = <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 