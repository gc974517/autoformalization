\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U1> := <var:I> ; <var:U2> := <var:U1> * <var:I> ; <var:U3> := <var:U2> * <var:I> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:7> ; <var:U2> := <var:U2> * <nat:1> ; <var:U3> := <var:U3> * <nat:5> ; <var:E> := <var:U3> <var:E> := <var:E> + <var:U2> <var:E> := <var:E> + <var:U1> <var:E> := <var:E> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- letting positive coefficients $ <var:N> $ --- it to be that $ <var:I> = <var:N> $ prior to the execution of the series of instructions , it must be that $ <var:E> = <nat:5> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:7> \cdot <var:N> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for our code can be done through Hoare techniques . Advancing on , we have \verb | { <var:I> = <var:N> } <var:U1> := <var:I> { <var:I> = <var:N> \land <var:U1> = <var:N> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <var:N> } <var:U2> := <var:U1> * <var:I> { <var:I> = <var:N> \land <var:U1> = <var:N> \land <var:U2> = <var:N> ^ <nat:2> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <var:N> \land <var:U2> = <var:N> ^ <nat:2> } <var:U3> := <var:U2> * <var:I> { <var:I> = <var:N> \land <var:U1> = <var:N> \land <var:U2> = <var:N> ^ <nat:2> \land <var:U3> = <var:N> ^ <nat:3> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <var:N> \land <var:U2> = <var:N> ^ <nat:2> \land <var:U3> = <var:N> ^ <nat:3> } <var:U0> := <nat:9> { <var:I> = <var:N> \land <var:U1> = <var:N> \land <var:U2> = <var:N> ^ <nat:2> \land <var:U3> = <var:N> ^ <nat:3> \land <var:U0> = <nat:9> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <var:N> \land <var:U2> = <var:N> ^ <nat:2> \land <var:U3> = <var:N> ^ <nat:3> \land <var:U0> = <nat:9> } <var:U1> := <var:U1> * <nat:7> { <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U2> = <var:N> ^ <nat:2> \land <var:U3> = <var:N> ^ <nat:3> \land <var:U0> = <nat:9> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U2> = <var:N> ^ <nat:2> \land <var:U3> = <var:N> ^ <nat:3> \land <var:U0> = <nat:9> } <var:U2> := <var:U2> * <nat:1> { <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U2> = <nat:1> * <var:N> ^ <nat:2> \land <var:U3> = <var:N> ^ <nat:3> \land <var:U0> = <nat:9> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U2> = <nat:1> * <var:N> ^ <nat:2> \land <var:U3> = <var:N> ^ <nat:3> \land <var:U0> = <nat:9> } <var:U3> := <var:U3> * <nat:5> { <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U2> = <nat:1> * <var:N> ^ <nat:2> \land <var:U3> = <nat:5> * <var:N> ^ <nat:3> \land <var:U0> = <nat:9> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U2> = <nat:1> * <var:N> ^ <nat:2> \land <var:U3> = <nat:5> * <var:N> ^ <nat:3> \land <var:U0> = <nat:9> } <var:E> := <var:U3{ <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U2> = <nat:1> * <var:N> ^ <nat:2> \land <var:U0> = <nat:9> \land <var:E> = <nat:5> * <var:N> ^ <nat:3> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U2> = <nat:1> * <var:N> ^ <nat:2> \land <var:U0> = <nat:9> \land <var:E> = <nat:5> * <var:N> ^ <nat:3> } <var:E> := <var:E> + <var:U2{ <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U0> = <nat:9> \land <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> } | , \verb | { <var:I> = <var:N> \land <var:U1> = <nat:7> * <var:N> \land <var:U0> = <nat:9> \land <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> } <var:E> := <var:E> + <var:U1{ <var:I> = <var:N> \land <var:U0> = <nat:9> \land <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:7> * <var:N> } | and \verb | { <var:I> = <var:N> \land <var:U0> = <nat:9> \land <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:7> * <var:N> } <var:E> := <var:E> + <var:U0{ <var:I> = <var:N> \land <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:9> } | . This is given using the assignment law in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:I> ; <var:U2> := <var:U1> * <var:I> ; <var:U3> := <var:U2> * <var:I> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:7> ; <var:U2> := <var:U2> * <nat:1> ; <var:U3> := <var:U3> * <nat:5> ; <var:E> := <var:U3> <var:E> := <var:E> + <var:U2> <var:E> := <var:E> + <var:U1> <var:E> := <var:E> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:I> = <var:N> }} <def:poly> {{ <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <var:N> /\ <var:U2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <var:N> /\ <var:U2> = <var:N> ^ <nat:2> /\ <var:U3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <var:N> /\ <var:U2> = <var:N> ^ <nat:2> /\ <var:U3> = <var:N> ^ <nat:3> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <nat:7> * <var:N> /\ <var:U2> = <var:N> ^ <nat:2> /\ <var:U3> = <var:N> ^ <nat:3> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <nat:7> * <var:N> /\ <var:U2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:U3> = <var:N> ^ <nat:3> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <nat:7> * <var:N> /\ <var:U2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:U3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <nat:7> * <var:N> /\ <var:U2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:U0> = <nat:9> /\ <var:E> = <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U1> = <nat:7> * <var:N> /\ <var:U0> = <nat:9> /\ <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:U0> = <nat:9> /\ <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:E> = <nat:5> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 