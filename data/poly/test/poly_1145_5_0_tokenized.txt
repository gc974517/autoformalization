\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:O> ; <var:X> := <var:V1> ; <var:X> := <var:X> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:O> = <var:U> $ prior to running our code segment , it follows that $ <var:X> = <nat:4> \times <var:U> + <nat:4> $ after series of commands terminates . \end{theorem} \begin{proof} Proving correctness for the series of commands can be shown with the below decorated list of commands . \begin{eqnarray} \{ <var:O> = <var:U> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:O> = <var:U> \land <var:V0> = <nat:4> \} \\ <var:V1> := <nat:4> ; \\ \{ <var:O> = <var:U> \land <var:V0> = <nat:4> \land <var:V1> = <nat:4> \} \\ <var:V1> := <var:V1> * <var:O> ; \\ \{ <var:O> = <var:U> \land <var:V0> = <nat:4> \land <var:V1> = <nat:4> \times <var:U> \} \\ <var:X> := <var:V1> ; \\ \{ <var:O> = <var:U> \land <var:V0> = <nat:4> \land <var:X> = <nat:4> \times <var:U> \} \\ <var:X> := <var:X> + <var:V0> \\ \{ <var:O> = <var:U> \land <var:X> = <nat:4> \times <var:U> + <nat:4> \} \end{eqnarray} Applying typical Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:O> ; <var:X> := <var:V1> ; <var:X> := <var:X> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:O> = <var:U> }} <def:poly> {{ <var:X> = <nat:4> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:U> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:U> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:U> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:U> /\ <var:V0> = <nat:4> /\ <var:X> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:U> /\ <var:X> = <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 