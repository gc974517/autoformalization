\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:H> ; <var:X2> := <var:X1> * <var:H> ; <var:X0> := <nat:1> ; <var:X1> := <var:X1> * <nat:1> ; <var:X2> := <var:X2> * <nat:6> ; <var:w> := <var:X2> <var:w> := <var:w> + <var:X1> <var:w> := <var:w> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:H> = <var:o> $ before the evaluation of this list of commands it holds that we see $ <var:w> = <nat:6> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:o> \} \\ <var:X1> := <var:H> ; \\ \{ <var:H> = <var:o> \land <var:X1> = <var:o> \} \\ <var:X2> := <var:X1> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:X1> = <var:o> \land <var:X2> = <var:o> ^ <nat:2> \} \\ <var:X0> := <nat:1> ; \\ \{ <var:H> = <var:o> \land <var:X1> = <var:o> \land <var:X2> = <var:o> ^ <nat:2> \land <var:X0> = <nat:1> \} \\ <var:X1> := <var:X1> * <nat:1> ; \\ \{ <var:H> = <var:o> \land <var:X1> = <nat:1> \times <var:o> \land <var:X2> = <var:o> ^ <nat:2> \land <var:X0> = <nat:1> \} \\ <var:X2> := <var:X2> * <nat:6> ; \\ \{ <var:H> = <var:o> \land <var:X1> = <nat:1> \times <var:o> \land <var:X2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:X0> = <nat:1> \} \\ <var:w> := <var:X2> \\ \{ <var:H> = <var:o> \land <var:X1> = <nat:1> \times <var:o> \land <var:X0> = <nat:1> \land <var:w> = <nat:6> \times <var:o> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:X1> \\ \{ <var:H> = <var:o> \land <var:X0> = <nat:1> \land <var:w> = <nat:6> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> \} \\ <var:w> := <var:w> + <var:X0> \\ \{ <var:H> = <var:o> \land <var:w> = <nat:6> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + <nat:1> \} \end{eqnarray} The application of standard Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X1> := <var:H> ; <var:X2> := <var:X1> * <var:H> ; <var:X0> := <nat:1> ; <var:X1> := <var:X1> * <nat:1> ; <var:X2> := <var:X2> * <nat:6> ; <var:w> := <var:X2> <var:w> := <var:w> + <var:X1> <var:w> := <var:w> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:H> = <var:o> }} <def:poly> {{ <var:w> = <nat:6> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:X1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:X1> = <var:o> /\ <var:X2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:X1> = <var:o> /\ <var:X2> = <var:o> ^ <nat:2> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:X1> = <nat:1> * <var:o> /\ <var:X2> = <var:o> ^ <nat:2> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:X1> = <nat:1> * <var:o> /\ <var:X2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:X1> = <nat:1> * <var:o> /\ <var:X0> = <nat:1> /\ <var:w> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:X0> = <nat:1> /\ <var:w> = <nat:6> * <var:o> ^ <nat:2> + <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:w> = <nat:6> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 