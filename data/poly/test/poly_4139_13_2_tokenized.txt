\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:G> := <nat:2> ; <var:G> := <var:G> * <var:g> ; <var:G> := <nat:1> + <var:G> * <var:g> ; <var:G> := <nat:2> + <var:G> * <var:g> ; <var:G> := <var:G> * <var:g> ; <var:G> := <nat:1> + <var:G> * <var:g> ; <var:G> := <var:G> * <var:g> ; <var:G> := <nat:3> + <var:G> * <var:g> ; <var:G> := <var:G> * <var:g> ; <var:G> := <nat:1> + <var:G> * <var:g> ; <var:G> := <nat:2> + <var:G> * <var:g> ; <var:G> := <nat:2> + <var:G> * <var:g> ; <var:G> := <nat:1> + <var:G> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:g> = <var:V> $ ahead of the execution of the code it must be that we see $ <var:G> = <nat:2> \cdot <var:V> ^ <nat:12> + <nat:1> \cdot <var:V> ^ <nat:10> + <nat:2> \cdot <var:V> ^ <nat:9> + <nat:1> \cdot <var:V> ^ <nat:7> + <nat:3> \cdot <var:V> ^ <nat:5> + <nat:1> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + <nat:1> $ when program executes . \end{theorem} \begin{proof} The flow of logic for our list of commands is shown with standard Hoare logic . Advancing , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:V> \} & <var:G> := <nat:2> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \} & <var:G> := <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> + \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> + \} & <var:G> := <nat:1> + <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:2> + <nat:1> \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:2> + <nat:1> \} & <var:G> := <nat:2> + <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> + <nat:2> \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> + <nat:2> \} & <var:G> := <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:4> + <nat:1> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:4> + <nat:1> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + \} & <var:G> := <nat:1> + <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:5> + <nat:1> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:1> \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:5> + <nat:1> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:1> \} & <var:G> := <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:6> + <nat:1> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> + \} \end{tabular} Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:V> \} & <var:G> := <nat:2> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \} & <var:G> := <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> + \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> + \} & <var:G> := <nat:1> + <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> ^ <nat:2> + <nat:1> \} \end{tabular} Considering the following bits of codefound in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:V> \} & <var:G> := <nat:2> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \} \\ \{ <var:g> = <var:V> \land <var:G> = <nat:2> \} & <var:G> := <var:G> * <var:g> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \cdot <var:V> + \} \end{tabular} Advancing , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:V> \} & <var:G> := <nat:2> & \{ <var:g> = <var:V> \land <var:G> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:2> ; <var:G> := <var:G> * <var:g> ; <var:G> := <nat:1> + <var:G> * <var:g> ; <var:G> := <nat:2> + <var:G> * <var:g> ; <var:G> := <var:G> * <var:g> ; <var:G> := <nat:1> + <var:G> * <var:g> ; <var:G> := <var:G> * <var:g> ; <var:G> := <nat:3> + <var:G> * <var:g> ; <var:G> := <var:G> * <var:g> ; <var:G> := <nat:1> + <var:G> * <var:g> ; <var:G> := <nat:2> + <var:G> * <var:g> ; <var:G> := <nat:2> + <var:G> * <var:g> ; <var:G> := <nat:1> + <var:G> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:g> = <var:V> }} <def:poly> {{ <var:G> = <nat:2> * <var:V> ^ <nat:12> + <nat:1> * <var:V> ^ <nat:10> + <nat:2> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:3> + <nat:3> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:8> + <nat:2> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:11> + <nat:1> * <var:V> ^ <nat:9> + <nat:2> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:G> = <nat:2> * <var:V> ^ <nat:12> + <nat:1> * <var:V> ^ <nat:10> + <nat:2> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 