\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:7> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:f> ; <var:B> := <var:L1> ; <var:B> := <var:B> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Assume that $ <var:f> = <var:i> $ prior to executing this series of commands , it follows that $ <var:B> = <nat:5> \times <var:i> + <nat:7> $ once code has exited . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:f> = <var:i> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:f> = <var:i> \land <var:L0> = <nat:7> \} \\ <var:L1> := <nat:5> ; \\ \{ <var:f> = <var:i> \land <var:L0> = <nat:7> \land <var:L1> = <nat:5> \} \\ <var:L1> := <var:L1> * <var:f> ; \\ \{ <var:f> = <var:i> \land <var:L0> = <nat:7> \land <var:L1> = <nat:5> * <var:i> \} \\ <var:B> := <var:L1> ; \\ \{ <var:f> = <var:i> \land <var:L0> = <nat:7> \land <var:B> = <nat:5> * <var:i> \} \\ <var:B> := <var:B> + <var:L0> \\ \{ <var:f> = <var:i> \land <var:B> = <nat:5> * <var:i> + <nat:7> \} \end{eqnarray} Given the above , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:7> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:f> ; <var:B> := <var:L1> ; <var:B> := <var:B> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:f> = <var:i> }} <def:poly> {{ <var:B> = <nat:5> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:L0> = <nat:7> /\ <var:B> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:B> = <nat:5> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 