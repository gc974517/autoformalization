\begin{document} \begin{theorem} Define a list of instructions as \begin{verbatim} <var:U0> := <nat:9> ; <var:U2> := <nat:5> ; <var:U2> := <var:U2> * <var:s> ; <var:U2> := <var:U2> * <var:s> ; <var:m> := <var:U2> ; <var:m> := <var:m> + <var:U0> \end{verbatim} Allowing that we have $ <var:s> = <var:x> $ ahead of the evaluation of this code , it holds that we see $ <var:m> = <nat:5> * <var:x> ^ <nat:2> + <nat:9> $ after series of instructions terminates . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives us : \begin{eqnarray} \{ <var:s> = <var:x> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:s> = <var:x> \land <var:U0> = <nat:9> \} \\ <var:U2> := <nat:5> ; \\ \{ <var:s> = <var:x> \land <var:U0> = <nat:9> \land <var:U2> = <nat:5> \} \\ <var:U2> := <var:U2> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:U0> = <nat:9> \land <var:U2> = <nat:5> * <var:x> \} \\ <var:U2> := <var:U2> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:U0> = <nat:9> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \} \\ <var:m> := <var:U2> ; \\ \{ <var:s> = <var:x> \land <var:U0> = <nat:9> \land <var:m> = <nat:5> * <var:x> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:U0> \\ \{ <var:s> = <var:x> \land <var:m> = <nat:5> * <var:x> ^ <nat:2> + <nat:9> \} \end{eqnarray} Therefore , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:s> = <var:x> }} <var:U0> := <nat:9> ; <var:U2> := <nat:5> ; <var:U2> := <var:U2> * <var:s> ; <var:U2> := <var:U2> * <var:s> ; <var:m> := <var:U2> ; <var:m> := <var:m> + <var:U0> {{ <var:m> = <nat:5> * <var:x> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:U0> = <nat:9> /\ <var:m> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:m> = <nat:5> * <var:x> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 