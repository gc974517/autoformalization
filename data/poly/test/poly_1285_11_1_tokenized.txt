\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:B1> := <var:n> ; <var:B2> := <var:B1> * <var:n> ; <var:B3> := <var:B2> * <var:n> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:8> ; <var:v> := <var:B3> <var:v> := <var:v> + <var:B2> <var:v> := <var:v> + <var:B1> <var:v> := <var:v> + <var:B0> \end{verbatim} Assume that we have $ <var:n> = <var:O> $ before executing the set of commands it follows that we have $ <var:v> = <nat:8> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:7> $ once list of instructions is done . \end{theorem} \begin{proof} Using standard Hoare logic produces : \begin{eqnarray} \{ <var:n> = <var:O> \} \\ <var:B1> := <var:n> ; \\ \{ <var:n> = <var:O> \land <var:B1> = <var:O> \} \\ <var:B2> := <var:B1> * <var:n> ; \\ \{ <var:n> = <var:O> \land <var:B1> = <var:O> \land <var:B2> = <var:O> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:n> ; \\ \{ <var:n> = <var:O> \land <var:B1> = <var:O> \land <var:B2> = <var:O> ^ <nat:2> \land <var:B3> = <var:O> ^ <nat:3> \} \\ <var:B0> := <nat:7> ; \\ \{ <var:n> = <var:O> \land <var:B1> = <var:O> \land <var:B2> = <var:O> ^ <nat:2> \land <var:B3> = <var:O> ^ <nat:3> \land <var:B0> = <nat:7> \} \\ <var:B1> := <var:B1> * <nat:1> ; \\ \{ <var:n> = <var:O> \land <var:B1> = <nat:1> \cdot <var:O> \land <var:B2> = <var:O> ^ <nat:2> \land <var:B3> = <var:O> ^ <nat:3> \land <var:B0> = <nat:7> \} \\ <var:B2> := <var:B2> * <nat:1> ; \\ \{ <var:n> = <var:O> \land <var:B1> = <nat:1> \cdot <var:O> \land <var:B2> = <nat:1> \cdot <var:O> ^ <nat:2> \land <var:B3> = <var:O> ^ <nat:3> \land <var:B0> = <nat:7> \} \\ <var:B3> := <var:B3> * <nat:8> ; \\ \{ <var:n> = <var:O> \land <var:B1> = <nat:1> \cdot <var:O> \land <var:B2> = <nat:1> \cdot <var:O> ^ <nat:2> \land <var:B3> = <nat:8> \cdot <var:O> ^ <nat:3> \land <var:B0> = <nat:7> \} \\ <var:v> := <var:B3> \\ \{ <var:n> = <var:O> \land <var:B1> = <nat:1> \cdot <var:O> \land <var:B2> = <nat:1> \cdot <var:O> ^ <nat:2> \land <var:B0> = <nat:7> \land <var:v> = <nat:8> \cdot <var:O> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:B2> \\ \{ <var:n> = <var:O> \land <var:B1> = <nat:1> \cdot <var:O> \land <var:B0> = <nat:7> \land <var:v> = <nat:8> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:B1> \\ \{ <var:n> = <var:O> \land <var:B0> = <nat:7> \land <var:v> = <nat:8> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> \} \\ <var:v> := <var:v> + <var:B0> \\ \{ <var:n> = <var:O> \land <var:v> = <nat:8> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:7> \} \end{eqnarray} Hence , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:n> = <var:O> }} <var:B1> := <var:n> ; <var:B2> := <var:B1> * <var:n> ; <var:B3> := <var:B2> * <var:n> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:8> ; <var:v> := <var:B3> <var:v> := <var:v> + <var:B2> <var:v> := <var:v> + <var:B1> <var:v> := <var:v> + <var:B0> {{ <var:v> = <nat:8> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <var:O> /\ <var:B2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <var:O> /\ <var:B2> = <var:O> ^ <nat:2> /\ <var:B3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <var:O> /\ <var:B2> = <var:O> ^ <nat:2> /\ <var:B3> = <var:O> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <nat:1> * <var:O> /\ <var:B2> = <var:O> ^ <nat:2> /\ <var:B3> = <var:O> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <nat:1> * <var:O> /\ <var:B2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:B3> = <var:O> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <nat:1> * <var:O> /\ <var:B2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:B3> = <nat:8> * <var:O> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <nat:1> * <var:O> /\ <var:B2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:B0> = <nat:7> /\ <var:v> = <nat:8> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B1> = <nat:1> * <var:O> /\ <var:B0> = <nat:7> /\ <var:v> = <nat:8> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:B0> = <nat:7> /\ <var:v> = <nat:8> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:v> = <nat:8> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 