\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as \begin{verbatim} <var:T> := <nat:4> ; <var:T> := <var:T> * <var:h> ; <var:T> := <nat:3> + <var:T> * <var:h> ; <var:T> := <nat:2> + <var:T> * <var:h> ; <var:T> := <nat:3> + <var:T> * <var:h> ; <var:T> := <nat:1> + <var:T> * <var:h> \end{verbatim} Given that we have $ <var:h> = <var:z> $ prior to interpreting our list of commands , it follows that $ <var:T> = <nat:4> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> $ when list of instructions has terminated . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:h> = <var:z> \} \\ <var:T> := <nat:4> ; \\ \{ <var:h> = <var:z> \land <var:T> = <nat:4> \} \\ <var:T> := <var:T> * <var:h> ; \\ \{ <var:h> = <var:z> \land <var:T> = <nat:4> \times <var:z> + \} \\ <var:T> := <nat:3> + <var:T> * <var:h> ; \\ \{ <var:h> = <var:z> \land <var:T> = <nat:4> \times <var:z> ^ <nat:2> + <nat:3> \} \\ <var:T> := <nat:2> + <var:T> * <var:h> ; \\ \{ <var:h> = <var:z> \land <var:T> = <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> + <nat:2> \} \\ <var:T> := <nat:3> + <var:T> * <var:h> ; \\ \{ <var:h> = <var:z> \land <var:T> = <nat:4> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:3> \} \\ <var:T> := <nat:1> + <var:T> * <var:h> \\ \{ <var:h> = <var:z> \land <var:T> = <nat:4> \times <var:z> ^ <nat:5> + <nat:3> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:1> \} \end{eqnarray} Therefore , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:h> = <var:z> }} <var:T> := <nat:4> ; <var:T> := <var:T> * <var:h> ; <var:T> := <nat:3> + <var:T> * <var:h> ; <var:T> := <nat:2> + <var:T> * <var:h> ; <var:T> := <nat:3> + <var:T> * <var:h> ; <var:T> := <nat:1> + <var:T> * <var:h> {{ <var:T> = <nat:4> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:T> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:T> = <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:T> = <nat:4> * <var:z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:T> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:T> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:T> = <nat:4> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 