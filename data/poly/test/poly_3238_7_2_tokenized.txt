\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V> := <nat:2> ; <var:V> := <nat:4> + <var:V> * <var:R> ; <var:V> := <nat:4> + <var:V> * <var:R> ; <var:V> := <var:V> * <var:R> ; <var:V> := <nat:3> + <var:V> * <var:R> ; <var:V> := <nat:1> + <var:V> * <var:R> ; <var:V> := <nat:4> + <var:V> * <var:R> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Allow that we have $ <var:R> = <var:n> $ before running our set of commands it follows that we see $ <var:V> = <nat:2> \times <var:n> ^ <nat:6> + <nat:4> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:4> $ once segment of code has finished . \end{theorem} \begin{proof} Showing our claim about correctness for the code is evident by typical Hoare techniques . Taking another step toward the upcoming line found in our code , we have the variable binding line binding $ <nat:2> $ into $ <var:V>$ . This statement redefines the precondition $ \{ <var:R> = <var:n> \} $ as $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \} $ . This is ensured by the assignment scheme given in usual Hoare techniques . Advancing on , the variable binding statement \verb | <var:V> := <nat:4> + <var:V> * <var:R> ; | . This command forwards the precondition $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \} $ into the condition $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> + <nat:4> \} $ . Considering the proceeding step seen in the segment of code , we see the variable update line \verb | <var:V> := <nat:4> + <var:V> * <var:R> ; | . This takes the condition $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> + <nat:4> \} $ toward $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:4> \} $ . This is rigorously given by the assignment law found in standard Hoare logic . Advancing to the subsequent command seen in our series of instructions , we have the environment update statement binding $ <var:V> * <var:R> $ into $ <var:V>$ . This moves the condition $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:4> \} $ as the condition $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + \} $ . This is ensured using the assignment law given by usual Hoare techniques . Paying attention to the subsequent bit of code found in the set of instructions , we have the variable update statement giving $ <nat:3> + <var:V> * <var:R> $ to $ <var:V>$ . This command moves $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + \} $ toward $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:3> \} $ . This is shown to be logically sound using the assignment scheme defined in typical Hoare logic . After , we have the variable binding command \verb | <var:V> := <nat:1> + <var:V> * <var:R> ; | . This takes $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:3> \} $ into the condition $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> + <nat:1> \} $ . Moving on to the next step , the variable assignmet line yielding $ <nat:4> + <var:V> * <var:R$ toward $ <var:V>$ . This line transfers the condition $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> + <nat:1> \} $ toward the postcondition $ \{ <var:R> = <var:n> \land <var:V> = <nat:2> \cdot <var:n> ^ <nat:6> + <nat:4> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:4> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:4> \} $ . This is shown with the assignment law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:2> ; <var:V> := <nat:4> + <var:V> * <var:R> ; <var:V> := <nat:4> + <var:V> * <var:R> ; <var:V> := <var:V> * <var:R> ; <var:V> := <nat:3> + <var:V> * <var:R> ; <var:V> := <nat:1> + <var:V> * <var:R> ; <var:V> := <nat:4> + <var:V> * <var:R> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:R> = <var:n> }} <def:poly> {{ <var:V> = <nat:2> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:n> /\ <var:V> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:n> /\ <var:V> = <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:n> /\ <var:V> = <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:n> /\ <var:V> = <nat:2> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:n> /\ <var:V> = <nat:2> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:n> /\ <var:V> = <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:n> /\ <var:V> = <nat:2> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 