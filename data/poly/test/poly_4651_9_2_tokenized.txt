\begin{document} \begin{theorem} Let the following list of commands : \begin{verbatim} <var:H> := <nat:4> ; <var:H> := <nat:1> + <var:H> * <var:M> ; <var:H> := <nat:1> + <var:H> * <var:M> ; <var:H> := <nat:3> + <var:H> * <var:M> ; <var:H> := <nat:2> + <var:H> * <var:M> ; <var:H> := <var:H> * <var:M> ; <var:H> := <var:H> * <var:M> ; <var:H> := <nat:1> + <var:H> * <var:M> ; <var:H> := <nat:2> + <var:H> * <var:M> \end{verbatim} Assuming $ <var:M> = <var:U> $ before evaluating this program it must be that we see $ <var:H> = <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this list of commands can be demonstrated through standard Hoare logic . Looking at the proceeding lines of codein the series of commands , we see \verb | { <var:M> = <var:U> } <var:H> := <nat:4> { <var:M> = <var:U> \land <var:H> = <nat:4> } | , \verb | { <var:M> = <var:U> \land <var:H> = <nat:4> } <var:H> := <nat:1> + <var:H> * <var:M> { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> + <nat:1> } | and \verb | { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> + <nat:1> } <var:H> := <nat:1> + <var:H> * <var:M> { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> } | . This is known to be sound through the binding law defined by Hoare reasoning . Next , we have \verb | { <var:M> = <var:U> } <var:H> := <nat:4> { <var:M> = <var:U> \land <var:H> = <nat:4> } | , \verb | { <var:M> = <var:U> \land <var:H> = <nat:4> } <var:H> := <nat:1> + <var:H> * <var:M> { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> + <nat:1> } | , \verb | { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> + <nat:1> } <var:H> := <nat:1> + <var:H> * <var:M> { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> } | , \verb | { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> } <var:H> := <nat:3> + <var:H> * <var:M> { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:3> } | , \verb | { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:3> } <var:H> := <nat:2> + <var:H> * <var:M> { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:2> } | and \verb | { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:2> } <var:H> := <var:H> * <var:M> { <var:M> = <var:U> \land <var:H> = <nat:4> \times <var:U> ^ <nat:5> + <nat:1> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:M> = <var:U> }} <var:H> := <nat:4> ; <var:H> := <nat:1> + <var:H> * <var:M> ; <var:H> := <nat:1> + <var:H> * <var:M> ; <var:H> := <nat:3> + <var:H> * <var:M> ; <var:H> := <nat:2> + <var:H> * <var:M> ; <var:H> := <var:H> * <var:M> ; <var:H> := <var:H> * <var:M> ; <var:H> := <nat:1> + <var:H> * <var:M> ; <var:H> := <nat:2> + <var:H> * <var:M> {{ <var:H> = <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:H> = <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 