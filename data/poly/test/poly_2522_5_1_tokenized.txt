\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:t1> := <var:s> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:2> ; <var:c> := <var:t1> <var:c> := <var:c> + <var:t0> \end{verbatim} Assuming given every positive coefficients $ <var:l> $ $ <var:s> = <var:l> $ before evaluating this segment of code it follows that we have $ <var:c> = <nat:2> * <var:l> + <nat:6> $ once set of commands exits . \end{theorem} \begin{proof} The course of logic for this set of instructions is demonstrated using standard Hoare techniques . Advancing to the next lines of codecontained in our list of commands , we have \begin{verbatim} { <var:s> = <var:l> } <var:t1> := <var:s> { <var:s> = <var:l> \land <var:t1> = <var:l> } { <var:s> = <var:l> \land <var:t1> = <var:l> } <var:t0> := <nat:6> { <var:s> = <var:l> \land <var:t1> = <var:l> \land <var:t0> = <nat:6> } { <var:s> = <var:l> \land <var:t1> = <var:l> \land <var:t0> = <nat:6> } <var:t1> := <var:t1> * <nat:2> { <var:s> = <var:l> \land <var:t1> = <nat:2> \times <var:l> \land <var:t0> = <nat:6> } \end{verbatim} This is shown to be logically sound through the environment update law from typical Hoare reasoning . Considering the upcoming steps in our code , \begin{verbatim} { <var:s> = <var:l> } <var:t1> := <var:s> { <var:s> = <var:l> \land <var:t1> = <var:l> } { <var:s> = <var:l> \land <var:t1> = <var:l> } <var:t0> := <nat:6> { <var:s> = <var:l> \land <var:t1> = <var:l> \land <var:t0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:s> = <var:l> }} <var:t1> := <var:s> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:2> ; <var:c> := <var:t1> <var:c> := <var:c> + <var:t0> {{ <var:c> = <nat:2> * <var:l> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:t1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:t1> = <var:l> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:t1> = <nat:2> * <var:l> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:t0> = <nat:6> /\ <var:c> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:c> = <nat:2> * <var:l> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 