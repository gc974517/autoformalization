\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:f1> := <var:I> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:8> ; <var:h> := <var:f1> <var:h> := <var:h> + <var:f0> \end{verbatim} Given it to be that $ <var:I> = <var:m> $ ( for every natural coefficients $ <var:m> $ ) before evaluating this code segment it follows that $ <var:h> = <nat:8> * <var:m> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program is evident using standard Hoare reasoning . Advancing on , the assignment line giving $ <var:I> $ into $ <var:f1>$ . This code moves the condition $ \{ <var:I> = <var:m> \} $ toward the postcondition $ \{ <var:I> = <var:m> \land <var:f1> = <var:m> \} $ . Immediately after , we have the variable assignmet command \verb | <var:f0> := <nat:6> ; | . This moves the condition $ \{ <var:I> = <var:m> \land <var:f1> = <var:m> \} $ to $ \{ <var:I> = <var:m> \land <var:f1> = <var:m> \land <var:f0> = <nat:6> \} $ . Going to the next step , we have the environment update command binding $ <var:f1> * <nat:8> $ to $ <var:f1>$ . This forwards $ \{ <var:I> = <var:m> \land <var:f1> = <var:m> \land <var:f0> = <nat:6> \} $ as $ \{ <var:I> = <var:m> \land <var:f1> = <nat:8> \times <var:m> \land <var:f0> = <nat:6> \} $ . This is rigorously given using the assignment rule given in typical Hoare reasoning . Now , the assignment code \verb | <var:h> := <var:f1> | . This moves the precondition $ \{ <var:I> = <var:m> \land <var:f1> = <nat:8> \times <var:m> \land <var:f0> = <nat:6> \} $ toward $ \{ <var:I> = <var:m> \land <var:f0> = <nat:6> \land <var:h> = <nat:8> \times <var:m> \} $ . This is given through the assignment law from standard Hoare techniques . Moving on to the following bit of code contained in the list of instructions , the variable update command \verb | <var:h> := <var:h> + <var:f0> | . This takes the precondition $ \{ <var:I> = <var:m> \land <var:f0> = <nat:6> \land <var:h> = <nat:8> \times <var:m> \} $ to the postcondition $ \{ <var:I> = <var:m> \land <var:h> = <nat:8> \times <var:m> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:I> = <var:m> }} <var:f1> := <var:I> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:8> ; <var:h> := <var:f1> <var:h> := <var:h> + <var:f0> {{ <var:h> = <nat:8> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:f1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:f1> = <var:m> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:f1> = <nat:8> * <var:m> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:f0> = <nat:6> /\ <var:h> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:h> = <nat:8> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 