\begin{document} \begin{theorem} Consider a program in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:z> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:2> ; <var:Y> := <var:W1> <var:Y> := <var:Y> + <var:W0> \end{verbatim} Assuming it to be that $ <var:z> = <var:j> $ , for $ <var:j> $ , before the execution of our set of commands it follows that $ <var:Y> = <nat:2> * <var:j> + <nat:4> $ when segment of code is done . \end{theorem} \begin{proof} Demonstrating correctness of this code segment can be done through usual Hoare reasoning . Jumping to the following step contained in our set of commands , we see \verb | { <var:z> = <var:j> } <var:W1> := <var:z> { <var:z> = <var:j> \land <var:W1> = <var:j> } | . This is ensured by the binding law obtained from standard Hoare reasoning . Shifting focus toward the subsequent lines of codeseen in our series of commands , we see \verb | { <var:z> = <var:j> } <var:W1> := <var:z> { <var:z> = <var:j> \land <var:W1> = <var:j> } | and \verb | { <var:z> = <var:j> \land <var:W1> = <var:j> } <var:W0> := <nat:4> { <var:z> = <var:j> \land <var:W1> = <var:j> \land <var:W0> = <nat:4> } | . This is sound with the environment update inference rule from standard Hoare techniques . Next , \verb | { <var:z> = <var:j> } <var:W1> := <var:z> { <var:z> = <var:j> \land <var:W1> = <var:j> } | and \verb | { <var:z> = <var:j> \land <var:W1> = <var:j> } <var:W0> := <nat:4> { <var:z> = <var:j> \land <var:W1> = <var:j> \land <var:W0> = <nat:4> } | . This is sound through the rule given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:z> = <var:j> }} <var:W1> := <var:z> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:2> ; <var:Y> := <var:W1> <var:Y> := <var:Y> + <var:W0> {{ <var:Y> = <nat:2> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:W1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:W1> = <var:j> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:W1> = <nat:2> * <var:j> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:W0> = <nat:4> /\ <var:Y> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:j> /\ <var:Y> = <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 