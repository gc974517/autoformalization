\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:h> ; <var:I> := <var:G1> ; <var:I> := <var:I> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:h> = <var:C> $ before evaluating our program , it follows that we have $ <var:I> = <nat:1> \times <var:C> + <nat:3> $ when program has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is shown through typical Hoare techniques . Honing in on the following line of code found in the program , we see the assignment command assigning $ <nat:3> $ into $ <var:G0>$ . This moves $ \{ <var:h> = <var:C> \} $ toward $ \{ <var:h> = <var:C> \land <var:G0> = <nat:3> \} $ . Advancing to the following bit of code contained in our code , we have the code \verb | <var:G1> := <nat:1> ; | . This transfers the precondition $ \{ <var:h> = <var:C> \land <var:G0> = <nat:3> \} $ into the postcondition $ \{ <var:h> = <var:C> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \} $ . Next , the assignment line letting $ <var:G1> * <var:h> $ toward $ <var:G1>$ . This line advances $ \{ <var:h> = <var:C> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \} $ toward the condition $ \{ <var:h> = <var:C> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \times <var:C> \} $ . This is shown through the assignment law defined by standard Hoare reasoning . Looking at the next bit of code seen in the code , the variable assignmet statement letting $ <var:G1> $ as $ <var:I>$ . This takes $ \{ <var:h> = <var:C> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \times <var:C> \} $ into the condition $ \{ <var:h> = <var:C> \land <var:G0> = <nat:3> \land <var:I> = <nat:1> \times <var:C> \} $ . Honing in on the following line of code contained in our program , we have the binding code \verb | <var:I> := <var:I> + <var:G0> | . This command advances the condition $ \{ <var:h> = <var:C> \land <var:G0> = <nat:3> \land <var:I> = <nat:1> \times <var:C> \} $ toward the postcondition $ \{ <var:h> = <var:C> \land <var:I> = <nat:1> \times <var:C> + <nat:3> \} $ . This is deduced by the assignment law from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:h> ; <var:I> := <var:G1> ; <var:I> := <var:I> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:h> = <var:C> }} <def:poly> {{ <var:I> = <nat:1> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:G0> = <nat:3> /\ <var:I> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:I> = <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 