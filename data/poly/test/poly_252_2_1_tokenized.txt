\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:3> ; <var:j> := <var:r0> \end{verbatim} Allowing ( assuming some whole numbers $ <var:M> $ ) that we have $ <var:c> = <var:M> $ before running the list of commands it holds that we have $ <var:j> = <nat:3> $ when list of instructions finishes . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:c> = <var:M> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:c> = <var:M> \land <var:r0> = <nat:3> \} \\ <var:j> := <var:r0> \\ \{ <var:c> = <var:M> \land <var:j> = <nat:3> \} \end{eqnarray} Considering the above , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:c> = <var:M> }} <var:r0> := <nat:3> ; <var:j> := <var:r0> {{ <var:j> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:j> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 