\begin{document} \begin{theorem} Define the following code in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:V> ; <var:H2> := <var:H1> * <var:V> ; <var:H3> := <var:H2> * <var:V> ; <var:H4> := <var:H3> * <var:V> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:5> ; <var:H3> := <var:H3> * <nat:9> ; <var:H4> := <var:H4> * <nat:4> ; <var:Y> := <var:H4> <var:Y> := <var:Y> + <var:H3> <var:Y> := <var:Y> + <var:H1> <var:Y> := <var:Y> + <var:H0> \end{verbatim} Allowing $ <var:V> = <var:y> $ , for integers $ <var:y> $ , before interpreting this series of instructions , it holds that we see $ <var:Y> = <nat:4> \cdot <var:y> ^ <nat:4> + <nat:9> \cdot <var:y> ^ <nat:3> + <nat:5> \cdot <var:y> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for the set of instructions is demonstrated through standard Hoare logic . Following , the variable binding line defining $ <var:V> $ to $ <var:H1>$ . This takes the precondition $ \{ <var:V> = <var:y> \} $ into $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \} $ . This is sound through the assignment scheme in Hoare reasoning . Moving onward , we see the variable assignmet statement \verb | <var:H2> := <var:H1> * <var:V> ; | . This takes the precondition $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \} $ toward the condition $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \land <var:H2> = <var:y> ^ <nat:2> \} $ . Advancing , the variable update statement letting $ <var:H2> * <var:V> $ into $ <var:H3>$ . This statement takes the precondition $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \land <var:H2> = <var:y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <var:y> ^ <nat:3> \} $ . Going forward , the binding line binding $ <var:H3> * <var:V> $ to $ <var:H4>$ . This advances the precondition $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <var:y> ^ <nat:3> \} $ as the postcondition $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <var:y> ^ <nat:3> \land <var:H4> = <var:y> ^ <nat:4> \} $ . Now , the assignment statement letting $ <nat:6> $ as $ <var:H0>$ . This code takes $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <var:y> ^ <nat:3> \land <var:H4> = <var:y> ^ <nat:4> \} $ toward the postcondition $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <var:y> ^ <nat:3> \land <var:H4> = <var:y> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . This is known to be sound by the assignment rule found in Hoare reasoning . Taking another step toward the upcoming command in our series of instructions , we see the command defining $ <var:H1> * <nat:5> $ to $ <var:H1>$ . This code advances the condition $ \{ <var:V> = <var:y> \land <var:H1> = <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <var:y> ^ <nat:3> \land <var:H4> = <var:y> ^ <nat:4> \land <var:H0> = <nat:6> \} $ to the condition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <var:y> ^ <nat:3> \land <var:H4> = <var:y> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . Focusing on the following line of code contained in the series of commands , the variable assignmet code \verb | <var:H3> := <var:H3> * <nat:9> ; | . This statement transfers the condition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <var:y> ^ <nat:3> \land <var:H4> = <var:y> ^ <nat:4> \land <var:H0> = <nat:6> \} $ as the postcondition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:y> ^ <nat:3> \land <var:H4> = <var:y> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . This is ensured by the assignment rule from Hoare reasoning . Paying attention to the upcoming line of code contained in our set of instructions , the variable update statement \verb | <var:H4> := <var:H4> * <nat:4> ; | . This command transfers the precondition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:y> ^ <nat:3> \land <var:H4> = <var:y> ^ <nat:4> \land <var:H0> = <nat:6> \} $ as the condition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:y> ^ <nat:3> \land <var:H4> = <nat:4> \cdot <var:y> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . Considering the upcoming piece of code in our code segment , we have the environment update command \verb | <var:Y> := <var:H4> | . This command advances the precondition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:y> ^ <nat:3> \land <var:H4> = <nat:4> \cdot <var:y> ^ <nat:4> \land <var:H0> = <nat:6> \} $ into the condition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:y> ^ <nat:3> \land <var:H0> = <nat:6> \land <var:Y> = <nat:4> \cdot <var:y> ^ <nat:4> \} $ . This is guaranteed using the assignment rule defined by usual Hoare techniques . Considering the upcoming bit of code contained in our list of instructions , we see the assignment line binding $ <var:Y> + <var:H3$ as $ <var:Y>$ . This statement forwards the condition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:y> ^ <nat:3> \land <var:H0> = <nat:6> \land <var:Y> = <nat:4> \cdot <var:y> ^ <nat:4> \} $ into $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H0> = <nat:6> \land <var:Y> = <nat:4> \cdot <var:y> ^ <nat:4> + <nat:9> \cdot <var:y> ^ <nat:3> \} $ . This is known to be sound using the assignment law from typical Hoare logic . Moving on to the upcoming line in our program , we have the code \verb | <var:Y> := <var:Y> + <var:H1> | . This command forwards the precondition $ \{ <var:V> = <var:y> \land <var:H1> = <nat:5> \cdot <var:y> \land <var:H2> = <var:y> ^ <nat:2> \land <var:H0> = <nat:6> \land <var:Y> = <nat:4> \cdot <var:y> ^ <nat:4> + <nat:9> \cdot <var:y> ^ <nat:3> \} $ into $ \{ <var:V> = <var:y> \land <var:H0> = <nat:6> \land <var:Y> = <nat:4> \cdot <var:y> ^ <nat:4> + <nat:9> \cdot <var:y> ^ <nat:3> + <nat:5> \cdot <var:y> \} $ . Moving on to the next step , we see the variable update line \verb | <var:Y> := <var:Y> + <var:H0> | . This code redefines $ \{ <var:V> = <var:y> \land <var:H0> = <nat:6> \land <var:Y> = <nat:4> \cdot <var:y> ^ <nat:4> + <nat:9> \cdot <var:y> ^ <nat:3> + <nat:5> \cdot <var:y> \} $ as $ \{ <var:V> = <var:y> \land <var:Y> = <nat:4> \cdot <var:y> ^ <nat:4> + <nat:9> \cdot <var:y> ^ <nat:3> + <nat:5> \cdot <var:y> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:V> = <var:y> }} <var:H1> := <var:V> ; <var:H2> := <var:H1> * <var:V> ; <var:H3> := <var:H2> * <var:V> ; <var:H4> := <var:H3> * <var:V> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:5> ; <var:H3> := <var:H3> * <nat:9> ; <var:H4> := <var:H4> * <nat:4> ; <var:Y> := <var:H4> <var:Y> := <var:Y> + <var:H3> <var:Y> := <var:Y> + <var:H1> <var:Y> := <var:Y> + <var:H0> {{ <var:Y> = <nat:4> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> + <nat:5> * <var:y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <var:y> /\ <var:H2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <var:y> /\ <var:H2> = <var:y> ^ <nat:2> /\ <var:H3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <var:y> /\ <var:H2> = <var:y> ^ <nat:2> /\ <var:H3> = <var:y> ^ <nat:3> /\ <var:H4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <var:y> /\ <var:H2> = <var:y> ^ <nat:2> /\ <var:H3> = <var:y> ^ <nat:3> /\ <var:H4> = <var:y> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <nat:5> * <var:y> /\ <var:H2> = <var:y> ^ <nat:2> /\ <var:H3> = <var:y> ^ <nat:3> /\ <var:H4> = <var:y> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <nat:5> * <var:y> /\ <var:H2> = <var:y> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:H4> = <var:y> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <nat:5> * <var:y> /\ <var:H2> = <var:y> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:H4> = <nat:4> * <var:y> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <nat:5> * <var:y> /\ <var:H2> = <var:y> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:H0> = <nat:6> /\ <var:Y> = <nat:4> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H1> = <nat:5> * <var:y> /\ <var:H2> = <var:y> ^ <nat:2> /\ <var:H0> = <nat:6> /\ <var:Y> = <nat:4> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:H0> = <nat:6> /\ <var:Y> = <nat:4> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:y> /\ <var:Y> = <nat:4> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> + <nat:5> * <var:y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 