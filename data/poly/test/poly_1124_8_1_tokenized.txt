\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:I> ; <var:J2> := <var:J1> * <var:I> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:1> ; <var:J2> := <var:J2> * <nat:9> ; <var:O> := <var:J2> <var:O> := <var:O> + <var:J1> <var:O> := <var:O> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:I> = <var:P> $ prior to running the list of commands , it follows that $ <var:O> = <nat:9> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:7> $ . \end{theorem} \begin{proof} The proof of this code is clear by standard Hoare techniques . Jumping to the next command seen in our list of commands , we have the assignment line giving $ <var:I> $ toward $ <var:J1>$ . This forwards the condition $ \{ <var:I> = <var:P> \} $ into $ \{ <var:I> = <var:P> \land <var:J1> = <var:P> \} $ . Moving forward , we have the environment update command \verb | <var:J2> := <var:J1> * <var:I> ; | . This command advances the condition $ \{ <var:I> = <var:P> \land <var:J1> = <var:P> \} $ as the postcondition $ \{ <var:I> = <var:P> \land <var:J1> = <var:P> \land <var:J2> = <var:P> ^ <nat:2> \} $ . Focusing on the upcoming step found in our series of commands , we see the environment update command letting $ <nat:7> $ to $ <var:J0>$ . This moves the precondition $ \{ <var:I> = <var:P> \land <var:J1> = <var:P> \land <var:J2> = <var:P> ^ <nat:2> \} $ into the postcondition $ \{ <var:I> = <var:P> \land <var:J1> = <var:P> \land <var:J2> = <var:P> ^ <nat:2> \land <var:J0> = <nat:7> \} $ . This is guaranteed using the assignment inference rule given in usual Hoare logic . Taking another step toward the proceeding bit of code contained in our series of commands , the variable update statement \verb | <var:J1> := <var:J1> * <nat:1> ; | . This moves $ \{ <var:I> = <var:P> \land <var:J1> = <var:P> \land <var:J2> = <var:P> ^ <nat:2> \land <var:J0> = <nat:7> \} $ to the postcondition $ \{ <var:I> = <var:P> \land <var:J1> = <nat:1> \times <var:P> \land <var:J2> = <var:P> ^ <nat:2> \land <var:J0> = <nat:7> \} $ . This is ensured using the assignment scheme found in standard Hoare logic . Observing the upcoming command seen in the code segment , we see the binding line \verb | <var:J2> := <var:J2> * <nat:9> ; | . This code forwards $ \{ <var:I> = <var:P> \land <var:J1> = <nat:1> \times <var:P> \land <var:J2> = <var:P> ^ <nat:2> \land <var:J0> = <nat:7> \} $ to the condition $ \{ <var:I> = <var:P> \land <var:J1> = <nat:1> \times <var:P> \land <var:J2> = <nat:9> \times <var:P> ^ <nat:2> \land <var:J0> = <nat:7> \} $ . Going forward , we see the binding statement \verb | <var:O> := <var:J2> | . This redefines $ \{ <var:I> = <var:P> \land <var:J1> = <nat:1> \times <var:P> \land <var:J2> = <nat:9> \times <var:P> ^ <nat:2> \land <var:J0> = <nat:7> \} $ into the postcondition $ \{ <var:I> = <var:P> \land <var:J1> = <nat:1> \times <var:P> \land <var:J0> = <nat:7> \land <var:O> = <nat:9> \times <var:P> ^ <nat:2> \} $ . This is given through the assignment scheme in usual Hoare reasoning . Honing in on the upcoming line of code in our code , we have the binding code \verb | <var:O> := <var:O> + <var:J1> | . This command takes the precondition $ \{ <var:I> = <var:P> \land <var:J1> = <nat:1> \times <var:P> \land <var:J0> = <nat:7> \land <var:O> = <nat:9> \times <var:P> ^ <nat:2> \} $ as the condition $ \{ <var:I> = <var:P> \land <var:J0> = <nat:7> \land <var:O> = <nat:9> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> \} $ . This is deduced through the assignment scheme given in typical Hoare reasoning . Moving forward to the proceeding step in the set of commands , we see the binding line \verb | <var:O> := <var:O> + <var:J0> | . This moves the condition $ \{ <var:I> = <var:P> \land <var:J0> = <nat:7> \land <var:O> = <nat:9> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> \} $ as $ \{ <var:I> = <var:P> \land <var:O> = <nat:9> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:7> \} $ . This is deduced using the assignment rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J1> := <var:I> ; <var:J2> := <var:J1> * <var:I> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:1> ; <var:J2> := <var:J2> * <nat:9> ; <var:O> := <var:J2> <var:O> := <var:O> + <var:J1> <var:O> := <var:O> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:I> = <var:P> }} <def:poly> {{ <var:O> = <nat:9> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:J1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:J1> = <var:P> /\ <var:J2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:J1> = <var:P> /\ <var:J2> = <var:P> ^ <nat:2> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:J1> = <nat:1> * <var:P> /\ <var:J2> = <var:P> ^ <nat:2> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:J1> = <nat:1> * <var:P> /\ <var:J2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:J1> = <nat:1> * <var:P> /\ <var:J0> = <nat:7> /\ <var:O> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:J0> = <nat:7> /\ <var:O> = <nat:9> * <var:P> ^ <nat:2> + <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:O> = <nat:9> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 