\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:7> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:F> ; <var:S> := <var:r1> ; <var:S> := <var:S> + <var:r0> \end{verbatim} Allowing , given every positive numbers $ <var:Z> $ , that we have $ <var:F> = <var:Z> $ ahead of evaluating this list of commands , then $ <var:S> = <nat:6> \cdot <var:Z> + <nat:7> $ when list of commands has terminated . \end{theorem} \begin{proof} The method of proof for our set of instructions is accomplished with usual Hoare reasoning . Looking at the following line of code in our code , the code \verb | <var:r0> := <nat:7> ; | . This transfers $ \{ <var:F> = <var:Z> \} $ as the postcondition $ \{ <var:F> = <var:Z> \land <var:r0> = <nat:7> \} $ . This is shown through the assignment rule found in typical Hoare reasoning . Looking at the subsequent bit of code contained in our program , the variable binding statement binding $ <nat:6> $ to $ <var:r1>$ . This statement redefines the condition $ \{ <var:F> = <var:Z> \land <var:r0> = <nat:7> \} $ toward the postcondition $ \{ <var:F> = <var:Z> \land <var:r0> = <nat:7> \land <var:r1> = <nat:6> \} $ . This is guaranteed by the assignment inference rule given by Hoare techniques . Moving on , the variable assignmet command \verb | <var:r1> := <var:r1> * <var:F> ; | . This statement redefines the condition $ \{ <var:F> = <var:Z> \land <var:r0> = <nat:7> \land <var:r1> = <nat:6> \} $ into the postcondition $ \{ <var:F> = <var:Z> \land <var:r0> = <nat:7> \land <var:r1> = <nat:6> \cdot <var:Z> \} $ . This is guaranteed with the assignment scheme found in usual Hoare techniques . Immediately after , we have the environment update line yielding $ <var:r1> $ as $ <var:S>$ . This transfers the condition $ \{ <var:F> = <var:Z> \land <var:r0> = <nat:7> \land <var:r1> = <nat:6> \cdot <var:Z> \} $ to the postcondition $ \{ <var:F> = <var:Z> \land <var:r0> = <nat:7> \land <var:S> = <nat:6> \cdot <var:Z> \} $ . Looking at the proceeding piece of code in the series of instructions , the variable assignmet line letting $ <var:S> + <var:r0$ toward $ <var:S>$ . This transfers the condition $ \{ <var:F> = <var:Z> \land <var:r0> = <nat:7> \land <var:S> = <nat:6> \cdot <var:Z> \} $ into the condition $ \{ <var:F> = <var:Z> \land <var:S> = <nat:6> \cdot <var:Z> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:F> = <var:Z> }} <var:r0> := <nat:7> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:F> ; <var:S> := <var:r1> ; <var:S> := <var:S> + <var:r0> {{ <var:S> = <nat:6> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:r0> = <nat:7> /\ <var:S> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:S> = <nat:6> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 