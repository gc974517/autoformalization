\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:2> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:M> ; <var:r> := <var:O1> ; <var:r> := <var:r> + <var:O0> \end{verbatim} Assume $ <var:M> = <var:d> $ prior to the execution of this code segment , it follows that we see $ <var:r> = <nat:2> \cdot <var:d> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the series of instructions is done with the following decorated program . \begin{eqnarray} \{ <var:M> = <var:d> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:M> = <var:d> \land <var:O0> = <nat:2> \} \\ <var:O1> := <nat:2> ; \\ \{ <var:M> = <var:d> \land <var:O0> = <nat:2> \land <var:O1> = <nat:2> \} \\ <var:O1> := <var:O1> * <var:M> ; \\ \{ <var:M> = <var:d> \land <var:O0> = <nat:2> \land <var:O1> = <nat:2> * <var:d> \} \\ <var:r> := <var:O1> ; \\ \{ <var:M> = <var:d> \land <var:O0> = <nat:2> \land <var:r> = <nat:2> * <var:d> \} \\ <var:r> := <var:r> + <var:O0> \\ \{ <var:M> = <var:d> \land <var:r> = <nat:2> * <var:d> + <nat:2> \} \end{eqnarray} Applying typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:M> = <var:d> }} <var:O0> := <nat:2> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:M> ; <var:r> := <var:O1> ; <var:r> := <var:r> + <var:O0> {{ <var:r> = <nat:2> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:O0> = <nat:2> /\ <var:O1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:O0> = <nat:2> /\ <var:O1> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:O0> = <nat:2> /\ <var:r> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:r> = <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 