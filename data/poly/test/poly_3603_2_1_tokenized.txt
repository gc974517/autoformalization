\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:3> ; <var:u> := <var:p0> \end{verbatim} Assuming that we have $ <var:k> = <var:B> $ ahead of interpreting our list of instructions it holds that we have $ <var:u> = <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this program is demonstrated with typical Hoare logic . Advancing on , the assignment line \verb | <var:p0> := <nat:3> ; | . This line transfers the precondition $ \{ <var:k> = <var:B> \} $ as the condition $ \{ <var:k> = <var:B> \land <var:p0> = <nat:3> \} $ . This is known to be sound using the assignment rule from usual Hoare logic . Jumping to the next line contained in the code , the variable update line binding $ <var:p0$ as $ <var:u>$ . This line transfers the condition $ \{ <var:k> = <var:B> \land <var:p0> = <nat:3> \} $ toward $ \{ <var:k> = <var:B> \land <var:u> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:k> = <var:B> }} <var:p0> := <nat:3> ; <var:u> := <var:p0> {{ <var:u> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:u> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 