\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c1> := <var:I> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:5> ; <var:m> := <var:c1> <var:m> := <var:m> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Given , for any integers $ <var:a> $ , that we have $ <var:I> = <var:a> $ before the evaluation of our list of instructions , it must be that we have $ <var:m> = <nat:5> \cdot <var:a> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our list of instructions is accomplished by standard Hoare logic . Moving forward to the proceeding bit of code seen in our code segment , we have the variable assignmet code \verb | <var:c1> := <var:I> ; | . This line advances $ \{ <var:I> = <var:a> \} $ to the postcondition $ \{ <var:I> = <var:a> \land <var:c1> = <var:a> \} $ . This is given by the assignment inference rule found in Hoare techniques . Moving forward , we see the statement defining $ <nat:1> $ into $ <var:c0>$ . This moves $ \{ <var:I> = <var:a> \land <var:c1> = <var:a> \} $ as the postcondition $ \{ <var:I> = <var:a> \land <var:c1> = <var:a> \land <var:c0> = <nat:1> \} $ . Focusing on the following command contained in the program , the variable assignmet statement assigning $ <var:c1> * <nat:5> $ as $ <var:c1>$ . This redefines the condition $ \{ <var:I> = <var:a> \land <var:c1> = <var:a> \land <var:c0> = <nat:1> \} $ as $ \{ <var:I> = <var:a> \land <var:c1> = <nat:5> * <var:a> \land <var:c0> = <nat:1> \} $ . Moving forward to the next step , we see the variable binding code yielding $ <var:c1$ as $ <var:m>$ . This takes $ \{ <var:I> = <var:a> \land <var:c1> = <nat:5> * <var:a> \land <var:c0> = <nat:1> \} $ toward $ \{ <var:I> = <var:a> \land <var:c0> = <nat:1> \land <var:m> = <nat:5> * <var:a> \} $ . Focusing on the subsequent bit of code found in our program , we see the environment update line \verb | <var:m> := <var:m> + <var:c0> | . This line transfers the precondition $ \{ <var:I> = <var:a> \land <var:c0> = <nat:1> \land <var:m> = <nat:5> * <var:a> \} $ into the postcondition $ \{ <var:I> = <var:a> \land <var:m> = <nat:5> * <var:a> + <nat:1> \} $ . This is known to be sound with the assignment rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c1> := <var:I> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:5> ; <var:m> := <var:c1> <var:m> := <var:m> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:I> = <var:a> }} <def:poly> {{ <var:m> = <nat:5> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:c1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:c1> = <var:a> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:c1> = <nat:5> * <var:a> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:c0> = <nat:1> /\ <var:m> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:m> = <nat:5> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 