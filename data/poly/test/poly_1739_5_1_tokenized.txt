\begin{document} \begin{theorem} Define a series of instructions such that \begin{verbatim} <var:d1> := <var:Y> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:9> ; <var:D> := <var:d1> <var:D> := <var:D> + <var:d0> \end{verbatim} Given it to be that $ <var:Y> = <var:U> $ before running the code it must be that $ <var:D> = <nat:9> * <var:U> + <nat:1> $ once list of commands is done . \end{theorem} \begin{proof} The method of proof for this series of instructions is given with Hoare techniques . Taking a look at the next pieces of code found in our segment of code , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:U> \} & <var:d1> := <var:Y> & \{ <var:Y> = <var:U> \land <var:d1> = <var:U> \} \\ \{ <var:Y> = <var:U> \land <var:d1> = <var:U> \} & <var:d0> := <nat:1> & \{ <var:Y> = <var:U> \land <var:d1> = <var:U> \land <var:d0> = <nat:1> \} \end{tabular} This is rigorously given by the binding scheme from usual Hoare logic . Taking a look at the following steps contained in the set of commands , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:U> \} & <var:d1> := <var:Y> & \{ <var:Y> = <var:U> \land <var:d1> = <var:U> \} \\ \{ <var:Y> = <var:U> \land <var:d1> = <var:U> \} & <var:d0> := <nat:1> & \{ <var:Y> = <var:U> \land <var:d1> = <var:U> \land <var:d0> = <nat:1> \} \end{tabular} This is known to be sound through the variable update inference rule given in Hoare techniques . Stepping forward , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:U> \} & <var:d1> := <var:Y> & \{ <var:Y> = <var:U> \land <var:d1> = <var:U> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Y> = <var:U> }} <var:d1> := <var:Y> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:9> ; <var:D> := <var:d1> <var:D> := <var:D> + <var:d0> {{ <var:D> = <nat:9> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:d1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:d1> = <var:U> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:d1> = <nat:9> * <var:U> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:d0> = <nat:1> /\ <var:D> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:D> = <nat:9> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 