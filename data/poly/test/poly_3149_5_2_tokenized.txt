\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:z> := <nat:3> ; <var:z> := <nat:3> + <var:z> * <var:X> ; <var:z> := <var:z> * <var:X> ; <var:z> := <nat:1> + <var:z> * <var:X> ; <var:z> := <nat:1> + <var:z> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Assume --- for any integers $ <var:b> $ --- that $ <var:X> = <var:b> $ ahead of evaluating our code segment it must be that $ <var:z> = <nat:3> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:X> = <var:b> \} \\ <var:z> := <nat:3> ; \\ \{ <var:X> = <var:b> \land <var:z> = <nat:3> \} \\ <var:z> := <nat:3> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:b> \land <var:z> = <nat:3> * <var:b> + <nat:3> \} \\ <var:z> := <var:z> * <var:X> ; \\ \{ <var:X> = <var:b> \land <var:z> = <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + \} \\ <var:z> := <nat:1> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:b> \land <var:z> = <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> \} \\ <var:z> := <nat:1> + <var:z> * <var:X> \\ \{ <var:X> = <var:b> \land <var:z> = <nat:3> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> + <nat:1> \} \end{eqnarray} Given the above , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:3> ; <var:z> := <nat:3> + <var:z> * <var:X> ; <var:z> := <var:z> * <var:X> ; <var:z> := <nat:1> + <var:z> * <var:X> ; <var:z> := <nat:1> + <var:z> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:X> = <var:b> }} <def:poly> {{ <var:z> = <nat:3> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:z> = <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:z> = <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:z> = <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:z> = <nat:3> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 