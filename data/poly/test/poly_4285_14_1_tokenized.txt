\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:Z> ; <var:k2> := <var:k1> * <var:Z> ; <var:k3> := <var:k2> * <var:Z> ; <var:k4> := <var:k3> * <var:Z> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:2> ; <var:k2> := <var:k2> * <nat:2> ; <var:k3> := <var:k3> * <nat:8> ; <var:k4> := <var:k4> * <nat:2> ; <var:u> := <var:k4> <var:u> := <var:u> + <var:k3> <var:u> := <var:u> + <var:k2> <var:u> := <var:u> + <var:k1> <var:u> := <var:u> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Allowing ( given all natural numbers $ <var:h> $ ) $ <var:Z> = <var:h> $ ahead of evaluating this list of commands then $ <var:u> = <nat:2> * <var:h> ^ <nat:4> + <nat:8> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> $ . \end{theorem} \begin{proof} Observe the following decorated series of commands . \begin{eqnarray} \{ <var:Z> = <var:h> \} \\ <var:k1> := <var:Z> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <var:h> \} \\ <var:k2> := <var:k1> * <var:Z> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:Z> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \} \\ <var:k4> := <var:k3> * <var:Z> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k4> = <var:h> ^ <nat:4> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k4> = <var:h> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ <var:k1> := <var:k1> * <nat:2> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <nat:2> \times <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k4> = <var:h> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ <var:k2> := <var:k2> * <nat:2> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <nat:2> \times <var:h> \land <var:k2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k4> = <var:h> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ <var:k3> := <var:k3> * <nat:8> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <nat:2> \times <var:h> \land <var:k2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:k3> = <nat:8> \times <var:h> ^ <nat:3> \land <var:k4> = <var:h> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ <var:k4> := <var:k4> * <nat:2> ; \\ \{ <var:Z> = <var:h> \land <var:k1> = <nat:2> \times <var:h> \land <var:k2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:k3> = <nat:8> \times <var:h> ^ <nat:3> \land <var:k4> = <nat:2> \times <var:h> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ <var:u> := <var:k4> \\ \{ <var:Z> = <var:h> \land <var:k1> = <nat:2> \times <var:h> \land <var:k2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:k3> = <nat:8> \times <var:h> ^ <nat:3> \land <var:k0> = <nat:2> \land <var:u> = <nat:2> \times <var:h> ^ <nat:4> \} \\ <var:u> := <var:u> + <var:k3> \\ \{ <var:Z> = <var:h> \land <var:k1> = <nat:2> \times <var:h> \land <var:k2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:u> = <nat:2> \times <var:h> ^ <nat:4> + <nat:8> \times <var:h> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:k2> \\ \{ <var:Z> = <var:h> \land <var:k1> = <nat:2> \times <var:h> \land <var:k0> = <nat:2> \land <var:u> = <nat:2> \times <var:h> ^ <nat:4> + <nat:8> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:k1> \\ \{ <var:Z> = <var:h> \land <var:k0> = <nat:2> \land <var:u> = <nat:2> \times <var:h> ^ <nat:4> + <nat:8> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} \\ <var:u> := <var:u> + <var:k0> \\ \{ <var:Z> = <var:h> \land <var:u> = <nat:2> \times <var:h> ^ <nat:4> + <nat:8> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:2> \} \end{eqnarray} Using typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Definition <def:poly> := <var:k1> := <var:Z> ; <var:k2> := <var:k1> * <var:Z> ; <var:k3> := <var:k2> * <var:Z> ; <var:k4> := <var:k3> * <var:Z> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:2> ; <var:k2> := <var:k2> * <nat:2> ; <var:k3> := <var:k3> * <nat:8> ; <var:k4> := <var:k4> * <nat:2> ; <var:u> := <var:k4> <var:u> := <var:u> + <var:k3> <var:u> := <var:u> + <var:k2> <var:u> := <var:u> + <var:k1> <var:u> := <var:u> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Z> = <var:h> }} <def:poly> {{ <var:u> = <nat:2> * <var:h> ^ <nat:4> + <nat:8> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> /\ <var:k4> = <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> /\ <var:k4> = <var:h> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <nat:2> * <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> /\ <var:k4> = <var:h> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <nat:2> * <var:h> /\ <var:k2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> /\ <var:k4> = <var:h> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <nat:2> * <var:h> /\ <var:k2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:k4> = <var:h> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <nat:2> * <var:h> /\ <var:k2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:k4> = <nat:2> * <var:h> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <nat:2> * <var:h> /\ <var:k2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:k0> = <nat:2> /\ <var:u> = <nat:2> * <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <nat:2> * <var:h> /\ <var:k2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:k0> = <nat:2> /\ <var:u> = <nat:2> * <var:h> ^ <nat:4> + <nat:8> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k1> = <nat:2> * <var:h> /\ <var:k0> = <nat:2> /\ <var:u> = <nat:2> * <var:h> ^ <nat:4> + <nat:8> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:k0> = <nat:2> /\ <var:u> = <nat:2> * <var:h> ^ <nat:4> + <nat:8> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:u> = <nat:2> * <var:h> ^ <nat:4> + <nat:8> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 