\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} : \begin{verbatim} <var:X> := <nat:3> ; <var:X> := <nat:3> + <var:X> * <var:K> ; <var:X> := <nat:3> + <var:X> * <var:K> ; <var:X> := <nat:2> + <var:X> * <var:K> ; <var:X> := <var:X> * <var:K> ; <var:X> := <nat:4> + <var:X> * <var:K> ; <var:X> := <nat:2> + <var:X> * <var:K> ; <var:X> := <var:X> * <var:K> ; <var:X> := <var:X> * <var:K> ; <var:X> := <nat:1> + <var:X> * <var:K> ; <var:X> := <var:X> * <var:K> ; <var:X> := <nat:3> + <var:X> * <var:K> \end{verbatim} Given that $ <var:K> = <var:c> $ --- given all natural numbers $ <var:c> $ --- prior to the execution of the series of commands it follows that we have $ <var:X> = <nat:3> \cdot <var:c> ^ <nat:11> + <nat:3> \cdot <var:c> ^ <nat:10> + <nat:3> \cdot <var:c> ^ <nat:9> + <nat:2> \cdot <var:c> ^ <nat:8> + <nat:4> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions can be demonstrated through standard Hoare reasoning . Focusing on the proceeding line of code contained in our code , the binding code \verb | <var:X> := <nat:3> ; | . This transfers the condition $ \{ <var:K> = <var:c> \} $ toward the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \} $ . Shifting focus toward the following command found in the set of commands , we see the variable assignmet line \verb | <var:X> := <nat:3> + <var:X> * <var:K> ; | . This transfers the precondition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \} $ to $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> + <nat:3> \} $ . This is rigorously given by the assignment law obtained from Hoare techniques . Moving on to the following command in the set of instructions , we see the variable binding code yielding $ <nat:3> + <var:X> * <var:K> $ toward $ <var:X>$ . This code transfers the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> + <nat:3> \} $ toward $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:3> \} $ . This is ensured by the assignment rule defined in Hoare reasoning . Going to the next step , we have the variable assignmet code \verb | <var:X> := <nat:2> + <var:X> * <var:K> ; | . This forwards $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:3> \} $ to the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:2> \} $ . Jumping to the subsequent line of code in the list of instructions , we have the environment update statement \verb | <var:X> := <var:X> * <var:K> ; | . This code transfers the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:2> \} $ into the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + \} $ . This is given through the assignment inference rule from standard Hoare reasoning . Stepping forward , the environment update code \verb | <var:X> := <nat:4> + <var:X> * <var:K> ; | . This redefines the precondition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + \} $ as the postcondition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:4> \} $ . Moving on to the following statement in our set of instructions , the environment update command letting $ <nat:2> + <var:X> * <var:K> $ as $ <var:X>$ . This statement moves the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:4> \} $ to the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> + <nat:2> \} $ . Advancing on , we see the binding line \verb | <var:X> := <var:X> * <var:K> ; | . This line redefines $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> + <nat:2> \} $ into $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + \} $ . Going forward , the binding code \verb | <var:X> := <var:X> * <var:K> ; | . This advances $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + \} $ toward $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + \} $ . Advancing to the next step , we have the variable update command assigning $ <nat:1> + <var:X> * <var:K> $ to $ <var:X>$ . This line takes the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + \} $ into the postcondition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \} $ . Jumping to the following line of code contained in our set of instructions , we have the variable binding code defining $ <var:X> * <var:K> $ into $ <var:X>$ . This code takes the precondition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \} $ to $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:10> + <nat:3> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:8> + <nat:2> \cdot <var:c> ^ <nat:7> + <nat:4> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:1> \cdot <var:c> + \} $ . Considering the following piece of code in the series of commands , we have the environment update command giving $ <nat:3> + <var:X> * <var:K$ into $ <var:X>$ . This statement redefines the condition $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:10> + <nat:3> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:8> + <nat:2> \cdot <var:c> ^ <nat:7> + <nat:4> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:1> \cdot <var:c> + \} $ toward $ \{ <var:K> = <var:c> \land <var:X> = <nat:3> \cdot <var:c> ^ <nat:11> + <nat:3> \cdot <var:c> ^ <nat:10> + <nat:3> \cdot <var:c> ^ <nat:9> + <nat:2> \cdot <var:c> ^ <nat:8> + <nat:4> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:K> = <var:c> }} <var:X> := <nat:3> ; <var:X> := <nat:3> + <var:X> * <var:K> ; <var:X> := <nat:3> + <var:X> * <var:K> ; <var:X> := <nat:2> + <var:X> * <var:K> ; <var:X> := <var:X> * <var:K> ; <var:X> := <nat:4> + <var:X> * <var:K> ; <var:X> := <nat:2> + <var:X> * <var:K> ; <var:X> := <var:X> * <var:K> ; <var:X> := <var:X> * <var:K> ; <var:X> := <nat:1> + <var:X> * <var:K> ; <var:X> := <var:X> * <var:K> ; <var:X> := <nat:3> + <var:X> * <var:K> {{ <var:X> = <nat:3> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:X> = <nat:3> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 