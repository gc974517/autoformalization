\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:4> ; <var:f> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given ( for any positive integers $ <var:U> $ ) it to be that $ <var:i> = <var:U> $ ahead of the evaluation of the program it must be that $ <var:f> = <nat:4> $ when code segment has exited . \end{theorem} \begin{proof} The argument for this series of instructions is done using standard Hoare techniques . Jumping to the proceeding line of code in our set of commands , we see the assignment line yielding $ <nat:4> $ toward $ <var:u0>$ . This statement moves the precondition $ \{ <var:i> = <var:U> \} $ to $ \{ <var:i> = <var:U> \land <var:u0> = <nat:4> \} $ . This is shown through the assignment scheme in usual Hoare logic . Stepping forward , the binding statement \verb | <var:f> := <var:u0> | . This statement moves the condition $ \{ <var:i> = <var:U> \land <var:u0> = <nat:4> \} $ as the condition $ \{ <var:i> = <var:U> \land <var:f> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:4> ; <var:f> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:i> = <var:U> }} <def:poly> {{ <var:f> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:U> /\ <var:f> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 