\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:N> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:7> ; <var:a> := <var:M1> <var:a> := <var:a> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:N> = <var:J> $ before executing this list of instructions , it must be that $ <var:a> = <nat:7> * <var:J> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:J> \} \\ <var:M1> := <var:N> ; \\ \{ <var:N> = <var:J> \land <var:M1> = <var:J> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:N> = <var:J> \land <var:M1> = <var:J> \land <var:M0> = <nat:9> \} \\ <var:M1> := <var:M1> * <nat:7> ; \\ \{ <var:N> = <var:J> \land <var:M1> = <nat:7> * <var:J> \land <var:M0> = <nat:9> \} \\ <var:a> := <var:M1> \\ \{ <var:N> = <var:J> \land <var:M0> = <nat:9> \land <var:a> = <nat:7> * <var:J> \} \\ <var:a> := <var:a> + <var:M0> \\ \{ <var:N> = <var:J> \land <var:a> = <nat:7> * <var:J> + <nat:9> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:N> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:7> ; <var:a> := <var:M1> <var:a> := <var:a> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:N> = <var:J> }} <def:poly> {{ <var:a> = <nat:7> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:M1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:M1> = <var:J> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:M1> = <nat:7> * <var:J> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:M0> = <nat:9> /\ <var:a> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:a> = <nat:7> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 