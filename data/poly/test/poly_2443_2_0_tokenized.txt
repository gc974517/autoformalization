\begin{document} \begin{theorem} Take a segment of code as \begin{verbatim} <var:B0> := <nat:1> ; <var:q> := <var:B0> \end{verbatim} Allowing it to be that $ <var:M> = <var:h> $ ahead of interpreting our list of commands it must be that we see $ <var:q> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands is shown using standard Hoare techniques . Following , the binding statement letting $ <nat:1> $ into $ <var:B0>$ . This advances the condition $ \{ <var:M> = <var:h> \} $ toward the postcondition $ \{ <var:M> = <var:h> \land <var:B0> = <nat:1> \} $ . Moving onward , the variable update code defining $ <var:B0$ as $ <var:q>$ . This command redefines the condition $ \{ <var:M> = <var:h> \land <var:B0> = <nat:1> \} $ to $ \{ <var:M> = <var:h> \land <var:q> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:M> = <var:h> }} <var:B0> := <nat:1> ; <var:q> := <var:B0> {{ <var:q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 