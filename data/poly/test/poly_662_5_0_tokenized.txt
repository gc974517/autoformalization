\begin{document} \begin{theorem} Define a code segment in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:2> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:W> ; <var:e> := <var:u1> ; <var:e> := <var:e> + <var:u0> \end{verbatim} Given it to hold that $ <var:W> = <var:o> $ ahead of executing our series of instructions , it follows that we see $ <var:e> = <nat:3> * <var:o> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the code can be shown by typical Hoare logic . Immediately following , the binding command yielding $ <nat:2> $ into $ <var:u0>$ . This command redefines the precondition $ \{ <var:W> = <var:o> \} $ toward the condition $ \{ <var:W> = <var:o> \land <var:u0> = <nat:2> \} $ . This is deduced by the assignment rule obtained from standard Hoare techniques . Now , we have the variable assignmet line letting $ <nat:3> $ toward $ <var:u1>$ . This line transfers the precondition $ \{ <var:W> = <var:o> \land <var:u0> = <nat:2> \} $ into the postcondition $ \{ <var:W> = <var:o> \land <var:u0> = <nat:2> \land <var:u1> = <nat:3> \} $ . This is shown to be logically sound using the assignment rule in Hoare techniques . Honing in on the proceeding piece of code found in our set of commands , we have the variable assignmet line \verb | <var:u1> := <var:u1> * <var:W> ; | . This line moves $ \{ <var:W> = <var:o> \land <var:u0> = <nat:2> \land <var:u1> = <nat:3> \} $ into the postcondition $ \{ <var:W> = <var:o> \land <var:u0> = <nat:2> \land <var:u1> = <nat:3> * <var:o> \} $ . This is deduced by the assignment law of standard Hoare reasoning . Considering the next piece of code seen in our list of instructions , we see the variable assignmet statement \verb | <var:e> := <var:u1> ; | . This takes the precondition $ \{ <var:W> = <var:o> \land <var:u0> = <nat:2> \land <var:u1> = <nat:3> * <var:o> \} $ into the postcondition $ \{ <var:W> = <var:o> \land <var:u0> = <nat:2> \land <var:e> = <nat:3> * <var:o> \} $ . This is shown to be logically sound with the assignment law of Hoare reasoning . Further , we have the environment update statement giving $ <var:e> + <var:u0$ toward $ <var:e>$ . This command forwards the condition $ \{ <var:W> = <var:o> \land <var:u0> = <nat:2> \land <var:e> = <nat:3> * <var:o> \} $ as the condition $ \{ <var:W> = <var:o> \land <var:e> = <nat:3> * <var:o> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:W> = <var:o> }} <var:u0> := <nat:2> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:W> ; <var:e> := <var:u1> ; <var:e> := <var:e> + <var:u0> {{ <var:e> = <nat:3> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:u0> = <nat:2> /\ <var:e> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:e> = <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 