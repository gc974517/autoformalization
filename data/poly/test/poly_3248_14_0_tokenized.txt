\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:W> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:W> ; <var:q2> := <var:q2> * <var:W> ; <var:q3> := <nat:3> ; <var:q3> := <var:q3> * <var:W> ; <var:q3> := <var:q3> * <var:W> ; <var:q3> := <var:q3> * <var:W> ; <var:O> := <var:q3> ; <var:O> := <var:O> + <var:q2> ; <var:O> := <var:O> + <var:q1> ; <var:O> := <var:O> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:W> = <var:l> $ prior to running this set of instructions , it must be that $ <var:O> = <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our set of commands is demonstrated through standard Hoare reasoning . Keeping momentum , we have the assignment code \verb | <var:q0> := <nat:2> ; | . This redefines $ \{ <var:W> = <var:l> \} $ as the postcondition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \} $ . Moving on to the proceeding piece of code seen in the program , the variable binding line \verb | <var:q1> := <nat:2> ; | . This line takes the condition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \} $ toward the condition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \} $ . This is guaranteed using the assignment law defined by Hoare logic . Moving on to the next step , we see the binding code yielding $ <var:q1> * <var:W> $ to $ <var:q1>$ . This redefines $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \} $ as the condition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \} $ . This is rigorously given by the assignment inference rule in typical Hoare logic . Following , we have the binding command binding $ <nat:4> $ to $ <var:q2>$ . This statement moves the precondition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \} $ as $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \} $ . This is rigorously given through the assignment inference rule obtained from standard Hoare logic . Now , we see the variable update statement letting $ <var:q2> * <var:W> $ toward $ <var:q2>$ . This code forwards the condition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \} $ to $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> \} $ . This is sound by the assignment law of Hoare reasoning . Going forward , we see the statement defining $ <var:q2> * <var:W> $ into $ <var:q2>$ . This moves $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> \} $ toward the condition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \} $ . Following , we see the variable assignmet code \verb | <var:q3> := <nat:3> ; | . This advances $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \} $ toward the condition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:q3> = <nat:3> \} $ . This is known to be sound through the assignment scheme found in usual Hoare reasoning . Moving onward , we see the environment update line \verb | <var:q3> := <var:q3> * <var:W> ; | . This transfers the precondition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:q3> = <nat:3> \} $ toward $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:q3> = <nat:3> \times <var:l> \} $ . This is rigorously given with the assignment rule given by typical Hoare logic . Honing in on the subsequent command contained in the series of instructions , we have the assignment command yielding $ <var:q3> * <var:W> $ as $ <var:q3>$ . This advances $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:q3> = <nat:3> \times <var:l> \} $ as $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:q3> = <nat:3> \times <var:l> ^ <nat:2> \} $ . Stepping through , we see the variable assignmet command letting $ <var:q3> * <var:W> $ into $ <var:q3>$ . This command advances $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:q3> = <nat:3> \times <var:l> ^ <nat:2> \} $ into $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:q3> = <nat:3> \times <var:l> ^ <nat:3> \} $ . This is given using the assignment scheme in typical Hoare logic . Moving forward to the next step , the variable assignmet code assigning $ <var:q3> $ as $ <var:O>$ . This takes $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:q3> = <nat:3> \times <var:l> ^ <nat:3> \} $ as $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:O> = <nat:3> \times <var:l> ^ <nat:3> \} $ . Advancing to the next step , we have the environment update command \verb | <var:O> := <var:O> + <var:q2> ; | . This advances $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:q2> = <nat:4> \times <var:l> ^ <nat:2> \land <var:O> = <nat:3> \times <var:l> ^ <nat:3> \} $ toward the postcondition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:O> = <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> \} $ . This is rigorously given with the assignment inference rule given by usual Hoare reasoning . Taking another step toward the upcoming line of code seen in our series of instructions , the assignment command letting $ <var:O> + <var:q1> $ into $ <var:O>$ . This takes the condition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \times <var:l> \land <var:O> = <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> \} $ as $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:O> = <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> \} $ . Next , we see the variable update command giving $ <var:O> + <var:q0$ to $ <var:O>$ . This moves the condition $ \{ <var:W> = <var:l> \land <var:q0> = <nat:2> \land <var:O> = <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> \} $ toward the condition $ \{ <var:W> = <var:l> \land <var:O> = <nat:3> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:2> \} $ . This is shown using the assignment law defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q0> := <nat:2> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:W> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:W> ; <var:q2> := <var:q2> * <var:W> ; <var:q3> := <nat:3> ; <var:q3> := <var:q3> * <var:W> ; <var:q3> := <var:q3> * <var:W> ; <var:q3> := <var:q3> * <var:W> ; <var:O> := <var:q3> ; <var:O> := <var:O> + <var:q2> ; <var:O> := <var:O> + <var:q1> ; <var:O> := <var:O> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:W> = <var:l> }} <def:poly> {{ <var:O> = <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:q2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:q2> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:q2> = <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:q2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:q3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:q2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:q2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:q2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:q2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:O> = <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:l> /\ <var:O> = <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:q0> = <nat:2> /\ <var:O> = <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:O> = <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 