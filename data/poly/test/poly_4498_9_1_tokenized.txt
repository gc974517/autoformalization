\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:D1> := <var:W> ; <var:D2> := <var:D1> * <var:W> ; <var:D3> := <var:D2> * <var:W> ; <var:D0> := <nat:2> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:7> ; <var:X> := <var:D3> <var:X> := <var:X> + <var:D2> <var:X> := <var:X> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:W> = <var:z> $ prior to the execution of this list of instructions , it follows that we see $ <var:X> = <nat:7> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this series of commands is given with usual Hoare techniques . Considering the subsequent step found in our set of commands , we see the line \verb | <var:D1> := <var:W> ; | . This redefines $ \{ <var:W> = <var:z> \} $ toward $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \} $ . Looking at the subsequent line of code seen in our segment of code , we have the environment update command \verb | <var:D2> := <var:D1> * <var:W> ; | . This redefines the condition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \} $ as $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \} $ . Further , the variable binding code binding $ <var:D2> * <var:W> $ into $ <var:D3>$ . This takes the precondition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \} $ to the postcondition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \} $ . This is deduced using the assignment rule defined in Hoare reasoning . Focusing on the upcoming bit of code in the program , we see the assignment command binding $ <nat:2> $ into $ <var:D0>$ . This moves the condition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \} $ to the condition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \land <var:D0> = <nat:2> \} $ . This is known to be sound with the assignment inference rule obtained from usual Hoare reasoning . Going to the next step , the variable binding line defining $ <var:D2> * <nat:1> $ into $ <var:D2>$ . This command transfers the condition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \land <var:D0> = <nat:2> \} $ to the postcondition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <nat:1> * <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \land <var:D0> = <nat:2> \} $ . This is shown through the assignment inference rule given by typical Hoare techniques . Taking another step toward the subsequent piece of code seen in the set of commands , the assignment statement \verb | <var:D3> := <var:D3> * <nat:7> ; | . This code advances the condition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <nat:1> * <var:z> ^ <nat:2> \land <var:D3> = <var:z> ^ <nat:3> \land <var:D0> = <nat:2> \} $ to the postcondition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <nat:1> * <var:z> ^ <nat:2> \land <var:D3> = <nat:7> * <var:z> ^ <nat:3> \land <var:D0> = <nat:2> \} $ . This is shown to be logically sound by the assignment law given by typical Hoare techniques . Moving on to the proceeding bit of code seen in the segment of code , we have the line \verb | <var:X> := <var:D3> | . This advances the condition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <nat:1> * <var:z> ^ <nat:2> \land <var:D3> = <nat:7> * <var:z> ^ <nat:3> \land <var:D0> = <nat:2> \} $ toward $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <nat:1> * <var:z> ^ <nat:2> \land <var:D0> = <nat:2> \land <var:X> = <nat:7> * <var:z> ^ <nat:3> \} $ . Shifting focus toward the following statement in the list of commands , we have the assignment command \verb | <var:X> := <var:X> + <var:D2> | . This command moves $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D2> = <nat:1> * <var:z> ^ <nat:2> \land <var:D0> = <nat:2> \land <var:X> = <nat:7> * <var:z> ^ <nat:3> \} $ to $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D0> = <nat:2> \land <var:X> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> \} $ . Next , the binding command \verb | <var:X> := <var:X> + <var:D0> | . This line forwards the precondition $ \{ <var:W> = <var:z> \land <var:D1> = <var:z> \land <var:D0> = <nat:2> \land <var:X> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> \} $ toward the postcondition $ \{ <var:W> = <var:z> \land <var:X> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> \} $ . This is shown to be logically sound through the assignment law of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:W> ; <var:D2> := <var:D1> * <var:W> ; <var:D3> := <var:D2> * <var:W> ; <var:D0> := <nat:2> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:7> ; <var:X> := <var:D3> <var:X> := <var:X> + <var:D2> <var:X> := <var:X> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:W> = <var:z> }} <def:poly> {{ <var:X> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:D1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <var:z> ^ <nat:2> /\ <var:D3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <var:z> ^ <nat:2> /\ <var:D3> = <var:z> ^ <nat:3> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:D3> = <var:z> ^ <nat:3> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:D3> = <nat:7> * <var:z> ^ <nat:3> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:D1> = <var:z> /\ <var:D2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:D0> = <nat:2> /\ <var:X> = <nat:7> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:D1> = <var:z> /\ <var:D0> = <nat:2> /\ <var:X> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:X> = <nat:7> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 