\begin{document} \begin{theorem} Define a program : \begin{verbatim} <var:n0> := <nat:5> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:j> ; <var:R> := <var:n1> ; <var:R> := <var:R> + <var:n0> \end{verbatim} Given given all natural numbers $ <var:U> $ $ <var:j> = <var:U> $ before the evaluation of the code segment , it holds that $ <var:R> = <nat:1> \cdot <var:U> + <nat:5> $ after segment of code exits . \end{theorem} \begin{proof} Proving correctness for our list of commands can be accomplished with Hoare techniques . After , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:U> \} & <var:n0> := <nat:5> & \{ <var:j> = <var:U> \land <var:n0> = <nat:5> \} \end{tabular} Moving forward to the upcoming command in the code , \[ \begin{tabular} {rcl} \{ <var:j> = <var:U> \} & <var:n0> := <nat:5> & \{ <var:j> = <var:U> \land <var:n0> = <nat:5> \} \end{tabular} Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:U> \} & <var:n0> := <nat:5> & \{ <var:j> = <var:U> \land <var:n0> = <nat:5> \} \end{tabular} Paying attention to the subsequent line of code seen in the list of commands , \[ \begin{tabular} {rcl} \{ <var:j> = <var:U> \} & <var:n0> := <nat:5> & \{ <var:j> = <var:U> \land <var:n0> = <nat:5> \} \end{tabular} This is shown to be logically sound using the binding inference rule defined by Hoare reasoning . Moving on to the next line seen in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:U> \} & <var:n0> := <nat:5> & \{ <var:j> = <var:U> \land <var:n0> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:j> = <var:U> }} <var:n0> := <nat:5> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:j> ; <var:R> := <var:n1> ; <var:R> := <var:R> + <var:n0> {{ <var:R> = <nat:1> * <var:U> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:n0> = <nat:5> /\ <var:R> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:R> = <nat:1> * <var:U> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 