\begin{document} \begin{theorem} We define the following list of commands : \begin{verbatim} <var:j1> := <var:C> ; <var:j2> := <var:j1> * <var:C> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:4> ; <var:a> := <var:j2> <var:a> := <var:a> + <var:j1> <var:a> := <var:a> + <var:j0> \end{verbatim} Allow --- with some $ <var:f> \in \mathbb{Z}^+ $ --- it to be that $ <var:C> = <var:f> $ prior to interpreting this set of instructions , it holds that we have $ <var:a> = <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:2> $ once segment of code terminates . \end{theorem} \begin{proof} Using typical Hoare logic gives : \begin{eqnarray} \{ <var:C> = <var:f> \} \\ <var:j1> := <var:C> ; \\ \{ <var:C> = <var:f> \land <var:j1> = <var:f> \} \\ <var:j2> := <var:j1> * <var:C> ; \\ \{ <var:C> = <var:f> \land <var:j1> = <var:f> \land <var:j2> = <var:f> ^ <nat:2> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:C> = <var:f> \land <var:j1> = <var:f> \land <var:j2> = <var:f> ^ <nat:2> \land <var:j0> = <nat:2> \} \\ <var:j1> := <var:j1> * <nat:1> ; \\ \{ <var:C> = <var:f> \land <var:j1> = <nat:1> \cdot <var:f> \land <var:j2> = <var:f> ^ <nat:2> \land <var:j0> = <nat:2> \} \\ <var:j2> := <var:j2> * <nat:4> ; \\ \{ <var:C> = <var:f> \land <var:j1> = <nat:1> \cdot <var:f> \land <var:j2> = <nat:4> \cdot <var:f> ^ <nat:2> \land <var:j0> = <nat:2> \} \\ <var:a> := <var:j2> \\ \{ <var:C> = <var:f> \land <var:j1> = <nat:1> \cdot <var:f> \land <var:j0> = <nat:2> \land <var:a> = <nat:4> \cdot <var:f> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:j1> \\ \{ <var:C> = <var:f> \land <var:j0> = <nat:2> \land <var:a> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> \} \\ <var:a> := <var:a> + <var:j0> \\ \{ <var:C> = <var:f> \land <var:a> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:2> \} \end{eqnarray} As a result , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:C> = <var:f> }} <var:j1> := <var:C> ; <var:j2> := <var:j1> * <var:C> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:4> ; <var:a> := <var:j2> <var:a> := <var:a> + <var:j1> <var:a> := <var:a> + <var:j0> {{ <var:a> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:j1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:j1> = <var:f> /\ <var:j2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:j1> = <var:f> /\ <var:j2> = <var:f> ^ <nat:2> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:j1> = <nat:1> * <var:f> /\ <var:j2> = <var:f> ^ <nat:2> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:j1> = <nat:1> * <var:f> /\ <var:j2> = <nat:4> * <var:f> ^ <nat:2> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:j1> = <nat:1> * <var:f> /\ <var:j0> = <nat:2> /\ <var:a> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:j0> = <nat:2> /\ <var:a> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:a> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 