\begin{document} \begin{theorem} Let the following set of commands : \begin{verbatim} <var:f0> := <nat:5> ; <var:R> := <var:f0> \end{verbatim} Allowing that we have $ <var:Y> = <var:p> $ before evaluating the set of commands it holds that $ <var:R> = <nat:5> $ after series of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:p> \} \\ <var:f0> := <nat:5> ; \\ \{ <var:Y> = <var:p> \land <var:f0> = <nat:5> \} \\ <var:R> := <var:f0> \\ \{ <var:Y> = <var:p> \land <var:R> = <nat:5> \} \end{eqnarray} Using standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:Y> = <var:p> }} <var:f0> := <nat:5> ; <var:R> := <var:f0> {{ <var:R> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:R> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 