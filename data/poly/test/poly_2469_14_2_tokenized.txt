\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w> := <nat:1> ; <var:w> := <nat:4> + <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <var:w> * <var:u> ; <var:w> := <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <nat:3> + <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <nat:4> + <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <var:w> * <var:u> ; <var:w> := <nat:1> + <var:w> * <var:u> ; <var:w> := <nat:4> + <var:w> * <var:u> ; <var:w> := <nat:3> + <var:w> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Assuming that we have $ <var:u> = <var:H> $ ahead of executing our set of commands , it holds that we have $ <var:w> = <nat:1> \times <var:H> ^ <nat:13> + <nat:4> \times <var:H> ^ <nat:12> + <nat:2> \times <var:H> ^ <nat:11> + <nat:2> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:1> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is accomplished through standard Hoare techniques . Following , we see the environment update command \verb | <var:w> := <nat:1> ; | . This transfers the condition $ \{ <var:u> = <var:H> \} $ into $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \} $ . Following , the statement yielding $ <nat:4> + <var:w> * <var:u> $ to $ <var:w>$ . This statement transfers the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \} $ toward $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> + <nat:4> \} $ . Honing in on the following command found in the code segment , we have the assignment command assigning $ <nat:2> + <var:w> * <var:u> $ as $ <var:w>$ . This command transfers the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> + <nat:4> \} $ as the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:2> \} $ . This is rigorously given by the assignment law obtained from typical Hoare reasoning . Looking at the subsequent step seen in the segment of code , we see the variable binding line letting $ <var:w> * <var:u> $ toward $ <var:w>$ . This advances $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:2> \} $ toward the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + \} $ . Paying attention to the next line seen in the list of commands , the line \verb | <var:w> := <var:w> * <var:u> ; | . This code moves $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + \} $ into the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:4> + <nat:4> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + \} $ . Moving forward to the next piece of code in the set of instructions , we see the variable update command yielding $ <nat:2> + <var:w> * <var:u> $ into $ <var:w>$ . This code takes the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:4> + <nat:4> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + \} $ to the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:5> + <nat:4> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:2> \} $ . Advancing to the next step , the assignment command defining $ <nat:3> + <var:w> * <var:u> $ into $ <var:w>$ . This transfers the precondition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:5> + <nat:4> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:2> \} $ toward $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:6> + <nat:4> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> + <nat:3> \} $ . Honing in on the following statement in our set of commands , we see the environment update code defining $ <nat:2> + <var:w> * <var:u> $ into $ <var:w>$ . This advances the precondition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:6> + <nat:4> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> + <nat:3> \} $ as the postcondition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:7> + <nat:4> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:2> \} $ . This is sound with the assignment law defined in Hoare techniques . Taking a look at the subsequent step seen in our list of commands , the assignment line giving $ <nat:4> + <var:w> * <var:u> $ toward $ <var:w>$ . This code redefines $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:7> + <nat:4> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:2> \} $ toward the postcondition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:8> + <nat:4> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:4> \} $ . Immediately after , we have the variable assignmet statement assigning $ <nat:2> + <var:w> * <var:u> $ into $ <var:w>$ . This takes the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:8> + <nat:4> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:4> \} $ as the postcondition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:9> + <nat:4> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:2> \} $ . This is rigorously given through the assignment rule defined by Hoare logic . Advancing , we have the binding line letting $ <var:w> * <var:u> $ toward $ <var:w>$ . This statement advances $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:9> + <nat:4> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:2> \} $ into $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:10> + <nat:4> \cdot <var:H> ^ <nat:9> + <nat:2> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + \} $ . Going to the next step , the code \verb | <var:w> := <nat:1> + <var:w> * <var:u> ; | . This advances the precondition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:10> + <nat:4> \cdot <var:H> ^ <nat:9> + <nat:2> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + \} $ to the postcondition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:11> + <nat:4> \cdot <var:H> ^ <nat:10> + <nat:2> \cdot <var:H> ^ <nat:9> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:3> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:4> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:1> \} $ . This is guaranteed with the assignment law obtained from Hoare reasoning . After , the binding line defining $ <nat:4> + <var:w> * <var:u> $ toward $ <var:w>$ . This takes the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:11> + <nat:4> \cdot <var:H> ^ <nat:10> + <nat:2> \cdot <var:H> ^ <nat:9> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:3> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:4> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:1> \} $ as the postcondition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:12> + <nat:4> \cdot <var:H> ^ <nat:11> + <nat:2> \cdot <var:H> ^ <nat:10> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:3> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:4> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> + <nat:4> \} $ . This is given through the assignment inference rule obtained from typical Hoare techniques . Considering the upcoming step found in our list of commands , we see the binding line yielding $ <nat:3> + <var:w> * <var:u$ as $ <var:w>$ . This code forwards the condition $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:12> + <nat:4> \cdot <var:H> ^ <nat:11> + <nat:2> \cdot <var:H> ^ <nat:10> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:3> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:4> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> + <nat:4> \} $ toward $ \{ <var:u> = <var:H> \land <var:w> = <nat:1> \cdot <var:H> ^ <nat:13> + <nat:4> \cdot <var:H> ^ <nat:12> + <nat:2> \cdot <var:H> ^ <nat:11> + <nat:2> \cdot <var:H> ^ <nat:8> + <nat:3> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:4> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:1> ; <var:w> := <nat:4> + <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <var:w> * <var:u> ; <var:w> := <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <nat:3> + <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <nat:4> + <var:w> * <var:u> ; <var:w> := <nat:2> + <var:w> * <var:u> ; <var:w> := <var:w> * <var:u> ; <var:w> := <nat:1> + <var:w> * <var:u> ; <var:w> := <nat:4> + <var:w> * <var:u> ; <var:w> := <nat:3> + <var:w> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:u> = <var:H> }} <def:poly> {{ <var:w> = <nat:1> * <var:H> ^ <nat:13> + <nat:4> * <var:H> ^ <nat:12> + <nat:2> * <var:H> ^ <nat:11> + <nat:2> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:10> + <nat:4> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:11> + <nat:4> * <var:H> ^ <nat:10> + <nat:2> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:12> + <nat:4> * <var:H> ^ <nat:11> + <nat:2> * <var:H> ^ <nat:10> + <nat:2> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:w> = <nat:1> * <var:H> ^ <nat:13> + <nat:4> * <var:H> ^ <nat:12> + <nat:2> * <var:H> ^ <nat:11> + <nat:2> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 