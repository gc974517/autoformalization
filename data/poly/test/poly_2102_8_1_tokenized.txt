\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:p1> := <var:x> ; <var:p2> := <var:p1> * <var:x> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:5> ; <var:p2> := <var:p2> * <nat:4> ; <var:d> := <var:p2> <var:d> := <var:d> + <var:p1> <var:d> := <var:d> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Assuming , letting integers $ <var:T> $ , that we have $ <var:x> = <var:T> $ before evaluating our set of commands , it must be that we see $ <var:d> = <nat:4> \times <var:T> ^ <nat:2> + <nat:5> \times <var:T> + <nat:1> $ once list of commands exits . \end{theorem} \begin{proof} Observe that the below decorated series of commands . \begin{eqnarray} \{ <var:x> = <var:T> \} \\ <var:p1> := <var:x> ; \\ \{ <var:x> = <var:T> \land <var:p1> = <var:T> \} \\ <var:p2> := <var:p1> * <var:x> ; \\ \{ <var:x> = <var:T> \land <var:p1> = <var:T> \land <var:p2> = <var:T> ^ <nat:2> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:x> = <var:T> \land <var:p1> = <var:T> \land <var:p2> = <var:T> ^ <nat:2> \land <var:p0> = <nat:1> \} \\ <var:p1> := <var:p1> * <nat:5> ; \\ \{ <var:x> = <var:T> \land <var:p1> = <nat:5> * <var:T> \land <var:p2> = <var:T> ^ <nat:2> \land <var:p0> = <nat:1> \} \\ <var:p2> := <var:p2> * <nat:4> ; \\ \{ <var:x> = <var:T> \land <var:p1> = <nat:5> * <var:T> \land <var:p2> = <nat:4> * <var:T> ^ <nat:2> \land <var:p0> = <nat:1> \} \\ <var:d> := <var:p2> \\ \{ <var:x> = <var:T> \land <var:p1> = <nat:5> * <var:T> \land <var:p0> = <nat:1> \land <var:d> = <nat:4> * <var:T> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:p1> \\ \{ <var:x> = <var:T> \land <var:p0> = <nat:1> \land <var:d> = <nat:4> * <var:T> ^ <nat:2> + <nat:5> * <var:T> \} \\ <var:d> := <var:d> + <var:p0> \\ \{ <var:x> = <var:T> \land <var:d> = <nat:4> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p1> := <var:x> ; <var:p2> := <var:p1> * <var:x> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:5> ; <var:p2> := <var:p2> * <nat:4> ; <var:d> := <var:p2> <var:d> := <var:d> + <var:p1> <var:d> := <var:d> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:x> = <var:T> }} <def:poly> {{ <var:d> = <nat:4> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:p1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:p1> = <var:T> /\ <var:p2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:p1> = <var:T> /\ <var:p2> = <var:T> ^ <nat:2> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:p1> = <nat:5> * <var:T> /\ <var:p2> = <var:T> ^ <nat:2> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:p1> = <nat:5> * <var:T> /\ <var:p2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:p1> = <nat:5> * <var:T> /\ <var:p0> = <nat:1> /\ <var:d> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:p0> = <nat:1> /\ <var:d> = <nat:4> * <var:T> ^ <nat:2> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:d> = <nat:4> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 