\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:Y> ; <var:f2> := <var:f1> * <var:Y> ; <var:f3> := <var:f2> * <var:Y> ; <var:f4> := <var:f3> * <var:Y> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:1> ; <var:f3> := <var:f3> * <nat:8> ; <var:f4> := <var:f4> * <nat:8> ; <var:E> := <var:f4> <var:E> := <var:E> + <var:f3> <var:E> := <var:E> + <var:f1> <var:E> := <var:E> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Allow --- given every integers $ <var:o> $ --- it to be that $ <var:Y> = <var:o> $ before evaluating this list of commands , it must be that we have $ <var:E> = <nat:8> \times <var:o> ^ <nat:4> + <nat:8> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> + <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning results in : \begin{eqnarray} \{ <var:Y> = <var:o> \} \\ <var:f1> := <var:Y> ; \\ \{ <var:Y> = <var:o> \land <var:f1> = <var:o> \} \\ <var:f2> := <var:f1> * <var:Y> ; \\ \{ <var:Y> = <var:o> \land <var:f1> = <var:o> \land <var:f2> = <var:o> ^ <nat:2> \} \end{eqnarray} Furthering executing this list of commands results in : \begin{eqnarray} <var:f3> := <var:f2> * <var:Y> ; \\ \{ <var:Y> = <var:o> \land <var:f1> = <var:o> \land <var:f2> = <var:o> ^ <nat:2> \land <var:f3> = <var:o> ^ <nat:3> \} \\ <var:f4> := <var:f3> * <var:Y> ; \\ \{ <var:Y> = <var:o> \land <var:f1> = <var:o> \land <var:f2> = <var:o> ^ <nat:2> \land <var:f3> = <var:o> ^ <nat:3> \land <var:f4> = <var:o> ^ <nat:4> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:Y> = <var:o> \land <var:f1> = <var:o> \land <var:f2> = <var:o> ^ <nat:2> \land <var:f3> = <var:o> ^ <nat:3> \land <var:f4> = <var:o> ^ <nat:4> \land <var:f0> = <nat:2> \} \\ <var:f1> := <var:f1> * <nat:1> ; \\ \{ <var:Y> = <var:o> \land <var:f1> = <nat:1> \times <var:o> \land <var:f2> = <var:o> ^ <nat:2> \land <var:f3> = <var:o> ^ <nat:3> \land <var:f4> = <var:o> ^ <nat:4> \land <var:f0> = <nat:2> \} \\ <var:f3> := <var:f3> * <nat:8> ; \\ \{ <var:Y> = <var:o> \land <var:f1> = <nat:1> \times <var:o> \land <var:f2> = <var:o> ^ <nat:2> \land <var:f3> = <nat:8> \times <var:o> ^ <nat:3> \land <var:f4> = <var:o> ^ <nat:4> \land <var:f0> = <nat:2> \} \\ <var:f4> := <var:f4> * <nat:8> ; \\ \{ <var:Y> = <var:o> \land <var:f1> = <nat:1> \times <var:o> \land <var:f2> = <var:o> ^ <nat:2> \land <var:f3> = <nat:8> \times <var:o> ^ <nat:3> \land <var:f4> = <nat:8> \times <var:o> ^ <nat:4> \land <var:f0> = <nat:2> \} \\ <var:E> := <var:f4> \\ \{ <var:Y> = <var:o> \land <var:f1> = <nat:1> \times <var:o> \land <var:f2> = <var:o> ^ <nat:2> \land <var:f3> = <nat:8> \times <var:o> ^ <nat:3> \land <var:f0> = <nat:2> \land <var:E> = <nat:8> \times <var:o> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:f3> \\ \{ <var:Y> = <var:o> \land <var:f1> = <nat:1> \times <var:o> \land <var:f2> = <var:o> ^ <nat:2> \land <var:f0> = <nat:2> \land <var:E> = <nat:8> \times <var:o> ^ <nat:4> + <nat:8> \times <var:o> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:f1> \\ \{ <var:Y> = <var:o> \land <var:f0> = <nat:2> \land <var:E> = <nat:8> \times <var:o> ^ <nat:4> + <nat:8> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> \} \\ <var:E> := <var:E> + <var:f0> \\ \{ <var:Y> = <var:o> \land <var:E> = <nat:8> \times <var:o> ^ <nat:4> + <nat:8> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> + <nat:2> \} \end{eqnarray} Therefore , the series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <var:f4> : string := " <var:f4> " . Definition <def:poly> := <var:f1> := <var:Y> ; <var:f2> := <var:f1> * <var:Y> ; <var:f3> := <var:f2> * <var:Y> ; <var:f4> := <var:f3> * <var:Y> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:1> ; <var:f3> := <var:f3> * <nat:8> ; <var:f4> := <var:f4> * <nat:8> ; <var:E> := <var:f4> <var:E> := <var:E> + <var:f3> <var:E> := <var:E> + <var:f1> <var:E> := <var:E> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:Y> = <var:o> }} <def:poly> {{ <var:E> = <nat:8> * <var:o> ^ <nat:4> + <nat:8> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <var:o> /\ <var:f2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <var:o> /\ <var:f2> = <var:o> ^ <nat:2> /\ <var:f3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <var:o> /\ <var:f2> = <var:o> ^ <nat:2> /\ <var:f3> = <var:o> ^ <nat:3> /\ <var:f4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <var:o> /\ <var:f2> = <var:o> ^ <nat:2> /\ <var:f3> = <var:o> ^ <nat:3> /\ <var:f4> = <var:o> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <nat:1> * <var:o> /\ <var:f2> = <var:o> ^ <nat:2> /\ <var:f3> = <var:o> ^ <nat:3> /\ <var:f4> = <var:o> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <nat:1> * <var:o> /\ <var:f2> = <var:o> ^ <nat:2> /\ <var:f3> = <nat:8> * <var:o> ^ <nat:3> /\ <var:f4> = <var:o> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <nat:1> * <var:o> /\ <var:f2> = <var:o> ^ <nat:2> /\ <var:f3> = <nat:8> * <var:o> ^ <nat:3> /\ <var:f4> = <nat:8> * <var:o> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <nat:1> * <var:o> /\ <var:f2> = <var:o> ^ <nat:2> /\ <var:f3> = <nat:8> * <var:o> ^ <nat:3> /\ <var:f0> = <nat:2> /\ <var:E> = <nat:8> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f1> = <nat:1> * <var:o> /\ <var:f2> = <var:o> ^ <nat:2> /\ <var:f0> = <nat:2> /\ <var:E> = <nat:8> * <var:o> ^ <nat:4> + <nat:8> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:f0> = <nat:2> /\ <var:E> = <nat:8> * <var:o> ^ <nat:4> + <nat:8> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:o> /\ <var:E> = <nat:8> * <var:o> ^ <nat:4> + <nat:8> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 