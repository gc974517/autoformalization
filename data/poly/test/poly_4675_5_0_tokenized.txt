\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:3> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:t> ; <var:f> := <var:s1> ; <var:f> := <var:f> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Allowing --- for every $ <var:X> $ --- it to be that $ <var:t> = <var:X> $ before executing the segment of code , it holds that we have $ <var:f> = <nat:2> \cdot <var:X> + <nat:3> $ when segment of code has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is demonstrated through Hoare techniques . Moving forward , we see \begin{eqnarray} \{ <var:t> = <var:X> \} \, <var:s0> := <nat:3> \, \{ <var:t> = <var:X> \land <var:s0> = <nat:3> \} \\ \{ <var:t> = <var:X> \land <var:s0> = <nat:3> \} \, <var:s1> := <nat:2> \, \{ <var:t> = <var:X> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \} \end{eqnarray} This is guaranteed through the variable binding law defined by typical Hoare logic . Paying attention to the upcoming steps in our series of instructions , we have \begin{eqnarray} \{ <var:t> = <var:X> \} \, <var:s0> := <nat:3> \, \{ <var:t> = <var:X> \land <var:s0> = <nat:3> \} \\ \{ <var:t> = <var:X> \land <var:s0> = <nat:3> \} \, <var:s1> := <nat:2> \, \{ <var:t> = <var:X> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \} \\ \{ <var:t> = <var:X> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \} \, <var:s1> := <var:s1> * <var:t> \, \{ <var:t> = <var:X> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \times <var:X> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:3> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:t> ; <var:f> := <var:s1> ; <var:f> := <var:f> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:t> = <var:X> }} <def:poly> {{ <var:f> = <nat:2> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:s0> = <nat:3> /\ <var:f> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:f> = <nat:2> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 