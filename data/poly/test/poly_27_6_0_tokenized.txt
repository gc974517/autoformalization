\begin{document} \begin{theorem} We define a list of instructions such that \begin{verbatim} <var:H0> := <nat:3> ; <var:H2> := <nat:9> ; <var:H2> := <var:H2> * <var:C> ; <var:H2> := <var:H2> * <var:C> ; <var:n> := <var:H2> ; <var:n> := <var:n> + <var:H0> \end{verbatim} Assume that $ <var:C> = <var:T> $ ahead of evaluating our program , it holds that we have $ <var:n> = <nat:9> * <var:T> ^ <nat:2> + <nat:3> $ when series of commands executes . \end{theorem} \begin{proof} Note that the below decorated program . \begin{eqnarray} \{ <var:C> = <var:T> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:C> = <var:T> \land <var:H0> = <nat:3> \} \\ <var:H2> := <nat:9> ; \\ \{ <var:C> = <var:T> \land <var:H0> = <nat:3> \land <var:H2> = <nat:9> \} \\ <var:H2> := <var:H2> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:H0> = <nat:3> \land <var:H2> = <nat:9> \times <var:T> \} \\ <var:H2> := <var:H2> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:H0> = <nat:3> \land <var:H2> = <nat:9> \times <var:T> ^ <nat:2> \} \\ <var:n> := <var:H2> ; \\ \{ <var:C> = <var:T> \land <var:H0> = <nat:3> \land <var:n> = <nat:9> \times <var:T> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:H0> \\ \{ <var:C> = <var:T> \land <var:n> = <nat:9> \times <var:T> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:C> = <var:T> }} <var:H0> := <nat:3> ; <var:H2> := <nat:9> ; <var:H2> := <var:H2> * <var:C> ; <var:H2> := <var:H2> * <var:C> ; <var:n> := <var:H2> ; <var:n> := <var:n> + <var:H0> {{ <var:n> = <nat:9> * <var:T> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:H0> = <nat:3> /\ <var:H2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:H0> = <nat:3> /\ <var:H2> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:H0> = <nat:3> /\ <var:H2> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:H0> = <nat:3> /\ <var:n> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:n> = <nat:9> * <var:T> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 