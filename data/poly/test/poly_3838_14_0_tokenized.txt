\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:4> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:C> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:C> ; <var:v2> := <var:v2> * <var:C> ; <var:v3> := <nat:3> ; <var:v3> := <var:v3> * <var:C> ; <var:v3> := <var:v3> * <var:C> ; <var:v3> := <var:v3> * <var:C> ; <var:A> := <var:v3> ; <var:A> := <var:A> + <var:v2> ; <var:A> := <var:A> + <var:v1> ; <var:A> := <var:A> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:C> = <var:g> $ before the evaluation of our code segment it follows that $ <var:A> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> $ after set of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:g> \} \\ <var:v0> := <nat:4> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \} \\ <var:v1> := <nat:4> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \} \\ <var:v1> := <var:v1> * <var:C> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \} \\ <var:v2> := <nat:2> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:v2> = <nat:2> \} \\ <var:v2> := <var:v2> * <var:C> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:v2> = <nat:2> \times <var:g> \} \\ <var:v2> := <var:v2> * <var:C> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:v2> = <nat:2> \times <var:g> ^ <nat:2> \} \end{eqnarray} Advancing executing the code gives us : \begin{eqnarray} <var:v3> := <nat:3> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:v2> = <nat:2> \times <var:g> ^ <nat:2> \land <var:v3> = <nat:3> \} \\ <var:v3> := <var:v3> * <var:C> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:v2> = <nat:2> \times <var:g> ^ <nat:2> \land <var:v3> = <nat:3> \times <var:g> \} \\ <var:v3> := <var:v3> * <var:C> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:v2> = <nat:2> \times <var:g> ^ <nat:2> \land <var:v3> = <nat:3> \times <var:g> ^ <nat:2> \} \\ <var:v3> := <var:v3> * <var:C> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:v2> = <nat:2> \times <var:g> ^ <nat:2> \land <var:v3> = <nat:3> \times <var:g> ^ <nat:3> \} \\ <var:A> := <var:v3> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:v2> = <nat:2> \times <var:g> ^ <nat:2> \land <var:A> = <nat:3> \times <var:g> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:v2> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \land <var:A> = <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:v1> ; \\ \{ <var:C> = <var:g> \land <var:v0> = <nat:4> \land <var:A> = <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> \} \\ <var:A> := <var:A> + <var:v0> \\ \{ <var:C> = <var:g> \land <var:A> = <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:4> \} \end{eqnarray} Applying usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:C> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:C> ; <var:v2> := <var:v2> * <var:C> ; <var:v3> := <nat:3> ; <var:v3> := <var:v3> * <var:C> ; <var:v3> := <var:v3> * <var:C> ; <var:v3> := <var:v3> * <var:C> ; <var:A> := <var:v3> ; <var:A> := <var:A> + <var:v2> ; <var:A> := <var:A> + <var:v1> ; <var:A> := <var:A> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:C> = <var:g> }} <def:poly> {{ <var:A> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:v2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:v2> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:v2> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:v2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:v3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:v2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:v2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:v2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:v2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:A> = <nat:3> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> /\ <var:A> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:v0> = <nat:4> /\ <var:A> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:g> /\ <var:A> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 