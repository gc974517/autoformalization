\begin{document} \begin{theorem} We define the following list of commands such that \begin{verbatim} <var:k0> := <nat:4> ; <var:H> := <var:k0> \end{verbatim} Assume $ <var:u> = <var:i> $ prior to running this segment of code it follows that we see $ <var:H> = <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare logic gives : \begin{eqnarray} \{ <var:u> = <var:i> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:u> = <var:i> \land <var:k0> = <nat:4> \} \\ <var:H> := <var:k0> \\ \{ <var:u> = <var:i> \land <var:H> = <nat:4> \} \end{eqnarray} Thusly , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:u> = <var:i> }} <var:k0> := <nat:4> ; <var:H> := <var:k0> {{ <var:H> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:i> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:i> /\ <var:H> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 