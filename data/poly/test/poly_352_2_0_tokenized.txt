\begin{document} \begin{theorem} We define the following code segment as \begin{verbatim} <var:N0> := <nat:2> ; <var:F> := <var:N0> \end{verbatim} Given it to be that $ <var:X> = <var:e> $ ahead of running this set of instructions , then we see $ <var:F> = <nat:2> $ . \end{theorem} \begin{proof} Observe that the following decorated list of commands . \begin{eqnarray} \{ <var:X> = <var:e> \} \\ <var:N0> := <nat:2> ; \\ \{ <var:X> = <var:e> \land <var:N0> = <nat:2> \} \\ <var:F> := <var:N0> \\ \{ <var:X> = <var:e> \land <var:F> = <nat:2> \} \end{eqnarray} Using usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:X> = <var:e> }} <var:N0> := <nat:2> ; <var:F> := <var:N0> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 