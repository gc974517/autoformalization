\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:f1> := <var:z> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:1> ; <var:b> := <var:f1> <var:b> := <var:b> + <var:f0> \end{verbatim} Given it to be that $ <var:z> = <var:K> $ ahead of evaluating this segment of code it must be that we have $ <var:b> = <nat:1> \times <var:K> + <nat:8> $ after program has finished executing . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:z> = <var:K> \} \\ <var:f1> := <var:z> ; \\ \{ <var:z> = <var:K> \land <var:f1> = <var:K> \} \\ <var:f0> := <nat:8> ; \\ \{ <var:z> = <var:K> \land <var:f1> = <var:K> \land <var:f0> = <nat:8> \} \\ <var:f1> := <var:f1> * <nat:1> ; \\ \{ <var:z> = <var:K> \land <var:f1> = <nat:1> \times <var:K> \land <var:f0> = <nat:8> \} \\ <var:b> := <var:f1> \\ \{ <var:z> = <var:K> \land <var:f0> = <nat:8> \land <var:b> = <nat:1> \times <var:K> \} \\ <var:b> := <var:b> + <var:f0> \\ \{ <var:z> = <var:K> \land <var:b> = <nat:1> \times <var:K> + <nat:8> \} \end{eqnarray} Thus , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:z> = <var:K> }} <var:f1> := <var:z> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:1> ; <var:b> := <var:f1> <var:b> := <var:b> + <var:f0> {{ <var:b> = <nat:1> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:K> /\ <var:f1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:K> /\ <var:f1> = <var:K> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:K> /\ <var:f1> = <nat:1> * <var:K> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:K> /\ <var:f0> = <nat:8> /\ <var:b> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:K> /\ <var:b> = <nat:1> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 