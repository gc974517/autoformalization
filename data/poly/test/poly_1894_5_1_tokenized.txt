\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:X1> := <var:s> ; <var:X0> := <nat:4> ; <var:X1> := <var:X1> * <nat:2> ; <var:R> := <var:X1> <var:R> := <var:R> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:s> = <var:M> $ ( for every $ <var:M> $ ) prior to the evaluation of this list of commands , it follows that we have $ <var:R> = <nat:2> * <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this code segment can be done using Hoare logic . Observing the upcoming statement in our set of instructions , we see the variable binding command giving $ <var:s> $ into $ <var:X1>$ . This command redefines the precondition $ \{ <var:s> = <var:M> \} $ into the postcondition $ \{ <var:s> = <var:M> \land <var:X1> = <var:M> \} $ . This is given by the assignment law from typical Hoare reasoning . Following , the environment update statement \verb | <var:X0> := <nat:4> ; | . This redefines $ \{ <var:s> = <var:M> \land <var:X1> = <var:M> \} $ toward the condition $ \{ <var:s> = <var:M> \land <var:X1> = <var:M> \land <var:X0> = <nat:4> \} $ . Honing in on the subsequent line contained in our code , we see the statement \verb | <var:X1> := <var:X1> * <nat:2> ; | . This command forwards $ \{ <var:s> = <var:M> \land <var:X1> = <var:M> \land <var:X0> = <nat:4> \} $ to the postcondition $ \{ <var:s> = <var:M> \land <var:X1> = <nat:2> \cdot <var:M> \land <var:X0> = <nat:4> \} $ . This is rigorously given with the assignment rule defined in standard Hoare logic . Looking at the proceeding bit of code seen in our list of commands , we have the binding statement giving $ <var:X1$ as $ <var:R>$ . This command redefines $ \{ <var:s> = <var:M> \land <var:X1> = <nat:2> \cdot <var:M> \land <var:X0> = <nat:4> \} $ as the condition $ \{ <var:s> = <var:M> \land <var:X0> = <nat:4> \land <var:R> = <nat:2> \cdot <var:M> \} $ . This is guaranteed with the assignment law of typical Hoare techniques . Moving forward to the next step , we see the variable assignmet statement \verb | <var:R> := <var:R> + <var:X0> | . This statement redefines the condition $ \{ <var:s> = <var:M> \land <var:X0> = <nat:4> \land <var:R> = <nat:2> \cdot <var:M> \} $ toward $ \{ <var:s> = <var:M> \land <var:R> = <nat:2> \cdot <var:M> + <nat:4> \} $ . This is sound using the assignment law of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X1> := <var:s> ; <var:X0> := <nat:4> ; <var:X1> := <var:X1> * <nat:2> ; <var:R> := <var:X1> <var:R> := <var:R> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:s> = <var:M> }} <def:poly> {{ <var:R> = <nat:2> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:X1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:X1> = <var:M> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:X1> = <nat:2> * <var:M> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:X0> = <nat:4> /\ <var:R> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:R> = <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 