\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:A> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:3> ; <var:T> := <var:p1> <var:T> := <var:T> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:A> = <var:S> $ before running our set of commands , it must be that we see $ <var:T> = <nat:3> \times <var:S> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:A> = <var:S> \} \\ <var:p1> := <var:A> ; \\ \{ <var:A> = <var:S> \land <var:p1> = <var:S> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:A> = <var:S> \land <var:p1> = <var:S> \land <var:p0> = <nat:1> \} \\ <var:p1> := <var:p1> * <nat:3> ; \\ \{ <var:A> = <var:S> \land <var:p1> = <nat:3> \times <var:S> \land <var:p0> = <nat:1> \} \\ <var:T> := <var:p1> \\ \{ <var:A> = <var:S> \land <var:p0> = <nat:1> \land <var:T> = <nat:3> \times <var:S> \} \\ <var:T> := <var:T> + <var:p0> \\ \{ <var:A> = <var:S> \land <var:T> = <nat:3> \times <var:S> + <nat:1> \} \end{eqnarray} Thus , the set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p1> := <var:A> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:3> ; <var:T> := <var:p1> <var:T> := <var:T> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:A> = <var:S> }} <def:poly> {{ <var:T> = <nat:3> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:p1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:p1> = <var:S> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:p1> = <nat:3> * <var:S> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:p0> = <nat:1> /\ <var:T> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:T> = <nat:3> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 