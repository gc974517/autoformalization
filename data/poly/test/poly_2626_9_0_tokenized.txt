\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:r> ; <var:d2> := <nat:2> ; <var:d2> := <var:d2> * <var:r> ; <var:d2> := <var:d2> * <var:r> ; <var:U> := <var:d2> ; <var:U> := <var:U> + <var:d1> ; <var:U> := <var:U> + <var:d0> \end{verbatim} Assuming it to be that $ <var:r> = <var:t> $ prior to executing this program it holds that we see $ <var:U> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:5> \cdot <var:t> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the program is clear by Hoare reasoning . Honing in on the upcoming bit of code in the series of instructions , we see the line \verb | <var:d0> := <nat:3> ; | . This line moves the condition $ \{ <var:r> = <var:t> \} $ toward $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \} $ . Immediately after , we have the binding statement \verb | <var:d1> := <nat:5> ; | . This advances the precondition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \} $ as the postcondition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \} $ . This is guaranteed using the assignment inference rule defined in typical Hoare techniques . Now , we have the variable assignmet statement letting $ <var:d1> * <var:r> $ toward $ <var:d1>$ . This advances the condition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \} $ as the condition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \} $ . Taking a look at the subsequent command found in the program , the environment update line binding $ <nat:2> $ into $ <var:d2>$ . This moves the precondition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \} $ toward the postcondition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \land <var:d2> = <nat:2> \} $ . This is shown to be logically sound with the assignment rule defined by usual Hoare reasoning . Taking a look at the upcoming bit of code seen in our segment of code , we have the assignment statement \verb | <var:d2> := <var:d2> * <var:r> ; | . This line takes the precondition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \land <var:d2> = <nat:2> \} $ toward $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \land <var:d2> = <nat:2> \cdot <var:t> \} $ . Considering the next statement found in our code segment , we have the environment update statement defining $ <var:d2> * <var:r> $ into $ <var:d2>$ . This forwards the precondition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \land <var:d2> = <nat:2> \cdot <var:t> \} $ toward the postcondition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \land <var:d2> = <nat:2> \cdot <var:t> ^ <nat:2> \} $ . Considering the proceeding piece of code seen in the program , the environment update statement giving $ <var:d2> $ toward $ <var:U>$ . This line redefines the condition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \land <var:d2> = <nat:2> \cdot <var:t> ^ <nat:2> \} $ into the condition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \land <var:U> = <nat:2> \cdot <var:t> ^ <nat:2> \} $ . This is shown with the assignment scheme of Hoare techniques . Next , the binding statement \verb | <var:U> := <var:U> + <var:d1> ; | . This moves the precondition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:d1> = <nat:5> \cdot <var:t> \land <var:U> = <nat:2> \cdot <var:t> ^ <nat:2> \} $ to the condition $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:U> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:5> \cdot <var:t> \} $ . This is shown using the assignment inference rule in standard Hoare reasoning . Moving forward to the next step seen in the segment of code , we have the variable update line \verb | <var:U> := <var:U> + <var:d0> | . This code takes $ \{ <var:r> = <var:t> \land <var:d0> = <nat:3> \land <var:U> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:5> \cdot <var:t> \} $ toward $ \{ <var:r> = <var:t> \land <var:U> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:5> \cdot <var:t> + <nat:3> \} $ . This is shown to be logically sound by the assignment law defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <var:d0> := <nat:3> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:r> ; <var:d2> := <nat:2> ; <var:d2> := <var:d2> * <var:r> ; <var:d2> := <var:d2> * <var:r> ; <var:U> := <var:d2> ; <var:U> := <var:U> + <var:d1> ; <var:U> := <var:U> + <var:d0> {{ <var:U> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:5> * <var:t> /\ <var:d2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:5> * <var:t> /\ <var:d2> = <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:5> * <var:t> /\ <var:d2> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:5> * <var:t> /\ <var:U> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:d0> = <nat:3> /\ <var:U> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:U> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 