\begin{document} \begin{theorem} Let the following code segment such that \begin{verbatim} <var:f1> := <var:W> ; <var:f2> := <var:f1> * <var:W> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:4> ; <var:f2> := <var:f2> * <nat:9> ; <var:I> := <var:f2> <var:I> := <var:I> + <var:f1> <var:I> := <var:I> + <var:f0> \end{verbatim} Allowing it to be that $ <var:W> = <var:B> $ ahead of running the program it holds that we have $ <var:I> = <nat:9> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:6> $ when segment of code has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:B> \} \\ <var:f1> := <var:W> ; \\ \{ <var:W> = <var:B> \land <var:f1> = <var:B> \} \\ <var:f2> := <var:f1> * <var:W> ; \\ \{ <var:W> = <var:B> \land <var:f1> = <var:B> \land <var:f2> = <var:B> ^ <nat:2> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:W> = <var:B> \land <var:f1> = <var:B> \land <var:f2> = <var:B> ^ <nat:2> \land <var:f0> = <nat:6> \} \\ <var:f1> := <var:f1> * <nat:4> ; \\ \{ <var:W> = <var:B> \land <var:f1> = <nat:4> \cdot <var:B> \land <var:f2> = <var:B> ^ <nat:2> \land <var:f0> = <nat:6> \} \\ <var:f2> := <var:f2> * <nat:9> ; \\ \{ <var:W> = <var:B> \land <var:f1> = <nat:4> \cdot <var:B> \land <var:f2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:f0> = <nat:6> \} \\ <var:I> := <var:f2> \\ \{ <var:W> = <var:B> \land <var:f1> = <nat:4> \cdot <var:B> \land <var:f0> = <nat:6> \land <var:I> = <nat:9> \cdot <var:B> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:f1> \\ \{ <var:W> = <var:B> \land <var:f0> = <nat:6> \land <var:I> = <nat:9> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> \} \\ <var:I> := <var:I> + <var:f0> \\ \{ <var:W> = <var:B> \land <var:I> = <nat:9> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:6> \} \end{eqnarray} Utilizing standard Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:W> = <var:B> }} <var:f1> := <var:W> ; <var:f2> := <var:f1> * <var:W> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:4> ; <var:f2> := <var:f2> * <nat:9> ; <var:I> := <var:f2> <var:I> := <var:I> + <var:f1> <var:I> := <var:I> + <var:f0> {{ <var:I> = <nat:9> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:f1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:f1> = <var:B> /\ <var:f2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:f1> = <var:B> /\ <var:f2> = <var:B> ^ <nat:2> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:f1> = <nat:4> * <var:B> /\ <var:f2> = <var:B> ^ <nat:2> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:f1> = <nat:4> * <var:B> /\ <var:f2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:f1> = <nat:4> * <var:B> /\ <var:f0> = <nat:6> /\ <var:I> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:f0> = <nat:6> /\ <var:I> = <nat:9> * <var:B> ^ <nat:2> + <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:I> = <nat:9> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 