\begin{document} \begin{theorem} We define a program in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:m> ; <var:o2> := <var:o1> * <var:m> ; <var:o3> := <var:o2> * <var:m> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:9> ; <var:o2> := <var:o2> * <nat:4> ; <var:o3> := <var:o3> * <nat:8> ; <var:b> := <var:o3> <var:b> := <var:b> + <var:o2> <var:b> := <var:b> + <var:o1> <var:b> := <var:b> + <var:o0> \end{verbatim} Given it to be that $ <var:m> = <var:c> $ prior to the execution of our series of commands it must be that we have $ <var:b> = <nat:8> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:6> $ when set of commands has finished . \end{theorem} \begin{proof} Applying Hoare reasoning returns : \begin{eqnarray} \{ <var:m> = <var:c> \} \\ <var:o1> := <var:m> ; \\ \{ <var:m> = <var:c> \land <var:o1> = <var:c> \} \\ <var:o2> := <var:o1> * <var:m> ; \\ \{ <var:m> = <var:c> \land <var:o1> = <var:c> \land <var:o2> = <var:c> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:m> ; \\ \{ <var:m> = <var:c> \land <var:o1> = <var:c> \land <var:o2> = <var:c> ^ <nat:2> \land <var:o3> = <var:c> ^ <nat:3> \} \\ <var:o0> := <nat:6> ; \\ \{ <var:m> = <var:c> \land <var:o1> = <var:c> \land <var:o2> = <var:c> ^ <nat:2> \land <var:o3> = <var:c> ^ <nat:3> \land <var:o0> = <nat:6> \} \\ <var:o1> := <var:o1> * <nat:9> ; \\ \{ <var:m> = <var:c> \land <var:o1> = <nat:9> \times <var:c> \land <var:o2> = <var:c> ^ <nat:2> \land <var:o3> = <var:c> ^ <nat:3> \land <var:o0> = <nat:6> \} \\ <var:o2> := <var:o2> * <nat:4> ; \\ \{ <var:m> = <var:c> \land <var:o1> = <nat:9> \times <var:c> \land <var:o2> = <nat:4> \times <var:c> ^ <nat:2> \land <var:o3> = <var:c> ^ <nat:3> \land <var:o0> = <nat:6> \} \\ <var:o3> := <var:o3> * <nat:8> ; \\ \{ <var:m> = <var:c> \land <var:o1> = <nat:9> \times <var:c> \land <var:o2> = <nat:4> \times <var:c> ^ <nat:2> \land <var:o3> = <nat:8> \times <var:c> ^ <nat:3> \land <var:o0> = <nat:6> \} \\ <var:b> := <var:o3> \\ \{ <var:m> = <var:c> \land <var:o1> = <nat:9> \times <var:c> \land <var:o2> = <nat:4> \times <var:c> ^ <nat:2> \land <var:o0> = <nat:6> \land <var:b> = <nat:8> \times <var:c> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:o2> \\ \{ <var:m> = <var:c> \land <var:o1> = <nat:9> \times <var:c> \land <var:o0> = <nat:6> \land <var:b> = <nat:8> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:o1> \\ \{ <var:m> = <var:c> \land <var:o0> = <nat:6> \land <var:b> = <nat:8> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:9> \times <var:c> \} \\ <var:b> := <var:b> + <var:o0> \\ \{ <var:m> = <var:c> \land <var:b> = <nat:8> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:9> \times <var:c> + <nat:6> \} \end{eqnarray} Hence , our program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:m> = <var:c> }} <var:o1> := <var:m> ; <var:o2> := <var:o1> * <var:m> ; <var:o3> := <var:o2> * <var:m> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:9> ; <var:o2> := <var:o2> * <nat:4> ; <var:o3> := <var:o3> * <nat:8> ; <var:b> := <var:o3> <var:b> := <var:b> + <var:o2> <var:b> := <var:b> + <var:o1> <var:b> := <var:b> + <var:o0> {{ <var:b> = <nat:8> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <var:c> /\ <var:o2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <var:c> /\ <var:o2> = <var:c> ^ <nat:2> /\ <var:o3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <var:c> /\ <var:o2> = <var:c> ^ <nat:2> /\ <var:o3> = <var:c> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <nat:9> * <var:c> /\ <var:o2> = <var:c> ^ <nat:2> /\ <var:o3> = <var:c> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <nat:9> * <var:c> /\ <var:o2> = <nat:4> * <var:c> ^ <nat:2> /\ <var:o3> = <var:c> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <nat:9> * <var:c> /\ <var:o2> = <nat:4> * <var:c> ^ <nat:2> /\ <var:o3> = <nat:8> * <var:c> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <nat:9> * <var:c> /\ <var:o2> = <nat:4> * <var:c> ^ <nat:2> /\ <var:o0> = <nat:6> /\ <var:b> = <nat:8> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o1> = <nat:9> * <var:c> /\ <var:o0> = <nat:6> /\ <var:b> = <nat:8> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:o0> = <nat:6> /\ <var:b> = <nat:8> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:b> = <nat:8> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 