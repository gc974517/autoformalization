\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <var:C> * <var:X> ; <var:C> := <nat:1> + <var:C> * <var:X> ; <var:C> := <nat:1> + <var:C> * <var:X> ; <var:C> := <nat:4> + <var:C> * <var:X> ; <var:C> := <nat:3> + <var:C> * <var:X> ; <var:C> := <nat:4> + <var:C> * <var:X> ; <var:C> := <var:C> * <var:X> ; <var:C> := <nat:1> + <var:C> * <var:X> ; <var:C> := <nat:3> + <var:C> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:X> = <var:T> $ prior to evaluating our segment of code , it follows that we have $ <var:C> = <nat:2> * <var:T> ^ <nat:9> + <nat:1> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:3> $ once list of commands has exited . \end{theorem} \begin{proof} The course of logic for our series of commands can be shown using typical Hoare logic . Moving on to the following piece of code found in the segment of code , we have the environment update command yielding $ <nat:2> $ toward $ <var:C>$ . This statement moves the precondition $ \{ <var:X> = <var:T> \} $ as $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> \} $ . This is shown using the assignment inference rule of typical Hoare reasoning . Focusing on the upcoming line of code contained in the segment of code , the variable assignmet command \verb | <var:C> := <var:C> * <var:X> ; | . This command transfers $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> + \} $ . This is given with the assignment rule defined by standard Hoare reasoning . Moving on to the next step , we see the variable assignmet line \verb | <var:C> := <nat:1> + <var:C> * <var:X> ; | . This code moves $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> + \} $ as the postcondition $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> \} $ . This is known to be sound by the assignment rule obtained from standard Hoare logic . Moving on to the following command found in our program , we have the variable assignmet code \verb | <var:C> := <nat:1> + <var:C> * <var:X> ; | . This redefines the condition $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> \} $ into $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:1> \} $ . This is known to be sound using the assignment rule from usual Hoare reasoning . Immediately after , we have the environment update statement \verb | <var:C> := <nat:4> + <var:C> * <var:X> ; | . This forwards $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:1> \} $ toward the postcondition $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> \} $ . Following , the variable assignmet line \verb | <var:C> := <nat:3> + <var:C> * <var:X> ; | . This moves $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> \} $ toward $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> \} $ . This is known to be sound by the assignment law obtained from Hoare reasoning . Immediately after , we have the environment update statement \verb | <var:C> := <nat:4> + <var:C> * <var:X> ; | . This moves $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> \} $ into the condition $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:4> \} $ . Looking at the subsequent command in our code segment , the variable assignmet statement \verb | <var:C> := <var:C> * <var:X> ; | . This moves $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:4> \} $ into $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + \} $ . Advancing on , we see the assignment statement \verb | <var:C> := <nat:1> + <var:C> * <var:X> ; | . This statement redefines $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + \} $ toward the postcondition $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:8> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> \} $ . Further , we have the variable binding line giving $ <nat:3> + <var:C> * <var:X$ to $ <var:C>$ . This forwards $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:8> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> \} $ to the condition $ \{ <var:X> = <var:T> \land <var:C> = <nat:2> * <var:T> ^ <nat:9> + <nat:1> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:3> \} $ . This is shown to be logically sound with the assignment scheme given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:2> ; <var:C> := <var:C> * <var:X> ; <var:C> := <nat:1> + <var:C> * <var:X> ; <var:C> := <nat:1> + <var:C> * <var:X> ; <var:C> := <nat:4> + <var:C> * <var:X> ; <var:C> := <nat:3> + <var:C> * <var:X> ; <var:C> := <nat:4> + <var:C> * <var:X> ; <var:C> := <var:C> * <var:X> ; <var:C> := <nat:1> + <var:C> * <var:X> ; <var:C> := <nat:3> + <var:C> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:X> = <var:T> }} <def:poly> {{ <var:C> = <nat:2> * <var:T> ^ <nat:9> + <nat:1> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> ^ <nat:8> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:2> * <var:T> ^ <nat:9> + <nat:1> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 