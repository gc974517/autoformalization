\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:9> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:i> ; <var:a2> := <nat:7> ; <var:a2> := <var:a2> * <var:i> ; <var:a2> := <var:a2> * <var:i> ; <var:r> := <var:a2> ; <var:r> := <var:r> + <var:a1> ; <var:r> := <var:r> + <var:a0> \end{verbatim} Assuming given natural numbers $ <var:W> $ that $ <var:i> = <var:W> $ before running our set of instructions it holds that we see $ <var:r> = <nat:7> \times <var:W> ^ <nat:2> + <nat:5> \times <var:W> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:W> \} \\ <var:a0> := <nat:9> ; \\ \{ <var:i> = <var:W> \land <var:a0> = <nat:9> \} \\ <var:a1> := <nat:5> ; \\ \{ <var:i> = <var:W> \land <var:a0> = <nat:9> \land <var:a1> = <nat:5> \} \\ <var:a1> := <var:a1> * <var:i> ; \\ \{ <var:i> = <var:W> \land <var:a0> = <nat:9> \land <var:a1> = <nat:5> \times <var:W> \} \\ <var:a2> := <nat:7> ; \\ \{ <var:i> = <var:W> \land <var:a0> = <nat:9> \land <var:a1> = <nat:5> \times <var:W> \land <var:a2> = <nat:7> \} \\ <var:a2> := <var:a2> * <var:i> ; \\ \{ <var:i> = <var:W> \land <var:a0> = <nat:9> \land <var:a1> = <nat:5> \times <var:W> \land <var:a2> = <nat:7> \times <var:W> \} \\ <var:a2> := <var:a2> * <var:i> ; \\ \{ <var:i> = <var:W> \land <var:a0> = <nat:9> \land <var:a1> = <nat:5> \times <var:W> \land <var:a2> = <nat:7> \times <var:W> ^ <nat:2> \} \\ <var:r> := <var:a2> ; \\ \{ <var:i> = <var:W> \land <var:a0> = <nat:9> \land <var:a1> = <nat:5> \times <var:W> \land <var:r> = <nat:7> \times <var:W> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:a1> ; \\ \{ <var:i> = <var:W> \land <var:a0> = <nat:9> \land <var:r> = <nat:7> \times <var:W> ^ <nat:2> + <nat:5> \times <var:W> \} \\ <var:r> := <var:r> + <var:a0> \\ \{ <var:i> = <var:W> \land <var:r> = <nat:7> \times <var:W> ^ <nat:2> + <nat:5> \times <var:W> + <nat:9> \} \end{eqnarray} Applying usual Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:i> = <var:W> }} <var:a0> := <nat:9> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:i> ; <var:a2> := <nat:7> ; <var:a2> := <var:a2> * <var:i> ; <var:a2> := <var:a2> * <var:i> ; <var:r> := <var:a2> ; <var:r> := <var:r> + <var:a1> ; <var:r> := <var:r> + <var:a0> {{ <var:r> = <nat:7> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:5> * <var:W> /\ <var:a2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:5> * <var:W> /\ <var:a2> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:5> * <var:W> /\ <var:a2> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:5> * <var:W> /\ <var:r> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:a0> = <nat:9> /\ <var:r> = <nat:7> * <var:W> ^ <nat:2> + <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:r> = <nat:7> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 