\begin{document} \begin{theorem} We define a set of commands as \begin{verbatim} <var:A1> := <var:b> ; <var:A2> := <var:A1> * <var:b> ; <var:A3> := <var:A2> * <var:b> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:3> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:1> ; <var:N> := <var:A3> <var:N> := <var:N> + <var:A2> <var:N> := <var:N> + <var:A1> <var:N> := <var:N> + <var:A0> \end{verbatim} Allow that $ <var:b> = <var:a> $ ahead of running our code segment , it follows that we have $ <var:N> = <nat:1> \cdot <var:a> ^ <nat:3> + <nat:9> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:6> $ once set of instructions finishes . \end{theorem} \begin{proof} The argument for this set of instructions is done through usual Hoare logic . Honing in on the next statement found in our code , we see the binding line \verb | <var:A1> := <var:b> ; | . This forwards the precondition $ \{ <var:b> = <var:a> \} $ toward $ \{ <var:b> = <var:a> \land <var:A1> = <var:a> \} $ . This is sound with the assignment law given by typical Hoare reasoning . Looking at the next line contained in our code , we have the code yielding $ <var:A1> * <var:b> $ toward $ <var:A2>$ . This redefines the condition $ \{ <var:b> = <var:a> \land <var:A1> = <var:a> \} $ toward the condition $ \{ <var:b> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \} $ . Immediately following , we see the variable update code yielding $ <var:A2> * <var:b> $ toward $ <var:A3>$ . This transfers the precondition $ \{ <var:b> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \} $ as the postcondition $ \{ <var:b> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \} $ . Observing the next piece of code found in our list of instructions , we see the variable assignmet command letting $ <nat:6> $ into $ <var:A0>$ . This command advances the precondition $ \{ <var:b> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \} $ to $ \{ <var:b> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . This is deduced with the assignment law defined by standard Hoare reasoning . Next , we have the variable update code \verb | <var:A1> := <var:A1> * <nat:3> ; | . This command takes $ \{ <var:b> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \} $ toward the condition $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . This is shown through the assignment rule found in Hoare reasoning . Moving forward , we have the variable binding code \verb | <var:A2> := <var:A2> * <nat:9> ; | . This transfers the condition $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \} $ toward the postcondition $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A2> = <nat:9> \times <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . Advancing on , the assignment command giving $ <var:A3> * <nat:1> $ as $ <var:A3>$ . This statement moves the precondition $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A2> = <nat:9> \times <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \} $ as the postcondition $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A2> = <nat:9> \times <var:a> ^ <nat:2> \land <var:A3> = <nat:1> \times <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . This is shown to be logically sound with the assignment inference rule found in standard Hoare logic . Shifting focus toward the upcoming command found in the program , we have the variable update command assigning $ <var:A3$ toward $ <var:N>$ . This advances $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A2> = <nat:9> \times <var:a> ^ <nat:2> \land <var:A3> = <nat:1> \times <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \} $ to $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A2> = <nat:9> \times <var:a> ^ <nat:2> \land <var:A0> = <nat:6> \land <var:N> = <nat:1> \times <var:a> ^ <nat:3> \} $ . After , we see the variable assignmet line \verb | <var:N> := <var:N> + <var:A2> | . This command redefines the condition $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A2> = <nat:9> \times <var:a> ^ <nat:2> \land <var:A0> = <nat:6> \land <var:N> = <nat:1> \times <var:a> ^ <nat:3> \} $ toward the condition $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A0> = <nat:6> \land <var:N> = <nat:1> \times <var:a> ^ <nat:3> + <nat:9> \times <var:a> ^ <nat:2> \} $ . Honing in on the proceeding command contained in the list of commands , the variable assignmet statement \verb | <var:N> := <var:N> + <var:A1> | . This statement redefines the condition $ \{ <var:b> = <var:a> \land <var:A1> = <nat:3> \times <var:a> \land <var:A0> = <nat:6> \land <var:N> = <nat:1> \times <var:a> ^ <nat:3> + <nat:9> \times <var:a> ^ <nat:2> \} $ to $ \{ <var:b> = <var:a> \land <var:A0> = <nat:6> \land <var:N> = <nat:1> \times <var:a> ^ <nat:3> + <nat:9> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> \} $ . Moving forward to the following bit of code found in the set of instructions , we have the environment update statement giving $ <var:N> + <var:A0$ into $ <var:N>$ . This transfers the condition $ \{ <var:b> = <var:a> \land <var:A0> = <nat:6> \land <var:N> = <nat:1> \times <var:a> ^ <nat:3> + <nat:9> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> \} $ toward the postcondition $ \{ <var:b> = <var:a> \land <var:N> = <nat:1> \times <var:a> ^ <nat:3> + <nat:9> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:b> = <var:a> }} <var:A1> := <var:b> ; <var:A2> := <var:A1> * <var:b> ; <var:A3> := <var:A2> * <var:b> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:3> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:1> ; <var:N> := <var:A3> <var:N> := <var:N> + <var:A2> <var:N> := <var:N> + <var:A1> <var:N> := <var:N> + <var:A0> {{ <var:N> = <nat:1> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <var:a> /\ <var:A2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <var:a> /\ <var:A2> = <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <var:a> /\ <var:A2> = <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <nat:3> * <var:a> /\ <var:A2> = <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <nat:3> * <var:a> /\ <var:A2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <nat:3> * <var:a> /\ <var:A2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:A3> = <nat:1> * <var:a> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <nat:3> * <var:a> /\ <var:A2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:A0> = <nat:6> /\ <var:N> = <nat:1> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A1> = <nat:3> * <var:a> /\ <var:A0> = <nat:6> /\ <var:N> = <nat:1> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:A0> = <nat:6> /\ <var:N> = <nat:1> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:N> = <nat:1> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 