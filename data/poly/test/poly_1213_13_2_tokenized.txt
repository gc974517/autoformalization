\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:2> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:1> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:2> + <var:e> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:Z> = <var:i> $ before running this series of commands , it follows that we have $ <var:e> = <nat:3> \cdot <var:i> ^ <nat:12> + <nat:2> \cdot <var:i> ^ <nat:10> + <nat:4> \cdot <var:i> ^ <nat:9> + <nat:3> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:1> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our segment of code can be seen through usual Hoare techniques . Jumping to the upcoming command found in the program , we have the variable assignmet statement \verb | <var:e> := <nat:3> ; | . This moves the precondition $ \{ <var:Z> = <var:i> \} $ as the postcondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \} $ . Considering the following piece of code seen in our series of instructions , we have the line giving $ <var:e> * <var:Z> $ toward $ <var:e>$ . This advances $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \} $ as $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> + \} $ . This is shown to be logically sound using the assignment law defined by standard Hoare techniques . Observing the next line found in the program , the variable binding command letting $ <nat:2> + <var:e> * <var:Z> $ as $ <var:e>$ . This line takes the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> + \} $ to the postcondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:2> + <nat:2> \} $ . This is sound with the assignment law in typical Hoare reasoning . Taking another step toward the subsequent statement in our segment of code , the assignment statement \verb | <var:e> := <nat:4> + <var:e> * <var:Z> ; | . This command forwards the precondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:2> + <nat:2> \} $ toward $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> + <nat:4> \} $ . This is shown to be logically sound through the assignment scheme defined in Hoare techniques . Jumping to the subsequent line of code in our code , we have the variable update command \verb | <var:e> := <nat:3> + <var:e> * <var:Z> ; | . This line moves the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> + <nat:4> \} $ into $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:4> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:3> \} $ . Moving on to the next step , we have the line \verb | <var:e> := <nat:4> + <var:e> * <var:Z> ; | . This redefines $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:4> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:3> \} $ toward the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:5> + <nat:2> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:4> \} $ . Next , we have the binding statement yielding $ <var:e> * <var:Z> $ into $ <var:e>$ . This code takes the precondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:5> + <nat:2> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:4> \} $ to the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:6> + <nat:2> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + \} $ . Immediately following , the binding line \verb | <var:e> := <nat:3> + <var:e> * <var:Z> ; | . This advances the precondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:6> + <nat:2> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + \} $ to the postcondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:7> + <nat:2> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \} $ . This is shown using the assignment inference rule in standard Hoare reasoning . Jumping to the upcoming statement contained in our program , we have the variable assignmet statement binding $ <nat:1> + <var:e> * <var:Z> $ as $ <var:e>$ . This command advances the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:7> + <nat:2> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \} $ into the postcondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:8> + <nat:2> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> + <nat:1> \} $ . This is rigorously given through the assignment law given by usual Hoare techniques . Stepping forward , the variable update code giving $ <var:e> * <var:Z> $ into $ <var:e>$ . This line redefines the precondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:8> + <nat:2> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> + <nat:1> \} $ as the postcondition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:9> + <nat:2> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> + \} $ . This is rigorously given with the assignment rule defined by Hoare techniques . Advancing to the proceeding command seen in the series of commands , we have the variable assignmet code \verb | <var:e> := <nat:4> + <var:e> * <var:Z> ; | . This line redefines the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:9> + <nat:2> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> + \} $ as $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:10> + <nat:2> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \} $ . This is given with the assignment rule obtained from typical Hoare reasoning . Paying attention to the upcoming line of code contained in our set of instructions , the variable binding line \verb | <var:e> := <nat:3> + <var:e> * <var:Z> ; | . This line advances the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:10> + <nat:2> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \} $ toward the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:11> + <nat:2> \cdot <var:i> ^ <nat:9> + <nat:4> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> + <nat:3> \} $ . This is known to be sound through the assignment scheme in Hoare reasoning . Moving on to the next step , we see the environment update line binding $ <nat:2> + <var:e> * <var:Z$ to $ <var:e>$ . This forwards the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:11> + <nat:2> \cdot <var:i> ^ <nat:9> + <nat:4> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> + <nat:3> \} $ into the condition $ \{ <var:Z> = <var:i> \land <var:e> = <nat:3> \cdot <var:i> ^ <nat:12> + <nat:2> \cdot <var:i> ^ <nat:10> + <nat:4> \cdot <var:i> ^ <nat:9> + <nat:3> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:1> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:2> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:1> + <var:e> * <var:Z> ; <var:e> := <var:e> * <var:Z> ; <var:e> := <nat:4> + <var:e> * <var:Z> ; <var:e> := <nat:3> + <var:e> * <var:Z> ; <var:e> := <nat:2> + <var:e> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Z> = <var:i> }} <def:poly> {{ <var:e> = <nat:3> * <var:i> ^ <nat:12> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:3> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:e> = <nat:3> * <var:i> ^ <nat:12> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 