\begin{document} \begin{theorem} We define a program in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:1> ; <var:W> := <var:i0> \end{verbatim} Allow , given whole numbers $ <var:H> $ , it to be that $ <var:I> = <var:H> $ before evaluating the list of instructions , it must be that $ <var:W> = <nat:1> $ after list of commands exits . \end{theorem} \begin{proof} The course of logic for this list of instructions is shown by Hoare techniques . Focusing on the subsequent command contained in our program , the variable update command \verb | <var:i0> := <nat:1> ; | . This transfers the condition $ \{ <var:I> = <var:H> \} $ toward $ \{ <var:I> = <var:H> \land <var:i0> = <nat:1> \} $ . Paying attention to the upcoming command seen in our set of instructions , we have the variable binding statement giving $ <var:i0$ as $ <var:W>$ . This command takes $ \{ <var:I> = <var:H> \land <var:i0> = <nat:1> \} $ as the postcondition $ \{ <var:I> = <var:H> \land <var:W> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:I> = <var:H> }} <var:i0> := <nat:1> ; <var:W> := <var:i0> {{ <var:W> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:H> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:H> /\ <var:W> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 