\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:l> ; <var:f2> := <var:f1> * <var:l> ; <var:f3> := <var:f2> * <var:l> ; <var:f4> := <var:f3> * <var:l> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:3> ; <var:f2> := <var:f2> * <nat:6> ; <var:f3> := <var:f3> * <nat:3> ; <var:f4> := <var:f4> * <nat:6> ; <var:j> := <var:f4> <var:j> := <var:j> + <var:f3> <var:j> := <var:j> + <var:f2> <var:j> := <var:j> + <var:f1> <var:j> := <var:j> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow letting positive integers $ <var:u> $ it to be that $ <var:l> = <var:u> $ prior to the execution of our code segment , it holds that we see $ <var:j> = <nat:6> \times <var:u> ^ <nat:4> + <nat:3> \times <var:u> ^ <nat:3> + <nat:6> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:1> $ once series of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:u> \} \\ <var:f1> := <var:l> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <var:u> \} \\ <var:f2> := <var:f1> * <var:l> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <var:u> \land <var:f2> = <var:u> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:l> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <var:u> \land <var:f2> = <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \} \\ <var:f4> := <var:f3> * <var:l> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <var:u> \land <var:f2> = <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \land <var:f4> = <var:u> ^ <nat:4> \} \\ <var:f0> := <nat:1> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <var:u> \land <var:f2> = <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \land <var:f4> = <var:u> ^ <nat:4> \land <var:f0> = <nat:1> \} \\ <var:f1> := <var:f1> * <nat:3> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <nat:3> * <var:u> \land <var:f2> = <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \land <var:f4> = <var:u> ^ <nat:4> \land <var:f0> = <nat:1> \} \end{eqnarray} Furthering interpreting the list of instructions gives : \begin{eqnarray} <var:f2> := <var:f2> * <nat:6> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <nat:3> * <var:u> \land <var:f2> = <nat:6> * <var:u> ^ <nat:2> \land <var:f3> = <var:u> ^ <nat:3> \land <var:f4> = <var:u> ^ <nat:4> \land <var:f0> = <nat:1> \} \\ <var:f3> := <var:f3> * <nat:3> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <nat:3> * <var:u> \land <var:f2> = <nat:6> * <var:u> ^ <nat:2> \land <var:f3> = <nat:3> * <var:u> ^ <nat:3> \land <var:f4> = <var:u> ^ <nat:4> \land <var:f0> = <nat:1> \} \\ <var:f4> := <var:f4> * <nat:6> ; \\ \{ <var:l> = <var:u> \land <var:f1> = <nat:3> * <var:u> \land <var:f2> = <nat:6> * <var:u> ^ <nat:2> \land <var:f3> = <nat:3> * <var:u> ^ <nat:3> \land <var:f4> = <nat:6> * <var:u> ^ <nat:4> \land <var:f0> = <nat:1> \} \\ <var:j> := <var:f4> \\ \{ <var:l> = <var:u> \land <var:f1> = <nat:3> * <var:u> \land <var:f2> = <nat:6> * <var:u> ^ <nat:2> \land <var:f3> = <nat:3> * <var:u> ^ <nat:3> \land <var:f0> = <nat:1> \land <var:j> = <nat:6> * <var:u> ^ <nat:4> \} \\ <var:j> := <var:j> + <var:f3> \\ \{ <var:l> = <var:u> \land <var:f1> = <nat:3> * <var:u> \land <var:f2> = <nat:6> * <var:u> ^ <nat:2> \land <var:f0> = <nat:1> \land <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:f2> \\ \{ <var:l> = <var:u> \land <var:f1> = <nat:3> * <var:u> \land <var:f0> = <nat:1> \land <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> \} \end{eqnarray} Allowing interpreting our list of instructions yields : \begin{eqnarray} <var:j> := <var:j> + <var:f1> \\ \{ <var:l> = <var:u> \land <var:f0> = <nat:1> \land <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:3> * <var:u> \} \\ <var:j> := <var:j> + <var:f0> \\ \{ <var:l> = <var:u> \land <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <var:f4> : string := " <var:f4> " . Definition <def:poly> := <var:f1> := <var:l> ; <var:f2> := <var:f1> * <var:l> ; <var:f3> := <var:f2> * <var:l> ; <var:f4> := <var:f3> * <var:l> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:3> ; <var:f2> := <var:f2> * <nat:6> ; <var:f3> := <var:f3> * <nat:3> ; <var:f4> := <var:f4> * <nat:6> ; <var:j> := <var:f4> <var:j> := <var:j> + <var:f3> <var:j> := <var:j> + <var:f2> <var:j> := <var:j> + <var:f1> <var:j> := <var:j> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:l> = <var:u> }} <def:poly> {{ <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <var:u> /\ <var:f2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <var:u> /\ <var:f2> = <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <var:u> /\ <var:f2> = <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> /\ <var:f4> = <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <var:u> /\ <var:f2> = <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> /\ <var:f4> = <var:u> ^ <nat:4> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <nat:3> * <var:u> /\ <var:f2> = <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> /\ <var:f4> = <var:u> ^ <nat:4> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <nat:3> * <var:u> /\ <var:f2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:f3> = <var:u> ^ <nat:3> /\ <var:f4> = <var:u> ^ <nat:4> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <nat:3> * <var:u> /\ <var:f2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:u> ^ <nat:3> /\ <var:f4> = <var:u> ^ <nat:4> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <nat:3> * <var:u> /\ <var:f2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:u> ^ <nat:3> /\ <var:f4> = <nat:6> * <var:u> ^ <nat:4> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <nat:3> * <var:u> /\ <var:f2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:u> ^ <nat:3> /\ <var:f0> = <nat:1> /\ <var:j> = <nat:6> * <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <nat:3> * <var:u> /\ <var:f2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:f0> = <nat:1> /\ <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f1> = <nat:3> * <var:u> /\ <var:f0> = <nat:1> /\ <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:f0> = <nat:1> /\ <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:j> = <nat:6> * <var:u> ^ <nat:4> + <nat:3> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 