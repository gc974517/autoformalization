\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:8> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:G> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:G> ; <var:f2> := <var:f2> * <var:G> ; <var:c> := <var:f2> ; <var:c> := <var:c> + <var:f1> ; <var:c> := <var:c> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Given it to hold that $ <var:G> = <var:M> $ prior to interpreting the series of instructions it must be that $ <var:c> = <nat:6> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is evident with usual Hoare techniques . Observing the upcoming step in the list of commands , we see the command \verb | <var:f0> := <nat:8> ; | . This transfers the precondition $ \{ <var:G> = <var:M> \} $ as the condition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \} $ . This is sound with the assignment law from typical Hoare logic . Advancing , we have the variable update code \verb | <var:f1> := <nat:4> ; | . This redefines $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \} $ into the condition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \} $ . Taking another step toward the upcoming line of code in the list of instructions , the code \verb | <var:f1> := <var:f1> * <var:G> ; | . This moves the condition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \} $ into the postcondition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \} $ . After , the command \verb | <var:f2> := <nat:6> ; | . This statement takes the condition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \} $ toward the postcondition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \land <var:f2> = <nat:6> \} $ . This is ensured through the assignment scheme from usual Hoare reasoning . Stepping through , we have the binding statement \verb | <var:f2> := <var:f2> * <var:G> ; | . This line transfers the condition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \land <var:f2> = <nat:6> \} $ toward the condition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \land <var:f2> = <nat:6> \times <var:M> \} $ . This is ensured by the assignment inference rule of usual Hoare techniques . Shifting focus toward the subsequent line contained in the code , we see the environment update statement \verb | <var:f2> := <var:f2> * <var:G> ; | . This command advances the condition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \land <var:f2> = <nat:6> \times <var:M> \} $ to the condition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \land <var:f2> = <nat:6> \times <var:M> ^ <nat:2> \} $ . Shifting focus toward the following command contained in our series of commands , we have the environment update statement letting $ <var:f2> $ to $ <var:c>$ . This code takes $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \land <var:f2> = <nat:6> \times <var:M> ^ <nat:2> \} $ toward the postcondition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \land <var:c> = <nat:6> \times <var:M> ^ <nat:2> \} $ . This is known to be sound by the assignment law defined by typical Hoare logic . Advancing to the subsequent piece of code seen in our set of instructions , we have the assignment statement \verb | <var:c> := <var:c> + <var:f1> ; | . This forwards $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:f1> = <nat:4> \times <var:M> \land <var:c> = <nat:6> \times <var:M> ^ <nat:2> \} $ into $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:c> = <nat:6> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> \} $ . This is given using the assignment scheme given by Hoare techniques . Going to the next step , we have the code letting $ <var:c> + <var:f0$ toward $ <var:c>$ . This command takes the precondition $ \{ <var:G> = <var:M> \land <var:f0> = <nat:8> \land <var:c> = <nat:6> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> \} $ toward the condition $ \{ <var:G> = <var:M> \land <var:c> = <nat:6> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:8> \} $ . This is shown through the assignment inference rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f0> := <nat:8> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:G> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:G> ; <var:f2> := <var:f2> * <var:G> ; <var:c> := <var:f2> ; <var:c> := <var:c> + <var:f1> ; <var:c> := <var:c> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:G> = <var:M> }} <def:poly> {{ <var:c> = <nat:6> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:4> * <var:M> /\ <var:f2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:4> * <var:M> /\ <var:f2> = <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:4> * <var:M> /\ <var:f2> = <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:4> * <var:M> /\ <var:c> = <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:f0> = <nat:8> /\ <var:c> = <nat:6> * <var:M> ^ <nat:2> + <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:c> = <nat:6> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 