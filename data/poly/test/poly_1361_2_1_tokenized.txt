\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:2> ; <var:a> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:L> = <var:n> $ ahead of running our set of instructions it holds that $ <var:a> = <nat:2> $ once code has finished . \end{theorem} \begin{proof} The method of proof for our set of commands is clear by usual Hoare techniques . Advancing to the subsequent command in our code , we see the assignment line \verb | <var:U0> := <nat:2> ; | . This advances $ \{ <var:L> = <var:n> \} $ as the postcondition $ \{ <var:L> = <var:n> \land <var:U0> = <nat:2> \} $ . Moving on , we see the assignment code \verb | <var:a> := <var:U0> | . This moves the condition $ \{ <var:L> = <var:n> \land <var:U0> = <nat:2> \} $ into the postcondition $ \{ <var:L> = <var:n> \land <var:a> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:2> ; <var:a> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:L> = <var:n> }} <def:poly> {{ <var:a> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:a> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 