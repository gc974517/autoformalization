\begin{document} \begin{theorem} Take the following code in \emph{Imp} as follows \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:z> \end{verbatim} Assuming it to hold that $ <var:z> = <var:k> $ ( for any integers $ <var:k> $ ) before interpreting our segment of code , it follows that $ <var:O> = <nat:4> \cdot <var:k> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the list of instructions can be given by Hoare reasoning . Advancing to the next line found in the code segment , \[ \begin{tabular} {rcl} \{ <var:z> = <var:k> \} & <var:O> := <nat:4> & \{ <var:z> = <var:k> \land <var:O> = <nat:4> \} \end{tabular} Paying attention to the following statement in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:k> \} & <var:O> := <nat:4> & \{ <var:z> = <var:k> \land <var:O> = <nat:4> \} \end{tabular} This is guaranteed by the variable binding rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:z> = <var:k> }} <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:z> {{ <var:O> = <nat:4> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:O> = <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 