\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:V> ; <var:R2> := <var:R1> * <var:V> ; <var:R3> := <var:R2> * <var:V> ; <var:R4> := <var:R3> * <var:V> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:9> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:9> ; <var:R4> := <var:R4> * <nat:5> ; <var:j> := <var:R4> <var:j> := <var:j> + <var:R3> <var:j> := <var:j> + <var:R2> <var:j> := <var:j> + <var:R1> <var:j> := <var:j> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:V> = <var:a> $ prior to executing this list of commands it follows that we have $ <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:5> $ once list of commands has finished executing . \end{theorem} \begin{proof} The course of logic for this set of instructions is done using usual Hoare logic . Focusing on the next bit of code found in our list of commands , we have the assignment statement letting $ <var:V> $ into $ <var:R1>$ . This line moves $ \{ <var:V> = <var:a> \} $ toward the condition $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \} $ . Advancing , the binding code binding $ <var:R1> * <var:V> $ toward $ <var:R2>$ . This forwards the precondition $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \} $ toward $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \land <var:R2> = <var:a> ^ <nat:2> \} $ . This is guaranteed using the assignment law given in usual Hoare techniques . Honing in on the upcoming command in the list of commands , we see the variable update statement letting $ <var:R2> * <var:V> $ to $ <var:R3>$ . This takes the precondition $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \land <var:R2> = <var:a> ^ <nat:2> \} $ as the condition $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \land <var:R2> = <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \} $ . This is rigorously given through the assignment law defined by Hoare logic . Jumping to the following piece of code contained in our series of instructions , we have the statement \verb | <var:R4> := <var:R3> * <var:V> ; | . This code transfers the precondition $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \land <var:R2> = <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \} $ toward the condition $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \land <var:R2> = <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \} $ . Advancing to the next step , the environment update code defining $ <nat:5> $ as $ <var:R0>$ . This line transfers $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \land <var:R2> = <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \} $ into the condition $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \land <var:R2> = <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . This is rigorously given through the assignment inference rule of Hoare reasoning . Now , we see the environment update statement \verb | <var:R1> := <var:R1> * <nat:9> ; | . This command advances the condition $ \{ <var:V> = <var:a> \land <var:R1> = <var:a> \land <var:R2> = <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ to $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . This is shown to be logically sound by the assignment scheme in typical Hoare reasoning . After , we see the variable binding command yielding $ <var:R2> * <nat:5> $ to $ <var:R2>$ . This transfers the precondition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ toward the postcondition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . Going to the next step , we have the variable assignmet command \verb | <var:R3> := <var:R3> * <nat:9> ; | . This command advances $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R3> = <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ as the condition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R3> = <nat:9> * <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . Now , we see the line \verb | <var:R4> := <var:R4> * <nat:5> ; | . This takes the condition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R3> = <nat:9> * <var:a> ^ <nat:3> \land <var:R4> = <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ to the postcondition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R3> = <nat:9> * <var:a> ^ <nat:3> \land <var:R4> = <nat:5> * <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . Focusing on the proceeding bit of code in our set of instructions , the assignment command \verb | <var:j> := <var:R4> | . This statement advances the precondition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R3> = <nat:9> * <var:a> ^ <nat:3> \land <var:R4> = <nat:5> * <var:a> ^ <nat:4> \land <var:R0> = <nat:5> \} $ into the condition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R3> = <nat:9> * <var:a> ^ <nat:3> \land <var:R0> = <nat:5> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> \} $ . This is guaranteed by the assignment inference rule obtained from Hoare logic . Advancing to the next step seen in the code segment , we see the environment update line \verb | <var:j> := <var:j> + <var:R3> | . This statement advances the precondition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R3> = <nat:9> * <var:a> ^ <nat:3> \land <var:R0> = <nat:5> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> \} $ as the condition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R0> = <nat:5> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> \} $ . Stepping forward , the assignment statement giving $ <var:j> + <var:R2$ into $ <var:j>$ . This moves the precondition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R2> = <nat:5> * <var:a> ^ <nat:2> \land <var:R0> = <nat:5> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> \} $ into the condition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R0> = <nat:5> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> \} $ . Going to the next step , we see the variable assignmet statement \verb | <var:j> := <var:j> + <var:R1> | . This takes the condition $ \{ <var:V> = <var:a> \land <var:R1> = <nat:9> * <var:a> \land <var:R0> = <nat:5> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> \} $ into the condition $ \{ <var:V> = <var:a> \land <var:R0> = <nat:5> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> \} $ . Moving onward , we have the line \verb | <var:j> := <var:j> + <var:R0> | . This forwards the condition $ \{ <var:V> = <var:a> \land <var:R0> = <nat:5> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> \} $ toward the postcondition $ \{ <var:V> = <var:a> \land <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:5> \} $ . This is guaranteed by the assignment rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <var:R4> : string := " <var:R4> " . Definition <def:poly> := <var:R1> := <var:V> ; <var:R2> := <var:R1> * <var:V> ; <var:R3> := <var:R2> * <var:V> ; <var:R4> := <var:R3> * <var:V> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:9> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:9> ; <var:R4> := <var:R4> * <nat:5> ; <var:j> := <var:R4> <var:j> := <var:j> + <var:R3> <var:j> := <var:j> + <var:R2> <var:j> := <var:j> + <var:R1> <var:j> := <var:j> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:V> = <var:a> }} <def:poly> {{ <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <var:a> /\ <var:R2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <var:a> /\ <var:R2> = <var:a> ^ <nat:2> /\ <var:R3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <var:a> /\ <var:R2> = <var:a> ^ <nat:2> /\ <var:R3> = <var:a> ^ <nat:3> /\ <var:R4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <var:a> /\ <var:R2> = <var:a> ^ <nat:2> /\ <var:R3> = <var:a> ^ <nat:3> /\ <var:R4> = <var:a> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <nat:9> * <var:a> /\ <var:R2> = <var:a> ^ <nat:2> /\ <var:R3> = <var:a> ^ <nat:3> /\ <var:R4> = <var:a> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <nat:9> * <var:a> /\ <var:R2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:R3> = <var:a> ^ <nat:3> /\ <var:R4> = <var:a> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <nat:9> * <var:a> /\ <var:R2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:a> ^ <nat:3> /\ <var:R4> = <var:a> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <nat:9> * <var:a> /\ <var:R2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:a> ^ <nat:3> /\ <var:R4> = <nat:5> * <var:a> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <nat:9> * <var:a> /\ <var:R2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:a> ^ <nat:3> /\ <var:R0> = <nat:5> /\ <var:j> = <nat:5> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <nat:9> * <var:a> /\ <var:R2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:R0> = <nat:5> /\ <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R1> = <nat:9> * <var:a> /\ <var:R0> = <nat:5> /\ <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:R0> = <nat:5> /\ <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j> = <nat:5> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 