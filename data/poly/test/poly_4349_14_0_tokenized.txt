\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:f> ; <var:c2> := <nat:8> ; <var:c2> := <var:c2> * <var:f> ; <var:c2> := <var:c2> * <var:f> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:f> ; <var:c3> := <var:c3> * <var:f> ; <var:c3> := <var:c3> * <var:f> ; <var:S> := <var:c3> ; <var:S> := <var:S> + <var:c2> ; <var:S> := <var:S> + <var:c1> ; <var:S> := <var:S> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:f> = <var:N> $ before evaluating this list of commands it holds that we have $ <var:S> = <nat:3> \times <var:N> ^ <nat:3> + <nat:8> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:3> $ after set of commands is done executing . \end{theorem} \begin{proof} Using Hoare logic produces : \begin{eqnarray} \{ <var:f> = <var:N> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:4> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \} \\ <var:c1> := <var:c1> * <var:f> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \} \\ <var:c2> := <nat:8> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:c2> = <nat:8> \} \\ <var:c2> := <var:c2> * <var:f> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:c2> = <nat:8> \cdot <var:N> \} \\ <var:c2> := <var:c2> * <var:f> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:c2> = <nat:8> \cdot <var:N> ^ <nat:2> \} \\ <var:c3> := <nat:3> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:c2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:c3> = <nat:3> \} \\ <var:c3> := <var:c3> * <var:f> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:c2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:N> \} \\ <var:c3> := <var:c3> * <var:f> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:c2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:N> ^ <nat:2> \} \\ <var:c3> := <var:c3> * <var:f> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:c2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:c3> = <nat:3> \cdot <var:N> ^ <nat:3> \} \\ <var:S> := <var:c3> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:c2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:S> = <nat:3> \cdot <var:N> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:c2> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \cdot <var:N> \land <var:S> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:c1> ; \\ \{ <var:f> = <var:N> \land <var:c0> = <nat:3> \land <var:S> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> \} \\ <var:S> := <var:S> + <var:c0> \\ \{ <var:f> = <var:N> \land <var:S> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:3> \} \end{eqnarray} Given the preceding argument , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:f> ; <var:c2> := <nat:8> ; <var:c2> := <var:c2> * <var:f> ; <var:c2> := <var:c2> * <var:f> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:f> ; <var:c3> := <var:c3> * <var:f> ; <var:c3> := <var:c3> * <var:f> ; <var:S> := <var:c3> ; <var:S> := <var:S> + <var:c2> ; <var:S> := <var:S> + <var:c1> ; <var:S> := <var:S> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:f> = <var:N> }} <def:poly> {{ <var:S> = <nat:3> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:c2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:c2> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:c2> = <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:c2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:c3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:c2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:c2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:c2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:c2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:S> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:N> /\ <var:S> = <nat:3> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:c0> = <nat:3> /\ <var:S> = <nat:3> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:N> /\ <var:S> = <nat:3> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 