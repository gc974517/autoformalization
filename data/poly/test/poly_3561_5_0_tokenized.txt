\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:9> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:x> ; <var:n> := <var:F1> ; <var:n> := <var:n> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Allowing it to hold that $ <var:x> = <var:q> $ ( given positive integers $ <var:q> $ ) before the evaluation of the series of commands , it holds that we see $ <var:n> = <nat:4> \cdot <var:q> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our segment of code is done through Hoare reasoning . Now , we see the assignment code yielding $ <nat:9> $ as $ <var:F0>$ . This code forwards $ \{ <var:x> = <var:q> \} $ as $ \{ <var:x> = <var:q> \land <var:F0> = <nat:9> \} $ . This is shown with the assignment scheme from standard Hoare logic . Honing in on the subsequent line found in the series of commands , we have the code \verb | <var:F1> := <nat:4> ; | . This moves the precondition $ \{ <var:x> = <var:q> \land <var:F0> = <nat:9> \} $ toward the condition $ \{ <var:x> = <var:q> \land <var:F0> = <nat:9> \land <var:F1> = <nat:4> \} $ . This is shown through the assignment scheme given in usual Hoare logic . Moving forward , we have the assignment statement letting $ <var:F1> * <var:x> $ toward $ <var:F1>$ . This takes $ \{ <var:x> = <var:q> \land <var:F0> = <nat:9> \land <var:F1> = <nat:4> \} $ as $ \{ <var:x> = <var:q> \land <var:F0> = <nat:9> \land <var:F1> = <nat:4> * <var:q> \} $ . Following , the environment update code letting $ <var:F1> $ into $ <var:n>$ . This forwards the precondition $ \{ <var:x> = <var:q> \land <var:F0> = <nat:9> \land <var:F1> = <nat:4> * <var:q> \} $ toward the postcondition $ \{ <var:x> = <var:q> \land <var:F0> = <nat:9> \land <var:n> = <nat:4> * <var:q> \} $ . This is ensured by the assignment law defined in standard Hoare logic . Moving on to the upcoming line of code contained in our list of instructions , we see the environment update statement \verb | <var:n> := <var:n> + <var:F0> | . This code redefines $ \{ <var:x> = <var:q> \land <var:F0> = <nat:9> \land <var:n> = <nat:4> * <var:q> \} $ into the postcondition $ \{ <var:x> = <var:q> \land <var:n> = <nat:4> * <var:q> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:9> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:x> ; <var:n> := <var:F1> ; <var:n> := <var:n> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:x> = <var:q> }} <def:poly> {{ <var:n> = <nat:4> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:F0> = <nat:9> /\ <var:n> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:n> = <nat:4> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 