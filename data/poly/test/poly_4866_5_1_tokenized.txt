\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E1> := <var:z> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:6> ; <var:l> := <var:E1> <var:l> := <var:l> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume , for all integers $ <var:y> $ , that $ <var:z> = <var:y> $ before the evaluation of this series of commands , then we see $ <var:l> = <nat:6> * <var:y> + <nat:7> $ after segment of code has terminated . \end{theorem} \begin{proof} The course of logic for our set of instructions can be demonstrated using standard Hoare reasoning . Taking another step toward the following bits of codefound in our set of instructions , we have \verb | { <var:z> = <var:y> } <var:E1> := <var:z> { <var:z> = <var:y> \land <var:E1> = <var:y> } | , \verb | { <var:z> = <var:y> \land <var:E1> = <var:y> } <var:E0> := <nat:7> { <var:z> = <var:y> \land <var:E1> = <var:y> \land <var:E0> = <nat:7> } | and \verb | { <var:z> = <var:y> \land <var:E1> = <var:y> \land <var:E0> = <nat:7> } <var:E1> := <var:E1> * <nat:6> { <var:z> = <var:y> \land <var:E1> = <nat:6> * <var:y> \land <var:E0> = <nat:7> } | . Focusing on the following pieces of code found in our code segment , we see \verb | { <var:z> = <var:y> } <var:E1> := <var:z> { <var:z> = <var:y> \land <var:E1> = <var:y> } | and \verb | { <var:z> = <var:y> \land <var:E1> = <var:y> } <var:E0> := <nat:7> { <var:z> = <var:y> \land <var:E1> = <var:y> \land <var:E0> = <nat:7> } | . This is known to be sound using the environment update inference rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E1> := <var:z> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:6> ; <var:l> := <var:E1> <var:l> := <var:l> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:z> = <var:y> }} <def:poly> {{ <var:l> = <nat:6> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:E1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:E1> = <var:y> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:E1> = <nat:6> * <var:y> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:E0> = <nat:7> /\ <var:l> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:l> = <nat:6> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 