\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:Q1> := <var:O> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:i> := <var:Q1> <var:i> := <var:i> + <var:Q0> \end{verbatim} Assuming it to be that $ <var:O> = <var:T> $ --- given all natural coefficients $ <var:T> $ --- prior to the execution of the program , then we have $ <var:i> = <nat:4> \cdot <var:T> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:T> \} \\ <var:Q1> := <var:O> ; \\ \{ <var:O> = <var:T> \land <var:Q1> = <var:T> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:O> = <var:T> \land <var:Q1> = <var:T> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <var:Q1> * <nat:4> ; \\ \{ <var:O> = <var:T> \land <var:Q1> = <nat:4> * <var:T> \land <var:Q0> = <nat:1> \} \\ <var:i> := <var:Q1> \\ \{ <var:O> = <var:T> \land <var:Q0> = <nat:1> \land <var:i> = <nat:4> * <var:T> \} \\ <var:i> := <var:i> + <var:Q0> \\ \{ <var:O> = <var:T> \land <var:i> = <nat:4> * <var:T> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:O> = <var:T> }} <var:Q1> := <var:O> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:i> := <var:Q1> <var:i> := <var:i> + <var:Q0> {{ <var:i> = <nat:4> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:Q1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:Q1> = <var:T> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:Q1> = <nat:4> * <var:T> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:Q0> = <nat:1> /\ <var:i> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:i> = <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 