\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:o1> := <var:P> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:6> ; <var:R> := <var:o1> <var:R> := <var:R> + <var:o0> \end{verbatim} Assume --- for any natural coefficients $ <var:m> $ --- $ <var:P> = <var:m> $ ahead of evaluating this code segment it holds that $ <var:R> = <nat:6> \cdot <var:m> + <nat:8> $ when segment of code has executed . \end{theorem} \begin{proof} Applying standard Hoare logic returns : \begin{eqnarray} \{ <var:P> = <var:m> \} \\ <var:o1> := <var:P> ; \\ \{ <var:P> = <var:m> \land <var:o1> = <var:m> \} \end{eqnarray} Advancing the execution of our series of commands returns : \begin{eqnarray} <var:o0> := <nat:8> ; \\ \{ <var:P> = <var:m> \land <var:o1> = <var:m> \land <var:o0> = <nat:8> \} \\ <var:o1> := <var:o1> * <nat:6> ; \\ \{ <var:P> = <var:m> \land <var:o1> = <nat:6> \cdot <var:m> \land <var:o0> = <nat:8> \} \\ <var:R> := <var:o1> \\ \{ <var:P> = <var:m> \land <var:o0> = <nat:8> \land <var:R> = <nat:6> \cdot <var:m> \} \\ <var:R> := <var:R> + <var:o0> \\ \{ <var:P> = <var:m> \land <var:R> = <nat:6> \cdot <var:m> + <nat:8> \} \end{eqnarray} Thusly , our code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:P> = <var:m> }} <var:o1> := <var:P> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:6> ; <var:R> := <var:o1> <var:R> := <var:R> + <var:o0> {{ <var:R> = <nat:6> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:o1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:o1> = <var:m> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:o1> = <nat:6> * <var:m> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:o0> = <nat:8> /\ <var:R> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:R> = <nat:6> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 