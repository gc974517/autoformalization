\begin{document} \begin{theorem} Consider a series of commands : \begin{verbatim} <var:K> := <nat:1> ; <var:K> := <nat:4> + <var:K> * <var:j> ; <var:K> := <var:K> * <var:j> ; <var:K> := <nat:2> + <var:K> * <var:j> ; <var:K> := <var:K> * <var:j> ; <var:K> := <nat:1> + <var:K> * <var:j> ; <var:K> := <nat:3> + <var:K> * <var:j> ; <var:K> := <nat:3> + <var:K> * <var:j> ; <var:K> := <nat:4> + <var:K> * <var:j> ; <var:K> := <nat:1> + <var:K> * <var:j> \end{verbatim} Given that $ <var:j> = <var:h> $ --- for any positive numbers $ <var:h> $ --- before the evaluation of our program , it follows that $ <var:K> = <nat:1> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:h> \} \\ <var:K> := <nat:1> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \} \\ <var:K> := <nat:4> + <var:K> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> + <nat:4> \} \\ <var:K> := <var:K> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + \} \end{eqnarray} Furthering interpreting the series of instructions yields : \begin{eqnarray} <var:K> := <nat:2> + <var:K> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:2> \} \\ <var:K> := <var:K> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> + \} \end{eqnarray} Continuing running this set of instructions gives us : \begin{eqnarray} <var:K> := <nat:1> + <var:K> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:5> + <nat:4> \times <var:h> ^ <nat:4> + <nat:2> \times <var:h> ^ <nat:2> + <nat:1> \} \\ <var:K> := <nat:3> + <var:K> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:6> + <nat:4> \times <var:h> ^ <nat:5> + <nat:2> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> + <nat:3> \} \\ <var:K> := <nat:3> + <var:K> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:7> + <nat:4> \times <var:h> ^ <nat:6> + <nat:2> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:3> \} \\ <var:K> := <nat:4> + <var:K> * <var:j> ; \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:8> + <nat:4> \times <var:h> ^ <nat:7> + <nat:2> \times <var:h> ^ <nat:5> + <nat:1> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:4> \} \\ <var:K> := <nat:1> + <var:K> * <var:j> \\ \{ <var:j> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:9> + <nat:4> \times <var:h> ^ <nat:8> + <nat:2> \times <var:h> ^ <nat:6> + <nat:1> \times <var:h> ^ <nat:4> + <nat:3> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:1> \} \end{eqnarray} The application of standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:j> = <var:h> }} <var:K> := <nat:1> ; <var:K> := <nat:4> + <var:K> * <var:j> ; <var:K> := <var:K> * <var:j> ; <var:K> := <nat:2> + <var:K> * <var:j> ; <var:K> := <var:K> * <var:j> ; <var:K> := <nat:1> + <var:K> * <var:j> ; <var:K> := <nat:3> + <var:K> * <var:j> ; <var:K> := <nat:3> + <var:K> * <var:j> ; <var:K> := <nat:4> + <var:K> * <var:j> ; <var:K> := <nat:1> + <var:K> * <var:j> {{ <var:K> = <nat:1> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 