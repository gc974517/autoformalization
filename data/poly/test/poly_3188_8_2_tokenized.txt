\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:n> := <nat:1> ; <var:n> := <nat:4> + <var:n> * <var:D> ; <var:n> := <nat:3> + <var:n> * <var:D> ; <var:n> := <nat:2> + <var:n> * <var:D> ; <var:n> := <nat:1> + <var:n> * <var:D> ; <var:n> := <nat:2> + <var:n> * <var:D> ; <var:n> := <nat:3> + <var:n> * <var:D> ; <var:n> := <nat:4> + <var:n> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:D> = <var:q> $ , with some $ <var:q> \in \mathbb{Z}^+ $ , ahead of executing the list of commands then we have $ <var:n> = <nat:1> \times <var:q> ^ <nat:7> + <nat:4> \times <var:q> ^ <nat:6> + <nat:3> \times <var:q> ^ <nat:5> + <nat:2> \times <var:q> ^ <nat:4> + <nat:1> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our code is shown using standard Hoare reasoning . Stepping forward , we see the variable update statement \verb | <var:n> := <nat:1> ; | . This redefines $ \{ <var:D> = <var:q> \} $ into the postcondition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> \} $ . This is deduced through the assignment inference rule of Hoare reasoning . Shifting focus toward the upcoming line contained in our list of instructions , we see the environment update command defining $ <nat:4> + <var:n> * <var:D> $ into $ <var:n>$ . This line advances $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> \} $ into the condition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> + <nat:4> \} $ . Next , we have the variable binding code yielding $ <nat:3> + <var:n> * <var:D> $ into $ <var:n>$ . This advances $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> + <nat:4> \} $ toward the postcondition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> \} $ . This is deduced using the assignment rule obtained from typical Hoare reasoning . Following , we see the variable binding code \verb | <var:n> := <nat:2> + <var:n> * <var:D> ; | . This takes the precondition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> \} $ as the postcondition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> \} $ . Moving forward to the proceeding command seen in our program , we have the variable assignmet code \verb | <var:n> := <nat:1> + <var:n> * <var:D> ; | . This transfers $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> \} $ into the condition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> \} $ . Advancing to the next step , we have the variable assignmet line assigning $ <nat:2> + <var:n> * <var:D> $ toward $ <var:n>$ . This forwards the precondition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> \} $ to the postcondition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:2> \} $ . Moving on , the variable binding statement binding $ <nat:3> + <var:n> * <var:D> $ toward $ <var:n>$ . This advances $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:2> \} $ toward the condition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> \} $ . This is shown to be logically sound using the assignment rule defined in Hoare techniques . Further , we have the assignment code \verb | <var:n> := <nat:4> + <var:n> * <var:D> | . This advances the precondition $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> \} $ into $ \{ <var:D> = <var:q> \land <var:n> = <nat:1> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> \} $ . This is known to be sound with the assignment inference rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:1> ; <var:n> := <nat:4> + <var:n> * <var:D> ; <var:n> := <nat:3> + <var:n> * <var:D> ; <var:n> := <nat:2> + <var:n> * <var:D> ; <var:n> := <nat:1> + <var:n> * <var:D> ; <var:n> := <nat:2> + <var:n> * <var:D> ; <var:n> := <nat:3> + <var:n> * <var:D> ; <var:n> := <nat:4> + <var:n> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:D> = <var:q> }} <def:poly> {{ <var:n> = <nat:1> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:n> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:n> = <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:n> = <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:n> = <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:n> = <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:n> = <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:n> = <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:n> = <nat:1> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 