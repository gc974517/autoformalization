\begin{document} \begin{theorem} Take a list of instructions such that \begin{verbatim} <var:A0> := <nat:6> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:N> ; <var:h> := <var:A1> ; <var:h> := <var:h> + <var:A0> \end{verbatim} Allowing $ <var:N> = <var:U> $ prior to executing this code segment , it must be that $ <var:h> = <nat:1> \cdot <var:U> + <nat:6> $ . \end{theorem} \begin{proof} The argument for this list of instructions is accomplished with usual Hoare reasoning . Taking a look at the upcoming bit of code seen in our code , we have the variable binding statement \verb | <var:A0> := <nat:6> ; | . This line advances the condition $ \{ <var:N> = <var:U> \} $ as the condition $ \{ <var:N> = <var:U> \land <var:A0> = <nat:6> \} $ . This is shown with the assignment inference rule defined in standard Hoare techniques . Moving on to the proceeding step contained in the code , we have the command \verb | <var:A1> := <nat:1> ; | . This redefines $ \{ <var:N> = <var:U> \land <var:A0> = <nat:6> \} $ into the postcondition $ \{ <var:N> = <var:U> \land <var:A0> = <nat:6> \land <var:A1> = <nat:1> \} $ . This is rigorously given by the assignment law in standard Hoare techniques . Focusing on the next bit of code contained in the list of instructions , we have the variable update code \verb | <var:A1> := <var:A1> * <var:N> ; | . This code advances the precondition $ \{ <var:N> = <var:U> \land <var:A0> = <nat:6> \land <var:A1> = <nat:1> \} $ to $ \{ <var:N> = <var:U> \land <var:A0> = <nat:6> \land <var:A1> = <nat:1> * <var:U> \} $ . This is ensured by the assignment scheme found in standard Hoare reasoning . Honing in on the subsequent command found in the set of commands , we see the command \verb | <var:h> := <var:A1> ; | . This code redefines the condition $ \{ <var:N> = <var:U> \land <var:A0> = <nat:6> \land <var:A1> = <nat:1> * <var:U> \} $ toward $ \{ <var:N> = <var:U> \land <var:A0> = <nat:6> \land <var:h> = <nat:1> * <var:U> \} $ . After , we have the line \verb | <var:h> := <var:h> + <var:A0> | . This forwards the condition $ \{ <var:N> = <var:U> \land <var:A0> = <nat:6> \land <var:h> = <nat:1> * <var:U> \} $ toward $ \{ <var:N> = <var:U> \land <var:h> = <nat:1> * <var:U> + <nat:6> \} $ . This is ensured by the assignment scheme of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:N> = <var:U> }} <var:A0> := <nat:6> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:N> ; <var:h> := <var:A1> ; <var:h> := <var:h> + <var:A0> {{ <var:h> = <nat:1> * <var:U> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:A0> = <nat:6> /\ <var:h> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:h> = <nat:1> * <var:U> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 