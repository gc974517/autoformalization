\begin{document} \begin{theorem} Let the following program in \emph{Imp} as \begin{verbatim} <var:X> := <nat:4> ; <var:X> := <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> ; <var:X> := <nat:3> + <var:X> * <var:i> ; <var:X> := <var:X> * <var:i> ; <var:X> := <nat:3> + <var:X> * <var:i> \end{verbatim} Allow that $ <var:i> = <var:g> $ ( given all natural coefficients $ <var:g> $ ) ahead of executing the list of instructions , then we have $ <var:X> = <nat:4> \times <var:g> ^ <nat:7> + <nat:1> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is accomplished with usual Hoare reasoning . Taking a look at the next lines of codecontained in our code segment , we have \begin{verbatim} { <var:i> = <var:g> } <var:X> := <nat:4> { <var:i> = <var:g> \land <var:X> = <nat:4> } { <var:i> = <var:g> \land <var:X> = <nat:4> } <var:X> := <var:X> * <var:i> { <var:i> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> + } { <var:i> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> + } <var:X> := <nat:1> + <var:X> * <var:i> { <var:i> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:1> } { <var:i> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:1> } <var:X> := <nat:1> + <var:X> * <var:i> { <var:i> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> ^ <nat:3> + <nat:1> \cdot <var:g> + <nat:1> } \end{verbatim} This is deduced through the environment update scheme given in typical Hoare logic . Looking at the subsequent pieces of code contained in the code , \begin{verbatim} { <var:i> = <var:g> } <var:X> := <nat:4> { <var:i> = <var:g> \land <var:X> = <nat:4> } { <var:i> = <var:g> \land <var:X> = <nat:4> } <var:X> := <var:X> * <var:i> { <var:i> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> + } \end{verbatim} This is shown to be logically sound by the variable update law defined by typical Hoare logic . Stepping forward , we have \begin{verbatim} { <var:i> = <var:g> } <var:X> := <nat:4> { <var:i> = <var:g> \land <var:X> = <nat:4> } { <var:i> = <var:g> \land <var:X> = <nat:4> } <var:X> := <var:X> * <var:i> { <var:i> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> + } \end{verbatim} This is given with the law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:i> = <var:g> }} <var:X> := <nat:4> ; <var:X> := <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> ; <var:X> := <nat:3> + <var:X> * <var:i> ; <var:X> := <var:X> * <var:i> ; <var:X> := <nat:3> + <var:X> * <var:i> {{ <var:X> = <nat:4> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:X> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:X> = <nat:4> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:X> = <nat:4> * <var:g> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:X> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:X> = <nat:4> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:X> = <nat:4> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:X> = <nat:4> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:X> = <nat:4> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 