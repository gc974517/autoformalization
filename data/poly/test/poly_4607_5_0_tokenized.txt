\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:A> ; <var:H> := <var:i1> ; <var:H> := <var:H> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:A> = <var:w> $ before executing our series of instructions it holds that $ <var:H> = <nat:6> \times <var:w> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the code segment can be given with usual Hoare reasoning . Advancing to the proceeding steps in the set of commands , we have \verb | { <var:A> = <var:w> } <var:i0> := <nat:2> { <var:A> = <var:w> \land <var:i0> = <nat:2> } | , \verb | { <var:A> = <var:w> \land <var:i0> = <nat:2> } <var:i1> := <nat:6> { <var:A> = <var:w> \land <var:i0> = <nat:2> \land <var:i1> = <nat:6> } | , \verb | { <var:A> = <var:w> \land <var:i0> = <nat:2> \land <var:i1> = <nat:6> } <var:i1> := <var:i1> * <var:A> { <var:A> = <var:w> \land <var:i0> = <nat:2> \land <var:i1> = <nat:6> \times <var:w> } | , \verb | { <var:A> = <var:w> \land <var:i0> = <nat:2> \land <var:i1> = <nat:6> \times <var:w> } <var:H> := <var:i1> { <var:A> = <var:w> \land <var:i0> = <nat:2> \land <var:H> = <nat:6> \times <var:w> } | and \verb | { <var:A> = <var:w> \land <var:i0> = <nat:2> \land <var:H> = <nat:6> \times <var:w> } <var:H> := <var:H> + <var:i0{ <var:A> = <var:w> \land <var:H> = <nat:6> \times <var:w> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:A> ; <var:H> := <var:i1> ; <var:H> := <var:H> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:A> = <var:w> }} <def:poly> {{ <var:H> = <nat:6> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:i0> = <nat:2> /\ <var:H> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:H> = <nat:6> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 