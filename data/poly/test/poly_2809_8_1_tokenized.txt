\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:b1> := <var:i> ; <var:b2> := <var:b1> * <var:i> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:1> ; <var:b2> := <var:b2> * <nat:1> ; <var:D> := <var:b2> <var:D> := <var:D> + <var:b1> <var:D> := <var:D> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Given assuming some $ <var:L> \in \mathbb{N} $ that we have $ <var:i> = <var:L> $ prior to the evaluation of our set of commands , then we have $ <var:D> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands can be done with usual Hoare techniques . Now , we see the variable binding command yielding $ <var:i> $ toward $ <var:b1>$ . This redefines the condition $ \{ <var:i> = <var:L> \} $ into the postcondition $ \{ <var:i> = <var:L> \land <var:b1> = <var:L> \} $ . This is shown with the assignment scheme of usual Hoare logic . Immediately after , the variable assignmet command \verb | <var:b2> := <var:b1> * <var:i> ; | . This redefines the precondition $ \{ <var:i> = <var:L> \land <var:b1> = <var:L> \} $ to $ \{ <var:i> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \} $ . This is given using the assignment rule defined in standard Hoare logic . Stepping through , the environment update command giving $ <nat:3> $ as $ <var:b0>$ . This command takes the condition $ \{ <var:i> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \} $ as $ \{ <var:i> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b0> = <nat:3> \} $ . Moving on to the following bit of code in the series of commands , we see the variable assignmet code \verb | <var:b1> := <var:b1> * <nat:1> ; | . This command takes the condition $ \{ <var:i> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b0> = <nat:3> \} $ as the postcondition $ \{ <var:i> = <var:L> \land <var:b1> = <nat:1> \times <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b0> = <nat:3> \} $ . This is shown through the assignment inference rule from Hoare logic . Moving onward , we have the assignment command \verb | <var:b2> := <var:b2> * <nat:1> ; | . This takes $ \{ <var:i> = <var:L> \land <var:b1> = <nat:1> \times <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b0> = <nat:3> \} $ to $ \{ <var:i> = <var:L> \land <var:b1> = <nat:1> \times <var:L> \land <var:b2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:b0> = <nat:3> \} $ . Advancing on , the assignment command \verb | <var:D> := <var:b2> | . This line forwards the precondition $ \{ <var:i> = <var:L> \land <var:b1> = <nat:1> \times <var:L> \land <var:b2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:b0> = <nat:3> \} $ as the condition $ \{ <var:i> = <var:L> \land <var:b1> = <nat:1> \times <var:L> \land <var:b0> = <nat:3> \land <var:D> = <nat:1> \times <var:L> ^ <nat:2> \} $ . Looking at the following line contained in the list of instructions , we see the binding code \verb | <var:D> := <var:D> + <var:b1> | . This forwards the condition $ \{ <var:i> = <var:L> \land <var:b1> = <nat:1> \times <var:L> \land <var:b0> = <nat:3> \land <var:D> = <nat:1> \times <var:L> ^ <nat:2> \} $ as the condition $ \{ <var:i> = <var:L> \land <var:b0> = <nat:3> \land <var:D> = <nat:1> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> \} $ . Going to the next step , we see the variable update code \verb | <var:D> := <var:D> + <var:b0> | . This forwards $ \{ <var:i> = <var:L> \land <var:b0> = <nat:3> \land <var:D> = <nat:1> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> \} $ toward the condition $ \{ <var:i> = <var:L> \land <var:D> = <nat:1> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b1> := <var:i> ; <var:b2> := <var:b1> * <var:i> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:1> ; <var:b2> := <var:b2> * <nat:1> ; <var:D> := <var:b2> <var:D> := <var:D> + <var:b1> <var:D> := <var:D> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:i> = <var:L> }} <def:poly> {{ <var:D> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:b1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:b1> = <var:L> /\ <var:b2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:b1> = <var:L> /\ <var:b2> = <var:L> ^ <nat:2> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:b1> = <nat:1> * <var:L> /\ <var:b2> = <var:L> ^ <nat:2> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:b1> = <nat:1> * <var:L> /\ <var:b2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:b1> = <nat:1> * <var:L> /\ <var:b0> = <nat:3> /\ <var:D> = <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:b0> = <nat:3> /\ <var:D> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:D> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 