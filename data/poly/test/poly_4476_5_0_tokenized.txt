\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:1> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:m> ; <var:v> := <var:O1> ; <var:v> := <var:v> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Allowing $ <var:m> = <var:l> $ before running our code segment then $ <var:v> = <nat:3> * <var:l> + <nat:1> $ after code finishes . \end{theorem} \begin{proof} The course of logic for our program can be seen through standard Hoare techniques . Considering the next bits of codein the list of commands , \verb | { <var:m> = <var:l> } <var:O0> := <nat:1> { <var:m> = <var:l> \land <var:O0> = <nat:1> } | , \verb | { <var:m> = <var:l> \land <var:O0> = <nat:1> } <var:O1> := <nat:3> { <var:m> = <var:l> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> } | , \verb | { <var:m> = <var:l> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> } <var:O1> := <var:O1> * <var:m> { <var:m> = <var:l> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \times <var:l> } | , \verb | { <var:m> = <var:l> \land <var:O0> = <nat:1> \land <var:O1> = <nat:3> \times <var:l> } <var:v> := <var:O1> { <var:m> = <var:l> \land <var:O0> = <nat:1> \land <var:v> = <nat:3> \times <var:l> } | and \verb | { <var:m> = <var:l> \land <var:O0> = <nat:1> \land <var:v> = <nat:3> \times <var:l> } <var:v> := <var:v> + <var:O0{ <var:m> = <var:l> \land <var:v> = <nat:3> \times <var:l> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:1> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:m> ; <var:v> := <var:O1> ; <var:v> := <var:v> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:m> = <var:l> }} <def:poly> {{ <var:v> = <nat:3> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:O0> = <nat:1> /\ <var:v> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:v> = <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 