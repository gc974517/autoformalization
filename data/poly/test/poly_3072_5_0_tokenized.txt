\begin{document} \begin{theorem} Define a code : \begin{verbatim} <var:I0> := <nat:6> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:X> ; <var:Z> := <var:I1> ; <var:Z> := <var:Z> + <var:I0> \end{verbatim} Assume that $ <var:X> = <var:A> $ prior to interpreting the series of instructions it follows that we see $ <var:Z> = <nat:2> \times <var:A> + <nat:6> $ when series of commands is done executing . \end{theorem} \begin{proof} Applying standard Hoare techniques results in : \begin{eqnarray} \{ <var:X> = <var:A> \} \\ <var:I0> := <nat:6> ; \\ \{ <var:X> = <var:A> \land <var:I0> = <nat:6> \} \\ <var:I1> := <nat:2> ; \\ \{ <var:X> = <var:A> \land <var:I0> = <nat:6> \land <var:I1> = <nat:2> \} \\ <var:I1> := <var:I1> * <var:X> ; \\ \{ <var:X> = <var:A> \land <var:I0> = <nat:6> \land <var:I1> = <nat:2> \cdot <var:A> \} \\ <var:Z> := <var:I1> ; \\ \{ <var:X> = <var:A> \land <var:I0> = <nat:6> \land <var:Z> = <nat:2> \cdot <var:A> \} \\ <var:Z> := <var:Z> + <var:I0> \\ \{ <var:X> = <var:A> \land <var:Z> = <nat:2> \cdot <var:A> + <nat:6> \} \end{eqnarray} Considering the preceding argument , this code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:X> = <var:A> }} <var:I0> := <nat:6> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:X> ; <var:Z> := <var:I1> ; <var:Z> := <var:Z> + <var:I0> {{ <var:Z> = <nat:2> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:A> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:A> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:A> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:A> /\ <var:I0> = <nat:6> /\ <var:Z> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:A> /\ <var:Z> = <nat:2> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 