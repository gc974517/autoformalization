\begin{document} \begin{theorem} Define a set of commands such that \begin{verbatim} <var:H1> := <var:d> ; <var:H2> := <var:H1> * <var:d> ; <var:H3> := <var:H2> * <var:d> ; <var:H0> := <nat:4> ; <var:H2> := <var:H2> * <nat:5> ; <var:H3> := <var:H3> * <nat:4> ; <var:u> := <var:H3> <var:u> := <var:u> + <var:H2> <var:u> := <var:u> + <var:H0> \end{verbatim} Assuming that $ <var:d> = <var:J> $ before the execution of our code segment it must be that $ <var:u> = <nat:4> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:4> $ once series of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:J> \} \\ <var:H1> := <var:d> ; \\ \{ <var:d> = <var:J> \land <var:H1> = <var:J> \} \\ <var:H2> := <var:H1> * <var:d> ; \\ \{ <var:d> = <var:J> \land <var:H1> = <var:J> \land <var:H2> = <var:J> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:d> ; \\ \{ <var:d> = <var:J> \land <var:H1> = <var:J> \land <var:H2> = <var:J> ^ <nat:2> \land <var:H3> = <var:J> ^ <nat:3> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:d> = <var:J> \land <var:H1> = <var:J> \land <var:H2> = <var:J> ^ <nat:2> \land <var:H3> = <var:J> ^ <nat:3> \land <var:H0> = <nat:4> \} \\ <var:H2> := <var:H2> * <nat:5> ; \\ \{ <var:d> = <var:J> \land <var:H1> = <var:J> \land <var:H2> = <nat:5> \cdot <var:J> ^ <nat:2> \land <var:H3> = <var:J> ^ <nat:3> \land <var:H0> = <nat:4> \} \\ <var:H3> := <var:H3> * <nat:4> ; \\ \{ <var:d> = <var:J> \land <var:H1> = <var:J> \land <var:H2> = <nat:5> \cdot <var:J> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:J> ^ <nat:3> \land <var:H0> = <nat:4> \} \\ <var:u> := <var:H3> \\ \{ <var:d> = <var:J> \land <var:H1> = <var:J> \land <var:H2> = <nat:5> \cdot <var:J> ^ <nat:2> \land <var:H0> = <nat:4> \land <var:u> = <nat:4> \cdot <var:J> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:H2> \\ \{ <var:d> = <var:J> \land <var:H1> = <var:J> \land <var:H0> = <nat:4> \land <var:u> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:5> \cdot <var:J> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:H0> \\ \{ <var:d> = <var:J> \land <var:u> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:5> \cdot <var:J> ^ <nat:2> + <nat:4> \} \end{eqnarray} Advancing the evaluation of our set of instructions yields : \begin{eqnarray} \end{eqnarray} Using typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:d> = <var:J> }} <var:H1> := <var:d> ; <var:H2> := <var:H1> * <var:d> ; <var:H3> := <var:H2> * <var:d> ; <var:H0> := <nat:4> ; <var:H2> := <var:H2> * <nat:5> ; <var:H3> := <var:H3> * <nat:4> ; <var:u> := <var:H3> <var:u> := <var:u> + <var:H2> <var:u> := <var:u> + <var:H0> {{ <var:u> = <nat:4> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:H1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:H1> = <var:J> /\ <var:H2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:H1> = <var:J> /\ <var:H2> = <var:J> ^ <nat:2> /\ <var:H3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:H1> = <var:J> /\ <var:H2> = <var:J> ^ <nat:2> /\ <var:H3> = <var:J> ^ <nat:3> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:H1> = <var:J> /\ <var:H2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:H3> = <var:J> ^ <nat:3> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:H1> = <var:J> /\ <var:H2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:J> ^ <nat:3> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:H1> = <var:J> /\ <var:H2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:H0> = <nat:4> /\ <var:u> = <nat:4> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:H1> = <var:J> /\ <var:H0> = <nat:4> /\ <var:u> = <nat:4> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:u> = <nat:4> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 