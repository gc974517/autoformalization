\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as follows \begin{verbatim} <var:s> := <nat:3> ; <var:s> := <nat:4> + <var:s> * <var:n> ; <var:s> := <nat:1> + <var:s> * <var:n> ; <var:s> := <nat:2> + <var:s> * <var:n> ; <var:s> := <nat:3> + <var:s> * <var:n> ; <var:s> := <nat:2> + <var:s> * <var:n> ; <var:s> := <nat:3> + <var:s> * <var:n> \end{verbatim} Assuming that we have $ <var:n> = <var:r> $ ahead of running the segment of code , it must be that we see $ <var:s> = <nat:3> \cdot <var:r> ^ <nat:6> + <nat:4> \cdot <var:r> ^ <nat:5> + <nat:1> \cdot <var:r> ^ <nat:4> + <nat:2> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:3> $ after program exits . \end{theorem} \begin{proof} The application of Hoare techniques results in : \begin{eqnarray} \{ <var:n> = <var:r> \} \\ <var:s> := <nat:3> ; \\ \{ <var:n> = <var:r> \land <var:s> = <nat:3> \} \\ <var:s> := <nat:4> + <var:s> * <var:n> ; \\ \{ <var:n> = <var:r> \land <var:s> = <nat:3> \cdot <var:r> + <nat:4> \} \\ <var:s> := <nat:1> + <var:s> * <var:n> ; \\ \{ <var:n> = <var:r> \land <var:s> = <nat:3> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:1> \} \\ <var:s> := <nat:2> + <var:s> * <var:n> ; \\ \{ <var:n> = <var:r> \land <var:s> = <nat:3> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> + <nat:2> \} \\ <var:s> := <nat:3> + <var:s> * <var:n> ; \\ \{ <var:n> = <var:r> \land <var:s> = <nat:3> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:3> + <nat:1> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:3> \} \\ <var:s> := <nat:2> + <var:s> * <var:n> ; \\ \{ <var:n> = <var:r> \land <var:s> = <nat:3> \cdot <var:r> ^ <nat:5> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:2> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + <nat:2> \} \\ <var:s> := <nat:3> + <var:s> * <var:n> \\ \{ <var:n> = <var:r> \land <var:s> = <nat:3> \cdot <var:r> ^ <nat:6> + <nat:4> \cdot <var:r> ^ <nat:5> + <nat:1> \cdot <var:r> ^ <nat:4> + <nat:2> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:3> \} \end{eqnarray} As a consequence , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:n> = <var:r> }} <var:s> := <nat:3> ; <var:s> := <nat:4> + <var:s> * <var:n> ; <var:s> := <nat:1> + <var:s> * <var:n> ; <var:s> := <nat:2> + <var:s> * <var:n> ; <var:s> := <nat:3> + <var:s> * <var:n> ; <var:s> := <nat:2> + <var:s> * <var:n> ; <var:s> := <nat:3> + <var:s> * <var:n> {{ <var:s> = <nat:3> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:s> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:s> = <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:s> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:s> = <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:s> = <nat:3> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:s> = <nat:3> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:s> = <nat:3> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 