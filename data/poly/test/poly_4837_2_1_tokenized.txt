\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:5> ; <var:A> := <var:w0> \end{verbatim} Given that $ <var:Q> = <var:k> $ , given all positive integers $ <var:k> $ , prior to interpreting this set of commands , it must be that we have $ <var:A> = <nat:5> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:Q> = <var:k> \} \\ <var:w0> := <nat:5> ; \\ \{ <var:Q> = <var:k> \land <var:w0> = <nat:5> \} \\ <var:A> := <var:w0> \\ \{ <var:Q> = <var:k> \land <var:A> = <nat:5> \} \end{eqnarray} Considering the preceding argument , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:Q> = <var:k> }} <var:w0> := <nat:5> ; <var:A> := <var:w0> {{ <var:A> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:A> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 