\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:6> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:U> ; <var:Y> := <var:P1> ; <var:Y> := <var:Y> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Allowing $ <var:U> = <var:G> $ prior to evaluating this code segment it must be that $ <var:Y> = <nat:2> * <var:G> + <nat:6> $ when set of commands terminates . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be done by Hoare reasoning . Immediately after , \begin{eqnarray} \{ <var:U> = <var:G> \} \, <var:P0> := <nat:6> \, \{ <var:U> = <var:G> \land <var:P0> = <nat:6> \} \\ \{ <var:U> = <var:G> \land <var:P0> = <nat:6> \} \, <var:P1> := <nat:2> \, \{ <var:U> = <var:G> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \} \\ \{ <var:U> = <var:G> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \} \, <var:P1> := <var:P1> * <var:U> \, \{ <var:U> = <var:G> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \cdot <var:G> \} \\ \{ <var:U> = <var:G> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \cdot <var:G> \} \, <var:Y> := <var:P1> \, \{ <var:U> = <var:G> \land <var:P0> = <nat:6> \land <var:Y> = <nat:2> \cdot <var:G> \} \\ \{ <var:U> = <var:G> \land <var:P0> = <nat:6> \land <var:Y> = <nat:2> \cdot <var:G> \} \, <var:Y> := <var:Y> + <var:P0\, \{ <var:U> = <var:G> \land <var:Y> = <nat:2> \cdot <var:G> + <nat:6> \} \end{eqnarray} This is ensured using the assignment inference rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:U> ; <var:Y> := <var:P1> ; <var:Y> := <var:Y> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:U> = <var:G> }} <def:poly> {{ <var:Y> = <nat:2> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:P0> = <nat:6> /\ <var:Y> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:Y> = <nat:2> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 