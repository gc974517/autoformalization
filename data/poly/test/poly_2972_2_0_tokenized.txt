\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:1> ; <var:x> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Allow that we have $ <var:T> = <var:H> $ , with some $ <var:H> $ , before running our code segment it must be that $ <var:x> = <nat:1> $ once program has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:H> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:T> = <var:H> \land <var:h0> = <nat:1> \} \\ <var:x> := <var:h0> \\ \{ <var:T> = <var:H> \land <var:x> = <nat:1> \} \end{eqnarray} The application of usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:x> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:T> = <var:H> }} <def:poly> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:H> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 