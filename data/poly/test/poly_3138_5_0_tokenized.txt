\begin{document} \begin{theorem} Define a list of commands : \begin{verbatim} <var:n0> := <nat:3> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:y> ; <var:v> := <var:n1> ; <var:v> := <var:v> + <var:n0> \end{verbatim} Assume --- letting whole numbers $ <var:M> $ --- it to be that $ <var:y> = <var:M> $ prior to the evaluation of this code segment it holds that we have $ <var:v> = <nat:1> \cdot <var:M> + <nat:3> $ once series of commands has finished executing . \end{theorem} \begin{proof} Applying standard Hoare reasoning produces : \begin{eqnarray} \{ <var:y> = <var:M> \} \\ <var:n0> := <nat:3> ; \\ \{ <var:y> = <var:M> \land <var:n0> = <nat:3> \} \\ <var:n1> := <nat:1> ; \\ \{ <var:y> = <var:M> \land <var:n0> = <nat:3> \land <var:n1> = <nat:1> \} \\ <var:n1> := <var:n1> * <var:y> ; \\ \{ <var:y> = <var:M> \land <var:n0> = <nat:3> \land <var:n1> = <nat:1> \cdot <var:M> \} \\ <var:v> := <var:n1> ; \\ \{ <var:y> = <var:M> \land <var:n0> = <nat:3> \land <var:v> = <nat:1> \cdot <var:M> \} \\ <var:v> := <var:v> + <var:n0> \\ \{ <var:y> = <var:M> \land <var:v> = <nat:1> \cdot <var:M> + <nat:3> \} \end{eqnarray} Given the preceding argument , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:y> = <var:M> }} <var:n0> := <nat:3> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:y> ; <var:v> := <var:n1> ; <var:v> := <var:v> + <var:n0> {{ <var:v> = <nat:1> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:n0> = <nat:3> /\ <var:v> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:M> /\ <var:v> = <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 