\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:1> ; <var:R> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Given that $ <var:x> = <var:w> $ before interpreting our list of commands it follows that we have $ <var:R> = <nat:1> $ when segment of code exits . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is demonstrated by typical Hoare logic . Advancing , the variable update command assigning $ <nat:1> $ as $ <var:y0>$ . This moves the precondition $ \{ <var:x> = <var:w> \} $ as the condition $ \{ <var:x> = <var:w> \land <var:y0> = <nat:1> \} $ . This is deduced with the assignment inference rule obtained from standard Hoare reasoning . Going forward , we have the variable assignmet statement yielding $ <var:y0$ toward $ <var:R>$ . This statement forwards the condition $ \{ <var:x> = <var:w> \land <var:y0> = <nat:1> \} $ as $ \{ <var:x> = <var:w> \land <var:R> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:R> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:x> = <var:w> }} <def:poly> {{ <var:R> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:R> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 