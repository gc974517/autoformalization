\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:1> ; <var:B> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Allow , given every natural numbers $ <var:k> $ , $ <var:W> = <var:k> $ before the evaluation of this set of instructions , it must be that we have $ <var:B> = <nat:1> $ after program exits . \end{theorem} \begin{proof} The course of logic for the code segment can be shown using the below decorated list of commands . \begin{eqnarray} \{ <var:W> = <var:k> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:W> = <var:k> \land <var:q0> = <nat:1> \} \\ <var:B> := <var:q0> \\ \{ <var:W> = <var:k> \land <var:B> = <nat:1> \} \end{eqnarray} The application of Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:1> ; <var:B> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:W> = <var:k> }} <def:poly> {{ <var:B> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:k> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:k> /\ <var:B> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 