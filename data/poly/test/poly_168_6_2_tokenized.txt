\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:Y> := <nat:2> ; <var:Y> := <nat:3> + <var:Y> * <var:D> ; <var:Y> := <nat:2> + <var:Y> * <var:D> ; <var:Y> := <nat:3> + <var:Y> * <var:D> ; <var:Y> := <nat:1> + <var:Y> * <var:D> ; <var:Y> := <nat:4> + <var:Y> * <var:D> \end{verbatim} Assuming it to hold that $ <var:D> = <var:t> $ ahead of executing the code , then $ <var:Y> = <nat:2> \times <var:t> ^ <nat:5> + <nat:3> \times <var:t> ^ <nat:4> + <nat:2> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:4> $ . \end{theorem} \begin{proof} See that the below decorated set of commands . \begin{eqnarray} \{ <var:D> = <var:t> \} \\ <var:Y> := <nat:2> ; \\ \{ <var:D> = <var:t> \land <var:Y> = <nat:2> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:D> ; \\ \{ <var:D> = <var:t> \land <var:Y> = <nat:2> \cdot <var:t> + <nat:3> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:D> ; \\ \{ <var:D> = <var:t> \land <var:Y> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:2> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:D> ; \\ \{ <var:D> = <var:t> \land <var:Y> = <nat:2> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:3> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:D> ; \\ \{ <var:D> = <var:t> \land <var:Y> = <nat:2> \cdot <var:t> ^ <nat:4> + <nat:3> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> \} \\ <var:Y> := <nat:4> + <var:Y> * <var:D> \\ \{ <var:D> = <var:t> \land <var:Y> = <nat:2> \cdot <var:t> ^ <nat:5> + <nat:3> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:4> \} \end{eqnarray} The application of usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:D> = <var:t> }} <var:Y> := <nat:2> ; <var:Y> := <nat:3> + <var:Y> * <var:D> ; <var:Y> := <nat:2> + <var:Y> * <var:D> ; <var:Y> := <nat:3> + <var:Y> * <var:D> ; <var:Y> := <nat:1> + <var:Y> * <var:D> ; <var:Y> := <nat:4> + <var:Y> * <var:D> {{ <var:Y> = <nat:2> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:Y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:Y> = <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:Y> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:Y> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:Y> = <nat:2> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:Y> = <nat:2> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 