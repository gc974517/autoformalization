\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:V> ; <var:F2> := <var:F1> * <var:V> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:1> ; <var:F2> := <var:F2> * <nat:2> ; <var:m> := <var:F2> <var:m> := <var:m> + <var:F1> <var:m> := <var:m> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:V> = <var:C> $ --- for any natural numbers $ <var:C> $ --- ahead of executing our code then $ <var:m> = <nat:2> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:5> $ after code executes . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:V> = <var:C> \} \\ <var:F1> := <var:V> ; \\ \{ <var:V> = <var:C> \land <var:F1> = <var:C> \} \\ <var:F2> := <var:F1> * <var:V> ; \\ \{ <var:V> = <var:C> \land <var:F1> = <var:C> \land <var:F2> = <var:C> ^ <nat:2> \} \\ <var:F0> := <nat:5> ; \\ \{ <var:V> = <var:C> \land <var:F1> = <var:C> \land <var:F2> = <var:C> ^ <nat:2> \land <var:F0> = <nat:5> \} \\ <var:F1> := <var:F1> * <nat:1> ; \\ \{ <var:V> = <var:C> \land <var:F1> = <nat:1> \times <var:C> \land <var:F2> = <var:C> ^ <nat:2> \land <var:F0> = <nat:5> \} \\ <var:F2> := <var:F2> * <nat:2> ; \\ \{ <var:V> = <var:C> \land <var:F1> = <nat:1> \times <var:C> \land <var:F2> = <nat:2> \times <var:C> ^ <nat:2> \land <var:F0> = <nat:5> \} \\ <var:m> := <var:F2> \\ \{ <var:V> = <var:C> \land <var:F1> = <nat:1> \times <var:C> \land <var:F0> = <nat:5> \land <var:m> = <nat:2> \times <var:C> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:F1> \\ \{ <var:V> = <var:C> \land <var:F0> = <nat:5> \land <var:m> = <nat:2> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> \} \\ <var:m> := <var:m> + <var:F0> \\ \{ <var:V> = <var:C> \land <var:m> = <nat:2> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:5> \} \end{eqnarray} As a result , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F1> := <var:V> ; <var:F2> := <var:F1> * <var:V> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:1> ; <var:F2> := <var:F2> * <nat:2> ; <var:m> := <var:F2> <var:m> := <var:m> + <var:F1> <var:m> := <var:m> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:V> = <var:C> }} <def:poly> {{ <var:m> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:F1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:F1> = <var:C> /\ <var:F2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:F1> = <var:C> /\ <var:F2> = <var:C> ^ <nat:2> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:F1> = <nat:1> * <var:C> /\ <var:F2> = <var:C> ^ <nat:2> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:F1> = <nat:1> * <var:C> /\ <var:F2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:F1> = <nat:1> * <var:C> /\ <var:F0> = <nat:5> /\ <var:m> = <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:F0> = <nat:5> /\ <var:m> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:m> = <nat:2> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 