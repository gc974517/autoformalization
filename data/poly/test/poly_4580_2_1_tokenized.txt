\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:3> ; <var:B> := <var:d0> \end{verbatim} Assume $ <var:V> = <var:E> $ ahead of interpreting this program it holds that we have $ <var:B> = <nat:3> $ after code segment terminates . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:V> = <var:E> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:V> = <var:E> \land <var:d0> = <nat:3> \} \\ <var:B> := <var:d0> \\ \{ <var:V> = <var:E> \land <var:B> = <nat:3> \} \end{eqnarray} Thus , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:V> = <var:E> }} <var:d0> := <nat:3> ; <var:B> := <var:d0> {{ <var:B> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:B> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 