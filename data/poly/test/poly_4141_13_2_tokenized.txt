\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:2> + <var:G> * <var:j> ; <var:G> := <nat:1> + <var:G> * <var:j> ; <var:G> := <nat:1> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:4> + <var:G> * <var:j> ; <var:G> := <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:j> = <var:L> $ , given all $ <var:L> \in \mathbb{N} $ , prior to running the list of commands , it follows that we have $ <var:G> = <nat:4> \times <var:L> ^ <nat:12> + <nat:2> \times <var:L> ^ <nat:11> + <nat:1> \times <var:L> ^ <nat:10> + <nat:1> \times <var:L> ^ <nat:9> + <nat:3> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:7> + <nat:3> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic yields : \begin{eqnarray} \{ <var:j> = <var:L> \} \\ <var:G> := <nat:4> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \} \\ <var:G> := <nat:2> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> + <nat:2> \} \\ <var:G> := <nat:1> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:1> \} \\ <var:G> := <nat:3> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:3> \} \\ <var:G> := <nat:4> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:4> \} \\ <var:G> := <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + \} \\ <var:G> := <nat:3> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:7> + <nat:2> \cdot <var:L> ^ <nat:6> + <nat:1> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \} \\ <var:G> := <nat:3> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:8> + <nat:2> \cdot <var:L> ^ <nat:7> + <nat:1> \cdot <var:L> ^ <nat:6> + <nat:1> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> + <nat:3> \} \\ <var:G> := <nat:3> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:9> + <nat:2> \cdot <var:L> ^ <nat:8> + <nat:1> \cdot <var:L> ^ <nat:7> + <nat:1> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:4> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} \\ <var:G> := <nat:3> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:10> + <nat:2> \cdot <var:L> ^ <nat:9> + <nat:1> \cdot <var:L> ^ <nat:8> + <nat:1> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:6> + <nat:4> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} \\ <var:G> := <nat:3> + <var:G> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:11> + <nat:2> \cdot <var:L> ^ <nat:10> + <nat:1> \cdot <var:L> ^ <nat:9> + <nat:1> \cdot <var:L> ^ <nat:8> + <nat:3> \cdot <var:L> ^ <nat:7> + <nat:4> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} \\ <var:G> := <nat:3> + <var:G> * <var:j> \\ \{ <var:j> = <var:L> \land <var:G> = <nat:4> \cdot <var:L> ^ <nat:12> + <nat:2> \cdot <var:L> ^ <nat:11> + <nat:1> \cdot <var:L> ^ <nat:10> + <nat:1> \cdot <var:L> ^ <nat:9> + <nat:3> \cdot <var:L> ^ <nat:8> + <nat:4> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:4> ; <var:G> := <nat:2> + <var:G> * <var:j> ; <var:G> := <nat:1> + <var:G> * <var:j> ; <var:G> := <nat:1> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:4> + <var:G> * <var:j> ; <var:G> := <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> ; <var:G> := <nat:3> + <var:G> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:j> = <var:L> }} <def:poly> {{ <var:G> = <nat:4> * <var:L> ^ <nat:12> + <nat:2> * <var:L> ^ <nat:11> + <nat:1> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:9> + <nat:3> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:10> + <nat:2> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:11> + <nat:2> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:G> = <nat:4> * <var:L> ^ <nat:12> + <nat:2> * <var:L> ^ <nat:11> + <nat:1> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:9> + <nat:3> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 