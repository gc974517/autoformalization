\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:4> + <var:h> * <var:s> ; <var:h> := <nat:3> + <var:h> * <var:s> ; <var:h> := <nat:4> + <var:h> * <var:s> ; <var:h> := <nat:4> + <var:h> * <var:s> ; <var:h> := <nat:3> + <var:h> * <var:s> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:s> = <var:f> $ given some positive integer coefficients $ <var:f> $ before executing this set of commands , it holds that we have $ <var:h> = <nat:4> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> $ once code segment has exited . \end{theorem} \begin{proof} The method of proof for our list of instructions can be seen by usual Hoare reasoning . Focusing on the following bits of codecontained in our code , \begin{verbatim} { <var:s> = <var:f> } <var:h> := <nat:4> { <var:s> = <var:f> \land <var:h> = <nat:4> } { <var:s> = <var:f> \land <var:h> = <nat:4> } <var:h> := <nat:4> + <var:h> * <var:s> { <var:s> = <var:f> \land <var:h> = <nat:4> \times <var:f> + <nat:4> } { <var:s> = <var:f> \land <var:h> = <nat:4> \times <var:f> + <nat:4> } <var:h> := <nat:3> + <var:h> * <var:s> { <var:s> = <var:f> \land <var:h> = <nat:4> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:3> } \end{verbatim} This is deduced using the assignment scheme from Hoare reasoning . Immediately after , \begin{verbatim} { <var:s> = <var:f> } <var:h> := <nat:4> { <var:s> = <var:f> \land <var:h> = <nat:4> } { <var:s> = <var:f> \land <var:h> = <nat:4> } <var:h> := <nat:4> + <var:h> * <var:s> { <var:s> = <var:f> \land <var:h> = <nat:4> \times <var:f> + <nat:4> } \end{verbatim} Immediately after , \begin{verbatim} { <var:s> = <var:f> } <var:h> := <nat:4> { <var:s> = <var:f> \land <var:h> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:4> ; <var:h> := <nat:4> + <var:h> * <var:s> ; <var:h> := <nat:3> + <var:h> * <var:s> ; <var:h> := <nat:4> + <var:h> * <var:s> ; <var:h> := <nat:4> + <var:h> * <var:s> ; <var:h> := <nat:3> + <var:h> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:s> = <var:f> }} <def:poly> {{ <var:h> = <nat:4> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:h> = <nat:4> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:h> = <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:h> = <nat:4> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:h> = <nat:4> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:h> = <nat:4> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 