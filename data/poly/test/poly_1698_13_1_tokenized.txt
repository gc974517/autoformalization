\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:h1> := <var:q> ; <var:h2> := <var:h1> * <var:q> ; <var:h3> := <var:h2> * <var:q> ; <var:h4> := <var:h3> * <var:q> ; <var:h5> := <var:h4> * <var:q> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:5> ; <var:h3> := <var:h3> * <nat:9> ; <var:h5> := <var:h5> * <nat:1> ; <var:e> := <var:h5> <var:e> := <var:e> + <var:h3> <var:e> := <var:e> + <var:h1> <var:e> := <var:e> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow , given positive integers $ <var:w> $ , it to hold that $ <var:q> = <var:w> $ prior to the evaluation of this series of instructions , it follows that we see $ <var:e> = <nat:1> * <var:w> ^ <nat:5> + <nat:9> * <var:w> ^ <nat:3> + <nat:5> * <var:w> + <nat:8> $ . \end{theorem} \begin{proof} Observe that the following decorated list of commands . \begin{eqnarray} \{ <var:q> = <var:w> \} \\ <var:h1> := <var:q> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <var:w> \} \\ <var:h2> := <var:h1> * <var:q> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:q> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \} \end{eqnarray} Advancing running the list of instructions results in : \begin{eqnarray} <var:h4> := <var:h3> * <var:q> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \} \\ <var:h5> := <var:h4> * <var:q> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h5> = <var:w> ^ <nat:5> \} \\ <var:h0> := <nat:8> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h5> = <var:w> ^ <nat:5> \land <var:h0> = <nat:8> \} \\ <var:h1> := <var:h1> * <nat:5> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <nat:5> \times <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h5> = <var:w> ^ <nat:5> \land <var:h0> = <nat:8> \} \\ <var:h3> := <var:h3> * <nat:9> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <nat:5> \times <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h5> = <var:w> ^ <nat:5> \land <var:h0> = <nat:8> \} \\ <var:h5> := <var:h5> * <nat:1> ; \\ \{ <var:q> = <var:w> \land <var:h1> = <nat:5> \times <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h5> = <nat:1> \times <var:w> ^ <nat:5> \land <var:h0> = <nat:8> \} \\ <var:e> := <var:h5> \\ \{ <var:q> = <var:w> \land <var:h1> = <nat:5> \times <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <nat:9> \times <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h0> = <nat:8> \land <var:e> = <nat:1> \times <var:w> ^ <nat:5> \} \\ <var:e> := <var:e> + <var:h3> \\ \{ <var:q> = <var:w> \land <var:h1> = <nat:5> \times <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h0> = <nat:8> \land <var:e> = <nat:1> \times <var:w> ^ <nat:5> + <nat:9> \times <var:w> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:h1> \\ \{ <var:q> = <var:w> \land <var:h0> = <nat:8> \land <var:e> = <nat:1> \times <var:w> ^ <nat:5> + <nat:9> \times <var:w> ^ <nat:3> + <nat:5> \times <var:w> \} \\ <var:e> := <var:e> + <var:h0> \\ \{ <var:q> = <var:w> \land <var:e> = <nat:1> \times <var:w> ^ <nat:5> + <nat:9> \times <var:w> ^ <nat:3> + <nat:5> \times <var:w> + <nat:8> \} \end{eqnarray} The application of usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <var:h4> : string := " <var:h4> " . Definition <var:h5> : string := " <var:h5> " . Definition <def:poly> := <var:h1> := <var:q> ; <var:h2> := <var:h1> * <var:q> ; <var:h3> := <var:h2> * <var:q> ; <var:h4> := <var:h3> * <var:q> ; <var:h5> := <var:h4> * <var:q> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:5> ; <var:h3> := <var:h3> * <nat:9> ; <var:h5> := <var:h5> * <nat:1> ; <var:e> := <var:h5> <var:e> := <var:e> + <var:h3> <var:e> := <var:e> + <var:h1> <var:e> := <var:e> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:q> = <var:w> }} <def:poly> {{ <var:e> = <nat:1> * <var:w> ^ <nat:5> + <nat:9> * <var:w> ^ <nat:3> + <nat:5> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h5> = <var:w> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h5> = <var:w> ^ <nat:5> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <nat:5> * <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h5> = <var:w> ^ <nat:5> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <nat:5> * <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h5> = <var:w> ^ <nat:5> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <nat:5> * <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h5> = <nat:1> * <var:w> ^ <nat:5> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <nat:5> * <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h0> = <nat:8> /\ <var:e> = <nat:1> * <var:w> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h1> = <nat:5> * <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h0> = <nat:8> /\ <var:e> = <nat:1> * <var:w> ^ <nat:5> + <nat:9> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:h0> = <nat:8> /\ <var:e> = <nat:1> * <var:w> ^ <nat:5> + <nat:9> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:e> = <nat:1> * <var:w> ^ <nat:5> + <nat:9> * <var:w> ^ <nat:3> + <nat:5> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 