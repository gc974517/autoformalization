\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:4> ; <var:s> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for integers $ <var:C> $ ) it to be that $ <var:m> = <var:C> $ before running our set of commands it follows that we have $ <var:s> = <nat:4> $ after series of commands is done executing . \end{theorem} \begin{proof} The proof of our segment of code can be demonstrated by Hoare reasoning . Immediately following , \begin{eqnarray} \{ <var:m> = <var:C> \} \, <var:Y0> := <nat:4> \, \{ <var:m> = <var:C> \land <var:Y0> = <nat:4> \} \end{eqnarray} This is rigorously given with the variable binding inference rule of standard Hoare reasoning . Paying attention to the upcoming line of code contained in the code , we have \begin{eqnarray} \{ <var:m> = <var:C> \} \, <var:Y0> := <nat:4> \, \{ <var:m> = <var:C> \land <var:Y0> = <nat:4> \} \end{eqnarray} This is shown to be logically sound through the assignment rule given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:4> ; <var:s> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:m> = <var:C> }} <def:poly> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:C> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:C> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 