\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:6> ; <var:t1> := <nat:5> ; <var:t1> := <var:t1> * <var:A> ; <var:t2> := <nat:5> ; <var:t2> := <var:t2> * <var:A> ; <var:t2> := <var:t2> * <var:A> ; <var:B> := <var:t2> ; <var:B> := <var:B> + <var:t1> ; <var:B> := <var:B> + <var:t0> \end{verbatim} Assume it to be that $ <var:A> = <var:H> $ ( for all positive integer coefficients $ <var:H> $ ) before executing the code then $ <var:B> = <nat:5> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:6> $ after set of instructions finishes . \end{theorem} \begin{proof} Observe that this decorated segment of code . \begin{eqnarray} \{ <var:A> = <var:H> \} \\ <var:t0> := <nat:6> ; \\ \{ <var:A> = <var:H> \land <var:t0> = <nat:6> \} \\ <var:t1> := <nat:5> ; \\ \{ <var:A> = <var:H> \land <var:t0> = <nat:6> \land <var:t1> = <nat:5> \} \\ <var:t1> := <var:t1> * <var:A> ; \\ \{ <var:A> = <var:H> \land <var:t0> = <nat:6> \land <var:t1> = <nat:5> \times <var:H> \} \\ <var:t2> := <nat:5> ; \\ \{ <var:A> = <var:H> \land <var:t0> = <nat:6> \land <var:t1> = <nat:5> \times <var:H> \land <var:t2> = <nat:5> \} \\ <var:t2> := <var:t2> * <var:A> ; \\ \{ <var:A> = <var:H> \land <var:t0> = <nat:6> \land <var:t1> = <nat:5> \times <var:H> \land <var:t2> = <nat:5> \times <var:H> \} \\ <var:t2> := <var:t2> * <var:A> ; \\ \{ <var:A> = <var:H> \land <var:t0> = <nat:6> \land <var:t1> = <nat:5> \times <var:H> \land <var:t2> = <nat:5> \times <var:H> ^ <nat:2> \} \\ <var:B> := <var:t2> ; \\ \{ <var:A> = <var:H> \land <var:t0> = <nat:6> \land <var:t1> = <nat:5> \times <var:H> \land <var:B> = <nat:5> \times <var:H> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:t1> ; \\ \{ <var:A> = <var:H> \land <var:t0> = <nat:6> \land <var:B> = <nat:5> \times <var:H> ^ <nat:2> + <nat:5> \times <var:H> \} \\ <var:B> := <var:B> + <var:t0> \\ \{ <var:A> = <var:H> \land <var:B> = <nat:5> \times <var:H> ^ <nat:2> + <nat:5> \times <var:H> + <nat:6> \} \end{eqnarray} Using Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:A> = <var:H> }} <var:t0> := <nat:6> ; <var:t1> := <nat:5> ; <var:t1> := <var:t1> * <var:A> ; <var:t2> := <nat:5> ; <var:t2> := <var:t2> * <var:A> ; <var:t2> := <var:t2> * <var:A> ; <var:B> := <var:t2> ; <var:B> := <var:B> + <var:t1> ; <var:B> := <var:B> + <var:t0> {{ <var:B> = <nat:5> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:5> * <var:H> /\ <var:t2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:5> * <var:H> /\ <var:t2> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:5> * <var:H> /\ <var:t2> = <nat:5> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:5> * <var:H> /\ <var:B> = <nat:5> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:t0> = <nat:6> /\ <var:B> = <nat:5> * <var:H> ^ <nat:2> + <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:B> = <nat:5> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 