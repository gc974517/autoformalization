\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:K1> := <var:E> ; <var:K2> := <var:K1> * <var:E> ; <var:K3> := <var:K2> * <var:E> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:5> ; <var:K2> := <var:K2> * <nat:6> ; <var:K3> := <var:K3> * <nat:9> ; <var:H> := <var:K3> <var:H> := <var:H> + <var:K2> <var:H> := <var:H> + <var:K1> <var:H> := <var:H> + <var:K0> \end{verbatim} Assuming $ <var:E> = <var:s> $ prior to executing our series of commands then we see $ <var:H> = <nat:9> \times <var:s> ^ <nat:3> + <nat:6> \times <var:s> ^ <nat:2> + <nat:5> \times <var:s> + <nat:4> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be demonstrated with typical Hoare logic . Moving on , we see \verb | { <var:E> = <var:s> } <var:K1> := <var:E> { <var:E> = <var:s> \land <var:K1> = <var:s> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <var:s> } <var:K2> := <var:K1> * <var:E> { <var:E> = <var:s> \land <var:K1> = <var:s> \land <var:K2> = <var:s> ^ <nat:2> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <var:s> \land <var:K2> = <var:s> ^ <nat:2> } <var:K3> := <var:K2> * <var:E> { <var:E> = <var:s> \land <var:K1> = <var:s> \land <var:K2> = <var:s> ^ <nat:2> \land <var:K3> = <var:s> ^ <nat:3> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <var:s> \land <var:K2> = <var:s> ^ <nat:2> \land <var:K3> = <var:s> ^ <nat:3> } <var:K0> := <nat:4> { <var:E> = <var:s> \land <var:K1> = <var:s> \land <var:K2> = <var:s> ^ <nat:2> \land <var:K3> = <var:s> ^ <nat:3> \land <var:K0> = <nat:4> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <var:s> \land <var:K2> = <var:s> ^ <nat:2> \land <var:K3> = <var:s> ^ <nat:3> \land <var:K0> = <nat:4> } <var:K1> := <var:K1> * <nat:5> { <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K2> = <var:s> ^ <nat:2> \land <var:K3> = <var:s> ^ <nat:3> \land <var:K0> = <nat:4> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K2> = <var:s> ^ <nat:2> \land <var:K3> = <var:s> ^ <nat:3> \land <var:K0> = <nat:4> } <var:K2> := <var:K2> * <nat:6> { <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:K3> = <var:s> ^ <nat:3> \land <var:K0> = <nat:4> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:K3> = <var:s> ^ <nat:3> \land <var:K0> = <nat:4> } <var:K3> := <var:K3> * <nat:9> { <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:K3> = <nat:9> \cdot <var:s> ^ <nat:3> \land <var:K0> = <nat:4> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:K3> = <nat:9> \cdot <var:s> ^ <nat:3> \land <var:K0> = <nat:4> } <var:H> := <var:K3{ <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:K0> = <nat:4> \land <var:H> = <nat:9> \cdot <var:s> ^ <nat:3> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:K0> = <nat:4> \land <var:H> = <nat:9> \cdot <var:s> ^ <nat:3> } <var:H> := <var:H> + <var:K2{ <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K0> = <nat:4> \land <var:H> = <nat:9> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> } | , \verb | { <var:E> = <var:s> \land <var:K1> = <nat:5> \cdot <var:s> \land <var:K0> = <nat:4> \land <var:H> = <nat:9> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> } <var:H> := <var:H> + <var:K1{ <var:E> = <var:s> \land <var:K0> = <nat:4> \land <var:H> = <nat:9> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> + <nat:5> \cdot <var:s> } | and \verb | { <var:E> = <var:s> \land <var:K0> = <nat:4> \land <var:H> = <nat:9> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> + <nat:5> \cdot <var:s> } <var:H> := <var:H> + <var:K0{ <var:E> = <var:s> \land <var:H> = <nat:9> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> + <nat:5> \cdot <var:s> + <nat:4> } | . This is rigorously given with the environment update law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:E> = <var:s> }} <var:K1> := <var:E> ; <var:K2> := <var:K1> * <var:E> ; <var:K3> := <var:K2> * <var:E> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:5> ; <var:K2> := <var:K2> * <nat:6> ; <var:K3> := <var:K3> * <nat:9> ; <var:H> := <var:K3> <var:H> := <var:H> + <var:K2> <var:H> := <var:H> + <var:K1> <var:H> := <var:H> + <var:K0> {{ <var:H> = <nat:9> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <var:s> /\ <var:K2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <var:s> /\ <var:K2> = <var:s> ^ <nat:2> /\ <var:K3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <var:s> /\ <var:K2> = <var:s> ^ <nat:2> /\ <var:K3> = <var:s> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <nat:5> * <var:s> /\ <var:K2> = <var:s> ^ <nat:2> /\ <var:K3> = <var:s> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <nat:5> * <var:s> /\ <var:K2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:K3> = <var:s> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <nat:5> * <var:s> /\ <var:K2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:K3> = <nat:9> * <var:s> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <nat:5> * <var:s> /\ <var:K2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:K0> = <nat:4> /\ <var:H> = <nat:9> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K1> = <nat:5> * <var:s> /\ <var:K0> = <nat:4> /\ <var:H> = <nat:9> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:K0> = <nat:4> /\ <var:H> = <nat:9> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:H> = <nat:9> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 