\begin{document} \begin{theorem} We define a set of commands such that \begin{verbatim} <var:P0> := <nat:4> ; <var:P1> := <nat:7> ; <var:P1> := <var:P1> * <var:c> ; <var:P2> := <nat:8> ; <var:P2> := <var:P2> * <var:c> ; <var:P2> := <var:P2> * <var:c> ; <var:P3> := <nat:8> ; <var:P3> := <var:P3> * <var:c> ; <var:P3> := <var:P3> * <var:c> ; <var:P3> := <var:P3> * <var:c> ; <var:j> := <var:P3> ; <var:j> := <var:j> + <var:P2> ; <var:j> := <var:j> + <var:P1> ; <var:j> := <var:j> + <var:P0> \end{verbatim} Assuming that we have $ <var:c> = <var:M> $ ahead of running our code segment then we see $ <var:j> = <nat:8> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:c> = <var:M> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \} \\ <var:P1> := <nat:7> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \} \\ <var:P1> := <var:P1> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \} \\ <var:P2> := <nat:8> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:P2> = <nat:8> \} \\ <var:P2> := <var:P2> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:P2> = <nat:8> \cdot <var:M> \} \\ <var:P2> := <var:P2> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:P2> = <nat:8> \cdot <var:M> ^ <nat:2> \} \\ <var:P3> := <nat:8> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:P2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:P3> = <nat:8> \} \\ <var:P3> := <var:P3> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:P2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:M> \} \\ <var:P3> := <var:P3> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:P2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:M> ^ <nat:2> \} \\ <var:P3> := <var:P3> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:P2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:M> ^ <nat:3> \} \\ <var:j> := <var:P3> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:P2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:j> = <nat:8> \cdot <var:M> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:P2> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:P1> = <nat:7> \cdot <var:M> \land <var:j> = <nat:8> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:P1> ; \\ \{ <var:c> = <var:M> \land <var:P0> = <nat:4> \land <var:j> = <nat:8> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> \} \\ <var:j> := <var:j> + <var:P0> \\ \{ <var:c> = <var:M> \land <var:j> = <nat:8> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> + <nat:4> \} \end{eqnarray} Thusly , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:c> = <var:M> }} <var:P0> := <nat:4> ; <var:P1> := <nat:7> ; <var:P1> := <var:P1> * <var:c> ; <var:P2> := <nat:8> ; <var:P2> := <var:P2> * <var:c> ; <var:P2> := <var:P2> * <var:c> ; <var:P3> := <nat:8> ; <var:P3> := <var:P3> * <var:c> ; <var:P3> := <var:P3> * <var:c> ; <var:P3> := <var:P3> * <var:c> ; <var:j> := <var:P3> ; <var:j> := <var:j> + <var:P2> ; <var:j> := <var:j> + <var:P1> ; <var:j> := <var:j> + <var:P0> {{ <var:j> = <nat:8> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:P2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:P2> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:P2> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:P2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:P3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:P2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:P2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:P2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:P2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:j> = <nat:8> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:7> * <var:M> /\ <var:j> = <nat:8> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:P0> = <nat:4> /\ <var:j> = <nat:8> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:j> = <nat:8> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 