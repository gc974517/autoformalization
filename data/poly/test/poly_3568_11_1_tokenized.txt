\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:W1> := <var:Z> ; <var:W2> := <var:W1> * <var:Z> ; <var:W3> := <var:W2> * <var:Z> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:8> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:7> ; <var:l> := <var:W3> <var:l> := <var:l> + <var:W2> <var:l> := <var:l> + <var:W1> <var:l> := <var:l> + <var:W0> \end{verbatim} Allow --- for whole numbers $ <var:v> $ --- that $ <var:Z> = <var:v> $ prior to executing this series of instructions , it must be that we have $ <var:l> = <nat:7> \times <var:v> ^ <nat:3> + <nat:5> \times <var:v> ^ <nat:2> + <nat:8> \times <var:v> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions is accomplished using typical Hoare reasoning . Keeping momentum , we see the environment update code \verb | <var:W1> := <var:Z> ; | . This forwards the condition $ \{ <var:Z> = <var:v> \} $ to $ \{ <var:Z> = <var:v> \land <var:W1> = <var:v> \} $ . This is ensured using the assignment inference rule found in usual Hoare logic . Moving on to the subsequent command contained in our series of instructions , we have the variable assignmet code \verb | <var:W2> := <var:W1> * <var:Z> ; | . This line transfers $ \{ <var:Z> = <var:v> \land <var:W1> = <var:v> \} $ into the condition $ \{ <var:Z> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <var:v> ^ <nat:2> \} $ . This is sound using the assignment inference rule from typical Hoare logic . Moving on to the next piece of code in our segment of code , we see the variable update line defining $ <var:W2> * <var:Z> $ toward $ <var:W3>$ . This code takes $ \{ <var:Z> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <var:v> ^ <nat:2> \} $ as $ \{ <var:Z> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <var:v> ^ <nat:2> \land <var:W3> = <var:v> ^ <nat:3> \} $ . Moving onward , we see the variable update command \verb | <var:W0> := <nat:2> ; | . This line transfers the condition $ \{ <var:Z> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <var:v> ^ <nat:2> \land <var:W3> = <var:v> ^ <nat:3> \} $ to $ \{ <var:Z> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <var:v> ^ <nat:2> \land <var:W3> = <var:v> ^ <nat:3> \land <var:W0> = <nat:2> \} $ . This is deduced using the assignment law of Hoare logic . Advancing to the next step , the binding command defining $ <var:W1> * <nat:8> $ into $ <var:W1>$ . This statement takes the condition $ \{ <var:Z> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <var:v> ^ <nat:2> \land <var:W3> = <var:v> ^ <nat:3> \land <var:W0> = <nat:2> \} $ into the postcondition $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W2> = <var:v> ^ <nat:2> \land <var:W3> = <var:v> ^ <nat:3> \land <var:W0> = <nat:2> \} $ . Honing in on the following step seen in our list of commands , the environment update line binding $ <var:W2> * <nat:5> $ as $ <var:W2>$ . This statement redefines $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W2> = <var:v> ^ <nat:2> \land <var:W3> = <var:v> ^ <nat:3> \land <var:W0> = <nat:2> \} $ toward the condition $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W2> = <nat:5> * <var:v> ^ <nat:2> \land <var:W3> = <var:v> ^ <nat:3> \land <var:W0> = <nat:2> \} $ . Advancing to the subsequent line of code found in our code segment , we see the variable update line \verb | <var:W3> := <var:W3> * <nat:7> ; | . This code transfers the condition $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W2> = <nat:5> * <var:v> ^ <nat:2> \land <var:W3> = <var:v> ^ <nat:3> \land <var:W0> = <nat:2> \} $ toward the postcondition $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W2> = <nat:5> * <var:v> ^ <nat:2> \land <var:W3> = <nat:7> * <var:v> ^ <nat:3> \land <var:W0> = <nat:2> \} $ . Advancing to the next step , we see the variable binding statement giving $ <var:W3$ into $ <var:l>$ . This statement redefines the precondition $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W2> = <nat:5> * <var:v> ^ <nat:2> \land <var:W3> = <nat:7> * <var:v> ^ <nat:3> \land <var:W0> = <nat:2> \} $ into the postcondition $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W2> = <nat:5> * <var:v> ^ <nat:2> \land <var:W0> = <nat:2> \land <var:l> = <nat:7> * <var:v> ^ <nat:3> \} $ . After , we have the environment update statement binding $ <var:l> + <var:W2$ toward $ <var:l>$ . This statement redefines $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W2> = <nat:5> * <var:v> ^ <nat:2> \land <var:W0> = <nat:2> \land <var:l> = <nat:7> * <var:v> ^ <nat:3> \} $ toward the postcondition $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W0> = <nat:2> \land <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> \} $ . Observing the upcoming line of code found in our code , the environment update code \verb | <var:l> := <var:l> + <var:W1> | . This statement moves the condition $ \{ <var:Z> = <var:v> \land <var:W1> = <nat:8> * <var:v> \land <var:W0> = <nat:2> \land <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> \} $ as the condition $ \{ <var:Z> = <var:v> \land <var:W0> = <nat:2> \land <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> \} $ . This is rigorously given through the assignment rule in typical Hoare techniques . Immediately following , we see the code \verb | <var:l> := <var:l> + <var:W0> | . This code transfers $ \{ <var:Z> = <var:v> \land <var:W0> = <nat:2> \land <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> \} $ as the condition $ \{ <var:Z> = <var:v> \land <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Z> = <var:v> }} <var:W1> := <var:Z> ; <var:W2> := <var:W1> * <var:Z> ; <var:W3> := <var:W2> * <var:Z> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:8> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:7> ; <var:l> := <var:W3> <var:l> := <var:l> + <var:W2> <var:l> := <var:l> + <var:W1> <var:l> := <var:l> + <var:W0> {{ <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <var:v> /\ <var:W2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <var:v> /\ <var:W2> = <var:v> ^ <nat:2> /\ <var:W3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <var:v> /\ <var:W2> = <var:v> ^ <nat:2> /\ <var:W3> = <var:v> ^ <nat:3> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <nat:8> * <var:v> /\ <var:W2> = <var:v> ^ <nat:2> /\ <var:W3> = <var:v> ^ <nat:3> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <nat:8> * <var:v> /\ <var:W2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:W3> = <var:v> ^ <nat:3> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <nat:8> * <var:v> /\ <var:W2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:v> ^ <nat:3> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <nat:8> * <var:v> /\ <var:W2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:W0> = <nat:2> /\ <var:l> = <nat:7> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W1> = <nat:8> * <var:v> /\ <var:W0> = <nat:2> /\ <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:W0> = <nat:2> /\ <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:l> = <nat:7> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 