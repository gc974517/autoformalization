\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:q0> := <nat:6> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:H> ; <var:q4> := <nat:8> ; <var:q4> := <var:q4> * <var:H> ; <var:q4> := <var:q4> * <var:H> ; <var:q4> := <var:q4> * <var:H> ; <var:q4> := <var:q4> * <var:H> ; <var:E> := <var:q4> ; <var:E> := <var:E> + <var:q1> ; <var:E> := <var:E> + <var:q0> \end{verbatim} Allowing it to be that $ <var:H> = <var:B> $ ahead of running our series of commands , it holds that $ <var:E> = <nat:8> \cdot <var:B> ^ <nat:4> + <nat:5> \cdot <var:B> + <nat:6> $ after set of commands has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:H> = <var:B> \} \\ <var:q0> := <nat:6> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \} \\ <var:q1> := <nat:5> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \} \\ <var:q1> := <var:q1> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:B> \} \\ <var:q4> := <nat:8> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:B> \land <var:q4> = <nat:8> \} \\ <var:q4> := <var:q4> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:B> \land <var:q4> = <nat:8> \cdot <var:B> \} \\ <var:q4> := <var:q4> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:B> \land <var:q4> = <nat:8> \cdot <var:B> ^ <nat:2> \} \\ <var:q4> := <var:q4> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:B> \land <var:q4> = <nat:8> \cdot <var:B> ^ <nat:3> \} \\ <var:q4> := <var:q4> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:B> \land <var:q4> = <nat:8> \cdot <var:B> ^ <nat:4> \} \\ <var:E> := <var:q4> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:q1> = <nat:5> \cdot <var:B> \land <var:E> = <nat:8> \cdot <var:B> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:q1> ; \\ \{ <var:H> = <var:B> \land <var:q0> = <nat:6> \land <var:E> = <nat:8> \cdot <var:B> ^ <nat:4> + <nat:5> \cdot <var:B> \} \\ <var:E> := <var:E> + <var:q0> \\ \{ <var:H> = <var:B> \land <var:E> = <nat:8> \cdot <var:B> ^ <nat:4> + <nat:5> \cdot <var:B> + <nat:6> \} \end{eqnarray} Given the preceding argument , our segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q4> : string := " <var:q4> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:H> = <var:B> }} <var:q0> := <nat:6> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:H> ; <var:q4> := <nat:8> ; <var:q4> := <var:q4> * <var:H> ; <var:q4> := <var:q4> * <var:H> ; <var:q4> := <var:q4> * <var:H> ; <var:q4> := <var:q4> * <var:H> ; <var:E> := <var:q4> ; <var:E> := <var:E> + <var:q1> ; <var:E> := <var:E> + <var:q0> {{ <var:E> = <nat:8> * <var:B> ^ <nat:4> + <nat:5> * <var:B> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:B> /\ <var:q4> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:B> /\ <var:q4> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:B> /\ <var:q4> = <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:B> /\ <var:q4> = <nat:8> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:B> /\ <var:q4> = <nat:8> * <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:5> * <var:B> /\ <var:E> = <nat:8> * <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:q0> = <nat:6> /\ <var:E> = <nat:8> * <var:B> ^ <nat:4> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:E> = <nat:8> * <var:B> ^ <nat:4> + <nat:5> * <var:B> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 