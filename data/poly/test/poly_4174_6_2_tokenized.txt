\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L> := <nat:3> ; <var:L> := <nat:2> + <var:L> * <var:w> ; <var:L> := <nat:4> + <var:L> * <var:w> ; <var:L> := <nat:1> + <var:L> * <var:w> ; <var:L> := <nat:4> + <var:L> * <var:w> ; <var:L> := <nat:3> + <var:L> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Assuming , for any $ <var:K> $ , that $ <var:w> = <var:K> $ before running this series of instructions then $ <var:L> = <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:3> $ when list of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is done by usual Hoare reasoning . Going forward , we have \begin{verbatim} { <var:w> = <var:K> } <var:L> := <nat:3> { <var:w> = <var:K> \land <var:L> = <nat:3> } { <var:w> = <var:K> \land <var:L> = <nat:3> } <var:L> := <nat:2> + <var:L> * <var:w> { <var:w> = <var:K> \land <var:L> = <nat:3> \cdot <var:K> + <nat:2> } \end{verbatim} This is guaranteed by the variable update inference rule given in standard Hoare reasoning . Taking another step toward the following command in the set of instructions , we see \begin{verbatim} { <var:w> = <var:K> } <var:L> := <nat:3> { <var:w> = <var:K> \land <var:L> = <nat:3> } \end{verbatim} This is given using the variable assignmet rule defined in Hoare techniques . Advancing , we have \begin{verbatim} { <var:w> = <var:K> } <var:L> := <nat:3> { <var:w> = <var:K> \land <var:L> = <nat:3> } \end{verbatim} Taking a look at the subsequent lines of codein the code segment , we have \begin{verbatim} { <var:w> = <var:K> } <var:L> := <nat:3> { <var:w> = <var:K> \land <var:L> = <nat:3> } { <var:w> = <var:K> \land <var:L> = <nat:3> } <var:L> := <nat:2> + <var:L> * <var:w> { <var:w> = <var:K> \land <var:L> = <nat:3> \cdot <var:K> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:3> ; <var:L> := <nat:2> + <var:L> * <var:w> ; <var:L> := <nat:4> + <var:L> * <var:w> ; <var:L> := <nat:1> + <var:L> * <var:w> ; <var:L> := <nat:4> + <var:L> * <var:w> ; <var:L> := <nat:3> + <var:L> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:w> = <var:K> }} <def:poly> {{ <var:L> = <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:L> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:L> = <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:L> = <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:L> = <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:L> = <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:L> = <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 