\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:n> ; <var:d2> := <var:d1> * <var:n> ; <var:d3> := <var:d2> * <var:n> ; <var:d4> := <var:d3> * <var:n> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:6> ; <var:d4> := <var:d4> * <nat:1> ; <var:P> := <var:d4> <var:P> := <var:P> + <var:d1> <var:P> := <var:P> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume ( taking whole numbers $ <var:I> $ ) that we have $ <var:n> = <var:I> $ ahead of executing the list of instructions , it follows that we have $ <var:P> = <nat:1> \cdot <var:I> ^ <nat:4> + <nat:6> \cdot <var:I> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands can be seen using typical Hoare reasoning . Moving forward to the proceeding lines of codefound in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:I> \} & <var:d1> := <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \} \\ \{ <var:n> = <var:I> \land <var:d1> = <var:I> \} & <var:d2> := <var:d1> * <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \} \\ \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \} & <var:d3> := <var:d2> * <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d3> = <var:I> ^ <nat:3> \} \\ \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d3> = <var:I> ^ <nat:3> \} & <var:d4> := <var:d3> * <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d3> = <var:I> ^ <nat:3> \land <var:d4> = <var:I> ^ <nat:4> \} \\ \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d3> = <var:I> ^ <nat:3> \land <var:d4> = <var:I> ^ <nat:4> \} & <var:d0> := <nat:8> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d3> = <var:I> ^ <nat:3> \land <var:d4> = <var:I> ^ <nat:4> \land <var:d0> = <nat:8> \} \end{tabular} Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:I> \} & <var:d1> := <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \} \\ \{ <var:n> = <var:I> \land <var:d1> = <var:I> \} & <var:d2> := <var:d1> * <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \} \\ \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \} & <var:d3> := <var:d2> * <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d3> = <var:I> ^ <nat:3> \} \\ \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d3> = <var:I> ^ <nat:3> \} & <var:d4> := <var:d3> * <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d3> = <var:I> ^ <nat:3> \land <var:d4> = <var:I> ^ <nat:4> \} \end{tabular} Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:I> \} & <var:d1> := <var:n> & \{ <var:n> = <var:I> \land <var:d1> = <var:I> \} \end{tabular} This is known to be sound using the assignment scheme of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Definition <def:poly> := <var:d1> := <var:n> ; <var:d2> := <var:d1> * <var:n> ; <var:d3> := <var:d2> * <var:n> ; <var:d4> := <var:d3> * <var:n> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:6> ; <var:d4> := <var:d4> * <nat:1> ; <var:P> := <var:d4> <var:P> := <var:P> + <var:d1> <var:P> := <var:P> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:n> = <var:I> }} <def:poly> {{ <var:P> = <nat:1> * <var:I> ^ <nat:4> + <nat:6> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d1> = <var:I> /\ <var:d2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d1> = <var:I> /\ <var:d2> = <var:I> ^ <nat:2> /\ <var:d3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d1> = <var:I> /\ <var:d2> = <var:I> ^ <nat:2> /\ <var:d3> = <var:I> ^ <nat:3> /\ <var:d4> = <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d1> = <var:I> /\ <var:d2> = <var:I> ^ <nat:2> /\ <var:d3> = <var:I> ^ <nat:3> /\ <var:d4> = <var:I> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d1> = <nat:6> * <var:I> /\ <var:d2> = <var:I> ^ <nat:2> /\ <var:d3> = <var:I> ^ <nat:3> /\ <var:d4> = <var:I> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d1> = <nat:6> * <var:I> /\ <var:d2> = <var:I> ^ <nat:2> /\ <var:d3> = <var:I> ^ <nat:3> /\ <var:d4> = <nat:1> * <var:I> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d1> = <nat:6> * <var:I> /\ <var:d2> = <var:I> ^ <nat:2> /\ <var:d3> = <var:I> ^ <nat:3> /\ <var:d0> = <nat:8> /\ <var:P> = <nat:1> * <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:d0> = <nat:8> /\ <var:P> = <nat:1> * <var:I> ^ <nat:4> + <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:P> = <nat:1> * <var:I> ^ <nat:4> + <nat:6> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 