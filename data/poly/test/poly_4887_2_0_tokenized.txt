\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:9> ; <var:X> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:K> = <var:M> $ prior to the evaluation of the code segment , it must be that $ <var:X> = <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our series of commands is shown using usual Hoare logic . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:K> = <var:M> \} & <var:d0> := <nat:9> & \{ <var:K> = <var:M> \land <var:d0> = <nat:9> \} \\ \{ <var:K> = <var:M> \land <var:d0> = <nat:9> \} & <var:X> := <var:d0& \{ <var:K> = <var:M> \land <var:X> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:9> ; <var:X> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:K> = <var:M> }} <def:poly> {{ <var:X> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:X> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 