\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:9> ; <var:Z> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> in \emph{Imp} . Allow that $ <var:f> = <var:x> $ prior to running our series of commands it holds that $ <var:Z> = <nat:9> $ when series of commands is done . \end{theorem} \begin{proof} Using typical Hoare logic results in : \begin{eqnarray} \{ <var:f> = <var:x> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:f> = <var:x> \land <var:E0> = <nat:9> \} \\ <var:Z> := <var:E0> \\ \{ <var:f> = <var:x> \land <var:Z> = <nat:9> \} \end{eqnarray} Considering the preceding argument , this series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:9> ; <var:Z> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:f> = <var:x> }} <def:poly> {{ <var:Z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:Z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 