\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:v> ; <var:Z> := <var:Y1> ; <var:Z> := <var:Z> + <var:Y0> \end{verbatim} Allow $ <var:v> = <var:m> $ prior to executing this series of instructions it holds that we have $ <var:Z> = <nat:1> * <var:m> + <nat:7> $ . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:v> = <var:m> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:v> = <var:m> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <nat:1> ; \\ \{ <var:v> = <var:m> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \} \\ <var:Y1> := <var:Y1> * <var:v> ; \\ \{ <var:v> = <var:m> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:m> \} \\ <var:Z> := <var:Y1> ; \\ \{ <var:v> = <var:m> \land <var:Y0> = <nat:7> \land <var:Z> = <nat:1> \cdot <var:m> \} \\ <var:Z> := <var:Z> + <var:Y0> \\ \{ <var:v> = <var:m> \land <var:Z> = <nat:1> \cdot <var:m> + <nat:7> \} \end{eqnarray} Thusly , this series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:v> = <var:m> }} <var:Y0> := <nat:7> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:v> ; <var:Z> := <var:Y1> ; <var:Z> := <var:Z> + <var:Y0> {{ <var:Z> = <nat:1> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:Y0> = <nat:7> /\ <var:Z> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:Z> = <nat:1> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 