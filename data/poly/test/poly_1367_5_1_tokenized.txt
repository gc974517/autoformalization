\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:X> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:4> ; <var:D> := <var:M1> <var:D> := <var:D> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> . Allow that we have $ <var:X> = <var:f> $ before evaluating our list of instructions it follows that we see $ <var:D> = <nat:4> * <var:f> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning returns : \begin{eqnarray} \{ <var:X> = <var:f> \} \\ <var:M1> := <var:X> ; \\ \{ <var:X> = <var:f> \land <var:M1> = <var:f> \} \\ <var:M0> := <nat:6> ; \\ \{ <var:X> = <var:f> \land <var:M1> = <var:f> \land <var:M0> = <nat:6> \} \\ <var:M1> := <var:M1> * <nat:4> ; \\ \{ <var:X> = <var:f> \land <var:M1> = <nat:4> * <var:f> \land <var:M0> = <nat:6> \} \\ <var:D> := <var:M1> \\ \{ <var:X> = <var:f> \land <var:M0> = <nat:6> \land <var:D> = <nat:4> * <var:f> \} \\ <var:D> := <var:D> + <var:M0> \\ \{ <var:X> = <var:f> \land <var:D> = <nat:4> * <var:f> + <nat:6> \} \end{eqnarray} Thusly , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:X> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:4> ; <var:D> := <var:M1> <var:D> := <var:D> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:X> = <var:f> }} <def:poly> {{ <var:D> = <nat:4> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:M1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:M1> = <var:f> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:M1> = <nat:4> * <var:f> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:M0> = <nat:6> /\ <var:D> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:D> = <nat:4> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 