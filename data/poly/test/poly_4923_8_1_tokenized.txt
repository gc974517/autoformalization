\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:T> ; <var:Q2> := <var:Q1> * <var:T> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:e> := <var:Q2> <var:e> := <var:e> + <var:Q1> <var:e> := <var:e> + <var:Q0> \end{verbatim} Allowing ( given all positive coefficients $ <var:d> $ ) $ <var:T> = <var:d> $ before the evaluation of this set of commands it follows that $ <var:e> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> + <nat:7> $ after code segment is done executing . \end{theorem} \begin{proof} The way to prove correctness for the code is given using standard Hoare reasoning . Paying attention to the subsequent lines of codecontained in the set of commands , we see \begin{verbatim} { <var:T> = <var:d> } <var:Q1> := <var:T> { <var:T> = <var:d> \land <var:Q1> = <var:d> } { <var:T> = <var:d> \land <var:Q1> = <var:d> } <var:Q2> := <var:Q1> * <var:T> { <var:T> = <var:d> \land <var:Q1> = <var:d> \land <var:Q2> = <var:d> ^ <nat:2> } { <var:T> = <var:d> \land <var:Q1> = <var:d> \land <var:Q2> = <var:d> ^ <nat:2> } <var:Q0> := <nat:7> { <var:T> = <var:d> \land <var:Q1> = <var:d> \land <var:Q2> = <var:d> ^ <nat:2> \land <var:Q0> = <nat:7> } { <var:T> = <var:d> \land <var:Q1> = <var:d> \land <var:Q2> = <var:d> ^ <nat:2> \land <var:Q0> = <nat:7> } <var:Q1> := <var:Q1> * <nat:6> { <var:T> = <var:d> \land <var:Q1> = <nat:6> \cdot <var:d> \land <var:Q2> = <var:d> ^ <nat:2> \land <var:Q0> = <nat:7> } { <var:T> = <var:d> \land <var:Q1> = <nat:6> \cdot <var:d> \land <var:Q2> = <var:d> ^ <nat:2> \land <var:Q0> = <nat:7> } <var:Q2> := <var:Q2> * <nat:1> { <var:T> = <var:d> \land <var:Q1> = <nat:6> \cdot <var:d> \land <var:Q2> = <nat:1> \cdot <var:d> ^ <nat:2> \land <var:Q0> = <nat:7> } { <var:T> = <var:d> \land <var:Q1> = <nat:6> \cdot <var:d> \land <var:Q2> = <nat:1> \cdot <var:d> ^ <nat:2> \land <var:Q0> = <nat:7> } <var:e> := <var:Q2{ <var:T> = <var:d> \land <var:Q1> = <nat:6> \cdot <var:d> \land <var:Q0> = <nat:7> \land <var:e> = <nat:1> \cdot <var:d> ^ <nat:2> } { <var:T> = <var:d> \land <var:Q1> = <nat:6> \cdot <var:d> \land <var:Q0> = <nat:7> \land <var:e> = <nat:1> \cdot <var:d> ^ <nat:2> } <var:e> := <var:e> + <var:Q1{ <var:T> = <var:d> \land <var:Q0> = <nat:7> \land <var:e> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> } { <var:T> = <var:d> \land <var:Q0> = <nat:7> \land <var:e> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> } <var:e> := <var:e> + <var:Q0{ <var:T> = <var:d> \land <var:e> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> + <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:T> = <var:d> }} <var:Q1> := <var:T> ; <var:Q2> := <var:Q1> * <var:T> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:e> := <var:Q2> <var:e> := <var:e> + <var:Q1> <var:e> := <var:e> + <var:Q0> {{ <var:e> = <nat:1> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:Q1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:Q1> = <var:d> /\ <var:Q2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:Q1> = <var:d> /\ <var:Q2> = <var:d> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:Q1> = <nat:6> * <var:d> /\ <var:Q2> = <var:d> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:Q1> = <nat:6> * <var:d> /\ <var:Q2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:Q1> = <nat:6> * <var:d> /\ <var:Q0> = <nat:7> /\ <var:e> = <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:Q0> = <nat:7> /\ <var:e> = <nat:1> * <var:d> ^ <nat:2> + <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:d> /\ <var:e> = <nat:1> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 