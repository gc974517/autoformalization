\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:L> := <nat:1> ; <var:L> := <nat:2> + <var:L> * <var:v> ; <var:L> := <nat:2> + <var:L> * <var:v> ; <var:L> := <nat:1> + <var:L> * <var:v> ; <var:L> := <nat:2> + <var:L> * <var:v> ; <var:L> := <nat:4> + <var:L> * <var:v> ; <var:L> := <var:L> * <var:v> ; <var:L> := <nat:4> + <var:L> * <var:v> ; <var:L> := <nat:1> + <var:L> * <var:v> ; <var:L> := <nat:2> + <var:L> * <var:v> ; <var:L> := <nat:1> + <var:L> * <var:v> \end{verbatim} Given that we have $ <var:v> = <var:c> $ before executing our series of commands then we have $ <var:L> = <nat:1> \cdot <var:c> ^ <nat:10> + <nat:2> \cdot <var:c> ^ <nat:9> + <nat:2> \cdot <var:c> ^ <nat:8> + <nat:1> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:v> = <var:c> \} \\ <var:L> := <nat:1> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> \} \\ <var:L> := <nat:2> + <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> + <nat:2> \} \\ <var:L> := <nat:2> + <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:2> \} \\ <var:L> := <nat:1> + <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> \} \\ <var:L> := <nat:2> + <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> \} \\ <var:L> := <nat:4> + <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> \} \\ <var:L> := <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + \} \\ <var:L> := <nat:4> + <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> \} \\ <var:L> := <nat:1> + <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> + <nat:1> \} \\ <var:L> := <nat:2> + <var:L> * <var:v> ; \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> \} \\ <var:L> := <nat:1> + <var:L> * <var:v> \\ \{ <var:v> = <var:c> \land <var:L> = <nat:1> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> \} \end{eqnarray} Hence , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:v> = <var:c> }} <var:L> := <nat:1> ; <var:L> := <nat:2> + <var:L> * <var:v> ; <var:L> := <nat:2> + <var:L> * <var:v> ; <var:L> := <nat:1> + <var:L> * <var:v> ; <var:L> := <nat:2> + <var:L> * <var:v> ; <var:L> := <nat:4> + <var:L> * <var:v> ; <var:L> := <var:L> * <var:v> ; <var:L> := <nat:4> + <var:L> * <var:v> ; <var:L> := <nat:1> + <var:L> * <var:v> ; <var:L> := <nat:2> + <var:L> * <var:v> ; <var:L> := <nat:1> + <var:L> * <var:v> {{ <var:L> = <nat:1> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:c> /\ <var:L> = <nat:1> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 