\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:3> ; <var:d2> := <nat:7> ; <var:d2> := <var:d2> * <var:P> ; <var:d2> := <var:d2> * <var:P> ; <var:d3> := <nat:8> ; <var:d3> := <var:d3> * <var:P> ; <var:d3> := <var:d3> * <var:P> ; <var:d3> := <var:d3> * <var:P> ; <var:S> := <var:d3> ; <var:S> := <var:S> + <var:d2> ; <var:S> := <var:S> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Given that we have $ <var:P> = <var:J> $ ahead of interpreting the program , it must be that we see $ <var:S> = <nat:8> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:3> $ when code has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be demonstrated using usual Hoare techniques . Jumping to the proceeding bits of codefound in the list of commands , we see \begin{verbatim} { <var:P> = <var:J> } <var:d0> := <nat:3> { <var:P> = <var:J> \land <var:d0> = <nat:3> } { <var:P> = <var:J> \land <var:d0> = <nat:3> } <var:d2> := <nat:7> { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> } { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> } <var:d2> := <var:d2> * <var:P> { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> } { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> } <var:d2> := <var:d2> * <var:P> { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> } { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> } <var:d3> := <nat:8> { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:d3> = <nat:8> } { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:d3> = <nat:8> } <var:d3> := <var:d3> * <var:P> { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:d3> = <nat:8> \times <var:J> } { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:d3> = <nat:8> \times <var:J> } <var:d3> := <var:d3> * <var:P> { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:d3> = <nat:8> \times <var:J> ^ <nat:2> } { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:d3> = <nat:8> \times <var:J> ^ <nat:2> } <var:d3> := <var:d3> * <var:P> { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:d3> = <nat:8> \times <var:J> ^ <nat:3> } \end{verbatim} This is shown through the variable assignmet scheme defined by Hoare reasoning . Observing the proceeding statement in the set of instructions , we have \begin{verbatim} { <var:P> = <var:J> } <var:d0> := <nat:3> { <var:P> = <var:J> \land <var:d0> = <nat:3> } \end{verbatim} This is deduced through the variable update scheme from Hoare techniques . Further , \begin{verbatim} { <var:P> = <var:J> } <var:d0> := <nat:3> { <var:P> = <var:J> \land <var:d0> = <nat:3> } { <var:P> = <var:J> \land <var:d0> = <nat:3> } <var:d2> := <nat:7> { <var:P> = <var:J> \land <var:d0> = <nat:3> \land <var:d2> = <nat:7> } \end{verbatim} This is given through the variable assignmet scheme given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d0> := <nat:3> ; <var:d2> := <nat:7> ; <var:d2> := <var:d2> * <var:P> ; <var:d2> := <var:d2> * <var:P> ; <var:d3> := <nat:8> ; <var:d3> := <var:d3> * <var:P> ; <var:d3> := <var:d3> * <var:P> ; <var:d3> := <var:d3> * <var:P> ; <var:S> := <var:d3> ; <var:S> := <var:S> + <var:d2> ; <var:S> := <var:S> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:P> = <var:J> }} <def:poly> {{ <var:S> = <nat:8> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:d2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:d2> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:d2> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:d2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:d3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:d2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:d2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:d2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:d2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:S> = <nat:8> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:d0> = <nat:3> /\ <var:S> = <nat:8> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:J> /\ <var:S> = <nat:8> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 