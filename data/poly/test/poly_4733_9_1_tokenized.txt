\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:U> ; <var:m2> := <var:m1> * <var:U> ; <var:m3> := <var:m2> * <var:U> ; <var:m0> := <nat:2> ; <var:m2> := <var:m2> * <nat:1> ; <var:m3> := <var:m3> * <nat:6> ; <var:z> := <var:m3> <var:z> := <var:z> + <var:m2> <var:z> := <var:z> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:U> = <var:K> $ ahead of running the program it follows that we see $ <var:z> = <nat:6> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> $ after segment of code has terminated . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions can be done through usual Hoare reasoning . Advancing , \begin{verbatim} { <var:U> = <var:K> } <var:m1> := <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> } \end{verbatim} This is guaranteed using the variable assignmet inference rule from usual Hoare logic . Further , we see \begin{verbatim} { <var:U> = <var:K> } <var:m1> := <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> } \end{verbatim} This is guaranteed through the environment update inference rule from typical Hoare reasoning . Following , \begin{verbatim} { <var:U> = <var:K> } <var:m1> := <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> } { <var:U> = <var:K> \land <var:m1> = <var:K> } <var:m2> := <var:m1> * <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> } { <var:U> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> } <var:m3> := <var:m2> * <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> \land <var:m3> = <var:K> ^ <nat:3> } \end{verbatim} Stepping forward , we have \begin{verbatim} { <var:U> = <var:K> } <var:m1> := <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> } { <var:U> = <var:K> \land <var:m1> = <var:K> } <var:m2> := <var:m1> * <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> \land <var:m2> = <var:K> ^ <nat:2> } \end{verbatim} This is rigorously given with the assignment scheme defined by usual Hoare techniques . Taking a look at the upcoming step in our set of instructions , we have \begin{verbatim} { <var:U> = <var:K> } <var:m1> := <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> } \end{verbatim} This is shown by the variable binding scheme defined by standard Hoare logic . Moving on to the upcoming command seen in our list of commands , we see \begin{verbatim} { <var:U> = <var:K> } <var:m1> := <var:U> { <var:U> = <var:K> \land <var:m1> = <var:K> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:U> ; <var:m2> := <var:m1> * <var:U> ; <var:m3> := <var:m2> * <var:U> ; <var:m0> := <nat:2> ; <var:m2> := <var:m2> * <nat:1> ; <var:m3> := <var:m3> * <nat:6> ; <var:z> := <var:m3> <var:z> := <var:z> + <var:m2> <var:z> := <var:z> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:U> = <var:K> }} <def:poly> {{ <var:z> = <nat:6> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <var:K> ^ <nat:2> /\ <var:m3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <var:K> ^ <nat:2> /\ <var:m3> = <var:K> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:m3> = <var:K> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:m3> = <nat:6> * <var:K> ^ <nat:3> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m1> = <var:K> /\ <var:m2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:m0> = <nat:2> /\ <var:z> = <nat:6> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:m1> = <var:K> /\ <var:m0> = <nat:2> /\ <var:z> = <nat:6> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:z> = <nat:6> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 