\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:1> ; <var:Q> := <var:w0> \end{verbatim} Allowing it to be that $ <var:e> = <var:b> $ ahead of evaluating this segment of code , it holds that $ <var:Q> = <nat:1> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands can be done using standard Hoare logic . Stepping forward , the binding statement yielding $ <nat:1> $ to $ <var:w0>$ . This redefines $ \{ <var:e> = <var:b> \} $ to the postcondition $ \{ <var:e> = <var:b> \land <var:w0> = <nat:1> \} $ . Following , we see the binding code letting $ <var:w0$ into $ <var:Q>$ . This command redefines the precondition $ \{ <var:e> = <var:b> \land <var:w0> = <nat:1> \} $ as $ \{ <var:e> = <var:b> \land <var:Q> = <nat:1> \} $ . This is ensured with the assignment scheme given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:e> = <var:b> }} <var:w0> := <nat:1> ; <var:Q> := <var:w0> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 