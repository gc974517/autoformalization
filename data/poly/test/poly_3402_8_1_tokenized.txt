\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:o1> := <var:I> ; <var:o2> := <var:o1> * <var:I> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:3> ; <var:o2> := <var:o2> * <nat:9> ; <var:Z> := <var:o2> <var:Z> := <var:Z> + <var:o1> <var:Z> := <var:Z> + <var:o0> \end{verbatim} Assume that $ <var:I> = <var:n> $ prior to running the set of commands it holds that we see $ <var:Z> = <nat:9> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:8> $ after set of instructions is done . \end{theorem} \begin{proof} Using usual Hoare logic gives : \begin{eqnarray} \{ <var:I> = <var:n> \} \\ <var:o1> := <var:I> ; \\ \{ <var:I> = <var:n> \land <var:o1> = <var:n> \} \\ <var:o2> := <var:o1> * <var:I> ; \\ \{ <var:I> = <var:n> \land <var:o1> = <var:n> \land <var:o2> = <var:n> ^ <nat:2> \} \\ <var:o0> := <nat:8> ; \\ \{ <var:I> = <var:n> \land <var:o1> = <var:n> \land <var:o2> = <var:n> ^ <nat:2> \land <var:o0> = <nat:8> \} \\ <var:o1> := <var:o1> * <nat:3> ; \\ \{ <var:I> = <var:n> \land <var:o1> = <nat:3> * <var:n> \land <var:o2> = <var:n> ^ <nat:2> \land <var:o0> = <nat:8> \} \\ <var:o2> := <var:o2> * <nat:9> ; \\ \{ <var:I> = <var:n> \land <var:o1> = <nat:3> * <var:n> \land <var:o2> = <nat:9> * <var:n> ^ <nat:2> \land <var:o0> = <nat:8> \} \\ <var:Z> := <var:o2> \\ \{ <var:I> = <var:n> \land <var:o1> = <nat:3> * <var:n> \land <var:o0> = <nat:8> \land <var:Z> = <nat:9> * <var:n> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:o1> \\ \{ <var:I> = <var:n> \land <var:o0> = <nat:8> \land <var:Z> = <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> \} \\ <var:Z> := <var:Z> + <var:o0> \\ \{ <var:I> = <var:n> \land <var:Z> = <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:8> \} \end{eqnarray} Thus , our program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:I> = <var:n> }} <var:o1> := <var:I> ; <var:o2> := <var:o1> * <var:I> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:3> ; <var:o2> := <var:o2> * <nat:9> ; <var:Z> := <var:o2> <var:Z> := <var:Z> + <var:o1> <var:Z> := <var:Z> + <var:o0> {{ <var:Z> = <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:o1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:o1> = <var:n> /\ <var:o2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:o1> = <var:n> /\ <var:o2> = <var:n> ^ <nat:2> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:o1> = <nat:3> * <var:n> /\ <var:o2> = <var:n> ^ <nat:2> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:o1> = <nat:3> * <var:n> /\ <var:o2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:o1> = <nat:3> * <var:n> /\ <var:o0> = <nat:8> /\ <var:Z> = <nat:9> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:o0> = <nat:8> /\ <var:Z> = <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:Z> = <nat:9> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 