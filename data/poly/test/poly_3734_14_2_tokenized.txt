\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as follows \begin{verbatim} <var:C> := <nat:4> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:2> + <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:4> + <var:C> * <var:y> ; <var:C> := <nat:4> + <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:2> + <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:3> + <var:C> * <var:y> ; <var:C> := <nat:3> + <var:C> * <var:y> ; <var:C> := <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> \end{verbatim} Allow $ <var:y> = <var:z> $ ahead of the execution of this code segment it follows that $ <var:C> = <nat:4> * <var:z> ^ <nat:13> + <nat:1> * <var:z> ^ <nat:12> + <nat:2> * <var:z> ^ <nat:11> + <nat:1> * <var:z> ^ <nat:10> + <nat:4> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this code segment can be done using standard Hoare techniques . Jumping to the following lines of codeseen in our set of instructions , we have \begin{eqnarray} \{ <var:y> = <var:z> \} \, <var:C> := <nat:4> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \} \, <var:C> := <nat:1> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> + <nat:1> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> + <nat:1> \} \, <var:C> := <nat:2> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> \} \end{eqnarray} This is sound using the binding rule given in standard Hoare techniques . Going to the next step , we have \begin{eqnarray} \{ <var:y> = <var:z> \} \, <var:C> := <nat:4> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \} \, <var:C> := <nat:1> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> + <nat:1> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> + <nat:1> \} \, <var:C> := <nat:2> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> \} \, <var:C> := <nat:1> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:1> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:1> \} \, <var:C> := <nat:4> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:4> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:4> \} \, <var:C> := <nat:4> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:5> + <nat:1> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:4> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:5> + <nat:1> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:4> \} \, <var:C> := <nat:1> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:6> + <nat:1> \cdot <var:z> ^ <nat:5> + <nat:2> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:1> \} \end{eqnarray} This is rigorously given with the assignment rule defined in typical Hoare logic . Honing in on the upcoming lines of codefound in the set of instructions , we have \begin{eqnarray} \{ <var:y> = <var:z> \} \, <var:C> := <nat:4> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \} \, <var:C> := <nat:1> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> + <nat:1> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> + <nat:1> \} \, <var:C> := <nat:2> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> \} \\ \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> \} \, <var:C> := <nat:1> + <var:C> * <var:y> \, \{ <var:y> = <var:z> \land <var:C> = <nat:4> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:y> = <var:z> }} <var:C> := <nat:4> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:2> + <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:4> + <var:C> * <var:y> ; <var:C> := <nat:4> + <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:2> + <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> ; <var:C> := <nat:3> + <var:C> * <var:y> ; <var:C> := <nat:3> + <var:C> * <var:y> ; <var:C> := <var:C> * <var:y> ; <var:C> := <nat:1> + <var:C> * <var:y> {{ <var:C> = <nat:4> * <var:z> ^ <nat:13> + <nat:1> * <var:z> ^ <nat:12> + <nat:2> * <var:z> ^ <nat:11> + <nat:1> * <var:z> ^ <nat:10> + <nat:4> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:11> + <nat:1> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:12> + <nat:1> * <var:z> ^ <nat:11> + <nat:2> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:C> = <nat:4> * <var:z> ^ <nat:13> + <nat:1> * <var:z> ^ <nat:12> + <nat:2> * <var:z> ^ <nat:11> + <nat:1> * <var:z> ^ <nat:10> + <nat:4> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 