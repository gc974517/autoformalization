\begin{document} \begin{theorem} We define the following list of commands : \begin{verbatim} <var:K0> := <nat:1> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:f> ; <var:K2> := <nat:8> ; <var:K2> := <var:K2> * <var:f> ; <var:K2> := <var:K2> * <var:f> ; <var:p> := <var:K2> ; <var:p> := <var:p> + <var:K1> ; <var:p> := <var:p> + <var:K0> \end{verbatim} Allow ( given every $ <var:z> \in \mathbb{N} $ ) $ <var:f> = <var:z> $ ahead of the evaluation of the code segment , then we have $ <var:p> = <nat:8> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> $ after series of instructions has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands can be demonstrated using standard Hoare techniques . Now , the environment update code giving $ <nat:1> $ to $ <var:K0>$ . This moves $ \{ <var:f> = <var:z> \} $ as $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \} $ . This is shown to be logically sound by the assignment scheme obtained from Hoare logic . Immediately after , the variable assignmet command \verb | <var:K1> := <nat:2> ; | . This moves the condition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \} $ as the postcondition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \} $ . Immediately following , the code \verb | <var:K1> := <var:K1> * <var:f> ; | . This code transfers the condition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \} $ into the postcondition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \} $ . This is shown to be logically sound with the assignment inference rule found in Hoare logic . Shifting focus toward the subsequent line of code contained in our set of commands , we see the variable assignmet command \verb | <var:K2> := <nat:8> ; | . This line advances the condition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \} $ as the condition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \land <var:K2> = <nat:8> \} $ . This is guaranteed using the assignment scheme found in typical Hoare reasoning . Moving on to the next step , the binding line yielding $ <var:K2> * <var:f> $ to $ <var:K2>$ . This takes $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \land <var:K2> = <nat:8> \} $ to the postcondition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \land <var:K2> = <nat:8> \cdot <var:z> \} $ . This is shown with the assignment rule obtained from typical Hoare reasoning . Paying attention to the following statement seen in the series of commands , we have the variable binding command yielding $ <var:K2> * <var:f> $ as $ <var:K2>$ . This redefines the precondition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \land <var:K2> = <nat:8> \cdot <var:z> \} $ toward the postcondition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \land <var:K2> = <nat:8> \cdot <var:z> ^ <nat:2> \} $ . This is given through the assignment inference rule in typical Hoare logic . Advancing to the next statement seen in our list of instructions , the command \verb | <var:p> := <var:K2> ; | . This statement redefines the precondition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \land <var:K2> = <nat:8> \cdot <var:z> ^ <nat:2> \} $ toward the condition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \land <var:p> = <nat:8> \cdot <var:z> ^ <nat:2> \} $ . Moving forward , we have the environment update code defining $ <var:p> + <var:K1> $ toward $ <var:p>$ . This takes the condition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:z> \land <var:p> = <nat:8> \cdot <var:z> ^ <nat:2> \} $ toward $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> \} $ . This is shown by the assignment inference rule given in standard Hoare techniques . Taking a look at the next statement found in our code , we have the environment update command \verb | <var:p> := <var:p> + <var:K0> | . This statement moves the condition $ \{ <var:f> = <var:z> \land <var:K0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> \} $ to the postcondition $ \{ <var:f> = <var:z> \land <var:p> = <nat:8> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <var:K0> := <nat:1> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:f> ; <var:K2> := <nat:8> ; <var:K2> := <var:K2> * <var:f> ; <var:K2> := <var:K2> * <var:f> ; <var:p> := <var:K2> ; <var:p> := <var:p> + <var:K1> ; <var:p> := <var:p> + <var:K0> {{ <var:p> = <nat:8> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:z> /\ <var:K2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:z> /\ <var:K2> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:z> /\ <var:K2> = <nat:8> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:z> /\ <var:p> = <nat:8> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:K0> = <nat:1> /\ <var:p> = <nat:8> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:p> = <nat:8> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 