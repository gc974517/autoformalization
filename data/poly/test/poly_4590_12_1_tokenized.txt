\begin{document} \begin{theorem} Consider the following set of commands as \begin{verbatim} <var:P1> := <var:C> ; <var:P2> := <var:P1> * <var:C> ; <var:P3> := <var:P2> * <var:C> ; <var:P4> := <var:P3> * <var:C> ; <var:P0> := <nat:2> ; <var:P2> := <var:P2> * <nat:8> ; <var:P3> := <var:P3> * <nat:1> ; <var:P4> := <var:P4> * <nat:3> ; <var:L> := <var:P4> <var:L> := <var:L> + <var:P3> <var:L> := <var:L> + <var:P2> <var:L> := <var:L> + <var:P0> \end{verbatim} Assuming it to hold that $ <var:C> = <var:S> $ ahead of evaluating the segment of code it holds that $ <var:L> = <nat:3> \cdot <var:S> ^ <nat:4> + <nat:1> \cdot <var:S> ^ <nat:3> + <nat:8> \cdot <var:S> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:C> = <var:S> \} \\ <var:P1> := <var:C> ; \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \} \\ <var:P2> := <var:P1> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <var:S> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <var:S> ^ <nat:2> \land <var:P3> = <var:S> ^ <nat:3> \} \\ <var:P4> := <var:P3> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <var:S> ^ <nat:2> \land <var:P3> = <var:S> ^ <nat:3> \land <var:P4> = <var:S> ^ <nat:4> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <var:S> ^ <nat:2> \land <var:P3> = <var:S> ^ <nat:3> \land <var:P4> = <var:S> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:P2> := <var:P2> * <nat:8> ; \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <nat:8> \times <var:S> ^ <nat:2> \land <var:P3> = <var:S> ^ <nat:3> \land <var:P4> = <var:S> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:P3> := <var:P3> * <nat:1> ; \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <nat:8> \times <var:S> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:S> ^ <nat:3> \land <var:P4> = <var:S> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:P4> := <var:P4> * <nat:3> ; \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <nat:8> \times <var:S> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:S> ^ <nat:3> \land <var:P4> = <nat:3> \times <var:S> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:L> := <var:P4> \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <nat:8> \times <var:S> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:S> ^ <nat:3> \land <var:P0> = <nat:2> \land <var:L> = <nat:3> \times <var:S> ^ <nat:4> \} \\ <var:L> := <var:L> + <var:P3> \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P2> = <nat:8> \times <var:S> ^ <nat:2> \land <var:P0> = <nat:2> \land <var:L> = <nat:3> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:P2> \\ \{ <var:C> = <var:S> \land <var:P1> = <var:S> \land <var:P0> = <nat:2> \land <var:L> = <nat:3> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:8> \times <var:S> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:P0> \\ \{ <var:C> = <var:S> \land <var:L> = <nat:3> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:8> \times <var:S> ^ <nat:2> + <nat:2> \} \end{eqnarray} As a result , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:C> = <var:S> }} <var:P1> := <var:C> ; <var:P2> := <var:P1> * <var:C> ; <var:P3> := <var:P2> * <var:C> ; <var:P4> := <var:P3> * <var:C> ; <var:P0> := <nat:2> ; <var:P2> := <var:P2> * <nat:8> ; <var:P3> := <var:P3> * <nat:1> ; <var:P4> := <var:P4> * <nat:3> ; <var:L> := <var:P4> <var:L> := <var:L> + <var:P3> <var:L> := <var:L> + <var:P2> <var:L> := <var:L> + <var:P0> {{ <var:L> = <nat:3> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:8> * <var:S> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <var:S> ^ <nat:2> /\ <var:P3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <var:S> ^ <nat:2> /\ <var:P3> = <var:S> ^ <nat:3> /\ <var:P4> = <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <var:S> ^ <nat:2> /\ <var:P3> = <var:S> ^ <nat:3> /\ <var:P4> = <var:S> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <nat:8> * <var:S> ^ <nat:2> /\ <var:P3> = <var:S> ^ <nat:3> /\ <var:P4> = <var:S> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <nat:8> * <var:S> ^ <nat:2> /\ <var:P3> = <nat:1> * <var:S> ^ <nat:3> /\ <var:P4> = <var:S> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <nat:8> * <var:S> ^ <nat:2> /\ <var:P3> = <nat:1> * <var:S> ^ <nat:3> /\ <var:P4> = <nat:3> * <var:S> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <nat:8> * <var:S> ^ <nat:2> /\ <var:P3> = <nat:1> * <var:S> ^ <nat:3> /\ <var:P0> = <nat:2> /\ <var:L> = <nat:3> * <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P2> = <nat:8> * <var:S> ^ <nat:2> /\ <var:P0> = <nat:2> /\ <var:L> = <nat:3> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:P1> = <var:S> /\ <var:P0> = <nat:2> /\ <var:L> = <nat:3> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:8> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:L> = <nat:3> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:8> * <var:S> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 