\begin{document} \begin{theorem} We define a segment of code as follows \begin{verbatim} <var:a> := <nat:4> ; <var:a> := <nat:3> + <var:a> * <var:o> \end{verbatim} Assuming it to be that $ <var:o> = <var:y> $ prior to interpreting this code segment it follows that we have $ <var:a> = <nat:4> \times <var:y> + <nat:3> $ after series of commands is done . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be accomplished with standard Hoare techniques . Shifting focus toward the next command in the list of commands , the variable assignmet statement giving $ <nat:4> $ as $ <var:a>$ . This takes the precondition $ \{ <var:o> = <var:y> \} $ toward the postcondition $ \{ <var:o> = <var:y> \land <var:a> = <nat:4> \} $ . Considering the subsequent bit of code contained in the series of instructions , the variable update command yielding $ <nat:3> + <var:a> * <var:o$ toward $ <var:a>$ . This advances the condition $ \{ <var:o> = <var:y> \land <var:a> = <nat:4> \} $ into the condition $ \{ <var:o> = <var:y> \land <var:a> = <nat:4> \cdot <var:y> + <nat:3> \} $ . This is given by the assignment rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:o> = <var:y> }} <var:a> := <nat:4> ; <var:a> := <nat:3> + <var:a> * <var:o> {{ <var:a> = <nat:4> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:a> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:a> = <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 