\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:N1> := <var:F> ; <var:N2> := <var:N1> * <var:F> ; <var:N0> := <nat:3> ; <var:N2> := <var:N2> * <nat:4> ; <var:Q> := <var:N2> <var:Q> := <var:Q> + <var:N0> \end{verbatim} Allowing given all positive integers $ <var:s> $ that $ <var:F> = <var:s> $ before running this set of commands , it must be that we see $ <var:Q> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> $ once series of commands has finished . \end{theorem} \begin{proof} The course of logic for the list of instructions is clear using this decorated code . \begin{eqnarray} \{ <var:F> = <var:s> \} \\ <var:N1> := <var:F> ; \\ \{ <var:F> = <var:s> \land <var:N1> = <var:s> \} \\ <var:N2> := <var:N1> * <var:F> ; \\ \{ <var:F> = <var:s> \land <var:N1> = <var:s> \land <var:N2> = <var:s> ^ <nat:2> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:F> = <var:s> \land <var:N1> = <var:s> \land <var:N2> = <var:s> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:N2> := <var:N2> * <nat:4> ; \\ \{ <var:F> = <var:s> \land <var:N1> = <var:s> \land <var:N2> = <nat:4> \times <var:s> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:Q> := <var:N2> \\ \{ <var:F> = <var:s> \land <var:N1> = <var:s> \land <var:N0> = <nat:3> \land <var:Q> = <nat:4> \times <var:s> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:N0> \\ \{ <var:F> = <var:s> \land <var:Q> = <nat:4> \times <var:s> ^ <nat:2> + <nat:3> \} \end{eqnarray} Using usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:F> = <var:s> }} <var:N1> := <var:F> ; <var:N2> := <var:N1> * <var:F> ; <var:N0> := <nat:3> ; <var:N2> := <var:N2> * <nat:4> ; <var:Q> := <var:N2> <var:Q> := <var:Q> + <var:N0> {{ <var:Q> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:N1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:N1> = <var:s> /\ <var:N2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:N1> = <var:s> /\ <var:N2> = <var:s> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:N1> = <var:s> /\ <var:N2> = <nat:4> * <var:s> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:N1> = <var:s> /\ <var:N0> = <nat:3> /\ <var:Q> = <nat:4> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:Q> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 