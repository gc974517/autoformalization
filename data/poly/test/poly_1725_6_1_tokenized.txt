\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:i> ; <var:q2> := <var:q1> * <var:i> ; <var:q0> := <nat:1> ; <var:q2> := <var:q2> * <nat:5> ; <var:N> := <var:q2> <var:N> := <var:N> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:i> = <var:V> $ ahead of executing our program , then we see $ <var:N> = <nat:5> \cdot <var:V> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this code segment is given through Hoare techniques . Moving forward to the following piece of code found in our series of commands , the assignment line \verb | <var:q1> := <var:i> ; | . This line takes $ \{ <var:i> = <var:V> \} $ as $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \} $ . Moving on to the next step , we see the variable update code giving $ <var:q1> * <var:i> $ to $ <var:q2>$ . This moves the condition $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \} $ into the condition $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \land <var:q2> = <var:V> ^ <nat:2> \} $ . This is rigorously given with the assignment law from Hoare logic . Shifting focus toward the upcoming line found in our set of commands , we see the variable assignmet code \verb | <var:q0> := <nat:1> ; | . This moves the condition $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \land <var:q2> = <var:V> ^ <nat:2> \} $ as $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \land <var:q2> = <var:V> ^ <nat:2> \land <var:q0> = <nat:1> \} $ . This is ensured by the assignment inference rule given by usual Hoare techniques . Taking another step toward the next command in the list of commands , we see the assignment code defining $ <var:q2> * <nat:5> $ into $ <var:q2>$ . This code advances the precondition $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \land <var:q2> = <var:V> ^ <nat:2> \land <var:q0> = <nat:1> \} $ toward the condition $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \land <var:q2> = <nat:5> \cdot <var:V> ^ <nat:2> \land <var:q0> = <nat:1> \} $ . Following , we see the binding line \verb | <var:N> := <var:q2> | . This code takes $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \land <var:q2> = <nat:5> \cdot <var:V> ^ <nat:2> \land <var:q0> = <nat:1> \} $ toward the condition $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \land <var:q0> = <nat:1> \land <var:N> = <nat:5> \cdot <var:V> ^ <nat:2> \} $ . This is known to be sound by the assignment inference rule in standard Hoare reasoning . Advancing on , we have the variable binding command letting $ <var:N> + <var:q0$ into $ <var:N>$ . This statement advances the condition $ \{ <var:i> = <var:V> \land <var:q1> = <var:V> \land <var:q0> = <nat:1> \land <var:N> = <nat:5> \cdot <var:V> ^ <nat:2> \} $ into the condition $ \{ <var:i> = <var:V> \land <var:N> = <nat:5> \cdot <var:V> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q1> := <var:i> ; <var:q2> := <var:q1> * <var:i> ; <var:q0> := <nat:1> ; <var:q2> := <var:q2> * <nat:5> ; <var:N> := <var:q2> <var:N> := <var:N> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:i> = <var:V> }} <def:poly> {{ <var:N> = <nat:5> * <var:V> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:q1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:q1> = <var:V> /\ <var:q2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:q1> = <var:V> /\ <var:q2> = <var:V> ^ <nat:2> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:q1> = <var:V> /\ <var:q2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:q1> = <var:V> /\ <var:q0> = <nat:1> /\ <var:N> = <nat:5> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:N> = <nat:5> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 