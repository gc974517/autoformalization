\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <nat:3> + <var:B> * <var:y> ; <var:B> := <nat:3> + <var:B> * <var:y> ; <var:B> := <nat:2> + <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <nat:4> + <var:B> * <var:y> ; <var:B> := <nat:1> + <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <nat:1> + <var:B> * <var:y> \end{verbatim} Allow it to be that $ <var:y> = <var:i> $ ahead of running the set of instructions , it follows that we have $ <var:B> = <nat:2> \times <var:i> ^ <nat:12> + <nat:3> \times <var:i> ^ <nat:9> + <nat:3> \times <var:i> ^ <nat:8> + <nat:2> \times <var:i> ^ <nat:7> + <nat:4> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:1> $ after program has exited . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code can be demonstrated with the below decorated code . \begin{eqnarray} \{ <var:y> = <var:i> \} \\ <var:B> := <nat:2> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> \} \\ <var:B> := <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> + \} \\ <var:B> := <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:2> + \} \\ <var:B> := <nat:3> + <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:3> + <nat:3> \} \\ <var:B> := <nat:3> + <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> + <nat:3> \} \\ <var:B> := <nat:2> + <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> \} \end{eqnarray} Furthering executing our segment of code returns : \begin{eqnarray} <var:B> := <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + \} \\ <var:B> := <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + \} \\ <var:B> := <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + \} \\ <var:B> := <nat:4> + <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> \} \\ <var:B> := <nat:1> + <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:10> + <nat:3> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> + <nat:1> \} \\ <var:B> := <var:B> * <var:y> ; \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:11> + <nat:3> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + \} \\ <var:B> := <nat:1> + <var:B> * <var:y> \\ \{ <var:y> = <var:i> \land <var:B> = <nat:2> * <var:i> ^ <nat:12> + <nat:3> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:y> = <var:i> }} <var:B> := <nat:2> ; <var:B> := <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <nat:3> + <var:B> * <var:y> ; <var:B> := <nat:3> + <var:B> * <var:y> ; <var:B> := <nat:2> + <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <nat:4> + <var:B> * <var:y> ; <var:B> := <nat:1> + <var:B> * <var:y> ; <var:B> := <var:B> * <var:y> ; <var:B> := <nat:1> + <var:B> * <var:y> {{ <var:B> = <nat:2> * <var:i> ^ <nat:12> + <nat:3> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:10> + <nat:3> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:11> + <nat:3> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:B> = <nat:2> * <var:i> ^ <nat:12> + <nat:3> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 