\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:2> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:N> ; <var:s2> := <var:s2> * <var:N> ; <var:s3> := <nat:3> ; <var:s3> := <var:s3> * <var:N> ; <var:s3> := <var:s3> * <var:N> ; <var:s3> := <var:s3> * <var:N> ; <var:H> := <var:s3> ; <var:H> := <var:H> + <var:s2> ; <var:H> := <var:H> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Assuming ( for some positive numbers $ <var:f> $ ) that $ <var:N> = <var:f> $ ahead of the execution of this series of commands , it holds that we see $ <var:H> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> $ once set of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be demonstrated with the following decorated series of instructions . \begin{eqnarray} \{ <var:N> = <var:f> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \} \\ <var:s2> := <nat:3> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:s2> = <nat:3> \} \\ <var:s2> := <var:s2> * <var:N> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:s2> = <nat:3> * <var:f> \} \\ <var:s2> := <var:s2> * <var:N> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:s2> = <nat:3> * <var:f> ^ <nat:2> \} \\ <var:s3> := <nat:3> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:s2> = <nat:3> * <var:f> ^ <nat:2> \land <var:s3> = <nat:3> \} \\ <var:s3> := <var:s3> * <var:N> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:s2> = <nat:3> * <var:f> ^ <nat:2> \land <var:s3> = <nat:3> * <var:f> \} \\ <var:s3> := <var:s3> * <var:N> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:s2> = <nat:3> * <var:f> ^ <nat:2> \land <var:s3> = <nat:3> * <var:f> ^ <nat:2> \} \\ <var:s3> := <var:s3> * <var:N> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:s2> = <nat:3> * <var:f> ^ <nat:2> \land <var:s3> = <nat:3> * <var:f> ^ <nat:3> \} \\ <var:H> := <var:s3> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:s2> = <nat:3> * <var:f> ^ <nat:2> \land <var:H> = <nat:3> * <var:f> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:s2> ; \\ \{ <var:N> = <var:f> \land <var:s0> = <nat:2> \land <var:H> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:s0> \\ \{ <var:N> = <var:f> \land <var:H> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s0> := <nat:2> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:N> ; <var:s2> := <var:s2> * <var:N> ; <var:s3> := <nat:3> ; <var:s3> := <var:s3> * <var:N> ; <var:s3> := <var:s3> * <var:N> ; <var:s3> := <var:s3> * <var:N> ; <var:H> := <var:s3> ; <var:H> := <var:H> + <var:s2> ; <var:H> := <var:H> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:N> = <var:f> }} <def:poly> {{ <var:H> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:s2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:s2> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:s2> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:s2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:s3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:s2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:s2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:s2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:s2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:H> = <nat:3> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:s0> = <nat:2> /\ <var:H> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 