\begin{document} \begin{theorem} Consider a segment of code such that \begin{verbatim} <var:T1> := <var:t> ; <var:T2> := <var:T1> * <var:t> ; <var:T0> := <nat:6> ; <var:T2> := <var:T2> * <nat:1> ; <var:o> := <var:T2> <var:o> := <var:o> + <var:T0> \end{verbatim} Assuming that we have $ <var:t> = <var:y> $ prior to running this code segment then we have $ <var:o> = <nat:1> \times <var:y> ^ <nat:2> + <nat:6> $ once list of instructions finishes . \end{theorem} \begin{proof} The argument for our series of commands can be seen through standard Hoare reasoning . Looking at the upcoming statement in the list of commands , we have \[ \begin{tabular} {rcl} \{ <var:t> = <var:y> \} & <var:T1> := <var:t> & \{ <var:t> = <var:y> \land <var:T1> = <var:y> \} \end{tabular} This is ensured using the variable update inference rule defined by Hoare reasoning . Paying attention to the following commands contained in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:t> = <var:y> \} & <var:T1> := <var:t> & \{ <var:t> = <var:y> \land <var:T1> = <var:y> \} \\ \{ <var:t> = <var:y> \land <var:T1> = <var:y> \} & <var:T2> := <var:T1> * <var:t> & \{ <var:t> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <var:y> ^ <nat:2> \} \\ \{ <var:t> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <var:y> ^ <nat:2> \} & <var:T0> := <nat:6> & \{ <var:t> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <var:y> ^ <nat:2> \land <var:T0> = <nat:6> \} \\ \{ <var:t> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <var:y> ^ <nat:2> \land <var:T0> = <nat:6> \} & <var:T2> := <var:T2> * <nat:1> & \{ <var:t> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <nat:1> * <var:y> ^ <nat:2> \land <var:T0> = <nat:6> \} \\ \{ <var:t> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <nat:1> * <var:y> ^ <nat:2> \land <var:T0> = <nat:6> \} & <var:o> := <var:T2& \{ <var:t> = <var:y> \land <var:T1> = <var:y> \land <var:T0> = <nat:6> \land <var:o> = <nat:1> * <var:y> ^ <nat:2> \} \end{tabular} This is given using the variable binding inference rule of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:t> = <var:y> }} <var:T1> := <var:t> ; <var:T2> := <var:T1> * <var:t> ; <var:T0> := <nat:6> ; <var:T2> := <var:T2> * <nat:1> ; <var:o> := <var:T2> <var:o> := <var:o> + <var:T0> {{ <var:o> = <nat:1> * <var:y> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:y> /\ <var:T1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:y> /\ <var:T1> = <var:y> /\ <var:T2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:y> /\ <var:T1> = <var:y> /\ <var:T2> = <var:y> ^ <nat:2> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:y> /\ <var:T1> = <var:y> /\ <var:T2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:y> /\ <var:T1> = <var:y> /\ <var:T0> = <nat:6> /\ <var:o> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:y> /\ <var:o> = <nat:1> * <var:y> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 