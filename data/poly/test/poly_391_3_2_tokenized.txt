\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:b> := <nat:4> ; <var:b> := <nat:2> + <var:b> * <var:G> ; <var:b> := <nat:2> + <var:b> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:G> = <var:Q> $ ahead of interpreting this series of commands it holds that $ <var:b> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is shown by Hoare techniques . Taking another step toward the following line found in the series of instructions , we have the variable assignmet command letting $ <nat:4> $ to $ <var:b>$ . This command advances $ \{ <var:G> = <var:Q> \} $ into $ \{ <var:G> = <var:Q> \land <var:b> = <nat:4> \} $ . Moving on , we have the variable binding line giving $ <nat:2> + <var:b> * <var:G> $ as $ <var:b>$ . This command forwards $ \{ <var:G> = <var:Q> \land <var:b> = <nat:4> \} $ toward the postcondition $ \{ <var:G> = <var:Q> \land <var:b> = <nat:4> \times <var:Q> + <nat:2> \} $ . Now , the command \verb | <var:b> := <nat:2> + <var:b> * <var:G> | . This line advances $ \{ <var:G> = <var:Q> \land <var:b> = <nat:4> \times <var:Q> + <nat:2> \} $ as the postcondition $ \{ <var:G> = <var:Q> \land <var:b> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:2> \} $ . This is shown to be logically sound using the assignment scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:4> ; <var:b> := <nat:2> + <var:b> * <var:G> ; <var:b> := <nat:2> + <var:b> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:G> = <var:Q> }} <def:poly> {{ <var:b> = <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:Q> /\ <var:b> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Q> /\ <var:b> = <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Q> /\ <var:b> = <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 