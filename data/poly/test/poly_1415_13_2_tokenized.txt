\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:3> ; <var:B> := <nat:4> + <var:B> * <var:V> ; <var:B> := <nat:2> + <var:B> * <var:V> ; <var:B> := <nat:4> + <var:B> * <var:V> ; <var:B> := <nat:2> + <var:B> * <var:V> ; <var:B> := <nat:3> + <var:B> * <var:V> ; <var:B> := <nat:1> + <var:B> * <var:V> ; <var:B> := <nat:3> + <var:B> * <var:V> ; <var:B> := <nat:2> + <var:B> * <var:V> ; <var:B> := <nat:3> + <var:B> * <var:V> ; <var:B> := <nat:3> + <var:B> * <var:V> ; <var:B> := <nat:2> + <var:B> * <var:V> ; <var:B> := <nat:1> + <var:B> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Allowing , given all positive integer coefficients $ <var:p> $ , $ <var:V> = <var:p> $ ahead of interpreting the program it holds that $ <var:B> = <nat:3> * <var:p> ^ <nat:12> + <nat:4> * <var:p> ^ <nat:11> + <nat:2> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this series of commands is demonstrated with standard Hoare logic . Moving onward , the variable binding code \verb | <var:B> := <nat:3> ; | . This transfers the precondition $ \{ <var:V> = <var:p> \} $ to the postcondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \} $ . This is sound with the assignment scheme given by usual Hoare techniques . Further , the variable binding statement assigning $ <nat:4> + <var:B> * <var:V> $ into $ <var:B>$ . This redefines $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \} $ toward the condition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> + <nat:4> \} $ . Moving forward to the next step , we have the binding line letting $ <nat:2> + <var:B> * <var:V> $ toward $ <var:B>$ . This line transfers the condition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> + <nat:4> \} $ to the postcondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:2> \} $ . This is given using the assignment rule given in typical Hoare techniques . Jumping to the following command in our list of commands , we have the variable assignmet code \verb | <var:B> := <nat:4> + <var:B> * <var:V> ; | . This command moves the precondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:2> \} $ to the condition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:4> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:4> \} $ . This is rigorously given through the assignment scheme given by typical Hoare techniques . Paying attention to the subsequent step contained in our series of instructions , the variable binding statement \verb | <var:B> := <nat:2> + <var:B> * <var:V> ; | . This statement forwards the condition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:4> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:4> \} $ as the postcondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:4> + <nat:4> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:2> \} $ . Following , the assignment code letting $ <nat:3> + <var:B> * <var:V> $ into $ <var:B>$ . This takes the condition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:4> + <nat:4> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:2> \} $ toward the condition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:5> + <nat:4> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> ^ <nat:3> + <nat:4> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:3> \} $ . This is rigorously given using the assignment scheme given by usual Hoare techniques . Observing the next piece of code contained in our list of commands , we have the variable assignmet line \verb | <var:B> := <nat:1> + <var:B> * <var:V> ; | . This line moves the precondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:5> + <nat:4> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> ^ <nat:3> + <nat:4> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:3> \} $ to the postcondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:6> + <nat:4> \cdot <var:p> ^ <nat:5> + <nat:2> \cdot <var:p> ^ <nat:4> + <nat:4> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:1> \} $ . Moving on to the next step , we have the command \verb | <var:B> := <nat:3> + <var:B> * <var:V> ; | . This statement transfers $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:6> + <nat:4> \cdot <var:p> ^ <nat:5> + <nat:2> \cdot <var:p> ^ <nat:4> + <nat:4> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:1> \} $ to the postcondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:7> + <nat:4> \cdot <var:p> ^ <nat:6> + <nat:2> \cdot <var:p> ^ <nat:5> + <nat:4> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:3> \} $ . This is known to be sound with the assignment scheme defined by Hoare logic . Paying attention to the following command seen in the segment of code , the environment update line assigning $ <nat:2> + <var:B> * <var:V> $ to $ <var:B>$ . This advances $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:7> + <nat:4> \cdot <var:p> ^ <nat:6> + <nat:2> \cdot <var:p> ^ <nat:5> + <nat:4> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:3> \} $ into the postcondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:8> + <nat:4> \cdot <var:p> ^ <nat:7> + <nat:2> \cdot <var:p> ^ <nat:6> + <nat:4> \cdot <var:p> ^ <nat:5> + <nat:2> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:2> \} $ . This is sound through the assignment law given in standard Hoare logic . After , we see the assignment line giving $ <nat:3> + <var:B> * <var:V> $ into $ <var:B>$ . This statement takes $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:8> + <nat:4> \cdot <var:p> ^ <nat:7> + <nat:2> \cdot <var:p> ^ <nat:6> + <nat:4> \cdot <var:p> ^ <nat:5> + <nat:2> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:2> \} $ as $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:9> + <nat:4> \cdot <var:p> ^ <nat:8> + <nat:2> \cdot <var:p> ^ <nat:7> + <nat:4> \cdot <var:p> ^ <nat:6> + <nat:2> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:3> \} $ . This is shown to be logically sound through the assignment rule defined by standard Hoare reasoning . Keeping momentum , we see the variable update command \verb | <var:B> := <nat:3> + <var:B> * <var:V> ; | . This advances $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:9> + <nat:4> \cdot <var:p> ^ <nat:8> + <nat:2> \cdot <var:p> ^ <nat:7> + <nat:4> \cdot <var:p> ^ <nat:6> + <nat:2> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:3> \} $ into the condition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:10> + <nat:4> \cdot <var:p> ^ <nat:9> + <nat:2> \cdot <var:p> ^ <nat:8> + <nat:4> \cdot <var:p> ^ <nat:7> + <nat:2> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:1> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:3> \} $ . Shifting focus toward the subsequent statement contained in our list of instructions , we see the assignment statement yielding $ <nat:2> + <var:B> * <var:V> $ toward $ <var:B>$ . This line forwards the condition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:10> + <nat:4> \cdot <var:p> ^ <nat:9> + <nat:2> \cdot <var:p> ^ <nat:8> + <nat:4> \cdot <var:p> ^ <nat:7> + <nat:2> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:1> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:3> \} $ as $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:11> + <nat:4> \cdot <var:p> ^ <nat:10> + <nat:2> \cdot <var:p> ^ <nat:9> + <nat:4> \cdot <var:p> ^ <nat:8> + <nat:2> \cdot <var:p> ^ <nat:7> + <nat:3> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:2> \} $ . Considering the proceeding line contained in the program , we have the environment update code \verb | <var:B> := <nat:1> + <var:B> * <var:V> | . This forwards the precondition $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:11> + <nat:4> \cdot <var:p> ^ <nat:10> + <nat:2> \cdot <var:p> ^ <nat:9> + <nat:4> \cdot <var:p> ^ <nat:8> + <nat:2> \cdot <var:p> ^ <nat:7> + <nat:3> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:2> \} $ as $ \{ <var:V> = <var:p> \land <var:B> = <nat:3> \cdot <var:p> ^ <nat:12> + <nat:4> \cdot <var:p> ^ <nat:11> + <nat:2> \cdot <var:p> ^ <nat:10> + <nat:4> \cdot <var:p> ^ <nat:9> + <nat:2> \cdot <var:p> ^ <nat:8> + <nat:3> \cdot <var:p> ^ <nat:7> + <nat:1> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:2> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:3> ; <var:B> := <nat:4> + <var:B> * <var:V> ; <var:B> := <nat:2> + <var:B> * <var:V> ; <var:B> := <nat:4> + <var:B> * <var:V> ; <var:B> := <nat:2> + <var:B> * <var:V> ; <var:B> := <nat:3> + <var:B> * <var:V> ; <var:B> := <nat:1> + <var:B> * <var:V> ; <var:B> := <nat:3> + <var:B> * <var:V> ; <var:B> := <nat:2> + <var:B> * <var:V> ; <var:B> := <nat:3> + <var:B> * <var:V> ; <var:B> := <nat:3> + <var:B> * <var:V> ; <var:B> := <nat:2> + <var:B> * <var:V> ; <var:B> := <nat:1> + <var:B> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:V> = <var:p> }} <def:poly> {{ <var:B> = <nat:3> * <var:p> ^ <nat:12> + <nat:4> * <var:p> ^ <nat:11> + <nat:2> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:B> = <nat:3> * <var:p> ^ <nat:12> + <nat:4> * <var:p> ^ <nat:11> + <nat:2> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 