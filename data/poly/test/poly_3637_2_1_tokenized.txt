\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:4> ; <var:t> := <var:Q0> \end{verbatim} Allow it to hold that $ <var:F> = <var:Z> $ before the execution of the code segment it holds that we have $ <var:t> = <nat:4> $ once code segment has exited . \end{theorem} \begin{proof} The application of standard Hoare reasoning yields : \begin{eqnarray} \{ <var:F> = <var:Z> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:F> = <var:Z> \land <var:Q0> = <nat:4> \} \\ <var:t> := <var:Q0> \\ \{ <var:F> = <var:Z> \land <var:t> = <nat:4> \} \end{eqnarray} Considering the above , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:F> = <var:Z> }} <var:Q0> := <nat:4> ; <var:t> := <var:Q0> {{ <var:t> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:t> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 