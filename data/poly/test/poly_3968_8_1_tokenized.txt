\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:E> ; <var:X2> := <var:X1> * <var:E> ; <var:X0> := <nat:8> ; <var:X1> := <var:X1> * <nat:6> ; <var:X2> := <var:X2> * <nat:9> ; <var:j> := <var:X2> <var:j> := <var:j> + <var:X1> <var:j> := <var:j> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:E> = <var:V> $ prior to evaluating the segment of code it holds that we see $ <var:j> = <nat:9> \times <var:V> ^ <nat:2> + <nat:6> \times <var:V> + <nat:8> $ . \end{theorem} \begin{proof} We can see that this decorated code . \begin{eqnarray} \{ <var:E> = <var:V> \} \\ <var:X1> := <var:E> ; \\ \{ <var:E> = <var:V> \land <var:X1> = <var:V> \} \\ <var:X2> := <var:X1> * <var:E> ; \\ \{ <var:E> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <var:V> ^ <nat:2> \} \\ <var:X0> := <nat:8> ; \\ \{ <var:E> = <var:V> \land <var:X1> = <var:V> \land <var:X2> = <var:V> ^ <nat:2> \land <var:X0> = <nat:8> \} \\ <var:X1> := <var:X1> * <nat:6> ; \\ \{ <var:E> = <var:V> \land <var:X1> = <nat:6> * <var:V> \land <var:X2> = <var:V> ^ <nat:2> \land <var:X0> = <nat:8> \} \\ <var:X2> := <var:X2> * <nat:9> ; \\ \{ <var:E> = <var:V> \land <var:X1> = <nat:6> * <var:V> \land <var:X2> = <nat:9> * <var:V> ^ <nat:2> \land <var:X0> = <nat:8> \} \\ <var:j> := <var:X2> \\ \{ <var:E> = <var:V> \land <var:X1> = <nat:6> * <var:V> \land <var:X0> = <nat:8> \land <var:j> = <nat:9> * <var:V> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:X1> \\ \{ <var:E> = <var:V> \land <var:X0> = <nat:8> \land <var:j> = <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> \} \\ <var:j> := <var:j> + <var:X0> \\ \{ <var:E> = <var:V> \land <var:j> = <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:8> \} \end{eqnarray} Using standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X1> := <var:E> ; <var:X2> := <var:X1> * <var:E> ; <var:X0> := <nat:8> ; <var:X1> := <var:X1> * <nat:6> ; <var:X2> := <var:X2> * <nat:9> ; <var:j> := <var:X2> <var:j> := <var:j> + <var:X1> <var:j> := <var:j> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:E> = <var:V> }} <def:poly> {{ <var:j> = <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:X1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:X1> = <var:V> /\ <var:X2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:X1> = <var:V> /\ <var:X2> = <var:V> ^ <nat:2> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:X1> = <nat:6> * <var:V> /\ <var:X2> = <var:V> ^ <nat:2> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:X1> = <nat:6> * <var:V> /\ <var:X2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:X1> = <nat:6> * <var:V> /\ <var:X0> = <nat:8> /\ <var:j> = <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:X0> = <nat:8> /\ <var:j> = <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:V> /\ <var:j> = <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 