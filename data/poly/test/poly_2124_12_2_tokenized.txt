\begin{document} \begin{theorem} Take a list of commands as \begin{verbatim} <var:k> := <nat:1> ; <var:k> := <nat:1> + <var:k> * <var:t> ; <var:k> := <nat:2> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> ; <var:k> := <nat:4> + <var:k> * <var:t> ; <var:k> := <var:k> * <var:t> ; <var:k> := <nat:4> + <var:k> * <var:t> ; <var:k> := <nat:1> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> \end{verbatim} Allow $ <var:t> = <var:G> $ ahead of evaluating this series of instructions , it follows that we have $ <var:k> = <nat:1> * <var:G> ^ <nat:11> + <nat:1> * <var:G> ^ <nat:10> + <nat:2> * <var:G> ^ <nat:9> + <nat:3> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> $ when segment of code has finished . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be demonstrated using standard Hoare techniques . Moving on to the next step , the environment update code \verb | <var:k> := <nat:1> ; | . This forwards $ \{ <var:t> = <var:G> \} $ to the postcondition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> \} $ . This is given through the assignment law in usual Hoare techniques . Moving on to the upcoming line of code seen in the set of instructions , we see the environment update line giving $ <nat:1> + <var:k> * <var:t> $ into $ <var:k>$ . This code moves the precondition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> \} $ to the postcondition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> + <nat:1> \} $ . This is guaranteed using the assignment rule in typical Hoare logic . Looking at the subsequent step contained in our code segment , we see the variable binding line \verb | <var:k> := <nat:2> + <var:k> * <var:t> ; | . This advances $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> + <nat:1> \} $ into the postcondition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} $ . Following , we have the environment update statement \verb | <var:k> := <nat:3> + <var:k> * <var:t> ; | . This transfers $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} $ as $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:3> \} $ . This is known to be sound through the assignment rule defined in typical Hoare reasoning . Moving forward to the next step , we have the variable binding statement \verb | <var:k> := <nat:3> + <var:k> * <var:t> ; | . This line forwards $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:3> \} $ toward the condition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> \} $ . Taking another step toward the upcoming piece of code in our set of instructions , the assignment command \verb | <var:k> := <nat:4> + <var:k> * <var:t> ; | . This statement redefines $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> \} $ as $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> \} $ . This is deduced by the assignment scheme in typical Hoare reasoning . Moving on , we have the command \verb | <var:k> := <var:k> * <var:t> ; | . This statement advances $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> \} $ into $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + \} $ . Advancing to the upcoming bit of code in the set of commands , we see the variable update code \verb | <var:k> := <nat:4> + <var:k> * <var:t> ; | . This transfers the condition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + \} $ to the postcondition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> \} $ . Jumping to the proceeding bit of code in our series of commands , we have the assignment code giving $ <nat:1> + <var:k> * <var:t> $ to $ <var:k>$ . This moves $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> \} $ into the postcondition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:8> + <nat:1> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:1> \} $ . Going forward , we have the variable assignmet line defining $ <nat:3> + <var:k> * <var:t> $ to $ <var:k>$ . This statement redefines $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:8> + <nat:1> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:1> \} $ as the condition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:9> + <nat:1> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> \} $ . Advancing to the next line found in the list of instructions , the binding command yielding $ <nat:3> + <var:k> * <var:t> $ toward $ <var:k>$ . This advances the precondition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:9> + <nat:1> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> \} $ to $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:10> + <nat:1> * <var:G> ^ <nat:9> + <nat:2> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> \} $ . Going forward , we see the variable binding line binding $ <nat:3> + <var:k> * <var:t$ as $ <var:k>$ . This line redefines the condition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:10> + <nat:1> * <var:G> ^ <nat:9> + <nat:2> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> \} $ as the postcondition $ \{ <var:t> = <var:G> \land <var:k> = <nat:1> * <var:G> ^ <nat:11> + <nat:1> * <var:G> ^ <nat:10> + <nat:2> * <var:G> ^ <nat:9> + <nat:3> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> \} $ . This is given with the assignment scheme from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:t> = <var:G> }} <var:k> := <nat:1> ; <var:k> := <nat:1> + <var:k> * <var:t> ; <var:k> := <nat:2> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> ; <var:k> := <nat:4> + <var:k> * <var:t> ; <var:k> := <var:k> * <var:t> ; <var:k> := <nat:4> + <var:k> * <var:t> ; <var:k> := <nat:1> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> ; <var:k> := <nat:3> + <var:k> * <var:t> {{ <var:k> = <nat:1> * <var:G> ^ <nat:11> + <nat:1> * <var:G> ^ <nat:10> + <nat:2> * <var:G> ^ <nat:9> + <nat:3> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:8> + <nat:1> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:9> + <nat:1> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:10> + <nat:1> * <var:G> ^ <nat:9> + <nat:2> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:k> = <nat:1> * <var:G> ^ <nat:11> + <nat:1> * <var:G> ^ <nat:10> + <nat:2> * <var:G> ^ <nat:9> + <nat:3> * <var:G> ^ <nat:8> + <nat:3> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 