\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:i> := <nat:1> ; <var:i> := <nat:4> + <var:i> * <var:m> ; <var:i> := <nat:2> + <var:i> * <var:m> ; <var:i> := <nat:1> + <var:i> * <var:m> ; <var:i> := <nat:3> + <var:i> * <var:m> ; <var:i> := <var:i> * <var:m> ; <var:i> := <nat:4> + <var:i> * <var:m> \end{verbatim} Assuming $ <var:m> = <var:a> $ ahead of the execution of the segment of code , it must be that $ <var:i> = <nat:1> \times <var:a> ^ <nat:6> + <nat:4> \times <var:a> ^ <nat:5> + <nat:2> \times <var:a> ^ <nat:4> + <nat:1> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our code segment is clear through Hoare techniques . After , \[ \begin{tabular} {rcl} \{ <var:m> = <var:a> \} & <var:i> := <nat:1> & \{ <var:m> = <var:a> \land <var:i> = <nat:1> \} \\ \{ <var:m> = <var:a> \land <var:i> = <nat:1> \} & <var:i> := <nat:4> + <var:i> * <var:m> & \{ <var:m> = <var:a> \land <var:i> = <nat:1> * <var:a> + <nat:4> \} \\ \{ <var:m> = <var:a> \land <var:i> = <nat:1> * <var:a> + <nat:4> \} & <var:i> := <nat:2> + <var:i> * <var:m> & \{ <var:m> = <var:a> \land <var:i> = <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> \} \\ \{ <var:m> = <var:a> \land <var:i> = <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> \} & <var:i> := <nat:1> + <var:i> * <var:m> & \{ <var:m> = <var:a> \land <var:i> = <nat:1> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> \} \end{tabular} This is known to be sound with the binding rule from standard Hoare reasoning . Now , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:a> \} & <var:i> := <nat:1> & \{ <var:m> = <var:a> \land <var:i> = <nat:1> \} \\ \{ <var:m> = <var:a> \land <var:i> = <nat:1> \} & <var:i> := <nat:4> + <var:i> * <var:m> & \{ <var:m> = <var:a> \land <var:i> = <nat:1> * <var:a> + <nat:4> \} \end{tabular} This is shown to be logically sound with the variable assignmet scheme of typical Hoare logic . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:m> = <var:a> \} & <var:i> := <nat:1> & \{ <var:m> = <var:a> \land <var:i> = <nat:1> \} \end{tabular} This is known to be sound with the binding law defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:m> = <var:a> }} <var:i> := <nat:1> ; <var:i> := <nat:4> + <var:i> * <var:m> ; <var:i> := <nat:2> + <var:i> * <var:m> ; <var:i> := <nat:1> + <var:i> * <var:m> ; <var:i> := <nat:3> + <var:i> * <var:m> ; <var:i> := <var:i> * <var:m> ; <var:i> := <nat:4> + <var:i> * <var:m> {{ <var:i> = <nat:1> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:i> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:i> = <nat:1> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:i> = <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:i> = <nat:1> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:i> = <nat:1> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:i> = <nat:1> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:i> = <nat:1> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 