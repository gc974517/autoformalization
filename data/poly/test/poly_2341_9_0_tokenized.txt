\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:8> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:K> ; <var:I2> := <nat:1> ; <var:I2> := <var:I2> * <var:K> ; <var:I2> := <var:I2> * <var:K> ; <var:O> := <var:I2> ; <var:O> := <var:O> + <var:I1> ; <var:O> := <var:O> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:K> = <var:f> $ ahead of the evaluation of the segment of code it must be that we see $ <var:O> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:8> $ once code terminates . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:K> = <var:f> \} \\ <var:I0> := <nat:8> ; \\ \{ <var:K> = <var:f> \land <var:I0> = <nat:8> \} \\ <var:I1> := <nat:4> ; \\ \{ <var:K> = <var:f> \land <var:I0> = <nat:8> \land <var:I1> = <nat:4> \} \\ <var:I1> := <var:I1> * <var:K> ; \\ \{ <var:K> = <var:f> \land <var:I0> = <nat:8> \land <var:I1> = <nat:4> * <var:f> \} \\ <var:I2> := <nat:1> ; \\ \{ <var:K> = <var:f> \land <var:I0> = <nat:8> \land <var:I1> = <nat:4> * <var:f> \land <var:I2> = <nat:1> \} \\ <var:I2> := <var:I2> * <var:K> ; \\ \{ <var:K> = <var:f> \land <var:I0> = <nat:8> \land <var:I1> = <nat:4> * <var:f> \land <var:I2> = <nat:1> * <var:f> \} \\ <var:I2> := <var:I2> * <var:K> ; \\ \{ <var:K> = <var:f> \land <var:I0> = <nat:8> \land <var:I1> = <nat:4> * <var:f> \land <var:I2> = <nat:1> * <var:f> ^ <nat:2> \} \\ <var:O> := <var:I2> ; \\ \{ <var:K> = <var:f> \land <var:I0> = <nat:8> \land <var:I1> = <nat:4> * <var:f> \land <var:O> = <nat:1> * <var:f> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:I1> ; \\ \{ <var:K> = <var:f> \land <var:I0> = <nat:8> \land <var:O> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> \} \\ <var:O> := <var:O> + <var:I0> \\ \{ <var:K> = <var:f> \land <var:O> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:8> \} \end{eqnarray} Considering the preceding argument , our set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:8> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:K> ; <var:I2> := <nat:1> ; <var:I2> := <var:I2> * <var:K> ; <var:I2> := <var:I2> * <var:K> ; <var:O> := <var:I2> ; <var:O> := <var:O> + <var:I1> ; <var:O> := <var:O> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:K> = <var:f> }} <def:poly> {{ <var:O> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:4> * <var:f> /\ <var:I2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:4> * <var:f> /\ <var:I2> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:4> * <var:f> /\ <var:I2> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:4> * <var:f> /\ <var:O> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:I0> = <nat:8> /\ <var:O> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:f> /\ <var:O> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 