\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:2> ; <var:y> := <nat:3> + <var:y> * <var:I> ; <var:y> := <nat:4> + <var:y> * <var:I> ; <var:y> := <nat:3> + <var:y> * <var:I> ; <var:y> := <nat:2> + <var:y> * <var:I> ; <var:y> := <nat:3> + <var:y> * <var:I> ; <var:y> := <nat:1> + <var:y> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:I> = <var:A> $ given some positive numbers $ <var:A> $ ahead of executing the program it holds that $ <var:y> = <nat:2> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the program can be demonstrated through standard Hoare techniques . Advancing on , we have \verb | { <var:I> = <var:A> } <var:y> := <nat:2> { <var:I> = <var:A> \land <var:y> = <nat:2> } | . Paying attention to the proceeding pieces of code found in our set of commands , we have \verb | { <var:I> = <var:A> } <var:y> := <nat:2> { <var:I> = <var:A> \land <var:y> = <nat:2> } | and \verb | { <var:I> = <var:A> \land <var:y> = <nat:2> } <var:y> := <nat:3> + <var:y> * <var:I> { <var:I> = <var:A> \land <var:y> = <nat:2> \cdot <var:A> + <nat:3> } | . Advancing to the next step , \verb | { <var:I> = <var:A> } <var:y> := <nat:2> { <var:I> = <var:A> \land <var:y> = <nat:2> } | . This is known to be sound by the binding law of usual Hoare techniques . Immediately following , \verb | { <var:I> = <var:A> } <var:y> := <nat:2> { <var:I> = <var:A> \land <var:y> = <nat:2> } | and \verb | { <var:I> = <var:A> \land <var:y> = <nat:2> } <var:y> := <nat:3> + <var:y> * <var:I> { <var:I> = <var:A> \land <var:y> = <nat:2> \cdot <var:A> + <nat:3> } | . This is given with the assignment scheme defined in typical Hoare logic . Taking another step toward the following line of code contained in the program , \verb | { <var:I> = <var:A> } <var:y> := <nat:2> { <var:I> = <var:A> \land <var:y> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:2> ; <var:y> := <nat:3> + <var:y> * <var:I> ; <var:y> := <nat:4> + <var:y> * <var:I> ; <var:y> := <nat:3> + <var:y> * <var:I> ; <var:y> := <nat:2> + <var:y> * <var:I> ; <var:y> := <nat:3> + <var:y> * <var:I> ; <var:y> := <nat:1> + <var:y> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:I> = <var:A> }} <def:poly> {{ <var:y> = <nat:2> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:y> = <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:y> = <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:y> = <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:y> = <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:y> = <nat:2> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:y> = <nat:2> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 