\begin{document} \begin{theorem} We define a program in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:6> ; <var:n1> := <nat:9> ; <var:n1> := <var:n1> * <var:k> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:k> ; <var:n2> := <var:n2> * <var:k> ; <var:G> := <var:n2> ; <var:G> := <var:G> + <var:n1> ; <var:G> := <var:G> + <var:n0> \end{verbatim} Allow that we have $ <var:k> = <var:x> $ , for $ <var:x> $ , before the evaluation of our code then we have $ <var:G> = <nat:2> \times <var:x> ^ <nat:2> + <nat:9> \times <var:x> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:x> \} \\ <var:n0> := <nat:6> ; \\ \{ <var:k> = <var:x> \land <var:n0> = <nat:6> \} \\ <var:n1> := <nat:9> ; \\ \{ <var:k> = <var:x> \land <var:n0> = <nat:6> \land <var:n1> = <nat:9> \} \\ <var:n1> := <var:n1> * <var:k> ; \\ \{ <var:k> = <var:x> \land <var:n0> = <nat:6> \land <var:n1> = <nat:9> * <var:x> \} \\ <var:n2> := <nat:2> ; \\ \{ <var:k> = <var:x> \land <var:n0> = <nat:6> \land <var:n1> = <nat:9> * <var:x> \land <var:n2> = <nat:2> \} \\ <var:n2> := <var:n2> * <var:k> ; \\ \{ <var:k> = <var:x> \land <var:n0> = <nat:6> \land <var:n1> = <nat:9> * <var:x> \land <var:n2> = <nat:2> * <var:x> \} \\ <var:n2> := <var:n2> * <var:k> ; \\ \{ <var:k> = <var:x> \land <var:n0> = <nat:6> \land <var:n1> = <nat:9> * <var:x> \land <var:n2> = <nat:2> * <var:x> ^ <nat:2> \} \\ <var:G> := <var:n2> ; \\ \{ <var:k> = <var:x> \land <var:n0> = <nat:6> \land <var:n1> = <nat:9> * <var:x> \land <var:G> = <nat:2> * <var:x> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:n1> ; \\ \{ <var:k> = <var:x> \land <var:n0> = <nat:6> \land <var:G> = <nat:2> * <var:x> ^ <nat:2> + <nat:9> * <var:x> \} \\ <var:G> := <var:G> + <var:n0> \\ \{ <var:k> = <var:x> \land <var:G> = <nat:2> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:6> \} \end{eqnarray} The application of usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:k> = <var:x> }} <var:n0> := <nat:6> ; <var:n1> := <nat:9> ; <var:n1> := <var:n1> * <var:k> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:k> ; <var:n2> := <var:n2> * <var:k> ; <var:G> := <var:n2> ; <var:G> := <var:G> + <var:n1> ; <var:G> := <var:G> + <var:n0> {{ <var:G> = <nat:2> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:9> * <var:x> /\ <var:n2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:9> * <var:x> /\ <var:n2> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:9> * <var:x> /\ <var:n2> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:9> * <var:x> /\ <var:G> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:n0> = <nat:6> /\ <var:G> = <nat:2> * <var:x> ^ <nat:2> + <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:x> /\ <var:G> = <nat:2> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 