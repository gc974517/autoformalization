\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:A1> := <var:r> ; <var:A2> := <var:A1> * <var:r> ; <var:A3> := <var:A2> * <var:r> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:6> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:6> ; <var:z> := <var:A3> <var:z> := <var:z> + <var:A2> <var:z> := <var:z> + <var:A1> <var:z> := <var:z> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:r> = <var:E> $ for some positive integers $ <var:E> $ before executing the set of commands it must be that $ <var:z> = <nat:6> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:7> $ after list of instructions has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is evident using typical Hoare techniques . Shifting focus toward the upcoming step seen in our series of commands , we see the variable binding line \verb | <var:A1> := <var:r> ; | . This advances the condition $ \{ <var:r> = <var:E> \} $ to the postcondition $ \{ <var:r> = <var:E> \land <var:A1> = <var:E> \} $ . This is shown using the assignment inference rule given in usual Hoare logic . Advancing on , we have the statement \verb | <var:A2> := <var:A1> * <var:r> ; | . This redefines $ \{ <var:r> = <var:E> \land <var:A1> = <var:E> \} $ to the postcondition $ \{ <var:r> = <var:E> \land <var:A1> = <var:E> \land <var:A2> = <var:E> ^ <nat:2> \} $ . Going to the next step , the binding statement \verb | <var:A3> := <var:A2> * <var:r> ; | . This transfers $ \{ <var:r> = <var:E> \land <var:A1> = <var:E> \land <var:A2> = <var:E> ^ <nat:2> \} $ to the postcondition $ \{ <var:r> = <var:E> \land <var:A1> = <var:E> \land <var:A2> = <var:E> ^ <nat:2> \land <var:A3> = <var:E> ^ <nat:3> \} $ . Keeping momentum , we have the environment update command \verb | <var:A0> := <nat:7> ; | . This forwards $ \{ <var:r> = <var:E> \land <var:A1> = <var:E> \land <var:A2> = <var:E> ^ <nat:2> \land <var:A3> = <var:E> ^ <nat:3> \} $ to $ \{ <var:r> = <var:E> \land <var:A1> = <var:E> \land <var:A2> = <var:E> ^ <nat:2> \land <var:A3> = <var:E> ^ <nat:3> \land <var:A0> = <nat:7> \} $ . Taking another step toward the subsequent statement found in the list of instructions , we have the variable update command \verb | <var:A1> := <var:A1> * <nat:6> ; | . This command moves $ \{ <var:r> = <var:E> \land <var:A1> = <var:E> \land <var:A2> = <var:E> ^ <nat:2> \land <var:A3> = <var:E> ^ <nat:3> \land <var:A0> = <nat:7> \} $ into the condition $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A2> = <var:E> ^ <nat:2> \land <var:A3> = <var:E> ^ <nat:3> \land <var:A0> = <nat:7> \} $ . This is known to be sound using the assignment law in standard Hoare techniques . Going to the next step , we have the variable update line \verb | <var:A2> := <var:A2> * <nat:1> ; | . This advances the condition $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A2> = <var:E> ^ <nat:2> \land <var:A3> = <var:E> ^ <nat:3> \land <var:A0> = <nat:7> \} $ toward the postcondition $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A2> = <nat:1> \cdot <var:E> ^ <nat:2> \land <var:A3> = <var:E> ^ <nat:3> \land <var:A0> = <nat:7> \} $ . This is known to be sound by the assignment scheme found in typical Hoare logic . Immediately following , we have the binding statement binding $ <var:A3> * <nat:6> $ to $ <var:A3>$ . This takes the precondition $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A2> = <nat:1> \cdot <var:E> ^ <nat:2> \land <var:A3> = <var:E> ^ <nat:3> \land <var:A0> = <nat:7> \} $ to $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A2> = <nat:1> \cdot <var:E> ^ <nat:2> \land <var:A3> = <nat:6> \cdot <var:E> ^ <nat:3> \land <var:A0> = <nat:7> \} $ . After , we see the variable update command \verb | <var:z> := <var:A3> | . This statement transfers the precondition $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A2> = <nat:1> \cdot <var:E> ^ <nat:2> \land <var:A3> = <nat:6> \cdot <var:E> ^ <nat:3> \land <var:A0> = <nat:7> \} $ toward the condition $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A2> = <nat:1> \cdot <var:E> ^ <nat:2> \land <var:A0> = <nat:7> \land <var:z> = <nat:6> \cdot <var:E> ^ <nat:3> \} $ . Going to the next step , the binding statement \verb | <var:z> := <var:z> + <var:A2> | . This command takes the precondition $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A2> = <nat:1> \cdot <var:E> ^ <nat:2> \land <var:A0> = <nat:7> \land <var:z> = <nat:6> \cdot <var:E> ^ <nat:3> \} $ toward $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A0> = <nat:7> \land <var:z> = <nat:6> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> \} $ . Looking at the following step found in the list of commands , we have the binding command \verb | <var:z> := <var:z> + <var:A1> | . This code redefines $ \{ <var:r> = <var:E> \land <var:A1> = <nat:6> \cdot <var:E> \land <var:A0> = <nat:7> \land <var:z> = <nat:6> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> \} $ into $ \{ <var:r> = <var:E> \land <var:A0> = <nat:7> \land <var:z> = <nat:6> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> \} $ . This is shown using the assignment law from standard Hoare reasoning . After , we have the code binding $ <var:z> + <var:A0$ into $ <var:z>$ . This redefines the precondition $ \{ <var:r> = <var:E> \land <var:A0> = <nat:7> \land <var:z> = <nat:6> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> \} $ as $ \{ <var:r> = <var:E> \land <var:z> = <nat:6> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:7> \} $ . This is given with the assignment law from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A1> := <var:r> ; <var:A2> := <var:A1> * <var:r> ; <var:A3> := <var:A2> * <var:r> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:6> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:6> ; <var:z> := <var:A3> <var:z> := <var:z> + <var:A2> <var:z> := <var:z> + <var:A1> <var:z> := <var:z> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:r> = <var:E> }} <def:poly> {{ <var:z> = <nat:6> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <var:E> /\ <var:A2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <var:E> /\ <var:A2> = <var:E> ^ <nat:2> /\ <var:A3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <var:E> /\ <var:A2> = <var:E> ^ <nat:2> /\ <var:A3> = <var:E> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <nat:6> * <var:E> /\ <var:A2> = <var:E> ^ <nat:2> /\ <var:A3> = <var:E> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <nat:6> * <var:E> /\ <var:A2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:A3> = <var:E> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <nat:6> * <var:E> /\ <var:A2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:A3> = <nat:6> * <var:E> ^ <nat:3> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <nat:6> * <var:E> /\ <var:A2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:A0> = <nat:7> /\ <var:z> = <nat:6> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A1> = <nat:6> * <var:E> /\ <var:A0> = <nat:7> /\ <var:z> = <nat:6> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:A0> = <nat:7> /\ <var:z> = <nat:6> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:z> = <nat:6> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 