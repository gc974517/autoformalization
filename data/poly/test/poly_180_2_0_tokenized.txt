\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:1> ; <var:n> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> . Given that $ <var:M> = <var:K> $ ahead of the execution of our series of instructions it follows that $ <var:n> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:K> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:M> = <var:K> \land <var:O0> = <nat:1> \} \\ <var:n> := <var:O0> \\ \{ <var:M> = <var:K> \land <var:n> = <nat:1> \} \end{eqnarray} The application of usual Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:1> ; <var:n> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:M> = <var:K> }} <def:poly> {{ <var:n> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:n> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 