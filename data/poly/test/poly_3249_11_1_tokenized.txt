\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:v> ; <var:b2> := <var:b1> * <var:v> ; <var:b3> := <var:b2> * <var:v> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:2> ; <var:b2> := <var:b2> * <nat:8> ; <var:b3> := <var:b3> * <nat:1> ; <var:a> := <var:b3> <var:a> := <var:a> + <var:b2> <var:a> := <var:a> + <var:b1> <var:a> := <var:a> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:v> = <var:Y> $ prior to running this list of commands , it must be that we have $ <var:a> = <nat:1> \times <var:Y> ^ <nat:3> + <nat:8> \times <var:Y> ^ <nat:2> + <nat:2> \times <var:Y> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be accomplished by typical Hoare logic . Focusing on the proceeding command contained in our list of instructions , the variable assignmet command \verb | <var:b1> := <var:v> ; | . This command transfers the precondition $ \{ <var:v> = <var:Y> \} $ to $ \{ <var:v> = <var:Y> \land <var:b1> = <var:Y> \} $ . This is deduced with the assignment inference rule defined by standard Hoare logic . Now , the variable binding line giving $ <var:b1> * <var:v> $ toward $ <var:b2>$ . This line advances $ \{ <var:v> = <var:Y> \land <var:b1> = <var:Y> \} $ into the condition $ \{ <var:v> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \} $ . Shifting focus toward the upcoming statement in the set of instructions , we see the assignment statement \verb | <var:b3> := <var:b2> * <var:v> ; | . This code forwards the precondition $ \{ <var:v> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \} $ . This is rigorously given through the assignment law from typical Hoare techniques . Looking at the subsequent line of code found in our set of instructions , we see the variable assignmet code assigning $ <nat:5> $ as $ <var:b0>$ . This command forwards the precondition $ \{ <var:v> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \} $ toward $ \{ <var:v> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \land <var:b0> = <nat:5> \} $ . Observing the following statement contained in our code segment , the environment update code binding $ <var:b1> * <nat:2> $ into $ <var:b1>$ . This transfers the precondition $ \{ <var:v> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \land <var:b0> = <nat:5> \} $ to $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \land <var:b0> = <nat:5> \} $ . Taking a look at the subsequent statement found in the code , we see the variable binding command yielding $ <var:b2> * <nat:8> $ toward $ <var:b2>$ . This moves the condition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \land <var:b0> = <nat:5> \} $ into the postcondition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b2> = <nat:8> * <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \land <var:b0> = <nat:5> \} $ . This is given by the assignment scheme of standard Hoare reasoning . Moving on , the binding command \verb | <var:b3> := <var:b3> * <nat:1> ; | . This command redefines the condition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b2> = <nat:8> * <var:Y> ^ <nat:2> \land <var:b3> = <var:Y> ^ <nat:3> \land <var:b0> = <nat:5> \} $ to the postcondition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b2> = <nat:8> * <var:Y> ^ <nat:2> \land <var:b3> = <nat:1> * <var:Y> ^ <nat:3> \land <var:b0> = <nat:5> \} $ . This is shown to be logically sound using the assignment scheme given by typical Hoare reasoning . Focusing on the proceeding line in our list of commands , we have the variable assignmet command \verb | <var:a> := <var:b3> | . This moves the condition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b2> = <nat:8> * <var:Y> ^ <nat:2> \land <var:b3> = <nat:1> * <var:Y> ^ <nat:3> \land <var:b0> = <nat:5> \} $ to the condition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b2> = <nat:8> * <var:Y> ^ <nat:2> \land <var:b0> = <nat:5> \land <var:a> = <nat:1> * <var:Y> ^ <nat:3> \} $ . Going to the next step , we have the environment update code \verb | <var:a> := <var:a> + <var:b2> | . This command advances the condition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b2> = <nat:8> * <var:Y> ^ <nat:2> \land <var:b0> = <nat:5> \land <var:a> = <nat:1> * <var:Y> ^ <nat:3> \} $ to the condition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b0> = <nat:5> \land <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> \} $ . This is rigorously given with the assignment inference rule given by standard Hoare reasoning . Focusing on the following command found in the code segment , the variable assignmet line \verb | <var:a> := <var:a> + <var:b1> | . This code advances the condition $ \{ <var:v> = <var:Y> \land <var:b1> = <nat:2> * <var:Y> \land <var:b0> = <nat:5> \land <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> \} $ into the condition $ \{ <var:v> = <var:Y> \land <var:b0> = <nat:5> \land <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> \} $ . This is guaranteed using the assignment scheme defined by typical Hoare logic . Considering the following step contained in our series of commands , we have the code \verb | <var:a> := <var:a> + <var:b0> | . This line transfers the condition $ \{ <var:v> = <var:Y> \land <var:b0> = <nat:5> \land <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> \} $ to the postcondition $ \{ <var:v> = <var:Y> \land <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:5> \} $ . This is deduced with the assignment rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b1> := <var:v> ; <var:b2> := <var:b1> * <var:v> ; <var:b3> := <var:b2> * <var:v> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:2> ; <var:b2> := <var:b2> * <nat:8> ; <var:b3> := <var:b3> * <nat:1> ; <var:a> := <var:b3> <var:a> := <var:a> + <var:b2> <var:a> := <var:a> + <var:b1> <var:a> := <var:a> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:v> = <var:Y> }} <def:poly> {{ <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b3> = <var:Y> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <nat:2> * <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b3> = <var:Y> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <nat:2> * <var:Y> /\ <var:b2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:b3> = <var:Y> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <nat:2> * <var:Y> /\ <var:b2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:Y> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <nat:2> * <var:Y> /\ <var:b2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:b0> = <nat:5> /\ <var:a> = <nat:1> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b1> = <nat:2> * <var:Y> /\ <var:b0> = <nat:5> /\ <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:b0> = <nat:5> /\ <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:a> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 