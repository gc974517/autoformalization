\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} such that \begin{verbatim} <var:H> := <nat:2> ; <var:H> := <nat:4> + <var:H> * <var:i> ; <var:H> := <nat:1> + <var:H> * <var:i> ; <var:H> := <nat:1> + <var:H> * <var:i> ; <var:H> := <nat:3> + <var:H> * <var:i> ; <var:H> := <nat:2> + <var:H> * <var:i> ; <var:H> := <nat:4> + <var:H> * <var:i> ; <var:H> := <nat:3> + <var:H> * <var:i> \end{verbatim} Assume that $ <var:i> = <var:e> $ prior to the evaluation of this set of commands , it must be that $ <var:H> = <nat:2> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> $ when code segment executes . \end{theorem} \begin{proof} The argument for this set of commands is given by typical Hoare techniques . Advancing to the following line of code seen in our list of instructions , the variable binding command assigning $ <nat:2> $ into $ <var:H>$ . This redefines the condition $ \{ <var:i> = <var:e> \} $ into $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> \} $ . Honing in on the subsequent statement seen in our program , we have the variable binding line \verb | <var:H> := <nat:4> + <var:H> * <var:i> ; | . This redefines the precondition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> \} $ to the postcondition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> + <nat:4> \} $ . This is deduced using the assignment law defined by typical Hoare reasoning . Immediately following , we see the environment update code giving $ <nat:1> + <var:H> * <var:i> $ into $ <var:H>$ . This takes the precondition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> + <nat:4> \} $ as the postcondition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> \} $ . Shifting focus toward the following statement in the list of instructions , the environment update statement letting $ <nat:1> + <var:H> * <var:i> $ to $ <var:H>$ . This advances the condition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> \} $ to $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> \} $ . Keeping momentum , the statement assigning $ <nat:3> + <var:H> * <var:i> $ to $ <var:H>$ . This advances $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> \} $ to the postcondition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> \} $ . Advancing to the upcoming piece of code found in our set of commands , we have the code \verb | <var:H> := <nat:2> + <var:H> * <var:i> ; | . This code transfers the condition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> \} $ into the postcondition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> \} $ . Moving on to the next piece of code found in our series of instructions , we see the variable binding command assigning $ <nat:4> + <var:H> * <var:i> $ as $ <var:H>$ . This statement takes the condition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> \} $ to the postcondition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> \} $ . Observing the proceeding command seen in the series of instructions , we have the binding code \verb | <var:H> := <nat:3> + <var:H> * <var:i> | . This statement forwards the precondition $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> \} $ into $ \{ <var:i> = <var:e> \land <var:H> = <nat:2> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:i> = <var:e> }} <var:H> := <nat:2> ; <var:H> := <nat:4> + <var:H> * <var:i> ; <var:H> := <nat:1> + <var:H> * <var:i> ; <var:H> := <nat:1> + <var:H> * <var:i> ; <var:H> := <nat:3> + <var:H> * <var:i> ; <var:H> := <nat:2> + <var:H> * <var:i> ; <var:H> := <nat:4> + <var:H> * <var:i> ; <var:H> := <nat:3> + <var:H> * <var:i> {{ <var:H> = <nat:2> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:H> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:H> = <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 