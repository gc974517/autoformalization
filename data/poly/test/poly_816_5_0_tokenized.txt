\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:l> ; <var:E> := <var:S1> ; <var:E> := <var:E> + <var:S0> \end{verbatim} Allowing that we have $ <var:l> = <var:b> $ ahead of running our code segment then we see $ <var:E> = <nat:2> * <var:b> + <nat:8> $ once program has finished . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be shown through the following decorated code segment . \begin{eqnarray} \{ <var:l> = <var:b> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:l> = <var:b> \land <var:S0> = <nat:8> \} \\ <var:S1> := <nat:2> ; \\ \{ <var:l> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:2> \} \\ <var:S1> := <var:S1> * <var:l> ; \\ \{ <var:l> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:2> * <var:b> \} \\ <var:E> := <var:S1> ; \\ \{ <var:l> = <var:b> \land <var:S0> = <nat:8> \land <var:E> = <nat:2> * <var:b> \} \\ <var:E> := <var:E> + <var:S0> \\ \{ <var:l> = <var:b> \land <var:E> = <nat:2> * <var:b> + <nat:8> \} \end{eqnarray} Applying standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:l> = <var:b> }} <var:S0> := <nat:8> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:l> ; <var:E> := <var:S1> ; <var:E> := <var:E> + <var:S0> {{ <var:E> = <nat:2> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:S0> = <nat:8> /\ <var:E> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:E> = <nat:2> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 