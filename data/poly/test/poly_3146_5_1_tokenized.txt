\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} : \begin{verbatim} <var:K1> := <var:p> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:1> ; <var:P> := <var:K1> <var:P> := <var:P> + <var:K0> \end{verbatim} Allowing , for every positive integers $ <var:D> $ , that we have $ <var:p> = <var:D> $ before interpreting our series of commands , it must be that we have $ <var:P> = <nat:1> * <var:D> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be accomplished using standard Hoare logic . Stepping through , we see the variable update statement \verb | <var:K1> := <var:p> ; | . This moves the condition $ \{ <var:p> = <var:D> \} $ to the postcondition $ \{ <var:p> = <var:D> \land <var:K1> = <var:D> \} $ . Now , the assignment statement \verb | <var:K0> := <nat:3> ; | . This statement takes the precondition $ \{ <var:p> = <var:D> \land <var:K1> = <var:D> \} $ into the postcondition $ \{ <var:p> = <var:D> \land <var:K1> = <var:D> \land <var:K0> = <nat:3> \} $ . Taking another step toward the subsequent statement contained in our list of instructions , we see the variable update statement defining $ <var:K1> * <nat:1> $ toward $ <var:K1>$ . This command advances the condition $ \{ <var:p> = <var:D> \land <var:K1> = <var:D> \land <var:K0> = <nat:3> \} $ into $ \{ <var:p> = <var:D> \land <var:K1> = <nat:1> \times <var:D> \land <var:K0> = <nat:3> \} $ . This is given using the assignment rule given in usual Hoare reasoning . Jumping to the upcoming bit of code in the program , we see the statement \verb | <var:P> := <var:K1> | . This transfers the precondition $ \{ <var:p> = <var:D> \land <var:K1> = <nat:1> \times <var:D> \land <var:K0> = <nat:3> \} $ toward the condition $ \{ <var:p> = <var:D> \land <var:K0> = <nat:3> \land <var:P> = <nat:1> \times <var:D> \} $ . Advancing to the next step , the command \verb | <var:P> := <var:P> + <var:K0> | . This command moves the condition $ \{ <var:p> = <var:D> \land <var:K0> = <nat:3> \land <var:P> = <nat:1> \times <var:D> \} $ into the postcondition $ \{ <var:p> = <var:D> \land <var:P> = <nat:1> \times <var:D> + <nat:3> \} $ . This is shown by the assignment inference rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:p> = <var:D> }} <var:K1> := <var:p> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:1> ; <var:P> := <var:K1> <var:P> := <var:P> + <var:K0> {{ <var:P> = <nat:1> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K1> = <var:D> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K0> = <nat:3> /\ <var:P> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:P> = <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 