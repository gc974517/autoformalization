\begin{document} \begin{theorem} Consider the following program such that \begin{verbatim} <var:Z1> := <var:l> ; <var:Z2> := <var:Z1> * <var:l> ; <var:Z3> := <var:Z2> * <var:l> ; <var:Z4> := <var:Z3> * <var:l> ; <var:Z0> := <nat:4> ; <var:Z2> := <var:Z2> * <nat:5> ; <var:Z3> := <var:Z3> * <nat:7> ; <var:Z4> := <var:Z4> * <nat:9> ; <var:p> := <var:Z4> <var:p> := <var:p> + <var:Z3> <var:p> := <var:p> + <var:Z2> <var:p> := <var:p> + <var:Z0> \end{verbatim} Assuming $ <var:l> = <var:j> $ , given any natural numbers $ <var:j> $ , ahead of interpreting this list of commands then we have $ <var:p> = <nat:9> \times <var:j> ^ <nat:4> + <nat:7> \times <var:j> ^ <nat:3> + <nat:5> \times <var:j> ^ <nat:2> + <nat:4> $ once code finishes . \end{theorem} \begin{proof} The application of usual Hoare logic yields : \begin{eqnarray} \{ <var:l> = <var:j> \} \\ <var:Z1> := <var:l> ; \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \} \\ <var:Z2> := <var:Z1> * <var:l> ; \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:l> ; \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \land <var:Z3> = <var:j> ^ <nat:3> \} \\ <var:Z4> := <var:Z3> * <var:l> ; \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \land <var:Z3> = <var:j> ^ <nat:3> \land <var:Z4> = <var:j> ^ <nat:4> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <var:j> ^ <nat:2> \land <var:Z3> = <var:j> ^ <nat:3> \land <var:Z4> = <var:j> ^ <nat:4> \land <var:Z0> = <nat:4> \} \\ <var:Z2> := <var:Z2> * <nat:5> ; \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <nat:5> \cdot <var:j> ^ <nat:2> \land <var:Z3> = <var:j> ^ <nat:3> \land <var:Z4> = <var:j> ^ <nat:4> \land <var:Z0> = <nat:4> \} \\ <var:Z3> := <var:Z3> * <nat:7> ; \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <nat:5> \cdot <var:j> ^ <nat:2> \land <var:Z3> = <nat:7> \cdot <var:j> ^ <nat:3> \land <var:Z4> = <var:j> ^ <nat:4> \land <var:Z0> = <nat:4> \} \\ <var:Z4> := <var:Z4> * <nat:9> ; \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <nat:5> \cdot <var:j> ^ <nat:2> \land <var:Z3> = <nat:7> \cdot <var:j> ^ <nat:3> \land <var:Z4> = <nat:9> \cdot <var:j> ^ <nat:4> \land <var:Z0> = <nat:4> \} \\ <var:p> := <var:Z4> \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <nat:5> \cdot <var:j> ^ <nat:2> \land <var:Z3> = <nat:7> \cdot <var:j> ^ <nat:3> \land <var:Z0> = <nat:4> \land <var:p> = <nat:9> \cdot <var:j> ^ <nat:4> \} \\ <var:p> := <var:p> + <var:Z3> \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z2> = <nat:5> \cdot <var:j> ^ <nat:2> \land <var:Z0> = <nat:4> \land <var:p> = <nat:9> \cdot <var:j> ^ <nat:4> + <nat:7> \cdot <var:j> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:Z2> \\ \{ <var:l> = <var:j> \land <var:Z1> = <var:j> \land <var:Z0> = <nat:4> \land <var:p> = <nat:9> \cdot <var:j> ^ <nat:4> + <nat:7> \cdot <var:j> ^ <nat:3> + <nat:5> \cdot <var:j> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:Z0> \\ \{ <var:l> = <var:j> \land <var:p> = <nat:9> \cdot <var:j> ^ <nat:4> + <nat:7> \cdot <var:j> ^ <nat:3> + <nat:5> \cdot <var:j> ^ <nat:2> + <nat:4> \} \end{eqnarray} Advancing running this segment of code gives : \begin{eqnarray} \end{eqnarray} Considering the above , our segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <var:Z4> : string := " <var:Z4> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:l> = <var:j> }} <var:Z1> := <var:l> ; <var:Z2> := <var:Z1> * <var:l> ; <var:Z3> := <var:Z2> * <var:l> ; <var:Z4> := <var:Z3> * <var:l> ; <var:Z0> := <nat:4> ; <var:Z2> := <var:Z2> * <nat:5> ; <var:Z3> := <var:Z3> * <nat:7> ; <var:Z4> := <var:Z4> * <nat:9> ; <var:p> := <var:Z4> <var:p> := <var:p> + <var:Z3> <var:p> := <var:p> + <var:Z2> <var:p> := <var:p> + <var:Z0> {{ <var:p> = <nat:9> * <var:j> ^ <nat:4> + <nat:7> * <var:j> ^ <nat:3> + <nat:5> * <var:j> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> /\ <var:Z3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> /\ <var:Z3> = <var:j> ^ <nat:3> /\ <var:Z4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <var:j> ^ <nat:2> /\ <var:Z3> = <var:j> ^ <nat:3> /\ <var:Z4> = <var:j> ^ <nat:4> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:Z3> = <var:j> ^ <nat:3> /\ <var:Z4> = <var:j> ^ <nat:4> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:Z3> = <nat:7> * <var:j> ^ <nat:3> /\ <var:Z4> = <var:j> ^ <nat:4> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:Z3> = <nat:7> * <var:j> ^ <nat:3> /\ <var:Z4> = <nat:9> * <var:j> ^ <nat:4> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:Z3> = <nat:7> * <var:j> ^ <nat:3> /\ <var:Z0> = <nat:4> /\ <var:p> = <nat:9> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:Z0> = <nat:4> /\ <var:p> = <nat:9> * <var:j> ^ <nat:4> + <nat:7> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:Z1> = <var:j> /\ <var:Z0> = <nat:4> /\ <var:p> = <nat:9> * <var:j> ^ <nat:4> + <nat:7> * <var:j> ^ <nat:3> + <nat:5> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:p> = <nat:9> * <var:j> ^ <nat:4> + <nat:7> * <var:j> ^ <nat:3> + <nat:5> * <var:j> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 