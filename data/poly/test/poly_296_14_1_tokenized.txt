\begin{document} \begin{theorem} Define the following program in \emph{Imp} : \begin{verbatim} <var:x1> := <var:Y> ; <var:x2> := <var:x1> * <var:Y> ; <var:x3> := <var:x2> * <var:Y> ; <var:x4> := <var:x3> * <var:Y> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:9> ; <var:x2> := <var:x2> * <nat:2> ; <var:x3> := <var:x3> * <nat:9> ; <var:x4> := <var:x4> * <nat:8> ; <var:B> := <var:x4> <var:B> := <var:B> + <var:x3> <var:B> := <var:B> + <var:x2> <var:B> := <var:B> + <var:x1> <var:B> := <var:B> + <var:x0> \end{verbatim} Allow ( for some positive integers $ <var:f> $ ) it to be that $ <var:Y> = <var:f> $ before executing the code segment it follows that $ <var:B> = <nat:8> \times <var:f> ^ <nat:4> + <nat:9> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:9> \times <var:f> + <nat:4> $ once program has finished . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:Y> = <var:f> \} \\ <var:x1> := <var:Y> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <var:f> \} \\ <var:x2> := <var:x1> * <var:Y> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:Y> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \} \\ <var:x4> := <var:x3> * <var:Y> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x4> = <var:f> ^ <nat:4> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x4> = <var:f> ^ <nat:4> \land <var:x0> = <nat:4> \} \\ <var:x1> := <var:x1> * <nat:9> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <nat:9> * <var:f> \land <var:x2> = <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x4> = <var:f> ^ <nat:4> \land <var:x0> = <nat:4> \} \\ <var:x2> := <var:x2> * <nat:2> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <nat:9> * <var:f> \land <var:x2> = <nat:2> * <var:f> ^ <nat:2> \land <var:x3> = <var:f> ^ <nat:3> \land <var:x4> = <var:f> ^ <nat:4> \land <var:x0> = <nat:4> \} \\ <var:x3> := <var:x3> * <nat:9> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <nat:9> * <var:f> \land <var:x2> = <nat:2> * <var:f> ^ <nat:2> \land <var:x3> = <nat:9> * <var:f> ^ <nat:3> \land <var:x4> = <var:f> ^ <nat:4> \land <var:x0> = <nat:4> \} \\ <var:x4> := <var:x4> * <nat:8> ; \\ \{ <var:Y> = <var:f> \land <var:x1> = <nat:9> * <var:f> \land <var:x2> = <nat:2> * <var:f> ^ <nat:2> \land <var:x3> = <nat:9> * <var:f> ^ <nat:3> \land <var:x4> = <nat:8> * <var:f> ^ <nat:4> \land <var:x0> = <nat:4> \} \\ <var:B> := <var:x4> \\ \{ <var:Y> = <var:f> \land <var:x1> = <nat:9> * <var:f> \land <var:x2> = <nat:2> * <var:f> ^ <nat:2> \land <var:x3> = <nat:9> * <var:f> ^ <nat:3> \land <var:x0> = <nat:4> \land <var:B> = <nat:8> * <var:f> ^ <nat:4> \} \\ <var:B> := <var:B> + <var:x3> \\ \{ <var:Y> = <var:f> \land <var:x1> = <nat:9> * <var:f> \land <var:x2> = <nat:2> * <var:f> ^ <nat:2> \land <var:x0> = <nat:4> \land <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:x2> \\ \{ <var:Y> = <var:f> \land <var:x1> = <nat:9> * <var:f> \land <var:x0> = <nat:4> \land <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:x1> \\ \{ <var:Y> = <var:f> \land <var:x0> = <nat:4> \land <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:9> * <var:f> \} \\ <var:B> := <var:B> + <var:x0> \\ \{ <var:Y> = <var:f> \land <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:4> \} \end{eqnarray} Thusly , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <var:x4> : string := " <var:x4> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:Y> = <var:f> }} <var:x1> := <var:Y> ; <var:x2> := <var:x1> * <var:Y> ; <var:x3> := <var:x2> * <var:Y> ; <var:x4> := <var:x3> * <var:Y> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:9> ; <var:x2> := <var:x2> * <nat:2> ; <var:x3> := <var:x3> * <nat:9> ; <var:x4> := <var:x4> * <nat:8> ; <var:B> := <var:x4> <var:B> := <var:B> + <var:x3> <var:B> := <var:B> + <var:x2> <var:B> := <var:B> + <var:x1> <var:B> := <var:B> + <var:x0> {{ <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <var:f> /\ <var:x2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <var:f> /\ <var:x2> = <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <var:f> /\ <var:x2> = <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> /\ <var:x4> = <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <var:f> /\ <var:x2> = <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> /\ <var:x4> = <var:f> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <nat:9> * <var:f> /\ <var:x2> = <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> /\ <var:x4> = <var:f> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <nat:9> * <var:f> /\ <var:x2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:x3> = <var:f> ^ <nat:3> /\ <var:x4> = <var:f> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <nat:9> * <var:f> /\ <var:x2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:f> ^ <nat:3> /\ <var:x4> = <var:f> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <nat:9> * <var:f> /\ <var:x2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:f> ^ <nat:3> /\ <var:x4> = <nat:8> * <var:f> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <nat:9> * <var:f> /\ <var:x2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:f> ^ <nat:3> /\ <var:x0> = <nat:4> /\ <var:B> = <nat:8> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <nat:9> * <var:f> /\ <var:x2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:x0> = <nat:4> /\ <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x1> = <nat:9> * <var:f> /\ <var:x0> = <nat:4> /\ <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:x0> = <nat:4> /\ <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:B> = <nat:8> * <var:f> ^ <nat:4> + <nat:9> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 