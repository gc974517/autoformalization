\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:4> ; <var:J> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Given $ <var:w> = <var:m> $ before the execution of this code segment , then we see $ <var:J> = <nat:4> $ after code finishes . \end{theorem} \begin{proof} The way to prove correctness for our code is done through usual Hoare techniques . Advancing on , we have the variable assignmet command yielding $ <nat:4> $ as $ <var:N0>$ . This forwards the condition $ \{ <var:w> = <var:m> \} $ into the postcondition $ \{ <var:w> = <var:m> \land <var:N0> = <nat:4> \} $ . Further , we have the assignment command \verb | <var:J> := <var:N0> | . This moves the precondition $ \{ <var:w> = <var:m> \land <var:N0> = <nat:4> \} $ into the postcondition $ \{ <var:w> = <var:m> \land <var:J> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:J> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:w> = <var:m> }} <def:poly> {{ <var:J> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:J> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 