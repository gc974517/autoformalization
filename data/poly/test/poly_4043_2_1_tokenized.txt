\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:4> ; <var:O> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Allowing it to hold that $ <var:h> = <var:r> $ given positive numbers $ <var:r> $ ahead of running this list of commands it holds that we have $ <var:O> = <nat:4> $ after program finishes . \end{theorem} \begin{proof} The flow of logic for the series of commands can be given with typical Hoare techniques . Moving on to the upcoming step seen in our series of instructions , we see \begin{eqnarray} \{ <var:h> = <var:r> \} \, <var:G0> := <nat:4> \, \{ <var:h> = <var:r> \land <var:G0> = <nat:4> \} \end{eqnarray} Observing the following bit of code found in our series of instructions , \begin{eqnarray} \{ <var:h> = <var:r> \} \, <var:G0> := <nat:4> \, \{ <var:h> = <var:r> \land <var:G0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:4> ; <var:O> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:h> = <var:r> }} <def:poly> {{ <var:O> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:O> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 