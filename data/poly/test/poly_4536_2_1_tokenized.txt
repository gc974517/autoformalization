\begin{document} \begin{theorem} Consider the following list of instructions as follows \begin{verbatim} <var:H0> := <nat:3> ; <var:X> := <var:H0> \end{verbatim} Allow that we have $ <var:K> = <var:w> $ , given all natural numbers $ <var:w> $ , before the execution of this code segment , it holds that we have $ <var:X> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is shown through typical Hoare reasoning . Immediately after , the variable update code \verb | <var:H0> := <nat:3> ; | . This command advances the condition $ \{ <var:K> = <var:w> \} $ into $ \{ <var:K> = <var:w> \land <var:H0> = <nat:3> \} $ . Moving on to the proceeding command contained in the segment of code , the variable assignmet code letting $ <var:H0$ into $ <var:X>$ . This line forwards $ \{ <var:K> = <var:w> \land <var:H0> = <nat:3> \} $ as the condition $ \{ <var:K> = <var:w> \land <var:X> = <nat:3> \} $ . This is deduced with the assignment rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:K> = <var:w> }} <var:H0> := <nat:3> ; <var:X> := <var:H0> {{ <var:X> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:w> /\ <var:X> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 