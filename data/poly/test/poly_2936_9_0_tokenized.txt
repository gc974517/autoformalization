\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:6> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:e> ; <var:S2> := <nat:5> ; <var:S2> := <var:S2> * <var:e> ; <var:S2> := <var:S2> * <var:e> ; <var:s> := <var:S2> ; <var:s> := <var:s> + <var:S1> ; <var:s> := <var:s> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:e> = <var:W> $ ahead of executing our list of commands it must be that we have $ <var:s> = <nat:5> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + <nat:6> $ when list of commands is done executing . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:e> = <var:W> \} \\ <var:S0> := <nat:6> ; \\ \{ <var:e> = <var:W> \land <var:S0> = <nat:6> \} \\ <var:S1> := <nat:3> ; \\ \{ <var:e> = <var:W> \land <var:S0> = <nat:6> \land <var:S1> = <nat:3> \} \\ <var:S1> := <var:S1> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:S0> = <nat:6> \land <var:S1> = <nat:3> \cdot <var:W> \} \\ <var:S2> := <nat:5> ; \\ \{ <var:e> = <var:W> \land <var:S0> = <nat:6> \land <var:S1> = <nat:3> \cdot <var:W> \land <var:S2> = <nat:5> \} \\ <var:S2> := <var:S2> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:S0> = <nat:6> \land <var:S1> = <nat:3> \cdot <var:W> \land <var:S2> = <nat:5> \cdot <var:W> \} \\ <var:S2> := <var:S2> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:S0> = <nat:6> \land <var:S1> = <nat:3> \cdot <var:W> \land <var:S2> = <nat:5> \cdot <var:W> ^ <nat:2> \} \\ <var:s> := <var:S2> ; \\ \{ <var:e> = <var:W> \land <var:S0> = <nat:6> \land <var:S1> = <nat:3> \cdot <var:W> \land <var:s> = <nat:5> \cdot <var:W> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:S1> ; \\ \{ <var:e> = <var:W> \land <var:S0> = <nat:6> \land <var:s> = <nat:5> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> \} \\ <var:s> := <var:s> + <var:S0> \\ \{ <var:e> = <var:W> \land <var:s> = <nat:5> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:6> \} \end{eqnarray} Given the preceding argument , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:6> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:e> ; <var:S2> := <nat:5> ; <var:S2> := <var:S2> * <var:e> ; <var:S2> := <var:S2> * <var:e> ; <var:s> := <var:S2> ; <var:s> := <var:s> + <var:S1> ; <var:s> := <var:s> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:e> = <var:W> }} <def:poly> {{ <var:s> = <nat:5> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:3> * <var:W> /\ <var:S2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:3> * <var:W> /\ <var:S2> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:3> * <var:W> /\ <var:S2> = <nat:5> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:3> * <var:W> /\ <var:s> = <nat:5> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:S0> = <nat:6> /\ <var:s> = <nat:5> * <var:W> ^ <nat:2> + <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:s> = <nat:5> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 