\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:n> := <nat:3> ; <var:n> := <nat:3> + <var:n> * <var:N> ; <var:n> := <nat:3> + <var:n> * <var:N> ; <var:n> := <nat:3> + <var:n> * <var:N> ; <var:n> := <nat:2> + <var:n> * <var:N> ; <var:n> := <nat:2> + <var:n> * <var:N> ; <var:n> := <nat:1> + <var:n> * <var:N> ; <var:n> := <nat:4> + <var:n> * <var:N> \end{verbatim} Allowing it to hold that $ <var:N> = <var:a> $ ( for every positive coefficients $ <var:a> $ ) before interpreting the series of instructions it follows that we have $ <var:n> = <nat:3> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be accomplished through the below decorated set of commands . \begin{eqnarray} \{ <var:N> = <var:a> \} \\ <var:n> := <nat:3> ; \\ \{ <var:N> = <var:a> \land <var:n> = <nat:3> \} \\ <var:n> := <nat:3> + <var:n> * <var:N> ; \\ \{ <var:N> = <var:a> \land <var:n> = <nat:3> \times <var:a> + <nat:3> \} \\ <var:n> := <nat:3> + <var:n> * <var:N> ; \\ \{ <var:N> = <var:a> \land <var:n> = <nat:3> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:3> \} \\ <var:n> := <nat:3> + <var:n> * <var:N> ; \\ \{ <var:N> = <var:a> \land <var:n> = <nat:3> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:3> \} \\ <var:n> := <nat:2> + <var:n> * <var:N> ; \\ \{ <var:N> = <var:a> \land <var:n> = <nat:3> \times <var:a> ^ <nat:4> + <nat:3> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:2> \} \\ <var:n> := <nat:2> + <var:n> * <var:N> ; \\ \{ <var:N> = <var:a> \land <var:n> = <nat:3> \times <var:a> ^ <nat:5> + <nat:3> \times <var:a> ^ <nat:4> + <nat:3> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:2> \} \\ <var:n> := <nat:1> + <var:n> * <var:N> ; \\ \{ <var:N> = <var:a> \land <var:n> = <nat:3> \times <var:a> ^ <nat:6> + <nat:3> \times <var:a> ^ <nat:5> + <nat:3> \times <var:a> ^ <nat:4> + <nat:3> \times <var:a> ^ <nat:3> + <nat:2> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:1> \} \\ <var:n> := <nat:4> + <var:n> * <var:N> \\ \{ <var:N> = <var:a> \land <var:n> = <nat:3> \times <var:a> ^ <nat:7> + <nat:3> \times <var:a> ^ <nat:6> + <nat:3> \times <var:a> ^ <nat:5> + <nat:3> \times <var:a> ^ <nat:4> + <nat:2> \times <var:a> ^ <nat:3> + <nat:2> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:4> \} \end{eqnarray} The application of Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:N> = <var:a> }} <var:n> := <nat:3> ; <var:n> := <nat:3> + <var:n> * <var:N> ; <var:n> := <nat:3> + <var:n> * <var:N> ; <var:n> := <nat:3> + <var:n> * <var:N> ; <var:n> := <nat:2> + <var:n> * <var:N> ; <var:n> := <nat:2> + <var:n> * <var:N> ; <var:n> := <nat:1> + <var:n> * <var:N> ; <var:n> := <nat:4> + <var:n> * <var:N> {{ <var:n> = <nat:3> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:n> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:n> = <nat:3> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:n> = <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:n> = <nat:3> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:n> = <nat:3> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:n> = <nat:3> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:n> = <nat:3> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:n> = <nat:3> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 