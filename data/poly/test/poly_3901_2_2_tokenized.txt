\begin{document} \begin{theorem} Define a list of instructions as follows \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:1> + <var:d> * <var:S> \end{verbatim} Assuming $ <var:S> = <var:z> $ before evaluating the program , it must be that we see $ <var:d> = <nat:4> * <var:z> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the code is demonstrated by usual Hoare reasoning . Looking at the following line found in our set of commands , we see the assignment command binding $ <nat:4> $ into $ <var:d>$ . This line redefines the condition $ \{ <var:S> = <var:z> \} $ to $ \{ <var:S> = <var:z> \land <var:d> = <nat:4> \} $ . Jumping to the next line of code in the list of instructions , the environment update statement binding $ <nat:1> + <var:d> * <var:S$ toward $ <var:d>$ . This forwards the condition $ \{ <var:S> = <var:z> \land <var:d> = <nat:4> \} $ to $ \{ <var:S> = <var:z> \land <var:d> = <nat:4> \cdot <var:z> + <nat:1> \} $ . This is known to be sound through the assignment law in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:S> = <var:z> }} <var:d> := <nat:4> ; <var:d> := <nat:1> + <var:d> * <var:S> {{ <var:d> = <nat:4> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:d> = <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 