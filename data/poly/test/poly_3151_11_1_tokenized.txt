\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:v1> := <var:z> ; <var:v2> := <var:v1> * <var:z> ; <var:v3> := <var:v2> * <var:z> ; <var:v0> := <nat:8> ; <var:v1> := <var:v1> * <nat:7> ; <var:v2> := <var:v2> * <nat:5> ; <var:v3> := <var:v3> * <nat:4> ; <var:B> := <var:v3> <var:B> := <var:B> + <var:v2> <var:B> := <var:B> + <var:v1> <var:B> := <var:B> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:z> = <var:T> $ ahead of executing our code then we see $ <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> $ after list of commands executes . \end{theorem} \begin{proof} Proving correctness for the code segment is given by Hoare reasoning . Now , the binding command binding $ <var:z> $ into $ <var:v1>$ . This command takes the condition $ \{ <var:z> = <var:T> \} $ to $ \{ <var:z> = <var:T> \land <var:v1> = <var:T> \} $ . Advancing on , we see the assignment command \verb | <var:v2> := <var:v1> * <var:z> ; | . This redefines $ \{ <var:z> = <var:T> \land <var:v1> = <var:T> \} $ into the postcondition $ \{ <var:z> = <var:T> \land <var:v1> = <var:T> \land <var:v2> = <var:T> ^ <nat:2> \} $ . This is rigorously given with the assignment law defined by typical Hoare reasoning . Moving on to the next step , we have the variable binding code assigning $ <var:v2> * <var:z> $ toward $ <var:v3>$ . This advances $ \{ <var:z> = <var:T> \land <var:v1> = <var:T> \land <var:v2> = <var:T> ^ <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:T> \land <var:v1> = <var:T> \land <var:v2> = <var:T> ^ <nat:2> \land <var:v3> = <var:T> ^ <nat:3> \} $ . Advancing on , we see the variable binding command giving $ <nat:8> $ toward $ <var:v0>$ . This command advances the precondition $ \{ <var:z> = <var:T> \land <var:v1> = <var:T> \land <var:v2> = <var:T> ^ <nat:2> \land <var:v3> = <var:T> ^ <nat:3> \} $ as the postcondition $ \{ <var:z> = <var:T> \land <var:v1> = <var:T> \land <var:v2> = <var:T> ^ <nat:2> \land <var:v3> = <var:T> ^ <nat:3> \land <var:v0> = <nat:8> \} $ . Taking a look at the proceeding piece of code in our list of instructions , the variable update code defining $ <var:v1> * <nat:7> $ toward $ <var:v1>$ . This advances $ \{ <var:z> = <var:T> \land <var:v1> = <var:T> \land <var:v2> = <var:T> ^ <nat:2> \land <var:v3> = <var:T> ^ <nat:3> \land <var:v0> = <nat:8> \} $ into the condition $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v2> = <var:T> ^ <nat:2> \land <var:v3> = <var:T> ^ <nat:3> \land <var:v0> = <nat:8> \} $ . Going forward , the binding line \verb | <var:v2> := <var:v2> * <nat:5> ; | . This code transfers the precondition $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v2> = <var:T> ^ <nat:2> \land <var:v3> = <var:T> ^ <nat:3> \land <var:v0> = <nat:8> \} $ into the postcondition $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v2> = <nat:5> * <var:T> ^ <nat:2> \land <var:v3> = <var:T> ^ <nat:3> \land <var:v0> = <nat:8> \} $ . This is ensured through the assignment rule defined by standard Hoare logic . Looking at the following piece of code seen in our series of instructions , we see the variable assignmet statement defining $ <var:v3> * <nat:4> $ into $ <var:v3>$ . This code moves $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v2> = <nat:5> * <var:T> ^ <nat:2> \land <var:v3> = <var:T> ^ <nat:3> \land <var:v0> = <nat:8> \} $ to the postcondition $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v2> = <nat:5> * <var:T> ^ <nat:2> \land <var:v3> = <nat:4> * <var:T> ^ <nat:3> \land <var:v0> = <nat:8> \} $ . Advancing to the next piece of code in the series of commands , we see the variable assignmet command yielding $ <var:v3$ to $ <var:B>$ . This code takes the condition $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v2> = <nat:5> * <var:T> ^ <nat:2> \land <var:v3> = <nat:4> * <var:T> ^ <nat:3> \land <var:v0> = <nat:8> \} $ toward the postcondition $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v2> = <nat:5> * <var:T> ^ <nat:2> \land <var:v0> = <nat:8> \land <var:B> = <nat:4> * <var:T> ^ <nat:3> \} $ . Focusing on the upcoming line of code in our segment of code , the environment update command \verb | <var:B> := <var:B> + <var:v2> | . This transfers $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v2> = <nat:5> * <var:T> ^ <nat:2> \land <var:v0> = <nat:8> \land <var:B> = <nat:4> * <var:T> ^ <nat:3> \} $ as $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v0> = <nat:8> \land <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> \} $ . This is known to be sound with the assignment inference rule obtained from typical Hoare logic . Keeping momentum , we have the variable assignmet line \verb | <var:B> := <var:B> + <var:v1> | . This line takes the precondition $ \{ <var:z> = <var:T> \land <var:v1> = <nat:7> * <var:T> \land <var:v0> = <nat:8> \land <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:T> \land <var:v0> = <nat:8> \land <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> \} $ . This is shown to be logically sound through the assignment rule defined in standard Hoare reasoning . Honing in on the following statement contained in the series of instructions , the environment update line yielding $ <var:B> + <var:v0$ as $ <var:B>$ . This line forwards $ \{ <var:z> = <var:T> \land <var:v0> = <nat:8> \land <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> \} $ into $ \{ <var:z> = <var:T> \land <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> \} $ . This is known to be sound by the assignment law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:z> ; <var:v2> := <var:v1> * <var:z> ; <var:v3> := <var:v2> * <var:z> ; <var:v0> := <nat:8> ; <var:v1> := <var:v1> * <nat:7> ; <var:v2> := <var:v2> * <nat:5> ; <var:v3> := <var:v3> * <nat:4> ; <var:B> := <var:v3> <var:B> := <var:B> + <var:v2> <var:B> := <var:B> + <var:v1> <var:B> := <var:B> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:z> = <var:T> }} <def:poly> {{ <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <var:T> /\ <var:v2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <var:T> /\ <var:v2> = <var:T> ^ <nat:2> /\ <var:v3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <var:T> /\ <var:v2> = <var:T> ^ <nat:2> /\ <var:v3> = <var:T> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <nat:7> * <var:T> /\ <var:v2> = <var:T> ^ <nat:2> /\ <var:v3> = <var:T> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <nat:7> * <var:T> /\ <var:v2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:v3> = <var:T> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <nat:7> * <var:T> /\ <var:v2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <nat:7> * <var:T> /\ <var:v2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:v0> = <nat:8> /\ <var:B> = <nat:4> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v1> = <nat:7> * <var:T> /\ <var:v0> = <nat:8> /\ <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:v0> = <nat:8> /\ <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 