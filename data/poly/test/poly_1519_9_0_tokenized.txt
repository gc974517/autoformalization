\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:8> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:n> ; <var:H2> := <nat:1> ; <var:H2> := <var:H2> * <var:n> ; <var:H2> := <var:H2> * <var:n> ; <var:v> := <var:H2> ; <var:v> := <var:v> + <var:H1> ; <var:v> := <var:v> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Assume it to be that $ <var:n> = <var:e> $ before interpreting our segment of code , it must be that we see $ <var:v> = <nat:1> \times <var:e> ^ <nat:2> + <nat:5> \times <var:e> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:e> \} \\ <var:H0> := <nat:8> ; \\ \{ <var:n> = <var:e> \land <var:H0> = <nat:8> \} \\ <var:H1> := <nat:5> ; \\ \{ <var:n> = <var:e> \land <var:H0> = <nat:8> \land <var:H1> = <nat:5> \} \\ <var:H1> := <var:H1> * <var:n> ; \\ \{ <var:n> = <var:e> \land <var:H0> = <nat:8> \land <var:H1> = <nat:5> \times <var:e> \} \\ <var:H2> := <nat:1> ; \\ \{ <var:n> = <var:e> \land <var:H0> = <nat:8> \land <var:H1> = <nat:5> \times <var:e> \land <var:H2> = <nat:1> \} \\ <var:H2> := <var:H2> * <var:n> ; \\ \{ <var:n> = <var:e> \land <var:H0> = <nat:8> \land <var:H1> = <nat:5> \times <var:e> \land <var:H2> = <nat:1> \times <var:e> \} \\ <var:H2> := <var:H2> * <var:n> ; \\ \{ <var:n> = <var:e> \land <var:H0> = <nat:8> \land <var:H1> = <nat:5> \times <var:e> \land <var:H2> = <nat:1> \times <var:e> ^ <nat:2> \} \\ <var:v> := <var:H2> ; \\ \{ <var:n> = <var:e> \land <var:H0> = <nat:8> \land <var:H1> = <nat:5> \times <var:e> \land <var:v> = <nat:1> \times <var:e> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:H1> ; \\ \{ <var:n> = <var:e> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:e> ^ <nat:2> + <nat:5> \times <var:e> \} \\ <var:v> := <var:v> + <var:H0> \\ \{ <var:n> = <var:e> \land <var:v> = <nat:1> \times <var:e> ^ <nat:2> + <nat:5> \times <var:e> + <nat:8> \} \end{eqnarray} The application of standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H0> := <nat:8> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:n> ; <var:H2> := <nat:1> ; <var:H2> := <var:H2> * <var:n> ; <var:H2> := <var:H2> * <var:n> ; <var:v> := <var:H2> ; <var:v> := <var:v> + <var:H1> ; <var:v> := <var:v> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:n> = <var:e> }} <def:poly> {{ <var:v> = <nat:1> * <var:e> ^ <nat:2> + <nat:5> * <var:e> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:5> * <var:e> /\ <var:H2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:5> * <var:e> /\ <var:H2> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:5> * <var:e> /\ <var:H2> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:5> * <var:e> /\ <var:v> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:H0> = <nat:8> /\ <var:v> = <nat:1> * <var:e> ^ <nat:2> + <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:v> = <nat:1> * <var:e> ^ <nat:2> + <nat:5> * <var:e> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 