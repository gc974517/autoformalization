\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:1> ; <var:B> := <var:O0> \end{verbatim} Assuming given some integers $ <var:A> $ that we have $ <var:v> = <var:A> $ prior to executing this code segment , it follows that we see $ <var:B> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the set of commands can be accomplished using usual Hoare reasoning . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:A> \} & <var:O0> := <nat:1> & \{ <var:v> = <var:A> \land <var:O0> = <nat:1> \} \\ \{ <var:v> = <var:A> \land <var:O0> = <nat:1> \} & <var:B> := <var:O0& \{ <var:v> = <var:A> \land <var:B> = <nat:1> \} \end{tabular} This is deduced using the binding inference rule given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:v> = <var:A> }} <var:O0> := <nat:1> ; <var:B> := <var:O0> {{ <var:B> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:B> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 