\begin{document} \begin{theorem} Consider the following series of instructions : \begin{verbatim} <var:T1> := <var:i> ; <var:T2> := <var:T1> * <var:i> ; <var:T0> := <nat:7> ; <var:T2> := <var:T2> * <nat:9> ; <var:N> := <var:T2> <var:N> := <var:N> + <var:T0> \end{verbatim} Assuming it to hold that $ <var:i> = <var:V> $ before running our set of commands , it follows that we have $ <var:N> = <nat:9> \times <var:V> ^ <nat:2> + <nat:7> $ once series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:V> \} \\ <var:T1> := <var:i> ; \\ \{ <var:i> = <var:V> \land <var:T1> = <var:V> \} \\ <var:T2> := <var:T1> * <var:i> ; \\ \{ <var:i> = <var:V> \land <var:T1> = <var:V> \land <var:T2> = <var:V> ^ <nat:2> \} \\ <var:T0> := <nat:7> ; \\ \{ <var:i> = <var:V> \land <var:T1> = <var:V> \land <var:T2> = <var:V> ^ <nat:2> \land <var:T0> = <nat:7> \} \\ <var:T2> := <var:T2> * <nat:9> ; \\ \{ <var:i> = <var:V> \land <var:T1> = <var:V> \land <var:T2> = <nat:9> \cdot <var:V> ^ <nat:2> \land <var:T0> = <nat:7> \} \\ <var:N> := <var:T2> \\ \{ <var:i> = <var:V> \land <var:T1> = <var:V> \land <var:T0> = <nat:7> \land <var:N> = <nat:9> \cdot <var:V> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:T0> \\ \{ <var:i> = <var:V> \land <var:N> = <nat:9> \cdot <var:V> ^ <nat:2> + <nat:7> \} \end{eqnarray} Using Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:i> = <var:V> }} <var:T1> := <var:i> ; <var:T2> := <var:T1> * <var:i> ; <var:T0> := <nat:7> ; <var:T2> := <var:T2> * <nat:9> ; <var:N> := <var:T2> <var:N> := <var:N> + <var:T0> {{ <var:N> = <nat:9> * <var:V> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:T1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:T1> = <var:V> /\ <var:T2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:T1> = <var:V> /\ <var:T2> = <var:V> ^ <nat:2> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:T1> = <var:V> /\ <var:T2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:T1> = <var:V> /\ <var:T0> = <nat:7> /\ <var:N> = <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:N> = <nat:9> * <var:V> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 