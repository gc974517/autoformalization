\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:A> ; <var:H> := <var:q1> ; <var:H> := <var:H> + <var:q0> \end{verbatim} Assume that we have $ <var:A> = <var:a> $ , given all positive coefficients $ <var:a> $ , prior to evaluating this program then we have $ <var:H> = <nat:1> \times <var:a> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:A> = <var:a> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:A> = <var:a> \land <var:q0> = <nat:3> \} \\ <var:q1> := <nat:1> ; \\ \{ <var:A> = <var:a> \land <var:q0> = <nat:3> \land <var:q1> = <nat:1> \} \\ <var:q1> := <var:q1> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:q0> = <nat:3> \land <var:q1> = <nat:1> \times <var:a> \} \\ <var:H> := <var:q1> ; \\ \{ <var:A> = <var:a> \land <var:q0> = <nat:3> \land <var:H> = <nat:1> \times <var:a> \} \\ <var:H> := <var:H> + <var:q0> \\ \{ <var:A> = <var:a> \land <var:H> = <nat:1> \times <var:a> + <nat:3> \} \end{eqnarray} Therefore , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:A> = <var:a> }} <var:q0> := <nat:3> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:A> ; <var:H> := <var:q1> ; <var:H> := <var:H> + <var:q0> {{ <var:H> = <nat:1> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:q0> = <nat:3> /\ <var:H> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:H> = <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 