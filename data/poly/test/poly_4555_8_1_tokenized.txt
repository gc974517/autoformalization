\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:j> ; <var:c2> := <var:c1> * <var:j> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:4> ; <var:c2> := <var:c2> * <nat:4> ; <var:T> := <var:c2> <var:T> := <var:T> + <var:c1> <var:T> := <var:T> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:j> = <var:v> $ prior to interpreting this segment of code then we have $ <var:T> = <nat:4> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this program can be done by typical Hoare reasoning . Focusing on the next line seen in our program , we see the binding line binding $ <var:j> $ as $ <var:c1>$ . This line transfers $ \{ <var:j> = <var:v> \} $ into the postcondition $ \{ <var:j> = <var:v> \land <var:c1> = <var:v> \} $ . This is given through the assignment scheme from usual Hoare techniques . Paying attention to the subsequent piece of code contained in our segment of code , the binding statement \verb | <var:c2> := <var:c1> * <var:j> ; | . This redefines the precondition $ \{ <var:j> = <var:v> \land <var:c1> = <var:v> \} $ to the condition $ \{ <var:j> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \} $ . This is ensured with the assignment law from typical Hoare reasoning . Moving on to the next bit of code found in the program , we have the variable binding line defining $ <nat:3> $ toward $ <var:c0>$ . This line redefines the precondition $ \{ <var:j> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \} $ to the postcondition $ \{ <var:j> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c0> = <nat:3> \} $ . This is guaranteed using the assignment scheme defined in typical Hoare reasoning . Keeping momentum , we have the variable assignmet statement \verb | <var:c1> := <var:c1> * <nat:4> ; | . This advances the condition $ \{ <var:j> = <var:v> \land <var:c1> = <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c0> = <nat:3> \} $ into $ \{ <var:j> = <var:v> \land <var:c1> = <nat:4> \times <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c0> = <nat:3> \} $ . This is deduced using the assignment rule given by Hoare techniques . Stepping forward , we have the variable update line \verb | <var:c2> := <var:c2> * <nat:4> ; | . This code redefines $ \{ <var:j> = <var:v> \land <var:c1> = <nat:4> \times <var:v> \land <var:c2> = <var:v> ^ <nat:2> \land <var:c0> = <nat:3> \} $ toward the condition $ \{ <var:j> = <var:v> \land <var:c1> = <nat:4> \times <var:v> \land <var:c2> = <nat:4> \times <var:v> ^ <nat:2> \land <var:c0> = <nat:3> \} $ . Advancing on , we have the variable update command \verb | <var:T> := <var:c2> | . This transfers the precondition $ \{ <var:j> = <var:v> \land <var:c1> = <nat:4> \times <var:v> \land <var:c2> = <nat:4> \times <var:v> ^ <nat:2> \land <var:c0> = <nat:3> \} $ into $ \{ <var:j> = <var:v> \land <var:c1> = <nat:4> \times <var:v> \land <var:c0> = <nat:3> \land <var:T> = <nat:4> \times <var:v> ^ <nat:2> \} $ . This is deduced through the assignment law from usual Hoare logic . Immediately following , the binding statement \verb | <var:T> := <var:T> + <var:c1> | . This redefines the precondition $ \{ <var:j> = <var:v> \land <var:c1> = <nat:4> \times <var:v> \land <var:c0> = <nat:3> \land <var:T> = <nat:4> \times <var:v> ^ <nat:2> \} $ toward the postcondition $ \{ <var:j> = <var:v> \land <var:c0> = <nat:3> \land <var:T> = <nat:4> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> \} $ . Moving on , the variable update line \verb | <var:T> := <var:T> + <var:c0> | . This forwards the precondition $ \{ <var:j> = <var:v> \land <var:c0> = <nat:3> \land <var:T> = <nat:4> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> \} $ to the postcondition $ \{ <var:j> = <var:v> \land <var:T> = <nat:4> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c1> := <var:j> ; <var:c2> := <var:c1> * <var:j> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:4> ; <var:c2> := <var:c2> * <nat:4> ; <var:T> := <var:c2> <var:T> := <var:T> + <var:c1> <var:T> := <var:T> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:j> = <var:v> }} <def:poly> {{ <var:T> = <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:c1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:c1> = <var:v> /\ <var:c2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:c1> = <var:v> /\ <var:c2> = <var:v> ^ <nat:2> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:c1> = <nat:4> * <var:v> /\ <var:c2> = <var:v> ^ <nat:2> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:c1> = <nat:4> * <var:v> /\ <var:c2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:c1> = <nat:4> * <var:v> /\ <var:c0> = <nat:3> /\ <var:T> = <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:c0> = <nat:3> /\ <var:T> = <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:T> = <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 