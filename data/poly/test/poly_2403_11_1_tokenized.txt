\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:u> ; <var:O2> := <var:O1> * <var:u> ; <var:O3> := <var:O2> * <var:u> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:5> ; <var:O3> := <var:O3> * <nat:7> ; <var:R> := <var:O3> <var:R> := <var:R> + <var:O2> <var:R> := <var:R> + <var:O1> <var:R> := <var:R> + <var:O0> \end{verbatim} Allow that $ <var:u> = <var:s> $ given every positive coefficients $ <var:s> $ ahead of running the code , then we have $ <var:R> = <nat:7> \cdot <var:s> ^ <nat:3> + <nat:5> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:2> $ when set of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be accomplished with typical Hoare reasoning . Moving onward , \begin{eqnarray} \{ <var:u> = <var:s> \} \, <var:O1> := <var:u> \, \{ <var:u> = <var:s> \land <var:O1> = <var:s> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <var:s> \} \, <var:O2> := <var:O1> * <var:u> \, \{ <var:u> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \} \, <var:O3> := <var:O2> * <var:u> \, \{ <var:u> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \} \, <var:O0> := <nat:2> \, \{ <var:u> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O0> = <nat:2> \} \, <var:O1> := <var:O1> * <nat:3> \, \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O0> = <nat:2> \} \, <var:O2> := <var:O2> * <nat:5> \, \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:5> * <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:5> * <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O0> = <nat:2> \} \, <var:O3> := <var:O3> * <nat:7> \, \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:5> * <var:s> ^ <nat:2> \land <var:O3> = <nat:7> * <var:s> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:5> * <var:s> ^ <nat:2> \land <var:O3> = <nat:7> * <var:s> ^ <nat:3> \land <var:O0> = <nat:2> \} \, <var:R> := <var:O3\, \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:5> * <var:s> ^ <nat:2> \land <var:O0> = <nat:2> \land <var:R> = <nat:7> * <var:s> ^ <nat:3> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:5> * <var:s> ^ <nat:2> \land <var:O0> = <nat:2> \land <var:R> = <nat:7> * <var:s> ^ <nat:3> \} \, <var:R> := <var:R> + <var:O2\, \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O0> = <nat:2> \land <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> \} \\ \{ <var:u> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O0> = <nat:2> \land <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> \} \, <var:R> := <var:R> + <var:O1\, \{ <var:u> = <var:s> \land <var:O0> = <nat:2> \land <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> + <nat:3> * <var:s> \} \\ \{ <var:u> = <var:s> \land <var:O0> = <nat:2> \land <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> + <nat:3> * <var:s> \} \, <var:R> := <var:R> + <var:O0\, \{ <var:u> = <var:s> \land <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:u> = <var:s> }} <var:O1> := <var:u> ; <var:O2> := <var:O1> * <var:u> ; <var:O3> := <var:O2> * <var:u> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:5> ; <var:O3> := <var:O3> * <nat:7> ; <var:R> := <var:O3> <var:R> := <var:R> + <var:O2> <var:R> := <var:R> + <var:O1> <var:R> := <var:R> + <var:O0> {{ <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <var:s> /\ <var:O2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <var:s> /\ <var:O2> = <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <var:s> /\ <var:O2> = <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <nat:5> * <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <nat:5> * <var:s> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:s> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <nat:5> * <var:s> ^ <nat:2> /\ <var:O0> = <nat:2> /\ <var:R> = <nat:7> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O0> = <nat:2> /\ <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:O0> = <nat:2> /\ <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> + <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:R> = <nat:7> * <var:s> ^ <nat:3> + <nat:5> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 