\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:8> ; <var:t> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:L> = <var:T> $ before running the series of instructions , it follows that $ <var:t> = <nat:8> $ when list of commands is done executing . \end{theorem} \begin{proof} The argument for the set of instructions can be given using standard Hoare techniques . Keeping momentum , \begin{eqnarray} \{ <var:L> = <var:T> \} \, <var:c0> := <nat:8> \, \{ <var:L> = <var:T> \land <var:c0> = <nat:8> \} \end{eqnarray} This is given with the variable update scheme given by usual Hoare logic . Immediately following , we have \begin{eqnarray} \{ <var:L> = <var:T> \} \, <var:c0> := <nat:8> \, \{ <var:L> = <var:T> \land <var:c0> = <nat:8> \} \end{eqnarray} This is shown to be logically sound by the variable update inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:8> ; <var:t> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:L> = <var:T> }} <def:poly> {{ <var:t> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:t> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 