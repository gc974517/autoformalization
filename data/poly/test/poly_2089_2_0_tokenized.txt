\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:m0> := <nat:9> ; <var:f> := <var:m0> \end{verbatim} Given that we have $ <var:E> = <var:b> $ ( given all $ <var:b> \in \mathbb{Z}^+ $ ) ahead of the evaluation of the segment of code , it follows that we see $ <var:f> = <nat:9> $ . \end{theorem} \begin{proof} The argument for the program is shown by typical Hoare reasoning . Advancing to the proceeding command seen in our segment of code , \begin{eqnarray} \{ <var:E> = <var:b> \} \, <var:m0> := <nat:9> \, \{ <var:E> = <var:b> \land <var:m0> = <nat:9> \} \end{eqnarray} Now , we have \begin{eqnarray} \{ <var:E> = <var:b> \} \, <var:m0> := <nat:9> \, \{ <var:E> = <var:b> \land <var:m0> = <nat:9> \} \end{eqnarray} This is deduced by the binding inference rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:E> = <var:b> }} <var:m0> := <nat:9> ; <var:f> := <var:m0> {{ <var:f> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:b> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:b> /\ <var:f> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 