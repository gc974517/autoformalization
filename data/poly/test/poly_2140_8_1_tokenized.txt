\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c1> := <var:X> ; <var:c2> := <var:c1> * <var:X> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:8> ; <var:c2> := <var:c2> * <nat:2> ; <var:H> := <var:c2> <var:H> := <var:H> + <var:c1> <var:H> := <var:H> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:X> = <var:V> $ --- taking natural numbers $ <var:V> $ --- before interpreting this series of commands it must be that we see $ <var:H> = <nat:2> \cdot <var:V> ^ <nat:2> + <nat:8> \cdot <var:V> + <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques gives us : \begin{eqnarray} \{ <var:X> = <var:V> \} \\ <var:c1> := <var:X> ; \\ \{ <var:X> = <var:V> \land <var:c1> = <var:V> \} \\ <var:c2> := <var:c1> * <var:X> ; \\ \{ <var:X> = <var:V> \land <var:c1> = <var:V> \land <var:c2> = <var:V> ^ <nat:2> \} \end{eqnarray} Continuing evaluating this set of commands produces : \begin{eqnarray} <var:c0> := <nat:5> ; \\ \{ <var:X> = <var:V> \land <var:c1> = <var:V> \land <var:c2> = <var:V> ^ <nat:2> \land <var:c0> = <nat:5> \} \\ <var:c1> := <var:c1> * <nat:8> ; \\ \{ <var:X> = <var:V> \land <var:c1> = <nat:8> * <var:V> \land <var:c2> = <var:V> ^ <nat:2> \land <var:c0> = <nat:5> \} \\ <var:c2> := <var:c2> * <nat:2> ; \\ \{ <var:X> = <var:V> \land <var:c1> = <nat:8> * <var:V> \land <var:c2> = <nat:2> * <var:V> ^ <nat:2> \land <var:c0> = <nat:5> \} \\ <var:H> := <var:c2> \\ \{ <var:X> = <var:V> \land <var:c1> = <nat:8> * <var:V> \land <var:c0> = <nat:5> \land <var:H> = <nat:2> * <var:V> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:c1> \\ \{ <var:X> = <var:V> \land <var:c0> = <nat:5> \land <var:H> = <nat:2> * <var:V> ^ <nat:2> + <nat:8> * <var:V> \} \\ <var:H> := <var:H> + <var:c0> \\ \{ <var:X> = <var:V> \land <var:H> = <nat:2> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:5> \} \end{eqnarray} Considering the above , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c1> := <var:X> ; <var:c2> := <var:c1> * <var:X> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:8> ; <var:c2> := <var:c2> * <nat:2> ; <var:H> := <var:c2> <var:H> := <var:H> + <var:c1> <var:H> := <var:H> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:X> = <var:V> }} <def:poly> {{ <var:H> = <nat:2> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:c1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:c1> = <var:V> /\ <var:c2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:c1> = <var:V> /\ <var:c2> = <var:V> ^ <nat:2> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:c1> = <nat:8> * <var:V> /\ <var:c2> = <var:V> ^ <nat:2> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:c1> = <nat:8> * <var:V> /\ <var:c2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:c1> = <nat:8> * <var:V> /\ <var:c0> = <nat:5> /\ <var:H> = <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:c0> = <nat:5> /\ <var:H> = <nat:2> * <var:V> ^ <nat:2> + <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:H> = <nat:2> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 