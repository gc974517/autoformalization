\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:m> ; <var:U2> := <var:U1> * <var:m> ; <var:U3> := <var:U2> * <var:m> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:8> ; <var:U3> := <var:U3> * <nat:1> ; <var:w> := <var:U3> <var:w> := <var:w> + <var:U2> <var:w> := <var:w> + <var:U1> <var:w> := <var:w> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:m> = <var:K> $ ahead of running the series of commands , it must be that we see $ <var:w> = <nat:1> \times <var:K> ^ <nat:3> + <nat:8> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:7> $ once set of commands has executed . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:m> = <var:K> \} \\ <var:U1> := <var:m> ; \\ \{ <var:m> = <var:K> \land <var:U1> = <var:K> \} \\ <var:U2> := <var:U1> * <var:m> ; \\ \{ <var:m> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:m> ; \\ \{ <var:m> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <var:K> ^ <nat:3> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:m> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <var:K> ^ <nat:3> \land <var:U0> = <nat:7> \} \\ <var:U1> := <var:U1> * <nat:1> ; \\ \{ <var:m> = <var:K> \land <var:U1> = <nat:1> * <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <var:K> ^ <nat:3> \land <var:U0> = <nat:7> \} \\ <var:U2> := <var:U2> * <nat:8> ; \\ \{ <var:m> = <var:K> \land <var:U1> = <nat:1> * <var:K> \land <var:U2> = <nat:8> * <var:K> ^ <nat:2> \land <var:U3> = <var:K> ^ <nat:3> \land <var:U0> = <nat:7> \} \\ <var:U3> := <var:U3> * <nat:1> ; \\ \{ <var:m> = <var:K> \land <var:U1> = <nat:1> * <var:K> \land <var:U2> = <nat:8> * <var:K> ^ <nat:2> \land <var:U3> = <nat:1> * <var:K> ^ <nat:3> \land <var:U0> = <nat:7> \} \\ <var:w> := <var:U3> \\ \{ <var:m> = <var:K> \land <var:U1> = <nat:1> * <var:K> \land <var:U2> = <nat:8> * <var:K> ^ <nat:2> \land <var:U0> = <nat:7> \land <var:w> = <nat:1> * <var:K> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:U2> \\ \{ <var:m> = <var:K> \land <var:U1> = <nat:1> * <var:K> \land <var:U0> = <nat:7> \land <var:w> = <nat:1> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:U1> \\ \{ <var:m> = <var:K> \land <var:U0> = <nat:7> \land <var:w> = <nat:1> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:1> * <var:K> \} \\ <var:w> := <var:w> + <var:U0> \\ \{ <var:m> = <var:K> \land <var:w> = <nat:1> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:7> \} \end{eqnarray} Given the preceding argument , the list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:m> ; <var:U2> := <var:U1> * <var:m> ; <var:U3> := <var:U2> * <var:m> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:8> ; <var:U3> := <var:U3> * <nat:1> ; <var:w> := <var:U3> <var:w> := <var:w> + <var:U2> <var:w> := <var:w> + <var:U1> <var:w> := <var:w> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:m> = <var:K> }} <def:poly> {{ <var:w> = <nat:1> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <var:K> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <var:K> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:8> * <var:K> ^ <nat:2> /\ <var:U3> = <var:K> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:8> * <var:K> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:K> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:8> * <var:K> ^ <nat:2> /\ <var:U0> = <nat:7> /\ <var:w> = <nat:1> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U0> = <nat:7> /\ <var:w> = <nat:1> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:U0> = <nat:7> /\ <var:w> = <nat:1> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:w> = <nat:1> * <var:K> ^ <nat:3> + <nat:8> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 