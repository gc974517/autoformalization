\begin{document} \begin{theorem} Define the following code segment as follows \begin{verbatim} <var:q0> := <nat:9> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:O> ; <var:L> := <var:q1> ; <var:L> := <var:L> + <var:q0> \end{verbatim} Assume , given natural numbers $ <var:S> $ , it to be that $ <var:O> = <var:S> $ ahead of interpreting this set of instructions it follows that $ <var:L> = <nat:7> * <var:S> + <nat:9> $ once code is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:S> \} \\ <var:q0> := <nat:9> ; \\ \{ <var:O> = <var:S> \land <var:q0> = <nat:9> \} \\ <var:q1> := <nat:7> ; \\ \{ <var:O> = <var:S> \land <var:q0> = <nat:9> \land <var:q1> = <nat:7> \} \\ <var:q1> := <var:q1> * <var:O> ; \\ \{ <var:O> = <var:S> \land <var:q0> = <nat:9> \land <var:q1> = <nat:7> * <var:S> \} \\ <var:L> := <var:q1> ; \\ \{ <var:O> = <var:S> \land <var:q0> = <nat:9> \land <var:L> = <nat:7> * <var:S> \} \\ <var:L> := <var:L> + <var:q0> \\ \{ <var:O> = <var:S> \land <var:L> = <nat:7> * <var:S> + <nat:9> \} \end{eqnarray} The application of typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:O> = <var:S> }} <var:q0> := <nat:9> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:O> ; <var:L> := <var:q1> ; <var:L> := <var:L> + <var:q0> {{ <var:L> = <nat:7> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:q0> = <nat:9> /\ <var:L> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L> = <nat:7> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 