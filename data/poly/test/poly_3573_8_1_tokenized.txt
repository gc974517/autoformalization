\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as \begin{verbatim} <var:G1> := <var:S> ; <var:G2> := <var:G1> * <var:S> ; <var:G0> := <nat:7> ; <var:G1> := <var:G1> * <nat:9> ; <var:G2> := <var:G2> * <nat:3> ; <var:P> := <var:G2> <var:P> := <var:P> + <var:G1> <var:P> := <var:P> + <var:G0> \end{verbatim} Assuming it to be that $ <var:S> = <var:I> $ before the evaluation of the list of commands then we see $ <var:P> = <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> + <nat:7> $ . \end{theorem} \begin{proof} The proof of this list of commands is given using usual Hoare reasoning . Moving forward , the environment update line defining $ <var:S> $ toward $ <var:G1>$ . This statement forwards the precondition $ \{ <var:S> = <var:I> \} $ into $ \{ <var:S> = <var:I> \land <var:G1> = <var:I> \} $ . This is known to be sound using the assignment law defined in usual Hoare logic . Now , the variable assignmet command defining $ <var:G1> * <var:S> $ toward $ <var:G2>$ . This transfers the precondition $ \{ <var:S> = <var:I> \land <var:G1> = <var:I> \} $ into the condition $ \{ <var:S> = <var:I> \land <var:G1> = <var:I> \land <var:G2> = <var:I> ^ <nat:2> \} $ . This is deduced through the assignment inference rule defined in usual Hoare techniques . Considering the following statement contained in our set of instructions , we have the environment update line \verb | <var:G0> := <nat:7> ; | . This code redefines the condition $ \{ <var:S> = <var:I> \land <var:G1> = <var:I> \land <var:G2> = <var:I> ^ <nat:2> \} $ to the condition $ \{ <var:S> = <var:I> \land <var:G1> = <var:I> \land <var:G2> = <var:I> ^ <nat:2> \land <var:G0> = <nat:7> \} $ . This is given through the assignment law obtained from usual Hoare logic . Moving forward , the binding command letting $ <var:G1> * <nat:9> $ toward $ <var:G1>$ . This takes the condition $ \{ <var:S> = <var:I> \land <var:G1> = <var:I> \land <var:G2> = <var:I> ^ <nat:2> \land <var:G0> = <nat:7> \} $ to the postcondition $ \{ <var:S> = <var:I> \land <var:G1> = <nat:9> \cdot <var:I> \land <var:G2> = <var:I> ^ <nat:2> \land <var:G0> = <nat:7> \} $ . This is rigorously given through the assignment rule in usual Hoare reasoning . Going to the next step , the variable binding statement \verb | <var:G2> := <var:G2> * <nat:3> ; | . This moves the condition $ \{ <var:S> = <var:I> \land <var:G1> = <nat:9> \cdot <var:I> \land <var:G2> = <var:I> ^ <nat:2> \land <var:G0> = <nat:7> \} $ as the condition $ \{ <var:S> = <var:I> \land <var:G1> = <nat:9> \cdot <var:I> \land <var:G2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:G0> = <nat:7> \} $ . This is known to be sound using the assignment law given by standard Hoare reasoning . Now , we have the variable binding command assigning $ <var:G2$ to $ <var:P>$ . This line redefines the condition $ \{ <var:S> = <var:I> \land <var:G1> = <nat:9> \cdot <var:I> \land <var:G2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:G0> = <nat:7> \} $ toward $ \{ <var:S> = <var:I> \land <var:G1> = <nat:9> \cdot <var:I> \land <var:G0> = <nat:7> \land <var:P> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ . Paying attention to the subsequent statement found in the list of instructions , we see the code \verb | <var:P> := <var:P> + <var:G1> | . This takes $ \{ <var:S> = <var:I> \land <var:G1> = <nat:9> \cdot <var:I> \land <var:G0> = <nat:7> \land <var:P> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ into the condition $ \{ <var:S> = <var:I> \land <var:G0> = <nat:7> \land <var:P> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> \} $ . Going forward , we see the variable binding command \verb | <var:P> := <var:P> + <var:G0> | . This transfers the condition $ \{ <var:S> = <var:I> \land <var:G0> = <nat:7> \land <var:P> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> \} $ toward the condition $ \{ <var:S> = <var:I> \land <var:P> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:S> = <var:I> }} <var:G1> := <var:S> ; <var:G2> := <var:G1> * <var:S> ; <var:G0> := <nat:7> ; <var:G1> := <var:G1> * <nat:9> ; <var:G2> := <var:G2> * <nat:3> ; <var:P> := <var:G2> <var:P> := <var:P> + <var:G1> <var:P> := <var:P> + <var:G0> {{ <var:P> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:G1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:G1> = <var:I> /\ <var:G2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:G1> = <var:I> /\ <var:G2> = <var:I> ^ <nat:2> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:G1> = <nat:9> * <var:I> /\ <var:G2> = <var:I> ^ <nat:2> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:G1> = <nat:9> * <var:I> /\ <var:G2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:G1> = <nat:9> * <var:I> /\ <var:G0> = <nat:7> /\ <var:P> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:G0> = <nat:7> /\ <var:P> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:I> /\ <var:P> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 