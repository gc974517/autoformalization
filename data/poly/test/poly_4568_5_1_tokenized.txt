\begin{document} \begin{theorem} Let the following segment of code as \begin{verbatim} <var:H1> := <var:s> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:3> ; <var:L> := <var:H1> <var:L> := <var:L> + <var:H0> \end{verbatim} Assume ( for some $ <var:T> \in \mathbb{Z}^+ $ ) that we have $ <var:s> = <var:T> $ prior to the evaluation of the list of commands it holds that we see $ <var:L> = <nat:3> * <var:T> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands can be shown through usual Hoare logic . Moving on to the next step , we see \begin{verbatim} { <var:s> = <var:T> } <var:H1> := <var:s> { <var:s> = <var:T> \land <var:H1> = <var:T> } { <var:s> = <var:T> \land <var:H1> = <var:T> } <var:H0> := <nat:3> { <var:s> = <var:T> \land <var:H1> = <var:T> \land <var:H0> = <nat:3> } \end{verbatim} Moving on , we see \begin{verbatim} { <var:s> = <var:T> } <var:H1> := <var:s> { <var:s> = <var:T> \land <var:H1> = <var:T> } \end{verbatim} Further , we see \begin{verbatim} { <var:s> = <var:T> } <var:H1> := <var:s> { <var:s> = <var:T> \land <var:H1> = <var:T> } \end{verbatim} Moving forward to the proceeding piece of code contained in the series of commands , we have \begin{verbatim} { <var:s> = <var:T> } <var:H1> := <var:s> { <var:s> = <var:T> \land <var:H1> = <var:T> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:s> = <var:T> }} <var:H1> := <var:s> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:3> ; <var:L> := <var:H1> <var:L> := <var:L> + <var:H0> {{ <var:L> = <nat:3> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:H1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:H1> = <var:T> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:H1> = <nat:3> * <var:T> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:H0> = <nat:3> /\ <var:L> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:L> = <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 