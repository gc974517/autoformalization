\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:D> ; <var:W2> := <var:W1> * <var:D> ; <var:W3> := <var:W2> * <var:D> ; <var:W4> := <var:W3> * <var:D> ; <var:W0> := <nat:3> ; <var:W2> := <var:W2> * <nat:2> ; <var:W3> := <var:W3> * <nat:3> ; <var:W4> := <var:W4> * <nat:2> ; <var:U> := <var:W4> <var:U> := <var:U> + <var:W3> <var:U> := <var:U> + <var:W2> <var:U> := <var:U> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:D> = <var:m> $ ahead of running our code , then $ <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions is done through typical Hoare logic . Observing the upcoming piece of code seen in the list of commands , we have the environment update code \verb | <var:W1> := <var:D> ; | . This takes the condition $ \{ <var:D> = <var:m> \} $ as $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \} $ . This is guaranteed using the assignment scheme from usual Hoare logic . Moving forward to the upcoming statement found in the list of instructions , we have the binding command \verb | <var:W2> := <var:W1> * <var:D> ; | . This command moves the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \} $ toward the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <var:m> ^ <nat:2> \} $ . This is sound by the assignment inference rule given by standard Hoare reasoning . Moving onward , the assignment command \verb | <var:W3> := <var:W2> * <var:D> ; | . This line transfers the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <var:m> ^ <nat:2> \} $ as the postcondition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <var:m> ^ <nat:2> \land <var:W3> = <var:m> ^ <nat:3> \} $ . Moving forward to the next step , the environment update code defining $ <var:W3> * <var:D> $ into $ <var:W4>$ . This transfers the precondition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <var:m> ^ <nat:2> \land <var:W3> = <var:m> ^ <nat:3> \} $ into the postcondition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <var:m> ^ <nat:2> \land <var:W3> = <var:m> ^ <nat:3> \land <var:W4> = <var:m> ^ <nat:4> \} $ . This is sound using the assignment rule defined by Hoare reasoning . Now , we see the environment update code \verb | <var:W0> := <nat:3> ; | . This statement moves the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <var:m> ^ <nat:2> \land <var:W3> = <var:m> ^ <nat:3> \land <var:W4> = <var:m> ^ <nat:4> \} $ as the postcondition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <var:m> ^ <nat:2> \land <var:W3> = <var:m> ^ <nat:3> \land <var:W4> = <var:m> ^ <nat:4> \land <var:W0> = <nat:3> \} $ . This is given using the assignment inference rule in typical Hoare logic . Stepping forward , we see the assignment statement \verb | <var:W2> := <var:W2> * <nat:2> ; | . This advances $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <var:m> ^ <nat:2> \land <var:W3> = <var:m> ^ <nat:3> \land <var:W4> = <var:m> ^ <nat:4> \land <var:W0> = <nat:3> \} $ into the postcondition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W3> = <var:m> ^ <nat:3> \land <var:W4> = <var:m> ^ <nat:4> \land <var:W0> = <nat:3> \} $ . Observing the next bit of code found in our list of instructions , the environment update statement \verb | <var:W3> := <var:W3> * <nat:3> ; | . This redefines the precondition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W3> = <var:m> ^ <nat:3> \land <var:W4> = <var:m> ^ <nat:4> \land <var:W0> = <nat:3> \} $ toward the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W3> = <nat:3> * <var:m> ^ <nat:3> \land <var:W4> = <var:m> ^ <nat:4> \land <var:W0> = <nat:3> \} $ . Taking another step toward the next line of code in the series of commands , we see the variable update statement binding $ <var:W4> * <nat:2> $ into $ <var:W4>$ . This code forwards the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W3> = <nat:3> * <var:m> ^ <nat:3> \land <var:W4> = <var:m> ^ <nat:4> \land <var:W0> = <nat:3> \} $ to the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W3> = <nat:3> * <var:m> ^ <nat:3> \land <var:W4> = <nat:2> * <var:m> ^ <nat:4> \land <var:W0> = <nat:3> \} $ . This is ensured by the assignment rule from standard Hoare techniques . Advancing to the following command seen in the code segment , we see the binding code binding $ <var:W4$ toward $ <var:U>$ . This command takes the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W3> = <nat:3> * <var:m> ^ <nat:3> \land <var:W4> = <nat:2> * <var:m> ^ <nat:4> \land <var:W0> = <nat:3> \} $ toward $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W3> = <nat:3> * <var:m> ^ <nat:3> \land <var:W0> = <nat:3> \land <var:U> = <nat:2> * <var:m> ^ <nat:4> \} $ . This is deduced through the assignment scheme defined in typical Hoare logic . Paying attention to the proceeding line found in the list of commands , we have the line assigning $ <var:U> + <var:W3$ toward $ <var:U>$ . This line redefines the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W3> = <nat:3> * <var:m> ^ <nat:3> \land <var:W0> = <nat:3> \land <var:U> = <nat:2> * <var:m> ^ <nat:4> \} $ toward the condition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W0> = <nat:3> \land <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> \} $ . Immediately following , we have the binding line \verb | <var:U> := <var:U> + <var:W2> | . This code transfers $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W2> = <nat:2> * <var:m> ^ <nat:2> \land <var:W0> = <nat:3> \land <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> \} $ as the postcondition $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W0> = <nat:3> \land <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> \} $ . Moving forward to the next step , we have the assignment code \verb | <var:U> := <var:U> + <var:W0> | . This line moves $ \{ <var:D> = <var:m> \land <var:W1> = <var:m> \land <var:W0> = <nat:3> \land <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> \} $ as $ \{ <var:D> = <var:m> \land <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> \} $ . This is given with the assignment inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Definition <def:poly> := <var:W1> := <var:D> ; <var:W2> := <var:W1> * <var:D> ; <var:W3> := <var:W2> * <var:D> ; <var:W4> := <var:W3> * <var:D> ; <var:W0> := <nat:3> ; <var:W2> := <var:W2> * <nat:2> ; <var:W3> := <var:W3> * <nat:3> ; <var:W4> := <var:W4> * <nat:2> ; <var:U> := <var:W4> <var:U> := <var:U> + <var:W3> <var:U> := <var:U> + <var:W2> <var:U> := <var:U> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:D> = <var:m> }} <def:poly> {{ <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <var:m> ^ <nat:2> /\ <var:W3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <var:m> ^ <nat:2> /\ <var:W3> = <var:m> ^ <nat:3> /\ <var:W4> = <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <var:m> ^ <nat:2> /\ <var:W3> = <var:m> ^ <nat:3> /\ <var:W4> = <var:m> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:W3> = <var:m> ^ <nat:3> /\ <var:W4> = <var:m> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:W4> = <var:m> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:W4> = <nat:2> * <var:m> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:W0> = <nat:3> /\ <var:U> = <nat:2> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:W0> = <nat:3> /\ <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:W1> = <var:m> /\ <var:W0> = <nat:3> /\ <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:U> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 