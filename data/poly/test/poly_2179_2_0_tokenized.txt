\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:5> ; <var:Q> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for any positive numbers $ <var:g> $ --- $ <var:r> = <var:g> $ prior to the evaluation of our program it must be that we see $ <var:Q> = <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of this code is given with usual Hoare logic . Moving on to the next step , we have the binding line defining $ <nat:5> $ toward $ <var:E0>$ . This code takes the condition $ \{ <var:r> = <var:g> \} $ toward the condition $ \{ <var:r> = <var:g> \land <var:E0> = <nat:5> \} $ . This is known to be sound with the assignment inference rule of standard Hoare logic . Immediately after , we have the variable binding statement binding $ <var:E0$ to $ <var:Q>$ . This statement takes $ \{ <var:r> = <var:g> \land <var:E0> = <nat:5> \} $ toward the condition $ \{ <var:r> = <var:g> \land <var:Q> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:5> ; <var:Q> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:r> = <var:g> }} <def:poly> {{ <var:Q> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:g> /\ <var:Q> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 