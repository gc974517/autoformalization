\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:z> ; <var:L> := <var:e1> ; <var:L> := <var:L> + <var:e0> \end{verbatim} Given $ <var:z> = <var:g> $ before running our segment of code , it follows that $ <var:L> = <nat:1> \cdot <var:g> + <nat:3> $ after series of commands is done . \end{theorem} \begin{proof} Let this decorated list of instructions . \begin{eqnarray} \{ <var:z> = <var:g> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:z> = <var:g> \land <var:e0> = <nat:3> \} \\ <var:e1> := <nat:1> ; \\ \{ <var:z> = <var:g> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> \} \\ <var:e1> := <var:e1> * <var:z> ; \\ \{ <var:z> = <var:g> \land <var:e0> = <nat:3> \land <var:e1> = <nat:1> * <var:g> \} \\ <var:L> := <var:e1> ; \\ \{ <var:z> = <var:g> \land <var:e0> = <nat:3> \land <var:L> = <nat:1> * <var:g> \} \\ <var:L> := <var:L> + <var:e0> \\ \{ <var:z> = <var:g> \land <var:L> = <nat:1> * <var:g> + <nat:3> \} \end{eqnarray} The application of typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:z> = <var:g> }} <var:e0> := <nat:3> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:z> ; <var:L> := <var:e1> ; <var:L> := <var:L> + <var:e0> {{ <var:L> = <nat:1> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:e0> = <nat:3> /\ <var:L> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:L> = <nat:1> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 