\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:E0> := <nat:3> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:w> ; <var:v> := <var:E1> ; <var:v> := <var:v> + <var:E0> \end{verbatim} Assume it to be that $ <var:w> = <var:u> $ for all positive numbers $ <var:u> $ ahead of the execution of this series of commands , it holds that we see $ <var:v> = <nat:2> \cdot <var:u> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare logic gives us : \begin{eqnarray} \{ <var:w> = <var:u> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:w> = <var:u> \land <var:E0> = <nat:3> \} \\ <var:E1> := <nat:2> ; \\ \{ <var:w> = <var:u> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> \} \\ <var:E1> := <var:E1> * <var:w> ; \\ \{ <var:w> = <var:u> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> * <var:u> \} \\ <var:v> := <var:E1> ; \\ \{ <var:w> = <var:u> \land <var:E0> = <nat:3> \land <var:v> = <nat:2> * <var:u> \} \\ <var:v> := <var:v> + <var:E0> \\ \{ <var:w> = <var:u> \land <var:v> = <nat:2> * <var:u> + <nat:3> \} \end{eqnarray} Allowing executing this segment of code yields : \begin{eqnarray} \end{eqnarray} Hence , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:w> = <var:u> }} <var:E0> := <nat:3> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:w> ; <var:v> := <var:E1> ; <var:v> := <var:v> + <var:E0> {{ <var:v> = <nat:2> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:u> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:u> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:u> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:u> /\ <var:E0> = <nat:3> /\ <var:v> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:u> /\ <var:v> = <nat:2> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 