\begin{document} \begin{theorem} We define the following list of instructions : \begin{verbatim} <var:P0> := <nat:4> ; <var:P1> := <nat:9> ; <var:P1> := <var:P1> * <var:F> ; <var:T> := <var:P1> ; <var:T> := <var:T> + <var:P0> \end{verbatim} Given it to hold that $ <var:F> = <var:K> $ prior to executing our segment of code , then $ <var:T> = <nat:9> \times <var:K> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be accomplished through Hoare logic . Focusing on the upcoming piece of code found in the list of instructions , we have the command \verb | <var:P0> := <nat:4> ; | . This redefines the condition $ \{ <var:F> = <var:K> \} $ to the postcondition $ \{ <var:F> = <var:K> \land <var:P0> = <nat:4> \} $ . Immediately after , we have the environment update code assigning $ <nat:9> $ to $ <var:P1>$ . This transfers $ \{ <var:F> = <var:K> \land <var:P0> = <nat:4> \} $ toward the postcondition $ \{ <var:F> = <var:K> \land <var:P0> = <nat:4> \land <var:P1> = <nat:9> \} $ . Taking another step toward the subsequent statement found in the code , the variable assignmet statement defining $ <var:P1> * <var:F> $ to $ <var:P1>$ . This redefines $ \{ <var:F> = <var:K> \land <var:P0> = <nat:4> \land <var:P1> = <nat:9> \} $ as $ \{ <var:F> = <var:K> \land <var:P0> = <nat:4> \land <var:P1> = <nat:9> * <var:K> \} $ . This is given by the assignment rule defined in typical Hoare techniques . Shifting focus toward the subsequent step seen in the set of commands , we see the command \verb | <var:T> := <var:P1> ; | . This statement forwards $ \{ <var:F> = <var:K> \land <var:P0> = <nat:4> \land <var:P1> = <nat:9> * <var:K> \} $ to the condition $ \{ <var:F> = <var:K> \land <var:P0> = <nat:4> \land <var:T> = <nat:9> * <var:K> \} $ . This is deduced with the assignment inference rule given by typical Hoare logic . Further , the assignment statement \verb | <var:T> := <var:T> + <var:P0> | . This command takes the condition $ \{ <var:F> = <var:K> \land <var:P0> = <nat:4> \land <var:T> = <nat:9> * <var:K> \} $ as the postcondition $ \{ <var:F> = <var:K> \land <var:T> = <nat:9> * <var:K> + <nat:4> \} $ . This is rigorously given by the assignment rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:F> = <var:K> }} <var:P0> := <nat:4> ; <var:P1> := <nat:9> ; <var:P1> := <var:P1> * <var:F> ; <var:T> := <var:P1> ; <var:T> := <var:T> + <var:P0> {{ <var:T> = <nat:9> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:P0> = <nat:4> /\ <var:T> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:T> = <nat:9> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 