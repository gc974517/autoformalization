\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:c> ; <var:P2> := <var:P1> * <var:c> ; <var:P3> := <var:P2> * <var:c> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:3> ; <var:P3> := <var:P3> * <nat:2> ; <var:p> := <var:P3> <var:p> := <var:p> + <var:P2> <var:p> := <var:p> + <var:P1> <var:p> := <var:p> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Given , given any positive numbers $ <var:W> $ , it to be that $ <var:c> = <var:W> $ before running our list of instructions , then we have $ <var:p> = <nat:2> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:c> = <var:W> \} \\ <var:P1> := <var:c> ; \\ \{ <var:c> = <var:W> \land <var:P1> = <var:W> \} \\ <var:P2> := <var:P1> * <var:c> ; \\ \{ <var:c> = <var:W> \land <var:P1> = <var:W> \land <var:P2> = <var:W> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:c> ; \\ \{ <var:c> = <var:W> \land <var:P1> = <var:W> \land <var:P2> = <var:W> ^ <nat:2> \land <var:P3> = <var:W> ^ <nat:3> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:c> = <var:W> \land <var:P1> = <var:W> \land <var:P2> = <var:W> ^ <nat:2> \land <var:P3> = <var:W> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P1> := <var:P1> * <nat:4> ; \\ \{ <var:c> = <var:W> \land <var:P1> = <nat:4> * <var:W> \land <var:P2> = <var:W> ^ <nat:2> \land <var:P3> = <var:W> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P2> := <var:P2> * <nat:3> ; \\ \{ <var:c> = <var:W> \land <var:P1> = <nat:4> * <var:W> \land <var:P2> = <nat:3> * <var:W> ^ <nat:2> \land <var:P3> = <var:W> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:P3> := <var:P3> * <nat:2> ; \\ \{ <var:c> = <var:W> \land <var:P1> = <nat:4> * <var:W> \land <var:P2> = <nat:3> * <var:W> ^ <nat:2> \land <var:P3> = <nat:2> * <var:W> ^ <nat:3> \land <var:P0> = <nat:3> \} \\ <var:p> := <var:P3> \\ \{ <var:c> = <var:W> \land <var:P1> = <nat:4> * <var:W> \land <var:P2> = <nat:3> * <var:W> ^ <nat:2> \land <var:P0> = <nat:3> \land <var:p> = <nat:2> * <var:W> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:P2> \\ \{ <var:c> = <var:W> \land <var:P1> = <nat:4> * <var:W> \land <var:P0> = <nat:3> \land <var:p> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:P1> \\ \{ <var:c> = <var:W> \land <var:P0> = <nat:3> \land <var:p> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> \} \\ <var:p> := <var:p> + <var:P0> \\ \{ <var:c> = <var:W> \land <var:p> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> \} \end{eqnarray} Thusly , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:c> ; <var:P2> := <var:P1> * <var:c> ; <var:P3> := <var:P2> * <var:c> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:3> ; <var:P3> := <var:P3> * <nat:2> ; <var:p> := <var:P3> <var:p> := <var:p> + <var:P2> <var:p> := <var:p> + <var:P1> <var:p> := <var:p> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:c> = <var:W> }} <def:poly> {{ <var:p> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <var:W> /\ <var:P2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <var:W> /\ <var:P2> = <var:W> ^ <nat:2> /\ <var:P3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <var:W> /\ <var:P2> = <var:W> ^ <nat:2> /\ <var:P3> = <var:W> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <nat:4> * <var:W> /\ <var:P2> = <var:W> ^ <nat:2> /\ <var:P3> = <var:W> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <nat:4> * <var:W> /\ <var:P2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:P3> = <var:W> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <nat:4> * <var:W> /\ <var:P2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:P3> = <nat:2> * <var:W> ^ <nat:3> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <nat:4> * <var:W> /\ <var:P2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:P0> = <nat:3> /\ <var:p> = <nat:2> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P1> = <nat:4> * <var:W> /\ <var:P0> = <nat:3> /\ <var:p> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:P0> = <nat:3> /\ <var:p> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:p> = <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 