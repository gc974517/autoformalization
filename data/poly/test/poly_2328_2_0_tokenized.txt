\begin{document} \begin{theorem} Let the following code such that \begin{verbatim} <var:W0> := <nat:9> ; <var:F> := <var:W0> \end{verbatim} Assuming it to be that $ <var:i> = <var:D> $ ( given all $ <var:D> \in \mathbb{Z}^+ $ ) before interpreting our program , then we see $ <var:F> = <nat:9> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning yields : \begin{eqnarray} \{ <var:i> = <var:D> \} \\ <var:W0> := <nat:9> ; \\ \{ <var:i> = <var:D> \land <var:W0> = <nat:9> \} \\ <var:F> := <var:W0> \\ \{ <var:i> = <var:D> \land <var:F> = <nat:9> \} \end{eqnarray} Given the above , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:i> = <var:D> }} <var:W0> := <nat:9> ; <var:F> := <var:W0> {{ <var:F> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:D> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:D> /\ <var:F> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 