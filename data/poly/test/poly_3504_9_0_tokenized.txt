\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:1> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:G> ; <var:v2> := <nat:3> ; <var:v2> := <var:v2> * <var:G> ; <var:v2> := <var:v2> * <var:G> ; <var:x> := <var:v2> ; <var:x> := <var:x> + <var:v1> ; <var:x> := <var:x> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Allowing it to be that $ <var:G> = <var:o> $ --- given some whole numbers $ <var:o> $ --- before the evaluation of our program it holds that we see $ <var:x> = <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:1> $ . \end{theorem} \begin{proof} The proof of our segment of code is accomplished through the below decorated segment of code . \begin{eqnarray} \{ <var:G> = <var:o> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:G> = <var:o> \land <var:v0> = <nat:1> \} \\ <var:v1> := <nat:2> ; \\ \{ <var:G> = <var:o> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \} \\ <var:v1> := <var:v1> * <var:G> ; \\ \{ <var:G> = <var:o> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \cdot <var:o> \} \\ <var:v2> := <nat:3> ; \\ \{ <var:G> = <var:o> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \cdot <var:o> \land <var:v2> = <nat:3> \} \\ <var:v2> := <var:v2> * <var:G> ; \\ \{ <var:G> = <var:o> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \cdot <var:o> \land <var:v2> = <nat:3> \cdot <var:o> \} \\ <var:v2> := <var:v2> * <var:G> ; \\ \{ <var:G> = <var:o> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \cdot <var:o> \land <var:v2> = <nat:3> \cdot <var:o> ^ <nat:2> \} \\ <var:x> := <var:v2> ; \\ \{ <var:G> = <var:o> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \cdot <var:o> \land <var:x> = <nat:3> \cdot <var:o> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:v1> ; \\ \{ <var:G> = <var:o> \land <var:v0> = <nat:1> \land <var:x> = <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> \} \\ <var:x> := <var:x> + <var:v0> \\ \{ <var:G> = <var:o> \land <var:x> = <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:1> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:G> ; <var:v2> := <nat:3> ; <var:v2> := <var:v2> * <var:G> ; <var:v2> := <var:v2> * <var:G> ; <var:x> := <var:v2> ; <var:x> := <var:x> + <var:v1> ; <var:x> := <var:x> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:G> = <var:o> }} <def:poly> {{ <var:x> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:o> /\ <var:v2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:o> /\ <var:v2> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:o> /\ <var:v2> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:o> /\ <var:x> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:v0> = <nat:1> /\ <var:x> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:o> /\ <var:x> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 