\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:9> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:l> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:l> ; <var:m2> := <var:m2> * <var:l> ; <var:m3> := <nat:8> ; <var:m3> := <var:m3> * <var:l> ; <var:m3> := <var:m3> * <var:l> ; <var:m3> := <var:m3> * <var:l> ; <var:d> := <var:m3> ; <var:d> := <var:d> + <var:m2> ; <var:d> := <var:d> + <var:m1> ; <var:d> := <var:d> + <var:m0> \end{verbatim} Given that we have $ <var:l> = <var:c> $ prior to executing the set of commands then we have $ <var:d> = <nat:8> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be done by usual Hoare reasoning . Looking at the proceeding lines found in our set of commands , \verb | { <var:l> = <var:c> } <var:m0> := <nat:9> { <var:l> = <var:c> \land <var:m0> = <nat:9> } | , \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> } <var:m1> := <nat:3> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> } | and \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> } <var:m1> := <var:m1> * <var:l> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> } | . This is given using the variable binding scheme in standard Hoare logic . Stepping forward , \verb | { <var:l> = <var:c> } <var:m0> := <nat:9> { <var:l> = <var:c> \land <var:m0> = <nat:9> } | . Moving on to the following pieces of code contained in our set of commands , we see \verb | { <var:l> = <var:c> } <var:m0> := <nat:9> { <var:l> = <var:c> \land <var:m0> = <nat:9> } | , \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> } <var:m1> := <nat:3> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> } | , \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> } <var:m1> := <var:m1> * <var:l> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> } | and \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> } <var:m2> := <nat:3> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> \land <var:m2> = <nat:3> } | . This is shown to be logically sound with the binding inference rule of Hoare techniques . Next , \verb | { <var:l> = <var:c> } <var:m0> := <nat:9> { <var:l> = <var:c> \land <var:m0> = <nat:9> } | , \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> } <var:m1> := <nat:3> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> } | , \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> } <var:m1> := <var:m1> * <var:l> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> } | , \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> } <var:m2> := <nat:3> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> \land <var:m2> = <nat:3> } | , \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> \land <var:m2> = <nat:3> } <var:m2> := <var:m2> * <var:l> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> \land <var:m2> = <nat:3> * <var:c> } | and \verb | { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> \land <var:m2> = <nat:3> * <var:c> } <var:m2> := <var:m2> * <var:l> { <var:l> = <var:c> \land <var:m0> = <nat:9> \land <var:m1> = <nat:3> * <var:c> \land <var:m2> = <nat:3> * <var:c> ^ <nat:2> } | . This is rigorously given with the variable binding law of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:l> = <var:c> }} <var:m0> := <nat:9> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:l> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:l> ; <var:m2> := <var:m2> * <var:l> ; <var:m3> := <nat:8> ; <var:m3> := <var:m3> * <var:l> ; <var:m3> := <var:m3> * <var:l> ; <var:m3> := <var:m3> * <var:l> ; <var:d> := <var:m3> ; <var:d> := <var:d> + <var:m2> ; <var:d> := <var:d> + <var:m1> ; <var:d> := <var:d> + <var:m0> {{ <var:d> = <nat:8> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:m3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:m3> = <nat:8> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:m2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:d> = <nat:8> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:3> * <var:c> /\ <var:d> = <nat:8> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:9> /\ <var:d> = <nat:8> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:d> = <nat:8> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 