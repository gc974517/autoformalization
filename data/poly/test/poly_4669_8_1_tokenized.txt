\begin{document} \begin{theorem} Consider a program in \emph{Imp} as \begin{verbatim} <var:v1> := <var:Y> ; <var:v2> := <var:v1> * <var:Y> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:1> ; <var:D> := <var:v2> <var:D> := <var:D> + <var:v1> <var:D> := <var:D> + <var:v0> \end{verbatim} Allowing it to hold that $ <var:Y> = <var:b> $ prior to executing the list of instructions then we have $ <var:D> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:Y> = <var:b> \} \\ <var:v1> := <var:Y> ; \\ \{ <var:Y> = <var:b> \land <var:v1> = <var:b> \} \\ <var:v2> := <var:v1> * <var:Y> ; \\ \{ <var:Y> = <var:b> \land <var:v1> = <var:b> \land <var:v2> = <var:b> ^ <nat:2> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:Y> = <var:b> \land <var:v1> = <var:b> \land <var:v2> = <var:b> ^ <nat:2> \land <var:v0> = <nat:3> \} \\ <var:v1> := <var:v1> * <nat:4> ; \\ \{ <var:Y> = <var:b> \land <var:v1> = <nat:4> * <var:b> \land <var:v2> = <var:b> ^ <nat:2> \land <var:v0> = <nat:3> \} \\ <var:v2> := <var:v2> * <nat:1> ; \\ \{ <var:Y> = <var:b> \land <var:v1> = <nat:4> * <var:b> \land <var:v2> = <nat:1> * <var:b> ^ <nat:2> \land <var:v0> = <nat:3> \} \\ <var:D> := <var:v2> \\ \{ <var:Y> = <var:b> \land <var:v1> = <nat:4> * <var:b> \land <var:v0> = <nat:3> \land <var:D> = <nat:1> * <var:b> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:v1> \\ \{ <var:Y> = <var:b> \land <var:v0> = <nat:3> \land <var:D> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> \} \\ <var:D> := <var:D> + <var:v0> \\ \{ <var:Y> = <var:b> \land <var:D> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> \} \end{eqnarray} Given the preceding argument , our program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Y> = <var:b> }} <var:v1> := <var:Y> ; <var:v2> := <var:v1> * <var:Y> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:1> ; <var:D> := <var:v2> <var:D> := <var:D> + <var:v1> <var:D> := <var:D> + <var:v0> {{ <var:D> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:v1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:v1> = <var:b> /\ <var:v2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:v1> = <var:b> /\ <var:v2> = <var:b> ^ <nat:2> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:v1> = <nat:4> * <var:b> /\ <var:v2> = <var:b> ^ <nat:2> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:v1> = <nat:4> * <var:b> /\ <var:v2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:v1> = <nat:4> * <var:b> /\ <var:v0> = <nat:3> /\ <var:D> = <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:v0> = <nat:3> /\ <var:D> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:D> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 