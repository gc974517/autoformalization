\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:J> := <nat:4> ; <var:J> := <nat:2> + <var:J> * <var:B> ; <var:J> := <nat:4> + <var:J> * <var:B> ; <var:J> := <var:J> * <var:B> ; <var:J> := <nat:3> + <var:J> * <var:B> ; <var:J> := <nat:3> + <var:J> * <var:B> ; <var:J> := <nat:1> + <var:J> * <var:B> ; <var:J> := <nat:4> + <var:J> * <var:B> ; <var:J> := <var:J> * <var:B> ; <var:J> := <nat:2> + <var:J> * <var:B> ; <var:J> := <nat:2> + <var:J> * <var:B> \end{verbatim} Given that $ <var:B> = <var:f> $ --- given every $ <var:f> \in \mathbb{Z}^+ $ --- before executing our code segment , it must be that we have $ <var:J> = <nat:4> \times <var:f> ^ <nat:10> + <nat:2> \times <var:f> ^ <nat:9> + <nat:4> \times <var:f> ^ <nat:8> + <nat:3> \times <var:f> ^ <nat:6> + <nat:3> \times <var:f> ^ <nat:5> + <nat:1> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> + <nat:2> $ when series of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:f> \} \\ <var:J> := <nat:4> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> \} \\ <var:J> := <nat:2> + <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> + <nat:2> \} \\ <var:J> := <nat:4> + <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> \} \\ <var:J> := <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + \} \\ <var:J> := <nat:3> + <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:3> \} \\ <var:J> := <nat:3> + <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> + <nat:3> \} \\ <var:J> := <nat:1> + <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:1> \} \\ <var:J> := <nat:4> + <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:7> + <nat:2> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> \} \\ <var:J> := <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:8> + <nat:2> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + \} \\ <var:J> := <nat:2> + <var:J> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:9> + <nat:2> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> \} \\ <var:J> := <nat:2> + <var:J> * <var:B> \\ \{ <var:B> = <var:f> \land <var:J> = <nat:4> * <var:f> ^ <nat:10> + <nat:2> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:3> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:B> = <var:f> }} <var:J> := <nat:4> ; <var:J> := <nat:2> + <var:J> * <var:B> ; <var:J> := <nat:4> + <var:J> * <var:B> ; <var:J> := <var:J> * <var:B> ; <var:J> := <nat:3> + <var:J> * <var:B> ; <var:J> := <nat:3> + <var:J> * <var:B> ; <var:J> := <nat:1> + <var:J> * <var:B> ; <var:J> := <nat:4> + <var:J> * <var:B> ; <var:J> := <var:J> * <var:B> ; <var:J> := <nat:2> + <var:J> * <var:B> ; <var:J> := <nat:2> + <var:J> * <var:B> {{ <var:J> = <nat:4> * <var:f> ^ <nat:10> + <nat:2> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:3> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:7> + <nat:2> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:8> + <nat:2> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:9> + <nat:2> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J> = <nat:4> * <var:f> ^ <nat:10> + <nat:2> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:3> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 