\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:3> ; <var:u2> := <nat:1> ; <var:u2> := <var:u2> * <var:h> ; <var:u2> := <var:u2> * <var:h> ; <var:V> := <var:u2> ; <var:V> := <var:V> + <var:u0> \end{verbatim} Allow that we have $ <var:h> = <var:n> $ ahead of executing this code , it follows that we see $ <var:V> = <nat:1> * <var:n> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands can be done using usual Hoare reasoning . Immediately after , the variable update code binding $ <nat:3> $ as $ <var:u0>$ . This forwards the condition $ \{ <var:h> = <var:n> \} $ toward the condition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \} $ . This is rigorously given with the assignment inference rule defined in Hoare techniques . Advancing to the proceeding step found in our list of commands , the binding command defining $ <nat:1> $ toward $ <var:u2>$ . This statement forwards $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \} $ into the condition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \land <var:u2> = <nat:1> \} $ . Stepping through , the binding statement defining $ <var:u2> * <var:h> $ as $ <var:u2>$ . This code redefines the precondition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \land <var:u2> = <nat:1> \} $ into the postcondition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \land <var:u2> = <nat:1> \times <var:n> \} $ . After , we have the variable assignmet code yielding $ <var:u2> * <var:h> $ toward $ <var:u2>$ . This code forwards the condition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \land <var:u2> = <nat:1> \times <var:n> \} $ into the condition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \land <var:u2> = <nat:1> \times <var:n> ^ <nat:2> \} $ . This is sound through the assignment rule defined in standard Hoare reasoning . Jumping to the proceeding line contained in our program , we see the assignment statement giving $ <var:u2> $ into $ <var:V>$ . This forwards the condition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \land <var:u2> = <nat:1> \times <var:n> ^ <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \land <var:V> = <nat:1> \times <var:n> ^ <nat:2> \} $ . This is given with the assignment rule given in typical Hoare logic . Jumping to the upcoming step contained in our series of instructions , we have the code \verb | <var:V> := <var:V> + <var:u0> | . This transfers the condition $ \{ <var:h> = <var:n> \land <var:u0> = <nat:3> \land <var:V> = <nat:1> \times <var:n> ^ <nat:2> \} $ into the condition $ \{ <var:h> = <var:n> \land <var:V> = <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \} $ . This is rigorously given using the assignment law given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:h> = <var:n> }} <var:u0> := <nat:3> ; <var:u2> := <nat:1> ; <var:u2> := <var:u2> * <var:h> ; <var:u2> := <var:u2> * <var:h> ; <var:V> := <var:u2> ; <var:V> := <var:V> + <var:u0> {{ <var:V> = <nat:1> * <var:n> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:u0> = <nat:3> /\ <var:u2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:u0> = <nat:3> /\ <var:u2> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:u0> = <nat:3> /\ <var:u2> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:u0> = <nat:3> /\ <var:V> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:V> = <nat:1> * <var:n> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 