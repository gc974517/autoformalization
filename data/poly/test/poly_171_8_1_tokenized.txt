\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as \begin{verbatim} <var:k1> := <var:U> ; <var:k2> := <var:k1> * <var:U> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:2> ; <var:c> := <var:k2> <var:c> := <var:c> + <var:k1> <var:c> := <var:c> + <var:k0> \end{verbatim} Allow that $ <var:U> = <var:F> $ for all whole numbers $ <var:F> $ prior to the evaluation of the series of instructions it holds that we have $ <var:c> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> $ once program is done executing . \end{theorem} \begin{proof} The method of proof for the set of instructions is given using standard Hoare reasoning . Advancing to the following steps in the code , \begin{eqnarray} \{ <var:U> = <var:F> \} \, <var:k1> := <var:U> \, \{ <var:U> = <var:F> \land <var:k1> = <var:F> \} \\ \{ <var:U> = <var:F> \land <var:k1> = <var:F> \} \, <var:k2> := <var:k1> * <var:U> \, \{ <var:U> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \} \\ \{ <var:U> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \} \, <var:k0> := <nat:4> \, \{ <var:U> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \land <var:k0> = <nat:4> \} \end{eqnarray} Immediately after , we see \begin{eqnarray} \{ <var:U> = <var:F> \} \, <var:k1> := <var:U> \, \{ <var:U> = <var:F> \land <var:k1> = <var:F> \} \\ \{ <var:U> = <var:F> \land <var:k1> = <var:F> \} \, <var:k2> := <var:k1> * <var:U> \, \{ <var:U> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \} \\ \{ <var:U> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \} \, <var:k0> := <nat:4> \, \{ <var:U> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \land <var:k0> = <nat:4> \} \\ \{ <var:U> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \land <var:k0> = <nat:4> \} \, <var:k1> := <var:k1> * <nat:4> \, \{ <var:U> = <var:F> \land <var:k1> = <nat:4> \cdot <var:F> \land <var:k2> = <var:F> ^ <nat:2> \land <var:k0> = <nat:4> \} \end{eqnarray} Moving forward , \begin{eqnarray} \{ <var:U> = <var:F> \} \, <var:k1> := <var:U> \, \{ <var:U> = <var:F> \land <var:k1> = <var:F> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:U> = <var:F> }} <var:k1> := <var:U> ; <var:k2> := <var:k1> * <var:U> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:2> ; <var:c> := <var:k2> <var:c> := <var:c> + <var:k1> <var:c> := <var:c> + <var:k0> {{ <var:c> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:k1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:k1> = <var:F> /\ <var:k2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:k1> = <var:F> /\ <var:k2> = <var:F> ^ <nat:2> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:k1> = <nat:4> * <var:F> /\ <var:k2> = <var:F> ^ <nat:2> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:k1> = <nat:4> * <var:F> /\ <var:k2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:k1> = <nat:4> * <var:F> /\ <var:k0> = <nat:4> /\ <var:c> = <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:k0> = <nat:4> /\ <var:c> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:c> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 