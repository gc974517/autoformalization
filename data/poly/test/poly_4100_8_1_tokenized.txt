\begin{document} \begin{theorem} Take the following code in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:R> ; <var:V2> := <var:V1> * <var:R> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:3> ; <var:V2> := <var:V2> * <nat:3> ; <var:Z> := <var:V2> <var:Z> := <var:Z> + <var:V1> <var:Z> := <var:Z> + <var:V0> \end{verbatim} Given that we have $ <var:R> = <var:S> $ prior to the evaluation of this list of commands then we see $ <var:Z> = <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:2> $ after list of commands has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be accomplished with standard Hoare reasoning . Moving forward , \verb | { <var:R> = <var:S> } <var:V1> := <var:R> { <var:R> = <var:S> \land <var:V1> = <var:S> } | , \verb | { <var:R> = <var:S> \land <var:V1> = <var:S> } <var:V2> := <var:V1> * <var:R> { <var:R> = <var:S> \land <var:V1> = <var:S> \land <var:V2> = <var:S> ^ <nat:2> } | , \verb | { <var:R> = <var:S> \land <var:V1> = <var:S> \land <var:V2> = <var:S> ^ <nat:2> } <var:V0> := <nat:2> { <var:R> = <var:S> \land <var:V1> = <var:S> \land <var:V2> = <var:S> ^ <nat:2> \land <var:V0> = <nat:2> } | and \verb | { <var:R> = <var:S> \land <var:V1> = <var:S> \land <var:V2> = <var:S> ^ <nat:2> \land <var:V0> = <nat:2> } <var:V1> := <var:V1> * <nat:3> { <var:R> = <var:S> \land <var:V1> = <nat:3> \cdot <var:S> \land <var:V2> = <var:S> ^ <nat:2> \land <var:V0> = <nat:2> } | . This is ensured using the inference rule obtained from usual Hoare logic . Going to the next step , \verb | { <var:R> = <var:S> } <var:V1> := <var:R> { <var:R> = <var:S> \land <var:V1> = <var:S> } | . This is known to be sound using the binding scheme defined by typical Hoare reasoning . Moving forward to the next step , \verb | { <var:R> = <var:S> } <var:V1> := <var:R> { <var:R> = <var:S> \land <var:V1> = <var:S> } | and \verb | { <var:R> = <var:S> \land <var:V1> = <var:S> } <var:V2> := <var:V1> * <var:R> { <var:R> = <var:S> \land <var:V1> = <var:S> \land <var:V2> = <var:S> ^ <nat:2> } | . This is known to be sound by the variable binding rule given by Hoare reasoning . Moving on to the proceeding bit of code in the code , we see \verb | { <var:R> = <var:S> } <var:V1> := <var:R> { <var:R> = <var:S> \land <var:V1> = <var:S> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:R> = <var:S> }} <var:V1> := <var:R> ; <var:V2> := <var:V1> * <var:R> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:3> ; <var:V2> := <var:V2> * <nat:3> ; <var:Z> := <var:V2> <var:Z> := <var:Z> + <var:V1> <var:Z> := <var:Z> + <var:V0> {{ <var:Z> = <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:V1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:V1> = <var:S> /\ <var:V2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:V1> = <var:S> /\ <var:V2> = <var:S> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:V1> = <nat:3> * <var:S> /\ <var:V2> = <var:S> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:V1> = <nat:3> * <var:S> /\ <var:V2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:V1> = <nat:3> * <var:S> /\ <var:V0> = <nat:2> /\ <var:Z> = <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:V0> = <nat:2> /\ <var:Z> = <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:Z> = <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 