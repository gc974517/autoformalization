\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:7> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:d> ; <var:K2> := <nat:6> ; <var:K2> := <var:K2> * <var:d> ; <var:K2> := <var:K2> * <var:d> ; <var:K3> := <nat:8> ; <var:K3> := <var:K3> * <var:d> ; <var:K3> := <var:K3> * <var:d> ; <var:K3> := <var:K3> * <var:d> ; <var:A> := <var:K3> ; <var:A> := <var:A> + <var:K2> ; <var:A> := <var:A> + <var:K1> ; <var:A> := <var:A> + <var:K0> \end{verbatim} Allow it to be that $ <var:d> = <var:S> $ taking positive numbers $ <var:S> $ ahead of the evaluation of this list of commands then $ <var:A> = <nat:8> \cdot <var:S> ^ <nat:3> + <nat:6> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> + <nat:7> $ once segment of code terminates . \end{theorem} \begin{proof} The proof of this set of commands is accomplished through standard Hoare logic . Paying attention to the next lines found in our code segment , we see \begin{verbatim} { <var:d> = <var:S> } <var:K0> := <nat:7> { <var:d> = <var:S> \land <var:K0> = <nat:7> } { <var:d> = <var:S> \land <var:K0> = <nat:7> } <var:K1> := <nat:4> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> } { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> } <var:K1> := <var:K1> * <var:d> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> } { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> } <var:K2> := <nat:6> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> } { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> } <var:K2> := <var:K2> * <var:d> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> * <var:S> } { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> * <var:S> } <var:K2> := <var:K2> * <var:d> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> * <var:S> ^ <nat:2> } { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> * <var:S> ^ <nat:2> } <var:K3> := <nat:8> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> * <var:S> ^ <nat:2> \land <var:K3> = <nat:8> } \end{verbatim} Stepping through , we see \begin{verbatim} { <var:d> = <var:S> } <var:K0> := <nat:7> { <var:d> = <var:S> \land <var:K0> = <nat:7> } { <var:d> = <var:S> \land <var:K0> = <nat:7> } <var:K1> := <nat:4> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> } { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> } <var:K1> := <var:K1> * <var:d> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> } { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> } <var:K2> := <nat:6> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> } { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> } <var:K2> := <var:K2> * <var:d> { <var:d> = <var:S> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> * <var:S> \land <var:K2> = <nat:6> * <var:S> } \end{verbatim} This is given using the law found in usual Hoare techniques . Honing in on the following statement contained in the program , we have \begin{verbatim} { <var:d> = <var:S> } <var:K0> := <nat:7> { <var:d> = <var:S> \land <var:K0> = <nat:7> } \end{verbatim} This is shown with the variable binding law given in typical Hoare logic . Focusing on the subsequent line of code found in the code segment , we see \begin{verbatim} { <var:d> = <var:S> } <var:K0> := <nat:7> { <var:d> = <var:S> \land <var:K0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:d> = <var:S> }} <var:K0> := <nat:7> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:d> ; <var:K2> := <nat:6> ; <var:K2> := <var:K2> * <var:d> ; <var:K2> := <var:K2> * <var:d> ; <var:K3> := <nat:8> ; <var:K3> := <var:K3> * <var:d> ; <var:K3> := <var:K3> * <var:d> ; <var:K3> := <var:K3> * <var:d> ; <var:A> := <var:K3> ; <var:A> := <var:A> + <var:K2> ; <var:A> := <var:A> + <var:K1> ; <var:A> := <var:A> + <var:K0> {{ <var:A> = <nat:8> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:K2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:K2> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:K2> = <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:K2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:K3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:K2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:K2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:K2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:K2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:A> = <nat:8> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:S> /\ <var:A> = <nat:8> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:K0> = <nat:7> /\ <var:A> = <nat:8> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:A> = <nat:8> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 