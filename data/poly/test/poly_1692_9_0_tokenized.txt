\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:5> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:v> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:v> ; <var:N2> := <var:N2> * <var:v> ; <var:j> := <var:N2> ; <var:j> := <var:j> + <var:N1> ; <var:j> := <var:j> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Allow ( for every positive coefficients $ <var:x> $ ) $ <var:v> = <var:x> $ before running this set of commands , it must be that we have $ <var:j> = <nat:5> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:5> $ when set of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands is demonstrated by Hoare techniques . Shifting focus toward the following command contained in our list of instructions , we see the variable binding code \verb | <var:N0> := <nat:5> ; | . This transfers the precondition $ \{ <var:v> = <var:x> \} $ as the condition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \} $ . Now , we see the binding code yielding $ <nat:1> $ as $ <var:N1>$ . This forwards the precondition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \} $ toward the postcondition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \} $ . This is known to be sound through the assignment rule from Hoare techniques . Shifting focus toward the next bit of code in the series of instructions , we see the variable assignmet command binding $ <var:N1> * <var:v> $ to $ <var:N1>$ . This command advances the condition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \} $ as the condition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \} $ . Observing the following line found in our code , we see the environment update command assigning $ <nat:5> $ into $ <var:N2>$ . This takes $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \} $ as the condition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \land <var:N2> = <nat:5> \} $ . Going to the next step , the command giving $ <var:N2> * <var:v> $ to $ <var:N2>$ . This statement moves the condition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \land <var:N2> = <nat:5> \} $ to $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \land <var:N2> = <nat:5> \cdot <var:x> \} $ . This is sound with the assignment scheme of standard Hoare techniques . Moving on , we have the variable update code binding $ <var:N2> * <var:v> $ toward $ <var:N2>$ . This statement redefines $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \land <var:N2> = <nat:5> \cdot <var:x> \} $ as the condition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \land <var:N2> = <nat:5> \cdot <var:x> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment rule defined in typical Hoare logic . Observing the next step found in the list of commands , we have the variable binding line binding $ <var:N2> $ into $ <var:j>$ . This line transfers the precondition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \land <var:N2> = <nat:5> \cdot <var:x> ^ <nat:2> \} $ to $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \land <var:j> = <nat:5> \cdot <var:x> ^ <nat:2> \} $ . Going forward , we have the variable assignmet statement \verb | <var:j> := <var:j> + <var:N1> ; | . This line moves the precondition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:N1> = <nat:1> \cdot <var:x> \land <var:j> = <nat:5> \cdot <var:x> ^ <nat:2> \} $ as the condition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:j> = <nat:5> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} $ . This is guaranteed using the assignment inference rule defined in usual Hoare techniques . Looking at the next statement found in the segment of code , we see the variable binding statement \verb | <var:j> := <var:j> + <var:N0> | . This command takes the precondition $ \{ <var:v> = <var:x> \land <var:N0> = <nat:5> \land <var:j> = <nat:5> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} $ into the condition $ \{ <var:v> = <var:x> \land <var:j> = <nat:5> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:5> \} $ . This is shown to be logically sound with the assignment inference rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N0> := <nat:5> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:v> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:v> ; <var:N2> := <var:N2> * <var:v> ; <var:j> := <var:N2> ; <var:j> := <var:j> + <var:N1> ; <var:j> := <var:j> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:v> = <var:x> }} <def:poly> {{ <var:j> = <nat:5> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:1> * <var:x> /\ <var:N2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:1> * <var:x> /\ <var:N2> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:1> * <var:x> /\ <var:N2> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:1> * <var:x> /\ <var:j> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:N0> = <nat:5> /\ <var:j> = <nat:5> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:x> /\ <var:j> = <nat:5> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 