\begin{document} \begin{theorem} We define a code segment in \emph{Imp} : \begin{verbatim} <var:j> := <nat:1> ; <var:j> := <nat:2> + <var:j> * <var:h> ; <var:j> := <nat:2> + <var:j> * <var:h> ; <var:j> := <nat:1> + <var:j> * <var:h> ; <var:j> := <nat:3> + <var:j> * <var:h> \end{verbatim} Given it to be that $ <var:h> = <var:G> $ ahead of the execution of our series of instructions , then we have $ <var:j> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:h> = <var:G> \} \\ <var:j> := <nat:1> ; \\ \{ <var:h> = <var:G> \land <var:j> = <nat:1> \} \\ <var:j> := <nat:2> + <var:j> * <var:h> ; \\ \{ <var:h> = <var:G> \land <var:j> = <nat:1> \cdot <var:G> + <nat:2> \} \\ <var:j> := <nat:2> + <var:j> * <var:h> ; \\ \{ <var:h> = <var:G> \land <var:j> = <nat:1> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:2> \} \\ <var:j> := <nat:1> + <var:j> * <var:h> ; \\ \{ <var:h> = <var:G> \land <var:j> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:1> \} \\ <var:j> := <nat:3> + <var:j> * <var:h> \\ \{ <var:h> = <var:G> \land <var:j> = <nat:1> \cdot <var:G> ^ <nat:4> + <nat:2> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:h> = <var:G> }} <var:j> := <nat:1> ; <var:j> := <nat:2> + <var:j> * <var:h> ; <var:j> := <nat:2> + <var:j> * <var:h> ; <var:j> := <nat:1> + <var:j> * <var:h> ; <var:j> := <nat:3> + <var:j> * <var:h> {{ <var:j> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:j> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:j> = <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:j> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:j> = <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:j> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 