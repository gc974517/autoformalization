\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} : \begin{verbatim} <var:M1> := <var:X> ; <var:M2> := <var:M1> * <var:X> ; <var:M3> := <var:M2> * <var:X> ; <var:M0> := <nat:2> ; <var:M2> := <var:M2> * <nat:2> ; <var:M3> := <var:M3> * <nat:4> ; <var:K> := <var:M3> <var:K> := <var:K> + <var:M2> <var:K> := <var:K> + <var:M0> \end{verbatim} Given $ <var:X> = <var:Y> $ --- assuming some positive coefficients $ <var:Y> $ --- prior to the execution of our series of commands , it must be that we see $ <var:K> = <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> $ when series of commands is done . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:X> = <var:Y> \} \\ <var:M1> := <var:X> ; \\ \{ <var:X> = <var:Y> \land <var:M1> = <var:Y> \} \\ <var:M2> := <var:M1> * <var:X> ; \\ \{ <var:X> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:X> ; \\ \{ <var:X> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \land <var:M3> = <var:Y> ^ <nat:3> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:X> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \land <var:M3> = <var:Y> ^ <nat:3> \land <var:M0> = <nat:2> \} \\ <var:M2> := <var:M2> * <nat:2> ; \\ \{ <var:X> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <nat:2> \cdot <var:Y> ^ <nat:2> \land <var:M3> = <var:Y> ^ <nat:3> \land <var:M0> = <nat:2> \} \\ <var:M3> := <var:M3> * <nat:4> ; \\ \{ <var:X> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <nat:2> \cdot <var:Y> ^ <nat:2> \land <var:M3> = <nat:4> \cdot <var:Y> ^ <nat:3> \land <var:M0> = <nat:2> \} \\ <var:K> := <var:M3> \\ \{ <var:X> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <nat:2> \cdot <var:Y> ^ <nat:2> \land <var:M0> = <nat:2> \land <var:K> = <nat:4> \cdot <var:Y> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:M2> \\ \{ <var:X> = <var:Y> \land <var:M1> = <var:Y> \land <var:M0> = <nat:2> \land <var:K> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:M0> \\ \{ <var:X> = <var:Y> \land <var:K> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:2> \} \end{eqnarray} Given the above , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:X> = <var:Y> }} <var:M1> := <var:X> ; <var:M2> := <var:M1> * <var:X> ; <var:M3> := <var:M2> * <var:X> ; <var:M0> := <nat:2> ; <var:M2> := <var:M2> * <nat:2> ; <var:M3> := <var:M3> * <nat:4> ; <var:K> := <var:M3> <var:K> := <var:K> + <var:M2> <var:K> := <var:K> + <var:M0> {{ <var:K> = <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:M1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M2> = <var:Y> ^ <nat:2> /\ <var:M3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M2> = <var:Y> ^ <nat:2> /\ <var:M3> = <var:Y> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:M3> = <var:Y> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:Y> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:M0> = <nat:2> /\ <var:K> = <nat:4> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M0> = <nat:2> /\ <var:K> = <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:K> = <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 