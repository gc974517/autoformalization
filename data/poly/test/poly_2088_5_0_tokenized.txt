\begin{document} \begin{theorem} We define the following set of instructions : \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:s> ; <var:q> := <var:P1> ; <var:q> := <var:q> + <var:P0> \end{verbatim} Given it to be that $ <var:s> = <var:T> $ for natural numbers $ <var:T> $ prior to the evaluation of this program it follows that $ <var:q> = <nat:3> \times <var:T> + <nat:2> $ . \end{theorem} \begin{proof} Note that this decorated series of instructions . \begin{eqnarray} \{ <var:s> = <var:T> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:s> = <var:T> \land <var:P0> = <nat:2> \} \\ <var:P1> := <nat:3> ; \\ \{ <var:s> = <var:T> \land <var:P0> = <nat:2> \land <var:P1> = <nat:3> \} \\ <var:P1> := <var:P1> * <var:s> ; \\ \{ <var:s> = <var:T> \land <var:P0> = <nat:2> \land <var:P1> = <nat:3> \cdot <var:T> \} \\ <var:q> := <var:P1> ; \\ \{ <var:s> = <var:T> \land <var:P0> = <nat:2> \land <var:q> = <nat:3> \cdot <var:T> \} \end{eqnarray} Advancing running the program returns : \begin{eqnarray} <var:q> := <var:q> + <var:P0> \\ \{ <var:s> = <var:T> \land <var:q> = <nat:3> \cdot <var:T> + <nat:2> \} \end{eqnarray} Utilizing Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:s> = <var:T> }} <var:P0> := <nat:2> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:s> ; <var:q> := <var:P1> ; <var:q> := <var:q> + <var:P0> {{ <var:q> = <nat:3> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:P0> = <nat:2> /\ <var:q> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:q> = <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 