\begin{document} \begin{theorem} Consider the following series of commands such that \begin{verbatim} <var:W1> := <var:T> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:2> ; <var:g> := <var:W1> <var:g> := <var:g> + <var:W0> \end{verbatim} Allow ( assuming some natural numbers $ <var:Y> $ ) it to be that $ <var:T> = <var:Y> $ prior to the evaluation of our series of commands it follows that $ <var:g> = <nat:2> * <var:Y> + <nat:3> $ when series of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be shown by usual Hoare reasoning . Moving on , we see the assignment statement binding $ <var:T> $ into $ <var:W1>$ . This code advances the condition $ \{ <var:T> = <var:Y> \} $ as the postcondition $ \{ <var:T> = <var:Y> \land <var:W1> = <var:Y> \} $ . This is guaranteed using the assignment law defined by Hoare logic . Considering the subsequent line found in the code , we see the variable assignmet code \verb | <var:W0> := <nat:3> ; | . This takes the precondition $ \{ <var:T> = <var:Y> \land <var:W1> = <var:Y> \} $ to the postcondition $ \{ <var:T> = <var:Y> \land <var:W1> = <var:Y> \land <var:W0> = <nat:3> \} $ . Shifting focus toward the upcoming command seen in our segment of code , the variable assignmet line \verb | <var:W1> := <var:W1> * <nat:2> ; | . This advances the condition $ \{ <var:T> = <var:Y> \land <var:W1> = <var:Y> \land <var:W0> = <nat:3> \} $ toward the condition $ \{ <var:T> = <var:Y> \land <var:W1> = <nat:2> \cdot <var:Y> \land <var:W0> = <nat:3> \} $ . Moving on to the proceeding line of code seen in the code , we have the variable assignmet code \verb | <var:g> := <var:W1> | . This command forwards the precondition $ \{ <var:T> = <var:Y> \land <var:W1> = <nat:2> \cdot <var:Y> \land <var:W0> = <nat:3> \} $ into the postcondition $ \{ <var:T> = <var:Y> \land <var:W0> = <nat:3> \land <var:g> = <nat:2> \cdot <var:Y> \} $ . This is rigorously given through the assignment law from typical Hoare techniques . Observing the proceeding bit of code found in our series of instructions , we see the assignment command letting $ <var:g> + <var:W0$ toward $ <var:g>$ . This statement transfers $ \{ <var:T> = <var:Y> \land <var:W0> = <nat:3> \land <var:g> = <nat:2> \cdot <var:Y> \} $ into $ \{ <var:T> = <var:Y> \land <var:g> = <nat:2> \cdot <var:Y> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:T> = <var:Y> }} <var:W1> := <var:T> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:2> ; <var:g> := <var:W1> <var:g> := <var:g> + <var:W0> {{ <var:g> = <nat:2> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:W1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:W1> = <var:Y> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:W1> = <nat:2> * <var:Y> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:W0> = <nat:3> /\ <var:g> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:g> = <nat:2> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 