\begin{document} \begin{theorem} Consider the following list of commands as \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:U> ; <var:v> := <var:s1> ; <var:v> := <var:v> + <var:s0> \end{verbatim} Given it to be that $ <var:U> = <var:A> $ prior to the execution of our segment of code it follows that we see $ <var:v> = <nat:4> * <var:A> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning produces : \begin{eqnarray} \{ <var:U> = <var:A> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:U> = <var:A> \land <var:s0> = <nat:4> \} \\ <var:s1> := <nat:4> ; \\ \{ <var:U> = <var:A> \land <var:s0> = <nat:4> \land <var:s1> = <nat:4> \} \\ <var:s1> := <var:s1> * <var:U> ; \\ \{ <var:U> = <var:A> \land <var:s0> = <nat:4> \land <var:s1> = <nat:4> \times <var:A> \} \\ <var:v> := <var:s1> ; \\ \{ <var:U> = <var:A> \land <var:s0> = <nat:4> \land <var:v> = <nat:4> \times <var:A> \} \\ <var:v> := <var:v> + <var:s0> \\ \{ <var:U> = <var:A> \land <var:v> = <nat:4> \times <var:A> + <nat:4> \} \end{eqnarray} Considering the above , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:U> = <var:A> }} <var:s0> := <nat:4> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:U> ; <var:v> := <var:s1> ; <var:v> := <var:v> + <var:s0> {{ <var:v> = <nat:4> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:s0> = <nat:4> /\ <var:v> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:v> = <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 