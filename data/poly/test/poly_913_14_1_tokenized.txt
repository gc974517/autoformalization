\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:s> ; <var:J2> := <var:J1> * <var:s> ; <var:J3> := <var:J2> * <var:s> ; <var:J4> := <var:J3> * <var:s> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:8> ; <var:J2> := <var:J2> * <nat:6> ; <var:J3> := <var:J3> * <nat:4> ; <var:J4> := <var:J4> * <nat:8> ; <var:c> := <var:J4> <var:c> := <var:c> + <var:J3> <var:c> := <var:c> + <var:J2> <var:c> := <var:c> + <var:J1> <var:c> := <var:c> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:s> = <var:u> $ ahead of the execution of our code it holds that we see $ <var:c> = <nat:8> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:3> + <nat:6> \cdot <var:u> ^ <nat:2> + <nat:8> \cdot <var:u> + <nat:4> $ once set of commands has terminated . \end{theorem} \begin{proof} The argument for our code segment is evident through typical Hoare techniques . Keeping momentum , we have the environment update code binding $ <var:s> $ into $ <var:J1>$ . This redefines the condition $ \{ <var:s> = <var:u> \} $ as the postcondition $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \} $ . Advancing to the next step , the variable update statement letting $ <var:J1> * <var:s> $ toward $ <var:J2>$ . This forwards $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \} $ as the condition $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \} $ . Advancing to the upcoming command seen in the series of instructions , we see the variable assignmet line \verb | <var:J3> := <var:J2> * <var:s> ; | . This statement moves $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \} $ into $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \} $ . After , the variable assignmet statement defining $ <var:J3> * <var:s> $ as $ <var:J4>$ . This code advances $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \} $ toward $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \} $ . Further , the variable assignmet statement letting $ <nat:4> $ toward $ <var:J0>$ . This command takes the precondition $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \} $ toward the postcondition $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . This is guaranteed through the assignment scheme defined by typical Hoare reasoning . Following , we have the variable binding line yielding $ <var:J1> * <nat:8> $ toward $ <var:J1>$ . This line transfers the precondition $ \{ <var:s> = <var:u> \land <var:J1> = <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ as the condition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . This is given by the assignment rule defined by usual Hoare reasoning . Stepping forward , we see the environment update command \verb | <var:J2> := <var:J2> * <nat:6> ; | . This moves the precondition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ into the condition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . Advancing , we see the assignment code \verb | <var:J3> := <var:J3> * <nat:4> ; | . This redefines $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J3> = <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ as the condition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J3> = <nat:4> * <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . This is guaranteed through the assignment rule of standard Hoare logic . After , the variable update line letting $ <var:J4> * <nat:8> $ toward $ <var:J4>$ . This redefines $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J3> = <nat:4> * <var:u> ^ <nat:3> \land <var:J4> = <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ toward $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J3> = <nat:4> * <var:u> ^ <nat:3> \land <var:J4> = <nat:8> * <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . This is guaranteed using the assignment law defined in Hoare logic . After , we have the binding code \verb | <var:c> := <var:J4> | . This code takes the condition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J3> = <nat:4> * <var:u> ^ <nat:3> \land <var:J4> = <nat:8> * <var:u> ^ <nat:4> \land <var:J0> = <nat:4> \} $ into $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J3> = <nat:4> * <var:u> ^ <nat:3> \land <var:J0> = <nat:4> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> \} $ . Following , the statement \verb | <var:c> := <var:c> + <var:J3> | . This statement redefines the precondition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J3> = <nat:4> * <var:u> ^ <nat:3> \land <var:J0> = <nat:4> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> \} $ as $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J0> = <nat:4> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> \} $ . This is sound by the assignment scheme of Hoare logic . Moving on to the next step , the variable binding line defining $ <var:c> + <var:J2$ as $ <var:c>$ . This statement moves the precondition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J2> = <nat:6> * <var:u> ^ <nat:2> \land <var:J0> = <nat:4> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> \} $ to the postcondition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J0> = <nat:4> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> \} $ . This is given using the assignment rule defined by standard Hoare techniques . Moving on , the variable binding statement \verb | <var:c> := <var:c> + <var:J1> | . This redefines the precondition $ \{ <var:s> = <var:u> \land <var:J1> = <nat:8> * <var:u> \land <var:J0> = <nat:4> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> \} $ as $ \{ <var:s> = <var:u> \land <var:J0> = <nat:4> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> \} $ . Moving on to the proceeding statement in our segment of code , the environment update line defining $ <var:c> + <var:J0$ as $ <var:c>$ . This redefines the condition $ \{ <var:s> = <var:u> \land <var:J0> = <nat:4> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> \} $ into $ \{ <var:s> = <var:u> \land <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:4> \} $ . This is shown through the assignment inference rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Definition <def:poly> := <var:J1> := <var:s> ; <var:J2> := <var:J1> * <var:s> ; <var:J3> := <var:J2> * <var:s> ; <var:J4> := <var:J3> * <var:s> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:8> ; <var:J2> := <var:J2> * <nat:6> ; <var:J3> := <var:J3> * <nat:4> ; <var:J4> := <var:J4> * <nat:8> ; <var:c> := <var:J4> <var:c> := <var:c> + <var:J3> <var:c> := <var:c> + <var:J2> <var:c> := <var:c> + <var:J1> <var:c> := <var:c> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:s> = <var:u> }} <def:poly> {{ <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <var:u> /\ <var:J2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <var:u> /\ <var:J2> = <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <var:u> /\ <var:J2> = <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> /\ <var:J4> = <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <var:u> /\ <var:J2> = <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> /\ <var:J4> = <var:u> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <nat:8> * <var:u> /\ <var:J2> = <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> /\ <var:J4> = <var:u> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <nat:8> * <var:u> /\ <var:J2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:J3> = <var:u> ^ <nat:3> /\ <var:J4> = <var:u> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <nat:8> * <var:u> /\ <var:J2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:u> ^ <nat:3> /\ <var:J4> = <var:u> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <nat:8> * <var:u> /\ <var:J2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:u> ^ <nat:3> /\ <var:J4> = <nat:8> * <var:u> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <nat:8> * <var:u> /\ <var:J2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:u> ^ <nat:3> /\ <var:J0> = <nat:4> /\ <var:c> = <nat:8> * <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <nat:8> * <var:u> /\ <var:J2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:J0> = <nat:4> /\ <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J1> = <nat:8> * <var:u> /\ <var:J0> = <nat:4> /\ <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:J0> = <nat:4> /\ <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:c> = <nat:8> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 