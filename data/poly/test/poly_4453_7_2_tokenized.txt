\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:3> + <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:3> + <var:t> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Assume that we have $ <var:c> = <var:A> $ before the execution of the series of instructions , then $ <var:t> = <nat:2> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the code segment is done through Hoare reasoning . Considering the next lines of codeseen in the set of commands , we have \verb | { <var:c> = <var:A> } <var:t> := <nat:2> { <var:c> = <var:A> \land <var:t> = <nat:2> } | , \verb | { <var:c> = <var:A> \land <var:t> = <nat:2> } <var:t> := <nat:1> + <var:t> * <var:c> { <var:c> = <var:A> \land <var:t> = <nat:2> * <var:A> + <nat:1> } | , \verb | { <var:c> = <var:A> \land <var:t> = <nat:2> * <var:A> + <nat:1> } <var:t> := <var:t> * <var:c> { <var:c> = <var:A> \land <var:t> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + } | , \verb | { <var:c> = <var:A> \land <var:t> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + } <var:t> := <nat:3> + <var:t> * <var:c> { <var:c> = <var:A> \land <var:t> = <nat:2> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:3> } | and \verb | { <var:c> = <var:A> \land <var:t> = <nat:2> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:3> } <var:t> := <var:t> * <var:c> { <var:c> = <var:A> \land <var:t> = <nat:2> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + } | . This is shown to be logically sound with the variable update law given in Hoare logic . Taking a look at the upcoming command contained in the series of commands , we see \verb | { <var:c> = <var:A> } <var:t> := <nat:2> { <var:c> = <var:A> \land <var:t> = <nat:2> } | . This is ensured with the binding scheme defined by Hoare logic . Following , \verb | { <var:c> = <var:A> } <var:t> := <nat:2> { <var:c> = <var:A> \land <var:t> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:3> + <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <var:t> * <var:c> ; <var:t> := <nat:3> + <var:t> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:c> = <var:A> }} <def:poly> {{ <var:t> = <nat:2> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:t> = <nat:2> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:t> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:t> = <nat:2> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:t> = <nat:2> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:t> = <nat:2> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:t> = <nat:2> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 