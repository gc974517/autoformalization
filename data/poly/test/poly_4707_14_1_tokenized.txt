\begin{document} \begin{theorem} Take the following list of commands : \begin{verbatim} <var:e1> := <var:A> ; <var:e2> := <var:e1> * <var:A> ; <var:e3> := <var:e2> * <var:A> ; <var:e4> := <var:e3> * <var:A> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:3> ; <var:e3> := <var:e3> * <nat:7> ; <var:e4> := <var:e4> * <nat:5> ; <var:R> := <var:e4> <var:R> := <var:R> + <var:e3> <var:R> := <var:R> + <var:e2> <var:R> := <var:R> + <var:e1> <var:R> := <var:R> + <var:e0> \end{verbatim} Allowing it to hold that $ <var:A> = <var:d> $ ahead of the evaluation of the series of instructions it follows that we have $ <var:R> = <nat:5> \times <var:d> ^ <nat:4> + <nat:7> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:9> $ after segment of code has exited . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:A> = <var:d> \} \\ <var:e1> := <var:A> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <var:d> \} \\ <var:e2> := <var:e1> * <var:A> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <var:d> \land <var:e2> = <var:d> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:A> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <var:d> \land <var:e2> = <var:d> ^ <nat:2> \land <var:e3> = <var:d> ^ <nat:3> \} \\ <var:e4> := <var:e3> * <var:A> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <var:d> \land <var:e2> = <var:d> ^ <nat:2> \land <var:e3> = <var:d> ^ <nat:3> \land <var:e4> = <var:d> ^ <nat:4> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <var:d> \land <var:e2> = <var:d> ^ <nat:2> \land <var:e3> = <var:d> ^ <nat:3> \land <var:e4> = <var:d> ^ <nat:4> \land <var:e0> = <nat:9> \} \\ <var:e1> := <var:e1> * <nat:4> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <nat:4> \cdot <var:d> \land <var:e2> = <var:d> ^ <nat:2> \land <var:e3> = <var:d> ^ <nat:3> \land <var:e4> = <var:d> ^ <nat:4> \land <var:e0> = <nat:9> \} \\ <var:e2> := <var:e2> * <nat:3> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <nat:4> \cdot <var:d> \land <var:e2> = <nat:3> \cdot <var:d> ^ <nat:2> \land <var:e3> = <var:d> ^ <nat:3> \land <var:e4> = <var:d> ^ <nat:4> \land <var:e0> = <nat:9> \} \\ <var:e3> := <var:e3> * <nat:7> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <nat:4> \cdot <var:d> \land <var:e2> = <nat:3> \cdot <var:d> ^ <nat:2> \land <var:e3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:e4> = <var:d> ^ <nat:4> \land <var:e0> = <nat:9> \} \\ <var:e4> := <var:e4> * <nat:5> ; \\ \{ <var:A> = <var:d> \land <var:e1> = <nat:4> \cdot <var:d> \land <var:e2> = <nat:3> \cdot <var:d> ^ <nat:2> \land <var:e3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:e4> = <nat:5> \cdot <var:d> ^ <nat:4> \land <var:e0> = <nat:9> \} \\ <var:R> := <var:e4> \\ \{ <var:A> = <var:d> \land <var:e1> = <nat:4> \cdot <var:d> \land <var:e2> = <nat:3> \cdot <var:d> ^ <nat:2> \land <var:e3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:e0> = <nat:9> \land <var:R> = <nat:5> \cdot <var:d> ^ <nat:4> \} \\ <var:R> := <var:R> + <var:e3> \\ \{ <var:A> = <var:d> \land <var:e1> = <nat:4> \cdot <var:d> \land <var:e2> = <nat:3> \cdot <var:d> ^ <nat:2> \land <var:e0> = <nat:9> \land <var:R> = <nat:5> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:e2> \\ \{ <var:A> = <var:d> \land <var:e1> = <nat:4> \cdot <var:d> \land <var:e0> = <nat:9> \land <var:R> = <nat:5> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:e1> \\ \{ <var:A> = <var:d> \land <var:e0> = <nat:9> \land <var:R> = <nat:5> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> \} \\ <var:R> := <var:R> + <var:e0> \\ \{ <var:A> = <var:d> \land <var:R> = <nat:5> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:9> \} \end{eqnarray} Given the above , our segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <var:e4> : string := " <var:e4> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:A> = <var:d> }} <var:e1> := <var:A> ; <var:e2> := <var:e1> * <var:A> ; <var:e3> := <var:e2> * <var:A> ; <var:e4> := <var:e3> * <var:A> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:3> ; <var:e3> := <var:e3> * <nat:7> ; <var:e4> := <var:e4> * <nat:5> ; <var:R> := <var:e4> <var:R> := <var:R> + <var:e3> <var:R> := <var:R> + <var:e2> <var:R> := <var:R> + <var:e1> <var:R> := <var:R> + <var:e0> {{ <var:R> = <nat:5> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <var:d> /\ <var:e2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <var:d> /\ <var:e2> = <var:d> ^ <nat:2> /\ <var:e3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <var:d> /\ <var:e2> = <var:d> ^ <nat:2> /\ <var:e3> = <var:d> ^ <nat:3> /\ <var:e4> = <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <var:d> /\ <var:e2> = <var:d> ^ <nat:2> /\ <var:e3> = <var:d> ^ <nat:3> /\ <var:e4> = <var:d> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <nat:4> * <var:d> /\ <var:e2> = <var:d> ^ <nat:2> /\ <var:e3> = <var:d> ^ <nat:3> /\ <var:e4> = <var:d> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <nat:4> * <var:d> /\ <var:e2> = <nat:3> * <var:d> ^ <nat:2> /\ <var:e3> = <var:d> ^ <nat:3> /\ <var:e4> = <var:d> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <nat:4> * <var:d> /\ <var:e2> = <nat:3> * <var:d> ^ <nat:2> /\ <var:e3> = <nat:7> * <var:d> ^ <nat:3> /\ <var:e4> = <var:d> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <nat:4> * <var:d> /\ <var:e2> = <nat:3> * <var:d> ^ <nat:2> /\ <var:e3> = <nat:7> * <var:d> ^ <nat:3> /\ <var:e4> = <nat:5> * <var:d> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <nat:4> * <var:d> /\ <var:e2> = <nat:3> * <var:d> ^ <nat:2> /\ <var:e3> = <nat:7> * <var:d> ^ <nat:3> /\ <var:e0> = <nat:9> /\ <var:R> = <nat:5> * <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <nat:4> * <var:d> /\ <var:e2> = <nat:3> * <var:d> ^ <nat:2> /\ <var:e0> = <nat:9> /\ <var:R> = <nat:5> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e1> = <nat:4> * <var:d> /\ <var:e0> = <nat:9> /\ <var:R> = <nat:5> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:e0> = <nat:9> /\ <var:R> = <nat:5> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:R> = <nat:5> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 