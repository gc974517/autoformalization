\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D> := <nat:2> ; <var:D> := <nat:4> + <var:D> * <var:O> ; <var:D> := <nat:2> + <var:D> * <var:O> ; <var:D> := <nat:4> + <var:D> * <var:O> ; <var:D> := <nat:3> + <var:D> * <var:O> ; <var:D> := <nat:1> + <var:D> * <var:O> ; <var:D> := <nat:4> + <var:D> * <var:O> ; <var:D> := <var:D> * <var:O> ; <var:D> := <var:D> * <var:O> ; <var:D> := <nat:1> + <var:D> * <var:O> ; <var:D> := <nat:1> + <var:D> * <var:O> ; <var:D> := <var:D> * <var:O> ; <var:D> := <nat:3> + <var:D> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Assume ( given every integers $ <var:y> $ ) that $ <var:O> = <var:y> $ before the evaluation of this program then we see $ <var:D> = <nat:2> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> $ when code segment has executed . \end{theorem} \begin{proof} The flow of logic for our set of commands is given using typical Hoare techniques . Moving on , we see \begin{verbatim} { <var:O> = <var:y> } <var:D> := <nat:2> { <var:O> = <var:y> \land <var:D> = <nat:2> } { <var:O> = <var:y> \land <var:D> = <nat:2> } <var:D> := <nat:4> + <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> + <nat:4> } { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> + <nat:4> } <var:D> := <nat:2> + <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:2> } { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:2> } <var:D> := <nat:4> + <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:4> } { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:4> } <var:D> := <nat:3> + <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:4> + <nat:4> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:3> } { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:4> + <nat:4> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:3> } <var:D> := <nat:1> + <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:5> + <nat:4> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:1> } { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:5> + <nat:4> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:1> } <var:D> := <nat:4> + <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:6> + <nat:4> \times <var:y> ^ <nat:5> + <nat:2> \times <var:y> ^ <nat:4> + <nat:4> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:4> } { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:6> + <nat:4> \times <var:y> ^ <nat:5> + <nat:2> \times <var:y> ^ <nat:4> + <nat:4> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:4> } <var:D> := <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:7> + <nat:4> \times <var:y> ^ <nat:6> + <nat:2> \times <var:y> ^ <nat:5> + <nat:4> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + } { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:7> + <nat:4> \times <var:y> ^ <nat:6> + <nat:2> \times <var:y> ^ <nat:5> + <nat:4> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + } <var:D> := <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> ^ <nat:8> + <nat:4> \times <var:y> ^ <nat:7> + <nat:2> \times <var:y> ^ <nat:6> + <nat:4> \times <var:y> ^ <nat:5> + <nat:3> \times <var:y> ^ <nat:4> + <nat:1> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + } \end{verbatim} Advancing to the next step , \begin{verbatim} { <var:O> = <var:y> } <var:D> := <nat:2> { <var:O> = <var:y> \land <var:D> = <nat:2> } { <var:O> = <var:y> \land <var:D> = <nat:2> } <var:D> := <nat:4> + <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> + <nat:4> } \end{verbatim} This is given through the variable assignmet inference rule given by Hoare techniques . After , we have \begin{verbatim} { <var:O> = <var:y> } <var:D> := <nat:2> { <var:O> = <var:y> \land <var:D> = <nat:2> } { <var:O> = <var:y> \land <var:D> = <nat:2> } <var:D> := <nat:4> + <var:D> * <var:O> { <var:O> = <var:y> \land <var:D> = <nat:2> \times <var:y> + <nat:4> } \end{verbatim} This is rigorously given by the environment update scheme defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:2> ; <var:D> := <nat:4> + <var:D> * <var:O> ; <var:D> := <nat:2> + <var:D> * <var:O> ; <var:D> := <nat:4> + <var:D> * <var:O> ; <var:D> := <nat:3> + <var:D> * <var:O> ; <var:D> := <nat:1> + <var:D> * <var:O> ; <var:D> := <nat:4> + <var:D> * <var:O> ; <var:D> := <var:D> * <var:O> ; <var:D> := <var:D> * <var:O> ; <var:D> := <nat:1> + <var:D> * <var:O> ; <var:D> := <nat:1> + <var:D> * <var:O> ; <var:D> := <var:D> * <var:O> ; <var:D> := <nat:3> + <var:D> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:O> = <var:y> }} <def:poly> {{ <var:D> = <nat:2> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:1> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:11> + <nat:4> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:D> = <nat:2> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:2> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 