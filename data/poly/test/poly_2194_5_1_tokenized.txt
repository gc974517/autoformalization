\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y1> := <var:x> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:4> ; <var:q> := <var:y1> <var:q> := <var:q> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:x> = <var:m> $ , given some $ <var:m> $ , prior to interpreting our series of instructions , it follows that we see $ <var:q> = <nat:4> * <var:m> + <nat:8> $ . \end{theorem} \begin{proof} Applying typical Hoare logic gives us : \begin{eqnarray} \{ <var:x> = <var:m> \} \\ <var:y1> := <var:x> ; \\ \{ <var:x> = <var:m> \land <var:y1> = <var:m> \} \\ <var:y0> := <nat:8> ; \\ \{ <var:x> = <var:m> \land <var:y1> = <var:m> \land <var:y0> = <nat:8> \} \\ <var:y1> := <var:y1> * <nat:4> ; \\ \{ <var:x> = <var:m> \land <var:y1> = <nat:4> \cdot <var:m> \land <var:y0> = <nat:8> \} \end{eqnarray} Furthering the evaluation of our series of commands returns : \begin{eqnarray} <var:q> := <var:y1> \\ \{ <var:x> = <var:m> \land <var:y0> = <nat:8> \land <var:q> = <nat:4> \cdot <var:m> \} \\ <var:q> := <var:q> + <var:y0> \\ \{ <var:x> = <var:m> \land <var:q> = <nat:4> \cdot <var:m> + <nat:8> \} \end{eqnarray} Given the above , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:x> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:4> ; <var:q> := <var:y1> <var:q> := <var:q> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:x> = <var:m> }} <def:poly> {{ <var:q> = <nat:4> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:y1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:y1> = <var:m> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:y1> = <nat:4> * <var:m> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:y0> = <nat:8> /\ <var:q> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:q> = <nat:4> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 