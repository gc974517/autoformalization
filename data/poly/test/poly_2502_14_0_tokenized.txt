\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:5> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:w> ; <var:n2> := <nat:9> ; <var:n2> := <var:n2> * <var:w> ; <var:n2> := <var:n2> * <var:w> ; <var:n3> := <nat:2> ; <var:n3> := <var:n3> * <var:w> ; <var:n3> := <var:n3> * <var:w> ; <var:n3> := <var:n3> * <var:w> ; <var:C> := <var:n3> ; <var:C> := <var:C> + <var:n2> ; <var:C> := <var:C> + <var:n1> ; <var:C> := <var:C> + <var:n0> \end{verbatim} Given $ <var:w> = <var:Z> $ , taking positive integers $ <var:Z> $ , ahead of evaluating this segment of code it must be that $ <var:C> = <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:9> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:5> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:w> = <var:Z> \} \\ <var:n0> := <nat:5> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \} \\ <var:n1> := <nat:2> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> \} \\ <var:n1> := <var:n1> * <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \} \\ <var:n2> := <nat:9> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:9> \} \\ <var:n2> := <var:n2> * <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:9> * <var:Z> \} \\ <var:n2> := <var:n2> * <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:n3> := <nat:2> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:n3> = <nat:2> \} \\ <var:n3> := <var:n3> * <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:n3> = <nat:2> * <var:Z> \} \\ <var:n3> := <var:n3> * <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:n3> = <nat:2> * <var:Z> ^ <nat:2> \} \\ <var:n3> := <var:n3> * <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:n3> = <nat:2> * <var:Z> ^ <nat:3> \} \\ <var:C> := <var:n3> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:n2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:C> = <nat:2> * <var:Z> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:n2> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:n1> = <nat:2> * <var:Z> \land <var:C> = <nat:2> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:n1> ; \\ \{ <var:w> = <var:Z> \land <var:n0> = <nat:5> \land <var:C> = <nat:2> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> \} \\ <var:C> := <var:C> + <var:n0> \\ \{ <var:w> = <var:Z> \land <var:C> = <nat:2> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:5> \} \end{eqnarray} As a result , this series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:w> = <var:Z> }} <var:n0> := <nat:5> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:w> ; <var:n2> := <nat:9> ; <var:n2> := <var:n2> * <var:w> ; <var:n2> := <var:n2> * <var:w> ; <var:n3> := <nat:2> ; <var:n3> := <var:n3> * <var:w> ; <var:n3> := <var:n3> * <var:w> ; <var:n3> := <var:n3> * <var:w> ; <var:C> := <var:n3> ; <var:C> := <var:C> + <var:n2> ; <var:C> := <var:C> + <var:n1> ; <var:C> := <var:C> + <var:n0> {{ <var:C> = <nat:2> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:n3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:n2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:C> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:2> * <var:Z> /\ <var:C> = <nat:2> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:n0> = <nat:5> /\ <var:C> = <nat:2> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:C> = <nat:2> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 