\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:w> := <nat:2> ; <var:w> := <nat:2> + <var:w> * <var:J> ; <var:w> := <var:w> * <var:J> ; <var:w> := <nat:3> + <var:w> * <var:J> ; <var:w> := <nat:2> + <var:w> * <var:J> ; <var:w> := <nat:1> + <var:w> * <var:J> ; <var:w> := <var:w> * <var:J> ; <var:w> := <var:w> * <var:J> ; <var:w> := <nat:4> + <var:w> * <var:J> ; <var:w> := <var:w> * <var:J> ; <var:w> := <nat:1> + <var:w> * <var:J> \end{verbatim} Allow that we have $ <var:J> = <var:c> $ prior to running this segment of code it holds that $ <var:w> = <nat:2> \times <var:c> ^ <nat:10> + <nat:2> \times <var:c> ^ <nat:9> + <nat:3> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:6> + <nat:1> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the code segment is accomplished with usual Hoare logic . Now , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:c> \} & <var:w> := <nat:2> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \} & <var:w> := <nat:2> + <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> + <nat:2> \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> + <nat:2> \} & <var:w> := <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + \} & <var:w> := <nat:3> + <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:3> \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:3> \} & <var:w> := <nat:2> + <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:2> \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> + <nat:2> \} & <var:w> := <nat:1> + <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:1> \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:1> \} & <var:w> := <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + \} & <var:w> := <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + \} & <var:w> := <nat:4> + <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:8> + <nat:2> \times <var:c> ^ <nat:7> + <nat:3> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:4> \} \\ \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:8> + <nat:2> \times <var:c> ^ <nat:7> + <nat:3> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:4> \} & <var:w> := <var:w> * <var:J> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \times <var:c> ^ <nat:9> + <nat:2> \times <var:c> ^ <nat:8> + <nat:3> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> + \} \end{tabular} Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:J> = <var:c> \} & <var:w> := <nat:2> & \{ <var:J> = <var:c> \land <var:w> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:J> = <var:c> }} <var:w> := <nat:2> ; <var:w> := <nat:2> + <var:w> * <var:J> ; <var:w> := <var:w> * <var:J> ; <var:w> := <nat:3> + <var:w> * <var:J> ; <var:w> := <nat:2> + <var:w> * <var:J> ; <var:w> := <nat:1> + <var:w> * <var:J> ; <var:w> := <var:w> * <var:J> ; <var:w> := <var:w> * <var:J> ; <var:w> := <nat:4> + <var:w> * <var:J> ; <var:w> := <var:w> * <var:J> ; <var:w> := <nat:1> + <var:w> * <var:J> {{ <var:w> = <nat:2> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:w> = <nat:2> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 