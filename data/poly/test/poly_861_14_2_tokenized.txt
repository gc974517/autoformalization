\begin{document} \begin{theorem} We define a list of instructions as \begin{verbatim} <var:V> := <nat:2> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> ; <var:V> := <nat:2> + <var:V> * <var:Y> ; <var:V> := <nat:4> + <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> \end{verbatim} Allowing ( given any whole numbers $ <var:r> $ ) that $ <var:Y> = <var:r> $ ahead of evaluating this series of commands it holds that we have $ <var:V> = <nat:2> \cdot <var:r> ^ <nat:13> + <nat:1> \cdot <var:r> ^ <nat:11> + <nat:1> \cdot <var:r> ^ <nat:10> + <nat:2> \cdot <var:r> ^ <nat:9> + <nat:4> \cdot <var:r> ^ <nat:8> + <nat:1> \cdot <var:r> ^ <nat:5> + <nat:3> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:r> \} \\ <var:V> := <nat:2> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \} \\ <var:V> := <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> + \} \\ <var:V> := <nat:1> + <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:2> + <nat:1> \} \\ <var:V> := <nat:1> + <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> + <nat:1> \} \\ <var:V> := <nat:2> + <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:2> \} \\ <var:V> := <nat:4> + <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:5> + <nat:1> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:4> \} \\ <var:V> := <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:6> + <nat:1> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + \} \\ <var:V> := <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:7> + <nat:1> \times <var:r> ^ <nat:5> + <nat:1> \times <var:r> ^ <nat:4> + <nat:2> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + \} \\ <var:V> := <nat:1> + <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:8> + <nat:1> \times <var:r> ^ <nat:6> + <nat:1> \times <var:r> ^ <nat:5> + <nat:2> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:1> \} \\ <var:V> := <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:9> + <nat:1> \times <var:r> ^ <nat:7> + <nat:1> \times <var:r> ^ <nat:6> + <nat:2> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> + \} \\ <var:V> := <nat:3> + <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:10> + <nat:1> \times <var:r> ^ <nat:8> + <nat:1> \times <var:r> ^ <nat:7> + <nat:2> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:1> \times <var:r> ^ <nat:2> + <nat:3> \} \\ <var:V> := <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:11> + <nat:1> \times <var:r> ^ <nat:9> + <nat:1> \times <var:r> ^ <nat:8> + <nat:2> \times <var:r> ^ <nat:7> + <nat:4> \times <var:r> ^ <nat:6> + <nat:1> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> + \} \\ <var:V> := <nat:3> + <var:V> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:12> + <nat:1> \times <var:r> ^ <nat:10> + <nat:1> \times <var:r> ^ <nat:9> + <nat:2> \times <var:r> ^ <nat:8> + <nat:4> \times <var:r> ^ <nat:7> + <nat:1> \times <var:r> ^ <nat:4> + <nat:3> \times <var:r> ^ <nat:2> + <nat:3> \} \\ <var:V> := <nat:1> + <var:V> * <var:Y> \\ \{ <var:Y> = <var:r> \land <var:V> = <nat:2> \times <var:r> ^ <nat:13> + <nat:1> \times <var:r> ^ <nat:11> + <nat:1> \times <var:r> ^ <nat:10> + <nat:2> \times <var:r> ^ <nat:9> + <nat:4> \times <var:r> ^ <nat:8> + <nat:1> \times <var:r> ^ <nat:5> + <nat:3> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> + <nat:1> \} \end{eqnarray} The application of Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Y> = <var:r> }} <var:V> := <nat:2> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> ; <var:V> := <nat:2> + <var:V> * <var:Y> ; <var:V> := <nat:4> + <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> ; <var:V> := <var:V> * <var:Y> ; <var:V> := <nat:3> + <var:V> * <var:Y> ; <var:V> := <nat:1> + <var:V> * <var:Y> {{ <var:V> = <nat:2> * <var:r> ^ <nat:13> + <nat:1> * <var:r> ^ <nat:11> + <nat:1> * <var:r> ^ <nat:10> + <nat:2> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:1> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:6> + <nat:1> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:7> + <nat:1> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:8> + <nat:1> * <var:r> ^ <nat:6> + <nat:1> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:9> + <nat:1> * <var:r> ^ <nat:7> + <nat:1> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:1> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:10> + <nat:1> * <var:r> ^ <nat:8> + <nat:1> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:11> + <nat:1> * <var:r> ^ <nat:9> + <nat:1> * <var:r> ^ <nat:8> + <nat:2> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:6> + <nat:1> * <var:r> ^ <nat:3> + <nat:3> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:12> + <nat:1> * <var:r> ^ <nat:10> + <nat:1> * <var:r> ^ <nat:9> + <nat:2> * <var:r> ^ <nat:8> + <nat:4> * <var:r> ^ <nat:7> + <nat:1> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:V> = <nat:2> * <var:r> ^ <nat:13> + <nat:1> * <var:r> ^ <nat:11> + <nat:1> * <var:r> ^ <nat:10> + <nat:2> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:1> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 