\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:1> ; <var:w> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Allowing that we have $ <var:y> = <var:b> $ before the evaluation of this code segment then we have $ <var:w> = <nat:1> $ . \end{theorem} \begin{proof} The proof of our set of instructions is given by standard Hoare techniques . Moving onward , \begin{verbatim} { <var:y> = <var:b> } <var:X0> := <nat:1> { <var:y> = <var:b> \land <var:X0> = <nat:1> } { <var:y> = <var:b> \land <var:X0> = <nat:1> } <var:w> := <var:X0{ <var:y> = <var:b> \land <var:w> = <nat:1> } \end{verbatim} This is sound using the binding law defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:1> ; <var:w> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:y> = <var:b> }} <def:poly> {{ <var:w> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:b> /\ <var:w> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 