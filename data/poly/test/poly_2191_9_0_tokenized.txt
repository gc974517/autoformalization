\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:4> ; <var:r1> := <nat:7> ; <var:r1> := <var:r1> * <var:x> ; <var:r2> := <nat:1> ; <var:r2> := <var:r2> * <var:x> ; <var:r2> := <var:r2> * <var:x> ; <var:p> := <var:r2> ; <var:p> := <var:p> + <var:r1> ; <var:p> := <var:p> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Assume , taking positive integers $ <var:U> $ , that $ <var:x> = <var:U> $ prior to the execution of this code it follows that $ <var:p> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> + <nat:4> $ . \end{theorem} \begin{proof} Using standard Hoare logic gives : \begin{eqnarray} \{ <var:x> = <var:U> \} \\ <var:r0> := <nat:4> ; \\ \{ <var:x> = <var:U> \land <var:r0> = <nat:4> \} \\ <var:r1> := <nat:7> ; \\ \{ <var:x> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:7> \} \\ <var:r1> := <var:r1> * <var:x> ; \\ \{ <var:x> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:7> \cdot <var:U> \} \\ <var:r2> := <nat:1> ; \\ \{ <var:x> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:7> \cdot <var:U> \land <var:r2> = <nat:1> \} \\ <var:r2> := <var:r2> * <var:x> ; \\ \{ <var:x> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:7> \cdot <var:U> \land <var:r2> = <nat:1> \cdot <var:U> \} \\ <var:r2> := <var:r2> * <var:x> ; \\ \{ <var:x> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:7> \cdot <var:U> \land <var:r2> = <nat:1> \cdot <var:U> ^ <nat:2> \} \\ <var:p> := <var:r2> ; \\ \{ <var:x> = <var:U> \land <var:r0> = <nat:4> \land <var:r1> = <nat:7> \cdot <var:U> \land <var:p> = <nat:1> \cdot <var:U> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:r1> ; \\ \{ <var:x> = <var:U> \land <var:r0> = <nat:4> \land <var:p> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> \} \\ <var:p> := <var:p> + <var:r0> \\ \{ <var:x> = <var:U> \land <var:p> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> + <nat:4> \} \end{eqnarray} Therefore , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r0> := <nat:4> ; <var:r1> := <nat:7> ; <var:r1> := <var:r1> * <var:x> ; <var:r2> := <nat:1> ; <var:r2> := <var:r2> * <var:x> ; <var:r2> := <var:r2> * <var:x> ; <var:p> := <var:r2> ; <var:p> := <var:p> + <var:r1> ; <var:p> := <var:p> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:x> = <var:U> }} <def:poly> {{ <var:p> = <nat:1> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:7> * <var:U> /\ <var:r2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:7> * <var:U> /\ <var:r2> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:7> * <var:U> /\ <var:r2> = <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:7> * <var:U> /\ <var:p> = <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:r0> = <nat:4> /\ <var:p> = <nat:1> * <var:U> ^ <nat:2> + <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p> = <nat:1> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 