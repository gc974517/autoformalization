\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:n> := <nat:3> ; <var:n> := <nat:4> + <var:n> * <var:B> \end{verbatim} Assume $ <var:B> = <var:I> $ ( letting positive integer coefficients $ <var:I> $ ) ahead of evaluating the segment of code , it must be that we see $ <var:n> = <nat:3> \times <var:I> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives : \begin{eqnarray} \{ <var:B> = <var:I> \} \\ <var:n> := <nat:3> ; \\ \{ <var:B> = <var:I> \land <var:n> = <nat:3> \} \\ <var:n> := <nat:4> + <var:n> * <var:B> \\ \{ <var:B> = <var:I> \land <var:n> = <nat:3> \times <var:I> + <nat:4> \} \end{eqnarray} Given the above , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:B> = <var:I> }} <var:n> := <nat:3> ; <var:n> := <nat:4> + <var:n> * <var:B> {{ <var:n> = <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:n> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:n> = <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 