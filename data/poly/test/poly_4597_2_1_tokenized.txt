\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:6> ; <var:z> := <var:R0> \end{verbatim} Allowing that we have $ <var:N> = <var:d> $ before the execution of our set of instructions then we see $ <var:z> = <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for this code segment can be accomplished with standard Hoare logic . Moving on , the line defining $ <nat:6> $ into $ <var:R0>$ . This statement takes the condition $ \{ <var:N> = <var:d> \} $ into $ \{ <var:N> = <var:d> \land <var:R0> = <nat:6> \} $ . Looking at the following statement found in our code , we have the variable binding line \verb | <var:z> := <var:R0> | . This command advances the precondition $ \{ <var:N> = <var:d> \land <var:R0> = <nat:6> \} $ into the condition $ \{ <var:N> = <var:d> \land <var:z> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:N> = <var:d> }} <var:R0> := <nat:6> ; <var:z> := <var:R0> {{ <var:z> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:d> /\ <var:z> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 