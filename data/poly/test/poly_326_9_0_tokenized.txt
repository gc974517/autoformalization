\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:3> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:S> ; <var:m2> := <nat:4> ; <var:m2> := <var:m2> * <var:S> ; <var:m2> := <var:m2> * <var:S> ; <var:g> := <var:m2> ; <var:g> := <var:g> + <var:m1> ; <var:g> := <var:g> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:S> = <var:p> $ ahead of running this program , then we have $ <var:g> = <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic yields : \begin{eqnarray} \{ <var:S> = <var:p> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:S> = <var:p> \land <var:m0> = <nat:3> \} \\ <var:m1> := <nat:2> ; \\ \{ <var:S> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:2> \} \\ <var:m1> := <var:m1> * <var:S> ; \\ \{ <var:S> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:2> \cdot <var:p> \} \\ <var:m2> := <nat:4> ; \\ \{ <var:S> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:2> \cdot <var:p> \land <var:m2> = <nat:4> \} \\ <var:m2> := <var:m2> * <var:S> ; \\ \{ <var:S> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:2> \cdot <var:p> \land <var:m2> = <nat:4> \cdot <var:p> \} \\ <var:m2> := <var:m2> * <var:S> ; \\ \{ <var:S> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:2> \cdot <var:p> \land <var:m2> = <nat:4> \cdot <var:p> ^ <nat:2> \} \\ <var:g> := <var:m2> ; \\ \{ <var:S> = <var:p> \land <var:m0> = <nat:3> \land <var:m1> = <nat:2> \cdot <var:p> \land <var:g> = <nat:4> \cdot <var:p> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:m1> ; \\ \{ <var:S> = <var:p> \land <var:m0> = <nat:3> \land <var:g> = <nat:4> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> \} \\ <var:g> := <var:g> + <var:m0> \\ \{ <var:S> = <var:p> \land <var:g> = <nat:4> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:3> \} \end{eqnarray} Thus , our code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:m1> := <nat:2> ; <var:m1> := <var:m1> * <var:S> ; <var:m2> := <nat:4> ; <var:m2> := <var:m2> * <var:S> ; <var:m2> := <var:m2> * <var:S> ; <var:g> := <var:m2> ; <var:g> := <var:g> + <var:m1> ; <var:g> := <var:g> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:S> = <var:p> }} <def:poly> {{ <var:g> = <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:2> * <var:p> /\ <var:m2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:2> * <var:p> /\ <var:m2> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:2> * <var:p> /\ <var:m2> = <nat:4> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:2> * <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:m0> = <nat:3> /\ <var:g> = <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 