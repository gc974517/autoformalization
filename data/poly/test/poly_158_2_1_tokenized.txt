\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:5> ; <var:P> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Allow with some natural coefficients $ <var:h> $ it to be that $ <var:S> = <var:h> $ ahead of interpreting our series of instructions then we have $ <var:P> = <nat:5> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be accomplished by typical Hoare techniques . Advancing to the subsequent statement seen in our list of commands , the line \verb | <var:j0> := <nat:5> ; | . This forwards the condition $ \{ <var:S> = <var:h> \} $ into the condition $ \{ <var:S> = <var:h> \land <var:j0> = <nat:5> \} $ . Moving onward , we have the variable assignmet statement binding $ <var:j0$ as $ <var:P>$ . This forwards $ \{ <var:S> = <var:h> \land <var:j0> = <nat:5> \} $ into $ \{ <var:S> = <var:h> \land <var:P> = <nat:5> \} $ . This is rigorously given through the assignment law given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:5> ; <var:P> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:S> = <var:h> }} <def:poly> {{ <var:P> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:P> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 