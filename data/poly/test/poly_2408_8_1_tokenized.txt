\begin{document} \begin{theorem} Consider a code segment such that \begin{verbatim} <var:a1> := <var:w> ; <var:a2> := <var:a1> * <var:w> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:4> ; <var:a2> := <var:a2> * <nat:1> ; <var:P> := <var:a2> <var:P> := <var:P> + <var:a1> <var:P> := <var:P> + <var:a0> \end{verbatim} Allowing that we have $ <var:w> = <var:Z> $ --- for some integers $ <var:Z> $ --- prior to interpreting this series of instructions , it holds that $ <var:P> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:w> = <var:Z> \} \\ <var:a1> := <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:a1> = <var:Z> \} \\ <var:a2> := <var:a1> * <var:w> ; \\ \{ <var:w> = <var:Z> \land <var:a1> = <var:Z> \land <var:a2> = <var:Z> ^ <nat:2> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:w> = <var:Z> \land <var:a1> = <var:Z> \land <var:a2> = <var:Z> ^ <nat:2> \land <var:a0> = <nat:7> \} \\ <var:a1> := <var:a1> * <nat:4> ; \\ \{ <var:w> = <var:Z> \land <var:a1> = <nat:4> \times <var:Z> \land <var:a2> = <var:Z> ^ <nat:2> \land <var:a0> = <nat:7> \} \\ <var:a2> := <var:a2> * <nat:1> ; \\ \{ <var:w> = <var:Z> \land <var:a1> = <nat:4> \times <var:Z> \land <var:a2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:a0> = <nat:7> \} \\ <var:P> := <var:a2> \\ \{ <var:w> = <var:Z> \land <var:a1> = <nat:4> \times <var:Z> \land <var:a0> = <nat:7> \land <var:P> = <nat:1> \times <var:Z> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:a1> \\ \{ <var:w> = <var:Z> \land <var:a0> = <nat:7> \land <var:P> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> \} \\ <var:P> := <var:P> + <var:a0> \\ \{ <var:w> = <var:Z> \land <var:P> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:7> \} \end{eqnarray} As a result , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:w> = <var:Z> }} <var:a1> := <var:w> ; <var:a2> := <var:a1> * <var:w> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:4> ; <var:a2> := <var:a2> * <nat:1> ; <var:P> := <var:a2> <var:P> := <var:P> + <var:a1> <var:P> := <var:P> + <var:a0> {{ <var:P> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:a1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:a1> = <var:Z> /\ <var:a2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:a1> = <var:Z> /\ <var:a2> = <var:Z> ^ <nat:2> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:a1> = <nat:4> * <var:Z> /\ <var:a2> = <var:Z> ^ <nat:2> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:a1> = <nat:4> * <var:Z> /\ <var:a2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:a1> = <nat:4> * <var:Z> /\ <var:a0> = <nat:7> /\ <var:P> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:a0> = <nat:7> /\ <var:P> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:P> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 