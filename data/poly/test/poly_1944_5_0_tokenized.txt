\begin{document} \begin{theorem} Consider a list of instructions as \begin{verbatim} <var:D0> := <nat:4> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:m> ; <var:d> := <var:D1> ; <var:d> := <var:d> + <var:D0> \end{verbatim} Given it to hold that $ <var:m> = <var:U> $ , for every positive integers $ <var:U> $ , ahead of interpreting our set of commands it must be that we have $ <var:d> = <nat:2> \times <var:U> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the segment of code is given through usual Hoare techniques . Moving forward to the proceeding statement in our code , we have the variable assignmet code assigning $ <nat:4> $ to $ <var:D0>$ . This code transfers the precondition $ \{ <var:m> = <var:U> \} $ toward the condition $ \{ <var:m> = <var:U> \land <var:D0> = <nat:4> \} $ . Going forward , we have the statement yielding $ <nat:2> $ toward $ <var:D1>$ . This statement advances $ \{ <var:m> = <var:U> \land <var:D0> = <nat:4> \} $ into the condition $ \{ <var:m> = <var:U> \land <var:D0> = <nat:4> \land <var:D1> = <nat:2> \} $ . This is deduced with the assignment scheme given in Hoare reasoning . Looking at the next piece of code in the series of commands , we see the code \verb | <var:D1> := <var:D1> * <var:m> ; | . This forwards $ \{ <var:m> = <var:U> \land <var:D0> = <nat:4> \land <var:D1> = <nat:2> \} $ into $ \{ <var:m> = <var:U> \land <var:D0> = <nat:4> \land <var:D1> = <nat:2> \times <var:U> \} $ . This is guaranteed with the assignment law found in typical Hoare logic . Moving forward , the variable update statement \verb | <var:d> := <var:D1> ; | . This takes the condition $ \{ <var:m> = <var:U> \land <var:D0> = <nat:4> \land <var:D1> = <nat:2> \times <var:U> \} $ to the postcondition $ \{ <var:m> = <var:U> \land <var:D0> = <nat:4> \land <var:d> = <nat:2> \times <var:U> \} $ . This is shown through the assignment inference rule from Hoare logic . Moving forward to the following bit of code contained in the list of instructions , the binding statement giving $ <var:d> + <var:D0$ as $ <var:d>$ . This statement forwards $ \{ <var:m> = <var:U> \land <var:D0> = <nat:4> \land <var:d> = <nat:2> \times <var:U> \} $ toward the condition $ \{ <var:m> = <var:U> \land <var:d> = <nat:2> \times <var:U> + <nat:4> \} $ . This is given using the assignment inference rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:m> = <var:U> }} <var:D0> := <nat:4> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:m> ; <var:d> := <var:D1> ; <var:d> := <var:d> + <var:D0> {{ <var:d> = <nat:2> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:D0> = <nat:4> /\ <var:d> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:U> /\ <var:d> = <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 