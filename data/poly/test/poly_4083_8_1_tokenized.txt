\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:V> ; <var:n2> := <var:n1> * <var:V> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:3> ; <var:u> := <var:n2> <var:u> := <var:u> + <var:n1> <var:u> := <var:u> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:V> = <var:C> $ given all $ <var:C> \in \mathbb{Z}^+ $ before interpreting the program it must be that $ <var:u> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:C> \} \\ <var:n1> := <var:V> ; \\ \{ <var:V> = <var:C> \land <var:n1> = <var:C> \} \\ <var:n2> := <var:n1> * <var:V> ; \\ \{ <var:V> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:V> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:n1> := <var:n1> * <nat:2> ; \\ \{ <var:V> = <var:C> \land <var:n1> = <nat:2> \cdot <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:n2> := <var:n2> * <nat:3> ; \\ \{ <var:V> = <var:C> \land <var:n1> = <nat:2> \cdot <var:C> \land <var:n2> = <nat:3> \cdot <var:C> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:u> := <var:n2> \\ \{ <var:V> = <var:C> \land <var:n1> = <nat:2> \cdot <var:C> \land <var:n0> = <nat:9> \land <var:u> = <nat:3> \cdot <var:C> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:n1> \\ \{ <var:V> = <var:C> \land <var:n0> = <nat:9> \land <var:u> = <nat:3> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> \} \\ <var:u> := <var:u> + <var:n0> \\ \{ <var:V> = <var:C> \land <var:u> = <nat:3> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:9> \} \end{eqnarray} Using standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n1> := <var:V> ; <var:n2> := <var:n1> * <var:V> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:3> ; <var:u> := <var:n2> <var:u> := <var:u> + <var:n1> <var:u> := <var:u> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:V> = <var:C> }} <def:poly> {{ <var:u> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:n1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:n1> = <var:C> /\ <var:n2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:n1> = <var:C> /\ <var:n2> = <var:C> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:n1> = <nat:2> * <var:C> /\ <var:n2> = <var:C> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:n1> = <nat:2> * <var:C> /\ <var:n2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:n1> = <nat:2> * <var:C> /\ <var:n0> = <nat:9> /\ <var:u> = <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:n0> = <nat:9> /\ <var:u> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:u> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 