\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:B0> := <nat:4> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:z> ; <var:B2> := <nat:5> ; <var:B2> := <var:B2> * <var:z> ; <var:B2> := <var:B2> * <var:z> ; <var:B3> := <nat:2> ; <var:B3> := <var:B3> * <var:z> ; <var:B3> := <var:B3> * <var:z> ; <var:B3> := <var:B3> * <var:z> ; <var:G> := <var:B3> ; <var:G> := <var:G> + <var:B2> ; <var:G> := <var:G> + <var:B1> ; <var:G> := <var:G> + <var:B0> \end{verbatim} Given that $ <var:z> = <var:P> $ for any positive coefficients $ <var:P> $ prior to interpreting this segment of code then $ <var:G> = <nat:2> \times <var:P> ^ <nat:3> + <nat:5> \times <var:P> ^ <nat:2> + <nat:6> \times <var:P> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the set of commands is accomplished using usual Hoare reasoning . After , \begin{verbatim} { <var:z> = <var:P> } <var:B0> := <nat:4> { <var:z> = <var:P> \land <var:B0> = <nat:4> } { <var:z> = <var:P> \land <var:B0> = <nat:4> } <var:B1> := <nat:6> { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> } \end{verbatim} Moving on to the next pieces of code found in our code segment , we see \begin{verbatim} { <var:z> = <var:P> } <var:B0> := <nat:4> { <var:z> = <var:P> \land <var:B0> = <nat:4> } { <var:z> = <var:P> \land <var:B0> = <nat:4> } <var:B1> := <nat:6> { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> } \end{verbatim} This is sound by the variable binding inference rule in usual Hoare techniques . Jumping to the subsequent lines in our series of instructions , we see \begin{verbatim} { <var:z> = <var:P> } <var:B0> := <nat:4> { <var:z> = <var:P> \land <var:B0> = <nat:4> } { <var:z> = <var:P> \land <var:B0> = <nat:4> } <var:B1> := <nat:6> { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> } { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> } <var:B1> := <var:B1> * <var:z> { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> \times <var:P> } { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> \times <var:P> } <var:B2> := <nat:5> { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> \times <var:P> \land <var:B2> = <nat:5> } { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> \times <var:P> \land <var:B2> = <nat:5> } <var:B2> := <var:B2> * <var:z> { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> \times <var:P> \land <var:B2> = <nat:5> \times <var:P> } \end{verbatim} Moving on to the next step , we see \begin{verbatim} { <var:z> = <var:P> } <var:B0> := <nat:4> { <var:z> = <var:P> \land <var:B0> = <nat:4> } { <var:z> = <var:P> \land <var:B0> = <nat:4> } <var:B1> := <nat:6> { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> } \end{verbatim} This is given using the binding scheme found in Hoare techniques . Looking at the following command found in our segment of code , \begin{verbatim} { <var:z> = <var:P> } <var:B0> := <nat:4> { <var:z> = <var:P> \land <var:B0> = <nat:4> } \end{verbatim} This is known to be sound with the variable binding scheme obtained from usual Hoare reasoning . Moving onward , we see \begin{verbatim} { <var:z> = <var:P> } <var:B0> := <nat:4> { <var:z> = <var:P> \land <var:B0> = <nat:4> } { <var:z> = <var:P> \land <var:B0> = <nat:4> } <var:B1> := <nat:6> { <var:z> = <var:P> \land <var:B0> = <nat:4> \land <var:B1> = <nat:6> } \end{verbatim} This is guaranteed with the variable binding law given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:z> = <var:P> }} <var:B0> := <nat:4> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:z> ; <var:B2> := <nat:5> ; <var:B2> := <var:B2> * <var:z> ; <var:B2> := <var:B2> * <var:z> ; <var:B3> := <nat:2> ; <var:B3> := <var:B3> * <var:z> ; <var:B3> := <var:B3> * <var:z> ; <var:B3> := <var:B3> * <var:z> ; <var:G> := <var:B3> ; <var:G> := <var:G> + <var:B2> ; <var:G> := <var:G> + <var:B1> ; <var:G> := <var:G> + <var:B0> {{ <var:G> = <nat:2> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> + <nat:6> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:B2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:B2> = <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:B2> = <nat:5> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:B2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:B3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:B2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:B2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:B2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:B2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:G> = <nat:2> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:6> * <var:P> /\ <var:G> = <nat:2> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:B0> = <nat:4> /\ <var:G> = <nat:2> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> + <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:G> = <nat:2> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> + <nat:6> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 