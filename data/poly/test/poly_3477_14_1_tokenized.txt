\begin{document} \begin{theorem} Define a code in \emph{Imp} : \begin{verbatim} <var:M1> := <var:N> ; <var:M2> := <var:M1> * <var:N> ; <var:M3> := <var:M2> * <var:N> ; <var:M4> := <var:M3> * <var:N> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:1> ; <var:M2> := <var:M2> * <nat:6> ; <var:M3> := <var:M3> * <nat:3> ; <var:M4> := <var:M4> * <nat:6> ; <var:v> := <var:M4> <var:v> := <var:v> + <var:M3> <var:v> := <var:v> + <var:M2> <var:v> := <var:v> + <var:M1> <var:v> := <var:v> + <var:M0> \end{verbatim} Assume it to hold that $ <var:N> = <var:G> $ ahead of the execution of the program it follows that $ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is given by usual Hoare logic . Further , the environment update statement letting $ <var:N> $ as $ <var:M1>$ . This code advances the precondition $ \{ <var:N> = <var:G> \} $ to $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \} $ . Advancing to the proceeding line seen in our segment of code , we have the variable binding statement defining $ <var:M1> * <var:N> $ into $ <var:M2>$ . This advances the condition $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \} $ into $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \land <var:M2> = <var:G> ^ <nat:2> \} $ . This is deduced by the assignment rule given by Hoare logic . Stepping through , we have the variable binding line \verb | <var:M3> := <var:M2> * <var:N> ; | . This statement forwards $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \land <var:M2> = <var:G> ^ <nat:2> \} $ to the condition $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \land <var:M2> = <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \} $ . Moving onward , we have the environment update command giving $ <var:M3> * <var:N> $ toward $ <var:M4>$ . This code moves $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \land <var:M2> = <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \} $ to the postcondition $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \land <var:M2> = <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \} $ . This is ensured by the assignment inference rule defined by standard Hoare techniques . Shifting focus toward the following step contained in our program , we have the assignment line \verb | <var:M0> := <nat:1> ; | . This line transfers the condition $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \land <var:M2> = <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \} $ as the postcondition $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \land <var:M2> = <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ . Advancing to the next step , the binding line \verb | <var:M1> := <var:M1> * <nat:1> ; | . This code advances the condition $ \{ <var:N> = <var:G> \land <var:M1> = <var:G> \land <var:M2> = <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ as the condition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ . Advancing to the proceeding step in the code segment , we see the variable binding command \verb | <var:M2> := <var:M2> * <nat:6> ; | . This forwards the precondition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ into the condition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ . This is shown to be logically sound using the assignment scheme given by typical Hoare reasoning . Stepping through , the binding statement \verb | <var:M3> := <var:M3> * <nat:3> ; | . This redefines $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M3> = <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ into the condition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M3> = <nat:3> \cdot <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ . This is sound using the assignment scheme given in standard Hoare reasoning . After , we see the variable assignmet code \verb | <var:M4> := <var:M4> * <nat:6> ; | . This line moves $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M3> = <nat:3> \cdot <var:G> ^ <nat:3> \land <var:M4> = <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ to $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M3> = <nat:3> \cdot <var:G> ^ <nat:3> \land <var:M4> = <nat:6> \cdot <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ . This is known to be sound with the assignment law given in Hoare techniques . Paying attention to the following statement in the list of instructions , we have the variable assignmet statement defining $ <var:M4$ toward $ <var:v>$ . This transfers the condition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M3> = <nat:3> \cdot <var:G> ^ <nat:3> \land <var:M4> = <nat:6> \cdot <var:G> ^ <nat:4> \land <var:M0> = <nat:1> \} $ toward $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M3> = <nat:3> \cdot <var:G> ^ <nat:3> \land <var:M0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> \} $ . Advancing , we see the environment update code yielding $ <var:v> + <var:M3$ into $ <var:v>$ . This line moves the precondition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M3> = <nat:3> \cdot <var:G> ^ <nat:3> \land <var:M0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> \} $ toward the condition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment scheme from standard Hoare reasoning . After , we have the assignment command \verb | <var:v> := <var:v> + <var:M2> | . This line advances the condition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:M0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> \} $ into the condition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> \} $ . This is sound using the assignment law given by usual Hoare logic . Paying attention to the proceeding line in our code segment , we see the code \verb | <var:v> := <var:v> + <var:M1> | . This statement moves the precondition $ \{ <var:N> = <var:G> \land <var:M1> = <nat:1> \cdot <var:G> \land <var:M0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> \} $ toward the condition $ \{ <var:N> = <var:G> \land <var:M0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> \} $ . Moving on to the next line seen in our series of instructions , the variable binding line \verb | <var:v> := <var:v> + <var:M0> | . This command takes the precondition $ \{ <var:N> = <var:G> \land <var:M0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> \} $ to the postcondition $ \{ <var:N> = <var:G> \land <var:v> = <nat:6> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <var:M4> : string := " <var:M4> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:N> = <var:G> }} <var:M1> := <var:N> ; <var:M2> := <var:M1> * <var:N> ; <var:M3> := <var:M2> * <var:N> ; <var:M4> := <var:M3> * <var:N> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:1> ; <var:M2> := <var:M2> * <nat:6> ; <var:M3> := <var:M3> * <nat:3> ; <var:M4> := <var:M4> * <nat:6> ; <var:v> := <var:M4> <var:v> := <var:v> + <var:M3> <var:v> := <var:v> + <var:M2> <var:v> := <var:v> + <var:M1> <var:v> := <var:v> + <var:M0> {{ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <var:G> /\ <var:M2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <var:G> /\ <var:M2> = <var:G> ^ <nat:2> /\ <var:M3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <var:G> /\ <var:M2> = <var:G> ^ <nat:2> /\ <var:M3> = <var:G> ^ <nat:3> /\ <var:M4> = <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <var:G> /\ <var:M2> = <var:G> ^ <nat:2> /\ <var:M3> = <var:G> ^ <nat:3> /\ <var:M4> = <var:G> ^ <nat:4> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <nat:1> * <var:G> /\ <var:M2> = <var:G> ^ <nat:2> /\ <var:M3> = <var:G> ^ <nat:3> /\ <var:M4> = <var:G> ^ <nat:4> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <nat:1> * <var:G> /\ <var:M2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:M3> = <var:G> ^ <nat:3> /\ <var:M4> = <var:G> ^ <nat:4> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <nat:1> * <var:G> /\ <var:M2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:M3> = <nat:3> * <var:G> ^ <nat:3> /\ <var:M4> = <var:G> ^ <nat:4> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <nat:1> * <var:G> /\ <var:M2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:M3> = <nat:3> * <var:G> ^ <nat:3> /\ <var:M4> = <nat:6> * <var:G> ^ <nat:4> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <nat:1> * <var:G> /\ <var:M2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:M3> = <nat:3> * <var:G> ^ <nat:3> /\ <var:M0> = <nat:1> /\ <var:v> = <nat:6> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <nat:1> * <var:G> /\ <var:M2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:M0> = <nat:1> /\ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M1> = <nat:1> * <var:G> /\ <var:M0> = <nat:1> /\ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:M0> = <nat:1> /\ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 