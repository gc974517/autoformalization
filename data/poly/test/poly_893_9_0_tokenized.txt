\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:9> ; <var:D1> := <nat:3> ; <var:D1> := <var:D1> * <var:p> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:p> ; <var:D2> := <var:D2> * <var:p> ; <var:K> := <var:D2> ; <var:K> := <var:K> + <var:D1> ; <var:K> := <var:K> + <var:D0> \end{verbatim} Assume that we have $ <var:p> = <var:R> $ ahead of interpreting our set of instructions , then we have $ <var:K> = <nat:5> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:9> $ when program executes . \end{theorem} \begin{proof} The argument for this series of instructions is given using Hoare reasoning . Advancing to the next statement contained in our program , we see the variable binding command \verb | <var:D0> := <nat:9> ; | . This advances the precondition $ \{ <var:p> = <var:R> \} $ into the postcondition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \} $ . Moving on , the assignment command defining $ <nat:3> $ as $ <var:D1>$ . This code transfers the precondition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \} $ as the condition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> \} $ . Honing in on the next command found in our set of commands , the assignment command letting $ <var:D1> * <var:p> $ as $ <var:D1>$ . This line takes the condition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> \} $ as the condition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \} $ . This is given through the assignment scheme given by usual Hoare reasoning . Considering the following bit of code contained in our set of instructions , the variable assignmet command giving $ <nat:5> $ to $ <var:D2>$ . This redefines the precondition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \} $ to the postcondition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \land <var:D2> = <nat:5> \} $ . This is given through the assignment rule given by typical Hoare logic . Observing the following line seen in our list of instructions , the variable binding command assigning $ <var:D2> * <var:p> $ to $ <var:D2>$ . This code forwards the precondition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \land <var:D2> = <nat:5> \} $ as the condition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \land <var:D2> = <nat:5> * <var:R> \} $ . Jumping to the next bit of code contained in the set of instructions , we have the line assigning $ <var:D2> * <var:p> $ as $ <var:D2>$ . This transfers $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \land <var:D2> = <nat:5> * <var:R> \} $ to the postcondition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \land <var:D2> = <nat:5> * <var:R> ^ <nat:2> \} $ . Considering the subsequent command seen in the code , we see the environment update command \verb | <var:K> := <var:D2> ; | . This transfers the condition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \land <var:D2> = <nat:5> * <var:R> ^ <nat:2> \} $ to the condition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \land <var:K> = <nat:5> * <var:R> ^ <nat:2> \} $ . Stepping forward , we have the variable update statement giving $ <var:K> + <var:D1> $ toward $ <var:K>$ . This transfers the precondition $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:D1> = <nat:3> * <var:R> \land <var:K> = <nat:5> * <var:R> ^ <nat:2> \} $ toward $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:K> = <nat:5> * <var:R> ^ <nat:2> + <nat:3> * <var:R> \} $ . Jumping to the subsequent statement contained in our code segment , we have the variable update command defining $ <var:K> + <var:D0$ toward $ <var:K>$ . This forwards $ \{ <var:p> = <var:R> \land <var:D0> = <nat:9> \land <var:K> = <nat:5> * <var:R> ^ <nat:2> + <nat:3> * <var:R> \} $ as $ \{ <var:p> = <var:R> \land <var:K> = <nat:5> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:p> = <var:R> }} <var:D0> := <nat:9> ; <var:D1> := <nat:3> ; <var:D1> := <var:D1> * <var:p> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:p> ; <var:D2> := <var:D2> * <var:p> ; <var:K> := <var:D2> ; <var:K> := <var:K> + <var:D1> ; <var:K> := <var:K> + <var:D0> {{ <var:K> = <nat:5> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:9> /\ <var:D1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:9> /\ <var:D1> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:9> /\ <var:D1> = <nat:3> * <var:R> /\ <var:D2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:9> /\ <var:D1> = <nat:3> * <var:R> /\ <var:D2> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:9> /\ <var:D1> = <nat:3> * <var:R> /\ <var:D2> = <nat:5> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:9> /\ <var:D1> = <nat:3> * <var:R> /\ <var:K> = <nat:5> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:D0> = <nat:9> /\ <var:K> = <nat:5> * <var:R> ^ <nat:2> + <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:K> = <nat:5> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 