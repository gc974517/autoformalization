\begin{document} \begin{theorem} Take a set of instructions such that \begin{verbatim} <var:w1> := <var:D> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:4> ; <var:u> := <var:w1> <var:u> := <var:u> + <var:w0> \end{verbatim} Allowing it to be that $ <var:D> = <var:S> $ prior to running our series of commands , then we see $ <var:u> = <nat:4> * <var:S> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare logic produces : \begin{eqnarray} \{ <var:D> = <var:S> \} \\ <var:w1> := <var:D> ; \\ \{ <var:D> = <var:S> \land <var:w1> = <var:S> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:D> = <var:S> \land <var:w1> = <var:S> \land <var:w0> = <nat:6> \} \\ <var:w1> := <var:w1> * <nat:4> ; \\ \{ <var:D> = <var:S> \land <var:w1> = <nat:4> * <var:S> \land <var:w0> = <nat:6> \} \\ <var:u> := <var:w1> \\ \{ <var:D> = <var:S> \land <var:w0> = <nat:6> \land <var:u> = <nat:4> * <var:S> \} \\ <var:u> := <var:u> + <var:w0> \\ \{ <var:D> = <var:S> \land <var:u> = <nat:4> * <var:S> + <nat:6> \} \end{eqnarray} Therefore , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:D> = <var:S> }} <var:w1> := <var:D> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:4> ; <var:u> := <var:w1> <var:u> := <var:u> + <var:w0> {{ <var:u> = <nat:4> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:w1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:w1> = <var:S> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:w1> = <nat:4> * <var:S> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:w0> = <nat:6> /\ <var:u> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:u> = <nat:4> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 