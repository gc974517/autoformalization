\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:K1> := <var:O> ; <var:K2> := <var:K1> * <var:O> ; <var:K3> := <var:K2> * <var:O> ; <var:K4> := <var:K3> * <var:O> ; <var:K0> := <nat:8> ; <var:K2> := <var:K2> * <nat:4> ; <var:K4> := <var:K4> * <nat:5> ; <var:j> := <var:K4> <var:j> := <var:j> + <var:K2> <var:j> := <var:j> + <var:K0> \end{verbatim} Given it to hold that $ <var:O> = <var:i> $ ahead of the execution of the set of instructions it holds that we have $ <var:j> = <nat:5> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:8> $ after set of commands is done executing . \end{theorem} \begin{proof} Proving correctness for our set of commands can be accomplished with usual Hoare reasoning . Advancing , we see \verb | { <var:O> = <var:i> } <var:K1> := <var:O> { <var:O> = <var:i> \land <var:K1> = <var:i> } | , \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> } <var:K2> := <var:K1> * <var:O> { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <var:i> ^ <nat:2> } | , \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <var:i> ^ <nat:2> } <var:K3> := <var:K2> * <var:O> { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> } | , \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> } <var:K4> := <var:K3> * <var:O> { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K4> = <var:i> ^ <nat:4> } | , \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K4> = <var:i> ^ <nat:4> } <var:K0> := <nat:8> { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K4> = <var:i> ^ <nat:4> \land <var:K0> = <nat:8> } | , \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K4> = <var:i> ^ <nat:4> \land <var:K0> = <nat:8> } <var:K2> := <var:K2> * <nat:4> { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <nat:4> \cdot <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K4> = <var:i> ^ <nat:4> \land <var:K0> = <nat:8> } | , \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <nat:4> \cdot <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K4> = <var:i> ^ <nat:4> \land <var:K0> = <nat:8> } <var:K4> := <var:K4> * <nat:5> { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <nat:4> \cdot <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K4> = <nat:5> \cdot <var:i> ^ <nat:4> \land <var:K0> = <nat:8> } | , \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <nat:4> \cdot <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K4> = <nat:5> \cdot <var:i> ^ <nat:4> \land <var:K0> = <nat:8> } <var:j> := <var:K4{ <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <nat:4> \cdot <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K0> = <nat:8> \land <var:j> = <nat:5> \cdot <var:i> ^ <nat:4> } | , \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K2> = <nat:4> \cdot <var:i> ^ <nat:2> \land <var:K3> = <var:i> ^ <nat:3> \land <var:K0> = <nat:8> \land <var:j> = <nat:5> \cdot <var:i> ^ <nat:4> } <var:j> := <var:j> + <var:K2{ <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K0> = <nat:8> \land <var:j> = <nat:5> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> } | and \verb | { <var:O> = <var:i> \land <var:K1> = <var:i> \land <var:K0> = <nat:8> \land <var:j> = <nat:5> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> } <var:j> := <var:j> + <var:K0{ <var:O> = <var:i> \land <var:j> = <nat:5> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <var:K4> : string := " <var:K4> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:O> = <var:i> }} <var:K1> := <var:O> ; <var:K2> := <var:K1> * <var:O> ; <var:K3> := <var:K2> * <var:O> ; <var:K4> := <var:K3> * <var:O> ; <var:K0> := <nat:8> ; <var:K2> := <var:K2> * <nat:4> ; <var:K4> := <var:K4> * <nat:5> ; <var:j> := <var:K4> <var:j> := <var:j> + <var:K2> <var:j> := <var:j> + <var:K0> {{ <var:j> = <nat:5> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> /\ <var:K2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> /\ <var:K2> = <var:i> ^ <nat:2> /\ <var:K3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> /\ <var:K2> = <var:i> ^ <nat:2> /\ <var:K3> = <var:i> ^ <nat:3> /\ <var:K4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> /\ <var:K2> = <var:i> ^ <nat:2> /\ <var:K3> = <var:i> ^ <nat:3> /\ <var:K4> = <var:i> ^ <nat:4> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> /\ <var:K2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:K3> = <var:i> ^ <nat:3> /\ <var:K4> = <var:i> ^ <nat:4> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> /\ <var:K2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:K3> = <var:i> ^ <nat:3> /\ <var:K4> = <nat:5> * <var:i> ^ <nat:4> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> /\ <var:K2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:K3> = <var:i> ^ <nat:3> /\ <var:K0> = <nat:8> /\ <var:j> = <nat:5> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:K1> = <var:i> /\ <var:K0> = <nat:8> /\ <var:j> = <nat:5> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:j> = <nat:5> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 