\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:I0> := <nat:5> ; <var:w> := <var:I0> \end{verbatim} Given that $ <var:z> = <var:T> $ ahead of executing our series of instructions it must be that we see $ <var:w> = <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for this list of instructions is clear by typical Hoare logic . Advancing to the upcoming step in the list of commands , the command giving $ <nat:5> $ into $ <var:I0>$ . This moves the precondition $ \{ <var:z> = <var:T> \} $ into $ \{ <var:z> = <var:T> \land <var:I0> = <nat:5> \} $ . This is known to be sound with the assignment inference rule in usual Hoare reasoning . Going forward , we have the statement \verb | <var:w> := <var:I0> | . This statement forwards the precondition $ \{ <var:z> = <var:T> \land <var:I0> = <nat:5> \} $ to the condition $ \{ <var:z> = <var:T> \land <var:w> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:z> = <var:T> }} <var:I0> := <nat:5> ; <var:w> := <var:I0> {{ <var:w> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:w> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 