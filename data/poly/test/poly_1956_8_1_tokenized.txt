\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:U> ; <var:Q2> := <var:Q1> * <var:U> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:Q2> := <var:Q2> * <nat:6> ; <var:j> := <var:Q2> <var:j> := <var:j> + <var:Q1> <var:j> := <var:j> + <var:Q0> \end{verbatim} Allow it to hold that $ <var:U> = <var:m> $ before interpreting our segment of code then $ <var:j> = <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:7> $ when series of commands has exited . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:U> = <var:m> \} \\ <var:Q1> := <var:U> ; \\ \{ <var:U> = <var:m> \land <var:Q1> = <var:m> \} \\ <var:Q2> := <var:Q1> * <var:U> ; \\ \{ <var:U> = <var:m> \land <var:Q1> = <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:U> = <var:m> \land <var:Q1> = <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q0> = <nat:7> \} \\ <var:Q1> := <var:Q1> * <nat:3> ; \\ \{ <var:U> = <var:m> \land <var:Q1> = <nat:3> \cdot <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q0> = <nat:7> \} \\ <var:Q2> := <var:Q2> * <nat:6> ; \\ \{ <var:U> = <var:m> \land <var:Q1> = <nat:3> \cdot <var:m> \land <var:Q2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:Q0> = <nat:7> \} \\ <var:j> := <var:Q2> \\ \{ <var:U> = <var:m> \land <var:Q1> = <nat:3> \cdot <var:m> \land <var:Q0> = <nat:7> \land <var:j> = <nat:6> \cdot <var:m> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:Q1> \\ \{ <var:U> = <var:m> \land <var:Q0> = <nat:7> \land <var:j> = <nat:6> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> \} \\ <var:j> := <var:j> + <var:Q0> \\ \{ <var:U> = <var:m> \land <var:j> = <nat:6> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:7> \} \end{eqnarray} Given the above , the segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:U> = <var:m> }} <var:Q1> := <var:U> ; <var:Q2> := <var:Q1> * <var:U> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:Q2> := <var:Q2> * <nat:6> ; <var:j> := <var:Q2> <var:j> := <var:j> + <var:Q1> <var:j> := <var:j> + <var:Q0> {{ <var:j> = <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:Q1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:Q1> = <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:Q1> = <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:Q1> = <nat:3> * <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:Q1> = <nat:3> * <var:m> /\ <var:Q2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:Q1> = <nat:3> * <var:m> /\ <var:Q0> = <nat:7> /\ <var:j> = <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:Q0> = <nat:7> /\ <var:j> = <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:j> = <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 