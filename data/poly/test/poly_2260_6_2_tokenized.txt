\begin{document} \begin{theorem} We define the following list of commands : \begin{verbatim} <var:X> := <nat:4> ; <var:X> := <nat:4> + <var:X> * <var:L> ; <var:X> := <nat:1> + <var:X> * <var:L> ; <var:X> := <nat:4> + <var:X> * <var:L> ; <var:X> := <var:X> * <var:L> ; <var:X> := <nat:1> + <var:X> * <var:L> \end{verbatim} Allow ( for some $ <var:D> \in \mathbb{Z}^+ $ ) that we have $ <var:L> = <var:D> $ ahead of evaluating our code then $ <var:X> = <nat:4> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> $ after code is done . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be done with usual Hoare techniques . Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:D> \} & <var:X> := <nat:4> & \{ <var:L> = <var:D> \land <var:X> = <nat:4> \} \\ \{ <var:L> = <var:D> \land <var:X> = <nat:4> \} & <var:X> := <nat:4> + <var:X> * <var:L> & \{ <var:L> = <var:D> \land <var:X> = <nat:4> \cdot <var:D> + <nat:4> \} \\ \{ <var:L> = <var:D> \land <var:X> = <nat:4> \cdot <var:D> + <nat:4> \} & <var:X> := <nat:1> + <var:X> * <var:L> & \{ <var:L> = <var:D> \land <var:X> = <nat:4> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> \} \\ \{ <var:L> = <var:D> \land <var:X> = <nat:4> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> \} & <var:X> := <nat:4> + <var:X> * <var:L> & \{ <var:L> = <var:D> \land <var:X> = <nat:4> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:4> \} \\ \{ <var:L> = <var:D> \land <var:X> = <nat:4> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:4> \} & <var:X> := <var:X> * <var:L> & \{ <var:L> = <var:D> \land <var:X> = <nat:4> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + \} \end{tabular} This is ensured with the environment update scheme of typical Hoare techniques . Moving onward , \[ \begin{tabular} {rcl} \{ <var:L> = <var:D> \} & <var:X> := <nat:4> & \{ <var:L> = <var:D> \land <var:X> = <nat:4> \} \end{tabular} This is deduced with the binding scheme defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:L> = <var:D> }} <var:X> := <nat:4> ; <var:X> := <nat:4> + <var:X> * <var:L> ; <var:X> := <nat:1> + <var:X> * <var:L> ; <var:X> := <nat:4> + <var:X> * <var:L> ; <var:X> := <var:X> * <var:L> ; <var:X> := <nat:1> + <var:X> * <var:L> {{ <var:X> = <nat:4> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:X> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:X> = <nat:4> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:X> = <nat:4> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:X> = <nat:4> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:X> = <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:X> = <nat:4> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 