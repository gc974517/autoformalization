\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n1> := <var:r> ; <var:n2> := <var:n1> * <var:r> ; <var:n3> := <var:n2> * <var:r> ; <var:n4> := <var:n3> * <var:r> ; <var:n0> := <nat:1> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:4> ; <var:n4> := <var:n4> * <nat:3> ; <var:a> := <var:n4> <var:a> := <var:a> + <var:n3> <var:a> := <var:a> + <var:n2> <var:a> := <var:a> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:r> = <var:t> $ ahead of executing the code then we have $ <var:a> = <nat:3> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:1> $ after series of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:t> \} \\ <var:n1> := <var:r> ; \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \} \\ <var:n2> := <var:n1> * <var:r> ; \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:r> ; \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \} \\ <var:n4> := <var:n3> * <var:r> ; \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \land <var:n0> = <nat:1> \} \\ <var:n2> := <var:n2> * <nat:2> ; \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \land <var:n0> = <nat:1> \} \\ <var:n3> := <var:n3> * <nat:4> ; \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \land <var:n0> = <nat:1> \} \\ <var:n4> := <var:n4> * <nat:3> ; \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:t> ^ <nat:3> \land <var:n4> = <nat:3> \cdot <var:t> ^ <nat:4> \land <var:n0> = <nat:1> \} \\ <var:a> := <var:n4> \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:t> ^ <nat:3> \land <var:n0> = <nat:1> \land <var:a> = <nat:3> \cdot <var:t> ^ <nat:4> \} \\ <var:a> := <var:a> + <var:n3> \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:n0> = <nat:1> \land <var:a> = <nat:3> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> \} \end{eqnarray} Furthering executing the series of instructions gives us : \begin{eqnarray} <var:a> := <var:a> + <var:n2> \\ \{ <var:r> = <var:t> \land <var:n1> = <var:t> \land <var:n0> = <nat:1> \land <var:a> = <nat:3> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:n0> \\ \{ <var:r> = <var:t> \land <var:a> = <nat:3> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <var:n4> : string := " <var:n4> " . Definition <def:poly> := <var:n1> := <var:r> ; <var:n2> := <var:n1> * <var:r> ; <var:n3> := <var:n2> * <var:r> ; <var:n4> := <var:n3> * <var:r> ; <var:n0> := <nat:1> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:4> ; <var:n4> := <var:n4> * <nat:3> ; <var:a> := <var:n4> <var:a> := <var:a> + <var:n3> <var:a> := <var:a> + <var:n2> <var:a> := <var:a> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <def:poly> {{ <var:a> = <nat:3> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:n4> = <nat:3> * <var:t> ^ <nat:4> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:n0> = <nat:1> /\ <var:a> = <nat:3> * <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n0> = <nat:1> /\ <var:a> = <nat:3> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:n1> = <var:t> /\ <var:n0> = <nat:1> /\ <var:a> = <nat:3> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:a> = <nat:3> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 