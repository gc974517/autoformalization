\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <nat:3> + <var:L> * <var:w> ; <var:L> := <nat:4> + <var:L> * <var:w> ; <var:L> := <nat:1> + <var:L> * <var:w> ; <var:L> := <nat:4> + <var:L> * <var:w> ; <var:L> := <nat:3> + <var:L> * <var:w> ; <var:L> := <var:L> * <var:w> ; <var:L> := <nat:3> + <var:L> * <var:w> ; <var:L> := <nat:3> + <var:L> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:w> = <var:e> $ before interpreting this set of instructions , it must be that we have $ <var:L> = <nat:2> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> + <nat:3> $ when series of instructions exits . \end{theorem} \begin{proof} The method of proof for the program can be shown by typical Hoare logic . Following , the environment update line \verb | <var:L> := <nat:2> ; | . This statement advances the condition $ \{ <var:w> = <var:e> \} $ as the condition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \} $ . Advancing to the upcoming piece of code in the list of commands , the code \verb | <var:L> := <nat:3> + <var:L> * <var:w> ; | . This line forwards $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \} $ into the condition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> + <nat:3> \} $ . This is guaranteed with the assignment law defined in typical Hoare techniques . Jumping to the next line of code contained in our series of instructions , the assignment code \verb | <var:L> := <nat:4> + <var:L> * <var:w> ; | . This line takes the condition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> + <nat:3> \} $ into $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:4> \} $ . Advancing , we have the binding code giving $ <nat:1> + <var:L> * <var:w> $ as $ <var:L>$ . This redefines $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:4> \} $ to the postcondition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:1> \} $ . Considering the next step in the set of instructions , we see the environment update line defining $ <nat:4> + <var:L> * <var:w> $ toward $ <var:L>$ . This command moves the precondition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:1> \} $ into the postcondition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:4> + <nat:3> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:4> \} $ . Now , the binding line defining $ <nat:3> + <var:L> * <var:w> $ into $ <var:L>$ . This takes $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:4> + <nat:3> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:4> \} $ toward the postcondition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:5> + <nat:3> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:3> \} $ . This is deduced with the assignment inference rule obtained from usual Hoare logic . Focusing on the next step in the set of instructions , we see the environment update command \verb | <var:L> := <var:L> * <var:w> ; | . This advances the precondition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:5> + <nat:3> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:3> \} $ to the condition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:6> + <nat:3> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + \} $ . This is ensured with the assignment rule defined by typical Hoare reasoning . Moving on , the binding code yielding $ <nat:3> + <var:L> * <var:w> $ as $ <var:L>$ . This advances the precondition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:6> + <nat:3> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + \} $ to the postcondition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:7> + <nat:3> \cdot <var:e> ^ <nat:6> + <nat:4> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:3> \} $ . This is ensured by the assignment inference rule obtained from typical Hoare techniques . Advancing to the proceeding step contained in the code , the statement \verb | <var:L> := <nat:3> + <var:L> * <var:w> | . This line takes the precondition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:7> + <nat:3> \cdot <var:e> ^ <nat:6> + <nat:4> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:3> \} $ to the condition $ \{ <var:w> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:8> + <nat:3> \cdot <var:e> ^ <nat:7> + <nat:4> \cdot <var:e> ^ <nat:6> + <nat:1> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:3> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:2> ; <var:L> := <nat:3> + <var:L> * <var:w> ; <var:L> := <nat:4> + <var:L> * <var:w> ; <var:L> := <nat:1> + <var:L> * <var:w> ; <var:L> := <nat:4> + <var:L> * <var:w> ; <var:L> := <nat:3> + <var:L> * <var:w> ; <var:L> := <var:L> * <var:w> ; <var:L> := <nat:3> + <var:L> * <var:w> ; <var:L> := <nat:3> + <var:L> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:w> = <var:e> }} <def:poly> {{ <var:L> = <nat:2> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 