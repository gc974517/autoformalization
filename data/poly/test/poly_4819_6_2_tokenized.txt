\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:F> := <nat:4> ; <var:F> := <nat:3> + <var:F> * <var:m> ; <var:F> := <nat:4> + <var:F> * <var:m> ; <var:F> := <nat:3> + <var:F> * <var:m> ; <var:F> := <nat:2> + <var:F> * <var:m> ; <var:F> := <nat:4> + <var:F> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:m> = <var:T> $ before interpreting our list of commands , it holds that $ <var:F> = <nat:4> \times <var:T> ^ <nat:5> + <nat:3> \times <var:T> ^ <nat:4> + <nat:4> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> + <nat:2> \times <var:T> + <nat:4> $ when segment of code has finished . \end{theorem} \begin{proof} The argument for this set of commands is shown by usual Hoare logic . Taking a look at the subsequent step in the list of commands , we see the variable update line \verb | <var:F> := <nat:4> ; | . This command moves the condition $ \{ <var:m> = <var:T> \} $ into $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \} $ . Considering the next line of code contained in our list of commands , we see the variable assignmet line binding $ <nat:3> + <var:F> * <var:m> $ as $ <var:F>$ . This transfers the precondition $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \} $ to the condition $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> + <nat:3> \} $ . Going forward , the assignment line \verb | <var:F> := <nat:4> + <var:F> * <var:m> ; | . This code moves the precondition $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> + <nat:3> \} $ as the condition $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> + <nat:4> \} $ . Considering the upcoming bit of code found in our list of instructions , we have the binding statement letting $ <nat:3> + <var:F> * <var:m> $ to $ <var:F>$ . This forwards the precondition $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> + <nat:4> \} $ as $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:3> \cdot <var:T> ^ <nat:2> + <nat:4> \cdot <var:T> + <nat:3> \} $ . This is sound by the assignment rule in usual Hoare techniques . Taking another step toward the subsequent line in our code segment , we see the environment update statement \verb | <var:F> := <nat:2> + <var:F> * <var:m> ; | . This redefines the condition $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:3> \cdot <var:T> ^ <nat:2> + <nat:4> \cdot <var:T> + <nat:3> \} $ into the postcondition $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:3> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> + <nat:2> \} $ . This is given using the assignment law of standard Hoare reasoning . Keeping momentum , we have the variable binding line assigning $ <nat:4> + <var:F> * <var:m$ toward $ <var:F>$ . This line redefines the condition $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:3> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> + <nat:2> \} $ toward $ \{ <var:m> = <var:T> \land <var:F> = <nat:4> \cdot <var:T> ^ <nat:5> + <nat:3> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:3> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:4> ; <var:F> := <nat:3> + <var:F> * <var:m> ; <var:F> := <nat:4> + <var:F> * <var:m> ; <var:F> := <nat:3> + <var:F> * <var:m> ; <var:F> := <nat:2> + <var:F> * <var:m> ; <var:F> := <nat:4> + <var:F> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:m> = <var:T> }} <def:poly> {{ <var:F> = <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:F> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:F> = <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:F> = <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:F> = <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:F> = <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:F> = <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 