\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:I1> := <var:m> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:7> ; <var:C> := <var:I1> <var:C> := <var:C> + <var:I0> \end{verbatim} Assuming $ <var:m> = <var:H> $ before the execution of this code , it holds that we have $ <var:C> = <nat:7> * <var:H> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:H> \} \\ <var:I1> := <var:m> ; \\ \{ <var:m> = <var:H> \land <var:I1> = <var:H> \} \\ <var:I0> := <nat:2> ; \\ \{ <var:m> = <var:H> \land <var:I1> = <var:H> \land <var:I0> = <nat:2> \} \end{eqnarray} Allowing the execution of this series of commands gives us : \begin{eqnarray} <var:I1> := <var:I1> * <nat:7> ; \\ \{ <var:m> = <var:H> \land <var:I1> = <nat:7> \cdot <var:H> \land <var:I0> = <nat:2> \} \\ <var:C> := <var:I1> \\ \{ <var:m> = <var:H> \land <var:I0> = <nat:2> \land <var:C> = <nat:7> \cdot <var:H> \} \\ <var:C> := <var:C> + <var:I0> \\ \{ <var:m> = <var:H> \land <var:C> = <nat:7> \cdot <var:H> + <nat:2> \} \end{eqnarray} The application of typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:m> = <var:H> }} <var:I1> := <var:m> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:7> ; <var:C> := <var:I1> <var:C> := <var:C> + <var:I0> {{ <var:C> = <nat:7> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:H> /\ <var:I1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:H> /\ <var:I1> = <var:H> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:H> /\ <var:I1> = <nat:7> * <var:H> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:H> /\ <var:I0> = <nat:2> /\ <var:C> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:H> /\ <var:C> = <nat:7> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 