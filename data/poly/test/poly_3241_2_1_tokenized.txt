\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:2> ; <var:q> := <var:i0> \end{verbatim} Given it to be that $ <var:o> = <var:t> $ --- given every $ <var:t> \in \mathbb{N} $ --- before running the series of instructions it holds that we see $ <var:q> = <nat:2> $ once set of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:t> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:o> = <var:t> \land <var:i0> = <nat:2> \} \\ <var:q> := <var:i0> \\ \{ <var:o> = <var:t> \land <var:q> = <nat:2> \} \end{eqnarray} The application of typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:o> = <var:t> }} <var:i0> := <nat:2> ; <var:q> := <var:i0> {{ <var:q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 