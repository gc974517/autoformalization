\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:G> ; <var:e> := <var:C1> ; <var:e> := <var:e> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Assume $ <var:G> = <var:Y> $ ahead of running our code then $ <var:e> = <nat:2> \cdot <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:G> = <var:Y> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:G> = <var:Y> \land <var:C0> = <nat:2> \} \\ <var:C1> := <nat:2> ; \\ \{ <var:G> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \} \\ <var:C1> := <var:C1> * <var:G> ; \\ \{ <var:G> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \} \end{eqnarray} Continuing the evaluation of this program results in : \begin{eqnarray} <var:e> := <var:C1> ; \\ \{ <var:G> = <var:Y> \land <var:C0> = <nat:2> \land <var:e> = <nat:2> \cdot <var:Y> \} \\ <var:e> := <var:e> + <var:C0> \\ \{ <var:G> = <var:Y> \land <var:e> = <nat:2> \cdot <var:Y> + <nat:2> \} \end{eqnarray} Given the preceding argument , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:G> ; <var:e> := <var:C1> ; <var:e> := <var:e> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:G> = <var:Y> }} <def:poly> {{ <var:e> = <nat:2> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:e> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:e> = <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 