\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:k> ; <var:r2> := <var:r1> * <var:k> ; <var:r3> := <var:r2> * <var:k> ; <var:r4> := <var:r3> * <var:k> ; <var:r5> := <var:r4> * <var:k> ; <var:r0> := <nat:7> ; <var:r3> := <var:r3> * <nat:6> ; <var:r4> := <var:r4> * <nat:3> ; <var:r5> := <var:r5> * <nat:5> ; <var:u> := <var:r5> <var:u> := <var:u> + <var:r4> <var:u> := <var:u> + <var:r3> <var:u> := <var:u> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Assuming ( for every $ <var:Q> \in \mathbb{N} $ ) it to hold that $ <var:k> = <var:Q> $ ahead of running this code , it follows that we have $ <var:u> = <nat:5> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:6> * <var:Q> ^ <nat:3> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is shown with usual Hoare reasoning . Looking at the upcoming steps found in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:Q> \} & <var:r1> := <var:k> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \} & <var:r2> := <var:r1> * <var:k> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \} & <var:r3> := <var:r2> * <var:k> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \} & <var:r4> := <var:r3> * <var:k> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r4> = <var:Q> ^ <nat:4> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r4> = <var:Q> ^ <nat:4> \} & <var:r5> := <var:r4> * <var:k> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r4> = <var:Q> ^ <nat:4> \land <var:r5> = <var:Q> ^ <nat:5> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r4> = <var:Q> ^ <nat:4> \land <var:r5> = <var:Q> ^ <nat:5> \} & <var:r0> := <nat:7> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r4> = <var:Q> ^ <nat:4> \land <var:r5> = <var:Q> ^ <nat:5> \land <var:r0> = <nat:7> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <var:Q> ^ <nat:3> \land <var:r4> = <var:Q> ^ <nat:4> \land <var:r5> = <var:Q> ^ <nat:5> \land <var:r0> = <nat:7> \} & <var:r3> := <var:r3> * <nat:6> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r4> = <var:Q> ^ <nat:4> \land <var:r5> = <var:Q> ^ <nat:5> \land <var:r0> = <nat:7> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r4> = <var:Q> ^ <nat:4> \land <var:r5> = <var:Q> ^ <nat:5> \land <var:r0> = <nat:7> \} & <var:r4> := <var:r4> * <nat:3> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r4> = <nat:3> \times <var:Q> ^ <nat:4> \land <var:r5> = <var:Q> ^ <nat:5> \land <var:r0> = <nat:7> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r4> = <nat:3> \times <var:Q> ^ <nat:4> \land <var:r5> = <var:Q> ^ <nat:5> \land <var:r0> = <nat:7> \} & <var:r5> := <var:r5> * <nat:5> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r4> = <nat:3> \times <var:Q> ^ <nat:4> \land <var:r5> = <nat:5> \times <var:Q> ^ <nat:5> \land <var:r0> = <nat:7> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r4> = <nat:3> \times <var:Q> ^ <nat:4> \land <var:r5> = <nat:5> \times <var:Q> ^ <nat:5> \land <var:r0> = <nat:7> \} & <var:u> := <var:r5& \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r4> = <nat:3> \times <var:Q> ^ <nat:4> \land <var:r0> = <nat:7> \land <var:u> = <nat:5> \times <var:Q> ^ <nat:5> \} \\ \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r4> = <nat:3> \times <var:Q> ^ <nat:4> \land <var:r0> = <nat:7> \land <var:u> = <nat:5> \times <var:Q> ^ <nat:5> \} & <var:u> := <var:u> + <var:r4& \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \land <var:r2> = <var:Q> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:Q> ^ <nat:3> \land <var:r0> = <nat:7> \land <var:u> = <nat:5> \times <var:Q> ^ <nat:5> + <nat:3> \times <var:Q> ^ <nat:4> \} \end{tabular} Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:Q> \} & <var:r1> := <var:k> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \} \end{tabular} This is known to be sound with the rule defined in standard Hoare logic . Stepping through , \[ \begin{tabular} {rcl} \{ <var:k> = <var:Q> \} & <var:r1> := <var:k> & \{ <var:k> = <var:Q> \land <var:r1> = <var:Q> \} \end{tabular} This is guaranteed with the variable update rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <var:r4> : string := " <var:r4> " . Definition <var:r5> : string := " <var:r5> " . Definition <def:poly> := <var:r1> := <var:k> ; <var:r2> := <var:r1> * <var:k> ; <var:r3> := <var:r2> * <var:k> ; <var:r4> := <var:r3> * <var:k> ; <var:r5> := <var:r4> * <var:k> ; <var:r0> := <nat:7> ; <var:r3> := <var:r3> * <nat:6> ; <var:r4> := <var:r4> * <nat:3> ; <var:r5> := <var:r5> * <nat:5> ; <var:u> := <var:r5> <var:u> := <var:u> + <var:r4> <var:u> := <var:u> + <var:r3> <var:u> := <var:u> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:k> = <var:Q> }} <def:poly> {{ <var:u> = <nat:5> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:6> * <var:Q> ^ <nat:3> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <var:Q> ^ <nat:3> /\ <var:r4> = <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <var:Q> ^ <nat:3> /\ <var:r4> = <var:Q> ^ <nat:4> /\ <var:r5> = <var:Q> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <var:Q> ^ <nat:3> /\ <var:r4> = <var:Q> ^ <nat:4> /\ <var:r5> = <var:Q> ^ <nat:5> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:Q> ^ <nat:3> /\ <var:r4> = <var:Q> ^ <nat:4> /\ <var:r5> = <var:Q> ^ <nat:5> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:Q> ^ <nat:3> /\ <var:r4> = <nat:3> * <var:Q> ^ <nat:4> /\ <var:r5> = <var:Q> ^ <nat:5> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:Q> ^ <nat:3> /\ <var:r4> = <nat:3> * <var:Q> ^ <nat:4> /\ <var:r5> = <nat:5> * <var:Q> ^ <nat:5> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:Q> ^ <nat:3> /\ <var:r4> = <nat:3> * <var:Q> ^ <nat:4> /\ <var:r0> = <nat:7> /\ <var:u> = <nat:5> * <var:Q> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:Q> ^ <nat:3> /\ <var:r0> = <nat:7> /\ <var:u> = <nat:5> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r1> = <var:Q> /\ <var:r2> = <var:Q> ^ <nat:2> /\ <var:r0> = <nat:7> /\ <var:u> = <nat:5> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:6> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:u> = <nat:5> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:6> * <var:Q> ^ <nat:3> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 