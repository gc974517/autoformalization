\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:8> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:x> ; <var:U2> := <nat:2> ; <var:U2> := <var:U2> * <var:x> ; <var:U2> := <var:U2> * <var:x> ; <var:U3> := <nat:8> ; <var:U3> := <var:U3> * <var:x> ; <var:U3> := <var:U3> * <var:x> ; <var:U3> := <var:U3> * <var:x> ; <var:V> := <var:U3> ; <var:V> := <var:V> + <var:U2> ; <var:V> := <var:V> + <var:U1> ; <var:V> := <var:V> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume for natural numbers $ <var:C> $ $ <var:x> = <var:C> $ ahead of executing this program it follows that $ <var:V> = <nat:8> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is done by typical Hoare logic . Moving forward to the following lines contained in our list of instructions , we have \verb | { <var:x> = <var:C> } <var:U0> := <nat:8> { <var:x> = <var:C> \land <var:U0> = <nat:8> } | , \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> } <var:U1> := <nat:8> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> } | , \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> } <var:U1> := <var:U1> * <var:x> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> } | , \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> } <var:U2> := <nat:2> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> \land <var:U2> = <nat:2> } | , \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> \land <var:U2> = <nat:2> } <var:U2> := <var:U2> * <var:x> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> \land <var:U2> = <nat:2> * <var:C> } | and \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> \land <var:U2> = <nat:2> * <var:C> } <var:U2> := <var:U2> * <var:x> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> \land <var:U2> = <nat:2> * <var:C> ^ <nat:2> } | . This is guaranteed using the binding scheme given by typical Hoare logic . Taking another step toward the next pieces of code contained in the series of commands , we see \verb | { <var:x> = <var:C> } <var:U0> := <nat:8> { <var:x> = <var:C> \land <var:U0> = <nat:8> } | , \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> } <var:U1> := <nat:8> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> } | , \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> } <var:U1> := <var:U1> * <var:x> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> } | , \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> } <var:U2> := <nat:2> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> \land <var:U2> = <nat:2> } | and \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> \land <var:U2> = <nat:2> } <var:U2> := <var:U2> * <var:x> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> \land <var:U2> = <nat:2> * <var:C> } | . Taking another step toward the following lines of codecontained in the list of instructions , \verb | { <var:x> = <var:C> } <var:U0> := <nat:8> { <var:x> = <var:C> \land <var:U0> = <nat:8> } | , \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> } <var:U1> := <nat:8> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> } | and \verb | { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> } <var:U1> := <var:U1> * <var:x> { <var:x> = <var:C> \land <var:U0> = <nat:8> \land <var:U1> = <nat:8> * <var:C> } | . This is sound through the variable assignmet scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U0> := <nat:8> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:x> ; <var:U2> := <nat:2> ; <var:U2> := <var:U2> * <var:x> ; <var:U2> := <var:U2> * <var:x> ; <var:U3> := <nat:8> ; <var:U3> := <var:U3> * <var:x> ; <var:U3> := <var:U3> * <var:x> ; <var:U3> := <var:U3> * <var:x> ; <var:V> := <var:U3> ; <var:V> := <var:V> + <var:U2> ; <var:V> := <var:V> + <var:U1> ; <var:V> := <var:V> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:x> = <var:C> }} <def:poly> {{ <var:V> = <nat:8> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:U2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:U2> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:U2> = <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:U2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:U3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:U2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:U3> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:U2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:U3> = <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:U2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:U3> = <nat:8> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:U2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:V> = <nat:8> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:8> * <var:C> /\ <var:V> = <nat:8> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:U0> = <nat:8> /\ <var:V> = <nat:8> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:V> = <nat:8> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 