\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:6> ; <var:U> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for any positive coefficients $ <var:c> $ , that $ <var:w> = <var:c> $ prior to evaluating our list of instructions it holds that $ <var:U> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:c> \} \\ <var:m0> := <nat:6> ; \\ \{ <var:w> = <var:c> \land <var:m0> = <nat:6> \} \\ <var:U> := <var:m0> \\ \{ <var:w> = <var:c> \land <var:U> = <nat:6> \} \end{eqnarray} Utilizing usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:6> ; <var:U> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:w> = <var:c> }} <def:poly> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:c> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 