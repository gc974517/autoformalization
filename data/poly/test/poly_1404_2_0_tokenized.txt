\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:2> ; <var:M> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Allowing it to hold that $ <var:g> = <var:y> $ prior to running this segment of code , then $ <var:M> = <nat:2> $ . \end{theorem} \begin{proof} Let this decorated series of commands . \begin{eqnarray} \{ <var:g> = <var:y> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:g> = <var:y> \land <var:e0> = <nat:2> \} \\ <var:M> := <var:e0> \\ \{ <var:g> = <var:y> \land <var:M> = <nat:2> \} \end{eqnarray} Applying typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:M> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:g> = <var:y> }} <def:poly> {{ <var:M> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:M> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 