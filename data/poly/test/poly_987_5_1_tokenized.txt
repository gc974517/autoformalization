\begin{document} \begin{theorem} Define the following code segment such that \begin{verbatim} <var:c1> := <var:e> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:4> ; <var:o> := <var:c1> <var:o> := <var:o> + <var:c0> \end{verbatim} Allowing that we have $ <var:e> = <var:C> $ prior to interpreting the series of commands , it holds that we see $ <var:o> = <nat:4> \cdot <var:C> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:e> = <var:C> \} \\ <var:c1> := <var:e> ; \\ \{ <var:e> = <var:C> \land <var:c1> = <var:C> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:e> = <var:C> \land <var:c1> = <var:C> \land <var:c0> = <nat:3> \} \\ <var:c1> := <var:c1> * <nat:4> ; \\ \{ <var:e> = <var:C> \land <var:c1> = <nat:4> \times <var:C> \land <var:c0> = <nat:3> \} \\ <var:o> := <var:c1> \\ \{ <var:e> = <var:C> \land <var:c0> = <nat:3> \land <var:o> = <nat:4> \times <var:C> \} \\ <var:o> := <var:o> + <var:c0> \\ \{ <var:e> = <var:C> \land <var:o> = <nat:4> \times <var:C> + <nat:3> \} \end{eqnarray} Therefore , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:e> = <var:C> }} <var:c1> := <var:e> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:4> ; <var:o> := <var:c1> <var:o> := <var:o> + <var:c0> {{ <var:o> = <nat:4> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:c1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:c1> = <var:C> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:c1> = <nat:4> * <var:C> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:c0> = <nat:3> /\ <var:o> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:o> = <nat:4> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 