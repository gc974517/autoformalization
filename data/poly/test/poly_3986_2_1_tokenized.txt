\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:9> ; <var:J> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:K> = <var:c> $ ahead of the execution of the set of instructions it must be that we have $ <var:J> = <nat:9> $ when code segment has finished . \end{theorem} \begin{proof} The course of logic for the program can be seen with usual Hoare reasoning . Going forward , the variable binding line \verb | <var:a0> := <nat:9> ; | . This forwards $ \{ <var:K> = <var:c> \} $ toward $ \{ <var:K> = <var:c> \land <var:a0> = <nat:9> \} $ . Shifting focus toward the upcoming piece of code contained in the set of commands , we see the variable binding code defining $ <var:a0$ to $ <var:J>$ . This takes the condition $ \{ <var:K> = <var:c> \land <var:a0> = <nat:9> \} $ toward the condition $ \{ <var:K> = <var:c> \land <var:J> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:9> ; <var:J> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:K> = <var:c> }} <def:poly> {{ <var:J> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:J> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 