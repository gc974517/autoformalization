\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:4> ; <var:d1> := <var:d1> * <var:E> ; <var:g> := <var:d1> ; <var:g> := <var:g> + <var:d0> \end{verbatim} Assume it to be that $ <var:E> = <var:e> $ ahead of interpreting our set of commands , it holds that we have $ <var:g> = <nat:4> * <var:e> + <nat:3> $ once series of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for our set of instructions can be done using the below decorated program . \begin{eqnarray} \{ <var:E> = <var:e> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:E> = <var:e> \land <var:d0> = <nat:3> \} \\ <var:d1> := <nat:4> ; \\ \{ <var:E> = <var:e> \land <var:d0> = <nat:3> \land <var:d1> = <nat:4> \} \\ <var:d1> := <var:d1> * <var:E> ; \\ \{ <var:E> = <var:e> \land <var:d0> = <nat:3> \land <var:d1> = <nat:4> \cdot <var:e> \} \\ <var:g> := <var:d1> ; \\ \{ <var:E> = <var:e> \land <var:d0> = <nat:3> \land <var:g> = <nat:4> \cdot <var:e> \} \\ <var:g> := <var:g> + <var:d0> \\ \{ <var:E> = <var:e> \land <var:g> = <nat:4> \cdot <var:e> + <nat:3> \} \end{eqnarray} Applying standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:E> = <var:e> }} <var:d0> := <nat:3> ; <var:d1> := <nat:4> ; <var:d1> := <var:d1> * <var:E> ; <var:g> := <var:d1> ; <var:g> := <var:g> + <var:d0> {{ <var:g> = <nat:4> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:d0> = <nat:3> /\ <var:g> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:g> = <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 