\begin{document} \begin{theorem} Let the following program such that \begin{verbatim} <var:J0> := <nat:9> ; <var:n> := <var:J0> \end{verbatim} Allowing that $ <var:w> = <var:P> $ before executing the segment of code , it must be that we see $ <var:n> = <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for this code segment is evident using usual Hoare reasoning . Keeping momentum , we see \begin{eqnarray} \{ <var:w> = <var:P> \} \, <var:J0> := <nat:9> \, \{ <var:w> = <var:P> \land <var:J0> = <nat:9> \} \end{eqnarray} Moving forward , \begin{eqnarray} \{ <var:w> = <var:P> \} \, <var:J0> := <nat:9> \, \{ <var:w> = <var:P> \land <var:J0> = <nat:9> \} \end{eqnarray} This is shown through the law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:w> = <var:P> }} <var:J0> := <nat:9> ; <var:n> := <var:J0> {{ <var:n> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:n> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 