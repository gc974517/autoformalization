\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:S> ; <var:s2> := <var:s1> * <var:S> ; <var:s3> := <var:s2> * <var:S> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:8> ; <var:Y> := <var:s3> <var:Y> := <var:Y> + <var:s2> <var:Y> := <var:Y> + <var:s1> <var:Y> := <var:Y> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Given that $ <var:S> = <var:Z> $ ( for some integers $ <var:Z> $ ) prior to interpreting the segment of code , then $ <var:Y> = <nat:8> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:7> $ when series of instructions is done . \end{theorem} \begin{proof} We can see that this decorated segment of code . \begin{eqnarray} \{ <var:S> = <var:Z> \} \\ <var:s1> := <var:S> ; \\ \{ <var:S> = <var:Z> \land <var:s1> = <var:Z> \} \\ <var:s2> := <var:s1> * <var:S> ; \\ \{ <var:S> = <var:Z> \land <var:s1> = <var:Z> \land <var:s2> = <var:Z> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:S> ; \\ \{ <var:S> = <var:Z> \land <var:s1> = <var:Z> \land <var:s2> = <var:Z> ^ <nat:2> \land <var:s3> = <var:Z> ^ <nat:3> \} \end{eqnarray} Advancing evaluating this code returns : \begin{eqnarray} <var:s0> := <nat:7> ; \\ \{ <var:S> = <var:Z> \land <var:s1> = <var:Z> \land <var:s2> = <var:Z> ^ <nat:2> \land <var:s3> = <var:Z> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ <var:s1> := <var:s1> * <nat:1> ; \\ \{ <var:S> = <var:Z> \land <var:s1> = <nat:1> \times <var:Z> \land <var:s2> = <var:Z> ^ <nat:2> \land <var:s3> = <var:Z> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ <var:s2> := <var:s2> * <nat:2> ; \\ \{ <var:S> = <var:Z> \land <var:s1> = <nat:1> \times <var:Z> \land <var:s2> = <nat:2> \times <var:Z> ^ <nat:2> \land <var:s3> = <var:Z> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ <var:s3> := <var:s3> * <nat:8> ; \\ \{ <var:S> = <var:Z> \land <var:s1> = <nat:1> \times <var:Z> \land <var:s2> = <nat:2> \times <var:Z> ^ <nat:2> \land <var:s3> = <nat:8> \times <var:Z> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ <var:Y> := <var:s3> \\ \{ <var:S> = <var:Z> \land <var:s1> = <nat:1> \times <var:Z> \land <var:s2> = <nat:2> \times <var:Z> ^ <nat:2> \land <var:s0> = <nat:7> \land <var:Y> = <nat:8> \times <var:Z> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:s2> \\ \{ <var:S> = <var:Z> \land <var:s1> = <nat:1> \times <var:Z> \land <var:s0> = <nat:7> \land <var:Y> = <nat:8> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:s1> \\ \{ <var:S> = <var:Z> \land <var:s0> = <nat:7> \land <var:Y> = <nat:8> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> \} \\ <var:Y> := <var:Y> + <var:s0> \\ \{ <var:S> = <var:Z> \land <var:Y> = <nat:8> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:7> \} \end{eqnarray} Using typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:S> ; <var:s2> := <var:s1> * <var:S> ; <var:s3> := <var:s2> * <var:S> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:8> ; <var:Y> := <var:s3> <var:Y> := <var:Y> + <var:s2> <var:Y> := <var:Y> + <var:s1> <var:Y> := <var:Y> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:S> = <var:Z> }} <def:poly> {{ <var:Y> = <nat:8> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <var:Z> /\ <var:s2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <var:Z> /\ <var:s2> = <var:Z> ^ <nat:2> /\ <var:s3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <var:Z> /\ <var:s2> = <var:Z> ^ <nat:2> /\ <var:s3> = <var:Z> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <nat:1> * <var:Z> /\ <var:s2> = <var:Z> ^ <nat:2> /\ <var:s3> = <var:Z> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <nat:1> * <var:Z> /\ <var:s2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:s3> = <var:Z> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <nat:1> * <var:Z> /\ <var:s2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:s3> = <nat:8> * <var:Z> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <nat:1> * <var:Z> /\ <var:s2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:s0> = <nat:7> /\ <var:Y> = <nat:8> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s1> = <nat:1> * <var:Z> /\ <var:s0> = <nat:7> /\ <var:Y> = <nat:8> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:s0> = <nat:7> /\ <var:Y> = <nat:8> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:Y> = <nat:8> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 