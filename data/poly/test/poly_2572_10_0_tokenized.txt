\begin{document} \begin{theorem} Consider the following series of instructions such that \begin{verbatim} <var:y0> := <nat:3> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:D> ; <var:y3> := <nat:2> ; <var:y3> := <var:y3> * <var:D> ; <var:y3> := <var:y3> * <var:D> ; <var:y3> := <var:y3> * <var:D> ; <var:v> := <var:y3> ; <var:v> := <var:v> + <var:y1> ; <var:v> := <var:v> + <var:y0> \end{verbatim} Assume $ <var:D> = <var:N> $ given any positive coefficients $ <var:N> $ prior to the evaluation of this program , it follows that we see $ <var:v> = <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> + <nat:3> $ once code segment has finished executing . \end{theorem} \begin{proof} The course of logic for the series of commands is demonstrated by usual Hoare reasoning . Stepping forward , \verb | { <var:D> = <var:N> } <var:y0> := <nat:3> { <var:D> = <var:N> \land <var:y0> = <nat:3> } | , \verb | { <var:D> = <var:N> \land <var:y0> = <nat:3> } <var:y1> := <nat:1> { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> } | , \verb | { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> } <var:y1> := <var:y1> * <var:D> { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> } | , \verb | { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> } <var:y3> := <nat:2> { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:y3> = <nat:2> } | , \verb | { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:y3> = <nat:2> } <var:y3> := <var:y3> * <var:D> { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:y3> = <nat:2> * <var:N> } | , \verb | { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:y3> = <nat:2> * <var:N> } <var:y3> := <var:y3> * <var:D> { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:y3> = <nat:2> * <var:N> ^ <nat:2> } | , \verb | { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:y3> = <nat:2> * <var:N> ^ <nat:2> } <var:y3> := <var:y3> * <var:D> { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:y3> = <nat:2> * <var:N> ^ <nat:3> } | and \verb | { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:y3> = <nat:2> * <var:N> ^ <nat:3> } <var:v> := <var:y3> { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:N> \land <var:v> = <nat:2> * <var:N> ^ <nat:3> } | . This is ensured with the environment update rule found in usual Hoare logic . Looking at the subsequent commands contained in the set of commands , we have \verb | { <var:D> = <var:N> } <var:y0> := <nat:3> { <var:D> = <var:N> \land <var:y0> = <nat:3> } | and \verb | { <var:D> = <var:N> \land <var:y0> = <nat:3> } <var:y1> := <nat:1> { <var:D> = <var:N> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> } | . This is sound through the variable update rule found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:D> = <var:N> }} <var:y0> := <nat:3> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:D> ; <var:y3> := <nat:2> ; <var:y3> := <var:y3> * <var:D> ; <var:y3> := <var:y3> * <var:D> ; <var:y3> := <var:y3> * <var:D> ; <var:v> := <var:y3> ; <var:v> := <var:v> + <var:y1> ; <var:v> := <var:v> + <var:y0> {{ <var:v> = <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:N> /\ <var:y3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:N> /\ <var:y3> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:N> /\ <var:y3> = <nat:2> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:N> /\ <var:y3> = <nat:2> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:N> /\ <var:v> = <nat:2> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:y0> = <nat:3> /\ <var:v> = <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:v> = <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 