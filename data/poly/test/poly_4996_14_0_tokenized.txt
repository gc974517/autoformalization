\begin{document} \begin{theorem} Take the following list of commands : \begin{verbatim} <var:M0> := <nat:7> ; <var:M1> := <nat:6> ; <var:M1> := <var:M1> * <var:e> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:e> ; <var:M2> := <var:M2> * <var:e> ; <var:M3> := <nat:5> ; <var:M3> := <var:M3> * <var:e> ; <var:M3> := <var:M3> * <var:e> ; <var:M3> := <var:M3> * <var:e> ; <var:w> := <var:M3> ; <var:w> := <var:w> + <var:M2> ; <var:w> := <var:w> + <var:M1> ; <var:w> := <var:w> + <var:M0> \end{verbatim} Given it to be that $ <var:e> = <var:l> $ before the execution of this series of commands , it follows that $ <var:w> = <nat:5> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be given by typical Hoare techniques . Observing the proceeding piece of code contained in the set of instructions , the variable assignmet statement \verb | <var:M0> := <nat:7> ; | . This redefines the precondition $ \{ <var:e> = <var:l> \} $ into the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \} $ . This is rigorously given with the assignment inference rule defined by usual Hoare techniques . Shifting focus toward the proceeding step in the list of commands , the assignment statement \verb | <var:M1> := <nat:6> ; | . This takes $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \} $ toward the condition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \} $ . Shifting focus toward the upcoming piece of code seen in the list of commands , we see the variable update command \verb | <var:M1> := <var:M1> * <var:e> ; | . This moves the precondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \} $ toward the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \} $ . This is rigorously given using the assignment rule defined by usual Hoare reasoning . Moving on , we see the environment update line \verb | <var:M2> := <nat:5> ; | . This code forwards the precondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \} $ as the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \} $ . This is sound using the assignment law from Hoare reasoning . Considering the upcoming step in our list of instructions , the variable binding statement \verb | <var:M2> := <var:M2> * <var:e> ; | . This code moves $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \} $ as the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> \} $ . This is shown using the assignment law found in usual Hoare techniques . Following , the assignment code defining $ <var:M2> * <var:e> $ into $ <var:M2>$ . This moves $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> \} $ toward the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \} $ . Stepping forward , we see the variable assignmet statement \verb | <var:M3> := <nat:5> ; | . This command forwards $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \} $ as the condition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:M3> = <nat:5> \} $ . This is known to be sound with the assignment law found in Hoare reasoning . Moving on to the next step , the variable update command \verb | <var:M3> := <var:M3> * <var:e> ; | . This line forwards $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:M3> = <nat:5> \} $ as the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:M3> = <nat:5> \times <var:l> \} $ . This is deduced by the assignment rule defined in usual Hoare logic . Shifting focus toward the following piece of code in the code , the binding command giving $ <var:M3> * <var:e> $ into $ <var:M3>$ . This code transfers the precondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:M3> = <nat:5> \times <var:l> \} $ into $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:M3> = <nat:5> \times <var:l> ^ <nat:2> \} $ . This is sound through the assignment inference rule given in usual Hoare techniques . Moving forward to the following command in the list of instructions , we see the binding code yielding $ <var:M3> * <var:e> $ into $ <var:M3>$ . This transfers the condition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:M3> = <nat:5> \times <var:l> ^ <nat:2> \} $ into $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:M3> = <nat:5> \times <var:l> ^ <nat:3> \} $ . This is shown by the assignment inference rule given by usual Hoare logic . Moving on , we see the variable assignmet command defining $ <var:M3> $ to $ <var:w>$ . This line redefines the condition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:M3> = <nat:5> \times <var:l> ^ <nat:3> \} $ to the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:w> = <nat:5> \times <var:l> ^ <nat:3> \} $ . This is known to be sound through the assignment scheme in standard Hoare techniques . Moving forward to the next step found in the list of commands , we see the assignment command binding $ <var:w> + <var:M2> $ as $ <var:w>$ . This takes the precondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:M2> = <nat:5> \times <var:l> ^ <nat:2> \land <var:w> = <nat:5> \times <var:l> ^ <nat:3> \} $ to the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:w> = <nat:5> \times <var:l> ^ <nat:3> + <nat:5> \times <var:l> ^ <nat:2> \} $ . Paying attention to the next line contained in our code , we have the assignment statement defining $ <var:w> + <var:M1> $ as $ <var:w>$ . This line moves $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:M1> = <nat:6> \times <var:l> \land <var:w> = <nat:5> \times <var:l> ^ <nat:3> + <nat:5> \times <var:l> ^ <nat:2> \} $ into the postcondition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:w> = <nat:5> \times <var:l> ^ <nat:3> + <nat:5> \times <var:l> ^ <nat:2> + <nat:6> \times <var:l> \} $ . Taking another step toward the next statement seen in our set of instructions , we have the environment update line giving $ <var:w> + <var:M0$ into $ <var:w>$ . This advances the condition $ \{ <var:e> = <var:l> \land <var:M0> = <nat:7> \land <var:w> = <nat:5> \times <var:l> ^ <nat:3> + <nat:5> \times <var:l> ^ <nat:2> + <nat:6> \times <var:l> \} $ toward $ \{ <var:e> = <var:l> \land <var:w> = <nat:5> \times <var:l> ^ <nat:3> + <nat:5> \times <var:l> ^ <nat:2> + <nat:6> \times <var:l> + <nat:7> \} $ . This is deduced by the assignment inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:e> = <var:l> }} <var:M0> := <nat:7> ; <var:M1> := <nat:6> ; <var:M1> := <var:M1> * <var:e> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:e> ; <var:M2> := <var:M2> * <var:e> ; <var:M3> := <nat:5> ; <var:M3> := <var:M3> * <var:e> ; <var:M3> := <var:M3> * <var:e> ; <var:M3> := <var:M3> * <var:e> ; <var:w> := <var:M3> ; <var:w> := <var:w> + <var:M2> ; <var:w> := <var:w> + <var:M1> ; <var:w> := <var:w> + <var:M0> {{ <var:w> = <nat:5> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:M2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:M2> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:M2> = <nat:5> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:M2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:M3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:M2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:M3> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:M2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:M3> = <nat:5> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:M2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:M3> = <nat:5> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:M2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:w> = <nat:5> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:6> * <var:l> /\ <var:w> = <nat:5> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M0> = <nat:7> /\ <var:w> = <nat:5> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:w> = <nat:5> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:6> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 