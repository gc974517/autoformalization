\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:A> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:9> ; <var:i> := <var:e1> <var:i> := <var:i> + <var:e0> \end{verbatim} Allow that we have $ <var:A> = <var:a> $ ( given all positive coefficients $ <var:a> $ ) before interpreting our segment of code it follows that we see $ <var:i> = <nat:9> \cdot <var:a> + <nat:7> $ when segment of code has finished executing . \end{theorem} \begin{proof} The argument for the set of commands is shown through usual Hoare techniques . Honing in on the next statements seen in our segment of code , we see \begin{verbatim} { <var:A> = <var:a> } <var:e1> := <var:A> { <var:A> = <var:a> \land <var:e1> = <var:a> } { <var:A> = <var:a> \land <var:e1> = <var:a> } <var:e0> := <nat:7> { <var:A> = <var:a> \land <var:e1> = <var:a> \land <var:e0> = <nat:7> } { <var:A> = <var:a> \land <var:e1> = <var:a> \land <var:e0> = <nat:7> } <var:e1> := <var:e1> * <nat:9> { <var:A> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e0> = <nat:7> } { <var:A> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e0> = <nat:7> } <var:i> := <var:e1{ <var:A> = <var:a> \land <var:e0> = <nat:7> \land <var:i> = <nat:9> \times <var:a> } \end{verbatim} This is shown to be logically sound by the law from Hoare reasoning . Observing the following line contained in the list of instructions , we see \begin{verbatim} { <var:A> = <var:a> } <var:e1> := <var:A> { <var:A> = <var:a> \land <var:e1> = <var:a> } \end{verbatim} This is ensured using the binding scheme obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:A> = <var:a> }} <var:e1> := <var:A> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:9> ; <var:i> := <var:e1> <var:i> := <var:i> + <var:e0> {{ <var:i> = <nat:9> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:e1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:e1> = <var:a> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:e1> = <nat:9> * <var:a> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:e0> = <nat:7> /\ <var:i> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:i> = <nat:9> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 