\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:P> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:2> ; <var:Z> := <var:X1> <var:Z> := <var:Z> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Given ( for any positive integer coefficients $ <var:x> $ ) that we have $ <var:P> = <var:x> $ ahead of executing our segment of code it holds that $ <var:Z> = <nat:2> \cdot <var:x> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the code can be demonstrated through this decorated series of commands . \begin{eqnarray} \{ <var:P> = <var:x> \} \\ <var:X1> := <var:P> ; \\ \{ <var:P> = <var:x> \land <var:X1> = <var:x> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:P> = <var:x> \land <var:X1> = <var:x> \land <var:X0> = <nat:2> \} \\ <var:X1> := <var:X1> * <nat:2> ; \\ \{ <var:P> = <var:x> \land <var:X1> = <nat:2> * <var:x> \land <var:X0> = <nat:2> \} \\ <var:Z> := <var:X1> \\ \{ <var:P> = <var:x> \land <var:X0> = <nat:2> \land <var:Z> = <nat:2> * <var:x> \} \\ <var:Z> := <var:Z> + <var:X0> \\ \{ <var:P> = <var:x> \land <var:Z> = <nat:2> * <var:x> + <nat:2> \} \end{eqnarray} Applying typical Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X1> := <var:P> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:2> ; <var:Z> := <var:X1> <var:Z> := <var:Z> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:P> = <var:x> }} <def:poly> {{ <var:Z> = <nat:2> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:X1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:X1> = <var:x> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:X1> = <nat:2> * <var:x> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:X0> = <nat:2> /\ <var:Z> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:x> /\ <var:Z> = <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 