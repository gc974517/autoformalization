\begin{document} \begin{theorem} Take the following program in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:7> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:y> ; <var:c2> := <nat:9> ; <var:c2> := <var:c2> * <var:y> ; <var:c2> := <var:c2> * <var:y> ; <var:c3> := <nat:4> ; <var:c3> := <var:c3> * <var:y> ; <var:c3> := <var:c3> * <var:y> ; <var:c3> := <var:c3> * <var:y> ; <var:K> := <var:c3> ; <var:K> := <var:K> + <var:c2> ; <var:K> := <var:K> + <var:c1> ; <var:K> := <var:K> + <var:c0> \end{verbatim} Allow that we have $ <var:y> = <var:B> $ ( for some positive integer coefficients $ <var:B> $ ) prior to evaluating the segment of code , it follows that we have $ <var:K> = <nat:4> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:7> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:y> = <var:B> \} \\ <var:c0> := <nat:7> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \} \\ <var:c1> := <nat:3> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \} \\ <var:c1> := <var:c1> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \} \\ <var:c2> := <nat:9> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:c2> = <nat:9> \} \\ <var:c2> := <var:c2> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:c2> = <nat:9> \times <var:B> \} \\ <var:c2> := <var:c2> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:c2> = <nat:9> \times <var:B> ^ <nat:2> \} \\ <var:c3> := <nat:4> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:c2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:c3> = <nat:4> \} \\ <var:c3> := <var:c3> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:c2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:c3> = <nat:4> \times <var:B> \} \\ <var:c3> := <var:c3> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:c2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:c3> = <nat:4> \times <var:B> ^ <nat:2> \} \\ <var:c3> := <var:c3> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:c2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:c3> = <nat:4> \times <var:B> ^ <nat:3> \} \\ <var:K> := <var:c3> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:c2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:K> = <nat:4> \times <var:B> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:c2> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:3> \times <var:B> \land <var:K> = <nat:4> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:c1> ; \\ \{ <var:y> = <var:B> \land <var:c0> = <nat:7> \land <var:K> = <nat:4> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> \} \\ <var:K> := <var:K> + <var:c0> \\ \{ <var:y> = <var:B> \land <var:K> = <nat:4> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:7> \} \end{eqnarray} Given the preceding argument , this set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:y> = <var:B> }} <var:c0> := <nat:7> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:y> ; <var:c2> := <nat:9> ; <var:c2> := <var:c2> * <var:y> ; <var:c2> := <var:c2> * <var:y> ; <var:c3> := <nat:4> ; <var:c3> := <var:c3> * <var:y> ; <var:c3> := <var:c3> * <var:y> ; <var:c3> := <var:c3> * <var:y> ; <var:K> := <var:c3> ; <var:K> := <var:K> + <var:c2> ; <var:K> := <var:K> + <var:c1> ; <var:K> := <var:K> + <var:c0> {{ <var:K> = <nat:4> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:c3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:c3> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:c3> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:c3> = <nat:4> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:K> = <nat:4> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:3> * <var:B> /\ <var:K> = <nat:4> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c0> = <nat:7> /\ <var:K> = <nat:4> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K> = <nat:4> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 