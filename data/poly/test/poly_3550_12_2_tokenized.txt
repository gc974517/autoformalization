\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K> := <nat:1> ; <var:K> := <nat:1> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <var:K> * <var:A> ; <var:K> := <nat:1> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <nat:4> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <nat:4> + <var:K> * <var:A> ; <var:K> := <nat:1> + <var:K> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:A> = <var:Y> $ ahead of the execution of this set of instructions it holds that $ <var:K> = <nat:1> \times <var:Y> ^ <nat:11> + <nat:1> \times <var:Y> ^ <nat:10> + <nat:3> \times <var:Y> ^ <nat:9> + <nat:3> \times <var:Y> ^ <nat:8> + <nat:1> \times <var:Y> ^ <nat:6> + <nat:3> \times <var:Y> ^ <nat:5> + <nat:3> \times <var:Y> ^ <nat:4> + <nat:4> \times <var:Y> ^ <nat:3> + <nat:3> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:1> $ after segment of code is done executing . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:A> = <var:Y> \} \\ <var:K> := <nat:1> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> \} \\ <var:K> := <nat:1> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> + <nat:1> \} \\ <var:K> := <nat:3> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> \} \\ <var:K> := <nat:3> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} \\ <var:K> := <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + \} \\ <var:K> := <nat:1> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> \} \\ <var:K> := <nat:3> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> + <nat:3> \} \\ <var:K> := <nat:3> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} \\ <var:K> := <nat:4> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> \} \\ <var:K> := <nat:3> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:9> + <nat:1> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> \} \\ <var:K> := <nat:4> + <var:K> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> \} \\ <var:K> := <nat:1> + <var:K> * <var:A> \\ \{ <var:A> = <var:Y> \land <var:K> = <nat:1> * <var:Y> ^ <nat:11> + <nat:1> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> \} \end{eqnarray} Therefore , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:1> ; <var:K> := <nat:1> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <var:K> * <var:A> ; <var:K> := <nat:1> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <nat:4> + <var:K> * <var:A> ; <var:K> := <nat:3> + <var:K> * <var:A> ; <var:K> := <nat:4> + <var:K> * <var:A> ; <var:K> := <nat:1> + <var:K> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:A> = <var:Y> }} <def:poly> {{ <var:K> = <nat:1> * <var:Y> ^ <nat:11> + <nat:1> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:9> + <nat:1> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:10> + <nat:1> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:11> + <nat:1> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 