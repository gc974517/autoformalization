\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <nat:1> + <var:S> * <var:y> \end{verbatim} Allowing that we have $ <var:y> = <var:j> $ ahead of running this series of commands it must be that we have $ <var:S> = <nat:1> \times <var:j> + <nat:1> $ after list of commands has terminated . \end{theorem} \begin{proof} The argument for this code segment is clear through standard Hoare techniques . Following , the environment update command \verb | <var:S> := <nat:1> ; | . This statement forwards $ \{ <var:y> = <var:j> \} $ toward $ \{ <var:y> = <var:j> \land <var:S> = <nat:1> \} $ . This is shown through the assignment scheme from typical Hoare logic . Looking at the upcoming step seen in our set of commands , we see the assignment command \verb | <var:S> := <nat:1> + <var:S> * <var:y> | . This takes the precondition $ \{ <var:y> = <var:j> \land <var:S> = <nat:1> \} $ as the postcondition $ \{ <var:y> = <var:j> \land <var:S> = <nat:1> \times <var:j> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:y> = <var:j> }} <var:S> := <nat:1> ; <var:S> := <nat:1> + <var:S> * <var:y> {{ <var:S> = <nat:1> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:S> = <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 