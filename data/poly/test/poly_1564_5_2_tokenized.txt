\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g> := <nat:4> ; <var:g> := <nat:4> + <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> ; <var:g> := <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:v> = <var:F> $ , assuming some positive coefficients $ <var:F> $ , ahead of running this set of commands it must be that we see $ <var:g> = <nat:4> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> $ once code has exited . \end{theorem} \begin{proof} Using standard Hoare reasoning produces : \begin{eqnarray} \{ <var:v> = <var:F> \} \\ <var:g> := <nat:4> ; \\ \{ <var:v> = <var:F> \land <var:g> = <nat:4> \} \\ <var:g> := <nat:4> + <var:g> * <var:v> ; \\ \{ <var:v> = <var:F> \land <var:g> = <nat:4> \times <var:F> + <nat:4> \} \\ <var:g> := <nat:2> + <var:g> * <var:v> ; \\ \{ <var:v> = <var:F> \land <var:g> = <nat:4> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + <nat:2> \} \\ <var:g> := <var:g> * <var:v> ; \\ \{ <var:v> = <var:F> \land <var:g> = <nat:4> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + \} \\ <var:g> := <nat:2> + <var:g> * <var:v> \\ \{ <var:v> = <var:F> \land <var:g> = <nat:4> \times <var:F> ^ <nat:4> + <nat:4> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> + <nat:2> \} \end{eqnarray} Thus , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:4> ; <var:g> := <nat:4> + <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> ; <var:g> := <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:v> = <var:F> }} <def:poly> {{ <var:g> = <nat:4> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:g> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:g> = <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:g> = <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:g> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:F> /\ <var:g> = <nat:4> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 