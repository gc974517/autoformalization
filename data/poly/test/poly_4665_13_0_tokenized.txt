\begin{document} \begin{theorem} We define the following code as \begin{verbatim} <var:T0> := <nat:3> ; <var:T2> := <nat:2> ; <var:T2> := <var:T2> * <var:I> ; <var:T2> := <var:T2> * <var:I> ; <var:T5> := <nat:4> ; <var:T5> := <var:T5> * <var:I> ; <var:T5> := <var:T5> * <var:I> ; <var:T5> := <var:T5> * <var:I> ; <var:T5> := <var:T5> * <var:I> ; <var:T5> := <var:T5> * <var:I> ; <var:w> := <var:T5> ; <var:w> := <var:w> + <var:T2> ; <var:w> := <var:w> + <var:T0> \end{verbatim} Given that $ <var:I> = <var:P> $ ahead of interpreting this list of instructions , it holds that $ <var:w> = <nat:4> \times <var:P> ^ <nat:5> + <nat:2> \times <var:P> ^ <nat:2> + <nat:3> $ once program has terminated . \end{theorem} \begin{proof} The course of logic for this list of commands can be accomplished through typical Hoare logic . Next , \[ \begin{tabular} {rcl} \{ <var:I> = <var:P> \} & <var:T0> := <nat:3> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \} & <var:T2> := <nat:2> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> \} & <var:T2> := <var:T2> * <var:I> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> \} & <var:T2> := <var:T2> * <var:I> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> ^ <nat:2> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> ^ <nat:2> \} & <var:T5> := <nat:4> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> ^ <nat:2> \land <var:T5> = <nat:4> \} \end{tabular} This is rigorously given with the variable update law defined by standard Hoare logic . Moving on to the proceeding statements contained in the segment of code , we have \[ \begin{tabular} {rcl} \{ <var:I> = <var:P> \} & <var:T0> := <nat:3> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \} & <var:T2> := <nat:2> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> \} \end{tabular} Considering the next steps found in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:P> \} & <var:T0> := <nat:3> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \} & <var:T2> := <nat:2> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> \} & <var:T2> := <var:T2> * <var:I> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> \} & <var:T2> := <var:T2> * <var:I> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> ^ <nat:2> \} \\ \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> ^ <nat:2> \} & <var:T5> := <nat:4> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \land <var:T2> = <nat:2> * <var:P> ^ <nat:2> \land <var:T5> = <nat:4> \} \end{tabular} Now , \[ \begin{tabular} {rcl} \{ <var:I> = <var:P> \} & <var:T0> := <nat:3> & \{ <var:I> = <var:P> \land <var:T0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T5> : string := " <var:T5> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:I> = <var:P> }} <var:T0> := <nat:3> ; <var:T2> := <nat:2> ; <var:T2> := <var:T2> * <var:I> ; <var:T2> := <var:T2> * <var:I> ; <var:T5> := <nat:4> ; <var:T5> := <var:T5> * <var:I> ; <var:T5> := <var:T5> * <var:I> ; <var:T5> := <var:T5> * <var:I> ; <var:T5> := <var:T5> * <var:I> ; <var:T5> := <var:T5> * <var:I> ; <var:w> := <var:T5> ; <var:w> := <var:w> + <var:T2> ; <var:w> := <var:w> + <var:T0> {{ <var:w> = <nat:4> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:T5> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:T5> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:T5> = <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:T5> = <nat:4> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:T5> = <nat:4> * <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:T5> = <nat:4> * <var:P> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:T2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:w> = <nat:4> * <var:P> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:T0> = <nat:3> /\ <var:w> = <nat:4> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:P> /\ <var:w> = <nat:4> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 