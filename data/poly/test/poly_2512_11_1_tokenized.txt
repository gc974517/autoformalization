\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:B1> := <var:M> ; <var:B2> := <var:B1> * <var:M> ; <var:B3> := <var:B2> * <var:M> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:9> ; <var:B2> := <var:B2> * <nat:5> ; <var:B3> := <var:B3> * <nat:3> ; <var:A> := <var:B3> <var:A> := <var:A> + <var:B2> <var:A> := <var:A> + <var:B1> <var:A> := <var:A> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Assuming it to hold that $ <var:M> = <var:R> $ prior to evaluating our set of commands , then we see $ <var:A> = <nat:3> \times <var:R> ^ <nat:3> + <nat:5> \times <var:R> ^ <nat:2> + <nat:9> \times <var:R> + <nat:5> $ when set of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of our series of commands can be given by usual Hoare logic . Considering the upcoming commands contained in the set of commands , we see \begin{verbatim} { <var:M> = <var:R> } <var:B1> := <var:M> { <var:M> = <var:R> \land <var:B1> = <var:R> } { <var:M> = <var:R> \land <var:B1> = <var:R> } <var:B2> := <var:B1> * <var:M> { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> } { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> } <var:B3> := <var:B2> * <var:M> { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> } { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> } <var:B0> := <nat:5> { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \land <var:B0> = <nat:5> } { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \land <var:B0> = <nat:5> } <var:B1> := <var:B1> * <nat:9> { <var:M> = <var:R> \land <var:B1> = <nat:9> \cdot <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \land <var:B0> = <nat:5> } { <var:M> = <var:R> \land <var:B1> = <nat:9> \cdot <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \land <var:B0> = <nat:5> } <var:B2> := <var:B2> * <nat:5> { <var:M> = <var:R> \land <var:B1> = <nat:9> \cdot <var:R> \land <var:B2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> \land <var:B0> = <nat:5> } \end{verbatim} This is sound by the environment update scheme of typical Hoare reasoning . Advancing , we see \begin{verbatim} { <var:M> = <var:R> } <var:B1> := <var:M> { <var:M> = <var:R> \land <var:B1> = <var:R> } { <var:M> = <var:R> \land <var:B1> = <var:R> } <var:B2> := <var:B1> * <var:M> { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> } \end{verbatim} Stepping forward , \begin{verbatim} { <var:M> = <var:R> } <var:B1> := <var:M> { <var:M> = <var:R> \land <var:B1> = <var:R> } { <var:M> = <var:R> \land <var:B1> = <var:R> } <var:B2> := <var:B1> * <var:M> { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> } { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> } <var:B3> := <var:B2> * <var:M> { <var:M> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B3> = <var:R> ^ <nat:3> } \end{verbatim} This is rigorously given using the rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:M> ; <var:B2> := <var:B1> * <var:M> ; <var:B3> := <var:B2> * <var:M> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:9> ; <var:B2> := <var:B2> * <nat:5> ; <var:B3> := <var:B3> * <nat:3> ; <var:A> := <var:B3> <var:A> := <var:A> + <var:B2> <var:A> := <var:A> + <var:B1> <var:A> := <var:A> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:M> = <var:R> }} <def:poly> {{ <var:A> = <nat:3> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:9> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <var:R> /\ <var:B2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <var:R> /\ <var:B2> = <var:R> ^ <nat:2> /\ <var:B3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <var:R> /\ <var:B2> = <var:R> ^ <nat:2> /\ <var:B3> = <var:R> ^ <nat:3> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <nat:9> * <var:R> /\ <var:B2> = <var:R> ^ <nat:2> /\ <var:B3> = <var:R> ^ <nat:3> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <nat:9> * <var:R> /\ <var:B2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:B3> = <var:R> ^ <nat:3> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <nat:9> * <var:R> /\ <var:B2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:R> ^ <nat:3> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <nat:9> * <var:R> /\ <var:B2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:B0> = <nat:5> /\ <var:A> = <nat:3> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B1> = <nat:9> * <var:R> /\ <var:B0> = <nat:5> /\ <var:A> = <nat:3> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:B0> = <nat:5> /\ <var:A> = <nat:3> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:A> = <nat:3> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:9> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 