\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:v> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:1> ; <var:g> := <var:O1> <var:g> := <var:g> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:v> = <var:k> $ before executing this set of instructions , it holds that $ <var:g> = <nat:1> \times <var:k> + <nat:1> $ once list of commands has executed . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:v> = <var:k> \} \\ <var:O1> := <var:v> ; \\ \{ <var:v> = <var:k> \land <var:O1> = <var:k> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:v> = <var:k> \land <var:O1> = <var:k> \land <var:O0> = <nat:1> \} \\ <var:O1> := <var:O1> * <nat:1> ; \\ \{ <var:v> = <var:k> \land <var:O1> = <nat:1> * <var:k> \land <var:O0> = <nat:1> \} \\ <var:g> := <var:O1> \\ \{ <var:v> = <var:k> \land <var:O0> = <nat:1> \land <var:g> = <nat:1> * <var:k> \} \\ <var:g> := <var:g> + <var:O0> \\ \{ <var:v> = <var:k> \land <var:g> = <nat:1> * <var:k> + <nat:1> \} \end{eqnarray} Thusly , the series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:v> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:1> ; <var:g> := <var:O1> <var:g> := <var:g> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:v> = <var:k> }} <def:poly> {{ <var:g> = <nat:1> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:O1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:O1> = <var:k> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:O1> = <nat:1> * <var:k> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:O0> = <nat:1> /\ <var:g> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:g> = <nat:1> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 