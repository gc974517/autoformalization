\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as \begin{verbatim} <var:z> := <nat:3> ; <var:z> := <nat:1> + <var:z> * <var:X> ; <var:z> := <nat:2> + <var:z> * <var:X> ; <var:z> := <nat:2> + <var:z> * <var:X> ; <var:z> := <nat:3> + <var:z> * <var:X> ; <var:z> := <nat:4> + <var:z> * <var:X> ; <var:z> := <nat:4> + <var:z> * <var:X> ; <var:z> := <nat:2> + <var:z> * <var:X> ; <var:z> := <nat:2> + <var:z> * <var:X> \end{verbatim} Allow that we have $ <var:X> = <var:H> $ ( for any positive numbers $ <var:H> $ ) ahead of executing the code then we have $ <var:z> = <nat:3> \cdot <var:H> ^ <nat:8> + <nat:1> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:4> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:2> $ once set of commands is done . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:X> = <var:H> \} \\ <var:z> := <nat:3> ; \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> \} \\ <var:z> := <nat:1> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> * <var:H> + <nat:1> \} \\ <var:z> := <nat:2> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> \} \\ <var:z> := <nat:3> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> \} \\ <var:z> := <nat:4> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> \} \\ <var:z> := <nat:4> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> \} \end{eqnarray} Allowing the execution of this set of commands yields : \begin{eqnarray} <var:z> := <nat:2> + <var:z> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:X> \\ \{ <var:X> = <var:H> \land <var:z> = <nat:3> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> \} \end{eqnarray} Given the above , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:X> = <var:H> }} <var:z> := <nat:3> ; <var:z> := <nat:1> + <var:z> * <var:X> ; <var:z> := <nat:2> + <var:z> * <var:X> ; <var:z> := <nat:2> + <var:z> * <var:X> ; <var:z> := <nat:3> + <var:z> * <var:X> ; <var:z> := <nat:4> + <var:z> * <var:X> ; <var:z> := <nat:4> + <var:z> * <var:X> ; <var:z> := <nat:2> + <var:z> * <var:X> ; <var:z> := <nat:2> + <var:z> * <var:X> {{ <var:z> = <nat:3> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:z> = <nat:3> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 