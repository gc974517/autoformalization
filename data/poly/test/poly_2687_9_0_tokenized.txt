\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:9> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:z> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:z> ; <var:y2> := <var:y2> * <var:z> ; <var:Q> := <var:y2> ; <var:Q> := <var:Q> + <var:y1> ; <var:Q> := <var:Q> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allowing it to be that $ <var:z> = <var:J> $ prior to the execution of the segment of code , it must be that we see $ <var:Q> = <nat:4> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:9> $ when list of commands exits . \end{theorem} \begin{proof} The flow of logic for the set of commands is evident using standard Hoare techniques . Moving on to the proceeding line of code in the series of commands , we see the variable update line defining $ <nat:9> $ to $ <var:y0>$ . This command transfers the precondition $ \{ <var:z> = <var:J> \} $ as the condition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \} $ . This is rigorously given using the assignment law of usual Hoare techniques . Jumping to the subsequent step found in our set of commands , the assignment command yielding $ <nat:1> $ toward $ <var:y1>$ . This line takes the precondition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \} $ to the postcondition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \} $ . This is ensured using the assignment rule in typical Hoare logic . Taking a look at the following piece of code in the code segment , we have the variable assignmet code \verb | <var:y1> := <var:y1> * <var:z> ; | . This moves $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \} $ into $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \} $ . Considering the subsequent line of code found in our series of instructions , we have the variable assignmet code binding $ <nat:4> $ into $ <var:y2>$ . This advances the condition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \} $ to $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \land <var:y2> = <nat:4> \} $ . After , we have the assignment code \verb | <var:y2> := <var:y2> * <var:z> ; | . This statement forwards $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \land <var:y2> = <nat:4> \} $ into the condition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \land <var:y2> = <nat:4> \cdot <var:J> \} $ . Looking at the subsequent bit of code seen in our series of commands , we have the variable update code \verb | <var:y2> := <var:y2> * <var:z> ; | . This advances $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \land <var:y2> = <nat:4> \cdot <var:J> \} $ into the postcondition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \land <var:y2> = <nat:4> \cdot <var:J> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law given in typical Hoare logic . Keeping momentum , we have the variable binding statement \verb | <var:Q> := <var:y2> ; | . This statement redefines the condition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \land <var:y2> = <nat:4> \cdot <var:J> ^ <nat:2> \} $ into the condition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \land <var:Q> = <nat:4> \cdot <var:J> ^ <nat:2> \} $ . Next , we see the assignment command yielding $ <var:Q> + <var:y1> $ as $ <var:Q>$ . This command takes the precondition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:y1> = <nat:1> \cdot <var:J> \land <var:Q> = <nat:4> \cdot <var:J> ^ <nat:2> \} $ toward the condition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:Q> = <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> \} $ . Taking a look at the proceeding statement in the series of commands , we see the variable binding code \verb | <var:Q> := <var:Q> + <var:y0> | . This takes the precondition $ \{ <var:z> = <var:J> \land <var:y0> = <nat:9> \land <var:Q> = <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> \} $ into the condition $ \{ <var:z> = <var:J> \land <var:Q> = <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:9> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:z> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:z> ; <var:y2> := <var:y2> * <var:z> ; <var:Q> := <var:y2> ; <var:Q> := <var:Q> + <var:y1> ; <var:Q> := <var:Q> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <def:poly> {{ <var:Q> = <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:y0> = <nat:9> /\ <var:y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:y0> = <nat:9> /\ <var:y1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:y0> = <nat:9> /\ <var:y1> = <nat:1> * <var:J> /\ <var:y2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:y0> = <nat:9> /\ <var:y1> = <nat:1> * <var:J> /\ <var:y2> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:y0> = <nat:9> /\ <var:y1> = <nat:1> * <var:J> /\ <var:y2> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:y0> = <nat:9> /\ <var:y1> = <nat:1> * <var:J> /\ <var:Q> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:y0> = <nat:9> /\ <var:Q> = <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:Q> = <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 