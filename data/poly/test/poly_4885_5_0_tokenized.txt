\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:5> ; <var:o1> := <nat:7> ; <var:o1> := <var:o1> * <var:n> ; <var:c> := <var:o1> ; <var:c> := <var:c> + <var:o0> \end{verbatim} Allow that we have $ <var:n> = <var:J> $ prior to evaluating the code segment it follows that we see $ <var:c> = <nat:7> \cdot <var:J> + <nat:5> $ after series of commands is done executing . \end{theorem} \begin{proof} The method of proof for our list of commands is done by usual Hoare logic . Next , we have the variable assignmet code giving $ <nat:5> $ into $ <var:o0>$ . This takes the condition $ \{ <var:n> = <var:J> \} $ into the postcondition $ \{ <var:n> = <var:J> \land <var:o0> = <nat:5> \} $ . Moving forward to the next command in our set of instructions , we see the variable update line \verb | <var:o1> := <nat:7> ; | . This transfers $ \{ <var:n> = <var:J> \land <var:o0> = <nat:5> \} $ to $ \{ <var:n> = <var:J> \land <var:o0> = <nat:5> \land <var:o1> = <nat:7> \} $ . This is deduced by the assignment law defined in Hoare techniques . Considering the subsequent command in the code segment , we have the variable update line defining $ <var:o1> * <var:n> $ into $ <var:o1>$ . This redefines $ \{ <var:n> = <var:J> \land <var:o0> = <nat:5> \land <var:o1> = <nat:7> \} $ to $ \{ <var:n> = <var:J> \land <var:o0> = <nat:5> \land <var:o1> = <nat:7> * <var:J> \} $ . This is ensured by the assignment scheme of standard Hoare logic . Stepping through , the binding code \verb | <var:c> := <var:o1> ; | . This command advances the condition $ \{ <var:n> = <var:J> \land <var:o0> = <nat:5> \land <var:o1> = <nat:7> * <var:J> \} $ toward the condition $ \{ <var:n> = <var:J> \land <var:o0> = <nat:5> \land <var:c> = <nat:7> * <var:J> \} $ . Advancing on , we see the variable update code \verb | <var:c> := <var:c> + <var:o0> | . This command moves the precondition $ \{ <var:n> = <var:J> \land <var:o0> = <nat:5> \land <var:c> = <nat:7> * <var:J> \} $ toward the postcondition $ \{ <var:n> = <var:J> \land <var:c> = <nat:7> * <var:J> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:n> = <var:J> }} <var:o0> := <nat:5> ; <var:o1> := <nat:7> ; <var:o1> := <var:o1> * <var:n> ; <var:c> := <var:o1> ; <var:c> := <var:c> + <var:o0> {{ <var:c> = <nat:7> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:o0> = <nat:5> /\ <var:c> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:c> = <nat:7> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 