\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} : \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:2> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:1> + <var:t> * <var:e> ; <var:t> := <nat:1> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:2> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <var:t> * <var:e> ; <var:t> := <nat:2> + <var:t> * <var:e> \end{verbatim} Assuming , given all natural coefficients $ <var:c> $ , that we have $ <var:e> = <var:c> $ prior to running our set of commands , it holds that $ <var:t> = <nat:2> * <var:c> ^ <nat:13> + <nat:4> * <var:c> ^ <nat:12> + <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:1> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands is shown with Hoare techniques . Moving on to the following bit of code contained in our set of instructions , we have the variable assignmet code assigning $ <nat:2> $ into $ <var:t>$ . This advances $ \{ <var:e> = <var:c> \} $ into the postcondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> \} $ . Following , we have the assignment statement \verb | <var:t> := <nat:4> + <var:t> * <var:e> ; | . This redefines the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> \} $ toward $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> + <nat:4> \} $ . This is ensured using the assignment rule in typical Hoare techniques . Honing in on the proceeding step seen in the list of instructions , the variable update statement assigning $ <nat:2> + <var:t> * <var:e> $ toward $ <var:t>$ . This command takes the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> + <nat:4> \} $ as $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> \} $ . Moving forward to the next step , we have the binding command letting $ <nat:4> + <var:t> * <var:e> $ to $ <var:t>$ . This forwards the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> \} $ as the postcondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> \} $ . This is shown to be logically sound using the assignment scheme given in Hoare reasoning . Next , we have the assignment command \verb | <var:t> := <nat:1> + <var:t> * <var:e> ; | . This redefines the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> \} $ as $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> \} $ . This is ensured through the assignment law given in usual Hoare reasoning . Advancing to the upcoming step seen in the series of commands , we have the variable update statement binding $ <nat:1> + <var:t> * <var:e> $ to $ <var:t>$ . This statement redefines the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> \} $ into the postcondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> \} $ . This is deduced through the assignment inference rule found in usual Hoare techniques . Moving forward to the next step found in the set of commands , we have the assignment code yielding $ <nat:4> + <var:t> * <var:e> $ as $ <var:t>$ . This moves the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> \} $ to $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> \} $ . Moving on , we have the line \verb | <var:t> := <nat:4> + <var:t> * <var:e> ; | . This moves $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> \} $ as the postcondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> \} $ . This is shown to be logically sound by the assignment law of typical Hoare techniques . After , the variable update line defining $ <nat:2> + <var:t> * <var:e> $ as $ <var:t>$ . This statement redefines the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> \} $ as the condition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> \} $ . Honing in on the subsequent line of code contained in our code segment , we see the variable update statement \verb | <var:t> := <nat:4> + <var:t> * <var:e> ; | . This code transfers $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> \} $ toward $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> \} $ . This is ensured by the assignment inference rule from standard Hoare logic . Advancing to the following bit of code in the series of instructions , we see the statement \verb | <var:t> := <nat:4> + <var:t> * <var:e> ; | . This command moves the condition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> \} $ into $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:10> + <nat:4> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> \} $ . Paying attention to the next bit of code found in our segment of code , we see the assignment statement giving $ <nat:4> + <var:t> * <var:e> $ to $ <var:t>$ . This redefines the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:10> + <nat:4> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> \} $ into the postcondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> \} $ . Taking another step toward the subsequent statement seen in the list of instructions , the variable assignmet line assigning $ <var:t> * <var:e> $ toward $ <var:t>$ . This forwards the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> \} $ as the condition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:12> + <nat:4> * <var:c> ^ <nat:11> + <nat:2> * <var:c> ^ <nat:10> + <nat:4> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + \} $ . Following , we have the line \verb | <var:t> := <nat:2> + <var:t> * <var:e> | . This takes the precondition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:12> + <nat:4> * <var:c> ^ <nat:11> + <nat:2> * <var:c> ^ <nat:10> + <nat:4> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + \} $ to the condition $ \{ <var:e> = <var:c> \land <var:t> = <nat:2> * <var:c> ^ <nat:13> + <nat:4> * <var:c> ^ <nat:12> + <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:1> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:e> = <var:c> }} <var:t> := <nat:2> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:2> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:1> + <var:t> * <var:e> ; <var:t> := <nat:1> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:2> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <nat:4> + <var:t> * <var:e> ; <var:t> := <var:t> * <var:e> ; <var:t> := <nat:2> + <var:t> * <var:e> {{ <var:t> = <nat:2> * <var:c> ^ <nat:13> + <nat:4> * <var:c> ^ <nat:12> + <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:1> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:10> + <nat:4> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:12> + <nat:4> * <var:c> ^ <nat:11> + <nat:2> * <var:c> ^ <nat:10> + <nat:4> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:t> = <nat:2> * <var:c> ^ <nat:13> + <nat:4> * <var:c> ^ <nat:12> + <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:1> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 