\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:B1> := <var:r> ; <var:B2> := <var:B1> * <var:r> ; <var:B3> := <var:B2> * <var:r> ; <var:B4> := <var:B3> * <var:r> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:1> ; <var:B4> := <var:B4> * <nat:4> ; <var:A> := <var:B4> <var:A> := <var:A> + <var:B3> <var:A> := <var:A> + <var:B2> <var:A> := <var:A> + <var:B1> <var:A> := <var:A> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Given it to hold that $ <var:r> = <var:F> $ --- with some positive integers $ <var:F> $ --- prior to running the series of commands it holds that we see $ <var:A> = <nat:4> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> $ after code has finished . \end{theorem} \begin{proof} The course of logic for this list of instructions is given with Hoare techniques . Advancing to the subsequent command in the code segment , we have the line \verb | <var:B1> := <var:r> ; | . This statement redefines the condition $ \{ <var:r> = <var:F> \} $ to $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \} $ . Further , the variable assignmet command \verb | <var:B2> := <var:B1> * <var:r> ; | . This moves the precondition $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \} $ into the condition $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \land <var:B2> = <var:F> ^ <nat:2> \} $ . This is deduced through the assignment scheme in standard Hoare logic . Stepping through , we see the binding line \verb | <var:B3> := <var:B2> * <var:r> ; | . This moves $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \land <var:B2> = <var:F> ^ <nat:2> \} $ to the postcondition $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \land <var:B2> = <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \} $ . Considering the proceeding line in our segment of code , the variable update code \verb | <var:B4> := <var:B3> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \land <var:B2> = <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \} $ to the condition $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \land <var:B2> = <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \} $ . This is shown through the assignment inference rule defined by usual Hoare logic . Honing in on the subsequent command in the set of instructions , we have the variable update code giving $ <nat:1> $ as $ <var:B0>$ . This moves $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \land <var:B2> = <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \} $ toward the postcondition $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \land <var:B2> = <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ . This is guaranteed by the assignment scheme defined by usual Hoare reasoning . Moving on to the following bit of code contained in the series of instructions , we have the binding command \verb | <var:B1> := <var:B1> * <nat:1> ; | . This forwards the precondition $ \{ <var:r> = <var:F> \land <var:B1> = <var:F> \land <var:B2> = <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ toward the postcondition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ . This is rigorously given by the assignment scheme defined by standard Hoare techniques . Following , the variable binding code assigning $ <var:B2> * <nat:1> $ toward $ <var:B2>$ . This statement redefines $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ into the postcondition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ . This is deduced by the assignment scheme from standard Hoare techniques . Following , we have the binding code yielding $ <var:B3> * <nat:1> $ as $ <var:B3>$ . This transfers the condition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B3> = <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ as the postcondition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B3> = <nat:1> * <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ . Keeping momentum , the assignment code yielding $ <var:B4> * <nat:4> $ to $ <var:B4>$ . This line transfers $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B3> = <nat:1> * <var:F> ^ <nat:3> \land <var:B4> = <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ toward the postcondition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B3> = <nat:1> * <var:F> ^ <nat:3> \land <var:B4> = <nat:4> * <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ . This is ensured with the assignment inference rule of standard Hoare techniques . Shifting focus toward the following line contained in the code segment , we see the variable binding code assigning $ <var:B4$ into $ <var:A>$ . This takes the precondition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B3> = <nat:1> * <var:F> ^ <nat:3> \land <var:B4> = <nat:4> * <var:F> ^ <nat:4> \land <var:B0> = <nat:1> \} $ into the condition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B3> = <nat:1> * <var:F> ^ <nat:3> \land <var:B0> = <nat:1> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> \} $ . Honing in on the following command in our code segment , we have the binding code defining $ <var:A> + <var:B3$ into $ <var:A>$ . This moves $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B3> = <nat:1> * <var:F> ^ <nat:3> \land <var:B0> = <nat:1> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> \} $ toward the condition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B0> = <nat:1> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> \} $ . This is guaranteed with the assignment rule given in usual Hoare techniques . Observing the next statement seen in the program , we have the variable binding line binding $ <var:A> + <var:B2$ as $ <var:A>$ . This code takes the condition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B2> = <nat:1> * <var:F> ^ <nat:2> \land <var:B0> = <nat:1> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> \} $ into $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B0> = <nat:1> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> \} $ . This is deduced through the assignment inference rule obtained from typical Hoare logic . Focusing on the subsequent line found in the series of instructions , we have the variable update line binding $ <var:A> + <var:B1$ into $ <var:A>$ . This line advances the precondition $ \{ <var:r> = <var:F> \land <var:B1> = <nat:1> * <var:F> \land <var:B0> = <nat:1> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> \} $ to $ \{ <var:r> = <var:F> \land <var:B0> = <nat:1> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> \} $ . This is shown to be logically sound using the assignment rule obtained from standard Hoare reasoning . Considering the proceeding line of code contained in the series of commands , we see the environment update line giving $ <var:A> + <var:B0$ into $ <var:A>$ . This advances the condition $ \{ <var:r> = <var:F> \land <var:B0> = <nat:1> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> \} $ toward $ \{ <var:r> = <var:F> \land <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> \} $ . This is shown to be logically sound by the assignment scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <var:B4> : string := " <var:B4> " . Definition <def:poly> := <var:B1> := <var:r> ; <var:B2> := <var:B1> * <var:r> ; <var:B3> := <var:B2> * <var:r> ; <var:B4> := <var:B3> * <var:r> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:1> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:1> ; <var:B4> := <var:B4> * <nat:4> ; <var:A> := <var:B4> <var:A> := <var:A> + <var:B3> <var:A> := <var:A> + <var:B2> <var:A> := <var:A> + <var:B1> <var:A> := <var:A> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:r> = <var:F> }} <def:poly> {{ <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <var:F> /\ <var:B2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <var:F> /\ <var:B2> = <var:F> ^ <nat:2> /\ <var:B3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <var:F> /\ <var:B2> = <var:F> ^ <nat:2> /\ <var:B3> = <var:F> ^ <nat:3> /\ <var:B4> = <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <var:F> /\ <var:B2> = <var:F> ^ <nat:2> /\ <var:B3> = <var:F> ^ <nat:3> /\ <var:B4> = <var:F> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <nat:1> * <var:F> /\ <var:B2> = <var:F> ^ <nat:2> /\ <var:B3> = <var:F> ^ <nat:3> /\ <var:B4> = <var:F> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <nat:1> * <var:F> /\ <var:B2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:B3> = <var:F> ^ <nat:3> /\ <var:B4> = <var:F> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <nat:1> * <var:F> /\ <var:B2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:F> ^ <nat:3> /\ <var:B4> = <var:F> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <nat:1> * <var:F> /\ <var:B2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:F> ^ <nat:3> /\ <var:B4> = <nat:4> * <var:F> ^ <nat:4> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <nat:1> * <var:F> /\ <var:B2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:F> ^ <nat:3> /\ <var:B0> = <nat:1> /\ <var:A> = <nat:4> * <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <nat:1> * <var:F> /\ <var:B2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:B0> = <nat:1> /\ <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B1> = <nat:1> * <var:F> /\ <var:B0> = <nat:1> /\ <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:B0> = <nat:1> /\ <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:A> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 