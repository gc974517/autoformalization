\begin{document} \begin{theorem} We define the following code segment such that \begin{verbatim} <var:t1> := <var:y> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:3> ; <var:m> := <var:t1> <var:m> := <var:m> + <var:t0> \end{verbatim} Assuming $ <var:y> = <var:j> $ before the evaluation of this series of instructions it follows that $ <var:m> = <nat:3> * <var:j> + <nat:8> $ once set of instructions finishes . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be given using Hoare reasoning . Moving forward to the upcoming statements contained in the series of instructions , we have \begin{eqnarray} \{ <var:y> = <var:j> \} \, <var:t1> := <var:y> \, \{ <var:y> = <var:j> \land <var:t1> = <var:j> \} \\ \{ <var:y> = <var:j> \land <var:t1> = <var:j> \} \, <var:t0> := <nat:8> \, \{ <var:y> = <var:j> \land <var:t1> = <var:j> \land <var:t0> = <nat:8> \} \\ \{ <var:y> = <var:j> \land <var:t1> = <var:j> \land <var:t0> = <nat:8> \} \, <var:t1> := <var:t1> * <nat:3> \, \{ <var:y> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t0> = <nat:8> \} \\ \{ <var:y> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t0> = <nat:8> \} \, <var:m> := <var:t1\, \{ <var:y> = <var:j> \land <var:t0> = <nat:8> \land <var:m> = <nat:3> * <var:j> \} \\ \{ <var:y> = <var:j> \land <var:t0> = <nat:8> \land <var:m> = <nat:3> * <var:j> \} \, <var:m> := <var:m> + <var:t0\, \{ <var:y> = <var:j> \land <var:m> = <nat:3> * <var:j> + <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:y> = <var:j> }} <var:t1> := <var:y> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:3> ; <var:m> := <var:t1> <var:m> := <var:m> + <var:t0> {{ <var:m> = <nat:3> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:t1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:t1> = <var:j> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:t1> = <nat:3> * <var:j> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:t0> = <nat:8> /\ <var:m> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:m> = <nat:3> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 