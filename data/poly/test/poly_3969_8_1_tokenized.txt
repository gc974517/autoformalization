\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:w1> := <var:i> ; <var:w2> := <var:w1> * <var:i> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:5> ; <var:w2> := <var:w2> * <nat:2> ; <var:V> := <var:w2> <var:V> := <var:V> + <var:w1> <var:V> := <var:V> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for any positive integers $ <var:E> $ , $ <var:i> = <var:E> $ before the execution of our list of commands , it must be that we see $ <var:V> = <nat:2> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:E> \} \\ <var:w1> := <var:i> ; \\ \{ <var:i> = <var:E> \land <var:w1> = <var:E> \} \\ <var:w2> := <var:w1> * <var:i> ; \\ \{ <var:i> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \} \\ <var:w0> := <nat:7> ; \\ \{ <var:i> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w0> = <nat:7> \} \\ <var:w1> := <var:w1> * <nat:5> ; \\ \{ <var:i> = <var:E> \land <var:w1> = <nat:5> \times <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w0> = <nat:7> \} \\ <var:w2> := <var:w2> * <nat:2> ; \\ \{ <var:i> = <var:E> \land <var:w1> = <nat:5> \times <var:E> \land <var:w2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:w0> = <nat:7> \} \\ <var:V> := <var:w2> \\ \{ <var:i> = <var:E> \land <var:w1> = <nat:5> \times <var:E> \land <var:w0> = <nat:7> \land <var:V> = <nat:2> \times <var:E> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:w1> \\ \{ <var:i> = <var:E> \land <var:w0> = <nat:7> \land <var:V> = <nat:2> \times <var:E> ^ <nat:2> + <nat:5> \times <var:E> \} \\ <var:V> := <var:V> + <var:w0> \\ \{ <var:i> = <var:E> \land <var:V> = <nat:2> \times <var:E> ^ <nat:2> + <nat:5> \times <var:E> + <nat:7> \} \end{eqnarray} Continuing the execution of this code segment yields : \begin{eqnarray} \end{eqnarray} Utilizing typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w1> := <var:i> ; <var:w2> := <var:w1> * <var:i> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:5> ; <var:w2> := <var:w2> * <nat:2> ; <var:V> := <var:w2> <var:V> := <var:V> + <var:w1> <var:V> := <var:V> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:i> = <var:E> }} <def:poly> {{ <var:V> = <nat:2> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:w1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:w1> = <nat:5> * <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:w1> = <nat:5> * <var:E> /\ <var:w2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:w1> = <nat:5> * <var:E> /\ <var:w0> = <nat:7> /\ <var:V> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:w0> = <nat:7> /\ <var:V> = <nat:2> * <var:E> ^ <nat:2> + <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:V> = <nat:2> * <var:E> ^ <nat:2> + <nat:5> * <var:E> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 