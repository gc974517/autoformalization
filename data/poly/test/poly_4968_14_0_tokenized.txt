\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:4> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:k> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:k> ; <var:g2> := <var:g2> * <var:k> ; <var:g3> := <nat:8> ; <var:g3> := <var:g3> * <var:k> ; <var:g3> := <var:g3> * <var:k> ; <var:g3> := <var:g3> * <var:k> ; <var:b> := <var:g3> ; <var:b> := <var:b> + <var:g2> ; <var:b> := <var:b> + <var:g1> ; <var:b> := <var:b> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:k> = <var:I> $ ahead of interpreting our series of commands it follows that we see $ <var:b> = <nat:8> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the program can be done using standard Hoare techniques . Immediately following , the line yielding $ <nat:4> $ to $ <var:g0>$ . This statement moves $ \{ <var:k> = <var:I> \} $ toward $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \} $ . Jumping to the subsequent line of code seen in the code , we see the line \verb | <var:g1> := <nat:9> ; | . This takes the precondition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \} $ as $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \} $ . This is shown with the assignment scheme in usual Hoare techniques . Keeping momentum , we have the line binding $ <var:g1> * <var:k> $ into $ <var:g1>$ . This takes $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \} $ toward the postcondition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \} $ . Going to the next step , we see the variable binding line giving $ <nat:3> $ toward $ <var:g2>$ . This advances the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \} $ as the postcondition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \} $ . Moving on to the next step seen in our list of instructions , we see the variable assignmet code yielding $ <var:g2> * <var:k> $ as $ <var:g2>$ . This redefines $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \} $ to the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> \} $ . This is deduced by the assignment scheme obtained from typical Hoare techniques . Going forward , the command \verb | <var:g2> := <var:g2> * <var:k> ; | . This advances the precondition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> \} $ as $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ . This is given through the assignment rule given in usual Hoare reasoning . Moving forward , we have the assignment statement giving $ <nat:8> $ as $ <var:g3>$ . This statement transfers the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \} $ toward $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:g3> = <nat:8> \} $ . Taking a look at the subsequent step contained in the code segment , we have the variable update code \verb | <var:g3> := <var:g3> * <var:k> ; | . This takes the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:g3> = <nat:8> \} $ into the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:I> \} $ . This is sound through the assignment rule in usual Hoare reasoning . Going forward , the variable update code \verb | <var:g3> := <var:g3> * <var:k> ; | . This line redefines the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:I> \} $ into the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:I> ^ <nat:2> \} $ . This is given with the assignment scheme defined by standard Hoare techniques . Paying attention to the proceeding line of code contained in our set of instructions , we see the binding line defining $ <var:g3> * <var:k> $ into $ <var:g3>$ . This advances the precondition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:I> ^ <nat:2> \} $ into the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:I> ^ <nat:3> \} $ . This is deduced through the assignment scheme from standard Hoare logic . Now , we have the variable binding statement \verb | <var:b> := <var:g3> ; | . This takes the precondition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:g3> = <nat:8> \cdot <var:I> ^ <nat:3> \} $ toward $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:b> = <nat:8> \cdot <var:I> ^ <nat:3> \} $ . Advancing on , we see the environment update statement \verb | <var:b> := <var:b> + <var:g2> ; | . This redefines $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:g2> = <nat:3> \cdot <var:I> ^ <nat:2> \land <var:b> = <nat:8> \cdot <var:I> ^ <nat:3> \} $ to the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:b> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> \} $ . Honing in on the subsequent command seen in the program , we see the environment update command assigning $ <var:b> + <var:g1> $ to $ <var:b>$ . This redefines the condition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:g1> = <nat:9> \cdot <var:I> \land <var:b> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> \} $ into the postcondition $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:b> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> \} $ . This is shown by the assignment scheme given in usual Hoare techniques . Following , the environment update line \verb | <var:b> := <var:b> + <var:g0> | . This statement takes $ \{ <var:k> = <var:I> \land <var:g0> = <nat:4> \land <var:b> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> \} $ into the postcondition $ \{ <var:k> = <var:I> \land <var:b> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:4> \} $ . This is rigorously given with the assignment law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g0> := <nat:4> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:k> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:k> ; <var:g2> := <var:g2> * <var:k> ; <var:g3> := <nat:8> ; <var:g3> := <var:g3> * <var:k> ; <var:g3> := <var:g3> * <var:k> ; <var:g3> := <var:g3> * <var:k> ; <var:b> := <var:g3> ; <var:b> := <var:b> + <var:g2> ; <var:b> := <var:b> + <var:g1> ; <var:b> := <var:b> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:k> = <var:I> }} <def:poly> {{ <var:b> = <nat:8> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:g2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:g2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:g2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:g2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:g3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:g2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:g3> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:g2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:g3> = <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:g2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:g3> = <nat:8> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:g2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:b> = <nat:8> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:9> * <var:I> /\ <var:b> = <nat:8> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:g0> = <nat:4> /\ <var:b> = <nat:8> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:b> = <nat:8> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 