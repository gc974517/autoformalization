\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:o1> := <var:z> ; <var:o2> := <var:o1> * <var:z> ; <var:o3> := <var:o2> * <var:z> ; <var:o4> := <var:o3> * <var:z> ; <var:o0> := <nat:4> ; <var:o1> := <var:o1> * <nat:1> ; <var:o2> := <var:o2> * <nat:3> ; <var:o3> := <var:o3> * <nat:1> ; <var:o4> := <var:o4> * <nat:4> ; <var:H> := <var:o4> <var:H> := <var:H> + <var:o3> <var:H> := <var:H> + <var:o2> <var:H> := <var:H> + <var:o1> <var:H> := <var:H> + <var:o0> \end{verbatim} Allow for all positive integer coefficients $ <var:L> $ it to hold that $ <var:z> = <var:L> $ prior to interpreting the list of instructions it must be that we have $ <var:H> = <nat:4> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:4> $ when code segment exits . \end{theorem} \begin{proof} The proof of the list of commands is done with usual Hoare reasoning . Focusing on the proceeding bit of code contained in our set of instructions , we see the variable assignmet line defining $ <var:z> $ to $ <var:o1>$ . This advances the condition $ \{ <var:z> = <var:L> \} $ to the postcondition $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \} $ . This is deduced with the assignment inference rule obtained from Hoare logic . Considering the next piece of code in the segment of code , we have the variable assignmet command binding $ <var:o1> * <var:z> $ toward $ <var:o2>$ . This line takes $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \} $ as the condition $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \land <var:o2> = <var:L> ^ <nat:2> \} $ . This is shown by the assignment rule defined by standard Hoare reasoning . Further , the environment update code \verb | <var:o3> := <var:o2> * <var:z> ; | . This redefines the condition $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \land <var:o2> = <var:L> ^ <nat:2> \} $ to the condition $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \land <var:o2> = <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \} $ . Going forward , we see the variable update code letting $ <var:o3> * <var:z> $ as $ <var:o4>$ . This advances the condition $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \land <var:o2> = <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \} $ as the condition $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \land <var:o2> = <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \} $ . This is shown using the assignment scheme given by standard Hoare reasoning . Honing in on the proceeding bit of code in the series of instructions , we have the variable binding command giving $ <nat:4> $ toward $ <var:o0>$ . This advances the condition $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \land <var:o2> = <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \} $ to the condition $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \land <var:o2> = <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ . Advancing on , the variable binding code letting $ <var:o1> * <nat:1> $ toward $ <var:o1>$ . This forwards $ \{ <var:z> = <var:L> \land <var:o1> = <var:L> \land <var:o2> = <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ to the postcondition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ . This is shown through the assignment scheme of Hoare reasoning . Honing in on the next line of code contained in the list of instructions , the command \verb | <var:o2> := <var:o2> * <nat:3> ; | . This moves the condition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ toward $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ . Shifting focus toward the next line of code in the list of instructions , the code \verb | <var:o3> := <var:o3> * <nat:1> ; | . This command takes the precondition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o3> = <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ toward the condition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ . Taking a look at the proceeding line of code seen in our series of commands , the variable binding code binding $ <var:o4> * <nat:4> $ toward $ <var:o4>$ . This line redefines $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:L> ^ <nat:3> \land <var:o4> = <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ into the condition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:L> ^ <nat:3> \land <var:o4> = <nat:4> \cdot <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ . This is given using the assignment rule defined by Hoare logic . Now , we see the variable assignmet code \verb | <var:H> := <var:o4> | . This takes $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:L> ^ <nat:3> \land <var:o4> = <nat:4> \cdot <var:L> ^ <nat:4> \land <var:o0> = <nat:4> \} $ to $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:L> ^ <nat:3> \land <var:o0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> \} $ . This is sound through the assignment law defined in typical Hoare logic . Paying attention to the upcoming statement seen in our list of instructions , the binding command assigning $ <var:H> + <var:o3$ into $ <var:H>$ . This advances the condition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:L> ^ <nat:3> \land <var:o0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> \} $ as $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> \} $ . This is rigorously given using the assignment inference rule in usual Hoare techniques . Paying attention to the proceeding command in the list of instructions , we have the environment update line \verb | <var:H> := <var:H> + <var:o2> | . This takes the condition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o2> = <nat:3> \cdot <var:L> ^ <nat:2> \land <var:o0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> \} $ as the condition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> \} $ . Next , the variable assignmet line \verb | <var:H> := <var:H> + <var:o1> | . This statement advances the precondition $ \{ <var:z> = <var:L> \land <var:o1> = <nat:1> \cdot <var:L> \land <var:o0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> \} $ into the postcondition $ \{ <var:z> = <var:L> \land <var:o0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> \} $ . This is shown by the assignment law defined in Hoare reasoning . Jumping to the upcoming step found in the set of instructions , the code giving $ <var:H> + <var:o0$ toward $ <var:H>$ . This code redefines $ \{ <var:z> = <var:L> \land <var:o0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> \} $ into the condition $ \{ <var:z> = <var:L> \land <var:H> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:4> \} $ . This is known to be sound by the assignment inference rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <var:o4> : string := " <var:o4> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:z> = <var:L> }} <var:o1> := <var:z> ; <var:o2> := <var:o1> * <var:z> ; <var:o3> := <var:o2> * <var:z> ; <var:o4> := <var:o3> * <var:z> ; <var:o0> := <nat:4> ; <var:o1> := <var:o1> * <nat:1> ; <var:o2> := <var:o2> * <nat:3> ; <var:o3> := <var:o3> * <nat:1> ; <var:o4> := <var:o4> * <nat:4> ; <var:H> := <var:o4> <var:H> := <var:H> + <var:o3> <var:H> := <var:H> + <var:o2> <var:H> := <var:H> + <var:o1> <var:H> := <var:H> + <var:o0> {{ <var:H> = <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <var:L> /\ <var:o2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <var:L> /\ <var:o2> = <var:L> ^ <nat:2> /\ <var:o3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <var:L> /\ <var:o2> = <var:L> ^ <nat:2> /\ <var:o3> = <var:L> ^ <nat:3> /\ <var:o4> = <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <var:L> /\ <var:o2> = <var:L> ^ <nat:2> /\ <var:o3> = <var:L> ^ <nat:3> /\ <var:o4> = <var:L> ^ <nat:4> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <nat:1> * <var:L> /\ <var:o2> = <var:L> ^ <nat:2> /\ <var:o3> = <var:L> ^ <nat:3> /\ <var:o4> = <var:L> ^ <nat:4> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <nat:1> * <var:L> /\ <var:o2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:o3> = <var:L> ^ <nat:3> /\ <var:o4> = <var:L> ^ <nat:4> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <nat:1> * <var:L> /\ <var:o2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:L> ^ <nat:3> /\ <var:o4> = <var:L> ^ <nat:4> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <nat:1> * <var:L> /\ <var:o2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:L> ^ <nat:3> /\ <var:o4> = <nat:4> * <var:L> ^ <nat:4> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <nat:1> * <var:L> /\ <var:o2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:L> ^ <nat:3> /\ <var:o0> = <nat:4> /\ <var:H> = <nat:4> * <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <nat:1> * <var:L> /\ <var:o2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:o0> = <nat:4> /\ <var:H> = <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o1> = <nat:1> * <var:L> /\ <var:o0> = <nat:4> /\ <var:H> = <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:o0> = <nat:4> /\ <var:H> = <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:H> = <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 