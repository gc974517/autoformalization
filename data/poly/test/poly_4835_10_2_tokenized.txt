\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <nat:2> + <var:f> * <var:l> ; <var:f> := <var:f> * <var:l> ; <var:f> := <nat:3> + <var:f> * <var:l> ; <var:f> := <nat:1> + <var:f> * <var:l> ; <var:f> := <nat:3> + <var:f> * <var:l> ; <var:f> := <nat:3> + <var:f> * <var:l> ; <var:f> := <nat:1> + <var:f> * <var:l> ; <var:f> := <nat:4> + <var:f> * <var:l> ; <var:f> := <nat:2> + <var:f> * <var:l> \end{verbatim} Assume it to hold that $ <var:l> = <var:h> $ ahead of running our segment of code , then $ <var:f> = <nat:1> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> $ after set of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is demonstrated with Hoare reasoning . Taking another step toward the subsequent step in the program , we see the variable assignmet code letting $ <nat:1> $ to $ <var:f>$ . This statement moves the condition $ \{ <var:l> = <var:h> \} $ into the condition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \} $ . Paying attention to the next bit of code seen in our series of instructions , we see the variable update code \verb | <var:f> := <nat:2> + <var:f> * <var:l> ; | . This takes the precondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \} $ toward the postcondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> + <nat:2> \} $ . This is deduced using the assignment inference rule defined in typical Hoare techniques . Advancing to the subsequent bit of code contained in the series of commands , we have the variable assignmet command \verb | <var:f> := <var:f> * <var:l> ; | . This command advances $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> + <nat:2> \} $ into the postcondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + \} $ . This is shown to be logically sound by the assignment law from usual Hoare logic . After , we see the variable binding line \verb | <var:f> := <nat:3> + <var:f> * <var:l> ; | . This line advances the precondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + \} $ to the postcondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \} $ . This is shown through the assignment inference rule of Hoare techniques . Advancing to the next step , we have the line defining $ <nat:1> + <var:f> * <var:l> $ as $ <var:f>$ . This moves the condition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> + <nat:1> \} $ . Following , the assignment command \verb | <var:f> := <nat:3> + <var:f> * <var:l> ; | . This command redefines $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> + <nat:1> \} $ into the condition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:3> \} $ . Further , we have the environment update line \verb | <var:f> := <nat:3> + <var:f> * <var:l> ; | . This statement redefines the condition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:3> \} $ as the condition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} $ . This is rigorously given using the assignment law given by standard Hoare reasoning . Moving forward , we have the variable assignmet command binding $ <nat:1> + <var:f> * <var:l> $ toward $ <var:f>$ . This redefines the precondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:1> \} $ . This is given using the assignment inference rule from usual Hoare reasoning . Immediately after , the environment update code \verb | <var:f> := <nat:4> + <var:f> * <var:l> ; | . This command advances the condition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:1> \} $ to the postcondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:8> + <nat:2> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:4> \} $ . Advancing to the next step , we see the command letting $ <nat:2> + <var:f> * <var:l$ as $ <var:f>$ . This line forwards the precondition $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:8> + <nat:2> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:4> \} $ to $ \{ <var:l> = <var:h> \land <var:f> = <nat:1> \cdot <var:h> ^ <nat:9> + <nat:2> \cdot <var:h> ^ <nat:8> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:1> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> \} $ . This is given through the assignment inference rule found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:l> = <var:h> }} <var:f> := <nat:1> ; <var:f> := <nat:2> + <var:f> * <var:l> ; <var:f> := <var:f> * <var:l> ; <var:f> := <nat:3> + <var:f> * <var:l> ; <var:f> := <nat:1> + <var:f> * <var:l> ; <var:f> := <nat:3> + <var:f> * <var:l> ; <var:f> := <nat:3> + <var:f> * <var:l> ; <var:f> := <nat:1> + <var:f> * <var:l> ; <var:f> := <nat:4> + <var:f> * <var:l> ; <var:f> := <nat:2> + <var:f> * <var:l> {{ <var:f> = <nat:1> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:1> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 