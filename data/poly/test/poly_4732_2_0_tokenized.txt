\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:2> ; <var:H> := <var:F0> \end{verbatim} Assuming that we have $ <var:B> = <var:r> $ ahead of the evaluation of the code segment then $ <var:H> = <nat:2> $ . \end{theorem} \begin{proof} The proof of our code segment can be shown using standard Hoare logic . Further , \begin{verbatim} { <var:B> = <var:r> } <var:F0> := <nat:2> { <var:B> = <var:r> \land <var:F0> = <nat:2> } \end{verbatim} Immediately after , \begin{verbatim} { <var:B> = <var:r> } <var:F0> := <nat:2> { <var:B> = <var:r> \land <var:F0> = <nat:2> } \end{verbatim} This is shown by the assignment scheme defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:B> = <var:r> }} <var:F0> := <nat:2> ; <var:H> := <var:F0> {{ <var:H> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:H> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 