\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:8> ; <var:H1> := <nat:3> ; <var:H1> := <var:H1> * <var:d> ; <var:w> := <var:H1> ; <var:w> := <var:w> + <var:H0> \end{verbatim} Allowing it to hold that $ <var:d> = <var:C> $ before the evaluation of the code segment it follows that we have $ <var:w> = <nat:3> \times <var:C> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be done by the below decorated segment of code . \begin{eqnarray} \{ <var:d> = <var:C> \} \\ <var:H0> := <nat:8> ; \\ \{ <var:d> = <var:C> \land <var:H0> = <nat:8> \} \\ <var:H1> := <nat:3> ; \\ \{ <var:d> = <var:C> \land <var:H0> = <nat:8> \land <var:H1> = <nat:3> \} \\ <var:H1> := <var:H1> * <var:d> ; \\ \{ <var:d> = <var:C> \land <var:H0> = <nat:8> \land <var:H1> = <nat:3> \times <var:C> \} \\ <var:w> := <var:H1> ; \\ \{ <var:d> = <var:C> \land <var:H0> = <nat:8> \land <var:w> = <nat:3> \times <var:C> \} \\ <var:w> := <var:w> + <var:H0> \\ \{ <var:d> = <var:C> \land <var:w> = <nat:3> \times <var:C> + <nat:8> \} \end{eqnarray} Applying typical Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:d> = <var:C> }} <var:H0> := <nat:8> ; <var:H1> := <nat:3> ; <var:H1> := <var:H1> * <var:d> ; <var:w> := <var:H1> ; <var:w> := <var:w> + <var:H0> {{ <var:w> = <nat:3> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:H0> = <nat:8> /\ <var:H1> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:H0> = <nat:8> /\ <var:w> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:w> = <nat:3> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 