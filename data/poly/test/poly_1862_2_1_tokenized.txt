\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:9> ; <var:a> := <var:A0> \end{verbatim} Allow that we have $ <var:F> = <var:W> $ ( for any positive numbers $ <var:W> $ ) prior to interpreting our list of instructions it holds that $ <var:a> = <nat:9> $ when set of instructions exits . \end{theorem} \begin{proof} Observe that this decorated list of commands . \begin{eqnarray} \{ <var:F> = <var:W> \} \\ <var:A0> := <nat:9> ; \\ \{ <var:F> = <var:W> \land <var:A0> = <nat:9> \} \\ <var:a> := <var:A0> \\ \{ <var:F> = <var:W> \land <var:a> = <nat:9> \} \end{eqnarray} Applying Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:F> = <var:W> }} <var:A0> := <nat:9> ; <var:a> := <var:A0> {{ <var:a> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:a> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 