\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:4> ; <var:g> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:z> = <var:J> $ ahead of evaluating our list of commands it follows that we have $ <var:g> = <nat:4> $ when list of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:J> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:z> = <var:J> \land <var:b0> = <nat:4> \} \\ <var:g> := <var:b0> \\ \{ <var:z> = <var:J> \land <var:g> = <nat:4> \} \end{eqnarray} The application of usual Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:g> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <def:poly> {{ <var:g> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:g> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 