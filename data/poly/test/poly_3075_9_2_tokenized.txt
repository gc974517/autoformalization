\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g> := <nat:3> ; <var:g> := <nat:3> + <var:g> * <var:I> ; <var:g> := <nat:1> + <var:g> * <var:I> ; <var:g> := <nat:1> + <var:g> * <var:I> ; <var:g> := <nat:3> + <var:g> * <var:I> ; <var:g> := <nat:1> + <var:g> * <var:I> ; <var:g> := <var:g> * <var:I> ; <var:g> := <nat:2> + <var:g> * <var:I> ; <var:g> := <nat:3> + <var:g> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Allowing ( given any integers $ <var:o> $ ) it to be that $ <var:I> = <var:o> $ ahead of executing our code segment it holds that $ <var:g> = <nat:3> \cdot <var:o> ^ <nat:8> + <nat:3> \cdot <var:o> ^ <nat:7> + <nat:1> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:3> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> + <nat:3> $ when set of commands has finished . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is accomplished with standard Hoare logic . Moving onward , we have the assignment statement letting $ <nat:3> $ toward $ <var:g>$ . This forwards the precondition $ \{ <var:I> = <var:o> \} $ as the condition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \} $ . Immediately following , we have the command \verb | <var:g> := <nat:3> + <var:g> * <var:I> ; | . This forwards the condition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \} $ into the condition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> + <nat:3> \} $ . This is guaranteed with the assignment law defined by Hoare techniques . Advancing , the variable update command assigning $ <nat:1> + <var:g> * <var:I> $ to $ <var:g>$ . This redefines the condition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> + <nat:3> \} $ into the condition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:1> \} $ . Moving on to the next step , we see the binding line defining $ <nat:1> + <var:g> * <var:I> $ into $ <var:g>$ . This transfers $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:1> \} $ into $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + <nat:1> \} $ . This is known to be sound with the assignment inference rule obtained from usual Hoare techniques . Focusing on the proceeding statement seen in the list of commands , we have the variable update code defining $ <nat:3> + <var:g> * <var:I> $ as $ <var:g>$ . This takes $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + <nat:1> \} $ as the condition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + <nat:3> \} $ . Shifting focus toward the proceeding step seen in the series of commands , we have the environment update command \verb | <var:g> := <nat:1> + <var:g> * <var:I> ; | . This command forwards $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + <nat:3> \} $ toward the postcondition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:5> + <nat:3> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:1> \} $ . This is shown using the assignment inference rule given by standard Hoare reasoning . Looking at the proceeding bit of code in the series of instructions , the variable assignmet command giving $ <var:g> * <var:I> $ as $ <var:g>$ . This transfers the precondition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:5> + <nat:3> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:1> \} $ to the condition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:6> + <nat:3> \times <var:o> ^ <nat:5> + <nat:1> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + \} $ . Immediately following , we have the assignment statement \verb | <var:g> := <nat:2> + <var:g> * <var:I> ; | . This transfers the precondition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:6> + <nat:3> \times <var:o> ^ <nat:5> + <nat:1> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + \} $ into the postcondition $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:7> + <nat:3> \times <var:o> ^ <nat:6> + <nat:1> \times <var:o> ^ <nat:5> + <nat:1> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:2> \} $ . This is rigorously given by the assignment scheme of standard Hoare reasoning . Looking at the proceeding command found in our set of commands , we see the binding statement \verb | <var:g> := <nat:3> + <var:g> * <var:I> | . This command redefines $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:7> + <nat:3> \times <var:o> ^ <nat:6> + <nat:1> \times <var:o> ^ <nat:5> + <nat:1> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:2> \} $ into $ \{ <var:I> = <var:o> \land <var:g> = <nat:3> \times <var:o> ^ <nat:8> + <nat:3> \times <var:o> ^ <nat:7> + <nat:1> \times <var:o> ^ <nat:6> + <nat:1> \times <var:o> ^ <nat:5> + <nat:3> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> + <nat:3> \} $ . This is shown to be logically sound by the assignment scheme given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:3> ; <var:g> := <nat:3> + <var:g> * <var:I> ; <var:g> := <nat:1> + <var:g> * <var:I> ; <var:g> := <nat:1> + <var:g> * <var:I> ; <var:g> := <nat:3> + <var:g> * <var:I> ; <var:g> := <nat:1> + <var:g> * <var:I> ; <var:g> := <var:g> * <var:I> ; <var:g> := <nat:2> + <var:g> * <var:I> ; <var:g> := <nat:3> + <var:g> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:I> = <var:o> }} <def:poly> {{ <var:g> = <nat:3> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:g> = <nat:3> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 