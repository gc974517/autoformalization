\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:x> ; <var:Q2> := <var:Q1> * <var:x> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:2> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:n> := <var:Q2> <var:n> := <var:n> + <var:Q1> <var:n> := <var:n> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given all $ <var:J> \in \mathbb{Z}^+ $ ) that we have $ <var:x> = <var:J> $ ahead of running the set of instructions it holds that we have $ <var:n> = <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:7> $ after code segment has finished . \end{theorem} \begin{proof} The proof of the code can be given through Hoare reasoning . Going forward , we have \begin{eqnarray} \{ <var:x> = <var:J> \} \, <var:Q1> := <var:x> \, \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \} \\ \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \} \, <var:Q2> := <var:Q1> * <var:x> \, \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \} \end{eqnarray} Stepping forward , we have \begin{eqnarray} \{ <var:x> = <var:J> \} \, <var:Q1> := <var:x> \, \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \} \\ \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \} \, <var:Q2> := <var:Q1> * <var:x> \, \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \} \\ \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \} \, <var:Q0> := <nat:7> \, \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q0> = <nat:7> \} \\ \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q0> = <nat:7> \} \, <var:Q1> := <var:Q1> * <nat:2> \, \{ <var:x> = <var:J> \land <var:Q1> = <nat:2> * <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q0> = <nat:7> \} \\ \{ <var:x> = <var:J> \land <var:Q1> = <nat:2> * <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q0> = <nat:7> \} \, <var:Q2> := <var:Q2> * <nat:4> \, \{ <var:x> = <var:J> \land <var:Q1> = <nat:2> * <var:J> \land <var:Q2> = <nat:4> * <var:J> ^ <nat:2> \land <var:Q0> = <nat:7> \} \end{eqnarray} Looking at the next command seen in our set of commands , we have \begin{eqnarray} \{ <var:x> = <var:J> \} \, <var:Q1> := <var:x> \, \{ <var:x> = <var:J> \land <var:Q1> = <var:J> \} \end{eqnarray} This is shown to be logically sound with the inference rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q1> := <var:x> ; <var:Q2> := <var:Q1> * <var:x> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:2> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:n> := <var:Q2> <var:n> := <var:n> + <var:Q1> <var:n> := <var:n> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:x> = <var:J> }} <def:poly> {{ <var:n> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:Q1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:Q1> = <nat:2> * <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:Q1> = <nat:2> * <var:J> /\ <var:Q2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:Q1> = <nat:2> * <var:J> /\ <var:Q0> = <nat:7> /\ <var:n> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:Q0> = <nat:7> /\ <var:n> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:n> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 