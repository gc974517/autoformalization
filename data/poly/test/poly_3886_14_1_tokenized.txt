\begin{document} \begin{theorem} Consider the following list of commands : \begin{verbatim} <var:G1> := <var:E> ; <var:G2> := <var:G1> * <var:E> ; <var:G3> := <var:G2> * <var:E> ; <var:G4> := <var:G3> * <var:E> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:3> ; <var:G2> := <var:G2> * <nat:4> ; <var:G3> := <var:G3> * <nat:1> ; <var:G4> := <var:G4> * <nat:1> ; <var:v> := <var:G4> <var:v> := <var:v> + <var:G3> <var:v> := <var:v> + <var:G2> <var:v> := <var:v> + <var:G1> <var:v> := <var:v> + <var:G0> \end{verbatim} Allow $ <var:E> = <var:x> $ before the evaluation of the code segment , it holds that we have $ <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:x> \} \\ <var:G1> := <var:E> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <var:x> \} \\ <var:G2> := <var:G1> * <var:E> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <var:x> \land <var:G2> = <var:x> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:E> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <var:x> \land <var:G2> = <var:x> ^ <nat:2> \land <var:G3> = <var:x> ^ <nat:3> \} \\ <var:G4> := <var:G3> * <var:E> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <var:x> \land <var:G2> = <var:x> ^ <nat:2> \land <var:G3> = <var:x> ^ <nat:3> \land <var:G4> = <var:x> ^ <nat:4> \} \\ <var:G0> := <nat:4> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <var:x> \land <var:G2> = <var:x> ^ <nat:2> \land <var:G3> = <var:x> ^ <nat:3> \land <var:G4> = <var:x> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:G1> := <var:G1> * <nat:3> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <nat:3> \times <var:x> \land <var:G2> = <var:x> ^ <nat:2> \land <var:G3> = <var:x> ^ <nat:3> \land <var:G4> = <var:x> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:G2> := <var:G2> * <nat:4> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <nat:3> \times <var:x> \land <var:G2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:G3> = <var:x> ^ <nat:3> \land <var:G4> = <var:x> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:G3> := <var:G3> * <nat:1> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <nat:3> \times <var:x> \land <var:G2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:x> ^ <nat:3> \land <var:G4> = <var:x> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:G4> := <var:G4> * <nat:1> ; \\ \{ <var:E> = <var:x> \land <var:G1> = <nat:3> \times <var:x> \land <var:G2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:x> ^ <nat:3> \land <var:G4> = <nat:1> \times <var:x> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:v> := <var:G4> \\ \{ <var:E> = <var:x> \land <var:G1> = <nat:3> \times <var:x> \land <var:G2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:x> ^ <nat:3> \land <var:G0> = <nat:4> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> \} \\ <var:v> := <var:v> + <var:G3> \\ \{ <var:E> = <var:x> \land <var:G1> = <nat:3> \times <var:x> \land <var:G2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:G0> = <nat:4> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:G2> \\ \{ <var:E> = <var:x> \land <var:G1> = <nat:3> \times <var:x> \land <var:G0> = <nat:4> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:G1> \\ \{ <var:E> = <var:x> \land <var:G0> = <nat:4> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> \} \\ <var:v> := <var:v> + <var:G0> \\ \{ <var:E> = <var:x> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:4> \} \end{eqnarray} The application of standard Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:E> = <var:x> }} <var:G1> := <var:E> ; <var:G2> := <var:G1> * <var:E> ; <var:G3> := <var:G2> * <var:E> ; <var:G4> := <var:G3> * <var:E> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:3> ; <var:G2> := <var:G2> * <nat:4> ; <var:G3> := <var:G3> * <nat:1> ; <var:G4> := <var:G4> * <nat:1> ; <var:v> := <var:G4> <var:v> := <var:v> + <var:G3> <var:v> := <var:v> + <var:G2> <var:v> := <var:v> + <var:G1> <var:v> := <var:v> + <var:G0> {{ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <var:x> /\ <var:G2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <var:x> /\ <var:G2> = <var:x> ^ <nat:2> /\ <var:G3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <var:x> /\ <var:G2> = <var:x> ^ <nat:2> /\ <var:G3> = <var:x> ^ <nat:3> /\ <var:G4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <var:x> /\ <var:G2> = <var:x> ^ <nat:2> /\ <var:G3> = <var:x> ^ <nat:3> /\ <var:G4> = <var:x> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <nat:3> * <var:x> /\ <var:G2> = <var:x> ^ <nat:2> /\ <var:G3> = <var:x> ^ <nat:3> /\ <var:G4> = <var:x> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <nat:3> * <var:x> /\ <var:G2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:G3> = <var:x> ^ <nat:3> /\ <var:G4> = <var:x> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <nat:3> * <var:x> /\ <var:G2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:G4> = <var:x> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <nat:3> * <var:x> /\ <var:G2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:G4> = <nat:1> * <var:x> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <nat:3> * <var:x> /\ <var:G2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:G0> = <nat:4> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <nat:3> * <var:x> /\ <var:G2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:G0> = <nat:4> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G1> = <nat:3> * <var:x> /\ <var:G0> = <nat:4> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:G0> = <nat:4> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 