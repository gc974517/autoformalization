\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:V> := <nat:1> ; <var:V> := <nat:4> + <var:V> * <var:e> ; <var:V> := <nat:2> + <var:V> * <var:e> ; <var:V> := <nat:2> + <var:V> * <var:e> ; <var:V> := <nat:3> + <var:V> * <var:e> ; <var:V> := <nat:3> + <var:V> * <var:e> ; <var:V> := <nat:4> + <var:V> * <var:e> ; <var:V> := <nat:1> + <var:V> * <var:e> \end{verbatim} Assuming $ <var:e> = <var:o> $ before running our series of commands , it must be that $ <var:V> = <nat:1> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:1> $ once set of commands has executed . \end{theorem} \begin{proof} The proof of this code segment can be done using Hoare techniques . Immediately after , we have \begin{verbatim} { <var:e> = <var:o> } <var:V> := <nat:1> { <var:e> = <var:o> \land <var:V> = <nat:1> } { <var:e> = <var:o> \land <var:V> = <nat:1> } <var:V> := <nat:4> + <var:V> * <var:e> { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> + <nat:4> } { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> + <nat:4> } <var:V> := <nat:2> + <var:V> * <var:e> { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> + <nat:2> } { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> + <nat:2> } <var:V> := <nat:2> + <var:V> * <var:e> { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:3> + <nat:4> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:2> } { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:3> + <nat:4> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:2> } <var:V> := <nat:3> + <var:V> * <var:e> { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:4> + <nat:4> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:3> } { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:4> + <nat:4> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:3> } <var:V> := <nat:3> + <var:V> * <var:e> { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:5> + <nat:4> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:3> } { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:5> + <nat:4> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:3> } <var:V> := <nat:4> + <var:V> * <var:e> { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:6> + <nat:4> \times <var:o> ^ <nat:5> + <nat:2> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:4> } { <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:6> + <nat:4> \times <var:o> ^ <nat:5> + <nat:2> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:4> } <var:V> := <nat:1> + <var:V> * <var:e{ <var:e> = <var:o> \land <var:V> = <nat:1> \times <var:o> ^ <nat:7> + <nat:4> \times <var:o> ^ <nat:6> + <nat:2> \times <var:o> ^ <nat:5> + <nat:2> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:e> = <var:o> }} <var:V> := <nat:1> ; <var:V> := <nat:4> + <var:V> * <var:e> ; <var:V> := <nat:2> + <var:V> * <var:e> ; <var:V> := <nat:2> + <var:V> * <var:e> ; <var:V> := <nat:3> + <var:V> * <var:e> ; <var:V> := <nat:3> + <var:V> * <var:e> ; <var:V> := <nat:4> + <var:V> * <var:e> ; <var:V> := <nat:1> + <var:V> * <var:e> {{ <var:V> = <nat:1> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:V> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:V> = <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:V> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:V> = <nat:1> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:V> = <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:V> = <nat:1> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:V> = <nat:1> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:V> = <nat:1> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 