\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} : \begin{verbatim} <var:M1> := <var:Q> ; <var:M2> := <var:M1> * <var:Q> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:6> ; <var:M2> := <var:M2> * <nat:5> ; <var:P> := <var:M2> <var:P> := <var:P> + <var:M1> <var:P> := <var:P> + <var:M0> \end{verbatim} Given that we have $ <var:Q> = <var:Y> $ prior to evaluating our list of instructions it follows that we have $ <var:P> = <nat:5> \times <var:Y> ^ <nat:2> + <nat:6> \times <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this set of instructions is shown using Hoare techniques . Taking another step toward the upcoming command found in the code , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:Y> \} & <var:M1> := <var:Q> & \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \} \end{tabular} This is deduced through the rule defined in standard Hoare reasoning . Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:Y> \} & <var:M1> := <var:Q> & \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \} \\ \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \} & <var:M2> := <var:M1> * <var:Q> & \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \} \\ \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \} & <var:M0> := <nat:4> & \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \land <var:M0> = <nat:4> \} \\ \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \land <var:M0> = <nat:4> \} & <var:M1> := <var:M1> * <nat:6> & \{ <var:Q> = <var:Y> \land <var:M1> = <nat:6> * <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \land <var:M0> = <nat:4> \} \\ \{ <var:Q> = <var:Y> \land <var:M1> = <nat:6> * <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \land <var:M0> = <nat:4> \} & <var:M2> := <var:M2> * <nat:5> & \{ <var:Q> = <var:Y> \land <var:M1> = <nat:6> * <var:Y> \land <var:M2> = <nat:5> * <var:Y> ^ <nat:2> \land <var:M0> = <nat:4> \} \end{tabular} This is sound with the variable update inference rule in typical Hoare techniques . Immediately after , \[ \begin{tabular} {rcl} \{ <var:Q> = <var:Y> \} & <var:M1> := <var:Q> & \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \} \\ \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \} & <var:M2> := <var:M1> * <var:Q> & \{ <var:Q> = <var:Y> \land <var:M1> = <var:Y> \land <var:M2> = <var:Y> ^ <nat:2> \} \end{tabular} This is shown to be logically sound through the binding law in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:Q> = <var:Y> }} <var:M1> := <var:Q> ; <var:M2> := <var:M1> * <var:Q> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:6> ; <var:M2> := <var:M2> * <nat:5> ; <var:P> := <var:M2> <var:P> := <var:P> + <var:M1> <var:P> := <var:P> + <var:M0> {{ <var:P> = <nat:5> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:M1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:M1> = <var:Y> /\ <var:M2> = <var:Y> ^ <nat:2> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:M1> = <nat:6> * <var:Y> /\ <var:M2> = <var:Y> ^ <nat:2> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:M1> = <nat:6> * <var:Y> /\ <var:M2> = <nat:5> * <var:Y> ^ <nat:2> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:M1> = <nat:6> * <var:Y> /\ <var:M0> = <nat:4> /\ <var:P> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:M0> = <nat:4> /\ <var:P> = <nat:5> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Y> /\ <var:P> = <nat:5> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 