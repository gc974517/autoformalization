\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:w1> := <var:E> ; <var:w2> := <var:w1> * <var:E> ; <var:w0> := <nat:4> ; <var:w1> := <var:w1> * <nat:1> ; <var:w2> := <var:w2> * <nat:7> ; <var:c> := <var:w2> <var:c> := <var:c> + <var:w1> <var:c> := <var:c> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:E> = <var:X> $ --- given any $ <var:X> \in \mathbb{N} $ --- prior to running the set of instructions it holds that $ <var:c> = <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> $ after program finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:X> \} \\ <var:w1> := <var:E> ; \\ \{ <var:E> = <var:X> \land <var:w1> = <var:X> \} \\ <var:w2> := <var:w1> * <var:E> ; \\ \{ <var:E> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \} \\ <var:w0> := <nat:4> ; \\ \{ <var:E> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w0> = <nat:4> \} \\ <var:w1> := <var:w1> * <nat:1> ; \\ \{ <var:E> = <var:X> \land <var:w1> = <nat:1> \cdot <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w0> = <nat:4> \} \\ <var:w2> := <var:w2> * <nat:7> ; \\ \{ <var:E> = <var:X> \land <var:w1> = <nat:1> \cdot <var:X> \land <var:w2> = <nat:7> \cdot <var:X> ^ <nat:2> \land <var:w0> = <nat:4> \} \\ <var:c> := <var:w2> \\ \{ <var:E> = <var:X> \land <var:w1> = <nat:1> \cdot <var:X> \land <var:w0> = <nat:4> \land <var:c> = <nat:7> \cdot <var:X> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:w1> \\ \{ <var:E> = <var:X> \land <var:w0> = <nat:4> \land <var:c> = <nat:7> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> \} \\ <var:c> := <var:c> + <var:w0> \\ \{ <var:E> = <var:X> \land <var:c> = <nat:7> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> \} \end{eqnarray} Furthering interpreting the program gives : \begin{eqnarray} \end{eqnarray} The application of Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w1> := <var:E> ; <var:w2> := <var:w1> * <var:E> ; <var:w0> := <nat:4> ; <var:w1> := <var:w1> * <nat:1> ; <var:w2> := <var:w2> * <nat:7> ; <var:c> := <var:w2> <var:c> := <var:c> + <var:w1> <var:c> := <var:c> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:E> = <var:X> }} <def:poly> {{ <var:c> = <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:X> /\ <var:w1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:X> /\ <var:w1> = <var:X> /\ <var:w2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:X> /\ <var:w1> = <var:X> /\ <var:w2> = <var:X> ^ <nat:2> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:X> /\ <var:w1> = <nat:1> * <var:X> /\ <var:w2> = <var:X> ^ <nat:2> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:X> /\ <var:w1> = <nat:1> * <var:X> /\ <var:w2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:X> /\ <var:w1> = <nat:1> * <var:X> /\ <var:w0> = <nat:4> /\ <var:c> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:X> /\ <var:w0> = <nat:4> /\ <var:c> = <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:X> /\ <var:c> = <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 