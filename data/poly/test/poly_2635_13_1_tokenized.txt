\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:g1> := <var:E> ; <var:g2> := <var:g1> * <var:E> ; <var:g3> := <var:g2> * <var:E> ; <var:g4> := <var:g3> * <var:E> ; <var:g5> := <var:g4> * <var:E> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:2> ; <var:g4> := <var:g4> * <nat:9> ; <var:g5> := <var:g5> * <nat:2> ; <var:A> := <var:g5> <var:A> := <var:A> + <var:g4> <var:A> := <var:A> + <var:g1> <var:A> := <var:A> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:E> = <var:Z> $ before evaluating our list of instructions , it follows that we have $ <var:A> = <nat:2> \times <var:Z> ^ <nat:5> + <nat:9> \times <var:Z> ^ <nat:4> + <nat:2> \times <var:Z> + <nat:1> $ when series of instructions terminates . \end{theorem} \begin{proof} The course of logic for this code segment is evident using typical Hoare reasoning . Moving on to the proceeding step contained in the list of commands , we see the variable binding command yielding $ <var:E> $ into $ <var:g1>$ . This statement advances $ \{ <var:E> = <var:Z> \} $ into the postcondition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \} $ . This is guaranteed using the assignment rule found in standard Hoare reasoning . Moving on , we have the variable update statement giving $ <var:g1> * <var:E> $ as $ <var:g2>$ . This code redefines the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \} $ into the postcondition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \} $ . This is known to be sound by the assignment rule given in Hoare techniques . Stepping through , we see the assignment command \verb | <var:g3> := <var:g2> * <var:E> ; | . This statement moves $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \} $ to the postcondition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \} $ . Next , we have the assignment line defining $ <var:g3> * <var:E> $ to $ <var:g4>$ . This advances the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \} $ to the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <var:Z> ^ <nat:4> \} $ . This is ensured using the assignment rule of usual Hoare logic . Looking at the upcoming line found in the series of instructions , the binding command \verb | <var:g5> := <var:g4> * <var:E> ; | . This command advances the precondition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <var:Z> ^ <nat:4> \} $ to $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <var:Z> ^ <nat:4> \land <var:g5> = <var:Z> ^ <nat:5> \} $ . This is known to be sound with the assignment law in standard Hoare techniques . Keeping momentum , we have the command letting $ <nat:1> $ into $ <var:g0>$ . This transfers the precondition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <var:Z> ^ <nat:4> \land <var:g5> = <var:Z> ^ <nat:5> \} $ toward the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <var:Z> ^ <nat:4> \land <var:g5> = <var:Z> ^ <nat:5> \land <var:g0> = <nat:1> \} $ . This is given by the assignment scheme given by usual Hoare techniques . Following , the binding statement yielding $ <var:g1> * <nat:2> $ toward $ <var:g1>$ . This transfers the precondition $ \{ <var:E> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <var:Z> ^ <nat:4> \land <var:g5> = <var:Z> ^ <nat:5> \land <var:g0> = <nat:1> \} $ toward the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <var:Z> ^ <nat:4> \land <var:g5> = <var:Z> ^ <nat:5> \land <var:g0> = <nat:1> \} $ . Focusing on the next line of code seen in the list of commands , we have the variable assignmet code \verb | <var:g4> := <var:g4> * <nat:9> ; | . This code redefines the precondition $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <var:Z> ^ <nat:4> \land <var:g5> = <var:Z> ^ <nat:5> \land <var:g0> = <nat:1> \} $ to $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <nat:9> \cdot <var:Z> ^ <nat:4> \land <var:g5> = <var:Z> ^ <nat:5> \land <var:g0> = <nat:1> \} $ . This is ensured through the assignment scheme found in typical Hoare techniques . Paying attention to the proceeding step found in our series of commands , the variable binding command defining $ <var:g5> * <nat:2> $ as $ <var:g5>$ . This takes the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <nat:9> \cdot <var:Z> ^ <nat:4> \land <var:g5> = <var:Z> ^ <nat:5> \land <var:g0> = <nat:1> \} $ into the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <nat:9> \cdot <var:Z> ^ <nat:4> \land <var:g5> = <nat:2> \cdot <var:Z> ^ <nat:5> \land <var:g0> = <nat:1> \} $ . This is ensured by the assignment scheme obtained from Hoare logic . Stepping forward , the assignment code yielding $ <var:g5$ toward $ <var:A>$ . This redefines the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <nat:9> \cdot <var:Z> ^ <nat:4> \land <var:g5> = <nat:2> \cdot <var:Z> ^ <nat:5> \land <var:g0> = <nat:1> \} $ into the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <nat:9> \cdot <var:Z> ^ <nat:4> \land <var:g0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:Z> ^ <nat:5> \} $ . Moving on to the upcoming piece of code seen in the list of commands , the code assigning $ <var:A> + <var:g4$ into $ <var:A>$ . This forwards the condition $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g4> = <nat:9> \cdot <var:Z> ^ <nat:4> \land <var:g0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:Z> ^ <nat:5> \} $ as $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:9> \cdot <var:Z> ^ <nat:4> \} $ . This is deduced by the assignment rule of usual Hoare techniques . Considering the following line contained in the program , the environment update statement binding $ <var:A> + <var:g1$ as $ <var:A>$ . This advances the precondition $ \{ <var:E> = <var:Z> \land <var:g1> = <nat:2> \cdot <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:9> \cdot <var:Z> ^ <nat:4> \} $ to the condition $ \{ <var:E> = <var:Z> \land <var:g0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:9> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> \} $ . This is known to be sound with the assignment inference rule in Hoare reasoning . Keeping momentum , the variable update statement \verb | <var:A> := <var:A> + <var:g0> | . This advances the condition $ \{ <var:E> = <var:Z> \land <var:g0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:9> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> \} $ as the postcondition $ \{ <var:E> = <var:Z> \land <var:A> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:9> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Definition <var:g5> : string := " <var:g5> " . Definition <def:poly> := <var:g1> := <var:E> ; <var:g2> := <var:g1> * <var:E> ; <var:g3> := <var:g2> * <var:E> ; <var:g4> := <var:g3> * <var:E> ; <var:g5> := <var:g4> * <var:E> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:2> ; <var:g4> := <var:g4> * <nat:9> ; <var:g5> := <var:g5> * <nat:2> ; <var:A> := <var:g5> <var:A> := <var:A> + <var:g4> <var:A> := <var:A> + <var:g1> <var:A> := <var:A> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:E> = <var:Z> }} <def:poly> {{ <var:A> = <nat:2> * <var:Z> ^ <nat:5> + <nat:9> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g4> = <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g4> = <var:Z> ^ <nat:4> /\ <var:g5> = <var:Z> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g4> = <var:Z> ^ <nat:4> /\ <var:g5> = <var:Z> ^ <nat:5> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <nat:2> * <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g4> = <var:Z> ^ <nat:4> /\ <var:g5> = <var:Z> ^ <nat:5> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <nat:2> * <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g4> = <nat:9> * <var:Z> ^ <nat:4> /\ <var:g5> = <var:Z> ^ <nat:5> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <nat:2> * <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g4> = <nat:9> * <var:Z> ^ <nat:4> /\ <var:g5> = <nat:2> * <var:Z> ^ <nat:5> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <nat:2> * <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g4> = <nat:9> * <var:Z> ^ <nat:4> /\ <var:g0> = <nat:1> /\ <var:A> = <nat:2> * <var:Z> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g1> = <nat:2> * <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g0> = <nat:1> /\ <var:A> = <nat:2> * <var:Z> ^ <nat:5> + <nat:9> * <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:g0> = <nat:1> /\ <var:A> = <nat:2> * <var:Z> ^ <nat:5> + <nat:9> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:A> = <nat:2> * <var:Z> ^ <nat:5> + <nat:9> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 