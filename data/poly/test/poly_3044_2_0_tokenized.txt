\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:8> ; <var:s> := <var:A0> \end{verbatim} Given it to be that $ <var:b> = <var:q> $ prior to interpreting this series of instructions , it holds that we see $ <var:s> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:q> \} \\ <var:A0> := <nat:8> ; \\ \{ <var:b> = <var:q> \land <var:A0> = <nat:8> \} \\ <var:s> := <var:A0> \\ \{ <var:b> = <var:q> \land <var:s> = <nat:8> \} \end{eqnarray} Applying usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:b> = <var:q> }} <var:A0> := <nat:8> ; <var:s> := <var:A0> {{ <var:s> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:s> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 