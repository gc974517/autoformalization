\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:N> ; <var:K2> := <var:K1> * <var:N> ; <var:K3> := <var:K2> * <var:N> ; <var:K4> := <var:K3> * <var:N> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:3> ; <var:K2> := <var:K2> * <nat:9> ; <var:K3> := <var:K3> * <nat:8> ; <var:K4> := <var:K4> * <nat:7> ; <var:A> := <var:K4> <var:A> := <var:A> + <var:K3> <var:A> := <var:A> + <var:K2> <var:A> := <var:A> + <var:K1> <var:A> := <var:A> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Assume it to be that $ <var:N> = <var:B> $ before the evaluation of this code segment then $ <var:A> = <nat:7> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:7> $ when series of commands finishes . \end{theorem} \begin{proof} Notice the following decorated code segment . \begin{eqnarray} \{ <var:N> = <var:B> \} \\ <var:K1> := <var:N> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <var:B> \} \\ <var:K2> := <var:K1> * <var:N> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \} \\ <var:K3> := <var:K2> * <var:N> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \} \\ <var:K4> := <var:K3> * <var:N> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K4> = <var:B> ^ <nat:4> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K4> = <var:B> ^ <nat:4> \land <var:K0> = <nat:7> \} \\ <var:K1> := <var:K1> * <nat:3> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <nat:3> \times <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K4> = <var:B> ^ <nat:4> \land <var:K0> = <nat:7> \} \\ <var:K2> := <var:K2> * <nat:9> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <nat:3> \times <var:B> \land <var:K2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K4> = <var:B> ^ <nat:4> \land <var:K0> = <nat:7> \} \\ <var:K3> := <var:K3> * <nat:8> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <nat:3> \times <var:B> \land <var:K2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:K3> = <nat:8> \times <var:B> ^ <nat:3> \land <var:K4> = <var:B> ^ <nat:4> \land <var:K0> = <nat:7> \} \\ <var:K4> := <var:K4> * <nat:7> ; \\ \{ <var:N> = <var:B> \land <var:K1> = <nat:3> \times <var:B> \land <var:K2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:K3> = <nat:8> \times <var:B> ^ <nat:3> \land <var:K4> = <nat:7> \times <var:B> ^ <nat:4> \land <var:K0> = <nat:7> \} \\ <var:A> := <var:K4> \\ \{ <var:N> = <var:B> \land <var:K1> = <nat:3> \times <var:B> \land <var:K2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:K3> = <nat:8> \times <var:B> ^ <nat:3> \land <var:K0> = <nat:7> \land <var:A> = <nat:7> \times <var:B> ^ <nat:4> \} \\ <var:A> := <var:A> + <var:K3> \\ \{ <var:N> = <var:B> \land <var:K1> = <nat:3> \times <var:B> \land <var:K2> = <nat:9> \times <var:B> ^ <nat:2> \land <var:K0> = <nat:7> \land <var:A> = <nat:7> \times <var:B> ^ <nat:4> + <nat:8> \times <var:B> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:K2> \\ \{ <var:N> = <var:B> \land <var:K1> = <nat:3> \times <var:B> \land <var:K0> = <nat:7> \land <var:A> = <nat:7> \times <var:B> ^ <nat:4> + <nat:8> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:K1> \\ \{ <var:N> = <var:B> \land <var:K0> = <nat:7> \land <var:A> = <nat:7> \times <var:B> ^ <nat:4> + <nat:8> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> \} \\ <var:A> := <var:A> + <var:K0> \\ \{ <var:N> = <var:B> \land <var:A> = <nat:7> \times <var:B> ^ <nat:4> + <nat:8> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:7> \} \end{eqnarray} Using standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <var:K4> : string := " <var:K4> " . Definition <def:poly> := <var:K1> := <var:N> ; <var:K2> := <var:K1> * <var:N> ; <var:K3> := <var:K2> * <var:N> ; <var:K4> := <var:K3> * <var:N> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:3> ; <var:K2> := <var:K2> * <nat:9> ; <var:K3> := <var:K3> * <nat:8> ; <var:K4> := <var:K4> * <nat:7> ; <var:A> := <var:K4> <var:A> := <var:A> + <var:K3> <var:A> := <var:A> + <var:K2> <var:A> := <var:A> + <var:K1> <var:A> := <var:A> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:N> = <var:B> }} <def:poly> {{ <var:A> = <nat:7> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K4> = <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K4> = <var:B> ^ <nat:4> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <nat:3> * <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K4> = <var:B> ^ <nat:4> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <nat:3> * <var:B> /\ <var:K2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K4> = <var:B> ^ <nat:4> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <nat:3> * <var:B> /\ <var:K2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:B> ^ <nat:3> /\ <var:K4> = <var:B> ^ <nat:4> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <nat:3> * <var:B> /\ <var:K2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:B> ^ <nat:3> /\ <var:K4> = <nat:7> * <var:B> ^ <nat:4> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <nat:3> * <var:B> /\ <var:K2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:B> ^ <nat:3> /\ <var:K0> = <nat:7> /\ <var:A> = <nat:7> * <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <nat:3> * <var:B> /\ <var:K2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:K0> = <nat:7> /\ <var:A> = <nat:7> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K1> = <nat:3> * <var:B> /\ <var:K0> = <nat:7> /\ <var:A> = <nat:7> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:K0> = <nat:7> /\ <var:A> = <nat:7> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:A> = <nat:7> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 