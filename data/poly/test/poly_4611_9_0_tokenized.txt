\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:1> ; <var:v1> := <nat:9> ; <var:v1> := <var:v1> * <var:W> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:W> ; <var:v2> := <var:v2> * <var:W> ; <var:d> := <var:v2> ; <var:d> := <var:d> + <var:v1> ; <var:d> := <var:d> + <var:v0> \end{verbatim} Assuming that we have $ <var:W> = <var:U> $ ( for every positive integers $ <var:U> $ ) ahead of the evaluation of this series of commands then $ <var:d> = <nat:8> \times <var:U> ^ <nat:2> + <nat:9> \times <var:U> + <nat:1> $ after program is done . \end{theorem} \begin{proof} The application of usual Hoare logic yields : \begin{eqnarray} \{ <var:W> = <var:U> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:W> = <var:U> \land <var:v0> = <nat:1> \} \\ <var:v1> := <nat:9> ; \\ \{ <var:W> = <var:U> \land <var:v0> = <nat:1> \land <var:v1> = <nat:9> \} \\ <var:v1> := <var:v1> * <var:W> ; \\ \{ <var:W> = <var:U> \land <var:v0> = <nat:1> \land <var:v1> = <nat:9> \cdot <var:U> \} \\ <var:v2> := <nat:8> ; \\ \{ <var:W> = <var:U> \land <var:v0> = <nat:1> \land <var:v1> = <nat:9> \cdot <var:U> \land <var:v2> = <nat:8> \} \\ <var:v2> := <var:v2> * <var:W> ; \\ \{ <var:W> = <var:U> \land <var:v0> = <nat:1> \land <var:v1> = <nat:9> \cdot <var:U> \land <var:v2> = <nat:8> \cdot <var:U> \} \\ <var:v2> := <var:v2> * <var:W> ; \\ \{ <var:W> = <var:U> \land <var:v0> = <nat:1> \land <var:v1> = <nat:9> \cdot <var:U> \land <var:v2> = <nat:8> \cdot <var:U> ^ <nat:2> \} \\ <var:d> := <var:v2> ; \\ \{ <var:W> = <var:U> \land <var:v0> = <nat:1> \land <var:v1> = <nat:9> \cdot <var:U> \land <var:d> = <nat:8> \cdot <var:U> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:v1> ; \\ \{ <var:W> = <var:U> \land <var:v0> = <nat:1> \land <var:d> = <nat:8> \cdot <var:U> ^ <nat:2> + <nat:9> \cdot <var:U> \} \\ <var:d> := <var:d> + <var:v0> \\ \{ <var:W> = <var:U> \land <var:d> = <nat:8> \cdot <var:U> ^ <nat:2> + <nat:9> \cdot <var:U> + <nat:1> \} \end{eqnarray} Given the above , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:W> = <var:U> }} <var:v0> := <nat:1> ; <var:v1> := <nat:9> ; <var:v1> := <var:v1> * <var:W> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:W> ; <var:v2> := <var:v2> * <var:W> ; <var:d> := <var:v2> ; <var:d> := <var:d> + <var:v1> ; <var:d> := <var:d> + <var:v0> {{ <var:d> = <nat:8> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:9> * <var:U> /\ <var:v2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:9> * <var:U> /\ <var:v2> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:9> * <var:U> /\ <var:v2> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:9> * <var:U> /\ <var:d> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:v0> = <nat:1> /\ <var:d> = <nat:8> * <var:U> ^ <nat:2> + <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:d> = <nat:8> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 