\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H> := <nat:4> ; <var:H> := <nat:3> + <var:H> * <var:Z> ; <var:H> := <nat:3> + <var:H> * <var:Z> ; <var:H> := <nat:2> + <var:H> * <var:Z> ; <var:H> := <nat:1> + <var:H> * <var:Z> ; <var:H> := <var:H> * <var:Z> ; <var:H> := <nat:3> + <var:H> * <var:Z> ; <var:H> := <nat:4> + <var:H> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Assume it to hold that $ <var:Z> = <var:s> $ ahead of executing our series of instructions it holds that $ <var:H> = <nat:4> \times <var:s> ^ <nat:7> + <nat:3> \times <var:s> ^ <nat:6> + <nat:3> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:4> + <nat:1> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> + <nat:4> $ when series of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions is clear by typical Hoare reasoning . Jumping to the proceeding piece of code contained in our list of instructions , we have the binding statement defining $ <nat:4> $ toward $ <var:H>$ . This forwards $ \{ <var:Z> = <var:s> \} $ toward the condition $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \} $ . This is shown using the assignment law defined in typical Hoare logic . Keeping momentum , we have the variable binding code defining $ <nat:3> + <var:H> * <var:Z> $ to $ <var:H>$ . This statement moves $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \} $ to the condition $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> + <nat:3> \} $ . Observing the next bit of code contained in the set of instructions , the variable assignmet statement \verb | <var:H> := <nat:3> + <var:H> * <var:Z> ; | . This code advances the precondition $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> + <nat:3> \} $ as the postcondition $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:3> \} $ . Taking another step toward the following bit of code found in our code , we have the environment update code letting $ <nat:2> + <var:H> * <var:Z> $ as $ <var:H>$ . This command redefines $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:3> \} $ as $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:2> \} $ . Next , the variable assignmet code assigning $ <nat:1> + <var:H> * <var:Z> $ to $ <var:H>$ . This line transfers the condition $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:2> \} $ to $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:1> \} $ . Shifting focus toward the upcoming statement seen in the code , the environment update statement yielding $ <var:H> * <var:Z> $ toward $ <var:H>$ . This code moves the condition $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:1> \} $ toward $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:5> + <nat:3> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + \} $ . This is shown through the assignment scheme given by usual Hoare logic . Advancing to the next piece of code contained in the list of instructions , we see the command binding $ <nat:3> + <var:H> * <var:Z> $ into $ <var:H>$ . This moves $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:5> + <nat:3> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + \} $ into the postcondition $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:6> + <nat:3> \times <var:s> ^ <nat:5> + <nat:3> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:3> \} $ . Now , we see the binding command binding $ <nat:4> + <var:H> * <var:Z$ into $ <var:H>$ . This statement advances the condition $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:6> + <nat:3> \times <var:s> ^ <nat:5> + <nat:3> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:3> \} $ toward $ \{ <var:Z> = <var:s> \land <var:H> = <nat:4> \times <var:s> ^ <nat:7> + <nat:3> \times <var:s> ^ <nat:6> + <nat:3> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:4> + <nat:1> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:4> ; <var:H> := <nat:3> + <var:H> * <var:Z> ; <var:H> := <nat:3> + <var:H> * <var:Z> ; <var:H> := <nat:2> + <var:H> * <var:Z> ; <var:H> := <nat:1> + <var:H> * <var:Z> ; <var:H> := <var:H> * <var:Z> ; <var:H> := <nat:3> + <var:H> * <var:Z> ; <var:H> := <nat:4> + <var:H> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Z> = <var:s> }} <def:poly> {{ <var:H> = <nat:4> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:H> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:H> = <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:H> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:H> = <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:H> = <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:H> = <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:H> = <nat:4> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:s> /\ <var:H> = <nat:4> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 