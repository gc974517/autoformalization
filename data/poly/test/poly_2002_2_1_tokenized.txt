\begin{document} \begin{theorem} Consider a series of instructions as \begin{verbatim} <var:S0> := <nat:3> ; <var:h> := <var:S0> \end{verbatim} Allowing that $ <var:T> = <var:c> $ for all $ <var:c> $ prior to executing this code segment then $ <var:h> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is given by usual Hoare techniques . Taking a look at the subsequent command contained in our series of instructions , we see the variable update code yielding $ <nat:3> $ as $ <var:S0>$ . This transfers the precondition $ \{ <var:T> = <var:c> \} $ into the condition $ \{ <var:T> = <var:c> \land <var:S0> = <nat:3> \} $ . This is shown to be logically sound using the assignment rule from standard Hoare techniques . Further , the command letting $ <var:S0$ to $ <var:h>$ . This line takes $ \{ <var:T> = <var:c> \land <var:S0> = <nat:3> \} $ toward $ \{ <var:T> = <var:c> \land <var:h> = <nat:3> \} $ . This is ensured through the assignment law given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:T> = <var:c> }} <var:S0> := <nat:3> ; <var:h> := <var:S0> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 