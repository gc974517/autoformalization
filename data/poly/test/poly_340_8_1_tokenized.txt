\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:L> ; <var:e2> := <var:e1> * <var:L> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:8> ; <var:e2> := <var:e2> * <nat:1> ; <var:E> := <var:e2> <var:E> := <var:E> + <var:e1> <var:E> := <var:E> + <var:e0> \end{verbatim} Allowing --- taking $ <var:n> $ --- it to be that $ <var:L> = <var:n> $ prior to the evaluation of the code it follows that $ <var:E> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:8> \cdot <var:n> + <nat:4> $ after set of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:n> \} \\ <var:e1> := <var:L> ; \\ \{ <var:L> = <var:n> \land <var:e1> = <var:n> \} \\ <var:e2> := <var:e1> * <var:L> ; \\ \{ <var:L> = <var:n> \land <var:e1> = <var:n> \land <var:e2> = <var:n> ^ <nat:2> \} \\ <var:e0> := <nat:4> ; \\ \{ <var:L> = <var:n> \land <var:e1> = <var:n> \land <var:e2> = <var:n> ^ <nat:2> \land <var:e0> = <nat:4> \} \\ <var:e1> := <var:e1> * <nat:8> ; \\ \{ <var:L> = <var:n> \land <var:e1> = <nat:8> \times <var:n> \land <var:e2> = <var:n> ^ <nat:2> \land <var:e0> = <nat:4> \} \\ <var:e2> := <var:e2> * <nat:1> ; \\ \{ <var:L> = <var:n> \land <var:e1> = <nat:8> \times <var:n> \land <var:e2> = <nat:1> \times <var:n> ^ <nat:2> \land <var:e0> = <nat:4> \} \\ <var:E> := <var:e2> \\ \{ <var:L> = <var:n> \land <var:e1> = <nat:8> \times <var:n> \land <var:e0> = <nat:4> \land <var:E> = <nat:1> \times <var:n> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:e1> \\ \{ <var:L> = <var:n> \land <var:e0> = <nat:4> \land <var:E> = <nat:1> \times <var:n> ^ <nat:2> + <nat:8> \times <var:n> \} \\ <var:E> := <var:E> + <var:e0> \\ \{ <var:L> = <var:n> \land <var:E> = <nat:1> \times <var:n> ^ <nat:2> + <nat:8> \times <var:n> + <nat:4> \} \end{eqnarray} Using Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:L> = <var:n> }} <var:e1> := <var:L> ; <var:e2> := <var:e1> * <var:L> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:8> ; <var:e2> := <var:e2> * <nat:1> ; <var:E> := <var:e2> <var:E> := <var:E> + <var:e1> <var:E> := <var:E> + <var:e0> {{ <var:E> = <nat:1> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:e1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:e1> = <var:n> /\ <var:e2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:e1> = <var:n> /\ <var:e2> = <var:n> ^ <nat:2> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:e1> = <nat:8> * <var:n> /\ <var:e2> = <var:n> ^ <nat:2> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:e1> = <nat:8> * <var:n> /\ <var:e2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:e1> = <nat:8> * <var:n> /\ <var:e0> = <nat:4> /\ <var:E> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:e0> = <nat:4> /\ <var:E> = <nat:1> * <var:n> ^ <nat:2> + <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:E> = <nat:1> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 