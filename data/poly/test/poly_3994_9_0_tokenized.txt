\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:6> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:X> ; <var:D2> := <nat:8> ; <var:D2> := <var:D2> * <var:X> ; <var:D2> := <var:D2> * <var:X> ; <var:n> := <var:D2> ; <var:n> := <var:n> + <var:D1> ; <var:n> := <var:n> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow , assuming some positive coefficients $ <var:o> $ , $ <var:X> = <var:o> $ ahead of running the set of commands it follows that $ <var:n> = <nat:8> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:6> $ once code segment executes . \end{theorem} \begin{proof} Arguing the correctness of our set of commands is given with Hoare techniques . Jumping to the next piece of code contained in our list of instructions , the variable assignmet command \verb | <var:D0> := <nat:6> ; | . This command forwards the precondition $ \{ <var:X> = <var:o> \} $ toward the postcondition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \} $ . Stepping forward , the assignment code giving $ <nat:2> $ toward $ <var:D1>$ . This transfers the condition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \} $ toward the condition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \} $ . This is ensured through the assignment scheme given by usual Hoare techniques . Focusing on the following bit of code seen in our set of instructions , the assignment line \verb | <var:D1> := <var:D1> * <var:X> ; | . This statement transfers the precondition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \} $ . Looking at the upcoming line of code seen in our set of commands , we see the variable binding line \verb | <var:D2> := <nat:8> ; | . This forwards the precondition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \} $ toward $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \land <var:D2> = <nat:8> \} $ . Immediately following , we have the binding statement \verb | <var:D2> := <var:D2> * <var:X> ; | . This redefines the precondition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \land <var:D2> = <nat:8> \} $ as the postcondition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \land <var:D2> = <nat:8> \times <var:o> \} $ . Considering the subsequent statement in the code , we have the line binding $ <var:D2> * <var:X> $ to $ <var:D2>$ . This code transfers the precondition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \land <var:D2> = <nat:8> \times <var:o> \} $ as the condition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \land <var:D2> = <nat:8> \times <var:o> ^ <nat:2> \} $ . This is guaranteed with the assignment scheme from standard Hoare reasoning . Going to the next step , we see the variable binding statement letting $ <var:D2> $ toward $ <var:n>$ . This forwards the condition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \land <var:D2> = <nat:8> \times <var:o> ^ <nat:2> \} $ as $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \land <var:n> = <nat:8> \times <var:o> ^ <nat:2> \} $ . Moving forward to the next step , we have the assignment command \verb | <var:n> := <var:n> + <var:D1> ; | . This forwards the condition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:D1> = <nat:2> \times <var:o> \land <var:n> = <nat:8> \times <var:o> ^ <nat:2> \} $ toward $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:n> = <nat:8> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> \} $ . This is sound by the assignment scheme in Hoare logic . Taking another step toward the subsequent line of code in the code segment , we have the variable update command \verb | <var:n> := <var:n> + <var:D0> | . This transfers the precondition $ \{ <var:X> = <var:o> \land <var:D0> = <nat:6> \land <var:n> = <nat:8> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> \} $ toward the postcondition $ \{ <var:X> = <var:o> \land <var:n> = <nat:8> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D0> := <nat:6> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:X> ; <var:D2> := <nat:8> ; <var:D2> := <var:D2> * <var:X> ; <var:D2> := <var:D2> * <var:X> ; <var:n> := <var:D2> ; <var:n> := <var:n> + <var:D1> ; <var:n> := <var:n> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <def:poly> {{ <var:n> = <nat:8> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> * <var:o> /\ <var:D2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> * <var:o> /\ <var:D2> = <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> * <var:o> /\ <var:D2> = <nat:8> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:2> * <var:o> /\ <var:n> = <nat:8> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:D0> = <nat:6> /\ <var:n> = <nat:8> * <var:o> ^ <nat:2> + <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:n> = <nat:8> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 