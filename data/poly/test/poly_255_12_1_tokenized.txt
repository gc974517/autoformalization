\begin{document} \begin{theorem} Consider the following code segment as \begin{verbatim} <var:E1> := <var:x> ; <var:E2> := <var:E1> * <var:x> ; <var:E3> := <var:E2> * <var:x> ; <var:E4> := <var:E3> * <var:x> ; <var:E0> := <nat:2> ; <var:E1> := <var:E1> * <nat:6> ; <var:E2> := <var:E2> * <nat:6> ; <var:E4> := <var:E4> * <nat:9> ; <var:w> := <var:E4> <var:w> := <var:w> + <var:E2> <var:w> := <var:w> + <var:E1> <var:w> := <var:w> + <var:E0> \end{verbatim} Allow $ <var:x> = <var:n> $ ( taking $ <var:n> \in \mathbb{Z}^+ $ ) before executing this list of commands it holds that $ <var:w> = <nat:9> \cdot <var:n> ^ <nat:4> + <nat:6> \cdot <var:n> ^ <nat:2> + <nat:6> \cdot <var:n> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this code can be demonstrated with typical Hoare reasoning . Following , we see the variable binding statement \verb | <var:E1> := <var:x> ; | . This command forwards the precondition $ \{ <var:x> = <var:n> \} $ as $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \} $ . This is deduced with the assignment law defined in standard Hoare techniques . Moving forward to the next step , we have the command \verb | <var:E2> := <var:E1> * <var:x> ; | . This forwards the condition $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \} $ into $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \land <var:E2> = <var:n> ^ <nat:2> \} $ . Going forward , the binding command assigning $ <var:E2> * <var:x> $ as $ <var:E3>$ . This redefines the condition $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \land <var:E2> = <var:n> ^ <nat:2> \} $ as $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \land <var:E2> = <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \} $ . Further , the environment update line \verb | <var:E4> := <var:E3> * <var:x> ; | . This command redefines the precondition $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \land <var:E2> = <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \} $ to $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \land <var:E2> = <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <var:n> ^ <nat:4> \} $ . This is deduced using the assignment scheme given in usual Hoare logic . Going to the next step , we see the binding line \verb | <var:E0> := <nat:2> ; | . This takes the condition $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \land <var:E2> = <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <var:n> ^ <nat:4> \} $ toward $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \land <var:E2> = <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <var:n> ^ <nat:4> \land <var:E0> = <nat:2> \} $ . This is ensured with the assignment scheme of Hoare reasoning . Honing in on the upcoming statement seen in the list of instructions , the variable binding code \verb | <var:E1> := <var:E1> * <nat:6> ; | . This code transfers the precondition $ \{ <var:x> = <var:n> \land <var:E1> = <var:n> \land <var:E2> = <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <var:n> ^ <nat:4> \land <var:E0> = <nat:2> \} $ toward the condition $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E2> = <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <var:n> ^ <nat:4> \land <var:E0> = <nat:2> \} $ . This is shown through the assignment scheme given in Hoare techniques . Moving on , the code \verb | <var:E2> := <var:E2> * <nat:6> ; | . This line forwards the condition $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E2> = <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <var:n> ^ <nat:4> \land <var:E0> = <nat:2> \} $ into the postcondition $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E2> = <nat:6> * <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <var:n> ^ <nat:4> \land <var:E0> = <nat:2> \} $ . This is deduced by the assignment rule found in usual Hoare techniques . Focusing on the subsequent piece of code contained in our series of commands , we see the binding line binding $ <var:E4> * <nat:9> $ as $ <var:E4>$ . This line redefines $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E2> = <nat:6> * <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <var:n> ^ <nat:4> \land <var:E0> = <nat:2> \} $ to $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E2> = <nat:6> * <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <nat:9> * <var:n> ^ <nat:4> \land <var:E0> = <nat:2> \} $ . Immediately after , we have the code giving $ <var:E4$ as $ <var:w>$ . This redefines the condition $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E2> = <nat:6> * <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E4> = <nat:9> * <var:n> ^ <nat:4> \land <var:E0> = <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E2> = <nat:6> * <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E0> = <nat:2> \land <var:w> = <nat:9> * <var:n> ^ <nat:4> \} $ . This is shown to be logically sound through the assignment inference rule found in usual Hoare logic . Advancing to the upcoming step contained in our code segment , we see the environment update statement assigning $ <var:w> + <var:E2$ toward $ <var:w>$ . This command redefines the condition $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E2> = <nat:6> * <var:n> ^ <nat:2> \land <var:E3> = <var:n> ^ <nat:3> \land <var:E0> = <nat:2> \land <var:w> = <nat:9> * <var:n> ^ <nat:4> \} $ into the postcondition $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E0> = <nat:2> \land <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> \} $ . This is sound through the assignment scheme defined by usual Hoare reasoning . Moving forward to the proceeding command seen in the segment of code , the binding line assigning $ <var:w> + <var:E1$ toward $ <var:w>$ . This transfers the condition $ \{ <var:x> = <var:n> \land <var:E1> = <nat:6> * <var:n> \land <var:E0> = <nat:2> \land <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> \} $ into $ \{ <var:x> = <var:n> \land <var:E0> = <nat:2> \land <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> \} $ . This is rigorously given through the assignment rule given in standard Hoare logic . Taking another step toward the upcoming command found in our code , we have the assignment command \verb | <var:w> := <var:w> + <var:E0> | . This moves the condition $ \{ <var:x> = <var:n> \land <var:E0> = <nat:2> \land <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> \} $ toward the condition $ \{ <var:x> = <var:n> \land <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:2> \} $ . This is known to be sound by the assignment law of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <var:E4> : string := " <var:E4> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:x> = <var:n> }} <var:E1> := <var:x> ; <var:E2> := <var:E1> * <var:x> ; <var:E3> := <var:E2> * <var:x> ; <var:E4> := <var:E3> * <var:x> ; <var:E0> := <nat:2> ; <var:E1> := <var:E1> * <nat:6> ; <var:E2> := <var:E2> * <nat:6> ; <var:E4> := <var:E4> * <nat:9> ; <var:w> := <var:E4> <var:w> := <var:w> + <var:E2> <var:w> := <var:w> + <var:E1> <var:w> := <var:w> + <var:E0> {{ <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <var:n> /\ <var:E2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <var:n> /\ <var:E2> = <var:n> ^ <nat:2> /\ <var:E3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <var:n> /\ <var:E2> = <var:n> ^ <nat:2> /\ <var:E3> = <var:n> ^ <nat:3> /\ <var:E4> = <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <var:n> /\ <var:E2> = <var:n> ^ <nat:2> /\ <var:E3> = <var:n> ^ <nat:3> /\ <var:E4> = <var:n> ^ <nat:4> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <nat:6> * <var:n> /\ <var:E2> = <var:n> ^ <nat:2> /\ <var:E3> = <var:n> ^ <nat:3> /\ <var:E4> = <var:n> ^ <nat:4> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <nat:6> * <var:n> /\ <var:E2> = <nat:6> * <var:n> ^ <nat:2> /\ <var:E3> = <var:n> ^ <nat:3> /\ <var:E4> = <var:n> ^ <nat:4> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <nat:6> * <var:n> /\ <var:E2> = <nat:6> * <var:n> ^ <nat:2> /\ <var:E3> = <var:n> ^ <nat:3> /\ <var:E4> = <nat:9> * <var:n> ^ <nat:4> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <nat:6> * <var:n> /\ <var:E2> = <nat:6> * <var:n> ^ <nat:2> /\ <var:E3> = <var:n> ^ <nat:3> /\ <var:E0> = <nat:2> /\ <var:w> = <nat:9> * <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E1> = <nat:6> * <var:n> /\ <var:E0> = <nat:2> /\ <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:E0> = <nat:2> /\ <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:w> = <nat:9> * <var:n> ^ <nat:4> + <nat:6> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 