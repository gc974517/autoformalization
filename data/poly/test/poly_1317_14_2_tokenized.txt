\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:4> + <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <nat:3> + <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:1> + <var:a> * <var:z> ; <var:a> := <nat:1> + <var:a> * <var:z> \end{verbatim} Allow given all natural numbers $ <var:W> $ it to hold that $ <var:z> = <var:W> $ prior to interpreting this segment of code , it must be that we have $ <var:a> = <nat:1> * <var:W> ^ <nat:13> + <nat:2> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> $ when segment of code has finished executing . \end{theorem} \begin{proof} The flow of logic for the series of commands can be demonstrated through usual Hoare logic . Taking another step toward the proceeding steps contained in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:W> \} & <var:a> := <nat:1> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \} & <var:a> := <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> + \} \end{tabular} This is rigorously given through the scheme defined by usual Hoare techniques . Looking at the proceeding lines of codefound in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:z> = <var:W> \} & <var:a> := <nat:1> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \} & <var:a> := <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> + \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> + \} & <var:a> := <nat:2> + <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:2> + <nat:2> \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:2> + <nat:2> \} & <var:a> := <nat:4> + <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> + <nat:4> \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> + <nat:4> \} & <var:a> := <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + \} & <var:a> := <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + \} & <var:a> := <nat:3> + <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:6> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:4> \cdot <var:W> ^ <nat:3> + <nat:3> \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:6> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:4> \cdot <var:W> ^ <nat:3> + <nat:3> \} & <var:a> := <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:7> + <nat:2> \cdot <var:W> ^ <nat:5> + <nat:4> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> + \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:7> + <nat:2> \cdot <var:W> ^ <nat:5> + <nat:4> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> + \} & <var:a> := <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:8> + <nat:2> \cdot <var:W> ^ <nat:6> + <nat:4> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:2> + \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:8> + <nat:2> \cdot <var:W> ^ <nat:6> + <nat:4> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:2> + \} & <var:a> := <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:9> + <nat:2> \cdot <var:W> ^ <nat:7> + <nat:4> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:3> + \} \\ \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:9> + <nat:2> \cdot <var:W> ^ <nat:7> + <nat:4> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:3> + \} & <var:a> := <nat:2> + <var:a> * <var:z> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \cdot <var:W> ^ <nat:10> + <nat:2> \cdot <var:W> ^ <nat:8> + <nat:4> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \} \end{tabular} This is shown to be logically sound with the variable assignmet scheme obtained from typical Hoare reasoning . Moving forward , \[ \begin{tabular} {rcl} \{ <var:z> = <var:W> \} & <var:a> := <nat:1> & \{ <var:z> = <var:W> \land <var:a> = <nat:1> \} \end{tabular} This is rigorously given with the binding scheme defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:z> = <var:W> }} <var:a> := <nat:1> ; <var:a> := <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:4> + <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <nat:3> + <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:1> + <var:a> * <var:z> ; <var:a> := <nat:1> + <var:a> * <var:z> {{ <var:a> = <nat:1> * <var:W> ^ <nat:13> + <nat:2> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:4> + <nat:3> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:7> + <nat:4> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:8> + <nat:4> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:4> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:9> + <nat:4> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:12> + <nat:2> * <var:W> ^ <nat:10> + <nat:4> * <var:W> ^ <nat:9> + <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:a> = <nat:1> * <var:W> ^ <nat:13> + <nat:2> * <var:W> ^ <nat:11> + <nat:4> * <var:W> ^ <nat:10> + <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 