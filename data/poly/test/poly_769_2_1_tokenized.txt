\begin{document} \begin{theorem} Consider a series of instructions as \begin{verbatim} <var:h0> := <nat:3> ; <var:w> := <var:h0> \end{verbatim} Assume that $ <var:N> = <var:n> $ , taking natural numbers $ <var:n> $ , ahead of interpreting this list of commands , it must be that $ <var:w> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is accomplished with Hoare reasoning . Advancing to the subsequent lines of codecontained in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:n> \} & <var:h0> := <nat:3> & \{ <var:N> = <var:n> \land <var:h0> = <nat:3> \} \\ \{ <var:N> = <var:n> \land <var:h0> = <nat:3> \} & <var:w> := <var:h0& \{ <var:N> = <var:n> \land <var:w> = <nat:3> \} \end{tabular} This is shown to be logically sound with the environment update inference rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:N> = <var:n> }} <var:h0> := <nat:3> ; <var:w> := <var:h0> {{ <var:w> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:w> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 