\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <nat:4> + <var:L> * <var:A> ; <var:L> := <nat:1> + <var:L> * <var:A> ; <var:L> := <nat:3> + <var:L> * <var:A> ; <var:L> := <nat:2> + <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <nat:1> + <var:L> * <var:A> \end{verbatim} Given that we have $ <var:A> = <var:Y> $ , given any natural numbers $ <var:Y> $ , prior to evaluating the code segment it holds that $ <var:L> = <nat:2> \times <var:Y> ^ <nat:10> + <nat:4> \times <var:Y> ^ <nat:6> + <nat:1> \times <var:Y> ^ <nat:5> + <nat:3> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:1> $ . \end{theorem} \begin{proof} Let the following decorated series of commands . \begin{eqnarray} \{ <var:A> = <var:Y> \} \\ <var:L> := <nat:2> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> \} \\ <var:L> := <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> + \} \\ <var:L> := <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:2> + \} \\ <var:L> := <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:3> + \} \\ <var:L> := <nat:4> + <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:4> + <nat:4> \} \\ <var:L> := <nat:1> + <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> + <nat:1> \} \\ <var:L> := <nat:3> + <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> \} \\ <var:L> := <nat:2> + <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> \} \\ <var:L> := <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:8> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + \} \\ <var:L> := <var:L> * <var:A> ; \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:9> + <nat:4> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + \} \\ <var:L> := <nat:1> + <var:L> * <var:A> \\ \{ <var:A> = <var:Y> \land <var:L> = <nat:2> * <var:Y> ^ <nat:10> + <nat:4> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:1> \} \end{eqnarray} The application of Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:A> = <var:Y> }} <var:L> := <nat:2> ; <var:L> := <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <nat:4> + <var:L> * <var:A> ; <var:L> := <nat:1> + <var:L> * <var:A> ; <var:L> := <nat:3> + <var:L> * <var:A> ; <var:L> := <nat:2> + <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <var:L> * <var:A> ; <var:L> := <nat:1> + <var:L> * <var:A> {{ <var:L> = <nat:2> * <var:Y> ^ <nat:10> + <nat:4> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:4> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:8> + <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:9> + <nat:4> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Y> /\ <var:L> = <nat:2> * <var:Y> ^ <nat:10> + <nat:4> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 