\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:4> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:I> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:I> ; <var:K2> := <var:K2> * <var:I> ; <var:K3> := <nat:3> ; <var:K3> := <var:K3> * <var:I> ; <var:K3> := <var:K3> * <var:I> ; <var:K3> := <var:K3> * <var:I> ; <var:D> := <var:K3> ; <var:D> := <var:D> + <var:K2> ; <var:D> := <var:D> + <var:K1> ; <var:D> := <var:D> + <var:K0> \end{verbatim} Allow that $ <var:I> = <var:x> $ for $ <var:x> \in \mathbb{N} $ prior to evaluating our list of commands it must be that we have $ <var:D> = <nat:3> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions is done through typical Hoare logic . Considering the subsequent line of code in the list of commands , we have the environment update code giving $ <nat:4> $ toward $ <var:K0>$ . This moves the condition $ \{ <var:I> = <var:x> \} $ to $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \} $ . Immediately following , we see the environment update statement binding $ <nat:3> $ as $ <var:K1>$ . This takes the precondition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \} $ to $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \} $ . Advancing , we see the statement binding $ <var:K1> * <var:I> $ toward $ <var:K1>$ . This redefines the precondition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \} $ toward the condition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \} $ . This is given with the assignment scheme obtained from usual Hoare reasoning . Advancing on , we have the code binding $ <nat:1> $ as $ <var:K2>$ . This code takes the precondition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \} $ to the condition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \} $ . This is given through the assignment inference rule defined in usual Hoare techniques . Further , the variable update statement \verb | <var:K2> := <var:K2> * <var:I> ; | . This line redefines the condition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \} $ into $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> \} $ . After , we have the assignment code \verb | <var:K2> := <var:K2> * <var:I> ; | . This takes the precondition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> \} $ into the condition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \} $ . This is sound through the assignment scheme of typical Hoare techniques . Stepping through , we have the binding line defining $ <nat:3> $ to $ <var:K3>$ . This takes the precondition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \} $ toward the postcondition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:3> \} $ . This is guaranteed with the assignment law defined by usual Hoare logic . Following , we see the environment update statement giving $ <var:K3> * <var:I> $ to $ <var:K3>$ . This line advances the precondition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:3> \} $ to $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:3> \cdot <var:x> \} $ . Shifting focus toward the proceeding step in our segment of code , we see the binding command \verb | <var:K3> := <var:K3> * <var:I> ; | . This advances $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:3> \cdot <var:x> \} $ as the condition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:3> \cdot <var:x> ^ <nat:2> \} $ . This is guaranteed using the assignment scheme defined by standard Hoare reasoning . Focusing on the upcoming piece of code found in our set of commands , we have the binding statement binding $ <var:K3> * <var:I> $ to $ <var:K3>$ . This code forwards $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:3> \cdot <var:x> ^ <nat:2> \} $ to the condition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:3> \cdot <var:x> ^ <nat:3> \} $ . This is shown by the assignment rule in Hoare logic . Moving on to the proceeding line found in the segment of code , we have the code \verb | <var:D> := <var:K3> ; | . This code forwards $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:3> \cdot <var:x> ^ <nat:3> \} $ toward $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:D> = <nat:3> \cdot <var:x> ^ <nat:3> \} $ . This is deduced using the assignment law obtained from Hoare logic . Jumping to the next line of code contained in our list of instructions , the assignment statement \verb | <var:D> := <var:D> + <var:K2> ; | . This statement redefines $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:K2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:D> = <nat:3> \cdot <var:x> ^ <nat:3> \} $ toward the condition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:D> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> \} $ . Taking another step toward the subsequent line contained in our code , the assignment code letting $ <var:D> + <var:K1> $ into $ <var:D>$ . This command takes the precondition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:x> \land <var:D> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> \} $ toward the condition $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:D> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> \} $ . Taking a look at the upcoming command in the set of instructions , the variable assignmet code giving $ <var:D> + <var:K0$ into $ <var:D>$ . This statement redefines $ \{ <var:I> = <var:x> \land <var:K0> = <nat:4> \land <var:D> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> \} $ toward the condition $ \{ <var:I> = <var:x> \land <var:D> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:I> = <var:x> }} <var:K0> := <nat:4> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:I> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:I> ; <var:K2> := <var:K2> * <var:I> ; <var:K3> := <nat:3> ; <var:K3> := <var:K3> * <var:I> ; <var:K3> := <var:K3> * <var:I> ; <var:K3> := <var:K3> * <var:I> ; <var:D> := <var:K3> ; <var:D> := <var:D> + <var:K2> ; <var:D> := <var:D> + <var:K1> ; <var:D> := <var:D> + <var:K0> {{ <var:D> = <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:K2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:K2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:K2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:K2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:K3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:K2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:K3> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:K2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:K3> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:K2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:K3> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:K2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:D> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:x> /\ <var:D> = <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:K0> = <nat:4> /\ <var:D> = <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:x> /\ <var:D> = <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 