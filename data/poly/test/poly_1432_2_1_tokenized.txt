\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:4> ; <var:n> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Assuming given some integers $ <var:S> $ $ <var:U> = <var:S> $ prior to executing our program then we have $ <var:n> = <nat:4> $ when set of commands executes . \end{theorem} \begin{proof} The proof of the set of commands can be shown by usual Hoare reasoning . After , the environment update line assigning $ <nat:4> $ to $ <var:x0>$ . This takes the condition $ \{ <var:U> = <var:S> \} $ as the postcondition $ \{ <var:U> = <var:S> \land <var:x0> = <nat:4> \} $ . Taking another step toward the subsequent line found in our program , the variable update command \verb | <var:n> := <var:x0> | . This takes the condition $ \{ <var:U> = <var:S> \land <var:x0> = <nat:4> \} $ as the condition $ \{ <var:U> = <var:S> \land <var:n> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:n> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:U> = <var:S> }} <def:poly> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 