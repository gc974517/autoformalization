\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:j1> := <var:M> ; <var:j2> := <var:j1> * <var:M> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:5> ; <var:w> := <var:j2> <var:w> := <var:w> + <var:j1> <var:w> := <var:w> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Allow , with some $ <var:O> \in \mathbb{Z}^+ $ , $ <var:M> = <var:O> $ ahead of executing our program then we have $ <var:w> = <nat:5> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:9> $ once set of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be seen through Hoare logic . Moving on , \begin{eqnarray} \{ <var:M> = <var:O> \} \, <var:j1> := <var:M> \, \{ <var:M> = <var:O> \land <var:j1> = <var:O> \} \\ \{ <var:M> = <var:O> \land <var:j1> = <var:O> \} \, <var:j2> := <var:j1> * <var:M> \, \{ <var:M> = <var:O> \land <var:j1> = <var:O> \land <var:j2> = <var:O> ^ <nat:2> \} \\ \{ <var:M> = <var:O> \land <var:j1> = <var:O> \land <var:j2> = <var:O> ^ <nat:2> \} \, <var:j0> := <nat:9> \, \{ <var:M> = <var:O> \land <var:j1> = <var:O> \land <var:j2> = <var:O> ^ <nat:2> \land <var:j0> = <nat:9> \} \\ \{ <var:M> = <var:O> \land <var:j1> = <var:O> \land <var:j2> = <var:O> ^ <nat:2> \land <var:j0> = <nat:9> \} \, <var:j1> := <var:j1> * <nat:4> \, \{ <var:M> = <var:O> \land <var:j1> = <nat:4> \cdot <var:O> \land <var:j2> = <var:O> ^ <nat:2> \land <var:j0> = <nat:9> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:M> = <var:O> \} \, <var:j1> := <var:M> \, \{ <var:M> = <var:O> \land <var:j1> = <var:O> \} \\ \{ <var:M> = <var:O> \land <var:j1> = <var:O> \} \, <var:j2> := <var:j1> * <var:M> \, \{ <var:M> = <var:O> \land <var:j1> = <var:O> \land <var:j2> = <var:O> ^ <nat:2> \} \\ \{ <var:M> = <var:O> \land <var:j1> = <var:O> \land <var:j2> = <var:O> ^ <nat:2> \} \, <var:j0> := <nat:9> \, \{ <var:M> = <var:O> \land <var:j1> = <var:O> \land <var:j2> = <var:O> ^ <nat:2> \land <var:j0> = <nat:9> \} \end{eqnarray} Keeping momentum , \begin{eqnarray} \{ <var:M> = <var:O> \} \, <var:j1> := <var:M> \, \{ <var:M> = <var:O> \land <var:j1> = <var:O> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j1> := <var:M> ; <var:j2> := <var:j1> * <var:M> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:5> ; <var:w> := <var:j2> <var:w> := <var:w> + <var:j1> <var:w> := <var:w> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:M> = <var:O> }} <def:poly> {{ <var:w> = <nat:5> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:j1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:j1> = <var:O> /\ <var:j2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:j1> = <var:O> /\ <var:j2> = <var:O> ^ <nat:2> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:j1> = <nat:4> * <var:O> /\ <var:j2> = <var:O> ^ <nat:2> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:j1> = <nat:4> * <var:O> /\ <var:j2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:j1> = <nat:4> * <var:O> /\ <var:j0> = <nat:9> /\ <var:w> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:j0> = <nat:9> /\ <var:w> = <nat:5> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:w> = <nat:5> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 