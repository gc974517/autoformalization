\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:g1> := <var:C> ; <var:g2> := <var:g1> * <var:C> ; <var:g3> := <var:g2> * <var:C> ; <var:g4> := <var:g3> * <var:C> ; <var:g0> := <nat:2> ; <var:g3> := <var:g3> * <nat:1> ; <var:g4> := <var:g4> * <nat:6> ; <var:E> := <var:g4> <var:E> := <var:E> + <var:g3> <var:E> := <var:E> + <var:g0> \end{verbatim} Allow it to be that $ <var:C> = <var:j> $ before the evaluation of the segment of code , it follows that we see $ <var:E> = <nat:6> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:2> $ after set of instructions terminates . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be demonstrated through standard Hoare reasoning . Shifting focus toward the following line seen in the list of commands , we see the line \verb | <var:g1> := <var:C> ; | . This line forwards the precondition $ \{ <var:C> = <var:j> \} $ to the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \} $ . This is deduced by the assignment inference rule from typical Hoare reasoning . Honing in on the next statement in the program , we have the assignment statement binding $ <var:g1> * <var:C> $ as $ <var:g2>$ . This statement takes $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \} $ as the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \} $ . Advancing to the next step , the environment update line assigning $ <var:g2> * <var:C> $ to $ <var:g3>$ . This line forwards $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \} $ toward the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \} $ . This is guaranteed with the assignment law of typical Hoare reasoning . After , we see the variable binding command \verb | <var:g4> := <var:g3> * <var:C> ; | . This command redefines the precondition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \} $ as the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \} $ . This is shown through the assignment inference rule given by standard Hoare logic . Next , we see the variable binding command yielding $ <nat:2> $ into $ <var:g0>$ . This advances the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \} $ into $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \land <var:g0> = <nat:2> \} $ . This is given through the assignment law in typical Hoare techniques . Stepping forward , we have the environment update line assigning $ <var:g3> * <nat:1> $ toward $ <var:g3>$ . This line moves the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \land <var:g0> = <nat:2> \} $ toward the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \land <var:g0> = <nat:2> \} $ . This is known to be sound using the assignment rule defined by standard Hoare techniques . Immediately after , the variable assignmet statement letting $ <var:g4> * <nat:6> $ into $ <var:g4>$ . This statement redefines the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:j> ^ <nat:3> \land <var:g4> = <var:j> ^ <nat:4> \land <var:g0> = <nat:2> \} $ toward $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:j> ^ <nat:3> \land <var:g4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:g0> = <nat:2> \} $ . This is deduced using the assignment scheme defined by Hoare reasoning . Going forward , we see the assignment command giving $ <var:g4$ as $ <var:E>$ . This advances $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:j> ^ <nat:3> \land <var:g4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:g0> = <nat:2> \} $ to the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:j> ^ <nat:3> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \times <var:j> ^ <nat:4> \} $ . This is deduced with the assignment rule obtained from typical Hoare techniques . Honing in on the next line of code seen in our series of commands , we have the binding command defining $ <var:E> + <var:g3$ into $ <var:E>$ . This transfers the condition $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <nat:1> \times <var:j> ^ <nat:3> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \times <var:j> ^ <nat:4> \} $ into $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \times <var:j> ^ <nat:4> + <nat:1> \times <var:j> ^ <nat:3> \} $ . Taking another step toward the following piece of code in the series of instructions , the variable binding code \verb | <var:E> := <var:E> + <var:g0> | . This moves $ \{ <var:C> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \times <var:j> ^ <nat:4> + <nat:1> \times <var:j> ^ <nat:3> \} $ as the condition $ \{ <var:C> = <var:j> \land <var:E> = <nat:6> \times <var:j> ^ <nat:4> + <nat:1> \times <var:j> ^ <nat:3> + <nat:2> \} $ . This is sound using the assignment scheme of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:C> = <var:j> }} <var:g1> := <var:C> ; <var:g2> := <var:g1> * <var:C> ; <var:g3> := <var:g2> * <var:C> ; <var:g4> := <var:g3> * <var:C> ; <var:g0> := <nat:2> ; <var:g3> := <var:g3> * <nat:1> ; <var:g4> := <var:g4> * <nat:6> ; <var:E> := <var:g4> <var:E> := <var:E> + <var:g3> <var:E> := <var:E> + <var:g0> {{ <var:E> = <nat:6> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g4> = <var:j> ^ <nat:4> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:j> ^ <nat:3> /\ <var:g4> = <var:j> ^ <nat:4> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:j> ^ <nat:3> /\ <var:g4> = <nat:6> * <var:j> ^ <nat:4> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:j> ^ <nat:3> /\ <var:g0> = <nat:2> /\ <var:E> = <nat:6> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g0> = <nat:2> /\ <var:E> = <nat:6> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:E> = <nat:6> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 