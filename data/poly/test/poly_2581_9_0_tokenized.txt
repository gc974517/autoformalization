\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:D> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:D> ; <var:i2> := <var:i2> * <var:D> ; <var:R> := <var:i2> ; <var:R> := <var:R> + <var:i1> ; <var:R> := <var:R> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Given it to hold that $ <var:D> = <var:E> $ for every positive numbers $ <var:E> $ prior to interpreting our code segment , it follows that we see $ <var:R> = <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:2> $ when code segment has terminated . \end{theorem} \begin{proof} The flow of logic for this series of commands is evident by typical Hoare logic . Taking another step toward the next step found in the segment of code , the variable binding command letting $ <nat:2> $ as $ <var:i0>$ . This statement redefines the precondition $ \{ <var:D> = <var:E> \} $ to $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \} $ . Moving on , the variable update line assigning $ <nat:3> $ toward $ <var:i1>$ . This redefines $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \} $ into the postcondition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \} $ . This is deduced by the assignment law defined by Hoare logic . Taking a look at the proceeding statement in the series of instructions , we have the assignment statement \verb | <var:i1> := <var:i1> * <var:D> ; | . This code advances the precondition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \} $ as $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \} $ . This is given by the assignment law defined in typical Hoare reasoning . Stepping forward , the statement \verb | <var:i2> := <nat:4> ; | . This takes the condition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \} $ as $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \land <var:i2> = <nat:4> \} $ . This is known to be sound by the assignment law given by usual Hoare reasoning . Further , we have the code \verb | <var:i2> := <var:i2> * <var:D> ; | . This redefines the precondition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \land <var:i2> = <nat:4> \} $ as the postcondition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \land <var:i2> = <nat:4> \times <var:E> \} $ . Going forward , we see the environment update code giving $ <var:i2> * <var:D> $ to $ <var:i2>$ . This advances the condition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \land <var:i2> = <nat:4> \times <var:E> \} $ toward $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \land <var:i2> = <nat:4> \times <var:E> ^ <nat:2> \} $ . Moving on to the next line of code in the code , we have the variable update code binding $ <var:i2> $ to $ <var:R>$ . This code moves the condition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \land <var:i2> = <nat:4> \times <var:E> ^ <nat:2> \} $ into the condition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \land <var:R> = <nat:4> \times <var:E> ^ <nat:2> \} $ . This is ensured by the assignment rule of Hoare techniques . Jumping to the following bit of code contained in our series of commands , we have the assignment code \verb | <var:R> := <var:R> + <var:i1> ; | . This moves the condition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \times <var:E> \land <var:R> = <nat:4> \times <var:E> ^ <nat:2> \} $ toward $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:R> = <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> \} $ . Taking another step toward the next line of code in the series of commands , we have the assignment line \verb | <var:R> := <var:R> + <var:i0> | . This transfers the condition $ \{ <var:D> = <var:E> \land <var:i0> = <nat:2> \land <var:R> = <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> \} $ toward $ \{ <var:D> = <var:E> \land <var:R> = <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:D> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:D> ; <var:i2> := <var:i2> * <var:D> ; <var:R> := <var:i2> ; <var:R> := <var:R> + <var:i1> ; <var:R> := <var:R> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:D> = <var:E> }} <def:poly> {{ <var:R> = <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:3> * <var:E> /\ <var:i2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:3> * <var:E> /\ <var:i2> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:3> * <var:E> /\ <var:i2> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:3> * <var:E> /\ <var:R> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:i0> = <nat:2> /\ <var:R> = <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:R> = <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 