\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W1> := <var:O> ; <var:W2> := <var:W1> * <var:O> ; <var:W0> := <nat:8> ; <var:W2> := <var:W2> * <nat:2> ; <var:a> := <var:W2> <var:a> := <var:a> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allow given some $ <var:v> \in \mathbb{Z}^+ $ that $ <var:O> = <var:v> $ prior to executing the set of instructions , then we have $ <var:a> = <nat:2> \cdot <var:v> ^ <nat:2> + <nat:8> $ when list of commands has terminated . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives : \begin{eqnarray} \{ <var:O> = <var:v> \} \\ <var:W1> := <var:O> ; \\ \{ <var:O> = <var:v> \land <var:W1> = <var:v> \} \\ <var:W2> := <var:W1> * <var:O> ; \\ \{ <var:O> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <var:v> ^ <nat:2> \} \\ <var:W0> := <nat:8> ; \\ \{ <var:O> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <var:v> ^ <nat:2> \land <var:W0> = <nat:8> \} \\ <var:W2> := <var:W2> * <nat:2> ; \\ \{ <var:O> = <var:v> \land <var:W1> = <var:v> \land <var:W2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:W0> = <nat:8> \} \\ <var:a> := <var:W2> \\ \{ <var:O> = <var:v> \land <var:W1> = <var:v> \land <var:W0> = <nat:8> \land <var:a> = <nat:2> \times <var:v> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:W0> \\ \{ <var:O> = <var:v> \land <var:a> = <nat:2> \times <var:v> ^ <nat:2> + <nat:8> \} \end{eqnarray} Thus , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W1> := <var:O> ; <var:W2> := <var:W1> * <var:O> ; <var:W0> := <nat:8> ; <var:W2> := <var:W2> * <nat:2> ; <var:a> := <var:W2> <var:a> := <var:a> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:O> = <var:v> }} <def:poly> {{ <var:a> = <nat:2> * <var:v> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:W1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:W1> = <var:v> /\ <var:W2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:W1> = <var:v> /\ <var:W2> = <var:v> ^ <nat:2> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:W1> = <var:v> /\ <var:W2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:W1> = <var:v> /\ <var:W0> = <nat:8> /\ <var:a> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:a> = <nat:2> * <var:v> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 