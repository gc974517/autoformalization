\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:4> ; <var:b> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:S> = <var:E> $ before executing our code , then $ <var:b> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be accomplished by standard Hoare reasoning . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:S> = <var:E> \} & <var:R0> := <nat:4> & \{ <var:S> = <var:E> \land <var:R0> = <nat:4> \} \\ \{ <var:S> = <var:E> \land <var:R0> = <nat:4> \} & <var:b> := <var:R0& \{ <var:S> = <var:E> \land <var:b> = <nat:4> \} \end{tabular} This is sound using the assignment scheme of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:4> ; <var:b> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:S> = <var:E> }} <def:poly> {{ <var:b> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:E> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:E> /\ <var:b> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 