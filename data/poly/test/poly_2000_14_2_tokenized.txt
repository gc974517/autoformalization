\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:M> := <nat:3> ; <var:M> := <var:M> * <var:w> ; <var:M> := <nat:3> + <var:M> * <var:w> ; <var:M> := <nat:4> + <var:M> * <var:w> ; <var:M> := <nat:3> + <var:M> * <var:w> ; <var:M> := <nat:4> + <var:M> * <var:w> ; <var:M> := <var:M> * <var:w> ; <var:M> := <nat:1> + <var:M> * <var:w> ; <var:M> := <var:M> * <var:w> ; <var:M> := <nat:2> + <var:M> * <var:w> ; <var:M> := <nat:2> + <var:M> * <var:w> ; <var:M> := <nat:4> + <var:M> * <var:w> ; <var:M> := <nat:1> + <var:M> * <var:w> ; <var:M> := <nat:1> + <var:M> * <var:w> \end{verbatim} Given it to be that $ <var:w> = <var:H> $ prior to interpreting this segment of code it must be that we see $ <var:M> = <nat:3> * <var:H> ^ <nat:13> + <nat:3> * <var:H> ^ <nat:11> + <nat:4> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> $ when list of instructions is done . \end{theorem} \begin{proof} Using Hoare techniques gives us : \begin{eqnarray} \{ <var:w> = <var:H> \} \\ <var:M> := <nat:3> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> \} \\ <var:M> := <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> + \} \\ <var:M> := <nat:3> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> \} \\ <var:M> := <nat:4> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:4> \} \\ <var:M> := <nat:3> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> \} \\ <var:M> := <nat:4> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> \} \\ <var:M> := <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + \} \\ <var:M> := <nat:1> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> \} \\ <var:M> := <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + \} \\ <var:M> := <nat:2> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> \} \\ <var:M> := <nat:2> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + <nat:2> \} \\ <var:M> := <nat:4> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:11> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> \} \\ <var:M> := <nat:1> + <var:M> * <var:w> ; \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:12> + <nat:3> * <var:H> ^ <nat:10> + <nat:4> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> \} \\ <var:M> := <nat:1> + <var:M> * <var:w> \\ \{ <var:w> = <var:H> \land <var:M> = <nat:3> * <var:H> ^ <nat:13> + <nat:3> * <var:H> ^ <nat:11> + <nat:4> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> \} \end{eqnarray} As a consequence , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:w> = <var:H> }} <var:M> := <nat:3> ; <var:M> := <var:M> * <var:w> ; <var:M> := <nat:3> + <var:M> * <var:w> ; <var:M> := <nat:4> + <var:M> * <var:w> ; <var:M> := <nat:3> + <var:M> * <var:w> ; <var:M> := <nat:4> + <var:M> * <var:w> ; <var:M> := <var:M> * <var:w> ; <var:M> := <nat:1> + <var:M> * <var:w> ; <var:M> := <var:M> * <var:w> ; <var:M> := <nat:2> + <var:M> * <var:w> ; <var:M> := <nat:2> + <var:M> * <var:w> ; <var:M> := <nat:4> + <var:M> * <var:w> ; <var:M> := <nat:1> + <var:M> * <var:w> ; <var:M> := <nat:1> + <var:M> * <var:w> {{ <var:M> = <nat:3> * <var:H> ^ <nat:13> + <nat:3> * <var:H> ^ <nat:11> + <nat:4> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:11> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:12> + <nat:3> * <var:H> ^ <nat:10> + <nat:4> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:H> /\ <var:M> = <nat:3> * <var:H> ^ <nat:13> + <nat:3> * <var:H> ^ <nat:11> + <nat:4> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 