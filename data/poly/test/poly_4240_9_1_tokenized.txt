\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:Q> ; <var:y2> := <var:y1> * <var:Q> ; <var:y3> := <var:y2> * <var:Q> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:4> ; <var:y3> := <var:y3> * <nat:6> ; <var:J> := <var:y3> <var:J> := <var:J> + <var:y1> <var:J> := <var:J> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:Q> = <var:I> $ prior to interpreting the set of instructions , it must be that we have $ <var:J> = <nat:6> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for our list of instructions is given using the below decorated set of instructions . \begin{eqnarray} \{ <var:Q> = <var:I> \} \\ <var:y1> := <var:Q> ; \\ \{ <var:Q> = <var:I> \land <var:y1> = <var:I> \} \\ <var:y2> := <var:y1> * <var:Q> ; \\ \{ <var:Q> = <var:I> \land <var:y1> = <var:I> \land <var:y2> = <var:I> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:Q> ; \\ \{ <var:Q> = <var:I> \land <var:y1> = <var:I> \land <var:y2> = <var:I> ^ <nat:2> \land <var:y3> = <var:I> ^ <nat:3> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:Q> = <var:I> \land <var:y1> = <var:I> \land <var:y2> = <var:I> ^ <nat:2> \land <var:y3> = <var:I> ^ <nat:3> \land <var:y0> = <nat:6> \} \\ <var:y1> := <var:y1> * <nat:4> ; \\ \{ <var:Q> = <var:I> \land <var:y1> = <nat:4> * <var:I> \land <var:y2> = <var:I> ^ <nat:2> \land <var:y3> = <var:I> ^ <nat:3> \land <var:y0> = <nat:6> \} \\ <var:y3> := <var:y3> * <nat:6> ; \\ \{ <var:Q> = <var:I> \land <var:y1> = <nat:4> * <var:I> \land <var:y2> = <var:I> ^ <nat:2> \land <var:y3> = <nat:6> * <var:I> ^ <nat:3> \land <var:y0> = <nat:6> \} \\ <var:J> := <var:y3> \\ \{ <var:Q> = <var:I> \land <var:y1> = <nat:4> * <var:I> \land <var:y2> = <var:I> ^ <nat:2> \land <var:y0> = <nat:6> \land <var:J> = <nat:6> * <var:I> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:y1> \\ \{ <var:Q> = <var:I> \land <var:y0> = <nat:6> \land <var:J> = <nat:6> * <var:I> ^ <nat:3> + <nat:4> * <var:I> \} \\ <var:J> := <var:J> + <var:y0> \\ \{ <var:Q> = <var:I> \land <var:J> = <nat:6> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:6> \} \end{eqnarray} Utilizing Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:Q> ; <var:y2> := <var:y1> * <var:Q> ; <var:y3> := <var:y2> * <var:Q> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:4> ; <var:y3> := <var:y3> * <nat:6> ; <var:J> := <var:y3> <var:J> := <var:J> + <var:y1> <var:J> := <var:J> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:Q> = <var:I> }} <def:poly> {{ <var:J> = <nat:6> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:y1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:y1> = <var:I> /\ <var:y2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:y1> = <var:I> /\ <var:y2> = <var:I> ^ <nat:2> /\ <var:y3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:y1> = <var:I> /\ <var:y2> = <var:I> ^ <nat:2> /\ <var:y3> = <var:I> ^ <nat:3> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:y1> = <nat:4> * <var:I> /\ <var:y2> = <var:I> ^ <nat:2> /\ <var:y3> = <var:I> ^ <nat:3> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:y1> = <nat:4> * <var:I> /\ <var:y2> = <var:I> ^ <nat:2> /\ <var:y3> = <nat:6> * <var:I> ^ <nat:3> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:y1> = <nat:4> * <var:I> /\ <var:y2> = <var:I> ^ <nat:2> /\ <var:y0> = <nat:6> /\ <var:J> = <nat:6> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:y0> = <nat:6> /\ <var:J> = <nat:6> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:I> /\ <var:J> = <nat:6> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 