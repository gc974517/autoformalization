\begin{document} \begin{theorem} Take a program in \emph{Imp} such that \begin{verbatim} <var:L> := <nat:3> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:2> + <var:L> * <var:G> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:2> + <var:L> * <var:G> ; <var:L> := <nat:4> + <var:L> * <var:G> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:3> + <var:L> * <var:G> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:4> + <var:L> * <var:G> \end{verbatim} Given it to hold that $ <var:G> = <var:H> $ prior to the execution of the code , it follows that $ <var:L> = <nat:3> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> $ once list of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands can be done using usual Hoare logic . Moving on to the subsequent bit of code in the series of commands , we have the binding code yielding $ <nat:3> $ as $ <var:L>$ . This redefines the condition $ \{ <var:G> = <var:H> \} $ into $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> \} $ . Immediately after , we have the binding statement yielding $ <nat:1> + <var:L> * <var:G> $ into $ <var:L>$ . This code advances the condition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> \} $ to the postcondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> + <nat:1> \} $ . This is ensured through the assignment law from Hoare reasoning . Advancing on , we have the variable assignmet command assigning $ <nat:2> + <var:L> * <var:G> $ to $ <var:L>$ . This code takes the condition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> + <nat:1> \} $ as the condition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> \} $ . Honing in on the next line of code contained in the list of commands , we have the line defining $ <nat:1> + <var:L> * <var:G> $ toward $ <var:L>$ . This redefines the precondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> \} $ into $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> \} $ . Moving forward to the next step , the assignment command yielding $ <nat:2> + <var:L> * <var:G> $ toward $ <var:L>$ . This redefines the condition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> \} $ into the condition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> \} $ . This is known to be sound by the assignment scheme found in standard Hoare techniques . Keeping momentum , the environment update command giving $ <nat:4> + <var:L> * <var:G> $ into $ <var:L>$ . This takes the condition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> \} $ into the condition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> \} $ . Advancing to the next step , we see the variable update code \verb | <var:L> := <nat:1> + <var:L> * <var:G> ; | . This code transfers $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> \} $ toward the postcondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> \} $ . This is known to be sound by the assignment inference rule obtained from standard Hoare reasoning . Next , the variable binding command \verb | <var:L> := <nat:3> + <var:L> * <var:G> ; | . This command moves the precondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> \} $ into the postcondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> \} $ . This is ensured using the assignment inference rule from usual Hoare techniques . Advancing , we see the variable assignmet statement \verb | <var:L> := <nat:1> + <var:L> * <var:G> ; | . This forwards the precondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> \} $ to the postcondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> \} $ . This is sound by the assignment rule in usual Hoare reasoning . Moving forward , the variable binding code \verb | <var:L> := <nat:1> + <var:L> * <var:G> ; | . This line takes $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> \} $ to the postcondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:9> + <nat:1> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> \} $ . This is ensured with the assignment scheme in standard Hoare techniques . Keeping momentum , we see the command yielding $ <nat:4> + <var:L> * <var:G$ into $ <var:L>$ . This moves the precondition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:9> + <nat:1> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> \} $ to the condition $ \{ <var:G> = <var:H> \land <var:L> = <nat:3> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:G> = <var:H> }} <var:L> := <nat:3> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:2> + <var:L> * <var:G> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:2> + <var:L> * <var:G> ; <var:L> := <nat:4> + <var:L> * <var:G> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:3> + <var:L> * <var:G> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:1> + <var:L> * <var:G> ; <var:L> := <nat:4> + <var:L> * <var:G> {{ <var:L> = <nat:3> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:9> + <nat:1> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:H> /\ <var:L> = <nat:3> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 