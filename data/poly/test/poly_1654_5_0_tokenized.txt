\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:x> ; <var:B> := <var:Q1> ; <var:B> := <var:B> + <var:Q0> \end{verbatim} Allow given all positive integers $ <var:b> $ it to be that $ <var:x> = <var:b> $ before executing this segment of code , it follows that we see $ <var:B> = <nat:5> * <var:b> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:b> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:x> = <var:b> \land <var:Q0> = <nat:8> \} \\ <var:Q1> := <nat:5> ; \\ \{ <var:x> = <var:b> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:5> \} \\ <var:Q1> := <var:Q1> * <var:x> ; \\ \{ <var:x> = <var:b> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:5> * <var:b> \} \\ <var:B> := <var:Q1> ; \\ \{ <var:x> = <var:b> \land <var:Q0> = <nat:8> \land <var:B> = <nat:5> * <var:b> \} \\ <var:B> := <var:B> + <var:Q0> \\ \{ <var:x> = <var:b> \land <var:B> = <nat:5> * <var:b> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:x> = <var:b> }} <var:Q0> := <nat:8> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:x> ; <var:B> := <var:Q1> ; <var:B> := <var:B> + <var:Q0> {{ <var:B> = <nat:5> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:Q0> = <nat:8> /\ <var:B> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:B> = <nat:5> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 