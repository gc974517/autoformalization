\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:x> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:1> ; <var:S> := <var:y1> <var:S> := <var:S> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Assume it to hold that $ <var:x> = <var:U> $ --- with some positive coefficients $ <var:U> $ --- prior to evaluating our code segment it follows that we have $ <var:S> = <nat:1> \times <var:U> + <nat:5> $ after code segment is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:U> \} \\ <var:y1> := <var:x> ; \\ \{ <var:x> = <var:U> \land <var:y1> = <var:U> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:x> = <var:U> \land <var:y1> = <var:U> \land <var:y0> = <nat:5> \} \\ <var:y1> := <var:y1> * <nat:1> ; \\ \{ <var:x> = <var:U> \land <var:y1> = <nat:1> \cdot <var:U> \land <var:y0> = <nat:5> \} \\ <var:S> := <var:y1> \\ \{ <var:x> = <var:U> \land <var:y0> = <nat:5> \land <var:S> = <nat:1> \cdot <var:U> \} \\ <var:S> := <var:S> + <var:y0> \\ \{ <var:x> = <var:U> \land <var:S> = <nat:1> \cdot <var:U> + <nat:5> \} \end{eqnarray} Applying usual Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:x> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:1> ; <var:S> := <var:y1> <var:S> := <var:S> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:x> = <var:U> }} <def:poly> {{ <var:S> = <nat:1> * <var:U> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:y1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:y1> = <var:U> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:y1> = <nat:1> * <var:U> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:y0> = <nat:5> /\ <var:S> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:S> = <nat:1> * <var:U> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 