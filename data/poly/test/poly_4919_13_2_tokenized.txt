\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:1> + <var:i> * <var:c> ; <var:i> := <nat:4> + <var:i> * <var:c> ; <var:i> := <nat:4> + <var:i> * <var:c> ; <var:i> := <nat:1> + <var:i> * <var:c> ; <var:i> := <nat:2> + <var:i> * <var:c> ; <var:i> := <nat:3> + <var:i> * <var:c> ; <var:i> := <nat:2> + <var:i> * <var:c> ; <var:i> := <nat:2> + <var:i> * <var:c> ; <var:i> := <var:i> * <var:c> ; <var:i> := <nat:1> + <var:i> * <var:c> ; <var:i> := <var:i> * <var:c> ; <var:i> := <nat:4> + <var:i> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:c> = <var:D> $ ahead of the evaluation of the set of instructions , it holds that $ <var:i> = <nat:3> \times <var:D> ^ <nat:12> + <nat:1> \times <var:D> ^ <nat:11> + <nat:4> \times <var:D> ^ <nat:10> + <nat:4> \times <var:D> ^ <nat:9> + <nat:1> \times <var:D> ^ <nat:8> + <nat:2> \times <var:D> ^ <nat:7> + <nat:3> \times <var:D> ^ <nat:6> + <nat:2> \times <var:D> ^ <nat:5> + <nat:2> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:2> + <nat:4> $ after program has finished . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be demonstrated using Hoare logic . Moving on to the subsequent step found in the series of commands , the variable update command \verb | <var:i> := <nat:3> ; | . This takes the precondition $ \{ <var:c> = <var:D> \} $ to the condition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \} $ . This is shown through the assignment law defined in Hoare techniques . Advancing to the next step , we have the variable update line letting $ <nat:1> + <var:i> * <var:c> $ into $ <var:i>$ . This advances $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \} $ into the condition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> + <nat:1> \} $ . Moving on , we have the environment update code assigning $ <nat:4> + <var:i> * <var:c> $ as $ <var:i>$ . This statement forwards the precondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> + <nat:1> \} $ toward $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:4> \} $ . This is known to be sound using the assignment rule obtained from standard Hoare logic . Now , the variable assignmet command giving $ <nat:4> + <var:i> * <var:c> $ toward $ <var:i>$ . This transfers the condition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:4> \} $ toward the postcondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:4> \} $ . This is known to be sound using the assignment inference rule given by standard Hoare reasoning . After , we see the variable update line \verb | <var:i> := <nat:1> + <var:i> * <var:c> ; | . This moves the precondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:4> \} $ toward $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> \} $ . Moving forward to the subsequent command found in our list of instructions , the variable update line \verb | <var:i> := <nat:2> + <var:i> * <var:c> ; | . This statement redefines the precondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> \} $ toward the postcondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:2> \} $ . This is known to be sound with the assignment law from standard Hoare techniques . Taking another step toward the next bit of code contained in the series of instructions , we see the assignment code giving $ <nat:3> + <var:i> * <var:c> $ to $ <var:i>$ . This advances the condition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:2> \} $ toward the condition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:4> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:3> \} $ . This is given with the assignment inference rule given by usual Hoare logic . Shifting focus toward the following piece of code contained in our code , we have the variable binding line assigning $ <nat:2> + <var:i> * <var:c> $ to $ <var:i>$ . This code transfers the precondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:4> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:3> \} $ to the condition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:4> \cdot <var:D> ^ <nat:5> + <nat:4> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:2> \} $ . Going forward , we have the variable update line yielding $ <nat:2> + <var:i> * <var:c> $ into $ <var:i>$ . This line advances $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:4> \cdot <var:D> ^ <nat:5> + <nat:4> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:2> \} $ to $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:8> + <nat:1> \cdot <var:D> ^ <nat:7> + <nat:4> \cdot <var:D> ^ <nat:6> + <nat:4> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:2> \} $ . This is deduced through the assignment scheme obtained from Hoare reasoning . Going forward , the environment update statement \verb | <var:i> := <var:i> * <var:c> ; | . This statement moves $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:8> + <nat:1> \cdot <var:D> ^ <nat:7> + <nat:4> \cdot <var:D> ^ <nat:6> + <nat:4> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:2> \} $ into the postcondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:9> + <nat:1> \cdot <var:D> ^ <nat:8> + <nat:4> \cdot <var:D> ^ <nat:7> + <nat:4> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:2> \cdot <var:D> ^ <nat:4> + <nat:3> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + \} $ . This is deduced through the assignment law obtained from typical Hoare logic . Taking another step toward the following piece of code found in our segment of code , the assignment code giving $ <nat:1> + <var:i> * <var:c> $ into $ <var:i>$ . This command moves the condition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:9> + <nat:1> \cdot <var:D> ^ <nat:8> + <nat:4> \cdot <var:D> ^ <nat:7> + <nat:4> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:2> \cdot <var:D> ^ <nat:4> + <nat:3> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + \} $ into the postcondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:10> + <nat:1> \cdot <var:D> ^ <nat:9> + <nat:4> \cdot <var:D> ^ <nat:8> + <nat:4> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:2> \cdot <var:D> ^ <nat:5> + <nat:3> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:1> \} $ . Paying attention to the following piece of code in our set of commands , we have the variable binding line giving $ <var:i> * <var:c> $ as $ <var:i>$ . This statement advances $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:10> + <nat:1> \cdot <var:D> ^ <nat:9> + <nat:4> \cdot <var:D> ^ <nat:8> + <nat:4> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:2> \cdot <var:D> ^ <nat:5> + <nat:3> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:1> \} $ into $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:11> + <nat:1> \cdot <var:D> ^ <nat:10> + <nat:4> \cdot <var:D> ^ <nat:9> + <nat:4> \cdot <var:D> ^ <nat:8> + <nat:1> \cdot <var:D> ^ <nat:7> + <nat:2> \cdot <var:D> ^ <nat:6> + <nat:3> \cdot <var:D> ^ <nat:5> + <nat:2> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> + \} $ . This is guaranteed with the assignment rule defined in typical Hoare logic . Considering the following line of code contained in the list of instructions , we have the variable binding line \verb | <var:i> := <nat:4> + <var:i> * <var:c> | . This forwards $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:11> + <nat:1> \cdot <var:D> ^ <nat:10> + <nat:4> \cdot <var:D> ^ <nat:9> + <nat:4> \cdot <var:D> ^ <nat:8> + <nat:1> \cdot <var:D> ^ <nat:7> + <nat:2> \cdot <var:D> ^ <nat:6> + <nat:3> \cdot <var:D> ^ <nat:5> + <nat:2> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> + \} $ toward the postcondition $ \{ <var:c> = <var:D> \land <var:i> = <nat:3> \cdot <var:D> ^ <nat:12> + <nat:1> \cdot <var:D> ^ <nat:11> + <nat:4> \cdot <var:D> ^ <nat:10> + <nat:4> \cdot <var:D> ^ <nat:9> + <nat:1> \cdot <var:D> ^ <nat:8> + <nat:2> \cdot <var:D> ^ <nat:7> + <nat:3> \cdot <var:D> ^ <nat:6> + <nat:2> \cdot <var:D> ^ <nat:5> + <nat:2> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \} $ . This is known to be sound through the assignment scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:3> ; <var:i> := <nat:1> + <var:i> * <var:c> ; <var:i> := <nat:4> + <var:i> * <var:c> ; <var:i> := <nat:4> + <var:i> * <var:c> ; <var:i> := <nat:1> + <var:i> * <var:c> ; <var:i> := <nat:2> + <var:i> * <var:c> ; <var:i> := <nat:3> + <var:i> * <var:c> ; <var:i> := <nat:2> + <var:i> * <var:c> ; <var:i> := <nat:2> + <var:i> * <var:c> ; <var:i> := <var:i> * <var:c> ; <var:i> := <nat:1> + <var:i> * <var:c> ; <var:i> := <var:i> * <var:c> ; <var:i> := <nat:4> + <var:i> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:c> = <var:D> }} <def:poly> {{ <var:i> = <nat:3> * <var:D> ^ <nat:12> + <nat:1> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:9> + <nat:1> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:9> + <nat:1> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:10> + <nat:1> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:11> + <nat:1> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:i> = <nat:3> * <var:D> ^ <nat:12> + <nat:1> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:9> + <nat:1> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 