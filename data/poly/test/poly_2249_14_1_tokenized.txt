\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} : \begin{verbatim} <var:J1> := <var:q> ; <var:J2> := <var:J1> * <var:q> ; <var:J3> := <var:J2> * <var:q> ; <var:J4> := <var:J3> * <var:q> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:3> ; <var:J2> := <var:J2> * <nat:1> ; <var:J3> := <var:J3> * <nat:5> ; <var:J4> := <var:J4> * <nat:1> ; <var:E> := <var:J4> <var:E> := <var:E> + <var:J3> <var:E> := <var:E> + <var:J2> <var:E> := <var:E> + <var:J1> <var:E> := <var:E> + <var:J0> \end{verbatim} Assuming , for any natural numbers $ <var:b> $ , it to be that $ <var:q> = <var:b> $ before the evaluation of the list of commands , then $ <var:E> = <nat:1> \cdot <var:b> ^ <nat:4> + <nat:5> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> + <nat:3> $ after set of commands has terminated . \end{theorem} \begin{proof} The proof of the code can be seen with Hoare logic . Advancing on , we see \begin{eqnarray} \{ <var:q> = <var:b> \} \, <var:J1> := <var:q> \, \{ <var:q> = <var:b> \land <var:J1> = <var:b> \} \end{eqnarray} This is given through the variable binding rule obtained from standard Hoare techniques . After , \begin{eqnarray} \{ <var:q> = <var:b> \} \, <var:J1> := <var:q> \, \{ <var:q> = <var:b> \land <var:J1> = <var:b> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <var:b> \} \, <var:J2> := <var:J1> * <var:q> \, \{ <var:q> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \} \, <var:J3> := <var:J2> * <var:q> \, \{ <var:q> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \} \, <var:J4> := <var:J3> * <var:q> \, \{ <var:q> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \} \, <var:J0> := <nat:3> \, \{ <var:q> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \, <var:J1> := <var:J1> * <nat:3> \, \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \, <var:J2> := <var:J2> * <nat:1> \, \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \, <var:J3> := <var:J3> * <nat:5> \, \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J3> = <nat:5> \times <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J3> = <nat:5> \times <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \, <var:J4> := <var:J4> * <nat:1> \, \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J3> = <nat:5> \times <var:b> ^ <nat:3> \land <var:J4> = <nat:1> \times <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J3> = <nat:5> \times <var:b> ^ <nat:3> \land <var:J4> = <nat:1> \times <var:b> ^ <nat:4> \land <var:J0> = <nat:3> \} \, <var:E> := <var:J4\, \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J3> = <nat:5> \times <var:b> ^ <nat:3> \land <var:J0> = <nat:3> \land <var:E> = <nat:1> \times <var:b> ^ <nat:4> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J3> = <nat:5> \times <var:b> ^ <nat:3> \land <var:J0> = <nat:3> \land <var:E> = <nat:1> \times <var:b> ^ <nat:4> \} \, <var:E> := <var:E> + <var:J3\, \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J0> = <nat:3> \land <var:E> = <nat:1> \times <var:b> ^ <nat:4> + <nat:5> \times <var:b> ^ <nat:3> \} \\ \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:J0> = <nat:3> \land <var:E> = <nat:1> \times <var:b> ^ <nat:4> + <nat:5> \times <var:b> ^ <nat:3> \} \, <var:E> := <var:E> + <var:J2\, \{ <var:q> = <var:b> \land <var:J1> = <nat:3> \times <var:b> \land <var:J0> = <nat:3> \land <var:E> = <nat:1> \times <var:b> ^ <nat:4> + <nat:5> \times <var:b> ^ <nat:3> + <nat:1> \times <var:b> ^ <nat:2> \} \end{eqnarray} This is deduced with the assignment law defined in standard Hoare logic . Advancing , we have \begin{eqnarray} \{ <var:q> = <var:b> \} \, <var:J1> := <var:q> \, \{ <var:q> = <var:b> \land <var:J1> = <var:b> \} \end{eqnarray} This is rigorously given using the variable update rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:q> = <var:b> }} <var:J1> := <var:q> ; <var:J2> := <var:J1> * <var:q> ; <var:J3> := <var:J2> * <var:q> ; <var:J4> := <var:J3> * <var:q> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:3> ; <var:J2> := <var:J2> * <nat:1> ; <var:J3> := <var:J3> * <nat:5> ; <var:J4> := <var:J4> * <nat:1> ; <var:E> := <var:J4> <var:E> := <var:E> + <var:J3> <var:E> := <var:E> + <var:J2> <var:E> := <var:E> + <var:J1> <var:E> := <var:E> + <var:J0> {{ <var:E> = <nat:1> * <var:b> ^ <nat:4> + <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <nat:3> * <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <nat:3> * <var:b> /\ <var:J2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <nat:3> * <var:b> /\ <var:J2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:5> * <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <nat:3> * <var:b> /\ <var:J2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:5> * <var:b> ^ <nat:3> /\ <var:J4> = <nat:1> * <var:b> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <nat:3> * <var:b> /\ <var:J2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:5> * <var:b> ^ <nat:3> /\ <var:J0> = <nat:3> /\ <var:E> = <nat:1> * <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <nat:3> * <var:b> /\ <var:J2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:J0> = <nat:3> /\ <var:E> = <nat:1> * <var:b> ^ <nat:4> + <nat:5> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J1> = <nat:3> * <var:b> /\ <var:J0> = <nat:3> /\ <var:E> = <nat:1> * <var:b> ^ <nat:4> + <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:J0> = <nat:3> /\ <var:E> = <nat:1> * <var:b> ^ <nat:4> + <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:E> = <nat:1> * <var:b> ^ <nat:4> + <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 