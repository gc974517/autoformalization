\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:y> ; <var:D> := <nat:3> + <var:D> * <var:y> ; <var:D> := <var:D> * <var:y> ; <var:D> := <nat:4> + <var:D> * <var:y> ; <var:D> := <var:D> * <var:y> ; <var:D> := <var:D> * <var:y> ; <var:D> := <nat:2> + <var:D> * <var:y> ; <var:D> := <nat:1> + <var:D> * <var:y> ; <var:D> := <nat:1> + <var:D> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:y> = <var:w> $ ahead of running this set of commands it holds that $ <var:D> = <nat:1> \times <var:w> ^ <nat:9> + <nat:2> \times <var:w> ^ <nat:8> + <nat:3> \times <var:w> ^ <nat:7> + <nat:4> \times <var:w> ^ <nat:5> + <nat:2> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands is given through usual Hoare reasoning . Keeping momentum , we have \verb | { <var:y> = <var:w> } <var:D> := <nat:1> { <var:y> = <var:w> \land <var:D> = <nat:1> } | , \verb | { <var:y> = <var:w> \land <var:D> = <nat:1> } <var:D> := <nat:2> + <var:D> * <var:y> { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> + <nat:2> } | , \verb | { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> + <nat:2> } <var:D> := <nat:3> + <var:D> * <var:y> { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:3> } | , \verb | { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:3> } <var:D> := <var:D> * <var:y> { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + } | , \verb | { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + } <var:D> := <nat:4> + <var:D> * <var:y> { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:4> } | , \verb | { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:4> } <var:D> := <var:D> * <var:y> { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> + } | , \verb | { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> + } <var:D> := <var:D> * <var:y> { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:3> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:2> + } | , \verb | { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:3> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:2> + } <var:D> := <nat:2> + <var:D> * <var:y> { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:3> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:2> } | and \verb | { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:3> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:2> } <var:D> := <nat:1> + <var:D> * <var:y> { <var:y> = <var:w> \land <var:D> = <nat:1> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:3> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> + <nat:1> } | . This is shown to be logically sound using the variable assignmet rule defined by usual Hoare reasoning . Stepping through , we have \verb | { <var:y> = <var:w> } <var:D> := <nat:1> { <var:y> = <var:w> \land <var:D> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:y> ; <var:D> := <nat:3> + <var:D> * <var:y> ; <var:D> := <var:D> * <var:y> ; <var:D> := <nat:4> + <var:D> * <var:y> ; <var:D> := <var:D> * <var:y> ; <var:D> := <var:D> * <var:y> ; <var:D> := <nat:2> + <var:D> * <var:y> ; <var:D> := <nat:1> + <var:D> * <var:y> ; <var:D> := <nat:1> + <var:D> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:y> = <var:w> }} <def:poly> {{ <var:D> = <nat:1> * <var:w> ^ <nat:9> + <nat:2> * <var:w> ^ <nat:8> + <nat:3> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:D> = <nat:1> * <var:w> ^ <nat:9> + <nat:2> * <var:w> ^ <nat:8> + <nat:3> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 