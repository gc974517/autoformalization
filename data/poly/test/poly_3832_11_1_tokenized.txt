\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as \begin{verbatim} <var:w1> := <var:c> ; <var:w2> := <var:w1> * <var:c> ; <var:w3> := <var:w2> * <var:c> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:6> ; <var:w3> := <var:w3> * <nat:9> ; <var:p> := <var:w3> <var:p> := <var:p> + <var:w2> <var:p> := <var:p> + <var:w1> <var:p> := <var:p> + <var:w0> \end{verbatim} Assume it to be that $ <var:c> = <var:E> $ ahead of the execution of the series of instructions , then we have $ <var:p> = <nat:9> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for the list of commands can be given with the below decorated code . \begin{eqnarray} \{ <var:c> = <var:E> \} \\ <var:w1> := <var:c> ; \\ \{ <var:c> = <var:E> \land <var:w1> = <var:E> \} \\ <var:w2> := <var:w1> * <var:c> ; \\ \{ <var:c> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \} \end{eqnarray} Furthering interpreting this series of commands produces : \begin{eqnarray} <var:w3> := <var:w2> * <var:c> ; \\ \{ <var:c> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:c> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:6> \} \\ <var:w1> := <var:w1> * <nat:4> ; \\ \{ <var:c> = <var:E> \land <var:w1> = <nat:4> \times <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:6> \} \\ <var:w2> := <var:w2> * <nat:6> ; \\ \{ <var:c> = <var:E> \land <var:w1> = <nat:4> \times <var:E> \land <var:w2> = <nat:6> \times <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:6> \} \end{eqnarray} Advancing evaluating our set of commands results in : \begin{eqnarray} <var:w3> := <var:w3> * <nat:9> ; \\ \{ <var:c> = <var:E> \land <var:w1> = <nat:4> \times <var:E> \land <var:w2> = <nat:6> \times <var:E> ^ <nat:2> \land <var:w3> = <nat:9> \times <var:E> ^ <nat:3> \land <var:w0> = <nat:6> \} \\ <var:p> := <var:w3> \\ \{ <var:c> = <var:E> \land <var:w1> = <nat:4> \times <var:E> \land <var:w2> = <nat:6> \times <var:E> ^ <nat:2> \land <var:w0> = <nat:6> \land <var:p> = <nat:9> \times <var:E> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:w2> \\ \{ <var:c> = <var:E> \land <var:w1> = <nat:4> \times <var:E> \land <var:w0> = <nat:6> \land <var:p> = <nat:9> \times <var:E> ^ <nat:3> + <nat:6> \times <var:E> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:w1> \\ \{ <var:c> = <var:E> \land <var:w0> = <nat:6> \land <var:p> = <nat:9> \times <var:E> ^ <nat:3> + <nat:6> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> \} \\ <var:p> := <var:p> + <var:w0> \\ \{ <var:c> = <var:E> \land <var:p> = <nat:9> \times <var:E> ^ <nat:3> + <nat:6> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:6> \} \end{eqnarray} Furthering interpreting the segment of code results in : \begin{eqnarray} \end{eqnarray} Utilizing typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:c> = <var:E> }} <var:w1> := <var:c> ; <var:w2> := <var:w1> * <var:c> ; <var:w3> := <var:w2> * <var:c> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:6> ; <var:w3> := <var:w3> * <nat:9> ; <var:p> := <var:w3> <var:p> := <var:p> + <var:w2> <var:p> := <var:p> + <var:w1> <var:p> := <var:p> + <var:w0> {{ <var:p> = <nat:9> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:w3> = <nat:9> * <var:E> ^ <nat:3> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:w0> = <nat:6> /\ <var:p> = <nat:9> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w0> = <nat:6> /\ <var:p> = <nat:9> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w0> = <nat:6> /\ <var:p> = <nat:9> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:p> = <nat:9> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 