\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as \begin{verbatim} <var:k1> := <var:y> ; <var:k2> := <var:k1> * <var:y> ; <var:k0> := <nat:6> ; <var:k2> := <var:k2> * <nat:2> ; <var:b> := <var:k2> <var:b> := <var:b> + <var:k0> \end{verbatim} Allow that $ <var:y> = <var:Z> $ ahead of interpreting our series of commands it follows that we have $ <var:b> = <nat:2> \times <var:Z> ^ <nat:2> + <nat:6> $ once program terminates . \end{theorem} \begin{proof} Using typical Hoare reasoning returns : \begin{eqnarray} \{ <var:y> = <var:Z> \} \\ <var:k1> := <var:y> ; \\ \{ <var:y> = <var:Z> \land <var:k1> = <var:Z> \} \\ <var:k2> := <var:k1> * <var:y> ; \\ \{ <var:y> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:y> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \land <var:k0> = <nat:6> \} \\ <var:k2> := <var:k2> * <nat:2> ; \\ \{ <var:y> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <nat:2> \cdot <var:Z> ^ <nat:2> \land <var:k0> = <nat:6> \} \\ <var:b> := <var:k2> \\ \{ <var:y> = <var:Z> \land <var:k1> = <var:Z> \land <var:k0> = <nat:6> \land <var:b> = <nat:2> \cdot <var:Z> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:k0> \\ \{ <var:y> = <var:Z> \land <var:b> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:6> \} \end{eqnarray} As a consequence , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:y> = <var:Z> }} <var:k1> := <var:y> ; <var:k2> := <var:k1> * <var:y> ; <var:k0> := <nat:6> ; <var:k2> := <var:k2> * <nat:2> ; <var:b> := <var:k2> <var:b> := <var:b> + <var:k0> {{ <var:b> = <nat:2> * <var:Z> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:k1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k0> = <nat:6> /\ <var:b> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:b> = <nat:2> * <var:Z> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 