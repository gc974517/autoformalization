\begin{document} \begin{theorem} Define the following segment of code such that \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:z> ; <var:S2> := <nat:9> ; <var:S2> := <var:S2> * <var:z> ; <var:S2> := <var:S2> * <var:z> ; <var:S3> := <nat:1> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:P> := <var:S3> ; <var:P> := <var:P> + <var:S2> ; <var:P> := <var:P> + <var:S1> ; <var:P> := <var:P> + <var:S0> \end{verbatim} Assuming it to hold that $ <var:z> = <var:o> $ with some positive coefficients $ <var:o> $ before running the set of instructions , it must be that we see $ <var:P> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:9> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:4> $ once list of commands executes . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:z> = <var:o> \} \\ <var:S0> := <nat:4> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \} \\ <var:S1> := <nat:3> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \} \\ <var:S1> := <var:S1> * <var:z> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \} \\ <var:S2> := <nat:9> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:S2> = <nat:9> \} \\ <var:S2> := <var:S2> * <var:z> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:S2> = <nat:9> \times <var:o> \} \\ <var:S2> := <var:S2> * <var:z> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:S2> = <nat:9> \times <var:o> ^ <nat:2> \} \\ <var:S3> := <nat:1> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:S2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:S3> = <nat:1> \} \\ <var:S3> := <var:S3> * <var:z> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:S2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:S3> = <nat:1> \times <var:o> \} \\ <var:S3> := <var:S3> * <var:z> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:S2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:S3> = <nat:1> \times <var:o> ^ <nat:2> \} \\ <var:S3> := <var:S3> * <var:z> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:S2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:S3> = <nat:1> \times <var:o> ^ <nat:3> \} \\ <var:P> := <var:S3> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:S2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:P> = <nat:1> \times <var:o> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:S2> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:o> \land <var:P> = <nat:1> \times <var:o> ^ <nat:3> + <nat:9> \times <var:o> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:S1> ; \\ \{ <var:z> = <var:o> \land <var:S0> = <nat:4> \land <var:P> = <nat:1> \times <var:o> ^ <nat:3> + <nat:9> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> \} \\ <var:P> := <var:P> + <var:S0> \\ \{ <var:z> = <var:o> \land <var:P> = <nat:1> \times <var:o> ^ <nat:3> + <nat:9> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:4> \} \end{eqnarray} Considering the above , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <var:S0> := <nat:4> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:z> ; <var:S2> := <nat:9> ; <var:S2> := <var:S2> * <var:z> ; <var:S2> := <var:S2> * <var:z> ; <var:S3> := <nat:1> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:P> := <var:S3> ; <var:P> := <var:P> + <var:S2> ; <var:P> := <var:P> + <var:S1> ; <var:P> := <var:P> + <var:S0> {{ <var:P> = <nat:1> * <var:o> ^ <nat:3> + <nat:9> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:S2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:S2> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:S2> = <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:S2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:S3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:S2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:S2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:S2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:S2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:P> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:o> /\ <var:P> = <nat:1> * <var:o> ^ <nat:3> + <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:S0> = <nat:4> /\ <var:P> = <nat:1> * <var:o> ^ <nat:3> + <nat:9> * <var:o> ^ <nat:2> + <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:P> = <nat:1> * <var:o> ^ <nat:3> + <nat:9> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 