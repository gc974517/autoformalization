\begin{document} \begin{theorem} We define the following list of instructions as follows \begin{verbatim} <var:E0> := <nat:5> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:Y> ; <var:Q> := <var:E1> ; <var:Q> := <var:Q> + <var:E0> \end{verbatim} Allowing --- given any positive integers $ <var:s> $ --- $ <var:Y> = <var:s> $ before executing the series of instructions , it holds that we see $ <var:Q> = <nat:9> \times <var:s> + <nat:5> $ once code segment executes . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be accomplished using standard Hoare techniques . Advancing to the next step , we see \begin{verbatim} { <var:Y> = <var:s> } <var:E0> := <nat:5> { <var:Y> = <var:s> \land <var:E0> = <nat:5> } { <var:Y> = <var:s> \land <var:E0> = <nat:5> } <var:E1> := <nat:9> { <var:Y> = <var:s> \land <var:E0> = <nat:5> \land <var:E1> = <nat:9> } \end{verbatim} This is shown to be logically sound using the variable assignmet law found in usual Hoare reasoning . Advancing to the following pieces of code found in our series of instructions , we see \begin{verbatim} { <var:Y> = <var:s> } <var:E0> := <nat:5> { <var:Y> = <var:s> \land <var:E0> = <nat:5> } { <var:Y> = <var:s> \land <var:E0> = <nat:5> } <var:E1> := <nat:9> { <var:Y> = <var:s> \land <var:E0> = <nat:5> \land <var:E1> = <nat:9> } \end{verbatim} This is sound using the variable update law in typical Hoare techniques . Advancing , we see \begin{verbatim} { <var:Y> = <var:s> } <var:E0> := <nat:5> { <var:Y> = <var:s> \land <var:E0> = <nat:5> } \end{verbatim} This is given by the binding inference rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Y> = <var:s> }} <var:E0> := <nat:5> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:Y> ; <var:Q> := <var:E1> ; <var:Q> := <var:Q> + <var:E0> {{ <var:Q> = <nat:9> * <var:s> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:E0> = <nat:5> /\ <var:Q> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:s> /\ <var:Q> = <nat:9> * <var:s> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 