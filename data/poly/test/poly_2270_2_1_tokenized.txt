\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:4> ; <var:O> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Assuming --- given $ <var:P> $ --- that $ <var:l> = <var:P> $ before interpreting our code it must be that we have $ <var:O> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of commands is clear by typical Hoare logic . Moving on to the upcoming statement contained in the code segment , we see the binding command defining $ <nat:4> $ to $ <var:s0>$ . This moves $ \{ <var:l> = <var:P> \} $ as $ \{ <var:l> = <var:P> \land <var:s0> = <nat:4> \} $ . This is deduced using the assignment rule of standard Hoare reasoning . Taking another step toward the proceeding bit of code seen in our set of commands , we have the variable binding line letting $ <var:s0$ as $ <var:O>$ . This advances the precondition $ \{ <var:l> = <var:P> \land <var:s0> = <nat:4> \} $ to $ \{ <var:l> = <var:P> \land <var:O> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:O> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:l> = <var:P> }} <def:poly> {{ <var:O> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:O> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 