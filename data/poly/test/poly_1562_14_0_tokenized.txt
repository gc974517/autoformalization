\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:7> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:K> ; <var:h2> := <nat:2> ; <var:h2> := <var:h2> * <var:K> ; <var:h2> := <var:h2> * <var:K> ; <var:h3> := <nat:9> ; <var:h3> := <var:h3> * <var:K> ; <var:h3> := <var:h3> * <var:K> ; <var:h3> := <var:h3> * <var:K> ; <var:M> := <var:h3> ; <var:M> := <var:M> + <var:h2> ; <var:M> := <var:M> + <var:h1> ; <var:M> := <var:M> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:K> = <var:e> $ prior to the execution of this list of instructions it must be that $ <var:M> = <nat:9> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> + <nat:7> $ once series of instructions has finished executing . \end{theorem} \begin{proof} Proving correctness for this set of instructions can be done by Hoare logic . Honing in on the upcoming line of code contained in the code , the variable assignmet line binding $ <nat:7> $ toward $ <var:h0>$ . This command advances the precondition $ \{ <var:K> = <var:e> \} $ toward the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \} $ . Moving forward to the following command seen in our segment of code , the variable assignmet code yielding $ <nat:9> $ to $ <var:h1>$ . This takes $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \} $ toward $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> \} $ . Observing the following bit of code seen in the set of instructions , we see the variable binding command yielding $ <var:h1> * <var:K> $ as $ <var:h1>$ . This redefines the precondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> \} $ as the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \} $ . Jumping to the upcoming command seen in the series of commands , we see the variable update code binding $ <nat:2> $ into $ <var:h2>$ . This line moves the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \} $ toward the postcondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> \} $ . This is rigorously given using the assignment scheme found in usual Hoare techniques . Focusing on the following bit of code contained in our list of instructions , the variable assignmet code assigning $ <var:h2> * <var:K> $ into $ <var:h2>$ . This moves the precondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> \} $ toward $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> \} $ . Honing in on the upcoming command seen in the list of instructions , we see the environment update code yielding $ <var:h2> * <var:K> $ as $ <var:h2>$ . This transfers the precondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> \} $ as the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment scheme defined by typical Hoare techniques . Now , we have the variable assignmet code giving $ <nat:9> $ into $ <var:h3>$ . This advances the precondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \} $ as $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:h3> = <nat:9> \} $ . Following , we see the variable update code \verb | <var:h3> := <var:h3> * <var:K> ; | . This line moves the precondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:h3> = <nat:9> \} $ as the postcondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:h3> = <nat:9> * <var:e> \} $ . This is known to be sound through the assignment scheme given in usual Hoare logic . Considering the following step found in our code , we have the environment update command binding $ <var:h3> * <var:K> $ into $ <var:h3>$ . This statement forwards the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:h3> = <nat:9> * <var:e> \} $ into the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:h3> = <nat:9> * <var:e> ^ <nat:2> \} $ . Immediately after , the command \verb | <var:h3> := <var:h3> * <var:K> ; | . This advances $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:h3> = <nat:9> * <var:e> ^ <nat:2> \} $ to $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:h3> = <nat:9> * <var:e> ^ <nat:3> \} $ . Focusing on the upcoming statement in the set of instructions , the variable assignmet code yielding $ <var:h3> $ as $ <var:M>$ . This statement takes the precondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:h3> = <nat:9> * <var:e> ^ <nat:3> \} $ as the postcondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:M> = <nat:9> * <var:e> ^ <nat:3> \} $ . This is deduced using the assignment inference rule given in usual Hoare reasoning . Jumping to the subsequent command seen in our set of commands , the variable binding statement \verb | <var:M> := <var:M> + <var:h2> ; | . This forwards $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:h2> = <nat:2> * <var:e> ^ <nat:2> \land <var:M> = <nat:9> * <var:e> ^ <nat:3> \} $ toward the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> \} $ . Focusing on the next step contained in our program , the assignment line yielding $ <var:M> + <var:h1> $ to $ <var:M>$ . This code forwards the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:h1> = <nat:9> * <var:e> \land <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> \} $ toward the condition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} $ . This is given by the assignment rule from standard Hoare techniques . Advancing to the next step , we have the statement giving $ <var:M> + <var:h0$ toward $ <var:M>$ . This statement takes the precondition $ \{ <var:K> = <var:e> \land <var:h0> = <nat:7> \land <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} $ to the condition $ \{ <var:K> = <var:e> \land <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h0> := <nat:7> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:K> ; <var:h2> := <nat:2> ; <var:h2> := <var:h2> * <var:K> ; <var:h2> := <var:h2> * <var:K> ; <var:h3> := <nat:9> ; <var:h3> := <var:h3> * <var:K> ; <var:h3> := <var:h3> * <var:K> ; <var:h3> := <var:h3> * <var:K> ; <var:M> := <var:h3> ; <var:M> := <var:M> + <var:h2> ; <var:M> := <var:M> + <var:h1> ; <var:M> := <var:M> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:K> = <var:e> }} <def:poly> {{ <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:h2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:h2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:h2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:h2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:h3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:h2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:h2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:h2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:h2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:M> = <nat:9> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:9> * <var:e> /\ <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:h0> = <nat:7> /\ <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:M> = <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 