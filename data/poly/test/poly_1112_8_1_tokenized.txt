\begin{document} \begin{theorem} Let the following program as follows \begin{verbatim} <var:e1> := <var:z> ; <var:e2> := <var:e1> * <var:z> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:5> ; <var:e2> := <var:e2> * <nat:1> ; <var:W> := <var:e2> <var:W> := <var:W> + <var:e1> <var:W> := <var:W> + <var:e0> \end{verbatim} Given , given all natural numbers $ <var:f> $ , that we have $ <var:z> = <var:f> $ prior to evaluating our series of commands it follows that $ <var:W> = <nat:1> \times <var:f> ^ <nat:2> + <nat:5> \times <var:f> + <nat:9> $ . \end{theorem} \begin{proof} Using typical Hoare techniques produces : \begin{eqnarray} \{ <var:z> = <var:f> \} \\ <var:e1> := <var:z> ; \\ \{ <var:z> = <var:f> \land <var:e1> = <var:f> \} \\ <var:e2> := <var:e1> * <var:z> ; \\ \{ <var:z> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:z> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e0> = <nat:9> \} \\ <var:e1> := <var:e1> * <nat:5> ; \\ \{ <var:z> = <var:f> \land <var:e1> = <nat:5> * <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e0> = <nat:9> \} \\ <var:e2> := <var:e2> * <nat:1> ; \\ \{ <var:z> = <var:f> \land <var:e1> = <nat:5> * <var:f> \land <var:e2> = <nat:1> * <var:f> ^ <nat:2> \land <var:e0> = <nat:9> \} \\ <var:W> := <var:e2> \\ \{ <var:z> = <var:f> \land <var:e1> = <nat:5> * <var:f> \land <var:e0> = <nat:9> \land <var:W> = <nat:1> * <var:f> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:e1> \\ \{ <var:z> = <var:f> \land <var:e0> = <nat:9> \land <var:W> = <nat:1> * <var:f> ^ <nat:2> + <nat:5> * <var:f> \} \\ <var:W> := <var:W> + <var:e0> \\ \{ <var:z> = <var:f> \land <var:W> = <nat:1> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:9> \} \end{eqnarray} Considering the preceding argument , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:z> = <var:f> }} <var:e1> := <var:z> ; <var:e2> := <var:e1> * <var:z> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:5> ; <var:e2> := <var:e2> * <nat:1> ; <var:W> := <var:e2> <var:W> := <var:W> + <var:e1> <var:W> := <var:W> + <var:e0> {{ <var:W> = <nat:1> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:e1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:e1> = <nat:5> * <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:e1> = <nat:5> * <var:f> /\ <var:e2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:e1> = <nat:5> * <var:f> /\ <var:e0> = <nat:9> /\ <var:W> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:e0> = <nat:9> /\ <var:W> = <nat:1> * <var:f> ^ <nat:2> + <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:W> = <nat:1> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 