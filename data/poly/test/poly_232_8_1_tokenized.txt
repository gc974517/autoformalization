\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:C> ; <var:z2> := <var:z1> * <var:C> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:2> ; <var:z2> := <var:z2> * <nat:3> ; <var:T> := <var:z2> <var:T> := <var:T> + <var:z1> <var:T> := <var:T> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:C> = <var:y> $ before running this series of commands then we see $ <var:T> = <nat:3> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:3> $ when series of commands terminates . \end{theorem} \begin{proof} The flow of logic for this code is accomplished through Hoare techniques . Honing in on the next lines of codefound in the series of instructions , we see \verb | { <var:C> = <var:y> } <var:z1> := <var:C> { <var:C> = <var:y> \land <var:z1> = <var:y> } | , \verb | { <var:C> = <var:y> \land <var:z1> = <var:y> } <var:z2> := <var:z1> * <var:C> { <var:C> = <var:y> \land <var:z1> = <var:y> \land <var:z2> = <var:y> ^ <nat:2> } | , \verb | { <var:C> = <var:y> \land <var:z1> = <var:y> \land <var:z2> = <var:y> ^ <nat:2> } <var:z0> := <nat:3> { <var:C> = <var:y> \land <var:z1> = <var:y> \land <var:z2> = <var:y> ^ <nat:2> \land <var:z0> = <nat:3> } | , \verb | { <var:C> = <var:y> \land <var:z1> = <var:y> \land <var:z2> = <var:y> ^ <nat:2> \land <var:z0> = <nat:3> } <var:z1> := <var:z1> * <nat:2> { <var:C> = <var:y> \land <var:z1> = <nat:2> \cdot <var:y> \land <var:z2> = <var:y> ^ <nat:2> \land <var:z0> = <nat:3> } | , \verb | { <var:C> = <var:y> \land <var:z1> = <nat:2> \cdot <var:y> \land <var:z2> = <var:y> ^ <nat:2> \land <var:z0> = <nat:3> } <var:z2> := <var:z2> * <nat:3> { <var:C> = <var:y> \land <var:z1> = <nat:2> \cdot <var:y> \land <var:z2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:z0> = <nat:3> } | , \verb | { <var:C> = <var:y> \land <var:z1> = <nat:2> \cdot <var:y> \land <var:z2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:z0> = <nat:3> } <var:T> := <var:z2{ <var:C> = <var:y> \land <var:z1> = <nat:2> \cdot <var:y> \land <var:z0> = <nat:3> \land <var:T> = <nat:3> \cdot <var:y> ^ <nat:2> } | , \verb | { <var:C> = <var:y> \land <var:z1> = <nat:2> \cdot <var:y> \land <var:z0> = <nat:3> \land <var:T> = <nat:3> \cdot <var:y> ^ <nat:2> } <var:T> := <var:T> + <var:z1{ <var:C> = <var:y> \land <var:z0> = <nat:3> \land <var:T> = <nat:3> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> } | and \verb | { <var:C> = <var:y> \land <var:z0> = <nat:3> \land <var:T> = <nat:3> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> } <var:T> := <var:T> + <var:z0{ <var:C> = <var:y> \land <var:T> = <nat:3> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z1> := <var:C> ; <var:z2> := <var:z1> * <var:C> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:2> ; <var:z2> := <var:z2> * <nat:3> ; <var:T> := <var:z2> <var:T> := <var:T> + <var:z1> <var:T> := <var:T> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:C> = <var:y> }} <def:poly> {{ <var:T> = <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z1> = <var:y> /\ <var:z2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z1> = <var:y> /\ <var:z2> = <var:y> ^ <nat:2> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z1> = <nat:2> * <var:y> /\ <var:z2> = <var:y> ^ <nat:2> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z1> = <nat:2> * <var:y> /\ <var:z2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z1> = <nat:2> * <var:y> /\ <var:z0> = <nat:3> /\ <var:T> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z0> = <nat:3> /\ <var:T> = <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:T> = <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 