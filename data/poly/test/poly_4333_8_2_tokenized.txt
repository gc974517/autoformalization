\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:P> := <nat:3> ; <var:P> := <nat:2> + <var:P> * <var:p> ; <var:P> := <nat:2> + <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> ; <var:P> := <nat:1> + <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> ; <var:P> := <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:p> = <var:c> $ prior to the execution of our code segment then we see $ <var:P> = <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands is given by Hoare reasoning . Shifting focus toward the proceeding commands in the program , we see \verb | { <var:p> = <var:c> } <var:P> := <nat:3> { <var:p> = <var:c> \land <var:P> = <nat:3> } | , \verb | { <var:p> = <var:c> \land <var:P> = <nat:3> } <var:P> := <nat:2> + <var:P> * <var:p> { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> + <nat:2> } | , \verb | { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> + <nat:2> } <var:P> := <nat:2> + <var:P> * <var:p> { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:2> } | , \verb | { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:2> } <var:P> := <nat:4> + <var:P> * <var:p> { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:4> } | , \verb | { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:4> } <var:P> := <nat:1> + <var:P> * <var:p> { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:1> } | and \verb | { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:1> } <var:P> := <nat:4> + <var:P> * <var:p> { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:4> } | . This is ensured using the rule of usual Hoare reasoning . Focusing on the proceeding statements seen in our code , we see \verb | { <var:p> = <var:c> } <var:P> := <nat:3> { <var:p> = <var:c> \land <var:P> = <nat:3> } | and \verb | { <var:p> = <var:c> \land <var:P> = <nat:3> } <var:P> := <nat:2> + <var:P> * <var:p> { <var:p> = <var:c> \land <var:P> = <nat:3> \times <var:c> + <nat:2> } | . This is known to be sound through the binding scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:3> ; <var:P> := <nat:2> + <var:P> * <var:p> ; <var:P> := <nat:2> + <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> ; <var:P> := <nat:1> + <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> ; <var:P> := <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:p> = <var:c> }} <def:poly> {{ <var:P> = <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:P> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:P> = <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:P> = <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:P> = <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:P> = <nat:3> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:P> = <nat:3> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:P> = <nat:3> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:P> = <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 