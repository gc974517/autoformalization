\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:9> ; <var:Y1> := <nat:6> ; <var:Y1> := <var:Y1> * <var:W> ; <var:T> := <var:Y1> ; <var:T> := <var:T> + <var:Y0> \end{verbatim} Allow that we have $ <var:W> = <var:z> $ ( given $ <var:z> $ ) prior to evaluating the program , then $ <var:T> = <nat:6> \times <var:z> + <nat:9> $ . \end{theorem} \begin{proof} Notice the below decorated set of commands . \begin{eqnarray} \{ <var:W> = <var:z> \} \\ <var:Y0> := <nat:9> ; \\ \{ <var:W> = <var:z> \land <var:Y0> = <nat:9> \} \\ <var:Y1> := <nat:6> ; \\ \{ <var:W> = <var:z> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:6> \} \\ <var:Y1> := <var:Y1> * <var:W> ; \\ \{ <var:W> = <var:z> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:6> \times <var:z> \} \\ <var:T> := <var:Y1> ; \\ \{ <var:W> = <var:z> \land <var:Y0> = <nat:9> \land <var:T> = <nat:6> \times <var:z> \} \\ <var:T> := <var:T> + <var:Y0> \\ \{ <var:W> = <var:z> \land <var:T> = <nat:6> \times <var:z> + <nat:9> \} \end{eqnarray} Using typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:W> = <var:z> }} <var:Y0> := <nat:9> ; <var:Y1> := <nat:6> ; <var:Y1> := <var:Y1> * <var:W> ; <var:T> := <var:Y1> ; <var:T> := <var:T> + <var:Y0> {{ <var:T> = <nat:6> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:Y0> = <nat:9> /\ <var:Y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:Y0> = <nat:9> /\ <var:Y1> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:Y0> = <nat:9> /\ <var:T> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:T> = <nat:6> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 