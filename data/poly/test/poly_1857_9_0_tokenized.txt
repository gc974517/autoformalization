\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:1> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:h> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:h> ; <var:K2> := <var:K2> * <var:h> ; <var:E> := <var:K2> ; <var:E> := <var:E> + <var:K1> ; <var:E> := <var:E> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume , given any positive numbers $ <var:F> $ , it to be that $ <var:h> = <var:F> $ prior to running this series of commands , then we see $ <var:E> = <nat:1> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + <nat:1> $ after series of commands has terminated . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:h> = <var:F> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:h> = <var:F> \land <var:K0> = <nat:1> \} \\ <var:K1> := <nat:2> ; \\ \{ <var:h> = <var:F> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \} \\ <var:K1> := <var:K1> * <var:h> ; \\ \{ <var:h> = <var:F> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:F> \} \\ <var:K2> := <nat:1> ; \\ \{ <var:h> = <var:F> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:F> \land <var:K2> = <nat:1> \} \\ <var:K2> := <var:K2> * <var:h> ; \\ \{ <var:h> = <var:F> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:F> \land <var:K2> = <nat:1> \cdot <var:F> \} \\ <var:K2> := <var:K2> * <var:h> ; \\ \{ <var:h> = <var:F> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:F> \land <var:K2> = <nat:1> \cdot <var:F> ^ <nat:2> \} \\ <var:E> := <var:K2> ; \\ \{ <var:h> = <var:F> \land <var:K0> = <nat:1> \land <var:K1> = <nat:2> \cdot <var:F> \land <var:E> = <nat:1> \cdot <var:F> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:K1> ; \\ \{ <var:h> = <var:F> \land <var:K0> = <nat:1> \land <var:E> = <nat:1> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> \} \\ <var:E> := <var:E> + <var:K0> \\ \{ <var:h> = <var:F> \land <var:E> = <nat:1> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:1> \} \end{eqnarray} Hence , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:1> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:h> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:h> ; <var:K2> := <var:K2> * <var:h> ; <var:E> := <var:K2> ; <var:E> := <var:E> + <var:K1> ; <var:E> := <var:E> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:h> = <var:F> }} <def:poly> {{ <var:E> = <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:F> /\ <var:K2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:F> /\ <var:K2> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:F> /\ <var:K2> = <nat:1> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:2> * <var:F> /\ <var:E> = <nat:1> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:K0> = <nat:1> /\ <var:E> = <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:E> = <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 