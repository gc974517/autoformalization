\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:T> ; <var:m> := <var:F1> ; <var:m> := <var:m> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:T> = <var:C> $ --- taking $ <var:C> $ --- ahead of running our series of commands , it holds that we have $ <var:m> = <nat:6> * <var:C> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:C> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:T> = <var:C> \land <var:F0> = <nat:1> \} \\ <var:F1> := <nat:6> ; \\ \{ <var:T> = <var:C> \land <var:F0> = <nat:1> \land <var:F1> = <nat:6> \} \\ <var:F1> := <var:F1> * <var:T> ; \\ \{ <var:T> = <var:C> \land <var:F0> = <nat:1> \land <var:F1> = <nat:6> \times <var:C> \} \\ <var:m> := <var:F1> ; \\ \{ <var:T> = <var:C> \land <var:F0> = <nat:1> \land <var:m> = <nat:6> \times <var:C> \} \\ <var:m> := <var:m> + <var:F0> \\ \{ <var:T> = <var:C> \land <var:m> = <nat:6> \times <var:C> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:1> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:T> ; <var:m> := <var:F1> ; <var:m> := <var:m> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:T> = <var:C> }} <def:poly> {{ <var:m> = <nat:6> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:F0> = <nat:1> /\ <var:m> = <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:m> = <nat:6> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 