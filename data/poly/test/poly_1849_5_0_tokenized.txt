\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:9> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:M> ; <var:K> := <var:f1> ; <var:K> := <var:K> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Allow , given any natural numbers $ <var:t> $ , it to be that $ <var:M> = <var:t> $ before executing our set of instructions it follows that we see $ <var:K> = <nat:7> * <var:t> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:t> \} \\ <var:f0> := <nat:9> ; \\ \{ <var:M> = <var:t> \land <var:f0> = <nat:9> \} \\ <var:f1> := <nat:7> ; \\ \{ <var:M> = <var:t> \land <var:f0> = <nat:9> \land <var:f1> = <nat:7> \} \\ <var:f1> := <var:f1> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:f0> = <nat:9> \land <var:f1> = <nat:7> \cdot <var:t> \} \\ <var:K> := <var:f1> ; \\ \{ <var:M> = <var:t> \land <var:f0> = <nat:9> \land <var:K> = <nat:7> \cdot <var:t> \} \\ <var:K> := <var:K> + <var:f0> \\ \{ <var:M> = <var:t> \land <var:K> = <nat:7> \cdot <var:t> + <nat:9> \} \end{eqnarray} Utilizing Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:9> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:M> ; <var:K> := <var:f1> ; <var:K> := <var:K> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:M> = <var:t> }} <def:poly> {{ <var:K> = <nat:7> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:f0> = <nat:9> /\ <var:K> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:K> = <nat:7> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 