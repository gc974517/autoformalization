\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:1> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:C> ; <var:q> := <var:d1> ; <var:q> := <var:q> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:C> = <var:t> $ prior to the evaluation of this code segment , then we see $ <var:q> = <nat:5> * <var:t> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this series of commands can be accomplished with Hoare techniques . Looking at the following commands in our code , we see \begin{verbatim} { <var:C> = <var:t> } <var:d0> := <nat:1> { <var:C> = <var:t> \land <var:d0> = <nat:1> } { <var:C> = <var:t> \land <var:d0> = <nat:1> } <var:d1> := <nat:5> { <var:C> = <var:t> \land <var:d0> = <nat:1> \land <var:d1> = <nat:5> } { <var:C> = <var:t> \land <var:d0> = <nat:1> \land <var:d1> = <nat:5> } <var:d1> := <var:d1> * <var:C> { <var:C> = <var:t> \land <var:d0> = <nat:1> \land <var:d1> = <nat:5> * <var:t> } { <var:C> = <var:t> \land <var:d0> = <nat:1> \land <var:d1> = <nat:5> * <var:t> } <var:q> := <var:d1> { <var:C> = <var:t> \land <var:d0> = <nat:1> \land <var:q> = <nat:5> * <var:t> } { <var:C> = <var:t> \land <var:d0> = <nat:1> \land <var:q> = <nat:5> * <var:t> } <var:q> := <var:q> + <var:d0{ <var:C> = <var:t> \land <var:q> = <nat:5> * <var:t> + <nat:1> } \end{verbatim} This is deduced using the environment update rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:C> ; <var:q> := <var:d1> ; <var:q> := <var:q> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:C> = <var:t> }} <def:poly> {{ <var:q> = <nat:5> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:d0> = <nat:1> /\ <var:q> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:q> = <nat:5> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 