\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:5> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:f> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:f> ; <var:E2> := <var:E2> * <var:f> ; <var:t> := <var:E2> ; <var:t> := <var:t> + <var:E1> ; <var:t> := <var:t> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Given ( letting $ <var:r> \in \mathbb{N} $ ) that $ <var:f> = <var:r> $ before evaluating the segment of code it holds that we see $ <var:t> = <nat:1> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:r> \} \\ <var:E0> := <nat:5> ; \\ \{ <var:f> = <var:r> \land <var:E0> = <nat:5> \} \\ <var:E1> := <nat:1> ; \\ \{ <var:f> = <var:r> \land <var:E0> = <nat:5> \land <var:E1> = <nat:1> \} \\ <var:E1> := <var:E1> * <var:f> ; \\ \{ <var:f> = <var:r> \land <var:E0> = <nat:5> \land <var:E1> = <nat:1> \times <var:r> \} \\ <var:E2> := <nat:1> ; \\ \{ <var:f> = <var:r> \land <var:E0> = <nat:5> \land <var:E1> = <nat:1> \times <var:r> \land <var:E2> = <nat:1> \} \\ <var:E2> := <var:E2> * <var:f> ; \\ \{ <var:f> = <var:r> \land <var:E0> = <nat:5> \land <var:E1> = <nat:1> \times <var:r> \land <var:E2> = <nat:1> \times <var:r> \} \\ <var:E2> := <var:E2> * <var:f> ; \\ \{ <var:f> = <var:r> \land <var:E0> = <nat:5> \land <var:E1> = <nat:1> \times <var:r> \land <var:E2> = <nat:1> \times <var:r> ^ <nat:2> \} \\ <var:t> := <var:E2> ; \\ \{ <var:f> = <var:r> \land <var:E0> = <nat:5> \land <var:E1> = <nat:1> \times <var:r> \land <var:t> = <nat:1> \times <var:r> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:E1> ; \\ \{ <var:f> = <var:r> \land <var:E0> = <nat:5> \land <var:t> = <nat:1> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> \} \\ <var:t> := <var:t> + <var:E0> \\ \{ <var:f> = <var:r> \land <var:t> = <nat:1> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:5> \} \end{eqnarray} Applying Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:5> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:f> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:f> ; <var:E2> := <var:E2> * <var:f> ; <var:t> := <var:E2> ; <var:t> := <var:t> + <var:E1> ; <var:t> := <var:t> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:f> = <var:r> }} <def:poly> {{ <var:t> = <nat:1> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:1> * <var:r> /\ <var:E2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:1> * <var:r> /\ <var:E2> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:1> * <var:r> /\ <var:E2> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:1> * <var:r> /\ <var:t> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:E0> = <nat:5> /\ <var:t> = <nat:1> * <var:r> ^ <nat:2> + <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:t> = <nat:1> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 