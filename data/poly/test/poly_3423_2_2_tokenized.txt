\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:K> := <nat:1> ; <var:K> := <nat:1> + <var:K> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Allow --- taking positive coefficients $ <var:z> $ --- that $ <var:B> = <var:z> $ ahead of evaluating this code segment , it holds that we see $ <var:K> = <nat:1> \times <var:z> + <nat:1> $ after program has exited . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:B> = <var:z> \} \\ <var:K> := <nat:1> ; \\ \{ <var:B> = <var:z> \land <var:K> = <nat:1> \} \\ <var:K> := <nat:1> + <var:K> * <var:B> \\ \{ <var:B> = <var:z> \land <var:K> = <nat:1> * <var:z> + <nat:1> \} \end{eqnarray} As a result , the code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:1> ; <var:K> := <nat:1> + <var:K> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:B> = <var:z> }} <def:poly> {{ <var:K> = <nat:1> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:K> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:K> = <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 