\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a1> := <var:E> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:2> ; <var:q> := <var:a1> <var:q> := <var:q> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:E> = <var:A> $ ahead of the evaluation of the series of commands , it must be that $ <var:q> = <nat:2> * <var:A> + <nat:3> $ when program executes . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:E> = <var:A> \} \\ <var:a1> := <var:E> ; \\ \{ <var:E> = <var:A> \land <var:a1> = <var:A> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:E> = <var:A> \land <var:a1> = <var:A> \land <var:a0> = <nat:3> \} \\ <var:a1> := <var:a1> * <nat:2> ; \\ \{ <var:E> = <var:A> \land <var:a1> = <nat:2> \times <var:A> \land <var:a0> = <nat:3> \} \\ <var:q> := <var:a1> \\ \{ <var:E> = <var:A> \land <var:a0> = <nat:3> \land <var:q> = <nat:2> \times <var:A> \} \\ <var:q> := <var:q> + <var:a0> \\ \{ <var:E> = <var:A> \land <var:q> = <nat:2> \times <var:A> + <nat:3> \} \end{eqnarray} Thusly , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:E> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:2> ; <var:q> := <var:a1> <var:q> := <var:q> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:E> = <var:A> }} <def:poly> {{ <var:q> = <nat:2> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:a1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:a1> = <var:A> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:a1> = <nat:2> * <var:A> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:a0> = <nat:3> /\ <var:q> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:q> = <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 