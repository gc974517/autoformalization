\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:T1> := <var:J> ; <var:T2> := <var:T1> * <var:J> ; <var:T3> := <var:T2> * <var:J> ; <var:T4> := <var:T3> * <var:J> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:1> ; <var:T3> := <var:T3> * <nat:1> ; <var:T4> := <var:T4> * <nat:6> ; <var:y> := <var:T4> <var:y> := <var:y> + <var:T3> <var:y> := <var:y> + <var:T2> <var:y> := <var:y> + <var:T1> <var:y> := <var:y> + <var:T0> \end{verbatim} Assume that $ <var:J> = <var:L> $ prior to interpreting this segment of code it follows that we have $ <var:y> = <nat:6> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is clear by Hoare techniques . Going forward , the statement giving $ <var:J> $ to $ <var:T1>$ . This transfers $ \{ <var:J> = <var:L> \} $ into the condition $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \} $ . This is deduced through the assignment rule from typical Hoare reasoning . Shifting focus toward the proceeding piece of code in the program , the variable binding line yielding $ <var:T1> * <var:J> $ as $ <var:T2>$ . This forwards the precondition $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \} $ into the postcondition $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \land <var:T2> = <var:L> ^ <nat:2> \} $ . This is rigorously given by the assignment inference rule obtained from usual Hoare techniques . Moving forward , we see the environment update statement \verb | <var:T3> := <var:T2> * <var:J> ; | . This code moves the condition $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \land <var:T2> = <var:L> ^ <nat:2> \} $ to $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \land <var:T2> = <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \} $ . This is given with the assignment law given by standard Hoare reasoning . Moving on to the subsequent command contained in the set of instructions , we see the variable assignmet command \verb | <var:T4> := <var:T3> * <var:J> ; | . This command advances the condition $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \land <var:T2> = <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \land <var:T2> = <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \} $ . Shifting focus toward the following statement contained in the series of commands , the assignment line \verb | <var:T0> := <nat:2> ; | . This line redefines $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \land <var:T2> = <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \} $ toward the postcondition $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \land <var:T2> = <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . Next , we have the variable update statement \verb | <var:T1> := <var:T1> * <nat:3> ; | . This forwards $ \{ <var:J> = <var:L> \land <var:T1> = <var:L> \land <var:T2> = <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ toward the postcondition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . Moving on , we see the command \verb | <var:T2> := <var:T2> * <nat:1> ; | . This line moves the condition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ to $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . This is guaranteed using the assignment rule of standard Hoare logic . Following , we have the binding command \verb | <var:T3> := <var:T3> * <nat:1> ; | . This advances $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T3> = <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ into the postcondition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T3> = <nat:1> \times <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . Paying attention to the following bit of code found in the code segment , the command \verb | <var:T4> := <var:T4> * <nat:6> ; | . This takes the condition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T3> = <nat:1> \times <var:L> ^ <nat:3> \land <var:T4> = <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ as the condition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T3> = <nat:1> \times <var:L> ^ <nat:3> \land <var:T4> = <nat:6> \times <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . Immediately following , we have the variable update statement letting $ <var:T4$ into $ <var:y>$ . This takes the precondition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T3> = <nat:1> \times <var:L> ^ <nat:3> \land <var:T4> = <nat:6> \times <var:L> ^ <nat:4> \land <var:T0> = <nat:2> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T3> = <nat:1> \times <var:L> ^ <nat:3> \land <var:T0> = <nat:2> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> \} $ . This is given by the assignment rule of usual Hoare reasoning . Moving on to the upcoming bit of code found in the segment of code , we have the variable binding code giving $ <var:y> + <var:T3$ to $ <var:y>$ . This advances the condition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T3> = <nat:1> \times <var:L> ^ <nat:3> \land <var:T0> = <nat:2> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> \} $ into the condition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T0> = <nat:2> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> \} $ . Focusing on the upcoming line of code seen in the series of commands , we see the variable assignmet line \verb | <var:y> := <var:y> + <var:T2> | . This moves the condition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T2> = <nat:1> \times <var:L> ^ <nat:2> \land <var:T0> = <nat:2> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> \} $ as $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T0> = <nat:2> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> \} $ . Honing in on the subsequent line contained in the code , we see the environment update line \verb | <var:y> := <var:y> + <var:T1> | . This forwards the condition $ \{ <var:J> = <var:L> \land <var:T1> = <nat:3> \times <var:L> \land <var:T0> = <nat:2> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> \} $ as the condition $ \{ <var:J> = <var:L> \land <var:T0> = <nat:2> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> \} $ . This is rigorously given by the assignment inference rule of standard Hoare reasoning . Moving onward , the binding command \verb | <var:y> := <var:y> + <var:T0> | . This statement transfers the condition $ \{ <var:J> = <var:L> \land <var:T0> = <nat:2> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> \} $ toward the postcondition $ \{ <var:J> = <var:L> \land <var:y> = <nat:6> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:2> \} $ . This is guaranteed through the assignment law of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <var:T4> : string := " <var:T4> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:J> = <var:L> }} <var:T1> := <var:J> ; <var:T2> := <var:T1> * <var:J> ; <var:T3> := <var:T2> * <var:J> ; <var:T4> := <var:T3> * <var:J> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:1> ; <var:T3> := <var:T3> * <nat:1> ; <var:T4> := <var:T4> * <nat:6> ; <var:y> := <var:T4> <var:y> := <var:y> + <var:T3> <var:y> := <var:y> + <var:T2> <var:y> := <var:y> + <var:T1> <var:y> := <var:y> + <var:T0> {{ <var:y> = <nat:6> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <var:L> /\ <var:T2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <var:L> /\ <var:T2> = <var:L> ^ <nat:2> /\ <var:T3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <var:L> /\ <var:T2> = <var:L> ^ <nat:2> /\ <var:T3> = <var:L> ^ <nat:3> /\ <var:T4> = <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <var:L> /\ <var:T2> = <var:L> ^ <nat:2> /\ <var:T3> = <var:L> ^ <nat:3> /\ <var:T4> = <var:L> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <nat:3> * <var:L> /\ <var:T2> = <var:L> ^ <nat:2> /\ <var:T3> = <var:L> ^ <nat:3> /\ <var:T4> = <var:L> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <nat:3> * <var:L> /\ <var:T2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:T3> = <var:L> ^ <nat:3> /\ <var:T4> = <var:L> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <nat:3> * <var:L> /\ <var:T2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:L> ^ <nat:3> /\ <var:T4> = <var:L> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <nat:3> * <var:L> /\ <var:T2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:L> ^ <nat:3> /\ <var:T4> = <nat:6> * <var:L> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <nat:3> * <var:L> /\ <var:T2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:L> ^ <nat:3> /\ <var:T0> = <nat:2> /\ <var:y> = <nat:6> * <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <nat:3> * <var:L> /\ <var:T2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:T0> = <nat:2> /\ <var:y> = <nat:6> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T1> = <nat:3> * <var:L> /\ <var:T0> = <nat:2> /\ <var:y> = <nat:6> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:T0> = <nat:2> /\ <var:y> = <nat:6> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:y> = <nat:6> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 