\begin{document} \begin{theorem} We define a code in \emph{Imp} : \begin{verbatim} <var:J> := <nat:3> ; <var:J> := <nat:1> + <var:J> * <var:K> ; <var:J> := <nat:3> + <var:J> * <var:K> \end{verbatim} Allowing it to hold that $ <var:K> = <var:t> $ before the execution of the segment of code it must be that we see $ <var:J> = <nat:3> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:3> $ after set of commands has finished executing . \end{theorem} \begin{proof} Notice this decorated code segment . \begin{eqnarray} \{ <var:K> = <var:t> \} \\ <var:J> := <nat:3> ; \\ \{ <var:K> = <var:t> \land <var:J> = <nat:3> \} \\ <var:J> := <nat:1> + <var:J> * <var:K> ; \\ \{ <var:K> = <var:t> \land <var:J> = <nat:3> \cdot <var:t> + <nat:1> \} \\ <var:J> := <nat:3> + <var:J> * <var:K> \\ \{ <var:K> = <var:t> \land <var:J> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:3> \} \end{eqnarray} The application of usual Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:K> = <var:t> }} <var:J> := <nat:3> ; <var:J> := <nat:1> + <var:J> * <var:K> ; <var:J> := <nat:3> + <var:J> * <var:K> {{ <var:J> = <nat:3> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:J> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:J> = <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:J> = <nat:3> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 