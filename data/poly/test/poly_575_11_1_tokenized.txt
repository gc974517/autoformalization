\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r0> := <nat:2> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:2> ; <var:r3> := <var:r3> * <nat:9> ; <var:e> := <var:r3> <var:e> := <var:e> + <var:r2> <var:e> := <var:e> + <var:r1> <var:e> := <var:e> + <var:r0> \end{verbatim} Assuming $ <var:o> = <var:W> $ --- for any positive integers $ <var:W> $ --- before evaluating our series of commands , it must be that we see $ <var:e> = <nat:9> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:2> $ once series of commands has finished . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:o> = <var:W> \} \\ <var:r1> := <var:o> ; \\ \{ <var:o> = <var:W> \land <var:r1> = <var:W> \} \\ <var:r2> := <var:r1> * <var:o> ; \\ \{ <var:o> = <var:W> \land <var:r1> = <var:W> \land <var:r2> = <var:W> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:o> ; \\ \{ <var:o> = <var:W> \land <var:r1> = <var:W> \land <var:r2> = <var:W> ^ <nat:2> \land <var:r3> = <var:W> ^ <nat:3> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:o> = <var:W> \land <var:r1> = <var:W> \land <var:r2> = <var:W> ^ <nat:2> \land <var:r3> = <var:W> ^ <nat:3> \land <var:r0> = <nat:2> \} \\ <var:r1> := <var:r1> * <nat:1> ; \\ \{ <var:o> = <var:W> \land <var:r1> = <nat:1> \cdot <var:W> \land <var:r2> = <var:W> ^ <nat:2> \land <var:r3> = <var:W> ^ <nat:3> \land <var:r0> = <nat:2> \} \\ <var:r2> := <var:r2> * <nat:2> ; \\ \{ <var:o> = <var:W> \land <var:r1> = <nat:1> \cdot <var:W> \land <var:r2> = <nat:2> \cdot <var:W> ^ <nat:2> \land <var:r3> = <var:W> ^ <nat:3> \land <var:r0> = <nat:2> \} \\ <var:r3> := <var:r3> * <nat:9> ; \\ \{ <var:o> = <var:W> \land <var:r1> = <nat:1> \cdot <var:W> \land <var:r2> = <nat:2> \cdot <var:W> ^ <nat:2> \land <var:r3> = <nat:9> \cdot <var:W> ^ <nat:3> \land <var:r0> = <nat:2> \} \\ <var:e> := <var:r3> \\ \{ <var:o> = <var:W> \land <var:r1> = <nat:1> \cdot <var:W> \land <var:r2> = <nat:2> \cdot <var:W> ^ <nat:2> \land <var:r0> = <nat:2> \land <var:e> = <nat:9> \cdot <var:W> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:r2> \\ \{ <var:o> = <var:W> \land <var:r1> = <nat:1> \cdot <var:W> \land <var:r0> = <nat:2> \land <var:e> = <nat:9> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:r1> \\ \{ <var:o> = <var:W> \land <var:r0> = <nat:2> \land <var:e> = <nat:9> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} \\ <var:e> := <var:e> + <var:r0> \\ \{ <var:o> = <var:W> \land <var:e> = <nat:9> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:2> \} \end{eqnarray} Hence , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:o> = <var:W> }} <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r0> := <nat:2> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:2> ; <var:r3> := <var:r3> * <nat:9> ; <var:e> := <var:r3> <var:e> := <var:e> + <var:r2> <var:e> := <var:e> + <var:r1> <var:e> := <var:e> + <var:r0> {{ <var:e> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <var:W> /\ <var:r2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <var:W> /\ <var:r2> = <var:W> ^ <nat:2> /\ <var:r3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <var:W> /\ <var:r2> = <var:W> ^ <nat:2> /\ <var:r3> = <var:W> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <nat:1> * <var:W> /\ <var:r2> = <var:W> ^ <nat:2> /\ <var:r3> = <var:W> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <nat:1> * <var:W> /\ <var:r2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:r3> = <var:W> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <nat:1> * <var:W> /\ <var:r2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:r3> = <nat:9> * <var:W> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <nat:1> * <var:W> /\ <var:r2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:r0> = <nat:2> /\ <var:e> = <nat:9> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r1> = <nat:1> * <var:W> /\ <var:r0> = <nat:2> /\ <var:e> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:r0> = <nat:2> /\ <var:e> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:e> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 