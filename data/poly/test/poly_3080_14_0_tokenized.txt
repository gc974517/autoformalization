\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:o0> := <nat:9> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:u> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:u> ; <var:o2> := <var:o2> * <var:u> ; <var:o3> := <nat:3> ; <var:o3> := <var:o3> * <var:u> ; <var:o3> := <var:o3> * <var:u> ; <var:o3> := <var:o3> * <var:u> ; <var:j> := <var:o3> ; <var:j> := <var:j> + <var:o2> ; <var:j> := <var:j> + <var:o1> ; <var:j> := <var:j> + <var:o0> \end{verbatim} Assuming $ <var:u> = <var:O> $ --- assuming some whole numbers $ <var:O> $ --- ahead of evaluating the set of commands it follows that $ <var:j> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:O> \} \\ <var:o0> := <nat:9> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \} \end{eqnarray} Advancing executing the series of commands produces : \begin{eqnarray} <var:o1> := <nat:8> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \} \\ <var:o1> := <var:o1> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \} \\ <var:o2> := <nat:5> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:o2> = <nat:5> \} \\ <var:o2> := <var:o2> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:o2> = <nat:5> \cdot <var:O> \} \\ <var:o2> := <var:o2> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:o2> = <nat:5> \cdot <var:O> ^ <nat:2> \} \\ <var:o3> := <nat:3> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:o2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:3> \} \\ <var:o3> := <var:o3> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:o2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:3> \cdot <var:O> \} \\ <var:o3> := <var:o3> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:o2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:3> \cdot <var:O> ^ <nat:2> \} \\ <var:o3> := <var:o3> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:o2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:3> \cdot <var:O> ^ <nat:3> \} \\ <var:j> := <var:o3> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:o2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:j> = <nat:3> \cdot <var:O> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:o2> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:o1> = <nat:8> \cdot <var:O> \land <var:j> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:o1> ; \\ \{ <var:u> = <var:O> \land <var:o0> = <nat:9> \land <var:j> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> + <nat:8> \cdot <var:O> \} \\ <var:j> := <var:j> + <var:o0> \\ \{ <var:u> = <var:O> \land <var:j> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> + <nat:8> \cdot <var:O> + <nat:9> \} \end{eqnarray} Applying standard Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:u> = <var:O> }} <var:o0> := <nat:9> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:u> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:u> ; <var:o2> := <var:o2> * <var:u> ; <var:o3> := <nat:3> ; <var:o3> := <var:o3> * <var:u> ; <var:o3> := <var:o3> * <var:u> ; <var:o3> := <var:o3> * <var:u> ; <var:j> := <var:o3> ; <var:j> := <var:j> + <var:o2> ; <var:j> := <var:j> + <var:o1> ; <var:j> := <var:j> + <var:o0> {{ <var:j> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:o2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:o2> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:o2> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:o2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:o3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:o2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:o2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:o2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:o2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:j> = <nat:3> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:8> * <var:O> /\ <var:j> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:o0> = <nat:9> /\ <var:j> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:j> = <nat:3> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 