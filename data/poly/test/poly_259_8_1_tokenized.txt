\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:B> ; <var:O2> := <var:O1> * <var:B> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:8> ; <var:O2> := <var:O2> * <nat:1> ; <var:H> := <var:O2> <var:H> := <var:H> + <var:O1> <var:H> := <var:H> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Allow it to be that $ <var:B> = <var:f> $ before interpreting our series of commands it must be that we see $ <var:H> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:8> \cdot <var:f> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this code can be shown with standard Hoare logic . Further , we see \[ \begin{tabular} {rcl} \{ <var:B> = <var:f> \} & <var:O1> := <var:B> & \{ <var:B> = <var:f> \land <var:O1> = <var:f> \} \\ \{ <var:B> = <var:f> \land <var:O1> = <var:f> \} & <var:O2> := <var:O1> * <var:B> & \{ <var:B> = <var:f> \land <var:O1> = <var:f> \land <var:O2> = <var:f> ^ <nat:2> \} \\ \{ <var:B> = <var:f> \land <var:O1> = <var:f> \land <var:O2> = <var:f> ^ <nat:2> \} & <var:O0> := <nat:2> & \{ <var:B> = <var:f> \land <var:O1> = <var:f> \land <var:O2> = <var:f> ^ <nat:2> \land <var:O0> = <nat:2> \} \\ \{ <var:B> = <var:f> \land <var:O1> = <var:f> \land <var:O2> = <var:f> ^ <nat:2> \land <var:O0> = <nat:2> \} & <var:O1> := <var:O1> * <nat:8> & \{ <var:B> = <var:f> \land <var:O1> = <nat:8> \times <var:f> \land <var:O2> = <var:f> ^ <nat:2> \land <var:O0> = <nat:2> \} \\ \{ <var:B> = <var:f> \land <var:O1> = <nat:8> \times <var:f> \land <var:O2> = <var:f> ^ <nat:2> \land <var:O0> = <nat:2> \} & <var:O2> := <var:O2> * <nat:1> & \{ <var:B> = <var:f> \land <var:O1> = <nat:8> \times <var:f> \land <var:O2> = <nat:1> \times <var:f> ^ <nat:2> \land <var:O0> = <nat:2> \} \end{tabular} This is ensured through the binding inference rule of standard Hoare reasoning . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:f> \} & <var:O1> := <var:B> & \{ <var:B> = <var:f> \land <var:O1> = <var:f> \} \\ \{ <var:B> = <var:f> \land <var:O1> = <var:f> \} & <var:O2> := <var:O1> * <var:B> & \{ <var:B> = <var:f> \land <var:O1> = <var:f> \land <var:O2> = <var:f> ^ <nat:2> \} \\ \{ <var:B> = <var:f> \land <var:O1> = <var:f> \land <var:O2> = <var:f> ^ <nat:2> \} & <var:O0> := <nat:2> & \{ <var:B> = <var:f> \land <var:O1> = <var:f> \land <var:O2> = <var:f> ^ <nat:2> \land <var:O0> = <nat:2> \} \end{tabular} This is ensured using the rule in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O1> := <var:B> ; <var:O2> := <var:O1> * <var:B> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:8> ; <var:O2> := <var:O2> * <nat:1> ; <var:H> := <var:O2> <var:H> := <var:H> + <var:O1> <var:H> := <var:H> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:B> = <var:f> }} <def:poly> {{ <var:H> = <nat:1> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:O1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:O1> = <var:f> /\ <var:O2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:O1> = <var:f> /\ <var:O2> = <var:f> ^ <nat:2> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:O1> = <nat:8> * <var:f> /\ <var:O2> = <var:f> ^ <nat:2> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:O1> = <nat:8> * <var:f> /\ <var:O2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:O1> = <nat:8> * <var:f> /\ <var:O0> = <nat:2> /\ <var:H> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:O0> = <nat:2> /\ <var:H> = <nat:1> * <var:f> ^ <nat:2> + <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:H> = <nat:1> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 