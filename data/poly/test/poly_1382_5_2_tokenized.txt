\begin{document} \begin{theorem} Define the following set of commands such that \begin{verbatim} <var:O> := <nat:2> ; <var:O> := <nat:3> + <var:O> * <var:r> ; <var:O> := <var:O> * <var:r> ; <var:O> := <var:O> * <var:r> ; <var:O> := <nat:2> + <var:O> * <var:r> \end{verbatim} Given that we have $ <var:r> = <var:y> $ --- with some positive integers $ <var:y> $ --- before running this program , it holds that we have $ <var:O> = <nat:2> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be shown by Hoare reasoning . Observing the following statement contained in the code , we have the assignment line \verb | <var:O> := <nat:2> ; | . This code transfers $ \{ <var:r> = <var:y> \} $ toward the postcondition $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \} $ . This is given through the assignment rule obtained from usual Hoare reasoning . Stepping through , we have the variable assignmet code letting $ <nat:3> + <var:O> * <var:r> $ into $ <var:O>$ . This statement transfers the precondition $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \} $ as $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \times <var:y> + <nat:3> \} $ . This is ensured by the assignment rule defined in Hoare techniques . Next , the variable binding line \verb | <var:O> := <var:O> * <var:r> ; | . This redefines the precondition $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \times <var:y> + <nat:3> \} $ to the condition $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + \} $ . Moving forward , we have the binding line \verb | <var:O> := <var:O> * <var:r> ; | . This takes $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + \} $ to the postcondition $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + \} $ . Focusing on the subsequent line in our series of commands , we see the variable binding code binding $ <nat:2> + <var:O> * <var:r$ into $ <var:O>$ . This command moves the precondition $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + \} $ into the postcondition $ \{ <var:r> = <var:y> \land <var:O> = <nat:2> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:r> = <var:y> }} <var:O> := <nat:2> ; <var:O> := <nat:3> + <var:O> * <var:r> ; <var:O> := <var:O> * <var:r> ; <var:O> := <var:O> * <var:r> ; <var:O> := <nat:2> + <var:O> * <var:r> {{ <var:O> = <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:O> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:O> = <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:O> = <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:O> = <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:O> = <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 