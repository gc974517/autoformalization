\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T1> := <var:W> ; <var:T2> := <var:T1> * <var:W> ; <var:T3> := <var:T2> * <var:W> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:2> ; <var:T2> := <var:T2> * <nat:3> ; <var:T3> := <var:T3> * <nat:5> ; <var:U> := <var:T3> <var:U> := <var:U> + <var:T2> <var:U> := <var:U> + <var:T1> <var:U> := <var:U> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Given it to hold that $ <var:W> = <var:E> $ , for all whole numbers $ <var:E> $ , ahead of executing our series of commands , it follows that $ <var:U> = <nat:5> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:3> $ once set of commands is done . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:W> = <var:E> \} \\ <var:T1> := <var:W> ; \\ \{ <var:W> = <var:E> \land <var:T1> = <var:E> \} \\ <var:T2> := <var:T1> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:T1> = <var:E> \land <var:T2> = <var:E> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:T1> = <var:E> \land <var:T2> = <var:E> ^ <nat:2> \land <var:T3> = <var:E> ^ <nat:3> \} \\ <var:T0> := <nat:3> ; \\ \{ <var:W> = <var:E> \land <var:T1> = <var:E> \land <var:T2> = <var:E> ^ <nat:2> \land <var:T3> = <var:E> ^ <nat:3> \land <var:T0> = <nat:3> \} \\ <var:T1> := <var:T1> * <nat:2> ; \\ \{ <var:W> = <var:E> \land <var:T1> = <nat:2> \cdot <var:E> \land <var:T2> = <var:E> ^ <nat:2> \land <var:T3> = <var:E> ^ <nat:3> \land <var:T0> = <nat:3> \} \\ <var:T2> := <var:T2> * <nat:3> ; \\ \{ <var:W> = <var:E> \land <var:T1> = <nat:2> \cdot <var:E> \land <var:T2> = <nat:3> \cdot <var:E> ^ <nat:2> \land <var:T3> = <var:E> ^ <nat:3> \land <var:T0> = <nat:3> \} \\ <var:T3> := <var:T3> * <nat:5> ; \\ \{ <var:W> = <var:E> \land <var:T1> = <nat:2> \cdot <var:E> \land <var:T2> = <nat:3> \cdot <var:E> ^ <nat:2> \land <var:T3> = <nat:5> \cdot <var:E> ^ <nat:3> \land <var:T0> = <nat:3> \} \\ <var:U> := <var:T3> \\ \{ <var:W> = <var:E> \land <var:T1> = <nat:2> \cdot <var:E> \land <var:T2> = <nat:3> \cdot <var:E> ^ <nat:2> \land <var:T0> = <nat:3> \land <var:U> = <nat:5> \cdot <var:E> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:T2> \\ \{ <var:W> = <var:E> \land <var:T1> = <nat:2> \cdot <var:E> \land <var:T0> = <nat:3> \land <var:U> = <nat:5> \cdot <var:E> ^ <nat:3> + <nat:3> \cdot <var:E> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:T1> \\ \{ <var:W> = <var:E> \land <var:T0> = <nat:3> \land <var:U> = <nat:5> \cdot <var:E> ^ <nat:3> + <nat:3> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> \} \\ <var:U> := <var:U> + <var:T0> \\ \{ <var:W> = <var:E> \land <var:U> = <nat:5> \cdot <var:E> ^ <nat:3> + <nat:3> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:3> \} \end{eqnarray} Given the above , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:W> ; <var:T2> := <var:T1> * <var:W> ; <var:T3> := <var:T2> * <var:W> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:2> ; <var:T2> := <var:T2> * <nat:3> ; <var:T3> := <var:T3> * <nat:5> ; <var:U> := <var:T3> <var:U> := <var:U> + <var:T2> <var:U> := <var:U> + <var:T1> <var:U> := <var:U> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:W> = <var:E> }} <def:poly> {{ <var:U> = <nat:5> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <var:E> /\ <var:T2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <var:E> /\ <var:T2> = <var:E> ^ <nat:2> /\ <var:T3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <var:E> /\ <var:T2> = <var:E> ^ <nat:2> /\ <var:T3> = <var:E> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <nat:2> * <var:E> /\ <var:T2> = <var:E> ^ <nat:2> /\ <var:T3> = <var:E> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <nat:2> * <var:E> /\ <var:T2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:T3> = <var:E> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <nat:2> * <var:E> /\ <var:T2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:T3> = <nat:5> * <var:E> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <nat:2> * <var:E> /\ <var:T2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:T0> = <nat:3> /\ <var:U> = <nat:5> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T1> = <nat:2> * <var:E> /\ <var:T0> = <nat:3> /\ <var:U> = <nat:5> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:T0> = <nat:3> /\ <var:U> = <nat:5> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:U> = <nat:5> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 