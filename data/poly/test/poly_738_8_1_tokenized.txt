\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:C1> := <var:R> ; <var:C2> := <var:C1> * <var:R> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:5> ; <var:C2> := <var:C2> * <nat:2> ; <var:y> := <var:C2> <var:y> := <var:y> + <var:C1> <var:y> := <var:y> + <var:C0> \end{verbatim} Assume it to hold that $ <var:R> = <var:w> $ ahead of the evaluation of this list of commands , it follows that we have $ <var:y> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:5> \cdot <var:w> + <nat:5> $ once list of instructions is done . \end{theorem} \begin{proof} The flow of logic for the program is evident through typical Hoare techniques . Shifting focus toward the upcoming commands contained in our series of commands , \begin{eqnarray} \{ <var:R> = <var:w> \} \, <var:C1> := <var:R> \, \{ <var:R> = <var:w> \land <var:C1> = <var:w> \} \\ \{ <var:R> = <var:w> \land <var:C1> = <var:w> \} \, <var:C2> := <var:C1> * <var:R> \, \{ <var:R> = <var:w> \land <var:C1> = <var:w> \land <var:C2> = <var:w> ^ <nat:2> \} \\ \{ <var:R> = <var:w> \land <var:C1> = <var:w> \land <var:C2> = <var:w> ^ <nat:2> \} \, <var:C0> := <nat:5> \, \{ <var:R> = <var:w> \land <var:C1> = <var:w> \land <var:C2> = <var:w> ^ <nat:2> \land <var:C0> = <nat:5> \} \end{eqnarray} This is ensured using the binding rule in typical Hoare logic . Considering the next lines in our segment of code , we have \begin{eqnarray} \{ <var:R> = <var:w> \} \, <var:C1> := <var:R> \, \{ <var:R> = <var:w> \land <var:C1> = <var:w> \} \\ \{ <var:R> = <var:w> \land <var:C1> = <var:w> \} \, <var:C2> := <var:C1> * <var:R> \, \{ <var:R> = <var:w> \land <var:C1> = <var:w> \land <var:C2> = <var:w> ^ <nat:2> \} \end{eqnarray} Advancing on , we see \begin{eqnarray} \{ <var:R> = <var:w> \} \, <var:C1> := <var:R> \, \{ <var:R> = <var:w> \land <var:C1> = <var:w> \} \\ \{ <var:R> = <var:w> \land <var:C1> = <var:w> \} \, <var:C2> := <var:C1> * <var:R> \, \{ <var:R> = <var:w> \land <var:C1> = <var:w> \land <var:C2> = <var:w> ^ <nat:2> \} \end{eqnarray} Jumping to the next piece of code found in the code , we have \begin{eqnarray} \{ <var:R> = <var:w> \} \, <var:C1> := <var:R> \, \{ <var:R> = <var:w> \land <var:C1> = <var:w> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <var:C1> := <var:R> ; <var:C2> := <var:C1> * <var:R> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:5> ; <var:C2> := <var:C2> * <nat:2> ; <var:y> := <var:C2> <var:y> := <var:y> + <var:C1> <var:y> := <var:y> + <var:C0> {{ <var:y> = <nat:2> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:C1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:C1> = <var:w> /\ <var:C2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:C1> = <var:w> /\ <var:C2> = <var:w> ^ <nat:2> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:C1> = <nat:5> * <var:w> /\ <var:C2> = <var:w> ^ <nat:2> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:C1> = <nat:5> * <var:w> /\ <var:C2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:C1> = <nat:5> * <var:w> /\ <var:C0> = <nat:5> /\ <var:y> = <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:C0> = <nat:5> /\ <var:y> = <nat:2> * <var:w> ^ <nat:2> + <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:y> = <nat:2> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 