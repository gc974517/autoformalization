\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:e1> := <var:v> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:5> ; <var:x> := <var:e1> <var:x> := <var:x> + <var:e0> \end{verbatim} Allowing ( given all natural numbers $ <var:O> $ ) that $ <var:v> = <var:O> $ before the evaluation of the series of commands it follows that $ <var:x> = <nat:5> \times <var:O> + <nat:4> $ once list of instructions executes . \end{theorem} \begin{proof} The method of proof for this segment of code can be accomplished by usual Hoare logic . After , the variable update command \verb | <var:e1> := <var:v> ; | . This advances the condition $ \{ <var:v> = <var:O> \} $ toward the postcondition $ \{ <var:v> = <var:O> \land <var:e1> = <var:O> \} $ . This is sound using the assignment rule obtained from usual Hoare reasoning . Stepping through , we have the variable assignmet statement \verb | <var:e0> := <nat:4> ; | . This advances $ \{ <var:v> = <var:O> \land <var:e1> = <var:O> \} $ toward the condition $ \{ <var:v> = <var:O> \land <var:e1> = <var:O> \land <var:e0> = <nat:4> \} $ . Advancing , the variable assignmet code assigning $ <var:e1> * <nat:5> $ as $ <var:e1>$ . This forwards the precondition $ \{ <var:v> = <var:O> \land <var:e1> = <var:O> \land <var:e0> = <nat:4> \} $ into $ \{ <var:v> = <var:O> \land <var:e1> = <nat:5> * <var:O> \land <var:e0> = <nat:4> \} $ . This is rigorously given with the assignment rule found in typical Hoare techniques . Focusing on the next line of code contained in the list of commands , the assignment command yielding $ <var:e1$ into $ <var:x>$ . This command transfers the precondition $ \{ <var:v> = <var:O> \land <var:e1> = <nat:5> * <var:O> \land <var:e0> = <nat:4> \} $ toward the postcondition $ \{ <var:v> = <var:O> \land <var:e0> = <nat:4> \land <var:x> = <nat:5> * <var:O> \} $ . This is guaranteed using the assignment rule defined by standard Hoare logic . Moving forward to the next line seen in our list of commands , the binding code giving $ <var:x> + <var:e0$ into $ <var:x>$ . This redefines the precondition $ \{ <var:v> = <var:O> \land <var:e0> = <nat:4> \land <var:x> = <nat:5> * <var:O> \} $ into the postcondition $ \{ <var:v> = <var:O> \land <var:x> = <nat:5> * <var:O> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:v> = <var:O> }} <var:e1> := <var:v> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:5> ; <var:x> := <var:e1> <var:x> := <var:x> + <var:e0> {{ <var:x> = <nat:5> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:e1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:e1> = <var:O> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:e1> = <nat:5> * <var:O> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:e0> = <nat:4> /\ <var:x> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:O> /\ <var:x> = <nat:5> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 