\begin{document} \begin{theorem} We define a list of commands as \begin{verbatim} <var:t0> := <nat:1> ; <var:j> := <var:t0> \end{verbatim} Assume it to be that $ <var:Z> = <var:P> $ --- given every positive numbers $ <var:P> $ --- before the evaluation of the segment of code then $ <var:j> = <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the segment of code is done using Hoare techniques . Next , \begin{verbatim} { <var:Z> = <var:P> } <var:t0> := <nat:1> { <var:Z> = <var:P> \land <var:t0> = <nat:1> } \end{verbatim} Taking a look at the following step contained in our code segment , \begin{verbatim} { <var:Z> = <var:P> } <var:t0> := <nat:1> { <var:Z> = <var:P> \land <var:t0> = <nat:1> } \end{verbatim} This is known to be sound using the variable update inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Z> = <var:P> }} <var:t0> := <nat:1> ; <var:j> := <var:t0> {{ <var:j> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:j> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 