\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:1> ; <var:Y> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Given that we have $ <var:f> = <var:P> $ ahead of evaluating our list of instructions it holds that we see $ <var:Y> = <nat:1> $ once segment of code has finished executing . \end{theorem} \begin{proof} The flow of logic for the set of commands is done with typical Hoare reasoning . Immediately following , \begin{eqnarray} \{ <var:f> = <var:P> \} \, <var:d0> := <nat:1> \, \{ <var:f> = <var:P> \land <var:d0> = <nat:1> \} \end{eqnarray} Focusing on the proceeding line seen in our program , \begin{eqnarray} \{ <var:f> = <var:P> \} \, <var:d0> := <nat:1> \, \{ <var:f> = <var:P> \land <var:d0> = <nat:1> \} \end{eqnarray} This is shown to be logically sound by the variable update scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:Y> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:f> = <var:P> }} <def:poly> {{ <var:Y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:Y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 