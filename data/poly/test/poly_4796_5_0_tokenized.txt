\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:3> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:I> ; <var:l> := <var:Y1> ; <var:l> := <var:l> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assume , with some natural coefficients $ <var:N> $ , it to be that $ <var:I> = <var:N> $ prior to interpreting this code segment , then $ <var:l> = <nat:2> * <var:N> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the list of commands is shown through Hoare logic . Focusing on the upcoming commands contained in our series of instructions , we have \begin{verbatim} { <var:I> = <var:N> } <var:Y0> := <nat:3> { <var:I> = <var:N> \land <var:Y0> = <nat:3> } { <var:I> = <var:N> \land <var:Y0> = <nat:3> } <var:Y1> := <nat:2> { <var:I> = <var:N> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:2> } { <var:I> = <var:N> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:2> } <var:Y1> := <var:Y1> * <var:I> { <var:I> = <var:N> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:2> \cdot <var:N> } { <var:I> = <var:N> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:2> \cdot <var:N> } <var:l> := <var:Y1> { <var:I> = <var:N> \land <var:Y0> = <nat:3> \land <var:l> = <nat:2> \cdot <var:N> } { <var:I> = <var:N> \land <var:Y0> = <nat:3> \land <var:l> = <nat:2> \cdot <var:N> } <var:l> := <var:l> + <var:Y0{ <var:I> = <var:N> \land <var:l> = <nat:2> \cdot <var:N> + <nat:3> } \end{verbatim} This is shown using the variable assignmet scheme given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:3> ; <var:Y1> := <nat:2> ; <var:Y1> := <var:Y1> * <var:I> ; <var:l> := <var:Y1> ; <var:l> := <var:l> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:I> = <var:N> }} <def:poly> {{ <var:l> = <nat:2> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:Y0> = <nat:3> /\ <var:l> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:l> = <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 