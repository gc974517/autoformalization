\begin{document} \begin{theorem} We define a code in \emph{Imp} : \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> ; <var:c> := <nat:2> + <var:c> * <var:N> ; <var:c> := <nat:2> + <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> ; <var:c> := <var:c> * <var:N> ; <var:c> := <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> \end{verbatim} Allowing it to be that $ <var:N> = <var:J> $ before running the series of instructions , it must be that we have $ <var:c> = <nat:2> \times <var:J> ^ <nat:10> + <nat:4> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:7> + <nat:2> \times <var:J> ^ <nat:6> + <nat:2> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our code can be done with standard Hoare logic . Shifting focus toward the next bit of code in our program , we see the variable update statement yielding $ <nat:2> $ toward $ <var:c>$ . This redefines $ \{ <var:N> = <var:J> \} $ as the condition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \} $ . This is given by the assignment law obtained from typical Hoare logic . Focusing on the next bit of code seen in our code segment , we have the environment update line \verb | <var:c> := <var:c> * <var:N> ; | . This redefines the precondition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \} $ toward $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> + \} $ . After , the assignment statement defining $ <nat:4> + <var:c> * <var:N> $ into $ <var:c>$ . This statement takes $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> + \} $ into $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:2> + <nat:4> \} $ . This is shown by the assignment rule from Hoare reasoning . Paying attention to the proceeding piece of code seen in the list of commands , we see the assignment command defining $ <nat:4> + <var:c> * <var:N> $ as $ <var:c>$ . This moves the condition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:2> + <nat:4> \} $ toward the postcondition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> + <nat:4> \} $ . This is ensured through the assignment inference rule defined by usual Hoare reasoning . Stepping through , the variable assignmet command yielding $ <nat:2> + <var:c> * <var:N> $ toward $ <var:c>$ . This command redefines the precondition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> + <nat:4> \} $ to the postcondition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:2> \} $ . Following , the variable assignmet line \verb | <var:c> := <nat:2> + <var:c> * <var:N> ; | . This statement redefines the condition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:2> \} $ toward $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:2> \} $ . This is rigorously given with the assignment inference rule defined by usual Hoare techniques . Following , we see the assignment line assigning $ <nat:4> + <var:c> * <var:N> $ into $ <var:c>$ . This forwards the precondition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:2> \} $ toward the postcondition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:4> \} $ . Moving on to the proceeding bit of code in the segment of code , the assignment code assigning $ <nat:4> + <var:c> * <var:N> $ into $ <var:c>$ . This command advances the precondition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:4> \} $ toward $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:4> \} $ . This is given through the assignment rule found in typical Hoare reasoning . Immediately after , we have the variable update command yielding $ <var:c> * <var:N> $ to $ <var:c>$ . This moves the precondition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:4> \} $ as the condition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:5> + <nat:2> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + \} $ . Jumping to the subsequent step contained in our list of commands , we see the variable binding command binding $ <var:c> * <var:N> $ into $ <var:c>$ . This transfers the condition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:5> + <nat:2> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + \} $ into the condition $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:9> + <nat:4> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:6> + <nat:2> \times <var:J> ^ <nat:5> + <nat:2> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + \} $ . Moving on to the following bit of code seen in the set of instructions , we see the variable binding command \verb | <var:c> := <nat:4> + <var:c> * <var:N> | . This transfers $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:9> + <nat:4> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:6> + <nat:2> \times <var:J> ^ <nat:5> + <nat:2> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + \} $ as $ \{ <var:N> = <var:J> \land <var:c> = <nat:2> \times <var:J> ^ <nat:10> + <nat:4> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:7> + <nat:2> \times <var:J> ^ <nat:6> + <nat:2> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \} $ . This is shown through the assignment scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:N> = <var:J> }} <var:c> := <nat:2> ; <var:c> := <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> ; <var:c> := <nat:2> + <var:c> * <var:N> ; <var:c> := <nat:2> + <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> ; <var:c> := <var:c> * <var:N> ; <var:c> := <var:c> * <var:N> ; <var:c> := <nat:4> + <var:c> * <var:N> {{ <var:c> = <nat:2> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:c> = <nat:2> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 