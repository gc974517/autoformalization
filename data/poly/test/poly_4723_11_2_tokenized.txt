\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:q> := <nat:1> ; <var:q> := <nat:1> + <var:q> * <var:t> ; <var:q> := <nat:3> + <var:q> * <var:t> ; <var:q> := <nat:3> + <var:q> * <var:t> ; <var:q> := <nat:2> + <var:q> * <var:t> ; <var:q> := <var:q> * <var:t> ; <var:q> := <nat:4> + <var:q> * <var:t> ; <var:q> := <nat:3> + <var:q> * <var:t> ; <var:q> := <nat:2> + <var:q> * <var:t> ; <var:q> := <nat:1> + <var:q> * <var:t> ; <var:q> := <nat:4> + <var:q> * <var:t> \end{verbatim} Assume , for any natural numbers $ <var:j> $ , it to hold that $ <var:t> = <var:j> $ ahead of running the list of commands , it must be that we have $ <var:q> = <nat:1> \times <var:j> ^ <nat:10> + <nat:1> \times <var:j> ^ <nat:9> + <nat:3> \times <var:j> ^ <nat:8> + <nat:3> \times <var:j> ^ <nat:7> + <nat:2> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this segment of code can be seen with usual Hoare techniques . Going forward , we see \begin{eqnarray} \{ <var:t> = <var:j> \} \, <var:q> := <nat:1> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> \} \\ \{ <var:t> = <var:j> \land <var:q> = <nat:1> \} \, <var:q> := <nat:1> + <var:q> * <var:t> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> + <nat:1> \} \\ \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> + <nat:1> \} \, <var:q> := <nat:3> + <var:q> * <var:t> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> \} \\ \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> \} \, <var:q> := <nat:3> + <var:q> * <var:t> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} \\ \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} \, <var:q> := <nat:2> + <var:q> * <var:t> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> \} \end{eqnarray} Focusing on the following commands found in our segment of code , we see \begin{eqnarray} \{ <var:t> = <var:j> \} \, <var:q> := <nat:1> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> \} \\ \{ <var:t> = <var:j> \land <var:q> = <nat:1> \} \, <var:q> := <nat:1> + <var:q> * <var:t> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> + <nat:1> \} \\ \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> + <nat:1> \} \, <var:q> := <nat:3> + <var:q> * <var:t> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> \} \\ \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> \} \, <var:q> := <nat:3> + <var:q> * <var:t> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} \\ \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} \, <var:q> := <nat:2> + <var:q> * <var:t> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> \} \end{eqnarray} This is deduced by the environment update scheme found in Hoare reasoning . Moving forward to the next step , we have \begin{eqnarray} \{ <var:t> = <var:j> \} \, <var:q> := <nat:1> \, \{ <var:t> = <var:j> \land <var:q> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:t> = <var:j> }} <var:q> := <nat:1> ; <var:q> := <nat:1> + <var:q> * <var:t> ; <var:q> := <nat:3> + <var:q> * <var:t> ; <var:q> := <nat:3> + <var:q> * <var:t> ; <var:q> := <nat:2> + <var:q> * <var:t> ; <var:q> := <var:q> * <var:t> ; <var:q> := <nat:4> + <var:q> * <var:t> ; <var:q> := <nat:3> + <var:q> * <var:t> ; <var:q> := <nat:2> + <var:q> * <var:t> ; <var:q> := <nat:1> + <var:q> * <var:t> ; <var:q> := <nat:4> + <var:q> * <var:t> {{ <var:q> = <nat:1> * <var:j> ^ <nat:10> + <nat:1> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:q> = <nat:1> * <var:j> ^ <nat:10> + <nat:1> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 