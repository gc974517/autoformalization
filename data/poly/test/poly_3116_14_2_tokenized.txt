\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:2> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:4> + <var:I> * <var:n> ; <var:I> := <nat:2> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:4> + <var:I> * <var:n> ; <var:I> := <var:I> * <var:n> ; <var:I> := <nat:4> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> \end{verbatim} Assuming that we have $ <var:n> = <var:Z> $ prior to the evaluation of this code segment it must be that $ <var:I> = <nat:2> \cdot <var:Z> ^ <nat:13> + <nat:1> \cdot <var:Z> ^ <nat:11> + <nat:3> \cdot <var:Z> ^ <nat:10> + <nat:2> \cdot <var:Z> ^ <nat:9> + <nat:1> \cdot <var:Z> ^ <nat:8> + <nat:3> \cdot <var:Z> ^ <nat:7> + <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:1> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our segment of code can be demonstrated with usual Hoare reasoning . Focusing on the proceeding statements contained in our list of commands , we have \begin{verbatim} { <var:n> = <var:Z> } <var:I> := <nat:2> { <var:n> = <var:Z> \land <var:I> = <nat:2> } { <var:n> = <var:Z> \land <var:I> = <nat:2> } <var:I> := <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> + } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> + } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:2> + <nat:1> } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:2> + <nat:1> } <var:I> := <nat:3> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> + <nat:3> } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> + <nat:3> } <var:I> := <nat:2> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:2> } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:2> } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> } <var:I> := <nat:3> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> } <var:I> := <nat:4> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> } <var:I> := <nat:2> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:8> + <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:2> } \end{verbatim} This is deduced using the variable assignmet rule of standard Hoare reasoning . Moving forward to the next step , we have \begin{verbatim} { <var:n> = <var:Z> } <var:I> := <nat:2> { <var:n> = <var:Z> \land <var:I> = <nat:2> } { <var:n> = <var:Z> \land <var:I> = <nat:2> } <var:I> := <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> + } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> + } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:2> + <nat:1> } { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:2> + <nat:1> } <var:I> := <nat:3> + <var:I> * <var:n> { <var:n> = <var:Z> \land <var:I> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> + <nat:3> } \end{verbatim} This is guaranteed through the law obtained from usual Hoare techniques . Taking another step toward the next command in the series of instructions , \begin{verbatim} { <var:n> = <var:Z> } <var:I> := <nat:2> { <var:n> = <var:Z> \land <var:I> = <nat:2> } \end{verbatim} This is known to be sound through the environment update rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <var:I> := <nat:2> ; <var:I> := <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:2> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:4> + <var:I> * <var:n> ; <var:I> := <nat:2> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:4> + <var:I> * <var:n> ; <var:I> := <var:I> * <var:n> ; <var:I> := <nat:4> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> {{ <var:I> = <nat:2> * <var:Z> ^ <nat:13> + <nat:1> * <var:Z> ^ <nat:11> + <nat:3> * <var:Z> ^ <nat:10> + <nat:2> * <var:Z> ^ <nat:9> + <nat:1> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:8> + <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:9> + <nat:1> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:10> + <nat:1> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:11> + <nat:1> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:12> + <nat:1> * <var:Z> ^ <nat:10> + <nat:3> * <var:Z> ^ <nat:9> + <nat:2> * <var:Z> ^ <nat:8> + <nat:1> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:I> = <nat:2> * <var:Z> ^ <nat:13> + <nat:1> * <var:Z> ^ <nat:11> + <nat:3> * <var:Z> ^ <nat:10> + <nat:2> * <var:Z> ^ <nat:9> + <nat:1> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 