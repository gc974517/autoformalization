\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as \begin{verbatim} <var:I1> := <var:H> ; <var:I2> := <var:I1> * <var:H> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:5> ; <var:w> := <var:I2> <var:w> := <var:w> + <var:I1> <var:w> := <var:w> + <var:I0> \end{verbatim} Assume that $ <var:H> = <var:p> $ ahead of interpreting this program , then $ <var:w> = <nat:5> \cdot <var:p> ^ <nat:2> + <nat:9> \cdot <var:p> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:p> \} \\ <var:I1> := <var:H> ; \\ \{ <var:H> = <var:p> \land <var:I1> = <var:p> \} \\ <var:I2> := <var:I1> * <var:H> ; \\ \{ <var:H> = <var:p> \land <var:I1> = <var:p> \land <var:I2> = <var:p> ^ <nat:2> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:H> = <var:p> \land <var:I1> = <var:p> \land <var:I2> = <var:p> ^ <nat:2> \land <var:I0> = <nat:4> \} \\ <var:I1> := <var:I1> * <nat:9> ; \\ \{ <var:H> = <var:p> \land <var:I1> = <nat:9> \cdot <var:p> \land <var:I2> = <var:p> ^ <nat:2> \land <var:I0> = <nat:4> \} \\ <var:I2> := <var:I2> * <nat:5> ; \\ \{ <var:H> = <var:p> \land <var:I1> = <nat:9> \cdot <var:p> \land <var:I2> = <nat:5> \cdot <var:p> ^ <nat:2> \land <var:I0> = <nat:4> \} \\ <var:w> := <var:I2> \\ \{ <var:H> = <var:p> \land <var:I1> = <nat:9> \cdot <var:p> \land <var:I0> = <nat:4> \land <var:w> = <nat:5> \cdot <var:p> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:I1> \\ \{ <var:H> = <var:p> \land <var:I0> = <nat:4> \land <var:w> = <nat:5> \cdot <var:p> ^ <nat:2> + <nat:9> \cdot <var:p> \} \\ <var:w> := <var:w> + <var:I0> \\ \{ <var:H> = <var:p> \land <var:w> = <nat:5> \cdot <var:p> ^ <nat:2> + <nat:9> \cdot <var:p> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:H> = <var:p> }} <var:I1> := <var:H> ; <var:I2> := <var:I1> * <var:H> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:5> ; <var:w> := <var:I2> <var:w> := <var:w> + <var:I1> <var:w> := <var:w> + <var:I0> {{ <var:w> = <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:I1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:I1> = <var:p> /\ <var:I2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:I1> = <var:p> /\ <var:I2> = <var:p> ^ <nat:2> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:I1> = <nat:9> * <var:p> /\ <var:I2> = <var:p> ^ <nat:2> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:I1> = <nat:9> * <var:p> /\ <var:I2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:I1> = <nat:9> * <var:p> /\ <var:I0> = <nat:4> /\ <var:w> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:I0> = <nat:4> /\ <var:w> = <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:w> = <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 