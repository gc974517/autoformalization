\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:K> ; <var:P> := <var:W1> ; <var:P> := <var:P> + <var:W0> \end{verbatim} Given that $ <var:K> = <var:l> $ before running the set of instructions it holds that we have $ <var:P> = <nat:3> \times <var:l> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment can be seen using typical Hoare logic . Honing in on the following line of code found in the code segment , we have the variable update statement defining $ <nat:1> $ to $ <var:W0>$ . This moves the precondition $ \{ <var:K> = <var:l> \} $ toward $ \{ <var:K> = <var:l> \land <var:W0> = <nat:1> \} $ . This is known to be sound with the assignment inference rule given by usual Hoare techniques . Jumping to the upcoming statement contained in the series of commands , we see the variable update command \verb | <var:W1> := <nat:3> ; | . This line takes the precondition $ \{ <var:K> = <var:l> \land <var:W0> = <nat:1> \} $ toward the condition $ \{ <var:K> = <var:l> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> \} $ . This is ensured using the assignment scheme defined by Hoare logic . Immediately after , we have the environment update command \verb | <var:W1> := <var:W1> * <var:K> ; | . This statement redefines $ \{ <var:K> = <var:l> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> \} $ into the postcondition $ \{ <var:K> = <var:l> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> \times <var:l> \} $ . This is shown through the assignment law given in usual Hoare logic . Immediately following , the environment update command yielding $ <var:W1> $ to $ <var:P>$ . This takes the condition $ \{ <var:K> = <var:l> \land <var:W0> = <nat:1> \land <var:W1> = <nat:3> \times <var:l> \} $ into the postcondition $ \{ <var:K> = <var:l> \land <var:W0> = <nat:1> \land <var:P> = <nat:3> \times <var:l> \} $ . Shifting focus toward the proceeding bit of code found in our segment of code , we have the binding statement \verb | <var:P> := <var:P> + <var:W0> | . This code takes $ \{ <var:K> = <var:l> \land <var:W0> = <nat:1> \land <var:P> = <nat:3> \times <var:l> \} $ into the postcondition $ \{ <var:K> = <var:l> \land <var:P> = <nat:3> \times <var:l> + <nat:1> \} $ . This is shown through the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:K> = <var:l> }} <var:W0> := <nat:1> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:K> ; <var:P> := <var:W1> ; <var:P> := <var:P> + <var:W0> {{ <var:P> = <nat:3> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:W0> = <nat:1> /\ <var:P> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:P> = <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 