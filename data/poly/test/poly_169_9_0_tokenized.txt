\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:B> ; <var:J2> := <nat:7> ; <var:J2> := <var:J2> * <var:B> ; <var:J2> := <var:J2> * <var:B> ; <var:Y> := <var:J2> ; <var:Y> := <var:Y> + <var:J1> ; <var:Y> := <var:Y> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:B> = <var:C> $ before running our segment of code , it follows that $ <var:Y> = <nat:7> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:4> $ when segment of code finishes . \end{theorem} \begin{proof} Proving correctness for this program is evident by Hoare logic . Moving forward to the next step , the assignment line \verb | <var:J0> := <nat:4> ; | . This takes the condition $ \{ <var:B> = <var:C> \} $ to the condition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \} $ . Observing the following step in the list of instructions , we have the variable update command \verb | <var:J1> := <nat:2> ; | . This command redefines the condition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \} $ toward the condition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \} $ . This is guaranteed using the assignment law defined in usual Hoare logic . Taking another step toward the next command in our series of instructions , the environment update line letting $ <var:J1> * <var:B> $ to $ <var:J1>$ . This code transfers the condition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \} $ as the condition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \} $ . Focusing on the subsequent piece of code seen in the code segment , we see the variable binding statement \verb | <var:J2> := <nat:7> ; | . This transfers $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \} $ toward the condition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \land <var:J2> = <nat:7> \} $ . This is rigorously given through the assignment law obtained from typical Hoare techniques . Considering the following line of code in our segment of code , we have the variable binding command \verb | <var:J2> := <var:J2> * <var:B> ; | . This transfers the precondition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \land <var:J2> = <nat:7> \} $ to the condition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \land <var:J2> = <nat:7> \times <var:C> \} $ . Immediately following , we see the variable update command \verb | <var:J2> := <var:J2> * <var:B> ; | . This advances the precondition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \land <var:J2> = <nat:7> \times <var:C> \} $ to the postcondition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \land <var:J2> = <nat:7> \times <var:C> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment scheme in Hoare techniques . Now , we see the variable binding line \verb | <var:Y> := <var:J2> ; | . This statement advances $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \land <var:J2> = <nat:7> \times <var:C> ^ <nat:2> \} $ as the postcondition $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \land <var:Y> = <nat:7> \times <var:C> ^ <nat:2> \} $ . This is sound by the assignment inference rule from Hoare logic . Advancing , we have the environment update statement defining $ <var:Y> + <var:J1> $ toward $ <var:Y>$ . This advances $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \times <var:C> \land <var:Y> = <nat:7> \times <var:C> ^ <nat:2> \} $ into $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:Y> = <nat:7> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> \} $ . Following , the code defining $ <var:Y> + <var:J0$ to $ <var:Y>$ . This line moves $ \{ <var:B> = <var:C> \land <var:J0> = <nat:4> \land <var:Y> = <nat:7> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> \} $ toward the condition $ \{ <var:B> = <var:C> \land <var:Y> = <nat:7> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:B> ; <var:J2> := <nat:7> ; <var:J2> := <var:J2> * <var:B> ; <var:J2> := <var:J2> * <var:B> ; <var:Y> := <var:J2> ; <var:Y> := <var:Y> + <var:J1> ; <var:Y> := <var:Y> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:B> = <var:C> }} <def:poly> {{ <var:Y> = <nat:7> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:C> /\ <var:J2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:C> /\ <var:J2> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:C> /\ <var:J2> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:C> /\ <var:Y> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:J0> = <nat:4> /\ <var:Y> = <nat:7> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:Y> = <nat:7> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 