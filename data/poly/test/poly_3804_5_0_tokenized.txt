\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:3> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:J> ; <var:Z> := <var:y1> ; <var:Z> := <var:Z> + <var:y0> \end{verbatim} Allow it to be that $ <var:J> = <var:W> $ prior to evaluating the code segment , then $ <var:Z> = <nat:2> \times <var:W> + <nat:3> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:J> = <var:W> \} \\ <var:y0> := <nat:3> ; \\ \{ <var:J> = <var:W> \land <var:y0> = <nat:3> \} \\ <var:y1> := <nat:2> ; \\ \{ <var:J> = <var:W> \land <var:y0> = <nat:3> \land <var:y1> = <nat:2> \} \\ <var:y1> := <var:y1> * <var:J> ; \\ \{ <var:J> = <var:W> \land <var:y0> = <nat:3> \land <var:y1> = <nat:2> \cdot <var:W> \} \\ <var:Z> := <var:y1> ; \\ \{ <var:J> = <var:W> \land <var:y0> = <nat:3> \land <var:Z> = <nat:2> \cdot <var:W> \} \\ <var:Z> := <var:Z> + <var:y0> \\ \{ <var:J> = <var:W> \land <var:Z> = <nat:2> \cdot <var:W> + <nat:3> \} \end{eqnarray} Thus , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:J> = <var:W> }} <var:y0> := <nat:3> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:J> ; <var:Z> := <var:y1> ; <var:Z> := <var:Z> + <var:y0> {{ <var:Z> = <nat:2> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:y0> = <nat:3> /\ <var:Z> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:Z> = <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 