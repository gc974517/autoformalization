\begin{document} \begin{theorem} Take a set of commands such that \begin{verbatim} <var:Y1> := <var:c> ; <var:Y2> := <var:Y1> * <var:c> ; <var:Y3> := <var:Y2> * <var:c> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:Y2> := <var:Y2> * <nat:8> ; <var:Y3> := <var:Y3> * <nat:6> ; <var:q> := <var:Y3> <var:q> := <var:q> + <var:Y2> <var:q> := <var:q> + <var:Y1> <var:q> := <var:q> + <var:Y0> \end{verbatim} Allow for some positive integers $ <var:W> $ that $ <var:c> = <var:W> $ prior to running our series of commands , it follows that we see $ <var:q> = <nat:6> \cdot <var:W> ^ <nat:3> + <nat:8> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:5> $ when code has terminated . \end{theorem} \begin{proof} Note that the following decorated code segment . \begin{eqnarray} \{ <var:c> = <var:W> \} \\ <var:Y1> := <var:c> ; \\ \{ <var:c> = <var:W> \land <var:Y1> = <var:W> \} \\ <var:Y2> := <var:Y1> * <var:c> ; \\ \{ <var:c> = <var:W> \land <var:Y1> = <var:W> \land <var:Y2> = <var:W> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:c> ; \\ \{ <var:c> = <var:W> \land <var:Y1> = <var:W> \land <var:Y2> = <var:W> ^ <nat:2> \land <var:Y3> = <var:W> ^ <nat:3> \} \end{eqnarray} Continuing running our set of commands results in : \begin{eqnarray} <var:Y0> := <nat:5> ; \\ \{ <var:c> = <var:W> \land <var:Y1> = <var:W> \land <var:Y2> = <var:W> ^ <nat:2> \land <var:Y3> = <var:W> ^ <nat:3> \land <var:Y0> = <nat:5> \} \\ <var:Y1> := <var:Y1> * <nat:1> ; \\ \{ <var:c> = <var:W> \land <var:Y1> = <nat:1> \cdot <var:W> \land <var:Y2> = <var:W> ^ <nat:2> \land <var:Y3> = <var:W> ^ <nat:3> \land <var:Y0> = <nat:5> \} \\ <var:Y2> := <var:Y2> * <nat:8> ; \\ \{ <var:c> = <var:W> \land <var:Y1> = <nat:1> \cdot <var:W> \land <var:Y2> = <nat:8> \cdot <var:W> ^ <nat:2> \land <var:Y3> = <var:W> ^ <nat:3> \land <var:Y0> = <nat:5> \} \\ <var:Y3> := <var:Y3> * <nat:6> ; \\ \{ <var:c> = <var:W> \land <var:Y1> = <nat:1> \cdot <var:W> \land <var:Y2> = <nat:8> \cdot <var:W> ^ <nat:2> \land <var:Y3> = <nat:6> \cdot <var:W> ^ <nat:3> \land <var:Y0> = <nat:5> \} \\ <var:q> := <var:Y3> \\ \{ <var:c> = <var:W> \land <var:Y1> = <nat:1> \cdot <var:W> \land <var:Y2> = <nat:8> \cdot <var:W> ^ <nat:2> \land <var:Y0> = <nat:5> \land <var:q> = <nat:6> \cdot <var:W> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:Y2> \\ \{ <var:c> = <var:W> \land <var:Y1> = <nat:1> \cdot <var:W> \land <var:Y0> = <nat:5> \land <var:q> = <nat:6> \cdot <var:W> ^ <nat:3> + <nat:8> \cdot <var:W> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:Y1> \\ \{ <var:c> = <var:W> \land <var:Y0> = <nat:5> \land <var:q> = <nat:6> \cdot <var:W> ^ <nat:3> + <nat:8> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} \\ <var:q> := <var:q> + <var:Y0> \\ \{ <var:c> = <var:W> \land <var:q> = <nat:6> \cdot <var:W> ^ <nat:3> + <nat:8> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:5> \} \end{eqnarray} Utilizing Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:c> = <var:W> }} <var:Y1> := <var:c> ; <var:Y2> := <var:Y1> * <var:c> ; <var:Y3> := <var:Y2> * <var:c> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:Y2> := <var:Y2> * <nat:8> ; <var:Y3> := <var:Y3> * <nat:6> ; <var:q> := <var:Y3> <var:q> := <var:q> + <var:Y2> <var:q> := <var:q> + <var:Y1> <var:q> := <var:q> + <var:Y0> {{ <var:q> = <nat:6> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <var:W> /\ <var:Y2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <var:W> /\ <var:Y2> = <var:W> ^ <nat:2> /\ <var:Y3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <var:W> /\ <var:Y2> = <var:W> ^ <nat:2> /\ <var:Y3> = <var:W> ^ <nat:3> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <var:W> ^ <nat:2> /\ <var:Y3> = <var:W> ^ <nat:3> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> /\ <var:Y3> = <var:W> ^ <nat:3> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> /\ <var:Y3> = <nat:6> * <var:W> ^ <nat:3> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y2> = <nat:8> * <var:W> ^ <nat:2> /\ <var:Y0> = <nat:5> /\ <var:q> = <nat:6> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y1> = <nat:1> * <var:W> /\ <var:Y0> = <nat:5> /\ <var:q> = <nat:6> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:Y0> = <nat:5> /\ <var:q> = <nat:6> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> + <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:q> = <nat:6> * <var:W> ^ <nat:3> + <nat:8> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 