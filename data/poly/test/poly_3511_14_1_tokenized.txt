\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:P> ; <var:n2> := <var:n1> * <var:P> ; <var:n3> := <var:n2> * <var:P> ; <var:n4> := <var:n3> * <var:P> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:9> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:3> ; <var:n4> := <var:n4> * <nat:7> ; <var:p> := <var:n4> <var:p> := <var:p> + <var:n3> <var:p> := <var:p> + <var:n2> <var:p> := <var:p> + <var:n1> <var:p> := <var:p> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:P> = <var:t> $ ahead of the execution of the series of commands it holds that we see $ <var:p> = <nat:7> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:3> $ once list of commands terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions can be accomplished with usual Hoare reasoning . Keeping momentum , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:t> \} & <var:n1> := <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \} & <var:n2> := <var:n1> * <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \} & <var:n3> := <var:n2> * <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \} \end{tabular} Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:t> \} & <var:n1> := <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \} & <var:n2> := <var:n1> * <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \} & <var:n3> := <var:n2> * <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \} & <var:n4> := <var:n3> * <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \} & <var:n0> := <nat:3> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \land <var:n0> = <nat:3> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \land <var:n0> = <nat:3> \} & <var:n1> := <var:n1> * <nat:9> & \{ <var:P> = <var:t> \land <var:n1> = <nat:9> * <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \land <var:n0> = <nat:3> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <nat:9> * <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \land <var:n0> = <nat:3> \} & <var:n2> := <var:n2> * <nat:2> & \{ <var:P> = <var:t> \land <var:n1> = <nat:9> * <var:t> \land <var:n2> = <nat:2> * <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \land <var:n4> = <var:t> ^ <nat:4> \land <var:n0> = <nat:3> \} \end{tabular} Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:t> \} & <var:n1> := <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \} & <var:n2> := <var:n1> * <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \} \\ \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \} & <var:n3> := <var:n2> * <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \land <var:n2> = <var:t> ^ <nat:2> \land <var:n3> = <var:t> ^ <nat:3> \} \end{tabular} This is deduced using the environment update inference rule defined in standard Hoare logic . Taking another step toward the following step seen in our list of commands , \[ \begin{tabular} {rcl} \{ <var:P> = <var:t> \} & <var:n1> := <var:P> & \{ <var:P> = <var:t> \land <var:n1> = <var:t> \} \end{tabular} This is ensured with the variable binding law obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <var:n4> : string := " <var:n4> " . Definition <def:poly> := <var:n1> := <var:P> ; <var:n2> := <var:n1> * <var:P> ; <var:n3> := <var:n2> * <var:P> ; <var:n4> := <var:n3> * <var:P> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:9> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:3> ; <var:n4> := <var:n4> * <nat:7> ; <var:p> := <var:n4> <var:p> := <var:p> + <var:n3> <var:p> := <var:p> + <var:n2> <var:p> := <var:p> + <var:n1> <var:p> := <var:p> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:P> = <var:t> }} <def:poly> {{ <var:p> = <nat:7> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <nat:9> * <var:t> /\ <var:n2> = <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <nat:9> * <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n3> = <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <nat:9> * <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:n4> = <var:t> ^ <nat:4> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <nat:9> * <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:n4> = <nat:7> * <var:t> ^ <nat:4> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <nat:9> * <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:n0> = <nat:3> /\ <var:p> = <nat:7> * <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <nat:9> * <var:t> /\ <var:n2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:n0> = <nat:3> /\ <var:p> = <nat:7> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n1> = <nat:9> * <var:t> /\ <var:n0> = <nat:3> /\ <var:p> = <nat:7> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:n0> = <nat:3> /\ <var:p> = <nat:7> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:p> = <nat:7> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 