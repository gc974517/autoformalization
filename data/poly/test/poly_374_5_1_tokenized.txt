\begin{document} \begin{theorem} Consider the following code segment as \begin{verbatim} <var:D1> := <var:M> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:2> ; <var:t> := <var:D1> <var:t> := <var:t> + <var:D0> \end{verbatim} Given given every positive numbers $ <var:W> $ $ <var:M> = <var:W> $ prior to the execution of our series of commands then we have $ <var:t> = <nat:2> \cdot <var:W> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:W> \} \\ <var:D1> := <var:M> ; \\ \{ <var:M> = <var:W> \land <var:D1> = <var:W> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:M> = <var:W> \land <var:D1> = <var:W> \land <var:D0> = <nat:4> \} \\ <var:D1> := <var:D1> * <nat:2> ; \\ \{ <var:M> = <var:W> \land <var:D1> = <nat:2> * <var:W> \land <var:D0> = <nat:4> \} \\ <var:t> := <var:D1> \\ \{ <var:M> = <var:W> \land <var:D0> = <nat:4> \land <var:t> = <nat:2> * <var:W> \} \\ <var:t> := <var:t> + <var:D0> \\ \{ <var:M> = <var:W> \land <var:t> = <nat:2> * <var:W> + <nat:4> \} \end{eqnarray} Applying Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:M> = <var:W> }} <var:D1> := <var:M> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:2> ; <var:t> := <var:D1> <var:t> := <var:t> + <var:D0> {{ <var:t> = <nat:2> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:D1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:D1> = <var:W> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:D1> = <nat:2> * <var:W> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:D0> = <nat:4> /\ <var:t> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:t> = <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 