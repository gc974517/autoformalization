\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:w> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:9> ; <var:W> := <var:A1> <var:W> := <var:W> + <var:A0> \end{verbatim} Given that $ <var:w> = <var:x> $ --- for integers $ <var:x> $ --- ahead of the execution of this program it must be that we see $ <var:W> = <nat:9> \cdot <var:x> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is clear by standard Hoare reasoning . Going to the next step , we have \verb | { <var:w> = <var:x> } <var:A1> := <var:w> { <var:w> = <var:x> \land <var:A1> = <var:x> } | , \verb | { <var:w> = <var:x> \land <var:A1> = <var:x> } <var:A0> := <nat:9> { <var:w> = <var:x> \land <var:A1> = <var:x> \land <var:A0> = <nat:9> } | and \verb | { <var:w> = <var:x> \land <var:A1> = <var:x> \land <var:A0> = <nat:9> } <var:A1> := <var:A1> * <nat:9> { <var:w> = <var:x> \land <var:A1> = <nat:9> \cdot <var:x> \land <var:A0> = <nat:9> } | . This is rigorously given with the binding scheme given by usual Hoare logic . Jumping to the next statements contained in our series of commands , \verb | { <var:w> = <var:x> } <var:A1> := <var:w> { <var:w> = <var:x> \land <var:A1> = <var:x> } | and \verb | { <var:w> = <var:x> \land <var:A1> = <var:x> } <var:A0> := <nat:9> { <var:w> = <var:x> \land <var:A1> = <var:x> \land <var:A0> = <nat:9> } | . This is shown through the inference rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:w> = <var:x> }} <var:A1> := <var:w> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:9> ; <var:W> := <var:A1> <var:W> := <var:W> + <var:A0> {{ <var:W> = <nat:9> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:A1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:A1> = <var:x> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:A1> = <nat:9> * <var:x> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:A0> = <nat:9> /\ <var:W> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:W> = <nat:9> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 