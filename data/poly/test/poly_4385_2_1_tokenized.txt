\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:6> ; <var:T> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Allowing it to be that $ <var:j> = <var:V> $ before the evaluation of this segment of code , it follows that we have $ <var:T> = <nat:6> $ once series of instructions has terminated . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:j> = <var:V> \} \\ <var:l0> := <nat:6> ; \\ \{ <var:j> = <var:V> \land <var:l0> = <nat:6> \} \\ <var:T> := <var:l0> \\ \{ <var:j> = <var:V> \land <var:T> = <nat:6> \} \end{eqnarray} As a result , the set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:6> ; <var:T> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:j> = <var:V> }} <def:poly> {{ <var:T> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:T> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 