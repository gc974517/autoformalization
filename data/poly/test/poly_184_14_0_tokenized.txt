\begin{document} \begin{theorem} We define a set of instructions as follows \begin{verbatim} <var:p0> := <nat:4> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:Z> ; <var:p2> := <nat:3> ; <var:p2> := <var:p2> * <var:Z> ; <var:p2> := <var:p2> * <var:Z> ; <var:p3> := <nat:2> ; <var:p3> := <var:p3> * <var:Z> ; <var:p3> := <var:p3> * <var:Z> ; <var:p3> := <var:p3> * <var:Z> ; <var:l> := <var:p3> ; <var:l> := <var:l> + <var:p2> ; <var:l> := <var:l> + <var:p1> ; <var:l> := <var:l> + <var:p0> \end{verbatim} Allowing that we have $ <var:Z> = <var:v> $ prior to interpreting this series of instructions it holds that we see $ <var:l> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the program is clear with typical Hoare logic . Focusing on the proceeding lines of codefound in our set of instructions , we see \begin{verbatim} { <var:Z> = <var:v> } <var:p0> := <nat:4> { <var:Z> = <var:v> \land <var:p0> = <nat:4> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> } <var:p1> := <nat:2> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> } <var:p1> := <var:p1> * <var:Z> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> } \end{verbatim} Considering the proceeding commands contained in our set of instructions , \begin{verbatim} { <var:Z> = <var:v> } <var:p0> := <nat:4> { <var:Z> = <var:v> \land <var:p0> = <nat:4> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> } <var:p1> := <nat:2> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> } <var:p1> := <var:p1> * <var:Z> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> } <var:p2> := <nat:3> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> \land <var:p2> = <nat:3> } \end{verbatim} After , \begin{verbatim} { <var:Z> = <var:v> } <var:p0> := <nat:4> { <var:Z> = <var:v> \land <var:p0> = <nat:4> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> } <var:p1> := <nat:2> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> } <var:p1> := <var:p1> * <var:Z> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> } <var:p2> := <nat:3> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> \land <var:p2> = <nat:3> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> \land <var:p2> = <nat:3> } <var:p2> := <var:p2> * <var:Z> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> \land <var:p2> = <nat:3> \cdot <var:v> } { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> \land <var:p2> = <nat:3> \cdot <var:v> } <var:p2> := <var:p2> * <var:Z> { <var:Z> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:2> \cdot <var:v> \land <var:p2> = <nat:3> \cdot <var:v> ^ <nat:2> } \end{verbatim} This is guaranteed with the law defined in Hoare logic . Keeping momentum , we have \begin{verbatim} { <var:Z> = <var:v> } <var:p0> := <nat:4> { <var:Z> = <var:v> \land <var:p0> = <nat:4> } \end{verbatim} This is ensured using the variable binding rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Z> = <var:v> }} <var:p0> := <nat:4> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:Z> ; <var:p2> := <nat:3> ; <var:p2> := <var:p2> * <var:Z> ; <var:p2> := <var:p2> * <var:Z> ; <var:p3> := <nat:2> ; <var:p3> := <var:p3> * <var:Z> ; <var:p3> := <var:p3> * <var:Z> ; <var:p3> := <var:p3> * <var:Z> ; <var:l> := <var:p3> ; <var:l> := <var:l> + <var:p2> ; <var:l> := <var:l> + <var:p1> ; <var:l> := <var:l> + <var:p0> {{ <var:l> = <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:p2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:p2> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:p2> = <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:p2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:p2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:p2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:p2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:p2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:l> = <nat:2> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:2> * <var:v> /\ <var:l> = <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:p0> = <nat:4> /\ <var:l> = <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:v> /\ <var:l> = <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 