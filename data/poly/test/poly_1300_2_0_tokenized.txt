\begin{document} \begin{theorem} Let the following series of commands such that \begin{verbatim} <var:N0> := <nat:4> ; <var:g> := <var:N0> \end{verbatim} Assuming that $ <var:E> = <var:a> $ prior to evaluating the list of instructions it must be that we have $ <var:g> = <nat:4> $ after program is done . \end{theorem} \begin{proof} The course of logic for the series of instructions is shown using usual Hoare techniques . Moving forward , we see the statement giving $ <nat:4> $ toward $ <var:N0>$ . This line takes the precondition $ \{ <var:E> = <var:a> \} $ as the condition $ \{ <var:E> = <var:a> \land <var:N0> = <nat:4> \} $ . Moving on to the next step , we see the assignment line assigning $ <var:N0$ toward $ <var:g>$ . This line moves $ \{ <var:E> = <var:a> \land <var:N0> = <nat:4> \} $ toward the condition $ \{ <var:E> = <var:a> \land <var:g> = <nat:4> \} $ . This is sound using the assignment scheme given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:E> = <var:a> }} <var:N0> := <nat:4> ; <var:g> := <var:N0> {{ <var:g> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:g> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 