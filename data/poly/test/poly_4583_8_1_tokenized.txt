\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:b1> := <var:S> ; <var:b2> := <var:b1> * <var:S> ; <var:b0> := <nat:6> ; <var:b1> := <var:b1> * <nat:9> ; <var:b2> := <var:b2> * <nat:7> ; <var:Q> := <var:b2> <var:Q> := <var:Q> + <var:b1> <var:Q> := <var:Q> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:S> = <var:H> $ for all whole numbers $ <var:H> $ ahead of the evaluation of the list of instructions it follows that $ <var:Q> = <nat:7> \times <var:H> ^ <nat:2> + <nat:9> \times <var:H> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare logic returns : \begin{eqnarray} \{ <var:S> = <var:H> \} \\ <var:b1> := <var:S> ; \\ \{ <var:S> = <var:H> \land <var:b1> = <var:H> \} \\ <var:b2> := <var:b1> * <var:S> ; \\ \{ <var:S> = <var:H> \land <var:b1> = <var:H> \land <var:b2> = <var:H> ^ <nat:2> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:S> = <var:H> \land <var:b1> = <var:H> \land <var:b2> = <var:H> ^ <nat:2> \land <var:b0> = <nat:6> \} \\ <var:b1> := <var:b1> * <nat:9> ; \\ \{ <var:S> = <var:H> \land <var:b1> = <nat:9> \times <var:H> \land <var:b2> = <var:H> ^ <nat:2> \land <var:b0> = <nat:6> \} \\ <var:b2> := <var:b2> * <nat:7> ; \\ \{ <var:S> = <var:H> \land <var:b1> = <nat:9> \times <var:H> \land <var:b2> = <nat:7> \times <var:H> ^ <nat:2> \land <var:b0> = <nat:6> \} \\ <var:Q> := <var:b2> \\ \{ <var:S> = <var:H> \land <var:b1> = <nat:9> \times <var:H> \land <var:b0> = <nat:6> \land <var:Q> = <nat:7> \times <var:H> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:b1> \\ \{ <var:S> = <var:H> \land <var:b0> = <nat:6> \land <var:Q> = <nat:7> \times <var:H> ^ <nat:2> + <nat:9> \times <var:H> \} \\ <var:Q> := <var:Q> + <var:b0> \\ \{ <var:S> = <var:H> \land <var:Q> = <nat:7> \times <var:H> ^ <nat:2> + <nat:9> \times <var:H> + <nat:6> \} \end{eqnarray} As a result , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b1> := <var:S> ; <var:b2> := <var:b1> * <var:S> ; <var:b0> := <nat:6> ; <var:b1> := <var:b1> * <nat:9> ; <var:b2> := <var:b2> * <nat:7> ; <var:Q> := <var:b2> <var:Q> := <var:Q> + <var:b1> <var:Q> := <var:Q> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:S> = <var:H> }} <def:poly> {{ <var:Q> = <nat:7> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:b1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:b1> = <var:H> /\ <var:b2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:b1> = <var:H> /\ <var:b2> = <var:H> ^ <nat:2> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:b1> = <nat:9> * <var:H> /\ <var:b2> = <var:H> ^ <nat:2> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:b1> = <nat:9> * <var:H> /\ <var:b2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:b1> = <nat:9> * <var:H> /\ <var:b0> = <nat:6> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:b0> = <nat:6> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:2> + <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 