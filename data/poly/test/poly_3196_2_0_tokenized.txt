\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:C0> := <nat:4> ; <var:r> := <var:C0> \end{verbatim} Allow , given every $ <var:x> \in \mathbb{N} $ , that $ <var:y> = <var:x> $ prior to executing this list of instructions , it must be that we have $ <var:r> = <nat:4> $ . \end{theorem} \begin{proof} Using Hoare reasoning gives us : \begin{eqnarray} \{ <var:y> = <var:x> \} \\ <var:C0> := <nat:4> ; \\ \{ <var:y> = <var:x> \land <var:C0> = <nat:4> \} \\ <var:r> := <var:C0> \\ \{ <var:y> = <var:x> \land <var:r> = <nat:4> \} \end{eqnarray} Considering the preceding argument , this code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:y> = <var:x> }} <var:C0> := <nat:4> ; <var:r> := <var:C0> {{ <var:r> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:r> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 