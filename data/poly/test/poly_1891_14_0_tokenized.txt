\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:4> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:t> ; <var:Q2> := <nat:9> ; <var:Q2> := <var:Q2> * <var:t> ; <var:Q2> := <var:Q2> * <var:t> ; <var:Q3> := <nat:6> ; <var:Q3> := <var:Q3> * <var:t> ; <var:Q3> := <var:Q3> * <var:t> ; <var:Q3> := <var:Q3> * <var:t> ; <var:h> := <var:Q3> ; <var:h> := <var:h> + <var:Q2> ; <var:h> := <var:h> + <var:Q1> ; <var:h> := <var:h> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Given that we have $ <var:t> = <var:m> $ before the evaluation of the program then we have $ <var:h> = <nat:6> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> ^ <nat:2> + <nat:7> \cdot <var:m> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the program can be given by usual Hoare techniques . Moving forward to the next pieces of code found in the code , \begin{eqnarray} \{ <var:t> = <var:m> \} \, <var:Q0> := <nat:4> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \} \, <var:Q1> := <nat:7> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> \} \, <var:Q1> := <var:Q1> * <var:t> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \} \, <var:Q2> := <nat:9> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> \} \, <var:Q2> := <var:Q2> * <var:t> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> \} \, <var:Q2> := <var:Q2> * <var:t> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \} \, <var:Q3> := <nat:6> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:Q3> = <nat:6> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:Q3> = <nat:6> \} \, <var:Q3> := <var:Q3> * <var:t> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:Q3> = <nat:6> * <var:m> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:Q3> = <nat:6> * <var:m> \} \, <var:Q3> := <var:Q3> * <var:t> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:Q3> = <nat:6> * <var:m> ^ <nat:2> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:Q3> = <nat:6> * <var:m> ^ <nat:2> \} \, <var:Q3> := <var:Q3> * <var:t> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:Q3> = <nat:6> * <var:m> ^ <nat:3> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:Q3> = <nat:6> * <var:m> ^ <nat:3> \} \, <var:h> := <var:Q3> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:h> = <nat:6> * <var:m> ^ <nat:3> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:Q2> = <nat:9> * <var:m> ^ <nat:2> \land <var:h> = <nat:6> * <var:m> ^ <nat:3> \} \, <var:h> := <var:h> + <var:Q2> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:h> = <nat:6> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> \} \\ \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:7> * <var:m> \land <var:h> = <nat:6> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> \} \, <var:h> := <var:h> + <var:Q1> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \land <var:h> = <nat:6> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:7> * <var:m> \} \end{eqnarray} Moving forward to the next statement in the set of commands , \begin{eqnarray} \{ <var:t> = <var:m> \} \, <var:Q0> := <nat:4> \, \{ <var:t> = <var:m> \land <var:Q0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q0> := <nat:4> ; <var:Q1> := <nat:7> ; <var:Q1> := <var:Q1> * <var:t> ; <var:Q2> := <nat:9> ; <var:Q2> := <var:Q2> * <var:t> ; <var:Q2> := <var:Q2> * <var:t> ; <var:Q3> := <nat:6> ; <var:Q3> := <var:Q3> * <var:t> ; <var:Q3> := <var:Q3> * <var:t> ; <var:Q3> := <var:Q3> * <var:t> ; <var:h> := <var:Q3> ; <var:h> := <var:h> + <var:Q2> ; <var:h> := <var:h> + <var:Q1> ; <var:h> := <var:h> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:t> = <var:m> }} <def:poly> {{ <var:h> = <nat:6> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:Q2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:Q2> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:Q2> = <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:Q2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:Q3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:Q2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:Q3> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:Q2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:Q3> = <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:Q2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:Q3> = <nat:6> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:Q2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:h> = <nat:6> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:7> * <var:m> /\ <var:h> = <nat:6> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:Q0> = <nat:4> /\ <var:h> = <nat:6> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:h> = <nat:6> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 