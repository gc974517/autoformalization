\begin{document} \begin{theorem} Let the following set of commands : \begin{verbatim} <var:s> := <nat:2> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <nat:4> + <var:s> * <var:H> ; <var:s> := <nat:3> + <var:s> * <var:H> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <var:s> * <var:H> ; <var:s> := <nat:2> + <var:s> * <var:H> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <nat:4> + <var:s> * <var:H> ; <var:s> := <nat:4> + <var:s> * <var:H> \end{verbatim} Allowing $ <var:H> = <var:k> $ before evaluating our list of commands , it holds that $ <var:s> = <nat:2> * <var:k> ^ <nat:11> + <nat:1> * <var:k> ^ <nat:10> + <nat:1> * <var:k> ^ <nat:9> + <nat:4> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> $ when segment of code has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is clear by typical Hoare logic . Moving forward to the next step , we see \begin{verbatim} { <var:H> = <var:k> } <var:s> := <nat:2> { <var:H> = <var:k> \land <var:s> = <nat:2> } { <var:H> = <var:k> \land <var:s> = <nat:2> } <var:s> := <nat:1> + <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> + <nat:1> } { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> + <nat:1> } <var:s> := <nat:1> + <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + <nat:1> } { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + <nat:1> } <var:s> := <nat:4> + <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + <nat:4> } { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + <nat:4> } <var:s> := <nat:3> + <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> } { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> } <var:s> := <nat:1> + <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:1> } { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:1> } <var:s> := <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:6> + <nat:1> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + } { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:6> + <nat:1> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + } <var:s> := <nat:2> + <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:7> + <nat:1> \cdot <var:k> ^ <nat:6> + <nat:1> \cdot <var:k> ^ <nat:5> + <nat:4> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:2> } { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:7> + <nat:1> \cdot <var:k> ^ <nat:6> + <nat:1> \cdot <var:k> ^ <nat:5> + <nat:4> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:2> } <var:s> := <nat:1> + <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:8> + <nat:1> \cdot <var:k> ^ <nat:7> + <nat:1> \cdot <var:k> ^ <nat:6> + <nat:4> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> + <nat:1> } { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:8> + <nat:1> \cdot <var:k> ^ <nat:7> + <nat:1> \cdot <var:k> ^ <nat:6> + <nat:4> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> + <nat:1> } <var:s> := <nat:1> + <var:s> * <var:H> { <var:H> = <var:k> \land <var:s> = <nat:2> \cdot <var:k> ^ <nat:9> + <nat:1> \cdot <var:k> ^ <nat:8> + <nat:1> \cdot <var:k> ^ <nat:7> + <nat:4> \cdot <var:k> ^ <nat:6> + <nat:3> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:2> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + <nat:1> } \end{verbatim} This is known to be sound with the environment update inference rule obtained from Hoare reasoning . Next , \begin{verbatim} { <var:H> = <var:k> } <var:s> := <nat:2> { <var:H> = <var:k> \land <var:s> = <nat:2> } \end{verbatim} Observing the following piece of code in the code , \begin{verbatim} { <var:H> = <var:k> } <var:s> := <nat:2> { <var:H> = <var:k> \land <var:s> = <nat:2> } \end{verbatim} This is rigorously given with the law in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:H> = <var:k> }} <var:s> := <nat:2> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <nat:4> + <var:s> * <var:H> ; <var:s> := <nat:3> + <var:s> * <var:H> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <var:s> * <var:H> ; <var:s> := <nat:2> + <var:s> * <var:H> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <nat:1> + <var:s> * <var:H> ; <var:s> := <nat:4> + <var:s> * <var:H> ; <var:s> := <nat:4> + <var:s> * <var:H> {{ <var:s> = <nat:2> * <var:k> ^ <nat:11> + <nat:1> * <var:k> ^ <nat:10> + <nat:1> * <var:k> ^ <nat:9> + <nat:4> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:5> + <nat:4> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:8> + <nat:1> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:9> + <nat:1> * <var:k> ^ <nat:8> + <nat:1> * <var:k> ^ <nat:7> + <nat:4> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:10> + <nat:1> * <var:k> ^ <nat:9> + <nat:1> * <var:k> ^ <nat:8> + <nat:4> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:s> = <nat:2> * <var:k> ^ <nat:11> + <nat:1> * <var:k> ^ <nat:10> + <nat:1> * <var:k> ^ <nat:9> + <nat:4> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 