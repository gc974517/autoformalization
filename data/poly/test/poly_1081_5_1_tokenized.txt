\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:F> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:C> := <var:Y1> <var:C> := <var:C> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Allow , for any $ <var:v> \in \mathbb{Z}^+ $ , that we have $ <var:F> = <var:v> $ before the execution of this list of commands then we have $ <var:C> = <nat:9> * <var:v> + <nat:6> $ once series of commands exits . \end{theorem} \begin{proof} The course of logic for our series of instructions can be given using usual Hoare reasoning . After , we have \begin{eqnarray} \{ <var:F> = <var:v> \} \, <var:Y1> := <var:F> \, \{ <var:F> = <var:v> \land <var:Y1> = <var:v> \} \\ \{ <var:F> = <var:v> \land <var:Y1> = <var:v> \} \, <var:Y0> := <nat:6> \, \{ <var:F> = <var:v> \land <var:Y1> = <var:v> \land <var:Y0> = <nat:6> \} \end{eqnarray} This is known to be sound with the environment update inference rule of Hoare logic . Following , \begin{eqnarray} \{ <var:F> = <var:v> \} \, <var:Y1> := <var:F> \, \{ <var:F> = <var:v> \land <var:Y1> = <var:v> \} \\ \{ <var:F> = <var:v> \land <var:Y1> = <var:v> \} \, <var:Y0> := <nat:6> \, \{ <var:F> = <var:v> \land <var:Y1> = <var:v> \land <var:Y0> = <nat:6> \} \\ \{ <var:F> = <var:v> \land <var:Y1> = <var:v> \land <var:Y0> = <nat:6> \} \, <var:Y1> := <var:Y1> * <nat:9> \, \{ <var:F> = <var:v> \land <var:Y1> = <nat:9> \cdot <var:v> \land <var:Y0> = <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:F> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:C> := <var:Y1> <var:C> := <var:C> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:F> = <var:v> }} <def:poly> {{ <var:C> = <nat:9> * <var:v> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:Y1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:Y1> = <nat:9> * <var:v> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:Y0> = <nat:6> /\ <var:C> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:C> = <nat:9> * <var:v> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 