\begin{document} \begin{theorem} We define the following list of commands such that \begin{verbatim} <var:q1> := <var:K> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:9> ; <var:g> := <var:q1> <var:g> := <var:g> + <var:q0> \end{verbatim} Allowing it to hold that $ <var:K> = <var:G> $ --- given $ <var:G> $ --- ahead of executing our code , it follows that $ <var:g> = <nat:9> \cdot <var:G> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code can be demonstrated by usual Hoare logic . Honing in on the following statements seen in the code , we have \begin{verbatim} { <var:K> = <var:G> } <var:q1> := <var:K> { <var:K> = <var:G> \land <var:q1> = <var:G> } { <var:K> = <var:G> \land <var:q1> = <var:G> } <var:q0> := <nat:6> { <var:K> = <var:G> \land <var:q1> = <var:G> \land <var:q0> = <nat:6> } { <var:K> = <var:G> \land <var:q1> = <var:G> \land <var:q0> = <nat:6> } <var:q1> := <var:q1> * <nat:9> { <var:K> = <var:G> \land <var:q1> = <nat:9> \times <var:G> \land <var:q0> = <nat:6> } { <var:K> = <var:G> \land <var:q1> = <nat:9> \times <var:G> \land <var:q0> = <nat:6> } <var:g> := <var:q1{ <var:K> = <var:G> \land <var:q0> = <nat:6> \land <var:g> = <nat:9> \times <var:G> } \end{verbatim} Further , \begin{verbatim} { <var:K> = <var:G> } <var:q1> := <var:K> { <var:K> = <var:G> \land <var:q1> = <var:G> } \end{verbatim} This is rigorously given with the variable assignmet scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:K> = <var:G> }} <var:q1> := <var:K> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:9> ; <var:g> := <var:q1> <var:g> := <var:g> + <var:q0> {{ <var:g> = <nat:9> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:q1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:q1> = <var:G> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:q1> = <nat:9> * <var:G> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:q0> = <nat:6> /\ <var:g> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:g> = <nat:9> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 