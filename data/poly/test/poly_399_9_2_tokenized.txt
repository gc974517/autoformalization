\begin{document} \begin{theorem} Consider the following set of instructions as follows \begin{verbatim} <var:d> := <nat:2> ; <var:d> := <nat:2> + <var:d> * <var:G> ; <var:d> := <nat:2> + <var:d> * <var:G> ; <var:d> := <nat:1> + <var:d> * <var:G> ; <var:d> := <nat:3> + <var:d> * <var:G> ; <var:d> := <nat:2> + <var:d> * <var:G> ; <var:d> := <nat:1> + <var:d> * <var:G> ; <var:d> := <nat:4> + <var:d> * <var:G> ; <var:d> := <nat:3> + <var:d> * <var:G> \end{verbatim} Allowing $ <var:G> = <var:D> $ prior to the execution of our set of instructions , it must be that $ <var:d> = <nat:2> \cdot <var:D> ^ <nat:8> + <nat:2> \cdot <var:D> ^ <nat:7> + <nat:2> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:3> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:3> $ once set of instructions has exited . \end{theorem} \begin{proof} The argument for the set of commands is evident by standard Hoare techniques . Considering the proceeding command found in our series of commands , \begin{eqnarray} \{ <var:G> = <var:D> \} \, <var:d> := <nat:2> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> \} \end{eqnarray} This is rigorously given by the binding inference rule given by usual Hoare techniques . Honing in on the proceeding commands in our set of instructions , we have \begin{eqnarray} \{ <var:G> = <var:D> \} \, <var:d> := <nat:2> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> \} \\ \{ <var:G> = <var:D> \land <var:d> = <nat:2> \} \, <var:d> := <nat:2> + <var:d> * <var:G> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> + <nat:2> \} \\ \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> + <nat:2> \} \, <var:d> := <nat:2> + <var:d> * <var:G> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> \} \\ \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> \} \, <var:d> := <nat:1> + <var:d> * <var:G> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> \} \\ \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> \} \, <var:d> := <nat:3> + <var:d> * <var:G> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> \} \\ \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> \} \, <var:d> := <nat:2> + <var:d> * <var:G> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> \} \\ \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> \} \, <var:d> := <nat:1> + <var:d> * <var:G> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> \} \end{eqnarray} This is sound using the assignment inference rule of Hoare techniques . Stepping through , \begin{eqnarray} \{ <var:G> = <var:D> \} \, <var:d> := <nat:2> \, \{ <var:G> = <var:D> \land <var:d> = <nat:2> \} \end{eqnarray} This is shown with the assignment scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:G> = <var:D> }} <var:d> := <nat:2> ; <var:d> := <nat:2> + <var:d> * <var:G> ; <var:d> := <nat:2> + <var:d> * <var:G> ; <var:d> := <nat:1> + <var:d> * <var:G> ; <var:d> := <nat:3> + <var:d> * <var:G> ; <var:d> := <nat:2> + <var:d> * <var:G> ; <var:d> := <nat:1> + <var:d> * <var:G> ; <var:d> := <nat:4> + <var:d> * <var:G> ; <var:d> := <nat:3> + <var:d> * <var:G> {{ <var:d> = <nat:2> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:d> = <nat:2> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 