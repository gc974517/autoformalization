\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:5> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:O> ; <var:H2> := <nat:5> ; <var:H2> := <var:H2> * <var:O> ; <var:H2> := <var:H2> * <var:O> ; <var:H3> := <nat:3> ; <var:H3> := <var:H3> * <var:O> ; <var:H3> := <var:H3> * <var:O> ; <var:H3> := <var:H3> * <var:O> ; <var:s> := <var:H3> ; <var:s> := <var:s> + <var:H2> ; <var:s> := <var:s> + <var:H1> ; <var:s> := <var:s> + <var:H0> \end{verbatim} Given that $ <var:O> = <var:b> $ given positive numbers $ <var:b> $ ahead of evaluating the list of instructions it follows that $ <var:s> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:5> \cdot <var:b> ^ <nat:2> + <nat:8> \cdot <var:b> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of our program can be accomplished with Hoare reasoning . Keeping momentum , we have \begin{verbatim} { <var:O> = <var:b> } <var:H0> := <nat:5> { <var:O> = <var:b> \land <var:H0> = <nat:5> } { <var:O> = <var:b> \land <var:H0> = <nat:5> } <var:H1> := <nat:8> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> } { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> } <var:H1> := <var:H1> * <var:O> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> } { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> } <var:H2> := <nat:5> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> \land <var:H2> = <nat:5> } { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> \land <var:H2> = <nat:5> } <var:H2> := <var:H2> * <var:O> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> \land <var:H2> = <nat:5> \times <var:b> } { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> \land <var:H2> = <nat:5> \times <var:b> } <var:H2> := <var:H2> * <var:O> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> \land <var:H2> = <nat:5> \times <var:b> ^ <nat:2> } { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> \land <var:H2> = <nat:5> \times <var:b> ^ <nat:2> } <var:H3> := <nat:3> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> \land <var:H2> = <nat:5> \times <var:b> ^ <nat:2> \land <var:H3> = <nat:3> } \end{verbatim} This is given by the scheme defined in typical Hoare reasoning . Observing the upcoming line found in our program , we have \begin{verbatim} { <var:O> = <var:b> } <var:H0> := <nat:5> { <var:O> = <var:b> \land <var:H0> = <nat:5> } \end{verbatim} This is sound using the environment update inference rule defined in usual Hoare techniques . Moving forward , we see \begin{verbatim} { <var:O> = <var:b> } <var:H0> := <nat:5> { <var:O> = <var:b> \land <var:H0> = <nat:5> } { <var:O> = <var:b> \land <var:H0> = <nat:5> } <var:H1> := <nat:8> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> } { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> } <var:H1> := <var:H1> * <var:O> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> } { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> } <var:H2> := <nat:5> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> \times <var:b> \land <var:H2> = <nat:5> } \end{verbatim} This is shown to be logically sound with the environment update rule in standard Hoare reasoning . Advancing to the next step , we have \begin{verbatim} { <var:O> = <var:b> } <var:H0> := <nat:5> { <var:O> = <var:b> \land <var:H0> = <nat:5> } { <var:O> = <var:b> \land <var:H0> = <nat:5> } <var:H1> := <nat:8> { <var:O> = <var:b> \land <var:H0> = <nat:5> \land <var:H1> = <nat:8> } \end{verbatim} This is shown with the environment update scheme from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:O> = <var:b> }} <var:H0> := <nat:5> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:O> ; <var:H2> := <nat:5> ; <var:H2> := <var:H2> * <var:O> ; <var:H2> := <var:H2> * <var:O> ; <var:H3> := <nat:3> ; <var:H3> := <var:H3> * <var:O> ; <var:H3> := <var:H3> * <var:O> ; <var:H3> := <var:H3> * <var:O> ; <var:s> := <var:H3> ; <var:s> := <var:s> + <var:H2> ; <var:s> := <var:s> + <var:H1> ; <var:s> := <var:s> + <var:H0> {{ <var:s> = <nat:3> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:H2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:H2> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:H2> = <nat:5> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:H2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:H3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:H2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:H2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:H2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:H2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:s> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:8> * <var:b> /\ <var:s> = <nat:3> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:H0> = <nat:5> /\ <var:s> = <nat:3> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:s> = <nat:3> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 