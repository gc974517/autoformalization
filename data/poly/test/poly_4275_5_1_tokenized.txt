\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:x> ; <var:K0> := <nat:5> ; <var:K1> := <var:K1> * <nat:7> ; <var:H> := <var:K1> <var:H> := <var:H> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:x> = <var:k> $ , given all $ <var:k> \in \mathbb{N} $ , ahead of running our list of instructions , it follows that we see $ <var:H> = <nat:7> \times <var:k> + <nat:5> $ after segment of code is done executing . \end{theorem} \begin{proof} Applying usual Hoare logic gives : \begin{eqnarray} \{ <var:x> = <var:k> \} \\ <var:K1> := <var:x> ; \\ \{ <var:x> = <var:k> \land <var:K1> = <var:k> \} \\ <var:K0> := <nat:5> ; \\ \{ <var:x> = <var:k> \land <var:K1> = <var:k> \land <var:K0> = <nat:5> \} \\ <var:K1> := <var:K1> * <nat:7> ; \\ \{ <var:x> = <var:k> \land <var:K1> = <nat:7> * <var:k> \land <var:K0> = <nat:5> \} \\ <var:H> := <var:K1> \\ \{ <var:x> = <var:k> \land <var:K0> = <nat:5> \land <var:H> = <nat:7> * <var:k> \} \\ <var:H> := <var:H> + <var:K0> \\ \{ <var:x> = <var:k> \land <var:H> = <nat:7> * <var:k> + <nat:5> \} \end{eqnarray} Thusly , the segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:x> ; <var:K0> := <nat:5> ; <var:K1> := <var:K1> * <nat:7> ; <var:H> := <var:K1> <var:H> := <var:H> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:x> = <var:k> }} <def:poly> {{ <var:H> = <nat:7> * <var:k> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:K1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:K1> = <var:k> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:K1> = <nat:7> * <var:k> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:K0> = <nat:5> /\ <var:H> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:H> = <nat:7> * <var:k> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 