\begin{document} \begin{theorem} Define the following code in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:2> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:g> ; <var:G2> := <var:G2> * <var:g> ; <var:I> := <var:G2> ; <var:I> := <var:I> + <var:G0> \end{verbatim} Allow that $ <var:g> = <var:O> $ before interpreting our list of commands it follows that we have $ <var:I> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the set of commands is evident with Hoare techniques . Advancing , \verb | { <var:g> = <var:O> } <var:G0> := <nat:2> { <var:g> = <var:O> \land <var:G0> = <nat:2> } | , \verb | { <var:g> = <var:O> \land <var:G0> = <nat:2> } <var:G2> := <nat:3> { <var:g> = <var:O> \land <var:G0> = <nat:2> \land <var:G2> = <nat:3> } | , \verb | { <var:g> = <var:O> \land <var:G0> = <nat:2> \land <var:G2> = <nat:3> } <var:G2> := <var:G2> * <var:g> { <var:g> = <var:O> \land <var:G0> = <nat:2> \land <var:G2> = <nat:3> \cdot <var:O> } | , \verb | { <var:g> = <var:O> \land <var:G0> = <nat:2> \land <var:G2> = <nat:3> \cdot <var:O> } <var:G2> := <var:G2> * <var:g> { <var:g> = <var:O> \land <var:G0> = <nat:2> \land <var:G2> = <nat:3> \cdot <var:O> ^ <nat:2> } | , \verb | { <var:g> = <var:O> \land <var:G0> = <nat:2> \land <var:G2> = <nat:3> \cdot <var:O> ^ <nat:2> } <var:I> := <var:G2> { <var:g> = <var:O> \land <var:G0> = <nat:2> \land <var:I> = <nat:3> \cdot <var:O> ^ <nat:2> } | and \verb | { <var:g> = <var:O> \land <var:G0> = <nat:2> \land <var:I> = <nat:3> \cdot <var:O> ^ <nat:2> } <var:I> := <var:I> + <var:G0{ <var:g> = <var:O> \land <var:I> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:g> = <var:O> }} <var:G0> := <nat:2> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:g> ; <var:G2> := <var:G2> * <var:g> ; <var:I> := <var:G2> ; <var:I> := <var:I> + <var:G0> {{ <var:I> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:G0> = <nat:2> /\ <var:I> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:I> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 