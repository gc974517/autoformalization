\begin{document} \begin{theorem} Define the following program : \begin{verbatim} <var:F1> := <var:I> ; <var:F2> := <var:F1> * <var:I> ; <var:F3> := <var:F2> * <var:I> ; <var:F0> := <nat:6> ; <var:F1> := <var:F1> * <nat:2> ; <var:F2> := <var:F2> * <nat:2> ; <var:F3> := <var:F3> * <nat:4> ; <var:m> := <var:F3> <var:m> := <var:m> + <var:F2> <var:m> := <var:m> + <var:F1> <var:m> := <var:m> + <var:F0> \end{verbatim} Assuming for all natural numbers $ <var:e> $ $ <var:I> = <var:e> $ prior to evaluating our list of instructions , then we see $ <var:m> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:6> $ once code segment has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is given with typical Hoare techniques . Moving forward to the subsequent statement in our segment of code , we see the variable assignmet code binding $ <var:I> $ as $ <var:F1>$ . This redefines $ \{ <var:I> = <var:e> \} $ toward the postcondition $ \{ <var:I> = <var:e> \land <var:F1> = <var:e> \} $ . Shifting focus toward the proceeding line of code found in the set of instructions , the assignment command binding $ <var:F1> * <var:I> $ to $ <var:F2>$ . This advances the precondition $ \{ <var:I> = <var:e> \land <var:F1> = <var:e> \} $ into the postcondition $ \{ <var:I> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \} $ . This is given through the assignment scheme given by Hoare logic . Advancing to the subsequent line seen in our code , we see the variable update command binding $ <var:F2> * <var:I> $ toward $ <var:F3>$ . This forwards the precondition $ \{ <var:I> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \} $ into the condition $ \{ <var:I> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \} $ . Focusing on the subsequent line of code seen in the series of commands , we see the environment update code binding $ <nat:6> $ to $ <var:F0>$ . This command advances the condition $ \{ <var:I> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \} $ toward the condition $ \{ <var:I> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:6> \} $ . This is shown using the assignment law defined in Hoare logic . Shifting focus toward the subsequent line of code found in our set of commands , we see the binding line yielding $ <var:F1> * <nat:2> $ as $ <var:F1>$ . This redefines the condition $ \{ <var:I> = <var:e> \land <var:F1> = <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:6> \} $ to the condition $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:6> \} $ . This is known to be sound using the assignment inference rule from standard Hoare techniques . Jumping to the following step contained in the list of commands , we have the assignment line defining $ <var:F2> * <nat:2> $ into $ <var:F2>$ . This advances the precondition $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F2> = <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:6> \} $ into the condition $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:6> \} $ . Moving on to the next step , we have the variable assignmet code \verb | <var:F3> := <var:F3> * <nat:4> ; | . This transfers $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:F3> = <var:e> ^ <nat:3> \land <var:F0> = <nat:6> \} $ into the postcondition $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:e> ^ <nat:3> \land <var:F0> = <nat:6> \} $ . Paying attention to the proceeding bit of code contained in the code segment , we have the assignment code yielding $ <var:F3$ into $ <var:m>$ . This transfers the precondition $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:e> ^ <nat:3> \land <var:F0> = <nat:6> \} $ to $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:F0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> \} $ . This is given through the assignment law found in typical Hoare techniques . Next , we have the variable update code \verb | <var:m> := <var:m> + <var:F2> | . This statement redefines the condition $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:F0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> \} $ to the condition $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> \} $ . This is known to be sound with the assignment rule defined by standard Hoare reasoning . Going to the next step , we see the binding statement assigning $ <var:m> + <var:F1$ as $ <var:m>$ . This line redefines the condition $ \{ <var:I> = <var:e> \land <var:F1> = <nat:2> \cdot <var:e> \land <var:F0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> \} $ toward $ \{ <var:I> = <var:e> \land <var:F0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> \} $ . Immediately after , we have the variable update line defining $ <var:m> + <var:F0$ as $ <var:m>$ . This code moves $ \{ <var:I> = <var:e> \land <var:F0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> \} $ toward $ \{ <var:I> = <var:e> \land <var:m> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:6> \} $ . This is known to be sound by the assignment inference rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:I> = <var:e> }} <var:F1> := <var:I> ; <var:F2> := <var:F1> * <var:I> ; <var:F3> := <var:F2> * <var:I> ; <var:F0> := <nat:6> ; <var:F1> := <var:F1> * <nat:2> ; <var:F2> := <var:F2> * <nat:2> ; <var:F3> := <var:F3> * <nat:4> ; <var:m> := <var:F3> <var:m> := <var:m> + <var:F2> <var:m> := <var:m> + <var:F1> <var:m> := <var:m> + <var:F0> {{ <var:m> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <var:e> /\ <var:F2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <var:e> /\ <var:F2> = <var:e> ^ <nat:2> /\ <var:F3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <var:e> /\ <var:F2> = <var:e> ^ <nat:2> /\ <var:F3> = <var:e> ^ <nat:3> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <nat:2> * <var:e> /\ <var:F2> = <var:e> ^ <nat:2> /\ <var:F3> = <var:e> ^ <nat:3> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <nat:2> * <var:e> /\ <var:F2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:F3> = <var:e> ^ <nat:3> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <nat:2> * <var:e> /\ <var:F2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:F3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <nat:2> * <var:e> /\ <var:F2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:F0> = <nat:6> /\ <var:m> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F1> = <nat:2> * <var:e> /\ <var:F0> = <nat:6> /\ <var:m> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:F0> = <nat:6> /\ <var:m> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:e> /\ <var:m> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 