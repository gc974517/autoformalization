\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:1> ; <var:D> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Given , given $ <var:G> \in \mathbb{Z}^+ $ , it to hold that $ <var:T> = <var:G> $ before evaluating the program it must be that we see $ <var:D> = <nat:1> $ when set of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code can be seen through Hoare techniques . Considering the upcoming bit of code contained in the segment of code , we see \verb | { <var:T> = <var:G> } <var:n0> := <nat:1> { <var:T> = <var:G> \land <var:n0> = <nat:1> } | . Advancing on , \verb | { <var:T> = <var:G> } <var:n0> := <nat:1> { <var:T> = <var:G> \land <var:n0> = <nat:1> } | . This is rigorously given by the binding rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:1> ; <var:D> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:T> = <var:G> }} <def:poly> {{ <var:D> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:D> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 