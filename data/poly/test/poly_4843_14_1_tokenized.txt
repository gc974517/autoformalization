\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:O> ; <var:y2> := <var:y1> * <var:O> ; <var:y3> := <var:y2> * <var:O> ; <var:y4> := <var:y3> * <var:O> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:3> ; <var:y2> := <var:y2> * <nat:1> ; <var:y3> := <var:y3> * <nat:4> ; <var:y4> := <var:y4> * <nat:7> ; <var:i> := <var:y4> <var:i> := <var:i> + <var:y3> <var:i> := <var:i> + <var:y2> <var:i> := <var:i> + <var:y1> <var:i> := <var:i> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Allow that we have $ <var:O> = <var:x> $ before interpreting the set of instructions it must be that we see $ <var:i> = <nat:7> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this series of instructions is done through usual Hoare reasoning . Honing in on the subsequent steps seen in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:x> \} & <var:y1> := <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \} & <var:y2> := <var:y1> * <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \} & <var:y3> := <var:y2> * <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \} & <var:y4> := <var:y3> * <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \land <var:y4> = <var:x> ^ <nat:4> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \land <var:y4> = <var:x> ^ <nat:4> \} & <var:y0> := <nat:2> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \land <var:y4> = <var:x> ^ <nat:4> \land <var:y0> = <nat:2> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \land <var:y4> = <var:x> ^ <nat:4> \land <var:y0> = <nat:2> \} & <var:y1> := <var:y1> * <nat:3> & \{ <var:O> = <var:x> \land <var:y1> = <nat:3> \cdot <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \land <var:y4> = <var:x> ^ <nat:4> \land <var:y0> = <nat:2> \} \end{tabular} Moving forward to the next steps found in our segment of code , \[ \begin{tabular} {rcl} \{ <var:O> = <var:x> \} & <var:y1> := <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \} & <var:y2> := <var:y1> * <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \} & <var:y3> := <var:y2> * <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \} \end{tabular} This is shown with the assignment law of standard Hoare reasoning . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:O> = <var:x> \} & <var:y1> := <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \} & <var:y2> := <var:y1> * <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \} \\ \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \} & <var:y3> := <var:y2> * <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \} \end{tabular} This is guaranteed using the variable update inference rule defined by typical Hoare techniques . Honing in on the next line seen in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:x> \} & <var:y1> := <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \} \end{tabular} This is guaranteed through the environment update law defined in usual Hoare logic . Immediately following , \[ \begin{tabular} {rcl} \{ <var:O> = <var:x> \} & <var:y1> := <var:O> & \{ <var:O> = <var:x> \land <var:y1> = <var:x> \} \end{tabular} This is deduced using the inference rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <var:y4> : string := " <var:y4> " . Definition <def:poly> := <var:y1> := <var:O> ; <var:y2> := <var:y1> * <var:O> ; <var:y3> := <var:y2> * <var:O> ; <var:y4> := <var:y3> * <var:O> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:3> ; <var:y2> := <var:y2> * <nat:1> ; <var:y3> := <var:y3> * <nat:4> ; <var:y4> := <var:y4> * <nat:7> ; <var:i> := <var:y4> <var:i> := <var:i> + <var:y3> <var:i> := <var:i> + <var:y2> <var:i> := <var:i> + <var:y1> <var:i> := <var:i> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:O> = <var:x> }} <def:poly> {{ <var:i> = <nat:7> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <var:x> /\ <var:y2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <var:x> /\ <var:y2> = <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <var:x> /\ <var:y2> = <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> /\ <var:y4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <var:x> /\ <var:y2> = <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> /\ <var:y4> = <var:x> ^ <nat:4> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <nat:3> * <var:x> /\ <var:y2> = <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> /\ <var:y4> = <var:x> ^ <nat:4> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <nat:3> * <var:x> /\ <var:y2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> /\ <var:y4> = <var:x> ^ <nat:4> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <nat:3> * <var:x> /\ <var:y2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:y3> = <nat:4> * <var:x> ^ <nat:3> /\ <var:y4> = <var:x> ^ <nat:4> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <nat:3> * <var:x> /\ <var:y2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:y3> = <nat:4> * <var:x> ^ <nat:3> /\ <var:y4> = <nat:7> * <var:x> ^ <nat:4> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <nat:3> * <var:x> /\ <var:y2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:y3> = <nat:4> * <var:x> ^ <nat:3> /\ <var:y0> = <nat:2> /\ <var:i> = <nat:7> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <nat:3> * <var:x> /\ <var:y2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:y0> = <nat:2> /\ <var:i> = <nat:7> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y1> = <nat:3> * <var:x> /\ <var:y0> = <nat:2> /\ <var:i> = <nat:7> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:y0> = <nat:2> /\ <var:i> = <nat:7> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:x> /\ <var:i> = <nat:7> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 