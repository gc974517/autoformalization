\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:S> ; <var:e2> := <var:e1> * <var:S> ; <var:e3> := <var:e2> * <var:S> ; <var:e4> := <var:e3> * <var:S> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:9> ; <var:e2> := <var:e2> * <nat:5> ; <var:e3> := <var:e3> * <nat:8> ; <var:e4> := <var:e4> * <nat:5> ; <var:d> := <var:e4> <var:d> := <var:d> + <var:e3> <var:d> := <var:d> + <var:e2> <var:d> := <var:d> + <var:e1> <var:d> := <var:d> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Assuming $ <var:S> = <var:a> $ , for some positive integer coefficients $ <var:a> $ , ahead of the evaluation of our set of instructions it must be that we see $ <var:d> = <nat:5> \times <var:a> ^ <nat:4> + <nat:8> \times <var:a> ^ <nat:3> + <nat:5> \times <var:a> ^ <nat:2> + <nat:9> \times <var:a> + <nat:5> $ . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:S> = <var:a> \} \\ <var:e1> := <var:S> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <var:a> \} \\ <var:e2> := <var:e1> * <var:S> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:S> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e3> = <var:a> ^ <nat:3> \} \\ <var:e4> := <var:e3> * <var:S> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e3> = <var:a> ^ <nat:3> \land <var:e4> = <var:a> ^ <nat:4> \} \\ <var:e0> := <nat:5> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e3> = <var:a> ^ <nat:3> \land <var:e4> = <var:a> ^ <nat:4> \land <var:e0> = <nat:5> \} \\ <var:e1> := <var:e1> * <nat:9> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e3> = <var:a> ^ <nat:3> \land <var:e4> = <var:a> ^ <nat:4> \land <var:e0> = <nat:5> \} \\ <var:e2> := <var:e2> * <nat:5> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:e3> = <var:a> ^ <nat:3> \land <var:e4> = <var:a> ^ <nat:4> \land <var:e0> = <nat:5> \} \\ <var:e3> := <var:e3> * <nat:8> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:e3> = <nat:8> \times <var:a> ^ <nat:3> \land <var:e4> = <var:a> ^ <nat:4> \land <var:e0> = <nat:5> \} \\ <var:e4> := <var:e4> * <nat:5> ; \\ \{ <var:S> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:e3> = <nat:8> \times <var:a> ^ <nat:3> \land <var:e4> = <nat:5> \times <var:a> ^ <nat:4> \land <var:e0> = <nat:5> \} \\ <var:d> := <var:e4> \\ \{ <var:S> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:e3> = <nat:8> \times <var:a> ^ <nat:3> \land <var:e0> = <nat:5> \land <var:d> = <nat:5> \times <var:a> ^ <nat:4> \} \\ <var:d> := <var:d> + <var:e3> \\ \{ <var:S> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:e0> = <nat:5> \land <var:d> = <nat:5> \times <var:a> ^ <nat:4> + <nat:8> \times <var:a> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:e2> \\ \{ <var:S> = <var:a> \land <var:e1> = <nat:9> \times <var:a> \land <var:e0> = <nat:5> \land <var:d> = <nat:5> \times <var:a> ^ <nat:4> + <nat:8> \times <var:a> ^ <nat:3> + <nat:5> \times <var:a> ^ <nat:2> \} \end{eqnarray} Advancing executing the series of instructions returns : \begin{eqnarray} <var:d> := <var:d> + <var:e1> \\ \{ <var:S> = <var:a> \land <var:e0> = <nat:5> \land <var:d> = <nat:5> \times <var:a> ^ <nat:4> + <nat:8> \times <var:a> ^ <nat:3> + <nat:5> \times <var:a> ^ <nat:2> + <nat:9> \times <var:a> \} \\ <var:d> := <var:d> + <var:e0> \\ \{ <var:S> = <var:a> \land <var:d> = <nat:5> \times <var:a> ^ <nat:4> + <nat:8> \times <var:a> ^ <nat:3> + <nat:5> \times <var:a> ^ <nat:2> + <nat:9> \times <var:a> + <nat:5> \} \end{eqnarray} Given the preceding argument , our code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <var:e4> : string := " <var:e4> " . Definition <def:poly> := <var:e1> := <var:S> ; <var:e2> := <var:e1> * <var:S> ; <var:e3> := <var:e2> * <var:S> ; <var:e4> := <var:e3> * <var:S> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:9> ; <var:e2> := <var:e2> * <nat:5> ; <var:e3> := <var:e3> * <nat:8> ; <var:e4> := <var:e4> * <nat:5> ; <var:d> := <var:e4> <var:d> := <var:d> + <var:e3> <var:d> := <var:d> + <var:e2> <var:d> := <var:d> + <var:e1> <var:d> := <var:d> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:S> = <var:a> }} <def:poly> {{ <var:d> = <nat:5> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <var:a> /\ <var:e2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <var:a> /\ <var:e2> = <var:a> ^ <nat:2> /\ <var:e3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <var:a> /\ <var:e2> = <var:a> ^ <nat:2> /\ <var:e3> = <var:a> ^ <nat:3> /\ <var:e4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <var:a> /\ <var:e2> = <var:a> ^ <nat:2> /\ <var:e3> = <var:a> ^ <nat:3> /\ <var:e4> = <var:a> ^ <nat:4> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <nat:9> * <var:a> /\ <var:e2> = <var:a> ^ <nat:2> /\ <var:e3> = <var:a> ^ <nat:3> /\ <var:e4> = <var:a> ^ <nat:4> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <nat:9> * <var:a> /\ <var:e2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:e3> = <var:a> ^ <nat:3> /\ <var:e4> = <var:a> ^ <nat:4> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <nat:9> * <var:a> /\ <var:e2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:e3> = <nat:8> * <var:a> ^ <nat:3> /\ <var:e4> = <var:a> ^ <nat:4> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <nat:9> * <var:a> /\ <var:e2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:e3> = <nat:8> * <var:a> ^ <nat:3> /\ <var:e4> = <nat:5> * <var:a> ^ <nat:4> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <nat:9> * <var:a> /\ <var:e2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:e3> = <nat:8> * <var:a> ^ <nat:3> /\ <var:e0> = <nat:5> /\ <var:d> = <nat:5> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <nat:9> * <var:a> /\ <var:e2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:e0> = <nat:5> /\ <var:d> = <nat:5> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e1> = <nat:9> * <var:a> /\ <var:e0> = <nat:5> /\ <var:d> = <nat:5> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:e0> = <nat:5> /\ <var:d> = <nat:5> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:d> = <nat:5> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 