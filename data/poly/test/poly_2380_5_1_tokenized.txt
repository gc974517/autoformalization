\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:c1> := <var:M> ; <var:c0> := <nat:2> ; <var:c1> := <var:c1> * <nat:1> ; <var:v> := <var:c1> <var:v> := <var:v> + <var:c0> \end{verbatim} Allowing it to be that $ <var:M> = <var:s> $ , assuming some integers $ <var:s> $ , before evaluating our code segment it must be that $ <var:v> = <nat:1> \cdot <var:s> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our list of commands is evident using Hoare reasoning . Moving on to the upcoming pieces of code contained in the code segment , we see \verb | { <var:M> = <var:s> } <var:c1> := <var:M> { <var:M> = <var:s> \land <var:c1> = <var:s> } | , \verb | { <var:M> = <var:s> \land <var:c1> = <var:s> } <var:c0> := <nat:2> { <var:M> = <var:s> \land <var:c1> = <var:s> \land <var:c0> = <nat:2> } | , \verb | { <var:M> = <var:s> \land <var:c1> = <var:s> \land <var:c0> = <nat:2> } <var:c1> := <var:c1> * <nat:1> { <var:M> = <var:s> \land <var:c1> = <nat:1> \times <var:s> \land <var:c0> = <nat:2> } | , \verb | { <var:M> = <var:s> \land <var:c1> = <nat:1> \times <var:s> \land <var:c0> = <nat:2> } <var:v> := <var:c1{ <var:M> = <var:s> \land <var:c0> = <nat:2> \land <var:v> = <nat:1> \times <var:s> } | and \verb | { <var:M> = <var:s> \land <var:c0> = <nat:2> \land <var:v> = <nat:1> \times <var:s> } <var:v> := <var:v> + <var:c0{ <var:M> = <var:s> \land <var:v> = <nat:1> \times <var:s> + <nat:2> } | . This is given through the law found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:M> = <var:s> }} <var:c1> := <var:M> ; <var:c0> := <nat:2> ; <var:c1> := <var:c1> * <nat:1> ; <var:v> := <var:c1> <var:v> := <var:v> + <var:c0> {{ <var:v> = <nat:1> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <var:s> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <nat:1> * <var:s> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c0> = <nat:2> /\ <var:v> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:v> = <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 