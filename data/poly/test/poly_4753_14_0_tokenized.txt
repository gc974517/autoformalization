\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:8> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:W> ; <var:B2> := <nat:2> ; <var:B2> := <var:B2> * <var:W> ; <var:B2> := <var:B2> * <var:W> ; <var:B3> := <nat:4> ; <var:B3> := <var:B3> * <var:W> ; <var:B3> := <var:B3> * <var:W> ; <var:B3> := <var:B3> * <var:W> ; <var:Y> := <var:B3> ; <var:Y> := <var:Y> + <var:B2> ; <var:Y> := <var:Y> + <var:B1> ; <var:Y> := <var:Y> + <var:B0> \end{verbatim} Assuming ( given every $ <var:E> \in \mathbb{Z}^+ $ ) that $ <var:W> = <var:E> $ before evaluating the list of instructions , it follows that $ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be given by standard Hoare logic . Moving on to the following bits of codecontained in our list of instructions , we have \begin{eqnarray} \{ <var:W> = <var:E> \} \, <var:B0> := <nat:8> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \} \, <var:B1> := <nat:4> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \} \, <var:B1> := <var:B1> * <var:W> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \} \, <var:B2> := <nat:2> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \} \, <var:B2> := <var:B2> * <var:W> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> \} \, <var:B2> := <var:B2> * <var:W> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \} \, <var:B3> := <nat:4> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:B3> = <nat:4> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:B3> = <nat:4> \} \, <var:B3> := <var:B3> * <var:W> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:E> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:E> \} \, <var:B3> := <var:B3> * <var:W> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:E> ^ <nat:2> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:E> ^ <nat:2> \} \, <var:B3> := <var:B3> * <var:W> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:E> ^ <nat:3> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:B3> = <nat:4> \times <var:E> ^ <nat:3> \} \, <var:Y> := <var:B3> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:B2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> \} \, <var:Y> := <var:Y> + <var:B2> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \times <var:E> \land <var:Y> = <nat:4> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> \} \end{eqnarray} Taking a look at the next steps contained in the code , \begin{eqnarray} \{ <var:W> = <var:E> \} \, <var:B0> := <nat:8> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \} \\ \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \} \, <var:B1> := <nat:4> \, \{ <var:W> = <var:E> \land <var:B0> = <nat:8> \land <var:B1> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:W> = <var:E> }} <var:B0> := <nat:8> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:W> ; <var:B2> := <nat:2> ; <var:B2> := <var:B2> * <var:W> ; <var:B2> := <var:B2> * <var:W> ; <var:B3> := <nat:4> ; <var:B3> := <var:B3> * <var:W> ; <var:B3> := <var:B3> * <var:W> ; <var:B3> := <var:B3> * <var:W> ; <var:Y> := <var:B3> ; <var:Y> := <var:Y> + <var:B2> ; <var:Y> := <var:Y> + <var:B1> ; <var:Y> := <var:Y> + <var:B0> {{ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:B2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:B3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:Y> = <nat:4> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:4> * <var:E> /\ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:B0> = <nat:8> /\ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:Y> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 