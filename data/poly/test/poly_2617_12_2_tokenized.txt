\begin{document} \begin{theorem} Take a set of instructions as \begin{verbatim} <var:V> := <nat:1> ; <var:V> := <nat:1> + <var:V> * <var:f> ; <var:V> := <nat:3> + <var:V> * <var:f> ; <var:V> := <nat:4> + <var:V> * <var:f> ; <var:V> := <nat:3> + <var:V> * <var:f> ; <var:V> := <nat:1> + <var:V> * <var:f> ; <var:V> := <nat:2> + <var:V> * <var:f> ; <var:V> := <nat:3> + <var:V> * <var:f> ; <var:V> := <nat:4> + <var:V> * <var:f> ; <var:V> := <nat:3> + <var:V> * <var:f> ; <var:V> := <nat:2> + <var:V> * <var:f> ; <var:V> := <nat:2> + <var:V> * <var:f> \end{verbatim} Allow with some positive integer coefficients $ <var:h> $ that we have $ <var:f> = <var:h> $ prior to executing this segment of code it follows that we have $ <var:V> = <nat:1> \times <var:h> ^ <nat:11> + <nat:1> \times <var:h> ^ <nat:10> + <nat:3> \times <var:h> ^ <nat:9> + <nat:4> \times <var:h> ^ <nat:8> + <nat:3> \times <var:h> ^ <nat:7> + <nat:1> \times <var:h> ^ <nat:6> + <nat:2> \times <var:h> ^ <nat:5> + <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:2> $ after segment of code is done . \end{theorem} \begin{proof} Proving correctness for this set of commands can be done using standard Hoare reasoning . Looking at the proceeding pieces of code found in our series of commands , \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:V> := <nat:1> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \} \, <var:V> := <nat:1> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> + <nat:1> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> + <nat:1> \} \, <var:V> := <nat:3> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:2> + <nat:1> \times <var:h> + <nat:3> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:2> + <nat:1> \times <var:h> + <nat:3> \} \, <var:V> := <nat:4> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:4> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:4> \} \, <var:V> := <nat:3> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:3> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:3> \} \, <var:V> := <nat:1> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:5> + <nat:1> \times <var:h> ^ <nat:4> + <nat:3> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:1> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:V> := <nat:1> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \} \, <var:V> := <nat:1> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> + <nat:1> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> + <nat:1> \} \, <var:V> := <nat:3> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:2> + <nat:1> \times <var:h> + <nat:3> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:2> + <nat:1> \times <var:h> + <nat:3> \} \, <var:V> := <nat:4> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:4> \} \\ \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:4> \} \, <var:V> := <nat:3> + <var:V> * <var:f> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:3> \} \end{eqnarray} Advancing to the subsequent statement found in the set of commands , we see \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:V> := <nat:1> \, \{ <var:f> = <var:h> \land <var:V> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:f> = <var:h> }} <var:V> := <nat:1> ; <var:V> := <nat:1> + <var:V> * <var:f> ; <var:V> := <nat:3> + <var:V> * <var:f> ; <var:V> := <nat:4> + <var:V> * <var:f> ; <var:V> := <nat:3> + <var:V> * <var:f> ; <var:V> := <nat:1> + <var:V> * <var:f> ; <var:V> := <nat:2> + <var:V> * <var:f> ; <var:V> := <nat:3> + <var:V> * <var:f> ; <var:V> := <nat:4> + <var:V> * <var:f> ; <var:V> := <nat:3> + <var:V> * <var:f> ; <var:V> := <nat:2> + <var:V> * <var:f> ; <var:V> := <nat:2> + <var:V> * <var:f> {{ <var:V> = <nat:1> * <var:h> ^ <nat:11> + <nat:1> * <var:h> ^ <nat:10> + <nat:3> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:9> + <nat:1> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:10> + <nat:1> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:11> + <nat:1> * <var:h> ^ <nat:10> + <nat:3> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 