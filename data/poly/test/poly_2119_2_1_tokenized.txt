\begin{document} \begin{theorem} We define a program : \begin{verbatim} <var:s0> := <nat:4> ; <var:J> := <var:s0> \end{verbatim} Assume it to be that $ <var:D> = <var:g> $ , for integers $ <var:g> $ , before interpreting the set of commands it follows that we have $ <var:J> = <nat:4> $ after list of instructions has finished executing . \end{theorem} \begin{proof} Applying usual Hoare logic returns : \begin{eqnarray} \{ <var:D> = <var:g> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:D> = <var:g> \land <var:s0> = <nat:4> \} \\ <var:J> := <var:s0> \\ \{ <var:D> = <var:g> \land <var:J> = <nat:4> \} \end{eqnarray} Given the preceding argument , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:D> = <var:g> }} <var:s0> := <nat:4> ; <var:J> := <var:s0> {{ <var:J> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:J> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 