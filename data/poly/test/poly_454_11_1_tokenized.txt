\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as \begin{verbatim} <var:m1> := <var:O> ; <var:m2> := <var:m1> * <var:O> ; <var:m3> := <var:m2> * <var:O> ; <var:m0> := <nat:5> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:7> ; <var:m3> := <var:m3> * <nat:4> ; <var:M> := <var:m3> <var:M> := <var:M> + <var:m2> <var:M> := <var:M> + <var:m1> <var:M> := <var:M> + <var:m0> \end{verbatim} Given it to be that $ <var:O> = <var:t> $ prior to the evaluation of the program , it holds that $ <var:M> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:7> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:5> $ when series of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for our list of commands can be demonstrated using usual Hoare reasoning . Next , \begin{eqnarray} \{ <var:O> = <var:t> \} \, <var:m1> := <var:O> \, \{ <var:O> = <var:t> \land <var:m1> = <var:t> \} \\ \{ <var:O> = <var:t> \land <var:m1> = <var:t> \} \, <var:m2> := <var:m1> * <var:O> \, \{ <var:O> = <var:t> \land <var:m1> = <var:t> \land <var:m2> = <var:t> ^ <nat:2> \} \\ \{ <var:O> = <var:t> \land <var:m1> = <var:t> \land <var:m2> = <var:t> ^ <nat:2> \} \, <var:m3> := <var:m2> * <var:O> \, \{ <var:O> = <var:t> \land <var:m1> = <var:t> \land <var:m2> = <var:t> ^ <nat:2> \land <var:m3> = <var:t> ^ <nat:3> \} \\ \{ <var:O> = <var:t> \land <var:m1> = <var:t> \land <var:m2> = <var:t> ^ <nat:2> \land <var:m3> = <var:t> ^ <nat:3> \} \, <var:m0> := <nat:5> \, \{ <var:O> = <var:t> \land <var:m1> = <var:t> \land <var:m2> = <var:t> ^ <nat:2> \land <var:m3> = <var:t> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ \{ <var:O> = <var:t> \land <var:m1> = <var:t> \land <var:m2> = <var:t> ^ <nat:2> \land <var:m3> = <var:t> ^ <nat:3> \land <var:m0> = <nat:5> \} \, <var:m1> := <var:m1> * <nat:2> \, \{ <var:O> = <var:t> \land <var:m1> = <nat:2> \times <var:t> \land <var:m2> = <var:t> ^ <nat:2> \land <var:m3> = <var:t> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ \{ <var:O> = <var:t> \land <var:m1> = <nat:2> \times <var:t> \land <var:m2> = <var:t> ^ <nat:2> \land <var:m3> = <var:t> ^ <nat:3> \land <var:m0> = <nat:5> \} \, <var:m2> := <var:m2> * <nat:7> \, \{ <var:O> = <var:t> \land <var:m1> = <nat:2> \times <var:t> \land <var:m2> = <nat:7> \times <var:t> ^ <nat:2> \land <var:m3> = <var:t> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ \{ <var:O> = <var:t> \land <var:m1> = <nat:2> \times <var:t> \land <var:m2> = <nat:7> \times <var:t> ^ <nat:2> \land <var:m3> = <var:t> ^ <nat:3> \land <var:m0> = <nat:5> \} \, <var:m3> := <var:m3> * <nat:4> \, \{ <var:O> = <var:t> \land <var:m1> = <nat:2> \times <var:t> \land <var:m2> = <nat:7> \times <var:t> ^ <nat:2> \land <var:m3> = <nat:4> \times <var:t> ^ <nat:3> \land <var:m0> = <nat:5> \} \end{eqnarray} Moving on to the next step , \begin{eqnarray} \{ <var:O> = <var:t> \} \, <var:m1> := <var:O> \, \{ <var:O> = <var:t> \land <var:m1> = <var:t> \} \\ \{ <var:O> = <var:t> \land <var:m1> = <var:t> \} \, <var:m2> := <var:m1> * <var:O> \, \{ <var:O> = <var:t> \land <var:m1> = <var:t> \land <var:m2> = <var:t> ^ <nat:2> \} \end{eqnarray} Going to the next step , \begin{eqnarray} \{ <var:O> = <var:t> \} \, <var:m1> := <var:O> \, \{ <var:O> = <var:t> \land <var:m1> = <var:t> \} \\ \{ <var:O> = <var:t> \land <var:m1> = <var:t> \} \, <var:m2> := <var:m1> * <var:O> \, \{ <var:O> = <var:t> \land <var:m1> = <var:t> \land <var:m2> = <var:t> ^ <nat:2> \} \end{eqnarray} This is shown through the variable update scheme found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:O> = <var:t> }} <var:m1> := <var:O> ; <var:m2> := <var:m1> * <var:O> ; <var:m3> := <var:m2> * <var:O> ; <var:m0> := <nat:5> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:7> ; <var:m3> := <var:m3> * <nat:4> ; <var:M> := <var:m3> <var:M> := <var:M> + <var:m2> <var:M> := <var:M> + <var:m1> <var:M> := <var:M> + <var:m0> {{ <var:M> = <nat:4> * <var:t> ^ <nat:3> + <nat:7> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <var:t> /\ <var:m2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <var:t> /\ <var:m2> = <var:t> ^ <nat:2> /\ <var:m3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <var:t> /\ <var:m2> = <var:t> ^ <nat:2> /\ <var:m3> = <var:t> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <nat:2> * <var:t> /\ <var:m2> = <var:t> ^ <nat:2> /\ <var:m3> = <var:t> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <nat:2> * <var:t> /\ <var:m2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:m3> = <var:t> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <nat:2> * <var:t> /\ <var:m2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:m3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <nat:2> * <var:t> /\ <var:m2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:m0> = <nat:5> /\ <var:M> = <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m1> = <nat:2> * <var:t> /\ <var:m0> = <nat:5> /\ <var:M> = <nat:4> * <var:t> ^ <nat:3> + <nat:7> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:m0> = <nat:5> /\ <var:M> = <nat:4> * <var:t> ^ <nat:3> + <nat:7> * <var:t> ^ <nat:2> + <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:M> = <nat:4> * <var:t> ^ <nat:3> + <nat:7> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 