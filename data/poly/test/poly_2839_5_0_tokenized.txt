\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:9> ; <var:f1> := <nat:5> ; <var:f1> := <var:f1> * <var:J> ; <var:P> := <var:f1> ; <var:P> := <var:P> + <var:f0> \end{verbatim} Allow it to hold that $ <var:J> = <var:M> $ before the execution of the list of commands it follows that we have $ <var:P> = <nat:5> \times <var:M> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:M> \} \\ <var:f0> := <nat:9> ; \\ \{ <var:J> = <var:M> \land <var:f0> = <nat:9> \} \\ <var:f1> := <nat:5> ; \\ \{ <var:J> = <var:M> \land <var:f0> = <nat:9> \land <var:f1> = <nat:5> \} \\ <var:f1> := <var:f1> * <var:J> ; \\ \{ <var:J> = <var:M> \land <var:f0> = <nat:9> \land <var:f1> = <nat:5> * <var:M> \} \\ <var:P> := <var:f1> ; \\ \{ <var:J> = <var:M> \land <var:f0> = <nat:9> \land <var:P> = <nat:5> * <var:M> \} \\ <var:P> := <var:P> + <var:f0> \\ \{ <var:J> = <var:M> \land <var:P> = <nat:5> * <var:M> + <nat:9> \} \end{eqnarray} Using usual Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:J> = <var:M> }} <var:f0> := <nat:9> ; <var:f1> := <nat:5> ; <var:f1> := <var:f1> * <var:J> ; <var:P> := <var:f1> ; <var:P> := <var:P> + <var:f0> {{ <var:P> = <nat:5> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:f0> = <nat:9> /\ <var:P> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:P> = <nat:5> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 