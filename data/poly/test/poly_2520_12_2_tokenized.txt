\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d> := <nat:2> ; <var:d> := <nat:4> + <var:d> * <var:g> ; <var:d> := <nat:2> + <var:d> * <var:g> ; <var:d> := <nat:2> + <var:d> * <var:g> ; <var:d> := <var:d> * <var:g> ; <var:d> := <var:d> * <var:g> ; <var:d> := <nat:3> + <var:d> * <var:g> ; <var:d> := <nat:3> + <var:d> * <var:g> ; <var:d> := <nat:1> + <var:d> * <var:g> ; <var:d> := <var:d> * <var:g> ; <var:d> := <nat:1> + <var:d> * <var:g> ; <var:d> := <nat:3> + <var:d> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Assume ( for any positive coefficients $ <var:L> $ ) $ <var:g> = <var:L> $ before running the set of instructions , it must be that $ <var:d> = <nat:2> \times <var:L> ^ <nat:11> + <nat:4> \times <var:L> ^ <nat:10> + <nat:2> \times <var:L> ^ <nat:9> + <nat:2> \times <var:L> ^ <nat:8> + <nat:3> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be given by typical Hoare reasoning . Observing the upcoming steps contained in the program , \begin{eqnarray} \{ <var:g> = <var:L> \} \, <var:d> := <nat:2> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> \} \, <var:d> := <nat:4> + <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> + <nat:4> \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> + <nat:4> \} \, <var:d> := <nat:2> + <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> \} \, <var:d> := <nat:2> + <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> \} \, <var:d> := <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + \} \, <var:d> := <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + \} \, <var:d> := <nat:3> + <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> \} \end{eqnarray} Immediately following , \begin{eqnarray} \{ <var:g> = <var:L> \} \, <var:d> := <nat:2> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> \} \, <var:d> := <nat:4> + <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> + <nat:4> \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> + <nat:4> \} \, <var:d> := <nat:2> + <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> \} \end{eqnarray} This is shown using the variable binding inference rule defined by typical Hoare techniques . Taking a look at the upcoming lines of codein our code , we have \begin{eqnarray} \{ <var:g> = <var:L> \} \, <var:d> := <nat:2> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> \} \\ \{ <var:g> = <var:L> \land <var:d> = <nat:2> \} \, <var:d> := <nat:4> + <var:d> * <var:g> \, \{ <var:g> = <var:L> \land <var:d> = <nat:2> * <var:L> + <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:2> ; <var:d> := <nat:4> + <var:d> * <var:g> ; <var:d> := <nat:2> + <var:d> * <var:g> ; <var:d> := <nat:2> + <var:d> * <var:g> ; <var:d> := <var:d> * <var:g> ; <var:d> := <var:d> * <var:g> ; <var:d> := <nat:3> + <var:d> * <var:g> ; <var:d> := <nat:3> + <var:d> * <var:g> ; <var:d> := <nat:1> + <var:d> * <var:g> ; <var:d> := <var:d> * <var:g> ; <var:d> := <nat:1> + <var:d> * <var:g> ; <var:d> := <nat:3> + <var:d> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:g> = <var:L> }} <def:poly> {{ <var:d> = <nat:2> * <var:L> ^ <nat:11> + <nat:4> * <var:L> ^ <nat:10> + <nat:2> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:10> + <nat:4> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d> = <nat:2> * <var:L> ^ <nat:11> + <nat:4> * <var:L> ^ <nat:10> + <nat:2> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 