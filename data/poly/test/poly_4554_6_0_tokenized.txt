\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:T0> := <nat:9> ; <var:T2> := <nat:2> ; <var:T2> := <var:T2> * <var:Z> ; <var:T2> := <var:T2> * <var:Z> ; <var:I> := <var:T2> ; <var:I> := <var:I> + <var:T0> \end{verbatim} Given , given some $ <var:e> $ , it to be that $ <var:Z> = <var:e> $ before interpreting this set of commands it holds that we have $ <var:I> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques yields : \begin{eqnarray} \{ <var:Z> = <var:e> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:Z> = <var:e> \land <var:T0> = <nat:9> \} \\ <var:T2> := <nat:2> ; \\ \{ <var:Z> = <var:e> \land <var:T0> = <nat:9> \land <var:T2> = <nat:2> \} \\ <var:T2> := <var:T2> * <var:Z> ; \\ \{ <var:Z> = <var:e> \land <var:T0> = <nat:9> \land <var:T2> = <nat:2> * <var:e> \} \\ <var:T2> := <var:T2> * <var:Z> ; \\ \{ <var:Z> = <var:e> \land <var:T0> = <nat:9> \land <var:T2> = <nat:2> * <var:e> ^ <nat:2> \} \\ <var:I> := <var:T2> ; \\ \{ <var:Z> = <var:e> \land <var:T0> = <nat:9> \land <var:I> = <nat:2> * <var:e> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:T0> \\ \{ <var:Z> = <var:e> \land <var:I> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> \} \end{eqnarray} Considering the preceding argument , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:Z> = <var:e> }} <var:T0> := <nat:9> ; <var:T2> := <nat:2> ; <var:T2> := <var:T2> * <var:Z> ; <var:T2> := <var:T2> * <var:Z> ; <var:I> := <var:T2> ; <var:I> := <var:I> + <var:T0> {{ <var:I> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:T0> = <nat:9> /\ <var:T2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:T0> = <nat:9> /\ <var:T2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:T0> = <nat:9> /\ <var:T2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:T0> = <nat:9> /\ <var:I> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:I> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 