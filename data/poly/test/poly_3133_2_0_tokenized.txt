\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:9> ; <var:R> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Allowing that we have $ <var:z> = <var:H> $ ahead of evaluating our code segment it follows that $ <var:R> = <nat:9> $ when list of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:H> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:z> = <var:H> \land <var:O0> = <nat:9> \} \\ <var:R> := <var:O0> \\ \{ <var:z> = <var:H> \land <var:R> = <nat:9> \} \end{eqnarray} Utilizing standard Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:9> ; <var:R> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:z> = <var:H> }} <def:poly> {{ <var:R> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:H> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:H> /\ <var:R> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 