\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> \end{verbatim} Given it to hold that $ <var:h> = <var:X> $ prior to the evaluation of this list of instructions , then $ <var:a> = <nat:1> \cdot <var:X> ^ <nat:8> + <nat:3> \cdot <var:X> ^ <nat:7> + <nat:4> \cdot <var:X> ^ <nat:6> + <nat:2> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:2> $ once set of instructions is done . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions is done with usual Hoare reasoning . Honing in on the next command contained in the list of commands , we have the environment update command \verb | <var:a> := <nat:1> ; | . This statement redefines the precondition $ \{ <var:h> = <var:X> \} $ toward the condition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> \} $ . This is rigorously given by the assignment law defined by usual Hoare logic . Advancing to the next step , we see the command \verb | <var:a> := <nat:3> + <var:a> * <var:h> ; | . This advances the precondition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> \} $ to the postcondition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> + <nat:3> \} $ . This is ensured by the assignment inference rule from standard Hoare techniques . Stepping through , we have the variable update line \verb | <var:a> := <nat:4> + <var:a> * <var:h> ; | . This statement takes the condition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> + <nat:3> \} $ toward $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> \} $ . Considering the proceeding line of code contained in the list of commands , we have the environment update statement assigning $ <nat:2> + <var:a> * <var:h> $ as $ <var:a>$ . This code redefines the condition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> \} $ to the condition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> \} $ . This is known to be sound using the assignment rule from standard Hoare reasoning . Focusing on the next line of code seen in the code segment , we see the assignment statement letting $ <nat:4> + <var:a> * <var:h> $ as $ <var:a>$ . This advances $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> \} $ . Moving on , the binding code \verb | <var:a> := <nat:3> + <var:a> * <var:h> ; | . This code forwards the precondition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> \} $ toward the condition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> \} $ . This is deduced through the assignment law defined by typical Hoare logic . Moving forward to the next step , the code \verb | <var:a> := <nat:4> + <var:a> * <var:h> ; | . This statement moves $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> \} $ . This is guaranteed through the assignment rule from standard Hoare reasoning . Next , we see the variable update line \verb | <var:a> := <nat:4> + <var:a> * <var:h> ; | . This takes $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> \} $ as the condition $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> \} $ . Keeping momentum , we have the statement defining $ <nat:2> + <var:a> * <var:h$ as $ <var:a>$ . This code moves $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> \} $ toward $ \{ <var:h> = <var:X> \land <var:a> = <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:h> = <var:X> }} <var:a> := <nat:1> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> {{ <var:a> = <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:a> = <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 