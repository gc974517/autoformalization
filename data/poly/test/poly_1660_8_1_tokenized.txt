\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:s> ; <var:C2> := <var:C1> * <var:s> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:3> ; <var:C2> := <var:C2> * <nat:2> ; <var:y> := <var:C2> <var:y> := <var:y> + <var:C1> <var:y> := <var:y> + <var:C0> \end{verbatim} Assuming it to hold that $ <var:s> = <var:V> $ ahead of executing the code segment it must be that we have $ <var:y> = <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:1> $ once list of instructions has executed . \end{theorem} \begin{proof} Applying usual Hoare techniques produces : \begin{eqnarray} \{ <var:s> = <var:V> \} \\ <var:C1> := <var:s> ; \\ \{ <var:s> = <var:V> \land <var:C1> = <var:V> \} \\ <var:C2> := <var:C1> * <var:s> ; \\ \{ <var:s> = <var:V> \land <var:C1> = <var:V> \land <var:C2> = <var:V> ^ <nat:2> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:s> = <var:V> \land <var:C1> = <var:V> \land <var:C2> = <var:V> ^ <nat:2> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:3> ; \\ \{ <var:s> = <var:V> \land <var:C1> = <nat:3> * <var:V> \land <var:C2> = <var:V> ^ <nat:2> \land <var:C0> = <nat:1> \} \\ <var:C2> := <var:C2> * <nat:2> ; \\ \{ <var:s> = <var:V> \land <var:C1> = <nat:3> * <var:V> \land <var:C2> = <nat:2> * <var:V> ^ <nat:2> \land <var:C0> = <nat:1> \} \\ <var:y> := <var:C2> \\ \{ <var:s> = <var:V> \land <var:C1> = <nat:3> * <var:V> \land <var:C0> = <nat:1> \land <var:y> = <nat:2> * <var:V> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:C1> \\ \{ <var:s> = <var:V> \land <var:C0> = <nat:1> \land <var:y> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> \} \\ <var:y> := <var:y> + <var:C0> \\ \{ <var:s> = <var:V> \land <var:y> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> \} \end{eqnarray} Considering the above , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:s> = <var:V> }} <var:C1> := <var:s> ; <var:C2> := <var:C1> * <var:s> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:3> ; <var:C2> := <var:C2> * <nat:2> ; <var:y> := <var:C2> <var:y> := <var:y> + <var:C1> <var:y> := <var:y> + <var:C0> {{ <var:y> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:C1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:C1> = <var:V> /\ <var:C2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:C1> = <var:V> /\ <var:C2> = <var:V> ^ <nat:2> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:C1> = <nat:3> * <var:V> /\ <var:C2> = <var:V> ^ <nat:2> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:C1> = <nat:3> * <var:V> /\ <var:C2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:C1> = <nat:3> * <var:V> /\ <var:C0> = <nat:1> /\ <var:y> = <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:C0> = <nat:1> /\ <var:y> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:y> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 