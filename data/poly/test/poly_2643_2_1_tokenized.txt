\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:3> ; <var:u> := <var:H0> \end{verbatim} Given $ <var:g> = <var:D> $ ahead of interpreting the series of commands , then we see $ <var:u> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program is given with standard Hoare techniques . Immediately after , we have the binding code giving $ <nat:3> $ toward $ <var:H0>$ . This command takes the precondition $ \{ <var:g> = <var:D> \} $ into the condition $ \{ <var:g> = <var:D> \land <var:H0> = <nat:3> \} $ . Now , we have the variable binding statement yielding $ <var:H0$ into $ <var:u>$ . This redefines the condition $ \{ <var:g> = <var:D> \land <var:H0> = <nat:3> \} $ as the condition $ \{ <var:g> = <var:D> \land <var:u> = <nat:3> \} $ . This is known to be sound with the assignment inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:g> = <var:D> }} <var:H0> := <nat:3> ; <var:u> := <var:H0> {{ <var:u> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:u> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 