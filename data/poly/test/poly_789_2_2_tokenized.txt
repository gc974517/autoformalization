\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:k> := <nat:2> ; <var:k> := <nat:4> + <var:k> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allowing --- for some $ <var:Y> \in \mathbb{N} $ --- $ <var:y> = <var:Y> $ ahead of running the list of commands it must be that we have $ <var:k> = <nat:2> \cdot <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} See that this decorated segment of code . \begin{eqnarray} \{ <var:y> = <var:Y> \} \\ <var:k> := <nat:2> ; \\ \{ <var:y> = <var:Y> \land <var:k> = <nat:2> \} \\ <var:k> := <nat:4> + <var:k> * <var:y> \\ \{ <var:y> = <var:Y> \land <var:k> = <nat:2> \times <var:Y> + <nat:4> \} \end{eqnarray} Applying Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:2> ; <var:k> := <nat:4> + <var:k> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:y> = <var:Y> }} <def:poly> {{ <var:k> = <nat:2> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:k> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:k> = <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 