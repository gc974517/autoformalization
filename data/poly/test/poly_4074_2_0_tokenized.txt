\begin{document} \begin{theorem} We define the following code segment such that \begin{verbatim} <var:Q0> := <nat:3> ; <var:G> := <var:Q0> \end{verbatim} Allow it to hold that $ <var:x> = <var:R> $ ahead of running our set of instructions it must be that $ <var:G> = <nat:3> $ when program executes . \end{theorem} \begin{proof} Using Hoare logic gives us : \begin{eqnarray} \{ <var:x> = <var:R> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:x> = <var:R> \land <var:Q0> = <nat:3> \} \\ <var:G> := <var:Q0> \\ \{ <var:x> = <var:R> \land <var:G> = <nat:3> \} \end{eqnarray} Hence , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:x> = <var:R> }} <var:Q0> := <nat:3> ; <var:G> := <var:Q0> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:R> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:R> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 