\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:7> ; <var:L> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:c> = <var:U> $ ahead of interpreting this set of instructions , then we have $ <var:L> = <nat:7> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:c> = <var:U> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:c> = <var:U> \land <var:g0> = <nat:7> \} \\ <var:L> := <var:g0> \\ \{ <var:c> = <var:U> \land <var:L> = <nat:7> \} \end{eqnarray} Hence , our list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:7> ; <var:L> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:c> = <var:U> }} <def:poly> {{ <var:L> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:L> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 