\begin{document} \begin{theorem} Let the following list of commands such that \begin{verbatim} <var:k1> := <var:f> ; <var:k2> := <var:k1> * <var:f> ; <var:k3> := <var:k2> * <var:f> ; <var:k4> := <var:k3> * <var:f> ; <var:k5> := <var:k4> * <var:f> ; <var:k6> := <var:k5> * <var:f> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:1> ; <var:k5> := <var:k5> * <nat:4> ; <var:k6> := <var:k6> * <nat:4> ; <var:u> := <var:k6> <var:u> := <var:u> + <var:k5> <var:u> := <var:u> + <var:k1> <var:u> := <var:u> + <var:k0> \end{verbatim} Assuming --- given any $ <var:z> $ --- that $ <var:f> = <var:z> $ before running our program then $ <var:u> = <nat:4> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this segment of code can be seen with standard Hoare techniques . Moving on , we have the binding command \verb | <var:k1> := <var:f> ; | . This line advances the precondition $ \{ <var:f> = <var:z> \} $ to the condition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \} $ . This is shown to be logically sound by the assignment scheme given in Hoare logic . Taking a look at the next command found in the segment of code , the command assigning $ <var:k1> * <var:f> $ into $ <var:k2>$ . This takes the condition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \} $ to the postcondition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \} $ . Observing the next command contained in our series of instructions , we see the binding statement binding $ <var:k2> * <var:f> $ to $ <var:k3>$ . This statement takes the condition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \} $ toward the postcondition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \} $ . This is sound using the assignment inference rule in Hoare reasoning . Moving forward , we see the binding code giving $ <var:k3> * <var:f> $ as $ <var:k4>$ . This transfers $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \} $ toward the condition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \} $ . Advancing on , we have the binding line \verb | <var:k5> := <var:k4> * <var:f> ; | . This redefines the precondition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \} $ into the postcondition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <var:z> ^ <nat:5> \} $ . This is shown to be logically sound with the assignment scheme defined by typical Hoare techniques . Advancing to the subsequent statement found in our series of commands , we see the variable update line giving $ <var:k5> * <var:f> $ as $ <var:k6>$ . This command takes the condition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <var:z> ^ <nat:5> \} $ toward $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <var:z> ^ <nat:5> \land <var:k6> = <var:z> ^ <nat:6> \} $ . This is deduced with the assignment law defined in Hoare techniques . Moving forward , we see the variable binding statement \verb | <var:k0> := <nat:4> ; | . This statement transfers the precondition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <var:z> ^ <nat:5> \land <var:k6> = <var:z> ^ <nat:6> \} $ into the postcondition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <var:z> ^ <nat:5> \land <var:k6> = <var:z> ^ <nat:6> \land <var:k0> = <nat:4> \} $ . Stepping through , we see the code \verb | <var:k1> := <var:k1> * <nat:1> ; | . This advances the precondition $ \{ <var:f> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <var:z> ^ <nat:5> \land <var:k6> = <var:z> ^ <nat:6> \land <var:k0> = <nat:4> \} $ as $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <var:z> ^ <nat:5> \land <var:k6> = <var:z> ^ <nat:6> \land <var:k0> = <nat:4> \} $ . Going to the next step , we see the variable assignmet command \verb | <var:k5> := <var:k5> * <nat:4> ; | . This forwards the precondition $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <var:z> ^ <nat:5> \land <var:k6> = <var:z> ^ <nat:6> \land <var:k0> = <nat:4> \} $ to the condition $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <nat:4> \times <var:z> ^ <nat:5> \land <var:k6> = <var:z> ^ <nat:6> \land <var:k0> = <nat:4> \} $ . Advancing to the following step in our code segment , we have the environment update code defining $ <var:k6> * <nat:4> $ as $ <var:k6>$ . This command takes $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <nat:4> \times <var:z> ^ <nat:5> \land <var:k6> = <var:z> ^ <nat:6> \land <var:k0> = <nat:4> \} $ to the condition $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <nat:4> \times <var:z> ^ <nat:5> \land <var:k6> = <nat:4> \times <var:z> ^ <nat:6> \land <var:k0> = <nat:4> \} $ . Going forward , we see the assignment line \verb | <var:u> := <var:k6> | . This code forwards $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <nat:4> \times <var:z> ^ <nat:5> \land <var:k6> = <nat:4> \times <var:z> ^ <nat:6> \land <var:k0> = <nat:4> \} $ toward the postcondition $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <nat:4> \times <var:z> ^ <nat:5> \land <var:k0> = <nat:4> \land <var:u> = <nat:4> \times <var:z> ^ <nat:6> \} $ . This is shown to be logically sound by the assignment law from typical Hoare reasoning . Taking a look at the next line of code in the code segment , we see the command \verb | <var:u> := <var:u> + <var:k5> | . This forwards $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k5> = <nat:4> \times <var:z> ^ <nat:5> \land <var:k0> = <nat:4> \land <var:u> = <nat:4> \times <var:z> ^ <nat:6> \} $ into the postcondition $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:4> \land <var:u> = <nat:4> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> \} $ . This is sound using the assignment scheme defined in Hoare reasoning . Moving on to the subsequent line in the list of instructions , the binding code defining $ <var:u> + <var:k1$ as $ <var:u>$ . This code moves $ \{ <var:f> = <var:z> \land <var:k1> = <nat:1> \times <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:4> \land <var:u> = <nat:4> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> \} $ into the condition $ \{ <var:f> = <var:z> \land <var:k0> = <nat:4> \land <var:u> = <nat:4> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> \} $ . Considering the upcoming bit of code in our segment of code , we have the binding line \verb | <var:u> := <var:u> + <var:k0> | . This transfers the condition $ \{ <var:f> = <var:z> \land <var:k0> = <nat:4> \land <var:u> = <nat:4> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> \} $ into $ \{ <var:f> = <var:z> \land <var:u> = <nat:4> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> + <nat:4> \} $ . This is shown by the assignment inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Definition <var:k5> : string := " <var:k5> " . Definition <var:k6> : string := " <var:k6> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <var:k1> := <var:f> ; <var:k2> := <var:k1> * <var:f> ; <var:k3> := <var:k2> * <var:f> ; <var:k4> := <var:k3> * <var:f> ; <var:k5> := <var:k4> * <var:f> ; <var:k6> := <var:k5> * <var:f> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:1> ; <var:k5> := <var:k5> * <nat:4> ; <var:k6> := <var:k6> * <nat:4> ; <var:u> := <var:k6> <var:u> := <var:u> + <var:k5> <var:u> := <var:u> + <var:k1> <var:u> := <var:u> + <var:k0> {{ <var:u> = <nat:4> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k5> = <var:z> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k5> = <var:z> ^ <nat:5> /\ <var:k6> = <var:z> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k5> = <var:z> ^ <nat:5> /\ <var:k6> = <var:z> ^ <nat:6> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <nat:1> * <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k5> = <var:z> ^ <nat:5> /\ <var:k6> = <var:z> ^ <nat:6> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <nat:1> * <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k5> = <nat:4> * <var:z> ^ <nat:5> /\ <var:k6> = <var:z> ^ <nat:6> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <nat:1> * <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k5> = <nat:4> * <var:z> ^ <nat:5> /\ <var:k6> = <nat:4> * <var:z> ^ <nat:6> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <nat:1> * <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k5> = <nat:4> * <var:z> ^ <nat:5> /\ <var:k0> = <nat:4> /\ <var:u> = <nat:4> * <var:z> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k1> = <nat:1> * <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k0> = <nat:4> /\ <var:u> = <nat:4> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:k0> = <nat:4> /\ <var:u> = <nat:4> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:u> = <nat:4> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 