\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v> := <nat:4> ; <var:v> := <nat:2> + <var:v> * <var:C> ; <var:v> := <nat:3> + <var:v> * <var:C> ; <var:v> := <var:v> * <var:C> ; <var:v> := <nat:2> + <var:v> * <var:C> ; <var:v> := <nat:4> + <var:v> * <var:C> ; <var:v> := <nat:2> + <var:v> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:C> = <var:x> $ for all positive coefficients $ <var:x> $ ahead of interpreting this list of commands it follows that $ <var:v> = <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> $ after segment of code executes . \end{theorem} \begin{proof} Using typical Hoare logic produces : \begin{eqnarray} \{ <var:C> = <var:x> \} \\ <var:v> := <nat:4> ; \\ \{ <var:C> = <var:x> \land <var:v> = <nat:4> \} \\ <var:v> := <nat:2> + <var:v> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:v> = <nat:4> * <var:x> + <nat:2> \} \\ <var:v> := <nat:3> + <var:v> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:v> = <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> \} \\ <var:v> := <var:v> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:v> = <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + \} \end{eqnarray} Advancing interpreting the code segment produces : \begin{eqnarray} <var:v> := <nat:2> + <var:v> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:v> = <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> \} \\ <var:v> := <nat:4> + <var:v> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:v> = <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:4> \} \\ <var:v> := <nat:2> + <var:v> * <var:C> \\ \{ <var:C> = <var:x> \land <var:v> = <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> \} \end{eqnarray} Therefore , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:4> ; <var:v> := <nat:2> + <var:v> * <var:C> ; <var:v> := <nat:3> + <var:v> * <var:C> ; <var:v> := <var:v> * <var:C> ; <var:v> := <nat:2> + <var:v> * <var:C> ; <var:v> := <nat:4> + <var:v> * <var:C> ; <var:v> := <nat:2> + <var:v> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:C> = <var:x> }} <def:poly> {{ <var:v> = <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:v> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:v> = <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:v> = <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:v> = <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:v> = <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:v> = <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:v> = <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 