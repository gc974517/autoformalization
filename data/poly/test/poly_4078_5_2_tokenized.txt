\begin{document} \begin{theorem} Define a list of commands : \begin{verbatim} <var:C> := <nat:4> ; <var:C> := <nat:4> + <var:C> * <var:R> ; <var:C> := <var:C> * <var:R> ; <var:C> := <nat:1> + <var:C> * <var:R> ; <var:C> := <nat:3> + <var:C> * <var:R> \end{verbatim} Assume that $ <var:R> = <var:m> $ , for any positive integers $ <var:m> $ , prior to running the set of commands , it holds that $ <var:C> = <nat:4> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> + <nat:3> $ once set of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is evident by the below decorated series of commands . \begin{eqnarray} \{ <var:R> = <var:m> \} \\ <var:C> := <nat:4> ; \\ \{ <var:R> = <var:m> \land <var:C> = <nat:4> \} \\ <var:C> := <nat:4> + <var:C> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:C> = <nat:4> \times <var:m> + <nat:4> \} \\ <var:C> := <var:C> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:C> = <nat:4> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + \} \\ <var:C> := <nat:1> + <var:C> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:C> = <nat:4> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \} \\ <var:C> := <nat:3> + <var:C> * <var:R> \\ \{ <var:R> = <var:m> \land <var:C> = <nat:4> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> + <nat:3> \} \end{eqnarray} Using Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:R> = <var:m> }} <var:C> := <nat:4> ; <var:C> := <nat:4> + <var:C> * <var:R> ; <var:C> := <var:C> * <var:R> ; <var:C> := <nat:1> + <var:C> * <var:R> ; <var:C> := <nat:3> + <var:C> * <var:R> {{ <var:C> = <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:C> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:C> = <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:C> = <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:C> = <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:C> = <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 