\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:3> ; <var:h> := <var:O0> \end{verbatim} Given it to hold that $ <var:p> = <var:b> $ prior to the execution of our segment of code it holds that $ <var:h> = <nat:3> $ after code segment has finished . \end{theorem} \begin{proof} The proof of this list of commands is accomplished with typical Hoare reasoning . Moving forward to the following pieces of code seen in our series of instructions , we see \begin{verbatim} { <var:p> = <var:b> } <var:O0> := <nat:3> { <var:p> = <var:b> \land <var:O0> = <nat:3> } { <var:p> = <var:b> \land <var:O0> = <nat:3> } <var:h> := <var:O0{ <var:p> = <var:b> \land <var:h> = <nat:3> } \end{verbatim} This is guaranteed with the variable update scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:p> = <var:b> }} <var:O0> := <nat:3> ; <var:h> := <var:O0> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:b> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:b> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 