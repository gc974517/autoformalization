\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:Y> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:3> ; <var:o> := <var:R1> <var:o> := <var:o> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Assume it to be that $ <var:Y> = <var:w> $ before interpreting our series of commands it follows that we have $ <var:o> = <nat:3> * <var:w> + <nat:4> $ . \end{theorem} \begin{proof} Observe that the below decorated set of instructions . \begin{eqnarray} \{ <var:Y> = <var:w> \} \\ <var:R1> := <var:Y> ; \\ \{ <var:Y> = <var:w> \land <var:R1> = <var:w> \} \\ <var:R0> := <nat:4> ; \\ \{ <var:Y> = <var:w> \land <var:R1> = <var:w> \land <var:R0> = <nat:4> \} \\ <var:R1> := <var:R1> * <nat:3> ; \\ \{ <var:Y> = <var:w> \land <var:R1> = <nat:3> \times <var:w> \land <var:R0> = <nat:4> \} \\ <var:o> := <var:R1> \\ \{ <var:Y> = <var:w> \land <var:R0> = <nat:4> \land <var:o> = <nat:3> \times <var:w> \} \\ <var:o> := <var:o> + <var:R0> \\ \{ <var:Y> = <var:w> \land <var:o> = <nat:3> \times <var:w> + <nat:4> \} \end{eqnarray} Utilizing Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:Y> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:3> ; <var:o> := <var:R1> <var:o> := <var:o> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Y> = <var:w> }} <def:poly> {{ <var:o> = <nat:3> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:w> /\ <var:R1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:w> /\ <var:R1> = <var:w> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:w> /\ <var:R1> = <nat:3> * <var:w> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:w> /\ <var:R0> = <nat:4> /\ <var:o> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:w> /\ <var:o> = <nat:3> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 