\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <nat:3> + <var:I> * <var:N> ; <var:I> := <nat:1> + <var:I> * <var:N> ; <var:I> := <nat:2> + <var:I> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:N> = <var:M> $ ahead of the execution of the list of commands it follows that we see $ <var:I> = <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:2> $ once segment of code terminates . \end{theorem} \begin{proof} Applying Hoare techniques yields : \begin{eqnarray} \{ <var:N> = <var:M> \} \\ <var:I> := <nat:2> ; \\ \{ <var:N> = <var:M> \land <var:I> = <nat:2> \} \\ <var:I> := <nat:3> + <var:I> * <var:N> ; \\ \{ <var:N> = <var:M> \land <var:I> = <nat:2> \cdot <var:M> + <nat:3> \} \\ <var:I> := <nat:1> + <var:I> * <var:N> ; \\ \{ <var:N> = <var:M> \land <var:I> = <nat:2> \cdot <var:M> ^ <nat:2> + <nat:3> \cdot <var:M> + <nat:1> \} \\ <var:I> := <nat:2> + <var:I> * <var:N> \\ \{ <var:N> = <var:M> \land <var:I> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:2> \} \end{eqnarray} Therefore , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:2> ; <var:I> := <nat:3> + <var:I> * <var:N> ; <var:I> := <nat:1> + <var:I> * <var:N> ; <var:I> := <nat:2> + <var:I> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:N> = <var:M> }} <def:poly> {{ <var:I> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:I> = <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:I> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:I> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 