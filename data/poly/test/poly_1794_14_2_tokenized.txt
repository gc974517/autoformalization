\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <nat:3> + <var:j> * <var:y> ; <var:j> := <nat:4> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:4> + <var:j> * <var:y> ; <var:j> := <nat:2> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:2> + <var:j> * <var:y> ; <var:j> := <nat:3> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:3> + <var:j> * <var:y> ; <var:j> := <nat:2> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for whole numbers $ <var:N> $ ) that we have $ <var:y> = <var:N> $ ahead of the execution of our list of commands it must be that we have $ <var:j> = <nat:2> * <var:N> ^ <nat:13> + <nat:3> * <var:N> ^ <nat:12> + <nat:4> * <var:N> ^ <nat:11> + <nat:1> * <var:N> ^ <nat:10> + <nat:4> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be demonstrated using Hoare logic . Now , we see the environment update code \verb | <var:j> := <nat:2> ; | . This advances the condition $ \{ <var:y> = <var:N> \} $ as $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \} $ . This is shown by the assignment rule obtained from standard Hoare reasoning . Taking another step toward the following statement seen in our code segment , we see the assignment line giving $ <nat:3> + <var:j> * <var:y> $ as $ <var:j>$ . This code takes the precondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \} $ as $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> + <nat:3> \} $ . Moving on to the next step contained in our code segment , we have the assignment statement binding $ <nat:4> + <var:j> * <var:y> $ toward $ <var:j>$ . This line advances the condition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> + <nat:3> \} $ to the postcondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:4> \} $ . This is given with the assignment scheme obtained from typical Hoare reasoning . Moving on to the next step , the variable update line \verb | <var:j> := <nat:1> + <var:j> * <var:y> ; | . This advances the condition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:4> \} $ into $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:1> \} $ . Further , the variable binding code giving $ <nat:4> + <var:j> * <var:y> $ as $ <var:j>$ . This code moves the precondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:1> \} $ as the postcondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:4> \} $ . This is rigorously given by the assignment rule obtained from standard Hoare logic . Following , the binding code assigning $ <nat:2> + <var:j> * <var:y> $ as $ <var:j>$ . This line redefines $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:4> \} $ into the condition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:2> \} $ . Shifting focus toward the upcoming bit of code seen in our program , we have the assignment code yielding $ <nat:1> + <var:j> * <var:y> $ to $ <var:j>$ . This transfers $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:2> \} $ toward the postcondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:4> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:1> \} $ . Moving on to the next step , we have the variable binding code giving $ <nat:2> + <var:j> * <var:y> $ into $ <var:j>$ . This statement moves the precondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:4> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:1> \} $ into the condition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:7> + <nat:3> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:2> \} $ . Advancing to the upcoming piece of code in our set of commands , we have the variable binding code \verb | <var:j> := <nat:3> + <var:j> * <var:y> ; | . This command advances $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:7> + <nat:3> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:2> \} $ as $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:8> + <nat:3> \times <var:N> ^ <nat:7> + <nat:4> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:5> + <nat:4> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:3> \} $ . This is sound with the assignment law given in Hoare techniques . Advancing on , we see the variable update line defining $ <nat:1> + <var:j> * <var:y> $ toward $ <var:j>$ . This line advances $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:8> + <nat:3> \times <var:N> ^ <nat:7> + <nat:4> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:5> + <nat:4> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:3> \} $ toward the postcondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:9> + <nat:3> \times <var:N> ^ <nat:8> + <nat:4> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:1> \} $ . This is deduced with the assignment law of standard Hoare logic . Going to the next step , we have the binding line defining $ <nat:1> + <var:j> * <var:y> $ toward $ <var:j>$ . This advances $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:9> + <nat:3> \times <var:N> ^ <nat:8> + <nat:4> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:1> \} $ to the postcondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:10> + <nat:3> \times <var:N> ^ <nat:9> + <nat:4> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:7> + <nat:4> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:1> \} $ . This is shown by the assignment scheme given by typical Hoare logic . Looking at the next line in the list of commands , the binding command \verb | <var:j> := <nat:3> + <var:j> * <var:y> ; | . This code takes $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:10> + <nat:3> \times <var:N> ^ <nat:9> + <nat:4> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:7> + <nat:4> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:1> \} $ toward $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:11> + <nat:3> \times <var:N> ^ <nat:10> + <nat:4> \times <var:N> ^ <nat:9> + <nat:1> \times <var:N> ^ <nat:8> + <nat:4> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:3> \} $ . Observing the upcoming piece of code in the code , we see the code \verb | <var:j> := <nat:2> + <var:j> * <var:y> ; | . This line transfers the precondition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:11> + <nat:3> \times <var:N> ^ <nat:10> + <nat:4> \times <var:N> ^ <nat:9> + <nat:1> \times <var:N> ^ <nat:8> + <nat:4> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:3> \} $ toward $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:12> + <nat:3> \times <var:N> ^ <nat:11> + <nat:4> \times <var:N> ^ <nat:10> + <nat:1> \times <var:N> ^ <nat:9> + <nat:4> \times <var:N> ^ <nat:8> + <nat:2> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:2> \} $ . Advancing to the next step , we have the variable assignmet command binding $ <nat:1> + <var:j> * <var:y$ toward $ <var:j>$ . This takes $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:12> + <nat:3> \times <var:N> ^ <nat:11> + <nat:4> \times <var:N> ^ <nat:10> + <nat:1> \times <var:N> ^ <nat:9> + <nat:4> \times <var:N> ^ <nat:8> + <nat:2> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:2> \} $ into the condition $ \{ <var:y> = <var:N> \land <var:j> = <nat:2> \times <var:N> ^ <nat:13> + <nat:3> \times <var:N> ^ <nat:12> + <nat:4> \times <var:N> ^ <nat:11> + <nat:1> \times <var:N> ^ <nat:10> + <nat:4> \times <var:N> ^ <nat:9> + <nat:2> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:2> ; <var:j> := <nat:3> + <var:j> * <var:y> ; <var:j> := <nat:4> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:4> + <var:j> * <var:y> ; <var:j> := <nat:2> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:2> + <var:j> * <var:y> ; <var:j> := <nat:3> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:3> + <var:j> * <var:y> ; <var:j> := <nat:2> + <var:j> * <var:y> ; <var:j> := <nat:1> + <var:j> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:y> = <var:N> }} <def:poly> {{ <var:j> = <nat:2> * <var:N> ^ <nat:13> + <nat:3> * <var:N> ^ <nat:12> + <nat:4> * <var:N> ^ <nat:11> + <nat:1> * <var:N> ^ <nat:10> + <nat:4> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:10> + <nat:3> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:11> + <nat:3> * <var:N> ^ <nat:10> + <nat:4> * <var:N> ^ <nat:9> + <nat:1> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:12> + <nat:3> * <var:N> ^ <nat:11> + <nat:4> * <var:N> ^ <nat:10> + <nat:1> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:13> + <nat:3> * <var:N> ^ <nat:12> + <nat:4> * <var:N> ^ <nat:11> + <nat:1> * <var:N> ^ <nat:10> + <nat:4> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 