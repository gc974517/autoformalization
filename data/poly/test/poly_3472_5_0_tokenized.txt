\begin{document} \begin{theorem} Define the following code in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:3> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:z> ; <var:d> := <var:i1> ; <var:d> := <var:d> + <var:i0> \end{verbatim} Given it to hold that $ <var:z> = <var:q> $ prior to evaluating this series of commands , it must be that we see $ <var:d> = <nat:1> \times <var:q> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this program is shown using the following decorated code segment . \begin{eqnarray} \{ <var:z> = <var:q> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:z> = <var:q> \land <var:i0> = <nat:3> \} \end{eqnarray} Continuing interpreting this list of instructions gives : \begin{eqnarray} <var:i1> := <nat:1> ; \\ \{ <var:z> = <var:q> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> \} \\ <var:i1> := <var:i1> * <var:z> ; \\ \{ <var:z> = <var:q> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> \times <var:q> \} \\ <var:d> := <var:i1> ; \\ \{ <var:z> = <var:q> \land <var:i0> = <nat:3> \land <var:d> = <nat:1> \times <var:q> \} \\ <var:d> := <var:d> + <var:i0> \\ \{ <var:z> = <var:q> \land <var:d> = <nat:1> \times <var:q> + <nat:3> \} \end{eqnarray} Applying standard Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:z> = <var:q> }} <var:i0> := <nat:3> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:z> ; <var:d> := <var:i1> ; <var:d> := <var:d> + <var:i0> {{ <var:d> = <nat:1> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:i0> = <nat:3> /\ <var:d> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:d> = <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 