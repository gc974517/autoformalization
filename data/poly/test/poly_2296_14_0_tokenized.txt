\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:3> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:Z> ; <var:g2> := <nat:2> ; <var:g2> := <var:g2> * <var:Z> ; <var:g2> := <var:g2> * <var:Z> ; <var:g3> := <nat:2> ; <var:g3> := <var:g3> * <var:Z> ; <var:g3> := <var:g3> * <var:Z> ; <var:g3> := <var:g3> * <var:Z> ; <var:y> := <var:g3> ; <var:y> := <var:y> + <var:g2> ; <var:y> := <var:y> + <var:g1> ; <var:y> := <var:y> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:Z> = <var:r> $ with some $ <var:r> $ prior to the execution of our code , it holds that $ <var:y> = <nat:2> \cdot <var:r> ^ <nat:3> + <nat:2> \cdot <var:r> ^ <nat:2> + <nat:9> \cdot <var:r> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the set of instructions is shown with usual Hoare logic . Further , \verb | { <var:Z> = <var:r> } <var:g0> := <nat:3> { <var:Z> = <var:r> \land <var:g0> = <nat:3> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> } <var:g1> := <nat:9> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> } <var:g1> := <var:g1> * <var:Z> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> } <var:g2> := <nat:2> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> } <var:g2> := <var:g2> * <var:Z> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> \times <var:r> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> \times <var:r> } <var:g2> := <var:g2> * <var:Z> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> \times <var:r> ^ <nat:2> } | and \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> \times <var:r> ^ <nat:2> } <var:g3> := <nat:2> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:g3> = <nat:2> } | . Jumping to the subsequent statements seen in the list of commands , \verb | { <var:Z> = <var:r> } <var:g0> := <nat:3> { <var:Z> = <var:r> \land <var:g0> = <nat:3> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> } <var:g1> := <nat:9> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> } <var:g1> := <var:g1> * <var:Z> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> } <var:g2> := <nat:2> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> } | , \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> } <var:g2> := <var:g2> * <var:Z> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> \times <var:r> } | and \verb | { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> \times <var:r> } <var:g2> := <var:g2> * <var:Z> { <var:Z> = <var:r> \land <var:g0> = <nat:3> \land <var:g1> = <nat:9> \times <var:r> \land <var:g2> = <nat:2> \times <var:r> ^ <nat:2> } | . Further , we have \verb | { <var:Z> = <var:r> } <var:g0> := <nat:3> { <var:Z> = <var:r> \land <var:g0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:Z> ; <var:g2> := <nat:2> ; <var:g2> := <var:g2> * <var:Z> ; <var:g2> := <var:g2> * <var:Z> ; <var:g3> := <nat:2> ; <var:g3> := <var:g3> * <var:Z> ; <var:g3> := <var:g3> * <var:Z> ; <var:g3> := <var:g3> * <var:Z> ; <var:y> := <var:g3> ; <var:y> := <var:y> + <var:g2> ; <var:y> := <var:y> + <var:g1> ; <var:y> := <var:y> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Z> = <var:r> }} <def:poly> {{ <var:y> = <nat:2> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:g3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:g2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:y> = <nat:2> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:9> * <var:r> /\ <var:y> = <nat:2> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:g0> = <nat:3> /\ <var:y> = <nat:2> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:y> = <nat:2> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 