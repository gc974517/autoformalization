\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <nat:4> + <var:j> * <var:T> ; <var:j> := <nat:3> + <var:j> * <var:T> ; <var:j> := <nat:3> + <var:j> * <var:T> ; <var:j> := <nat:3> + <var:j> * <var:T> ; <var:j> := <var:j> * <var:T> ; <var:j> := <nat:2> + <var:j> * <var:T> ; <var:j> := <nat:3> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> ; <var:j> := <nat:2> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Allow that $ <var:T> = <var:I> $ --- letting $ <var:I> \in \mathbb{Z}^+ $ --- ahead of executing the list of instructions it must be that we have $ <var:j> = <nat:2> \times <var:I> ^ <nat:13> + <nat:4> \times <var:I> ^ <nat:12> + <nat:3> \times <var:I> ^ <nat:11> + <nat:3> \times <var:I> ^ <nat:10> + <nat:3> \times <var:I> ^ <nat:9> + <nat:2> \times <var:I> ^ <nat:7> + <nat:3> \times <var:I> ^ <nat:6> + <nat:1> \times <var:I> ^ <nat:5> + <nat:2> \times <var:I> ^ <nat:4> + <nat:1> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + <nat:1> $ after set of commands is done executing . \end{theorem} \begin{proof} Proving correctness for our set of instructions is evident using Hoare logic . Taking another step toward the proceeding statements contained in our series of instructions , we have \begin{verbatim} { <var:T> = <var:I> } <var:j> := <nat:2> { <var:T> = <var:I> \land <var:j> = <nat:2> } { <var:T> = <var:I> \land <var:j> = <nat:2> } <var:j> := <nat:4> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> + <nat:4> } { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> + <nat:4> } <var:j> := <nat:3> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:3> } { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:3> } <var:j> := <nat:3> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:3> } { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:3> } <var:j> := <nat:3> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:4> + <nat:4> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:3> } { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:4> + <nat:4> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:3> } <var:j> := <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:5> + <nat:4> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + } { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:5> + <nat:4> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + } <var:j> := <nat:2> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:6> + <nat:4> \times <var:I> ^ <nat:5> + <nat:3> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:2> } { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:6> + <nat:4> \times <var:I> ^ <nat:5> + <nat:3> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:2> } <var:j> := <nat:3> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:7> + <nat:4> \times <var:I> ^ <nat:6> + <nat:3> \times <var:I> ^ <nat:5> + <nat:3> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> + <nat:3> } \end{verbatim} Stepping forward , \begin{verbatim} { <var:T> = <var:I> } <var:j> := <nat:2> { <var:T> = <var:I> \land <var:j> = <nat:2> } { <var:T> = <var:I> \land <var:j> = <nat:2> } <var:j> := <nat:4> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> + <nat:4> } { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> + <nat:4> } <var:j> := <nat:3> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:3> } \end{verbatim} Taking a look at the following steps in our list of instructions , we have \begin{verbatim} { <var:T> = <var:I> } <var:j> := <nat:2> { <var:T> = <var:I> \land <var:j> = <nat:2> } { <var:T> = <var:I> \land <var:j> = <nat:2> } <var:j> := <nat:4> + <var:j> * <var:T> { <var:T> = <var:I> \land <var:j> = <nat:2> \times <var:I> + <nat:4> } \end{verbatim} This is rigorously given by the binding scheme defined in typical Hoare techniques . Moving forward , we have \begin{verbatim} { <var:T> = <var:I> } <var:j> := <nat:2> { <var:T> = <var:I> \land <var:j> = <nat:2> } \end{verbatim} This is guaranteed through the variable update law defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:2> ; <var:j> := <nat:4> + <var:j> * <var:T> ; <var:j> := <nat:3> + <var:j> * <var:T> ; <var:j> := <nat:3> + <var:j> * <var:T> ; <var:j> := <nat:3> + <var:j> * <var:T> ; <var:j> := <var:j> * <var:T> ; <var:j> := <nat:2> + <var:j> * <var:T> ; <var:j> := <nat:3> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> ; <var:j> := <nat:2> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> ; <var:j> := <nat:1> + <var:j> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:T> = <var:I> }} <def:poly> {{ <var:j> = <nat:2> * <var:I> ^ <nat:13> + <nat:4> * <var:I> ^ <nat:12> + <nat:3> * <var:I> ^ <nat:11> + <nat:3> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:9> + <nat:4> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:10> + <nat:4> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:11> + <nat:4> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:12> + <nat:4> * <var:I> ^ <nat:11> + <nat:3> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j> = <nat:2> * <var:I> ^ <nat:13> + <nat:4> * <var:I> ^ <nat:12> + <nat:3> * <var:I> ^ <nat:11> + <nat:3> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 