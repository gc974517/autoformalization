\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:q> ; <var:c> := <var:T1> ; <var:c> := <var:c> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:q> = <var:Q> $ ahead of the evaluation of our series of instructions then we have $ <var:c> = <nat:1> \cdot <var:Q> + <nat:9> $ when code has exited . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:q> = <var:Q> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:q> = <var:Q> \land <var:T0> = <nat:9> \} \\ <var:T1> := <nat:1> ; \\ \{ <var:q> = <var:Q> \land <var:T0> = <nat:9> \land <var:T1> = <nat:1> \} \\ <var:T1> := <var:T1> * <var:q> ; \\ \{ <var:q> = <var:Q> \land <var:T0> = <nat:9> \land <var:T1> = <nat:1> \times <var:Q> \} \\ <var:c> := <var:T1> ; \\ \{ <var:q> = <var:Q> \land <var:T0> = <nat:9> \land <var:c> = <nat:1> \times <var:Q> \} \\ <var:c> := <var:c> + <var:T0> \\ \{ <var:q> = <var:Q> \land <var:c> = <nat:1> \times <var:Q> + <nat:9> \} \end{eqnarray} Thusly , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:9> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:q> ; <var:c> := <var:T1> ; <var:c> := <var:c> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:q> = <var:Q> }} <def:poly> {{ <var:c> = <nat:1> * <var:Q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:T0> = <nat:9> /\ <var:c> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:c> = <nat:1> * <var:Q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 