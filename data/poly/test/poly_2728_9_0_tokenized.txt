\begin{document} \begin{theorem} Take the following set of instructions as \begin{verbatim} <var:E0> := <nat:3> ; <var:E1> := <nat:6> ; <var:E1> := <var:E1> * <var:g> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:g> ; <var:E2> := <var:E2> * <var:g> ; <var:a> := <var:E2> ; <var:a> := <var:a> + <var:E1> ; <var:a> := <var:a> + <var:E0> \end{verbatim} Given , assuming some whole numbers $ <var:u> $ , it to hold that $ <var:g> = <var:u> $ prior to running the code segment , it must be that we see $ <var:a> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:6> \cdot <var:u> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:g> = <var:u> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:g> = <var:u> \land <var:E0> = <nat:3> \} \\ <var:E1> := <nat:6> ; \\ \{ <var:g> = <var:u> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> \} \\ <var:E1> := <var:E1> * <var:g> ; \\ \{ <var:g> = <var:u> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> \times <var:u> \} \\ <var:E2> := <nat:2> ; \\ \{ <var:g> = <var:u> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> \times <var:u> \land <var:E2> = <nat:2> \} \\ <var:E2> := <var:E2> * <var:g> ; \\ \{ <var:g> = <var:u> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> \times <var:u> \land <var:E2> = <nat:2> \times <var:u> \} \\ <var:E2> := <var:E2> * <var:g> ; \\ \{ <var:g> = <var:u> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> \times <var:u> \land <var:E2> = <nat:2> \times <var:u> ^ <nat:2> \} \\ <var:a> := <var:E2> ; \\ \{ <var:g> = <var:u> \land <var:E0> = <nat:3> \land <var:E1> = <nat:6> \times <var:u> \land <var:a> = <nat:2> \times <var:u> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:E1> ; \\ \{ <var:g> = <var:u> \land <var:E0> = <nat:3> \land <var:a> = <nat:2> \times <var:u> ^ <nat:2> + <nat:6> \times <var:u> \} \\ <var:a> := <var:a> + <var:E0> \\ \{ <var:g> = <var:u> \land <var:a> = <nat:2> \times <var:u> ^ <nat:2> + <nat:6> \times <var:u> + <nat:3> \} \end{eqnarray} Given the above , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:g> = <var:u> }} <var:E0> := <nat:3> ; <var:E1> := <nat:6> ; <var:E1> := <var:E1> * <var:g> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:g> ; <var:E2> := <var:E2> * <var:g> ; <var:a> := <var:E2> ; <var:a> := <var:a> + <var:E1> ; <var:a> := <var:a> + <var:E0> {{ <var:a> = <nat:2> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:u> /\ <var:E2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:u> /\ <var:E2> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:u> /\ <var:E2> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:6> * <var:u> /\ <var:a> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:E0> = <nat:3> /\ <var:a> = <nat:2> * <var:u> ^ <nat:2> + <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:a> = <nat:2> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 