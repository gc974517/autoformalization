\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:6> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:p> ; <var:v> := <var:f1> ; <var:v> := <var:v> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:p> = <var:x> $ , letting $ <var:x> \in \mathbb{Z}^+ $ , before running the series of commands then we see $ <var:v> = <nat:2> * <var:x> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be demonstrated through usual Hoare reasoning . Moving on to the upcoming line contained in the code segment , we see the assignment code assigning $ <nat:6> $ to $ <var:f0>$ . This forwards the condition $ \{ <var:p> = <var:x> \} $ to the postcondition $ \{ <var:p> = <var:x> \land <var:f0> = <nat:6> \} $ . Advancing on , we see the environment update line yielding $ <nat:2> $ into $ <var:f1>$ . This transfers the precondition $ \{ <var:p> = <var:x> \land <var:f0> = <nat:6> \} $ toward the postcondition $ \{ <var:p> = <var:x> \land <var:f0> = <nat:6> \land <var:f1> = <nat:2> \} $ . This is given with the assignment law defined in usual Hoare techniques . Advancing to the subsequent bit of code seen in our segment of code , we have the binding line giving $ <var:f1> * <var:p> $ into $ <var:f1>$ . This forwards $ \{ <var:p> = <var:x> \land <var:f0> = <nat:6> \land <var:f1> = <nat:2> \} $ toward the postcondition $ \{ <var:p> = <var:x> \land <var:f0> = <nat:6> \land <var:f1> = <nat:2> \cdot <var:x> \} $ . This is guaranteed through the assignment inference rule given in typical Hoare reasoning . Keeping momentum , the variable update command \verb | <var:v> := <var:f1> ; | . This code takes $ \{ <var:p> = <var:x> \land <var:f0> = <nat:6> \land <var:f1> = <nat:2> \cdot <var:x> \} $ toward the postcondition $ \{ <var:p> = <var:x> \land <var:f0> = <nat:6> \land <var:v> = <nat:2> \cdot <var:x> \} $ . This is known to be sound with the assignment scheme in typical Hoare techniques . Moving onward , we have the assignment command \verb | <var:v> := <var:v> + <var:f0> | . This command redefines the precondition $ \{ <var:p> = <var:x> \land <var:f0> = <nat:6> \land <var:v> = <nat:2> \cdot <var:x> \} $ toward the postcondition $ \{ <var:p> = <var:x> \land <var:v> = <nat:2> \cdot <var:x> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:6> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:p> ; <var:v> := <var:f1> ; <var:v> := <var:v> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:p> = <var:x> }} <def:poly> {{ <var:v> = <nat:2> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:f0> = <nat:6> /\ <var:v> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:v> = <nat:2> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 