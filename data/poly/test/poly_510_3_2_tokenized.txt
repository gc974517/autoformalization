\begin{document} \begin{theorem} Define a set of instructions as \begin{verbatim} <var:i> := <nat:1> ; <var:i> := <var:i> * <var:d> ; <var:i> := <nat:2> + <var:i> * <var:d> \end{verbatim} Given --- given all $ <var:n> \in \mathbb{N} $ --- that $ <var:d> = <var:n> $ ahead of running our segment of code then $ <var:i> = <nat:1> \times <var:n> ^ <nat:2> + <nat:2> $ once series of commands finishes . \end{theorem} \begin{proof} See that this decorated list of instructions . \begin{eqnarray} \{ <var:d> = <var:n> \} \\ <var:i> := <nat:1> ; \\ \{ <var:d> = <var:n> \land <var:i> = <nat:1> \} \\ <var:i> := <var:i> * <var:d> ; \\ \{ <var:d> = <var:n> \land <var:i> = <nat:1> \cdot <var:n> + \} \\ <var:i> := <nat:2> + <var:i> * <var:d> \\ \{ <var:d> = <var:n> \land <var:i> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:d> = <var:n> }} <var:i> := <nat:1> ; <var:i> := <var:i> * <var:d> ; <var:i> := <nat:2> + <var:i> * <var:d> {{ <var:i> = <nat:1> * <var:n> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:i> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:i> = <nat:1> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:i> = <nat:1> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 