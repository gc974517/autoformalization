\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} : \begin{verbatim} <var:v> := <nat:4> ; <var:v> := <nat:1> + <var:v> * <var:z> ; <var:v> := <nat:3> + <var:v> * <var:z> ; <var:v> := <nat:3> + <var:v> * <var:z> ; <var:v> := <nat:4> + <var:v> * <var:z> ; <var:v> := <nat:1> + <var:v> * <var:z> \end{verbatim} Allowing that $ <var:z> = <var:I> $ for natural numbers $ <var:I> $ ahead of evaluating the series of instructions then $ <var:v> = <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> $ when segment of code executes . \end{theorem} \begin{proof} The flow of logic for our set of instructions is demonstrated using this decorated list of instructions . \begin{eqnarray} \{ <var:z> = <var:I> \} \\ <var:v> := <nat:4> ; \\ \{ <var:z> = <var:I> \land <var:v> = <nat:4> \} \\ <var:v> := <nat:1> + <var:v> * <var:z> ; \\ \{ <var:z> = <var:I> \land <var:v> = <nat:4> \times <var:I> + <nat:1> \} \\ <var:v> := <nat:3> + <var:v> * <var:z> ; \\ \{ <var:z> = <var:I> \land <var:v> = <nat:4> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + <nat:3> \} \end{eqnarray} Advancing executing this series of instructions produces : \begin{eqnarray} <var:v> := <nat:3> + <var:v> * <var:z> ; \\ \{ <var:z> = <var:I> \land <var:v> = <nat:4> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:3> \} \\ <var:v> := <nat:4> + <var:v> * <var:z> ; \\ \{ <var:z> = <var:I> \land <var:v> = <nat:4> \times <var:I> ^ <nat:4> + <nat:1> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:4> \} \\ <var:v> := <nat:1> + <var:v> * <var:z> \\ \{ <var:z> = <var:I> \land <var:v> = <nat:4> \times <var:I> ^ <nat:5> + <nat:1> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:z> = <var:I> }} <var:v> := <nat:4> ; <var:v> := <nat:1> + <var:v> * <var:z> ; <var:v> := <nat:3> + <var:v> * <var:z> ; <var:v> := <nat:3> + <var:v> * <var:z> ; <var:v> := <nat:4> + <var:v> * <var:z> ; <var:v> := <nat:1> + <var:v> * <var:z> {{ <var:v> = <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:v> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:v> = <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:v> = <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:v> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:v> = <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:v> = <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 