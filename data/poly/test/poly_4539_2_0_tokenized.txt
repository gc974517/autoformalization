\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:3> ; <var:L> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Allowing that $ <var:C> = <var:G> $ prior to evaluating our set of instructions it follows that we see $ <var:L> = <nat:3> $ when list of commands is done . \end{theorem} \begin{proof} Using standard Hoare techniques returns : \begin{eqnarray} \{ <var:C> = <var:G> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:C> = <var:G> \land <var:r0> = <nat:3> \} \\ <var:L> := <var:r0> \\ \{ <var:C> = <var:G> \land <var:L> = <nat:3> \} \end{eqnarray} Given the above , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:3> ; <var:L> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:C> = <var:G> }} <def:poly> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 