\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:j1> := <var:l> ; <var:j0> := <nat:4> ; <var:j1> := <var:j1> * <nat:3> ; <var:a> := <var:j1> <var:a> := <var:a> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:l> = <var:K> $ --- for every $ <var:K> \in \mathbb{Z}^+ $ --- before the execution of the program , it follows that we see $ <var:a> = <nat:3> \cdot <var:K> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our list of commands can be seen by usual Hoare reasoning . Stepping through , we see the assignment command \verb | <var:j1> := <var:l> ; | . This advances the precondition $ \{ <var:l> = <var:K> \} $ to the condition $ \{ <var:l> = <var:K> \land <var:j1> = <var:K> \} $ . Taking another step toward the following line of code contained in the list of instructions , the assignment statement \verb | <var:j0> := <nat:4> ; | . This line transfers the precondition $ \{ <var:l> = <var:K> \land <var:j1> = <var:K> \} $ into the condition $ \{ <var:l> = <var:K> \land <var:j1> = <var:K> \land <var:j0> = <nat:4> \} $ . Taking another step toward the following statement contained in the series of commands , the environment update command assigning $ <var:j1> * <nat:3> $ to $ <var:j1>$ . This moves the condition $ \{ <var:l> = <var:K> \land <var:j1> = <var:K> \land <var:j0> = <nat:4> \} $ toward the condition $ \{ <var:l> = <var:K> \land <var:j1> = <nat:3> \times <var:K> \land <var:j0> = <nat:4> \} $ . Stepping forward , we have the environment update line \verb | <var:a> := <var:j1> | . This forwards $ \{ <var:l> = <var:K> \land <var:j1> = <nat:3> \times <var:K> \land <var:j0> = <nat:4> \} $ to $ \{ <var:l> = <var:K> \land <var:j0> = <nat:4> \land <var:a> = <nat:3> \times <var:K> \} $ . Moving forward , the code defining $ <var:a> + <var:j0$ to $ <var:a>$ . This moves the precondition $ \{ <var:l> = <var:K> \land <var:j0> = <nat:4> \land <var:a> = <nat:3> \times <var:K> \} $ as $ \{ <var:l> = <var:K> \land <var:a> = <nat:3> \times <var:K> + <nat:4> \} $ . This is guaranteed with the assignment law obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:l> ; <var:j0> := <nat:4> ; <var:j1> := <var:j1> * <nat:3> ; <var:a> := <var:j1> <var:a> := <var:a> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:l> = <var:K> }} <def:poly> {{ <var:a> = <nat:3> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:j1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:j1> = <var:K> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:j1> = <nat:3> * <var:K> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:j0> = <nat:4> /\ <var:a> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:a> = <nat:3> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 