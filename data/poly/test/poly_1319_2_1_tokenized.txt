\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:1> ; <var:k> := <var:q0> \end{verbatim} Given , letting $ <var:N> $ , it to be that $ <var:K> = <var:N> $ ahead of executing our code , it follows that we have $ <var:k> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our segment of code can be demonstrated with standard Hoare logic . Taking another step toward the subsequent steps seen in the series of instructions , we see \verb | { <var:K> = <var:N> } <var:q0> := <nat:1> { <var:K> = <var:N> \land <var:q0> = <nat:1> } | and \verb | { <var:K> = <var:N> \land <var:q0> = <nat:1> } <var:k> := <var:q0{ <var:K> = <var:N> \land <var:k> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:K> = <var:N> }} <var:q0> := <nat:1> ; <var:k> := <var:q0> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 