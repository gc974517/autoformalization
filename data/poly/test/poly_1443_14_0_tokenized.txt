\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:6> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:Z> ; <var:m2> := <nat:7> ; <var:m2> := <var:m2> * <var:Z> ; <var:m2> := <var:m2> * <var:Z> ; <var:m3> := <nat:5> ; <var:m3> := <var:m3> * <var:Z> ; <var:m3> := <var:m3> * <var:Z> ; <var:m3> := <var:m3> * <var:Z> ; <var:r> := <var:m3> ; <var:r> := <var:r> + <var:m2> ; <var:r> := <var:r> + <var:m1> ; <var:r> := <var:r> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:Z> = <var:J> $ before evaluating our code it holds that $ <var:r> = <nat:5> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:6> $ once list of instructions has finished executing . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is demonstrated through usual Hoare reasoning . Moving forward to the next step , \begin{eqnarray} \{ <var:Z> = <var:J> \} \, <var:m0> := <nat:6> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \} \, <var:m1> := <nat:3> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \} \end{eqnarray} This is rigorously given using the assignment scheme from standard Hoare reasoning . Focusing on the proceeding lines of codefound in the code , we see \begin{eqnarray} \{ <var:Z> = <var:J> \} \, <var:m0> := <nat:6> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \} \, <var:m1> := <nat:3> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \} \, <var:m1> := <var:m1> * <var:Z> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \} \, <var:m2> := <nat:7> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \} \, <var:m2> := <var:m2> * <var:Z> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> \} \, <var:m2> := <var:m2> * <var:Z> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \} \, <var:m3> := <nat:5> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:m3> = <nat:5> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:m3> = <nat:5> \} \, <var:m3> := <var:m3> * <var:Z> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:J> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:J> \} \, <var:m3> := <var:m3> * <var:Z> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:J> ^ <nat:2> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:J> ^ <nat:2> \} \, <var:m3> := <var:m3> * <var:Z> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:J> ^ <nat:3> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:J> ^ <nat:3> \} \, <var:r> := <var:m3> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:r> = <nat:5> \times <var:J> ^ <nat:3> \} \\ \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:m2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:r> = <nat:5> \times <var:J> ^ <nat:3> \} \, <var:r> := <var:r> + <var:m2> \, \{ <var:Z> = <var:J> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:J> \land <var:r> = <nat:5> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> \} \end{eqnarray} This is ensured with the environment update inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m0> := <nat:6> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:Z> ; <var:m2> := <nat:7> ; <var:m2> := <var:m2> * <var:Z> ; <var:m2> := <var:m2> * <var:Z> ; <var:m3> := <nat:5> ; <var:m3> := <var:m3> * <var:Z> ; <var:m3> := <var:m3> * <var:Z> ; <var:m3> := <var:m3> * <var:Z> ; <var:r> := <var:m3> ; <var:r> := <var:r> + <var:m2> ; <var:r> := <var:r> + <var:m1> ; <var:r> := <var:r> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Z> = <var:J> }} <def:poly> {{ <var:r> = <nat:5> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:m2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:m2> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:m2> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:m2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:m3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:m2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:m2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:m2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:m2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:r> = <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:J> /\ <var:r> = <nat:5> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:m0> = <nat:6> /\ <var:r> = <nat:5> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:r> = <nat:5> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 