\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:S1> := <var:s> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:3> ; <var:r> := <var:S1> <var:r> := <var:r> + <var:S0> \end{verbatim} Assume it to hold that $ <var:s> = <var:F> $ given all whole numbers $ <var:F> $ prior to executing our program , it must be that $ <var:r> = <nat:3> * <var:F> + <nat:1> $ when set of instructions has executed . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:s> = <var:F> \} \\ <var:S1> := <var:s> ; \\ \{ <var:s> = <var:F> \land <var:S1> = <var:F> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:s> = <var:F> \land <var:S1> = <var:F> \land <var:S0> = <nat:1> \} \\ <var:S1> := <var:S1> * <nat:3> ; \\ \{ <var:s> = <var:F> \land <var:S1> = <nat:3> \times <var:F> \land <var:S0> = <nat:1> \} \\ <var:r> := <var:S1> \\ \{ <var:s> = <var:F> \land <var:S0> = <nat:1> \land <var:r> = <nat:3> \times <var:F> \} \\ <var:r> := <var:r> + <var:S0> \\ \{ <var:s> = <var:F> \land <var:r> = <nat:3> \times <var:F> + <nat:1> \} \end{eqnarray} Considering the above , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:s> = <var:F> }} <var:S1> := <var:s> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:3> ; <var:r> := <var:S1> <var:r> := <var:r> + <var:S0> {{ <var:r> = <nat:3> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:S1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:S1> = <var:F> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:S1> = <nat:3> * <var:F> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:S0> = <nat:1> /\ <var:r> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:r> = <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 