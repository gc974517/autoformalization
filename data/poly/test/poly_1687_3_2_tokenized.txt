\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:B> := <nat:4> ; <var:B> := <nat:2> + <var:B> * <var:b> ; <var:B> := <nat:3> + <var:B> * <var:b> \end{verbatim} Assume $ <var:b> = <var:d> $ before the execution of our program it holds that we have $ <var:B> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the segment of code is given through standard Hoare techniques . Looking at the next piece of code found in the list of commands , we see the statement yielding $ <nat:4> $ into $ <var:B>$ . This statement advances the condition $ \{ <var:b> = <var:d> \} $ to $ \{ <var:b> = <var:d> \land <var:B> = <nat:4> \} $ . This is sound using the assignment scheme given by usual Hoare logic . Moving onward , we see the binding statement \verb | <var:B> := <nat:2> + <var:B> * <var:b> ; | . This forwards the precondition $ \{ <var:b> = <var:d> \land <var:B> = <nat:4> \} $ toward the postcondition $ \{ <var:b> = <var:d> \land <var:B> = <nat:4> * <var:d> + <nat:2> \} $ . Advancing to the proceeding line contained in the series of commands , we have the variable binding statement letting $ <nat:3> + <var:B> * <var:b$ toward $ <var:B>$ . This transfers the condition $ \{ <var:b> = <var:d> \land <var:B> = <nat:4> * <var:d> + <nat:2> \} $ into the condition $ \{ <var:b> = <var:d> \land <var:B> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> \} $ . This is shown by the assignment scheme from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:b> = <var:d> }} <var:B> := <nat:4> ; <var:B> := <nat:2> + <var:B> * <var:b> ; <var:B> := <nat:3> + <var:B> * <var:b> {{ <var:B> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:B> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:B> = <nat:4> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:B> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 