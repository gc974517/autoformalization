\begin{document} \begin{theorem} Define a code in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:1> ; <var:l> := <var:t0> \end{verbatim} Assume it to hold that $ <var:c> = <var:H> $ , for all $ <var:H> \in \mathbb{Z}^+ $ , before executing the segment of code it must be that we have $ <var:l> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be done through usual Hoare reasoning . Going forward , we have the variable assignmet line binding $ <nat:1> $ into $ <var:t0>$ . This code transfers $ \{ <var:c> = <var:H> \} $ as $ \{ <var:c> = <var:H> \land <var:t0> = <nat:1> \} $ . Next , we see the variable update code \verb | <var:l> := <var:t0> | . This forwards the precondition $ \{ <var:c> = <var:H> \land <var:t0> = <nat:1> \} $ into $ \{ <var:c> = <var:H> \land <var:l> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:c> = <var:H> }} <var:t0> := <nat:1> ; <var:l> := <var:t0> {{ <var:l> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:l> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 