\begin{document} \begin{theorem} Take a set of instructions such that \begin{verbatim} <var:C0> := <nat:5> ; <var:E> := <var:C0> \end{verbatim} Assume that $ <var:A> = <var:Q> $ ahead of evaluating our code segment then we have $ <var:E> = <nat:5> $ when list of instructions has exited . \end{theorem} \begin{proof} Arguing the correctness of our code segment is given by typical Hoare reasoning . Moving forward , we have the line giving $ <nat:5> $ toward $ <var:C0>$ . This forwards $ \{ <var:A> = <var:Q> \} $ to $ \{ <var:A> = <var:Q> \land <var:C0> = <nat:5> \} $ . This is sound using the assignment inference rule obtained from standard Hoare techniques . Paying attention to the following line of code contained in the series of instructions , we have the variable assignmet line defining $ <var:C0$ toward $ <var:E>$ . This code transfers the condition $ \{ <var:A> = <var:Q> \land <var:C0> = <nat:5> \} $ into $ \{ <var:A> = <var:Q> \land <var:E> = <nat:5> \} $ . This is guaranteed using the assignment inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:A> = <var:Q> }} <var:C0> := <nat:5> ; <var:E> := <var:C0> {{ <var:E> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 