\begin{document} \begin{theorem} We define the following list of instructions as \begin{verbatim} <var:c1> := <var:Y> ; <var:c2> := <var:c1> * <var:Y> ; <var:c3> := <var:c2> * <var:Y> ; <var:c4> := <var:c3> * <var:Y> ; <var:c5> := <var:c4> * <var:Y> ; <var:c0> := <nat:3> ; <var:c2> := <var:c2> * <nat:5> ; <var:c4> := <var:c4> * <nat:9> ; <var:c5> := <var:c5> * <nat:3> ; <var:h> := <var:c5> <var:h> := <var:h> + <var:c4> <var:h> := <var:h> + <var:c2> <var:h> := <var:h> + <var:c0> \end{verbatim} Assuming with some $ <var:q> $ $ <var:Y> = <var:q> $ prior to running the list of commands it must be that we see $ <var:h> = <nat:3> \times <var:q> ^ <nat:5> + <nat:9> \times <var:q> ^ <nat:4> + <nat:5> \times <var:q> ^ <nat:2> + <nat:3> $ when code terminates . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is demonstrated by Hoare reasoning . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:q> \} & <var:c1> := <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \} & <var:c2> := <var:c1> * <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \} & <var:c3> := <var:c2> * <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \} & <var:c4> := <var:c3> * <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \} & <var:c5> := <var:c4> * <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \land <var:c5> = <var:q> ^ <nat:5> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \land <var:c5> = <var:q> ^ <nat:5> \} & <var:c0> := <nat:3> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \land <var:c5> = <var:q> ^ <nat:5> \land <var:c0> = <nat:3> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \land <var:c5> = <var:q> ^ <nat:5> \land <var:c0> = <nat:3> \} & <var:c2> := <var:c2> * <nat:5> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <nat:5> * <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \land <var:c5> = <var:q> ^ <nat:5> \land <var:c0> = <nat:3> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <nat:5> * <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \land <var:c5> = <var:q> ^ <nat:5> \land <var:c0> = <nat:3> \} & <var:c4> := <var:c4> * <nat:9> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <nat:5> * <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <nat:9> * <var:q> ^ <nat:4> \land <var:c5> = <var:q> ^ <nat:5> \land <var:c0> = <nat:3> \} \end{tabular} Next , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:q> \} & <var:c1> := <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \} \end{tabular} This is shown by the binding law given by usual Hoare techniques . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:q> \} & <var:c1> := <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \} & <var:c2> := <var:c1> * <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \} & <var:c3> := <var:c2> * <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \} \\ \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \} & <var:c4> := <var:c3> * <var:Y> & \{ <var:Y> = <var:q> \land <var:c1> = <var:q> \land <var:c2> = <var:q> ^ <nat:2> \land <var:c3> = <var:q> ^ <nat:3> \land <var:c4> = <var:q> ^ <nat:4> \} \end{tabular} This is deduced with the variable assignmet inference rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <var:c4> : string := " <var:c4> " . Definition <var:c5> : string := " <var:c5> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Y> = <var:q> }} <var:c1> := <var:Y> ; <var:c2> := <var:c1> * <var:Y> ; <var:c3> := <var:c2> * <var:Y> ; <var:c4> := <var:c3> * <var:Y> ; <var:c5> := <var:c4> * <var:Y> ; <var:c0> := <nat:3> ; <var:c2> := <var:c2> * <nat:5> ; <var:c4> := <var:c4> * <nat:9> ; <var:c5> := <var:c5> * <nat:3> ; <var:h> := <var:c5> <var:h> := <var:h> + <var:c4> <var:h> := <var:h> + <var:c2> <var:h> := <var:h> + <var:c0> {{ <var:h> = <nat:3> * <var:q> ^ <nat:5> + <nat:9> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> /\ <var:c4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> /\ <var:c4> = <var:q> ^ <nat:4> /\ <var:c5> = <var:q> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> /\ <var:c4> = <var:q> ^ <nat:4> /\ <var:c5> = <var:q> ^ <nat:5> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> /\ <var:c4> = <var:q> ^ <nat:4> /\ <var:c5> = <var:q> ^ <nat:5> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> /\ <var:c4> = <nat:9> * <var:q> ^ <nat:4> /\ <var:c5> = <var:q> ^ <nat:5> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> /\ <var:c4> = <nat:9> * <var:q> ^ <nat:4> /\ <var:c5> = <nat:3> * <var:q> ^ <nat:5> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> /\ <var:c4> = <nat:9> * <var:q> ^ <nat:4> /\ <var:c0> = <nat:3> /\ <var:h> = <nat:3> * <var:q> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:c3> = <var:q> ^ <nat:3> /\ <var:c0> = <nat:3> /\ <var:h> = <nat:3> * <var:q> ^ <nat:5> + <nat:9> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:c1> = <var:q> /\ <var:c0> = <nat:3> /\ <var:h> = <nat:3> * <var:q> ^ <nat:5> + <nat:9> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:h> = <nat:3> * <var:q> ^ <nat:5> + <nat:9> * <var:q> ^ <nat:4> + <nat:5> * <var:q> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 