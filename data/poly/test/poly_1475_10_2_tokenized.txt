\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n> := <nat:4> ; <var:n> := <nat:4> + <var:n> * <var:T> ; <var:n> := <nat:3> + <var:n> * <var:T> ; <var:n> := <nat:2> + <var:n> * <var:T> ; <var:n> := <nat:3> + <var:n> * <var:T> ; <var:n> := <nat:2> + <var:n> * <var:T> ; <var:n> := <nat:2> + <var:n> * <var:T> ; <var:n> := <var:n> * <var:T> ; <var:n> := <nat:3> + <var:n> * <var:T> ; <var:n> := <nat:3> + <var:n> * <var:T> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Allowing , letting integers $ <var:A> $ , that $ <var:T> = <var:A> $ before evaluating our list of commands , it holds that we see $ <var:n> = <nat:4> \times <var:A> ^ <nat:9> + <nat:4> \times <var:A> ^ <nat:8> + <nat:3> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this set of commands is accomplished using standard Hoare reasoning . Considering the subsequent line seen in the set of commands , we see the command defining $ <nat:4> $ to $ <var:n>$ . This redefines the condition $ \{ <var:T> = <var:A> \} $ into $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \} $ . Stepping forward , we have the variable assignmet command assigning $ <nat:4> + <var:n> * <var:T> $ as $ <var:n>$ . This command transfers the precondition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \} $ as $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> + <nat:4> \} $ . This is sound using the assignment scheme obtained from typical Hoare reasoning . Paying attention to the proceeding step found in our list of instructions , we have the assignment code \verb | <var:n> := <nat:3> + <var:n> * <var:T> ; | . This command redefines the precondition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> + <nat:4> \} $ as the postcondition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:3> \} $ . Now , the environment update statement \verb | <var:n> := <nat:2> + <var:n> * <var:T> ; | . This statement redefines the condition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:3> \} $ as the condition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:2> \} $ . Stepping forward , we have the variable update line binding $ <nat:3> + <var:n> * <var:T> $ toward $ <var:n>$ . This forwards the precondition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:2> \} $ to the condition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:3> \} $ . Moving forward , we see the variable update code letting $ <nat:2> + <var:n> * <var:T> $ toward $ <var:n>$ . This line moves $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:3> \} $ as the postcondition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:5> + <nat:4> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:2> \} $ . Moving forward , we have the binding command defining $ <nat:2> + <var:n> * <var:T> $ to $ <var:n>$ . This line transfers the condition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:5> + <nat:4> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:2> \} $ to $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:6> + <nat:4> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule in typical Hoare logic . Advancing to the next piece of code in our series of instructions , we see the variable binding code \verb | <var:n> := <var:n> * <var:T> ; | . This forwards $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:6> + <nat:4> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:2> \} $ as the postcondition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:7> + <nat:4> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + \} $ . This is ensured by the assignment rule given in typical Hoare logic . Focusing on the next line of code seen in the series of instructions , we have the variable binding command assigning $ <nat:3> + <var:n> * <var:T> $ into $ <var:n>$ . This line advances the precondition $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:7> + <nat:4> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + \} $ into $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:8> + <nat:4> \times <var:A> ^ <nat:7> + <nat:3> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:3> \} $ . Immediately after , the binding code \verb | <var:n> := <nat:3> + <var:n> * <var:T> | . This advances $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:8> + <nat:4> \times <var:A> ^ <nat:7> + <nat:3> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:3> \} $ to $ \{ <var:T> = <var:A> \land <var:n> = <nat:4> \times <var:A> ^ <nat:9> + <nat:4> \times <var:A> ^ <nat:8> + <nat:3> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> + <nat:3> \} $ . This is ensured with the assignment law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:4> ; <var:n> := <nat:4> + <var:n> * <var:T> ; <var:n> := <nat:3> + <var:n> * <var:T> ; <var:n> := <nat:2> + <var:n> * <var:T> ; <var:n> := <nat:3> + <var:n> * <var:T> ; <var:n> := <nat:2> + <var:n> * <var:T> ; <var:n> := <nat:2> + <var:n> * <var:T> ; <var:n> := <var:n> * <var:T> ; <var:n> := <nat:3> + <var:n> * <var:T> ; <var:n> := <nat:3> + <var:n> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:T> = <var:A> }} <def:poly> {{ <var:n> = <nat:4> * <var:A> ^ <nat:9> + <nat:4> * <var:A> ^ <nat:8> + <nat:3> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> ^ <nat:8> + <nat:4> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:A> /\ <var:n> = <nat:4> * <var:A> ^ <nat:9> + <nat:4> * <var:A> ^ <nat:8> + <nat:3> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 