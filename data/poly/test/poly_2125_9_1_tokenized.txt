\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:E1> := <var:p> ; <var:E2> := <var:E1> * <var:p> ; <var:E3> := <var:E2> * <var:p> ; <var:E0> := <nat:2> ; <var:E2> := <var:E2> * <nat:3> ; <var:E3> := <var:E3> * <nat:3> ; <var:d> := <var:E3> <var:d> := <var:d> + <var:E2> <var:d> := <var:d> + <var:E0> \end{verbatim} Assuming it to hold that $ <var:p> = <var:X> $ before interpreting our segment of code it must be that $ <var:d> = <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the series of instructions can be demonstrated through standard Hoare logic . Honing in on the proceeding lines of codecontained in our code segment , \begin{eqnarray} \{ <var:p> = <var:X> \} \, <var:E1> := <var:p> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \} \\ \{ <var:p> = <var:X> \land <var:E1> = <var:X> \} \, <var:E2> := <var:E1> * <var:p> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \} \\ \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \} \, <var:E3> := <var:E2> * <var:p> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \land <var:E3> = <var:X> ^ <nat:3> \} \\ \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \land <var:E3> = <var:X> ^ <nat:3> \} \, <var:E0> := <nat:2> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \land <var:E3> = <var:X> ^ <nat:3> \land <var:E0> = <nat:2> \} \\ \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \land <var:E3> = <var:X> ^ <nat:3> \land <var:E0> = <nat:2> \} \, <var:E2> := <var:E2> * <nat:3> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:E3> = <var:X> ^ <nat:3> \land <var:E0> = <nat:2> \} \end{eqnarray} Observing the following lines seen in the program , \begin{eqnarray} \{ <var:p> = <var:X> \} \, <var:E1> := <var:p> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \} \\ \{ <var:p> = <var:X> \land <var:E1> = <var:X> \} \, <var:E2> := <var:E1> * <var:p> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \} \\ \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \} \, <var:E3> := <var:E2> * <var:p> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \land <var:E3> = <var:X> ^ <nat:3> \} \\ \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \land <var:E3> = <var:X> ^ <nat:3> \} \, <var:E0> := <nat:2> \, \{ <var:p> = <var:X> \land <var:E1> = <var:X> \land <var:E2> = <var:X> ^ <nat:2> \land <var:E3> = <var:X> ^ <nat:3> \land <var:E0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:p> = <var:X> }} <var:E1> := <var:p> ; <var:E2> := <var:E1> * <var:p> ; <var:E3> := <var:E2> * <var:p> ; <var:E0> := <nat:2> ; <var:E2> := <var:E2> * <nat:3> ; <var:E3> := <var:E3> * <nat:3> ; <var:d> := <var:E3> <var:d> := <var:d> + <var:E2> <var:d> := <var:d> + <var:E0> {{ <var:d> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:E1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:E1> = <var:X> /\ <var:E2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:E1> = <var:X> /\ <var:E2> = <var:X> ^ <nat:2> /\ <var:E3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:E1> = <var:X> /\ <var:E2> = <var:X> ^ <nat:2> /\ <var:E3> = <var:X> ^ <nat:3> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:E1> = <var:X> /\ <var:E2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:E3> = <var:X> ^ <nat:3> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:E1> = <var:X> /\ <var:E2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:E3> = <nat:3> * <var:X> ^ <nat:3> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:E1> = <var:X> /\ <var:E2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:E0> = <nat:2> /\ <var:d> = <nat:3> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:E1> = <var:X> /\ <var:E0> = <nat:2> /\ <var:d> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:d> = <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 