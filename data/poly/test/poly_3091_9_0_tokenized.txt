\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:3> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:W> ; <var:b2> := <nat:8> ; <var:b2> := <var:b2> * <var:W> ; <var:b2> := <var:b2> * <var:W> ; <var:f> := <var:b2> ; <var:f> := <var:f> + <var:b1> ; <var:f> := <var:f> + <var:b0> \end{verbatim} Allow given every $ <var:E> \in \mathbb{Z}^+ $ it to be that $ <var:W> = <var:E> $ before running the set of commands , it follows that we see $ <var:f> = <nat:8> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:3> $ once segment of code exits . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives : \begin{eqnarray} \{ <var:W> = <var:E> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:W> = <var:E> \land <var:b0> = <nat:3> \} \\ <var:b1> := <nat:4> ; \\ \{ <var:W> = <var:E> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \} \\ <var:b1> := <var:b1> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \times <var:E> \} \\ <var:b2> := <nat:8> ; \\ \{ <var:W> = <var:E> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \times <var:E> \land <var:b2> = <nat:8> \} \\ <var:b2> := <var:b2> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \times <var:E> \land <var:b2> = <nat:8> \times <var:E> \} \\ <var:b2> := <var:b2> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \times <var:E> \land <var:b2> = <nat:8> \times <var:E> ^ <nat:2> \} \\ <var:f> := <var:b2> ; \\ \{ <var:W> = <var:E> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \times <var:E> \land <var:f> = <nat:8> \times <var:E> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:b1> ; \\ \{ <var:W> = <var:E> \land <var:b0> = <nat:3> \land <var:f> = <nat:8> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> \} \\ <var:f> := <var:f> + <var:b0> \\ \{ <var:W> = <var:E> \land <var:f> = <nat:8> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:W> = <var:E> }} <var:b0> := <nat:3> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:W> ; <var:b2> := <nat:8> ; <var:b2> := <var:b2> * <var:W> ; <var:b2> := <var:b2> * <var:W> ; <var:f> := <var:b2> ; <var:f> := <var:f> + <var:b1> ; <var:f> := <var:f> + <var:b0> {{ <var:f> = <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:4> * <var:E> /\ <var:b2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:4> * <var:E> /\ <var:b2> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:4> * <var:E> /\ <var:b2> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:4> * <var:E> /\ <var:f> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b0> = <nat:3> /\ <var:f> = <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:f> = <nat:8> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 