\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:3> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:L> ; <var:R2> := <nat:2> ; <var:R2> := <var:R2> * <var:L> ; <var:R2> := <var:R2> * <var:L> ; <var:R3> := <nat:2> ; <var:R3> := <var:R3> * <var:L> ; <var:R3> := <var:R3> * <var:L> ; <var:R3> := <var:R3> * <var:L> ; <var:c> := <var:R3> ; <var:c> := <var:c> + <var:R2> ; <var:c> := <var:c> + <var:R1> ; <var:c> := <var:c> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Given for all whole numbers $ <var:U> $ that we have $ <var:L> = <var:U> $ ahead of evaluating the series of instructions , it holds that $ <var:c> = <nat:2> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:5> \times <var:U> + <nat:3> $ once set of instructions terminates . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:L> = <var:U> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \} \\ <var:R1> := <nat:5> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \} \\ <var:R1> := <var:R1> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \} \\ <var:R2> := <nat:2> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:R2> = <nat:2> \} \\ <var:R2> := <var:R2> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:R2> = <nat:2> \cdot <var:U> \} \\ <var:R2> := <var:R2> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:R2> = <nat:2> \cdot <var:U> ^ <nat:2> \} \end{eqnarray} Allowing interpreting this set of commands results in : \begin{eqnarray} <var:R3> := <nat:2> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:R2> = <nat:2> \cdot <var:U> ^ <nat:2> \land <var:R3> = <nat:2> \} \\ <var:R3> := <var:R3> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:R2> = <nat:2> \cdot <var:U> ^ <nat:2> \land <var:R3> = <nat:2> \cdot <var:U> \} \\ <var:R3> := <var:R3> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:R2> = <nat:2> \cdot <var:U> ^ <nat:2> \land <var:R3> = <nat:2> \cdot <var:U> ^ <nat:2> \} \\ <var:R3> := <var:R3> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:R2> = <nat:2> \cdot <var:U> ^ <nat:2> \land <var:R3> = <nat:2> \cdot <var:U> ^ <nat:3> \} \end{eqnarray} Advancing running this series of commands returns : \begin{eqnarray} <var:c> := <var:R3> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:R2> = <nat:2> \cdot <var:U> ^ <nat:2> \land <var:c> = <nat:2> \cdot <var:U> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:R2> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:R1> = <nat:5> \cdot <var:U> \land <var:c> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:R1> ; \\ \{ <var:L> = <var:U> \land <var:R0> = <nat:3> \land <var:c> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:5> \cdot <var:U> \} \\ <var:c> := <var:c> + <var:R0> \\ \{ <var:L> = <var:U> \land <var:c> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:5> \cdot <var:U> + <nat:3> \} \end{eqnarray} Given the preceding argument , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R0> := <nat:3> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:L> ; <var:R2> := <nat:2> ; <var:R2> := <var:R2> * <var:L> ; <var:R2> := <var:R2> * <var:L> ; <var:R3> := <nat:2> ; <var:R3> := <var:R3> * <var:L> ; <var:R3> := <var:R3> * <var:L> ; <var:R3> := <var:R3> * <var:L> ; <var:c> := <var:R3> ; <var:c> := <var:c> + <var:R2> ; <var:c> := <var:c> + <var:R1> ; <var:c> := <var:c> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:L> = <var:U> }} <def:poly> {{ <var:c> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:R2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:R2> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:R2> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:R2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:R3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:R2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:R3> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:R2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:R3> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:R2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:R3> = <nat:2> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:R2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:c> = <nat:2> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:5> * <var:U> /\ <var:c> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:R0> = <nat:3> /\ <var:c> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:c> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 