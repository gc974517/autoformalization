\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:8> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:F> ; <var:R> := <var:N1> ; <var:R> := <var:R> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Allowing ( assuming some positive integer coefficients $ <var:Q> $ ) it to hold that $ <var:F> = <var:Q> $ ahead of evaluating this list of instructions , it follows that we see $ <var:R> = <nat:1> \cdot <var:Q> + <nat:8> $ . \end{theorem} \begin{proof} The proof of the segment of code is given through the following decorated series of instructions . \begin{eqnarray} \{ <var:F> = <var:Q> \} \\ <var:N0> := <nat:8> ; \\ \{ <var:F> = <var:Q> \land <var:N0> = <nat:8> \} \\ <var:N1> := <nat:1> ; \\ \{ <var:F> = <var:Q> \land <var:N0> = <nat:8> \land <var:N1> = <nat:1> \} \\ <var:N1> := <var:N1> * <var:F> ; \\ \{ <var:F> = <var:Q> \land <var:N0> = <nat:8> \land <var:N1> = <nat:1> \times <var:Q> \} \\ <var:R> := <var:N1> ; \\ \{ <var:F> = <var:Q> \land <var:N0> = <nat:8> \land <var:R> = <nat:1> \times <var:Q> \} \\ <var:R> := <var:R> + <var:N0> \\ \{ <var:F> = <var:Q> \land <var:R> = <nat:1> \times <var:Q> + <nat:8> \} \end{eqnarray} Applying typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N0> := <nat:8> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:F> ; <var:R> := <var:N1> ; <var:R> := <var:R> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:F> = <var:Q> }} <def:poly> {{ <var:R> = <nat:1> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:N0> = <nat:8> /\ <var:N1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:N0> = <nat:8> /\ <var:N1> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:N0> = <nat:8> /\ <var:R> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:R> = <nat:1> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 