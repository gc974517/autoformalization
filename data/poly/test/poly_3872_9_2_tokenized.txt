\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A> := <nat:1> ; <var:A> := <nat:4> + <var:A> * <var:x> ; <var:A> := <nat:2> + <var:A> * <var:x> ; <var:A> := <nat:3> + <var:A> * <var:x> ; <var:A> := <nat:2> + <var:A> * <var:x> ; <var:A> := <nat:4> + <var:A> * <var:x> ; <var:A> := <nat:3> + <var:A> * <var:x> ; <var:A> := <nat:2> + <var:A> * <var:x> ; <var:A> := <nat:4> + <var:A> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:x> = <var:M> $ before interpreting this list of commands it holds that $ <var:A> = <nat:1> \cdot <var:M> ^ <nat:8> + <nat:4> \cdot <var:M> ^ <nat:7> + <nat:2> \cdot <var:M> ^ <nat:6> + <nat:3> \cdot <var:M> ^ <nat:5> + <nat:2> \cdot <var:M> ^ <nat:4> + <nat:4> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The argument for this list of commands can be shown by Hoare logic . Moving on to the next statement seen in our segment of code , the variable binding code \verb | <var:A> := <nat:1> ; | . This advances $ \{ <var:x> = <var:M> \} $ toward the condition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> \} $ . This is shown through the assignment inference rule defined in standard Hoare reasoning . Moving on to the upcoming command seen in the set of instructions , the environment update command binding $ <nat:4> + <var:A> * <var:x> $ into $ <var:A>$ . This takes $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> \} $ to the condition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> + <nat:4> \} $ . Jumping to the proceeding bit of code in our list of commands , the variable update statement \verb | <var:A> := <nat:2> + <var:A> * <var:x> ; | . This redefines the condition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> + <nat:4> \} $ to the condition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:2> \} $ . This is known to be sound with the assignment rule found in Hoare logic . Moving onward , we have the assignment line yielding $ <nat:3> + <var:A> * <var:x> $ as $ <var:A>$ . This forwards $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> \} $ . This is shown by the assignment scheme of usual Hoare reasoning . Looking at the subsequent statement found in our program , we have the variable binding statement assigning $ <nat:2> + <var:A> * <var:x> $ toward $ <var:A>$ . This advances $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> \} $ as $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> \} $ . This is shown to be logically sound with the assignment rule from usual Hoare logic . Considering the upcoming piece of code in our set of instructions , we have the variable binding line \verb | <var:A> := <nat:4> + <var:A> * <var:x> ; | . This line forwards $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> \} $ . Shifting focus toward the upcoming bit of code found in our set of commands , the assignment statement defining $ <nat:3> + <var:A> * <var:x> $ as $ <var:A>$ . This code advances the precondition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> \} $ into the postcondition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> \} $ . Considering the subsequent line found in our series of commands , the variable assignmet line binding $ <nat:2> + <var:A> * <var:x> $ as $ <var:A>$ . This statement redefines the precondition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> \} $ as the postcondition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> \} $ . Looking at the next command seen in the series of commands , the variable update code \verb | <var:A> := <nat:4> + <var:A> * <var:x> | . This command forwards $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> \} $ toward the condition $ \{ <var:x> = <var:M> \land <var:A> = <nat:1> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> \} $ . This is given through the assignment scheme of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:1> ; <var:A> := <nat:4> + <var:A> * <var:x> ; <var:A> := <nat:2> + <var:A> * <var:x> ; <var:A> := <nat:3> + <var:A> * <var:x> ; <var:A> := <nat:2> + <var:A> * <var:x> ; <var:A> := <nat:4> + <var:A> * <var:x> ; <var:A> := <nat:3> + <var:A> * <var:x> ; <var:A> := <nat:2> + <var:A> * <var:x> ; <var:A> := <nat:4> + <var:A> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:x> = <var:M> }} <def:poly> {{ <var:A> = <nat:1> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:A> = <nat:1> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 