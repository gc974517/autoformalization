\begin{document} \begin{theorem} We define a set of instructions such that \begin{verbatim} <var:j0> := <nat:2> ; <var:j1> := <nat:2> ; <var:j1> := <var:j1> * <var:B> ; <var:j2> := <nat:9> ; <var:j2> := <var:j2> * <var:B> ; <var:j2> := <var:j2> * <var:B> ; <var:h> := <var:j2> ; <var:h> := <var:h> + <var:j1> ; <var:h> := <var:h> + <var:j0> \end{verbatim} Given , letting $ <var:N> \in \mathbb{N} $ , it to hold that $ <var:B> = <var:N> $ prior to executing the segment of code it holds that we see $ <var:h> = <nat:9> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is evident through Hoare reasoning . Further , \[ \begin{tabular} {rcl} \{ <var:B> = <var:N> \} & <var:j0> := <nat:2> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \} \end{tabular} Looking at the proceeding steps in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:N> \} & <var:j0> := <nat:2> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \} \\ \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \} & <var:j1> := <nat:2> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \} \\ \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \} & <var:j1> := <var:j1> * <var:B> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \cdot <var:N> \} \\ \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \cdot <var:N> \} & <var:j2> := <nat:9> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \cdot <var:N> \land <var:j2> = <nat:9> \} \end{tabular} This is given by the environment update scheme given in standard Hoare reasoning . Further , we see \[ \begin{tabular} {rcl} \{ <var:B> = <var:N> \} & <var:j0> := <nat:2> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \} \\ \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \} & <var:j1> := <nat:2> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \} \\ \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \} & <var:j1> := <var:j1> * <var:B> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \cdot <var:N> \} \\ \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \cdot <var:N> \} & <var:j2> := <nat:9> & \{ <var:B> = <var:N> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \cdot <var:N> \land <var:j2> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:B> = <var:N> }} <var:j0> := <nat:2> ; <var:j1> := <nat:2> ; <var:j1> := <var:j1> * <var:B> ; <var:j2> := <nat:9> ; <var:j2> := <var:j2> * <var:B> ; <var:j2> := <var:j2> * <var:B> ; <var:h> := <var:j2> ; <var:h> := <var:h> + <var:j1> ; <var:h> := <var:h> + <var:j0> {{ <var:h> = <nat:9> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:2> * <var:N> /\ <var:j2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:2> * <var:N> /\ <var:j2> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:2> * <var:N> /\ <var:j2> = <nat:9> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:2> * <var:N> /\ <var:h> = <nat:9> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:j0> = <nat:2> /\ <var:h> = <nat:9> * <var:N> ^ <nat:2> + <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:h> = <nat:9> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 