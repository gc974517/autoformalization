\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:i> ; <var:D2> := <var:D1> * <var:i> ; <var:D3> := <var:D2> * <var:i> ; <var:D4> := <var:D3> * <var:i> ; <var:D5> := <var:D4> * <var:i> ; <var:D0> := <nat:2> ; <var:D2> := <var:D2> * <nat:3> ; <var:D5> := <var:D5> * <nat:2> ; <var:M> := <var:D5> <var:M> := <var:M> + <var:D2> <var:M> := <var:M> + <var:D0> \end{verbatim} Allow , for every positive coefficients $ <var:V> $ , that we have $ <var:i> = <var:V> $ prior to running this list of instructions it holds that we have $ <var:M> = <nat:2> \cdot <var:V> ^ <nat:5> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Notice the following decorated segment of code . \begin{eqnarray} \{ <var:i> = <var:V> \} \\ <var:D1> := <var:i> ; \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \} \\ <var:D2> := <var:D1> * <var:i> ; \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:i> ; \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \} \\ <var:D4> := <var:D3> * <var:i> ; \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D4> = <var:V> ^ <nat:4> \} \\ <var:D5> := <var:D4> * <var:i> ; \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D4> = <var:V> ^ <nat:4> \land <var:D5> = <var:V> ^ <nat:5> \} \\ <var:D0> := <nat:2> ; \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D4> = <var:V> ^ <nat:4> \land <var:D5> = <var:V> ^ <nat:5> \land <var:D0> = <nat:2> \} \\ <var:D2> := <var:D2> * <nat:3> ; \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <nat:3> \times <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D4> = <var:V> ^ <nat:4> \land <var:D5> = <var:V> ^ <nat:5> \land <var:D0> = <nat:2> \} \\ <var:D5> := <var:D5> * <nat:2> ; \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <nat:3> \times <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D4> = <var:V> ^ <nat:4> \land <var:D5> = <nat:2> \times <var:V> ^ <nat:5> \land <var:D0> = <nat:2> \} \\ <var:M> := <var:D5> \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <nat:3> \times <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D4> = <var:V> ^ <nat:4> \land <var:D0> = <nat:2> \land <var:M> = <nat:2> \times <var:V> ^ <nat:5> \} \\ <var:M> := <var:M> + <var:D2> \\ \{ <var:i> = <var:V> \land <var:D1> = <var:V> \land <var:D0> = <nat:2> \land <var:M> = <nat:2> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:D0> \\ \{ <var:i> = <var:V> \land <var:M> = <nat:2> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \} \end{eqnarray} Using standard Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <var:D4> : string := " <var:D4> " . Definition <var:D5> : string := " <var:D5> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:i> = <var:V> }} <var:D1> := <var:i> ; <var:D2> := <var:D1> * <var:i> ; <var:D3> := <var:D2> * <var:i> ; <var:D4> := <var:D3> * <var:i> ; <var:D5> := <var:D4> * <var:i> ; <var:D0> := <nat:2> ; <var:D2> := <var:D2> * <nat:3> ; <var:D5> := <var:D5> * <nat:2> ; <var:M> := <var:D5> <var:M> := <var:M> + <var:D2> <var:M> := <var:M> + <var:D0> {{ <var:M> = <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D4> = <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D4> = <var:V> ^ <nat:4> /\ <var:D5> = <var:V> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D4> = <var:V> ^ <nat:4> /\ <var:D5> = <var:V> ^ <nat:5> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D4> = <var:V> ^ <nat:4> /\ <var:D5> = <var:V> ^ <nat:5> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D4> = <var:V> ^ <nat:4> /\ <var:D5> = <nat:2> * <var:V> ^ <nat:5> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D4> = <var:V> ^ <nat:4> /\ <var:D0> = <nat:2> /\ <var:M> = <nat:2> * <var:V> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:D1> = <var:V> /\ <var:D0> = <nat:2> /\ <var:M> = <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:M> = <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 