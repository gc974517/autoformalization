\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as follows \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:4> + <var:c> * <var:S> ; <var:c> := <nat:1> + <var:c> * <var:S> \end{verbatim} Given that $ <var:S> = <var:e> $ before executing this set of instructions it follows that we see $ <var:c> = <nat:2> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our program is done using usual Hoare logic . Focusing on the subsequent lines of codein the code segment , we see \verb | { <var:S> = <var:e> } <var:c> := <nat:2> { <var:S> = <var:e> \land <var:c> = <nat:2> } | and \verb | { <var:S> = <var:e> \land <var:c> = <nat:2> } <var:c> := <nat:4> + <var:c> * <var:S> { <var:S> = <var:e> \land <var:c> = <nat:2> * <var:e> + <nat:4> } | . Going to the next step , \verb | { <var:S> = <var:e> } <var:c> := <nat:2> { <var:S> = <var:e> \land <var:c> = <nat:2> } | . This is known to be sound using the binding rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:S> = <var:e> }} <var:c> := <nat:2> ; <var:c> := <nat:4> + <var:c> * <var:S> ; <var:c> := <nat:1> + <var:c> * <var:S> {{ <var:c> = <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c> = <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c> = <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 