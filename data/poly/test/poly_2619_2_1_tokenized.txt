\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:5> ; <var:n> := <var:l0> \end{verbatim} Given it to be that $ <var:N> = <var:J> $ prior to evaluating this list of commands it follows that we see $ <var:n> = <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be demonstrated through usual Hoare reasoning . Immediately after , \begin{eqnarray} \{ <var:N> = <var:J> \} \, <var:l0> := <nat:5> \, \{ <var:N> = <var:J> \land <var:l0> = <nat:5> \} \end{eqnarray} This is shown through the assignment rule given by standard Hoare techniques . Paying attention to the proceeding statement seen in our set of instructions , \begin{eqnarray} \{ <var:N> = <var:J> \} \, <var:l0> := <nat:5> \, \{ <var:N> = <var:J> \land <var:l0> = <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:N> = <var:J> }} <var:l0> := <nat:5> ; <var:n> := <var:l0> {{ <var:n> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:n> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 