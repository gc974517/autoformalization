\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:W> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:W> ; <var:a2> := <var:a2> * <var:W> ; <var:r> := <var:a2> ; <var:r> := <var:r> + <var:a1> ; <var:r> := <var:r> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> in \emph{Imp} . Given that we have $ <var:W> = <var:O> $ ( given some positive numbers $ <var:O> $ ) ahead of running the series of instructions , it must be that we have $ <var:r> = <nat:4> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:4> $ when code has exited . \end{theorem} \begin{proof} The argument for our series of instructions is demonstrated with usual Hoare logic . Focusing on the upcoming statement found in our series of commands , we see the variable assignmet code \verb | <var:a0> := <nat:4> ; | . This redefines the condition $ \{ <var:W> = <var:O> \} $ toward the postcondition $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \} $ . Advancing on , the environment update code \verb | <var:a1> := <nat:4> ; | . This command forwards $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \} $ to the postcondition $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \} $ . Stepping through , we see the binding line \verb | <var:a1> := <var:a1> * <var:W> ; | . This line forwards $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \} $ into $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \} $ . This is sound through the assignment inference rule of standard Hoare techniques . Advancing to the subsequent step contained in our series of commands , the variable update command binding $ <nat:4> $ as $ <var:a2>$ . This forwards $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \} $ to the postcondition $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \land <var:a2> = <nat:4> \} $ . Moving on to the proceeding bit of code seen in our series of instructions , we see the variable binding line \verb | <var:a2> := <var:a2> * <var:W> ; | . This transfers $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \land <var:a2> = <nat:4> \} $ toward the condition $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \land <var:a2> = <nat:4> \times <var:O> \} $ . This is ensured by the assignment scheme given in usual Hoare reasoning . Looking at the upcoming line of code in our list of instructions , we have the code \verb | <var:a2> := <var:a2> * <var:W> ; | . This moves the precondition $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \land <var:a2> = <nat:4> \times <var:O> \} $ to $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \land <var:a2> = <nat:4> \times <var:O> ^ <nat:2> \} $ . This is rigorously given using the assignment law of standard Hoare techniques . Paying attention to the following bit of code in our code , we see the environment update code \verb | <var:r> := <var:a2> ; | . This command transfers $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \land <var:a2> = <nat:4> \times <var:O> ^ <nat:2> \} $ to $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \land <var:r> = <nat:4> \times <var:O> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule found in typical Hoare reasoning . Immediately after , the variable binding command \verb | <var:r> := <var:r> + <var:a1> ; | . This line moves the precondition $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:O> \land <var:r> = <nat:4> \times <var:O> ^ <nat:2> \} $ toward the postcondition $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:r> = <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> \} $ . Observing the following statement in our list of commands , we have the assignment command yielding $ <var:r> + <var:a0$ as $ <var:r>$ . This takes the condition $ \{ <var:W> = <var:O> \land <var:a0> = <nat:4> \land <var:r> = <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> \} $ toward the postcondition $ \{ <var:W> = <var:O> \land <var:r> = <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:4> \} $ . This is known to be sound through the assignment scheme defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:W> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:W> ; <var:a2> := <var:a2> * <var:W> ; <var:r> := <var:a2> ; <var:r> := <var:r> + <var:a1> ; <var:r> := <var:r> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:W> = <var:O> }} <def:poly> {{ <var:r> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:O> /\ <var:a2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:O> /\ <var:a2> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:O> /\ <var:a2> = <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:O> /\ <var:r> = <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:a0> = <nat:4> /\ <var:r> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:r> = <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 