\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:6> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:f> ; <var:Y2> := <nat:4> ; <var:Y2> := <var:Y2> * <var:f> ; <var:Y2> := <var:Y2> * <var:f> ; <var:Y3> := <nat:7> ; <var:Y3> := <var:Y3> * <var:f> ; <var:Y3> := <var:Y3> * <var:f> ; <var:Y3> := <var:Y3> * <var:f> ; <var:z> := <var:Y3> ; <var:z> := <var:z> + <var:Y2> ; <var:z> := <var:z> + <var:Y1> ; <var:z> := <var:z> + <var:Y0> \end{verbatim} Allow that $ <var:f> = <var:H> $ ahead of the execution of this series of commands , it must be that $ <var:z> = <nat:7> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:5> \cdot <var:H> + <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:f> = <var:H> \} \\ <var:Y0> := <nat:6> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \} \\ <var:Y1> := <nat:5> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \} \\ <var:Y1> := <var:Y1> * <var:f> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \} \\ <var:Y2> := <nat:4> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:Y2> = <nat:4> \} \\ <var:Y2> := <var:Y2> * <var:f> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:Y2> = <nat:4> \cdot <var:H> \} \\ <var:Y2> := <var:Y2> * <var:f> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:Y2> = <nat:4> \cdot <var:H> ^ <nat:2> \} \\ <var:Y3> := <nat:7> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:Y2> = <nat:4> \cdot <var:H> ^ <nat:2> \land <var:Y3> = <nat:7> \} \\ <var:Y3> := <var:Y3> * <var:f> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:Y2> = <nat:4> \cdot <var:H> ^ <nat:2> \land <var:Y3> = <nat:7> \cdot <var:H> \} \\ <var:Y3> := <var:Y3> * <var:f> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:Y2> = <nat:4> \cdot <var:H> ^ <nat:2> \land <var:Y3> = <nat:7> \cdot <var:H> ^ <nat:2> \} \\ <var:Y3> := <var:Y3> * <var:f> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:Y2> = <nat:4> \cdot <var:H> ^ <nat:2> \land <var:Y3> = <nat:7> \cdot <var:H> ^ <nat:3> \} \\ <var:z> := <var:Y3> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:Y2> = <nat:4> \cdot <var:H> ^ <nat:2> \land <var:z> = <nat:7> \cdot <var:H> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:Y2> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:H> \land <var:z> = <nat:7> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:Y1> ; \\ \{ <var:f> = <var:H> \land <var:Y0> = <nat:6> \land <var:z> = <nat:7> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:5> \cdot <var:H> \} \\ <var:z> := <var:z> + <var:Y0> \\ \{ <var:f> = <var:H> \land <var:z> = <nat:7> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:5> \cdot <var:H> + <nat:6> \} \end{eqnarray} Thus , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:f> = <var:H> }} <var:Y0> := <nat:6> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:f> ; <var:Y2> := <nat:4> ; <var:Y2> := <var:Y2> * <var:f> ; <var:Y2> := <var:Y2> * <var:f> ; <var:Y3> := <nat:7> ; <var:Y3> := <var:Y3> * <var:f> ; <var:Y3> := <var:Y3> * <var:f> ; <var:Y3> := <var:Y3> * <var:f> ; <var:z> := <var:Y3> ; <var:z> := <var:z> + <var:Y2> ; <var:z> := <var:z> + <var:Y1> ; <var:z> := <var:z> + <var:Y0> {{ <var:z> = <nat:7> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:Y2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:Y2> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:Y2> = <nat:4> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:Y2> = <nat:4> * <var:H> ^ <nat:2> /\ <var:Y3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:Y2> = <nat:4> * <var:H> ^ <nat:2> /\ <var:Y3> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:Y2> = <nat:4> * <var:H> ^ <nat:2> /\ <var:Y3> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:Y2> = <nat:4> * <var:H> ^ <nat:2> /\ <var:Y3> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:Y2> = <nat:4> * <var:H> ^ <nat:2> /\ <var:z> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:H> /\ <var:z> = <nat:7> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:Y0> = <nat:6> /\ <var:z> = <nat:7> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:z> = <nat:7> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 