\begin{document} \begin{theorem} Take a series of instructions such that \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <var:u> * <var:N> ; <var:u> := <nat:1> + <var:u> * <var:N> ; <var:u> := <nat:4> + <var:u> * <var:N> ; <var:u> := <var:u> * <var:N> ; <var:u> := <nat:2> + <var:u> * <var:N> ; <var:u> := <nat:1> + <var:u> * <var:N> ; <var:u> := <var:u> * <var:N> ; <var:u> := <nat:3> + <var:u> * <var:N> ; <var:u> := <nat:3> + <var:u> * <var:N> ; <var:u> := <nat:1> + <var:u> * <var:N> ; <var:u> := <nat:3> + <var:u> * <var:N> \end{verbatim} Given $ <var:N> = <var:F> $ before evaluating our series of instructions it holds that we see $ <var:u> = <nat:4> \cdot <var:F> ^ <nat:11> + <nat:1> \cdot <var:F> ^ <nat:9> + <nat:4> \cdot <var:F> ^ <nat:8> + <nat:2> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare techniques results in : \begin{eqnarray} \{ <var:N> = <var:F> \} \\ <var:u> := <nat:4> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \} \\ <var:u> := <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> + \} \\ <var:u> := <nat:1> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:2> + <nat:1> \} \\ <var:u> := <nat:4> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> + <nat:4> \} \\ <var:u> := <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + \} \\ <var:u> := <nat:2> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:2> \} \\ <var:u> := <nat:1> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:4> + <nat:4> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> + <nat:1> \} \\ <var:u> := <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:4> + <nat:2> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + \} \\ <var:u> := <nat:3> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:8> + <nat:1> \times <var:F> ^ <nat:6> + <nat:4> \times <var:F> ^ <nat:5> + <nat:2> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:3> \} \\ <var:u> := <nat:3> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:9> + <nat:1> \times <var:F> ^ <nat:7> + <nat:4> \times <var:F> ^ <nat:6> + <nat:2> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> + <nat:3> \} \\ <var:u> := <nat:1> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:10> + <nat:1> \times <var:F> ^ <nat:8> + <nat:4> \times <var:F> ^ <nat:7> + <nat:2> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:1> \} \\ <var:u> := <nat:3> + <var:u> * <var:N> \\ \{ <var:N> = <var:F> \land <var:u> = <nat:4> \times <var:F> ^ <nat:11> + <nat:1> \times <var:F> ^ <nat:9> + <nat:4> \times <var:F> ^ <nat:8> + <nat:2> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:3> \} \end{eqnarray} Considering the above , the list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:N> = <var:F> }} <var:u> := <nat:4> ; <var:u> := <var:u> * <var:N> ; <var:u> := <nat:1> + <var:u> * <var:N> ; <var:u> := <nat:4> + <var:u> * <var:N> ; <var:u> := <var:u> * <var:N> ; <var:u> := <nat:2> + <var:u> * <var:N> ; <var:u> := <nat:1> + <var:u> * <var:N> ; <var:u> := <var:u> * <var:N> ; <var:u> := <nat:3> + <var:u> * <var:N> ; <var:u> := <nat:3> + <var:u> * <var:N> ; <var:u> := <nat:1> + <var:u> * <var:N> ; <var:u> := <nat:3> + <var:u> * <var:N> {{ <var:u> = <nat:4> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:9> + <nat:4> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:2> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:9> + <nat:4> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 