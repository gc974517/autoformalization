\begin{document} \begin{theorem} Take a code in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:7> ; <var:t1> := <nat:6> ; <var:t1> := <var:t1> * <var:i> ; <var:t2> := <nat:9> ; <var:t2> := <var:t2> * <var:i> ; <var:t2> := <var:t2> * <var:i> ; <var:A> := <var:t2> ; <var:A> := <var:A> + <var:t1> ; <var:A> := <var:A> + <var:t0> \end{verbatim} Assume it to be that $ <var:i> = <var:S> $ , for positive integers $ <var:S> $ , prior to evaluating the code segment then $ <var:A> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:7> $ after set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is given by Hoare techniques . Moving forward to the next pieces of code seen in our set of instructions , we have \verb | { <var:i> = <var:S> } <var:t0> := <nat:7> { <var:i> = <var:S> \land <var:t0> = <nat:7> } | , \verb | { <var:i> = <var:S> \land <var:t0> = <nat:7> } <var:t1> := <nat:6> { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> } | , \verb | { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> } <var:t1> := <var:t1> * <var:i> { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> \times <var:S> } | , \verb | { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> \times <var:S> } <var:t2> := <nat:9> { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> \times <var:S> \land <var:t2> = <nat:9> } | , \verb | { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> \times <var:S> \land <var:t2> = <nat:9> } <var:t2> := <var:t2> * <var:i> { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> \times <var:S> \land <var:t2> = <nat:9> \times <var:S> } | and \verb | { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> \times <var:S> \land <var:t2> = <nat:9> \times <var:S> } <var:t2> := <var:t2> * <var:i> { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> \times <var:S> \land <var:t2> = <nat:9> \times <var:S> ^ <nat:2> } | . This is given by the variable binding rule found in usual Hoare reasoning . Keeping momentum , we have \verb | { <var:i> = <var:S> } <var:t0> := <nat:7> { <var:i> = <var:S> \land <var:t0> = <nat:7> } | . Going forward , we have \verb | { <var:i> = <var:S> } <var:t0> := <nat:7> { <var:i> = <var:S> \land <var:t0> = <nat:7> } | and \verb | { <var:i> = <var:S> \land <var:t0> = <nat:7> } <var:t1> := <nat:6> { <var:i> = <var:S> \land <var:t0> = <nat:7> \land <var:t1> = <nat:6> } | . This is sound using the inference rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:i> = <var:S> }} <var:t0> := <nat:7> ; <var:t1> := <nat:6> ; <var:t1> := <var:t1> * <var:i> ; <var:t2> := <nat:9> ; <var:t2> := <var:t2> * <var:i> ; <var:t2> := <var:t2> * <var:i> ; <var:A> := <var:t2> ; <var:A> := <var:A> + <var:t1> ; <var:A> := <var:A> + <var:t0> {{ <var:A> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:6> * <var:S> /\ <var:t2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:6> * <var:S> /\ <var:t2> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:6> * <var:S> /\ <var:t2> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:6> * <var:S> /\ <var:A> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:t0> = <nat:7> /\ <var:A> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:A> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 