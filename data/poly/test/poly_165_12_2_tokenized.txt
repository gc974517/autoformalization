\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:V> := <nat:3> ; <var:V> := <nat:4> + <var:V> * <var:Z> ; <var:V> := <nat:2> + <var:V> * <var:Z> ; <var:V> := <var:V> * <var:Z> ; <var:V> := <nat:2> + <var:V> * <var:Z> ; <var:V> := <nat:1> + <var:V> * <var:Z> ; <var:V> := <var:V> * <var:Z> ; <var:V> := <nat:4> + <var:V> * <var:Z> ; <var:V> := <nat:2> + <var:V> * <var:Z> ; <var:V> := <nat:4> + <var:V> * <var:Z> ; <var:V> := <var:V> * <var:Z> ; <var:V> := <nat:4> + <var:V> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assuming that $ <var:Z> = <var:q> $ before interpreting this series of instructions then we have $ <var:V> = <nat:3> * <var:q> ^ <nat:11> + <nat:4> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Observe the following decorated set of commands . \begin{eqnarray} \{ <var:Z> = <var:q> \} \\ <var:V> := <nat:3> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> \} \\ <var:V> := <nat:4> + <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> + <nat:4> \} \\ <var:V> := <nat:2> + <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> \} \end{eqnarray} Advancing the evaluation of our segment of code gives : \begin{eqnarray} <var:V> := <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + \} \\ <var:V> := <nat:2> + <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> \} \\ <var:V> := <nat:1> + <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + <nat:1> \} \\ <var:V> := <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + \} \\ <var:V> := <nat:4> + <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> \} \\ <var:V> := <nat:2> + <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:8> + <nat:4> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + <nat:2> \} \\ <var:V> := <nat:4> + <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:9> + <nat:4> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:4> \} \\ <var:V> := <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:10> + <nat:4> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + \} \\ <var:V> := <nat:4> + <var:V> * <var:Z> \\ \{ <var:Z> = <var:q> \land <var:V> = <nat:3> * <var:q> ^ <nat:11> + <nat:4> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:3> ; <var:V> := <nat:4> + <var:V> * <var:Z> ; <var:V> := <nat:2> + <var:V> * <var:Z> ; <var:V> := <var:V> * <var:Z> ; <var:V> := <nat:2> + <var:V> * <var:Z> ; <var:V> := <nat:1> + <var:V> * <var:Z> ; <var:V> := <var:V> * <var:Z> ; <var:V> := <nat:4> + <var:V> * <var:Z> ; <var:V> := <nat:2> + <var:V> * <var:Z> ; <var:V> := <nat:4> + <var:V> * <var:Z> ; <var:V> := <var:V> * <var:Z> ; <var:V> := <nat:4> + <var:V> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Z> = <var:q> }} <def:poly> {{ <var:V> = <nat:3> * <var:q> ^ <nat:11> + <nat:4> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:8> + <nat:4> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:9> + <nat:4> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:10> + <nat:4> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:V> = <nat:3> * <var:q> ^ <nat:11> + <nat:4> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 