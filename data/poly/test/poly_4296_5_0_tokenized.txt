\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:3> ; <var:z1> := <var:z1> * <var:M> ; <var:n> := <var:z1> ; <var:n> := <var:n> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Allowing that we have $ <var:M> = <var:c> $ , given any positive numbers $ <var:c> $ , ahead of the evaluation of this code it must be that we have $ <var:n> = <nat:3> * <var:c> + <nat:4> $ after series of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:c> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:M> = <var:c> \land <var:z0> = <nat:4> \} \\ <var:z1> := <nat:3> ; \\ \{ <var:M> = <var:c> \land <var:z0> = <nat:4> \land <var:z1> = <nat:3> \} \\ <var:z1> := <var:z1> * <var:M> ; \\ \{ <var:M> = <var:c> \land <var:z0> = <nat:4> \land <var:z1> = <nat:3> \times <var:c> \} \\ <var:n> := <var:z1> ; \\ \{ <var:M> = <var:c> \land <var:z0> = <nat:4> \land <var:n> = <nat:3> \times <var:c> \} \\ <var:n> := <var:n> + <var:z0> \\ \{ <var:M> = <var:c> \land <var:n> = <nat:3> \times <var:c> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:z1> := <nat:3> ; <var:z1> := <var:z1> * <var:M> ; <var:n> := <var:z1> ; <var:n> := <var:n> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:M> = <var:c> }} <def:poly> {{ <var:n> = <nat:3> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:z0> = <nat:4> /\ <var:n> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:c> /\ <var:n> = <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 