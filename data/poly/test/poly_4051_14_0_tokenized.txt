\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:6> ; <var:c1> := <var:c1> * <var:U> ; <var:c2> := <nat:9> ; <var:c2> := <var:c2> * <var:U> ; <var:c2> := <var:c2> * <var:U> ; <var:c3> := <nat:4> ; <var:c3> := <var:c3> * <var:U> ; <var:c3> := <var:c3> * <var:U> ; <var:c3> := <var:c3> * <var:U> ; <var:B> := <var:c3> ; <var:B> := <var:B> + <var:c2> ; <var:B> := <var:B> + <var:c1> ; <var:B> := <var:B> + <var:c0> \end{verbatim} Allowing that $ <var:U> = <var:w> $ before the execution of the code segment , then $ <var:B> = <nat:4> \times <var:w> ^ <nat:3> + <nat:9> \times <var:w> ^ <nat:2> + <nat:6> \times <var:w> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions is shown using standard Hoare logic . Honing in on the subsequent line in the set of commands , the environment update line assigning $ <nat:2> $ toward $ <var:c0>$ . This redefines $ \{ <var:U> = <var:w> \} $ as the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \} $ . Moving forward to the next step , we see the assignment code letting $ <nat:6> $ into $ <var:c1>$ . This statement moves the precondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \} $ toward the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> \} $ . Taking a look at the proceeding piece of code found in our set of commands , we see the variable update code yielding $ <var:c1> * <var:U> $ as $ <var:c1>$ . This redefines the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> \} $ as the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \} $ . Shifting focus toward the next statement found in our series of commands , we have the code \verb | <var:c2> := <nat:9> ; | . This line transfers the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \} $ toward the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> \} $ . This is given using the assignment inference rule defined by standard Hoare logic . Focusing on the following command found in the set of instructions , we have the variable assignmet line letting $ <var:c2> * <var:U> $ toward $ <var:c2>$ . This transfers $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> \} $ to $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> \} $ . Advancing on , the variable binding command \verb | <var:c2> := <var:c2> * <var:U> ; | . This takes the precondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> \} $ as the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \} $ . This is sound by the assignment inference rule given in usual Hoare techniques . Taking a look at the subsequent piece of code in the list of commands , we see the variable assignmet code \verb | <var:c3> := <nat:4> ; | . This line transfers the precondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \} $ toward the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:c3> = <nat:4> \} $ . This is shown to be logically sound through the assignment scheme from Hoare reasoning . Honing in on the following line of code contained in our series of commands , we have the variable binding code yielding $ <var:c3> * <var:U> $ toward $ <var:c3>$ . This advances the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:c3> = <nat:4> \} $ as the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:c3> = <nat:4> * <var:w> \} $ . Taking another step toward the upcoming piece of code seen in our code , we see the assignment statement \verb | <var:c3> := <var:c3> * <var:U> ; | . This takes $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:c3> = <nat:4> * <var:w> \} $ into the postcondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:c3> = <nat:4> * <var:w> ^ <nat:2> \} $ . Advancing to the upcoming bit of code in the program , we have the variable update code yielding $ <var:c3> * <var:U> $ into $ <var:c3>$ . This line forwards the precondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:c3> = <nat:4> * <var:w> ^ <nat:2> \} $ to $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:c3> = <nat:4> * <var:w> ^ <nat:3> \} $ . Advancing to the next step , we have the environment update command defining $ <var:c3> $ as $ <var:B>$ . This moves $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:c3> = <nat:4> * <var:w> ^ <nat:3> \} $ as the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:B> = <nat:4> * <var:w> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment law defined by Hoare logic . Moving onward , we see the binding command letting $ <var:B> + <var:c2> $ into $ <var:B>$ . This transfers the precondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:c2> = <nat:9> * <var:w> ^ <nat:2> \land <var:B> = <nat:4> * <var:w> ^ <nat:3> \} $ into the postcondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> \} $ . This is deduced through the assignment law given by standard Hoare logic . Advancing , we see the binding command \verb | <var:B> := <var:B> + <var:c1> ; | . This line redefines the precondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> * <var:w> \land <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> \} $ . This is deduced through the assignment scheme of typical Hoare techniques . Moving onward , we see the variable assignmet code binding $ <var:B> + <var:c0$ toward $ <var:B>$ . This takes the condition $ \{ <var:U> = <var:w> \land <var:c0> = <nat:2> \land <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> \} $ to the postcondition $ \{ <var:U> = <var:w> \land <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> \} $ . This is rigorously given by the assignment inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:U> = <var:w> }} <var:c0> := <nat:2> ; <var:c1> := <nat:6> ; <var:c1> := <var:c1> * <var:U> ; <var:c2> := <nat:9> ; <var:c2> := <var:c2> * <var:U> ; <var:c2> := <var:c2> * <var:U> ; <var:c3> := <nat:4> ; <var:c3> := <var:c3> * <var:U> ; <var:c3> := <var:c3> * <var:U> ; <var:c3> := <var:c3> * <var:U> ; <var:B> := <var:c3> ; <var:B> := <var:B> + <var:c2> ; <var:B> := <var:B> + <var:c1> ; <var:B> := <var:B> + <var:c0> {{ <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:c2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:c2> = <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:c2> = <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:c2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:c3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:c2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:c3> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:c2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:c3> = <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:c2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:c3> = <nat:4> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:c2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:B> = <nat:4> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:w> /\ <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:c0> = <nat:2> /\ <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:B> = <nat:4> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 