\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:4> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:o> ; <var:n2> := <var:n2> * <var:o> ; <var:n3> := <nat:5> ; <var:n3> := <var:n3> * <var:o> ; <var:n3> := <var:n3> * <var:o> ; <var:n3> := <var:n3> * <var:o> ; <var:E> := <var:n3> ; <var:E> := <var:E> + <var:n2> ; <var:E> := <var:E> + <var:n0> \end{verbatim} Allow that $ <var:o> = <var:F> $ --- for all positive integers $ <var:F> $ --- before the evaluation of the segment of code , it holds that we have $ <var:E> = <nat:5> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:F> \} \\ <var:n0> := <nat:4> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \} \\ <var:n2> := <nat:1> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:n2> = <nat:1> \} \\ <var:n2> := <var:n2> * <var:o> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:n2> = <nat:1> \cdot <var:F> \} \\ <var:n2> := <var:n2> * <var:o> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:n2> = <nat:1> \cdot <var:F> ^ <nat:2> \} \\ <var:n3> := <nat:5> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:n2> = <nat:1> \cdot <var:F> ^ <nat:2> \land <var:n3> = <nat:5> \} \\ <var:n3> := <var:n3> * <var:o> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:n2> = <nat:1> \cdot <var:F> ^ <nat:2> \land <var:n3> = <nat:5> \cdot <var:F> \} \\ <var:n3> := <var:n3> * <var:o> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:n2> = <nat:1> \cdot <var:F> ^ <nat:2> \land <var:n3> = <nat:5> \cdot <var:F> ^ <nat:2> \} \\ <var:n3> := <var:n3> * <var:o> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:n2> = <nat:1> \cdot <var:F> ^ <nat:2> \land <var:n3> = <nat:5> \cdot <var:F> ^ <nat:3> \} \\ <var:E> := <var:n3> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:n2> = <nat:1> \cdot <var:F> ^ <nat:2> \land <var:E> = <nat:5> \cdot <var:F> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:n2> ; \\ \{ <var:o> = <var:F> \land <var:n0> = <nat:4> \land <var:E> = <nat:5> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:n0> \\ \{ <var:o> = <var:F> \land <var:E> = <nat:5> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:4> \} \end{eqnarray} The application of Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:o> = <var:F> }} <var:n0> := <nat:4> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:o> ; <var:n2> := <var:n2> * <var:o> ; <var:n3> := <nat:5> ; <var:n3> := <var:n3> * <var:o> ; <var:n3> := <var:n3> * <var:o> ; <var:n3> := <var:n3> * <var:o> ; <var:E> := <var:n3> ; <var:E> := <var:E> + <var:n2> ; <var:E> := <var:E> + <var:n0> {{ <var:E> = <nat:5> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:n2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:n2> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:n2> = <nat:1> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:n2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:n3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:n2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:n3> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:n2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:n3> = <nat:5> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:n2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:n3> = <nat:5> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:n2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:E> = <nat:5> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:n0> = <nat:4> /\ <var:E> = <nat:5> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:E> = <nat:5> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 