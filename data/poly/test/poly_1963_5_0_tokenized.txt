\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:1> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:B> ; <var:x> := <var:K1> ; <var:x> := <var:x> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Given --- given positive numbers $ <var:l> $ --- it to hold that $ <var:B> = <var:l> $ before interpreting our set of instructions then we have $ <var:x> = <nat:9> \times <var:l> + <nat:1> $ once series of commands executes . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:B> = <var:l> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:B> = <var:l> \land <var:K0> = <nat:1> \} \\ <var:K1> := <nat:9> ; \\ \{ <var:B> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:9> \} \\ <var:K1> := <var:K1> * <var:B> ; \\ \{ <var:B> = <var:l> \land <var:K0> = <nat:1> \land <var:K1> = <nat:9> * <var:l> \} \end{eqnarray} Advancing the execution of this set of instructions gives us : \begin{eqnarray} <var:x> := <var:K1> ; \\ \{ <var:B> = <var:l> \land <var:K0> = <nat:1> \land <var:x> = <nat:9> * <var:l> \} \\ <var:x> := <var:x> + <var:K0> \\ \{ <var:B> = <var:l> \land <var:x> = <nat:9> * <var:l> + <nat:1> \} \end{eqnarray} Thus , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:1> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:B> ; <var:x> := <var:K1> ; <var:x> := <var:x> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:B> = <var:l> }} <def:poly> {{ <var:x> = <nat:9> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:K0> = <nat:1> /\ <var:x> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:x> = <nat:9> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 