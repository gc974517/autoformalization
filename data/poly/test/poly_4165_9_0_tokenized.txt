\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:4> ; <var:H1> := <nat:3> ; <var:H1> := <var:H1> * <var:q> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:q> ; <var:H2> := <var:H2> * <var:q> ; <var:y> := <var:H2> ; <var:y> := <var:y> + <var:H1> ; <var:y> := <var:y> + <var:H0> \end{verbatim} Assuming --- given $ <var:l> \in \mathbb{N} $ --- $ <var:q> = <var:l> $ before the evaluation of this code segment , it follows that we have $ <var:y> = <nat:7> \cdot <var:l> ^ <nat:2> + <nat:3> \cdot <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Applying Hoare logic gives us : \begin{eqnarray} \{ <var:q> = <var:l> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:q> = <var:l> \land <var:H0> = <nat:4> \} \\ <var:H1> := <nat:3> ; \\ \{ <var:q> = <var:l> \land <var:H0> = <nat:4> \land <var:H1> = <nat:3> \} \\ <var:H1> := <var:H1> * <var:q> ; \\ \{ <var:q> = <var:l> \land <var:H0> = <nat:4> \land <var:H1> = <nat:3> \times <var:l> \} \\ <var:H2> := <nat:7> ; \\ \{ <var:q> = <var:l> \land <var:H0> = <nat:4> \land <var:H1> = <nat:3> \times <var:l> \land <var:H2> = <nat:7> \} \\ <var:H2> := <var:H2> * <var:q> ; \\ \{ <var:q> = <var:l> \land <var:H0> = <nat:4> \land <var:H1> = <nat:3> \times <var:l> \land <var:H2> = <nat:7> \times <var:l> \} \\ <var:H2> := <var:H2> * <var:q> ; \\ \{ <var:q> = <var:l> \land <var:H0> = <nat:4> \land <var:H1> = <nat:3> \times <var:l> \land <var:H2> = <nat:7> \times <var:l> ^ <nat:2> \} \\ <var:y> := <var:H2> ; \\ \{ <var:q> = <var:l> \land <var:H0> = <nat:4> \land <var:H1> = <nat:3> \times <var:l> \land <var:y> = <nat:7> \times <var:l> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:H1> ; \\ \{ <var:q> = <var:l> \land <var:H0> = <nat:4> \land <var:y> = <nat:7> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> \} \\ <var:y> := <var:y> + <var:H0> \\ \{ <var:q> = <var:l> \land <var:y> = <nat:7> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:4> \} \end{eqnarray} Given the above , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:q> = <var:l> }} <var:H0> := <nat:4> ; <var:H1> := <nat:3> ; <var:H1> := <var:H1> * <var:q> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:q> ; <var:H2> := <var:H2> * <var:q> ; <var:y> := <var:H2> ; <var:y> := <var:y> + <var:H1> ; <var:y> := <var:y> + <var:H0> {{ <var:y> = <nat:7> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:3> * <var:l> /\ <var:H2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:3> * <var:l> /\ <var:H2> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:3> * <var:l> /\ <var:H2> = <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:3> * <var:l> /\ <var:y> = <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:H0> = <nat:4> /\ <var:y> = <nat:7> * <var:l> ^ <nat:2> + <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:y> = <nat:7> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 