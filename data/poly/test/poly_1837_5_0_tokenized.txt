\begin{document} \begin{theorem} Define the following segment of code as \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:o> ; <var:y> := <var:S1> ; <var:y> := <var:y> + <var:S0> \end{verbatim} Allowing that we have $ <var:o> = <var:s> $ taking positive coefficients $ <var:s> $ ahead of the evaluation of this code segment it holds that we see $ <var:y> = <nat:3> \cdot <var:s> + <nat:4> $ after code segment is done . \end{theorem} \begin{proof} The proof of the series of instructions is accomplished with standard Hoare logic . Observing the upcoming line found in our program , we see the line \verb | <var:S0> := <nat:4> ; | . This line advances the condition $ \{ <var:o> = <var:s> \} $ into the postcondition $ \{ <var:o> = <var:s> \land <var:S0> = <nat:4> \} $ . This is given by the assignment rule given by usual Hoare logic . Advancing to the next step , we have the variable update code defining $ <nat:3> $ as $ <var:S1>$ . This code takes the condition $ \{ <var:o> = <var:s> \land <var:S0> = <nat:4> \} $ to the condition $ \{ <var:o> = <var:s> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \} $ . This is deduced using the assignment scheme defined in usual Hoare techniques . Advancing on , we have the environment update line yielding $ <var:S1> * <var:o> $ as $ <var:S1>$ . This line forwards $ \{ <var:o> = <var:s> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \} $ as the postcondition $ \{ <var:o> = <var:s> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:s> \} $ . This is deduced by the assignment scheme given in standard Hoare logic . Moving forward to the next step , we have the assignment line yielding $ <var:S1> $ as $ <var:y>$ . This code redefines $ \{ <var:o> = <var:s> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \times <var:s> \} $ as the condition $ \{ <var:o> = <var:s> \land <var:S0> = <nat:4> \land <var:y> = <nat:3> \times <var:s> \} $ . This is sound using the assignment rule given in typical Hoare reasoning . Considering the proceeding bit of code contained in the set of instructions , we see the line defining $ <var:y> + <var:S0$ toward $ <var:y>$ . This forwards the precondition $ \{ <var:o> = <var:s> \land <var:S0> = <nat:4> \land <var:y> = <nat:3> \times <var:s> \} $ as the condition $ \{ <var:o> = <var:s> \land <var:y> = <nat:3> \times <var:s> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:o> = <var:s> }} <var:S0> := <nat:4> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:o> ; <var:y> := <var:S1> ; <var:y> := <var:y> + <var:S0> {{ <var:y> = <nat:3> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:S0> = <nat:4> /\ <var:y> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:y> = <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 