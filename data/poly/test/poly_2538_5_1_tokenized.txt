\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:u1> := <var:i> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:2> ; <var:O> := <var:u1> <var:O> := <var:O> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:i> = <var:W> $ ahead of the execution of our code segment , it must be that $ <var:O> = <nat:2> \cdot <var:W> + <nat:3> $ after set of instructions has executed . \end{theorem} \begin{proof} Arguing the correctness of this program is clear with the below decorated series of instructions . \begin{eqnarray} \{ <var:i> = <var:W> \} \\ <var:u1> := <var:i> ; \\ \{ <var:i> = <var:W> \land <var:u1> = <var:W> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:i> = <var:W> \land <var:u1> = <var:W> \land <var:u0> = <nat:3> \} \\ <var:u1> := <var:u1> * <nat:2> ; \\ \{ <var:i> = <var:W> \land <var:u1> = <nat:2> * <var:W> \land <var:u0> = <nat:3> \} \\ <var:O> := <var:u1> \\ \{ <var:i> = <var:W> \land <var:u0> = <nat:3> \land <var:O> = <nat:2> * <var:W> \} \end{eqnarray} Advancing interpreting our list of commands gives us : \begin{eqnarray} <var:O> := <var:O> + <var:u0> \\ \{ <var:i> = <var:W> \land <var:O> = <nat:2> * <var:W> + <nat:3> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:i> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:2> ; <var:O> := <var:u1> <var:O> := <var:O> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:i> = <var:W> }} <def:poly> {{ <var:O> = <nat:2> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:u1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:u1> = <var:W> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:u1> = <nat:2> * <var:W> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:u0> = <nat:3> /\ <var:O> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:O> = <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 