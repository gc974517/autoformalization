\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:H> ; <var:P2> := <var:P1> * <var:H> ; <var:P0> := <nat:6> ; <var:P1> := <var:P1> * <nat:5> ; <var:P2> := <var:P2> * <nat:9> ; <var:q> := <var:P2> <var:q> := <var:q> + <var:P1> <var:q> := <var:q> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assuming assuming some natural coefficients $ <var:l> $ it to be that $ <var:H> = <var:l> $ ahead of interpreting our program then $ <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning yields : \begin{eqnarray} \{ <var:H> = <var:l> \} \\ <var:P1> := <var:H> ; \\ \{ <var:H> = <var:l> \land <var:P1> = <var:l> \} \\ <var:P2> := <var:P1> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> \} \\ <var:P0> := <nat:6> ; \\ \{ <var:H> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> \land <var:P0> = <nat:6> \} \\ <var:P1> := <var:P1> * <nat:5> ; \\ \{ <var:H> = <var:l> \land <var:P1> = <nat:5> \times <var:l> \land <var:P2> = <var:l> ^ <nat:2> \land <var:P0> = <nat:6> \} \\ <var:P2> := <var:P2> * <nat:9> ; \\ \{ <var:H> = <var:l> \land <var:P1> = <nat:5> \times <var:l> \land <var:P2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:P0> = <nat:6> \} \\ <var:q> := <var:P2> \\ \{ <var:H> = <var:l> \land <var:P1> = <nat:5> \times <var:l> \land <var:P0> = <nat:6> \land <var:q> = <nat:9> \times <var:l> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:P1> \\ \{ <var:H> = <var:l> \land <var:P0> = <nat:6> \land <var:q> = <nat:9> \times <var:l> ^ <nat:2> + <nat:5> \times <var:l> \} \\ <var:q> := <var:q> + <var:P0> \\ \{ <var:H> = <var:l> \land <var:q> = <nat:9> \times <var:l> ^ <nat:2> + <nat:5> \times <var:l> + <nat:6> \} \end{eqnarray} Hence , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P1> := <var:H> ; <var:P2> := <var:P1> * <var:H> ; <var:P0> := <nat:6> ; <var:P1> := <var:P1> * <nat:5> ; <var:P2> := <var:P2> * <nat:9> ; <var:q> := <var:P2> <var:q> := <var:q> + <var:P1> <var:q> := <var:q> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:H> = <var:l> }} <def:poly> {{ <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:P1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:P1> = <var:l> /\ <var:P2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:P1> = <var:l> /\ <var:P2> = <var:l> ^ <nat:2> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:P1> = <nat:5> * <var:l> /\ <var:P2> = <var:l> ^ <nat:2> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:P1> = <nat:5> * <var:l> /\ <var:P2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:P1> = <nat:5> * <var:l> /\ <var:P0> = <nat:6> /\ <var:q> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:P0> = <nat:6> /\ <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:q> = <nat:9> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 