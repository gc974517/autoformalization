\begin{document} \begin{theorem} Consider a code in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <var:H> * <var:h> ; <var:H> := <var:H> * <var:h> ; <var:H> := <nat:4> + <var:H> * <var:h> \end{verbatim} Allowing ( given some $ <var:X> \in \mathbb{N} $ ) it to hold that $ <var:h> = <var:X> $ ahead of evaluating our list of commands , it follows that $ <var:H> = <nat:3> \times <var:X> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is evident through usual Hoare techniques . Advancing to the next step , we have the variable assignmet statement binding $ <nat:3> $ as $ <var:H>$ . This redefines the condition $ \{ <var:h> = <var:X> \} $ as $ \{ <var:h> = <var:X> \land <var:H> = <nat:3> \} $ . This is guaranteed with the assignment scheme of standard Hoare techniques . Jumping to the proceeding statement found in our list of commands , the assignment statement yielding $ <var:H> * <var:h> $ toward $ <var:H>$ . This transfers the condition $ \{ <var:h> = <var:X> \land <var:H> = <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:X> \land <var:H> = <nat:3> * <var:X> + \} $ . This is sound by the assignment scheme defined in Hoare logic . Keeping momentum , we see the statement \verb | <var:H> := <var:H> * <var:h> ; | . This advances $ \{ <var:h> = <var:X> \land <var:H> = <nat:3> * <var:X> + \} $ toward the condition $ \{ <var:h> = <var:X> \land <var:H> = <nat:3> * <var:X> ^ <nat:2> + \} $ . This is guaranteed through the assignment inference rule given by Hoare logic . Further , we see the variable update code \verb | <var:H> := <nat:4> + <var:H> * <var:h> | . This moves $ \{ <var:h> = <var:X> \land <var:H> = <nat:3> * <var:X> ^ <nat:2> + \} $ into the postcondition $ \{ <var:h> = <var:X> \land <var:H> = <nat:3> * <var:X> ^ <nat:3> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:h> = <var:X> }} <var:H> := <nat:3> ; <var:H> := <var:H> * <var:h> ; <var:H> := <var:H> * <var:h> ; <var:H> := <nat:4> + <var:H> * <var:h> {{ <var:H> = <nat:3> * <var:X> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:H> = <nat:3> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:H> = <nat:3> * <var:X> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:H> = <nat:3> * <var:X> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 