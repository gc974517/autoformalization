\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:z> ; <var:Y2> := <var:Y1> * <var:z> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:F> := <var:Y2> <var:F> := <var:F> + <var:Y1> <var:F> := <var:F> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:z> = <var:v> $ --- for every positive integer coefficients $ <var:v> $ --- before evaluating the set of commands , then $ <var:F> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands can be given using typical Hoare reasoning . Going to the next step , the assignment command letting $ <var:z> $ to $ <var:Y1>$ . This command moves the condition $ \{ <var:z> = <var:v> \} $ to $ \{ <var:z> = <var:v> \land <var:Y1> = <var:v> \} $ . This is shown to be logically sound through the assignment law from Hoare techniques . Jumping to the following line of code found in the code , we have the variable update command \verb | <var:Y2> := <var:Y1> * <var:z> ; | . This advances $ \{ <var:z> = <var:v> \land <var:Y1> = <var:v> \} $ to $ \{ <var:z> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law in Hoare logic . Honing in on the proceeding step in the code , the environment update line \verb | <var:Y0> := <nat:2> ; | . This command redefines the condition $ \{ <var:z> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \} $ to the postcondition $ \{ <var:z> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y0> = <nat:2> \} $ . This is deduced with the assignment inference rule given in Hoare techniques . Advancing to the next command contained in the code segment , the binding line \verb | <var:Y1> := <var:Y1> * <nat:3> ; | . This code takes the condition $ \{ <var:z> = <var:v> \land <var:Y1> = <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y0> = <nat:2> \} $ as $ \{ <var:z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y0> = <nat:2> \} $ . This is shown with the assignment scheme defined by standard Hoare reasoning . Immediately following , we have the binding command \verb | <var:Y2> := <var:Y2> * <nat:1> ; | . This forwards $ \{ <var:z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y2> = <var:v> ^ <nat:2> \land <var:Y0> = <nat:2> \} $ as $ \{ <var:z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y2> = <nat:1> \cdot <var:v> ^ <nat:2> \land <var:Y0> = <nat:2> \} $ . Moving on , we have the environment update statement binding $ <var:Y2$ toward $ <var:F>$ . This forwards $ \{ <var:z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y2> = <nat:1> \cdot <var:v> ^ <nat:2> \land <var:Y0> = <nat:2> \} $ into $ \{ <var:z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y0> = <nat:2> \land <var:F> = <nat:1> \cdot <var:v> ^ <nat:2> \} $ . After , we have the environment update statement \verb | <var:F> := <var:F> + <var:Y1> | . This line forwards $ \{ <var:z> = <var:v> \land <var:Y1> = <nat:3> \cdot <var:v> \land <var:Y0> = <nat:2> \land <var:F> = <nat:1> \cdot <var:v> ^ <nat:2> \} $ as $ \{ <var:z> = <var:v> \land <var:Y0> = <nat:2> \land <var:F> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> \} $ . This is known to be sound using the assignment rule given by standard Hoare logic . Advancing , the variable assignmet command \verb | <var:F> := <var:F> + <var:Y0> | . This moves the condition $ \{ <var:z> = <var:v> \land <var:Y0> = <nat:2> \land <var:F> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> \} $ as $ \{ <var:z> = <var:v> \land <var:F> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y1> := <var:z> ; <var:Y2> := <var:Y1> * <var:z> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:F> := <var:Y2> <var:F> := <var:F> + <var:Y1> <var:F> := <var:F> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:z> = <var:v> }} <def:poly> {{ <var:F> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:Y1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:Y1> = <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:Y1> = <nat:3> * <var:v> /\ <var:Y2> = <var:v> ^ <nat:2> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:Y1> = <nat:3> * <var:v> /\ <var:Y2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:Y1> = <nat:3> * <var:v> /\ <var:Y0> = <nat:2> /\ <var:F> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:Y0> = <nat:2> /\ <var:F> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:F> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 