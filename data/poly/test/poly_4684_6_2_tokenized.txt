\begin{document} \begin{theorem} Consider a program such that \begin{verbatim} <var:l> := <nat:1> ; <var:l> := <nat:1> + <var:l> * <var:B> ; <var:l> := <nat:1> + <var:l> * <var:B> ; <var:l> := <var:l> * <var:B> ; <var:l> := <nat:3> + <var:l> * <var:B> ; <var:l> := <nat:2> + <var:l> * <var:B> \end{verbatim} Allow that we have $ <var:B> = <var:L> $ ahead of the evaluation of this segment of code it follows that $ <var:l> = <nat:1> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> + <nat:2> $ once code has executed . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:B> = <var:L> \} \\ <var:l> := <nat:1> ; \\ \{ <var:B> = <var:L> \land <var:l> = <nat:1> \} \\ <var:l> := <nat:1> + <var:l> * <var:B> ; \\ \{ <var:B> = <var:L> \land <var:l> = <nat:1> * <var:L> + <nat:1> \} \\ <var:l> := <nat:1> + <var:l> * <var:B> ; \\ \{ <var:B> = <var:L> \land <var:l> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:1> \} \\ <var:l> := <var:l> * <var:B> ; \\ \{ <var:B> = <var:L> \land <var:l> = <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + \} \\ <var:l> := <nat:3> + <var:l> * <var:B> ; \\ \{ <var:B> = <var:L> \land <var:l> = <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> \} \\ <var:l> := <nat:2> + <var:l> * <var:B> \\ \{ <var:B> = <var:L> \land <var:l> = <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:2> \} \end{eqnarray} Given the above , our series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:B> = <var:L> }} <var:l> := <nat:1> ; <var:l> := <nat:1> + <var:l> * <var:B> ; <var:l> := <nat:1> + <var:l> * <var:B> ; <var:l> := <var:l> * <var:B> ; <var:l> := <nat:3> + <var:l> * <var:B> ; <var:l> := <nat:2> + <var:l> * <var:B> {{ <var:l> = <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:l> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:l> = <nat:1> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:l> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:l> = <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:l> = <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:l> = <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 