\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:6> ; <var:L> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:n> = <var:N> $ , given any $ <var:N> \in \mathbb{N} $ , before executing this set of instructions , it must be that $ <var:L> = <nat:6> $ once code segment executes . \end{theorem} \begin{proof} Observe this decorated series of commands . \begin{eqnarray} \{ <var:n> = <var:N> \} \\ <var:m0> := <nat:6> ; \\ \{ <var:n> = <var:N> \land <var:m0> = <nat:6> \} \\ <var:L> := <var:m0> \\ \{ <var:n> = <var:N> \land <var:L> = <nat:6> \} \end{eqnarray} Using standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:6> ; <var:L> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:n> = <var:N> }} <def:poly> {{ <var:L> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:N> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:N> /\ <var:L> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 