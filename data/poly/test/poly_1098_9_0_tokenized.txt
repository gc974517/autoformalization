\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:6> ; <var:x1> := <nat:6> ; <var:x1> := <var:x1> * <var:R> ; <var:x2> := <nat:8> ; <var:x2> := <var:x2> * <var:R> ; <var:x2> := <var:x2> * <var:R> ; <var:W> := <var:x2> ; <var:W> := <var:W> + <var:x1> ; <var:W> := <var:W> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:R> = <var:w> $ before executing the code segment , it must be that we have $ <var:W> = <nat:8> \times <var:w> ^ <nat:2> + <nat:6> \times <var:w> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for our code segment is accomplished by typical Hoare logic . Immediately following , we see the variable binding statement defining $ <nat:6> $ to $ <var:x0>$ . This statement moves the precondition $ \{ <var:R> = <var:w> \} $ toward the postcondition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \} $ . Moving forward , we have the binding statement \verb | <var:x1> := <nat:6> ; | . This moves the condition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \} $ toward the postcondition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> \} $ . Jumping to the following piece of code found in the set of instructions , we see the variable assignmet code \verb | <var:x1> := <var:x1> * <var:R> ; | . This command transfers $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> \} $ as $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \} $ . Taking another step toward the subsequent step seen in our code segment , we see the environment update command assigning $ <nat:8> $ toward $ <var:x2>$ . This statement advances the precondition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \} $ to the condition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \land <var:x2> = <nat:8> \} $ . Advancing to the subsequent statement found in our set of instructions , we see the binding statement \verb | <var:x2> := <var:x2> * <var:R> ; | . This command moves the condition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \land <var:x2> = <nat:8> \} $ toward the condition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \land <var:x2> = <nat:8> * <var:w> \} $ . This is ensured using the assignment scheme found in standard Hoare reasoning . Paying attention to the following line seen in our list of commands , we see the variable assignmet statement letting $ <var:x2> * <var:R> $ toward $ <var:x2>$ . This forwards the precondition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \land <var:x2> = <nat:8> * <var:w> \} $ as the postcondition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \land <var:x2> = <nat:8> * <var:w> ^ <nat:2> \} $ . Considering the upcoming step seen in our series of commands , we have the command assigning $ <var:x2> $ toward $ <var:W>$ . This code advances the condition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \land <var:x2> = <nat:8> * <var:w> ^ <nat:2> \} $ as the condition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \land <var:W> = <nat:8> * <var:w> ^ <nat:2> \} $ . This is ensured with the assignment scheme in standard Hoare reasoning . Stepping through , we have the assignment line letting $ <var:W> + <var:x1> $ toward $ <var:W>$ . This transfers the condition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:x1> = <nat:6> * <var:w> \land <var:W> = <nat:8> * <var:w> ^ <nat:2> \} $ toward the condition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:W> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> \} $ . Moving forward to the next line seen in the code segment , we have the variable binding command \verb | <var:W> := <var:W> + <var:x0> | . This takes the precondition $ \{ <var:R> = <var:w> \land <var:x0> = <nat:6> \land <var:W> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> \} $ toward the condition $ \{ <var:R> = <var:w> \land <var:W> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:6> \} $ . This is deduced through the assignment scheme of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:6> ; <var:x1> := <nat:6> ; <var:x1> := <var:x1> * <var:R> ; <var:x2> := <nat:8> ; <var:x2> := <var:x2> * <var:R> ; <var:x2> := <var:x2> * <var:R> ; <var:W> := <var:x2> ; <var:W> := <var:W> + <var:x1> ; <var:W> := <var:W> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <def:poly> {{ <var:W> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:6> * <var:w> /\ <var:x2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:6> * <var:w> /\ <var:x2> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:6> * <var:w> /\ <var:x2> = <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:6> * <var:w> /\ <var:W> = <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:x0> = <nat:6> /\ <var:W> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:W> = <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 