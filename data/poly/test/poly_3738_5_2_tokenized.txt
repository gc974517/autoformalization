\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <var:H> * <var:n> ; <var:H> := <nat:2> + <var:H> * <var:n> ; <var:H> := <nat:1> + <var:H> * <var:n> ; <var:H> := <nat:1> + <var:H> * <var:n> \end{verbatim} Assume that $ <var:n> = <var:q> $ ahead of evaluating our list of instructions , it must be that $ <var:H> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the code is done by usual Hoare techniques . Moving forward , we see \begin{verbatim} { <var:n> = <var:q> } <var:H> := <nat:1> { <var:n> = <var:q> \land <var:H> = <nat:1> } { <var:n> = <var:q> \land <var:H> = <nat:1> } <var:H> := <var:H> * <var:n> { <var:n> = <var:q> \land <var:H> = <nat:1> \times <var:q> + } { <var:n> = <var:q> \land <var:H> = <nat:1> \times <var:q> + } <var:H> := <nat:2> + <var:H> * <var:n> { <var:n> = <var:q> \land <var:H> = <nat:1> \times <var:q> ^ <nat:2> + <nat:2> } \end{verbatim} This is ensured by the variable binding inference rule of standard Hoare logic . Moving onward , we see \begin{verbatim} { <var:n> = <var:q> } <var:H> := <nat:1> { <var:n> = <var:q> \land <var:H> = <nat:1> } \end{verbatim} This is deduced using the variable assignmet rule given by usual Hoare logic . Honing in on the next step contained in the list of commands , we have \begin{verbatim} { <var:n> = <var:q> } <var:H> := <nat:1> { <var:n> = <var:q> \land <var:H> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:n> = <var:q> }} <var:H> := <nat:1> ; <var:H> := <var:H> * <var:n> ; <var:H> := <nat:2> + <var:H> * <var:n> ; <var:H> := <nat:1> + <var:H> * <var:n> ; <var:H> := <nat:1> + <var:H> * <var:n> {{ <var:H> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:H> = <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:H> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:H> = <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:H> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 