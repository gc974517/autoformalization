\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:V> ; <var:F2> := <nat:4> ; <var:F2> := <var:F2> * <var:V> ; <var:F2> := <var:F2> * <var:V> ; <var:i> := <var:F2> ; <var:i> := <var:i> + <var:F1> ; <var:i> := <var:i> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:V> = <var:B> $ ( assuming some $ <var:B> \in \mathbb{N} $ ) before the execution of this series of instructions it must be that we have $ <var:i> = <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> $ . \end{theorem} \begin{proof} Notice this decorated list of instructions . \begin{eqnarray} \{ <var:V> = <var:B> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:V> = <var:B> \land <var:F0> = <nat:1> \} \\ <var:F1> := <nat:1> ; \\ \{ <var:V> = <var:B> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \} \\ <var:F1> := <var:F1> * <var:V> ; \\ \{ <var:V> = <var:B> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \cdot <var:B> \} \\ <var:F2> := <nat:4> ; \\ \{ <var:V> = <var:B> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \cdot <var:B> \land <var:F2> = <nat:4> \} \\ <var:F2> := <var:F2> * <var:V> ; \\ \{ <var:V> = <var:B> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \cdot <var:B> \land <var:F2> = <nat:4> \cdot <var:B> \} \\ <var:F2> := <var:F2> * <var:V> ; \\ \{ <var:V> = <var:B> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \cdot <var:B> \land <var:F2> = <nat:4> \cdot <var:B> ^ <nat:2> \} \\ <var:i> := <var:F2> ; \\ \{ <var:V> = <var:B> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \cdot <var:B> \land <var:i> = <nat:4> \cdot <var:B> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:F1> ; \\ \{ <var:V> = <var:B> \land <var:F0> = <nat:1> \land <var:i> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> \} \\ <var:i> := <var:i> + <var:F0> \\ \{ <var:V> = <var:B> \land <var:i> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:1> \} \end{eqnarray} The application of Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:1> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:V> ; <var:F2> := <nat:4> ; <var:F2> := <var:F2> * <var:V> ; <var:F2> := <var:F2> * <var:V> ; <var:i> := <var:F2> ; <var:i> := <var:i> + <var:F1> ; <var:i> := <var:i> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:V> = <var:B> }} <def:poly> {{ <var:i> = <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:B> /\ <var:F2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:B> /\ <var:F2> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:B> /\ <var:F2> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:B> /\ <var:i> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:F0> = <nat:1> /\ <var:i> = <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:i> = <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 