\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as \begin{verbatim} <var:S1> := <var:w> ; <var:S2> := <var:S1> * <var:w> ; <var:S3> := <var:S2> * <var:w> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:3> ; <var:S3> := <var:S3> * <nat:4> ; <var:c> := <var:S3> <var:c> := <var:c> + <var:S2> <var:c> := <var:c> + <var:S1> <var:c> := <var:c> + <var:S0> \end{verbatim} Given that $ <var:w> = <var:W> $ prior to the execution of this series of instructions , it follows that we have $ <var:c> = <nat:4> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:2> $ when set of instructions has exited . \end{theorem} \begin{proof} Proving correctness for this code segment is done through typical Hoare logic . Advancing on , \[ \begin{tabular} {rcl} \{ <var:w> = <var:W> \} & <var:S1> := <var:w> & \{ <var:w> = <var:W> \land <var:S1> = <var:W> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <var:W> \} & <var:S2> := <var:S1> * <var:w> & \{ <var:w> = <var:W> \land <var:S1> = <var:W> \land <var:S2> = <var:W> ^ <nat:2> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <var:W> \land <var:S2> = <var:W> ^ <nat:2> \} & <var:S3> := <var:S2> * <var:w> & \{ <var:w> = <var:W> \land <var:S1> = <var:W> \land <var:S2> = <var:W> ^ <nat:2> \land <var:S3> = <var:W> ^ <nat:3> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <var:W> \land <var:S2> = <var:W> ^ <nat:2> \land <var:S3> = <var:W> ^ <nat:3> \} & <var:S0> := <nat:2> & \{ <var:w> = <var:W> \land <var:S1> = <var:W> \land <var:S2> = <var:W> ^ <nat:2> \land <var:S3> = <var:W> ^ <nat:3> \land <var:S0> = <nat:2> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <var:W> \land <var:S2> = <var:W> ^ <nat:2> \land <var:S3> = <var:W> ^ <nat:3> \land <var:S0> = <nat:2> \} & <var:S1> := <var:S1> * <nat:2> & \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S2> = <var:W> ^ <nat:2> \land <var:S3> = <var:W> ^ <nat:3> \land <var:S0> = <nat:2> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S2> = <var:W> ^ <nat:2> \land <var:S3> = <var:W> ^ <nat:3> \land <var:S0> = <nat:2> \} & <var:S2> := <var:S2> * <nat:3> & \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S2> = <nat:3> * <var:W> ^ <nat:2> \land <var:S3> = <var:W> ^ <nat:3> \land <var:S0> = <nat:2> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S2> = <nat:3> * <var:W> ^ <nat:2> \land <var:S3> = <var:W> ^ <nat:3> \land <var:S0> = <nat:2> \} & <var:S3> := <var:S3> * <nat:4> & \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S2> = <nat:3> * <var:W> ^ <nat:2> \land <var:S3> = <nat:4> * <var:W> ^ <nat:3> \land <var:S0> = <nat:2> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S2> = <nat:3> * <var:W> ^ <nat:2> \land <var:S3> = <nat:4> * <var:W> ^ <nat:3> \land <var:S0> = <nat:2> \} & <var:c> := <var:S3& \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S2> = <nat:3> * <var:W> ^ <nat:2> \land <var:S0> = <nat:2> \land <var:c> = <nat:4> * <var:W> ^ <nat:3> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S2> = <nat:3> * <var:W> ^ <nat:2> \land <var:S0> = <nat:2> \land <var:c> = <nat:4> * <var:W> ^ <nat:3> \} & <var:c> := <var:c> + <var:S2& \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S0> = <nat:2> \land <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> \} \\ \{ <var:w> = <var:W> \land <var:S1> = <nat:2> * <var:W> \land <var:S0> = <nat:2> \land <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> \} & <var:c> := <var:c> + <var:S1& \{ <var:w> = <var:W> \land <var:S0> = <nat:2> \land <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> \} \\ \{ <var:w> = <var:W> \land <var:S0> = <nat:2> \land <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> \} & <var:c> := <var:c> + <var:S0& \{ <var:w> = <var:W> \land <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> \} \end{tabular} This is deduced using the assignment scheme defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:w> = <var:W> }} <var:S1> := <var:w> ; <var:S2> := <var:S1> * <var:w> ; <var:S3> := <var:S2> * <var:w> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:3> ; <var:S3> := <var:S3> * <nat:4> ; <var:c> := <var:S3> <var:c> := <var:c> + <var:S2> <var:c> := <var:c> + <var:S1> <var:c> := <var:c> + <var:S0> {{ <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <var:W> /\ <var:S2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <var:W> /\ <var:S2> = <var:W> ^ <nat:2> /\ <var:S3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <var:W> /\ <var:S2> = <var:W> ^ <nat:2> /\ <var:S3> = <var:W> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <nat:2> * <var:W> /\ <var:S2> = <var:W> ^ <nat:2> /\ <var:S3> = <var:W> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <nat:2> * <var:W> /\ <var:S2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:S3> = <var:W> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <nat:2> * <var:W> /\ <var:S2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:W> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <nat:2> * <var:W> /\ <var:S2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:S0> = <nat:2> /\ <var:c> = <nat:4> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S1> = <nat:2> * <var:W> /\ <var:S0> = <nat:2> /\ <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:S0> = <nat:2> /\ <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:c> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 