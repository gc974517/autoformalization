\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:n0> := <nat:2> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:q> ; <var:s> := <var:n1> ; <var:s> := <var:s> + <var:n0> \end{verbatim} Allowing it to hold that $ <var:q> = <var:N> $ ahead of the execution of our code segment it must be that we have $ <var:s> = <nat:8> \cdot <var:N> + <nat:2> $ after list of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is done through the following decorated set of instructions . \begin{eqnarray} \{ <var:q> = <var:N> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:q> = <var:N> \land <var:n0> = <nat:2> \} \\ <var:n1> := <nat:8> ; \\ \{ <var:q> = <var:N> \land <var:n0> = <nat:2> \land <var:n1> = <nat:8> \} \\ <var:n1> := <var:n1> * <var:q> ; \\ \{ <var:q> = <var:N> \land <var:n0> = <nat:2> \land <var:n1> = <nat:8> \cdot <var:N> \} \\ <var:s> := <var:n1> ; \\ \{ <var:q> = <var:N> \land <var:n0> = <nat:2> \land <var:s> = <nat:8> \cdot <var:N> \} \\ <var:s> := <var:s> + <var:n0> \\ \{ <var:q> = <var:N> \land <var:s> = <nat:8> \cdot <var:N> + <nat:2> \} \end{eqnarray} Applying Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:q> = <var:N> }} <var:n0> := <nat:2> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:q> ; <var:s> := <var:n1> ; <var:s> := <var:s> + <var:n0> {{ <var:s> = <nat:8> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:n0> = <nat:2> /\ <var:s> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:s> = <nat:8> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 