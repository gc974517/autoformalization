\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:h> := <nat:1> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:4> + <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Given --- for any $ <var:Q> \in \mathbb{N} $ --- it to hold that $ <var:q> = <var:Q> $ before running the set of commands then we have $ <var:h> = <nat:1> \times <var:Q> ^ <nat:9> + <nat:1> \times <var:Q> ^ <nat:8> + <nat:4> \times <var:Q> ^ <nat:7> + <nat:1> \times <var:Q> ^ <nat:6> + <nat:3> \times <var:Q> ^ <nat:5> + <nat:3> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> + <nat:3> $ once code exits . \end{theorem} \begin{proof} Arguing the correctness of our code segment is demonstrated by typical Hoare logic . Moving forward , we see the variable update code defining $ <nat:1> $ to $ <var:h>$ . This forwards the precondition $ \{ <var:q> = <var:Q> \} $ toward $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \} $ . Moving on to the next step , we see the binding code binding $ <nat:1> + <var:h> * <var:q> $ to $ <var:h>$ . This redefines the precondition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \} $ into the condition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> + <nat:1> \} $ . This is known to be sound through the assignment law defined in standard Hoare reasoning . Honing in on the following piece of code found in our series of instructions , we have the assignment line \verb | <var:h> := <nat:4> + <var:h> * <var:q> ; | . This statement takes $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> + <nat:1> \} $ toward the condition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:4> \} $ . This is rigorously given by the assignment law defined by standard Hoare techniques . Advancing to the next step , we have the environment update statement \verb | <var:h> := <nat:1> + <var:h> * <var:q> ; | . This line takes the condition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:4> \} $ as $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:1> \} $ . This is known to be sound using the assignment law from usual Hoare techniques . Jumping to the proceeding bit of code in our series of commands , we have the assignment code defining $ <nat:3> + <var:h> * <var:q> $ into $ <var:h>$ . This redefines the condition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:1> \} $ toward the condition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:3> \} $ . Advancing to the subsequent step found in our program , we have the code letting $ <nat:3> + <var:h> * <var:q> $ to $ <var:h>$ . This moves the precondition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:3> \} $ into the postcondition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:3> \} $ . Honing in on the proceeding piece of code found in the code , the binding code letting $ <nat:1> + <var:h> * <var:q> $ to $ <var:h>$ . This statement forwards the condition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:3> \} $ into the postcondition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:1> \} $ . Moving forward to the upcoming bit of code seen in our set of commands , we have the assignment code yielding $ <var:h> * <var:q> $ into $ <var:h>$ . This takes the condition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:1> \} $ toward $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + \} $ . Going to the next step , we have the environment update command defining $ <nat:1> + <var:h> * <var:q> $ into $ <var:h>$ . This advances the precondition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + \} $ as the postcondition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:1> \} $ . This is given through the assignment law found in standard Hoare techniques . Going to the next step , we have the variable assignmet command giving $ <nat:3> + <var:h> * <var:q$ to $ <var:h>$ . This command advances $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:1> \} $ as the condition $ \{ <var:q> = <var:Q> \land <var:h> = <nat:1> \cdot <var:Q> ^ <nat:9> + <nat:1> \cdot <var:Q> ^ <nat:8> + <nat:4> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:1> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:4> + <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <var:h> * <var:q> ; <var:h> := <nat:1> + <var:h> * <var:q> ; <var:h> := <nat:3> + <var:h> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:q> = <var:Q> }} <def:poly> {{ <var:h> = <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:h> = <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 