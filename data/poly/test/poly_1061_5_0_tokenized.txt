\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:7> ; <var:V1> := <nat:8> ; <var:V1> := <var:V1> * <var:Z> ; <var:J> := <var:V1> ; <var:J> := <var:J> + <var:V0> \end{verbatim} Allow that we have $ <var:Z> = <var:a> $ prior to interpreting the series of instructions , it follows that we see $ <var:J> = <nat:8> \times <var:a> + <nat:7> $ after list of instructions has exited . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is given using usual Hoare techniques . Considering the following piece of code seen in our list of commands , we see the binding command \verb | <var:V0> := <nat:7> ; | . This statement advances the precondition $ \{ <var:Z> = <var:a> \} $ to the condition $ \{ <var:Z> = <var:a> \land <var:V0> = <nat:7> \} $ . Considering the subsequent command in the segment of code , the binding command letting $ <nat:8> $ toward $ <var:V1>$ . This advances the precondition $ \{ <var:Z> = <var:a> \land <var:V0> = <nat:7> \} $ into the postcondition $ \{ <var:Z> = <var:a> \land <var:V0> = <nat:7> \land <var:V1> = <nat:8> \} $ . Going forward , we see the environment update command defining $ <var:V1> * <var:Z> $ toward $ <var:V1>$ . This command advances the precondition $ \{ <var:Z> = <var:a> \land <var:V0> = <nat:7> \land <var:V1> = <nat:8> \} $ into the postcondition $ \{ <var:Z> = <var:a> \land <var:V0> = <nat:7> \land <var:V1> = <nat:8> * <var:a> \} $ . This is shown with the assignment rule given by Hoare techniques . Moving on to the next step , the variable binding line \verb | <var:J> := <var:V1> ; | . This code moves the condition $ \{ <var:Z> = <var:a> \land <var:V0> = <nat:7> \land <var:V1> = <nat:8> * <var:a> \} $ as the postcondition $ \{ <var:Z> = <var:a> \land <var:V0> = <nat:7> \land <var:J> = <nat:8> * <var:a> \} $ . This is known to be sound with the assignment law of standard Hoare reasoning . Advancing to the next line found in our set of commands , the environment update line \verb | <var:J> := <var:J> + <var:V0> | . This code forwards the precondition $ \{ <var:Z> = <var:a> \land <var:V0> = <nat:7> \land <var:J> = <nat:8> * <var:a> \} $ into the condition $ \{ <var:Z> = <var:a> \land <var:J> = <nat:8> * <var:a> + <nat:7> \} $ . This is shown using the assignment inference rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Z> = <var:a> }} <var:V0> := <nat:7> ; <var:V1> := <nat:8> ; <var:V1> := <var:V1> * <var:Z> ; <var:J> := <var:V1> ; <var:J> := <var:J> + <var:V0> {{ <var:J> = <nat:8> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:V0> = <nat:7> /\ <var:J> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:J> = <nat:8> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 