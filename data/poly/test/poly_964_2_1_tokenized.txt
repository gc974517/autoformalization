\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:3> ; <var:b> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:s> = <var:x> $ ( for all $ <var:x> \in \mathbb{Z}^+ $ ) prior to running our segment of code , it must be that we have $ <var:b> = <nat:3> $ when series of instructions exits . \end{theorem} \begin{proof} The application of Hoare reasoning yields : \begin{eqnarray} \{ <var:s> = <var:x> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:s> = <var:x> \land <var:r0> = <nat:3> \} \\ <var:b> := <var:r0> \\ \{ <var:s> = <var:x> \land <var:b> = <nat:3> \} \end{eqnarray} Considering the preceding argument , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:3> ; <var:b> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:s> = <var:x> }} <def:poly> {{ <var:b> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:b> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 