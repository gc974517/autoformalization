\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:z> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:z> ; <var:o2> := <var:o2> * <var:z> ; <var:W> := <var:o2> ; <var:W> := <var:W> + <var:o1> ; <var:W> := <var:W> + <var:o0> \end{verbatim} Assuming it to be that $ <var:z> = <var:y> $ ahead of the evaluation of the series of instructions , then we see $ <var:W> = <nat:3> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this list of commands is clear with usual Hoare techniques . Observing the proceeding command contained in our list of instructions , the variable binding line \verb | <var:o0> := <nat:1> ; | . This takes the precondition $ \{ <var:z> = <var:y> \} $ into the postcondition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \} $ . Shifting focus toward the following bit of code contained in our set of instructions , the code binding $ <nat:8> $ to $ <var:o1>$ . This moves the precondition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \} $ into the postcondition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \} $ . This is guaranteed through the assignment inference rule of standard Hoare logic . Moving on , we have the variable binding statement yielding $ <var:o1> * <var:z> $ toward $ <var:o1>$ . This code forwards the precondition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \} $ as the postcondition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \} $ . This is guaranteed with the assignment scheme given by Hoare logic . Honing in on the next line of code found in the set of commands , we see the environment update code letting $ <nat:3> $ as $ <var:o2>$ . This line moves $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \} $ as the condition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \land <var:o2> = <nat:3> \} $ . This is ensured using the assignment rule in standard Hoare logic . Moving forward to the next step , the assignment command \verb | <var:o2> := <var:o2> * <var:z> ; | . This code redefines $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \land <var:o2> = <nat:3> \} $ to the condition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \land <var:o2> = <nat:3> \cdot <var:y> \} $ . This is given using the assignment scheme in standard Hoare techniques . Further , the binding statement \verb | <var:o2> := <var:o2> * <var:z> ; | . This line takes the condition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \land <var:o2> = <nat:3> \cdot <var:y> \} $ as the postcondition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \land <var:o2> = <nat:3> \cdot <var:y> ^ <nat:2> \} $ . Taking another step toward the upcoming piece of code found in our list of commands , the variable update command \verb | <var:W> := <var:o2> ; | . This moves $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \land <var:o2> = <nat:3> \cdot <var:y> ^ <nat:2> \} $ into $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \land <var:W> = <nat:3> \cdot <var:y> ^ <nat:2> \} $ . This is ensured by the assignment law of typical Hoare reasoning . Going to the next step , we see the command \verb | <var:W> := <var:W> + <var:o1> ; | . This transfers the precondition $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:o1> = <nat:8> \cdot <var:y> \land <var:W> = <nat:3> \cdot <var:y> ^ <nat:2> \} $ to $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:W> = <nat:3> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> \} $ . Focusing on the subsequent bit of code in our program , the variable update command \verb | <var:W> := <var:W> + <var:o0> | . This statement moves $ \{ <var:z> = <var:y> \land <var:o0> = <nat:1> \land <var:W> = <nat:3> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> \} $ into $ \{ <var:z> = <var:y> \land <var:W> = <nat:3> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:z> = <var:y> }} <var:o0> := <nat:1> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:z> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:z> ; <var:o2> := <var:o2> * <var:z> ; <var:W> := <var:o2> ; <var:W> := <var:W> + <var:o1> ; <var:W> := <var:W> + <var:o0> {{ <var:W> = <nat:3> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:y> /\ <var:o2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:y> /\ <var:o2> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:y> /\ <var:o2> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:8> * <var:y> /\ <var:W> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:o0> = <nat:1> /\ <var:W> = <nat:3> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:W> = <nat:3> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 