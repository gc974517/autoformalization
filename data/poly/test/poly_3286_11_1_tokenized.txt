\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:o> ; <var:B2> := <var:B1> * <var:o> ; <var:B3> := <var:B2> * <var:o> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:3> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:1> ; <var:R> := <var:B3> <var:R> := <var:R> + <var:B2> <var:R> := <var:R> + <var:B1> <var:R> := <var:R> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Assuming that $ <var:o> = <var:v> $ prior to running the set of instructions it follows that $ <var:R> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:o> = <var:v> \} \\ <var:B1> := <var:o> ; \\ \{ <var:o> = <var:v> \land <var:B1> = <var:v> \} \\ <var:B2> := <var:B1> * <var:o> ; \\ \{ <var:o> = <var:v> \land <var:B1> = <var:v> \land <var:B2> = <var:v> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:o> ; \\ \{ <var:o> = <var:v> \land <var:B1> = <var:v> \land <var:B2> = <var:v> ^ <nat:2> \land <var:B3> = <var:v> ^ <nat:3> \} \\ <var:B0> := <nat:2> ; \\ \{ <var:o> = <var:v> \land <var:B1> = <var:v> \land <var:B2> = <var:v> ^ <nat:2> \land <var:B3> = <var:v> ^ <nat:3> \land <var:B0> = <nat:2> \} \\ <var:B1> := <var:B1> * <nat:3> ; \\ \{ <var:o> = <var:v> \land <var:B1> = <nat:3> * <var:v> \land <var:B2> = <var:v> ^ <nat:2> \land <var:B3> = <var:v> ^ <nat:3> \land <var:B0> = <nat:2> \} \\ <var:B2> := <var:B2> * <nat:4> ; \\ \{ <var:o> = <var:v> \land <var:B1> = <nat:3> * <var:v> \land <var:B2> = <nat:4> * <var:v> ^ <nat:2> \land <var:B3> = <var:v> ^ <nat:3> \land <var:B0> = <nat:2> \} \\ <var:B3> := <var:B3> * <nat:1> ; \\ \{ <var:o> = <var:v> \land <var:B1> = <nat:3> * <var:v> \land <var:B2> = <nat:4> * <var:v> ^ <nat:2> \land <var:B3> = <nat:1> * <var:v> ^ <nat:3> \land <var:B0> = <nat:2> \} \\ <var:R> := <var:B3> \\ \{ <var:o> = <var:v> \land <var:B1> = <nat:3> * <var:v> \land <var:B2> = <nat:4> * <var:v> ^ <nat:2> \land <var:B0> = <nat:2> \land <var:R> = <nat:1> * <var:v> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:B2> \\ \{ <var:o> = <var:v> \land <var:B1> = <nat:3> * <var:v> \land <var:B0> = <nat:2> \land <var:R> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:B1> \\ \{ <var:o> = <var:v> \land <var:B0> = <nat:2> \land <var:R> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> \} \\ <var:R> := <var:R> + <var:B0> \\ \{ <var:o> = <var:v> \land <var:R> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> \} \end{eqnarray} As a consequence , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:o> ; <var:B2> := <var:B1> * <var:o> ; <var:B3> := <var:B2> * <var:o> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:3> ; <var:B2> := <var:B2> * <nat:4> ; <var:B3> := <var:B3> * <nat:1> ; <var:R> := <var:B3> <var:R> := <var:R> + <var:B2> <var:R> := <var:R> + <var:B1> <var:R> := <var:R> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:o> = <var:v> }} <def:poly> {{ <var:R> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <var:v> /\ <var:B2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <var:v> /\ <var:B2> = <var:v> ^ <nat:2> /\ <var:B3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <var:v> /\ <var:B2> = <var:v> ^ <nat:2> /\ <var:B3> = <var:v> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <nat:3> * <var:v> /\ <var:B2> = <var:v> ^ <nat:2> /\ <var:B3> = <var:v> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <nat:3> * <var:v> /\ <var:B2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:B3> = <var:v> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <nat:3> * <var:v> /\ <var:B2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:v> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <nat:3> * <var:v> /\ <var:B2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:B0> = <nat:2> /\ <var:R> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B1> = <nat:3> * <var:v> /\ <var:B0> = <nat:2> /\ <var:R> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:B0> = <nat:2> /\ <var:R> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:R> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 