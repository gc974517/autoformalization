\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:8> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:Q> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:Q> ; <var:J2> := <var:J2> * <var:Q> ; <var:i> := <var:J2> ; <var:i> := <var:i> + <var:J1> ; <var:i> := <var:i> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:Q> = <var:l> $ ahead of interpreting the list of commands then we see $ <var:i> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be demonstrated through standard Hoare logic . Now , we have the variable update line \verb | <var:J0> := <nat:8> ; | . This line redefines $ \{ <var:Q> = <var:l> \} $ into $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \} $ . This is shown through the assignment law given in standard Hoare logic . Jumping to the following line of code found in our segment of code , we have the variable update line defining $ <nat:9> $ to $ <var:J1>$ . This redefines $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \} $ to $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> \} $ . This is ensured with the assignment rule defined by typical Hoare techniques . Taking a look at the subsequent statement contained in the program , we see the variable assignmet line letting $ <var:J1> * <var:Q> $ to $ <var:J1>$ . This line advances the precondition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> \} $ toward the condition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \} $ . Shifting focus toward the following step contained in our set of instructions , we see the assignment code binding $ <nat:2> $ as $ <var:J2>$ . This takes $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \} $ as the postcondition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \land <var:J2> = <nat:2> \} $ . This is rigorously given by the assignment rule given in typical Hoare logic . Advancing , the binding statement \verb | <var:J2> := <var:J2> * <var:Q> ; | . This forwards the condition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \land <var:J2> = <nat:2> \} $ into the postcondition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \land <var:J2> = <nat:2> * <var:l> \} $ . Advancing , the variable assignmet command \verb | <var:J2> := <var:J2> * <var:Q> ; | . This statement redefines $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \land <var:J2> = <nat:2> * <var:l> \} $ toward the postcondition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \land <var:J2> = <nat:2> * <var:l> ^ <nat:2> \} $ . Going to the next step , we have the variable binding code \verb | <var:i> := <var:J2> ; | . This statement forwards the condition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \land <var:J2> = <nat:2> * <var:l> ^ <nat:2> \} $ to the condition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \land <var:i> = <nat:2> * <var:l> ^ <nat:2> \} $ . Moving onward , the environment update code \verb | <var:i> := <var:i> + <var:J1> ; | . This line takes the precondition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:J1> = <nat:9> * <var:l> \land <var:i> = <nat:2> * <var:l> ^ <nat:2> \} $ toward $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:i> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> \} $ . Moving forward to the following step found in our code segment , we see the variable assignmet command \verb | <var:i> := <var:i> + <var:J0> | . This line forwards the condition $ \{ <var:Q> = <var:l> \land <var:J0> = <nat:8> \land <var:i> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> \} $ into the postcondition $ \{ <var:Q> = <var:l> \land <var:i> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> \} $ . This is shown with the assignment law obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:8> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:Q> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:Q> ; <var:J2> := <var:J2> * <var:Q> ; <var:i> := <var:J2> ; <var:i> := <var:i> + <var:J1> ; <var:i> := <var:i> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Q> = <var:l> }} <def:poly> {{ <var:i> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:9> * <var:l> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:9> * <var:l> /\ <var:J2> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:9> * <var:l> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:9> * <var:l> /\ <var:i> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:J0> = <nat:8> /\ <var:i> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:i> = <nat:2> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 