\begin{document} \begin{theorem} Take the following set of commands : \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <nat:3> + <var:W> * <var:X> ; <var:W> := <nat:1> + <var:W> * <var:X> ; <var:W> := <var:W> * <var:X> ; <var:W> := <nat:4> + <var:W> * <var:X> ; <var:W> := <nat:1> + <var:W> * <var:X> \end{verbatim} Assume letting $ <var:B> \in \mathbb{Z}^+ $ it to be that $ <var:X> = <var:B> $ ahead of the evaluation of our list of commands it must be that we see $ <var:W> = <nat:4> \cdot <var:B> ^ <nat:5> + <nat:3> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> + <nat:1> $ when list of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for the list of instructions is shown with typical Hoare reasoning . Following , we have the assignment statement \verb | <var:W> := <nat:4> ; | . This takes the condition $ \{ <var:X> = <var:B> \} $ to the postcondition $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \} $ . Moving forward , we have the assignment line \verb | <var:W> := <nat:3> + <var:W> * <var:X> ; | . This redefines the precondition $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \} $ into the condition $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> + <nat:3> \} $ . This is shown to be logically sound by the assignment scheme defined in typical Hoare logic . Advancing to the next step , we have the variable binding line \verb | <var:W> := <nat:1> + <var:W> * <var:X> ; | . This command moves $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> + <nat:3> \} $ into the postcondition $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:1> \} $ . Honing in on the following line contained in our set of instructions , we have the environment update command \verb | <var:W> := <var:W> * <var:X> ; | . This statement redefines $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:1> \} $ to the condition $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + \} $ . This is rigorously given through the assignment rule in Hoare logic . After , we see the code letting $ <nat:4> + <var:W> * <var:X> $ toward $ <var:W>$ . This forwards the precondition $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + \} $ into the postcondition $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:4> \} $ . This is given with the assignment scheme defined in usual Hoare logic . Shifting focus toward the next piece of code in the series of instructions , we see the assignment command giving $ <nat:1> + <var:W> * <var:X$ to $ <var:W>$ . This advances $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:4> \} $ toward the postcondition $ \{ <var:X> = <var:B> \land <var:W> = <nat:4> \times <var:B> ^ <nat:5> + <nat:3> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> + <nat:1> \} $ . This is rigorously given with the assignment scheme of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:X> = <var:B> }} <var:W> := <nat:4> ; <var:W> := <nat:3> + <var:W> * <var:X> ; <var:W> := <nat:1> + <var:W> * <var:X> ; <var:W> := <var:W> * <var:X> ; <var:W> := <nat:4> + <var:W> * <var:X> ; <var:W> := <nat:1> + <var:W> * <var:X> {{ <var:W> = <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:W> = <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:W> = <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:W> = <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:W> = <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:W> = <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 