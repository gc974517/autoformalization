\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:1> + <var:U> * <var:t> ; <var:U> := <nat:3> + <var:U> * <var:t> ; <var:U> := <nat:2> + <var:U> * <var:t> ; <var:U> := <nat:3> + <var:U> * <var:t> ; <var:U> := <nat:1> + <var:U> * <var:t> ; <var:U> := <var:U> * <var:t> ; <var:U> := <nat:1> + <var:U> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:t> = <var:m> $ --- for all $ <var:m> \in \mathbb{Z}^+ $ --- ahead of running our segment of code it must be that we see $ <var:U> = <nat:3> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:2> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:t> = <var:m> \} \\ <var:U> := <nat:3> ; \\ \{ <var:t> = <var:m> \land <var:U> = <nat:3> \} \\ <var:U> := <nat:1> + <var:U> * <var:t> ; \\ \{ <var:t> = <var:m> \land <var:U> = <nat:3> \cdot <var:m> + <nat:1> \} \\ <var:U> := <nat:3> + <var:U> * <var:t> ; \\ \{ <var:t> = <var:m> \land <var:U> = <nat:3> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:3> \} \\ <var:U> := <nat:2> + <var:U> * <var:t> ; \\ \{ <var:t> = <var:m> \land <var:U> = <nat:3> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:2> \} \\ <var:U> := <nat:3> + <var:U> * <var:t> ; \\ \{ <var:t> = <var:m> \land <var:U> = <nat:3> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:3> \} \\ <var:U> := <nat:1> + <var:U> * <var:t> ; \\ \{ <var:t> = <var:m> \land <var:U> = <nat:3> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:1> \} \\ <var:U> := <var:U> * <var:t> ; \\ \{ <var:t> = <var:m> \land <var:U> = <nat:3> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:2> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + \} \\ <var:U> := <nat:1> + <var:U> * <var:t> \\ \{ <var:t> = <var:m> \land <var:U> = <nat:3> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:2> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \} \end{eqnarray} As a consequence , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <nat:1> + <var:U> * <var:t> ; <var:U> := <nat:3> + <var:U> * <var:t> ; <var:U> := <nat:2> + <var:U> * <var:t> ; <var:U> := <nat:3> + <var:U> * <var:t> ; <var:U> := <nat:1> + <var:U> * <var:t> ; <var:U> := <var:U> * <var:t> ; <var:U> := <nat:1> + <var:U> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:t> = <var:m> }} <def:poly> {{ <var:U> = <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:U> = <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:U> = <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:U> = <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:U> = <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:U> = <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:U> = <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:m> /\ <var:U> = <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 