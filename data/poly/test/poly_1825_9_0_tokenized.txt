\begin{document} \begin{theorem} Let the following code in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:8> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:D> ; <var:E2> := <nat:7> ; <var:E2> := <var:E2> * <var:D> ; <var:E2> := <var:E2> * <var:D> ; <var:P> := <var:E2> ; <var:P> := <var:P> + <var:E1> ; <var:P> := <var:P> + <var:E0> \end{verbatim} Given it to hold that $ <var:D> = <var:J> $ before interpreting the list of commands it must be that we have $ <var:P> = <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:8> $ after code segment has finished executing . \end{theorem} \begin{proof} Observe that the below decorated code . \begin{eqnarray} \{ <var:D> = <var:J> \} \\ <var:E0> := <nat:8> ; \\ \{ <var:D> = <var:J> \land <var:E0> = <nat:8> \} \\ <var:E1> := <nat:1> ; \\ \{ <var:D> = <var:J> \land <var:E0> = <nat:8> \land <var:E1> = <nat:1> \} \\ <var:E1> := <var:E1> * <var:D> ; \\ \{ <var:D> = <var:J> \land <var:E0> = <nat:8> \land <var:E1> = <nat:1> \times <var:J> \} \\ <var:E2> := <nat:7> ; \\ \{ <var:D> = <var:J> \land <var:E0> = <nat:8> \land <var:E1> = <nat:1> \times <var:J> \land <var:E2> = <nat:7> \} \\ <var:E2> := <var:E2> * <var:D> ; \\ \{ <var:D> = <var:J> \land <var:E0> = <nat:8> \land <var:E1> = <nat:1> \times <var:J> \land <var:E2> = <nat:7> \times <var:J> \} \\ <var:E2> := <var:E2> * <var:D> ; \\ \{ <var:D> = <var:J> \land <var:E0> = <nat:8> \land <var:E1> = <nat:1> \times <var:J> \land <var:E2> = <nat:7> \times <var:J> ^ <nat:2> \} \\ <var:P> := <var:E2> ; \\ \{ <var:D> = <var:J> \land <var:E0> = <nat:8> \land <var:E1> = <nat:1> \times <var:J> \land <var:P> = <nat:7> \times <var:J> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:E1> ; \\ \{ <var:D> = <var:J> \land <var:E0> = <nat:8> \land <var:P> = <nat:7> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> \} \\ <var:P> := <var:P> + <var:E0> \\ \{ <var:D> = <var:J> \land <var:P> = <nat:7> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:8> \} \end{eqnarray} Using typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:D> = <var:J> }} <var:E0> := <nat:8> ; <var:E1> := <nat:1> ; <var:E1> := <var:E1> * <var:D> ; <var:E2> := <nat:7> ; <var:E2> := <var:E2> * <var:D> ; <var:E2> := <var:E2> * <var:D> ; <var:P> := <var:E2> ; <var:P> := <var:P> + <var:E1> ; <var:P> := <var:P> + <var:E0> {{ <var:P> = <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:1> * <var:J> /\ <var:E2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:1> * <var:J> /\ <var:E2> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:1> * <var:J> /\ <var:E2> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:1> * <var:J> /\ <var:P> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:E0> = <nat:8> /\ <var:P> = <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:P> = <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 