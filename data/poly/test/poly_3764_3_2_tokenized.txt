\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:T> := <nat:2> ; <var:T> := <nat:1> + <var:T> * <var:u> ; <var:T> := <nat:4> + <var:T> * <var:u> \end{verbatim} Allowing it to be that $ <var:u> = <var:o> $ ahead of running this set of instructions then we see $ <var:T> = <nat:2> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for the code segment is given with typical Hoare logic . Moving on to the next step , \begin{eqnarray} \{ <var:u> = <var:o> \} \, <var:T> := <nat:2> \, \{ <var:u> = <var:o> \land <var:T> = <nat:2> \} \end{eqnarray} Taking a look at the next lines of codecontained in the segment of code , \begin{eqnarray} \{ <var:u> = <var:o> \} \, <var:T> := <nat:2> \, \{ <var:u> = <var:o> \land <var:T> = <nat:2> \} \\ \{ <var:u> = <var:o> \land <var:T> = <nat:2> \} \, <var:T> := <nat:1> + <var:T> * <var:u> \, \{ <var:u> = <var:o> \land <var:T> = <nat:2> * <var:o> + <nat:1> \} \end{eqnarray} This is deduced using the variable binding rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:u> = <var:o> }} <var:T> := <nat:2> ; <var:T> := <nat:1> + <var:T> * <var:u> ; <var:T> := <nat:4> + <var:T> * <var:u> {{ <var:T> = <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:T> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:T> = <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:T> = <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 