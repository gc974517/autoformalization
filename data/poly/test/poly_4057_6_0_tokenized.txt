\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:3> ; <var:K2> := <nat:4> ; <var:K2> := <var:K2> * <var:I> ; <var:K2> := <var:K2> * <var:I> ; <var:R> := <var:K2> ; <var:R> := <var:R> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:I> = <var:h> $ taking natural coefficients $ <var:h> $ before the execution of our list of commands then we have $ <var:R> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the program can be done by standard Hoare reasoning . Now , we see the assignment line \verb | <var:K0> := <nat:3> ; | . This transfers $ \{ <var:I> = <var:h> \} $ toward the postcondition $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \} $ . This is deduced with the assignment scheme found in standard Hoare logic . Moving on to the next step , we have the variable update line defining $ <nat:4> $ to $ <var:K2>$ . This line redefines $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \} $ to $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \land <var:K2> = <nat:4> \} $ . This is guaranteed through the assignment scheme found in usual Hoare techniques . Paying attention to the subsequent line contained in the series of instructions , the assignment command giving $ <var:K2> * <var:I> $ to $ <var:K2>$ . This advances $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \land <var:K2> = <nat:4> \} $ to the condition $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \land <var:K2> = <nat:4> \cdot <var:h> \} $ . Next , we have the environment update code \verb | <var:K2> := <var:K2> * <var:I> ; | . This forwards $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \land <var:K2> = <nat:4> \cdot <var:h> \} $ into the condition $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \land <var:K2> = <nat:4> \cdot <var:h> ^ <nat:2> \} $ . Paying attention to the upcoming bit of code contained in our program , we have the binding command \verb | <var:R> := <var:K2> ; | . This statement redefines the precondition $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \land <var:K2> = <nat:4> \cdot <var:h> ^ <nat:2> \} $ as $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \land <var:R> = <nat:4> \cdot <var:h> ^ <nat:2> \} $ . This is sound through the assignment law from usual Hoare techniques . Observing the upcoming command in our code segment , we see the command defining $ <var:R> + <var:K0$ into $ <var:R>$ . This code advances the precondition $ \{ <var:I> = <var:h> \land <var:K0> = <nat:3> \land <var:R> = <nat:4> \cdot <var:h> ^ <nat:2> \} $ toward $ \{ <var:I> = <var:h> \land <var:R> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \} $ . This is shown to be logically sound by the assignment inference rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:3> ; <var:K2> := <nat:4> ; <var:K2> := <var:K2> * <var:I> ; <var:K2> := <var:K2> * <var:I> ; <var:R> := <var:K2> ; <var:R> := <var:R> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:I> = <var:h> }} <def:poly> {{ <var:R> = <nat:4> * <var:h> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:K0> = <nat:3> /\ <var:K2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:K0> = <nat:3> /\ <var:K2> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:K0> = <nat:3> /\ <var:K2> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:K0> = <nat:3> /\ <var:R> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:R> = <nat:4> * <var:h> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 