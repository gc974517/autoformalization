\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:3> ; <var:Q> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:p> = <var:I> $ prior to executing our code it holds that we see $ <var:Q> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:p> = <var:I> \} \\ <var:B0> := <nat:3> ; \\ \{ <var:p> = <var:I> \land <var:B0> = <nat:3> \} \\ <var:Q> := <var:B0> \\ \{ <var:p> = <var:I> \land <var:Q> = <nat:3> \} \end{eqnarray} Thusly , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:3> ; <var:Q> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:p> = <var:I> }} <def:poly> {{ <var:Q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:I> /\ <var:Q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 