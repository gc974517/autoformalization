\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:r> ; <var:F2> := <var:F1> * <var:r> ; <var:F3> := <var:F2> * <var:r> ; <var:F0> := <nat:9> ; <var:F1> := <var:F1> * <nat:9> ; <var:F2> := <var:F2> * <nat:1> ; <var:F3> := <var:F3> * <nat:4> ; <var:a> := <var:F3> <var:a> := <var:a> + <var:F2> <var:a> := <var:a> + <var:F1> <var:a> := <var:a> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:r> = <var:b> $ ahead of the execution of our list of commands , it must be that we see $ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for our code segment is clear with typical Hoare logic . Moving forward to the following statements seen in the code , we see \[ \begin{tabular} {rcl} \{ <var:r> = <var:b> \} & <var:F1> := <var:r> & \{ <var:r> = <var:b> \land <var:F1> = <var:b> \} \\ \{ <var:r> = <var:b> \land <var:F1> = <var:b> \} & <var:F2> := <var:F1> * <var:r> & \{ <var:r> = <var:b> \land <var:F1> = <var:b> \land <var:F2> = <var:b> ^ <nat:2> \} \\ \{ <var:r> = <var:b> \land <var:F1> = <var:b> \land <var:F2> = <var:b> ^ <nat:2> \} & <var:F3> := <var:F2> * <var:r> & \{ <var:r> = <var:b> \land <var:F1> = <var:b> \land <var:F2> = <var:b> ^ <nat:2> \land <var:F3> = <var:b> ^ <nat:3> \} \\ \{ <var:r> = <var:b> \land <var:F1> = <var:b> \land <var:F2> = <var:b> ^ <nat:2> \land <var:F3> = <var:b> ^ <nat:3> \} & <var:F0> := <nat:9> & \{ <var:r> = <var:b> \land <var:F1> = <var:b> \land <var:F2> = <var:b> ^ <nat:2> \land <var:F3> = <var:b> ^ <nat:3> \land <var:F0> = <nat:9> \} \\ \{ <var:r> = <var:b> \land <var:F1> = <var:b> \land <var:F2> = <var:b> ^ <nat:2> \land <var:F3> = <var:b> ^ <nat:3> \land <var:F0> = <nat:9> \} & <var:F1> := <var:F1> * <nat:9> & \{ <var:r> = <var:b> \land <var:F1> = <nat:9> \cdot <var:b> \land <var:F2> = <var:b> ^ <nat:2> \land <var:F3> = <var:b> ^ <nat:3> \land <var:F0> = <nat:9> \} \\ \{ <var:r> = <var:b> \land <var:F1> = <nat:9> \cdot <var:b> \land <var:F2> = <var:b> ^ <nat:2> \land <var:F3> = <var:b> ^ <nat:3> \land <var:F0> = <nat:9> \} & <var:F2> := <var:F2> * <nat:1> & \{ <var:r> = <var:b> \land <var:F1> = <nat:9> \cdot <var:b> \land <var:F2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:F3> = <var:b> ^ <nat:3> \land <var:F0> = <nat:9> \} \\ \{ <var:r> = <var:b> \land <var:F1> = <nat:9> \cdot <var:b> \land <var:F2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:F3> = <var:b> ^ <nat:3> \land <var:F0> = <nat:9> \} & <var:F3> := <var:F3> * <nat:4> & \{ <var:r> = <var:b> \land <var:F1> = <nat:9> \cdot <var:b> \land <var:F2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:F0> = <nat:9> \} \\ \{ <var:r> = <var:b> \land <var:F1> = <nat:9> \cdot <var:b> \land <var:F2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:F0> = <nat:9> \} & <var:a> := <var:F3& \{ <var:r> = <var:b> \land <var:F1> = <nat:9> \cdot <var:b> \land <var:F2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:F0> = <nat:9> \land <var:a> = <nat:4> \cdot <var:b> ^ <nat:3> \} \end{tabular} This is rigorously given with the scheme defined in Hoare techniques . Advancing on , \[ \begin{tabular} {rcl} \{ <var:r> = <var:b> \} & <var:F1> := <var:r> & \{ <var:r> = <var:b> \land <var:F1> = <var:b> \} \end{tabular} This is shown using the variable binding scheme of Hoare logic . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:r> = <var:b> \} & <var:F1> := <var:r> & \{ <var:r> = <var:b> \land <var:F1> = <var:b> \} \end{tabular} Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:r> = <var:b> \} & <var:F1> := <var:r> & \{ <var:r> = <var:b> \land <var:F1> = <var:b> \} \end{tabular} This is given with the inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:r> ; <var:F2> := <var:F1> * <var:r> ; <var:F3> := <var:F2> * <var:r> ; <var:F0> := <nat:9> ; <var:F1> := <var:F1> * <nat:9> ; <var:F2> := <var:F2> * <nat:1> ; <var:F3> := <var:F3> * <nat:4> ; <var:a> := <var:F3> <var:a> := <var:a> + <var:F2> <var:a> := <var:a> + <var:F1> <var:a> := <var:a> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:r> = <var:b> }} <def:poly> {{ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <var:b> /\ <var:F2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <var:b> /\ <var:F2> = <var:b> ^ <nat:2> /\ <var:F3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <var:b> /\ <var:F2> = <var:b> ^ <nat:2> /\ <var:F3> = <var:b> ^ <nat:3> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <nat:9> * <var:b> /\ <var:F2> = <var:b> ^ <nat:2> /\ <var:F3> = <var:b> ^ <nat:3> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <nat:9> * <var:b> /\ <var:F2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:F3> = <var:b> ^ <nat:3> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <nat:9> * <var:b> /\ <var:F2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:F3> = <nat:4> * <var:b> ^ <nat:3> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <nat:9> * <var:b> /\ <var:F2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:F0> = <nat:9> /\ <var:a> = <nat:4> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F1> = <nat:9> * <var:b> /\ <var:F0> = <nat:9> /\ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:F0> = <nat:9> /\ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 