\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:p> ; <var:N2> := <var:N1> * <var:p> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:4> ; <var:N2> := <var:N2> * <nat:7> ; <var:O> := <var:N2> <var:O> := <var:O> + <var:N1> <var:O> := <var:O> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> in \emph{Imp} . Assume that we have $ <var:p> = <var:f> $ before running our program it holds that we see $ <var:O> = <nat:7> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:4> $ when set of instructions has exited . \end{theorem} \begin{proof} We can see that the below decorated set of commands . \begin{eqnarray} \{ <var:p> = <var:f> \} \\ <var:N1> := <var:p> ; \\ \{ <var:p> = <var:f> \land <var:N1> = <var:f> \} \\ <var:N2> := <var:N1> * <var:p> ; \\ \{ <var:p> = <var:f> \land <var:N1> = <var:f> \land <var:N2> = <var:f> ^ <nat:2> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:p> = <var:f> \land <var:N1> = <var:f> \land <var:N2> = <var:f> ^ <nat:2> \land <var:N0> = <nat:4> \} \\ <var:N1> := <var:N1> * <nat:4> ; \\ \{ <var:p> = <var:f> \land <var:N1> = <nat:4> \times <var:f> \land <var:N2> = <var:f> ^ <nat:2> \land <var:N0> = <nat:4> \} \\ <var:N2> := <var:N2> * <nat:7> ; \\ \{ <var:p> = <var:f> \land <var:N1> = <nat:4> \times <var:f> \land <var:N2> = <nat:7> \times <var:f> ^ <nat:2> \land <var:N0> = <nat:4> \} \\ <var:O> := <var:N2> \\ \{ <var:p> = <var:f> \land <var:N1> = <nat:4> \times <var:f> \land <var:N0> = <nat:4> \land <var:O> = <nat:7> \times <var:f> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:N1> \\ \{ <var:p> = <var:f> \land <var:N0> = <nat:4> \land <var:O> = <nat:7> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> \} \\ <var:O> := <var:O> + <var:N0> \\ \{ <var:p> = <var:f> \land <var:O> = <nat:7> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N1> := <var:p> ; <var:N2> := <var:N1> * <var:p> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:4> ; <var:N2> := <var:N2> * <nat:7> ; <var:O> := <var:N2> <var:O> := <var:O> + <var:N1> <var:O> := <var:O> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:p> = <var:f> }} <def:poly> {{ <var:O> = <nat:7> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:N1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:N1> = <var:f> /\ <var:N2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:N1> = <var:f> /\ <var:N2> = <var:f> ^ <nat:2> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:N1> = <nat:4> * <var:f> /\ <var:N2> = <var:f> ^ <nat:2> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:N1> = <nat:4> * <var:f> /\ <var:N2> = <nat:7> * <var:f> ^ <nat:2> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:N1> = <nat:4> * <var:f> /\ <var:N0> = <nat:4> /\ <var:O> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:N0> = <nat:4> /\ <var:O> = <nat:7> * <var:f> ^ <nat:2> + <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:O> = <nat:7> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 