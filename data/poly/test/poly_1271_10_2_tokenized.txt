\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <nat:1> + <var:z> * <var:q> ; <var:z> := <nat:2> + <var:z> * <var:q> ; <var:z> := <nat:1> + <var:z> * <var:q> ; <var:z> := <nat:2> + <var:z> * <var:q> ; <var:z> := <nat:2> + <var:z> * <var:q> ; <var:z> := <nat:4> + <var:z> * <var:q> ; <var:z> := <nat:1> + <var:z> * <var:q> ; <var:z> := <nat:4> + <var:z> * <var:q> ; <var:z> := <nat:1> + <var:z> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:q> = <var:m> $ ahead of evaluating the list of instructions then we see $ <var:z> = <nat:2> \times <var:m> ^ <nat:9> + <nat:1> \times <var:m> ^ <nat:8> + <nat:2> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:2> \times <var:m> ^ <nat:5> + <nat:2> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:m> \} \\ <var:z> := <nat:2> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> \} \\ <var:z> := <nat:1> + <var:z> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> + <nat:1> \} \\ <var:z> := <nat:2> + <var:z> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> \} \\ <var:z> := <nat:1> + <var:z> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> \} \\ <var:z> := <nat:2> + <var:z> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> \} \\ <var:z> := <nat:4> + <var:z> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> \} \\ <var:z> := <nat:1> + <var:z> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> \} \\ <var:z> := <nat:4> + <var:z> * <var:q> ; \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> \} \\ <var:z> := <nat:1> + <var:z> * <var:q> \\ \{ <var:q> = <var:m> \land <var:z> = <nat:2> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:2> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> \} \end{eqnarray} The application of Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:2> ; <var:z> := <nat:1> + <var:z> * <var:q> ; <var:z> := <nat:2> + <var:z> * <var:q> ; <var:z> := <nat:1> + <var:z> * <var:q> ; <var:z> := <nat:2> + <var:z> * <var:q> ; <var:z> := <nat:2> + <var:z> * <var:q> ; <var:z> := <nat:4> + <var:z> * <var:q> ; <var:z> := <nat:1> + <var:z> * <var:q> ; <var:z> := <nat:4> + <var:z> * <var:q> ; <var:z> := <nat:1> + <var:z> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:q> = <var:m> }} <def:poly> {{ <var:z> = <nat:2> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:2> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:z> = <nat:2> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:2> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 