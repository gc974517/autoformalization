\begin{document} \begin{theorem} Take the following list of instructions as follows \begin{verbatim} <var:q> := <nat:2> ; <var:q> := <nat:2> + <var:q> * <var:u> ; <var:q> := <var:q> * <var:u> ; <var:q> := <var:q> * <var:u> ; <var:q> := <nat:1> + <var:q> * <var:u> ; <var:q> := <nat:1> + <var:q> * <var:u> ; <var:q> := <nat:3> + <var:q> * <var:u> ; <var:q> := <nat:1> + <var:q> * <var:u> ; <var:q> := <nat:1> + <var:q> * <var:u> ; <var:q> := <nat:3> + <var:q> * <var:u> ; <var:q> := <nat:3> + <var:q> * <var:u> ; <var:q> := <nat:4> + <var:q> * <var:u> ; <var:q> := <nat:2> + <var:q> * <var:u> ; <var:q> := <nat:4> + <var:q> * <var:u> \end{verbatim} Assume it to hold that $ <var:u> = <var:Q> $ ahead of evaluating this code segment it must be that we see $ <var:q> = <nat:2> * <var:Q> ^ <nat:13> + <nat:2> * <var:Q> ^ <nat:12> + <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> $ once set of instructions has finished executing . \end{theorem} \begin{proof} The method of proof for our set of instructions is accomplished through the below decorated code segment . \begin{eqnarray} \{ <var:u> = <var:Q> \} \\ <var:q> := <nat:2> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \} \\ <var:q> := <nat:2> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> + <nat:2> \} \\ <var:q> := <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + \} \\ <var:q> := <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + \} \\ <var:q> := <nat:1> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:4> + <nat:2> \times <var:Q> ^ <nat:3> + <nat:1> \} \\ <var:q> := <nat:1> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:5> + <nat:2> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> + <nat:1> \} \\ <var:q> := <nat:3> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:6> + <nat:2> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:3> \} \\ <var:q> := <nat:1> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:7> + <nat:2> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:1> \} \\ <var:q> := <nat:1> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:8> + <nat:2> \times <var:Q> ^ <nat:7> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:1> \} \\ <var:q> := <nat:3> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:9> + <nat:2> \times <var:Q> ^ <nat:8> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:3> \} \\ <var:q> := <nat:3> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:10> + <nat:2> \times <var:Q> ^ <nat:9> + <nat:1> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:3> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:3> \} \\ <var:q> := <nat:4> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:11> + <nat:2> \times <var:Q> ^ <nat:10> + <nat:1> \times <var:Q> ^ <nat:7> + <nat:1> \times <var:Q> ^ <nat:6> + <nat:3> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:4> \} \\ <var:q> := <nat:2> + <var:q> * <var:u> ; \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:12> + <nat:2> \times <var:Q> ^ <nat:11> + <nat:1> \times <var:Q> ^ <nat:8> + <nat:1> \times <var:Q> ^ <nat:7> + <nat:3> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:2> \} \\ <var:q> := <nat:4> + <var:q> * <var:u> \\ \{ <var:u> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:13> + <nat:2> \times <var:Q> ^ <nat:12> + <nat:1> \times <var:Q> ^ <nat:9> + <nat:1> \times <var:Q> ^ <nat:8> + <nat:3> \times <var:Q> ^ <nat:7> + <nat:1> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:3> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:u> = <var:Q> }} <var:q> := <nat:2> ; <var:q> := <nat:2> + <var:q> * <var:u> ; <var:q> := <var:q> * <var:u> ; <var:q> := <var:q> * <var:u> ; <var:q> := <nat:1> + <var:q> * <var:u> ; <var:q> := <nat:1> + <var:q> * <var:u> ; <var:q> := <nat:3> + <var:q> * <var:u> ; <var:q> := <nat:1> + <var:q> * <var:u> ; <var:q> := <nat:1> + <var:q> * <var:u> ; <var:q> := <nat:3> + <var:q> * <var:u> ; <var:q> := <nat:3> + <var:q> * <var:u> ; <var:q> := <nat:4> + <var:q> * <var:u> ; <var:q> := <nat:2> + <var:q> * <var:u> ; <var:q> := <nat:4> + <var:q> * <var:u> {{ <var:q> = <nat:2> * <var:Q> ^ <nat:13> + <nat:2> * <var:Q> ^ <nat:12> + <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:11> + <nat:2> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:12> + <nat:2> * <var:Q> ^ <nat:11> + <nat:1> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:13> + <nat:2> * <var:Q> ^ <nat:12> + <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 