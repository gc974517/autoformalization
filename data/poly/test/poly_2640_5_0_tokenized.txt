\begin{document} \begin{theorem} Take the following code as \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:9> ; <var:U1> := <var:U1> * <var:N> ; <var:s> := <var:U1> ; <var:s> := <var:s> + <var:U0> \end{verbatim} Allowing with some whole numbers $ <var:y> $ that $ <var:N> = <var:y> $ ahead of running our program it must be that we have $ <var:s> = <nat:9> \times <var:y> + <nat:9> $ . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:N> = <var:y> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:N> = <var:y> \land <var:U0> = <nat:9> \} \\ <var:U1> := <nat:9> ; \\ \{ <var:N> = <var:y> \land <var:U0> = <nat:9> \land <var:U1> = <nat:9> \} \\ <var:U1> := <var:U1> * <var:N> ; \\ \{ <var:N> = <var:y> \land <var:U0> = <nat:9> \land <var:U1> = <nat:9> * <var:y> \} \\ <var:s> := <var:U1> ; \\ \{ <var:N> = <var:y> \land <var:U0> = <nat:9> \land <var:s> = <nat:9> * <var:y> \} \\ <var:s> := <var:s> + <var:U0> \\ \{ <var:N> = <var:y> \land <var:s> = <nat:9> * <var:y> + <nat:9> \} \end{eqnarray} Thusly , our code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:N> = <var:y> }} <var:U0> := <nat:9> ; <var:U1> := <nat:9> ; <var:U1> := <var:U1> * <var:N> ; <var:s> := <var:U1> ; <var:s> := <var:s> + <var:U0> {{ <var:s> = <nat:9> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:U0> = <nat:9> /\ <var:s> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:s> = <nat:9> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 