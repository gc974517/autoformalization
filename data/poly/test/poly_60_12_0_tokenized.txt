\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:4> ; <var:I2> := <nat:2> ; <var:I2> := <var:I2> * <var:f> ; <var:I2> := <var:I2> * <var:f> ; <var:I4> := <nat:1> ; <var:I4> := <var:I4> * <var:f> ; <var:I4> := <var:I4> * <var:f> ; <var:I4> := <var:I4> * <var:f> ; <var:I4> := <var:I4> * <var:f> ; <var:M> := <var:I4> ; <var:M> := <var:M> + <var:I2> ; <var:M> := <var:M> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:f> = <var:s> $ given whole numbers $ <var:s> $ ahead of evaluating the set of instructions then we see $ <var:M> = <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques yields : \begin{eqnarray} \{ <var:f> = <var:s> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \} \\ <var:I2> := <nat:2> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> \} \\ <var:I2> := <var:I2> * <var:f> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> * <var:s> \} \\ <var:I2> := <var:I2> * <var:f> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> * <var:s> ^ <nat:2> \} \\ <var:I4> := <nat:1> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> * <var:s> ^ <nat:2> \land <var:I4> = <nat:1> \} \\ <var:I4> := <var:I4> * <var:f> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> * <var:s> ^ <nat:2> \land <var:I4> = <nat:1> * <var:s> \} \end{eqnarray} Allowing running the series of instructions gives : \begin{eqnarray} <var:I4> := <var:I4> * <var:f> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> * <var:s> ^ <nat:2> \land <var:I4> = <nat:1> * <var:s> ^ <nat:2> \} \\ <var:I4> := <var:I4> * <var:f> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> * <var:s> ^ <nat:2> \land <var:I4> = <nat:1> * <var:s> ^ <nat:3> \} \\ <var:I4> := <var:I4> * <var:f> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> * <var:s> ^ <nat:2> \land <var:I4> = <nat:1> * <var:s> ^ <nat:4> \} \\ <var:M> := <var:I4> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:I2> = <nat:2> * <var:s> ^ <nat:2> \land <var:M> = <nat:1> * <var:s> ^ <nat:4> \} \\ <var:M> := <var:M> + <var:I2> ; \\ \{ <var:f> = <var:s> \land <var:I0> = <nat:4> \land <var:M> = <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:I0> \\ \{ <var:f> = <var:s> \land <var:M> = <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> \} \end{eqnarray} Given the preceding argument , the series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I4> : string := " <var:I4> " . Definition <def:poly> := <var:I0> := <nat:4> ; <var:I2> := <nat:2> ; <var:I2> := <var:I2> * <var:f> ; <var:I2> := <var:I2> * <var:f> ; <var:I4> := <nat:1> ; <var:I4> := <var:I4> * <var:f> ; <var:I4> := <var:I4> * <var:f> ; <var:I4> := <var:I4> * <var:f> ; <var:I4> := <var:I4> * <var:f> ; <var:M> := <var:I4> ; <var:M> := <var:M> + <var:I2> ; <var:M> := <var:M> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:f> = <var:s> }} <def:poly> {{ <var:M> = <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:I4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:I4> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:I4> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:I4> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:I4> = <nat:1> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:I2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:M> = <nat:1> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:I0> = <nat:4> /\ <var:M> = <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:M> = <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 