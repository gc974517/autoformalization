\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p> := <nat:4> ; <var:p> := <nat:3> + <var:p> * <var:C> ; <var:p> := <var:p> * <var:C> ; <var:p> := <nat:1> + <var:p> * <var:C> ; <var:p> := <nat:3> + <var:p> * <var:C> ; <var:p> := <nat:3> + <var:p> * <var:C> ; <var:p> := <nat:1> + <var:p> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:C> = <var:T> $ prior to the execution of the segment of code , then we have $ <var:p> = <nat:4> \cdot <var:T> ^ <nat:6> + <nat:3> \cdot <var:T> ^ <nat:5> + <nat:1> \cdot <var:T> ^ <nat:3> + <nat:3> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning yields : \begin{eqnarray} \{ <var:C> = <var:T> \} \\ <var:p> := <nat:4> ; \\ \{ <var:C> = <var:T> \land <var:p> = <nat:4> \} \\ <var:p> := <nat:3> + <var:p> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:p> = <nat:4> \times <var:T> + <nat:3> \} \\ <var:p> := <var:p> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:p> = <nat:4> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + \} \\ <var:p> := <nat:1> + <var:p> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:p> = <nat:4> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> + <nat:1> \} \\ <var:p> := <nat:3> + <var:p> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:p> = <nat:4> \times <var:T> ^ <nat:4> + <nat:3> \times <var:T> ^ <nat:3> + <nat:1> \times <var:T> + <nat:3> \} \\ <var:p> := <nat:3> + <var:p> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:p> = <nat:4> \times <var:T> ^ <nat:5> + <nat:3> \times <var:T> ^ <nat:4> + <nat:1> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + <nat:3> \} \\ <var:p> := <nat:1> + <var:p> * <var:C> \\ \{ <var:C> = <var:T> \land <var:p> = <nat:4> \times <var:T> ^ <nat:6> + <nat:3> \times <var:T> ^ <nat:5> + <nat:1> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + <nat:1> \} \end{eqnarray} Given the preceding argument , this program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:4> ; <var:p> := <nat:3> + <var:p> * <var:C> ; <var:p> := <var:p> * <var:C> ; <var:p> := <nat:1> + <var:p> * <var:C> ; <var:p> := <nat:3> + <var:p> * <var:C> ; <var:p> := <nat:3> + <var:p> * <var:C> ; <var:p> := <nat:1> + <var:p> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:C> = <var:T> }} <def:poly> {{ <var:p> = <nat:4> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:p> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:p> = <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:p> = <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:p> = <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:p> = <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:p> = <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:p> = <nat:4> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 