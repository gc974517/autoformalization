\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V> := <nat:2> ; <var:V> := <nat:2> + <var:V> * <var:U> ; <var:V> := <nat:4> + <var:V> * <var:U> ; <var:V> := <nat:3> + <var:V> * <var:U> ; <var:V> := <nat:3> + <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> ; <var:V> := <var:V> * <var:U> ; <var:V> := <nat:2> + <var:V> * <var:U> ; <var:V> := <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> ; <var:V> := <nat:2> + <var:V> * <var:U> ; <var:V> := <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:U> = <var:D> $ --- for every positive numbers $ <var:D> $ --- ahead of the execution of this list of commands it follows that we have $ <var:V> = <nat:2> \times <var:D> ^ <nat:13> + <nat:2> \times <var:D> ^ <nat:12> + <nat:4> \times <var:D> ^ <nat:11> + <nat:3> \times <var:D> ^ <nat:10> + <nat:3> \times <var:D> ^ <nat:9> + <nat:1> \times <var:D> ^ <nat:8> + <nat:1> \times <var:D> ^ <nat:7> + <nat:2> \times <var:D> ^ <nat:5> + <nat:1> \times <var:D> ^ <nat:3> + <nat:2> \times <var:D> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:U> = <var:D> \} \\ <var:V> := <nat:2> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \} \\ <var:V> := <nat:2> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> + <nat:2> \} \\ <var:V> := <nat:4> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:4> \} \\ <var:V> := <nat:3> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:3> \} \\ <var:V> := <nat:3> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:3> \} \\ <var:V> := <nat:1> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:5> + <nat:2> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:1> \} \\ <var:V> := <nat:1> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:6> + <nat:2> \cdot <var:D> ^ <nat:5> + <nat:4> \cdot <var:D> ^ <nat:4> + <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:1> \} \end{eqnarray} Continuing running this program produces : \begin{eqnarray} <var:V> := <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:7> + <nat:2> \cdot <var:D> ^ <nat:6> + <nat:4> \cdot <var:D> ^ <nat:5> + <nat:3> \cdot <var:D> ^ <nat:4> + <nat:3> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + \} \\ <var:V> := <nat:2> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:8> + <nat:2> \cdot <var:D> ^ <nat:7> + <nat:4> \cdot <var:D> ^ <nat:6> + <nat:3> \cdot <var:D> ^ <nat:5> + <nat:3> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:2> \} \\ <var:V> := <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:9> + <nat:2> \cdot <var:D> ^ <nat:8> + <nat:4> \cdot <var:D> ^ <nat:7> + <nat:3> \cdot <var:D> ^ <nat:6> + <nat:3> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> + \} \\ <var:V> := <nat:1> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:10> + <nat:2> \cdot <var:D> ^ <nat:9> + <nat:4> \cdot <var:D> ^ <nat:8> + <nat:3> \cdot <var:D> ^ <nat:7> + <nat:3> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:1> \} \\ <var:V> := <nat:2> + <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:11> + <nat:2> \cdot <var:D> ^ <nat:10> + <nat:4> \cdot <var:D> ^ <nat:9> + <nat:3> \cdot <var:D> ^ <nat:8> + <nat:3> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> + <nat:2> \} \\ <var:V> := <var:V> * <var:U> ; \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:12> + <nat:2> \cdot <var:D> ^ <nat:11> + <nat:4> \cdot <var:D> ^ <nat:10> + <nat:3> \cdot <var:D> ^ <nat:9> + <nat:3> \cdot <var:D> ^ <nat:8> + <nat:1> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:2> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + \} \\ <var:V> := <nat:1> + <var:V> * <var:U> \\ \{ <var:U> = <var:D> \land <var:V> = <nat:2> \cdot <var:D> ^ <nat:13> + <nat:2> \cdot <var:D> ^ <nat:12> + <nat:4> \cdot <var:D> ^ <nat:11> + <nat:3> \cdot <var:D> ^ <nat:10> + <nat:3> \cdot <var:D> ^ <nat:9> + <nat:1> \cdot <var:D> ^ <nat:8> + <nat:1> \cdot <var:D> ^ <nat:7> + <nat:2> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:1> \} \end{eqnarray} Therefore , the list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:2> ; <var:V> := <nat:2> + <var:V> * <var:U> ; <var:V> := <nat:4> + <var:V> * <var:U> ; <var:V> := <nat:3> + <var:V> * <var:U> ; <var:V> := <nat:3> + <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> ; <var:V> := <var:V> * <var:U> ; <var:V> := <nat:2> + <var:V> * <var:U> ; <var:V> := <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> ; <var:V> := <nat:2> + <var:V> * <var:U> ; <var:V> := <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:U> = <var:D> }} <def:poly> {{ <var:V> = <nat:2> * <var:D> ^ <nat:13> + <nat:2> * <var:D> ^ <nat:12> + <nat:4> * <var:D> ^ <nat:11> + <nat:3> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:1> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:9> + <nat:2> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:10> + <nat:2> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:11> + <nat:2> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:9> + <nat:3> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:12> + <nat:2> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:3> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:V> = <nat:2> * <var:D> ^ <nat:13> + <nat:2> * <var:D> ^ <nat:12> + <nat:4> * <var:D> ^ <nat:11> + <nat:3> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:1> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 