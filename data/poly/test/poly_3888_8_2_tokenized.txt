\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:3> + <var:U> * <var:w> ; <var:U> := <var:U> * <var:w> ; <var:U> := <nat:2> + <var:U> * <var:w> ; <var:U> := <var:U> * <var:w> ; <var:U> := <nat:3> + <var:U> * <var:w> ; <var:U> := <nat:3> + <var:U> * <var:w> ; <var:U> := <nat:3> + <var:U> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:w> = <var:G> $ ( given every positive numbers $ <var:G> $ ) prior to the execution of this segment of code , it must be that we have $ <var:U> = <nat:3> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> $ when series of instructions exits . \end{theorem} \begin{proof} The flow of logic for the list of instructions is evident by usual Hoare logic . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:G> \} & <var:U> := <nat:3> & \{ <var:w> = <var:G> \land <var:U> = <nat:3> \} \\ \{ <var:w> = <var:G> \land <var:U> = <nat:3> \} & <var:U> := <nat:3> + <var:U> * <var:w> & \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> + <nat:3> \} \\ \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> + <nat:3> \} & <var:U> := <var:U> * <var:w> & \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> + \} \\ \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> + \} & <var:U> := <nat:2> + <var:U> * <var:w> & \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> + <nat:2> \} \\ \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> + <nat:2> \} & <var:U> := <var:U> * <var:w> & \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:4> + <nat:3> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> + \} \\ \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:4> + <nat:3> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> + \} & <var:U> := <nat:3> + <var:U> * <var:w> & \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:5> + <nat:3> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:2> + <nat:3> \} \\ \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:5> + <nat:3> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:2> + <nat:3> \} & <var:U> := <nat:3> + <var:U> * <var:w> & \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:6> + <nat:3> \times <var:G> ^ <nat:5> + <nat:2> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> + <nat:3> \} \\ \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:6> + <nat:3> \times <var:G> ^ <nat:5> + <nat:2> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> + <nat:3> \} & <var:U> := <nat:3> + <var:U> * <var:w& \{ <var:w> = <var:G> \land <var:U> = <nat:3> \times <var:G> ^ <nat:7> + <nat:3> \times <var:G> ^ <nat:6> + <nat:2> \times <var:G> ^ <nat:4> + <nat:3> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <nat:3> + <var:U> * <var:w> ; <var:U> := <var:U> * <var:w> ; <var:U> := <nat:2> + <var:U> * <var:w> ; <var:U> := <var:U> * <var:w> ; <var:U> := <nat:3> + <var:U> * <var:w> ; <var:U> := <nat:3> + <var:U> * <var:w> ; <var:U> := <nat:3> + <var:U> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:w> = <var:G> }} <def:poly> {{ <var:U> = <nat:3> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:U> = <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:U> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:U> = <nat:3> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:U> = <nat:3> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:U> = <nat:3> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:U> = <nat:3> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:U> = <nat:3> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 