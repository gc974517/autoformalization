\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:V> ; <var:e2> := <nat:4> ; <var:e2> := <var:e2> * <var:V> ; <var:e2> := <var:e2> * <var:V> ; <var:e3> := <nat:4> ; <var:e3> := <var:e3> * <var:V> ; <var:e3> := <var:e3> * <var:V> ; <var:e3> := <var:e3> * <var:V> ; <var:v> := <var:e3> ; <var:v> := <var:v> + <var:e2> ; <var:v> := <var:v> + <var:e1> ; <var:v> := <var:v> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Allow it to hold that $ <var:V> = <var:G> $ taking positive numbers $ <var:G> $ prior to interpreting the list of instructions then we see $ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:V> = <var:G> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \} \\ <var:e1> := <nat:7> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> \} \\ <var:e1> := <var:e1> * <var:V> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \} \\ <var:e2> := <nat:4> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:e2> = <nat:4> \} \\ <var:e2> := <var:e2> * <var:V> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:e2> = <nat:4> * <var:G> \} \\ <var:e2> := <var:e2> * <var:V> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:e2> = <nat:4> * <var:G> ^ <nat:2> \} \\ <var:e3> := <nat:4> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:e2> = <nat:4> * <var:G> ^ <nat:2> \land <var:e3> = <nat:4> \} \\ <var:e3> := <var:e3> * <var:V> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:e2> = <nat:4> * <var:G> ^ <nat:2> \land <var:e3> = <nat:4> * <var:G> \} \\ <var:e3> := <var:e3> * <var:V> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:e2> = <nat:4> * <var:G> ^ <nat:2> \land <var:e3> = <nat:4> * <var:G> ^ <nat:2> \} \\ <var:e3> := <var:e3> * <var:V> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:e2> = <nat:4> * <var:G> ^ <nat:2> \land <var:e3> = <nat:4> * <var:G> ^ <nat:3> \} \\ <var:v> := <var:e3> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:e2> = <nat:4> * <var:G> ^ <nat:2> \land <var:v> = <nat:4> * <var:G> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:e2> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:G> \land <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:e1> ; \\ \{ <var:V> = <var:G> \land <var:e0> = <nat:7> \land <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:7> * <var:G> \} \\ <var:v> := <var:v> + <var:e0> \\ \{ <var:V> = <var:G> \land <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:7> \} \end{eqnarray} As a result , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:V> ; <var:e2> := <nat:4> ; <var:e2> := <var:e2> * <var:V> ; <var:e2> := <var:e2> * <var:V> ; <var:e3> := <nat:4> ; <var:e3> := <var:e3> * <var:V> ; <var:e3> := <var:e3> * <var:V> ; <var:e3> := <var:e3> * <var:V> ; <var:v> := <var:e3> ; <var:v> := <var:v> + <var:e2> ; <var:v> := <var:v> + <var:e1> ; <var:v> := <var:v> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:V> = <var:G> }} <def:poly> {{ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:e2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:e2> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:e2> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:e2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:e2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:e2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:e2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:e2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:v> = <nat:4> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:G> /\ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:e0> = <nat:7> /\ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 