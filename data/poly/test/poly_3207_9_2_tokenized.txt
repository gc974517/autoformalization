\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <nat:2> + <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <nat:3> + <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <nat:3> + <var:f> * <var:S> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Allow $ <var:S> = <var:B> $ ahead of the execution of this code segment , it follows that $ <var:f> = <nat:1> \cdot <var:B> ^ <nat:8> + <nat:2> \cdot <var:B> ^ <nat:7> + <nat:4> \cdot <var:B> ^ <nat:6> + <nat:3> \cdot <var:B> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:S> = <var:B> \} \\ <var:f> := <nat:1> ; \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> \} \\ <var:f> := <nat:2> + <var:f> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> * <var:B> + <nat:2> \} \\ <var:f> := <nat:4> + <var:f> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> \} \\ <var:f> := <var:f> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + \} \\ <var:f> := <var:f> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + \} \\ <var:f> := <nat:3> + <var:f> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> \} \end{eqnarray} Advancing the evaluation of this list of instructions returns : \begin{eqnarray} <var:f> := <var:f> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> + \} \\ <var:f> := <var:f> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:2> + \} \\ <var:f> := <nat:3> + <var:f> * <var:S> \\ \{ <var:S> = <var:B> \land <var:f> = <nat:1> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:3> + <nat:3> \} \end{eqnarray} Given the above , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:1> ; <var:f> := <nat:2> + <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <nat:3> + <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <nat:3> + <var:f> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:S> = <var:B> }} <def:poly> {{ <var:f> = <nat:1> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:f> = <nat:1> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 