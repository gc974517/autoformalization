\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:x> := <nat:1> ; <var:x> := <nat:1> + <var:x> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:w> = <var:q> $ before the execution of the list of instructions it holds that we see $ <var:x> = <nat:1> \times <var:q> + <nat:1> $ once series of instructions has finished . \end{theorem} \begin{proof} Proving correctness for this set of instructions can be seen using typical Hoare techniques . Moving forward , the variable binding command \verb | <var:x> := <nat:1> ; | . This code takes the precondition $ \{ <var:w> = <var:q> \} $ into the postcondition $ \{ <var:w> = <var:q> \land <var:x> = <nat:1> \} $ . Keeping momentum , the assignment command \verb | <var:x> := <nat:1> + <var:x> * <var:w> | . This statement advances the precondition $ \{ <var:w> = <var:q> \land <var:x> = <nat:1> \} $ toward the condition $ \{ <var:w> = <var:q> \land <var:x> = <nat:1> * <var:q> + <nat:1> \} $ . This is guaranteed using the assignment law in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:1> ; <var:x> := <nat:1> + <var:x> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:w> = <var:q> }} <def:poly> {{ <var:x> = <nat:1> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:x> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:x> = <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 