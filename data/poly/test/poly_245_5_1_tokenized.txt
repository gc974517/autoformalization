\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:V1> := <var:H> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:2> ; <var:Y> := <var:V1> <var:Y> := <var:Y> + <var:V0> \end{verbatim} Given it to be that $ <var:H> = <var:R> $ ahead of running this code , it holds that we have $ <var:Y> = <nat:2> * <var:R> + <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:H> = <var:R> \} \\ <var:V1> := <var:H> ; \\ \{ <var:H> = <var:R> \land <var:V1> = <var:R> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:H> = <var:R> \land <var:V1> = <var:R> \land <var:V0> = <nat:4> \} \\ <var:V1> := <var:V1> * <nat:2> ; \\ \{ <var:H> = <var:R> \land <var:V1> = <nat:2> \times <var:R> \land <var:V0> = <nat:4> \} \\ <var:Y> := <var:V1> \\ \{ <var:H> = <var:R> \land <var:V0> = <nat:4> \land <var:Y> = <nat:2> \times <var:R> \} \\ <var:Y> := <var:Y> + <var:V0> \\ \{ <var:H> = <var:R> \land <var:Y> = <nat:2> \times <var:R> + <nat:4> \} \end{eqnarray} Allowing the execution of our set of instructions yields : \begin{eqnarray} \end{eqnarray} As a consequence , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:H> = <var:R> }} <var:V1> := <var:H> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:2> ; <var:Y> := <var:V1> <var:Y> := <var:Y> + <var:V0> {{ <var:Y> = <nat:2> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:V1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:V1> = <var:R> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:V1> = <nat:2> * <var:R> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:V0> = <nat:4> /\ <var:Y> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:Y> = <nat:2> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 