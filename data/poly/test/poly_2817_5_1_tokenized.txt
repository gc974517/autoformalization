\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:w> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:2> ; <var:G> := <var:e1> <var:G> := <var:G> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:w> = <var:l> $ --- given every positive integer coefficients $ <var:l> $ --- prior to executing this series of commands it must be that we see $ <var:G> = <nat:2> * <var:l> + <nat:1> $ . \end{theorem} \begin{proof} Using typical Hoare techniques yields : \begin{eqnarray} \{ <var:w> = <var:l> \} \\ <var:e1> := <var:w> ; \\ \{ <var:w> = <var:l> \land <var:e1> = <var:l> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:w> = <var:l> \land <var:e1> = <var:l> \land <var:e0> = <nat:1> \} \\ <var:e1> := <var:e1> * <nat:2> ; \\ \{ <var:w> = <var:l> \land <var:e1> = <nat:2> * <var:l> \land <var:e0> = <nat:1> \} \\ <var:G> := <var:e1> \\ \{ <var:w> = <var:l> \land <var:e0> = <nat:1> \land <var:G> = <nat:2> * <var:l> \} \\ <var:G> := <var:G> + <var:e0> \\ \{ <var:w> = <var:l> \land <var:G> = <nat:2> * <var:l> + <nat:1> \} \end{eqnarray} Thus , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:w> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:2> ; <var:G> := <var:e1> <var:G> := <var:G> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:w> = <var:l> }} <def:poly> {{ <var:G> = <nat:2> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:e1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:e1> = <var:l> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:e1> = <nat:2> * <var:l> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:e0> = <nat:1> /\ <var:G> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:G> = <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 