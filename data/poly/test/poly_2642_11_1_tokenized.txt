\begin{document} \begin{theorem} We define the following list of commands as \begin{verbatim} <var:f1> := <var:U> ; <var:f2> := <var:f1> * <var:U> ; <var:f3> := <var:f2> * <var:U> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:4> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:2> ; <var:h> := <var:f3> <var:h> := <var:h> + <var:f2> <var:h> := <var:h> + <var:f1> <var:h> := <var:h> + <var:f0> \end{verbatim} Allowing --- given some positive integer coefficients $ <var:c> $ --- $ <var:U> = <var:c> $ ahead of evaluating the segment of code , then we have $ <var:h> = <nat:2> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:7> $ after set of commands has finished . \end{theorem} \begin{proof} Observe that the following decorated code segment . \begin{eqnarray} \{ <var:U> = <var:c> \} \\ <var:f1> := <var:U> ; \\ \{ <var:U> = <var:c> \land <var:f1> = <var:c> \} \\ <var:f2> := <var:f1> * <var:U> ; \\ \{ <var:U> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:U> ; \\ \{ <var:U> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \} \\ <var:f0> := <nat:7> ; \\ \{ <var:U> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:7> \} \\ <var:f1> := <var:f1> * <nat:4> ; \\ \{ <var:U> = <var:c> \land <var:f1> = <nat:4> * <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:7> \} \\ <var:f2> := <var:f2> * <nat:1> ; \\ \{ <var:U> = <var:c> \land <var:f1> = <nat:4> * <var:c> \land <var:f2> = <nat:1> * <var:c> ^ <nat:2> \land <var:f3> = <var:c> ^ <nat:3> \land <var:f0> = <nat:7> \} \\ <var:f3> := <var:f3> * <nat:2> ; \\ \{ <var:U> = <var:c> \land <var:f1> = <nat:4> * <var:c> \land <var:f2> = <nat:1> * <var:c> ^ <nat:2> \land <var:f3> = <nat:2> * <var:c> ^ <nat:3> \land <var:f0> = <nat:7> \} \\ <var:h> := <var:f3> \\ \{ <var:U> = <var:c> \land <var:f1> = <nat:4> * <var:c> \land <var:f2> = <nat:1> * <var:c> ^ <nat:2> \land <var:f0> = <nat:7> \land <var:h> = <nat:2> * <var:c> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:f2> \\ \{ <var:U> = <var:c> \land <var:f1> = <nat:4> * <var:c> \land <var:f0> = <nat:7> \land <var:h> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:f1> \\ \{ <var:U> = <var:c> \land <var:f0> = <nat:7> \land <var:h> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> \} \\ <var:h> := <var:h> + <var:f0> \\ \{ <var:U> = <var:c> \land <var:h> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:U> = <var:c> }} <var:f1> := <var:U> ; <var:f2> := <var:f1> * <var:U> ; <var:f3> := <var:f2> * <var:U> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:4> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:2> ; <var:h> := <var:f3> <var:h> := <var:h> + <var:f2> <var:h> := <var:h> + <var:f1> <var:h> := <var:h> + <var:f0> {{ <var:h> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <var:c> /\ <var:f2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <var:c> /\ <var:f2> = <var:c> ^ <nat:2> /\ <var:f3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <var:c> /\ <var:f2> = <var:c> ^ <nat:2> /\ <var:f3> = <var:c> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <nat:4> * <var:c> /\ <var:f2> = <var:c> ^ <nat:2> /\ <var:f3> = <var:c> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <nat:4> * <var:c> /\ <var:f2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:f3> = <var:c> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <nat:4> * <var:c> /\ <var:f2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:f3> = <nat:2> * <var:c> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <nat:4> * <var:c> /\ <var:f2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:f0> = <nat:7> /\ <var:h> = <nat:2> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f1> = <nat:4> * <var:c> /\ <var:f0> = <nat:7> /\ <var:h> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f0> = <nat:7> /\ <var:h> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:h> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 