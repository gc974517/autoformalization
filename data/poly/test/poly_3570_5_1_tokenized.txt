\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:d1> := <var:X> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:9> ; <var:y> := <var:d1> <var:y> := <var:y> + <var:d0> \end{verbatim} Given it to be that $ <var:X> = <var:v> $ ahead of executing this set of commands , it must be that we see $ <var:y> = <nat:9> \times <var:v> + <nat:1> $ once code segment terminates . \end{theorem} \begin{proof} The method of proof for our list of commands is shown by standard Hoare logic . Paying attention to the next piece of code contained in the code segment , the variable binding line \verb | <var:d1> := <var:X> ; | . This transfers the condition $ \{ <var:X> = <var:v> \} $ toward the condition $ \{ <var:X> = <var:v> \land <var:d1> = <var:v> \} $ . Moving on to the upcoming statement found in our set of commands , we see the environment update code \verb | <var:d0> := <nat:1> ; | . This moves the precondition $ \{ <var:X> = <var:v> \land <var:d1> = <var:v> \} $ to the postcondition $ \{ <var:X> = <var:v> \land <var:d1> = <var:v> \land <var:d0> = <nat:1> \} $ . After , we see the environment update command \verb | <var:d1> := <var:d1> * <nat:9> ; | . This statement takes the precondition $ \{ <var:X> = <var:v> \land <var:d1> = <var:v> \land <var:d0> = <nat:1> \} $ to the condition $ \{ <var:X> = <var:v> \land <var:d1> = <nat:9> \times <var:v> \land <var:d0> = <nat:1> \} $ . Stepping through , we see the command \verb | <var:y> := <var:d1> | . This code advances the precondition $ \{ <var:X> = <var:v> \land <var:d1> = <nat:9> \times <var:v> \land <var:d0> = <nat:1> \} $ as the postcondition $ \{ <var:X> = <var:v> \land <var:d0> = <nat:1> \land <var:y> = <nat:9> \times <var:v> \} $ . Shifting focus toward the upcoming step in the program , the binding command yielding $ <var:y> + <var:d0$ into $ <var:y>$ . This redefines $ \{ <var:X> = <var:v> \land <var:d0> = <nat:1> \land <var:y> = <nat:9> \times <var:v> \} $ toward $ \{ <var:X> = <var:v> \land <var:y> = <nat:9> \times <var:v> + <nat:1> \} $ . This is deduced using the assignment scheme given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:X> = <var:v> }} <var:d1> := <var:X> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:9> ; <var:y> := <var:d1> <var:y> := <var:y> + <var:d0> {{ <var:y> = <nat:9> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:d1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:d1> = <var:v> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:d1> = <nat:9> * <var:v> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:d0> = <nat:1> /\ <var:y> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:y> = <nat:9> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 