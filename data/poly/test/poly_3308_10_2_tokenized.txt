\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:C> := <nat:1> ; <var:C> := <nat:2> + <var:C> * <var:x> ; <var:C> := <nat:1> + <var:C> * <var:x> ; <var:C> := <nat:3> + <var:C> * <var:x> ; <var:C> := <nat:1> + <var:C> * <var:x> ; <var:C> := <nat:4> + <var:C> * <var:x> ; <var:C> := <nat:3> + <var:C> * <var:x> ; <var:C> := <nat:3> + <var:C> * <var:x> ; <var:C> := <var:C> * <var:x> ; <var:C> := <nat:3> + <var:C> * <var:x> \end{verbatim} Assume it to hold that $ <var:x> = <var:N> $ prior to evaluating the list of instructions , it follows that we have $ <var:C> = <nat:1> \cdot <var:N> ^ <nat:9> + <nat:2> \cdot <var:N> ^ <nat:8> + <nat:1> \cdot <var:N> ^ <nat:7> + <nat:3> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:3> $ once code has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be demonstrated through standard Hoare techniques . Jumping to the subsequent line of code contained in the list of instructions , we see the assignment statement \verb | <var:C> := <nat:1> ; | . This moves the precondition $ \{ <var:x> = <var:N> \} $ to the postcondition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \} $ . This is known to be sound through the assignment inference rule from standard Hoare logic . Moving forward to the upcoming line of code in our list of commands , we have the binding statement \verb | <var:C> := <nat:2> + <var:C> * <var:x> ; | . This redefines the precondition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \} $ toward the condition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> + <nat:2> \} $ . Focusing on the following command found in the series of commands , we see the environment update statement yielding $ <nat:1> + <var:C> * <var:x> $ into $ <var:C>$ . This command moves the precondition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> + <nat:2> \} $ into $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:1> \} $ . After , we have the variable binding line \verb | <var:C> := <nat:3> + <var:C> * <var:x> ; | . This transfers $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:1> \} $ as the postcondition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:3> \} $ . This is known to be sound through the assignment inference rule in usual Hoare logic . Paying attention to the upcoming piece of code contained in our code segment , we have the variable assignmet line assigning $ <nat:1> + <var:C> * <var:x> $ to $ <var:C>$ . This advances $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:3> \} $ to $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:4> + <nat:2> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:1> \} $ . This is ensured by the assignment scheme of usual Hoare reasoning . Next , the environment update code \verb | <var:C> := <nat:4> + <var:C> * <var:x> ; | . This code transfers the precondition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:4> + <nat:2> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:1> \} $ into $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:5> + <nat:2> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:4> \} $ . This is given using the assignment inference rule obtained from standard Hoare logic . Advancing , we see the assignment line \verb | <var:C> := <nat:3> + <var:C> * <var:x> ; | . This code moves the condition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:5> + <nat:2> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:4> \} $ toward $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:6> + <nat:2> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:3> \} $ . Shifting focus toward the following piece of code found in our segment of code , the variable update command \verb | <var:C> := <nat:3> + <var:C> * <var:x> ; | . This statement moves the precondition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:6> + <nat:2> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:3> \} $ into $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:7> + <nat:2> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:3> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:3> \} $ . This is ensured with the assignment law obtained from standard Hoare logic . Shifting focus toward the following command seen in the set of instructions , we see the variable update command \verb | <var:C> := <var:C> * <var:x> ; | . This command takes $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:7> + <nat:2> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:3> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:3> \} $ toward $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:8> + <nat:2> \cdot <var:N> ^ <nat:7> + <nat:1> \cdot <var:N> ^ <nat:6> + <nat:3> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + \} $ . Going forward , the variable assignmet command \verb | <var:C> := <nat:3> + <var:C> * <var:x> | . This advances the precondition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:8> + <nat:2> \cdot <var:N> ^ <nat:7> + <nat:1> \cdot <var:N> ^ <nat:6> + <nat:3> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + \} $ toward the postcondition $ \{ <var:x> = <var:N> \land <var:C> = <nat:1> \cdot <var:N> ^ <nat:9> + <nat:2> \cdot <var:N> ^ <nat:8> + <nat:1> \cdot <var:N> ^ <nat:7> + <nat:3> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:3> \} $ . This is given by the assignment rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:x> = <var:N> }} <var:C> := <nat:1> ; <var:C> := <nat:2> + <var:C> * <var:x> ; <var:C> := <nat:1> + <var:C> * <var:x> ; <var:C> := <nat:3> + <var:C> * <var:x> ; <var:C> := <nat:1> + <var:C> * <var:x> ; <var:C> := <nat:4> + <var:C> * <var:x> ; <var:C> := <nat:3> + <var:C> * <var:x> ; <var:C> := <nat:3> + <var:C> * <var:x> ; <var:C> := <var:C> * <var:x> ; <var:C> := <nat:3> + <var:C> * <var:x> {{ <var:C> = <nat:1> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:C> = <nat:1> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 