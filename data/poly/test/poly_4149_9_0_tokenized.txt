\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:4> ; <var:x1> := <nat:3> ; <var:x1> := <var:x1> * <var:I> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:I> ; <var:x2> := <var:x2> * <var:I> ; <var:N> := <var:x2> ; <var:N> := <var:N> + <var:x1> ; <var:N> := <var:N> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Given it to hold that $ <var:I> = <var:a> $ ahead of executing the program , it holds that we see $ <var:N> = <nat:4> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:4> $ once code segment has executed . \end{theorem} \begin{proof} The way to prove correctness for our code can be shown with standard Hoare logic . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:I> = <var:a> \} & <var:x0> := <nat:4> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \} \\ \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \} & <var:x1> := <nat:3> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \} \\ \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \} & <var:x1> := <var:x1> * <var:I> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \times <var:a> \} \\ \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \times <var:a> \} & <var:x2> := <nat:4> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \times <var:a> \land <var:x2> = <nat:4> \} \\ \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \times <var:a> \land <var:x2> = <nat:4> \} & <var:x2> := <var:x2> * <var:I> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \times <var:a> \land <var:x2> = <nat:4> \times <var:a> \} \end{tabular} Looking at the next steps found in the code , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:a> \} & <var:x0> := <nat:4> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \} \\ \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \} & <var:x1> := <nat:3> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \} \\ \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \} & <var:x1> := <var:x1> * <var:I> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \times <var:a> \} \\ \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \times <var:a> \} & <var:x2> := <nat:4> & \{ <var:I> = <var:a> \land <var:x0> = <nat:4> \land <var:x1> = <nat:3> \times <var:a> \land <var:x2> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:x1> := <nat:3> ; <var:x1> := <var:x1> * <var:I> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:I> ; <var:x2> := <var:x2> * <var:I> ; <var:N> := <var:x2> ; <var:N> := <var:N> + <var:x1> ; <var:N> := <var:N> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:I> = <var:a> }} <def:poly> {{ <var:N> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:3> * <var:a> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:3> * <var:a> /\ <var:x2> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:3> * <var:a> /\ <var:x2> = <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:3> * <var:a> /\ <var:N> = <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:x0> = <nat:4> /\ <var:N> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:N> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 