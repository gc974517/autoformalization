\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:3> ; <var:L> := <var:w0> \end{verbatim} Allowing it to be that $ <var:n> = <var:N> $ ahead of the evaluation of the series of instructions it must be that $ <var:L> = <nat:3> $ after code has terminated . \end{theorem} \begin{proof} Applying Hoare logic produces : \begin{eqnarray} \{ <var:n> = <var:N> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:n> = <var:N> \land <var:w0> = <nat:3> \} \end{eqnarray} Continuing the execution of the program gives us : \begin{eqnarray} <var:L> := <var:w0> \\ \{ <var:n> = <var:N> \land <var:L> = <nat:3> \} \end{eqnarray} As a result , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:n> = <var:N> }} <var:w0> := <nat:3> ; <var:L> := <var:w0> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:N> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:N> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 