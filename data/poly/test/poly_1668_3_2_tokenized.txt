\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:M> := <nat:1> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <nat:2> + <var:M> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:a> = <var:f> $ , for every natural coefficients $ <var:f> $ , ahead of the evaluation of the program , it must be that we see $ <var:M> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be done with typical Hoare techniques . Focusing on the next line in our series of commands , we see the variable update statement \verb | <var:M> := <nat:1> ; | . This advances $ \{ <var:a> = <var:f> \} $ to the condition $ \{ <var:a> = <var:f> \land <var:M> = <nat:1> \} $ . Advancing , we see the line \verb | <var:M> := <nat:4> + <var:M> * <var:a> ; | . This statement transfers the precondition $ \{ <var:a> = <var:f> \land <var:M> = <nat:1> \} $ to $ \{ <var:a> = <var:f> \land <var:M> = <nat:1> * <var:f> + <nat:4> \} $ . This is deduced using the assignment rule in Hoare logic . Paying attention to the subsequent statement in the set of instructions , we see the binding code \verb | <var:M> := <nat:2> + <var:M> * <var:a> | . This forwards $ \{ <var:a> = <var:f> \land <var:M> = <nat:1> * <var:f> + <nat:4> \} $ toward $ \{ <var:a> = <var:f> \land <var:M> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:1> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <nat:2> + <var:M> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:a> = <var:f> }} <def:poly> {{ <var:M> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:M> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:M> = <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:M> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 