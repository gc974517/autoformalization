\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:8> ; <var:S> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:W> = <var:X> $ prior to the evaluation of our code segment then we have $ <var:S> = <nat:8> $ . \end{theorem} \begin{proof} The argument for our code segment can be seen with Hoare reasoning . Going to the next step , we have \verb | { <var:W> = <var:X> } <var:U0> := <nat:8> { <var:W> = <var:X> \land <var:U0> = <nat:8> } | and \verb | { <var:W> = <var:X> \land <var:U0> = <nat:8> } <var:S> := <var:U0{ <var:W> = <var:X> \land <var:S> = <nat:8> } | . This is given through the variable assignmet inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:8> ; <var:S> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:W> = <var:X> }} <def:poly> {{ <var:S> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:S> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 