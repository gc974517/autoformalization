\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:3> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:W> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:W> ; <var:y2> := <var:y2> * <var:W> ; <var:t> := <var:y2> ; <var:t> := <var:t> + <var:y1> ; <var:t> := <var:t> + <var:y0> \end{verbatim} Given --- letting positive coefficients $ <var:K> $ --- it to be that $ <var:W> = <var:K> $ before the evaluation of this code segment it must be that $ <var:t> = <nat:7> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is demonstrated by usual Hoare reasoning . Jumping to the following pieces of code found in the list of commands , we see \verb | { <var:W> = <var:K> } <var:y0> := <nat:3> { <var:W> = <var:K> \land <var:y0> = <nat:3> } | , \verb | { <var:W> = <var:K> \land <var:y0> = <nat:3> } <var:y1> := <nat:1> { <var:W> = <var:K> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> } | and \verb | { <var:W> = <var:K> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> } <var:y1> := <var:y1> * <var:W> { <var:W> = <var:K> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> \times <var:K> } | . Advancing to the following lines seen in the series of instructions , we see \verb | { <var:W> = <var:K> } <var:y0> := <nat:3> { <var:W> = <var:K> \land <var:y0> = <nat:3> } | , \verb | { <var:W> = <var:K> \land <var:y0> = <nat:3> } <var:y1> := <nat:1> { <var:W> = <var:K> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> } | and \verb | { <var:W> = <var:K> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> } <var:y1> := <var:y1> * <var:W> { <var:W> = <var:K> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> \times <var:K> } | . Jumping to the upcoming steps found in our code segment , we have \verb | { <var:W> = <var:K> } <var:y0> := <nat:3> { <var:W> = <var:K> \land <var:y0> = <nat:3> } | and \verb | { <var:W> = <var:K> \land <var:y0> = <nat:3> } <var:y1> := <nat:1> { <var:W> = <var:K> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> } | . This is deduced through the variable update law of Hoare reasoning . Advancing to the following line of code found in our set of commands , we see \verb | { <var:W> = <var:K> } <var:y0> := <nat:3> { <var:W> = <var:K> \land <var:y0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:W> = <var:K> }} <var:y0> := <nat:3> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:W> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:W> ; <var:y2> := <var:y2> * <var:W> ; <var:t> := <var:y2> ; <var:t> := <var:t> + <var:y1> ; <var:t> := <var:t> + <var:y0> {{ <var:t> = <nat:7> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:K> /\ <var:y2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:K> /\ <var:y2> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:K> /\ <var:y2> = <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:K> /\ <var:t> = <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:y0> = <nat:3> /\ <var:t> = <nat:7> * <var:K> ^ <nat:2> + <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:K> /\ <var:t> = <nat:7> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 