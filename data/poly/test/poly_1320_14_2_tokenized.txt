\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:j> := <nat:4> ; <var:j> := <nat:2> + <var:j> * <var:k> ; <var:j> := <nat:1> + <var:j> * <var:k> ; <var:j> := <var:j> * <var:k> ; <var:j> := <var:j> * <var:k> ; <var:j> := <nat:3> + <var:j> * <var:k> ; <var:j> := <nat:2> + <var:j> * <var:k> ; <var:j> := <var:j> * <var:k> ; <var:j> := <nat:1> + <var:j> * <var:k> ; <var:j> := <var:j> * <var:k> ; <var:j> := <nat:4> + <var:j> * <var:k> ; <var:j> := <nat:1> + <var:j> * <var:k> ; <var:j> := <nat:1> + <var:j> * <var:k> ; <var:j> := <nat:3> + <var:j> * <var:k> \end{verbatim} Assuming that we have $ <var:k> = <var:I> $ ahead of the evaluation of this program it holds that we see $ <var:j> = <nat:4> \times <var:I> ^ <nat:13> + <nat:2> \times <var:I> ^ <nat:12> + <nat:1> \times <var:I> ^ <nat:11> + <nat:3> \times <var:I> ^ <nat:8> + <nat:2> \times <var:I> ^ <nat:7> + <nat:1> \times <var:I> ^ <nat:5> + <nat:4> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:I> \} \\ <var:j> := <nat:4> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> \} \\ <var:j> := <nat:2> + <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> + <nat:2> \} \\ <var:j> := <nat:1> + <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> \} \\ <var:j> := <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + \} \\ <var:j> := <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + \} \\ <var:j> := <nat:3> + <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> \} \\ <var:j> := <nat:2> + <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> + <nat:2> \} \\ <var:j> := <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + \} \\ <var:j> := <nat:1> + <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> \} \\ <var:j> := <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + \} \\ <var:j> := <nat:4> + <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> \} \\ <var:j> := <nat:1> + <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:11> + <nat:2> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:1> \} \\ <var:j> := <nat:1> + <var:j> * <var:k> ; \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:12> + <nat:2> * <var:I> ^ <nat:11> + <nat:1> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> \} \\ <var:j> := <nat:3> + <var:j> * <var:k> \\ \{ <var:k> = <var:I> \land <var:j> = <nat:4> * <var:I> ^ <nat:13> + <nat:2> * <var:I> ^ <nat:12> + <nat:1> * <var:I> ^ <nat:11> + <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> \} \end{eqnarray} Using Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:k> = <var:I> }} <var:j> := <nat:4> ; <var:j> := <nat:2> + <var:j> * <var:k> ; <var:j> := <nat:1> + <var:j> * <var:k> ; <var:j> := <var:j> * <var:k> ; <var:j> := <var:j> * <var:k> ; <var:j> := <nat:3> + <var:j> * <var:k> ; <var:j> := <nat:2> + <var:j> * <var:k> ; <var:j> := <var:j> * <var:k> ; <var:j> := <nat:1> + <var:j> * <var:k> ; <var:j> := <var:j> * <var:k> ; <var:j> := <nat:4> + <var:j> * <var:k> ; <var:j> := <nat:1> + <var:j> * <var:k> ; <var:j> := <nat:1> + <var:j> * <var:k> ; <var:j> := <nat:3> + <var:j> * <var:k> {{ <var:j> = <nat:4> * <var:I> ^ <nat:13> + <nat:2> * <var:I> ^ <nat:12> + <nat:1> * <var:I> ^ <nat:11> + <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:11> + <nat:2> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:12> + <nat:2> * <var:I> ^ <nat:11> + <nat:1> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:j> = <nat:4> * <var:I> ^ <nat:13> + <nat:2> * <var:I> ^ <nat:12> + <nat:1> * <var:I> ^ <nat:11> + <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 