\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:z> ; <var:l2> := <var:l1> * <var:z> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:4> ; <var:l2> := <var:l2> * <nat:9> ; <var:o> := <var:l2> <var:o> := <var:o> + <var:l1> <var:o> := <var:o> + <var:l0> \end{verbatim} Assuming it to be that $ <var:z> = <var:x> $ , assuming some positive integers $ <var:x> $ , prior to running this list of commands , it follows that we have $ <var:o> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> $ after set of commands has terminated . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be seen with Hoare reasoning . Advancing to the next lines of codefound in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:z> = <var:x> \} & <var:l1> := <var:z> & \{ <var:z> = <var:x> \land <var:l1> = <var:x> \} \\ \{ <var:z> = <var:x> \land <var:l1> = <var:x> \} & <var:l2> := <var:l1> * <var:z> & \{ <var:z> = <var:x> \land <var:l1> = <var:x> \land <var:l2> = <var:x> ^ <nat:2> \} \\ \{ <var:z> = <var:x> \land <var:l1> = <var:x> \land <var:l2> = <var:x> ^ <nat:2> \} & <var:l0> := <nat:2> & \{ <var:z> = <var:x> \land <var:l1> = <var:x> \land <var:l2> = <var:x> ^ <nat:2> \land <var:l0> = <nat:2> \} \\ \{ <var:z> = <var:x> \land <var:l1> = <var:x> \land <var:l2> = <var:x> ^ <nat:2> \land <var:l0> = <nat:2> \} & <var:l1> := <var:l1> * <nat:4> & \{ <var:z> = <var:x> \land <var:l1> = <nat:4> \cdot <var:x> \land <var:l2> = <var:x> ^ <nat:2> \land <var:l0> = <nat:2> \} \end{tabular} Moving on to the following commands found in our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:x> \} & <var:l1> := <var:z> & \{ <var:z> = <var:x> \land <var:l1> = <var:x> \} \\ \{ <var:z> = <var:x> \land <var:l1> = <var:x> \} & <var:l2> := <var:l1> * <var:z> & \{ <var:z> = <var:x> \land <var:l1> = <var:x> \land <var:l2> = <var:x> ^ <nat:2> \} \\ \{ <var:z> = <var:x> \land <var:l1> = <var:x> \land <var:l2> = <var:x> ^ <nat:2> \} & <var:l0> := <nat:2> & \{ <var:z> = <var:x> \land <var:l1> = <var:x> \land <var:l2> = <var:x> ^ <nat:2> \land <var:l0> = <nat:2> \} \end{tabular} Looking at the following line of code contained in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:z> = <var:x> \} & <var:l1> := <var:z> & \{ <var:z> = <var:x> \land <var:l1> = <var:x> \} \end{tabular} This is shown to be logically sound through the environment update inference rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:z> = <var:x> }} <var:l1> := <var:z> ; <var:l2> := <var:l1> * <var:z> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:4> ; <var:l2> := <var:l2> * <nat:9> ; <var:o> := <var:l2> <var:o> := <var:o> + <var:l1> <var:o> := <var:o> + <var:l0> {{ <var:o> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:l1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:l1> = <var:x> /\ <var:l2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:l1> = <var:x> /\ <var:l2> = <var:x> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:l1> = <nat:4> * <var:x> /\ <var:l2> = <var:x> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:l1> = <nat:4> * <var:x> /\ <var:l2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:l1> = <nat:4> * <var:x> /\ <var:l0> = <nat:2> /\ <var:o> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:l0> = <nat:2> /\ <var:o> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:o> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 