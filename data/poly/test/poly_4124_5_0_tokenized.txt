\begin{document} \begin{theorem} Define the following program in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:i> ; <var:U> := <var:s1> ; <var:U> := <var:U> + <var:s0> \end{verbatim} Allowing that we have $ <var:i> = <var:j> $ prior to running the program , then $ <var:U> = <nat:7> \cdot <var:j> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our code is given with Hoare logic . Advancing to the next line of code found in our program , the environment update line assigning $ <nat:4> $ toward $ <var:s0>$ . This line forwards the condition $ \{ <var:i> = <var:j> \} $ as $ \{ <var:i> = <var:j> \land <var:s0> = <nat:4> \} $ . Immediately following , we have the assignment line binding $ <nat:7> $ to $ <var:s1>$ . This moves the condition $ \{ <var:i> = <var:j> \land <var:s0> = <nat:4> \} $ toward the postcondition $ \{ <var:i> = <var:j> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> \} $ . Now , the variable binding code letting $ <var:s1> * <var:i> $ into $ <var:s1>$ . This code takes the condition $ \{ <var:i> = <var:j> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> \} $ to $ \{ <var:i> = <var:j> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> \cdot <var:j> \} $ . This is shown to be logically sound through the assignment law in usual Hoare reasoning . Advancing , the variable update line \verb | <var:U> := <var:s1> ; | . This advances $ \{ <var:i> = <var:j> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> \cdot <var:j> \} $ to the postcondition $ \{ <var:i> = <var:j> \land <var:s0> = <nat:4> \land <var:U> = <nat:7> \cdot <var:j> \} $ . This is sound using the assignment inference rule defined by standard Hoare reasoning . Immediately after , we see the variable assignmet command \verb | <var:U> := <var:U> + <var:s0> | . This line moves the precondition $ \{ <var:i> = <var:j> \land <var:s0> = <nat:4> \land <var:U> = <nat:7> \cdot <var:j> \} $ toward $ \{ <var:i> = <var:j> \land <var:U> = <nat:7> \cdot <var:j> + <nat:4> \} $ . This is ensured through the assignment rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:i> = <var:j> }} <var:s0> := <nat:4> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:i> ; <var:U> := <var:s1> ; <var:U> := <var:U> + <var:s0> {{ <var:U> = <nat:7> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:s0> = <nat:4> /\ <var:U> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:U> = <nat:7> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 