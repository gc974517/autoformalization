\begin{document} \begin{theorem} We define the following segment of code as \begin{verbatim} <var:T1> := <var:h> ; <var:T2> := <var:T1> * <var:h> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:4> ; <var:Z> := <var:T2> <var:Z> := <var:Z> + <var:T1> <var:Z> := <var:Z> + <var:T0> \end{verbatim} Assuming --- for some $ <var:Y> \in \mathbb{N} $ --- that we have $ <var:h> = <var:Y> $ prior to the execution of this set of commands , it must be that $ <var:Z> = <nat:4> \times <var:Y> ^ <nat:2> + <nat:7> \times <var:Y> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands can be accomplished using typical Hoare reasoning . Observing the proceeding line in the list of instructions , we have the variable binding code \verb | <var:T1> := <var:h> ; | . This code transfers $ \{ <var:h> = <var:Y> \} $ into the condition $ \{ <var:h> = <var:Y> \land <var:T1> = <var:Y> \} $ . This is deduced through the assignment law defined by usual Hoare logic . Moving forward to the proceeding line of code seen in the code segment , the assignment command \verb | <var:T2> := <var:T1> * <var:h> ; | . This line moves $ \{ <var:h> = <var:Y> \land <var:T1> = <var:Y> \} $ to the condition $ \{ <var:h> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \} $ . This is shown using the assignment law defined by usual Hoare techniques . Stepping through , we have the variable update code letting $ <nat:8> $ to $ <var:T0>$ . This advances the precondition $ \{ <var:h> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T0> = <nat:8> \} $ . Looking at the next piece of code found in our series of commands , we have the variable binding line yielding $ <var:T1> * <nat:7> $ to $ <var:T1>$ . This statement moves the condition $ \{ <var:h> = <var:Y> \land <var:T1> = <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T0> = <nat:8> \} $ into the postcondition $ \{ <var:h> = <var:Y> \land <var:T1> = <nat:7> * <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T0> = <nat:8> \} $ . Keeping momentum , the binding statement assigning $ <var:T2> * <nat:4> $ into $ <var:T2>$ . This command redefines the condition $ \{ <var:h> = <var:Y> \land <var:T1> = <nat:7> * <var:Y> \land <var:T2> = <var:Y> ^ <nat:2> \land <var:T0> = <nat:8> \} $ to the postcondition $ \{ <var:h> = <var:Y> \land <var:T1> = <nat:7> * <var:Y> \land <var:T2> = <nat:4> * <var:Y> ^ <nat:2> \land <var:T0> = <nat:8> \} $ . Moving on to the subsequent line contained in the segment of code , we have the code \verb | <var:Z> := <var:T2> | . This code forwards $ \{ <var:h> = <var:Y> \land <var:T1> = <nat:7> * <var:Y> \land <var:T2> = <nat:4> * <var:Y> ^ <nat:2> \land <var:T0> = <nat:8> \} $ toward the condition $ \{ <var:h> = <var:Y> \land <var:T1> = <nat:7> * <var:Y> \land <var:T0> = <nat:8> \land <var:Z> = <nat:4> * <var:Y> ^ <nat:2> \} $ . Keeping momentum , we see the assignment line binding $ <var:Z> + <var:T1$ as $ <var:Z>$ . This forwards $ \{ <var:h> = <var:Y> \land <var:T1> = <nat:7> * <var:Y> \land <var:T0> = <nat:8> \land <var:Z> = <nat:4> * <var:Y> ^ <nat:2> \} $ as $ \{ <var:h> = <var:Y> \land <var:T0> = <nat:8> \land <var:Z> = <nat:4> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> \} $ . This is shown to be logically sound with the assignment rule given by usual Hoare logic . Moving on , we have the variable update command assigning $ <var:Z> + <var:T0$ as $ <var:Z>$ . This command redefines the condition $ \{ <var:h> = <var:Y> \land <var:T0> = <nat:8> \land <var:Z> = <nat:4> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> \} $ into the condition $ \{ <var:h> = <var:Y> \land <var:Z> = <nat:4> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:h> = <var:Y> }} <var:T1> := <var:h> ; <var:T2> := <var:T1> * <var:h> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:4> ; <var:Z> := <var:T2> <var:Z> := <var:Z> + <var:T1> <var:Z> := <var:Z> + <var:T0> {{ <var:Z> = <nat:4> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:T1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:T1> = <var:Y> /\ <var:T2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:T1> = <var:Y> /\ <var:T2> = <var:Y> ^ <nat:2> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:T1> = <nat:7> * <var:Y> /\ <var:T2> = <var:Y> ^ <nat:2> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:T1> = <nat:7> * <var:Y> /\ <var:T2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:T1> = <nat:7> * <var:Y> /\ <var:T0> = <nat:8> /\ <var:Z> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:T0> = <nat:8> /\ <var:Z> = <nat:4> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:Z> = <nat:4> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 