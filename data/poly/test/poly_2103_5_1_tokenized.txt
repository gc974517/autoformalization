\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:c> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:4> ; <var:P> := <var:t1> <var:P> := <var:P> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:c> = <var:o> $ before interpreting the code it must be that we have $ <var:P> = <nat:4> \times <var:o> + <nat:2> $ after list of instructions finishes . \end{theorem} \begin{proof} Proving correctness for this set of instructions is clear by standard Hoare techniques . Moving forward , we see \begin{verbatim} { <var:c> = <var:o> } <var:t1> := <var:c> { <var:c> = <var:o> \land <var:t1> = <var:o> } { <var:c> = <var:o> \land <var:t1> = <var:o> } <var:t0> := <nat:2> { <var:c> = <var:o> \land <var:t1> = <var:o> \land <var:t0> = <nat:2> } { <var:c> = <var:o> \land <var:t1> = <var:o> \land <var:t0> = <nat:2> } <var:t1> := <var:t1> * <nat:4> { <var:c> = <var:o> \land <var:t1> = <nat:4> \times <var:o> \land <var:t0> = <nat:2> } { <var:c> = <var:o> \land <var:t1> = <nat:4> \times <var:o> \land <var:t0> = <nat:2> } <var:P> := <var:t1{ <var:c> = <var:o> \land <var:t0> = <nat:2> \land <var:P> = <nat:4> \times <var:o> } \end{verbatim} Honing in on the proceeding bit of code found in our list of instructions , we have \begin{verbatim} { <var:c> = <var:o> } <var:t1> := <var:c> { <var:c> = <var:o> \land <var:t1> = <var:o> } \end{verbatim} This is given by the law of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:c> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:4> ; <var:P> := <var:t1> <var:P> := <var:P> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:c> = <var:o> }} <def:poly> {{ <var:P> = <nat:4> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:t1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:t1> = <var:o> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:t1> = <nat:4> * <var:o> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:t0> = <nat:2> /\ <var:P> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:P> = <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 