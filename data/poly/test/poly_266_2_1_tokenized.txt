\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:O0> := <nat:2> ; <var:v> := <var:O0> \end{verbatim} Given that we have $ <var:X> = <var:Q> $ ( given $ <var:Q> $ ) before the evaluation of our code then we see $ <var:v> = <nat:2> $ when segment of code has finished executing . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives : \begin{eqnarray} \{ <var:X> = <var:Q> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:X> = <var:Q> \land <var:O0> = <nat:2> \} \\ <var:v> := <var:O0> \\ \{ <var:X> = <var:Q> \land <var:v> = <nat:2> \} \end{eqnarray} Considering the preceding argument , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:X> = <var:Q> }} <var:O0> := <nat:2> ; <var:v> := <var:O0> {{ <var:v> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:v> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 