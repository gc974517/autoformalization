\begin{document} \begin{theorem} Take a program as follows \begin{verbatim} <var:J> := <nat:1> ; <var:J> := <nat:3> + <var:J> * <var:a> ; <var:J> := <nat:4> + <var:J> * <var:a> ; <var:J> := <nat:4> + <var:J> * <var:a> ; <var:J> := <var:J> * <var:a> ; <var:J> := <nat:4> + <var:J> * <var:a> ; <var:J> := <nat:2> + <var:J> * <var:a> \end{verbatim} Assuming $ <var:a> = <var:R> $ with some natural numbers $ <var:R> $ before executing our code it must be that we have $ <var:J> = <nat:1> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> + <nat:2> $ once list of instructions finishes . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives : \begin{eqnarray} \{ <var:a> = <var:R> \} \\ <var:J> := <nat:1> ; \\ \{ <var:a> = <var:R> \land <var:J> = <nat:1> \} \\ <var:J> := <nat:3> + <var:J> * <var:a> ; \\ \{ <var:a> = <var:R> \land <var:J> = <nat:1> \times <var:R> + <nat:3> \} \\ <var:J> := <nat:4> + <var:J> * <var:a> ; \\ \{ <var:a> = <var:R> \land <var:J> = <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:4> \} \\ <var:J> := <nat:4> + <var:J> * <var:a> ; \\ \{ <var:a> = <var:R> \land <var:J> = <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:4> \} \\ <var:J> := <var:J> * <var:a> ; \\ \{ <var:a> = <var:R> \land <var:J> = <nat:1> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + \} \\ <var:J> := <nat:4> + <var:J> * <var:a> ; \\ \{ <var:a> = <var:R> \land <var:J> = <nat:1> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \} \\ <var:J> := <nat:2> + <var:J> * <var:a> \\ \{ <var:a> = <var:R> \land <var:J> = <nat:1> \times <var:R> ^ <nat:6> + <nat:3> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> + <nat:2> \} \end{eqnarray} Thusly , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:a> = <var:R> }} <var:J> := <nat:1> ; <var:J> := <nat:3> + <var:J> * <var:a> ; <var:J> := <nat:4> + <var:J> * <var:a> ; <var:J> := <nat:4> + <var:J> * <var:a> ; <var:J> := <var:J> * <var:a> ; <var:J> := <nat:4> + <var:J> * <var:a> ; <var:J> := <nat:2> + <var:J> * <var:a> {{ <var:J> = <nat:1> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:J> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:J> = <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:J> = <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:J> = <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:J> = <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:J> = <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:J> = <nat:1> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 