\begin{document} \begin{theorem} Consider the following list of commands as \begin{verbatim} <var:y1> := <var:D> ; <var:y2> := <var:y1> * <var:D> ; <var:y3> := <var:y2> * <var:D> ; <var:y4> := <var:y3> * <var:D> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:9> ; <var:y2> := <var:y2> * <nat:8> ; <var:y3> := <var:y3> * <nat:1> ; <var:y4> := <var:y4> * <nat:8> ; <var:C> := <var:y4> <var:C> := <var:C> + <var:y3> <var:C> := <var:C> + <var:y2> <var:C> := <var:C> + <var:y1> <var:C> := <var:C> + <var:y0> \end{verbatim} Assuming that we have $ <var:D> = <var:E> $ ahead of running our code , it must be that we have $ <var:C> = <nat:8> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:6> $ when segment of code has executed . \end{theorem} \begin{proof} The argument for our list of instructions is demonstrated through standard Hoare techniques . Jumping to the subsequent statement contained in our set of instructions , the variable binding statement \verb | <var:y1> := <var:D> ; | . This command transfers $ \{ <var:D> = <var:E> \} $ as the condition $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \} $ . Moving on to the subsequent line in our code segment , we see the variable binding statement \verb | <var:y2> := <var:y1> * <var:D> ; | . This forwards the condition $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \} $ as $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \} $ . Stepping forward , we have the statement \verb | <var:y3> := <var:y2> * <var:D> ; | . This moves $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \} $ as the condition $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \} $ . This is guaranteed by the assignment law found in usual Hoare reasoning . Going forward , we see the assignment line assigning $ <var:y3> * <var:D> $ into $ <var:y4>$ . This takes $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \} $ toward the postcondition $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \} $ . Moving forward to the proceeding piece of code seen in the series of instructions , we see the variable binding statement \verb | <var:y0> := <nat:6> ; | . This line takes the precondition $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \} $ as the condition $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ . This is rigorously given using the assignment scheme in standard Hoare logic . Going forward , we see the binding code \verb | <var:y1> := <var:y1> * <nat:9> ; | . This moves the precondition $ \{ <var:D> = <var:E> \land <var:y1> = <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ toward the postcondition $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ . This is deduced with the assignment inference rule from usual Hoare logic . Shifting focus toward the proceeding step found in the segment of code , the variable assignmet code giving $ <var:y2> * <nat:8> $ as $ <var:y2>$ . This takes $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ as the postcondition $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ . This is deduced through the assignment law defined in usual Hoare techniques . Moving on to the following line in the series of commands , we have the variable assignmet command assigning $ <var:y3> * <nat:1> $ toward $ <var:y3>$ . This line transfers $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y3> = <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ toward the condition $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ . This is sound with the assignment law found in usual Hoare techniques . Observing the following statement seen in our code segment , we have the assignment statement defining $ <var:y4> * <nat:8> $ as $ <var:y4>$ . This advances the condition $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:E> ^ <nat:3> \land <var:y4> = <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ into the postcondition $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:E> ^ <nat:3> \land <var:y4> = <nat:8> \cdot <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ . This is given through the assignment inference rule of typical Hoare techniques . Moving forward , the variable assignmet code \verb | <var:C> := <var:y4> | . This forwards $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:E> ^ <nat:3> \land <var:y4> = <nat:8> \cdot <var:E> ^ <nat:4> \land <var:y0> = <nat:6> \} $ to $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:E> ^ <nat:3> \land <var:y0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> \} $ . Going forward , we see the environment update line assigning $ <var:C> + <var:y3$ to $ <var:C>$ . This line advances $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:E> ^ <nat:3> \land <var:y0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> \} $ as the postcondition $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> \} $ . Honing in on the subsequent line of code in the set of instructions , the variable assignmet statement letting $ <var:C> + <var:y2$ toward $ <var:C>$ . This transfers $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:y0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> \} $ to the condition $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment rule defined in standard Hoare logic . Observing the upcoming line contained in our segment of code , we have the variable update statement binding $ <var:C> + <var:y1$ into $ <var:C>$ . This moves the condition $ \{ <var:D> = <var:E> \land <var:y1> = <nat:9> \cdot <var:E> \land <var:y0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> \} $ into the condition $ \{ <var:D> = <var:E> \land <var:y0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> + <nat:9> \cdot <var:E> \} $ . Jumping to the proceeding command contained in our set of commands , the command assigning $ <var:C> + <var:y0$ toward $ <var:C>$ . This transfers the precondition $ \{ <var:D> = <var:E> \land <var:y0> = <nat:6> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> + <nat:9> \cdot <var:E> \} $ into the postcondition $ \{ <var:D> = <var:E> \land <var:C> = <nat:8> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> + <nat:9> \cdot <var:E> + <nat:6> \} $ . This is deduced using the assignment scheme in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <var:y4> : string := " <var:y4> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:D> = <var:E> }} <var:y1> := <var:D> ; <var:y2> := <var:y1> * <var:D> ; <var:y3> := <var:y2> * <var:D> ; <var:y4> := <var:y3> * <var:D> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:9> ; <var:y2> := <var:y2> * <nat:8> ; <var:y3> := <var:y3> * <nat:1> ; <var:y4> := <var:y4> * <nat:8> ; <var:C> := <var:y4> <var:C> := <var:C> + <var:y3> <var:C> := <var:C> + <var:y2> <var:C> := <var:C> + <var:y1> <var:C> := <var:C> + <var:y0> {{ <var:C> = <nat:8> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <var:E> /\ <var:y2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <var:E> /\ <var:y2> = <var:E> ^ <nat:2> /\ <var:y3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <var:E> /\ <var:y2> = <var:E> ^ <nat:2> /\ <var:y3> = <var:E> ^ <nat:3> /\ <var:y4> = <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <var:E> /\ <var:y2> = <var:E> ^ <nat:2> /\ <var:y3> = <var:E> ^ <nat:3> /\ <var:y4> = <var:E> ^ <nat:4> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <nat:9> * <var:E> /\ <var:y2> = <var:E> ^ <nat:2> /\ <var:y3> = <var:E> ^ <nat:3> /\ <var:y4> = <var:E> ^ <nat:4> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <nat:9> * <var:E> /\ <var:y2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:y3> = <var:E> ^ <nat:3> /\ <var:y4> = <var:E> ^ <nat:4> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <nat:9> * <var:E> /\ <var:y2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:E> ^ <nat:3> /\ <var:y4> = <var:E> ^ <nat:4> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <nat:9> * <var:E> /\ <var:y2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:E> ^ <nat:3> /\ <var:y4> = <nat:8> * <var:E> ^ <nat:4> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <nat:9> * <var:E> /\ <var:y2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:E> ^ <nat:3> /\ <var:y0> = <nat:6> /\ <var:C> = <nat:8> * <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <nat:9> * <var:E> /\ <var:y2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:y0> = <nat:6> /\ <var:C> = <nat:8> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y1> = <nat:9> * <var:E> /\ <var:y0> = <nat:6> /\ <var:C> = <nat:8> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:y0> = <nat:6> /\ <var:C> = <nat:8> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:C> = <nat:8> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 