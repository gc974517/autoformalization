\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <nat:3> + <var:W> * <var:I> ; <var:W> := <nat:2> + <var:W> * <var:I> ; <var:W> := <nat:2> + <var:W> * <var:I> ; <var:W> := <nat:3> + <var:W> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Allow $ <var:I> = <var:p> $ ahead of the evaluation of the series of instructions , it follows that $ <var:W> = <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:p> \} \\ <var:W> := <nat:1> ; \\ \{ <var:I> = <var:p> \land <var:W> = <nat:1> \} \\ <var:W> := <nat:3> + <var:W> * <var:I> ; \\ \{ <var:I> = <var:p> \land <var:W> = <nat:1> \times <var:p> + <nat:3> \} \\ <var:W> := <nat:2> + <var:W> * <var:I> ; \\ \{ <var:I> = <var:p> \land <var:W> = <nat:1> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:2> \} \\ <var:W> := <nat:2> + <var:W> * <var:I> ; \\ \{ <var:I> = <var:p> \land <var:W> = <nat:1> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:2> \} \\ <var:W> := <nat:3> + <var:W> * <var:I> \\ \{ <var:I> = <var:p> \land <var:W> = <nat:1> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> \} \end{eqnarray} Applying Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:1> ; <var:W> := <nat:3> + <var:W> * <var:I> ; <var:W> := <nat:2> + <var:W> * <var:I> ; <var:W> := <nat:2> + <var:W> * <var:I> ; <var:W> := <nat:3> + <var:W> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:I> = <var:p> }} <def:poly> {{ <var:W> = <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W> = <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W> = <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W> = <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:W> = <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 