\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:a> := <nat:4> ; <var:a> := <nat:3> + <var:a> * <var:E> ; <var:a> := <nat:3> + <var:a> * <var:E> ; <var:a> := <var:a> * <var:E> ; <var:a> := <nat:1> + <var:a> * <var:E> ; <var:a> := <nat:2> + <var:a> * <var:E> ; <var:a> := <nat:1> + <var:a> * <var:E> \end{verbatim} Allow ( with some whole numbers $ <var:m> $ ) that $ <var:E> = <var:m> $ prior to the evaluation of this set of instructions it must be that we have $ <var:a> = <nat:4> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of commands is demonstrated by standard Hoare logic . Focusing on the next line of code found in the series of commands , we have \begin{verbatim} { <var:E> = <var:m> } <var:a> := <nat:4> { <var:E> = <var:m> \land <var:a> = <nat:4> } \end{verbatim} This is known to be sound through the rule given in typical Hoare reasoning . Taking a look at the subsequent bit of code seen in the set of commands , \begin{verbatim} { <var:E> = <var:m> } <var:a> := <nat:4> { <var:E> = <var:m> \land <var:a> = <nat:4> } \end{verbatim} This is guaranteed with the binding rule found in Hoare techniques . Keeping momentum , we have \begin{verbatim} { <var:E> = <var:m> } <var:a> := <nat:4> { <var:E> = <var:m> \land <var:a> = <nat:4> } \end{verbatim} This is sound through the assignment scheme defined in standard Hoare techniques . Moving on to the upcoming commands in the list of instructions , we have \begin{verbatim} { <var:E> = <var:m> } <var:a> := <nat:4> { <var:E> = <var:m> \land <var:a> = <nat:4> } { <var:E> = <var:m> \land <var:a> = <nat:4> } <var:a> := <nat:3> + <var:a> * <var:E> { <var:E> = <var:m> \land <var:a> = <nat:4> \cdot <var:m> + <nat:3> } { <var:E> = <var:m> \land <var:a> = <nat:4> \cdot <var:m> + <nat:3> } <var:a> := <nat:3> + <var:a> * <var:E> { <var:E> = <var:m> \land <var:a> = <nat:4> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:3> } { <var:E> = <var:m> \land <var:a> = <nat:4> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:3> } <var:a> := <var:a> * <var:E> { <var:E> = <var:m> \land <var:a> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:E> = <var:m> }} <var:a> := <nat:4> ; <var:a> := <nat:3> + <var:a> * <var:E> ; <var:a> := <nat:3> + <var:a> * <var:E> ; <var:a> := <var:a> * <var:E> ; <var:a> := <nat:1> + <var:a> * <var:E> ; <var:a> := <nat:2> + <var:a> * <var:E> ; <var:a> := <nat:1> + <var:a> * <var:E> {{ <var:a> = <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:a> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:a> = <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:a> = <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:a> = <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:a> = <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:a> = <nat:4> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:a> = <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 