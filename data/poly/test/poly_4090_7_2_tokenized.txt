\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:b> := <nat:4> ; <var:b> := <nat:3> + <var:b> * <var:u> ; <var:b> := <nat:1> + <var:b> * <var:u> ; <var:b> := <var:b> * <var:u> ; <var:b> := <var:b> * <var:u> ; <var:b> := <nat:3> + <var:b> * <var:u> ; <var:b> := <nat:3> + <var:b> * <var:u> \end{verbatim} Assuming that $ <var:u> = <var:a> $ prior to executing this set of instructions , it holds that we see $ <var:b> = <nat:4> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions can be seen by the below decorated segment of code . \begin{eqnarray} \{ <var:u> = <var:a> \} \\ <var:b> := <nat:4> ; \\ \{ <var:u> = <var:a> \land <var:b> = <nat:4> \} \\ <var:b> := <nat:3> + <var:b> * <var:u> ; \\ \{ <var:u> = <var:a> \land <var:b> = <nat:4> \cdot <var:a> + <nat:3> \} \\ <var:b> := <nat:1> + <var:b> * <var:u> ; \\ \{ <var:u> = <var:a> \land <var:b> = <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:1> \} \\ <var:b> := <var:b> * <var:u> ; \\ \{ <var:u> = <var:a> \land <var:b> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + \} \\ <var:b> := <var:b> * <var:u> ; \\ \{ <var:u> = <var:a> \land <var:b> = <nat:4> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + \} \\ <var:b> := <nat:3> + <var:b> * <var:u> ; \\ \{ <var:u> = <var:a> \land <var:b> = <nat:4> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:3> \} \\ <var:b> := <nat:3> + <var:b> * <var:u> \\ \{ <var:u> = <var:a> \land <var:b> = <nat:4> \cdot <var:a> ^ <nat:6> + <nat:3> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:u> = <var:a> }} <var:b> := <nat:4> ; <var:b> := <nat:3> + <var:b> * <var:u> ; <var:b> := <nat:1> + <var:b> * <var:u> ; <var:b> := <var:b> * <var:u> ; <var:b> := <var:b> * <var:u> ; <var:b> := <nat:3> + <var:b> * <var:u> ; <var:b> := <nat:3> + <var:b> * <var:u> {{ <var:b> = <nat:4> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:b> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:b> = <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:b> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:b> = <nat:4> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:b> = <nat:4> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:b> = <nat:4> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:b> = <nat:4> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 