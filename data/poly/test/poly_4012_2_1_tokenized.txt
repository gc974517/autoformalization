\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:6> ; <var:L> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Allowing it to be that $ <var:H> = <var:s> $ --- for every whole numbers $ <var:s> $ --- before running the list of commands , it follows that we see $ <var:L> = <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is accomplished with Hoare logic . Taking another step toward the proceeding line seen in the program , we see \verb | { <var:H> = <var:s> } <var:R0> := <nat:6> { <var:H> = <var:s> \land <var:R0> = <nat:6> } | . Moving on , \verb | { <var:H> = <var:s> } <var:R0> := <nat:6> { <var:H> = <var:s> \land <var:R0> = <nat:6> } | . This is known to be sound by the variable binding scheme given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:L> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:H> = <var:s> }} <def:poly> {{ <var:L> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:L> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 