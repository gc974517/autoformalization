\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:2> ; <var:H> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:u> = <var:b> $ ( with some $ <var:b> \in \mathbb{Z}^+ $ ) ahead of evaluating this code it follows that we have $ <var:H> = <nat:2> $ . \end{theorem} \begin{proof} The argument for the program can be given with Hoare techniques . Immediately after , the environment update line \verb | <var:l0> := <nat:2> ; | . This line advances $ \{ <var:u> = <var:b> \} $ into the condition $ \{ <var:u> = <var:b> \land <var:l0> = <nat:2> \} $ . This is guaranteed using the assignment rule given in typical Hoare reasoning . Considering the upcoming step contained in the series of instructions , we have the assignment statement \verb | <var:H> := <var:l0> | . This takes the condition $ \{ <var:u> = <var:b> \land <var:l0> = <nat:2> \} $ toward the condition $ \{ <var:u> = <var:b> \land <var:H> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:2> ; <var:H> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:u> = <var:b> }} <def:poly> {{ <var:H> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:H> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 