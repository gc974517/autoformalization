\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:6> ; <var:M> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:q> = <var:j> $ --- given positive numbers $ <var:j> $ --- before the execution of the segment of code then we have $ <var:M> = <nat:6> $ when series of instructions has executed . \end{theorem} \begin{proof} The argument for this list of commands is demonstrated by standard Hoare techniques . Immediately after , we see \begin{eqnarray} \{ <var:q> = <var:j> \} \, <var:w0> := <nat:6> \, \{ <var:q> = <var:j> \land <var:w0> = <nat:6> \} \end{eqnarray} Moving forward to the next step , \begin{eqnarray} \{ <var:q> = <var:j> \} \, <var:w0> := <nat:6> \, \{ <var:q> = <var:j> \land <var:w0> = <nat:6> \} \end{eqnarray} This is shown using the binding scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:6> ; <var:M> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:q> = <var:j> }} <def:poly> {{ <var:M> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:M> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 