\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:7> ; <var:u> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Allowing , with some $ <var:y> $ , it to be that $ <var:t> = <var:y> $ before evaluating our series of instructions it must be that $ <var:u> = <nat:7> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning yields : \begin{eqnarray} \{ <var:t> = <var:y> \} \\ <var:j0> := <nat:7> ; \\ \{ <var:t> = <var:y> \land <var:j0> = <nat:7> \} \\ <var:u> := <var:j0> \\ \{ <var:t> = <var:y> \land <var:u> = <nat:7> \} \end{eqnarray} Given the above , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:7> ; <var:u> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:t> = <var:y> }} <def:poly> {{ <var:u> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:y> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:y> /\ <var:u> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 