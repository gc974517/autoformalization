\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:X1> := <var:n> ; <var:X2> := <var:X1> * <var:n> ; <var:X0> := <nat:4> ; <var:X1> := <var:X1> * <nat:9> ; <var:X2> := <var:X2> * <nat:8> ; <var:A> := <var:X2> <var:A> := <var:A> + <var:X1> <var:A> := <var:A> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:n> = <var:g> $ before the evaluation of our list of instructions , it must be that $ <var:A> = <nat:8> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare techniques yields : \begin{eqnarray} \{ <var:n> = <var:g> \} \\ <var:X1> := <var:n> ; \\ \{ <var:n> = <var:g> \land <var:X1> = <var:g> \} \\ <var:X2> := <var:X1> * <var:n> ; \\ \{ <var:n> = <var:g> \land <var:X1> = <var:g> \land <var:X2> = <var:g> ^ <nat:2> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:n> = <var:g> \land <var:X1> = <var:g> \land <var:X2> = <var:g> ^ <nat:2> \land <var:X0> = <nat:4> \} \\ <var:X1> := <var:X1> * <nat:9> ; \\ \{ <var:n> = <var:g> \land <var:X1> = <nat:9> \cdot <var:g> \land <var:X2> = <var:g> ^ <nat:2> \land <var:X0> = <nat:4> \} \\ <var:X2> := <var:X2> * <nat:8> ; \\ \{ <var:n> = <var:g> \land <var:X1> = <nat:9> \cdot <var:g> \land <var:X2> = <nat:8> \cdot <var:g> ^ <nat:2> \land <var:X0> = <nat:4> \} \\ <var:A> := <var:X2> \\ \{ <var:n> = <var:g> \land <var:X1> = <nat:9> \cdot <var:g> \land <var:X0> = <nat:4> \land <var:A> = <nat:8> \cdot <var:g> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:X1> \\ \{ <var:n> = <var:g> \land <var:X0> = <nat:4> \land <var:A> = <nat:8> \cdot <var:g> ^ <nat:2> + <nat:9> \cdot <var:g> \} \\ <var:A> := <var:A> + <var:X0> \\ \{ <var:n> = <var:g> \land <var:A> = <nat:8> \cdot <var:g> ^ <nat:2> + <nat:9> \cdot <var:g> + <nat:4> \} \end{eqnarray} Hence , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X1> := <var:n> ; <var:X2> := <var:X1> * <var:n> ; <var:X0> := <nat:4> ; <var:X1> := <var:X1> * <nat:9> ; <var:X2> := <var:X2> * <nat:8> ; <var:A> := <var:X2> <var:A> := <var:A> + <var:X1> <var:A> := <var:A> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:n> = <var:g> }} <def:poly> {{ <var:A> = <nat:8> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:X1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:X1> = <var:g> /\ <var:X2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:X1> = <var:g> /\ <var:X2> = <var:g> ^ <nat:2> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:X1> = <nat:9> * <var:g> /\ <var:X2> = <var:g> ^ <nat:2> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:X1> = <nat:9> * <var:g> /\ <var:X2> = <nat:8> * <var:g> ^ <nat:2> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:X1> = <nat:9> * <var:g> /\ <var:X0> = <nat:4> /\ <var:A> = <nat:8> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:X0> = <nat:4> /\ <var:A> = <nat:8> * <var:g> ^ <nat:2> + <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:A> = <nat:8> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 