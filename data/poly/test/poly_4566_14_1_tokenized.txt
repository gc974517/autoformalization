\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:X> ; <var:w2> := <var:w1> * <var:X> ; <var:w3> := <var:w2> * <var:X> ; <var:w4> := <var:w3> * <var:X> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:7> ; <var:w2> := <var:w2> * <nat:2> ; <var:w3> := <var:w3> * <nat:5> ; <var:w4> := <var:w4> * <nat:2> ; <var:G> := <var:w4> <var:G> := <var:G> + <var:w3> <var:G> := <var:G> + <var:w2> <var:G> := <var:G> + <var:w1> <var:G> := <var:G> + <var:w0> \end{verbatim} Assuming that we have $ <var:X> = <var:i> $ ahead of executing our list of instructions it holds that $ <var:G> = <nat:2> * <var:i> ^ <nat:4> + <nat:5> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be shown with Hoare reasoning . Observing the proceeding bit of code found in our code segment , we see the variable update statement binding $ <var:X> $ to $ <var:w1>$ . This line redefines $ \{ <var:X> = <var:i> \} $ into the postcondition $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \} $ . This is ensured through the assignment inference rule found in Hoare reasoning . Advancing to the next step , the environment update code letting $ <var:w1> * <var:X> $ toward $ <var:w2>$ . This takes the precondition $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \} $ to the postcondition $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \} $ . Taking a look at the next step contained in the series of commands , the environment update statement \verb | <var:w3> := <var:w2> * <var:X> ; | . This line moves the precondition $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \} $ toward the postcondition $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \} $ . Advancing to the next step , we see the variable update code yielding $ <var:w3> * <var:X> $ to $ <var:w4>$ . This transfers $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \} $ into the condition $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \} $ . Now , we see the environment update code \verb | <var:w0> := <nat:6> ; | . This command moves the precondition $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \} $ to the condition $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ . Moving on to the next step seen in the program , we see the assignment line \verb | <var:w1> := <var:w1> * <nat:7> ; | . This command advances $ \{ <var:X> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ into $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ . Looking at the next command in the code segment , we see the environment update code \verb | <var:w2> := <var:w2> * <nat:2> ; | . This statement redefines the condition $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ into the postcondition $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ . Stepping through , we have the variable update code defining $ <var:w3> * <nat:5> $ as $ <var:w3>$ . This redefines $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ to $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w3> = <nat:5> \cdot <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ . Advancing to the upcoming line contained in our series of instructions , we see the variable assignmet command \verb | <var:w4> := <var:w4> * <nat:2> ; | . This forwards $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w3> = <nat:5> \cdot <var:i> ^ <nat:3> \land <var:w4> = <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ as $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w3> = <nat:5> \cdot <var:i> ^ <nat:3> \land <var:w4> = <nat:2> \cdot <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ . This is ensured using the assignment inference rule defined by typical Hoare logic . Observing the subsequent statement in the set of commands , we have the variable binding command binding $ <var:w4$ into $ <var:G>$ . This code forwards the precondition $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w3> = <nat:5> \cdot <var:i> ^ <nat:3> \land <var:w4> = <nat:2> \cdot <var:i> ^ <nat:4> \land <var:w0> = <nat:6> \} $ into the condition $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w3> = <nat:5> \cdot <var:i> ^ <nat:3> \land <var:w0> = <nat:6> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> \} $ . This is known to be sound through the assignment law defined in typical Hoare reasoning . Observing the proceeding line found in our set of commands , we have the assignment command yielding $ <var:G> + <var:w3$ toward $ <var:G>$ . This transfers the precondition $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w3> = <nat:5> \cdot <var:i> ^ <nat:3> \land <var:w0> = <nat:6> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> \} $ toward $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w0> = <nat:6> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> + <nat:5> \cdot <var:i> ^ <nat:3> \} $ . Honing in on the proceeding bit of code in our list of instructions , the environment update command \verb | <var:G> := <var:G> + <var:w2> | . This redefines the precondition $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w2> = <nat:2> \cdot <var:i> ^ <nat:2> \land <var:w0> = <nat:6> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> + <nat:5> \cdot <var:i> ^ <nat:3> \} $ as the condition $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w0> = <nat:6> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> + <nat:5> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> \} $ . Stepping through , we see the binding line \verb | <var:G> := <var:G> + <var:w1> | . This takes the condition $ \{ <var:X> = <var:i> \land <var:w1> = <nat:7> \cdot <var:i> \land <var:w0> = <nat:6> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> + <nat:5> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> \} $ toward the postcondition $ \{ <var:X> = <var:i> \land <var:w0> = <nat:6> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> + <nat:5> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:7> \cdot <var:i> \} $ . This is ensured by the assignment scheme of typical Hoare logic . Immediately following , the assignment command defining $ <var:G> + <var:w0$ to $ <var:G>$ . This moves the condition $ \{ <var:X> = <var:i> \land <var:w0> = <nat:6> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> + <nat:5> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:7> \cdot <var:i> \} $ to $ \{ <var:X> = <var:i> \land <var:G> = <nat:2> \cdot <var:i> ^ <nat:4> + <nat:5> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:7> \cdot <var:i> + <nat:6> \} $ . This is sound through the assignment law from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <var:w4> : string := " <var:w4> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:X> = <var:i> }} <var:w1> := <var:X> ; <var:w2> := <var:w1> * <var:X> ; <var:w3> := <var:w2> * <var:X> ; <var:w4> := <var:w3> * <var:X> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:7> ; <var:w2> := <var:w2> * <nat:2> ; <var:w3> := <var:w3> * <nat:5> ; <var:w4> := <var:w4> * <nat:2> ; <var:G> := <var:w4> <var:G> := <var:G> + <var:w3> <var:G> := <var:G> + <var:w2> <var:G> := <var:G> + <var:w1> <var:G> := <var:G> + <var:w0> {{ <var:G> = <nat:2> * <var:i> ^ <nat:4> + <nat:5> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> /\ <var:w4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> /\ <var:w4> = <var:i> ^ <nat:4> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> /\ <var:w4> = <var:i> ^ <nat:4> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> /\ <var:w4> = <var:i> ^ <nat:4> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:w3> = <nat:5> * <var:i> ^ <nat:3> /\ <var:w4> = <var:i> ^ <nat:4> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:w3> = <nat:5> * <var:i> ^ <nat:3> /\ <var:w4> = <nat:2> * <var:i> ^ <nat:4> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:w3> = <nat:5> * <var:i> ^ <nat:3> /\ <var:w0> = <nat:6> /\ <var:G> = <nat:2> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:w0> = <nat:6> /\ <var:G> = <nat:2> * <var:i> ^ <nat:4> + <nat:5> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w0> = <nat:6> /\ <var:G> = <nat:2> * <var:i> ^ <nat:4> + <nat:5> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:w0> = <nat:6> /\ <var:G> = <nat:2> * <var:i> ^ <nat:4> + <nat:5> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:i> /\ <var:G> = <nat:2> * <var:i> ^ <nat:4> + <nat:5> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 