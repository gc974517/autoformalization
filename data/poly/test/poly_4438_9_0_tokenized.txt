\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:2> ; <var:E1> := <nat:5> ; <var:E1> := <var:E1> * <var:K> ; <var:E2> := <nat:6> ; <var:E2> := <var:E2> * <var:K> ; <var:E2> := <var:E2> * <var:K> ; <var:C> := <var:E2> ; <var:C> := <var:C> + <var:E1> ; <var:C> := <var:C> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:K> = <var:P> $ for all positive integers $ <var:P> $ prior to evaluating this set of commands it follows that $ <var:C> = <nat:6> \cdot <var:P> ^ <nat:2> + <nat:5> \cdot <var:P> + <nat:2> $ after list of instructions has finished . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives us : \begin{eqnarray} \{ <var:K> = <var:P> \} \\ <var:E0> := <nat:2> ; \\ \{ <var:K> = <var:P> \land <var:E0> = <nat:2> \} \\ <var:E1> := <nat:5> ; \\ \{ <var:K> = <var:P> \land <var:E0> = <nat:2> \land <var:E1> = <nat:5> \} \\ <var:E1> := <var:E1> * <var:K> ; \\ \{ <var:K> = <var:P> \land <var:E0> = <nat:2> \land <var:E1> = <nat:5> \times <var:P> \} \\ <var:E2> := <nat:6> ; \\ \{ <var:K> = <var:P> \land <var:E0> = <nat:2> \land <var:E1> = <nat:5> \times <var:P> \land <var:E2> = <nat:6> \} \\ <var:E2> := <var:E2> * <var:K> ; \\ \{ <var:K> = <var:P> \land <var:E0> = <nat:2> \land <var:E1> = <nat:5> \times <var:P> \land <var:E2> = <nat:6> \times <var:P> \} \\ <var:E2> := <var:E2> * <var:K> ; \\ \{ <var:K> = <var:P> \land <var:E0> = <nat:2> \land <var:E1> = <nat:5> \times <var:P> \land <var:E2> = <nat:6> \times <var:P> ^ <nat:2> \} \\ <var:C> := <var:E2> ; \\ \{ <var:K> = <var:P> \land <var:E0> = <nat:2> \land <var:E1> = <nat:5> \times <var:P> \land <var:C> = <nat:6> \times <var:P> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:E1> ; \\ \{ <var:K> = <var:P> \land <var:E0> = <nat:2> \land <var:C> = <nat:6> \times <var:P> ^ <nat:2> + <nat:5> \times <var:P> \} \\ <var:C> := <var:C> + <var:E0> \\ \{ <var:K> = <var:P> \land <var:C> = <nat:6> \times <var:P> ^ <nat:2> + <nat:5> \times <var:P> + <nat:2> \} \end{eqnarray} Given the preceding argument , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:2> ; <var:E1> := <nat:5> ; <var:E1> := <var:E1> * <var:K> ; <var:E2> := <nat:6> ; <var:E2> := <var:E2> * <var:K> ; <var:E2> := <var:E2> * <var:K> ; <var:C> := <var:E2> ; <var:C> := <var:C> + <var:E1> ; <var:C> := <var:C> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:K> = <var:P> }} <def:poly> {{ <var:C> = <nat:6> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:5> * <var:P> /\ <var:E2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:5> * <var:P> /\ <var:E2> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:5> * <var:P> /\ <var:E2> = <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:5> * <var:P> /\ <var:C> = <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:E0> = <nat:2> /\ <var:C> = <nat:6> * <var:P> ^ <nat:2> + <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:C> = <nat:6> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 