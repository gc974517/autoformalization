\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:T> ; <var:D2> := <nat:2> ; <var:D2> := <var:D2> * <var:T> ; <var:D2> := <var:D2> * <var:T> ; <var:D3> := <nat:5> ; <var:D3> := <var:D3> * <var:T> ; <var:D3> := <var:D3> * <var:T> ; <var:D3> := <var:D3> * <var:T> ; <var:F> := <var:D3> ; <var:F> := <var:F> + <var:D2> ; <var:F> := <var:F> + <var:D1> ; <var:F> := <var:F> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:T> = <var:g> $ ( given positive integer coefficients $ <var:g> $ ) prior to the evaluation of the series of instructions , then we see $ <var:F> = <nat:5> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:7> \times <var:g> + <nat:3> $ when code segment has executed . \end{theorem} \begin{proof} Note that the below decorated series of instructions . \begin{eqnarray} \{ <var:T> = <var:g> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \} \\ <var:D1> := <nat:7> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> \} \\ <var:D1> := <var:D1> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \} \\ <var:D2> := <nat:2> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:D2> = <nat:2> \} \\ <var:D2> := <var:D2> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:D2> = <nat:2> * <var:g> \} \\ <var:D2> := <var:D2> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:D2> = <nat:2> * <var:g> ^ <nat:2> \} \\ <var:D3> := <nat:5> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:D2> = <nat:2> * <var:g> ^ <nat:2> \land <var:D3> = <nat:5> \} \\ <var:D3> := <var:D3> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:D2> = <nat:2> * <var:g> ^ <nat:2> \land <var:D3> = <nat:5> * <var:g> \} \\ <var:D3> := <var:D3> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:D2> = <nat:2> * <var:g> ^ <nat:2> \land <var:D3> = <nat:5> * <var:g> ^ <nat:2> \} \\ <var:D3> := <var:D3> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:D2> = <nat:2> * <var:g> ^ <nat:2> \land <var:D3> = <nat:5> * <var:g> ^ <nat:3> \} \\ <var:F> := <var:D3> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:D2> = <nat:2> * <var:g> ^ <nat:2> \land <var:F> = <nat:5> * <var:g> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:D2> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:7> * <var:g> \land <var:F> = <nat:5> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> \} \end{eqnarray} Continuing executing the series of commands results in : \begin{eqnarray} <var:F> := <var:F> + <var:D1> ; \\ \{ <var:T> = <var:g> \land <var:D0> = <nat:3> \land <var:F> = <nat:5> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:7> * <var:g> \} \\ <var:F> := <var:F> + <var:D0> \\ \{ <var:T> = <var:g> \land <var:F> = <nat:5> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D0> := <nat:3> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:T> ; <var:D2> := <nat:2> ; <var:D2> := <var:D2> * <var:T> ; <var:D2> := <var:D2> * <var:T> ; <var:D3> := <nat:5> ; <var:D3> := <var:D3> * <var:T> ; <var:D3> := <var:D3> * <var:T> ; <var:D3> := <var:D3> * <var:T> ; <var:F> := <var:D3> ; <var:F> := <var:F> + <var:D2> ; <var:F> := <var:F> + <var:D1> ; <var:F> := <var:F> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:T> = <var:g> }} <def:poly> {{ <var:F> = <nat:5> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:D3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:D2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:F> = <nat:5> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:7> * <var:g> /\ <var:F> = <nat:5> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:D0> = <nat:3> /\ <var:F> = <nat:5> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:F> = <nat:5> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 