\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:a1> := <var:l> ; <var:a2> := <var:a1> * <var:l> ; <var:a3> := <var:a2> * <var:l> ; <var:a4> := <var:a3> * <var:l> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:1> ; <var:a3> := <var:a3> * <nat:3> ; <var:a4> := <var:a4> * <nat:4> ; <var:D> := <var:a4> <var:D> := <var:D> + <var:a3> <var:D> := <var:D> + <var:a1> <var:D> := <var:D> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assume that $ <var:l> = <var:z> $ letting positive coefficients $ <var:z> $ ahead of evaluating this segment of code , it must be that we see $ <var:D> = <nat:4> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> + <nat:4> $ when segment of code finishes . \end{theorem} \begin{proof} The method of proof for our list of commands can be demonstrated using typical Hoare reasoning . Further , we have the assignment command letting $ <var:l> $ as $ <var:a1>$ . This advances the condition $ \{ <var:l> = <var:z> \} $ into $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \} $ . This is sound with the assignment inference rule given by typical Hoare techniques . Next , we have the variable binding code giving $ <var:a1> * <var:l> $ to $ <var:a2>$ . This code transfers the condition $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \} $ toward the condition $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \land <var:a2> = <var:z> ^ <nat:2> \} $ . This is sound by the assignment inference rule of standard Hoare logic . Focusing on the next step found in our set of commands , we have the environment update statement binding $ <var:a2> * <var:l> $ to $ <var:a3>$ . This command forwards $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \land <var:a2> = <var:z> ^ <nat:2> \} $ as the postcondition $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <var:z> ^ <nat:3> \} $ . This is guaranteed by the assignment rule defined in typical Hoare logic . Advancing on , we see the variable update command \verb | <var:a4> := <var:a3> * <var:l> ; | . This code advances $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <var:z> ^ <nat:3> \} $ into $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <var:z> ^ <nat:3> \land <var:a4> = <var:z> ^ <nat:4> \} $ . Looking at the proceeding command contained in our set of instructions , we see the variable binding line assigning $ <nat:4> $ to $ <var:a0>$ . This moves the precondition $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <var:z> ^ <nat:3> \land <var:a4> = <var:z> ^ <nat:4> \} $ to $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <var:z> ^ <nat:3> \land <var:a4> = <var:z> ^ <nat:4> \land <var:a0> = <nat:4> \} $ . Honing in on the next bit of code seen in the code , we have the line giving $ <var:a1> * <nat:1> $ as $ <var:a1>$ . This forwards the precondition $ \{ <var:l> = <var:z> \land <var:a1> = <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <var:z> ^ <nat:3> \land <var:a4> = <var:z> ^ <nat:4> \land <var:a0> = <nat:4> \} $ as the postcondition $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <var:z> ^ <nat:3> \land <var:a4> = <var:z> ^ <nat:4> \land <var:a0> = <nat:4> \} $ . Advancing to the proceeding bit of code found in the segment of code , we see the variable binding line \verb | <var:a3> := <var:a3> * <nat:3> ; | . This moves $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <var:z> ^ <nat:3> \land <var:a4> = <var:z> ^ <nat:4> \land <var:a0> = <nat:4> \} $ as the postcondition $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <nat:3> * <var:z> ^ <nat:3> \land <var:a4> = <var:z> ^ <nat:4> \land <var:a0> = <nat:4> \} $ . This is shown by the assignment law in standard Hoare techniques . Shifting focus toward the proceeding step seen in the list of instructions , we have the statement giving $ <var:a4> * <nat:4> $ into $ <var:a4>$ . This transfers the condition $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <nat:3> * <var:z> ^ <nat:3> \land <var:a4> = <var:z> ^ <nat:4> \land <var:a0> = <nat:4> \} $ toward the postcondition $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <nat:3> * <var:z> ^ <nat:3> \land <var:a4> = <nat:4> * <var:z> ^ <nat:4> \land <var:a0> = <nat:4> \} $ . This is sound with the assignment rule given by Hoare reasoning . Observing the upcoming line of code found in the series of instructions , the code \verb | <var:D> := <var:a4> | . This redefines the condition $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <nat:3> * <var:z> ^ <nat:3> \land <var:a4> = <nat:4> * <var:z> ^ <nat:4> \land <var:a0> = <nat:4> \} $ as the postcondition $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <nat:3> * <var:z> ^ <nat:3> \land <var:a0> = <nat:4> \land <var:D> = <nat:4> * <var:z> ^ <nat:4> \} $ . This is known to be sound using the assignment inference rule of standard Hoare logic . Focusing on the proceeding command contained in the set of instructions , the environment update command assigning $ <var:D> + <var:a3$ toward $ <var:D>$ . This line advances the precondition $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a3> = <nat:3> * <var:z> ^ <nat:3> \land <var:a0> = <nat:4> \land <var:D> = <nat:4> * <var:z> ^ <nat:4> \} $ to $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> \} $ . Now , the variable update line \verb | <var:D> := <var:D> + <var:a1> | . This statement forwards $ \{ <var:l> = <var:z> \land <var:a1> = <nat:1> * <var:z> \land <var:a2> = <var:z> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> \} $ to the postcondition $ \{ <var:l> = <var:z> \land <var:a0> = <nat:4> \land <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> \} $ . This is shown to be logically sound with the assignment law given by typical Hoare logic . Going forward , we have the binding line binding $ <var:D> + <var:a0$ into $ <var:D>$ . This code redefines $ \{ <var:l> = <var:z> \land <var:a0> = <nat:4> \land <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> \} $ as $ \{ <var:l> = <var:z> \land <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> + <nat:4> \} $ . This is guaranteed by the assignment rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <var:a4> : string := " <var:a4> " . Definition <def:poly> := <var:a1> := <var:l> ; <var:a2> := <var:a1> * <var:l> ; <var:a3> := <var:a2> * <var:l> ; <var:a4> := <var:a3> * <var:l> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:1> ; <var:a3> := <var:a3> * <nat:3> ; <var:a4> := <var:a4> * <nat:4> ; <var:D> := <var:a4> <var:D> := <var:D> + <var:a3> <var:D> := <var:D> + <var:a1> <var:D> := <var:D> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:l> = <var:z> }} <def:poly> {{ <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <var:z> /\ <var:a2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <var:z> /\ <var:a2> = <var:z> ^ <nat:2> /\ <var:a3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <var:z> /\ <var:a2> = <var:z> ^ <nat:2> /\ <var:a3> = <var:z> ^ <nat:3> /\ <var:a4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <var:z> /\ <var:a2> = <var:z> ^ <nat:2> /\ <var:a3> = <var:z> ^ <nat:3> /\ <var:a4> = <var:z> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <nat:1> * <var:z> /\ <var:a2> = <var:z> ^ <nat:2> /\ <var:a3> = <var:z> ^ <nat:3> /\ <var:a4> = <var:z> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <nat:1> * <var:z> /\ <var:a2> = <var:z> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:a4> = <var:z> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <nat:1> * <var:z> /\ <var:a2> = <var:z> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:a4> = <nat:4> * <var:z> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <nat:1> * <var:z> /\ <var:a2> = <var:z> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:a0> = <nat:4> /\ <var:D> = <nat:4> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a1> = <nat:1> * <var:z> /\ <var:a2> = <var:z> ^ <nat:2> /\ <var:a0> = <nat:4> /\ <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:a0> = <nat:4> /\ <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:z> /\ <var:D> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 