\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:U> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:1> ; <var:B> := <var:t1> <var:B> := <var:B> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume ( assuming some positive numbers $ <var:E> $ ) that we have $ <var:U> = <var:E> $ prior to evaluating our series of instructions it follows that we see $ <var:B> = <nat:1> \times <var:E> + <nat:2> $ after set of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code can be done with Hoare techniques . Advancing to the subsequent command found in the list of commands , the variable binding code giving $ <var:U> $ toward $ <var:t1>$ . This moves $ \{ <var:U> = <var:E> \} $ into $ \{ <var:U> = <var:E> \land <var:t1> = <var:E> \} $ . Honing in on the next bit of code in our set of instructions , we have the variable binding statement \verb | <var:t0> := <nat:2> ; | . This statement takes the condition $ \{ <var:U> = <var:E> \land <var:t1> = <var:E> \} $ into the condition $ \{ <var:U> = <var:E> \land <var:t1> = <var:E> \land <var:t0> = <nat:2> \} $ . Moving on , the line defining $ <var:t1> * <nat:1> $ as $ <var:t1>$ . This advances the condition $ \{ <var:U> = <var:E> \land <var:t1> = <var:E> \land <var:t0> = <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:E> \land <var:t1> = <nat:1> \cdot <var:E> \land <var:t0> = <nat:2> \} $ . Looking at the following line of code seen in our series of commands , we have the assignment line \verb | <var:B> := <var:t1> | . This code takes $ \{ <var:U> = <var:E> \land <var:t1> = <nat:1> \cdot <var:E> \land <var:t0> = <nat:2> \} $ into $ \{ <var:U> = <var:E> \land <var:t0> = <nat:2> \land <var:B> = <nat:1> \cdot <var:E> \} $ . Immediately after , we have the variable update statement letting $ <var:B> + <var:t0$ as $ <var:B>$ . This advances $ \{ <var:U> = <var:E> \land <var:t0> = <nat:2> \land <var:B> = <nat:1> \cdot <var:E> \} $ as $ \{ <var:U> = <var:E> \land <var:B> = <nat:1> \cdot <var:E> + <nat:2> \} $ . This is ensured by the assignment inference rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:U> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:1> ; <var:B> := <var:t1> <var:B> := <var:B> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:U> = <var:E> }} <def:poly> {{ <var:B> = <nat:1> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <var:E> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t1> = <nat:1> * <var:E> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:t0> = <nat:2> /\ <var:B> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:B> = <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 