\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:H> ; <var:Q2> := <var:Q1> * <var:H> ; <var:Q3> := <var:Q2> * <var:H> ; <var:Q4> := <var:Q3> * <var:H> ; <var:Q0> := <nat:8> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:Q2> := <var:Q2> * <nat:8> ; <var:Q3> := <var:Q3> * <nat:4> ; <var:Q4> := <var:Q4> * <nat:5> ; <var:i> := <var:Q4> <var:i> := <var:i> + <var:Q3> <var:i> := <var:i> + <var:Q2> <var:i> := <var:i> + <var:Q1> <var:i> := <var:i> + <var:Q0> \end{verbatim} Allow ( for some integers $ <var:q> $ ) that we have $ <var:H> = <var:q> $ ahead of the execution of our code it holds that $ <var:i> = <nat:5> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:8> \cdot <var:q> ^ <nat:2> + <nat:5> \cdot <var:q> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code can be given by the below decorated set of instructions . \begin{eqnarray} \{ <var:H> = <var:q> \} \\ <var:Q1> := <var:H> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <var:q> \} \\ <var:Q2> := <var:Q1> * <var:H> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \} \end{eqnarray} Advancing interpreting the segment of code gives us : \begin{eqnarray} <var:Q3> := <var:Q2> * <var:H> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> \} \\ <var:Q4> := <var:Q3> * <var:H> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> \land <var:Q4> = <var:q> ^ <nat:4> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> \land <var:Q4> = <var:q> ^ <nat:4> \land <var:Q0> = <nat:8> \} \\ <var:Q1> := <var:Q1> * <nat:5> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <nat:5> \times <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> \land <var:Q4> = <var:q> ^ <nat:4> \land <var:Q0> = <nat:8> \} \\ <var:Q2> := <var:Q2> * <nat:8> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <nat:5> \times <var:q> \land <var:Q2> = <nat:8> \times <var:q> ^ <nat:2> \land <var:Q3> = <var:q> ^ <nat:3> \land <var:Q4> = <var:q> ^ <nat:4> \land <var:Q0> = <nat:8> \} \\ <var:Q3> := <var:Q3> * <nat:4> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <nat:5> \times <var:q> \land <var:Q2> = <nat:8> \times <var:q> ^ <nat:2> \land <var:Q3> = <nat:4> \times <var:q> ^ <nat:3> \land <var:Q4> = <var:q> ^ <nat:4> \land <var:Q0> = <nat:8> \} \\ <var:Q4> := <var:Q4> * <nat:5> ; \\ \{ <var:H> = <var:q> \land <var:Q1> = <nat:5> \times <var:q> \land <var:Q2> = <nat:8> \times <var:q> ^ <nat:2> \land <var:Q3> = <nat:4> \times <var:q> ^ <nat:3> \land <var:Q4> = <nat:5> \times <var:q> ^ <nat:4> \land <var:Q0> = <nat:8> \} \\ <var:i> := <var:Q4> \\ \{ <var:H> = <var:q> \land <var:Q1> = <nat:5> \times <var:q> \land <var:Q2> = <nat:8> \times <var:q> ^ <nat:2> \land <var:Q3> = <nat:4> \times <var:q> ^ <nat:3> \land <var:Q0> = <nat:8> \land <var:i> = <nat:5> \times <var:q> ^ <nat:4> \} \\ <var:i> := <var:i> + <var:Q3> \\ \{ <var:H> = <var:q> \land <var:Q1> = <nat:5> \times <var:q> \land <var:Q2> = <nat:8> \times <var:q> ^ <nat:2> \land <var:Q0> = <nat:8> \land <var:i> = <nat:5> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:Q2> \\ \{ <var:H> = <var:q> \land <var:Q1> = <nat:5> \times <var:q> \land <var:Q0> = <nat:8> \land <var:i> = <nat:5> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:3> + <nat:8> \times <var:q> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:Q1> \\ \{ <var:H> = <var:q> \land <var:Q0> = <nat:8> \land <var:i> = <nat:5> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:3> + <nat:8> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> \} \\ <var:i> := <var:i> + <var:Q0> \\ \{ <var:H> = <var:q> \land <var:i> = <nat:5> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:3> + <nat:8> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> + <nat:8> \} \end{eqnarray} Utilizing usual Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:H> = <var:q> }} <var:Q1> := <var:H> ; <var:Q2> := <var:Q1> * <var:H> ; <var:Q3> := <var:Q2> * <var:H> ; <var:Q4> := <var:Q3> * <var:H> ; <var:Q0> := <nat:8> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:Q2> := <var:Q2> * <nat:8> ; <var:Q3> := <var:Q3> * <nat:4> ; <var:Q4> := <var:Q4> * <nat:5> ; <var:i> := <var:Q4> <var:i> := <var:i> + <var:Q3> <var:i> := <var:i> + <var:Q2> <var:i> := <var:i> + <var:Q1> <var:i> := <var:i> + <var:Q0> {{ <var:i> = <nat:5> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> /\ <var:Q3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> /\ <var:Q3> = <var:q> ^ <nat:3> /\ <var:Q4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> /\ <var:Q3> = <var:q> ^ <nat:3> /\ <var:Q4> = <var:q> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <nat:5> * <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> /\ <var:Q3> = <var:q> ^ <nat:3> /\ <var:Q4> = <var:q> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <nat:5> * <var:q> /\ <var:Q2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:Q3> = <var:q> ^ <nat:3> /\ <var:Q4> = <var:q> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <nat:5> * <var:q> /\ <var:Q2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:Q4> = <var:q> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <nat:5> * <var:q> /\ <var:Q2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:Q4> = <nat:5> * <var:q> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <nat:5> * <var:q> /\ <var:Q2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:Q0> = <nat:8> /\ <var:i> = <nat:5> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <nat:5> * <var:q> /\ <var:Q2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:Q0> = <nat:8> /\ <var:i> = <nat:5> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q1> = <nat:5> * <var:q> /\ <var:Q0> = <nat:8> /\ <var:i> = <nat:5> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:Q0> = <nat:8> /\ <var:i> = <nat:5> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:i> = <nat:5> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 