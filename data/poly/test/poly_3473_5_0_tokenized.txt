\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:5> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:Z> ; <var:i> := <var:a1> ; <var:i> := <var:i> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:Z> = <var:A> $ prior to the evaluation of this code segment , it must be that $ <var:i> = <nat:2> * <var:A> + <nat:5> $ when list of commands has terminated . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:Z> = <var:A> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:5> \} \\ <var:a1> := <nat:2> ; \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:5> \land <var:a1> = <nat:2> \} \\ <var:a1> := <var:a1> * <var:Z> ; \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:5> \land <var:a1> = <nat:2> * <var:A> \} \\ <var:i> := <var:a1> ; \\ \{ <var:Z> = <var:A> \land <var:a0> = <nat:5> \land <var:i> = <nat:2> * <var:A> \} \\ <var:i> := <var:i> + <var:a0> \\ \{ <var:Z> = <var:A> \land <var:i> = <nat:2> * <var:A> + <nat:5> \} \end{eqnarray} Thusly , this list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:5> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:Z> ; <var:i> := <var:a1> ; <var:i> := <var:i> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Z> = <var:A> }} <def:poly> {{ <var:i> = <nat:2> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:a0> = <nat:5> /\ <var:i> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:i> = <nat:2> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 