\begin{document} \begin{theorem} Define the following list of instructions as follows \begin{verbatim} <var:g1> := <var:S> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:4> ; <var:k> := <var:g1> <var:k> := <var:k> + <var:g0> \end{verbatim} Allowing ( for every positive coefficients $ <var:w> $ ) that we have $ <var:S> = <var:w> $ prior to running the series of commands it follows that we have $ <var:k> = <nat:4> \cdot <var:w> + <nat:3> $ after set of commands executes . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:S> = <var:w> \} \\ <var:g1> := <var:S> ; \\ \{ <var:S> = <var:w> \land <var:g1> = <var:w> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:S> = <var:w> \land <var:g1> = <var:w> \land <var:g0> = <nat:3> \} \\ <var:g1> := <var:g1> * <nat:4> ; \\ \{ <var:S> = <var:w> \land <var:g1> = <nat:4> * <var:w> \land <var:g0> = <nat:3> \} \\ <var:k> := <var:g1> \\ \{ <var:S> = <var:w> \land <var:g0> = <nat:3> \land <var:k> = <nat:4> * <var:w> \} \\ <var:k> := <var:k> + <var:g0> \\ \{ <var:S> = <var:w> \land <var:k> = <nat:4> * <var:w> + <nat:3> \} \end{eqnarray} Considering the preceding argument , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:S> = <var:w> }} <var:g1> := <var:S> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:4> ; <var:k> := <var:g1> <var:k> := <var:k> + <var:g0> {{ <var:k> = <nat:4> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:g1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:g1> = <var:w> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:g1> = <nat:4> * <var:w> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:g0> = <nat:3> /\ <var:k> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:k> = <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 