\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:2> ; <var:H> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Assume $ <var:u> = <var:e> $ before running this set of commands then $ <var:H> = <nat:2> $ once set of commands terminates . \end{theorem} \begin{proof} Proving correctness for the list of commands can be accomplished by typical Hoare logic . Shifting focus toward the upcoming statement seen in the program , we see \[ \begin{tabular} {rcl} \{ <var:u> = <var:e> \} & <var:m0> := <nat:2> & \{ <var:u> = <var:e> \land <var:m0> = <nat:2> \} \end{tabular} This is ensured by the variable binding law in typical Hoare logic . Honing in on the subsequent bit of code in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:u> = <var:e> \} & <var:m0> := <nat:2> & \{ <var:u> = <var:e> \land <var:m0> = <nat:2> \} \end{tabular} This is known to be sound using the environment update scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:H> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:u> = <var:e> }} <def:poly> {{ <var:H> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:H> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 