\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:F> ; <var:w> := <nat:1> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:1> + <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:F> = <var:U> $ ahead of running our list of commands , then we have $ <var:w> = <nat:4> \times <var:U> ^ <nat:10> + <nat:4> \times <var:U> ^ <nat:9> + <nat:1> \times <var:U> ^ <nat:8> + <nat:3> \times <var:U> ^ <nat:7> + <nat:3> \times <var:U> ^ <nat:6> + <nat:1> \times <var:U> ^ <nat:5> + <nat:2> \times <var:U> ^ <nat:4> + <nat:2> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:F> = <var:U> \} \\ <var:w> := <nat:4> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \} \end{eqnarray} Continuing running the program yields : \begin{eqnarray} <var:w> := <nat:4> + <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> + <nat:4> \} \\ <var:w> := <nat:1> + <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:1> \} \\ <var:w> := <nat:3> + <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:3> \} \\ <var:w> := <nat:3> + <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:1> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:3> \} \\ <var:w> := <nat:1> + <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:1> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:1> \} \\ <var:w> := <nat:2> + <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:6> + <nat:4> \cdot <var:U> ^ <nat:5> + <nat:1> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:2> \} \\ <var:w> := <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:7> + <nat:4> \cdot <var:U> ^ <nat:6> + <nat:1> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:1> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + \} \\ <var:w> := <nat:2> + <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:8> + <nat:4> \cdot <var:U> ^ <nat:7> + <nat:1> \cdot <var:U> ^ <nat:6> + <nat:3> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:4> + <nat:1> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:2> \} \end{eqnarray} Allowing the execution of our code produces : \begin{eqnarray} <var:w> := <nat:3> + <var:w> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:9> + <nat:4> \cdot <var:U> ^ <nat:8> + <nat:1> \cdot <var:U> ^ <nat:7> + <nat:3> \cdot <var:U> ^ <nat:6> + <nat:3> \cdot <var:U> ^ <nat:5> + <nat:1> \cdot <var:U> ^ <nat:4> + <nat:2> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> + <nat:3> \} \\ <var:w> := <nat:3> + <var:w> * <var:F> \\ \{ <var:F> = <var:U> \land <var:w> = <nat:4> \cdot <var:U> ^ <nat:10> + <nat:4> \cdot <var:U> ^ <nat:9> + <nat:1> \cdot <var:U> ^ <nat:8> + <nat:3> \cdot <var:U> ^ <nat:7> + <nat:3> \cdot <var:U> ^ <nat:6> + <nat:1> \cdot <var:U> ^ <nat:5> + <nat:2> \cdot <var:U> ^ <nat:4> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:3> \} \end{eqnarray} As a result , our code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:F> ; <var:w> := <nat:1> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:1> + <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <var:w> * <var:F> ; <var:w> := <nat:2> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> ; <var:w> := <nat:3> + <var:w> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:F> = <var:U> }} <def:poly> {{ <var:w> = <nat:4> * <var:U> ^ <nat:10> + <nat:4> * <var:U> ^ <nat:9> + <nat:1> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:8> + <nat:4> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:w> = <nat:4> * <var:U> ^ <nat:10> + <nat:4> * <var:U> ^ <nat:9> + <nat:1> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 