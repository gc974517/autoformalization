\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:2> ; <var:g> := <var:A0> \end{verbatim} Allow that $ <var:X> = <var:C> $ ahead of executing our set of instructions , then we see $ <var:g> = <nat:2> $ after code terminates . \end{theorem} \begin{proof} See that this decorated code segment . \begin{eqnarray} \{ <var:X> = <var:C> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:X> = <var:C> \land <var:A0> = <nat:2> \} \\ <var:g> := <var:A0> \\ \{ <var:X> = <var:C> \land <var:g> = <nat:2> \} \end{eqnarray} Using usual Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:X> = <var:C> }} <var:A0> := <nat:2> ; <var:g> := <var:A0> {{ <var:g> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:g> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 