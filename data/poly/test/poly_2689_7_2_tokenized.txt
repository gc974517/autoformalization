\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v> := <nat:3> ; <var:v> := <nat:2> + <var:v> * <var:W> ; <var:v> := <nat:4> + <var:v> * <var:W> ; <var:v> := <nat:2> + <var:v> * <var:W> ; <var:v> := <nat:4> + <var:v> * <var:W> ; <var:v> := <nat:3> + <var:v> * <var:W> ; <var:v> := <nat:1> + <var:v> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Assuming that we have $ <var:W> = <var:G> $ ahead of the execution of our series of commands it holds that we have $ <var:v> = <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our program can be demonstrated with typical Hoare logic . Paying attention to the subsequent lines of codeseen in our series of instructions , we see \begin{verbatim} { <var:W> = <var:G> } <var:v> := <nat:3> { <var:W> = <var:G> \land <var:v> = <nat:3> } { <var:W> = <var:G> \land <var:v> = <nat:3> } <var:v> := <nat:2> + <var:v> * <var:W> { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> + <nat:2> } { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> + <nat:2> } <var:v> := <nat:4> + <var:v> * <var:W> { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> } { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> } <var:v> := <nat:2> + <var:v> * <var:W> { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> } { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> } <var:v> := <nat:4> + <var:v> * <var:W> { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> } { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> } <var:v> := <nat:3> + <var:v> * <var:W> { <var:W> = <var:G> \land <var:v> = <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:3> } \end{verbatim} This is rigorously given using the variable update law obtained from usual Hoare techniques . Looking at the subsequent line of code contained in our code , \begin{verbatim} { <var:W> = <var:G> } <var:v> := <nat:3> { <var:W> = <var:G> \land <var:v> = <nat:3> } \end{verbatim} This is known to be sound using the law from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:3> ; <var:v> := <nat:2> + <var:v> * <var:W> ; <var:v> := <nat:4> + <var:v> * <var:W> ; <var:v> := <nat:2> + <var:v> * <var:W> ; <var:v> := <nat:4> + <var:v> * <var:W> ; <var:v> := <nat:3> + <var:v> * <var:W> ; <var:v> := <nat:1> + <var:v> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:W> = <var:G> }} <def:poly> {{ <var:v> = <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:v> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:v> = <nat:3> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:v> = <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:v> = <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:v> = <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:v> = <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:v> = <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 