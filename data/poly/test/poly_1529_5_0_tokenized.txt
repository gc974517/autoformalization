\begin{document} \begin{theorem} Let the following list of instructions such that \begin{verbatim} <var:e0> := <nat:6> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:K> ; <var:U> := <var:e1> ; <var:U> := <var:U> + <var:e0> \end{verbatim} Assuming , taking positive coefficients $ <var:Y> $ , that $ <var:K> = <var:Y> $ ahead of executing the code , then $ <var:U> = <nat:3> * <var:Y> + <nat:6> $ . \end{theorem} \begin{proof} The proof of our code can be accomplished through standard Hoare logic . Taking a look at the upcoming statements contained in the set of commands , \verb | { <var:K> = <var:Y> } <var:e0> := <nat:6> { <var:K> = <var:Y> \land <var:e0> = <nat:6> } | , \verb | { <var:K> = <var:Y> \land <var:e0> = <nat:6> } <var:e1> := <nat:3> { <var:K> = <var:Y> \land <var:e0> = <nat:6> \land <var:e1> = <nat:3> } | and \verb | { <var:K> = <var:Y> \land <var:e0> = <nat:6> \land <var:e1> = <nat:3> } <var:e1> := <var:e1> * <var:K> { <var:K> = <var:Y> \land <var:e0> = <nat:6> \land <var:e1> = <nat:3> \cdot <var:Y> } | . This is ensured by the assignment law from typical Hoare reasoning . Paying attention to the following bit of code seen in the series of commands , we see \verb | { <var:K> = <var:Y> } <var:e0> := <nat:6> { <var:K> = <var:Y> \land <var:e0> = <nat:6> } | . This is sound by the scheme in usual Hoare logic . Now , we see \verb | { <var:K> = <var:Y> } <var:e0> := <nat:6> { <var:K> = <var:Y> \land <var:e0> = <nat:6> } | . This is sound with the environment update rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:K> = <var:Y> }} <var:e0> := <nat:6> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:K> ; <var:U> := <var:e1> ; <var:U> := <var:U> + <var:e0> {{ <var:U> = <nat:3> * <var:Y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:e0> = <nat:6> /\ <var:U> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:U> = <nat:3> * <var:Y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 