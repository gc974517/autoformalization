\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g> := <nat:4> ; <var:g> := <nat:3> + <var:g> * <var:P> ; <var:g> := <nat:2> + <var:g> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Given that we have $ <var:P> = <var:b> $ , for some integers $ <var:b> $ , ahead of executing this list of commands then $ <var:g> = <nat:4> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:2> $ when set of instructions has finished . \end{theorem} \begin{proof} The way to prove correctness for our program is given with standard Hoare techniques . Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:b> \} & <var:g> := <nat:4> & \{ <var:P> = <var:b> \land <var:g> = <nat:4> \} \end{tabular} Paying attention to the upcoming pieces of code in our code segment , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:b> \} & <var:g> := <nat:4> & \{ <var:P> = <var:b> \land <var:g> = <nat:4> \} \\ \{ <var:P> = <var:b> \land <var:g> = <nat:4> \} & <var:g> := <nat:3> + <var:g> * <var:P> & \{ <var:P> = <var:b> \land <var:g> = <nat:4> \times <var:b> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:4> ; <var:g> := <nat:3> + <var:g> * <var:P> ; <var:g> := <nat:2> + <var:g> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:P> = <var:b> }} <def:poly> {{ <var:g> = <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:g> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:g> = <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:g> = <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 