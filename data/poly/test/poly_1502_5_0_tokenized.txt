\begin{document} \begin{theorem} We define the following series of instructions as follows \begin{verbatim} <var:O0> := <nat:4> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:k> ; <var:s> := <var:O1> ; <var:s> := <var:s> + <var:O0> \end{verbatim} Allow it to hold that $ <var:k> = <var:A> $ prior to evaluating our set of commands , then we have $ <var:s> = <nat:4> \times <var:A> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:A> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:k> = <var:A> \land <var:O0> = <nat:4> \} \\ <var:O1> := <nat:4> ; \\ \{ <var:k> = <var:A> \land <var:O0> = <nat:4> \land <var:O1> = <nat:4> \} \\ <var:O1> := <var:O1> * <var:k> ; \\ \{ <var:k> = <var:A> \land <var:O0> = <nat:4> \land <var:O1> = <nat:4> * <var:A> \} \\ <var:s> := <var:O1> ; \\ \{ <var:k> = <var:A> \land <var:O0> = <nat:4> \land <var:s> = <nat:4> * <var:A> \} \\ <var:s> := <var:s> + <var:O0> \\ \{ <var:k> = <var:A> \land <var:s> = <nat:4> * <var:A> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:k> = <var:A> }} <var:O0> := <nat:4> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:k> ; <var:s> := <var:O1> ; <var:s> := <var:s> + <var:O0> {{ <var:s> = <nat:4> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:O0> = <nat:4> /\ <var:s> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:s> = <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 