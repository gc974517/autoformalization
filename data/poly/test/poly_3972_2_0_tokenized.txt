\begin{document} \begin{theorem} We define a list of instructions such that \begin{verbatim} <var:r0> := <nat:4> ; <var:V> := <var:r0> \end{verbatim} Allowing that $ <var:q> = <var:U> $ ahead of interpreting our segment of code it holds that we see $ <var:V> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our code is given using standard Hoare techniques . Focusing on the subsequent line in our program , \[ \begin{tabular} {rcl} \{ <var:q> = <var:U> \} & <var:r0> := <nat:4> & \{ <var:q> = <var:U> \land <var:r0> = <nat:4> \} \end{tabular} This is deduced with the variable assignmet scheme given by usual Hoare reasoning . Considering the following statement seen in the program , \[ \begin{tabular} {rcl} \{ <var:q> = <var:U> \} & <var:r0> := <nat:4> & \{ <var:q> = <var:U> \land <var:r0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:q> = <var:U> }} <var:r0> := <nat:4> ; <var:V> := <var:r0> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 