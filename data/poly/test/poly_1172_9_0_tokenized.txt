\begin{document} \begin{theorem} Define a list of commands as \begin{verbatim} <var:P0> := <nat:8> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:y> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:y> ; <var:P2> := <var:P2> * <var:y> ; <var:G> := <var:P2> ; <var:G> := <var:G> + <var:P1> ; <var:G> := <var:G> + <var:P0> \end{verbatim} Assuming it to hold that $ <var:y> = <var:H> $ before interpreting our list of commands , it holds that we see $ <var:G> = <nat:3> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:8> $ after set of instructions has finished executing . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:y> = <var:H> \} \\ <var:P0> := <nat:8> ; \\ \{ <var:y> = <var:H> \land <var:P0> = <nat:8> \} \\ <var:P1> := <nat:3> ; \\ \{ <var:y> = <var:H> \land <var:P0> = <nat:8> \land <var:P1> = <nat:3> \} \\ <var:P1> := <var:P1> * <var:y> ; \\ \{ <var:y> = <var:H> \land <var:P0> = <nat:8> \land <var:P1> = <nat:3> \times <var:H> \} \\ <var:P2> := <nat:3> ; \\ \{ <var:y> = <var:H> \land <var:P0> = <nat:8> \land <var:P1> = <nat:3> \times <var:H> \land <var:P2> = <nat:3> \} \\ <var:P2> := <var:P2> * <var:y> ; \\ \{ <var:y> = <var:H> \land <var:P0> = <nat:8> \land <var:P1> = <nat:3> \times <var:H> \land <var:P2> = <nat:3> \times <var:H> \} \\ <var:P2> := <var:P2> * <var:y> ; \\ \{ <var:y> = <var:H> \land <var:P0> = <nat:8> \land <var:P1> = <nat:3> \times <var:H> \land <var:P2> = <nat:3> \times <var:H> ^ <nat:2> \} \\ <var:G> := <var:P2> ; \\ \{ <var:y> = <var:H> \land <var:P0> = <nat:8> \land <var:P1> = <nat:3> \times <var:H> \land <var:G> = <nat:3> \times <var:H> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:P1> ; \\ \{ <var:y> = <var:H> \land <var:P0> = <nat:8> \land <var:G> = <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> \} \\ <var:G> := <var:G> + <var:P0> \\ \{ <var:y> = <var:H> \land <var:G> = <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:8> \} \end{eqnarray} As a result , the code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:y> = <var:H> }} <var:P0> := <nat:8> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:y> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:y> ; <var:P2> := <var:P2> * <var:y> ; <var:G> := <var:P2> ; <var:G> := <var:G> + <var:P1> ; <var:G> := <var:G> + <var:P0> {{ <var:G> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:3> * <var:H> /\ <var:P2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:3> * <var:H> /\ <var:P2> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:3> * <var:H> /\ <var:P2> = <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:3> * <var:H> /\ <var:G> = <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:P0> = <nat:8> /\ <var:G> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:G> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 