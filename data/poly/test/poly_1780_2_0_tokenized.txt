\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:3> ; <var:E> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given --- for all $ <var:V> \in \mathbb{Z}^+ $ --- it to be that $ <var:P> = <var:V> $ prior to the evaluation of the series of instructions it must be that $ <var:E> = <nat:3> $ when set of commands has finished . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:P> = <var:V> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:P> = <var:V> \land <var:K0> = <nat:3> \} \\ <var:E> := <var:K0> \\ \{ <var:P> = <var:V> \land <var:E> = <nat:3> \} \end{eqnarray} Considering the preceding argument , the set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:3> ; <var:E> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:P> = <var:V> }} <def:poly> {{ <var:E> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:E> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 