\begin{document} \begin{theorem} Define the following series of instructions such that \begin{verbatim} <var:B1> := <var:w> ; <var:B2> := <var:B1> * <var:w> ; <var:B0> := <nat:8> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:3> ; <var:V> := <var:B2> <var:V> := <var:V> + <var:B1> <var:V> := <var:V> + <var:B0> \end{verbatim} Allowing $ <var:w> = <var:R> $ --- for every positive integer coefficients $ <var:R> $ --- before executing the program then we have $ <var:V> = <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is done using usual Hoare reasoning . Moving on , we have \[ \begin{tabular} {rcl} \{ <var:w> = <var:R> \} & <var:B1> := <var:w> & \{ <var:w> = <var:R> \land <var:B1> = <var:R> \} \\ \{ <var:w> = <var:R> \land <var:B1> = <var:R> \} & <var:B2> := <var:B1> * <var:w> & \{ <var:w> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \} \\ \{ <var:w> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \} & <var:B0> := <nat:8> & \{ <var:w> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B0> = <nat:8> \} \\ \{ <var:w> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B0> = <nat:8> \} & <var:B1> := <var:B1> * <nat:2> & \{ <var:w> = <var:R> \land <var:B1> = <nat:2> \times <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B0> = <nat:8> \} \end{tabular} This is ensured with the variable update inference rule obtained from Hoare logic . Honing in on the next lines found in the program , we have \[ \begin{tabular} {rcl} \{ <var:w> = <var:R> \} & <var:B1> := <var:w> & \{ <var:w> = <var:R> \land <var:B1> = <var:R> \} \\ \{ <var:w> = <var:R> \land <var:B1> = <var:R> \} & <var:B2> := <var:B1> * <var:w> & \{ <var:w> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \} \\ \{ <var:w> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \} & <var:B0> := <nat:8> & \{ <var:w> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B0> = <nat:8> \} \\ \{ <var:w> = <var:R> \land <var:B1> = <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B0> = <nat:8> \} & <var:B1> := <var:B1> * <nat:2> & \{ <var:w> = <var:R> \land <var:B1> = <nat:2> \times <var:R> \land <var:B2> = <var:R> ^ <nat:2> \land <var:B0> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:w> = <var:R> }} <var:B1> := <var:w> ; <var:B2> := <var:B1> * <var:w> ; <var:B0> := <nat:8> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:3> ; <var:V> := <var:B2> <var:V> := <var:V> + <var:B1> <var:V> := <var:V> + <var:B0> {{ <var:V> = <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:B1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:B1> = <var:R> /\ <var:B2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:B1> = <var:R> /\ <var:B2> = <var:R> ^ <nat:2> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:B1> = <nat:2> * <var:R> /\ <var:B2> = <var:R> ^ <nat:2> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:B1> = <nat:2> * <var:R> /\ <var:B2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:B1> = <nat:2> * <var:R> /\ <var:B0> = <nat:8> /\ <var:V> = <nat:3> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:B0> = <nat:8> /\ <var:V> = <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:V> = <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 