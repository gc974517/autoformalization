\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v1> := <var:l> ; <var:v2> := <var:v1> * <var:l> ; <var:v3> := <var:v2> * <var:l> ; <var:v4> := <var:v3> * <var:l> ; <var:v0> := <nat:2> ; <var:v2> := <var:v2> * <nat:7> ; <var:v3> := <var:v3> * <nat:1> ; <var:v4> := <var:v4> * <nat:2> ; <var:R> := <var:v4> <var:R> := <var:R> + <var:v3> <var:R> := <var:R> + <var:v2> <var:R> := <var:R> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:l> = <var:r> $ before executing this list of instructions , it follows that we see $ <var:R> = <nat:2> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:3> + <nat:7> \times <var:r> ^ <nat:2> + <nat:2> $ after set of instructions finishes . \end{theorem} \begin{proof} The proof of our set of commands is given using usual Hoare logic . Stepping forward , we see the environment update line \verb | <var:v1> := <var:l> ; | . This transfers the precondition $ \{ <var:l> = <var:r> \} $ as the condition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \} $ . Moving on to the next step , we have the environment update command binding $ <var:v1> * <var:l> $ as $ <var:v2>$ . This code moves $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \} $ as the postcondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \} $ . This is shown by the assignment inference rule given in standard Hoare reasoning . Advancing , we see the variable binding line \verb | <var:v3> := <var:v2> * <var:l> ; | . This line forwards $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \} $ into $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \} $ . Focusing on the subsequent statement found in the program , we see the environment update line binding $ <var:v3> * <var:l> $ into $ <var:v4>$ . This code forwards the precondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \} $ into the condition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v4> = <var:r> ^ <nat:4> \} $ . This is ensured through the assignment rule defined by standard Hoare logic . Moving forward to the following bit of code in our set of commands , we see the binding command \verb | <var:v0> := <nat:2> ; | . This redefines the precondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v4> = <var:r> ^ <nat:4> \} $ as the postcondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v4> = <var:r> ^ <nat:4> \land <var:v0> = <nat:2> \} $ . After , we see the variable binding statement yielding $ <var:v2> * <nat:7> $ toward $ <var:v2>$ . This code takes $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v4> = <var:r> ^ <nat:4> \land <var:v0> = <nat:2> \} $ toward $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v4> = <var:r> ^ <nat:4> \land <var:v0> = <nat:2> \} $ . Advancing to the following bit of code contained in our series of commands , we have the variable update line yielding $ <var:v3> * <nat:1> $ as $ <var:v3>$ . This statement transfers the condition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v4> = <var:r> ^ <nat:4> \land <var:v0> = <nat:2> \} $ to the postcondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:v4> = <var:r> ^ <nat:4> \land <var:v0> = <nat:2> \} $ . This is deduced by the assignment scheme in Hoare techniques . Following , we have the environment update line \verb | <var:v4> := <var:v4> * <nat:2> ; | . This forwards the precondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:v4> = <var:r> ^ <nat:4> \land <var:v0> = <nat:2> \} $ as the postcondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:v4> = <nat:2> \cdot <var:r> ^ <nat:4> \land <var:v0> = <nat:2> \} $ . Advancing on , we see the assignment command assigning $ <var:v4$ to $ <var:R>$ . This command transfers the precondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:v4> = <nat:2> \cdot <var:r> ^ <nat:4> \land <var:v0> = <nat:2> \} $ toward the postcondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:v0> = <nat:2> \land <var:R> = <nat:2> \cdot <var:r> ^ <nat:4> \} $ . This is shown to be logically sound with the assignment law defined in Hoare logic . Considering the proceeding command contained in the list of commands , the command binding $ <var:R> + <var:v3$ into $ <var:R>$ . This line takes the condition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:v0> = <nat:2> \land <var:R> = <nat:2> \cdot <var:r> ^ <nat:4> \} $ to the postcondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v0> = <nat:2> \land <var:R> = <nat:2> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> \} $ . This is shown through the assignment scheme given by Hoare techniques . Paying attention to the proceeding piece of code in our list of instructions , the environment update line letting $ <var:R> + <var:v2$ to $ <var:R>$ . This takes the precondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:v0> = <nat:2> \land <var:R> = <nat:2> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> \} $ to $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v0> = <nat:2> \land <var:R> = <nat:2> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> \} $ . Taking a look at the upcoming piece of code found in our code , we see the variable binding command \verb | <var:R> := <var:R> + <var:v0> | . This transfers the precondition $ \{ <var:l> = <var:r> \land <var:v1> = <var:r> \land <var:v0> = <nat:2> \land <var:R> = <nat:2> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> \} $ as the postcondition $ \{ <var:l> = <var:r> \land <var:R> = <nat:2> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <var:v4> : string := " <var:v4> " . Definition <def:poly> := <var:v1> := <var:l> ; <var:v2> := <var:v1> * <var:l> ; <var:v3> := <var:v2> * <var:l> ; <var:v4> := <var:v3> * <var:l> ; <var:v0> := <nat:2> ; <var:v2> := <var:v2> * <nat:7> ; <var:v3> := <var:v3> * <nat:1> ; <var:v4> := <var:v4> * <nat:2> ; <var:R> := <var:v4> <var:R> := <var:R> + <var:v3> <var:R> := <var:R> + <var:v2> <var:R> := <var:R> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:l> = <var:r> }} <def:poly> {{ <var:R> = <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <var:r> ^ <nat:2> /\ <var:v3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <var:r> ^ <nat:2> /\ <var:v3> = <var:r> ^ <nat:3> /\ <var:v4> = <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <var:r> ^ <nat:2> /\ <var:v3> = <var:r> ^ <nat:3> /\ <var:v4> = <var:r> ^ <nat:4> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:v3> = <var:r> ^ <nat:3> /\ <var:v4> = <var:r> ^ <nat:4> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:v3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:v4> = <var:r> ^ <nat:4> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:v3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:v4> = <nat:2> * <var:r> ^ <nat:4> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:v3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:v0> = <nat:2> /\ <var:R> = <nat:2> * <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:v0> = <nat:2> /\ <var:R> = <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:v1> = <var:r> /\ <var:v0> = <nat:2> /\ <var:R> = <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:R> = <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 