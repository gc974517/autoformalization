\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} : \begin{verbatim} <var:z1> := <var:g> ; <var:z2> := <var:z1> * <var:g> ; <var:z3> := <var:z2> * <var:g> ; <var:z4> := <var:z3> * <var:g> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:3> ; <var:z4> := <var:z4> * <nat:5> ; <var:n> := <var:z4> <var:n> := <var:n> + <var:z3> <var:n> := <var:n> + <var:z2> <var:n> := <var:n> + <var:z1> <var:n> := <var:n> + <var:z0> \end{verbatim} Assuming assuming some integers $ <var:y> $ that $ <var:g> = <var:y> $ ahead of executing this series of instructions it must be that we see $ <var:n> = <nat:5> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:8> \times <var:y> ^ <nat:2> + <nat:7> \times <var:y> + <nat:9> $ once program has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is shown through the following decorated code . \begin{eqnarray} \{ <var:g> = <var:y> \} \\ <var:z1> := <var:g> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <var:y> \} \\ <var:z2> := <var:z1> * <var:g> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <var:y> \land <var:z2> = <var:y> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:g> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <var:y> \land <var:z2> = <var:y> ^ <nat:2> \land <var:z3> = <var:y> ^ <nat:3> \} \\ <var:z4> := <var:z3> * <var:g> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <var:y> \land <var:z2> = <var:y> ^ <nat:2> \land <var:z3> = <var:y> ^ <nat:3> \land <var:z4> = <var:y> ^ <nat:4> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <var:y> \land <var:z2> = <var:y> ^ <nat:2> \land <var:z3> = <var:y> ^ <nat:3> \land <var:z4> = <var:y> ^ <nat:4> \land <var:z0> = <nat:9> \} \\ <var:z1> := <var:z1> * <nat:7> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <nat:7> * <var:y> \land <var:z2> = <var:y> ^ <nat:2> \land <var:z3> = <var:y> ^ <nat:3> \land <var:z4> = <var:y> ^ <nat:4> \land <var:z0> = <nat:9> \} \\ <var:z2> := <var:z2> * <nat:8> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <nat:7> * <var:y> \land <var:z2> = <nat:8> * <var:y> ^ <nat:2> \land <var:z3> = <var:y> ^ <nat:3> \land <var:z4> = <var:y> ^ <nat:4> \land <var:z0> = <nat:9> \} \\ <var:z3> := <var:z3> * <nat:3> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <nat:7> * <var:y> \land <var:z2> = <nat:8> * <var:y> ^ <nat:2> \land <var:z3> = <nat:3> * <var:y> ^ <nat:3> \land <var:z4> = <var:y> ^ <nat:4> \land <var:z0> = <nat:9> \} \\ <var:z4> := <var:z4> * <nat:5> ; \\ \{ <var:g> = <var:y> \land <var:z1> = <nat:7> * <var:y> \land <var:z2> = <nat:8> * <var:y> ^ <nat:2> \land <var:z3> = <nat:3> * <var:y> ^ <nat:3> \land <var:z4> = <nat:5> * <var:y> ^ <nat:4> \land <var:z0> = <nat:9> \} \\ <var:n> := <var:z4> \\ \{ <var:g> = <var:y> \land <var:z1> = <nat:7> * <var:y> \land <var:z2> = <nat:8> * <var:y> ^ <nat:2> \land <var:z3> = <nat:3> * <var:y> ^ <nat:3> \land <var:z0> = <nat:9> \land <var:n> = <nat:5> * <var:y> ^ <nat:4> \} \\ <var:n> := <var:n> + <var:z3> \\ \{ <var:g> = <var:y> \land <var:z1> = <nat:7> * <var:y> \land <var:z2> = <nat:8> * <var:y> ^ <nat:2> \land <var:z0> = <nat:9> \land <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:z2> \\ \{ <var:g> = <var:y> \land <var:z1> = <nat:7> * <var:y> \land <var:z0> = <nat:9> \land <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:z1> \\ \{ <var:g> = <var:y> \land <var:z0> = <nat:9> \land <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:7> * <var:y> \} \\ <var:n> := <var:n> + <var:z0> \\ \{ <var:g> = <var:y> \land <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:9> \} \end{eqnarray} Applying Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <var:z4> : string := " <var:z4> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:g> = <var:y> }} <var:z1> := <var:g> ; <var:z2> := <var:z1> * <var:g> ; <var:z3> := <var:z2> * <var:g> ; <var:z4> := <var:z3> * <var:g> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:3> ; <var:z4> := <var:z4> * <nat:5> ; <var:n> := <var:z4> <var:n> := <var:n> + <var:z3> <var:n> := <var:n> + <var:z2> <var:n> := <var:n> + <var:z1> <var:n> := <var:n> + <var:z0> {{ <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <var:y> /\ <var:z2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <var:y> /\ <var:z2> = <var:y> ^ <nat:2> /\ <var:z3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <var:y> /\ <var:z2> = <var:y> ^ <nat:2> /\ <var:z3> = <var:y> ^ <nat:3> /\ <var:z4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <var:y> /\ <var:z2> = <var:y> ^ <nat:2> /\ <var:z3> = <var:y> ^ <nat:3> /\ <var:z4> = <var:y> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <nat:7> * <var:y> /\ <var:z2> = <var:y> ^ <nat:2> /\ <var:z3> = <var:y> ^ <nat:3> /\ <var:z4> = <var:y> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <nat:7> * <var:y> /\ <var:z2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:z3> = <var:y> ^ <nat:3> /\ <var:z4> = <var:y> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <nat:7> * <var:y> /\ <var:z2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:y> ^ <nat:3> /\ <var:z4> = <var:y> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <nat:7> * <var:y> /\ <var:z2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:y> ^ <nat:3> /\ <var:z4> = <nat:5> * <var:y> ^ <nat:4> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <nat:7> * <var:y> /\ <var:z2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:y> ^ <nat:3> /\ <var:z0> = <nat:9> /\ <var:n> = <nat:5> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <nat:7> * <var:y> /\ <var:z2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:z0> = <nat:9> /\ <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z1> = <nat:7> * <var:y> /\ <var:z0> = <nat:9> /\ <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:z0> = <nat:9> /\ <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:n> = <nat:5> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 