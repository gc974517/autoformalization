\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:2> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:s> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:s> ; <var:L2> := <var:L2> * <var:s> ; <var:L3> := <nat:4> ; <var:L3> := <var:L3> * <var:s> ; <var:L3> := <var:L3> * <var:s> ; <var:L3> := <var:L3> * <var:s> ; <var:f> := <var:L3> ; <var:f> := <var:f> + <var:L2> ; <var:f> := <var:f> + <var:L1> ; <var:f> := <var:f> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:s> = <var:i> $ , letting positive numbers $ <var:i> $ , before executing this list of instructions , it holds that we see $ <var:f> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the code segment is accomplished using typical Hoare reasoning . Honing in on the upcoming statements in our series of commands , we see \begin{verbatim} { <var:s> = <var:i> } <var:L0> := <nat:2> { <var:s> = <var:i> \land <var:L0> = <nat:2> } { <var:s> = <var:i> \land <var:L0> = <nat:2> } <var:L1> := <nat:1> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> } <var:L1> := <var:L1> * <var:s> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> } <var:L2> := <nat:4> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> } <var:L2> := <var:L2> * <var:s> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> } <var:L2> := <var:L2> * <var:s> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> } <var:L3> := <nat:4> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:4> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:4> } <var:L3> := <var:L3> * <var:s> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:i> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:i> } <var:L3> := <var:L3> * <var:s> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:i> ^ <nat:2> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:i> ^ <nat:2> } <var:L3> := <var:L3> * <var:s> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:i> ^ <nat:3> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:i> ^ <nat:3> } <var:f> := <var:L3> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:f> = <nat:4> \times <var:i> ^ <nat:3> } { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:L2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:f> = <nat:4> \times <var:i> ^ <nat:3> } <var:f> := <var:f> + <var:L2> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:i> \land <var:f> = <nat:4> \times <var:i> ^ <nat:3> + <nat:4> \times <var:i> ^ <nat:2> } \end{verbatim} Taking another step toward the following steps found in the program , we see \begin{verbatim} { <var:s> = <var:i> } <var:L0> := <nat:2> { <var:s> = <var:i> \land <var:L0> = <nat:2> } { <var:s> = <var:i> \land <var:L0> = <nat:2> } <var:L1> := <nat:1> { <var:s> = <var:i> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> } \end{verbatim} This is given by the inference rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L0> := <nat:2> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:s> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:s> ; <var:L2> := <var:L2> * <var:s> ; <var:L3> := <nat:4> ; <var:L3> := <var:L3> * <var:s> ; <var:L3> := <var:L3> * <var:s> ; <var:L3> := <var:L3> * <var:s> ; <var:f> := <var:L3> ; <var:f> := <var:f> + <var:L2> ; <var:f> := <var:f> + <var:L1> ; <var:f> := <var:f> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:s> = <var:i> }} <def:poly> {{ <var:f> = <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:L2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:L2> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:L2> = <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:L2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:L3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:L2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:L3> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:L2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:L3> = <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:L2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:L3> = <nat:4> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:L2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:f> = <nat:4> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:i> /\ <var:f> = <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:L0> = <nat:2> /\ <var:f> = <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:f> = <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 