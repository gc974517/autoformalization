\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y1> := <var:Y> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:3> ; <var:D> := <var:y1> <var:D> := <var:D> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:Y> = <var:b> $ ahead of evaluating this code it holds that we have $ <var:D> = <nat:3> * <var:b> + <nat:1> $ . \end{theorem} \begin{proof} Using Hoare logic returns : \begin{eqnarray} \{ <var:Y> = <var:b> \} \\ <var:y1> := <var:Y> ; \\ \{ <var:Y> = <var:b> \land <var:y1> = <var:b> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:Y> = <var:b> \land <var:y1> = <var:b> \land <var:y0> = <nat:1> \} \\ <var:y1> := <var:y1> * <nat:3> ; \\ \{ <var:Y> = <var:b> \land <var:y1> = <nat:3> \times <var:b> \land <var:y0> = <nat:1> \} \\ <var:D> := <var:y1> \\ \{ <var:Y> = <var:b> \land <var:y0> = <nat:1> \land <var:D> = <nat:3> \times <var:b> \} \\ <var:D> := <var:D> + <var:y0> \\ \{ <var:Y> = <var:b> \land <var:D> = <nat:3> \times <var:b> + <nat:1> \} \end{eqnarray} Hence , our code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:Y> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:3> ; <var:D> := <var:y1> <var:D> := <var:D> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Y> = <var:b> }} <def:poly> {{ <var:D> = <nat:3> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:y1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:y1> = <var:b> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:y1> = <nat:3> * <var:b> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:y0> = <nat:1> /\ <var:D> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:D> = <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 