\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:Z1> := <var:o> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:9> ; <var:h> := <var:Z1> <var:h> := <var:h> + <var:Z0> \end{verbatim} Allow that $ <var:o> = <var:C> $ ( given all integers $ <var:C> $ ) ahead of running our series of commands it holds that we have $ <var:h> = <nat:9> \times <var:C> + <nat:1> $ when series of instructions has finished executing . \end{theorem} \begin{proof} The proof of our segment of code is demonstrated with typical Hoare logic . Immediately following , we have \begin{eqnarray} \{ <var:o> = <var:C> \} \, <var:Z1> := <var:o> \, \{ <var:o> = <var:C> \land <var:Z1> = <var:C> \} \\ \{ <var:o> = <var:C> \land <var:Z1> = <var:C> \} \, <var:Z0> := <nat:1> \, \{ <var:o> = <var:C> \land <var:Z1> = <var:C> \land <var:Z0> = <nat:1> \} \\ \{ <var:o> = <var:C> \land <var:Z1> = <var:C> \land <var:Z0> = <nat:1> \} \, <var:Z1> := <var:Z1> * <nat:9> \, \{ <var:o> = <var:C> \land <var:Z1> = <nat:9> \times <var:C> \land <var:Z0> = <nat:1> \} \end{eqnarray} Moving forward to the upcoming lines of codefound in the program , we see \begin{eqnarray} \{ <var:o> = <var:C> \} \, <var:Z1> := <var:o> \, \{ <var:o> = <var:C> \land <var:Z1> = <var:C> \} \\ \{ <var:o> = <var:C> \land <var:Z1> = <var:C> \} \, <var:Z0> := <nat:1> \, \{ <var:o> = <var:C> \land <var:Z1> = <var:C> \land <var:Z0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:o> = <var:C> }} <var:Z1> := <var:o> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:9> ; <var:h> := <var:Z1> <var:h> := <var:h> + <var:Z0> {{ <var:h> = <nat:9> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:Z1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:Z1> = <var:C> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:Z1> = <nat:9> * <var:C> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:Z0> = <nat:1> /\ <var:h> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:h> = <nat:9> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 