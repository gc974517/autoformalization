\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:3> ; <var:Z> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:G> = <var:I> $ ahead of running the code it follows that $ <var:Z> = <nat:3> $ when set of instructions has executed . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives : \begin{eqnarray} \{ <var:G> = <var:I> \} \\ <var:J0> := <nat:3> ; \\ \{ <var:G> = <var:I> \land <var:J0> = <nat:3> \} \\ <var:Z> := <var:J0> \\ \{ <var:G> = <var:I> \land <var:Z> = <nat:3> \} \end{eqnarray} Therefore , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:3> ; <var:Z> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:G> = <var:I> }} <def:poly> {{ <var:Z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:I> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:I> /\ <var:Z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 