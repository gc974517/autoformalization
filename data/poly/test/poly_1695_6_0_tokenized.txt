\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:9> ; <var:B2> := <nat:5> ; <var:B2> := <var:B2> * <var:U> ; <var:B2> := <var:B2> * <var:U> ; <var:y> := <var:B2> ; <var:y> := <var:y> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:U> = <var:k> $ --- with some positive numbers $ <var:k> $ --- before running our series of instructions , it must be that we have $ <var:y> = <nat:5> \times <var:k> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:U> = <var:k> \} \\ <var:B0> := <nat:9> ; \\ \{ <var:U> = <var:k> \land <var:B0> = <nat:9> \} \\ <var:B2> := <nat:5> ; \\ \{ <var:U> = <var:k> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \} \\ <var:B2> := <var:B2> * <var:U> ; \\ \{ <var:U> = <var:k> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> * <var:k> \} \\ <var:B2> := <var:B2> * <var:U> ; \\ \{ <var:U> = <var:k> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> * <var:k> ^ <nat:2> \} \\ <var:y> := <var:B2> ; \\ \{ <var:U> = <var:k> \land <var:B0> = <nat:9> \land <var:y> = <nat:5> * <var:k> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:B0> \\ \{ <var:U> = <var:k> \land <var:y> = <nat:5> * <var:k> ^ <nat:2> + <nat:9> \} \end{eqnarray} As a consequence , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:9> ; <var:B2> := <nat:5> ; <var:B2> := <var:B2> * <var:U> ; <var:B2> := <var:B2> * <var:U> ; <var:y> := <var:B2> ; <var:y> := <var:y> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:U> = <var:k> }} <def:poly> {{ <var:y> = <nat:5> * <var:k> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:B0> = <nat:9> /\ <var:y> = <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:y> = <nat:5> * <var:k> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 