\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:8> ; <var:Y1> := <var:Y1> * <var:k> ; <var:L> := <var:Y1> ; <var:L> := <var:L> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:k> = <var:m> $ ahead of interpreting our segment of code it must be that $ <var:L> = <nat:8> \times <var:m> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this segment of code can be done through usual Hoare reasoning . Following , the command assigning $ <nat:7> $ into $ <var:Y0>$ . This code transfers $ \{ <var:k> = <var:m> \} $ to the condition $ \{ <var:k> = <var:m> \land <var:Y0> = <nat:7> \} $ . This is shown by the assignment inference rule of typical Hoare reasoning . Advancing to the following line of code in the series of commands , we have the line yielding $ <nat:8> $ to $ <var:Y1>$ . This line takes the precondition $ \{ <var:k> = <var:m> \land <var:Y0> = <nat:7> \} $ to the postcondition $ \{ <var:k> = <var:m> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:8> \} $ . This is rigorously given with the assignment rule of standard Hoare techniques . Moving forward to the proceeding line of code contained in the code segment , we have the statement \verb | <var:Y1> := <var:Y1> * <var:k> ; | . This forwards $ \{ <var:k> = <var:m> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:8> \} $ to the condition $ \{ <var:k> = <var:m> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:8> \cdot <var:m> \} $ . Shifting focus toward the next statement in the list of instructions , we have the variable binding command \verb | <var:L> := <var:Y1> ; | . This line advances $ \{ <var:k> = <var:m> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:8> \cdot <var:m> \} $ to $ \{ <var:k> = <var:m> \land <var:Y0> = <nat:7> \land <var:L> = <nat:8> \cdot <var:m> \} $ . This is given with the assignment inference rule found in typical Hoare techniques . Moving forward to the next step , the statement \verb | <var:L> := <var:L> + <var:Y0> | . This command takes $ \{ <var:k> = <var:m> \land <var:Y0> = <nat:7> \land <var:L> = <nat:8> \cdot <var:m> \} $ toward the condition $ \{ <var:k> = <var:m> \land <var:L> = <nat:8> \cdot <var:m> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:7> ; <var:Y1> := <nat:8> ; <var:Y1> := <var:Y1> * <var:k> ; <var:L> := <var:Y1> ; <var:L> := <var:L> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:k> = <var:m> }} <def:poly> {{ <var:L> = <nat:8> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:Y0> = <nat:7> /\ <var:L> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:L> = <nat:8> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 