\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m> := <nat:4> ; <var:m> := <var:m> * <var:W> ; <var:m> := <nat:2> + <var:m> * <var:W> ; <var:m> := <nat:2> + <var:m> * <var:W> ; <var:m> := <var:m> * <var:W> ; <var:m> := <nat:4> + <var:m> * <var:W> ; <var:m> := <nat:2> + <var:m> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> . Allowing that $ <var:W> = <var:B> $ ahead of the execution of this code segment it must be that we have $ <var:m> = <nat:4> \cdot <var:B> ^ <nat:6> + <nat:2> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> + <nat:2> $ . \end{theorem} \begin{proof} Note that the below decorated program . \begin{eqnarray} \{ <var:W> = <var:B> \} \\ <var:m> := <nat:4> ; \\ \{ <var:W> = <var:B> \land <var:m> = <nat:4> \} \\ <var:m> := <var:m> * <var:W> ; \\ \{ <var:W> = <var:B> \land <var:m> = <nat:4> * <var:B> + \} \\ <var:m> := <nat:2> + <var:m> * <var:W> ; \\ \{ <var:W> = <var:B> \land <var:m> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:W> ; \\ \{ <var:W> = <var:B> \land <var:m> = <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:2> \} \\ <var:m> := <var:m> * <var:W> ; \\ \{ <var:W> = <var:B> \land <var:m> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + \} \\ <var:m> := <nat:4> + <var:m> * <var:W> ; \\ \{ <var:W> = <var:B> \land <var:m> = <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> \} \\ <var:m> := <nat:2> + <var:m> * <var:W> \\ \{ <var:W> = <var:B> \land <var:m> = <nat:4> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:4> ; <var:m> := <var:m> * <var:W> ; <var:m> := <nat:2> + <var:m> * <var:W> ; <var:m> := <nat:2> + <var:m> * <var:W> ; <var:m> := <var:m> * <var:W> ; <var:m> := <nat:4> + <var:m> * <var:W> ; <var:m> := <nat:2> + <var:m> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:W> = <var:B> }} <def:poly> {{ <var:m> = <nat:4> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:m> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:m> = <nat:4> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:m> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:m> = <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:m> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:m> = <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:m> = <nat:4> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 