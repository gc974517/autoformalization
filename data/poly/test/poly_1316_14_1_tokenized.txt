\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:e> ; <var:b2> := <var:b1> * <var:e> ; <var:b3> := <var:b2> * <var:e> ; <var:b4> := <var:b3> * <var:e> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:6> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:1> ; <var:b4> := <var:b4> * <nat:7> ; <var:l> := <var:b4> <var:l> := <var:l> + <var:b3> <var:l> := <var:l> + <var:b2> <var:l> := <var:l> + <var:b1> <var:l> := <var:l> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allowing for all positive numbers $ <var:J> $ it to be that $ <var:e> = <var:J> $ ahead of executing the segment of code , it follows that we have $ <var:l> = <nat:7> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:6> \times <var:J> + <nat:3> $ after segment of code executes . \end{theorem} \begin{proof} See that the following decorated set of instructions . \begin{eqnarray} \{ <var:e> = <var:J> \} \\ <var:b1> := <var:e> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <var:J> \} \\ <var:b2> := <var:b1> * <var:e> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <var:J> \land <var:b2> = <var:J> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:e> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <var:J> \land <var:b2> = <var:J> ^ <nat:2> \land <var:b3> = <var:J> ^ <nat:3> \} \\ <var:b4> := <var:b3> * <var:e> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <var:J> \land <var:b2> = <var:J> ^ <nat:2> \land <var:b3> = <var:J> ^ <nat:3> \land <var:b4> = <var:J> ^ <nat:4> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <var:J> \land <var:b2> = <var:J> ^ <nat:2> \land <var:b3> = <var:J> ^ <nat:3> \land <var:b4> = <var:J> ^ <nat:4> \land <var:b0> = <nat:3> \} \\ <var:b1> := <var:b1> * <nat:6> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <nat:6> * <var:J> \land <var:b2> = <var:J> ^ <nat:2> \land <var:b3> = <var:J> ^ <nat:3> \land <var:b4> = <var:J> ^ <nat:4> \land <var:b0> = <nat:3> \} \\ <var:b2> := <var:b2> * <nat:1> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <nat:6> * <var:J> \land <var:b2> = <nat:1> * <var:J> ^ <nat:2> \land <var:b3> = <var:J> ^ <nat:3> \land <var:b4> = <var:J> ^ <nat:4> \land <var:b0> = <nat:3> \} \\ <var:b3> := <var:b3> * <nat:1> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <nat:6> * <var:J> \land <var:b2> = <nat:1> * <var:J> ^ <nat:2> \land <var:b3> = <nat:1> * <var:J> ^ <nat:3> \land <var:b4> = <var:J> ^ <nat:4> \land <var:b0> = <nat:3> \} \\ <var:b4> := <var:b4> * <nat:7> ; \\ \{ <var:e> = <var:J> \land <var:b1> = <nat:6> * <var:J> \land <var:b2> = <nat:1> * <var:J> ^ <nat:2> \land <var:b3> = <nat:1> * <var:J> ^ <nat:3> \land <var:b4> = <nat:7> * <var:J> ^ <nat:4> \land <var:b0> = <nat:3> \} \\ <var:l> := <var:b4> \\ \{ <var:e> = <var:J> \land <var:b1> = <nat:6> * <var:J> \land <var:b2> = <nat:1> * <var:J> ^ <nat:2> \land <var:b3> = <nat:1> * <var:J> ^ <nat:3> \land <var:b0> = <nat:3> \land <var:l> = <nat:7> * <var:J> ^ <nat:4> \} \\ <var:l> := <var:l> + <var:b3> \\ \{ <var:e> = <var:J> \land <var:b1> = <nat:6> * <var:J> \land <var:b2> = <nat:1> * <var:J> ^ <nat:2> \land <var:b0> = <nat:3> \land <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:b2> \\ \{ <var:e> = <var:J> \land <var:b1> = <nat:6> * <var:J> \land <var:b0> = <nat:3> \land <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:b1> \\ \{ <var:e> = <var:J> \land <var:b0> = <nat:3> \land <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:6> * <var:J> \} \\ <var:l> := <var:l> + <var:b0> \\ \{ <var:e> = <var:J> \land <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <var:b4> : string := " <var:b4> " . Definition <def:poly> := <var:b1> := <var:e> ; <var:b2> := <var:b1> * <var:e> ; <var:b3> := <var:b2> * <var:e> ; <var:b4> := <var:b3> * <var:e> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:6> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:1> ; <var:b4> := <var:b4> * <nat:7> ; <var:l> := <var:b4> <var:l> := <var:l> + <var:b3> <var:l> := <var:l> + <var:b2> <var:l> := <var:l> + <var:b1> <var:l> := <var:l> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:e> = <var:J> }} <def:poly> {{ <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <var:J> /\ <var:b2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <var:J> /\ <var:b2> = <var:J> ^ <nat:2> /\ <var:b3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <var:J> /\ <var:b2> = <var:J> ^ <nat:2> /\ <var:b3> = <var:J> ^ <nat:3> /\ <var:b4> = <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <var:J> /\ <var:b2> = <var:J> ^ <nat:2> /\ <var:b3> = <var:J> ^ <nat:3> /\ <var:b4> = <var:J> ^ <nat:4> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <nat:6> * <var:J> /\ <var:b2> = <var:J> ^ <nat:2> /\ <var:b3> = <var:J> ^ <nat:3> /\ <var:b4> = <var:J> ^ <nat:4> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <nat:6> * <var:J> /\ <var:b2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:b3> = <var:J> ^ <nat:3> /\ <var:b4> = <var:J> ^ <nat:4> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <nat:6> * <var:J> /\ <var:b2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:J> ^ <nat:3> /\ <var:b4> = <var:J> ^ <nat:4> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <nat:6> * <var:J> /\ <var:b2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:J> ^ <nat:3> /\ <var:b4> = <nat:7> * <var:J> ^ <nat:4> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <nat:6> * <var:J> /\ <var:b2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:J> ^ <nat:3> /\ <var:b0> = <nat:3> /\ <var:l> = <nat:7> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <nat:6> * <var:J> /\ <var:b2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:b0> = <nat:3> /\ <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b1> = <nat:6> * <var:J> /\ <var:b0> = <nat:3> /\ <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:b0> = <nat:3> /\ <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:l> = <nat:7> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 