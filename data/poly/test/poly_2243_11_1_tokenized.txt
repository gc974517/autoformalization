\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:J> ; <var:W2> := <var:W1> * <var:J> ; <var:W3> := <var:W2> * <var:J> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:3> ; <var:W2> := <var:W2> * <nat:1> ; <var:W3> := <var:W3> * <nat:2> ; <var:H> := <var:W3> <var:H> := <var:H> + <var:W2> <var:H> := <var:H> + <var:W1> <var:H> := <var:H> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:J> = <var:r> $ for all $ <var:r> \in \mathbb{Z}^+ $ ahead of interpreting this code it follows that we have $ <var:H> = <nat:2> \cdot <var:r> ^ <nat:3> + <nat:1> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this set of instructions is done using usual Hoare logic . Advancing to the proceeding piece of code found in the program , we have the line \verb | <var:W1> := <var:J> ; | . This code moves the precondition $ \{ <var:J> = <var:r> \} $ as the postcondition $ \{ <var:J> = <var:r> \land <var:W1> = <var:r> \} $ . This is deduced with the assignment law of Hoare reasoning . Observing the upcoming command seen in our program , the variable update statement letting $ <var:W1> * <var:J> $ as $ <var:W2>$ . This forwards $ \{ <var:J> = <var:r> \land <var:W1> = <var:r> \} $ toward the condition $ \{ <var:J> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \} $ . This is given through the assignment scheme given in typical Hoare techniques . Moving on , the variable assignmet statement defining $ <var:W2> * <var:J> $ as $ <var:W3>$ . This code advances the precondition $ \{ <var:J> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \} $ as the postcondition $ \{ <var:J> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \} $ . Shifting focus toward the proceeding line contained in our list of instructions , we see the assignment code \verb | <var:W0> := <nat:1> ; | . This code redefines $ \{ <var:J> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W0> = <nat:1> \} $ . Stepping forward , we see the variable update code binding $ <var:W1> * <nat:3> $ toward $ <var:W1>$ . This code forwards the condition $ \{ <var:J> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W0> = <nat:1> \} $ into $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W0> = <nat:1> \} $ . Jumping to the proceeding step in the program , we see the variable assignmet command \verb | <var:W2> := <var:W2> * <nat:1> ; | . This command transfers the condition $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W0> = <nat:1> \} $ as the postcondition $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W2> = <nat:1> \times <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W0> = <nat:1> \} $ . Stepping through , the environment update line \verb | <var:W3> := <var:W3> * <nat:2> ; | . This line transfers the condition $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W2> = <nat:1> \times <var:r> ^ <nat:2> \land <var:W3> = <var:r> ^ <nat:3> \land <var:W0> = <nat:1> \} $ into the condition $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W2> = <nat:1> \times <var:r> ^ <nat:2> \land <var:W3> = <nat:2> \times <var:r> ^ <nat:3> \land <var:W0> = <nat:1> \} $ . This is deduced by the assignment rule in typical Hoare logic . Looking at the proceeding step in the segment of code , we see the assignment code defining $ <var:W3$ toward $ <var:H>$ . This line transfers $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W2> = <nat:1> \times <var:r> ^ <nat:2> \land <var:W3> = <nat:2> \times <var:r> ^ <nat:3> \land <var:W0> = <nat:1> \} $ toward the postcondition $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W2> = <nat:1> \times <var:r> ^ <nat:2> \land <var:W0> = <nat:1> \land <var:H> = <nat:2> \times <var:r> ^ <nat:3> \} $ . Following , we have the variable assignmet code \verb | <var:H> := <var:H> + <var:W2> | . This statement forwards $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W2> = <nat:1> \times <var:r> ^ <nat:2> \land <var:W0> = <nat:1> \land <var:H> = <nat:2> \times <var:r> ^ <nat:3> \} $ into the postcondition $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W0> = <nat:1> \land <var:H> = <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> \} $ . Advancing on , we have the assignment statement \verb | <var:H> := <var:H> + <var:W1> | . This forwards the precondition $ \{ <var:J> = <var:r> \land <var:W1> = <nat:3> \times <var:r> \land <var:W0> = <nat:1> \land <var:H> = <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> \} $ as $ \{ <var:J> = <var:r> \land <var:W0> = <nat:1> \land <var:H> = <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> \} $ . Honing in on the following piece of code contained in the set of commands , we see the environment update statement assigning $ <var:H> + <var:W0$ toward $ <var:H>$ . This command takes the condition $ \{ <var:J> = <var:r> \land <var:W0> = <nat:1> \land <var:H> = <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> \} $ toward the postcondition $ \{ <var:J> = <var:r> \land <var:H> = <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W1> := <var:J> ; <var:W2> := <var:W1> * <var:J> ; <var:W3> := <var:W2> * <var:J> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:3> ; <var:W2> := <var:W2> * <nat:1> ; <var:W3> := <var:W3> * <nat:2> ; <var:H> := <var:W3> <var:H> := <var:H> + <var:W2> <var:H> := <var:H> + <var:W1> <var:H> := <var:H> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:J> = <var:r> }} <def:poly> {{ <var:H> = <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <nat:3> * <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <nat:3> * <var:r> /\ <var:W2> = <nat:1> * <var:r> ^ <nat:2> /\ <var:W3> = <var:r> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <nat:3> * <var:r> /\ <var:W2> = <nat:1> * <var:r> ^ <nat:2> /\ <var:W3> = <nat:2> * <var:r> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <nat:3> * <var:r> /\ <var:W2> = <nat:1> * <var:r> ^ <nat:2> /\ <var:W0> = <nat:1> /\ <var:H> = <nat:2> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W1> = <nat:3> * <var:r> /\ <var:W0> = <nat:1> /\ <var:H> = <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:W0> = <nat:1> /\ <var:H> = <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:H> = <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 