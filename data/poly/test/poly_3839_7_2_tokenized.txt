\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:O> := <nat:1> ; <var:O> := <nat:1> + <var:O> * <var:B> ; <var:O> := <nat:3> + <var:O> * <var:B> ; <var:O> := <var:O> * <var:B> ; <var:O> := <nat:1> + <var:O> * <var:B> ; <var:O> := <nat:2> + <var:O> * <var:B> ; <var:O> := <nat:4> + <var:O> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:B> = <var:R> $ ( given whole numbers $ <var:R> $ ) before interpreting the segment of code then $ <var:O> = <nat:1> \cdot <var:R> ^ <nat:6> + <nat:1> \cdot <var:R> ^ <nat:5> + <nat:3> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning produces : \begin{eqnarray} \{ <var:B> = <var:R> \} \\ <var:O> := <nat:1> ; \\ \{ <var:B> = <var:R> \land <var:O> = <nat:1> \} \\ <var:O> := <nat:1> + <var:O> * <var:B> ; \\ \{ <var:B> = <var:R> \land <var:O> = <nat:1> * <var:R> + <nat:1> \} \\ <var:O> := <nat:3> + <var:O> * <var:B> ; \\ \{ <var:B> = <var:R> \land <var:O> = <nat:1> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> \} \\ <var:O> := <var:O> * <var:B> ; \\ \{ <var:B> = <var:R> \land <var:O> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + \} \\ <var:O> := <nat:1> + <var:O> * <var:B> ; \\ \{ <var:B> = <var:R> \land <var:O> = <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> \} \\ <var:O> := <nat:2> + <var:O> * <var:B> ; \\ \{ <var:B> = <var:R> \land <var:O> = <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:1> * <var:R> + <nat:2> \} \\ <var:O> := <nat:4> + <var:O> * <var:B> \\ \{ <var:B> = <var:R> \land <var:O> = <nat:1> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> \} \end{eqnarray} As a result , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:1> ; <var:O> := <nat:1> + <var:O> * <var:B> ; <var:O> := <nat:3> + <var:O> * <var:B> ; <var:O> := <var:O> * <var:B> ; <var:O> := <nat:1> + <var:O> * <var:B> ; <var:O> := <nat:2> + <var:O> * <var:B> ; <var:O> := <nat:4> + <var:O> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:B> = <var:R> }} <def:poly> {{ <var:O> = <nat:1> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:O> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:O> = <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:1> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 