\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:3> ; <var:h> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Assume that $ <var:M> = <var:Y> $ ahead of the evaluation of this code segment , it holds that $ <var:h> = <nat:3> $ after series of commands exits . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions is done by typical Hoare techniques . Considering the next piece of code contained in the code segment , we have the environment update command defining $ <nat:3> $ toward $ <var:x0>$ . This command redefines the condition $ \{ <var:M> = <var:Y> \} $ to $ \{ <var:M> = <var:Y> \land <var:x0> = <nat:3> \} $ . Observing the upcoming line in the program , the variable binding code letting $ <var:x0$ as $ <var:h>$ . This statement redefines the condition $ \{ <var:M> = <var:Y> \land <var:x0> = <nat:3> \} $ toward the condition $ \{ <var:M> = <var:Y> \land <var:h> = <nat:3> \} $ . This is sound using the assignment law defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:h> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:M> = <var:Y> }} <def:poly> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 