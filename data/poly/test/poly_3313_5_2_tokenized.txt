\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v> := <nat:4> ; <var:v> := <var:v> * <var:F> ; <var:v> := <nat:4> + <var:v> * <var:F> ; <var:v> := <nat:1> + <var:v> * <var:F> ; <var:v> := <nat:1> + <var:v> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:F> = <var:p> $ , given some $ <var:p> \in \mathbb{Z}^+ $ , ahead of the execution of our series of instructions it holds that we see $ <var:v> = <nat:4> \cdot <var:p> ^ <nat:4> + <nat:4> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:F> = <var:p> \} \\ <var:v> := <nat:4> ; \\ \{ <var:F> = <var:p> \land <var:v> = <nat:4> \} \\ <var:v> := <var:v> * <var:F> ; \\ \{ <var:F> = <var:p> \land <var:v> = <nat:4> * <var:p> + \} \\ <var:v> := <nat:4> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:p> \land <var:v> = <nat:4> * <var:p> ^ <nat:2> + <nat:4> \} \\ <var:v> := <nat:1> + <var:v> * <var:F> ; \\ \{ <var:F> = <var:p> \land <var:v> = <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:1> \} \\ <var:v> := <nat:1> + <var:v> * <var:F> \\ \{ <var:F> = <var:p> \land <var:v> = <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:4> ; <var:v> := <var:v> * <var:F> ; <var:v> := <nat:4> + <var:v> * <var:F> ; <var:v> := <nat:1> + <var:v> * <var:F> ; <var:v> := <nat:1> + <var:v> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:F> = <var:p> }} <def:poly> {{ <var:v> = <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:v> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:v> = <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:v> = <nat:4> * <var:p> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:v> = <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:v> = <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 