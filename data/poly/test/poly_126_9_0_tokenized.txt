\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:p> ; <var:e2> := <nat:2> ; <var:e2> := <var:e2> * <var:p> ; <var:e2> := <var:e2> * <var:p> ; <var:Q> := <var:e2> ; <var:Q> := <var:Q> + <var:e1> ; <var:Q> := <var:Q> + <var:e0> \end{verbatim} Given it to hold that $ <var:p> = <var:t> $ ahead of executing this segment of code it must be that $ <var:Q> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be demonstrated using standard Hoare reasoning . Stepping through , we see \begin{eqnarray} \{ <var:p> = <var:t> \} \, <var:e0> := <nat:3> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \} \end{eqnarray} Going to the next step , we have \begin{eqnarray} \{ <var:p> = <var:t> \} \, <var:e0> := <nat:3> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \} \\ \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \} \, <var:e1> := <nat:2> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \} \\ \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \} \, <var:e1> := <var:e1> * <var:p> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \cdot <var:t> \} \\ \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \cdot <var:t> \} \, <var:e2> := <nat:2> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \cdot <var:t> \land <var:e2> = <nat:2> \} \\ \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \cdot <var:t> \land <var:e2> = <nat:2> \} \, <var:e2> := <var:e2> * <var:p> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \cdot <var:t> \land <var:e2> = <nat:2> \cdot <var:t> \} \end{eqnarray} This is ensured through the variable assignmet rule of typical Hoare reasoning . Focusing on the next piece of code seen in our segment of code , we have \begin{eqnarray} \{ <var:p> = <var:t> \} \, <var:e0> := <nat:3> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \} \end{eqnarray} This is rigorously given using the variable update inference rule defined by usual Hoare techniques . Going to the next step , we see \begin{eqnarray} \{ <var:p> = <var:t> \} \, <var:e0> := <nat:3> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \} \\ \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \} \, <var:e1> := <nat:2> \, \{ <var:p> = <var:t> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:p> = <var:t> }} <var:e0> := <nat:3> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:p> ; <var:e2> := <nat:2> ; <var:e2> := <var:e2> * <var:p> ; <var:e2> := <var:e2> * <var:p> ; <var:Q> := <var:e2> ; <var:Q> := <var:Q> + <var:e1> ; <var:Q> := <var:Q> + <var:e0> {{ <var:Q> = <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:t> /\ <var:e2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:t> /\ <var:e2> = <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:t> /\ <var:e2> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:t> /\ <var:Q> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:e0> = <nat:3> /\ <var:Q> = <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:Q> = <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 