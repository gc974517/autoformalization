\begin{document} \begin{theorem} Define the following series of commands : \begin{verbatim} <var:W0> := <nat:2> ; <var:C> := <var:W0> \end{verbatim} Assuming it to be that $ <var:p> = <var:V> $ --- for some $ <var:V> \in \mathbb{N} $ --- before evaluating our program then we have $ <var:C> = <nat:2> $ after series of instructions is done executing . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be accomplished through Hoare reasoning . Shifting focus toward the following command in our segment of code , we see the environment update line yielding $ <nat:2> $ as $ <var:W0>$ . This takes the precondition $ \{ <var:p> = <var:V> \} $ as $ \{ <var:p> = <var:V> \land <var:W0> = <nat:2> \} $ . This is given by the assignment rule given by Hoare techniques . Moving forward to the following command found in our program , the variable update code defining $ <var:W0$ as $ <var:C>$ . This code moves the condition $ \{ <var:p> = <var:V> \land <var:W0> = <nat:2> \} $ to $ \{ <var:p> = <var:V> \land <var:C> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:p> = <var:V> }} <var:W0> := <nat:2> ; <var:C> := <var:W0> {{ <var:C> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:C> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 