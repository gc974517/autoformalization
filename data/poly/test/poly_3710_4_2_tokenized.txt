\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:4> + <var:C> * <var:q> ; <var:C> := <nat:1> + <var:C> * <var:q> ; <var:C> := <nat:1> + <var:C> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:q> = <var:G> $ ahead of running this series of commands , it holds that we have $ <var:C> = <nat:2> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our segment of code is shown with usual Hoare techniques . Stepping forward , we have the assignment line \verb | <var:C> := <nat:2> ; | . This transfers $ \{ <var:q> = <var:G> \} $ toward $ \{ <var:q> = <var:G> \land <var:C> = <nat:2> \} $ . Further , we see the environment update line binding $ <nat:4> + <var:C> * <var:q> $ as $ <var:C>$ . This transfers the precondition $ \{ <var:q> = <var:G> \land <var:C> = <nat:2> \} $ as the postcondition $ \{ <var:q> = <var:G> \land <var:C> = <nat:2> * <var:G> + <nat:4> \} $ . This is deduced by the assignment rule obtained from standard Hoare logic . Advancing , we see the variable update line \verb | <var:C> := <nat:1> + <var:C> * <var:q> ; | . This code forwards the condition $ \{ <var:q> = <var:G> \land <var:C> = <nat:2> * <var:G> + <nat:4> \} $ toward the condition $ \{ <var:q> = <var:G> \land <var:C> = <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> \} $ . This is guaranteed through the assignment scheme given by usual Hoare techniques . Advancing to the proceeding command found in the code segment , we have the assignment command \verb | <var:C> := <nat:1> + <var:C> * <var:q> | . This takes the precondition $ \{ <var:q> = <var:G> \land <var:C> = <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> \} $ to the condition $ \{ <var:q> = <var:G> \land <var:C> = <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:2> ; <var:C> := <nat:4> + <var:C> * <var:q> ; <var:C> := <nat:1> + <var:C> * <var:q> ; <var:C> := <nat:1> + <var:C> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:q> = <var:G> }} <def:poly> {{ <var:C> = <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:C> = <nat:2> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:C> = <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:G> /\ <var:C> = <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 