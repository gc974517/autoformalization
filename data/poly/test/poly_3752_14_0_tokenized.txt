\begin{document} \begin{theorem} We define the following code segment such that \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:n> ; <var:u2> := <nat:1> ; <var:u2> := <var:u2> * <var:n> ; <var:u2> := <var:u2> * <var:n> ; <var:u3> := <nat:1> ; <var:u3> := <var:u3> * <var:n> ; <var:u3> := <var:u3> * <var:n> ; <var:u3> := <var:u3> * <var:n> ; <var:V> := <var:u3> ; <var:V> := <var:V> + <var:u2> ; <var:V> := <var:V> + <var:u1> ; <var:V> := <var:V> + <var:u0> \end{verbatim} Allow , for $ <var:i> \in \mathbb{N} $ , that $ <var:n> = <var:i> $ ahead of interpreting the set of instructions it follows that we see $ <var:V> = <nat:1> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:i> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \} \\ <var:u1> := <nat:2> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \} \\ <var:u1> := <var:u1> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \} \\ <var:u2> := <nat:1> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:u2> = <nat:1> \} \\ <var:u2> := <var:u2> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:u2> = <nat:1> \times <var:i> \} \\ <var:u2> := <var:u2> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:u2> = <nat:1> \times <var:i> ^ <nat:2> \} \\ <var:u3> := <nat:1> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:u2> = <nat:1> \times <var:i> ^ <nat:2> \land <var:u3> = <nat:1> \} \\ <var:u3> := <var:u3> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:u2> = <nat:1> \times <var:i> ^ <nat:2> \land <var:u3> = <nat:1> \times <var:i> \} \\ <var:u3> := <var:u3> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:u2> = <nat:1> \times <var:i> ^ <nat:2> \land <var:u3> = <nat:1> \times <var:i> ^ <nat:2> \} \\ <var:u3> := <var:u3> * <var:n> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:u2> = <nat:1> \times <var:i> ^ <nat:2> \land <var:u3> = <nat:1> \times <var:i> ^ <nat:3> \} \\ <var:V> := <var:u3> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:u2> = <nat:1> \times <var:i> ^ <nat:2> \land <var:V> = <nat:1> \times <var:i> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:u2> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:u1> = <nat:2> \times <var:i> \land <var:V> = <nat:1> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:u1> ; \\ \{ <var:n> = <var:i> \land <var:u0> = <nat:5> \land <var:V> = <nat:1> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> \} \\ <var:V> := <var:V> + <var:u0> \\ \{ <var:n> = <var:i> \land <var:V> = <nat:1> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:5> \} \end{eqnarray} Utilizing usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:n> = <var:i> }} <var:u0> := <nat:5> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:n> ; <var:u2> := <nat:1> ; <var:u2> := <var:u2> * <var:n> ; <var:u2> := <var:u2> * <var:n> ; <var:u3> := <nat:1> ; <var:u3> := <var:u3> * <var:n> ; <var:u3> := <var:u3> * <var:n> ; <var:u3> := <var:u3> * <var:n> ; <var:V> := <var:u3> ; <var:V> := <var:V> + <var:u2> ; <var:V> := <var:V> + <var:u1> ; <var:V> := <var:V> + <var:u0> {{ <var:V> = <nat:1> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:u2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:u2> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:u2> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:u2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:u3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:u2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:u2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:u2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:u2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:V> = <nat:1> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:2> * <var:i> /\ <var:V> = <nat:1> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:u0> = <nat:5> /\ <var:V> = <nat:1> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:V> = <nat:1> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 