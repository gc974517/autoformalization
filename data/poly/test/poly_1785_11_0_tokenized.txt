\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:1> ; <var:H2> := <nat:2> ; <var:H2> := <var:H2> * <var:S> ; <var:H2> := <var:H2> * <var:S> ; <var:H3> := <nat:4> ; <var:H3> := <var:H3> * <var:S> ; <var:H3> := <var:H3> * <var:S> ; <var:H3> := <var:H3> * <var:S> ; <var:R> := <var:H3> ; <var:R> := <var:R> + <var:H2> ; <var:R> := <var:R> + <var:H0> \end{verbatim} Assuming that $ <var:S> = <var:j> $ prior to the execution of our segment of code , it follows that we see $ <var:R> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> $ after series of instructions terminates . \end{theorem} \begin{proof} The flow of logic for our list of instructions is clear using Hoare logic . Considering the following lines of codefound in the set of commands , \[ \begin{tabular} {rcl} \{ <var:S> = <var:j> \} & <var:H0> := <nat:1> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \} & <var:H2> := <nat:2> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \} \end{tabular} Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:S> = <var:j> \} & <var:H0> := <nat:1> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \} & <var:H2> := <nat:2> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \} & <var:H2> := <var:H2> * <var:S> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> \} & <var:H2> := <var:H2> * <var:S> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \} & <var:H3> := <nat:4> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:4> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:4> \} & <var:H3> := <var:H3> * <var:S> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:j> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:j> \} & <var:H3> := <var:H3> * <var:S> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:j> ^ <nat:2> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:j> ^ <nat:2> \} & <var:H3> := <var:H3> * <var:S> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:j> ^ <nat:3> \} \\ \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:4> \cdot <var:j> ^ <nat:3> \} & <var:R> := <var:H3> & \{ <var:S> = <var:j> \land <var:H0> = <nat:1> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:R> = <nat:4> \cdot <var:j> ^ <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:S> = <var:j> }} <var:H0> := <nat:1> ; <var:H2> := <nat:2> ; <var:H2> := <var:H2> * <var:S> ; <var:H2> := <var:H2> * <var:S> ; <var:H3> := <nat:4> ; <var:H3> := <var:H3> * <var:S> ; <var:H3> := <var:H3> * <var:S> ; <var:H3> := <var:H3> * <var:S> ; <var:R> := <var:H3> ; <var:R> := <var:R> + <var:H2> ; <var:R> := <var:R> + <var:H0> {{ <var:R> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:H3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:R> = <nat:4> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:H0> = <nat:1> /\ <var:R> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:R> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 