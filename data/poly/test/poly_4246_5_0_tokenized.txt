\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:8> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:a> ; <var:q> := <var:O1> ; <var:q> := <var:q> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given --- for some positive coefficients $ <var:L> $ --- $ <var:a> = <var:L> $ prior to the execution of our set of instructions it holds that we see $ <var:q> = <nat:8> * <var:L> + <nat:8> $ when set of instructions terminates . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:a> = <var:L> \} \\ <var:O0> := <nat:8> ; \\ \{ <var:a> = <var:L> \land <var:O0> = <nat:8> \} \\ <var:O1> := <nat:8> ; \\ \{ <var:a> = <var:L> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> \} \\ <var:O1> := <var:O1> * <var:a> ; \\ \{ <var:a> = <var:L> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> \cdot <var:L> \} \\ <var:q> := <var:O1> ; \\ \{ <var:a> = <var:L> \land <var:O0> = <nat:8> \land <var:q> = <nat:8> \cdot <var:L> \} \\ <var:q> := <var:q> + <var:O0> \\ \{ <var:a> = <var:L> \land <var:q> = <nat:8> \cdot <var:L> + <nat:8> \} \end{eqnarray} Thusly , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:8> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:a> ; <var:q> := <var:O1> ; <var:q> := <var:q> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:a> = <var:L> }} <def:poly> {{ <var:q> = <nat:8> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:O0> = <nat:8> /\ <var:q> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:q> = <nat:8> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 