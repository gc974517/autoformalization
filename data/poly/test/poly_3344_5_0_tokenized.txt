\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:9> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:L> ; <var:T> := <var:Z1> ; <var:T> := <var:T> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Given --- taking integers $ <var:X> $ --- $ <var:L> = <var:X> $ prior to executing the list of instructions , then $ <var:T> = <nat:4> * <var:X> + <nat:9> $ when series of commands executes . \end{theorem} \begin{proof} The method of proof for our series of commands can be demonstrated through typical Hoare logic . Moving forward , we have the variable assignmet command assigning $ <nat:9> $ into $ <var:Z0>$ . This statement moves the condition $ \{ <var:L> = <var:X> \} $ as the postcondition $ \{ <var:L> = <var:X> \land <var:Z0> = <nat:9> \} $ . Advancing to the next step seen in our list of instructions , we see the binding command assigning $ <nat:4> $ into $ <var:Z1>$ . This line transfers $ \{ <var:L> = <var:X> \land <var:Z0> = <nat:9> \} $ toward $ \{ <var:L> = <var:X> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:4> \} $ . Moving forward to the next step , the variable binding code \verb | <var:Z1> := <var:Z1> * <var:L> ; | . This code transfers the precondition $ \{ <var:L> = <var:X> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:4> \} $ into the condition $ \{ <var:L> = <var:X> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:4> \times <var:X> \} $ . Immediately after , we see the binding code yielding $ <var:Z1> $ to $ <var:T>$ . This statement forwards the precondition $ \{ <var:L> = <var:X> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:4> \times <var:X> \} $ as $ \{ <var:L> = <var:X> \land <var:Z0> = <nat:9> \land <var:T> = <nat:4> \times <var:X> \} $ . Moving forward to the next bit of code contained in our series of commands , the environment update code binding $ <var:T> + <var:Z0$ into $ <var:T>$ . This command advances the precondition $ \{ <var:L> = <var:X> \land <var:Z0> = <nat:9> \land <var:T> = <nat:4> \times <var:X> \} $ into the postcondition $ \{ <var:L> = <var:X> \land <var:T> = <nat:4> \times <var:X> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:9> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:L> ; <var:T> := <var:Z1> ; <var:T> := <var:T> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:L> = <var:X> }} <def:poly> {{ <var:T> = <nat:4> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:Z0> = <nat:9> /\ <var:Z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:Z0> = <nat:9> /\ <var:Z1> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:Z0> = <nat:9> /\ <var:T> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:T> = <nat:4> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 