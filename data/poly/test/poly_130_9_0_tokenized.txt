\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:2> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:F> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:F> ; <var:v2> := <var:v2> * <var:F> ; <var:H> := <var:v2> ; <var:H> := <var:H> + <var:v1> ; <var:H> := <var:H> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:F> = <var:E> $ prior to the evaluation of this series of commands , it follows that we see $ <var:H> = <nat:2> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:2> $ once series of instructions finishes . \end{theorem} \begin{proof} Note that the below decorated series of instructions . \begin{eqnarray} \{ <var:F> = <var:E> \} \\ <var:v0> := <nat:2> ; \\ \{ <var:F> = <var:E> \land <var:v0> = <nat:2> \} \\ <var:v1> := <nat:4> ; \\ \{ <var:F> = <var:E> \land <var:v0> = <nat:2> \land <var:v1> = <nat:4> \} \\ <var:v1> := <var:v1> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:v0> = <nat:2> \land <var:v1> = <nat:4> \times <var:E> \} \\ <var:v2> := <nat:2> ; \\ \{ <var:F> = <var:E> \land <var:v0> = <nat:2> \land <var:v1> = <nat:4> \times <var:E> \land <var:v2> = <nat:2> \} \\ <var:v2> := <var:v2> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:v0> = <nat:2> \land <var:v1> = <nat:4> \times <var:E> \land <var:v2> = <nat:2> \times <var:E> \} \\ <var:v2> := <var:v2> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:v0> = <nat:2> \land <var:v1> = <nat:4> \times <var:E> \land <var:v2> = <nat:2> \times <var:E> ^ <nat:2> \} \\ <var:H> := <var:v2> ; \\ \{ <var:F> = <var:E> \land <var:v0> = <nat:2> \land <var:v1> = <nat:4> \times <var:E> \land <var:H> = <nat:2> \times <var:E> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:v1> ; \\ \{ <var:F> = <var:E> \land <var:v0> = <nat:2> \land <var:H> = <nat:2> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> \} \\ <var:H> := <var:H> + <var:v0> \\ \{ <var:F> = <var:E> \land <var:H> = <nat:2> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:2> \} \end{eqnarray} Using standard Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:2> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:F> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:F> ; <var:v2> := <var:v2> * <var:F> ; <var:H> := <var:v2> ; <var:H> := <var:H> + <var:v1> ; <var:H> := <var:H> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:F> = <var:E> }} <def:poly> {{ <var:H> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:4> * <var:E> /\ <var:v2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:4> * <var:E> /\ <var:v2> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:4> * <var:E> /\ <var:v2> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:4> * <var:E> /\ <var:H> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:v0> = <nat:2> /\ <var:H> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:H> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 