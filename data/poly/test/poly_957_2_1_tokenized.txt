\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:8> ; <var:Y> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- for whole numbers $ <var:a> $ --- that we have $ <var:f> = <var:a> $ before the evaluation of the list of commands it follows that we have $ <var:Y> = <nat:8> $ once code finishes . \end{theorem} \begin{proof} The flow of logic for the code segment is evident by Hoare reasoning . Moving on to the following command contained in our code , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:a> \} & <var:R0> := <nat:8> & \{ <var:f> = <var:a> \land <var:R0> = <nat:8> \} \end{tabular} This is shown using the variable binding law obtained from usual Hoare logic . Jumping to the subsequent statement found in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:a> \} & <var:R0> := <nat:8> & \{ <var:f> = <var:a> \land <var:R0> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:8> ; <var:Y> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:f> = <var:a> }} <def:poly> {{ <var:Y> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:Y> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 