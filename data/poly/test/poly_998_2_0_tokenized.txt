\begin{document} \begin{theorem} We define the following program such that \begin{verbatim} <var:C0> := <nat:1> ; <var:S> := <var:C0> \end{verbatim} Given $ <var:O> = <var:f> $ prior to executing our series of instructions , it follows that $ <var:S> = <nat:1> $ . \end{theorem} \begin{proof} The argument for the program is accomplished using usual Hoare logic . Paying attention to the proceeding step found in our list of commands , the variable binding line \verb | <var:C0> := <nat:1> ; | . This forwards the precondition $ \{ <var:O> = <var:f> \} $ as $ \{ <var:O> = <var:f> \land <var:C0> = <nat:1> \} $ . Advancing to the subsequent bit of code contained in the series of commands , we see the assignment statement yielding $ <var:C0$ into $ <var:S>$ . This moves the condition $ \{ <var:O> = <var:f> \land <var:C0> = <nat:1> \} $ toward the postcondition $ \{ <var:O> = <var:f> \land <var:S> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:O> = <var:f> }} <var:C0> := <nat:1> ; <var:S> := <var:C0> {{ <var:S> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:S> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 