\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:5> ; <var:F> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Assuming it to be that $ <var:R> = <var:E> $ before evaluating this series of instructions , it must be that we see $ <var:F> = <nat:5> $ once list of instructions has finished . \end{theorem} \begin{proof} The argument for this program is given through Hoare reasoning . Moving on to the next line of code contained in our series of instructions , \begin{verbatim} { <var:R> = <var:E> } <var:x0> := <nat:5> { <var:R> = <var:E> \land <var:x0> = <nat:5> } \end{verbatim} Observing the next line found in the series of instructions , we see \begin{verbatim} { <var:R> = <var:E> } <var:x0> := <nat:5> { <var:R> = <var:E> \land <var:x0> = <nat:5> } \end{verbatim} This is shown to be logically sound through the variable assignmet rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:5> ; <var:F> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:R> = <var:E> }} <def:poly> {{ <var:F> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 