\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:1> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:c> ; <var:D2> := <nat:9> ; <var:D2> := <var:D2> * <var:c> ; <var:D2> := <var:D2> * <var:c> ; <var:D3> := <nat:6> ; <var:D3> := <var:D3> * <var:c> ; <var:D3> := <var:D3> * <var:c> ; <var:D3> := <var:D3> * <var:c> ; <var:Y> := <var:D3> ; <var:Y> := <var:Y> + <var:D2> ; <var:Y> := <var:Y> + <var:D1> ; <var:Y> := <var:Y> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:c> = <var:h> $ before running the list of commands , then $ <var:Y> = <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this code is accomplished using Hoare logic . Stepping through , we see \begin{eqnarray} \{ <var:c> = <var:h> \} \, <var:D0> := <nat:1> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \} \end{eqnarray} This is guaranteed by the binding inference rule defined by usual Hoare reasoning . Moving forward to the following steps found in our program , we see \begin{eqnarray} \{ <var:c> = <var:h> \} \, <var:D0> := <nat:1> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \} \, <var:D1> := <nat:9> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \} \, <var:D1> := <var:D1> * <var:c> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \} \, <var:D2> := <nat:9> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \} \, <var:D2> := <var:D2> * <var:c> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> \} \, <var:D2> := <var:D2> * <var:c> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \} \, <var:D3> := <nat:6> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:D3> = <nat:6> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:D3> = <nat:6> \} \, <var:D3> := <var:D3> * <var:c> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:D3> = <nat:6> \cdot <var:h> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:D3> = <nat:6> \cdot <var:h> \} \, <var:D3> := <var:D3> * <var:c> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:D3> = <nat:6> \cdot <var:h> ^ <nat:2> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:D3> = <nat:6> \cdot <var:h> ^ <nat:2> \} \, <var:D3> := <var:D3> * <var:c> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:D3> = <nat:6> \cdot <var:h> ^ <nat:3> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:D3> = <nat:6> \cdot <var:h> ^ <nat:3> \} \, <var:Y> := <var:D3> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:Y> = <nat:6> \cdot <var:h> ^ <nat:3> \} \\ \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:D2> = <nat:9> \cdot <var:h> ^ <nat:2> \land <var:Y> = <nat:6> \cdot <var:h> ^ <nat:3> \} \, <var:Y> := <var:Y> + <var:D2> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \land <var:D1> = <nat:9> \cdot <var:h> \land <var:Y> = <nat:6> \cdot <var:h> ^ <nat:3> + <nat:9> \cdot <var:h> ^ <nat:2> \} \end{eqnarray} This is guaranteed by the variable update law given by standard Hoare logic . Now , we see \begin{eqnarray} \{ <var:c> = <var:h> \} \, <var:D0> := <nat:1> \, \{ <var:c> = <var:h> \land <var:D0> = <nat:1> \} \end{eqnarray} This is shown to be logically sound by the law given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D0> := <nat:1> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:c> ; <var:D2> := <nat:9> ; <var:D2> := <var:D2> * <var:c> ; <var:D2> := <var:D2> * <var:c> ; <var:D3> := <nat:6> ; <var:D3> := <var:D3> * <var:c> ; <var:D3> := <var:D3> * <var:c> ; <var:D3> := <var:D3> * <var:c> ; <var:Y> := <var:D3> ; <var:Y> := <var:Y> + <var:D2> ; <var:Y> := <var:Y> + <var:D1> ; <var:Y> := <var:Y> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:c> = <var:h> }} <def:poly> {{ <var:Y> = <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <nat:9> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:D3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:D3> = <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:D3> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:D3> = <nat:6> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:Y> = <nat:6> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:9> * <var:h> /\ <var:Y> = <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:D0> = <nat:1> /\ <var:Y> = <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:Y> = <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 