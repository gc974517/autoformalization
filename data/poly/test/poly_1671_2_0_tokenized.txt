\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:3> ; <var:P> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Given given any $ <var:W> \in \mathbb{N} $ that $ <var:p> = <var:W> $ ahead of the evaluation of our code , it follows that $ <var:P> = <nat:3> $ when set of instructions finishes . \end{theorem} \begin{proof} The method of proof for our code can be given using Hoare logic . Observing the proceeding steps seen in our series of commands , \verb | { <var:p> = <var:W> } <var:L0> := <nat:3> { <var:p> = <var:W> \land <var:L0> = <nat:3> } | and \verb | { <var:p> = <var:W> \land <var:L0> = <nat:3> } <var:P> := <var:L0{ <var:p> = <var:W> \land <var:P> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:3> ; <var:P> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:p> = <var:W> }} <def:poly> {{ <var:P> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:P> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 