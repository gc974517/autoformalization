\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:1> + <var:w> * <var:C> ; <var:w> := <nat:2> + <var:w> * <var:C> ; <var:w> := <nat:2> + <var:w> * <var:C> ; <var:w> := <nat:1> + <var:w> * <var:C> \end{verbatim} Assume that we have $ <var:C> = <var:G> $ prior to evaluating our program it must be that we have $ <var:w> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:1> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:1> $ when list of commands has finished executing . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:C> = <var:G> \} \\ <var:w> := <nat:4> ; \\ \{ <var:C> = <var:G> \land <var:w> = <nat:4> \} \\ <var:w> := <nat:1> + <var:w> * <var:C> ; \\ \{ <var:C> = <var:G> \land <var:w> = <nat:4> \times <var:G> + <nat:1> \} \\ <var:w> := <nat:2> + <var:w> * <var:C> ; \\ \{ <var:C> = <var:G> \land <var:w> = <nat:4> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:2> \} \\ <var:w> := <nat:2> + <var:w> * <var:C> ; \\ \{ <var:C> = <var:G> \land <var:w> = <nat:4> \times <var:G> ^ <nat:3> + <nat:1> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:2> \} \\ <var:w> := <nat:1> + <var:w> * <var:C> \\ \{ <var:C> = <var:G> \land <var:w> = <nat:4> \times <var:G> ^ <nat:4> + <nat:1> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:1> \} \end{eqnarray} As a consequence , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:C> = <var:G> }} <var:w> := <nat:4> ; <var:w> := <nat:1> + <var:w> * <var:C> ; <var:w> := <nat:2> + <var:w> * <var:C> ; <var:w> := <nat:2> + <var:w> * <var:C> ; <var:w> := <nat:1> + <var:w> * <var:C> {{ <var:w> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:w> = <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:w> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:w> = <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:w> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 