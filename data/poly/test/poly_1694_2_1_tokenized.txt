\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:4> ; <var:B> := <var:L0> \end{verbatim} Assume that $ <var:t> = <var:C> $ prior to interpreting the code , it holds that $ <var:B> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is demonstrated by Hoare reasoning . Taking a look at the proceeding command seen in the list of commands , we see the environment update statement yielding $ <nat:4> $ as $ <var:L0>$ . This statement transfers the condition $ \{ <var:t> = <var:C> \} $ into $ \{ <var:t> = <var:C> \land <var:L0> = <nat:4> \} $ . Immediately after , we see the environment update statement \verb | <var:B> := <var:L0> | . This statement redefines the condition $ \{ <var:t> = <var:C> \land <var:L0> = <nat:4> \} $ to the condition $ \{ <var:t> = <var:C> \land <var:B> = <nat:4> \} $ . This is known to be sound using the assignment scheme given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:t> = <var:C> }} <var:L0> := <nat:4> ; <var:B> := <var:L0> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 