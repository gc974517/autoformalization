\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v> := <nat:4> ; <var:v> := <nat:3> + <var:v> * <var:b> ; <var:v> := <nat:2> + <var:v> * <var:b> ; <var:v> := <nat:1> + <var:v> * <var:b> ; <var:v> := <var:v> * <var:b> ; <var:v> := <nat:3> + <var:v> * <var:b> ; <var:v> := <nat:4> + <var:v> * <var:b> ; <var:v> := <nat:1> + <var:v> * <var:b> ; <var:v> := <nat:1> + <var:v> * <var:b> ; <var:v> := <nat:2> + <var:v> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:b> = <var:M> $ , for every $ <var:M> $ , before evaluating this series of instructions , it must be that $ <var:v> = <nat:4> \cdot <var:M> ^ <nat:9> + <nat:3> \cdot <var:M> ^ <nat:8> + <nat:2> \cdot <var:M> ^ <nat:7> + <nat:1> \cdot <var:M> ^ <nat:6> + <nat:3> \cdot <var:M> ^ <nat:4> + <nat:4> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our series of instructions is demonstrated through usual Hoare techniques . Observing the upcoming statements found in the list of instructions , we see \verb | { <var:b> = <var:M> } <var:v> := <nat:4> { <var:b> = <var:M> \land <var:v> = <nat:4> } | , \verb | { <var:b> = <var:M> \land <var:v> = <nat:4> } <var:v> := <nat:3> + <var:v> * <var:b> { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> + <nat:3> } | , \verb | { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> + <nat:3> } <var:v> := <nat:2> + <var:v> * <var:b> { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> } | , \verb | { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> } <var:v> := <nat:1> + <var:v> * <var:b> { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> } | , \verb | { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> } <var:v> := <var:v> * <var:b> { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + } | , \verb | { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + } <var:v> := <nat:3> + <var:v> * <var:b> { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> } | , \verb | { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> } <var:v> := <nat:4> + <var:v> * <var:b> { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:4> } | and \verb | { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:4> } <var:v> := <nat:1> + <var:v> * <var:b> { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> } | . Moving on , \verb | { <var:b> = <var:M> } <var:v> := <nat:4> { <var:b> = <var:M> \land <var:v> = <nat:4> } | and \verb | { <var:b> = <var:M> \land <var:v> = <nat:4> } <var:v> := <nat:3> + <var:v> * <var:b> { <var:b> = <var:M> \land <var:v> = <nat:4> * <var:M> + <nat:3> } | . This is known to be sound by the environment update inference rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:4> ; <var:v> := <nat:3> + <var:v> * <var:b> ; <var:v> := <nat:2> + <var:v> * <var:b> ; <var:v> := <nat:1> + <var:v> * <var:b> ; <var:v> := <var:v> * <var:b> ; <var:v> := <nat:3> + <var:v> * <var:b> ; <var:v> := <nat:4> + <var:v> * <var:b> ; <var:v> := <nat:1> + <var:v> * <var:b> ; <var:v> := <nat:1> + <var:v> * <var:b> ; <var:v> := <nat:2> + <var:v> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:b> = <var:M> }} <def:poly> {{ <var:v> = <nat:4> * <var:M> ^ <nat:9> + <nat:3> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:1> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:1> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:v> = <nat:4> * <var:M> ^ <nat:9> + <nat:3> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:1> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 