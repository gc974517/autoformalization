\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:3> ; <var:o2> := <nat:2> ; <var:o2> := <var:o2> * <var:R> ; <var:o2> := <var:o2> * <var:R> ; <var:x> := <var:o2> ; <var:x> := <var:x> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for $ <var:z> $ , that $ <var:R> = <var:z> $ ahead of executing this set of instructions , it follows that we see $ <var:x> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Note that this decorated series of commands . \begin{eqnarray} \{ <var:R> = <var:z> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:R> = <var:z> \land <var:o0> = <nat:3> \} \\ <var:o2> := <nat:2> ; \\ \{ <var:R> = <var:z> \land <var:o0> = <nat:3> \land <var:o2> = <nat:2> \} \\ <var:o2> := <var:o2> * <var:R> ; \\ \{ <var:R> = <var:z> \land <var:o0> = <nat:3> \land <var:o2> = <nat:2> \times <var:z> \} \\ <var:o2> := <var:o2> * <var:R> ; \\ \{ <var:R> = <var:z> \land <var:o0> = <nat:3> \land <var:o2> = <nat:2> \times <var:z> ^ <nat:2> \} \\ <var:x> := <var:o2> ; \\ \{ <var:R> = <var:z> \land <var:o0> = <nat:3> \land <var:x> = <nat:2> \times <var:z> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:o0> \\ \{ <var:R> = <var:z> \land <var:x> = <nat:2> \times <var:z> ^ <nat:2> + <nat:3> \} \end{eqnarray} Applying Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o2> := <nat:2> ; <var:o2> := <var:o2> * <var:R> ; <var:o2> := <var:o2> * <var:R> ; <var:x> := <var:o2> ; <var:x> := <var:x> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:R> = <var:z> }} <def:poly> {{ <var:x> = <nat:2> * <var:z> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:z> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o2> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o2> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:z> /\ <var:o0> = <nat:3> /\ <var:x> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:z> /\ <var:x> = <nat:2> * <var:z> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 