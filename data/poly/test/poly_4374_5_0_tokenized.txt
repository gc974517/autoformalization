\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:3> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:s> ; <var:c> := <var:V1> ; <var:c> := <var:c> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Allow for any positive integer coefficients $ <var:a> $ it to hold that $ <var:s> = <var:a> $ before executing the list of commands , then we see $ <var:c> = <nat:4> * <var:a> + <nat:3> $ when list of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:a> \} \\ <var:V0> := <nat:3> ; \\ \{ <var:s> = <var:a> \land <var:V0> = <nat:3> \} \\ <var:V1> := <nat:4> ; \\ \{ <var:s> = <var:a> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> \} \\ <var:V1> := <var:V1> * <var:s> ; \\ \{ <var:s> = <var:a> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> \cdot <var:a> \} \\ <var:c> := <var:V1> ; \\ \{ <var:s> = <var:a> \land <var:V0> = <nat:3> \land <var:c> = <nat:4> \cdot <var:a> \} \\ <var:c> := <var:c> + <var:V0> \\ \{ <var:s> = <var:a> \land <var:c> = <nat:4> \cdot <var:a> + <nat:3> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:s> ; <var:c> := <var:V1> ; <var:c> := <var:c> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:s> = <var:a> }} <def:poly> {{ <var:c> = <nat:4> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:V0> = <nat:3> /\ <var:c> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:c> = <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 