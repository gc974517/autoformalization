\begin{document} \begin{theorem} Consider a series of instructions such that \begin{verbatim} <var:p1> := <var:l> ; <var:p2> := <var:p1> * <var:l> ; <var:p3> := <var:p2> * <var:l> ; <var:p4> := <var:p3> * <var:l> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:4> ; <var:p3> := <var:p3> * <nat:2> ; <var:p4> := <var:p4> * <nat:1> ; <var:c> := <var:p4> <var:c> := <var:c> + <var:p3> <var:c> := <var:c> + <var:p1> <var:c> := <var:c> + <var:p0> \end{verbatim} Allowing that $ <var:l> = <var:G> $ prior to interpreting our series of commands it must be that we see $ <var:c> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:4> \times <var:G> + <nat:3> $ . \end{theorem} \begin{proof} Notice this decorated set of commands . \begin{eqnarray} \{ <var:l> = <var:G> \} \\ <var:p1> := <var:l> ; \\ \{ <var:l> = <var:G> \land <var:p1> = <var:G> \} \\ <var:p2> := <var:p1> * <var:l> ; \\ \{ <var:l> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:l> ; \\ \{ <var:l> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \} \\ <var:p4> := <var:p3> * <var:l> ; \\ \{ <var:l> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \} \end{eqnarray} Furthering evaluating this set of commands yields : \begin{eqnarray} <var:p0> := <nat:3> ; \\ \{ <var:l> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \land <var:p0> = <nat:3> \} \\ <var:p1> := <var:p1> * <nat:4> ; \\ \{ <var:l> = <var:G> \land <var:p1> = <nat:4> \times <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \land <var:p0> = <nat:3> \} \\ <var:p3> := <var:p3> * <nat:2> ; \\ \{ <var:l> = <var:G> \land <var:p1> = <nat:4> \times <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \land <var:p0> = <nat:3> \} \\ <var:p4> := <var:p4> * <nat:1> ; \\ \{ <var:l> = <var:G> \land <var:p1> = <nat:4> \times <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:G> ^ <nat:3> \land <var:p4> = <nat:1> \times <var:G> ^ <nat:4> \land <var:p0> = <nat:3> \} \\ <var:c> := <var:p4> \\ \{ <var:l> = <var:G> \land <var:p1> = <nat:4> \times <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:G> ^ <nat:3> \land <var:p0> = <nat:3> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> \} \end{eqnarray} Continuing interpreting the set of commands gives us : \begin{eqnarray} <var:c> := <var:c> + <var:p3> \\ \{ <var:l> = <var:G> \land <var:p1> = <nat:4> \times <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p0> = <nat:3> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> \} \end{eqnarray} Furthering the evaluation of the program yields : \begin{eqnarray} <var:c> := <var:c> + <var:p1> \\ \{ <var:l> = <var:G> \land <var:p0> = <nat:3> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:4> \times <var:G> \} \\ <var:c> := <var:c> + <var:p0> \\ \{ <var:l> = <var:G> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:4> \times <var:G> + <nat:3> \} \end{eqnarray} The application of standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:l> = <var:G> }} <var:p1> := <var:l> ; <var:p2> := <var:p1> * <var:l> ; <var:p3> := <var:p2> * <var:l> ; <var:p4> := <var:p3> * <var:l> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:4> ; <var:p3> := <var:p3> * <nat:2> ; <var:p4> := <var:p4> * <nat:1> ; <var:c> := <var:p4> <var:c> := <var:c> + <var:p3> <var:c> := <var:c> + <var:p1> <var:c> := <var:c> + <var:p0> {{ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <nat:4> * <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <nat:4> * <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <nat:4> * <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:p4> = <nat:1> * <var:G> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <nat:4> * <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:p0> = <nat:3> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p1> = <nat:4> * <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p0> = <nat:3> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:p0> = <nat:3> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 