\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:n1> := <var:a> ; <var:n2> := <var:n1> * <var:a> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:4> ; <var:q> := <var:n2> <var:q> := <var:q> + <var:n1> <var:q> := <var:q> + <var:n0> \end{verbatim} Allowing it to be that $ <var:a> = <var:g> $ prior to executing this segment of code then we see $ <var:q> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the segment of code can be shown using usual Hoare techniques . Following , \begin{verbatim} { <var:a> = <var:g> } <var:n1> := <var:a> { <var:a> = <var:g> \land <var:n1> = <var:g> } { <var:a> = <var:g> \land <var:n1> = <var:g> } <var:n2> := <var:n1> * <var:a> { <var:a> = <var:g> \land <var:n1> = <var:g> \land <var:n2> = <var:g> ^ <nat:2> } { <var:a> = <var:g> \land <var:n1> = <var:g> \land <var:n2> = <var:g> ^ <nat:2> } <var:n0> := <nat:1> { <var:a> = <var:g> \land <var:n1> = <var:g> \land <var:n2> = <var:g> ^ <nat:2> \land <var:n0> = <nat:1> } { <var:a> = <var:g> \land <var:n1> = <var:g> \land <var:n2> = <var:g> ^ <nat:2> \land <var:n0> = <nat:1> } <var:n1> := <var:n1> * <nat:2> { <var:a> = <var:g> \land <var:n1> = <nat:2> \cdot <var:g> \land <var:n2> = <var:g> ^ <nat:2> \land <var:n0> = <nat:1> } { <var:a> = <var:g> \land <var:n1> = <nat:2> \cdot <var:g> \land <var:n2> = <var:g> ^ <nat:2> \land <var:n0> = <nat:1> } <var:n2> := <var:n2> * <nat:4> { <var:a> = <var:g> \land <var:n1> = <nat:2> \cdot <var:g> \land <var:n2> = <nat:4> \cdot <var:g> ^ <nat:2> \land <var:n0> = <nat:1> } { <var:a> = <var:g> \land <var:n1> = <nat:2> \cdot <var:g> \land <var:n2> = <nat:4> \cdot <var:g> ^ <nat:2> \land <var:n0> = <nat:1> } <var:q> := <var:n2{ <var:a> = <var:g> \land <var:n1> = <nat:2> \cdot <var:g> \land <var:n0> = <nat:1> \land <var:q> = <nat:4> \cdot <var:g> ^ <nat:2> } { <var:a> = <var:g> \land <var:n1> = <nat:2> \cdot <var:g> \land <var:n0> = <nat:1> \land <var:q> = <nat:4> \cdot <var:g> ^ <nat:2> } <var:q> := <var:q> + <var:n1{ <var:a> = <var:g> \land <var:n0> = <nat:1> \land <var:q> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> } \end{verbatim} Stepping through , \begin{verbatim} { <var:a> = <var:g> } <var:n1> := <var:a> { <var:a> = <var:g> \land <var:n1> = <var:g> } \end{verbatim} This is deduced through the assignment inference rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:a> = <var:g> }} <var:n1> := <var:a> ; <var:n2> := <var:n1> * <var:a> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:4> ; <var:q> := <var:n2> <var:q> := <var:q> + <var:n1> <var:q> := <var:q> + <var:n0> {{ <var:q> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:n1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:n1> = <var:g> /\ <var:n2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:n1> = <var:g> /\ <var:n2> = <var:g> ^ <nat:2> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:n1> = <nat:2> * <var:g> /\ <var:n2> = <var:g> ^ <nat:2> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:n1> = <nat:2> * <var:g> /\ <var:n2> = <nat:4> * <var:g> ^ <nat:2> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:n1> = <nat:2> * <var:g> /\ <var:n0> = <nat:1> /\ <var:q> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:n0> = <nat:1> /\ <var:q> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:q> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 