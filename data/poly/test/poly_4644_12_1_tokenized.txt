\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:F> ; <var:e2> := <var:e1> * <var:F> ; <var:e3> := <var:e2> * <var:F> ; <var:e4> := <var:e3> * <var:F> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:8> ; <var:e2> := <var:e2> * <nat:5> ; <var:e4> := <var:e4> * <nat:6> ; <var:S> := <var:e4> <var:S> := <var:S> + <var:e2> <var:S> := <var:S> + <var:e1> <var:S> := <var:S> + <var:e0> \end{verbatim} Allow it to hold that $ <var:F> = <var:U> $ prior to the evaluation of the code , it follows that we see $ <var:S> = <nat:6> * <var:U> ^ <nat:4> + <nat:5> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:2> $ . \end{theorem} \begin{proof} We can see that the following decorated series of commands . \begin{eqnarray} \{ <var:F> = <var:U> \} \\ <var:e1> := <var:F> ; \\ \{ <var:F> = <var:U> \land <var:e1> = <var:U> \} \\ <var:e2> := <var:e1> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:e1> = <var:U> \land <var:e2> = <var:U> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:e1> = <var:U> \land <var:e2> = <var:U> ^ <nat:2> \land <var:e3> = <var:U> ^ <nat:3> \} \\ <var:e4> := <var:e3> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:e1> = <var:U> \land <var:e2> = <var:U> ^ <nat:2> \land <var:e3> = <var:U> ^ <nat:3> \land <var:e4> = <var:U> ^ <nat:4> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:F> = <var:U> \land <var:e1> = <var:U> \land <var:e2> = <var:U> ^ <nat:2> \land <var:e3> = <var:U> ^ <nat:3> \land <var:e4> = <var:U> ^ <nat:4> \land <var:e0> = <nat:2> \} \\ <var:e1> := <var:e1> * <nat:8> ; \\ \{ <var:F> = <var:U> \land <var:e1> = <nat:8> * <var:U> \land <var:e2> = <var:U> ^ <nat:2> \land <var:e3> = <var:U> ^ <nat:3> \land <var:e4> = <var:U> ^ <nat:4> \land <var:e0> = <nat:2> \} \\ <var:e2> := <var:e2> * <nat:5> ; \\ \{ <var:F> = <var:U> \land <var:e1> = <nat:8> * <var:U> \land <var:e2> = <nat:5> * <var:U> ^ <nat:2> \land <var:e3> = <var:U> ^ <nat:3> \land <var:e4> = <var:U> ^ <nat:4> \land <var:e0> = <nat:2> \} \\ <var:e4> := <var:e4> * <nat:6> ; \\ \{ <var:F> = <var:U> \land <var:e1> = <nat:8> * <var:U> \land <var:e2> = <nat:5> * <var:U> ^ <nat:2> \land <var:e3> = <var:U> ^ <nat:3> \land <var:e4> = <nat:6> * <var:U> ^ <nat:4> \land <var:e0> = <nat:2> \} \\ <var:S> := <var:e4> \\ \{ <var:F> = <var:U> \land <var:e1> = <nat:8> * <var:U> \land <var:e2> = <nat:5> * <var:U> ^ <nat:2> \land <var:e3> = <var:U> ^ <nat:3> \land <var:e0> = <nat:2> \land <var:S> = <nat:6> * <var:U> ^ <nat:4> \} \\ <var:S> := <var:S> + <var:e2> \\ \{ <var:F> = <var:U> \land <var:e1> = <nat:8> * <var:U> \land <var:e0> = <nat:2> \land <var:S> = <nat:6> * <var:U> ^ <nat:4> + <nat:5> * <var:U> ^ <nat:2> \} \end{eqnarray} Furthering the execution of our segment of code produces : \begin{eqnarray} <var:S> := <var:S> + <var:e1> \\ \{ <var:F> = <var:U> \land <var:e0> = <nat:2> \land <var:S> = <nat:6> * <var:U> ^ <nat:4> + <nat:5> * <var:U> ^ <nat:2> + <nat:8> * <var:U> \} \\ <var:S> := <var:S> + <var:e0> \\ \{ <var:F> = <var:U> \land <var:S> = <nat:6> * <var:U> ^ <nat:4> + <nat:5> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:2> \} \end{eqnarray} Utilizing Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <var:e4> : string := " <var:e4> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:F> = <var:U> }} <var:e1> := <var:F> ; <var:e2> := <var:e1> * <var:F> ; <var:e3> := <var:e2> * <var:F> ; <var:e4> := <var:e3> * <var:F> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:8> ; <var:e2> := <var:e2> * <nat:5> ; <var:e4> := <var:e4> * <nat:6> ; <var:S> := <var:e4> <var:S> := <var:S> + <var:e2> <var:S> := <var:S> + <var:e1> <var:S> := <var:S> + <var:e0> {{ <var:S> = <nat:6> * <var:U> ^ <nat:4> + <nat:5> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <var:U> /\ <var:e2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <var:U> /\ <var:e2> = <var:U> ^ <nat:2> /\ <var:e3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <var:U> /\ <var:e2> = <var:U> ^ <nat:2> /\ <var:e3> = <var:U> ^ <nat:3> /\ <var:e4> = <var:U> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <var:U> /\ <var:e2> = <var:U> ^ <nat:2> /\ <var:e3> = <var:U> ^ <nat:3> /\ <var:e4> = <var:U> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <nat:8> * <var:U> /\ <var:e2> = <var:U> ^ <nat:2> /\ <var:e3> = <var:U> ^ <nat:3> /\ <var:e4> = <var:U> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <nat:8> * <var:U> /\ <var:e2> = <nat:5> * <var:U> ^ <nat:2> /\ <var:e3> = <var:U> ^ <nat:3> /\ <var:e4> = <var:U> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <nat:8> * <var:U> /\ <var:e2> = <nat:5> * <var:U> ^ <nat:2> /\ <var:e3> = <var:U> ^ <nat:3> /\ <var:e4> = <nat:6> * <var:U> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <nat:8> * <var:U> /\ <var:e2> = <nat:5> * <var:U> ^ <nat:2> /\ <var:e3> = <var:U> ^ <nat:3> /\ <var:e0> = <nat:2> /\ <var:S> = <nat:6> * <var:U> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e1> = <nat:8> * <var:U> /\ <var:e0> = <nat:2> /\ <var:S> = <nat:6> * <var:U> ^ <nat:4> + <nat:5> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:e0> = <nat:2> /\ <var:S> = <nat:6> * <var:U> ^ <nat:4> + <nat:5> * <var:U> ^ <nat:2> + <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:S> = <nat:6> * <var:U> ^ <nat:4> + <nat:5> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 