\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:a> ; <var:Z2> := <var:Z1> * <var:a> ; <var:Z3> := <var:Z2> * <var:a> ; <var:Z4> := <var:Z3> * <var:a> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:Z2> := <var:Z2> * <nat:1> ; <var:Z3> := <var:Z3> * <nat:6> ; <var:Z4> := <var:Z4> * <nat:8> ; <var:p> := <var:Z4> <var:p> := <var:p> + <var:Z3> <var:p> := <var:p> + <var:Z2> <var:p> := <var:p> + <var:Z1> <var:p> := <var:p> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:a> = <var:W> $ given every positive numbers $ <var:W> $ before evaluating this program it follows that we see $ <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> + <nat:6> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment can be demonstrated by typical Hoare techniques . Shifting focus toward the next line of code found in our program , we see the environment update statement \verb | <var:Z1> := <var:a> ; | . This transfers the condition $ \{ <var:a> = <var:W> \} $ to the postcondition $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \} $ . Going to the next step , we see the variable update line \verb | <var:Z2> := <var:Z1> * <var:a> ; | . This moves the precondition $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \} $ into the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \} $ . This is sound using the assignment rule given in typical Hoare logic . Jumping to the following bit of code in our program , the assignment statement \verb | <var:Z3> := <var:Z2> * <var:a> ; | . This command takes the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \} $ toward the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \} $ . This is ensured using the assignment inference rule obtained from Hoare logic . Shifting focus toward the upcoming piece of code seen in our set of instructions , the variable binding statement binding $ <var:Z3> * <var:a> $ as $ <var:Z4>$ . This command advances the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \} $ toward the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \} $ . Considering the upcoming step contained in our list of commands , the variable binding line \verb | <var:Z0> := <nat:1> ; | . This redefines $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \} $ to $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ . Advancing to the next step , we see the variable assignmet command \verb | <var:Z1> := <var:Z1> * <nat:1> ; | . This moves $ \{ <var:a> = <var:W> \land <var:Z1> = <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ toward the postcondition $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ . Moving forward , we see the binding statement \verb | <var:Z2> := <var:Z2> * <nat:1> ; | . This advances $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ as $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ . Advancing to the next step , we have the binding command letting $ <var:Z3> * <nat:6> $ toward $ <var:Z3>$ . This redefines $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z3> = <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ to the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z3> = <nat:6> \cdot <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ . Shifting focus toward the following command contained in our program , we see the variable update statement \verb | <var:Z4> := <var:Z4> * <nat:8> ; | . This moves the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z3> = <nat:6> \cdot <var:W> ^ <nat:3> \land <var:Z4> = <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ as $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z3> = <nat:6> \cdot <var:W> ^ <nat:3> \land <var:Z4> = <nat:8> \cdot <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ . Now , we have the variable update command letting $ <var:Z4$ toward $ <var:p>$ . This redefines the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z3> = <nat:6> \cdot <var:W> ^ <nat:3> \land <var:Z4> = <nat:8> \cdot <var:W> ^ <nat:4> \land <var:Z0> = <nat:1> \} $ to the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z3> = <nat:6> \cdot <var:W> ^ <nat:3> \land <var:Z0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> \} $ . This is guaranteed through the assignment rule in usual Hoare logic . Taking another step toward the upcoming piece of code contained in our list of instructions , we have the variable update statement \verb | <var:p> := <var:p> + <var:Z3> | . This forwards $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z3> = <nat:6> \cdot <var:W> ^ <nat:3> \land <var:Z0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> \} $ into the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> + <nat:6> \cdot <var:W> ^ <nat:3> \} $ . This is given with the assignment inference rule defined by typical Hoare logic . Immediately after , the code assigning $ <var:p> + <var:Z2$ as $ <var:p>$ . This line redefines $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z2> = <nat:1> \cdot <var:W> ^ <nat:2> \land <var:Z0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> + <nat:6> \cdot <var:W> ^ <nat:3> \} $ into the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> + <nat:6> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> \} $ . This is shown by the assignment rule given in usual Hoare logic . Moving forward to the next step , the command letting $ <var:p> + <var:Z1$ toward $ <var:p>$ . This transfers the condition $ \{ <var:a> = <var:W> \land <var:Z1> = <nat:1> \cdot <var:W> \land <var:Z0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> + <nat:6> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:W> \land <var:Z0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> + <nat:6> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} $ . Now , we see the binding line yielding $ <var:p> + <var:Z0$ into $ <var:p>$ . This code moves the condition $ \{ <var:a> = <var:W> \land <var:Z0> = <nat:1> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> + <nat:6> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} $ toward $ \{ <var:a> = <var:W> \land <var:p> = <nat:8> \cdot <var:W> ^ <nat:4> + <nat:6> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:1> \} $ . This is sound by the assignment rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <var:Z4> : string := " <var:Z4> " . Definition <def:poly> := <var:Z1> := <var:a> ; <var:Z2> := <var:Z1> * <var:a> ; <var:Z3> := <var:Z2> * <var:a> ; <var:Z4> := <var:Z3> * <var:a> ; <var:Z0> := <nat:1> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:Z2> := <var:Z2> * <nat:1> ; <var:Z3> := <var:Z3> * <nat:6> ; <var:Z4> := <var:Z4> * <nat:8> ; <var:p> := <var:Z4> <var:p> := <var:p> + <var:Z3> <var:p> := <var:p> + <var:Z2> <var:p> := <var:p> + <var:Z1> <var:p> := <var:p> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:a> = <var:W> }} <def:poly> {{ <var:p> = <nat:8> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <var:W> /\ <var:Z2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <var:W> /\ <var:Z2> = <var:W> ^ <nat:2> /\ <var:Z3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <var:W> /\ <var:Z2> = <var:W> ^ <nat:2> /\ <var:Z3> = <var:W> ^ <nat:3> /\ <var:Z4> = <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <var:W> /\ <var:Z2> = <var:W> ^ <nat:2> /\ <var:Z3> = <var:W> ^ <nat:3> /\ <var:Z4> = <var:W> ^ <nat:4> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <nat:1> * <var:W> /\ <var:Z2> = <var:W> ^ <nat:2> /\ <var:Z3> = <var:W> ^ <nat:3> /\ <var:Z4> = <var:W> ^ <nat:4> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <nat:1> * <var:W> /\ <var:Z2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:Z3> = <var:W> ^ <nat:3> /\ <var:Z4> = <var:W> ^ <nat:4> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <nat:1> * <var:W> /\ <var:Z2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:Z3> = <nat:6> * <var:W> ^ <nat:3> /\ <var:Z4> = <var:W> ^ <nat:4> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <nat:1> * <var:W> /\ <var:Z2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:Z3> = <nat:6> * <var:W> ^ <nat:3> /\ <var:Z4> = <nat:8> * <var:W> ^ <nat:4> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <nat:1> * <var:W> /\ <var:Z2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:Z3> = <nat:6> * <var:W> ^ <nat:3> /\ <var:Z0> = <nat:1> /\ <var:p> = <nat:8> * <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <nat:1> * <var:W> /\ <var:Z2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:Z0> = <nat:1> /\ <var:p> = <nat:8> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z1> = <nat:1> * <var:W> /\ <var:Z0> = <nat:1> /\ <var:p> = <nat:8> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:Z0> = <nat:1> /\ <var:p> = <nat:8> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:p> = <nat:8> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 