\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as \begin{verbatim} <var:d1> := <var:o> ; <var:d2> := <var:d1> * <var:o> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:4> ; <var:t> := <var:d2> <var:t> := <var:t> + <var:d1> <var:t> := <var:t> + <var:d0> \end{verbatim} Given that $ <var:o> = <var:W> $ prior to evaluating this segment of code , it must be that $ <var:t> = <nat:4> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the list of commands is clear using Hoare techniques . Advancing , \begin{eqnarray} \{ <var:o> = <var:W> \} \, <var:d1> := <var:o> \, \{ <var:o> = <var:W> \land <var:d1> = <var:W> \} \\ \{ <var:o> = <var:W> \land <var:d1> = <var:W> \} \, <var:d2> := <var:d1> * <var:o> \, \{ <var:o> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \} \\ \{ <var:o> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \} \, <var:d0> := <nat:4> \, \{ <var:o> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d0> = <nat:4> \} \end{eqnarray} This is ensured with the variable update inference rule from typical Hoare logic . Paying attention to the upcoming bit of code seen in our list of instructions , \begin{eqnarray} \{ <var:o> = <var:W> \} \, <var:d1> := <var:o> \, \{ <var:o> = <var:W> \land <var:d1> = <var:W> \} \end{eqnarray} Further , we see \begin{eqnarray} \{ <var:o> = <var:W> \} \, <var:d1> := <var:o> \, \{ <var:o> = <var:W> \land <var:d1> = <var:W> \} \\ \{ <var:o> = <var:W> \land <var:d1> = <var:W> \} \, <var:d2> := <var:d1> * <var:o> \, \{ <var:o> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \} \\ \{ <var:o> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \} \, <var:d0> := <nat:4> \, \{ <var:o> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d0> = <nat:4> \} \end{eqnarray} This is shown to be logically sound through the environment update rule defined in usual Hoare reasoning . Looking at the subsequent command seen in our segment of code , we have \begin{eqnarray} \{ <var:o> = <var:W> \} \, <var:d1> := <var:o> \, \{ <var:o> = <var:W> \land <var:d1> = <var:W> \} \end{eqnarray} This is given using the environment update law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:o> = <var:W> }} <var:d1> := <var:o> ; <var:d2> := <var:d1> * <var:o> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:4> ; <var:t> := <var:d2> <var:t> := <var:t> + <var:d1> <var:t> := <var:t> + <var:d0> {{ <var:t> = <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:d1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:d1> = <var:W> /\ <var:d2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:d1> = <var:W> /\ <var:d2> = <var:W> ^ <nat:2> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:d1> = <nat:4> * <var:W> /\ <var:d2> = <var:W> ^ <nat:2> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:d1> = <nat:4> * <var:W> /\ <var:d2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:d1> = <nat:4> * <var:W> /\ <var:d0> = <nat:4> /\ <var:t> = <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:d0> = <nat:4> /\ <var:t> = <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:W> /\ <var:t> = <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 