\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:X0> := <nat:2> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:O> ; <var:X2> := <nat:6> ; <var:X2> := <var:X2> * <var:O> ; <var:X2> := <var:X2> * <var:O> ; <var:v> := <var:X2> ; <var:v> := <var:v> + <var:X1> ; <var:v> := <var:v> + <var:X0> \end{verbatim} Allow it to hold that $ <var:O> = <var:E> $ prior to interpreting the code segment , then $ <var:v> = <nat:6> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:2> $ after list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:E> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:O> = <var:E> \land <var:X0> = <nat:2> \} \\ <var:X1> := <nat:2> ; \\ \{ <var:O> = <var:E> \land <var:X0> = <nat:2> \land <var:X1> = <nat:2> \} \\ <var:X1> := <var:X1> * <var:O> ; \\ \{ <var:O> = <var:E> \land <var:X0> = <nat:2> \land <var:X1> = <nat:2> \times <var:E> \} \\ <var:X2> := <nat:6> ; \\ \{ <var:O> = <var:E> \land <var:X0> = <nat:2> \land <var:X1> = <nat:2> \times <var:E> \land <var:X2> = <nat:6> \} \\ <var:X2> := <var:X2> * <var:O> ; \\ \{ <var:O> = <var:E> \land <var:X0> = <nat:2> \land <var:X1> = <nat:2> \times <var:E> \land <var:X2> = <nat:6> \times <var:E> \} \\ <var:X2> := <var:X2> * <var:O> ; \\ \{ <var:O> = <var:E> \land <var:X0> = <nat:2> \land <var:X1> = <nat:2> \times <var:E> \land <var:X2> = <nat:6> \times <var:E> ^ <nat:2> \} \\ <var:v> := <var:X2> ; \\ \{ <var:O> = <var:E> \land <var:X0> = <nat:2> \land <var:X1> = <nat:2> \times <var:E> \land <var:v> = <nat:6> \times <var:E> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:X1> ; \\ \{ <var:O> = <var:E> \land <var:X0> = <nat:2> \land <var:v> = <nat:6> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> \} \\ <var:v> := <var:v> + <var:X0> \\ \{ <var:O> = <var:E> \land <var:v> = <nat:6> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:2> \} \end{eqnarray} The application of standard Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:O> = <var:E> }} <var:X0> := <nat:2> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:O> ; <var:X2> := <nat:6> ; <var:X2> := <var:X2> * <var:O> ; <var:X2> := <var:X2> * <var:O> ; <var:v> := <var:X2> ; <var:v> := <var:v> + <var:X1> ; <var:v> := <var:v> + <var:X0> {{ <var:v> = <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:2> * <var:E> /\ <var:X2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:2> * <var:E> /\ <var:X2> = <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:2> * <var:E> /\ <var:X2> = <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:2> * <var:E> /\ <var:v> = <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:X0> = <nat:2> /\ <var:v> = <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:v> = <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 