\begin{document} \begin{theorem} Take the following code in \emph{Imp} as follows \begin{verbatim} <var:O1> := <var:A> ; <var:O2> := <var:O1> * <var:A> ; <var:O3> := <var:O2> * <var:A> ; <var:O0> := <nat:9> ; <var:O1> := <var:O1> * <nat:8> ; <var:O2> := <var:O2> * <nat:8> ; <var:O3> := <var:O3> * <nat:9> ; <var:g> := <var:O3> <var:g> := <var:g> + <var:O2> <var:g> := <var:g> + <var:O1> <var:g> := <var:g> + <var:O0> \end{verbatim} Allowing it to be that $ <var:A> = <var:j> $ prior to evaluating the list of instructions , it holds that we have $ <var:g> = <nat:9> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:9> $ once list of instructions finishes . \end{theorem} \begin{proof} Arguing the correctness of the set of commands can be shown using typical Hoare techniques . Going forward , we have \begin{eqnarray} \{ <var:A> = <var:j> \} \, <var:O1> := <var:A> \, \{ <var:A> = <var:j> \land <var:O1> = <var:j> \} \\ \{ <var:A> = <var:j> \land <var:O1> = <var:j> \} \, <var:O2> := <var:O1> * <var:A> \, \{ <var:A> = <var:j> \land <var:O1> = <var:j> \land <var:O2> = <var:j> ^ <nat:2> \} \\ \{ <var:A> = <var:j> \land <var:O1> = <var:j> \land <var:O2> = <var:j> ^ <nat:2> \} \, <var:O3> := <var:O2> * <var:A> \, \{ <var:A> = <var:j> \land <var:O1> = <var:j> \land <var:O2> = <var:j> ^ <nat:2> \land <var:O3> = <var:j> ^ <nat:3> \} \\ \{ <var:A> = <var:j> \land <var:O1> = <var:j> \land <var:O2> = <var:j> ^ <nat:2> \land <var:O3> = <var:j> ^ <nat:3> \} \, <var:O0> := <nat:9> \, \{ <var:A> = <var:j> \land <var:O1> = <var:j> \land <var:O2> = <var:j> ^ <nat:2> \land <var:O3> = <var:j> ^ <nat:3> \land <var:O0> = <nat:9> \} \\ \{ <var:A> = <var:j> \land <var:O1> = <var:j> \land <var:O2> = <var:j> ^ <nat:2> \land <var:O3> = <var:j> ^ <nat:3> \land <var:O0> = <nat:9> \} \, <var:O1> := <var:O1> * <nat:8> \, \{ <var:A> = <var:j> \land <var:O1> = <nat:8> * <var:j> \land <var:O2> = <var:j> ^ <nat:2> \land <var:O3> = <var:j> ^ <nat:3> \land <var:O0> = <nat:9> \} \\ \{ <var:A> = <var:j> \land <var:O1> = <nat:8> * <var:j> \land <var:O2> = <var:j> ^ <nat:2> \land <var:O3> = <var:j> ^ <nat:3> \land <var:O0> = <nat:9> \} \, <var:O2> := <var:O2> * <nat:8> \, \{ <var:A> = <var:j> \land <var:O1> = <nat:8> * <var:j> \land <var:O2> = <nat:8> * <var:j> ^ <nat:2> \land <var:O3> = <var:j> ^ <nat:3> \land <var:O0> = <nat:9> \} \\ \{ <var:A> = <var:j> \land <var:O1> = <nat:8> * <var:j> \land <var:O2> = <nat:8> * <var:j> ^ <nat:2> \land <var:O3> = <var:j> ^ <nat:3> \land <var:O0> = <nat:9> \} \, <var:O3> := <var:O3> * <nat:9> \, \{ <var:A> = <var:j> \land <var:O1> = <nat:8> * <var:j> \land <var:O2> = <nat:8> * <var:j> ^ <nat:2> \land <var:O3> = <nat:9> * <var:j> ^ <nat:3> \land <var:O0> = <nat:9> \} \\ \{ <var:A> = <var:j> \land <var:O1> = <nat:8> * <var:j> \land <var:O2> = <nat:8> * <var:j> ^ <nat:2> \land <var:O3> = <nat:9> * <var:j> ^ <nat:3> \land <var:O0> = <nat:9> \} \, <var:g> := <var:O3\, \{ <var:A> = <var:j> \land <var:O1> = <nat:8> * <var:j> \land <var:O2> = <nat:8> * <var:j> ^ <nat:2> \land <var:O0> = <nat:9> \land <var:g> = <nat:9> * <var:j> ^ <nat:3> \} \end{eqnarray} This is sound with the binding inference rule found in Hoare techniques . Taking another step toward the upcoming piece of code contained in our set of commands , we have \begin{eqnarray} \{ <var:A> = <var:j> \} \, <var:O1> := <var:A> \, \{ <var:A> = <var:j> \land <var:O1> = <var:j> \} \end{eqnarray} Further , \begin{eqnarray} \{ <var:A> = <var:j> \} \, <var:O1> := <var:A> \, \{ <var:A> = <var:j> \land <var:O1> = <var:j> \} \end{eqnarray} Observing the upcoming command in the program , \begin{eqnarray} \{ <var:A> = <var:j> \} \, <var:O1> := <var:A> \, \{ <var:A> = <var:j> \land <var:O1> = <var:j> \} \end{eqnarray} This is ensured with the variable update inference rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:A> = <var:j> }} <var:O1> := <var:A> ; <var:O2> := <var:O1> * <var:A> ; <var:O3> := <var:O2> * <var:A> ; <var:O0> := <nat:9> ; <var:O1> := <var:O1> * <nat:8> ; <var:O2> := <var:O2> * <nat:8> ; <var:O3> := <var:O3> * <nat:9> ; <var:g> := <var:O3> <var:g> := <var:g> + <var:O2> <var:g> := <var:g> + <var:O1> <var:g> := <var:g> + <var:O0> {{ <var:g> = <nat:9> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <var:j> /\ <var:O2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <var:j> /\ <var:O2> = <var:j> ^ <nat:2> /\ <var:O3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <var:j> /\ <var:O2> = <var:j> ^ <nat:2> /\ <var:O3> = <var:j> ^ <nat:3> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <nat:8> * <var:j> /\ <var:O2> = <var:j> ^ <nat:2> /\ <var:O3> = <var:j> ^ <nat:3> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <nat:8> * <var:j> /\ <var:O2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:O3> = <var:j> ^ <nat:3> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <nat:8> * <var:j> /\ <var:O2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:O3> = <nat:9> * <var:j> ^ <nat:3> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <nat:8> * <var:j> /\ <var:O2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:O0> = <nat:9> /\ <var:g> = <nat:9> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O1> = <nat:8> * <var:j> /\ <var:O0> = <nat:9> /\ <var:g> = <nat:9> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O0> = <nat:9> /\ <var:g> = <nat:9> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:g> = <nat:9> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 