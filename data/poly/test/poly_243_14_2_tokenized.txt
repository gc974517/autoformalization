\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:1> ; <var:q> := <nat:1> + <var:q> * <var:O> ; <var:q> := <nat:1> + <var:q> * <var:O> ; <var:q> := <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> ; <var:q> := <nat:2> + <var:q> * <var:O> ; <var:q> := <var:q> * <var:O> ; <var:q> := <nat:4> + <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> ; <var:q> := <var:q> * <var:O> ; <var:q> := <nat:4> + <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:O> = <var:y> $ before the evaluation of this list of instructions then we see $ <var:q> = <nat:1> * <var:y> ^ <nat:13> + <nat:1> * <var:y> ^ <nat:12> + <nat:1> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our set of commands is done using Hoare techniques . Shifting focus toward the next bits of codein the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:y> \} & <var:q> := <nat:1> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} \\ \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} & <var:q> := <nat:1> + <var:q> * <var:O> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> + <nat:1> \} \\ \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> + <nat:1> \} & <var:q> := <nat:1> + <var:q> * <var:O> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:1> \} \\ \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:1> \} & <var:q> := <var:q> * <var:O> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + \} \\ \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + \} & <var:q> := <nat:3> + <var:q> * <var:O> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:1> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \} \\ \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:1> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \} & <var:q> := <nat:3> + <var:q> * <var:O> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:5> + <nat:1> \cdot <var:y> ^ <nat:4> + <nat:1> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> + <nat:3> \} \end{tabular} Taking another step toward the upcoming statement in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:y> \} & <var:q> := <nat:1> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} \end{tabular} This is rigorously given through the binding inference rule from usual Hoare techniques . Observing the subsequent bit of code seen in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:y> \} & <var:q> := <nat:1> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} \end{tabular} This is guaranteed using the variable update inference rule obtained from standard Hoare techniques . Moving on to the next commands seen in our code , \[ \begin{tabular} {rcl} \{ <var:O> = <var:y> \} & <var:q> := <nat:1> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} \\ \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} & <var:q> := <nat:1> + <var:q> * <var:O> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> + <nat:1> \} \\ \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> + <nat:1> \} & <var:q> := <nat:1> + <var:q> * <var:O> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:1> \} \end{tabular} Shifting focus toward the proceeding piece of code in our list of commands , \[ \begin{tabular} {rcl} \{ <var:O> = <var:y> \} & <var:q> := <nat:1> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} \end{tabular} This is ensured through the law of usual Hoare logic . Advancing to the upcoming lines seen in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:y> \} & <var:q> := <nat:1> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} \\ \{ <var:O> = <var:y> \land <var:q> = <nat:1> \} & <var:q> := <nat:1> + <var:q> * <var:O> & \{ <var:O> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> + <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:1> ; <var:q> := <nat:1> + <var:q> * <var:O> ; <var:q> := <nat:1> + <var:q> * <var:O> ; <var:q> := <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> ; <var:q> := <nat:2> + <var:q> * <var:O> ; <var:q> := <var:q> * <var:O> ; <var:q> := <nat:4> + <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> ; <var:q> := <var:q> * <var:O> ; <var:q> := <nat:4> + <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> ; <var:q> := <nat:3> + <var:q> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:O> = <var:y> }} <def:poly> {{ <var:q> = <nat:1> * <var:y> ^ <nat:13> + <nat:1> * <var:y> ^ <nat:12> + <nat:1> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:9> + <nat:1> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:10> + <nat:1> * <var:y> ^ <nat:9> + <nat:1> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:11> + <nat:1> * <var:y> ^ <nat:10> + <nat:1> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:12> + <nat:1> * <var:y> ^ <nat:11> + <nat:1> * <var:y> ^ <nat:10> + <nat:3> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:13> + <nat:1> * <var:y> ^ <nat:12> + <nat:1> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 