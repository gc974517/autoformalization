\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:o1> := <var:Z> ; <var:o0> := <nat:4> ; <var:o1> := <var:o1> * <nat:4> ; <var:j> := <var:o1> <var:j> := <var:j> + <var:o0> \end{verbatim} Assuming --- for every integers $ <var:K> $ --- that $ <var:Z> = <var:K> $ ahead of the evaluation of this series of instructions it holds that we see $ <var:j> = <nat:4> \times <var:K> + <nat:4> $ once list of commands has exited . \end{theorem} \begin{proof} Using standard Hoare logic gives : \begin{eqnarray} \{ <var:Z> = <var:K> \} \\ <var:o1> := <var:Z> ; \\ \{ <var:Z> = <var:K> \land <var:o1> = <var:K> \} \\ <var:o0> := <nat:4> ; \\ \{ <var:Z> = <var:K> \land <var:o1> = <var:K> \land <var:o0> = <nat:4> \} \\ <var:o1> := <var:o1> * <nat:4> ; \\ \{ <var:Z> = <var:K> \land <var:o1> = <nat:4> * <var:K> \land <var:o0> = <nat:4> \} \\ <var:j> := <var:o1> \\ \{ <var:Z> = <var:K> \land <var:o0> = <nat:4> \land <var:j> = <nat:4> * <var:K> \} \\ <var:j> := <var:j> + <var:o0> \\ \{ <var:Z> = <var:K> \land <var:j> = <nat:4> * <var:K> + <nat:4> \} \end{eqnarray} Thus , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:Z> = <var:K> }} <var:o1> := <var:Z> ; <var:o0> := <nat:4> ; <var:o1> := <var:o1> * <nat:4> ; <var:j> := <var:o1> <var:j> := <var:j> + <var:o0> {{ <var:j> = <nat:4> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:o1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:o1> = <var:K> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:o1> = <nat:4> * <var:K> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:o0> = <nat:4> /\ <var:j> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:j> = <nat:4> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 