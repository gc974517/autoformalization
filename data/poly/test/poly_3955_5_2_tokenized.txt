\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H> := <nat:4> ; <var:H> := <nat:1> + <var:H> * <var:A> ; <var:H> := <nat:2> + <var:H> * <var:A> ; <var:H> := <nat:1> + <var:H> * <var:A> ; <var:H> := <nat:2> + <var:H> * <var:A> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:A> = <var:T> $ prior to the evaluation of this set of commands , it follows that $ <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:1> \cdot <var:T> ^ <nat:3> + <nat:2> \cdot <var:T> ^ <nat:2> + <nat:1> \cdot <var:T> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is clear by typical Hoare techniques . Moving on , the variable assignmet line letting $ <nat:4> $ into $ <var:H>$ . This redefines the condition $ \{ <var:A> = <var:T> \} $ toward the postcondition $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \} $ . Moving on to the next step , the assignment statement \verb | <var:H> := <nat:1> + <var:H> * <var:A> ; | . This command advances $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \} $ toward $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \cdot <var:T> + <nat:1> \} $ . This is rigorously given using the assignment rule from usual Hoare techniques . Shifting focus toward the following command in our code , the variable assignmet command yielding $ <nat:2> + <var:H> * <var:A> $ toward $ <var:H>$ . This code moves the precondition $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \cdot <var:T> + <nat:1> \} $ as the condition $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:2> + <nat:1> \cdot <var:T> + <nat:2> \} $ . This is deduced through the assignment law in standard Hoare techniques . Paying attention to the upcoming piece of code seen in the segment of code , we see the variable assignmet code assigning $ <nat:1> + <var:H> * <var:A> $ toward $ <var:H>$ . This line redefines $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:2> + <nat:1> \cdot <var:T> + <nat:2> \} $ to $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:1> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:1> \} $ . This is guaranteed by the assignment inference rule given in standard Hoare reasoning . Taking another step toward the next bit of code in our series of commands , we see the variable binding code \verb | <var:H> := <nat:2> + <var:H> * <var:A> | . This line moves $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:1> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:1> \} $ as $ \{ <var:A> = <var:T> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:1> \cdot <var:T> ^ <nat:3> + <nat:2> \cdot <var:T> ^ <nat:2> + <nat:1> \cdot <var:T> + <nat:2> \} $ . This is shown using the assignment rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:4> ; <var:H> := <nat:1> + <var:H> * <var:A> ; <var:H> := <nat:2> + <var:H> * <var:A> ; <var:H> := <nat:1> + <var:H> * <var:A> ; <var:H> := <nat:2> + <var:H> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:A> = <var:T> }} <def:poly> {{ <var:H> = <nat:4> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:H> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:H> = <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:H> = <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:H> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:H> = <nat:4> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 