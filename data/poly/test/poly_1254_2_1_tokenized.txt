\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:1> ; <var:U> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:y> = <var:i> $ , letting natural coefficients $ <var:i> $ , prior to the evaluation of this code segment then we see $ <var:U> = <nat:1> $ when set of instructions exits . \end{theorem} \begin{proof} The method of proof for the set of instructions is shown through Hoare logic . Taking a look at the upcoming command contained in the segment of code , \[ \begin{tabular} {rcl} \{ <var:y> = <var:i> \} & <var:a0> := <nat:1> & \{ <var:y> = <var:i> \land <var:a0> = <nat:1> \} \end{tabular} Honing in on the upcoming statement in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:i> \} & <var:a0> := <nat:1> & \{ <var:y> = <var:i> \land <var:a0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:1> ; <var:U> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:y> = <var:i> }} <def:poly> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 