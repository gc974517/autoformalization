\begin{document} \begin{theorem} Consider the following list of commands : \begin{verbatim} <var:c1> := <var:B> ; <var:c2> := <var:c1> * <var:B> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:3> ; <var:c2> := <var:c2> * <nat:6> ; <var:Q> := <var:c2> <var:Q> := <var:Q> + <var:c1> <var:Q> := <var:Q> + <var:c0> \end{verbatim} Allowing --- for every positive integers $ <var:X> $ --- $ <var:B> = <var:X> $ prior to the evaluation of our code segment , it holds that we have $ <var:Q> = <nat:6> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> $ after code segment finishes . \end{theorem} \begin{proof} The argument for our series of commands can be demonstrated by Hoare reasoning . Moving on , we see the variable update command giving $ <var:B> $ toward $ <var:c1>$ . This statement advances $ \{ <var:B> = <var:X> \} $ toward the postcondition $ \{ <var:B> = <var:X> \land <var:c1> = <var:X> \} $ . This is rigorously given by the assignment rule given in usual Hoare reasoning . Moving on , we have the variable update command \verb | <var:c2> := <var:c1> * <var:B> ; | . This line redefines the precondition $ \{ <var:B> = <var:X> \land <var:c1> = <var:X> \} $ toward the postcondition $ \{ <var:B> = <var:X> \land <var:c1> = <var:X> \land <var:c2> = <var:X> ^ <nat:2> \} $ . Honing in on the proceeding line of code seen in the set of instructions , the code \verb | <var:c0> := <nat:3> ; | . This redefines $ \{ <var:B> = <var:X> \land <var:c1> = <var:X> \land <var:c2> = <var:X> ^ <nat:2> \} $ as $ \{ <var:B> = <var:X> \land <var:c1> = <var:X> \land <var:c2> = <var:X> ^ <nat:2> \land <var:c0> = <nat:3> \} $ . This is rigorously given through the assignment rule in standard Hoare logic . Keeping momentum , we see the variable assignmet line defining $ <var:c1> * <nat:3> $ into $ <var:c1>$ . This redefines the precondition $ \{ <var:B> = <var:X> \land <var:c1> = <var:X> \land <var:c2> = <var:X> ^ <nat:2> \land <var:c0> = <nat:3> \} $ as the postcondition $ \{ <var:B> = <var:X> \land <var:c1> = <nat:3> \times <var:X> \land <var:c2> = <var:X> ^ <nat:2> \land <var:c0> = <nat:3> \} $ . Moving forward to the following step seen in our series of commands , we see the variable binding statement giving $ <var:c2> * <nat:6> $ toward $ <var:c2>$ . This statement takes the precondition $ \{ <var:B> = <var:X> \land <var:c1> = <nat:3> \times <var:X> \land <var:c2> = <var:X> ^ <nat:2> \land <var:c0> = <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:X> \land <var:c1> = <nat:3> \times <var:X> \land <var:c2> = <nat:6> \times <var:X> ^ <nat:2> \land <var:c0> = <nat:3> \} $ . This is known to be sound by the assignment rule found in standard Hoare logic . Considering the proceeding statement found in our set of commands , we see the binding command letting $ <var:c2$ toward $ <var:Q>$ . This line takes the precondition $ \{ <var:B> = <var:X> \land <var:c1> = <nat:3> \times <var:X> \land <var:c2> = <nat:6> \times <var:X> ^ <nat:2> \land <var:c0> = <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:X> \land <var:c1> = <nat:3> \times <var:X> \land <var:c0> = <nat:3> \land <var:Q> = <nat:6> \times <var:X> ^ <nat:2> \} $ . This is known to be sound by the assignment rule from Hoare techniques . Advancing on , the binding statement \verb | <var:Q> := <var:Q> + <var:c1> | . This command forwards $ \{ <var:B> = <var:X> \land <var:c1> = <nat:3> \times <var:X> \land <var:c0> = <nat:3> \land <var:Q> = <nat:6> \times <var:X> ^ <nat:2> \} $ toward the postcondition $ \{ <var:B> = <var:X> \land <var:c0> = <nat:3> \land <var:Q> = <nat:6> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> \} $ . Shifting focus toward the next step in the list of commands , the command \verb | <var:Q> := <var:Q> + <var:c0> | . This line transfers $ \{ <var:B> = <var:X> \land <var:c0> = <nat:3> \land <var:Q> = <nat:6> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> \} $ toward the postcondition $ \{ <var:B> = <var:X> \land <var:Q> = <nat:6> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:3> \} $ . This is shown with the assignment law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:B> = <var:X> }} <var:c1> := <var:B> ; <var:c2> := <var:c1> * <var:B> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:3> ; <var:c2> := <var:c2> * <nat:6> ; <var:Q> := <var:c2> <var:Q> := <var:Q> + <var:c1> <var:Q> := <var:Q> + <var:c0> {{ <var:Q> = <nat:6> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:c1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:c1> = <var:X> /\ <var:c2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:c1> = <var:X> /\ <var:c2> = <var:X> ^ <nat:2> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:c1> = <nat:3> * <var:X> /\ <var:c2> = <var:X> ^ <nat:2> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:c1> = <nat:3> * <var:X> /\ <var:c2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:c1> = <nat:3> * <var:X> /\ <var:c0> = <nat:3> /\ <var:Q> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:c0> = <nat:3> /\ <var:Q> = <nat:6> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:Q> = <nat:6> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 