\begin{document} \begin{theorem} Take the following series of commands such that \begin{verbatim} <var:a1> := <var:Q> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:2> ; <var:x> := <var:a1> <var:x> := <var:x> + <var:a0> \end{verbatim} Assume ( for some integers $ <var:S> $ ) that $ <var:Q> = <var:S> $ prior to running this set of commands it holds that $ <var:x> = <nat:2> \cdot <var:S> + <nat:1> $ after series of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:S> \} \\ <var:a1> := <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:a1> = <var:S> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:Q> = <var:S> \land <var:a1> = <var:S> \land <var:a0> = <nat:1> \} \\ <var:a1> := <var:a1> * <nat:2> ; \\ \{ <var:Q> = <var:S> \land <var:a1> = <nat:2> \times <var:S> \land <var:a0> = <nat:1> \} \\ <var:x> := <var:a1> \\ \{ <var:Q> = <var:S> \land <var:a0> = <nat:1> \land <var:x> = <nat:2> \times <var:S> \} \\ <var:x> := <var:x> + <var:a0> \\ \{ <var:Q> = <var:S> \land <var:x> = <nat:2> \times <var:S> + <nat:1> \} \end{eqnarray} Applying standard Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Q> = <var:S> }} <var:a1> := <var:Q> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:2> ; <var:x> := <var:a1> <var:x> := <var:x> + <var:a0> {{ <var:x> = <nat:2> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:a1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:a1> = <var:S> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:a1> = <nat:2> * <var:S> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:a0> = <nat:1> /\ <var:x> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:x> = <nat:2> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 