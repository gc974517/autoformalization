\begin{document} \begin{theorem} Define a set of commands : \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:s> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:s> ; <var:a2> := <var:a2> * <var:s> ; <var:m> := <var:a2> ; <var:m> := <var:m> + <var:a1> ; <var:m> := <var:m> + <var:a0> \end{verbatim} Allowing that $ <var:s> = <var:B> $ --- given whole numbers $ <var:B> $ --- ahead of the execution of our code it follows that $ <var:m> = <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:8> $ . \end{theorem} \begin{proof} Observe that the below decorated series of commands . \begin{eqnarray} \{ <var:s> = <var:B> \} \\ <var:a0> := <nat:8> ; \\ \{ <var:s> = <var:B> \land <var:a0> = <nat:8> \} \\ <var:a1> := <nat:1> ; \\ \{ <var:s> = <var:B> \land <var:a0> = <nat:8> \land <var:a1> = <nat:1> \} \\ <var:a1> := <var:a1> * <var:s> ; \\ \{ <var:s> = <var:B> \land <var:a0> = <nat:8> \land <var:a1> = <nat:1> \cdot <var:B> \} \\ <var:a2> := <nat:3> ; \\ \{ <var:s> = <var:B> \land <var:a0> = <nat:8> \land <var:a1> = <nat:1> \cdot <var:B> \land <var:a2> = <nat:3> \} \\ <var:a2> := <var:a2> * <var:s> ; \\ \{ <var:s> = <var:B> \land <var:a0> = <nat:8> \land <var:a1> = <nat:1> \cdot <var:B> \land <var:a2> = <nat:3> \cdot <var:B> \} \\ <var:a2> := <var:a2> * <var:s> ; \\ \{ <var:s> = <var:B> \land <var:a0> = <nat:8> \land <var:a1> = <nat:1> \cdot <var:B> \land <var:a2> = <nat:3> \cdot <var:B> ^ <nat:2> \} \\ <var:m> := <var:a2> ; \\ \{ <var:s> = <var:B> \land <var:a0> = <nat:8> \land <var:a1> = <nat:1> \cdot <var:B> \land <var:m> = <nat:3> \cdot <var:B> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:a1> ; \\ \{ <var:s> = <var:B> \land <var:a0> = <nat:8> \land <var:m> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> \} \\ <var:m> := <var:m> + <var:a0> \\ \{ <var:s> = <var:B> \land <var:m> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:8> \} \end{eqnarray} Applying usual Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:s> = <var:B> }} <var:a0> := <nat:8> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:s> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:s> ; <var:a2> := <var:a2> * <var:s> ; <var:m> := <var:a2> ; <var:m> := <var:m> + <var:a1> ; <var:m> := <var:m> + <var:a0> {{ <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:1> * <var:B> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:1> * <var:B> /\ <var:a2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:1> * <var:B> /\ <var:a2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:1> * <var:B> /\ <var:m> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:a0> = <nat:8> /\ <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:m> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 