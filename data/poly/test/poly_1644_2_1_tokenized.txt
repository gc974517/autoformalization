\begin{document} \begin{theorem} Let the following program in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:5> ; <var:C> := <var:M0> \end{verbatim} Given that $ <var:U> = <var:n> $ ahead of the execution of this list of instructions , it must be that we have $ <var:C> = <nat:5> $ once segment of code finishes . \end{theorem} \begin{proof} Observe this decorated set of instructions . \begin{eqnarray} \{ <var:U> = <var:n> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:U> = <var:n> \land <var:M0> = <nat:5> \} \\ <var:C> := <var:M0> \\ \{ <var:U> = <var:n> \land <var:C> = <nat:5> \} \end{eqnarray} The application of typical Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:U> = <var:n> }} <var:M0> := <nat:5> ; <var:C> := <var:M0> {{ <var:C> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:C> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 