\begin{document} \begin{theorem} Take the following program in \emph{Imp} as \begin{verbatim} <var:Z> := <nat:1> ; <var:Z> := <var:Z> * <var:m> ; <var:Z> := <nat:2> + <var:Z> * <var:m> ; <var:Z> := <nat:3> + <var:Z> * <var:m> ; <var:Z> := <nat:1> + <var:Z> * <var:m> ; <var:Z> := <nat:3> + <var:Z> * <var:m> ; <var:Z> := <nat:3> + <var:Z> * <var:m> ; <var:Z> := <nat:3> + <var:Z> * <var:m> ; <var:Z> := <nat:1> + <var:Z> * <var:m> ; <var:Z> := <nat:4> + <var:Z> * <var:m> ; <var:Z> := <nat:1> + <var:Z> * <var:m> ; <var:Z> := <nat:4> + <var:Z> * <var:m> \end{verbatim} Allowing $ <var:m> = <var:e> $ prior to the evaluation of our code , it holds that we see $ <var:Z> = <nat:1> \cdot <var:e> ^ <nat:11> + <nat:2> \cdot <var:e> ^ <nat:9> + <nat:3> \cdot <var:e> ^ <nat:8> + <nat:1> \cdot <var:e> ^ <nat:7> + <nat:3> \cdot <var:e> ^ <nat:6> + <nat:3> \cdot <var:e> ^ <nat:5> + <nat:3> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the code segment is shown through usual Hoare reasoning . Jumping to the next step contained in our list of instructions , we see the binding code yielding $ <nat:1> $ to $ <var:Z>$ . This code redefines the condition $ \{ <var:m> = <var:e> \} $ toward the postcondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> \} $ . Next , we see the assignment line letting $ <var:Z> * <var:m> $ into $ <var:Z>$ . This command forwards the precondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> \} $ as $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> + \} $ . Stepping through , we have the statement \verb | <var:Z> := <nat:2> + <var:Z> * <var:m> ; | . This line forwards the precondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> + \} $ toward the postcondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:2> + <nat:2> \} $ . Taking another step toward the next line of code seen in the series of instructions , we have the variable update code defining $ <nat:3> + <var:Z> * <var:m> $ toward $ <var:Z>$ . This moves the condition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:2> + <nat:2> \} $ as the postcondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:3> + <nat:2> * <var:e> + <nat:3> \} $ . This is sound using the assignment scheme from standard Hoare logic . Moving forward to the next step , we have the variable update statement \verb | <var:Z> := <nat:1> + <var:Z> * <var:m> ; | . This statement advances the condition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:3> + <nat:2> * <var:e> + <nat:3> \} $ as the condition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> \} $ . Moving on , the variable update line binding $ <nat:3> + <var:Z> * <var:m> $ to $ <var:Z>$ . This moves the condition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> \} $ as the condition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> \} $ . Taking a look at the next line contained in our list of instructions , the binding command letting $ <nat:3> + <var:Z> * <var:m> $ as $ <var:Z>$ . This advances the precondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> \} $ toward the postcondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> \} $ . This is given through the assignment rule obtained from usual Hoare reasoning . Advancing to the next bit of code in our set of instructions , we have the binding code \verb | <var:Z> := <nat:3> + <var:Z> * <var:m> ; | . This command redefines the condition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> \} $ as the condition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule obtained from standard Hoare logic . Focusing on the upcoming step in our list of commands , we have the variable update command \verb | <var:Z> := <nat:1> + <var:Z> * <var:m> ; | . This statement redefines the precondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> \} $ into the postcondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:8> + <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> \} $ . Moving on to the next step , the variable update command \verb | <var:Z> := <nat:4> + <var:Z> * <var:m> ; | . This redefines $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:8> + <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> \} $ into the condition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:9> + <nat:2> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> \} $ . This is given by the assignment rule found in Hoare reasoning . Paying attention to the following statement seen in the segment of code , we have the binding code \verb | <var:Z> := <nat:1> + <var:Z> * <var:m> ; | . This forwards the precondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:9> + <nat:2> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> \} $ to the postcondition $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:10> + <nat:2> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> \} $ . Further , the variable update line giving $ <nat:4> + <var:Z> * <var:m$ toward $ <var:Z>$ . This command moves $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:10> + <nat:2> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> \} $ into $ \{ <var:m> = <var:e> \land <var:Z> = <nat:1> * <var:e> ^ <nat:11> + <nat:2> * <var:e> ^ <nat:9> + <nat:3> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:m> = <var:e> }} <var:Z> := <nat:1> ; <var:Z> := <var:Z> * <var:m> ; <var:Z> := <nat:2> + <var:Z> * <var:m> ; <var:Z> := <nat:3> + <var:Z> * <var:m> ; <var:Z> := <nat:1> + <var:Z> * <var:m> ; <var:Z> := <nat:3> + <var:Z> * <var:m> ; <var:Z> := <nat:3> + <var:Z> * <var:m> ; <var:Z> := <nat:3> + <var:Z> * <var:m> ; <var:Z> := <nat:1> + <var:Z> * <var:m> ; <var:Z> := <nat:4> + <var:Z> * <var:m> ; <var:Z> := <nat:1> + <var:Z> * <var:m> ; <var:Z> := <nat:4> + <var:Z> * <var:m> {{ <var:Z> = <nat:1> * <var:e> ^ <nat:11> + <nat:2> * <var:e> ^ <nat:9> + <nat:3> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:3> + <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:8> + <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:9> + <nat:2> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:10> + <nat:2> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Z> = <nat:1> * <var:e> ^ <nat:11> + <nat:2> * <var:e> ^ <nat:9> + <nat:3> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 