\begin{document} \begin{theorem} Consider a series of instructions as \begin{verbatim} <var:E1> := <var:C> ; <var:E2> := <var:E1> * <var:C> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:5> ; <var:E2> := <var:E2> * <nat:2> ; <var:T> := <var:E2> <var:T> := <var:T> + <var:E1> <var:T> := <var:T> + <var:E0> \end{verbatim} Given it to be that $ <var:C> = <var:G> $ before executing this series of instructions it holds that we have $ <var:T> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:5> \cdot <var:G> + <nat:6> $ . \end{theorem} \begin{proof} Using Hoare reasoning yields : \begin{eqnarray} \{ <var:C> = <var:G> \} \\ <var:E1> := <var:C> ; \\ \{ <var:C> = <var:G> \land <var:E1> = <var:G> \} \\ <var:E2> := <var:E1> * <var:C> ; \\ \{ <var:C> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \} \\ <var:E0> := <nat:6> ; \\ \{ <var:C> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E0> = <nat:6> \} \\ <var:E1> := <var:E1> * <nat:5> ; \\ \{ <var:C> = <var:G> \land <var:E1> = <nat:5> \cdot <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E0> = <nat:6> \} \\ <var:E2> := <var:E2> * <nat:2> ; \\ \{ <var:C> = <var:G> \land <var:E1> = <nat:5> \cdot <var:G> \land <var:E2> = <nat:2> \cdot <var:G> ^ <nat:2> \land <var:E0> = <nat:6> \} \\ <var:T> := <var:E2> \\ \{ <var:C> = <var:G> \land <var:E1> = <nat:5> \cdot <var:G> \land <var:E0> = <nat:6> \land <var:T> = <nat:2> \cdot <var:G> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:E1> \\ \{ <var:C> = <var:G> \land <var:E0> = <nat:6> \land <var:T> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:5> \cdot <var:G> \} \\ <var:T> := <var:T> + <var:E0> \\ \{ <var:C> = <var:G> \land <var:T> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:5> \cdot <var:G> + <nat:6> \} \end{eqnarray} Given the preceding argument , the segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:C> = <var:G> }} <var:E1> := <var:C> ; <var:E2> := <var:E1> * <var:C> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:5> ; <var:E2> := <var:E2> * <nat:2> ; <var:T> := <var:E2> <var:T> := <var:T> + <var:E1> <var:T> := <var:T> + <var:E0> {{ <var:T> = <nat:2> * <var:G> ^ <nat:2> + <nat:5> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:E1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:E1> = <var:G> /\ <var:E2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:E1> = <var:G> /\ <var:E2> = <var:G> ^ <nat:2> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:E1> = <nat:5> * <var:G> /\ <var:E2> = <var:G> ^ <nat:2> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:E1> = <nat:5> * <var:G> /\ <var:E2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:E1> = <nat:5> * <var:G> /\ <var:E0> = <nat:6> /\ <var:T> = <nat:2> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:E0> = <nat:6> /\ <var:T> = <nat:2> * <var:G> ^ <nat:2> + <nat:5> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:G> /\ <var:T> = <nat:2> * <var:G> ^ <nat:2> + <nat:5> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 