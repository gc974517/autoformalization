\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <var:f> * <var:t> ; <var:f> := <nat:4> + <var:f> * <var:t> \end{verbatim} Given $ <var:t> = <var:K> $ prior to running this series of instructions , it holds that we see $ <var:f> = <nat:1> * <var:K> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:t> = <var:K> \} \\ <var:f> := <nat:1> ; \\ \{ <var:t> = <var:K> \land <var:f> = <nat:1> \} \\ <var:f> := <var:f> * <var:t> ; \\ \{ <var:t> = <var:K> \land <var:f> = <nat:1> \cdot <var:K> + \} \\ <var:f> := <nat:4> + <var:f> * <var:t> \\ \{ <var:t> = <var:K> \land <var:f> = <nat:1> \cdot <var:K> ^ <nat:2> + <nat:4> \} \end{eqnarray} Thusly , our list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:t> = <var:K> }} <var:f> := <nat:1> ; <var:f> := <var:f> * <var:t> ; <var:f> := <nat:4> + <var:f> * <var:t> {{ <var:f> = <nat:1> * <var:K> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:K> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:K> /\ <var:f> = <nat:1> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:K> /\ <var:f> = <nat:1> * <var:K> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 