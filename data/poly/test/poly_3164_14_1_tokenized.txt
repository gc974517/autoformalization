\begin{document} \begin{theorem} We define the following set of commands as \begin{verbatim} <var:Z1> := <var:X> ; <var:Z2> := <var:Z1> * <var:X> ; <var:Z3> := <var:Z2> * <var:X> ; <var:Z4> := <var:Z3> * <var:X> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:Z2> := <var:Z2> * <nat:4> ; <var:Z3> := <var:Z3> * <nat:1> ; <var:Z4> := <var:Z4> * <nat:3> ; <var:x> := <var:Z4> <var:x> := <var:x> + <var:Z3> <var:x> := <var:x> + <var:Z2> <var:x> := <var:x> + <var:Z1> <var:x> := <var:x> + <var:Z0> \end{verbatim} Assume it to hold that $ <var:X> = <var:N> $ for positive numbers $ <var:N> $ before the evaluation of our series of instructions , it follows that we have $ <var:x> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:7> \times <var:N> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the list of instructions is shown with standard Hoare techniques . Advancing on , we see the environment update command \verb | <var:Z1> := <var:X> ; | . This advances the precondition $ \{ <var:X> = <var:N> \} $ as $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \} $ . This is shown through the assignment inference rule of Hoare logic . Focusing on the next piece of code found in our code , the command binding $ <var:Z1> * <var:X> $ toward $ <var:Z2>$ . This takes the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \} $ toward the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \} $ . This is shown using the assignment scheme given in usual Hoare techniques . Shifting focus toward the subsequent line contained in the set of instructions , we have the variable assignmet command defining $ <var:Z2> * <var:X> $ to $ <var:Z3>$ . This code forwards the precondition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \} $ as the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \} $ . This is deduced with the assignment inference rule defined in Hoare techniques . Moving onward , the variable assignmet line \verb | <var:Z4> := <var:Z3> * <var:X> ; | . This transfers the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \} $ into the postcondition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \} $ . This is given by the assignment scheme from usual Hoare reasoning . Paying attention to the subsequent bit of code in our segment of code , we see the binding code \verb | <var:Z0> := <nat:2> ; | . This moves the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \} $ as the postcondition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ . Moving forward to the next piece of code seen in the segment of code , we have the assignment statement letting $ <var:Z1> * <nat:7> $ to $ <var:Z1>$ . This command advances the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ into the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ . This is shown to be logically sound with the assignment rule given by standard Hoare techniques . Advancing , the variable binding code letting $ <var:Z2> * <nat:4> $ as $ <var:Z2>$ . This line transfers $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ toward the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ . This is shown using the assignment scheme defined by typical Hoare logic . Jumping to the subsequent bit of code seen in our set of instructions , we have the command letting $ <var:Z3> * <nat:1> $ to $ <var:Z3>$ . This line advances the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z3> = <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ to the postcondition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ . This is given with the assignment inference rule defined in Hoare reasoning . Looking at the upcoming command seen in our segment of code , the environment update line \verb | <var:Z4> := <var:Z4> * <nat:3> ; | . This moves $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:N> ^ <nat:3> \land <var:Z4> = <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ toward the postcondition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:N> ^ <nat:3> \land <var:Z4> = <nat:3> \times <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ . Jumping to the upcoming bit of code in the list of commands , the variable update statement \verb | <var:x> := <var:Z4> | . This takes the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:N> ^ <nat:3> \land <var:Z4> = <nat:3> \times <var:N> ^ <nat:4> \land <var:Z0> = <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:N> ^ <nat:3> \land <var:Z0> = <nat:2> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> \} $ . This is guaranteed using the assignment rule in standard Hoare reasoning . Honing in on the proceeding line of code contained in our series of instructions , we have the code letting $ <var:x> + <var:Z3$ as $ <var:x>$ . This code advances the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:N> ^ <nat:3> \land <var:Z0> = <nat:2> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> \} $ toward the condition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z0> = <nat:2> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> \} $ . Following , we see the assignment statement defining $ <var:x> + <var:Z2$ toward $ <var:x>$ . This redefines $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:Z0> = <nat:2> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> \} $ as $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z0> = <nat:2> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule of standard Hoare techniques . Taking another step toward the subsequent step contained in our segment of code , the code \verb | <var:x> := <var:x> + <var:Z1> | . This advances the precondition $ \{ <var:X> = <var:N> \land <var:Z1> = <nat:7> \times <var:N> \land <var:Z0> = <nat:2> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:N> \land <var:Z0> = <nat:2> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:7> \times <var:N> \} $ . Taking another step toward the next line found in the code , we have the variable assignmet statement defining $ <var:x> + <var:Z0$ toward $ <var:x>$ . This line advances $ \{ <var:X> = <var:N> \land <var:Z0> = <nat:2> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:7> \times <var:N> \} $ toward the postcondition $ \{ <var:X> = <var:N> \land <var:x> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:7> \times <var:N> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <var:Z4> : string := " <var:Z4> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:X> = <var:N> }} <var:Z1> := <var:X> ; <var:Z2> := <var:Z1> * <var:X> ; <var:Z3> := <var:Z2> * <var:X> ; <var:Z4> := <var:Z3> * <var:X> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:Z2> := <var:Z2> * <nat:4> ; <var:Z3> := <var:Z3> * <nat:1> ; <var:Z4> := <var:Z4> * <nat:3> ; <var:x> := <var:Z4> <var:x> := <var:x> + <var:Z3> <var:x> := <var:x> + <var:Z2> <var:x> := <var:x> + <var:Z1> <var:x> := <var:x> + <var:Z0> {{ <var:x> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <var:N> /\ <var:Z2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <var:N> /\ <var:Z2> = <var:N> ^ <nat:2> /\ <var:Z3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <var:N> /\ <var:Z2> = <var:N> ^ <nat:2> /\ <var:Z3> = <var:N> ^ <nat:3> /\ <var:Z4> = <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <var:N> /\ <var:Z2> = <var:N> ^ <nat:2> /\ <var:Z3> = <var:N> ^ <nat:3> /\ <var:Z4> = <var:N> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <nat:7> * <var:N> /\ <var:Z2> = <var:N> ^ <nat:2> /\ <var:Z3> = <var:N> ^ <nat:3> /\ <var:Z4> = <var:N> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <nat:7> * <var:N> /\ <var:Z2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:Z3> = <var:N> ^ <nat:3> /\ <var:Z4> = <var:N> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <nat:7> * <var:N> /\ <var:Z2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:N> ^ <nat:3> /\ <var:Z4> = <var:N> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <nat:7> * <var:N> /\ <var:Z2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:N> ^ <nat:3> /\ <var:Z4> = <nat:3> * <var:N> ^ <nat:4> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <nat:7> * <var:N> /\ <var:Z2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:N> ^ <nat:3> /\ <var:Z0> = <nat:2> /\ <var:x> = <nat:3> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <nat:7> * <var:N> /\ <var:Z2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:Z0> = <nat:2> /\ <var:x> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z1> = <nat:7> * <var:N> /\ <var:Z0> = <nat:2> /\ <var:x> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:Z0> = <nat:2> /\ <var:x> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:x> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 