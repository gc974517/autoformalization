\begin{document} \begin{theorem} Consider a code segment : \begin{verbatim} <var:D1> := <var:V> ; <var:D2> := <var:D1> * <var:V> ; <var:D3> := <var:D2> * <var:V> ; <var:D0> := <nat:2> ; <var:D1> := <var:D1> * <nat:1> ; <var:D2> := <var:D2> * <nat:3> ; <var:D3> := <var:D3> * <nat:2> ; <var:O> := <var:D3> <var:O> := <var:O> + <var:D2> <var:O> := <var:O> + <var:D1> <var:O> := <var:O> + <var:D0> \end{verbatim} Given that we have $ <var:V> = <var:j> $ given natural numbers $ <var:j> $ ahead of the execution of this code segment it follows that $ <var:O> = <nat:2> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our set of commands is accomplished by standard Hoare techniques . Moving on to the following line of code in the list of instructions , the environment update command \verb | <var:D1> := <var:V> ; | . This code moves the condition $ \{ <var:V> = <var:j> \} $ as the condition $ \{ <var:V> = <var:j> \land <var:D1> = <var:j> \} $ . This is known to be sound using the assignment rule found in typical Hoare logic . Considering the following bit of code in the list of commands , we see the command binding $ <var:D1> * <var:V> $ to $ <var:D2>$ . This statement transfers the precondition $ \{ <var:V> = <var:j> \land <var:D1> = <var:j> \} $ toward the postcondition $ \{ <var:V> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \} $ . Shifting focus toward the subsequent piece of code seen in the code segment , the variable assignmet line \verb | <var:D3> := <var:D2> * <var:V> ; | . This statement redefines the precondition $ \{ <var:V> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \} $ as $ \{ <var:V> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \} $ . This is sound through the assignment rule in typical Hoare logic . Considering the upcoming line found in our series of instructions , we see the variable binding command binding $ <nat:2> $ toward $ <var:D0>$ . This line moves the precondition $ \{ <var:V> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \} $ as the condition $ \{ <var:V> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:2> \} $ . This is deduced through the assignment scheme given in typical Hoare techniques . Moving forward to the proceeding line contained in the list of commands , we see the variable assignmet code \verb | <var:D1> := <var:D1> * <nat:1> ; | . This moves the condition $ \{ <var:V> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:2> \} $ toward the condition $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:2> \} $ . This is shown through the assignment inference rule defined by Hoare techniques . Jumping to the proceeding command found in the list of instructions , we have the variable assignmet code \verb | <var:D2> := <var:D2> * <nat:3> ; | . This code advances the condition $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:2> \} $ as $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:2> \} $ . Paying attention to the following line of code in the code , we see the environment update line \verb | <var:D3> := <var:D3> * <nat:2> ; | . This moves the condition $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:2> \} $ as the postcondition $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:D3> = <nat:2> \times <var:j> ^ <nat:3> \land <var:D0> = <nat:2> \} $ . This is given using the assignment scheme given by typical Hoare logic . Taking a look at the next line of code found in our code segment , we have the assignment code yielding $ <var:D3$ to $ <var:O>$ . This takes the condition $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:D3> = <nat:2> \times <var:j> ^ <nat:3> \land <var:D0> = <nat:2> \} $ to the condition $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:D0> = <nat:2> \land <var:O> = <nat:2> \times <var:j> ^ <nat:3> \} $ . Taking a look at the upcoming step in the program , we have the environment update statement yielding $ <var:O> + <var:D2$ to $ <var:O>$ . This code takes $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D2> = <nat:3> \times <var:j> ^ <nat:2> \land <var:D0> = <nat:2> \land <var:O> = <nat:2> \times <var:j> ^ <nat:3> \} $ into the postcondition $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D0> = <nat:2> \land <var:O> = <nat:2> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> \} $ . Moving on , the variable update statement \verb | <var:O> := <var:O> + <var:D1> | . This statement transfers $ \{ <var:V> = <var:j> \land <var:D1> = <nat:1> \times <var:j> \land <var:D0> = <nat:2> \land <var:O> = <nat:2> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> \} $ as the condition $ \{ <var:V> = <var:j> \land <var:D0> = <nat:2> \land <var:O> = <nat:2> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> \} $ . This is deduced through the assignment rule of standard Hoare techniques . Going to the next step , we have the assignment statement assigning $ <var:O> + <var:D0$ into $ <var:O>$ . This forwards the condition $ \{ <var:V> = <var:j> \land <var:D0> = <nat:2> \land <var:O> = <nat:2> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> \} $ as the postcondition $ \{ <var:V> = <var:j> \land <var:O> = <nat:2> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:V> = <var:j> }} <var:D1> := <var:V> ; <var:D2> := <var:D1> * <var:V> ; <var:D3> := <var:D2> * <var:V> ; <var:D0> := <nat:2> ; <var:D1> := <var:D1> * <nat:1> ; <var:D2> := <var:D2> * <nat:3> ; <var:D3> := <var:D3> * <nat:2> ; <var:O> := <var:D3> <var:O> := <var:O> + <var:D2> <var:O> := <var:O> + <var:D1> <var:O> := <var:O> + <var:D0> {{ <var:O> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <var:j> /\ <var:D2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <var:j> /\ <var:D2> = <var:j> ^ <nat:2> /\ <var:D3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <var:j> /\ <var:D2> = <var:j> ^ <nat:2> /\ <var:D3> = <var:j> ^ <nat:3> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <nat:1> * <var:j> /\ <var:D2> = <var:j> ^ <nat:2> /\ <var:D3> = <var:j> ^ <nat:3> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <nat:1> * <var:j> /\ <var:D2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:D3> = <var:j> ^ <nat:3> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <nat:1> * <var:j> /\ <var:D2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:D3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <nat:1> * <var:j> /\ <var:D2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:D0> = <nat:2> /\ <var:O> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D1> = <nat:1> * <var:j> /\ <var:D0> = <nat:2> /\ <var:O> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:D0> = <nat:2> /\ <var:O> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:O> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 