\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:x1> := <var:y> ; <var:x2> := <var:x1> * <var:y> ; <var:x3> := <var:x2> * <var:y> ; <var:x0> := <nat:9> ; <var:x1> := <var:x1> * <nat:1> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:3> ; <var:v> := <var:x3> <var:v> := <var:v> + <var:x2> <var:v> := <var:v> + <var:x1> <var:v> := <var:v> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:y> = <var:m> $ before executing this series of commands it must be that we have $ <var:v> = <nat:3> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:9> $ once segment of code has finished executing . \end{theorem} \begin{proof} The method of proof for this series of commands is done through usual Hoare reasoning . Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:m> \} & <var:x1> := <var:y> & \{ <var:y> = <var:m> \land <var:x1> = <var:m> \} \\ \{ <var:y> = <var:m> \land <var:x1> = <var:m> \} & <var:x2> := <var:x1> * <var:y> & \{ <var:y> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \} \\ \{ <var:y> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \} & <var:x3> := <var:x2> * <var:y> & \{ <var:y> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \} \\ \{ <var:y> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \} & <var:x0> := <nat:9> & \{ <var:y> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \land <var:x0> = <nat:9> \} \\ \{ <var:y> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \land <var:x0> = <nat:9> \} & <var:x1> := <var:x1> * <nat:1> & \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \land <var:x0> = <nat:9> \} \\ \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \land <var:x0> = <nat:9> \} & <var:x2> := <var:x2> * <nat:4> & \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x2> = <nat:4> * <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \land <var:x0> = <nat:9> \} \\ \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x2> = <nat:4> * <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \land <var:x0> = <nat:9> \} & <var:x3> := <var:x3> * <nat:3> & \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x2> = <nat:4> * <var:m> ^ <nat:2> \land <var:x3> = <nat:3> * <var:m> ^ <nat:3> \land <var:x0> = <nat:9> \} \\ \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x2> = <nat:4> * <var:m> ^ <nat:2> \land <var:x3> = <nat:3> * <var:m> ^ <nat:3> \land <var:x0> = <nat:9> \} & <var:v> := <var:x3& \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x2> = <nat:4> * <var:m> ^ <nat:2> \land <var:x0> = <nat:9> \land <var:v> = <nat:3> * <var:m> ^ <nat:3> \} \\ \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x2> = <nat:4> * <var:m> ^ <nat:2> \land <var:x0> = <nat:9> \land <var:v> = <nat:3> * <var:m> ^ <nat:3> \} & <var:v> := <var:v> + <var:x2& \{ <var:y> = <var:m> \land <var:x1> = <nat:1> * <var:m> \land <var:x0> = <nat:9> \land <var:v> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> \} \end{tabular} Moving on , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:m> \} & <var:x1> := <var:y> & \{ <var:y> = <var:m> \land <var:x1> = <var:m> \} \end{tabular} Observing the upcoming line of code seen in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:m> \} & <var:x1> := <var:y> & \{ <var:y> = <var:m> \land <var:x1> = <var:m> \} \end{tabular} This is deduced with the binding inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x1> := <var:y> ; <var:x2> := <var:x1> * <var:y> ; <var:x3> := <var:x2> * <var:y> ; <var:x0> := <nat:9> ; <var:x1> := <var:x1> * <nat:1> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:3> ; <var:v> := <var:x3> <var:v> := <var:v> + <var:x2> <var:v> := <var:v> + <var:x1> <var:v> := <var:v> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <def:poly> {{ <var:v> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <var:m> /\ <var:x2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <var:m> /\ <var:x2> = <var:m> ^ <nat:2> /\ <var:x3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <var:m> /\ <var:x2> = <var:m> ^ <nat:2> /\ <var:x3> = <var:m> ^ <nat:3> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <nat:1> * <var:m> /\ <var:x2> = <var:m> ^ <nat:2> /\ <var:x3> = <var:m> ^ <nat:3> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <nat:1> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x3> = <var:m> ^ <nat:3> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <nat:1> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <nat:1> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x0> = <nat:9> /\ <var:v> = <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x1> = <nat:1> * <var:m> /\ <var:x0> = <nat:9> /\ <var:v> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:x0> = <nat:9> /\ <var:v> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 