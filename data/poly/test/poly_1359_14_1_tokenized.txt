\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:J1> := <var:N> ; <var:J2> := <var:J1> * <var:N> ; <var:J3> := <var:J2> * <var:N> ; <var:J4> := <var:J3> * <var:N> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:2> ; <var:J3> := <var:J3> * <nat:8> ; <var:J4> := <var:J4> * <nat:2> ; <var:o> := <var:J4> <var:o> := <var:o> + <var:J3> <var:o> := <var:o> + <var:J2> <var:o> := <var:o> + <var:J1> <var:o> := <var:o> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:N> = <var:b> $ , for some positive integers $ <var:b> $ , before evaluating our segment of code , it must be that we see $ <var:o> = <nat:2> \times <var:b> ^ <nat:4> + <nat:8> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:9> \times <var:b> + <nat:6> $ once set of instructions exits . \end{theorem} \begin{proof} Proving correctness for this list of commands can be demonstrated through typical Hoare techniques . Next , \verb | { <var:N> = <var:b> } <var:J1> := <var:N> { <var:N> = <var:b> \land <var:J1> = <var:b> } | . This is ensured by the variable update law given in standard Hoare logic . Shifting focus toward the following bits of codecontained in our set of instructions , \verb | { <var:N> = <var:b> } <var:J1> := <var:N> { <var:N> = <var:b> \land <var:J1> = <var:b> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <var:b> } <var:J2> := <var:J1> * <var:N> { <var:N> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> } <var:J3> := <var:J2> * <var:N> { <var:N> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> } <var:J4> := <var:J3> * <var:N> { <var:N> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> } <var:J0> := <nat:6> { <var:N> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } <var:J1> := <var:J1> * <nat:9> { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } <var:J2> := <var:J2> * <nat:2> { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J3> = <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } <var:J3> := <var:J3> * <nat:8> { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:8> \cdot <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:8> \cdot <var:b> ^ <nat:3> \land <var:J4> = <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } <var:J4> := <var:J4> * <nat:2> { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:8> \cdot <var:b> ^ <nat:3> \land <var:J4> = <nat:2> \cdot <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:8> \cdot <var:b> ^ <nat:3> \land <var:J4> = <nat:2> \cdot <var:b> ^ <nat:4> \land <var:J0> = <nat:6> } <var:o> := <var:J4{ <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:8> \cdot <var:b> ^ <nat:3> \land <var:J0> = <nat:6> \land <var:o> = <nat:2> \cdot <var:b> ^ <nat:4> } | , \verb | { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J3> = <nat:8> \cdot <var:b> ^ <nat:3> \land <var:J0> = <nat:6> \land <var:o> = <nat:2> \cdot <var:b> ^ <nat:4> } <var:o> := <var:o> + <var:J3{ <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J0> = <nat:6> \land <var:o> = <nat:2> \cdot <var:b> ^ <nat:4> + <nat:8> \cdot <var:b> ^ <nat:3> } | and \verb | { <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:J0> = <nat:6> \land <var:o> = <nat:2> \cdot <var:b> ^ <nat:4> + <nat:8> \cdot <var:b> ^ <nat:3> } <var:o> := <var:o> + <var:J2{ <var:N> = <var:b> \land <var:J1> = <nat:9> \cdot <var:b> \land <var:J0> = <nat:6> \land <var:o> = <nat:2> \cdot <var:b> ^ <nat:4> + <nat:8> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> } | . Moving onward , \verb | { <var:N> = <var:b> } <var:J1> := <var:N> { <var:N> = <var:b> \land <var:J1> = <var:b> } | . This is given using the binding rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Definition <def:poly> := <var:J1> := <var:N> ; <var:J2> := <var:J1> * <var:N> ; <var:J3> := <var:J2> * <var:N> ; <var:J4> := <var:J3> * <var:N> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:2> ; <var:J3> := <var:J3> * <nat:8> ; <var:J4> := <var:J4> * <nat:2> ; <var:o> := <var:J4> <var:o> := <var:o> + <var:J3> <var:o> := <var:o> + <var:J2> <var:o> := <var:o> + <var:J1> <var:o> := <var:o> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:N> = <var:b> }} <def:poly> {{ <var:o> = <nat:2> * <var:b> ^ <nat:4> + <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <nat:9> * <var:b> /\ <var:J2> = <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <nat:9> * <var:b> /\ <var:J2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:J3> = <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <nat:9> * <var:b> /\ <var:J2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:8> * <var:b> ^ <nat:3> /\ <var:J4> = <var:b> ^ <nat:4> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <nat:9> * <var:b> /\ <var:J2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:8> * <var:b> ^ <nat:3> /\ <var:J4> = <nat:2> * <var:b> ^ <nat:4> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <nat:9> * <var:b> /\ <var:J2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:J3> = <nat:8> * <var:b> ^ <nat:3> /\ <var:J0> = <nat:6> /\ <var:o> = <nat:2> * <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <nat:9> * <var:b> /\ <var:J2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:J0> = <nat:6> /\ <var:o> = <nat:2> * <var:b> ^ <nat:4> + <nat:8> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J1> = <nat:9> * <var:b> /\ <var:J0> = <nat:6> /\ <var:o> = <nat:2> * <var:b> ^ <nat:4> + <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:J0> = <nat:6> /\ <var:o> = <nat:2> * <var:b> ^ <nat:4> + <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:o> = <nat:2> * <var:b> ^ <nat:4> + <nat:8> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 