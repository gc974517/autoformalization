\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:6> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:r> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:r> ; <var:n2> := <var:n2> * <var:r> ; <var:n3> := <nat:9> ; <var:n3> := <var:n3> * <var:r> ; <var:n3> := <var:n3> * <var:r> ; <var:n3> := <var:n3> * <var:r> ; <var:O> := <var:n3> ; <var:O> := <var:O> + <var:n2> ; <var:O> := <var:O> + <var:n1> ; <var:O> := <var:O> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:r> = <var:Q> $ ( letting natural coefficients $ <var:Q> $ ) ahead of evaluating the series of commands , it holds that we see $ <var:O> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:6> $ once program is done . \end{theorem} \begin{proof} The proof of this code is demonstrated with standard Hoare techniques . Jumping to the subsequent statement seen in the program , we see the statement assigning $ <nat:6> $ to $ <var:n0>$ . This statement forwards the condition $ \{ <var:r> = <var:Q> \} $ to the postcondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \} $ . After , the variable assignmet line \verb | <var:n1> := <nat:5> ; | . This redefines the precondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \} $ toward the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \} $ . Following , we have the statement yielding $ <var:n1> * <var:r> $ as $ <var:n1>$ . This line transfers the precondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \} $ as the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \} $ . Advancing to the subsequent command seen in the program , we have the binding statement \verb | <var:n2> := <nat:3> ; | . This statement forwards $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \} $ to $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \} $ . Considering the upcoming line of code found in our set of instructions , the variable assignmet statement letting $ <var:n2> * <var:r> $ to $ <var:n2>$ . This takes the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \} $ as $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> \} $ . Jumping to the upcoming command in the set of commands , the environment update command \verb | <var:n2> := <var:n2> * <var:r> ; | . This command advances the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> \} $ toward the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \} $ . This is deduced by the assignment law given by typical Hoare logic . Moving forward to the next step , the environment update code binding $ <nat:9> $ toward $ <var:n3>$ . This redefines the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \} $ toward the postcondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:9> \} $ . This is ensured using the assignment scheme defined by standard Hoare logic . Jumping to the next statement in our code segment , we have the binding code letting $ <var:n3> * <var:r> $ into $ <var:n3>$ . This redefines the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:9> \} $ as $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:9> \times <var:Q> \} $ . This is guaranteed through the assignment inference rule found in Hoare reasoning . Looking at the subsequent line in our set of instructions , we see the variable update command assigning $ <var:n3> * <var:r> $ to $ <var:n3>$ . This takes the precondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:9> \times <var:Q> \} $ into the postcondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:9> \times <var:Q> ^ <nat:2> \} $ . Going to the next step , the code \verb | <var:n3> := <var:n3> * <var:r> ; | . This command forwards $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:9> \times <var:Q> ^ <nat:2> \} $ to the postcondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:9> \times <var:Q> ^ <nat:3> \} $ . Jumping to the following line found in the series of instructions , the assignment code \verb | <var:O> := <var:n3> ; | . This line advances the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:n3> = <nat:9> \times <var:Q> ^ <nat:3> \} $ as $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:O> = <nat:9> \times <var:Q> ^ <nat:3> \} $ . Moving onward , the variable assignmet statement \verb | <var:O> := <var:O> + <var:n2> ; | . This redefines $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:n2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:O> = <nat:9> \times <var:Q> ^ <nat:3> \} $ toward the postcondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:O> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> \} $ . Advancing to the proceeding line contained in the segment of code , the binding command yielding $ <var:O> + <var:n1> $ toward $ <var:O>$ . This line advances the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:5> \times <var:Q> \land <var:O> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> \} $ into the postcondition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:O> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> \} $ . This is rigorously given through the assignment inference rule in standard Hoare reasoning . Moving forward to the proceeding line of code contained in the program , we have the binding command \verb | <var:O> := <var:O> + <var:n0> | . This forwards the condition $ \{ <var:r> = <var:Q> \land <var:n0> = <nat:6> \land <var:O> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> \} $ as the postcondition $ \{ <var:r> = <var:Q> \land <var:O> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n0> := <nat:6> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:r> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:r> ; <var:n2> := <var:n2> * <var:r> ; <var:n3> := <nat:9> ; <var:n3> := <var:n3> * <var:r> ; <var:n3> := <var:n3> * <var:r> ; <var:n3> := <var:n3> * <var:r> ; <var:O> := <var:n3> ; <var:O> := <var:O> + <var:n2> ; <var:O> := <var:O> + <var:n1> ; <var:O> := <var:O> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:r> = <var:Q> }} <def:poly> {{ <var:O> = <nat:9> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:n3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:n3> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:n3> = <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:n3> = <nat:9> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:n2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:O> = <nat:9> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:5> * <var:Q> /\ <var:O> = <nat:9> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:O> = <nat:9> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:O> = <nat:9> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 