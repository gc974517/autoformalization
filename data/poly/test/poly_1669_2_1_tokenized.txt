\begin{document} \begin{theorem} Take a series of instructions : \begin{verbatim} <var:m0> := <nat:7> ; <var:p> := <var:m0> \end{verbatim} Allow that we have $ <var:l> = <var:c> $ ( taking $ <var:c> $ ) before evaluating our code segment , it follows that we see $ <var:p> = <nat:7> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning produces : \begin{eqnarray} \{ <var:l> = <var:c> \} \\ <var:m0> := <nat:7> ; \\ \{ <var:l> = <var:c> \land <var:m0> = <nat:7> \} \\ <var:p> := <var:m0> \\ \{ <var:l> = <var:c> \land <var:p> = <nat:7> \} \end{eqnarray} As a consequence , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:l> = <var:c> }} <var:m0> := <nat:7> ; <var:p> := <var:m0> {{ <var:p> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:p> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 