\begin{document} \begin{theorem} We define the following program in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:9> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:O> ; <var:d> := <var:j1> ; <var:d> := <var:d> + <var:j0> \end{verbatim} Allow ( for any positive integers $ <var:J> $ ) it to be that $ <var:O> = <var:J> $ before interpreting the code segment it holds that we have $ <var:d> = <nat:8> \cdot <var:J> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is shown with typical Hoare reasoning . Going forward , the binding command giving $ <nat:9> $ to $ <var:j0>$ . This command moves $ \{ <var:O> = <var:J> \} $ into the condition $ \{ <var:O> = <var:J> \land <var:j0> = <nat:9> \} $ . Keeping momentum , the statement \verb | <var:j1> := <nat:8> ; | . This code takes the condition $ \{ <var:O> = <var:J> \land <var:j0> = <nat:9> \} $ toward $ \{ <var:O> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> \} $ . This is known to be sound using the assignment inference rule given by standard Hoare logic . Advancing , we see the variable assignmet command \verb | <var:j1> := <var:j1> * <var:O> ; | . This statement takes $ \{ <var:O> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> \} $ to the condition $ \{ <var:O> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> \cdot <var:J> \} $ . Taking a look at the subsequent bit of code contained in our code segment , we see the variable binding command binding $ <var:j1> $ to $ <var:d>$ . This command redefines $ \{ <var:O> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> \cdot <var:J> \} $ to the condition $ \{ <var:O> = <var:J> \land <var:j0> = <nat:9> \land <var:d> = <nat:8> \cdot <var:J> \} $ . This is given through the assignment rule obtained from standard Hoare techniques . Moving onward , we see the variable assignmet line defining $ <var:d> + <var:j0$ toward $ <var:d>$ . This code transfers the precondition $ \{ <var:O> = <var:J> \land <var:j0> = <nat:9> \land <var:d> = <nat:8> \cdot <var:J> \} $ as $ \{ <var:O> = <var:J> \land <var:d> = <nat:8> \cdot <var:J> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:O> = <var:J> }} <var:j0> := <nat:9> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:O> ; <var:d> := <var:j1> ; <var:d> := <var:d> + <var:j0> {{ <var:d> = <nat:8> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:j0> = <nat:9> /\ <var:d> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:d> = <nat:8> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 