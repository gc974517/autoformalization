\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s1> := <var:j> ; <var:s2> := <var:s1> * <var:j> ; <var:s0> := <nat:9> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:4> ; <var:a> := <var:s2> <var:a> := <var:a> + <var:s1> <var:a> := <var:a> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given , given some positive integers $ <var:f> $ , $ <var:j> = <var:f> $ before running the list of instructions , then we see $ <var:a> = <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:9> $ when program executes . \end{theorem} \begin{proof} See that the following decorated list of instructions . \begin{eqnarray} \{ <var:j> = <var:f> \} \\ <var:s1> := <var:j> ; \\ \{ <var:j> = <var:f> \land <var:s1> = <var:f> \} \\ <var:s2> := <var:s1> * <var:j> ; \\ \{ <var:j> = <var:f> \land <var:s1> = <var:f> \land <var:s2> = <var:f> ^ <nat:2> \} \\ <var:s0> := <nat:9> ; \\ \{ <var:j> = <var:f> \land <var:s1> = <var:f> \land <var:s2> = <var:f> ^ <nat:2> \land <var:s0> = <nat:9> \} \\ <var:s1> := <var:s1> * <nat:2> ; \\ \{ <var:j> = <var:f> \land <var:s1> = <nat:2> \times <var:f> \land <var:s2> = <var:f> ^ <nat:2> \land <var:s0> = <nat:9> \} \\ <var:s2> := <var:s2> * <nat:4> ; \\ \{ <var:j> = <var:f> \land <var:s1> = <nat:2> \times <var:f> \land <var:s2> = <nat:4> \times <var:f> ^ <nat:2> \land <var:s0> = <nat:9> \} \\ <var:a> := <var:s2> \\ \{ <var:j> = <var:f> \land <var:s1> = <nat:2> \times <var:f> \land <var:s0> = <nat:9> \land <var:a> = <nat:4> \times <var:f> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:s1> \\ \{ <var:j> = <var:f> \land <var:s0> = <nat:9> \land <var:a> = <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> \} \\ <var:a> := <var:a> + <var:s0> \\ \{ <var:j> = <var:f> \land <var:a> = <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:9> \} \end{eqnarray} Using standard Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s1> := <var:j> ; <var:s2> := <var:s1> * <var:j> ; <var:s0> := <nat:9> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:4> ; <var:a> := <var:s2> <var:a> := <var:a> + <var:s1> <var:a> := <var:a> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:j> = <var:f> }} <def:poly> {{ <var:a> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:s1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:s1> = <var:f> /\ <var:s2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:s1> = <var:f> /\ <var:s2> = <var:f> ^ <nat:2> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:s1> = <nat:2> * <var:f> /\ <var:s2> = <var:f> ^ <nat:2> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:s1> = <nat:2> * <var:f> /\ <var:s2> = <nat:4> * <var:f> ^ <nat:2> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:s1> = <nat:2> * <var:f> /\ <var:s0> = <nat:9> /\ <var:a> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:s0> = <nat:9> /\ <var:a> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:f> /\ <var:a> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 