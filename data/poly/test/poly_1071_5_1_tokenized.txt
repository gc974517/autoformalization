\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F1> := <var:S> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:2> ; <var:U> := <var:F1> <var:U> := <var:U> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Allowing that we have $ <var:S> = <var:n> $ ahead of the evaluation of this list of instructions it must be that we have $ <var:U> = <nat:2> \cdot <var:n> + <nat:7> $ after segment of code has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions is evident using Hoare logic . Immediately after , we have the command \verb | <var:F1> := <var:S> ; | . This forwards the precondition $ \{ <var:S> = <var:n> \} $ into $ \{ <var:S> = <var:n> \land <var:F1> = <var:n> \} $ . This is ensured through the assignment rule defined in standard Hoare techniques . Moving forward , we have the binding command \verb | <var:F0> := <nat:7> ; | . This line advances $ \{ <var:S> = <var:n> \land <var:F1> = <var:n> \} $ to the condition $ \{ <var:S> = <var:n> \land <var:F1> = <var:n> \land <var:F0> = <nat:7> \} $ . Going forward , we see the variable update statement \verb | <var:F1> := <var:F1> * <nat:2> ; | . This transfers the condition $ \{ <var:S> = <var:n> \land <var:F1> = <var:n> \land <var:F0> = <nat:7> \} $ toward $ \{ <var:S> = <var:n> \land <var:F1> = <nat:2> * <var:n> \land <var:F0> = <nat:7> \} $ . This is shown through the assignment law found in usual Hoare techniques . Moving forward to the proceeding line of code seen in the list of instructions , we see the assignment code assigning $ <var:F1$ toward $ <var:U>$ . This line transfers $ \{ <var:S> = <var:n> \land <var:F1> = <nat:2> * <var:n> \land <var:F0> = <nat:7> \} $ into the condition $ \{ <var:S> = <var:n> \land <var:F0> = <nat:7> \land <var:U> = <nat:2> * <var:n> \} $ . Going to the next step , we have the variable binding statement defining $ <var:U> + <var:F0$ to $ <var:U>$ . This advances the precondition $ \{ <var:S> = <var:n> \land <var:F0> = <nat:7> \land <var:U> = <nat:2> * <var:n> \} $ as the postcondition $ \{ <var:S> = <var:n> \land <var:U> = <nat:2> * <var:n> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:S> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:2> ; <var:U> := <var:F1> <var:U> := <var:U> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:S> = <var:n> }} <def:poly> {{ <var:U> = <nat:2> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:F1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:F1> = <var:n> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:F1> = <nat:2> * <var:n> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:F0> = <nat:7> /\ <var:U> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:U> = <nat:2> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 