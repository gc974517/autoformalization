\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:q> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:1> ; <var:z> := <var:n1> <var:z> := <var:z> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:q> = <var:U> $ , for every $ <var:U> \in \mathbb{Z}^+ $ , before running our list of commands it must be that $ <var:z> = <nat:1> * <var:U> + <nat:7> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:q> = <var:U> \} \\ <var:n1> := <var:q> ; \\ \{ <var:q> = <var:U> \land <var:n1> = <var:U> \} \\ <var:n0> := <nat:7> ; \\ \{ <var:q> = <var:U> \land <var:n1> = <var:U> \land <var:n0> = <nat:7> \} \\ <var:n1> := <var:n1> * <nat:1> ; \\ \{ <var:q> = <var:U> \land <var:n1> = <nat:1> \cdot <var:U> \land <var:n0> = <nat:7> \} \\ <var:z> := <var:n1> \\ \{ <var:q> = <var:U> \land <var:n0> = <nat:7> \land <var:z> = <nat:1> \cdot <var:U> \} \\ <var:z> := <var:z> + <var:n0> \\ \{ <var:q> = <var:U> \land <var:z> = <nat:1> \cdot <var:U> + <nat:7> \} \end{eqnarray} Considering the above , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n1> := <var:q> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:1> ; <var:z> := <var:n1> <var:z> := <var:z> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:q> = <var:U> }} <def:poly> {{ <var:z> = <nat:1> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:n1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:n1> = <var:U> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:n1> = <nat:1> * <var:U> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:n0> = <nat:7> /\ <var:z> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:z> = <nat:1> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 