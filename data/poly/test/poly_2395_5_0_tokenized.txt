\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:1> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:d> ; <var:B> := <var:L1> ; <var:B> := <var:B> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> . Allow taking $ <var:R> \in \mathbb{Z}^+ $ that $ <var:d> = <var:R> $ before running the series of commands , then we see $ <var:B> = <nat:3> * <var:R> + <nat:1> $ when code has finished . \end{theorem} \begin{proof} The method of proof for this segment of code is evident with typical Hoare logic . Observing the next statements in our series of commands , we have \begin{verbatim} { <var:d> = <var:R> } <var:L0> := <nat:1> { <var:d> = <var:R> \land <var:L0> = <nat:1> } { <var:d> = <var:R> \land <var:L0> = <nat:1> } <var:L1> := <nat:3> { <var:d> = <var:R> \land <var:L0> = <nat:1> \land <var:L1> = <nat:3> } \end{verbatim} This is guaranteed by the rule found in Hoare techniques . Stepping forward , we see \begin{verbatim} { <var:d> = <var:R> } <var:L0> := <nat:1> { <var:d> = <var:R> \land <var:L0> = <nat:1> } { <var:d> = <var:R> \land <var:L0> = <nat:1> } <var:L1> := <nat:3> { <var:d> = <var:R> \land <var:L0> = <nat:1> \land <var:L1> = <nat:3> } \end{verbatim} This is shown through the variable assignmet scheme of standard Hoare techniques . Stepping forward , \begin{verbatim} { <var:d> = <var:R> } <var:L0> := <nat:1> { <var:d> = <var:R> \land <var:L0> = <nat:1> } \end{verbatim} This is shown to be logically sound through the environment update inference rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:1> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:d> ; <var:B> := <var:L1> ; <var:B> := <var:B> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:d> = <var:R> }} <def:poly> {{ <var:B> = <nat:3> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:L0> = <nat:1> /\ <var:B> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:B> = <nat:3> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 