\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:S1> := <var:R> ; <var:S2> := <var:S1> * <var:R> ; <var:S3> := <var:S2> * <var:R> ; <var:S4> := <var:S3> * <var:R> ; <var:S0> := <nat:4> ; <var:S1> := <var:S1> * <nat:9> ; <var:S2> := <var:S2> * <nat:9> ; <var:S3> := <var:S3> * <nat:7> ; <var:S4> := <var:S4> * <nat:3> ; <var:h> := <var:S4> <var:h> := <var:h> + <var:S3> <var:h> := <var:h> + <var:S2> <var:h> := <var:h> + <var:S1> <var:h> := <var:h> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:R> = <var:V> $ before running the series of commands , it holds that we see $ <var:h> = <nat:3> \cdot <var:V> ^ <nat:4> + <nat:7> \cdot <var:V> ^ <nat:3> + <nat:9> \cdot <var:V> ^ <nat:2> + <nat:9> \cdot <var:V> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare logic gives us : \begin{eqnarray} \{ <var:R> = <var:V> \} \\ <var:S1> := <var:R> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <var:V> \} \\ <var:S2> := <var:S1> * <var:R> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <var:V> \land <var:S2> = <var:V> ^ <nat:2> \} \\ <var:S3> := <var:S2> * <var:R> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <var:V> \land <var:S2> = <var:V> ^ <nat:2> \land <var:S3> = <var:V> ^ <nat:3> \} \\ <var:S4> := <var:S3> * <var:R> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <var:V> \land <var:S2> = <var:V> ^ <nat:2> \land <var:S3> = <var:V> ^ <nat:3> \land <var:S4> = <var:V> ^ <nat:4> \} \\ <var:S0> := <nat:4> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <var:V> \land <var:S2> = <var:V> ^ <nat:2> \land <var:S3> = <var:V> ^ <nat:3> \land <var:S4> = <var:V> ^ <nat:4> \land <var:S0> = <nat:4> \} \\ <var:S1> := <var:S1> * <nat:9> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <nat:9> \times <var:V> \land <var:S2> = <var:V> ^ <nat:2> \land <var:S3> = <var:V> ^ <nat:3> \land <var:S4> = <var:V> ^ <nat:4> \land <var:S0> = <nat:4> \} \\ <var:S2> := <var:S2> * <nat:9> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <nat:9> \times <var:V> \land <var:S2> = <nat:9> \times <var:V> ^ <nat:2> \land <var:S3> = <var:V> ^ <nat:3> \land <var:S4> = <var:V> ^ <nat:4> \land <var:S0> = <nat:4> \} \\ <var:S3> := <var:S3> * <nat:7> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <nat:9> \times <var:V> \land <var:S2> = <nat:9> \times <var:V> ^ <nat:2> \land <var:S3> = <nat:7> \times <var:V> ^ <nat:3> \land <var:S4> = <var:V> ^ <nat:4> \land <var:S0> = <nat:4> \} \\ <var:S4> := <var:S4> * <nat:3> ; \\ \{ <var:R> = <var:V> \land <var:S1> = <nat:9> \times <var:V> \land <var:S2> = <nat:9> \times <var:V> ^ <nat:2> \land <var:S3> = <nat:7> \times <var:V> ^ <nat:3> \land <var:S4> = <nat:3> \times <var:V> ^ <nat:4> \land <var:S0> = <nat:4> \} \\ <var:h> := <var:S4> \\ \{ <var:R> = <var:V> \land <var:S1> = <nat:9> \times <var:V> \land <var:S2> = <nat:9> \times <var:V> ^ <nat:2> \land <var:S3> = <nat:7> \times <var:V> ^ <nat:3> \land <var:S0> = <nat:4> \land <var:h> = <nat:3> \times <var:V> ^ <nat:4> \} \\ <var:h> := <var:h> + <var:S3> \\ \{ <var:R> = <var:V> \land <var:S1> = <nat:9> \times <var:V> \land <var:S2> = <nat:9> \times <var:V> ^ <nat:2> \land <var:S0> = <nat:4> \land <var:h> = <nat:3> \times <var:V> ^ <nat:4> + <nat:7> \times <var:V> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:S2> \\ \{ <var:R> = <var:V> \land <var:S1> = <nat:9> \times <var:V> \land <var:S0> = <nat:4> \land <var:h> = <nat:3> \times <var:V> ^ <nat:4> + <nat:7> \times <var:V> ^ <nat:3> + <nat:9> \times <var:V> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:S1> \\ \{ <var:R> = <var:V> \land <var:S0> = <nat:4> \land <var:h> = <nat:3> \times <var:V> ^ <nat:4> + <nat:7> \times <var:V> ^ <nat:3> + <nat:9> \times <var:V> ^ <nat:2> + <nat:9> \times <var:V> \} \end{eqnarray} Allowing the evaluation of this segment of code gives : \begin{eqnarray} <var:h> := <var:h> + <var:S0> \\ \{ <var:R> = <var:V> \land <var:h> = <nat:3> \times <var:V> ^ <nat:4> + <nat:7> \times <var:V> ^ <nat:3> + <nat:9> \times <var:V> ^ <nat:2> + <nat:9> \times <var:V> + <nat:4> \} \end{eqnarray} As a result , our list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <def:poly> := <var:S1> := <var:R> ; <var:S2> := <var:S1> * <var:R> ; <var:S3> := <var:S2> * <var:R> ; <var:S4> := <var:S3> * <var:R> ; <var:S0> := <nat:4> ; <var:S1> := <var:S1> * <nat:9> ; <var:S2> := <var:S2> * <nat:9> ; <var:S3> := <var:S3> * <nat:7> ; <var:S4> := <var:S4> * <nat:3> ; <var:h> := <var:S4> <var:h> := <var:h> + <var:S3> <var:h> := <var:h> + <var:S2> <var:h> := <var:h> + <var:S1> <var:h> := <var:h> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:R> = <var:V> }} <def:poly> {{ <var:h> = <nat:3> * <var:V> ^ <nat:4> + <nat:7> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:9> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <var:V> /\ <var:S2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <var:V> /\ <var:S2> = <var:V> ^ <nat:2> /\ <var:S3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <var:V> /\ <var:S2> = <var:V> ^ <nat:2> /\ <var:S3> = <var:V> ^ <nat:3> /\ <var:S4> = <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <var:V> /\ <var:S2> = <var:V> ^ <nat:2> /\ <var:S3> = <var:V> ^ <nat:3> /\ <var:S4> = <var:V> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <nat:9> * <var:V> /\ <var:S2> = <var:V> ^ <nat:2> /\ <var:S3> = <var:V> ^ <nat:3> /\ <var:S4> = <var:V> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <nat:9> * <var:V> /\ <var:S2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:S3> = <var:V> ^ <nat:3> /\ <var:S4> = <var:V> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <nat:9> * <var:V> /\ <var:S2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:S3> = <nat:7> * <var:V> ^ <nat:3> /\ <var:S4> = <var:V> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <nat:9> * <var:V> /\ <var:S2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:S3> = <nat:7> * <var:V> ^ <nat:3> /\ <var:S4> = <nat:3> * <var:V> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <nat:9> * <var:V> /\ <var:S2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:S3> = <nat:7> * <var:V> ^ <nat:3> /\ <var:S0> = <nat:4> /\ <var:h> = <nat:3> * <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <nat:9> * <var:V> /\ <var:S2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:S0> = <nat:4> /\ <var:h> = <nat:3> * <var:V> ^ <nat:4> + <nat:7> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S1> = <nat:9> * <var:V> /\ <var:S0> = <nat:4> /\ <var:h> = <nat:3> * <var:V> ^ <nat:4> + <nat:7> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:S0> = <nat:4> /\ <var:h> = <nat:3> * <var:V> ^ <nat:4> + <nat:7> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:V> /\ <var:h> = <nat:3> * <var:V> ^ <nat:4> + <nat:7> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:9> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 