\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:6> ; <var:O> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:A> = <var:w> $ prior to the evaluation of the list of commands it holds that we see $ <var:O> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:w> \} \\ <var:e0> := <nat:6> ; \\ \{ <var:A> = <var:w> \land <var:e0> = <nat:6> \} \\ <var:O> := <var:e0> \\ \{ <var:A> = <var:w> \land <var:O> = <nat:6> \} \end{eqnarray} Applying standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:6> ; <var:O> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:A> = <var:w> }} <def:poly> {{ <var:O> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:w> /\ <var:O> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 