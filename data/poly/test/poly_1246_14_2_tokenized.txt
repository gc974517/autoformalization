\begin{document} \begin{theorem} Define the following code in \emph{Imp} as \begin{verbatim} <var:n> := <nat:3> ; <var:n> := <nat:1> + <var:n> * <var:A> ; <var:n> := <nat:1> + <var:n> * <var:A> ; <var:n> := <nat:4> + <var:n> * <var:A> ; <var:n> := <nat:2> + <var:n> * <var:A> ; <var:n> := <nat:3> + <var:n> * <var:A> ; <var:n> := <nat:2> + <var:n> * <var:A> ; <var:n> := <nat:3> + <var:n> * <var:A> ; <var:n> := <nat:4> + <var:n> * <var:A> ; <var:n> := <nat:3> + <var:n> * <var:A> ; <var:n> := <nat:1> + <var:n> * <var:A> ; <var:n> := <nat:2> + <var:n> * <var:A> ; <var:n> := <var:n> * <var:A> ; <var:n> := <nat:1> + <var:n> * <var:A> \end{verbatim} Assume it to hold that $ <var:A> = <var:M> $ ahead of executing the program , it must be that we see $ <var:n> = <nat:3> \cdot <var:M> ^ <nat:13> + <nat:1> \cdot <var:M> ^ <nat:12> + <nat:1> \cdot <var:M> ^ <nat:11> + <nat:4> \cdot <var:M> ^ <nat:10> + <nat:2> \cdot <var:M> ^ <nat:9> + <nat:3> \cdot <var:M> ^ <nat:8> + <nat:2> \cdot <var:M> ^ <nat:7> + <nat:3> \cdot <var:M> ^ <nat:6> + <nat:4> \cdot <var:M> ^ <nat:5> + <nat:3> \cdot <var:M> ^ <nat:4> + <nat:1> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the list of commands is given through typical Hoare techniques . Stepping forward , the line \verb | <var:n> := <nat:3> ; | . This code forwards the condition $ \{ <var:A> = <var:M> \} $ as the postcondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \} $ . This is deduced by the assignment law given by standard Hoare reasoning . Keeping momentum , we see the environment update line yielding $ <nat:1> + <var:n> * <var:A> $ as $ <var:n>$ . This code advances the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \} $ to the postcondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> + <nat:1> \} $ . This is given through the assignment law in Hoare logic . Jumping to the following bit of code found in our series of instructions , we see the binding line \verb | <var:n> := <nat:1> + <var:n> * <var:A> ; | . This takes the precondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> + <nat:1> \} $ into the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:1> \} $ . Stepping forward , we see the variable binding line \verb | <var:n> := <nat:4> + <var:n> * <var:A> ; | . This line forwards the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:1> \} $ into the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:4> \} $ . Advancing to the upcoming statement contained in our series of commands , we have the assignment statement assigning $ <nat:2> + <var:n> * <var:A> $ as $ <var:n>$ . This forwards the precondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:4> \} $ toward $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:4> + <nat:1> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:2> \} $ . This is known to be sound through the assignment inference rule found in usual Hoare logic . Stepping forward , we see the variable binding line defining $ <nat:3> + <var:n> * <var:A> $ toward $ <var:n>$ . This code advances the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:4> + <nat:1> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:2> \} $ to the postcondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:5> + <nat:1> \cdot <var:M> ^ <nat:4> + <nat:1> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:3> \} $ . Moving forward , we see the variable assignmet statement \verb | <var:n> := <nat:2> + <var:n> * <var:A> ; | . This code advances the precondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:5> + <nat:1> \cdot <var:M> ^ <nat:4> + <nat:1> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:3> \} $ toward $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:6> + <nat:1> \cdot <var:M> ^ <nat:5> + <nat:1> \cdot <var:M> ^ <nat:4> + <nat:4> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:3> \cdot <var:M> + <nat:2> \} $ . Advancing , we see the variable update code \verb | <var:n> := <nat:3> + <var:n> * <var:A> ; | . This statement takes $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:6> + <nat:1> \cdot <var:M> ^ <nat:5> + <nat:1> \cdot <var:M> ^ <nat:4> + <nat:4> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:3> \cdot <var:M> + <nat:2> \} $ as the postcondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:7> + <nat:1> \cdot <var:M> ^ <nat:6> + <nat:1> \cdot <var:M> ^ <nat:5> + <nat:4> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:3> \} $ . Immediately after , the environment update line \verb | <var:n> := <nat:4> + <var:n> * <var:A> ; | . This line takes $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:7> + <nat:1> \cdot <var:M> ^ <nat:6> + <nat:1> \cdot <var:M> ^ <nat:5> + <nat:4> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:3> \} $ into the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:8> + <nat:1> \cdot <var:M> ^ <nat:7> + <nat:1> \cdot <var:M> ^ <nat:6> + <nat:4> \cdot <var:M> ^ <nat:5> + <nat:2> \cdot <var:M> ^ <nat:4> + <nat:3> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:3> \cdot <var:M> + <nat:4> \} $ . Advancing on , we see the environment update command yielding $ <nat:3> + <var:n> * <var:A> $ toward $ <var:n>$ . This statement takes the precondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:8> + <nat:1> \cdot <var:M> ^ <nat:7> + <nat:1> \cdot <var:M> ^ <nat:6> + <nat:4> \cdot <var:M> ^ <nat:5> + <nat:2> \cdot <var:M> ^ <nat:4> + <nat:3> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:3> \cdot <var:M> + <nat:4> \} $ to $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:9> + <nat:1> \cdot <var:M> ^ <nat:8> + <nat:1> \cdot <var:M> ^ <nat:7> + <nat:4> \cdot <var:M> ^ <nat:6> + <nat:2> \cdot <var:M> ^ <nat:5> + <nat:3> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:3> \} $ . Immediately following , we see the variable binding line \verb | <var:n> := <nat:1> + <var:n> * <var:A> ; | . This line transfers $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:9> + <nat:1> \cdot <var:M> ^ <nat:8> + <nat:1> \cdot <var:M> ^ <nat:7> + <nat:4> \cdot <var:M> ^ <nat:6> + <nat:2> \cdot <var:M> ^ <nat:5> + <nat:3> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:3> \} $ toward $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:10> + <nat:1> \cdot <var:M> ^ <nat:9> + <nat:1> \cdot <var:M> ^ <nat:8> + <nat:4> \cdot <var:M> ^ <nat:7> + <nat:2> \cdot <var:M> ^ <nat:6> + <nat:3> \cdot <var:M> ^ <nat:5> + <nat:2> \cdot <var:M> ^ <nat:4> + <nat:3> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:3> \cdot <var:M> + <nat:1> \} $ . Shifting focus toward the proceeding bit of code contained in the code , we have the code giving $ <nat:2> + <var:n> * <var:A> $ as $ <var:n>$ . This forwards the precondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:10> + <nat:1> \cdot <var:M> ^ <nat:9> + <nat:1> \cdot <var:M> ^ <nat:8> + <nat:4> \cdot <var:M> ^ <nat:7> + <nat:2> \cdot <var:M> ^ <nat:6> + <nat:3> \cdot <var:M> ^ <nat:5> + <nat:2> \cdot <var:M> ^ <nat:4> + <nat:3> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:3> \cdot <var:M> + <nat:1> \} $ to $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:11> + <nat:1> \cdot <var:M> ^ <nat:10> + <nat:1> \cdot <var:M> ^ <nat:9> + <nat:4> \cdot <var:M> ^ <nat:8> + <nat:2> \cdot <var:M> ^ <nat:7> + <nat:3> \cdot <var:M> ^ <nat:6> + <nat:2> \cdot <var:M> ^ <nat:5> + <nat:3> \cdot <var:M> ^ <nat:4> + <nat:4> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:2> \} $ . This is ensured using the assignment rule of usual Hoare techniques . Taking a look at the following statement found in the series of instructions , we have the variable binding line letting $ <var:n> * <var:A> $ toward $ <var:n>$ . This command forwards the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:11> + <nat:1> \cdot <var:M> ^ <nat:10> + <nat:1> \cdot <var:M> ^ <nat:9> + <nat:4> \cdot <var:M> ^ <nat:8> + <nat:2> \cdot <var:M> ^ <nat:7> + <nat:3> \cdot <var:M> ^ <nat:6> + <nat:2> \cdot <var:M> ^ <nat:5> + <nat:3> \cdot <var:M> ^ <nat:4> + <nat:4> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:2> \} $ toward the postcondition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:12> + <nat:1> \cdot <var:M> ^ <nat:11> + <nat:1> \cdot <var:M> ^ <nat:10> + <nat:4> \cdot <var:M> ^ <nat:9> + <nat:2> \cdot <var:M> ^ <nat:8> + <nat:3> \cdot <var:M> ^ <nat:7> + <nat:2> \cdot <var:M> ^ <nat:6> + <nat:3> \cdot <var:M> ^ <nat:5> + <nat:4> \cdot <var:M> ^ <nat:4> + <nat:3> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + \} $ . Shifting focus toward the proceeding command seen in our code segment , the binding command letting $ <nat:1> + <var:n> * <var:A$ into $ <var:n>$ . This command transfers the condition $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:12> + <nat:1> \cdot <var:M> ^ <nat:11> + <nat:1> \cdot <var:M> ^ <nat:10> + <nat:4> \cdot <var:M> ^ <nat:9> + <nat:2> \cdot <var:M> ^ <nat:8> + <nat:3> \cdot <var:M> ^ <nat:7> + <nat:2> \cdot <var:M> ^ <nat:6> + <nat:3> \cdot <var:M> ^ <nat:5> + <nat:4> \cdot <var:M> ^ <nat:4> + <nat:3> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + \} $ toward $ \{ <var:A> = <var:M> \land <var:n> = <nat:3> \cdot <var:M> ^ <nat:13> + <nat:1> \cdot <var:M> ^ <nat:12> + <nat:1> \cdot <var:M> ^ <nat:11> + <nat:4> \cdot <var:M> ^ <nat:10> + <nat:2> \cdot <var:M> ^ <nat:9> + <nat:3> \cdot <var:M> ^ <nat:8> + <nat:2> \cdot <var:M> ^ <nat:7> + <nat:3> \cdot <var:M> ^ <nat:6> + <nat:4> \cdot <var:M> ^ <nat:5> + <nat:3> \cdot <var:M> ^ <nat:4> + <nat:1> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:A> = <var:M> }} <var:n> := <nat:3> ; <var:n> := <nat:1> + <var:n> * <var:A> ; <var:n> := <nat:1> + <var:n> * <var:A> ; <var:n> := <nat:4> + <var:n> * <var:A> ; <var:n> := <nat:2> + <var:n> * <var:A> ; <var:n> := <nat:3> + <var:n> * <var:A> ; <var:n> := <nat:2> + <var:n> * <var:A> ; <var:n> := <nat:3> + <var:n> * <var:A> ; <var:n> := <nat:4> + <var:n> * <var:A> ; <var:n> := <nat:3> + <var:n> * <var:A> ; <var:n> := <nat:1> + <var:n> * <var:A> ; <var:n> := <nat:2> + <var:n> * <var:A> ; <var:n> := <var:n> * <var:A> ; <var:n> := <nat:1> + <var:n> * <var:A> {{ <var:n> = <nat:3> * <var:M> ^ <nat:13> + <nat:1> * <var:M> ^ <nat:12> + <nat:1> * <var:M> ^ <nat:11> + <nat:4> * <var:M> ^ <nat:10> + <nat:2> * <var:M> ^ <nat:9> + <nat:3> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:6> + <nat:1> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:7> + <nat:1> * <var:M> ^ <nat:6> + <nat:1> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:1> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:9> + <nat:1> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:10> + <nat:1> * <var:M> ^ <nat:9> + <nat:1> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:11> + <nat:1> * <var:M> ^ <nat:10> + <nat:1> * <var:M> ^ <nat:9> + <nat:4> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:12> + <nat:1> * <var:M> ^ <nat:11> + <nat:1> * <var:M> ^ <nat:10> + <nat:4> * <var:M> ^ <nat:9> + <nat:2> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:n> = <nat:3> * <var:M> ^ <nat:13> + <nat:1> * <var:M> ^ <nat:12> + <nat:1> * <var:M> ^ <nat:11> + <nat:4> * <var:M> ^ <nat:10> + <nat:2> * <var:M> ^ <nat:9> + <nat:3> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 