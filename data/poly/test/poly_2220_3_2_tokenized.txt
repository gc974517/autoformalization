\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:Q> ; <var:t> := <nat:3> + <var:t> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:Q> = <var:m> $ ahead of the evaluation of the segment of code then we have $ <var:t> = <nat:2> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands can be shown with usual Hoare logic . Considering the following step found in the segment of code , we see \begin{eqnarray} \{ <var:Q> = <var:m> \} \, <var:t> := <nat:2> \, \{ <var:Q> = <var:m> \land <var:t> = <nat:2> \} \end{eqnarray} This is sound by the variable assignmet inference rule from standard Hoare techniques . Moving forward , we have \begin{eqnarray} \{ <var:Q> = <var:m> \} \, <var:t> := <nat:2> \, \{ <var:Q> = <var:m> \land <var:t> = <nat:2> \} \end{eqnarray} This is guaranteed through the variable update rule of standard Hoare reasoning . Considering the subsequent piece of code found in the series of instructions , \begin{eqnarray} \{ <var:Q> = <var:m> \} \, <var:t> := <nat:2> \, \{ <var:Q> = <var:m> \land <var:t> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:Q> ; <var:t> := <nat:3> + <var:t> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Q> = <var:m> }} <def:poly> {{ <var:t> = <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:t> = <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:t> = <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 