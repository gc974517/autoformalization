\begin{document} \begin{theorem} Let the following program in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:A> ; <var:u2> := <var:u1> * <var:A> ; <var:u3> := <var:u2> * <var:A> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:1> ; <var:u3> := <var:u3> * <nat:1> ; <var:a> := <var:u3> <var:a> := <var:a> + <var:u1> <var:a> := <var:a> + <var:u0> \end{verbatim} Allowing that we have $ <var:A> = <var:n> $ prior to interpreting the set of commands it follows that $ <var:a> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> + <nat:1> $ after code segment executes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning produces : \begin{eqnarray} \{ <var:A> = <var:n> \} \\ <var:u1> := <var:A> ; \\ \{ <var:A> = <var:n> \land <var:u1> = <var:n> \} \\ <var:u2> := <var:u1> * <var:A> ; \\ \{ <var:A> = <var:n> \land <var:u1> = <var:n> \land <var:u2> = <var:n> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:A> ; \\ \{ <var:A> = <var:n> \land <var:u1> = <var:n> \land <var:u2> = <var:n> ^ <nat:2> \land <var:u3> = <var:n> ^ <nat:3> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:A> = <var:n> \land <var:u1> = <var:n> \land <var:u2> = <var:n> ^ <nat:2> \land <var:u3> = <var:n> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:u1> := <var:u1> * <nat:1> ; \\ \{ <var:A> = <var:n> \land <var:u1> = <nat:1> \times <var:n> \land <var:u2> = <var:n> ^ <nat:2> \land <var:u3> = <var:n> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:u3> := <var:u3> * <nat:1> ; \\ \{ <var:A> = <var:n> \land <var:u1> = <nat:1> \times <var:n> \land <var:u2> = <var:n> ^ <nat:2> \land <var:u3> = <nat:1> \times <var:n> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:a> := <var:u3> \\ \{ <var:A> = <var:n> \land <var:u1> = <nat:1> \times <var:n> \land <var:u2> = <var:n> ^ <nat:2> \land <var:u0> = <nat:1> \land <var:a> = <nat:1> \times <var:n> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:u1> \\ \{ <var:A> = <var:n> \land <var:u0> = <nat:1> \land <var:a> = <nat:1> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> \} \\ <var:a> := <var:a> + <var:u0> \\ \{ <var:A> = <var:n> \land <var:a> = <nat:1> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> + <nat:1> \} \end{eqnarray} Thus , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:A> = <var:n> }} <var:u1> := <var:A> ; <var:u2> := <var:u1> * <var:A> ; <var:u3> := <var:u2> * <var:A> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:1> ; <var:u3> := <var:u3> * <nat:1> ; <var:a> := <var:u3> <var:a> := <var:a> + <var:u1> <var:a> := <var:a> + <var:u0> {{ <var:a> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:u1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:u1> = <var:n> /\ <var:u2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:u1> = <var:n> /\ <var:u2> = <var:n> ^ <nat:2> /\ <var:u3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:u1> = <var:n> /\ <var:u2> = <var:n> ^ <nat:2> /\ <var:u3> = <var:n> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:u1> = <nat:1> * <var:n> /\ <var:u2> = <var:n> ^ <nat:2> /\ <var:u3> = <var:n> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:u1> = <nat:1> * <var:n> /\ <var:u2> = <var:n> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:n> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:u1> = <nat:1> * <var:n> /\ <var:u2> = <var:n> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:a> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:u0> = <nat:1> /\ <var:a> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:a> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 