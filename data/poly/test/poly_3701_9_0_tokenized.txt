\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:1> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:f> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:f> ; <var:r2> := <var:r2> * <var:f> ; <var:N> := <var:r2> ; <var:N> := <var:N> + <var:r1> ; <var:N> := <var:N> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:f> = <var:T> $ before interpreting the series of commands , it holds that we see $ <var:N> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> $ once series of instructions finishes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be accomplished with typical Hoare reasoning . Observing the upcoming commands contained in our code , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:T> \} & <var:r0> := <nat:1> & \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \} \\ \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \} & <var:r1> := <nat:2> & \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \} \\ \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \} & <var:r1> := <var:r1> * <var:f> & \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \} \\ \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \} & <var:r2> := <nat:3> & \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \land <var:r2> = <nat:3> \} \\ \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \land <var:r2> = <nat:3> \} & <var:r2> := <var:r2> * <var:f> & \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \land <var:r2> = <nat:3> \cdot <var:T> \} \\ \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \land <var:r2> = <nat:3> \cdot <var:T> \} & <var:r2> := <var:r2> * <var:f> & \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \land <var:r2> = <nat:3> \cdot <var:T> ^ <nat:2> \} \\ \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \land <var:r2> = <nat:3> \cdot <var:T> ^ <nat:2> \} & <var:N> := <var:r2> & \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \land <var:N> = <nat:3> \cdot <var:T> ^ <nat:2> \} \\ \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:r1> = <nat:2> \cdot <var:T> \land <var:N> = <nat:3> \cdot <var:T> ^ <nat:2> \} & <var:N> := <var:N> + <var:r1> & \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> \} \\ \{ <var:f> = <var:T> \land <var:r0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> \} & <var:N> := <var:N> + <var:r0& \{ <var:f> = <var:T> \land <var:N> = <nat:3> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:1> \} \end{tabular} This is guaranteed through the binding rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r0> := <nat:1> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:f> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:f> ; <var:r2> := <var:r2> * <var:f> ; <var:N> := <var:r2> ; <var:N> := <var:N> + <var:r1> ; <var:N> := <var:N> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:f> = <var:T> }} <def:poly> {{ <var:N> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:2> * <var:T> /\ <var:r2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:2> * <var:T> /\ <var:r2> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:2> * <var:T> /\ <var:r2> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:2> * <var:T> /\ <var:N> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:r0> = <nat:1> /\ <var:N> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:N> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 