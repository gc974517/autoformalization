\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:6> ; <var:t> := <var:I0> \end{verbatim} Assume it to hold that $ <var:o> = <var:U> $ prior to interpreting our code it follows that we see $ <var:t> = <nat:6> $ after series of commands has executed . \end{theorem} \begin{proof} Arguing the correctness of this code is given through Hoare logic . Considering the proceeding piece of code found in our list of commands , we see the variable assignmet line \verb | <var:I0> := <nat:6> ; | . This takes the condition $ \{ <var:o> = <var:U> \} $ toward $ \{ <var:o> = <var:U> \land <var:I0> = <nat:6> \} $ . This is known to be sound with the assignment rule obtained from standard Hoare logic . Taking another step toward the following line of code seen in the segment of code , we see the assignment statement assigning $ <var:I0$ into $ <var:t>$ . This takes $ \{ <var:o> = <var:U> \land <var:I0> = <nat:6> \} $ as the postcondition $ \{ <var:o> = <var:U> \land <var:t> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:o> = <var:U> }} <var:I0> := <nat:6> ; <var:t> := <var:I0> {{ <var:t> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:t> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 