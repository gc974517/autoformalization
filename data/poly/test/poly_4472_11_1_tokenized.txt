\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:N1> := <var:d> ; <var:N2> := <var:N1> * <var:d> ; <var:N3> := <var:N2> * <var:d> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:8> ; <var:N2> := <var:N2> * <nat:5> ; <var:N3> := <var:N3> * <nat:8> ; <var:M> := <var:N3> <var:M> := <var:M> + <var:N2> <var:M> := <var:M> + <var:N1> <var:M> := <var:M> + <var:N0> \end{verbatim} Allow it to hold that $ <var:d> = <var:r> $ with some natural coefficients $ <var:r> $ prior to interpreting our program , it follows that we see $ <var:M> = <nat:8> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:8> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:d> = <var:r> \} \\ <var:N1> := <var:d> ; \\ \{ <var:d> = <var:r> \land <var:N1> = <var:r> \} \\ <var:N2> := <var:N1> * <var:d> ; \\ \{ <var:d> = <var:r> \land <var:N1> = <var:r> \land <var:N2> = <var:r> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:d> ; \\ \{ <var:d> = <var:r> \land <var:N1> = <var:r> \land <var:N2> = <var:r> ^ <nat:2> \land <var:N3> = <var:r> ^ <nat:3> \} \\ <var:N0> := <nat:8> ; \\ \{ <var:d> = <var:r> \land <var:N1> = <var:r> \land <var:N2> = <var:r> ^ <nat:2> \land <var:N3> = <var:r> ^ <nat:3> \land <var:N0> = <nat:8> \} \\ <var:N1> := <var:N1> * <nat:8> ; \\ \{ <var:d> = <var:r> \land <var:N1> = <nat:8> * <var:r> \land <var:N2> = <var:r> ^ <nat:2> \land <var:N3> = <var:r> ^ <nat:3> \land <var:N0> = <nat:8> \} \\ <var:N2> := <var:N2> * <nat:5> ; \\ \{ <var:d> = <var:r> \land <var:N1> = <nat:8> * <var:r> \land <var:N2> = <nat:5> * <var:r> ^ <nat:2> \land <var:N3> = <var:r> ^ <nat:3> \land <var:N0> = <nat:8> \} \\ <var:N3> := <var:N3> * <nat:8> ; \\ \{ <var:d> = <var:r> \land <var:N1> = <nat:8> * <var:r> \land <var:N2> = <nat:5> * <var:r> ^ <nat:2> \land <var:N3> = <nat:8> * <var:r> ^ <nat:3> \land <var:N0> = <nat:8> \} \\ <var:M> := <var:N3> \\ \{ <var:d> = <var:r> \land <var:N1> = <nat:8> * <var:r> \land <var:N2> = <nat:5> * <var:r> ^ <nat:2> \land <var:N0> = <nat:8> \land <var:M> = <nat:8> * <var:r> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:N2> \\ \{ <var:d> = <var:r> \land <var:N1> = <nat:8> * <var:r> \land <var:N0> = <nat:8> \land <var:M> = <nat:8> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:N1> \\ \{ <var:d> = <var:r> \land <var:N0> = <nat:8> \land <var:M> = <nat:8> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> \} \\ <var:M> := <var:M> + <var:N0> \\ \{ <var:d> = <var:r> \land <var:M> = <nat:8> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:8> \} \end{eqnarray} As a result , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:d> = <var:r> }} <var:N1> := <var:d> ; <var:N2> := <var:N1> * <var:d> ; <var:N3> := <var:N2> * <var:d> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:8> ; <var:N2> := <var:N2> * <nat:5> ; <var:N3> := <var:N3> * <nat:8> ; <var:M> := <var:N3> <var:M> := <var:M> + <var:N2> <var:M> := <var:M> + <var:N1> <var:M> := <var:M> + <var:N0> {{ <var:M> = <nat:8> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <var:r> /\ <var:N2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <var:r> /\ <var:N2> = <var:r> ^ <nat:2> /\ <var:N3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <var:r> /\ <var:N2> = <var:r> ^ <nat:2> /\ <var:N3> = <var:r> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <nat:8> * <var:r> /\ <var:N2> = <var:r> ^ <nat:2> /\ <var:N3> = <var:r> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <nat:8> * <var:r> /\ <var:N2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:N3> = <var:r> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <nat:8> * <var:r> /\ <var:N2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:r> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <nat:8> * <var:r> /\ <var:N2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:N0> = <nat:8> /\ <var:M> = <nat:8> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N1> = <nat:8> * <var:r> /\ <var:N0> = <nat:8> /\ <var:M> = <nat:8> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:N0> = <nat:8> /\ <var:M> = <nat:8> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:M> = <nat:8> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 