\begin{document} \begin{theorem} Let the following set of commands as follows \begin{verbatim} <var:k1> := <var:Y> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:5> ; <var:a> := <var:k1> <var:a> := <var:a> + <var:k0> \end{verbatim} Allowing that we have $ <var:Y> = <var:H> $ ahead of evaluating our set of instructions it must be that we have $ <var:a> = <nat:5> * <var:H> + <nat:2> $ when series of instructions has finished . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is accomplished with typical Hoare reasoning . Immediately after , the assignment statement \verb | <var:k1> := <var:Y> ; | . This moves the condition $ \{ <var:Y> = <var:H> \} $ into the postcondition $ \{ <var:Y> = <var:H> \land <var:k1> = <var:H> \} $ . Going to the next step , the variable update code giving $ <nat:2> $ to $ <var:k0>$ . This transfers the condition $ \{ <var:Y> = <var:H> \land <var:k1> = <var:H> \} $ toward $ \{ <var:Y> = <var:H> \land <var:k1> = <var:H> \land <var:k0> = <nat:2> \} $ . This is sound by the assignment law of standard Hoare logic . Advancing to the following line of code seen in our set of instructions , the environment update command assigning $ <var:k1> * <nat:5> $ toward $ <var:k1>$ . This line transfers the precondition $ \{ <var:Y> = <var:H> \land <var:k1> = <var:H> \land <var:k0> = <nat:2> \} $ as the condition $ \{ <var:Y> = <var:H> \land <var:k1> = <nat:5> \times <var:H> \land <var:k0> = <nat:2> \} $ . This is deduced with the assignment law found in typical Hoare logic . Observing the next statement in our list of commands , we see the variable binding command \verb | <var:a> := <var:k1> | . This statement advances the precondition $ \{ <var:Y> = <var:H> \land <var:k1> = <nat:5> \times <var:H> \land <var:k0> = <nat:2> \} $ as the postcondition $ \{ <var:Y> = <var:H> \land <var:k0> = <nat:2> \land <var:a> = <nat:5> \times <var:H> \} $ . Advancing to the next step , we have the environment update line \verb | <var:a> := <var:a> + <var:k0> | . This command advances $ \{ <var:Y> = <var:H> \land <var:k0> = <nat:2> \land <var:a> = <nat:5> \times <var:H> \} $ to the postcondition $ \{ <var:Y> = <var:H> \land <var:a> = <nat:5> \times <var:H> + <nat:2> \} $ . This is deduced through the assignment rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <var:k1> := <var:Y> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:5> ; <var:a> := <var:k1> <var:a> := <var:a> + <var:k0> {{ <var:a> = <nat:5> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:k1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:k1> = <var:H> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:k1> = <nat:5> * <var:H> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:k0> = <nat:2> /\ <var:a> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:a> = <nat:5> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 