\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:5> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:U> ; <var:R> := <var:a1> ; <var:R> := <var:R> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:U> = <var:X> $ before evaluating our list of commands it holds that $ <var:R> = <nat:5> * <var:X> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the set of commands can be given by standard Hoare logic . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:X> \} & <var:a0> := <nat:5> & \{ <var:U> = <var:X> \land <var:a0> = <nat:5> \} \\ \{ <var:U> = <var:X> \land <var:a0> = <nat:5> \} & <var:a1> := <nat:5> & \{ <var:U> = <var:X> \land <var:a0> = <nat:5> \land <var:a1> = <nat:5> \} \\ \{ <var:U> = <var:X> \land <var:a0> = <nat:5> \land <var:a1> = <nat:5> \} & <var:a1> := <var:a1> * <var:U> & \{ <var:U> = <var:X> \land <var:a0> = <nat:5> \land <var:a1> = <nat:5> \times <var:X> \} \\ \{ <var:U> = <var:X> \land <var:a0> = <nat:5> \land <var:a1> = <nat:5> \times <var:X> \} & <var:R> := <var:a1> & \{ <var:U> = <var:X> \land <var:a0> = <nat:5> \land <var:R> = <nat:5> \times <var:X> \} \\ \{ <var:U> = <var:X> \land <var:a0> = <nat:5> \land <var:R> = <nat:5> \times <var:X> \} & <var:R> := <var:R> + <var:a0& \{ <var:U> = <var:X> \land <var:R> = <nat:5> \times <var:X> + <nat:5> \} \end{tabular} This is known to be sound with the variable assignmet rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:5> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:U> ; <var:R> := <var:a1> ; <var:R> := <var:R> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:U> = <var:X> }} <def:poly> {{ <var:R> = <nat:5> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:a0> = <nat:5> /\ <var:R> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:R> = <nat:5> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 