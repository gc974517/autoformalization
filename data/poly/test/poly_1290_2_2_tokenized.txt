\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F> := <nat:3> ; <var:F> := <nat:1> + <var:F> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Assuming that $ <var:Y> = <var:q> $ ahead of running the set of instructions , then we have $ <var:F> = <nat:3> * <var:q> + <nat:1> $ once code has finished executing . \end{theorem} \begin{proof} The flow of logic for this series of commands is accomplished through usual Hoare reasoning . Taking another step toward the proceeding line found in our code segment , \begin{eqnarray} \{ <var:Y> = <var:q> \} \, <var:F> := <nat:3> \, \{ <var:Y> = <var:q> \land <var:F> = <nat:3> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:Y> = <var:q> \} \, <var:F> := <nat:3> \, \{ <var:Y> = <var:q> \land <var:F> = <nat:3> \} \end{eqnarray} This is ensured using the variable binding scheme defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:3> ; <var:F> := <nat:1> + <var:F> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Y> = <var:q> }} <def:poly> {{ <var:F> = <nat:3> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:F> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:q> /\ <var:F> = <nat:3> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 