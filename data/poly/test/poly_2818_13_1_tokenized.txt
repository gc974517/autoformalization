\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n1> := <var:G> ; <var:n2> := <var:n1> * <var:G> ; <var:n3> := <var:n2> * <var:G> ; <var:n4> := <var:n3> * <var:G> ; <var:n5> := <var:n4> * <var:G> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:1> ; <var:n3> := <var:n3> * <nat:2> ; <var:n5> := <var:n5> * <nat:2> ; <var:b> := <var:n5> <var:b> := <var:b> + <var:n3> <var:b> := <var:b> + <var:n1> <var:b> := <var:b> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Allow ( taking integers $ <var:X> $ ) it to hold that $ <var:G> = <var:X> $ before evaluating this series of commands it follows that we see $ <var:b> = <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> + <nat:4> $ once list of instructions is done executing . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be demonstrated through this decorated set of instructions . \begin{eqnarray} \{ <var:G> = <var:X> \} \\ <var:n1> := <var:G> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <var:X> \} \\ <var:n2> := <var:n1> * <var:G> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <var:X> \land <var:n2> = <var:X> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:G> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n3> = <var:X> ^ <nat:3> \} \\ <var:n4> := <var:n3> * <var:G> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n3> = <var:X> ^ <nat:3> \land <var:n4> = <var:X> ^ <nat:4> \} \\ <var:n5> := <var:n4> * <var:G> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n3> = <var:X> ^ <nat:3> \land <var:n4> = <var:X> ^ <nat:4> \land <var:n5> = <var:X> ^ <nat:5> \} \\ <var:n0> := <nat:4> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n3> = <var:X> ^ <nat:3> \land <var:n4> = <var:X> ^ <nat:4> \land <var:n5> = <var:X> ^ <nat:5> \land <var:n0> = <nat:4> \} \\ <var:n1> := <var:n1> * <nat:1> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n3> = <var:X> ^ <nat:3> \land <var:n4> = <var:X> ^ <nat:4> \land <var:n5> = <var:X> ^ <nat:5> \land <var:n0> = <nat:4> \} \\ <var:n3> := <var:n3> * <nat:2> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n3> = <nat:2> * <var:X> ^ <nat:3> \land <var:n4> = <var:X> ^ <nat:4> \land <var:n5> = <var:X> ^ <nat:5> \land <var:n0> = <nat:4> \} \\ <var:n5> := <var:n5> * <nat:2> ; \\ \{ <var:G> = <var:X> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n3> = <nat:2> * <var:X> ^ <nat:3> \land <var:n4> = <var:X> ^ <nat:4> \land <var:n5> = <nat:2> * <var:X> ^ <nat:5> \land <var:n0> = <nat:4> \} \\ <var:b> := <var:n5> \\ \{ <var:G> = <var:X> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n3> = <nat:2> * <var:X> ^ <nat:3> \land <var:n4> = <var:X> ^ <nat:4> \land <var:n0> = <nat:4> \land <var:b> = <nat:2> * <var:X> ^ <nat:5> \} \\ <var:b> := <var:b> + <var:n3> \\ \{ <var:G> = <var:X> \land <var:n1> = <nat:1> * <var:X> \land <var:n2> = <var:X> ^ <nat:2> \land <var:n0> = <nat:4> \land <var:b> = <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:n1> \\ \{ <var:G> = <var:X> \land <var:n0> = <nat:4> \land <var:b> = <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> \} \\ <var:b> := <var:b> + <var:n0> \\ \{ <var:G> = <var:X> \land <var:b> = <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:4> \} \end{eqnarray} Using Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <var:n4> : string := " <var:n4> " . Definition <var:n5> : string := " <var:n5> " . Definition <def:poly> := <var:n1> := <var:G> ; <var:n2> := <var:n1> * <var:G> ; <var:n3> := <var:n2> * <var:G> ; <var:n4> := <var:n3> * <var:G> ; <var:n5> := <var:n4> * <var:G> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:1> ; <var:n3> := <var:n3> * <nat:2> ; <var:n5> := <var:n5> * <nat:2> ; <var:b> := <var:n5> <var:b> := <var:b> + <var:n3> <var:b> := <var:b> + <var:n1> <var:b> := <var:b> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:G> = <var:X> }} <def:poly> {{ <var:b> = <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <var:X> /\ <var:n2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n3> = <var:X> ^ <nat:3> /\ <var:n4> = <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n3> = <var:X> ^ <nat:3> /\ <var:n4> = <var:X> ^ <nat:4> /\ <var:n5> = <var:X> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n3> = <var:X> ^ <nat:3> /\ <var:n4> = <var:X> ^ <nat:4> /\ <var:n5> = <var:X> ^ <nat:5> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <nat:1> * <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n3> = <var:X> ^ <nat:3> /\ <var:n4> = <var:X> ^ <nat:4> /\ <var:n5> = <var:X> ^ <nat:5> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <nat:1> * <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:X> ^ <nat:3> /\ <var:n4> = <var:X> ^ <nat:4> /\ <var:n5> = <var:X> ^ <nat:5> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <nat:1> * <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:X> ^ <nat:3> /\ <var:n4> = <var:X> ^ <nat:4> /\ <var:n5> = <nat:2> * <var:X> ^ <nat:5> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <nat:1> * <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:X> ^ <nat:3> /\ <var:n4> = <var:X> ^ <nat:4> /\ <var:n0> = <nat:4> /\ <var:b> = <nat:2> * <var:X> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n1> = <nat:1> * <var:X> /\ <var:n2> = <var:X> ^ <nat:2> /\ <var:n0> = <nat:4> /\ <var:b> = <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:n0> = <nat:4> /\ <var:b> = <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:b> = <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 