\begin{document} \begin{theorem} Consider the following set of instructions such that \begin{verbatim} <var:V> := <nat:3> ; <var:V> := <nat:3> + <var:V> * <var:b> ; <var:V> := <nat:3> + <var:V> * <var:b> ; <var:V> := <nat:2> + <var:V> * <var:b> ; <var:V> := <nat:3> + <var:V> * <var:b> ; <var:V> := <var:V> * <var:b> ; <var:V> := <nat:2> + <var:V> * <var:b> ; <var:V> := <nat:1> + <var:V> * <var:b> ; <var:V> := <nat:2> + <var:V> * <var:b> ; <var:V> := <nat:1> + <var:V> * <var:b> \end{verbatim} Allow $ <var:b> = <var:K> $ ahead of evaluating our series of commands , it follows that we see $ <var:V> = <nat:3> \cdot <var:K> ^ <nat:9> + <nat:3> \cdot <var:K> ^ <nat:8> + <nat:3> \cdot <var:K> ^ <nat:7> + <nat:2> \cdot <var:K> ^ <nat:6> + <nat:3> \cdot <var:K> ^ <nat:5> + <nat:2> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:1> $ after set of instructions finishes . \end{theorem} \begin{proof} The method of proof for the series of commands is shown by the below decorated code segment . \begin{eqnarray} \{ <var:b> = <var:K> \} \\ <var:V> := <nat:3> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \} \\ <var:V> := <nat:3> + <var:V> * <var:b> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> + <nat:3> \} \\ <var:V> := <nat:3> + <var:V> * <var:b> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:3> \} \\ <var:V> := <nat:2> + <var:V> * <var:b> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:2> \} \\ <var:V> := <nat:3> + <var:V> * <var:b> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:3> \} \\ <var:V> := <var:V> * <var:b> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + \} \\ <var:V> := <nat:2> + <var:V> * <var:b> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:2> \} \\ <var:V> := <nat:1> + <var:V> * <var:b> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> ^ <nat:7> + <nat:3> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> + <nat:1> \} \\ <var:V> := <nat:2> + <var:V> * <var:b> ; \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> ^ <nat:8> + <nat:3> \times <var:K> ^ <nat:7> + <nat:3> \times <var:K> ^ <nat:6> + <nat:2> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:2> \} \\ <var:V> := <nat:1> + <var:V> * <var:b> \\ \{ <var:b> = <var:K> \land <var:V> = <nat:3> \times <var:K> ^ <nat:9> + <nat:3> \times <var:K> ^ <nat:8> + <nat:3> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:1> \} \end{eqnarray} The application of usual Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:b> = <var:K> }} <var:V> := <nat:3> ; <var:V> := <nat:3> + <var:V> * <var:b> ; <var:V> := <nat:3> + <var:V> * <var:b> ; <var:V> := <nat:2> + <var:V> * <var:b> ; <var:V> := <nat:3> + <var:V> * <var:b> ; <var:V> := <var:V> * <var:b> ; <var:V> := <nat:2> + <var:V> * <var:b> ; <var:V> := <nat:1> + <var:V> * <var:b> ; <var:V> := <nat:2> + <var:V> * <var:b> ; <var:V> := <nat:1> + <var:V> * <var:b> {{ <var:V> = <nat:3> * <var:K> ^ <nat:9> + <nat:3> * <var:K> ^ <nat:8> + <nat:3> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> ^ <nat:7> + <nat:3> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> ^ <nat:8> + <nat:3> * <var:K> ^ <nat:7> + <nat:3> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:V> = <nat:3> * <var:K> ^ <nat:9> + <nat:3> * <var:K> ^ <nat:8> + <nat:3> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 