\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f1> := <var:G> ; <var:f2> := <var:f1> * <var:G> ; <var:f3> := <var:f2> * <var:G> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:8> ; <var:f3> := <var:f3> * <nat:6> ; <var:R> := <var:f3> <var:R> := <var:R> + <var:f2> <var:R> := <var:R> + <var:f1> <var:R> := <var:R> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:G> = <var:x> $ prior to executing this set of commands , then we have $ <var:R> = <nat:6> \times <var:x> ^ <nat:3> + <nat:8> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> + <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:G> = <var:x> \} \\ <var:f1> := <var:G> ; \\ \{ <var:G> = <var:x> \land <var:f1> = <var:x> \} \\ <var:f2> := <var:f1> * <var:G> ; \\ \{ <var:G> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:G> ; \\ \{ <var:G> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \} \\ <var:f0> := <nat:5> ; \\ \{ <var:G> = <var:x> \land <var:f1> = <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:5> \} \\ <var:f1> := <var:f1> * <nat:5> ; \\ \{ <var:G> = <var:x> \land <var:f1> = <nat:5> * <var:x> \land <var:f2> = <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:5> \} \\ <var:f2> := <var:f2> * <nat:8> ; \\ \{ <var:G> = <var:x> \land <var:f1> = <nat:5> * <var:x> \land <var:f2> = <nat:8> * <var:x> ^ <nat:2> \land <var:f3> = <var:x> ^ <nat:3> \land <var:f0> = <nat:5> \} \\ <var:f3> := <var:f3> * <nat:6> ; \\ \{ <var:G> = <var:x> \land <var:f1> = <nat:5> * <var:x> \land <var:f2> = <nat:8> * <var:x> ^ <nat:2> \land <var:f3> = <nat:6> * <var:x> ^ <nat:3> \land <var:f0> = <nat:5> \} \\ <var:R> := <var:f3> \\ \{ <var:G> = <var:x> \land <var:f1> = <nat:5> * <var:x> \land <var:f2> = <nat:8> * <var:x> ^ <nat:2> \land <var:f0> = <nat:5> \land <var:R> = <nat:6> * <var:x> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:f2> \\ \{ <var:G> = <var:x> \land <var:f1> = <nat:5> * <var:x> \land <var:f0> = <nat:5> \land <var:R> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:f1> \\ \{ <var:G> = <var:x> \land <var:f0> = <nat:5> \land <var:R> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> \} \\ <var:R> := <var:R> + <var:f0> \\ \{ <var:G> = <var:x> \land <var:R> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:5> \} \end{eqnarray} As a result , our list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:G> ; <var:f2> := <var:f1> * <var:G> ; <var:f3> := <var:f2> * <var:G> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:8> ; <var:f3> := <var:f3> * <nat:6> ; <var:R> := <var:f3> <var:R> := <var:R> + <var:f2> <var:R> := <var:R> + <var:f1> <var:R> := <var:R> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:G> = <var:x> }} <def:poly> {{ <var:R> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <var:x> /\ <var:f2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <var:x> /\ <var:f2> = <var:x> ^ <nat:2> /\ <var:f3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <var:x> /\ <var:f2> = <var:x> ^ <nat:2> /\ <var:f3> = <var:x> ^ <nat:3> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <nat:5> * <var:x> /\ <var:f2> = <var:x> ^ <nat:2> /\ <var:f3> = <var:x> ^ <nat:3> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <nat:5> * <var:x> /\ <var:f2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:f3> = <var:x> ^ <nat:3> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <nat:5> * <var:x> /\ <var:f2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:x> ^ <nat:3> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <nat:5> * <var:x> /\ <var:f2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:f0> = <nat:5> /\ <var:R> = <nat:6> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f1> = <nat:5> * <var:x> /\ <var:f0> = <nat:5> /\ <var:R> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:f0> = <nat:5> /\ <var:R> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:R> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 