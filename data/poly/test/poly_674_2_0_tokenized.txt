\begin{document} \begin{theorem} Consider the following code such that \begin{verbatim} <var:W0> := <nat:2> ; <var:n> := <var:W0> \end{verbatim} Assuming that we have $ <var:S> = <var:a> $ --- for any positive numbers $ <var:a> $ --- ahead of executing this program , it holds that we see $ <var:n> = <nat:2> $ once series of instructions is done executing . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be seen using standard Hoare techniques . Advancing to the next step , the code \verb | <var:W0> := <nat:2> ; | . This transfers $ \{ <var:S> = <var:a> \} $ to the condition $ \{ <var:S> = <var:a> \land <var:W0> = <nat:2> \} $ . This is guaranteed with the assignment rule obtained from standard Hoare logic . Observing the following bit of code contained in the code , the variable update command assigning $ <var:W0$ to $ <var:n>$ . This advances the condition $ \{ <var:S> = <var:a> \land <var:W0> = <nat:2> \} $ to $ \{ <var:S> = <var:a> \land <var:n> = <nat:2> \} $ . This is given through the assignment rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:S> = <var:a> }} <var:W0> := <nat:2> ; <var:n> := <var:W0> {{ <var:n> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:n> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 