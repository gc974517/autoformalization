\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:2> ; <var:U> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allowing --- letting positive numbers $ <var:Y> $ --- $ <var:T> = <var:Y> $ before the execution of our segment of code then we see $ <var:U> = <nat:2> $ when code has terminated . \end{theorem} \begin{proof} The proof of our code segment can be done through standard Hoare techniques . Jumping to the next command found in the code , the variable assignmet line defining $ <nat:2> $ toward $ <var:K0>$ . This statement takes the condition $ \{ <var:T> = <var:Y> \} $ toward the postcondition $ \{ <var:T> = <var:Y> \land <var:K0> = <nat:2> \} $ . This is guaranteed through the assignment rule given by standard Hoare logic . Taking a look at the proceeding line of code found in our series of commands , we have the variable binding statement \verb | <var:U> := <var:K0> | . This forwards the precondition $ \{ <var:T> = <var:Y> \land <var:K0> = <nat:2> \} $ as the condition $ \{ <var:T> = <var:Y> \land <var:U> = <nat:2> \} $ . This is ensured through the assignment inference rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:2> ; <var:U> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:T> = <var:Y> }} <def:poly> {{ <var:U> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:U> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 