\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:h> ; <var:t2> := <var:t1> * <var:h> ; <var:t3> := <var:t2> * <var:h> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:8> ; <var:t2> := <var:t2> * <nat:4> ; <var:t3> := <var:t3> * <nat:7> ; <var:o> := <var:t3> <var:o> := <var:o> + <var:t2> <var:o> := <var:o> + <var:t1> <var:o> := <var:o> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:h> = <var:x> $ taking $ <var:x> \in \mathbb{N} $ ahead of the evaluation of our list of commands it holds that we have $ <var:o> = <nat:7> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for our series of instructions is given using usual Hoare techniques . Observing the subsequent line seen in our set of instructions , the command giving $ <var:h> $ as $ <var:t1>$ . This command forwards the condition $ \{ <var:h> = <var:x> \} $ toward $ \{ <var:h> = <var:x> \land <var:t1> = <var:x> \} $ . This is guaranteed using the assignment law obtained from usual Hoare reasoning . Honing in on the next line found in the code , we see the variable update statement \verb | <var:t2> := <var:t1> * <var:h> ; | . This transfers the precondition $ \{ <var:h> = <var:x> \land <var:t1> = <var:x> \} $ as the postcondition $ \{ <var:h> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \} $ . This is shown with the assignment inference rule from usual Hoare techniques . Going to the next step , we see the variable assignmet statement \verb | <var:t3> := <var:t2> * <var:h> ; | . This advances the condition $ \{ <var:h> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \} $ to the postcondition $ \{ <var:h> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \} $ . This is sound through the assignment scheme in Hoare logic . Taking a look at the subsequent line contained in our list of instructions , the binding code assigning $ <nat:6> $ into $ <var:t0>$ . This transfers the condition $ \{ <var:h> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \} $ to $ \{ <var:h> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t0> = <nat:6> \} $ . Observing the proceeding statement contained in the code , we see the variable assignmet command \verb | <var:t1> := <var:t1> * <nat:8> ; | . This command redefines $ \{ <var:h> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t0> = <nat:6> \} $ into the condition $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t0> = <nat:6> \} $ . Considering the following piece of code in our set of instructions , the binding command assigning $ <var:t2> * <nat:4> $ into $ <var:t2>$ . This takes $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t0> = <nat:6> \} $ into $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t0> = <nat:6> \} $ . This is rigorously given through the assignment law found in Hoare logic . Now , we have the environment update command yielding $ <var:t3> * <nat:7> $ into $ <var:t3>$ . This forwards $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:t3> = <var:x> ^ <nat:3> \land <var:t0> = <nat:6> \} $ to the postcondition $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:t3> = <nat:7> \times <var:x> ^ <nat:3> \land <var:t0> = <nat:6> \} $ . This is ensured with the assignment rule defined in standard Hoare techniques . Shifting focus toward the following piece of code in our set of commands , the binding line \verb | <var:o> := <var:t3> | . This redefines $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:t3> = <nat:7> \times <var:x> ^ <nat:3> \land <var:t0> = <nat:6> \} $ toward the postcondition $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:t0> = <nat:6> \land <var:o> = <nat:7> \times <var:x> ^ <nat:3> \} $ . This is deduced through the assignment rule found in usual Hoare logic . Advancing on , the variable assignmet command \verb | <var:o> := <var:o> + <var:t2> | . This command takes $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:t0> = <nat:6> \land <var:o> = <nat:7> \times <var:x> ^ <nat:3> \} $ toward the condition $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t0> = <nat:6> \land <var:o> = <nat:7> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> \} $ . This is guaranteed through the assignment rule given in typical Hoare techniques . Taking another step toward the subsequent bit of code in our series of instructions , we see the binding command defining $ <var:o> + <var:t1$ into $ <var:o>$ . This forwards the condition $ \{ <var:h> = <var:x> \land <var:t1> = <nat:8> \times <var:x> \land <var:t0> = <nat:6> \land <var:o> = <nat:7> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> \} $ into the condition $ \{ <var:h> = <var:x> \land <var:t0> = <nat:6> \land <var:o> = <nat:7> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:8> \times <var:x> \} $ . Next , we have the variable update line \verb | <var:o> := <var:o> + <var:t0> | . This command advances the condition $ \{ <var:h> = <var:x> \land <var:t0> = <nat:6> \land <var:o> = <nat:7> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:8> \times <var:x> \} $ to the postcondition $ \{ <var:h> = <var:x> \land <var:o> = <nat:7> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:8> \times <var:x> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:h> ; <var:t2> := <var:t1> * <var:h> ; <var:t3> := <var:t2> * <var:h> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:8> ; <var:t2> := <var:t2> * <nat:4> ; <var:t3> := <var:t3> * <nat:7> ; <var:o> := <var:t3> <var:o> := <var:o> + <var:t2> <var:o> := <var:o> + <var:t1> <var:o> := <var:o> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:h> = <var:x> }} <def:poly> {{ <var:o> = <nat:7> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <nat:8> * <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <nat:8> * <var:x> /\ <var:t2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:t3> = <var:x> ^ <nat:3> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <nat:8> * <var:x> /\ <var:t2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:t3> = <nat:7> * <var:x> ^ <nat:3> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <nat:8> * <var:x> /\ <var:t2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:t0> = <nat:6> /\ <var:o> = <nat:7> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t1> = <nat:8> * <var:x> /\ <var:t0> = <nat:6> /\ <var:o> = <nat:7> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:t0> = <nat:6> /\ <var:o> = <nat:7> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:o> = <nat:7> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 