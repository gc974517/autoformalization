\begin{document} \begin{theorem} We define the following program in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:9> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:n> ; <var:k> := <var:O1> ; <var:k> := <var:k> + <var:O0> \end{verbatim} Allowing , given integers $ <var:x> $ , $ <var:n> = <var:x> $ prior to the evaluation of our segment of code , then we see $ <var:k> = <nat:9> * <var:x> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our segment of code can be done through standard Hoare logic . Paying attention to the proceeding bit of code found in our set of instructions , we have the statement \verb | <var:O0> := <nat:9> ; | . This redefines $ \{ <var:n> = <var:x> \} $ as the postcondition $ \{ <var:n> = <var:x> \land <var:O0> = <nat:9> \} $ . This is rigorously given using the assignment inference rule found in usual Hoare techniques . Looking at the subsequent statement contained in the series of instructions , we see the variable update line giving $ <nat:9> $ to $ <var:O1>$ . This moves the condition $ \{ <var:n> = <var:x> \land <var:O0> = <nat:9> \} $ toward the postcondition $ \{ <var:n> = <var:x> \land <var:O0> = <nat:9> \land <var:O1> = <nat:9> \} $ . Looking at the subsequent statement seen in the code , the line \verb | <var:O1> := <var:O1> * <var:n> ; | . This redefines the condition $ \{ <var:n> = <var:x> \land <var:O0> = <nat:9> \land <var:O1> = <nat:9> \} $ into the condition $ \{ <var:n> = <var:x> \land <var:O0> = <nat:9> \land <var:O1> = <nat:9> \cdot <var:x> \} $ . This is shown to be logically sound using the assignment inference rule of standard Hoare reasoning . Taking another step toward the next command contained in the list of commands , the command \verb | <var:k> := <var:O1> ; | . This moves the condition $ \{ <var:n> = <var:x> \land <var:O0> = <nat:9> \land <var:O1> = <nat:9> \cdot <var:x> \} $ as $ \{ <var:n> = <var:x> \land <var:O0> = <nat:9> \land <var:k> = <nat:9> \cdot <var:x> \} $ . This is sound with the assignment rule given by usual Hoare reasoning . Paying attention to the upcoming step in the set of instructions , the binding code \verb | <var:k> := <var:k> + <var:O0> | . This command takes the precondition $ \{ <var:n> = <var:x> \land <var:O0> = <nat:9> \land <var:k> = <nat:9> \cdot <var:x> \} $ into the postcondition $ \{ <var:n> = <var:x> \land <var:k> = <nat:9> \cdot <var:x> + <nat:9> \} $ . This is ensured through the assignment law defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:n> = <var:x> }} <var:O0> := <nat:9> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:n> ; <var:k> := <var:O1> ; <var:k> := <var:k> + <var:O0> {{ <var:k> = <nat:9> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:O0> = <nat:9> /\ <var:O1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:O0> = <nat:9> /\ <var:O1> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:O0> = <nat:9> /\ <var:k> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:k> = <nat:9> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 