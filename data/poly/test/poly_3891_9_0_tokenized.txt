\begin{document} \begin{theorem} Define a list of commands as \begin{verbatim} <var:H0> := <nat:3> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:L> ; <var:H2> := <nat:1> ; <var:H2> := <var:H2> * <var:L> ; <var:H2> := <var:H2> * <var:L> ; <var:r> := <var:H2> ; <var:r> := <var:r> + <var:H1> ; <var:r> := <var:r> + <var:H0> \end{verbatim} Given it to be that $ <var:L> = <var:e> $ --- with some positive integer coefficients $ <var:e> $ --- ahead of the evaluation of this set of commands then $ <var:r> = <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> $ once set of instructions has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:L> = <var:e> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:L> = <var:e> \land <var:H0> = <nat:3> \} \\ <var:H1> := <nat:1> ; \\ \{ <var:L> = <var:e> \land <var:H0> = <nat:3> \land <var:H1> = <nat:1> \} \\ <var:H1> := <var:H1> * <var:L> ; \\ \{ <var:L> = <var:e> \land <var:H0> = <nat:3> \land <var:H1> = <nat:1> * <var:e> \} \\ <var:H2> := <nat:1> ; \\ \{ <var:L> = <var:e> \land <var:H0> = <nat:3> \land <var:H1> = <nat:1> * <var:e> \land <var:H2> = <nat:1> \} \\ <var:H2> := <var:H2> * <var:L> ; \\ \{ <var:L> = <var:e> \land <var:H0> = <nat:3> \land <var:H1> = <nat:1> * <var:e> \land <var:H2> = <nat:1> * <var:e> \} \\ <var:H2> := <var:H2> * <var:L> ; \\ \{ <var:L> = <var:e> \land <var:H0> = <nat:3> \land <var:H1> = <nat:1> * <var:e> \land <var:H2> = <nat:1> * <var:e> ^ <nat:2> \} \\ <var:r> := <var:H2> ; \\ \{ <var:L> = <var:e> \land <var:H0> = <nat:3> \land <var:H1> = <nat:1> * <var:e> \land <var:r> = <nat:1> * <var:e> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:H1> ; \\ \{ <var:L> = <var:e> \land <var:H0> = <nat:3> \land <var:r> = <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> \} \\ <var:r> := <var:r> + <var:H0> \\ \{ <var:L> = <var:e> \land <var:r> = <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:L> = <var:e> }} <var:H0> := <nat:3> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:L> ; <var:H2> := <nat:1> ; <var:H2> := <var:H2> * <var:L> ; <var:H2> := <var:H2> * <var:L> ; <var:r> := <var:H2> ; <var:r> := <var:r> + <var:H1> ; <var:r> := <var:r> + <var:H0> {{ <var:r> = <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:1> * <var:e> /\ <var:H2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:1> * <var:e> /\ <var:H2> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:1> * <var:e> /\ <var:H2> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:1> * <var:e> /\ <var:r> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:H0> = <nat:3> /\ <var:r> = <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:r> = <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 