\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:T> ; <var:o2> := <nat:2> ; <var:o2> := <var:o2> * <var:T> ; <var:o2> := <var:o2> * <var:T> ; <var:o3> := <nat:7> ; <var:o3> := <var:o3> * <var:T> ; <var:o3> := <var:o3> * <var:T> ; <var:o3> := <var:o3> * <var:T> ; <var:O> := <var:o3> ; <var:O> := <var:O> + <var:o2> ; <var:O> := <var:O> + <var:o1> ; <var:O> := <var:O> + <var:o0> \end{verbatim} Allow ( given all positive numbers $ <var:P> $ ) that $ <var:T> = <var:P> $ prior to the evaluation of this series of instructions it holds that we have $ <var:O> = <nat:7> \times <var:P> ^ <nat:3> + <nat:2> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:3> $ when code segment exits . \end{theorem} \begin{proof} Utilizing standard Hoare techniques produces : \begin{eqnarray} \{ <var:T> = <var:P> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \} \\ <var:o1> := <nat:3> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} \\ <var:o1> := <var:o1> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \} \\ <var:o2> := <nat:2> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:o2> = <nat:2> \} \\ <var:o2> := <var:o2> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:o2> = <nat:2> \times <var:P> \} \\ <var:o2> := <var:o2> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:o2> = <nat:2> \times <var:P> ^ <nat:2> \} \\ <var:o3> := <nat:7> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:o2> = <nat:2> \times <var:P> ^ <nat:2> \land <var:o3> = <nat:7> \} \\ <var:o3> := <var:o3> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:o2> = <nat:2> \times <var:P> ^ <nat:2> \land <var:o3> = <nat:7> \times <var:P> \} \\ <var:o3> := <var:o3> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:o2> = <nat:2> \times <var:P> ^ <nat:2> \land <var:o3> = <nat:7> \times <var:P> ^ <nat:2> \} \\ <var:o3> := <var:o3> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:o2> = <nat:2> \times <var:P> ^ <nat:2> \land <var:o3> = <nat:7> \times <var:P> ^ <nat:3> \} \\ <var:O> := <var:o3> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:o2> = <nat:2> \times <var:P> ^ <nat:2> \land <var:O> = <nat:7> \times <var:P> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:o2> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:P> \land <var:O> = <nat:7> \times <var:P> ^ <nat:3> + <nat:2> \times <var:P> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:o1> ; \\ \{ <var:T> = <var:P> \land <var:o0> = <nat:3> \land <var:O> = <nat:7> \times <var:P> ^ <nat:3> + <nat:2> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> \} \\ <var:O> := <var:O> + <var:o0> \\ \{ <var:T> = <var:P> \land <var:O> = <nat:7> \times <var:P> ^ <nat:3> + <nat:2> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:3> \} \end{eqnarray} Thusly , the list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:T> = <var:P> }} <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:T> ; <var:o2> := <nat:2> ; <var:o2> := <var:o2> * <var:T> ; <var:o2> := <var:o2> * <var:T> ; <var:o3> := <nat:7> ; <var:o3> := <var:o3> * <var:T> ; <var:o3> := <var:o3> * <var:T> ; <var:o3> := <var:o3> * <var:T> ; <var:O> := <var:o3> ; <var:O> := <var:O> + <var:o2> ; <var:O> := <var:O> + <var:o1> ; <var:O> := <var:O> + <var:o0> {{ <var:O> = <nat:7> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:o2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:o2> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:o2> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:o2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:o3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:o2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:o3> = <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:o2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:o3> = <nat:7> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:o2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:o3> = <nat:7> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:o2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:O> = <nat:7> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:P> /\ <var:O> = <nat:7> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:o0> = <nat:3> /\ <var:O> = <nat:7> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:O> = <nat:7> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 