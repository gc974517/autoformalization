\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:3> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:u> ; <var:s2> := <nat:5> ; <var:s2> := <var:s2> * <var:u> ; <var:s2> := <var:s2> * <var:u> ; <var:s3> := <nat:4> ; <var:s3> := <var:s3> * <var:u> ; <var:s3> := <var:s3> * <var:u> ; <var:s3> := <var:s3> * <var:u> ; <var:M> := <var:s3> ; <var:M> := <var:M> + <var:s2> ; <var:M> := <var:M> + <var:s1> ; <var:M> := <var:M> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Assuming that $ <var:u> = <var:h> $ ahead of the execution of the list of instructions , it follows that we see $ <var:M> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:5> \cdot <var:h> ^ <nat:2> + <nat:5> \cdot <var:h> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code can be seen by standard Hoare logic . Further , \begin{verbatim} { <var:u> = <var:h> } <var:s0> := <nat:3> { <var:u> = <var:h> \land <var:s0> = <nat:3> } { <var:u> = <var:h> \land <var:s0> = <nat:3> } <var:s1> := <nat:5> { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> } { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> } <var:s1> := <var:s1> * <var:u> { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> \times <var:h> } { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> \times <var:h> } <var:s2> := <nat:5> { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> \times <var:h> \land <var:s2> = <nat:5> } \end{verbatim} This is shown with the variable binding rule given by typical Hoare techniques . Considering the next line of code contained in the segment of code , we have \begin{verbatim} { <var:u> = <var:h> } <var:s0> := <nat:3> { <var:u> = <var:h> \land <var:s0> = <nat:3> } \end{verbatim} This is deduced using the variable update law in standard Hoare logic . Stepping forward , \begin{verbatim} { <var:u> = <var:h> } <var:s0> := <nat:3> { <var:u> = <var:h> \land <var:s0> = <nat:3> } { <var:u> = <var:h> \land <var:s0> = <nat:3> } <var:s1> := <nat:5> { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> } { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> } <var:s1> := <var:s1> * <var:u> { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> \times <var:h> } { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> \times <var:h> } <var:s2> := <nat:5> { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> \times <var:h> \land <var:s2> = <nat:5> } \end{verbatim} Focusing on the upcoming lines of codecontained in our series of instructions , we see \begin{verbatim} { <var:u> = <var:h> } <var:s0> := <nat:3> { <var:u> = <var:h> \land <var:s0> = <nat:3> } { <var:u> = <var:h> \land <var:s0> = <nat:3> } <var:s1> := <nat:5> { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> } \end{verbatim} Focusing on the subsequent piece of code found in our list of instructions , \begin{verbatim} { <var:u> = <var:h> } <var:s0> := <nat:3> { <var:u> = <var:h> \land <var:s0> = <nat:3> } \end{verbatim} Paying attention to the subsequent lines of codecontained in the code , we see \begin{verbatim} { <var:u> = <var:h> } <var:s0> := <nat:3> { <var:u> = <var:h> \land <var:s0> = <nat:3> } { <var:u> = <var:h> \land <var:s0> = <nat:3> } <var:s1> := <nat:5> { <var:u> = <var:h> \land <var:s0> = <nat:3> \land <var:s1> = <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s0> := <nat:3> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:u> ; <var:s2> := <nat:5> ; <var:s2> := <var:s2> * <var:u> ; <var:s2> := <var:s2> * <var:u> ; <var:s3> := <nat:4> ; <var:s3> := <var:s3> * <var:u> ; <var:s3> := <var:s3> * <var:u> ; <var:s3> := <var:s3> * <var:u> ; <var:M> := <var:s3> ; <var:M> := <var:M> + <var:s2> ; <var:M> := <var:M> + <var:s1> ; <var:M> := <var:M> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:u> = <var:h> }} <def:poly> {{ <var:M> = <nat:4> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:s2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:s2> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:s2> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:s2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:s3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:s2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:s2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:s2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:s2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:M> = <nat:4> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:5> * <var:h> /\ <var:M> = <nat:4> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:s0> = <nat:3> /\ <var:M> = <nat:4> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:h> /\ <var:M> = <nat:4> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 