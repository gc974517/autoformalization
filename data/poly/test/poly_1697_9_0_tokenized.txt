\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:4> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:e> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:e> ; <var:n2> := <var:n2> * <var:e> ; <var:u> := <var:n2> ; <var:u> := <var:u> + <var:n1> ; <var:u> := <var:u> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:e> = <var:A> $ prior to running the list of instructions , then we see $ <var:u> = <nat:3> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be given with typical Hoare techniques . Going forward , we see the statement assigning $ <nat:4> $ into $ <var:n0>$ . This advances the precondition $ \{ <var:e> = <var:A> \} $ as $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \} $ . This is rigorously given through the assignment scheme obtained from standard Hoare logic . Moving forward to the next step , we have the assignment code assigning $ <nat:3> $ to $ <var:n1>$ . This redefines $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \} $ toward the condition $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> \} $ . Jumping to the next piece of code found in our code , the statement \verb | <var:n1> := <var:n1> * <var:e> ; | . This code redefines the condition $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> \} $ toward $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \} $ . This is given by the assignment inference rule in Hoare techniques . Jumping to the following line contained in our list of commands , we have the variable update line \verb | <var:n2> := <nat:3> ; | . This forwards $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \} $ toward the postcondition $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \land <var:n2> = <nat:3> \} $ . This is given by the assignment rule defined in Hoare logic . Moving forward to the next step , the assignment command \verb | <var:n2> := <var:n2> * <var:e> ; | . This redefines the condition $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \land <var:n2> = <nat:3> \} $ toward $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \land <var:n2> = <nat:3> * <var:A> \} $ . Keeping momentum , we see the variable assignmet command yielding $ <var:n2> * <var:e> $ to $ <var:n2>$ . This advances $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \land <var:n2> = <nat:3> * <var:A> \} $ toward the postcondition $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \land <var:n2> = <nat:3> * <var:A> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule defined by standard Hoare techniques . Immediately after , we have the environment update line \verb | <var:u> := <var:n2> ; | . This line takes the precondition $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \land <var:n2> = <nat:3> * <var:A> ^ <nat:2> \} $ as $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \land <var:u> = <nat:3> * <var:A> ^ <nat:2> \} $ . Advancing on , we have the binding command \verb | <var:u> := <var:u> + <var:n1> ; | . This forwards $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:A> \land <var:u> = <nat:3> * <var:A> ^ <nat:2> \} $ to the postcondition $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:u> = <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> \} $ . This is rigorously given by the assignment law defined in usual Hoare techniques . Immediately after , we see the environment update line \verb | <var:u> := <var:u> + <var:n0> | . This advances the condition $ \{ <var:e> = <var:A> \land <var:n0> = <nat:4> \land <var:u> = <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> \} $ as the postcondition $ \{ <var:e> = <var:A> \land <var:u> = <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> \} $ . This is sound through the assignment rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:4> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:e> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:e> ; <var:n2> := <var:n2> * <var:e> ; <var:u> := <var:n2> ; <var:u> := <var:u> + <var:n1> ; <var:u> := <var:u> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:e> = <var:A> }} <def:poly> {{ <var:u> = <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:A> /\ <var:n2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:A> /\ <var:n2> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:A> /\ <var:n2> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:A> /\ <var:u> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:n0> = <nat:4> /\ <var:u> = <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:u> = <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 