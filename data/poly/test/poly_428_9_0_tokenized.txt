\begin{document} \begin{theorem} We define a segment of code as follows \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:9> ; <var:F1> := <var:F1> * <var:D> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:D> ; <var:F2> := <var:F2> * <var:D> ; <var:c> := <var:F2> ; <var:c> := <var:c> + <var:F1> ; <var:c> := <var:c> + <var:F0> \end{verbatim} Assume $ <var:D> = <var:w> $ prior to interpreting this code , it follows that we have $ <var:c> = <nat:3> \times <var:w> ^ <nat:2> + <nat:9> \times <var:w> + <nat:4> $ once list of instructions is done . \end{theorem} \begin{proof} The proof of our set of instructions is accomplished by typical Hoare logic . Focusing on the next lines of codein our series of instructions , we have \begin{verbatim} { <var:D> = <var:w> } <var:F0> := <nat:4> { <var:D> = <var:w> \land <var:F0> = <nat:4> } { <var:D> = <var:w> \land <var:F0> = <nat:4> } <var:F1> := <nat:9> { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> } { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> } <var:F1> := <var:F1> * <var:D> { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> } { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> } <var:F2> := <nat:3> { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> \land <var:F2> = <nat:3> } { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> \land <var:F2> = <nat:3> } <var:F2> := <var:F2> * <var:D> { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> \land <var:F2> = <nat:3> \times <var:w> } { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> \land <var:F2> = <nat:3> \times <var:w> } <var:F2> := <var:F2> * <var:D> { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> \land <var:F2> = <nat:3> \times <var:w> ^ <nat:2> } { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> \land <var:F2> = <nat:3> \times <var:w> ^ <nat:2> } <var:c> := <var:F2> { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> \land <var:c> = <nat:3> \times <var:w> ^ <nat:2> } { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:F1> = <nat:9> \times <var:w> \land <var:c> = <nat:3> \times <var:w> ^ <nat:2> } <var:c> := <var:c> + <var:F1> { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:c> = <nat:3> \times <var:w> ^ <nat:2> + <nat:9> \times <var:w> } { <var:D> = <var:w> \land <var:F0> = <nat:4> \land <var:c> = <nat:3> \times <var:w> ^ <nat:2> + <nat:9> \times <var:w> } <var:c> := <var:c> + <var:F0{ <var:D> = <var:w> \land <var:c> = <nat:3> \times <var:w> ^ <nat:2> + <nat:9> \times <var:w> + <nat:4> } \end{verbatim} This is ensured using the variable update scheme in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:D> = <var:w> }} <var:F0> := <nat:4> ; <var:F1> := <nat:9> ; <var:F1> := <var:F1> * <var:D> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:D> ; <var:F2> := <var:F2> * <var:D> ; <var:c> := <var:F2> ; <var:c> := <var:c> + <var:F1> ; <var:c> := <var:c> + <var:F0> {{ <var:c> = <nat:3> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:9> * <var:w> /\ <var:F2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:9> * <var:w> /\ <var:F2> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:9> * <var:w> /\ <var:F2> = <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:9> * <var:w> /\ <var:c> = <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:4> /\ <var:c> = <nat:3> * <var:w> ^ <nat:2> + <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:c> = <nat:3> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 