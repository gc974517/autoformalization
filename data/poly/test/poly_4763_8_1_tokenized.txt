\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:l> ; <var:Q2> := <var:Q1> * <var:l> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:8> ; <var:I> := <var:Q2> <var:I> := <var:I> + <var:Q1> <var:I> := <var:I> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Given letting positive numbers $ <var:e> $ that we have $ <var:l> = <var:e> $ prior to the evaluation of our series of commands , it follows that we see $ <var:I> = <nat:8> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:e> \} \\ <var:Q1> := <var:l> ; \\ \{ <var:l> = <var:e> \land <var:Q1> = <var:e> \} \\ <var:Q2> := <var:Q1> * <var:l> ; \\ \{ <var:l> = <var:e> \land <var:Q1> = <var:e> \land <var:Q2> = <var:e> ^ <nat:2> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:l> = <var:e> \land <var:Q1> = <var:e> \land <var:Q2> = <var:e> ^ <nat:2> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <var:Q1> * <nat:6> ; \\ \{ <var:l> = <var:e> \land <var:Q1> = <nat:6> * <var:e> \land <var:Q2> = <var:e> ^ <nat:2> \land <var:Q0> = <nat:1> \} \\ <var:Q2> := <var:Q2> * <nat:8> ; \\ \{ <var:l> = <var:e> \land <var:Q1> = <nat:6> * <var:e> \land <var:Q2> = <nat:8> * <var:e> ^ <nat:2> \land <var:Q0> = <nat:1> \} \\ <var:I> := <var:Q2> \\ \{ <var:l> = <var:e> \land <var:Q1> = <nat:6> * <var:e> \land <var:Q0> = <nat:1> \land <var:I> = <nat:8> * <var:e> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:Q1> \\ \{ <var:l> = <var:e> \land <var:Q0> = <nat:1> \land <var:I> = <nat:8> * <var:e> ^ <nat:2> + <nat:6> * <var:e> \} \\ <var:I> := <var:I> + <var:Q0> \\ \{ <var:l> = <var:e> \land <var:I> = <nat:8> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:1> \} \end{eqnarray} The application of standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q1> := <var:l> ; <var:Q2> := <var:Q1> * <var:l> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:8> ; <var:I> := <var:Q2> <var:I> := <var:I> + <var:Q1> <var:I> := <var:I> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:l> = <var:e> }} <def:poly> {{ <var:I> = <nat:8> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:Q1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:Q1> = <var:e> /\ <var:Q2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:Q1> = <var:e> /\ <var:Q2> = <var:e> ^ <nat:2> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:Q1> = <nat:6> * <var:e> /\ <var:Q2> = <var:e> ^ <nat:2> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:Q1> = <nat:6> * <var:e> /\ <var:Q2> = <nat:8> * <var:e> ^ <nat:2> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:Q1> = <nat:6> * <var:e> /\ <var:Q0> = <nat:1> /\ <var:I> = <nat:8> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:Q0> = <nat:1> /\ <var:I> = <nat:8> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:I> = <nat:8> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 