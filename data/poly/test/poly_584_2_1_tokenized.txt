\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:3> ; <var:h> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allowing --- for natural numbers $ <var:e> $ --- $ <var:T> = <var:e> $ prior to interpreting our segment of code , it follows that $ <var:h> = <nat:3> $ when program is done executing . \end{theorem} \begin{proof} Proving correctness for the code segment is done with usual Hoare logic . Next , we see \begin{verbatim} { <var:T> = <var:e> } <var:E0> := <nat:3> { <var:T> = <var:e> \land <var:E0> = <nat:3> } { <var:T> = <var:e> \land <var:E0> = <nat:3> } <var:h> := <var:E0{ <var:T> = <var:e> \land <var:h> = <nat:3> } \end{verbatim} This is shown by the variable assignmet scheme from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:3> ; <var:h> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:T> = <var:e> }} <def:poly> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:e> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 