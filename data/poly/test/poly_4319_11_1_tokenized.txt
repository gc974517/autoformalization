\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:Q1> := <var:w> ; <var:Q2> := <var:Q1> * <var:w> ; <var:Q3> := <var:Q2> * <var:w> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:8> ; <var:K> := <var:Q3> <var:K> := <var:K> + <var:Q2> <var:K> := <var:K> + <var:Q1> <var:K> := <var:K> + <var:Q0> \end{verbatim} Allowing $ <var:w> = <var:N> $ --- for whole numbers $ <var:N> $ --- prior to the execution of our segment of code it follows that we have $ <var:K> = <nat:8> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> + <nat:6> $ after series of commands terminates . \end{theorem} \begin{proof} The course of logic for our program can be accomplished through usual Hoare reasoning . Taking another step toward the following commands contained in our code segment , we have \begin{verbatim} { <var:w> = <var:N> } <var:Q1> := <var:w> { <var:w> = <var:N> \land <var:Q1> = <var:N> } { <var:w> = <var:N> \land <var:Q1> = <var:N> } <var:Q2> := <var:Q1> * <var:w> { <var:w> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> } { <var:w> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> } <var:Q3> := <var:Q2> * <var:w> { <var:w> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> } { <var:w> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> } <var:Q0> := <nat:6> { <var:w> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:6> } { <var:w> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:6> } <var:Q1> := <var:Q1> * <nat:6> { <var:w> = <var:N> \land <var:Q1> = <nat:6> * <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:6> } { <var:w> = <var:N> \land <var:Q1> = <nat:6> * <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:6> } <var:Q2> := <var:Q2> * <nat:2> { <var:w> = <var:N> \land <var:Q1> = <nat:6> * <var:N> \land <var:Q2> = <nat:2> * <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:6> } { <var:w> = <var:N> \land <var:Q1> = <nat:6> * <var:N> \land <var:Q2> = <nat:2> * <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:6> } <var:Q3> := <var:Q3> * <nat:8> { <var:w> = <var:N> \land <var:Q1> = <nat:6> * <var:N> \land <var:Q2> = <nat:2> * <var:N> ^ <nat:2> \land <var:Q3> = <nat:8> * <var:N> ^ <nat:3> \land <var:Q0> = <nat:6> } { <var:w> = <var:N> \land <var:Q1> = <nat:6> * <var:N> \land <var:Q2> = <nat:2> * <var:N> ^ <nat:2> \land <var:Q3> = <nat:8> * <var:N> ^ <nat:3> \land <var:Q0> = <nat:6> } <var:K> := <var:Q3{ <var:w> = <var:N> \land <var:Q1> = <nat:6> * <var:N> \land <var:Q2> = <nat:2> * <var:N> ^ <nat:2> \land <var:Q0> = <nat:6> \land <var:K> = <nat:8> * <var:N> ^ <nat:3> } \end{verbatim} This is given using the variable update inference rule obtained from typical Hoare techniques . Immediately after , we have \begin{verbatim} { <var:w> = <var:N> } <var:Q1> := <var:w> { <var:w> = <var:N> \land <var:Q1> = <var:N> } { <var:w> = <var:N> \land <var:Q1> = <var:N> } <var:Q2> := <var:Q1> * <var:w> { <var:w> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> } \end{verbatim} Stepping through , we have \begin{verbatim} { <var:w> = <var:N> } <var:Q1> := <var:w> { <var:w> = <var:N> \land <var:Q1> = <var:N> } \end{verbatim} This is given using the binding law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:w> = <var:N> }} <var:Q1> := <var:w> ; <var:Q2> := <var:Q1> * <var:w> ; <var:Q3> := <var:Q2> * <var:w> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:8> ; <var:K> := <var:Q3> <var:K> := <var:K> + <var:Q2> <var:K> := <var:K> + <var:Q1> <var:K> := <var:K> + <var:Q0> {{ <var:K> = <nat:8> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> /\ <var:Q3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> /\ <var:Q3> = <var:N> ^ <nat:3> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <nat:6> * <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> /\ <var:Q3> = <var:N> ^ <nat:3> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <nat:6> * <var:N> /\ <var:Q2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:Q3> = <var:N> ^ <nat:3> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <nat:6> * <var:N> /\ <var:Q2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:Q3> = <nat:8> * <var:N> ^ <nat:3> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <nat:6> * <var:N> /\ <var:Q2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:Q0> = <nat:6> /\ <var:K> = <nat:8> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q1> = <nat:6> * <var:N> /\ <var:Q0> = <nat:6> /\ <var:K> = <nat:8> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Q0> = <nat:6> /\ <var:K> = <nat:8> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:K> = <nat:8> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 