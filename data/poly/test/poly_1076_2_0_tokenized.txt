\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:3> ; <var:k> := <var:D0> \end{verbatim} Assume given $ <var:l> \in \mathbb{Z}^+ $ that we have $ <var:s> = <var:l> $ ahead of evaluating our list of instructions it holds that $ <var:k> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is evident with usual Hoare techniques . Immediately after , we see the assignment code \verb | <var:D0> := <nat:3> ; | . This line redefines $ \{ <var:s> = <var:l> \} $ as the condition $ \{ <var:s> = <var:l> \land <var:D0> = <nat:3> \} $ . Shifting focus toward the following command contained in our program , we have the variable binding code \verb | <var:k> := <var:D0> | . This command transfers $ \{ <var:s> = <var:l> \land <var:D0> = <nat:3> \} $ to $ \{ <var:s> = <var:l> \land <var:k> = <nat:3> \} $ . This is shown to be logically sound by the assignment scheme given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:s> = <var:l> }} <var:D0> := <nat:3> ; <var:k> := <var:D0> {{ <var:k> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:k> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 