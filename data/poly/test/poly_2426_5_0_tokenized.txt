\begin{document} \begin{theorem} Take the following list of instructions such that \begin{verbatim} <var:b0> := <nat:3> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:h> ; <var:s> := <var:b1> ; <var:s> := <var:s> + <var:b0> \end{verbatim} Given ( for positive integer coefficients $ <var:I> $ ) $ <var:h> = <var:I> $ ahead of interpreting our code it holds that we see $ <var:s> = <nat:4> \times <var:I> + <nat:3> $ once series of instructions terminates . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be demonstrated through Hoare techniques . Taking another step toward the following bit of code found in our series of instructions , we see the assignment code \verb | <var:b0> := <nat:3> ; | . This statement transfers the condition $ \{ <var:h> = <var:I> \} $ to the condition $ \{ <var:h> = <var:I> \land <var:b0> = <nat:3> \} $ . This is sound using the assignment inference rule defined by Hoare techniques . Moving onward , we see the environment update line letting $ <nat:4> $ into $ <var:b1>$ . This redefines the precondition $ \{ <var:h> = <var:I> \land <var:b0> = <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:I> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \} $ . Observing the next line of code found in the program , the variable binding code \verb | <var:b1> := <var:b1> * <var:h> ; | . This advances the precondition $ \{ <var:h> = <var:I> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \} $ into $ \{ <var:h> = <var:I> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \times <var:I> \} $ . This is ensured with the assignment scheme in standard Hoare techniques . Moving on , the variable assignmet command \verb | <var:s> := <var:b1> ; | . This line takes the condition $ \{ <var:h> = <var:I> \land <var:b0> = <nat:3> \land <var:b1> = <nat:4> \times <var:I> \} $ as the condition $ \{ <var:h> = <var:I> \land <var:b0> = <nat:3> \land <var:s> = <nat:4> \times <var:I> \} $ . Taking a look at the proceeding step contained in our code , the environment update line \verb | <var:s> := <var:s> + <var:b0> | . This redefines the precondition $ \{ <var:h> = <var:I> \land <var:b0> = <nat:3> \land <var:s> = <nat:4> \times <var:I> \} $ to the postcondition $ \{ <var:h> = <var:I> \land <var:s> = <nat:4> \times <var:I> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:h> = <var:I> }} <var:b0> := <nat:3> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:h> ; <var:s> := <var:b1> ; <var:s> := <var:s> + <var:b0> {{ <var:s> = <nat:4> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:b0> = <nat:3> /\ <var:s> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:s> = <nat:4> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 