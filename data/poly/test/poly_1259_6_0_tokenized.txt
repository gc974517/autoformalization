\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:5> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:e> ; <var:m2> := <var:m2> * <var:e> ; <var:J> := <var:m2> ; <var:J> := <var:J> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:e> = <var:D> $ ( for every integers $ <var:D> $ ) prior to interpreting our list of instructions , it follows that we have $ <var:J> = <nat:9> * <var:D> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} The argument for our program can be accomplished through Hoare logic . Paying attention to the following statement seen in the series of commands , we have the variable update code \verb | <var:m0> := <nat:5> ; | . This forwards the condition $ \{ <var:e> = <var:D> \} $ as the condition $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \} $ . This is rigorously given with the assignment inference rule obtained from typical Hoare techniques . Moving forward , the variable assignmet statement yielding $ <nat:9> $ as $ <var:m2>$ . This forwards $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \} $ toward $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \land <var:m2> = <nat:9> \} $ . This is deduced by the assignment law obtained from usual Hoare reasoning . Further , we have the assignment code \verb | <var:m2> := <var:m2> * <var:e> ; | . This forwards $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \land <var:m2> = <nat:9> \} $ as the postcondition $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \land <var:m2> = <nat:9> \times <var:D> \} $ . Taking a look at the subsequent bit of code seen in our segment of code , we see the variable assignmet line \verb | <var:m2> := <var:m2> * <var:e> ; | . This moves the precondition $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \land <var:m2> = <nat:9> \times <var:D> \} $ as $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \land <var:m2> = <nat:9> \times <var:D> ^ <nat:2> \} $ . Stepping through , the binding command giving $ <var:m2> $ toward $ <var:J>$ . This redefines the precondition $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \land <var:m2> = <nat:9> \times <var:D> ^ <nat:2> \} $ to the condition $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \land <var:J> = <nat:9> \times <var:D> ^ <nat:2> \} $ . Advancing to the next command seen in the segment of code , we have the variable update line \verb | <var:J> := <var:J> + <var:m0> | . This takes the precondition $ \{ <var:e> = <var:D> \land <var:m0> = <nat:5> \land <var:J> = <nat:9> \times <var:D> ^ <nat:2> \} $ as $ \{ <var:e> = <var:D> \land <var:J> = <nat:9> \times <var:D> ^ <nat:2> + <nat:5> \} $ . This is guaranteed by the assignment law in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m0> := <nat:5> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:e> ; <var:m2> := <var:m2> * <var:e> ; <var:J> := <var:m2> ; <var:J> := <var:J> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:e> = <var:D> }} <def:poly> {{ <var:J> = <nat:9> * <var:D> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:m0> = <nat:5> /\ <var:m2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:m0> = <nat:5> /\ <var:m2> = <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:m0> = <nat:5> /\ <var:m2> = <nat:9> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:m0> = <nat:5> /\ <var:J> = <nat:9> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:J> = <nat:9> * <var:D> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 