\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:d> := <nat:3> ; <var:d> := <nat:4> + <var:d> * <var:v> \end{verbatim} Allowing it to be that $ <var:v> = <var:J> $ , for any positive coefficients $ <var:J> $ , ahead of executing our series of commands it holds that $ <var:d> = <nat:3> \cdot <var:J> + <nat:4> $ when set of instructions is done . \end{theorem} \begin{proof} Utilizing standard Hoare techniques returns : \begin{eqnarray} \{ <var:v> = <var:J> \} \\ <var:d> := <nat:3> ; \\ \{ <var:v> = <var:J> \land <var:d> = <nat:3> \} \\ <var:d> := <nat:4> + <var:d> * <var:v> \\ \{ <var:v> = <var:J> \land <var:d> = <nat:3> \cdot <var:J> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:v> = <var:J> }} <var:d> := <nat:3> ; <var:d> := <nat:4> + <var:d> * <var:v> {{ <var:d> = <nat:3> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:d> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:d> = <nat:3> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 