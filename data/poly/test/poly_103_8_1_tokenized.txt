\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:P1> := <var:E> ; <var:P2> := <var:P1> * <var:E> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:5> ; <var:P2> := <var:P2> * <nat:4> ; <var:u> := <var:P2> <var:u> := <var:u> + <var:P1> <var:u> := <var:u> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:E> = <var:n> $ before executing this list of commands , it holds that $ <var:u> = <nat:4> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:1> $ after series of instructions is done executing . \end{theorem} \begin{proof} The application of usual Hoare techniques gives : \begin{eqnarray} \{ <var:E> = <var:n> \} \\ <var:P1> := <var:E> ; \\ \{ <var:E> = <var:n> \land <var:P1> = <var:n> \} \\ <var:P2> := <var:P1> * <var:E> ; \\ \{ <var:E> = <var:n> \land <var:P1> = <var:n> \land <var:P2> = <var:n> ^ <nat:2> \} \\ <var:P0> := <nat:1> ; \\ \{ <var:E> = <var:n> \land <var:P1> = <var:n> \land <var:P2> = <var:n> ^ <nat:2> \land <var:P0> = <nat:1> \} \\ <var:P1> := <var:P1> * <nat:5> ; \\ \{ <var:E> = <var:n> \land <var:P1> = <nat:5> \cdot <var:n> \land <var:P2> = <var:n> ^ <nat:2> \land <var:P0> = <nat:1> \} \\ <var:P2> := <var:P2> * <nat:4> ; \\ \{ <var:E> = <var:n> \land <var:P1> = <nat:5> \cdot <var:n> \land <var:P2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:P0> = <nat:1> \} \\ <var:u> := <var:P2> \\ \{ <var:E> = <var:n> \land <var:P1> = <nat:5> \cdot <var:n> \land <var:P0> = <nat:1> \land <var:u> = <nat:4> \cdot <var:n> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:P1> \\ \{ <var:E> = <var:n> \land <var:P0> = <nat:1> \land <var:u> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:5> \cdot <var:n> \} \\ <var:u> := <var:u> + <var:P0> \\ \{ <var:E> = <var:n> \land <var:u> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:5> \cdot <var:n> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P1> := <var:E> ; <var:P2> := <var:P1> * <var:E> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:5> ; <var:P2> := <var:P2> * <nat:4> ; <var:u> := <var:P2> <var:u> := <var:u> + <var:P1> <var:u> := <var:u> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:E> = <var:n> }} <def:poly> {{ <var:u> = <nat:4> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:n> /\ <var:P1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:n> /\ <var:P1> = <var:n> /\ <var:P2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:n> /\ <var:P1> = <var:n> /\ <var:P2> = <var:n> ^ <nat:2> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:n> /\ <var:P1> = <nat:5> * <var:n> /\ <var:P2> = <var:n> ^ <nat:2> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:n> /\ <var:P1> = <nat:5> * <var:n> /\ <var:P2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:n> /\ <var:P1> = <nat:5> * <var:n> /\ <var:P0> = <nat:1> /\ <var:u> = <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:n> /\ <var:P0> = <nat:1> /\ <var:u> = <nat:4> * <var:n> ^ <nat:2> + <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:n> /\ <var:u> = <nat:4> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 