\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:L> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:L> ; <var:Z2> := <var:Z2> * <var:L> ; <var:Z3> := <nat:4> ; <var:Z3> := <var:Z3> * <var:L> ; <var:Z3> := <var:Z3> * <var:L> ; <var:Z3> := <var:Z3> * <var:L> ; <var:G> := <var:Z3> ; <var:G> := <var:G> + <var:Z2> ; <var:G> := <var:G> + <var:Z1> ; <var:G> := <var:G> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Allowing it to be that $ <var:L> = <var:F> $ --- letting $ <var:F> $ --- prior to evaluating this program then we see $ <var:G> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:3> $ when series of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:F> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \} \\ <var:Z1> := <nat:4> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> \} \\ <var:Z1> := <var:Z1> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \} \\ <var:Z2> := <nat:4> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:Z2> = <nat:4> \} \\ <var:Z2> := <var:Z2> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:Z2> = <nat:4> * <var:F> \} \\ <var:Z2> := <var:Z2> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:Z2> = <nat:4> * <var:F> ^ <nat:2> \} \\ <var:Z3> := <nat:4> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:Z2> = <nat:4> * <var:F> ^ <nat:2> \land <var:Z3> = <nat:4> \} \\ <var:Z3> := <var:Z3> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:Z2> = <nat:4> * <var:F> ^ <nat:2> \land <var:Z3> = <nat:4> * <var:F> \} \\ <var:Z3> := <var:Z3> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:Z2> = <nat:4> * <var:F> ^ <nat:2> \land <var:Z3> = <nat:4> * <var:F> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:Z2> = <nat:4> * <var:F> ^ <nat:2> \land <var:Z3> = <nat:4> * <var:F> ^ <nat:3> \} \\ <var:G> := <var:Z3> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:Z2> = <nat:4> * <var:F> ^ <nat:2> \land <var:G> = <nat:4> * <var:F> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:Z2> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:4> * <var:F> \land <var:G> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:Z1> ; \\ \{ <var:L> = <var:F> \land <var:Z0> = <nat:3> \land <var:G> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> \} \\ <var:G> := <var:G> + <var:Z0> \\ \{ <var:L> = <var:F> \land <var:G> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:3> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:L> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:L> ; <var:Z2> := <var:Z2> * <var:L> ; <var:Z3> := <nat:4> ; <var:Z3> := <var:Z3> * <var:L> ; <var:Z3> := <var:Z3> * <var:L> ; <var:Z3> := <var:Z3> * <var:L> ; <var:G> := <var:Z3> ; <var:G> := <var:G> + <var:Z2> ; <var:G> := <var:G> + <var:Z1> ; <var:G> := <var:G> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:L> = <var:F> }} <def:poly> {{ <var:G> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:Z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:Z2> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:Z2> = <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:Z2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:Z3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:Z2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:Z3> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:Z2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:Z3> = <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:Z2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:Z3> = <nat:4> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:Z2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:G> = <nat:4> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:4> * <var:F> /\ <var:G> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:Z0> = <nat:3> /\ <var:G> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:G> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 