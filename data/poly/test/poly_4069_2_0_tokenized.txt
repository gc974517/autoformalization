\begin{document} \begin{theorem} Define a code : \begin{verbatim} <var:D0> := <nat:1> ; <var:l> := <var:D0> \end{verbatim} Allowing that $ <var:y> = <var:a> $ --- for any natural numbers $ <var:a> $ --- prior to executing this set of commands , it must be that we have $ <var:l> = <nat:1> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:y> = <var:a> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:y> = <var:a> \land <var:D0> = <nat:1> \} \\ <var:l> := <var:D0> \\ \{ <var:y> = <var:a> \land <var:l> = <nat:1> \} \end{eqnarray} As a result , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:y> = <var:a> }} <var:D0> := <nat:1> ; <var:l> := <var:D0> {{ <var:l> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:l> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 