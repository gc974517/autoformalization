\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as \begin{verbatim} <var:D1> := <var:z> ; <var:D2> := <var:D1> * <var:z> ; <var:D3> := <var:D2> * <var:z> ; <var:D0> := <nat:7> ; <var:D1> := <var:D1> * <nat:9> ; <var:D3> := <var:D3> * <nat:7> ; <var:E> := <var:D3> <var:E> := <var:E> + <var:D1> <var:E> := <var:E> + <var:D0> \end{verbatim} Assuming that $ <var:z> = <var:h> $ prior to evaluating this series of commands , it must be that we see $ <var:E> = <nat:7> * <var:h> ^ <nat:3> + <nat:9> * <var:h> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for the program is done by Hoare techniques . Focusing on the next piece of code contained in the code , we see the variable binding command \verb | <var:D1> := <var:z> ; | . This code forwards $ \{ <var:z> = <var:h> \} $ into $ \{ <var:z> = <var:h> \land <var:D1> = <var:h> \} $ . This is ensured with the assignment law found in typical Hoare logic . Paying attention to the subsequent command contained in the segment of code , we see the environment update code \verb | <var:D2> := <var:D1> * <var:z> ; | . This takes the precondition $ \{ <var:z> = <var:h> \land <var:D1> = <var:h> \} $ toward the condition $ \{ <var:z> = <var:h> \land <var:D1> = <var:h> \land <var:D2> = <var:h> ^ <nat:2> \} $ . Looking at the upcoming line seen in the program , we see the variable assignmet code assigning $ <var:D2> * <var:z> $ toward $ <var:D3>$ . This command transfers the precondition $ \{ <var:z> = <var:h> \land <var:D1> = <var:h> \land <var:D2> = <var:h> ^ <nat:2> \} $ into the condition $ \{ <var:z> = <var:h> \land <var:D1> = <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D3> = <var:h> ^ <nat:3> \} $ . This is ensured with the assignment law from typical Hoare logic . Moving on , we see the variable assignmet code \verb | <var:D0> := <nat:7> ; | . This advances the condition $ \{ <var:z> = <var:h> \land <var:D1> = <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D3> = <var:h> ^ <nat:3> \} $ as the condition $ \{ <var:z> = <var:h> \land <var:D1> = <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D3> = <var:h> ^ <nat:3> \land <var:D0> = <nat:7> \} $ . This is rigorously given using the assignment inference rule defined in Hoare logic . Focusing on the proceeding command contained in the series of commands , we see the variable update code \verb | <var:D1> := <var:D1> * <nat:9> ; | . This takes the precondition $ \{ <var:z> = <var:h> \land <var:D1> = <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D3> = <var:h> ^ <nat:3> \land <var:D0> = <nat:7> \} $ to $ \{ <var:z> = <var:h> \land <var:D1> = <nat:9> \times <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D3> = <var:h> ^ <nat:3> \land <var:D0> = <nat:7> \} $ . This is guaranteed through the assignment rule found in usual Hoare reasoning . Now , the binding line \verb | <var:D3> := <var:D3> * <nat:7> ; | . This transfers the precondition $ \{ <var:z> = <var:h> \land <var:D1> = <nat:9> \times <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D3> = <var:h> ^ <nat:3> \land <var:D0> = <nat:7> \} $ to the postcondition $ \{ <var:z> = <var:h> \land <var:D1> = <nat:9> \times <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D3> = <nat:7> \times <var:h> ^ <nat:3> \land <var:D0> = <nat:7> \} $ . Going to the next step , we see the binding command giving $ <var:D3$ toward $ <var:E>$ . This forwards the precondition $ \{ <var:z> = <var:h> \land <var:D1> = <nat:9> \times <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D3> = <nat:7> \times <var:h> ^ <nat:3> \land <var:D0> = <nat:7> \} $ toward the condition $ \{ <var:z> = <var:h> \land <var:D1> = <nat:9> \times <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D0> = <nat:7> \land <var:E> = <nat:7> \times <var:h> ^ <nat:3> \} $ . This is ensured through the assignment scheme given by Hoare reasoning . Advancing , we have the binding line binding $ <var:E> + <var:D1$ as $ <var:E>$ . This line takes $ \{ <var:z> = <var:h> \land <var:D1> = <nat:9> \times <var:h> \land <var:D2> = <var:h> ^ <nat:2> \land <var:D0> = <nat:7> \land <var:E> = <nat:7> \times <var:h> ^ <nat:3> \} $ toward the postcondition $ \{ <var:z> = <var:h> \land <var:D0> = <nat:7> \land <var:E> = <nat:7> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> \} $ . Shifting focus toward the subsequent statement seen in the list of commands , the variable update statement letting $ <var:E> + <var:D0$ to $ <var:E>$ . This advances the condition $ \{ <var:z> = <var:h> \land <var:D0> = <nat:7> \land <var:E> = <nat:7> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> \} $ toward $ \{ <var:z> = <var:h> \land <var:E> = <nat:7> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> + <nat:7> \} $ . This is given using the assignment inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:z> = <var:h> }} <var:D1> := <var:z> ; <var:D2> := <var:D1> * <var:z> ; <var:D3> := <var:D2> * <var:z> ; <var:D0> := <nat:7> ; <var:D1> := <var:D1> * <nat:9> ; <var:D3> := <var:D3> * <nat:7> ; <var:E> := <var:D3> <var:E> := <var:E> + <var:D1> <var:E> := <var:E> + <var:D0> {{ <var:E> = <nat:7> * <var:h> ^ <nat:3> + <nat:9> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:D1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:D1> = <var:h> /\ <var:D2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:D1> = <var:h> /\ <var:D2> = <var:h> ^ <nat:2> /\ <var:D3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:D1> = <var:h> /\ <var:D2> = <var:h> ^ <nat:2> /\ <var:D3> = <var:h> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <var:h> ^ <nat:2> /\ <var:D3> = <var:h> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <var:h> ^ <nat:2> /\ <var:D3> = <nat:7> * <var:h> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:D1> = <nat:9> * <var:h> /\ <var:D2> = <var:h> ^ <nat:2> /\ <var:D0> = <nat:7> /\ <var:E> = <nat:7> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:D0> = <nat:7> /\ <var:E> = <nat:7> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:E> = <nat:7> * <var:h> ^ <nat:3> + <nat:9> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 