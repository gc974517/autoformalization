\begin{document} \begin{theorem} Define the following segment of code as \begin{verbatim} <var:u0> := <nat:1> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:p> ; <var:u2> := <nat:9> ; <var:u2> := <var:u2> * <var:p> ; <var:u2> := <var:u2> * <var:p> ; <var:u3> := <nat:8> ; <var:u3> := <var:u3> * <var:p> ; <var:u3> := <var:u3> * <var:p> ; <var:u3> := <var:u3> * <var:p> ; <var:c> := <var:u3> ; <var:c> := <var:c> + <var:u2> ; <var:c> := <var:c> + <var:u1> ; <var:c> := <var:c> + <var:u0> \end{verbatim} Allowing that $ <var:p> = <var:A> $ prior to evaluating this series of commands , it follows that $ <var:c> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is shown using typical Hoare logic . Shifting focus toward the subsequent bit of code in our set of instructions , we see the variable binding statement binding $ <nat:1> $ as $ <var:u0>$ . This transfers the condition $ \{ <var:p> = <var:A> \} $ to $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \} $ . Taking another step toward the next command contained in the set of commands , the assignment code \verb | <var:u1> := <nat:4> ; | . This line takes the condition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \} $ as the postcondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \} $ . This is ensured by the assignment inference rule in typical Hoare techniques . Now , the variable update line \verb | <var:u1> := <var:u1> * <var:p> ; | . This line forwards the precondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \} $ as $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \} $ . Observing the subsequent step seen in the set of instructions , we see the variable binding code assigning $ <nat:9> $ as $ <var:u2>$ . This command redefines the precondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \} $ into the condition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \} $ . This is sound with the assignment law of Hoare reasoning . Advancing , the variable update statement \verb | <var:u2> := <var:u2> * <var:p> ; | . This takes the condition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \} $ into $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> \} $ . This is deduced with the assignment scheme in Hoare reasoning . Stepping forward , the variable update line \verb | <var:u2> := <var:u2> * <var:p> ; | . This redefines the precondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> \} $ into the postcondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \} $ . This is shown using the assignment law defined in usual Hoare techniques . Considering the upcoming bit of code found in the series of instructions , we see the variable update command \verb | <var:u3> := <nat:8> ; | . This transfers the condition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \} $ toward $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:u3> = <nat:8> \} $ . Moving on , the statement yielding $ <var:u3> * <var:p> $ toward $ <var:u3>$ . This statement moves the condition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:u3> = <nat:8> \} $ into the condition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:u3> = <nat:8> \cdot <var:A> \} $ . Immediately after , we see the binding statement yielding $ <var:u3> * <var:p> $ into $ <var:u3>$ . This statement takes $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:u3> = <nat:8> \cdot <var:A> \} $ into the postcondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:u3> = <nat:8> \cdot <var:A> ^ <nat:2> \} $ . Jumping to the subsequent bit of code in our set of instructions , we see the line \verb | <var:u3> := <var:u3> * <var:p> ; | . This advances $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:u3> = <nat:8> \cdot <var:A> ^ <nat:2> \} $ toward the condition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:u3> = <nat:8> \cdot <var:A> ^ <nat:3> \} $ . This is deduced using the assignment scheme in Hoare logic . Paying attention to the subsequent statement in the code , we have the environment update statement defining $ <var:u3> $ to $ <var:c>$ . This command moves the precondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:u3> = <nat:8> \cdot <var:A> ^ <nat:3> \} $ to $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:c> = <nat:8> \cdot <var:A> ^ <nat:3> \} $ . This is known to be sound with the assignment inference rule found in typical Hoare logic . After , the variable assignmet command assigning $ <var:c> + <var:u2> $ into $ <var:c>$ . This takes $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:u2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:c> = <nat:8> \cdot <var:A> ^ <nat:3> \} $ to the postcondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:c> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> \} $ . Advancing to the subsequent line of code found in the program , the environment update code defining $ <var:c> + <var:u1> $ into $ <var:c>$ . This statement advances the condition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:u1> = <nat:4> \cdot <var:A> \land <var:c> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> \} $ as the postcondition $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:c> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> \} $ . This is known to be sound through the assignment law given by standard Hoare reasoning . Immediately after , the variable update line \verb | <var:c> := <var:c> + <var:u0> | . This takes $ \{ <var:p> = <var:A> \land <var:u0> = <nat:1> \land <var:c> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> \} $ into $ \{ <var:p> = <var:A> \land <var:c> = <nat:8> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:1> \} $ . This is shown to be logically sound using the assignment scheme given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:p> = <var:A> }} <var:u0> := <nat:1> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:p> ; <var:u2> := <nat:9> ; <var:u2> := <var:u2> * <var:p> ; <var:u2> := <var:u2> * <var:p> ; <var:u3> := <nat:8> ; <var:u3> := <var:u3> * <var:p> ; <var:u3> := <var:u3> * <var:p> ; <var:u3> := <var:u3> * <var:p> ; <var:c> := <var:u3> ; <var:c> := <var:c> + <var:u2> ; <var:c> := <var:c> + <var:u1> ; <var:c> := <var:c> + <var:u0> {{ <var:c> = <nat:8> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:u2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:u2> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:u2> = <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:u2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:u3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:u2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:u3> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:u2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:u3> = <nat:8> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:u2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:u3> = <nat:8> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:u2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:c> = <nat:8> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:4> * <var:A> /\ <var:c> = <nat:8> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:u0> = <nat:1> /\ <var:c> = <nat:8> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:A> /\ <var:c> = <nat:8> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 