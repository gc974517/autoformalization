\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:M> ; <var:P2> := <var:P1> * <var:M> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:3> ; <var:P2> := <var:P2> * <nat:9> ; <var:o> := <var:P2> <var:o> := <var:o> + <var:P1> <var:o> := <var:o> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Assuming for any natural numbers $ <var:G> $ it to be that $ <var:M> = <var:G> $ prior to the execution of our list of commands it follows that we have $ <var:o> = <nat:9> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:4> $ when set of instructions exits . \end{theorem} \begin{proof} Utilizing usual Hoare logic returns : \begin{eqnarray} \{ <var:M> = <var:G> \} \\ <var:P1> := <var:M> ; \\ \{ <var:M> = <var:G> \land <var:P1> = <var:G> \} \\ <var:P2> := <var:P1> * <var:M> ; \\ \{ <var:M> = <var:G> \land <var:P1> = <var:G> \land <var:P2> = <var:G> ^ <nat:2> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:M> = <var:G> \land <var:P1> = <var:G> \land <var:P2> = <var:G> ^ <nat:2> \land <var:P0> = <nat:4> \} \\ <var:P1> := <var:P1> * <nat:3> ; \\ \{ <var:M> = <var:G> \land <var:P1> = <nat:3> \times <var:G> \land <var:P2> = <var:G> ^ <nat:2> \land <var:P0> = <nat:4> \} \\ <var:P2> := <var:P2> * <nat:9> ; \\ \{ <var:M> = <var:G> \land <var:P1> = <nat:3> \times <var:G> \land <var:P2> = <nat:9> \times <var:G> ^ <nat:2> \land <var:P0> = <nat:4> \} \\ <var:o> := <var:P2> \\ \{ <var:M> = <var:G> \land <var:P1> = <nat:3> \times <var:G> \land <var:P0> = <nat:4> \land <var:o> = <nat:9> \times <var:G> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:P1> \\ \{ <var:M> = <var:G> \land <var:P0> = <nat:4> \land <var:o> = <nat:9> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> \} \\ <var:o> := <var:o> + <var:P0> \\ \{ <var:M> = <var:G> \land <var:o> = <nat:9> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P1> := <var:M> ; <var:P2> := <var:P1> * <var:M> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:3> ; <var:P2> := <var:P2> * <nat:9> ; <var:o> := <var:P2> <var:o> := <var:o> + <var:P1> <var:o> := <var:o> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:M> = <var:G> }} <def:poly> {{ <var:o> = <nat:9> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:P1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:P1> = <var:G> /\ <var:P2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:P1> = <var:G> /\ <var:P2> = <var:G> ^ <nat:2> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:P1> = <nat:3> * <var:G> /\ <var:P2> = <var:G> ^ <nat:2> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:P1> = <nat:3> * <var:G> /\ <var:P2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:P1> = <nat:3> * <var:G> /\ <var:P0> = <nat:4> /\ <var:o> = <nat:9> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:P0> = <nat:4> /\ <var:o> = <nat:9> * <var:G> ^ <nat:2> + <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:o> = <nat:9> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 