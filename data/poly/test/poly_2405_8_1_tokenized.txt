\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:M1> := <var:h> ; <var:M2> := <var:M1> * <var:h> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:4> ; <var:i> := <var:M2> <var:i> := <var:i> + <var:M1> <var:i> := <var:i> + <var:M0> \end{verbatim} Assuming that $ <var:h> = <var:p> $ , for any $ <var:p> \in \mathbb{N} $ , before interpreting the set of commands , it must be that we have $ <var:i> = <nat:4> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program can be demonstrated using standard Hoare logic . Considering the subsequent statements in the segment of code , we have \begin{eqnarray} \{ <var:h> = <var:p> \} \, <var:M1> := <var:h> \, \{ <var:h> = <var:p> \land <var:M1> = <var:p> \} \\ \{ <var:h> = <var:p> \land <var:M1> = <var:p> \} \, <var:M2> := <var:M1> * <var:h> \, \{ <var:h> = <var:p> \land <var:M1> = <var:p> \land <var:M2> = <var:p> ^ <nat:2> \} \\ \{ <var:h> = <var:p> \land <var:M1> = <var:p> \land <var:M2> = <var:p> ^ <nat:2> \} \, <var:M0> := <nat:2> \, \{ <var:h> = <var:p> \land <var:M1> = <var:p> \land <var:M2> = <var:p> ^ <nat:2> \land <var:M0> = <nat:2> \} \\ \{ <var:h> = <var:p> \land <var:M1> = <var:p> \land <var:M2> = <var:p> ^ <nat:2> \land <var:M0> = <nat:2> \} \, <var:M1> := <var:M1> * <nat:4> \, \{ <var:h> = <var:p> \land <var:M1> = <nat:4> \cdot <var:p> \land <var:M2> = <var:p> ^ <nat:2> \land <var:M0> = <nat:2> \} \\ \{ <var:h> = <var:p> \land <var:M1> = <nat:4> \cdot <var:p> \land <var:M2> = <var:p> ^ <nat:2> \land <var:M0> = <nat:2> \} \, <var:M2> := <var:M2> * <nat:4> \, \{ <var:h> = <var:p> \land <var:M1> = <nat:4> \cdot <var:p> \land <var:M2> = <nat:4> \cdot <var:p> ^ <nat:2> \land <var:M0> = <nat:2> \} \end{eqnarray} This is rigorously given with the environment update law in standard Hoare logic . Going forward , we see \begin{eqnarray} \{ <var:h> = <var:p> \} \, <var:M1> := <var:h> \, \{ <var:h> = <var:p> \land <var:M1> = <var:p> \} \end{eqnarray} Next , we see \begin{eqnarray} \{ <var:h> = <var:p> \} \, <var:M1> := <var:h> \, \{ <var:h> = <var:p> \land <var:M1> = <var:p> \} \\ \{ <var:h> = <var:p> \land <var:M1> = <var:p> \} \, <var:M2> := <var:M1> * <var:h> \, \{ <var:h> = <var:p> \land <var:M1> = <var:p> \land <var:M2> = <var:p> ^ <nat:2> \} \end{eqnarray} This is guaranteed by the rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:h> = <var:p> }} <var:M1> := <var:h> ; <var:M2> := <var:M1> * <var:h> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:4> ; <var:i> := <var:M2> <var:i> := <var:i> + <var:M1> <var:i> := <var:i> + <var:M0> {{ <var:i> = <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:M1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:M1> = <var:p> /\ <var:M2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:M1> = <var:p> /\ <var:M2> = <var:p> ^ <nat:2> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:M1> = <nat:4> * <var:p> /\ <var:M2> = <var:p> ^ <nat:2> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:M1> = <nat:4> * <var:p> /\ <var:M2> = <nat:4> * <var:p> ^ <nat:2> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:M1> = <nat:4> * <var:p> /\ <var:M0> = <nat:2> /\ <var:i> = <nat:4> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:M0> = <nat:2> /\ <var:i> = <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:p> /\ <var:i> = <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 