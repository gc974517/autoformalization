\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:9> ; <var:H> := <var:o0> \end{verbatim} Allowing ( given some positive coefficients $ <var:n> $ ) that $ <var:O> = <var:n> $ before running this series of instructions , then we see $ <var:H> = <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code is given with standard Hoare techniques . Honing in on the proceeding command in our set of commands , we see the variable update line giving $ <nat:9> $ toward $ <var:o0>$ . This forwards the condition $ \{ <var:O> = <var:n> \} $ into the condition $ \{ <var:O> = <var:n> \land <var:o0> = <nat:9> \} $ . This is ensured with the assignment rule given by typical Hoare logic . Taking another step toward the next step contained in the program , the environment update line defining $ <var:o0$ to $ <var:H>$ . This statement transfers $ \{ <var:O> = <var:n> \land <var:o0> = <nat:9> \} $ to the condition $ \{ <var:O> = <var:n> \land <var:H> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:O> = <var:n> }} <var:o0> := <nat:9> ; <var:H> := <var:o0> {{ <var:H> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:H> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 