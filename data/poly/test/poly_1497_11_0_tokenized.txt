\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:9> ; <var:B2> := <nat:5> ; <var:B2> := <var:B2> * <var:q> ; <var:B2> := <var:B2> * <var:q> ; <var:B3> := <nat:1> ; <var:B3> := <var:B3> * <var:q> ; <var:B3> := <var:B3> * <var:q> ; <var:B3> := <var:B3> * <var:q> ; <var:S> := <var:B3> ; <var:S> := <var:S> + <var:B2> ; <var:S> := <var:S> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:q> = <var:m> $ , given positive integer coefficients $ <var:m> $ , ahead of interpreting this program it holds that $ <var:S> = <nat:1> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be demonstrated with standard Hoare reasoning . Moving forward to the next step , the binding code assigning $ <nat:9> $ toward $ <var:B0>$ . This moves $ \{ <var:q> = <var:m> \} $ as the postcondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \} $ . Stepping through , we have the variable binding command \verb | <var:B2> := <nat:5> ; | . This command takes the precondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \} $ into the postcondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \} $ . Moving forward to the next step , we see the variable update line binding $ <var:B2> * <var:q> $ as $ <var:B2>$ . This advances $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \} $ into $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> \} $ . This is shown by the assignment law given in standard Hoare techniques . Now , we have the variable binding line yielding $ <var:B2> * <var:q> $ as $ <var:B2>$ . This line takes the precondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> \} $ as the postcondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment scheme from standard Hoare logic . Looking at the subsequent bit of code in our list of commands , we have the variable update command \verb | <var:B3> := <nat:1> ; | . This statement transfers the precondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \} $ as the condition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:B3> = <nat:1> \} $ . This is ensured using the assignment law defined in typical Hoare reasoning . Honing in on the upcoming piece of code seen in our code , we have the variable assignmet command assigning $ <var:B3> * <var:q> $ as $ <var:B3>$ . This line transfers the condition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:B3> = <nat:1> \} $ toward $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:B3> = <nat:1> \cdot <var:m> \} $ . Going to the next step , we have the binding statement giving $ <var:B3> * <var:q> $ toward $ <var:B3>$ . This takes $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:B3> = <nat:1> \cdot <var:m> \} $ as the condition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:B3> = <nat:1> \cdot <var:m> ^ <nat:2> \} $ . Focusing on the following line of code in our list of instructions , we have the environment update line \verb | <var:B3> := <var:B3> * <var:q> ; | . This transfers $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:B3> = <nat:1> \cdot <var:m> ^ <nat:2> \} $ as $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:B3> = <nat:1> \cdot <var:m> ^ <nat:3> \} $ . Honing in on the proceeding piece of code seen in the set of instructions , we have the variable assignmet statement \verb | <var:S> := <var:B3> ; | . This code redefines the condition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:B3> = <nat:1> \cdot <var:m> ^ <nat:3> \} $ to the postcondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:S> = <nat:1> \cdot <var:m> ^ <nat:3> \} $ . Stepping forward , we see the line assigning $ <var:S> + <var:B2> $ into $ <var:S>$ . This takes the precondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:B2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:S> = <nat:1> \cdot <var:m> ^ <nat:3> \} $ to the postcondition $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:S> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> \} $ . After , we see the binding code assigning $ <var:S> + <var:B0$ toward $ <var:S>$ . This transfers $ \{ <var:q> = <var:m> \land <var:B0> = <nat:9> \land <var:S> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> \} $ as the condition $ \{ <var:q> = <var:m> \land <var:S> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:9> \} $ . This is shown through the assignment scheme defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B0> := <nat:9> ; <var:B2> := <nat:5> ; <var:B2> := <var:B2> * <var:q> ; <var:B2> := <var:B2> * <var:q> ; <var:B3> := <nat:1> ; <var:B3> := <var:B3> * <var:q> ; <var:B3> := <var:B3> * <var:q> ; <var:B3> := <var:B3> * <var:q> ; <var:S> := <var:B3> ; <var:S> := <var:S> + <var:B2> ; <var:S> := <var:S> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:q> = <var:m> }} <def:poly> {{ <var:S> = <nat:1> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:B3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:B2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:S> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:B0> = <nat:9> /\ <var:S> = <nat:1> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:S> = <nat:1> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 