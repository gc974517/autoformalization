\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:4> ; <var:S1> := <var:S1> * <var:a> ; <var:S2> := <nat:2> ; <var:S2> := <var:S2> * <var:a> ; <var:S2> := <var:S2> * <var:a> ; <var:S3> := <nat:9> ; <var:S3> := <var:S3> * <var:a> ; <var:S3> := <var:S3> * <var:a> ; <var:S3> := <var:S3> * <var:a> ; <var:T> := <var:S3> ; <var:T> := <var:T> + <var:S2> ; <var:T> := <var:T> + <var:S1> ; <var:T> := <var:T> + <var:S0> \end{verbatim} Assume $ <var:a> = <var:b> $ ahead of running the series of commands , it follows that we see $ <var:T> = <nat:9> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:8> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:a> = <var:b> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \} \\ <var:S1> := <nat:4> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \} \\ <var:S1> := <var:S1> * <var:a> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \} \\ <var:S2> := <nat:2> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:S2> = <nat:2> \} \\ <var:S2> := <var:S2> * <var:a> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:S2> = <nat:2> \cdot <var:b> \} \\ <var:S2> := <var:S2> * <var:a> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:S2> = <nat:2> \cdot <var:b> ^ <nat:2> \} \\ <var:S3> := <nat:9> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:S2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:S3> = <nat:9> \} \\ <var:S3> := <var:S3> * <var:a> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:S2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:b> \} \\ <var:S3> := <var:S3> * <var:a> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:S2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:b> ^ <nat:2> \} \\ <var:S3> := <var:S3> * <var:a> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:S2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:b> ^ <nat:3> \} \\ <var:T> := <var:S3> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:S2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:T> = <nat:9> \cdot <var:b> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:S2> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:4> \cdot <var:b> \land <var:T> = <nat:9> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:S1> ; \\ \{ <var:a> = <var:b> \land <var:S0> = <nat:8> \land <var:T> = <nat:9> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> \} \\ <var:T> := <var:T> + <var:S0> \\ \{ <var:a> = <var:b> \land <var:T> = <nat:9> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:8> \} \end{eqnarray} As a result , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:a> = <var:b> }} <var:S0> := <nat:8> ; <var:S1> := <nat:4> ; <var:S1> := <var:S1> * <var:a> ; <var:S2> := <nat:2> ; <var:S2> := <var:S2> * <var:a> ; <var:S2> := <var:S2> * <var:a> ; <var:S3> := <nat:9> ; <var:S3> := <var:S3> * <var:a> ; <var:S3> := <var:S3> * <var:a> ; <var:S3> := <var:S3> * <var:a> ; <var:T> := <var:S3> ; <var:T> := <var:T> + <var:S2> ; <var:T> := <var:T> + <var:S1> ; <var:T> := <var:T> + <var:S0> {{ <var:T> = <nat:9> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:S2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:S2> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:S2> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:S2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:S3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:S2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:S2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:S2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:S2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:T> = <nat:9> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:4> * <var:b> /\ <var:T> = <nat:9> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:S0> = <nat:8> /\ <var:T> = <nat:9> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:T> = <nat:9> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 