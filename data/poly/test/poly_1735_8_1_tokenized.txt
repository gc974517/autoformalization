\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:c> ; <var:F2> := <var:F1> * <var:c> ; <var:F0> := <nat:4> ; <var:F1> := <var:F1> * <nat:2> ; <var:F2> := <var:F2> * <nat:1> ; <var:W> := <var:F2> <var:W> := <var:W> + <var:F1> <var:W> := <var:W> + <var:F0> \end{verbatim} Allow it to be that $ <var:c> = <var:d> $ prior to interpreting our list of commands it follows that we have $ <var:W> = <nat:1> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> $ . \end{theorem} \begin{proof} Observe the following decorated list of commands . \begin{eqnarray} \{ <var:c> = <var:d> \} \\ <var:F1> := <var:c> ; \\ \{ <var:c> = <var:d> \land <var:F1> = <var:d> \} \\ <var:F2> := <var:F1> * <var:c> ; \\ \{ <var:c> = <var:d> \land <var:F1> = <var:d> \land <var:F2> = <var:d> ^ <nat:2> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:c> = <var:d> \land <var:F1> = <var:d> \land <var:F2> = <var:d> ^ <nat:2> \land <var:F0> = <nat:4> \} \\ <var:F1> := <var:F1> * <nat:2> ; \\ \{ <var:c> = <var:d> \land <var:F1> = <nat:2> \cdot <var:d> \land <var:F2> = <var:d> ^ <nat:2> \land <var:F0> = <nat:4> \} \\ <var:F2> := <var:F2> * <nat:1> ; \\ \{ <var:c> = <var:d> \land <var:F1> = <nat:2> \cdot <var:d> \land <var:F2> = <nat:1> \cdot <var:d> ^ <nat:2> \land <var:F0> = <nat:4> \} \\ <var:W> := <var:F2> \\ \{ <var:c> = <var:d> \land <var:F1> = <nat:2> \cdot <var:d> \land <var:F0> = <nat:4> \land <var:W> = <nat:1> \cdot <var:d> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:F1> \\ \{ <var:c> = <var:d> \land <var:F0> = <nat:4> \land <var:W> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> \} \\ <var:W> := <var:W> + <var:F0> \\ \{ <var:c> = <var:d> \land <var:W> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:4> \} \end{eqnarray} Using Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:c> = <var:d> }} <var:F1> := <var:c> ; <var:F2> := <var:F1> * <var:c> ; <var:F0> := <nat:4> ; <var:F1> := <var:F1> * <nat:2> ; <var:F2> := <var:F2> * <nat:1> ; <var:W> := <var:F2> <var:W> := <var:W> + <var:F1> <var:W> := <var:W> + <var:F0> {{ <var:W> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:F1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:F1> = <var:d> /\ <var:F2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:F1> = <var:d> /\ <var:F2> = <var:d> ^ <nat:2> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:F1> = <nat:2> * <var:d> /\ <var:F2> = <var:d> ^ <nat:2> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:F1> = <nat:2> * <var:d> /\ <var:F2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:F1> = <nat:2> * <var:d> /\ <var:F0> = <nat:4> /\ <var:W> = <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:F0> = <nat:4> /\ <var:W> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:W> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 