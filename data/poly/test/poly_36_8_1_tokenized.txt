\begin{document} \begin{theorem} Take a code in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:a> ; <var:g2> := <var:g1> * <var:a> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:8> ; <var:g2> := <var:g2> * <nat:7> ; <var:P> := <var:g2> <var:P> := <var:P> + <var:g1> <var:P> := <var:P> + <var:g0> \end{verbatim} Assuming that $ <var:a> = <var:s> $ ( letting positive coefficients $ <var:s> $ ) ahead of running the list of commands it follows that we see $ <var:P> = <nat:7> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> + <nat:3> $ when program finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be given through usual Hoare techniques . Going forward , we see \verb | { <var:a> = <var:s> } <var:g1> := <var:a> { <var:a> = <var:s> \land <var:g1> = <var:s> } | , \verb | { <var:a> = <var:s> \land <var:g1> = <var:s> } <var:g2> := <var:g1> * <var:a> { <var:a> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> } | , \verb | { <var:a> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> } <var:g0> := <nat:3> { <var:a> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g0> = <nat:3> } | , \verb | { <var:a> = <var:s> \land <var:g1> = <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g0> = <nat:3> } <var:g1> := <var:g1> * <nat:8> { <var:a> = <var:s> \land <var:g1> = <nat:8> \cdot <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g0> = <nat:3> } | , \verb | { <var:a> = <var:s> \land <var:g1> = <nat:8> \cdot <var:s> \land <var:g2> = <var:s> ^ <nat:2> \land <var:g0> = <nat:3> } <var:g2> := <var:g2> * <nat:7> { <var:a> = <var:s> \land <var:g1> = <nat:8> \cdot <var:s> \land <var:g2> = <nat:7> \cdot <var:s> ^ <nat:2> \land <var:g0> = <nat:3> } | , \verb | { <var:a> = <var:s> \land <var:g1> = <nat:8> \cdot <var:s> \land <var:g2> = <nat:7> \cdot <var:s> ^ <nat:2> \land <var:g0> = <nat:3> } <var:P> := <var:g2{ <var:a> = <var:s> \land <var:g1> = <nat:8> \cdot <var:s> \land <var:g0> = <nat:3> \land <var:P> = <nat:7> \cdot <var:s> ^ <nat:2> } | and \verb | { <var:a> = <var:s> \land <var:g1> = <nat:8> \cdot <var:s> \land <var:g0> = <nat:3> \land <var:P> = <nat:7> \cdot <var:s> ^ <nat:2> } <var:P> := <var:P> + <var:g1{ <var:a> = <var:s> \land <var:g0> = <nat:3> \land <var:P> = <nat:7> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> } | . Advancing to the upcoming line of code found in the program , we see \verb | { <var:a> = <var:s> } <var:g1> := <var:a> { <var:a> = <var:s> \land <var:g1> = <var:s> } | . This is known to be sound with the inference rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:a> = <var:s> }} <var:g1> := <var:a> ; <var:g2> := <var:g1> * <var:a> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:8> ; <var:g2> := <var:g2> * <nat:7> ; <var:P> := <var:g2> <var:P> := <var:P> + <var:g1> <var:P> := <var:P> + <var:g0> {{ <var:P> = <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:g1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:g1> = <var:s> /\ <var:g2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:g1> = <var:s> /\ <var:g2> = <var:s> ^ <nat:2> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:g1> = <nat:8> * <var:s> /\ <var:g2> = <var:s> ^ <nat:2> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:g1> = <nat:8> * <var:s> /\ <var:g2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:g1> = <nat:8> * <var:s> /\ <var:g0> = <nat:3> /\ <var:P> = <nat:7> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:g0> = <nat:3> /\ <var:P> = <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:P> = <nat:7> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 