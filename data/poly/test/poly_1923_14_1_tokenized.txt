\begin{document} \begin{theorem} Consider a set of commands as \begin{verbatim} <var:k1> := <var:T> ; <var:k2> := <var:k1> * <var:T> ; <var:k3> := <var:k2> * <var:T> ; <var:k4> := <var:k3> * <var:T> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:2> ; <var:k3> := <var:k3> * <nat:3> ; <var:k4> := <var:k4> * <nat:3> ; <var:i> := <var:k4> <var:i> := <var:i> + <var:k3> <var:i> := <var:i> + <var:k2> <var:i> := <var:i> + <var:k1> <var:i> := <var:i> + <var:k0> \end{verbatim} Allowing it to hold that $ <var:T> = <var:c> $ before interpreting the segment of code it must be that $ <var:i> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:4> $ after list of commands terminates . \end{theorem} \begin{proof} Using Hoare logic results in : \begin{eqnarray} \{ <var:T> = <var:c> \} \\ <var:k1> := <var:T> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <var:c> \} \\ <var:k2> := <var:k1> * <var:T> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <var:c> \land <var:k2> = <var:c> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:T> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <var:c> \land <var:k2> = <var:c> ^ <nat:2> \land <var:k3> = <var:c> ^ <nat:3> \} \\ <var:k4> := <var:k3> * <var:T> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <var:c> \land <var:k2> = <var:c> ^ <nat:2> \land <var:k3> = <var:c> ^ <nat:3> \land <var:k4> = <var:c> ^ <nat:4> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <var:c> \land <var:k2> = <var:c> ^ <nat:2> \land <var:k3> = <var:c> ^ <nat:3> \land <var:k4> = <var:c> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:k1> := <var:k1> * <nat:5> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <nat:5> \times <var:c> \land <var:k2> = <var:c> ^ <nat:2> \land <var:k3> = <var:c> ^ <nat:3> \land <var:k4> = <var:c> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:k2> := <var:k2> * <nat:2> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <nat:5> \times <var:c> \land <var:k2> = <nat:2> \times <var:c> ^ <nat:2> \land <var:k3> = <var:c> ^ <nat:3> \land <var:k4> = <var:c> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:k3> := <var:k3> * <nat:3> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <nat:5> \times <var:c> \land <var:k2> = <nat:2> \times <var:c> ^ <nat:2> \land <var:k3> = <nat:3> \times <var:c> ^ <nat:3> \land <var:k4> = <var:c> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:k4> := <var:k4> * <nat:3> ; \\ \{ <var:T> = <var:c> \land <var:k1> = <nat:5> \times <var:c> \land <var:k2> = <nat:2> \times <var:c> ^ <nat:2> \land <var:k3> = <nat:3> \times <var:c> ^ <nat:3> \land <var:k4> = <nat:3> \times <var:c> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:i> := <var:k4> \\ \{ <var:T> = <var:c> \land <var:k1> = <nat:5> \times <var:c> \land <var:k2> = <nat:2> \times <var:c> ^ <nat:2> \land <var:k3> = <nat:3> \times <var:c> ^ <nat:3> \land <var:k0> = <nat:4> \land <var:i> = <nat:3> \times <var:c> ^ <nat:4> \} \\ <var:i> := <var:i> + <var:k3> \\ \{ <var:T> = <var:c> \land <var:k1> = <nat:5> \times <var:c> \land <var:k2> = <nat:2> \times <var:c> ^ <nat:2> \land <var:k0> = <nat:4> \land <var:i> = <nat:3> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:k2> \\ \{ <var:T> = <var:c> \land <var:k1> = <nat:5> \times <var:c> \land <var:k0> = <nat:4> \land <var:i> = <nat:3> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:k1> \\ \{ <var:T> = <var:c> \land <var:k0> = <nat:4> \land <var:i> = <nat:3> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:5> \times <var:c> \} \\ <var:i> := <var:i> + <var:k0> \\ \{ <var:T> = <var:c> \land <var:i> = <nat:3> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:5> \times <var:c> + <nat:4> \} \end{eqnarray} Thusly , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:T> = <var:c> }} <var:k1> := <var:T> ; <var:k2> := <var:k1> * <var:T> ; <var:k3> := <var:k2> * <var:T> ; <var:k4> := <var:k3> * <var:T> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:2> ; <var:k3> := <var:k3> * <nat:3> ; <var:k4> := <var:k4> * <nat:3> ; <var:i> := <var:k4> <var:i> := <var:i> + <var:k3> <var:i> := <var:i> + <var:k2> <var:i> := <var:i> + <var:k1> <var:i> := <var:i> + <var:k0> {{ <var:i> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <var:c> /\ <var:k2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <var:c> /\ <var:k2> = <var:c> ^ <nat:2> /\ <var:k3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <var:c> /\ <var:k2> = <var:c> ^ <nat:2> /\ <var:k3> = <var:c> ^ <nat:3> /\ <var:k4> = <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <var:c> /\ <var:k2> = <var:c> ^ <nat:2> /\ <var:k3> = <var:c> ^ <nat:3> /\ <var:k4> = <var:c> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <nat:5> * <var:c> /\ <var:k2> = <var:c> ^ <nat:2> /\ <var:k3> = <var:c> ^ <nat:3> /\ <var:k4> = <var:c> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <nat:5> * <var:c> /\ <var:k2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:k3> = <var:c> ^ <nat:3> /\ <var:k4> = <var:c> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <nat:5> * <var:c> /\ <var:k2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:k3> = <nat:3> * <var:c> ^ <nat:3> /\ <var:k4> = <var:c> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <nat:5> * <var:c> /\ <var:k2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:k3> = <nat:3> * <var:c> ^ <nat:3> /\ <var:k4> = <nat:3> * <var:c> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <nat:5> * <var:c> /\ <var:k2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:k3> = <nat:3> * <var:c> ^ <nat:3> /\ <var:k0> = <nat:4> /\ <var:i> = <nat:3> * <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <nat:5> * <var:c> /\ <var:k2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:k0> = <nat:4> /\ <var:i> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k1> = <nat:5> * <var:c> /\ <var:k0> = <nat:4> /\ <var:i> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:k0> = <nat:4> /\ <var:i> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:i> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 