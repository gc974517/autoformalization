\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} : \begin{verbatim} <var:P> := <nat:1> ; <var:P> := <nat:4> + <var:P> * <var:p> ; <var:P> := <var:P> * <var:p> ; <var:P> := <nat:3> + <var:P> * <var:p> ; <var:P> := <nat:3> + <var:P> * <var:p> ; <var:P> := <nat:1> + <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> ; <var:P> := <nat:1> + <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> \end{verbatim} Allow , letting whole numbers $ <var:w> $ , it to hold that $ <var:p> = <var:w> $ ahead of evaluating our code segment , it holds that we see $ <var:P> = <nat:1> \cdot <var:w> ^ <nat:8> + <nat:4> \cdot <var:w> ^ <nat:7> + <nat:3> \cdot <var:w> ^ <nat:5> + <nat:3> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:4> $ once list of instructions has finished . \end{theorem} \begin{proof} See that the below decorated code segment . \begin{eqnarray} \{ <var:p> = <var:w> \} \\ <var:P> := <nat:1> ; \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \} \\ <var:P> := <nat:4> + <var:P> * <var:p> ; \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \times <var:w> + <nat:4> \} \\ <var:P> := <var:P> * <var:p> ; \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + \} \\ <var:P> := <nat:3> + <var:P> * <var:p> ; \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:3> \} \\ <var:P> := <nat:3> + <var:P> * <var:p> ; \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> + <nat:3> \} \\ <var:P> := <nat:1> + <var:P> * <var:p> ; \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:3> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:1> \} \\ <var:P> := <nat:4> + <var:P> * <var:p> ; \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \times <var:w> ^ <nat:6> + <nat:4> \times <var:w> ^ <nat:5> + <nat:3> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} \\ <var:P> := <nat:1> + <var:P> * <var:p> ; \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \times <var:w> ^ <nat:7> + <nat:4> \times <var:w> ^ <nat:6> + <nat:3> \times <var:w> ^ <nat:4> + <nat:3> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:1> \} \\ <var:P> := <nat:4> + <var:P> * <var:p> \\ \{ <var:p> = <var:w> \land <var:P> = <nat:1> \times <var:w> ^ <nat:8> + <nat:4> \times <var:w> ^ <nat:7> + <nat:3> \times <var:w> ^ <nat:5> + <nat:3> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} \end{eqnarray} Applying usual Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:p> = <var:w> }} <var:P> := <nat:1> ; <var:P> := <nat:4> + <var:P> * <var:p> ; <var:P> := <var:P> * <var:p> ; <var:P> := <nat:3> + <var:P> * <var:p> ; <var:P> := <nat:3> + <var:P> * <var:p> ; <var:P> := <nat:1> + <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> ; <var:P> := <nat:1> + <var:P> * <var:p> ; <var:P> := <nat:4> + <var:P> * <var:p> {{ <var:P> = <nat:1> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:P> = <nat:1> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 