\begin{document} \begin{theorem} We define a series of instructions : \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:b> ; <var:K> := <var:k1> ; <var:K> := <var:K> + <var:k0> \end{verbatim} Allow given every whole numbers $ <var:I> $ that $ <var:b> = <var:I> $ ahead of executing the series of commands it follows that $ <var:K> = <nat:7> \times <var:I> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions can be done through Hoare techniques . Stepping forward , \begin{verbatim} { <var:b> = <var:I> } <var:k0> := <nat:2> { <var:b> = <var:I> \land <var:k0> = <nat:2> } { <var:b> = <var:I> \land <var:k0> = <nat:2> } <var:k1> := <nat:7> { <var:b> = <var:I> \land <var:k0> = <nat:2> \land <var:k1> = <nat:7> } { <var:b> = <var:I> \land <var:k0> = <nat:2> \land <var:k1> = <nat:7> } <var:k1> := <var:k1> * <var:b> { <var:b> = <var:I> \land <var:k0> = <nat:2> \land <var:k1> = <nat:7> * <var:I> } { <var:b> = <var:I> \land <var:k0> = <nat:2> \land <var:k1> = <nat:7> * <var:I> } <var:K> := <var:k1> { <var:b> = <var:I> \land <var:k0> = <nat:2> \land <var:K> = <nat:7> * <var:I> } \end{verbatim} This is sound through the inference rule of usual Hoare logic . Immediately after , we have \begin{verbatim} { <var:b> = <var:I> } <var:k0> := <nat:2> { <var:b> = <var:I> \land <var:k0> = <nat:2> } \end{verbatim} This is ensured through the variable binding rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:b> = <var:I> }} <var:k0> := <nat:2> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:b> ; <var:K> := <var:k1> ; <var:K> := <var:K> + <var:k0> {{ <var:K> = <nat:7> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:I> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:I> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:I> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:I> /\ <var:k0> = <nat:2> /\ <var:K> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:I> /\ <var:K> = <nat:7> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 