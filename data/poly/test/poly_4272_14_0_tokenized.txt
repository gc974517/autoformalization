\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:4> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:q> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:q> ; <var:Z2> := <var:Z2> * <var:q> ; <var:Z3> := <nat:2> ; <var:Z3> := <var:Z3> * <var:q> ; <var:Z3> := <var:Z3> * <var:q> ; <var:Z3> := <var:Z3> * <var:q> ; <var:r> := <var:Z3> ; <var:r> := <var:r> + <var:Z2> ; <var:r> := <var:r> + <var:Z1> ; <var:r> := <var:r> + <var:Z0> \end{verbatim} Assuming , assuming some natural coefficients $ <var:P> $ , it to hold that $ <var:q> = <var:P> $ before interpreting this set of instructions it holds that we see $ <var:r> = <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:4> $ after list of commands is done . \end{theorem} \begin{proof} Demonstrating correctness of the code segment can be demonstrated through Hoare logic . Stepping forward , we have \begin{eqnarray} \{ <var:q> = <var:P> \} \, <var:Z0> := <nat:4> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \} \, <var:Z1> := <nat:4> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> \} \, <var:Z1> := <var:Z1> * <var:q> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \} \, <var:Z2> := <nat:1> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> \} \, <var:Z2> := <var:Z2> * <var:q> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> \} \, <var:Z2> := <var:Z2> * <var:q> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \} \, <var:Z3> := <nat:2> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:Z3> = <nat:2> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:Z3> = <nat:2> \} \, <var:Z3> := <var:Z3> * <var:q> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:P> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:P> \} \, <var:Z3> := <var:Z3> * <var:q> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:P> ^ <nat:2> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:P> ^ <nat:2> \} \, <var:Z3> := <var:Z3> * <var:q> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:P> ^ <nat:3> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:P> ^ <nat:3> \} \, <var:r> := <var:Z3> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:r> = <nat:2> * <var:P> ^ <nat:3> \} \\ \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:Z2> = <nat:1> * <var:P> ^ <nat:2> \land <var:r> = <nat:2> * <var:P> ^ <nat:3> \} \, <var:r> := <var:r> + <var:Z2> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:4> * <var:P> \land <var:r> = <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> \} \end{eqnarray} Taking another step toward the proceeding step found in our series of commands , we have \begin{eqnarray} \{ <var:q> = <var:P> \} \, <var:Z0> := <nat:4> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \} \end{eqnarray} Looking at the subsequent piece of code found in the segment of code , we have \begin{eqnarray} \{ <var:q> = <var:P> \} \, <var:Z0> := <nat:4> \, \{ <var:q> = <var:P> \land <var:Z0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:q> = <var:P> }} <var:Z0> := <nat:4> ; <var:Z1> := <nat:4> ; <var:Z1> := <var:Z1> * <var:q> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:q> ; <var:Z2> := <var:Z2> * <var:q> ; <var:Z3> := <nat:2> ; <var:Z3> := <var:Z3> * <var:q> ; <var:Z3> := <var:Z3> * <var:q> ; <var:Z3> := <var:Z3> * <var:q> ; <var:r> := <var:Z3> ; <var:r> := <var:r> + <var:Z2> ; <var:r> := <var:r> + <var:Z1> ; <var:r> := <var:r> + <var:Z0> {{ <var:r> = <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:Z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:Z2> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:Z2> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:Z2> = <nat:1> * <var:P> ^ <nat:2> /\ <var:Z3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:Z2> = <nat:1> * <var:P> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:Z2> = <nat:1> * <var:P> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:Z2> = <nat:1> * <var:P> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:Z2> = <nat:1> * <var:P> ^ <nat:2> /\ <var:r> = <nat:2> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:4> * <var:P> /\ <var:r> = <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:Z0> = <nat:4> /\ <var:r> = <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:r> = <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 