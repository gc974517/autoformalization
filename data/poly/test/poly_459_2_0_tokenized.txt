\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:A0> := <nat:4> ; <var:f> := <var:A0> \end{verbatim} Given that we have $ <var:E> = <var:L> $ before evaluating the set of commands it must be that we see $ <var:f> = <nat:4> $ when program executes . \end{theorem} \begin{proof} The flow of logic for our set of instructions is clear using typical Hoare logic . Now , we see the variable update command \verb | <var:A0> := <nat:4> ; | . This transfers the condition $ \{ <var:E> = <var:L> \} $ into $ \{ <var:E> = <var:L> \land <var:A0> = <nat:4> \} $ . Jumping to the proceeding line of code seen in our series of instructions , the environment update code \verb | <var:f> := <var:A0> | . This redefines the condition $ \{ <var:E> = <var:L> \land <var:A0> = <nat:4> \} $ into $ \{ <var:E> = <var:L> \land <var:f> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:E> = <var:L> }} <var:A0> := <nat:4> ; <var:f> := <var:A0> {{ <var:f> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:f> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 