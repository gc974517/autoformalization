\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:3> ; <var:o> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:j> = <var:i> $ ahead of running our segment of code , it must be that $ <var:o> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:i> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:j> = <var:i> \land <var:Q0> = <nat:3> \} \\ <var:o> := <var:Q0> \\ \{ <var:j> = <var:i> \land <var:o> = <nat:3> \} \end{eqnarray} The application of typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:o> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:j> = <var:i> }} <def:poly> {{ <var:o> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:o> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 