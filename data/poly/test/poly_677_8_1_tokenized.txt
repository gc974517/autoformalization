\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:u> ; <var:h2> := <var:h1> * <var:u> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:2> ; <var:h2> := <var:h2> * <nat:7> ; <var:q> := <var:h2> <var:q> := <var:q> + <var:h1> <var:q> := <var:q> + <var:h0> \end{verbatim} Allow --- for all positive integer coefficients $ <var:D> $ --- that we have $ <var:u> = <var:D> $ before the evaluation of this set of commands , it follows that $ <var:q> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> $ after set of commands has finished . \end{theorem} \begin{proof} Let this decorated code segment . \begin{eqnarray} \{ <var:u> = <var:D> \} \\ <var:h1> := <var:u> ; \\ \{ <var:u> = <var:D> \land <var:h1> = <var:D> \} \\ <var:h2> := <var:h1> * <var:u> ; \\ \{ <var:u> = <var:D> \land <var:h1> = <var:D> \land <var:h2> = <var:D> ^ <nat:2> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:u> = <var:D> \land <var:h1> = <var:D> \land <var:h2> = <var:D> ^ <nat:2> \land <var:h0> = <nat:2> \} \\ <var:h1> := <var:h1> * <nat:2> ; \\ \{ <var:u> = <var:D> \land <var:h1> = <nat:2> * <var:D> \land <var:h2> = <var:D> ^ <nat:2> \land <var:h0> = <nat:2> \} \\ <var:h2> := <var:h2> * <nat:7> ; \\ \{ <var:u> = <var:D> \land <var:h1> = <nat:2> * <var:D> \land <var:h2> = <nat:7> * <var:D> ^ <nat:2> \land <var:h0> = <nat:2> \} \\ <var:q> := <var:h2> \\ \{ <var:u> = <var:D> \land <var:h1> = <nat:2> * <var:D> \land <var:h0> = <nat:2> \land <var:q> = <nat:7> * <var:D> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:h1> \\ \{ <var:u> = <var:D> \land <var:h0> = <nat:2> \land <var:q> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> \} \end{eqnarray} Furthering the evaluation of this list of commands results in : \begin{eqnarray} <var:q> := <var:q> + <var:h0> \\ \{ <var:u> = <var:D> \land <var:q> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> \} \end{eqnarray} Using typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:u> = <var:D> }} <var:h1> := <var:u> ; <var:h2> := <var:h1> * <var:u> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:2> ; <var:h2> := <var:h2> * <nat:7> ; <var:q> := <var:h2> <var:q> := <var:q> + <var:h1> <var:q> := <var:q> + <var:h0> {{ <var:q> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:h1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:h1> = <var:D> /\ <var:h2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:h1> = <var:D> /\ <var:h2> = <var:D> ^ <nat:2> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:h1> = <nat:2> * <var:D> /\ <var:h2> = <var:D> ^ <nat:2> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:h1> = <nat:2> * <var:D> /\ <var:h2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:h1> = <nat:2> * <var:D> /\ <var:h0> = <nat:2> /\ <var:q> = <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:h0> = <nat:2> /\ <var:q> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 