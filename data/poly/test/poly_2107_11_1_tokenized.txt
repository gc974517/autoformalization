\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:k> ; <var:f2> := <var:f1> * <var:k> ; <var:f3> := <var:f2> * <var:k> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:9> ; <var:f2> := <var:f2> * <nat:4> ; <var:f3> := <var:f3> * <nat:1> ; <var:v> := <var:f3> <var:v> := <var:v> + <var:f2> <var:v> := <var:v> + <var:f1> <var:v> := <var:v> + <var:f0> \end{verbatim} Allowing given any integers $ <var:X> $ that $ <var:k> = <var:X> $ before executing this list of instructions , then we see $ <var:v> = <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:4> $ after code is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:X> \} \\ <var:f1> := <var:k> ; \\ \{ <var:k> = <var:X> \land <var:f1> = <var:X> \} \\ <var:f2> := <var:f1> * <var:k> ; \\ \{ <var:k> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:k> ; \\ \{ <var:k> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \land <var:f3> = <var:X> ^ <nat:3> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:k> = <var:X> \land <var:f1> = <var:X> \land <var:f2> = <var:X> ^ <nat:2> \land <var:f3> = <var:X> ^ <nat:3> \land <var:f0> = <nat:4> \} \\ <var:f1> := <var:f1> * <nat:9> ; \\ \{ <var:k> = <var:X> \land <var:f1> = <nat:9> \times <var:X> \land <var:f2> = <var:X> ^ <nat:2> \land <var:f3> = <var:X> ^ <nat:3> \land <var:f0> = <nat:4> \} \\ <var:f2> := <var:f2> * <nat:4> ; \\ \{ <var:k> = <var:X> \land <var:f1> = <nat:9> \times <var:X> \land <var:f2> = <nat:4> \times <var:X> ^ <nat:2> \land <var:f3> = <var:X> ^ <nat:3> \land <var:f0> = <nat:4> \} \\ <var:f3> := <var:f3> * <nat:1> ; \\ \{ <var:k> = <var:X> \land <var:f1> = <nat:9> \times <var:X> \land <var:f2> = <nat:4> \times <var:X> ^ <nat:2> \land <var:f3> = <nat:1> \times <var:X> ^ <nat:3> \land <var:f0> = <nat:4> \} \\ <var:v> := <var:f3> \\ \{ <var:k> = <var:X> \land <var:f1> = <nat:9> \times <var:X> \land <var:f2> = <nat:4> \times <var:X> ^ <nat:2> \land <var:f0> = <nat:4> \land <var:v> = <nat:1> \times <var:X> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:f2> \\ \{ <var:k> = <var:X> \land <var:f1> = <nat:9> \times <var:X> \land <var:f0> = <nat:4> \land <var:v> = <nat:1> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:f1> \\ \{ <var:k> = <var:X> \land <var:f0> = <nat:4> \land <var:v> = <nat:1> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:9> \times <var:X> \} \\ <var:v> := <var:v> + <var:f0> \\ \{ <var:k> = <var:X> \land <var:v> = <nat:1> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:9> \times <var:X> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:k> = <var:X> }} <var:f1> := <var:k> ; <var:f2> := <var:f1> * <var:k> ; <var:f3> := <var:f2> * <var:k> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:9> ; <var:f2> := <var:f2> * <nat:4> ; <var:f3> := <var:f3> * <nat:1> ; <var:v> := <var:f3> <var:v> := <var:v> + <var:f2> <var:v> := <var:v> + <var:f1> <var:v> := <var:v> + <var:f0> {{ <var:v> = <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <var:X> /\ <var:f2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <var:X> /\ <var:f2> = <var:X> ^ <nat:2> /\ <var:f3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <var:X> /\ <var:f2> = <var:X> ^ <nat:2> /\ <var:f3> = <var:X> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <nat:9> * <var:X> /\ <var:f2> = <var:X> ^ <nat:2> /\ <var:f3> = <var:X> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <nat:9> * <var:X> /\ <var:f2> = <nat:4> * <var:X> ^ <nat:2> /\ <var:f3> = <var:X> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <nat:9> * <var:X> /\ <var:f2> = <nat:4> * <var:X> ^ <nat:2> /\ <var:f3> = <nat:1> * <var:X> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <nat:9> * <var:X> /\ <var:f2> = <nat:4> * <var:X> ^ <nat:2> /\ <var:f0> = <nat:4> /\ <var:v> = <nat:1> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f1> = <nat:9> * <var:X> /\ <var:f0> = <nat:4> /\ <var:v> = <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:f0> = <nat:4> /\ <var:v> = <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:v> = <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 