\begin{document} \begin{theorem} Take a segment of code as \begin{verbatim} <var:V0> := <nat:7> ; <var:J> := <var:V0> \end{verbatim} Allow it to hold that $ <var:b> = <var:D> $ ahead of interpreting the series of commands , then $ <var:J> = <nat:7> $ when list of instructions finishes . \end{theorem} \begin{proof} The method of proof for the set of commands is accomplished through Hoare techniques . Jumping to the upcoming command found in the series of commands , we have \begin{eqnarray} \{ <var:b> = <var:D> \} \, <var:V0> := <nat:7> \, \{ <var:b> = <var:D> \land <var:V0> = <nat:7> \} \end{eqnarray} Moving on to the next step , we have \begin{eqnarray} \{ <var:b> = <var:D> \} \, <var:V0> := <nat:7> \, \{ <var:b> = <var:D> \land <var:V0> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:b> = <var:D> }} <var:V0> := <nat:7> ; <var:J> := <var:V0> {{ <var:J> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:J> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 