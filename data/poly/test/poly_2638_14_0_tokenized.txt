\begin{document} \begin{theorem} Consider a code in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:2> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:J> ; <var:M2> := <nat:7> ; <var:M2> := <var:M2> * <var:J> ; <var:M2> := <var:M2> * <var:J> ; <var:M3> := <nat:5> ; <var:M3> := <var:M3> * <var:J> ; <var:M3> := <var:M3> * <var:J> ; <var:M3> := <var:M3> * <var:J> ; <var:n> := <var:M3> ; <var:n> := <var:n> + <var:M2> ; <var:n> := <var:n> + <var:M1> ; <var:n> := <var:n> + <var:M0> \end{verbatim} Allow , for every whole numbers $ <var:z> $ , $ <var:J> = <var:z> $ before evaluating the segment of code then $ <var:n> = <nat:5> \cdot <var:z> ^ <nat:3> + <nat:7> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the segment of code can be given with Hoare reasoning . Shifting focus toward the upcoming steps found in our set of instructions , we see \begin{verbatim} { <var:J> = <var:z> } <var:M0> := <nat:2> { <var:J> = <var:z> \land <var:M0> = <nat:2> } { <var:J> = <var:z> \land <var:M0> = <nat:2> } <var:M1> := <nat:9> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> } <var:M1> := <var:M1> * <var:J> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> } <var:M2> := <nat:7> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> } <var:M2> := <var:M2> * <var:J> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> } <var:M2> := <var:M2> * <var:J> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> } <var:M3> := <nat:5> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:5> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:5> } <var:M3> := <var:M3> * <var:J> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:5> \cdot <var:z> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:5> \cdot <var:z> } <var:M3> := <var:M3> * <var:J> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:5> \cdot <var:z> ^ <nat:2> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:5> \cdot <var:z> ^ <nat:2> } <var:M3> := <var:M3> * <var:J> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:5> \cdot <var:z> ^ <nat:3> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:5> \cdot <var:z> ^ <nat:3> } <var:n> := <var:M3> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> \land <var:M2> = <nat:7> \cdot <var:z> ^ <nat:2> \land <var:n> = <nat:5> \cdot <var:z> ^ <nat:3> } \end{verbatim} This is known to be sound using the variable binding rule given by usual Hoare reasoning . After , \begin{verbatim} { <var:J> = <var:z> } <var:M0> := <nat:2> { <var:J> = <var:z> \land <var:M0> = <nat:2> } { <var:J> = <var:z> \land <var:M0> = <nat:2> } <var:M1> := <nat:9> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> } { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> } <var:M1> := <var:M1> * <var:J> { <var:J> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:9> \cdot <var:z> } \end{verbatim} This is deduced through the environment update inference rule given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:J> = <var:z> }} <var:M0> := <nat:2> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:J> ; <var:M2> := <nat:7> ; <var:M2> := <var:M2> * <var:J> ; <var:M2> := <var:M2> * <var:J> ; <var:M3> := <nat:5> ; <var:M3> := <var:M3> * <var:J> ; <var:M3> := <var:M3> * <var:J> ; <var:M3> := <var:M3> * <var:J> ; <var:n> := <var:M3> ; <var:n> := <var:n> + <var:M2> ; <var:n> := <var:n> + <var:M1> ; <var:n> := <var:n> + <var:M0> {{ <var:n> = <nat:5> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:M2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:M2> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:M2> = <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:M2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:M3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:M2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:M3> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:M2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:M3> = <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:M2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:M3> = <nat:5> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:M2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:n> = <nat:5> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:9> * <var:z> /\ <var:n> = <nat:5> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:M0> = <nat:2> /\ <var:n> = <nat:5> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:n> = <nat:5> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 