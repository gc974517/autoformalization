\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:4> + <var:c> * <var:W> ; <var:c> := <nat:4> + <var:c> * <var:W> ; <var:c> := <nat:4> + <var:c> * <var:W> ; <var:c> := <var:c> * <var:W> ; <var:c> := <nat:3> + <var:c> * <var:W> ; <var:c> := <nat:2> + <var:c> * <var:W> ; <var:c> := <nat:2> + <var:c> * <var:W> ; <var:c> := <nat:2> + <var:c> * <var:W> ; <var:c> := <nat:4> + <var:c> * <var:W> ; <var:c> := <nat:1> + <var:c> * <var:W> ; <var:c> := <nat:4> + <var:c> * <var:W> \end{verbatim} Allow $ <var:W> = <var:x> $ ahead of running our set of instructions it must be that $ <var:c> = <nat:2> \times <var:x> ^ <nat:11> + <nat:4> \times <var:x> ^ <nat:10> + <nat:4> \times <var:x> ^ <nat:9> + <nat:4> \times <var:x> ^ <nat:8> + <nat:3> \times <var:x> ^ <nat:6> + <nat:2> \times <var:x> ^ <nat:5> + <nat:2> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:4> $ after list of instructions is done executing . \end{theorem} \begin{proof} Utilizing Hoare reasoning results in : \begin{eqnarray} \{ <var:W> = <var:x> \} \\ <var:c> := <nat:2> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \} \\ <var:c> := <nat:4> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> + <nat:4> \} \\ <var:c> := <nat:4> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:2> + <nat:4> \cdot <var:x> + <nat:4> \} \\ <var:c> := <nat:4> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:3> + <nat:4> \cdot <var:x> ^ <nat:2> + <nat:4> \cdot <var:x> + <nat:4> \} \\ <var:c> := <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:4> + <nat:4> \cdot <var:x> ^ <nat:3> + <nat:4> \cdot <var:x> ^ <nat:2> + <nat:4> \cdot <var:x> + \} \\ <var:c> := <nat:3> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:5> + <nat:4> \cdot <var:x> ^ <nat:4> + <nat:4> \cdot <var:x> ^ <nat:3> + <nat:4> \cdot <var:x> ^ <nat:2> + <nat:3> \} \\ <var:c> := <nat:2> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:6> + <nat:4> \cdot <var:x> ^ <nat:5> + <nat:4> \cdot <var:x> ^ <nat:4> + <nat:4> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> + <nat:2> \} \\ <var:c> := <nat:2> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:7> + <nat:4> \cdot <var:x> ^ <nat:6> + <nat:4> \cdot <var:x> ^ <nat:5> + <nat:4> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:2> \} \\ <var:c> := <nat:2> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:8> + <nat:4> \cdot <var:x> ^ <nat:7> + <nat:4> \cdot <var:x> ^ <nat:6> + <nat:4> \cdot <var:x> ^ <nat:5> + <nat:3> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:2> \} \\ <var:c> := <nat:4> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:9> + <nat:4> \cdot <var:x> ^ <nat:8> + <nat:4> \cdot <var:x> ^ <nat:7> + <nat:4> \cdot <var:x> ^ <nat:6> + <nat:3> \cdot <var:x> ^ <nat:4> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:4> \} \\ <var:c> := <nat:1> + <var:c> * <var:W> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:10> + <nat:4> \cdot <var:x> ^ <nat:9> + <nat:4> \cdot <var:x> ^ <nat:8> + <nat:4> \cdot <var:x> ^ <nat:7> + <nat:3> \cdot <var:x> ^ <nat:5> + <nat:2> \cdot <var:x> ^ <nat:4> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:4> \cdot <var:x> + <nat:1> \} \\ <var:c> := <nat:4> + <var:c> * <var:W> \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \cdot <var:x> ^ <nat:11> + <nat:4> \cdot <var:x> ^ <nat:10> + <nat:4> \cdot <var:x> ^ <nat:9> + <nat:4> \cdot <var:x> ^ <nat:8> + <nat:3> \cdot <var:x> ^ <nat:6> + <nat:2> \cdot <var:x> ^ <nat:5> + <nat:2> \cdot <var:x> ^ <nat:4> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:4> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:4> \} \end{eqnarray} Considering the above , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:W> = <var:x> }} <var:c> := <nat:2> ; <var:c> := <nat:4> + <var:c> * <var:W> ; <var:c> := <nat:4> + <var:c> * <var:W> ; <var:c> := <nat:4> + <var:c> * <var:W> ; <var:c> := <var:c> * <var:W> ; <var:c> := <nat:3> + <var:c> * <var:W> ; <var:c> := <nat:2> + <var:c> * <var:W> ; <var:c> := <nat:2> + <var:c> * <var:W> ; <var:c> := <nat:2> + <var:c> * <var:W> ; <var:c> := <nat:4> + <var:c> * <var:W> ; <var:c> := <nat:1> + <var:c> * <var:W> ; <var:c> := <nat:4> + <var:c> * <var:W> {{ <var:c> = <nat:2> * <var:x> ^ <nat:11> + <nat:4> * <var:x> ^ <nat:10> + <nat:4> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:8> + <nat:3> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:10> + <nat:4> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> ^ <nat:11> + <nat:4> * <var:x> ^ <nat:10> + <nat:4> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:8> + <nat:3> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 