\begin{document} \begin{theorem} Consider a code as follows \begin{verbatim} <var:A1> := <var:G> ; <var:A2> := <var:A1> * <var:G> ; <var:A3> := <var:A2> * <var:G> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:9> ; <var:x> := <var:A3> <var:x> := <var:x> + <var:A2> <var:x> := <var:x> + <var:A1> <var:x> := <var:x> + <var:A0> \end{verbatim} Assume that we have $ <var:G> = <var:y> $ before the evaluation of this code it holds that we see $ <var:x> = <nat:9> \cdot <var:y> ^ <nat:3> + <nat:9> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:6> $ when code segment finishes . \end{theorem} \begin{proof} The proof of this list of instructions can be seen by typical Hoare reasoning . Going to the next step , we see the variable update line yielding $ <var:G> $ to $ <var:A1>$ . This command advances the precondition $ \{ <var:G> = <var:y> \} $ as $ \{ <var:G> = <var:y> \land <var:A1> = <var:y> \} $ . Taking another step toward the subsequent command seen in our series of commands , the variable assignmet statement binding $ <var:A1> * <var:G> $ into $ <var:A2>$ . This statement transfers $ \{ <var:G> = <var:y> \land <var:A1> = <var:y> \} $ into $ \{ <var:G> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \} $ . This is given by the assignment scheme obtained from usual Hoare techniques . Following , we have the variable assignmet statement binding $ <var:A2> * <var:G> $ to $ <var:A3>$ . This line moves $ \{ <var:G> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \} $ to the postcondition $ \{ <var:G> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \} $ . Considering the upcoming command contained in our list of commands , we see the statement binding $ <nat:6> $ as $ <var:A0>$ . This redefines $ \{ <var:G> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \} $ into the condition $ \{ <var:G> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . This is known to be sound by the assignment rule given in standard Hoare techniques . Taking another step toward the subsequent bit of code found in our series of commands , we have the assignment line binding $ <var:A1> * <nat:1> $ into $ <var:A1>$ . This code redefines the condition $ \{ <var:G> = <var:y> \land <var:A1> = <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A0> = <nat:6> \} $ into $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . Looking at the upcoming line found in the code segment , we have the assignment statement assigning $ <var:A2> * <nat:9> $ as $ <var:A2>$ . This takes the condition $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A2> = <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A0> = <nat:6> \} $ as $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A2> = <nat:9> * <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . This is given through the assignment inference rule obtained from Hoare reasoning . Keeping momentum , we have the environment update line yielding $ <var:A3> * <nat:9> $ into $ <var:A3>$ . This command redefines the precondition $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A2> = <nat:9> * <var:y> ^ <nat:2> \land <var:A3> = <var:y> ^ <nat:3> \land <var:A0> = <nat:6> \} $ into $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A2> = <nat:9> * <var:y> ^ <nat:2> \land <var:A3> = <nat:9> * <var:y> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . This is guaranteed using the assignment rule defined in Hoare logic . Further , we see the variable binding command binding $ <var:A3$ toward $ <var:x>$ . This command forwards $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A2> = <nat:9> * <var:y> ^ <nat:2> \land <var:A3> = <nat:9> * <var:y> ^ <nat:3> \land <var:A0> = <nat:6> \} $ toward the postcondition $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A2> = <nat:9> * <var:y> ^ <nat:2> \land <var:A0> = <nat:6> \land <var:x> = <nat:9> * <var:y> ^ <nat:3> \} $ . Taking another step toward the proceeding piece of code contained in the code , we have the environment update code \verb | <var:x> := <var:x> + <var:A2> | . This command transfers $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A2> = <nat:9> * <var:y> ^ <nat:2> \land <var:A0> = <nat:6> \land <var:x> = <nat:9> * <var:y> ^ <nat:3> \} $ to the condition $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A0> = <nat:6> \land <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> \} $ . Going to the next step , we have the assignment code \verb | <var:x> := <var:x> + <var:A1> | . This takes the condition $ \{ <var:G> = <var:y> \land <var:A1> = <nat:1> * <var:y> \land <var:A0> = <nat:6> \land <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> \} $ into the condition $ \{ <var:G> = <var:y> \land <var:A0> = <nat:6> \land <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:1> * <var:y> \} $ . This is shown through the assignment inference rule in standard Hoare logic . Moving forward to the next step , the variable update command \verb | <var:x> := <var:x> + <var:A0> | . This advances the condition $ \{ <var:G> = <var:y> \land <var:A0> = <nat:6> \land <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:1> * <var:y> \} $ toward $ \{ <var:G> = <var:y> \land <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:G> = <var:y> }} <var:A1> := <var:G> ; <var:A2> := <var:A1> * <var:G> ; <var:A3> := <var:A2> * <var:G> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:9> ; <var:x> := <var:A3> <var:x> := <var:x> + <var:A2> <var:x> := <var:x> + <var:A1> <var:x> := <var:x> + <var:A0> {{ <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <var:y> ^ <nat:2> /\ <var:A3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <var:y> /\ <var:A2> = <var:y> ^ <nat:2> /\ <var:A3> = <var:y> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <nat:1> * <var:y> /\ <var:A2> = <var:y> ^ <nat:2> /\ <var:A3> = <var:y> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <nat:1> * <var:y> /\ <var:A2> = <nat:9> * <var:y> ^ <nat:2> /\ <var:A3> = <var:y> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <nat:1> * <var:y> /\ <var:A2> = <nat:9> * <var:y> ^ <nat:2> /\ <var:A3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <nat:1> * <var:y> /\ <var:A2> = <nat:9> * <var:y> ^ <nat:2> /\ <var:A0> = <nat:6> /\ <var:x> = <nat:9> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A1> = <nat:1> * <var:y> /\ <var:A0> = <nat:6> /\ <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:A0> = <nat:6> /\ <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:x> = <nat:9> * <var:y> ^ <nat:3> + <nat:9> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 