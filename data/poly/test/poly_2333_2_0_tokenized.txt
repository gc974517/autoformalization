\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:4> ; <var:q> := <var:A0> \end{verbatim} Given that $ <var:X> = <var:C> $ prior to the evaluation of this set of instructions , it must be that we have $ <var:q> = <nat:4> $ once set of instructions exits . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be shown with standard Hoare logic . Taking a look at the proceeding piece of code seen in the code segment , we see the binding line binding $ <nat:4> $ as $ <var:A0>$ . This redefines the precondition $ \{ <var:X> = <var:C> \} $ as $ \{ <var:X> = <var:C> \land <var:A0> = <nat:4> \} $ . Going to the next step , we see the assignment line yielding $ <var:A0$ to $ <var:q>$ . This redefines $ \{ <var:X> = <var:C> \land <var:A0> = <nat:4> \} $ toward $ \{ <var:X> = <var:C> \land <var:q> = <nat:4> \} $ . This is sound by the assignment inference rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:X> = <var:C> }} <var:A0> := <nat:4> ; <var:q> := <var:A0> {{ <var:q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 