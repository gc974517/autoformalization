\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:7> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:k> ; <var:B> := <var:Z1> ; <var:B> := <var:B> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume given any $ <var:D> \in \mathbb{Z}^+ $ it to hold that $ <var:k> = <var:D> $ before the evaluation of our code segment , it holds that we have $ <var:B> = <nat:3> \times <var:D> + <nat:7> $ when series of commands has executed . \end{theorem} \begin{proof} The argument for the segment of code can be done through usual Hoare reasoning . Looking at the next line seen in the code segment , we have the variable assignmet statement binding $ <nat:7> $ toward $ <var:Z0>$ . This transfers the precondition $ \{ <var:k> = <var:D> \} $ to the postcondition $ \{ <var:k> = <var:D> \land <var:Z0> = <nat:7> \} $ . This is given through the assignment law in typical Hoare reasoning . Next , the binding statement \verb | <var:Z1> := <nat:3> ; | . This takes $ \{ <var:k> = <var:D> \land <var:Z0> = <nat:7> \} $ toward $ \{ <var:k> = <var:D> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> \} $ . Considering the proceeding line contained in our series of instructions , we have the code giving $ <var:Z1> * <var:k> $ as $ <var:Z1>$ . This forwards the condition $ \{ <var:k> = <var:D> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> \} $ to the condition $ \{ <var:k> = <var:D> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> * <var:D> \} $ . This is given with the assignment inference rule of standard Hoare logic . Advancing on , we see the binding command giving $ <var:Z1> $ into $ <var:B>$ . This statement moves $ \{ <var:k> = <var:D> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> * <var:D> \} $ as $ \{ <var:k> = <var:D> \land <var:Z0> = <nat:7> \land <var:B> = <nat:3> * <var:D> \} $ . Paying attention to the following statement in our program , we have the binding line \verb | <var:B> := <var:B> + <var:Z0> | . This advances the condition $ \{ <var:k> = <var:D> \land <var:Z0> = <nat:7> \land <var:B> = <nat:3> * <var:D> \} $ to the postcondition $ \{ <var:k> = <var:D> \land <var:B> = <nat:3> * <var:D> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:7> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:k> ; <var:B> := <var:Z1> ; <var:B> := <var:B> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:k> = <var:D> }} <def:poly> {{ <var:B> = <nat:3> * <var:D> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:Z0> = <nat:7> /\ <var:B> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:B> = <nat:3> * <var:D> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 