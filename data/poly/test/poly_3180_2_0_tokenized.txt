\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:2> ; <var:v> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Given ( for any positive integers $ <var:O> $ ) it to hold that $ <var:f> = <var:O> $ ahead of the evaluation of this list of commands it follows that we see $ <var:v> = <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare logic gives us : \begin{eqnarray} \{ <var:f> = <var:O> \} \\ <var:J0> := <nat:2> ; \\ \{ <var:f> = <var:O> \land <var:J0> = <nat:2> \} \\ <var:v> := <var:J0> \\ \{ <var:f> = <var:O> \land <var:v> = <nat:2> \} \end{eqnarray} Given the preceding argument , this set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:2> ; <var:v> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:f> = <var:O> }} <def:poly> {{ <var:v> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:O> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:O> /\ <var:v> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 