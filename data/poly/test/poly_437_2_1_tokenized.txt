\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:3> ; <var:f> := <var:R0> \end{verbatim} Allowing that $ <var:S> = <var:T> $ , for any $ <var:T> \in \mathbb{Z}^+ $ , prior to running this series of instructions it must be that $ <var:f> = <nat:3> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:S> = <var:T> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:S> = <var:T> \land <var:R0> = <nat:3> \} \\ <var:f> := <var:R0> \\ \{ <var:S> = <var:T> \land <var:f> = <nat:3> \} \end{eqnarray} As a result , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:S> = <var:T> }} <var:R0> := <nat:3> ; <var:f> := <var:R0> {{ <var:f> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:f> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 