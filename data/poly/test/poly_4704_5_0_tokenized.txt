\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:S> ; <var:W> := <var:c1> ; <var:W> := <var:W> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:S> = <var:D> $ prior to executing the code it must be that we see $ <var:W> = <nat:2> \cdot <var:D> + <nat:3> $ when set of instructions exits . \end{theorem} \begin{proof} The argument for this segment of code can be seen using Hoare reasoning . Considering the next piece of code contained in our program , we have the variable assignmet command \verb | <var:c0> := <nat:3> ; | . This transfers the condition $ \{ <var:S> = <var:D> \} $ toward $ \{ <var:S> = <var:D> \land <var:c0> = <nat:3> \} $ . Observing the following command found in the list of instructions , we have the variable assignmet command defining $ <nat:2> $ into $ <var:c1>$ . This statement advances the precondition $ \{ <var:S> = <var:D> \land <var:c0> = <nat:3> \} $ toward the postcondition $ \{ <var:S> = <var:D> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \} $ . Honing in on the upcoming bit of code seen in the code segment , we have the line assigning $ <var:c1> * <var:S> $ to $ <var:c1>$ . This command advances the condition $ \{ <var:S> = <var:D> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \} $ to the condition $ \{ <var:S> = <var:D> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \cdot <var:D> \} $ . This is ensured through the assignment rule given in Hoare techniques . Observing the next piece of code in the code segment , the command defining $ <var:c1> $ toward $ <var:W>$ . This line advances $ \{ <var:S> = <var:D> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \cdot <var:D> \} $ toward $ \{ <var:S> = <var:D> \land <var:c0> = <nat:3> \land <var:W> = <nat:2> \cdot <var:D> \} $ . Advancing on , we have the binding command defining $ <var:W> + <var:c0$ into $ <var:W>$ . This transfers the condition $ \{ <var:S> = <var:D> \land <var:c0> = <nat:3> \land <var:W> = <nat:2> \cdot <var:D> \} $ to $ \{ <var:S> = <var:D> \land <var:W> = <nat:2> \cdot <var:D> + <nat:3> \} $ . This is known to be sound by the assignment scheme obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:S> ; <var:W> := <var:c1> ; <var:W> := <var:W> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:S> = <var:D> }} <def:poly> {{ <var:W> = <nat:2> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:c0> = <nat:3> /\ <var:W> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:W> = <nat:2> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 