\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:q1> := <var:y> ; <var:q2> := <var:q1> * <var:y> ; <var:q0> := <nat:4> ; <var:q2> := <var:q2> * <nat:7> ; <var:G> := <var:q2> <var:G> := <var:G> + <var:q0> \end{verbatim} Assuming --- letting integers $ <var:z> $ --- that we have $ <var:y> = <var:z> $ prior to the execution of this segment of code it must be that we see $ <var:G> = <nat:7> * <var:z> ^ <nat:2> + <nat:4> $ when code finishes . \end{theorem} \begin{proof} Proving correctness for our series of commands can be shown using Hoare logic . Following , we see the environment update code \verb | <var:q1> := <var:y> ; | . This moves the precondition $ \{ <var:y> = <var:z> \} $ as $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \} $ . This is given through the assignment law defined in Hoare reasoning . Moving forward to the subsequent bit of code contained in the list of instructions , we see the environment update code \verb | <var:q2> := <var:q1> * <var:y> ; | . This advances the precondition $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \} $ to $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \} $ . Taking another step toward the upcoming line seen in our code segment , we have the variable update code yielding $ <nat:4> $ to $ <var:q0>$ . This redefines the precondition $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \} $ toward $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q0> = <nat:4> \} $ . This is given by the assignment law defined by Hoare techniques . Focusing on the subsequent bit of code seen in the series of instructions , we see the variable assignmet command \verb | <var:q2> := <var:q2> * <nat:7> ; | . This code transfers $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q0> = <nat:4> \} $ into $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q0> = <nat:4> \} $ . This is shown to be logically sound by the assignment rule found in Hoare reasoning . Going forward , we have the variable assignmet command yielding $ <var:q2$ as $ <var:G>$ . This forwards the condition $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <nat:7> \times <var:z> ^ <nat:2> \land <var:q0> = <nat:4> \} $ toward the condition $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \land <var:q0> = <nat:4> \land <var:G> = <nat:7> \times <var:z> ^ <nat:2> \} $ . Taking a look at the upcoming bit of code seen in the segment of code , we have the binding statement yielding $ <var:G> + <var:q0$ as $ <var:G>$ . This statement transfers the condition $ \{ <var:y> = <var:z> \land <var:q1> = <var:z> \land <var:q0> = <nat:4> \land <var:G> = <nat:7> \times <var:z> ^ <nat:2> \} $ toward $ \{ <var:y> = <var:z> \land <var:G> = <nat:7> \times <var:z> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:y> = <var:z> }} <var:q1> := <var:y> ; <var:q2> := <var:q1> * <var:y> ; <var:q0> := <nat:4> ; <var:q2> := <var:q2> * <nat:7> ; <var:G> := <var:q2> <var:G> := <var:G> + <var:q0> {{ <var:G> = <nat:7> * <var:z> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:q1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <var:z> ^ <nat:2> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <nat:7> * <var:z> ^ <nat:2> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:q1> = <var:z> /\ <var:q0> = <nat:4> /\ <var:G> = <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:G> = <nat:7> * <var:z> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 