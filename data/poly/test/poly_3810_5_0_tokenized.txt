\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:6> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:T> ; <var:N> := <var:o1> ; <var:N> := <var:N> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Allowing that $ <var:T> = <var:J> $ ahead of executing our segment of code , it follows that $ <var:N> = <nat:1> * <var:J> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program can be shown by Hoare techniques . Advancing to the upcoming piece of code contained in the series of instructions , we see \begin{eqnarray} \{ <var:T> = <var:J> \} \, <var:o0> := <nat:6> \, \{ <var:T> = <var:J> \land <var:o0> = <nat:6> \} \end{eqnarray} This is rigorously given with the variable update law found in Hoare reasoning . Further , we see \begin{eqnarray} \{ <var:T> = <var:J> \} \, <var:o0> := <nat:6> \, \{ <var:T> = <var:J> \land <var:o0> = <nat:6> \} \\ \{ <var:T> = <var:J> \land <var:o0> = <nat:6> \} \, <var:o1> := <nat:1> \, \{ <var:T> = <var:J> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \} \\ \{ <var:T> = <var:J> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \} \, <var:o1> := <var:o1> * <var:T> \, \{ <var:T> = <var:J> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> * <var:J> \} \\ \{ <var:T> = <var:J> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> * <var:J> \} \, <var:N> := <var:o1> \, \{ <var:T> = <var:J> \land <var:o0> = <nat:6> \land <var:N> = <nat:1> * <var:J> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:6> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:T> ; <var:N> := <var:o1> ; <var:N> := <var:N> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:T> = <var:J> }} <def:poly> {{ <var:N> = <nat:1> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:o0> = <nat:6> /\ <var:N> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:N> = <nat:1> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 