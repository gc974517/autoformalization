\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:5> ; <var:X> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:K> = <var:r> $ ( for some $ <var:r> \in \mathbb{N} $ ) prior to executing this program then $ <var:X> = <nat:5> $ when list of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of our program is demonstrated using standard Hoare techniques . Considering the proceeding command in the segment of code , we see the environment update statement \verb | <var:q0> := <nat:5> ; | . This forwards the condition $ \{ <var:K> = <var:r> \} $ as the condition $ \{ <var:K> = <var:r> \land <var:q0> = <nat:5> \} $ . Going forward , the variable binding code giving $ <var:q0$ into $ <var:X>$ . This forwards $ \{ <var:K> = <var:r> \land <var:q0> = <nat:5> \} $ to the condition $ \{ <var:K> = <var:r> \land <var:X> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:X> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:K> = <var:r> }} <def:poly> {{ <var:X> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:X> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 