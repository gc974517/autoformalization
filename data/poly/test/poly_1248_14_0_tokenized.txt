\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:3> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:J> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:J> ; <var:t2> := <var:t2> * <var:J> ; <var:t3> := <nat:2> ; <var:t3> := <var:t3> * <var:J> ; <var:t3> := <var:t3> * <var:J> ; <var:t3> := <var:t3> * <var:J> ; <var:O> := <var:t3> ; <var:O> := <var:O> + <var:t2> ; <var:O> := <var:O> + <var:t1> ; <var:O> := <var:O> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Assume $ <var:J> = <var:Q> $ ahead of executing our code , it must be that we see $ <var:O> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:3> $ when list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:Q> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \} \\ <var:t1> := <nat:4> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \} \\ <var:t1> := <var:t1> * <var:J> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \} \\ <var:t2> := <nat:2> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:t2> = <nat:2> \} \\ <var:t2> := <var:t2> * <var:J> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:t2> = <nat:2> \times <var:Q> \} \\ <var:t2> := <var:t2> * <var:J> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:t2> = <nat:2> \times <var:Q> ^ <nat:2> \} \\ <var:t3> := <nat:2> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:t2> = <nat:2> \times <var:Q> ^ <nat:2> \land <var:t3> = <nat:2> \} \\ <var:t3> := <var:t3> * <var:J> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:t2> = <nat:2> \times <var:Q> ^ <nat:2> \land <var:t3> = <nat:2> \times <var:Q> \} \\ <var:t3> := <var:t3> * <var:J> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:t2> = <nat:2> \times <var:Q> ^ <nat:2> \land <var:t3> = <nat:2> \times <var:Q> ^ <nat:2> \} \\ <var:t3> := <var:t3> * <var:J> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:t2> = <nat:2> \times <var:Q> ^ <nat:2> \land <var:t3> = <nat:2> \times <var:Q> ^ <nat:3> \} \\ <var:O> := <var:t3> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:t2> = <nat:2> \times <var:Q> ^ <nat:2> \land <var:O> = <nat:2> \times <var:Q> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:t2> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \times <var:Q> \land <var:O> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:t1> ; \\ \{ <var:J> = <var:Q> \land <var:t0> = <nat:3> \land <var:O> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> \} \\ <var:O> := <var:O> + <var:t0> \\ \{ <var:J> = <var:Q> \land <var:O> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:3> \} \end{eqnarray} Using typical Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:J> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:J> ; <var:t2> := <var:t2> * <var:J> ; <var:t3> := <nat:2> ; <var:t3> := <var:t3> * <var:J> ; <var:t3> := <var:t3> * <var:J> ; <var:t3> := <var:t3> * <var:J> ; <var:O> := <var:t3> ; <var:O> := <var:O> + <var:t2> ; <var:O> := <var:O> + <var:t1> ; <var:O> := <var:O> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:J> = <var:Q> }} <def:poly> {{ <var:O> = <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:t2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:t2> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:t2> = <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:t2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:t3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:t2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:t2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:t2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:t2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:O> = <nat:2> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:Q> /\ <var:O> = <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:t0> = <nat:3> /\ <var:O> = <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Q> /\ <var:O> = <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 