\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:1> ; <var:p3> := <nat:4> ; <var:p3> := <var:p3> * <var:Y> ; <var:p3> := <var:p3> * <var:Y> ; <var:p3> := <var:p3> * <var:Y> ; <var:p4> := <nat:1> ; <var:p4> := <var:p4> * <var:Y> ; <var:p4> := <var:p4> * <var:Y> ; <var:p4> := <var:p4> * <var:Y> ; <var:p4> := <var:p4> * <var:Y> ; <var:R> := <var:p4> ; <var:R> := <var:R> + <var:p3> ; <var:R> := <var:R> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Given given every $ <var:n> \in \mathbb{N} $ that $ <var:Y> = <var:n> $ before running our list of instructions it holds that we have $ <var:R> = <nat:1> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> $ after set of instructions has exited . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:Y> = <var:n> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \} \\ <var:p3> := <nat:4> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> \} \\ <var:p3> := <var:p3> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> \} \\ <var:p3> := <var:p3> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> ^ <nat:2> \} \\ <var:p3> := <var:p3> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \} \\ <var:p4> := <nat:1> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \land <var:p4> = <nat:1> \} \\ <var:p4> := <var:p4> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \land <var:p4> = <nat:1> * <var:n> \} \\ <var:p4> := <var:p4> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \land <var:p4> = <nat:1> * <var:n> ^ <nat:2> \} \\ <var:p4> := <var:p4> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \land <var:p4> = <nat:1> * <var:n> ^ <nat:3> \} \\ <var:p4> := <var:p4> * <var:Y> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \land <var:p4> = <nat:1> * <var:n> ^ <nat:4> \} \\ <var:R> := <var:p4> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \land <var:R> = <nat:1> * <var:n> ^ <nat:4> \} \\ <var:R> := <var:R> + <var:p3> ; \\ \{ <var:Y> = <var:n> \land <var:p0> = <nat:1> \land <var:R> = <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:p0> \\ \{ <var:Y> = <var:n> \land <var:R> = <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> \} \end{eqnarray} Thus , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Definition <def:poly> := <var:p0> := <nat:1> ; <var:p3> := <nat:4> ; <var:p3> := <var:p3> * <var:Y> ; <var:p3> := <var:p3> * <var:Y> ; <var:p3> := <var:p3> * <var:Y> ; <var:p4> := <nat:1> ; <var:p4> := <var:p4> * <var:Y> ; <var:p4> := <var:p4> * <var:Y> ; <var:p4> := <var:p4> * <var:Y> ; <var:p4> := <var:p4> * <var:Y> ; <var:R> := <var:p4> ; <var:R> := <var:R> + <var:p3> ; <var:R> := <var:R> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Y> = <var:n> }} <def:poly> {{ <var:R> = <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:p4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:p4> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:p4> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:p4> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:p4> = <nat:1> * <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:R> = <nat:1> * <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:p0> = <nat:1> /\ <var:R> = <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:n> /\ <var:R> = <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 