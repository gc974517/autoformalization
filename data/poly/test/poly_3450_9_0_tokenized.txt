\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:4> ; <var:H1> := <nat:9> ; <var:H1> := <var:H1> * <var:M> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:M> ; <var:H2> := <var:H2> * <var:M> ; <var:z> := <var:H2> ; <var:z> := <var:z> + <var:H1> ; <var:z> := <var:z> + <var:H0> \end{verbatim} Allow $ <var:M> = <var:D> $ prior to interpreting this list of instructions , it follows that we have $ <var:z> = <nat:7> \times <var:D> ^ <nat:2> + <nat:9> \times <var:D> + <nat:4> $ after list of commands is done executing . \end{theorem} \begin{proof} Proving correctness for our code segment can be demonstrated using this decorated series of instructions . \begin{eqnarray} \{ <var:M> = <var:D> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:M> = <var:D> \land <var:H0> = <nat:4> \} \\ <var:H1> := <nat:9> ; \\ \{ <var:M> = <var:D> \land <var:H0> = <nat:4> \land <var:H1> = <nat:9> \} \\ <var:H1> := <var:H1> * <var:M> ; \\ \{ <var:M> = <var:D> \land <var:H0> = <nat:4> \land <var:H1> = <nat:9> \times <var:D> \} \\ <var:H2> := <nat:7> ; \\ \{ <var:M> = <var:D> \land <var:H0> = <nat:4> \land <var:H1> = <nat:9> \times <var:D> \land <var:H2> = <nat:7> \} \\ <var:H2> := <var:H2> * <var:M> ; \\ \{ <var:M> = <var:D> \land <var:H0> = <nat:4> \land <var:H1> = <nat:9> \times <var:D> \land <var:H2> = <nat:7> \times <var:D> \} \\ <var:H2> := <var:H2> * <var:M> ; \\ \{ <var:M> = <var:D> \land <var:H0> = <nat:4> \land <var:H1> = <nat:9> \times <var:D> \land <var:H2> = <nat:7> \times <var:D> ^ <nat:2> \} \\ <var:z> := <var:H2> ; \\ \{ <var:M> = <var:D> \land <var:H0> = <nat:4> \land <var:H1> = <nat:9> \times <var:D> \land <var:z> = <nat:7> \times <var:D> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:H1> ; \\ \{ <var:M> = <var:D> \land <var:H0> = <nat:4> \land <var:z> = <nat:7> \times <var:D> ^ <nat:2> + <nat:9> \times <var:D> \} \\ <var:z> := <var:z> + <var:H0> \\ \{ <var:M> = <var:D> \land <var:z> = <nat:7> \times <var:D> ^ <nat:2> + <nat:9> \times <var:D> + <nat:4> \} \end{eqnarray} The application of usual Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:M> = <var:D> }} <var:H0> := <nat:4> ; <var:H1> := <nat:9> ; <var:H1> := <var:H1> * <var:M> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:M> ; <var:H2> := <var:H2> * <var:M> ; <var:z> := <var:H2> ; <var:z> := <var:z> + <var:H1> ; <var:z> := <var:z> + <var:H0> {{ <var:z> = <nat:7> * <var:D> ^ <nat:2> + <nat:9> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:9> * <var:D> /\ <var:H2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:9> * <var:D> /\ <var:H2> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:9> * <var:D> /\ <var:H2> = <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:9> * <var:D> /\ <var:z> = <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:H0> = <nat:4> /\ <var:z> = <nat:7> * <var:D> ^ <nat:2> + <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:z> = <nat:7> * <var:D> ^ <nat:2> + <nat:9> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 