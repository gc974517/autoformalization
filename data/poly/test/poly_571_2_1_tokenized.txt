\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:5> ; <var:V> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:v> = <var:H> $ ( letting natural coefficients $ <var:H> $ ) before the evaluation of the list of commands , it must be that $ <var:V> = <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is given using Hoare techniques . Looking at the following piece of code contained in the series of instructions , we see the variable update statement defining $ <nat:5> $ to $ <var:S0>$ . This redefines $ \{ <var:v> = <var:H> \} $ toward $ \{ <var:v> = <var:H> \land <var:S0> = <nat:5> \} $ . Paying attention to the subsequent step contained in the code , we have the code \verb | <var:V> := <var:S0> | . This command forwards $ \{ <var:v> = <var:H> \land <var:S0> = <nat:5> \} $ to the condition $ \{ <var:v> = <var:H> \land <var:V> = <nat:5> \} $ . This is sound using the assignment law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:5> ; <var:V> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:v> = <var:H> }} <def:poly> {{ <var:V> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:V> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 