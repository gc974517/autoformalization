\begin{document} \begin{theorem} Take a segment of code : \begin{verbatim} <var:w1> := <var:V> ; <var:w2> := <var:w1> * <var:V> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:6> ; <var:w2> := <var:w2> * <nat:5> ; <var:v> := <var:w2> <var:v> := <var:v> + <var:w1> <var:v> := <var:v> + <var:w0> \end{verbatim} Allowing $ <var:V> = <var:T> $ before the evaluation of our segment of code , it holds that we have $ <var:v> = <nat:5> \times <var:T> ^ <nat:2> + <nat:6> \times <var:T> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the series of instructions is evident with standard Hoare reasoning . Observing the following statement contained in our segment of code , we have the variable assignmet statement assigning $ <var:V> $ to $ <var:w1>$ . This code redefines the precondition $ \{ <var:V> = <var:T> \} $ as $ \{ <var:V> = <var:T> \land <var:w1> = <var:T> \} $ . Focusing on the following statement in our list of commands , the binding command \verb | <var:w2> := <var:w1> * <var:V> ; | . This code moves $ \{ <var:V> = <var:T> \land <var:w1> = <var:T> \} $ as the condition $ \{ <var:V> = <var:T> \land <var:w1> = <var:T> \land <var:w2> = <var:T> ^ <nat:2> \} $ . This is sound by the assignment scheme of Hoare reasoning . Honing in on the upcoming line contained in the list of commands , we see the assignment code \verb | <var:w0> := <nat:2> ; | . This moves the condition $ \{ <var:V> = <var:T> \land <var:w1> = <var:T> \land <var:w2> = <var:T> ^ <nat:2> \} $ to the condition $ \{ <var:V> = <var:T> \land <var:w1> = <var:T> \land <var:w2> = <var:T> ^ <nat:2> \land <var:w0> = <nat:2> \} $ . Shifting focus toward the following statement seen in our code segment , we see the variable update command yielding $ <var:w1> * <nat:6> $ into $ <var:w1>$ . This code redefines $ \{ <var:V> = <var:T> \land <var:w1> = <var:T> \land <var:w2> = <var:T> ^ <nat:2> \land <var:w0> = <nat:2> \} $ to $ \{ <var:V> = <var:T> \land <var:w1> = <nat:6> * <var:T> \land <var:w2> = <var:T> ^ <nat:2> \land <var:w0> = <nat:2> \} $ . Next , we have the statement \verb | <var:w2> := <var:w2> * <nat:5> ; | . This redefines $ \{ <var:V> = <var:T> \land <var:w1> = <nat:6> * <var:T> \land <var:w2> = <var:T> ^ <nat:2> \land <var:w0> = <nat:2> \} $ into the postcondition $ \{ <var:V> = <var:T> \land <var:w1> = <nat:6> * <var:T> \land <var:w2> = <nat:5> * <var:T> ^ <nat:2> \land <var:w0> = <nat:2> \} $ . Shifting focus toward the upcoming step seen in our list of instructions , we see the binding line assigning $ <var:w2$ into $ <var:v>$ . This advances the precondition $ \{ <var:V> = <var:T> \land <var:w1> = <nat:6> * <var:T> \land <var:w2> = <nat:5> * <var:T> ^ <nat:2> \land <var:w0> = <nat:2> \} $ toward the condition $ \{ <var:V> = <var:T> \land <var:w1> = <nat:6> * <var:T> \land <var:w0> = <nat:2> \land <var:v> = <nat:5> * <var:T> ^ <nat:2> \} $ . Moving on to the next statement found in our set of instructions , we have the variable binding line \verb | <var:v> := <var:v> + <var:w1> | . This advances the precondition $ \{ <var:V> = <var:T> \land <var:w1> = <nat:6> * <var:T> \land <var:w0> = <nat:2> \land <var:v> = <nat:5> * <var:T> ^ <nat:2> \} $ into the postcondition $ \{ <var:V> = <var:T> \land <var:w0> = <nat:2> \land <var:v> = <nat:5> * <var:T> ^ <nat:2> + <nat:6> * <var:T> \} $ . This is shown using the assignment law defined in Hoare reasoning . Paying attention to the proceeding piece of code seen in the series of commands , we have the binding code \verb | <var:v> := <var:v> + <var:w0> | . This statement advances the condition $ \{ <var:V> = <var:T> \land <var:w0> = <nat:2> \land <var:v> = <nat:5> * <var:T> ^ <nat:2> + <nat:6> * <var:T> \} $ to the postcondition $ \{ <var:V> = <var:T> \land <var:v> = <nat:5> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:2> \} $ . This is known to be sound with the assignment law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:V> = <var:T> }} <var:w1> := <var:V> ; <var:w2> := <var:w1> * <var:V> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:6> ; <var:w2> := <var:w2> * <nat:5> ; <var:v> := <var:w2> <var:v> := <var:v> + <var:w1> <var:v> := <var:v> + <var:w0> {{ <var:v> = <nat:5> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:w1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:w1> = <var:T> /\ <var:w2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:w1> = <var:T> /\ <var:w2> = <var:T> ^ <nat:2> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:w1> = <nat:6> * <var:T> /\ <var:w2> = <var:T> ^ <nat:2> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:w1> = <nat:6> * <var:T> /\ <var:w2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:w1> = <nat:6> * <var:T> /\ <var:w0> = <nat:2> /\ <var:v> = <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:w0> = <nat:2> /\ <var:v> = <nat:5> * <var:T> ^ <nat:2> + <nat:6> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:T> /\ <var:v> = <nat:5> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 