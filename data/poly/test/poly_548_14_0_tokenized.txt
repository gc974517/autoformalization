\begin{document} \begin{theorem} Define the following segment of code such that \begin{verbatim} <var:c0> := <nat:8> ; <var:c1> := <nat:9> ; <var:c1> := <var:c1> * <var:b> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:b> ; <var:c2> := <var:c2> * <var:b> ; <var:c3> := <nat:9> ; <var:c3> := <var:c3> * <var:b> ; <var:c3> := <var:c3> * <var:b> ; <var:c3> := <var:c3> * <var:b> ; <var:X> := <var:c3> ; <var:X> := <var:X> + <var:c2> ; <var:X> := <var:X> + <var:c1> ; <var:X> := <var:X> + <var:c0> \end{verbatim} Assume that we have $ <var:b> = <var:l> $ before running this set of commands , it must be that $ <var:X> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> + <nat:8> $ . \end{theorem} \begin{proof} The proof of this list of instructions is accomplished using usual Hoare techniques . Focusing on the next lines of codefound in our set of commands , \[ \begin{tabular} {rcl} \{ <var:b> = <var:l> \} & <var:c0> := <nat:8> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \} & <var:c1> := <nat:9> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \} & <var:c1> := <var:c1> * <var:b> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \} & <var:c2> := <nat:3> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> \} & <var:c2> := <var:c2> * <var:b> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> \} & <var:c2> := <var:c2> * <var:b> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \} & <var:c3> := <nat:9> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:c3> = <nat:9> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:c3> = <nat:9> \} & <var:c3> := <var:c3> * <var:b> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:c3> = <nat:9> * <var:l> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:c3> = <nat:9> * <var:l> \} & <var:c3> := <var:c3> * <var:b> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:c3> = <nat:9> * <var:l> ^ <nat:2> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:c3> = <nat:9> * <var:l> ^ <nat:2> \} & <var:c3> := <var:c3> * <var:b> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:c3> = <nat:9> * <var:l> ^ <nat:3> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:c3> = <nat:9> * <var:l> ^ <nat:3> \} & <var:X> := <var:c3> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> * <var:l> \land <var:c2> = <nat:3> * <var:l> ^ <nat:2> \land <var:X> = <nat:9> * <var:l> ^ <nat:3> \} \end{tabular} This is known to be sound with the variable update scheme of usual Hoare logic . Considering the upcoming line seen in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:l> \} & <var:c0> := <nat:8> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \} \end{tabular} This is given with the scheme in standard Hoare reasoning . Observing the upcoming lines found in the code , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:l> \} & <var:c0> := <nat:8> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \} \\ \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \} & <var:c1> := <nat:9> & \{ <var:b> = <var:l> \land <var:c0> = <nat:8> \land <var:c1> = <nat:9> \} \end{tabular} This is rigorously given by the variable update law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:b> = <var:l> }} <var:c0> := <nat:8> ; <var:c1> := <nat:9> ; <var:c1> := <var:c1> * <var:b> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:b> ; <var:c2> := <var:c2> * <var:b> ; <var:c3> := <nat:9> ; <var:c3> := <var:c3> * <var:b> ; <var:c3> := <var:c3> * <var:b> ; <var:c3> := <var:c3> * <var:b> ; <var:X> := <var:c3> ; <var:X> := <var:X> + <var:c2> ; <var:X> := <var:X> + <var:c1> ; <var:X> := <var:X> + <var:c0> {{ <var:X> = <nat:9> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:c2> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:c2> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:c2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:c3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:c2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:c3> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:c2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:c3> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:c2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:c3> = <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:c2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:X> = <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:9> * <var:l> /\ <var:X> = <nat:9> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:c0> = <nat:8> /\ <var:X> = <nat:9> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:X> = <nat:9> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 