\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:9> ; <var:Z> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Allow that $ <var:g> = <var:f> $ before the execution of this series of commands then we see $ <var:Z> = <nat:9> $ . \end{theorem} \begin{proof} The argument for this code can be shown with typical Hoare techniques . Immediately following , we see the variable update line \verb | <var:Y0> := <nat:9> ; | . This takes the condition $ \{ <var:g> = <var:f> \} $ as the postcondition $ \{ <var:g> = <var:f> \land <var:Y0> = <nat:9> \} $ . Shifting focus toward the following line seen in the program , the binding code \verb | <var:Z> := <var:Y0> | . This moves the condition $ \{ <var:g> = <var:f> \land <var:Y0> = <nat:9> \} $ into $ \{ <var:g> = <var:f> \land <var:Z> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:9> ; <var:Z> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:g> = <var:f> }} <def:poly> {{ <var:Z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:Z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 