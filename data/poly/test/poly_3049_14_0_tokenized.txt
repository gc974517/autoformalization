\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:n> ; <var:S2> := <nat:6> ; <var:S2> := <var:S2> * <var:n> ; <var:S2> := <var:S2> * <var:n> ; <var:S3> := <nat:1> ; <var:S3> := <var:S3> * <var:n> ; <var:S3> := <var:S3> * <var:n> ; <var:S3> := <var:S3> * <var:n> ; <var:l> := <var:S3> ; <var:l> := <var:l> + <var:S2> ; <var:l> := <var:l> + <var:S1> ; <var:l> := <var:l> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for any positive coefficients $ <var:J> $ , it to be that $ <var:n> = <var:J> $ prior to the evaluation of the series of commands it must be that $ <var:l> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:6> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:8> $ after code segment terminates . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:n> = <var:J> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \} \\ <var:S1> := <nat:1> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \} \\ <var:S1> := <var:S1> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \} \\ <var:S2> := <nat:6> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:S2> = <nat:6> \} \\ <var:S2> := <var:S2> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:S2> = <nat:6> \times <var:J> \} \\ <var:S2> := <var:S2> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:S2> = <nat:6> \times <var:J> ^ <nat:2> \} \\ <var:S3> := <nat:1> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:S2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:S3> = <nat:1> \} \\ <var:S3> := <var:S3> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:S2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:S3> = <nat:1> \times <var:J> \} \\ <var:S3> := <var:S3> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:S2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:S3> = <nat:1> \times <var:J> ^ <nat:2> \} \\ <var:S3> := <var:S3> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:S2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:S3> = <nat:1> \times <var:J> ^ <nat:3> \} \\ <var:l> := <var:S3> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:S2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:l> = <nat:1> \times <var:J> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:S2> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \times <var:J> \land <var:l> = <nat:1> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:S1> ; \\ \{ <var:n> = <var:J> \land <var:S0> = <nat:8> \land <var:l> = <nat:1> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> \} \\ <var:l> := <var:l> + <var:S0> \\ \{ <var:n> = <var:J> \land <var:l> = <nat:1> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:8> \} \end{eqnarray} Thus , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:n> ; <var:S2> := <nat:6> ; <var:S2> := <var:S2> * <var:n> ; <var:S2> := <var:S2> * <var:n> ; <var:S3> := <nat:1> ; <var:S3> := <var:S3> * <var:n> ; <var:S3> := <var:S3> * <var:n> ; <var:S3> := <var:S3> * <var:n> ; <var:l> := <var:S3> ; <var:l> := <var:l> + <var:S2> ; <var:l> := <var:l> + <var:S1> ; <var:l> := <var:l> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:n> = <var:J> }} <def:poly> {{ <var:l> = <nat:1> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:S2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:S2> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:S2> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:S2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:S3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:S2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:S2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:S2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:S2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:l> = <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:J> /\ <var:l> = <nat:1> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:S0> = <nat:8> /\ <var:l> = <nat:1> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:l> = <nat:1> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 