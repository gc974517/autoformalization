\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:Q> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:Q> ; <var:F2> := <var:F2> * <var:Q> ; <var:F3> := <nat:3> ; <var:F3> := <var:F3> * <var:Q> ; <var:F3> := <var:F3> * <var:Q> ; <var:F3> := <var:F3> * <var:Q> ; <var:J> := <var:F3> ; <var:J> := <var:J> + <var:F2> ; <var:J> := <var:J> + <var:F1> ; <var:J> := <var:J> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assume $ <var:Q> = <var:h> $ ahead of executing the segment of code , then we see $ <var:J> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> $ once list of instructions has terminated . \end{theorem} \begin{proof} The proof of our list of commands is demonstrated through usual Hoare techniques . Stepping forward , \[ \begin{tabular} {rcl} \{ <var:Q> = <var:h> \} & <var:F0> := <nat:4> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \} & <var:F1> := <nat:2> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \} & <var:F1> := <var:F1> * <var:Q> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \} & <var:F2> := <nat:3> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \} & <var:F2> := <var:F2> * <var:Q> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> \} & <var:F2> := <var:F2> * <var:Q> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \} & <var:F3> := <nat:3> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \} & <var:F3> := <var:F3> * <var:Q> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> \} & <var:F3> := <var:F3> * <var:Q> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> ^ <nat:2> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> ^ <nat:2> \} & <var:F3> := <var:F3> * <var:Q> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> ^ <nat:3> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> ^ <nat:3> \} & <var:J> := <var:F3> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:J> = <nat:3> \times <var:h> ^ <nat:3> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:F2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:J> = <nat:3> \times <var:h> ^ <nat:3> \} & <var:J> := <var:J> + <var:F2> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:J> = <nat:3> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> \} \\ \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \times <var:h> \land <var:J> = <nat:3> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> \} & <var:J> := <var:J> + <var:F1> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \land <var:J> = <nat:3> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} \end{tabular} This is sound by the binding inference rule given by usual Hoare techniques . Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:Q> = <var:h> \} & <var:F0> := <nat:4> & \{ <var:Q> = <var:h> \land <var:F0> = <nat:4> \} \end{tabular} This is deduced through the environment update law defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:Q> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:Q> ; <var:F2> := <var:F2> * <var:Q> ; <var:F3> := <nat:3> ; <var:F3> := <var:F3> * <var:Q> ; <var:F3> := <var:F3> * <var:Q> ; <var:F3> := <var:F3> * <var:Q> ; <var:J> := <var:F3> ; <var:J> := <var:J> + <var:F2> ; <var:J> := <var:J> + <var:F1> ; <var:J> := <var:J> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Q> = <var:h> }} <def:poly> {{ <var:J> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:F2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:F2> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:F2> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:F2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:F3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:F2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:F2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:F2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:F2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:J> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:h> /\ <var:J> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:F0> = <nat:4> /\ <var:J> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:J> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 