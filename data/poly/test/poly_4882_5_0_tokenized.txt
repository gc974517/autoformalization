\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:8> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:S> ; <var:n> := <var:L1> ; <var:n> := <var:n> + <var:L0> \end{verbatim} Allow for some $ <var:F> \in \mathbb{Z}^+ $ that $ <var:S> = <var:F> $ prior to running the set of commands it holds that $ <var:n> = <nat:3> \cdot <var:F> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is accomplished using usual Hoare logic . Focusing on the following steps found in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:F> \} & <var:L0> := <nat:8> & \{ <var:S> = <var:F> \land <var:L0> = <nat:8> \} \\ \{ <var:S> = <var:F> \land <var:L0> = <nat:8> \} & <var:L1> := <nat:3> & \{ <var:S> = <var:F> \land <var:L0> = <nat:8> \land <var:L1> = <nat:3> \} \\ \{ <var:S> = <var:F> \land <var:L0> = <nat:8> \land <var:L1> = <nat:3> \} & <var:L1> := <var:L1> * <var:S> & \{ <var:S> = <var:F> \land <var:L0> = <nat:8> \land <var:L1> = <nat:3> * <var:F> \} \\ \{ <var:S> = <var:F> \land <var:L0> = <nat:8> \land <var:L1> = <nat:3> * <var:F> \} & <var:n> := <var:L1> & \{ <var:S> = <var:F> \land <var:L0> = <nat:8> \land <var:n> = <nat:3> * <var:F> \} \end{tabular} After , \[ \begin{tabular} {rcl} \{ <var:S> = <var:F> \} & <var:L0> := <nat:8> & \{ <var:S> = <var:F> \land <var:L0> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:S> = <var:F> }} <var:L0> := <nat:8> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:S> ; <var:n> := <var:L1> ; <var:n> := <var:n> + <var:L0> {{ <var:n> = <nat:3> * <var:F> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:L0> = <nat:8> /\ <var:n> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:F> /\ <var:n> = <nat:3> * <var:F> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 