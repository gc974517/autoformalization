\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:3> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:E> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:E> ; <var:h2> := <var:h2> * <var:E> ; <var:J> := <var:h2> ; <var:J> := <var:J> + <var:h1> ; <var:J> := <var:J> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:E> = <var:d> $ ahead of the execution of our program , it holds that $ <var:J> = <nat:8> \times <var:d> ^ <nat:2> + <nat:5> \times <var:d> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:E> = <var:d> \} \\ <var:h0> := <nat:3> ; \\ \{ <var:E> = <var:d> \land <var:h0> = <nat:3> \} \\ <var:h1> := <nat:5> ; \\ \{ <var:E> = <var:d> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> \} \end{eqnarray} Advancing running our list of commands returns : \begin{eqnarray} <var:h1> := <var:h1> * <var:E> ; \\ \{ <var:E> = <var:d> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> \times <var:d> \} \\ <var:h2> := <nat:8> ; \\ \{ <var:E> = <var:d> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> \times <var:d> \land <var:h2> = <nat:8> \} \end{eqnarray} Allowing the execution of this series of commands gives : \begin{eqnarray} <var:h2> := <var:h2> * <var:E> ; \\ \{ <var:E> = <var:d> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> \times <var:d> \land <var:h2> = <nat:8> \times <var:d> \} \\ <var:h2> := <var:h2> * <var:E> ; \\ \{ <var:E> = <var:d> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> \times <var:d> \land <var:h2> = <nat:8> \times <var:d> ^ <nat:2> \} \\ <var:J> := <var:h2> ; \\ \{ <var:E> = <var:d> \land <var:h0> = <nat:3> \land <var:h1> = <nat:5> \times <var:d> \land <var:J> = <nat:8> \times <var:d> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:h1> ; \\ \{ <var:E> = <var:d> \land <var:h0> = <nat:3> \land <var:J> = <nat:8> \times <var:d> ^ <nat:2> + <nat:5> \times <var:d> \} \\ <var:J> := <var:J> + <var:h0> \\ \{ <var:E> = <var:d> \land <var:J> = <nat:8> \times <var:d> ^ <nat:2> + <nat:5> \times <var:d> + <nat:3> \} \end{eqnarray} Given the preceding argument , the list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:E> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:E> ; <var:h2> := <var:h2> * <var:E> ; <var:J> := <var:h2> ; <var:J> := <var:J> + <var:h1> ; <var:J> := <var:J> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:E> = <var:d> }} <def:poly> {{ <var:J> = <nat:8> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:d> /\ <var:h2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:d> /\ <var:h2> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:d> /\ <var:h2> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:h0> = <nat:3> /\ <var:h1> = <nat:5> * <var:d> /\ <var:J> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:h0> = <nat:3> /\ <var:J> = <nat:8> * <var:d> ^ <nat:2> + <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:J> = <nat:8> * <var:d> ^ <nat:2> + <nat:5> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 