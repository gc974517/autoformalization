\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:4> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:F> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:F> ; <var:Z2> := <var:Z2> * <var:F> ; <var:Z3> := <nat:2> ; <var:Z3> := <var:Z3> * <var:F> ; <var:Z3> := <var:Z3> * <var:F> ; <var:Z3> := <var:Z3> * <var:F> ; <var:p> := <var:Z3> ; <var:p> := <var:p> + <var:Z2> ; <var:p> := <var:p> + <var:Z1> ; <var:p> := <var:p> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> . Given it to be that $ <var:F> = <var:g> $ ( given all natural coefficients $ <var:g> $ ) prior to the evaluation of our set of commands , it follows that we see $ <var:p> = <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:4> $ once program has exited . \end{theorem} \begin{proof} The argument for the program can be given by Hoare techniques . Immediately following , we have the variable update command defining $ <nat:4> $ into $ <var:Z0>$ . This transfers the condition $ \{ <var:F> = <var:g> \} $ as the postcondition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \} $ . This is deduced through the assignment law of standard Hoare logic . Moving on to the next step , the code binding $ <nat:3> $ toward $ <var:Z1>$ . This redefines $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \} $ toward the postcondition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \} $ . This is given through the assignment rule of Hoare techniques . Honing in on the next step in our set of instructions , we see the command letting $ <var:Z1> * <var:F> $ to $ <var:Z1>$ . This transfers $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \} $ as $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \} $ . This is ensured with the assignment rule defined by usual Hoare techniques . Advancing , we see the variable binding line binding $ <nat:1> $ toward $ <var:Z2>$ . This command moves the condition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \} $ into $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \} $ . Focusing on the upcoming command found in the code segment , we see the variable binding statement \verb | <var:Z2> := <var:Z2> * <var:F> ; | . This statement transfers $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \} $ into $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> \} $ . This is given with the assignment inference rule given by standard Hoare logic . Moving on to the following bit of code found in our set of commands , the variable update code \verb | <var:Z2> := <var:Z2> * <var:F> ; | . This line redefines $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> \} $ to the condition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \} $ . Focusing on the following step in the set of commands , we see the environment update command \verb | <var:Z3> := <nat:2> ; | . This line forwards the precondition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \} $ as the postcondition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:2> \} $ . This is guaranteed with the assignment rule defined in typical Hoare techniques . Looking at the following line of code in our set of commands , the environment update code \verb | <var:Z3> := <var:Z3> * <var:F> ; | . This line transfers the condition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:2> \} $ to the condition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:2> \times <var:g> \} $ . This is known to be sound by the assignment scheme obtained from Hoare logic . Honing in on the subsequent piece of code found in the code segment , the environment update statement \verb | <var:Z3> := <var:Z3> * <var:F> ; | . This line transfers $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:2> \times <var:g> \} $ into the condition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:2> \times <var:g> ^ <nat:2> \} $ . This is rigorously given through the assignment inference rule found in standard Hoare logic . Paying attention to the next line in the code segment , we have the variable update command yielding $ <var:Z3> * <var:F> $ into $ <var:Z3>$ . This command forwards $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:2> \times <var:g> ^ <nat:2> \} $ to the condition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:2> \times <var:g> ^ <nat:3> \} $ . This is sound with the assignment scheme obtained from typical Hoare logic . Observing the subsequent bit of code contained in our segment of code , the assignment code \verb | <var:p> := <var:Z3> ; | . This statement transfers the precondition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:2> \times <var:g> ^ <nat:3> \} $ as $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:p> = <nat:2> \times <var:g> ^ <nat:3> \} $ . This is guaranteed through the assignment rule defined by usual Hoare techniques . Honing in on the subsequent line of code seen in the set of commands , we have the binding command giving $ <var:p> + <var:Z2> $ into $ <var:p>$ . This command takes the condition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:1> \times <var:g> ^ <nat:2> \land <var:p> = <nat:2> \times <var:g> ^ <nat:3> \} $ to $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:p> = <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> \} $ . This is sound with the assignment inference rule defined by standard Hoare techniques . Honing in on the following line of code contained in our code , we have the variable update statement \verb | <var:p> := <var:p> + <var:Z1> ; | . This command moves the condition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:3> \times <var:g> \land <var:p> = <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:p> = <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> \} $ . Following , we see the line giving $ <var:p> + <var:Z0$ into $ <var:p>$ . This command forwards the precondition $ \{ <var:F> = <var:g> \land <var:Z0> = <nat:4> \land <var:p> = <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> \} $ into the condition $ \{ <var:F> = <var:g> \land <var:p> = <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:4> \} $ . This is known to be sound by the assignment law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:4> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:F> ; <var:Z2> := <nat:1> ; <var:Z2> := <var:Z2> * <var:F> ; <var:Z2> := <var:Z2> * <var:F> ; <var:Z3> := <nat:2> ; <var:Z3> := <var:Z3> * <var:F> ; <var:Z3> := <var:Z3> * <var:F> ; <var:Z3> := <var:Z3> * <var:F> ; <var:p> := <var:Z3> ; <var:p> := <var:p> + <var:Z2> ; <var:p> := <var:p> + <var:Z1> ; <var:p> := <var:p> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:F> = <var:g> }} <def:poly> {{ <var:p> = <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:Z3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:1> * <var:g> ^ <nat:2> /\ <var:p> = <nat:2> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:p> = <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:4> /\ <var:p> = <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:p> = <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 