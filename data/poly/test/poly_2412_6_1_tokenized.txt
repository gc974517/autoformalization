\begin{document} \begin{theorem} We define a set of instructions as follows \begin{verbatim} <var:w1> := <var:e> ; <var:w2> := <var:w1> * <var:e> ; <var:w0> := <nat:2> ; <var:w2> := <var:w2> * <nat:1> ; <var:I> := <var:w2> <var:I> := <var:I> + <var:w0> \end{verbatim} Assuming it to be that $ <var:e> = <var:E> $ ahead of executing our code , it must be that we see $ <var:I> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:E> \} \\ <var:w1> := <var:e> ; \\ \{ <var:e> = <var:E> \land <var:w1> = <var:E> \} \\ <var:w2> := <var:w1> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:e> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w0> = <nat:2> \} \\ <var:w2> := <var:w2> * <nat:1> ; \\ \{ <var:e> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <nat:1> * <var:E> ^ <nat:2> \land <var:w0> = <nat:2> \} \\ <var:I> := <var:w2> \\ \{ <var:e> = <var:E> \land <var:w1> = <var:E> \land <var:w0> = <nat:2> \land <var:I> = <nat:1> * <var:E> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:w0> \\ \{ <var:e> = <var:E> \land <var:I> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:e> = <var:E> }} <var:w1> := <var:e> ; <var:w2> := <var:w1> * <var:e> ; <var:w0> := <nat:2> ; <var:w2> := <var:w2> * <nat:1> ; <var:I> := <var:w2> <var:I> := <var:I> + <var:w0> {{ <var:I> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:w1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:w1> = <var:E> /\ <var:w0> = <nat:2> /\ <var:I> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:I> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 