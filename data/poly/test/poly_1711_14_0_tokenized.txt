\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:9> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:K> ; <var:C2> := <nat:6> ; <var:C2> := <var:C2> * <var:K> ; <var:C2> := <var:C2> * <var:K> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:K> ; <var:C3> := <var:C3> * <var:K> ; <var:C3> := <var:C3> * <var:K> ; <var:a> := <var:C3> ; <var:a> := <var:a> + <var:C2> ; <var:a> := <var:a> + <var:C1> ; <var:a> := <var:a> + <var:C0> \end{verbatim} Assume it to be that $ <var:K> = <var:e> $ --- for all $ <var:e> \in \mathbb{N} $ --- prior to the evaluation of our code , it holds that we see $ <var:a> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:K> = <var:e> \} \\ <var:C0> := <nat:9> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \} \\ <var:C1> := <nat:2> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \} \\ <var:C1> := <var:C1> * <var:K> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \} \\ <var:C2> := <nat:6> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:C2> = <nat:6> \} \\ <var:C2> := <var:C2> * <var:K> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:C2> = <nat:6> \times <var:e> \} \\ <var:C2> := <var:C2> * <var:K> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:C2> = <nat:6> \times <var:e> ^ <nat:2> \} \\ <var:C3> := <nat:4> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:C2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:C3> = <nat:4> \} \\ <var:C3> := <var:C3> * <var:K> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:C2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:C3> = <nat:4> \times <var:e> \} \\ <var:C3> := <var:C3> * <var:K> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:C2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:C3> = <nat:4> \times <var:e> ^ <nat:2> \} \\ <var:C3> := <var:C3> * <var:K> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:C2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:C3> = <nat:4> \times <var:e> ^ <nat:3> \} \\ <var:a> := <var:C3> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:C2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:a> = <nat:4> \times <var:e> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:C2> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:C1> = <nat:2> \times <var:e> \land <var:a> = <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:C1> ; \\ \{ <var:K> = <var:e> \land <var:C0> = <nat:9> \land <var:a> = <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> \} \\ <var:a> := <var:a> + <var:C0> \\ \{ <var:K> = <var:e> \land <var:a> = <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:9> \} \end{eqnarray} Therefore , the code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:K> = <var:e> }} <var:C0> := <nat:9> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:K> ; <var:C2> := <nat:6> ; <var:C2> := <var:C2> * <var:K> ; <var:C2> := <var:C2> * <var:K> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:K> ; <var:C3> := <var:C3> * <var:K> ; <var:C3> := <var:C3> * <var:K> ; <var:a> := <var:C3> ; <var:a> := <var:a> + <var:C2> ; <var:a> := <var:a> + <var:C1> ; <var:a> := <var:a> + <var:C0> {{ <var:a> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:C3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:C2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:a> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:C1> = <nat:2> * <var:e> /\ <var:a> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:C0> = <nat:9> /\ <var:a> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:a> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 