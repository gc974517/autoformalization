\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:K> ; <var:a2> := <nat:9> ; <var:a2> := <var:a2> * <var:K> ; <var:a2> := <var:a2> * <var:K> ; <var:a3> := <nat:4> ; <var:a3> := <var:a3> * <var:K> ; <var:a3> := <var:a3> * <var:K> ; <var:a3> := <var:a3> * <var:K> ; <var:V> := <var:a3> ; <var:V> := <var:V> + <var:a2> ; <var:V> := <var:V> + <var:a1> ; <var:V> := <var:V> + <var:a0> \end{verbatim} Given that we have $ <var:K> = <var:c> $ before the execution of our set of instructions , it must be that we see $ <var:V> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:9> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> + <nat:8> $ after code has finished . \end{theorem} \begin{proof} Note that the following decorated list of instructions . \begin{eqnarray} \{ <var:K> = <var:c> \} \\ <var:a0> := <nat:8> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \} \\ <var:a1> := <nat:5> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \} \\ <var:a1> := <var:a1> * <var:K> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \} \\ <var:a2> := <nat:9> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:a2> = <nat:9> \} \\ <var:a2> := <var:a2> * <var:K> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:a2> = <nat:9> * <var:c> \} \\ <var:a2> := <var:a2> * <var:K> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:a2> = <nat:9> * <var:c> ^ <nat:2> \} \\ <var:a3> := <nat:4> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:a2> = <nat:9> * <var:c> ^ <nat:2> \land <var:a3> = <nat:4> \} \\ <var:a3> := <var:a3> * <var:K> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:a2> = <nat:9> * <var:c> ^ <nat:2> \land <var:a3> = <nat:4> * <var:c> \} \\ <var:a3> := <var:a3> * <var:K> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:a2> = <nat:9> * <var:c> ^ <nat:2> \land <var:a3> = <nat:4> * <var:c> ^ <nat:2> \} \\ <var:a3> := <var:a3> * <var:K> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:a2> = <nat:9> * <var:c> ^ <nat:2> \land <var:a3> = <nat:4> * <var:c> ^ <nat:3> \} \\ <var:V> := <var:a3> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:a2> = <nat:9> * <var:c> ^ <nat:2> \land <var:V> = <nat:4> * <var:c> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:a2> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> * <var:c> \land <var:V> = <nat:4> * <var:c> ^ <nat:3> + <nat:9> * <var:c> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:a1> ; \\ \{ <var:K> = <var:c> \land <var:a0> = <nat:8> \land <var:V> = <nat:4> * <var:c> ^ <nat:3> + <nat:9> * <var:c> ^ <nat:2> + <nat:5> * <var:c> \} \\ <var:V> := <var:V> + <var:a0> \\ \{ <var:K> = <var:c> \land <var:V> = <nat:4> * <var:c> ^ <nat:3> + <nat:9> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:8> \} \end{eqnarray} Using Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:K> = <var:c> }} <var:a0> := <nat:8> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:K> ; <var:a2> := <nat:9> ; <var:a2> := <var:a2> * <var:K> ; <var:a2> := <var:a2> * <var:K> ; <var:a3> := <nat:4> ; <var:a3> := <var:a3> * <var:K> ; <var:a3> := <var:a3> * <var:K> ; <var:a3> := <var:a3> * <var:K> ; <var:V> := <var:a3> ; <var:V> := <var:V> + <var:a2> ; <var:V> := <var:V> + <var:a1> ; <var:V> := <var:V> + <var:a0> {{ <var:V> = <nat:4> * <var:c> ^ <nat:3> + <nat:9> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:a2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:a2> = <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:a2> = <nat:9> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:a2> = <nat:9> * <var:c> ^ <nat:2> /\ <var:a3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:a2> = <nat:9> * <var:c> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:a2> = <nat:9> * <var:c> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:a2> = <nat:9> * <var:c> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:a2> = <nat:9> * <var:c> ^ <nat:2> /\ <var:V> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:c> /\ <var:V> = <nat:4> * <var:c> ^ <nat:3> + <nat:9> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:a0> = <nat:8> /\ <var:V> = <nat:4> * <var:c> ^ <nat:3> + <nat:9> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:V> = <nat:4> * <var:c> ^ <nat:3> + <nat:9> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 