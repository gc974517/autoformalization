\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as \begin{verbatim} <var:O1> := <var:n> ; <var:O0> := <nat:9> ; <var:O1> := <var:O1> * <nat:9> ; <var:p> := <var:O1> <var:p> := <var:p> + <var:O0> \end{verbatim} Given , for any natural coefficients $ <var:S> $ , $ <var:n> = <var:S> $ prior to executing this list of commands , then we see $ <var:p> = <nat:9> * <var:S> + <nat:9> $ . \end{theorem} \begin{proof} Using standard Hoare techniques gives us : \begin{eqnarray} \{ <var:n> = <var:S> \} \\ <var:O1> := <var:n> ; \\ \{ <var:n> = <var:S> \land <var:O1> = <var:S> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:n> = <var:S> \land <var:O1> = <var:S> \land <var:O0> = <nat:9> \} \end{eqnarray} Continuing interpreting this code segment results in : \begin{eqnarray} <var:O1> := <var:O1> * <nat:9> ; \\ \{ <var:n> = <var:S> \land <var:O1> = <nat:9> \cdot <var:S> \land <var:O0> = <nat:9> \} \\ <var:p> := <var:O1> \\ \{ <var:n> = <var:S> \land <var:O0> = <nat:9> \land <var:p> = <nat:9> \cdot <var:S> \} \\ <var:p> := <var:p> + <var:O0> \\ \{ <var:n> = <var:S> \land <var:p> = <nat:9> \cdot <var:S> + <nat:9> \} \end{eqnarray} Considering the above , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:n> = <var:S> }} <var:O1> := <var:n> ; <var:O0> := <nat:9> ; <var:O1> := <var:O1> * <nat:9> ; <var:p> := <var:O1> <var:p> := <var:p> + <var:O0> {{ <var:p> = <nat:9> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:O1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:O1> = <var:S> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:O1> = <nat:9> * <var:S> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:O0> = <nat:9> /\ <var:p> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:p> = <nat:9> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 