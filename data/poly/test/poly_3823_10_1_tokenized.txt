\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:T> ; <var:u2> := <var:u1> * <var:T> ; <var:u3> := <var:u2> * <var:T> ; <var:u4> := <var:u3> * <var:T> ; <var:u0> := <nat:3> ; <var:u2> := <var:u2> * <nat:6> ; <var:u4> := <var:u4> * <nat:8> ; <var:H> := <var:u4> <var:H> := <var:H> + <var:u2> <var:H> := <var:H> + <var:u0> \end{verbatim} Given that we have $ <var:T> = <var:k> $ ahead of interpreting our code it must be that we see $ <var:H> = <nat:8> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:2> + <nat:3> $ after series of instructions finishes . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:T> = <var:k> \} \\ <var:u1> := <var:T> ; \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \} \\ <var:u2> := <var:u1> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \} \\ <var:u4> := <var:u3> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:3> \} \\ <var:u2> := <var:u2> * <nat:6> ; \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <nat:6> * <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <var:k> ^ <nat:4> \land <var:u0> = <nat:3> \} \\ <var:u4> := <var:u4> * <nat:8> ; \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <nat:6> * <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u4> = <nat:8> * <var:k> ^ <nat:4> \land <var:u0> = <nat:3> \} \\ <var:H> := <var:u4> \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <nat:6> * <var:k> ^ <nat:2> \land <var:u3> = <var:k> ^ <nat:3> \land <var:u0> = <nat:3> \land <var:H> = <nat:8> * <var:k> ^ <nat:4> \} \\ <var:H> := <var:H> + <var:u2> \\ \{ <var:T> = <var:k> \land <var:u1> = <var:k> \land <var:u0> = <nat:3> \land <var:H> = <nat:8> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:u0> \\ \{ <var:T> = <var:k> \land <var:H> = <nat:8> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:2> + <nat:3> \} \end{eqnarray} Therefore , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:T> = <var:k> }} <var:u1> := <var:T> ; <var:u2> := <var:u1> * <var:T> ; <var:u3> := <var:u2> * <var:T> ; <var:u4> := <var:u3> * <var:T> ; <var:u0> := <nat:3> ; <var:u2> := <var:u2> * <nat:6> ; <var:u4> := <var:u4> * <nat:8> ; <var:H> := <var:u4> <var:H> := <var:H> + <var:u2> <var:H> := <var:H> + <var:u0> {{ <var:H> = <nat:8> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u4> = <var:k> ^ <nat:4> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u4> = <var:k> ^ <nat:4> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u4> = <nat:8> * <var:k> ^ <nat:4> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:u3> = <var:k> ^ <nat:3> /\ <var:u0> = <nat:3> /\ <var:H> = <nat:8> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:u1> = <var:k> /\ <var:u0> = <nat:3> /\ <var:H> = <nat:8> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:H> = <nat:8> * <var:k> ^ <nat:4> + <nat:6> * <var:k> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 