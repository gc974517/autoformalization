\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:j0> := <nat:1> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:i> ; <var:j3> := <nat:1> ; <var:j3> := <var:j3> * <var:i> ; <var:j3> := <var:j3> * <var:i> ; <var:j3> := <var:j3> * <var:i> ; <var:h> := <var:j3> ; <var:h> := <var:h> + <var:j1> ; <var:h> := <var:h> + <var:j0> \end{verbatim} Given it to hold that $ <var:i> = <var:O> $ with some positive coefficients $ <var:O> $ prior to the evaluation of the program then we see $ <var:h> = <nat:1> * <var:O> ^ <nat:3> + <nat:4> * <var:O> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code can be given with typical Hoare reasoning . Stepping forward , \begin{verbatim} { <var:i> = <var:O> } <var:j0> := <nat:1> { <var:i> = <var:O> \land <var:j0> = <nat:1> } { <var:i> = <var:O> \land <var:j0> = <nat:1> } <var:j1> := <nat:4> { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> } { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> } <var:j1> := <var:j1> * <var:i> { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> * <var:O> } { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> * <var:O> } <var:j3> := <nat:1> { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> * <var:O> \land <var:j3> = <nat:1> } { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> * <var:O> \land <var:j3> = <nat:1> } <var:j3> := <var:j3> * <var:i> { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> * <var:O> \land <var:j3> = <nat:1> * <var:O> } \end{verbatim} Moving forward , \begin{verbatim} { <var:i> = <var:O> } <var:j0> := <nat:1> { <var:i> = <var:O> \land <var:j0> = <nat:1> } { <var:i> = <var:O> \land <var:j0> = <nat:1> } <var:j1> := <nat:4> { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> } { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> } <var:j1> := <var:j1> * <var:i> { <var:i> = <var:O> \land <var:j0> = <nat:1> \land <var:j1> = <nat:4> * <var:O> } \end{verbatim} Jumping to the upcoming command seen in the list of commands , \begin{verbatim} { <var:i> = <var:O> } <var:j0> := <nat:1> { <var:i> = <var:O> \land <var:j0> = <nat:1> } \end{verbatim} This is known to be sound with the variable assignmet inference rule given by Hoare logic . Looking at the proceeding command in the list of instructions , we have \begin{verbatim} { <var:i> = <var:O> } <var:j0> := <nat:1> { <var:i> = <var:O> \land <var:j0> = <nat:1> } \end{verbatim} This is deduced by the scheme in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:i> = <var:O> }} <var:j0> := <nat:1> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:i> ; <var:j3> := <nat:1> ; <var:j3> := <var:j3> * <var:i> ; <var:j3> := <var:j3> * <var:i> ; <var:j3> := <var:j3> * <var:i> ; <var:h> := <var:j3> ; <var:h> := <var:h> + <var:j1> ; <var:h> := <var:h> + <var:j0> {{ <var:h> = <nat:1> * <var:O> ^ <nat:3> + <nat:4> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:4> * <var:O> /\ <var:j3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:4> * <var:O> /\ <var:j3> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:4> * <var:O> /\ <var:j3> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:4> * <var:O> /\ <var:j3> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:4> * <var:O> /\ <var:h> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:j0> = <nat:1> /\ <var:h> = <nat:1> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:h> = <nat:1> * <var:O> ^ <nat:3> + <nat:4> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 