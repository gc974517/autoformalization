\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G1> := <var:e> ; <var:G2> := <var:G1> * <var:e> ; <var:G3> := <var:G2> * <var:e> ; <var:G4> := <var:G3> * <var:e> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:4> ; <var:G3> := <var:G3> * <nat:1> ; <var:G4> := <var:G4> * <nat:3> ; <var:Y> := <var:G4> <var:Y> := <var:Y> + <var:G3> <var:Y> := <var:Y> + <var:G1> <var:Y> := <var:Y> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:e> = <var:r> $ , letting positive integer coefficients $ <var:r> $ , ahead of executing our set of commands then $ <var:Y> = <nat:3> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:e> = <var:r> \} \\ <var:G1> := <var:e> ; \\ \{ <var:e> = <var:r> \land <var:G1> = <var:r> \} \\ <var:G2> := <var:G1> * <var:e> ; \\ \{ <var:e> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:e> ; \\ \{ <var:e> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <var:r> ^ <nat:3> \} \\ <var:G4> := <var:G3> * <var:e> ; \\ \{ <var:e> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <var:r> ^ <nat:3> \land <var:G4> = <var:r> ^ <nat:4> \} \\ <var:G0> := <nat:4> ; \\ \{ <var:e> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <var:r> ^ <nat:3> \land <var:G4> = <var:r> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:G1> := <var:G1> * <nat:4> ; \\ \{ <var:e> = <var:r> \land <var:G1> = <nat:4> \cdot <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <var:r> ^ <nat:3> \land <var:G4> = <var:r> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:G3> := <var:G3> * <nat:1> ; \\ \{ <var:e> = <var:r> \land <var:G1> = <nat:4> \cdot <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:G4> = <var:r> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:G4> := <var:G4> * <nat:3> ; \\ \{ <var:e> = <var:r> \land <var:G1> = <nat:4> \cdot <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:G4> = <nat:3> \cdot <var:r> ^ <nat:4> \land <var:G0> = <nat:4> \} \\ <var:Y> := <var:G4> \\ \{ <var:e> = <var:r> \land <var:G1> = <nat:4> \cdot <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:G0> = <nat:4> \land <var:Y> = <nat:3> \cdot <var:r> ^ <nat:4> \} \\ <var:Y> := <var:Y> + <var:G3> \\ \{ <var:e> = <var:r> \land <var:G1> = <nat:4> \cdot <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G0> = <nat:4> \land <var:Y> = <nat:3> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:G1> \\ \{ <var:e> = <var:r> \land <var:G0> = <nat:4> \land <var:Y> = <nat:3> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> \} \\ <var:Y> := <var:Y> + <var:G0> \\ \{ <var:e> = <var:r> \land <var:Y> = <nat:3> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> + <nat:4> \} \end{eqnarray} Hence , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Definition <def:poly> := <var:G1> := <var:e> ; <var:G2> := <var:G1> * <var:e> ; <var:G3> := <var:G2> * <var:e> ; <var:G4> := <var:G3> * <var:e> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:4> ; <var:G3> := <var:G3> * <nat:1> ; <var:G4> := <var:G4> * <nat:3> ; <var:Y> := <var:G4> <var:Y> := <var:Y> + <var:G3> <var:Y> := <var:Y> + <var:G1> <var:Y> := <var:Y> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:e> = <var:r> }} <def:poly> {{ <var:Y> = <nat:3> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <var:r> ^ <nat:3> /\ <var:G4> = <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <var:r> ^ <nat:3> /\ <var:G4> = <var:r> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <nat:4> * <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <var:r> ^ <nat:3> /\ <var:G4> = <var:r> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <nat:4> * <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:G4> = <var:r> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <nat:4> * <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:G4> = <nat:3> * <var:r> ^ <nat:4> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <nat:4> * <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:G0> = <nat:4> /\ <var:Y> = <nat:3> * <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G1> = <nat:4> * <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G0> = <nat:4> /\ <var:Y> = <nat:3> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:G0> = <nat:4> /\ <var:Y> = <nat:3> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:Y> = <nat:3> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 