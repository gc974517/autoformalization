\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:T1> := <var:U> ; <var:T2> := <var:T1> * <var:U> ; <var:T3> := <var:T2> * <var:U> ; <var:T0> := <nat:9> ; <var:T1> := <var:T1> * <nat:9> ; <var:T3> := <var:T3> * <nat:2> ; <var:F> := <var:T3> <var:F> := <var:F> + <var:T1> <var:F> := <var:F> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for any natural numbers $ <var:a> $ --- it to be that $ <var:U> = <var:a> $ before running the set of commands then $ <var:F> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:9> \cdot <var:a> + <nat:9> $ when segment of code exits . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:U> = <var:a> \} \\ <var:T1> := <var:U> ; \\ \{ <var:U> = <var:a> \land <var:T1> = <var:a> \} \\ <var:T2> := <var:T1> * <var:U> ; \\ \{ <var:U> = <var:a> \land <var:T1> = <var:a> \land <var:T2> = <var:a> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:U> ; \\ \{ <var:U> = <var:a> \land <var:T1> = <var:a> \land <var:T2> = <var:a> ^ <nat:2> \land <var:T3> = <var:a> ^ <nat:3> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:U> = <var:a> \land <var:T1> = <var:a> \land <var:T2> = <var:a> ^ <nat:2> \land <var:T3> = <var:a> ^ <nat:3> \land <var:T0> = <nat:9> \} \\ <var:T1> := <var:T1> * <nat:9> ; \\ \{ <var:U> = <var:a> \land <var:T1> = <nat:9> * <var:a> \land <var:T2> = <var:a> ^ <nat:2> \land <var:T3> = <var:a> ^ <nat:3> \land <var:T0> = <nat:9> \} \\ <var:T3> := <var:T3> * <nat:2> ; \\ \{ <var:U> = <var:a> \land <var:T1> = <nat:9> * <var:a> \land <var:T2> = <var:a> ^ <nat:2> \land <var:T3> = <nat:2> * <var:a> ^ <nat:3> \land <var:T0> = <nat:9> \} \end{eqnarray} Allowing the execution of this segment of code results in : \begin{eqnarray} <var:F> := <var:T3> \\ \{ <var:U> = <var:a> \land <var:T1> = <nat:9> * <var:a> \land <var:T2> = <var:a> ^ <nat:2> \land <var:T0> = <nat:9> \land <var:F> = <nat:2> * <var:a> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:T1> \\ \{ <var:U> = <var:a> \land <var:T0> = <nat:9> \land <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:9> * <var:a> \} \\ <var:F> := <var:F> + <var:T0> \\ \{ <var:U> = <var:a> \land <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:9> * <var:a> + <nat:9> \} \end{eqnarray} As a result , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:U> ; <var:T2> := <var:T1> * <var:U> ; <var:T3> := <var:T2> * <var:U> ; <var:T0> := <nat:9> ; <var:T1> := <var:T1> * <nat:9> ; <var:T3> := <var:T3> * <nat:2> ; <var:F> := <var:T3> <var:F> := <var:F> + <var:T1> <var:F> := <var:F> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:U> = <var:a> }} <def:poly> {{ <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:9> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:T1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:T1> = <var:a> /\ <var:T2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:T1> = <var:a> /\ <var:T2> = <var:a> ^ <nat:2> /\ <var:T3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:T1> = <var:a> /\ <var:T2> = <var:a> ^ <nat:2> /\ <var:T3> = <var:a> ^ <nat:3> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:T1> = <nat:9> * <var:a> /\ <var:T2> = <var:a> ^ <nat:2> /\ <var:T3> = <var:a> ^ <nat:3> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:T1> = <nat:9> * <var:a> /\ <var:T2> = <var:a> ^ <nat:2> /\ <var:T3> = <nat:2> * <var:a> ^ <nat:3> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:T1> = <nat:9> * <var:a> /\ <var:T2> = <var:a> ^ <nat:2> /\ <var:T0> = <nat:9> /\ <var:F> = <nat:2> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:T0> = <nat:9> /\ <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:F> = <nat:2> * <var:a> ^ <nat:3> + <nat:9> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 