\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:3> ; <var:I> := <var:E0> \end{verbatim} Assuming that $ <var:i> = <var:C> $ ahead of interpreting this set of instructions , it follows that $ <var:I> = <nat:3> $ when series of instructions terminates . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands is shown with Hoare reasoning . Taking another step toward the subsequent statement found in our list of instructions , the line yielding $ <nat:3> $ toward $ <var:E0>$ . This transfers $ \{ <var:i> = <var:C> \} $ to $ \{ <var:i> = <var:C> \land <var:E0> = <nat:3> \} $ . This is rigorously given with the assignment rule defined by Hoare techniques . Further , we have the statement assigning $ <var:E0$ into $ <var:I>$ . This code takes the precondition $ \{ <var:i> = <var:C> \land <var:E0> = <nat:3> \} $ to $ \{ <var:i> = <var:C> \land <var:I> = <nat:3> \} $ . This is sound through the assignment inference rule in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:i> = <var:C> }} <var:E0> := <nat:3> ; <var:I> := <var:E0> {{ <var:I> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:I> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 