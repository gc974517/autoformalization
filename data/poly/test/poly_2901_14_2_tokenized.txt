\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n> := <nat:2> ; <var:n> := <nat:3> + <var:n> * <var:p> ; <var:n> := <nat:3> + <var:n> * <var:p> ; <var:n> := <nat:3> + <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <nat:1> + <var:n> * <var:p> ; <var:n> := <nat:4> + <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <nat:2> + <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <nat:3> + <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <nat:4> + <var:n> * <var:p> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:p> = <var:g> $ before the execution of our code then we see $ <var:n> = <nat:2> \cdot <var:g> ^ <nat:13> + <nat:3> \cdot <var:g> ^ <nat:12> + <nat:3> \cdot <var:g> ^ <nat:11> + <nat:3> \cdot <var:g> ^ <nat:10> + <nat:1> \cdot <var:g> ^ <nat:8> + <nat:4> \cdot <var:g> ^ <nat:7> + <nat:2> \cdot <var:g> ^ <nat:5> + <nat:3> \cdot <var:g> ^ <nat:2> + <nat:4> $ after list of commands has finished . \end{theorem} \begin{proof} Applying Hoare logic gives : \begin{eqnarray} \{ <var:p> = <var:g> \} \\ <var:n> := <nat:2> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \} \\ <var:n> := <nat:3> + <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> + <nat:3> \} \\ <var:n> := <nat:3> + <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:3> \} \\ <var:n> := <nat:3> + <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:3> \} \\ <var:n> := <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + \} \\ <var:n> := <nat:1> + <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:5> + <nat:3> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:1> \} \\ <var:n> := <nat:4> + <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:6> + <nat:3> \times <var:g> ^ <nat:5> + <nat:3> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> + <nat:4> \} \\ <var:n> := <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:7> + <nat:3> \times <var:g> ^ <nat:6> + <nat:3> \times <var:g> ^ <nat:5> + <nat:3> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + \} \\ <var:n> := <nat:2> + <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:8> + <nat:3> \times <var:g> ^ <nat:7> + <nat:3> \times <var:g> ^ <nat:6> + <nat:3> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:2> \} \\ <var:n> := <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:9> + <nat:3> \times <var:g> ^ <nat:8> + <nat:3> \times <var:g> ^ <nat:7> + <nat:3> \times <var:g> ^ <nat:6> + <nat:1> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> + \} \end{eqnarray} Furthering interpreting our segment of code yields : \begin{eqnarray} <var:n> := <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:10> + <nat:3> \times <var:g> ^ <nat:9> + <nat:3> \times <var:g> ^ <nat:8> + <nat:3> \times <var:g> ^ <nat:7> + <nat:1> \times <var:g> ^ <nat:5> + <nat:4> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:2> + \} \end{eqnarray} Furthering the execution of our set of commands yields : \begin{eqnarray} <var:n> := <nat:3> + <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:11> + <nat:3> \times <var:g> ^ <nat:10> + <nat:3> \times <var:g> ^ <nat:9> + <nat:3> \times <var:g> ^ <nat:8> + <nat:1> \times <var:g> ^ <nat:6> + <nat:4> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:3> + <nat:3> \} \\ <var:n> := <var:n> * <var:p> ; \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:12> + <nat:3> \times <var:g> ^ <nat:11> + <nat:3> \times <var:g> ^ <nat:10> + <nat:3> \times <var:g> ^ <nat:9> + <nat:1> \times <var:g> ^ <nat:7> + <nat:4> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> + \} \\ <var:n> := <nat:4> + <var:n> * <var:p> \\ \{ <var:p> = <var:g> \land <var:n> = <nat:2> \times <var:g> ^ <nat:13> + <nat:3> \times <var:g> ^ <nat:12> + <nat:3> \times <var:g> ^ <nat:11> + <nat:3> \times <var:g> ^ <nat:10> + <nat:1> \times <var:g> ^ <nat:8> + <nat:4> \times <var:g> ^ <nat:7> + <nat:2> \times <var:g> ^ <nat:5> + <nat:3> \times <var:g> ^ <nat:2> + <nat:4> \} \end{eqnarray} Hence , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:2> ; <var:n> := <nat:3> + <var:n> * <var:p> ; <var:n> := <nat:3> + <var:n> * <var:p> ; <var:n> := <nat:3> + <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <nat:1> + <var:n> * <var:p> ; <var:n> := <nat:4> + <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <nat:2> + <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <nat:3> + <var:n> * <var:p> ; <var:n> := <var:n> * <var:p> ; <var:n> := <nat:4> + <var:n> * <var:p> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:p> = <var:g> }} <def:poly> {{ <var:n> = <nat:2> * <var:g> ^ <nat:13> + <nat:3> * <var:g> ^ <nat:12> + <nat:3> * <var:g> ^ <nat:11> + <nat:3> * <var:g> ^ <nat:10> + <nat:1> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:9> + <nat:3> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:10> + <nat:3> * <var:g> ^ <nat:9> + <nat:3> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:11> + <nat:3> * <var:g> ^ <nat:10> + <nat:3> * <var:g> ^ <nat:9> + <nat:3> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:12> + <nat:3> * <var:g> ^ <nat:11> + <nat:3> * <var:g> ^ <nat:10> + <nat:3> * <var:g> ^ <nat:9> + <nat:1> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:n> = <nat:2> * <var:g> ^ <nat:13> + <nat:3> * <var:g> ^ <nat:12> + <nat:3> * <var:g> ^ <nat:11> + <nat:3> * <var:g> ^ <nat:10> + <nat:1> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 