\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:T> := <nat:1> ; <var:T> := <nat:1> + <var:T> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Given that $ <var:A> = <var:O> $ before evaluating our code it must be that $ <var:T> = <nat:1> * <var:O> + <nat:1> $ . \end{theorem} \begin{proof} Applying standard Hoare logic produces : \begin{eqnarray} \{ <var:A> = <var:O> \} \\ <var:T> := <nat:1> ; \\ \{ <var:A> = <var:O> \land <var:T> = <nat:1> \} \\ <var:T> := <nat:1> + <var:T> * <var:A> \\ \{ <var:A> = <var:O> \land <var:T> = <nat:1> \cdot <var:O> + <nat:1> \} \end{eqnarray} Given the preceding argument , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:T> := <nat:1> ; <var:T> := <nat:1> + <var:T> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:A> = <var:O> }} <def:poly> {{ <var:T> = <nat:1> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:T> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:T> = <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 