\begin{document} \begin{theorem} Define the following code in \emph{Imp} as \begin{verbatim} <var:M1> := <var:T> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:6> ; <var:q> := <var:M1> <var:q> := <var:q> + <var:M0> \end{verbatim} Allowing it to be that $ <var:T> = <var:U> $ --- for all natural numbers $ <var:U> $ --- ahead of the execution of this code it must be that $ <var:q> = <nat:6> \cdot <var:U> + <nat:6> $ after series of commands is done executing . \end{theorem} \begin{proof} The application of typical Hoare techniques results in : \begin{eqnarray} \{ <var:T> = <var:U> \} \\ <var:M1> := <var:T> ; \\ \{ <var:T> = <var:U> \land <var:M1> = <var:U> \} \\ <var:M0> := <nat:6> ; \\ \{ <var:T> = <var:U> \land <var:M1> = <var:U> \land <var:M0> = <nat:6> \} \\ <var:M1> := <var:M1> * <nat:6> ; \\ \{ <var:T> = <var:U> \land <var:M1> = <nat:6> \cdot <var:U> \land <var:M0> = <nat:6> \} \\ <var:q> := <var:M1> \\ \{ <var:T> = <var:U> \land <var:M0> = <nat:6> \land <var:q> = <nat:6> \cdot <var:U> \} \\ <var:q> := <var:q> + <var:M0> \\ \{ <var:T> = <var:U> \land <var:q> = <nat:6> \cdot <var:U> + <nat:6> \} \end{eqnarray} Hence , the list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:T> = <var:U> }} <var:M1> := <var:T> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:6> ; <var:q> := <var:M1> <var:q> := <var:q> + <var:M0> {{ <var:q> = <nat:6> * <var:U> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:M1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:M1> = <var:U> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:M1> = <nat:6> * <var:U> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:M0> = <nat:6> /\ <var:q> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:q> = <nat:6> * <var:U> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 