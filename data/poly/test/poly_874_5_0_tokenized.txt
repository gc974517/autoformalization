\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:9> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:j> ; <var:D> := <var:i1> ; <var:D> := <var:D> + <var:i0> \end{verbatim} Assuming that we have $ <var:j> = <var:w> $ , for some positive integers $ <var:w> $ , prior to the execution of this segment of code , it holds that we have $ <var:D> = <nat:1> \times <var:w> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be done by Hoare techniques . Focusing on the upcoming lines in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:j> = <var:w> \} & <var:i0> := <nat:9> & \{ <var:j> = <var:w> \land <var:i0> = <nat:9> \} \\ \{ <var:j> = <var:w> \land <var:i0> = <nat:9> \} & <var:i1> := <nat:1> & \{ <var:j> = <var:w> \land <var:i0> = <nat:9> \land <var:i1> = <nat:1> \} \\ \{ <var:j> = <var:w> \land <var:i0> = <nat:9> \land <var:i1> = <nat:1> \} & <var:i1> := <var:i1> * <var:j> & \{ <var:j> = <var:w> \land <var:i0> = <nat:9> \land <var:i1> = <nat:1> \times <var:w> \} \\ \{ <var:j> = <var:w> \land <var:i0> = <nat:9> \land <var:i1> = <nat:1> \times <var:w> \} & <var:D> := <var:i1> & \{ <var:j> = <var:w> \land <var:i0> = <nat:9> \land <var:D> = <nat:1> \times <var:w> \} \end{tabular} This is deduced with the binding law from typical Hoare reasoning . Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:j> = <var:w> \} & <var:i0> := <nat:9> & \{ <var:j> = <var:w> \land <var:i0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:j> = <var:w> }} <var:i0> := <nat:9> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:j> ; <var:D> := <var:i1> ; <var:D> := <var:D> + <var:i0> {{ <var:D> = <nat:1> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:i0> = <nat:9> /\ <var:D> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:D> = <nat:1> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 