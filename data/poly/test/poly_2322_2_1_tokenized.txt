\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:R0> := <nat:5> ; <var:L> := <var:R0> \end{verbatim} Allowing $ <var:Y> = <var:V> $ --- for any positive numbers $ <var:V> $ --- before running this list of instructions then we see $ <var:L> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:V> \} \\ <var:R0> := <nat:5> ; \\ \{ <var:Y> = <var:V> \land <var:R0> = <nat:5> \} \\ <var:L> := <var:R0> \\ \{ <var:Y> = <var:V> \land <var:L> = <nat:5> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:Y> = <var:V> }} <var:R0> := <nat:5> ; <var:L> := <var:R0> {{ <var:L> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:V> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:V> /\ <var:L> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 