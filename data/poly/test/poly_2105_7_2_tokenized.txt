\begin{document} \begin{theorem} Consider the following code such that \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <nat:3> + <var:z> * <var:L> ; <var:z> := <nat:1> + <var:z> * <var:L> ; <var:z> := <nat:4> + <var:z> * <var:L> ; <var:z> := <nat:1> + <var:z> * <var:L> ; <var:z> := <nat:4> + <var:z> * <var:L> ; <var:z> := <nat:4> + <var:z> * <var:L> \end{verbatim} Allowing that we have $ <var:L> = <var:x> $ , for every positive numbers $ <var:x> $ , before evaluating the series of instructions , it must be that $ <var:z> = <nat:2> \times <var:x> ^ <nat:6> + <nat:3> \times <var:x> ^ <nat:5> + <nat:1> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this segment of code can be shown using standard Hoare reasoning . Going forward , we have the assignment statement \verb | <var:z> := <nat:2> ; | . This takes the precondition $ \{ <var:L> = <var:x> \} $ as the postcondition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \} $ . Now , the binding command \verb | <var:z> := <nat:3> + <var:z> * <var:L> ; | . This takes $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \} $ toward the postcondition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> + <nat:3> \} $ . Next , we have the line \verb | <var:z> := <nat:1> + <var:z> * <var:L> ; | . This code takes the precondition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> + <nat:3> \} $ toward the condition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:1> \} $ . This is shown with the assignment law obtained from usual Hoare logic . Stepping forward , we have the variable assignmet statement letting $ <nat:4> + <var:z> * <var:L> $ to $ <var:z>$ . This forwards the precondition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:1> \} $ as the condition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:4> \} $ . Considering the upcoming piece of code contained in the set of instructions , the variable binding statement letting $ <nat:1> + <var:z> * <var:L> $ to $ <var:z>$ . This command advances the precondition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:4> \} $ toward the condition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:4> + <nat:3> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:1> \} $ . This is shown through the assignment inference rule in usual Hoare logic . Observing the upcoming piece of code contained in the segment of code , we see the binding line giving $ <nat:4> + <var:z> * <var:L> $ as $ <var:z>$ . This statement moves the precondition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:4> + <nat:3> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:1> \} $ to $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:5> + <nat:3> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:4> \} $ . This is guaranteed using the assignment law given in Hoare techniques . Taking a look at the subsequent piece of code contained in the segment of code , we have the variable update line \verb | <var:z> := <nat:4> + <var:z> * <var:L> | . This statement moves $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:5> + <nat:3> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:4> \} $ to the postcondition $ \{ <var:L> = <var:x> \land <var:z> = <nat:2> \times <var:x> ^ <nat:6> + <nat:3> \times <var:x> ^ <nat:5> + <nat:1> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:L> = <var:x> }} <var:z> := <nat:2> ; <var:z> := <nat:3> + <var:z> * <var:L> ; <var:z> := <nat:1> + <var:z> * <var:L> ; <var:z> := <nat:4> + <var:z> * <var:L> ; <var:z> := <nat:1> + <var:z> * <var:L> ; <var:z> := <nat:4> + <var:z> * <var:L> ; <var:z> := <nat:4> + <var:z> * <var:L> {{ <var:z> = <nat:2> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z> = <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z> = <nat:2> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z> = <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z> = <nat:2> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z> = <nat:2> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 