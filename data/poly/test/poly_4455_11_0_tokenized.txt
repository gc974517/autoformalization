\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:4> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:P> ; <var:a2> := <var:a2> * <var:P> ; <var:a3> := <nat:2> ; <var:a3> := <var:a3> * <var:P> ; <var:a3> := <var:a3> * <var:P> ; <var:a3> := <var:a3> * <var:P> ; <var:o> := <var:a3> ; <var:o> := <var:o> + <var:a2> ; <var:o> := <var:o> + <var:a0> \end{verbatim} Given ( assuming some $ <var:X> \in \mathbb{Z}^+ $ ) it to be that $ <var:P> = <var:X> $ prior to running the program then $ <var:o> = <nat:2> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:4> $ when set of commands executes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is shown using Hoare techniques . Taking another step toward the proceeding bits of codeseen in the list of instructions , we have \verb | { <var:P> = <var:X> } <var:a0> := <nat:4> { <var:P> = <var:X> \land <var:a0> = <nat:4> } | , \verb | { <var:P> = <var:X> \land <var:a0> = <nat:4> } <var:a2> := <nat:3> { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> } | , \verb | { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> } <var:a2> := <var:a2> * <var:P> { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> } | and \verb | { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> } <var:a2> := <var:a2> * <var:P> { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> ^ <nat:2> } | . This is guaranteed with the law found in typical Hoare reasoning . Going forward , we have \verb | { <var:P> = <var:X> } <var:a0> := <nat:4> { <var:P> = <var:X> \land <var:a0> = <nat:4> } | . Now , we have \verb | { <var:P> = <var:X> } <var:a0> := <nat:4> { <var:P> = <var:X> \land <var:a0> = <nat:4> } | , \verb | { <var:P> = <var:X> \land <var:a0> = <nat:4> } <var:a2> := <nat:3> { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> } | , \verb | { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> } <var:a2> := <var:a2> * <var:P> { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> } | , \verb | { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> } <var:a2> := <var:a2> * <var:P> { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> ^ <nat:2> } | , \verb | { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> ^ <nat:2> } <var:a3> := <nat:2> { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:a3> = <nat:2> } | and \verb | { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:a3> = <nat:2> } <var:a3> := <var:a3> * <var:P> { <var:P> = <var:X> \land <var:a0> = <nat:4> \land <var:a2> = <nat:3> \cdot <var:X> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:X> } | . This is known to be sound by the variable binding rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:P> = <var:X> }} <var:a0> := <nat:4> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:P> ; <var:a2> := <var:a2> * <var:P> ; <var:a3> := <nat:2> ; <var:a3> := <var:a3> * <var:P> ; <var:a3> := <var:a3> * <var:P> ; <var:a3> := <var:a3> * <var:P> ; <var:o> := <var:a3> ; <var:o> := <var:o> + <var:a2> ; <var:o> := <var:o> + <var:a0> {{ <var:o> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:a3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:o> = <nat:2> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:a0> = <nat:4> /\ <var:o> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:o> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 