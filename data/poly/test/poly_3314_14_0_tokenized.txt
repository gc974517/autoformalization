\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:4> ; <var:p1> := <nat:7> ; <var:p1> := <var:p1> * <var:w> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:w> ; <var:p2> := <var:p2> * <var:w> ; <var:p3> := <nat:9> ; <var:p3> := <var:p3> * <var:w> ; <var:p3> := <var:p3> * <var:w> ; <var:p3> := <var:p3> * <var:w> ; <var:e> := <var:p3> ; <var:e> := <var:e> + <var:p2> ; <var:e> := <var:e> + <var:p1> ; <var:e> := <var:e> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Allowing it to be that $ <var:w> = <var:v> $ before the evaluation of this series of commands , it holds that we have $ <var:e> = <nat:9> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:7> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} The argument for this segment of code can be shown with typical Hoare logic . Taking another step toward the following step contained in our program , we see the variable binding command letting $ <nat:4> $ into $ <var:p0>$ . This command redefines the condition $ \{ <var:w> = <var:v> \} $ into the postcondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \} $ . Immediately following , we see the variable binding line \verb | <var:p1> := <nat:7> ; | . This line redefines the condition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \} $ to the condition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \} $ . Further , we have the statement \verb | <var:p1> := <var:p1> * <var:w> ; | . This statement takes the precondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \} $ as the condition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \} $ . Going forward , we have the binding command \verb | <var:p2> := <nat:2> ; | . This line advances $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \} $ as the postcondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \} $ . After , we see the variable assignmet line binding $ <var:p2> * <var:w> $ toward $ <var:p2>$ . This takes the precondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \} $ as $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> \} $ . This is sound with the assignment rule defined in standard Hoare reasoning . Taking a look at the next line contained in the list of commands , the variable binding command \verb | <var:p2> := <var:p2> * <var:w> ; | . This advances $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> \} $ as the postcondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \} $ . Honing in on the following piece of code seen in our code segment , we have the variable update command \verb | <var:p3> := <nat:9> ; | . This line redefines the condition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \} $ toward the postcondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:9> \} $ . This is deduced with the assignment scheme defined in Hoare logic . Considering the next statement in our list of commands , we have the environment update line \verb | <var:p3> := <var:p3> * <var:w> ; | . This command transfers the precondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:9> \} $ to the postcondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:v> \} $ . Further , we have the variable binding code \verb | <var:p3> := <var:p3> * <var:w> ; | . This code advances the precondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:v> \} $ toward the postcondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:v> ^ <nat:2> \} $ . Advancing , we see the variable assignmet code assigning $ <var:p3> * <var:w> $ into $ <var:p3>$ . This transfers the condition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:v> ^ <nat:2> \} $ into the postcondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:v> ^ <nat:3> \} $ . This is rigorously given using the assignment law found in typical Hoare techniques . Focusing on the following bit of code seen in our series of commands , the assignment code giving $ <var:p3> $ into $ <var:e>$ . This line advances the precondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:v> ^ <nat:3> \} $ as $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:e> = <nat:9> \times <var:v> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment rule defined by Hoare techniques . Moving on to the proceeding step seen in the set of commands , we see the binding command defining $ <var:e> + <var:p2> $ to $ <var:e>$ . This takes $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:e> = <nat:9> \times <var:v> ^ <nat:3> \} $ into the postcondition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:e> = <nat:9> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> \} $ . This is guaranteed with the assignment scheme defined in typical Hoare techniques . Moving onward , the variable assignmet command binding $ <var:e> + <var:p1> $ toward $ <var:e>$ . This takes $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:p1> = <nat:7> \times <var:v> \land <var:e> = <nat:9> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> \} $ toward $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:e> = <nat:9> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> \} $ . This is shown by the assignment inference rule found in standard Hoare techniques . Jumping to the upcoming command seen in our series of instructions , we see the environment update line \verb | <var:e> := <var:e> + <var:p0> | . This takes the condition $ \{ <var:w> = <var:v> \land <var:p0> = <nat:4> \land <var:e> = <nat:9> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> \} $ into $ \{ <var:w> = <var:v> \land <var:e> = <nat:9> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> + <nat:4> \} $ . This is shown to be logically sound by the assignment inference rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p0> := <nat:4> ; <var:p1> := <nat:7> ; <var:p1> := <var:p1> * <var:w> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:w> ; <var:p2> := <var:p2> * <var:w> ; <var:p3> := <nat:9> ; <var:p3> := <var:p3> * <var:w> ; <var:p3> := <var:p3> * <var:w> ; <var:p3> := <var:p3> * <var:w> ; <var:e> := <var:p3> ; <var:e> := <var:e> + <var:p2> ; <var:e> := <var:e> + <var:p1> ; <var:e> := <var:e> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:w> = <var:v> }} <def:poly> {{ <var:e> = <nat:9> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:e> = <nat:9> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:7> * <var:v> /\ <var:e> = <nat:9> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:p0> = <nat:4> /\ <var:e> = <nat:9> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:e> = <nat:9> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 