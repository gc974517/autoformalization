\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:J> := <nat:3> ; <var:J> := <nat:1> + <var:J> * <var:h> ; <var:J> := <nat:2> + <var:J> * <var:h> ; <var:J> := <nat:4> + <var:J> * <var:h> ; <var:J> := <nat:2> + <var:J> * <var:h> ; <var:J> := <nat:4> + <var:J> * <var:h> ; <var:J> := <nat:3> + <var:J> * <var:h> ; <var:J> := <nat:3> + <var:J> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:h> = <var:x> $ prior to executing this code segment , it must be that $ <var:J> = <nat:3> \cdot <var:x> ^ <nat:7> + <nat:1> \cdot <var:x> ^ <nat:6> + <nat:2> \cdot <var:x> ^ <nat:5> + <nat:4> \cdot <var:x> ^ <nat:4> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:4> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:3> $ after program has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our series of commands is evident through typical Hoare reasoning . Advancing on , we have the command \verb | <var:J> := <nat:3> ; | . This takes the condition $ \{ <var:h> = <var:x> \} $ to the postcondition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> \} $ . Immediately after , we have the binding line \verb | <var:J> := <nat:1> + <var:J> * <var:h> ; | . This advances $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> \} $ toward $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> + <nat:1> \} $ . Immediately following , we see the variable binding line assigning $ <nat:2> + <var:J> * <var:h> $ as $ <var:J>$ . This command redefines $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> + <nat:1> \} $ as the condition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> \} $ . Jumping to the next line of code contained in the set of instructions , the environment update line binding $ <nat:4> + <var:J> * <var:h> $ toward $ <var:J>$ . This takes the condition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> \} $ . This is given through the assignment rule of typical Hoare reasoning . Taking another step toward the following statement found in our set of instructions , the variable assignmet code \verb | <var:J> := <nat:2> + <var:J> * <var:h> ; | . This statement moves $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> \} $ toward the postcondition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> \} $ . Further , we have the assignment line \verb | <var:J> := <nat:4> + <var:J> * <var:h> ; | . This forwards the condition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> \} $ . Keeping momentum , the variable assignmet command defining $ <nat:3> + <var:J> * <var:h> $ toward $ <var:J>$ . This line moves the precondition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> \} $ into the condition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> \} $ . Advancing on , we see the variable binding code \verb | <var:J> := <nat:3> + <var:J> * <var:h> | . This transfers $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:x> \land <var:J> = <nat:3> * <var:x> ^ <nat:7> + <nat:1> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> \} $ . This is sound with the assignment inference rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:J> := <nat:3> ; <var:J> := <nat:1> + <var:J> * <var:h> ; <var:J> := <nat:2> + <var:J> * <var:h> ; <var:J> := <nat:4> + <var:J> * <var:h> ; <var:J> := <nat:2> + <var:J> * <var:h> ; <var:J> := <nat:4> + <var:J> * <var:h> ; <var:J> := <nat:3> + <var:J> * <var:h> ; <var:J> := <nat:3> + <var:J> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:h> = <var:x> }} <def:poly> {{ <var:J> = <nat:3> * <var:x> ^ <nat:7> + <nat:1> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:J> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:J> = <nat:3> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:J> = <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:J> = <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:J> = <nat:3> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:J> = <nat:3> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:J> = <nat:3> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:J> = <nat:3> * <var:x> ^ <nat:7> + <nat:1> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 