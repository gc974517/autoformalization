\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:8> ; <var:m1> := <nat:9> ; <var:m1> := <var:m1> * <var:V> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:V> ; <var:m2> := <var:m2> * <var:V> ; <var:l> := <var:m2> ; <var:l> := <var:l> + <var:m1> ; <var:l> := <var:l> + <var:m0> \end{verbatim} Allowing --- letting positive coefficients $ <var:I> $ --- it to hold that $ <var:V> = <var:I> $ before executing the segment of code , then $ <var:l> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:8> $ when code segment is done executing . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives us : \begin{eqnarray} \{ <var:V> = <var:I> \} \\ <var:m0> := <nat:8> ; \\ \{ <var:V> = <var:I> \land <var:m0> = <nat:8> \} \\ <var:m1> := <nat:9> ; \\ \{ <var:V> = <var:I> \land <var:m0> = <nat:8> \land <var:m1> = <nat:9> \} \\ <var:m1> := <var:m1> * <var:V> ; \\ \{ <var:V> = <var:I> \land <var:m0> = <nat:8> \land <var:m1> = <nat:9> \cdot <var:I> \} \\ <var:m2> := <nat:3> ; \\ \{ <var:V> = <var:I> \land <var:m0> = <nat:8> \land <var:m1> = <nat:9> \cdot <var:I> \land <var:m2> = <nat:3> \} \\ <var:m2> := <var:m2> * <var:V> ; \\ \{ <var:V> = <var:I> \land <var:m0> = <nat:8> \land <var:m1> = <nat:9> \cdot <var:I> \land <var:m2> = <nat:3> \cdot <var:I> \} \\ <var:m2> := <var:m2> * <var:V> ; \\ \{ <var:V> = <var:I> \land <var:m0> = <nat:8> \land <var:m1> = <nat:9> \cdot <var:I> \land <var:m2> = <nat:3> \cdot <var:I> ^ <nat:2> \} \\ <var:l> := <var:m2> ; \\ \{ <var:V> = <var:I> \land <var:m0> = <nat:8> \land <var:m1> = <nat:9> \cdot <var:I> \land <var:l> = <nat:3> \cdot <var:I> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:m1> ; \\ \{ <var:V> = <var:I> \land <var:m0> = <nat:8> \land <var:l> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> \} \\ <var:l> := <var:l> + <var:m0> \\ \{ <var:V> = <var:I> \land <var:l> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:8> \} \end{eqnarray} As a consequence , the set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:V> = <var:I> }} <var:m0> := <nat:8> ; <var:m1> := <nat:9> ; <var:m1> := <var:m1> * <var:V> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:V> ; <var:m2> := <var:m2> * <var:V> ; <var:l> := <var:m2> ; <var:l> := <var:l> + <var:m1> ; <var:l> := <var:l> + <var:m0> {{ <var:l> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:9> * <var:I> /\ <var:m2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:9> * <var:I> /\ <var:m2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:9> * <var:I> /\ <var:m2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:9> * <var:I> /\ <var:l> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:m0> = <nat:8> /\ <var:l> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:l> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 