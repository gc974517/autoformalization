\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:p> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:4> ; <var:S> := <var:F1> <var:S> := <var:S> + <var:F0> \end{verbatim} Allow $ <var:p> = <var:z> $ ( given all integers $ <var:z> $ ) ahead of executing the set of commands it follows that we have $ <var:S> = <nat:4> \cdot <var:z> + <nat:2> $ . \end{theorem} \begin{proof} Let this decorated set of commands . \begin{eqnarray} \{ <var:p> = <var:z> \} \\ <var:F1> := <var:p> ; \\ \{ <var:p> = <var:z> \land <var:F1> = <var:z> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:p> = <var:z> \land <var:F1> = <var:z> \land <var:F0> = <nat:2> \} \\ <var:F1> := <var:F1> * <nat:4> ; \\ \{ <var:p> = <var:z> \land <var:F1> = <nat:4> \times <var:z> \land <var:F0> = <nat:2> \} \\ <var:S> := <var:F1> \\ \{ <var:p> = <var:z> \land <var:F0> = <nat:2> \land <var:S> = <nat:4> \times <var:z> \} \\ <var:S> := <var:S> + <var:F0> \\ \{ <var:p> = <var:z> \land <var:S> = <nat:4> \times <var:z> + <nat:2> \} \end{eqnarray} Applying standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:p> = <var:z> }} <var:F1> := <var:p> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:4> ; <var:S> := <var:F1> <var:S> := <var:S> + <var:F0> {{ <var:S> = <nat:4> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:z> /\ <var:F1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:z> /\ <var:F1> = <var:z> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:z> /\ <var:F1> = <nat:4> * <var:z> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:z> /\ <var:F0> = <nat:2> /\ <var:S> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:z> /\ <var:S> = <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 