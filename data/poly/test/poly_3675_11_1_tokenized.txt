\begin{document} \begin{theorem} Define the following program as \begin{verbatim} <var:K1> := <var:C> ; <var:K2> := <var:K1> * <var:C> ; <var:K3> := <var:K2> * <var:C> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:3> ; <var:j> := <var:K3> <var:j> := <var:j> + <var:K2> <var:j> := <var:j> + <var:K1> <var:j> := <var:j> + <var:K0> \end{verbatim} Assuming ( letting $ <var:a> \in \mathbb{N} $ ) that we have $ <var:C> = <var:a> $ before evaluating the list of commands , it holds that we see $ <var:j> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> + <nat:6> \cdot <var:a> + <nat:4> $ when series of instructions has finished . \end{theorem} \begin{proof} Arguing the correctness of our segment of code can be shown with usual Hoare techniques . Considering the following statements contained in our set of commands , we have \begin{eqnarray} \{ <var:C> = <var:a> \} \, <var:K1> := <var:C> \, \{ <var:C> = <var:a> \land <var:K1> = <var:a> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <var:a> \} \, <var:K2> := <var:K1> * <var:C> \, \{ <var:C> = <var:a> \land <var:K1> = <var:a> \land <var:K2> = <var:a> ^ <nat:2> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <var:a> \land <var:K2> = <var:a> ^ <nat:2> \} \, <var:K3> := <var:K2> * <var:C> \, \{ <var:C> = <var:a> \land <var:K1> = <var:a> \land <var:K2> = <var:a> ^ <nat:2> \land <var:K3> = <var:a> ^ <nat:3> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <var:a> \land <var:K2> = <var:a> ^ <nat:2> \land <var:K3> = <var:a> ^ <nat:3> \} \, <var:K0> := <nat:4> \, \{ <var:C> = <var:a> \land <var:K1> = <var:a> \land <var:K2> = <var:a> ^ <nat:2> \land <var:K3> = <var:a> ^ <nat:3> \land <var:K0> = <nat:4> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <var:a> \land <var:K2> = <var:a> ^ <nat:2> \land <var:K3> = <var:a> ^ <nat:3> \land <var:K0> = <nat:4> \} \, <var:K1> := <var:K1> * <nat:6> \, \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K2> = <var:a> ^ <nat:2> \land <var:K3> = <var:a> ^ <nat:3> \land <var:K0> = <nat:4> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K2> = <var:a> ^ <nat:2> \land <var:K3> = <var:a> ^ <nat:3> \land <var:K0> = <nat:4> \} \, <var:K2> := <var:K2> * <nat:5> \, \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:K3> = <var:a> ^ <nat:3> \land <var:K0> = <nat:4> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:K3> = <var:a> ^ <nat:3> \land <var:K0> = <nat:4> \} \, <var:K3> := <var:K3> * <nat:3> \, \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:K3> = <nat:3> \cdot <var:a> ^ <nat:3> \land <var:K0> = <nat:4> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:K3> = <nat:3> \cdot <var:a> ^ <nat:3> \land <var:K0> = <nat:4> \} \, <var:j> := <var:K3\, \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:K0> = <nat:4> \land <var:j> = <nat:3> \cdot <var:a> ^ <nat:3> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K2> = <nat:5> \cdot <var:a> ^ <nat:2> \land <var:K0> = <nat:4> \land <var:j> = <nat:3> \cdot <var:a> ^ <nat:3> \} \, <var:j> := <var:j> + <var:K2\, \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K0> = <nat:4> \land <var:j> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> \} \\ \{ <var:C> = <var:a> \land <var:K1> = <nat:6> \cdot <var:a> \land <var:K0> = <nat:4> \land <var:j> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> \} \, <var:j> := <var:j> + <var:K1\, \{ <var:C> = <var:a> \land <var:K0> = <nat:4> \land <var:j> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> + <nat:6> \cdot <var:a> \} \\ \{ <var:C> = <var:a> \land <var:K0> = <nat:4> \land <var:j> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> + <nat:6> \cdot <var:a> \} \, <var:j> := <var:j> + <var:K0\, \{ <var:C> = <var:a> \land <var:j> = <nat:3> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> + <nat:6> \cdot <var:a> + <nat:4> \} \end{eqnarray} This is deduced through the variable binding rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:C> = <var:a> }} <var:K1> := <var:C> ; <var:K2> := <var:K1> * <var:C> ; <var:K3> := <var:K2> * <var:C> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:3> ; <var:j> := <var:K3> <var:j> := <var:j> + <var:K2> <var:j> := <var:j> + <var:K1> <var:j> := <var:j> + <var:K0> {{ <var:j> = <nat:3> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <var:a> /\ <var:K2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <var:a> /\ <var:K2> = <var:a> ^ <nat:2> /\ <var:K3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <var:a> /\ <var:K2> = <var:a> ^ <nat:2> /\ <var:K3> = <var:a> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <nat:6> * <var:a> /\ <var:K2> = <var:a> ^ <nat:2> /\ <var:K3> = <var:a> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <nat:6> * <var:a> /\ <var:K2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:K3> = <var:a> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <nat:6> * <var:a> /\ <var:K2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:K3> = <nat:3> * <var:a> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <nat:6> * <var:a> /\ <var:K2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:K0> = <nat:4> /\ <var:j> = <nat:3> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K1> = <nat:6> * <var:a> /\ <var:K0> = <nat:4> /\ <var:j> = <nat:3> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:K0> = <nat:4> /\ <var:j> = <nat:3> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:a> /\ <var:j> = <nat:3> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 