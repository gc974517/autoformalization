\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:l> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:8> ; <var:p> := <var:P1> <var:p> := <var:p> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assuming that we have $ <var:l> = <var:o> $ ( for any positive integers $ <var:o> $ ) before the execution of our segment of code then $ <var:p> = <nat:8> \cdot <var:o> + <nat:7> $ when code segment has finished . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment can be given using the below decorated code segment . \begin{eqnarray} \{ <var:l> = <var:o> \} \\ <var:P1> := <var:l> ; \\ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \} \\ <var:P0> := <nat:7> ; \\ \{ <var:l> = <var:o> \land <var:P1> = <var:o> \land <var:P0> = <nat:7> \} \\ <var:P1> := <var:P1> * <nat:8> ; \\ \{ <var:l> = <var:o> \land <var:P1> = <nat:8> * <var:o> \land <var:P0> = <nat:7> \} \\ <var:p> := <var:P1> \\ \{ <var:l> = <var:o> \land <var:P0> = <nat:7> \land <var:p> = <nat:8> * <var:o> \} \\ <var:p> := <var:p> + <var:P0> \\ \{ <var:l> = <var:o> \land <var:p> = <nat:8> * <var:o> + <nat:7> \} \end{eqnarray} Using usual Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:l> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:8> ; <var:p> := <var:P1> <var:p> := <var:p> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:l> = <var:o> }} <def:poly> {{ <var:p> = <nat:8> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <var:o> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P1> = <nat:8> * <var:o> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:P0> = <nat:7> /\ <var:p> = <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:p> = <nat:8> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 