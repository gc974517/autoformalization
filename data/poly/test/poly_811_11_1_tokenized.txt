\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:i> ; <var:a2> := <var:a1> * <var:i> ; <var:a3> := <var:a2> * <var:i> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:8> ; <var:a2> := <var:a2> * <nat:6> ; <var:a3> := <var:a3> * <nat:6> ; <var:w> := <var:a3> <var:w> := <var:w> + <var:a2> <var:w> := <var:w> + <var:a1> <var:w> := <var:w> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:i> = <var:h> $ ahead of interpreting the list of instructions it follows that we have $ <var:w> = <nat:6> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning returns : \begin{eqnarray} \{ <var:i> = <var:h> \} \\ <var:a1> := <var:i> ; \\ \{ <var:i> = <var:h> \land <var:a1> = <var:h> \} \\ <var:a2> := <var:a1> * <var:i> ; \\ \{ <var:i> = <var:h> \land <var:a1> = <var:h> \land <var:a2> = <var:h> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:i> ; \\ \{ <var:i> = <var:h> \land <var:a1> = <var:h> \land <var:a2> = <var:h> ^ <nat:2> \land <var:a3> = <var:h> ^ <nat:3> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:i> = <var:h> \land <var:a1> = <var:h> \land <var:a2> = <var:h> ^ <nat:2> \land <var:a3> = <var:h> ^ <nat:3> \land <var:a0> = <nat:3> \} \\ <var:a1> := <var:a1> * <nat:8> ; \\ \{ <var:i> = <var:h> \land <var:a1> = <nat:8> \cdot <var:h> \land <var:a2> = <var:h> ^ <nat:2> \land <var:a3> = <var:h> ^ <nat:3> \land <var:a0> = <nat:3> \} \\ <var:a2> := <var:a2> * <nat:6> ; \\ \{ <var:i> = <var:h> \land <var:a1> = <nat:8> \cdot <var:h> \land <var:a2> = <nat:6> \cdot <var:h> ^ <nat:2> \land <var:a3> = <var:h> ^ <nat:3> \land <var:a0> = <nat:3> \} \\ <var:a3> := <var:a3> * <nat:6> ; \\ \{ <var:i> = <var:h> \land <var:a1> = <nat:8> \cdot <var:h> \land <var:a2> = <nat:6> \cdot <var:h> ^ <nat:2> \land <var:a3> = <nat:6> \cdot <var:h> ^ <nat:3> \land <var:a0> = <nat:3> \} \\ <var:w> := <var:a3> \\ \{ <var:i> = <var:h> \land <var:a1> = <nat:8> \cdot <var:h> \land <var:a2> = <nat:6> \cdot <var:h> ^ <nat:2> \land <var:a0> = <nat:3> \land <var:w> = <nat:6> \cdot <var:h> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:a2> \\ \{ <var:i> = <var:h> \land <var:a1> = <nat:8> \cdot <var:h> \land <var:a0> = <nat:3> \land <var:w> = <nat:6> \cdot <var:h> ^ <nat:3> + <nat:6> \cdot <var:h> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:a1> \\ \{ <var:i> = <var:h> \land <var:a0> = <nat:3> \land <var:w> = <nat:6> \cdot <var:h> ^ <nat:3> + <nat:6> \cdot <var:h> ^ <nat:2> + <nat:8> \cdot <var:h> \} \\ <var:w> := <var:w> + <var:a0> \\ \{ <var:i> = <var:h> \land <var:w> = <nat:6> \cdot <var:h> ^ <nat:3> + <nat:6> \cdot <var:h> ^ <nat:2> + <nat:8> \cdot <var:h> + <nat:3> \} \end{eqnarray} Given the preceding argument , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:i> ; <var:a2> := <var:a1> * <var:i> ; <var:a3> := <var:a2> * <var:i> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:8> ; <var:a2> := <var:a2> * <nat:6> ; <var:a3> := <var:a3> * <nat:6> ; <var:w> := <var:a3> <var:w> := <var:w> + <var:a2> <var:w> := <var:w> + <var:a1> <var:w> := <var:w> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:i> = <var:h> }} <def:poly> {{ <var:w> = <nat:6> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <var:h> /\ <var:a2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <var:h> /\ <var:a2> = <var:h> ^ <nat:2> /\ <var:a3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <var:h> /\ <var:a2> = <var:h> ^ <nat:2> /\ <var:a3> = <var:h> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <nat:8> * <var:h> /\ <var:a2> = <var:h> ^ <nat:2> /\ <var:a3> = <var:h> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <nat:8> * <var:h> /\ <var:a2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:a3> = <var:h> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <nat:8> * <var:h> /\ <var:a2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:a3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <nat:8> * <var:h> /\ <var:a2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:a0> = <nat:3> /\ <var:w> = <nat:6> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a1> = <nat:8> * <var:h> /\ <var:a0> = <nat:3> /\ <var:w> = <nat:6> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:a0> = <nat:3> /\ <var:w> = <nat:6> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:w> = <nat:6> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 