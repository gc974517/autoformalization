\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:9> ; <var:Z> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for every natural numbers $ <var:W> $ ) it to hold that $ <var:Q> = <var:W> $ before evaluating this list of instructions , it follows that $ <var:Z> = <nat:9> $ when program is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:W> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:Q> = <var:W> \land <var:z0> = <nat:9> \} \\ <var:Z> := <var:z0> \\ \{ <var:Q> = <var:W> \land <var:Z> = <nat:9> \} \end{eqnarray} The application of Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:9> ; <var:Z> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Q> = <var:W> }} <def:poly> {{ <var:Z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:W> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:W> /\ <var:Z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 