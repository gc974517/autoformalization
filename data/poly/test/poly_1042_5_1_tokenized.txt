\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:v1> := <var:P> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:9> ; <var:d> := <var:v1> <var:d> := <var:d> + <var:v0> \end{verbatim} Allow --- letting positive coefficients $ <var:b> $ --- it to be that $ <var:P> = <var:b> $ before running our code , it holds that $ <var:d> = <nat:9> \times <var:b> + <nat:1> $ . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:P> = <var:b> \} \\ <var:v1> := <var:P> ; \\ \{ <var:P> = <var:b> \land <var:v1> = <var:b> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:P> = <var:b> \land <var:v1> = <var:b> \land <var:v0> = <nat:1> \} \\ <var:v1> := <var:v1> * <nat:9> ; \\ \{ <var:P> = <var:b> \land <var:v1> = <nat:9> * <var:b> \land <var:v0> = <nat:1> \} \\ <var:d> := <var:v1> \\ \{ <var:P> = <var:b> \land <var:v0> = <nat:1> \land <var:d> = <nat:9> * <var:b> \} \\ <var:d> := <var:d> + <var:v0> \\ \{ <var:P> = <var:b> \land <var:d> = <nat:9> * <var:b> + <nat:1> \} \end{eqnarray} Given the above , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:P> = <var:b> }} <var:v1> := <var:P> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:9> ; <var:d> := <var:v1> <var:d> := <var:d> + <var:v0> {{ <var:d> = <nat:9> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:v1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:v1> = <var:b> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:v1> = <nat:9> * <var:b> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:v0> = <nat:1> /\ <var:d> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:d> = <nat:9> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 