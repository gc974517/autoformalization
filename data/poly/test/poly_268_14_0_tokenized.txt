\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:6> ; <var:k1> := <var:k1> * <var:P> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:P> ; <var:k2> := <var:k2> * <var:P> ; <var:k3> := <nat:6> ; <var:k3> := <var:k3> * <var:P> ; <var:k3> := <var:k3> * <var:P> ; <var:k3> := <var:k3> * <var:P> ; <var:A> := <var:k3> ; <var:A> := <var:A> + <var:k2> ; <var:A> := <var:A> + <var:k1> ; <var:A> := <var:A> + <var:k0> \end{verbatim} Assume , given any integers $ <var:y> $ , $ <var:P> = <var:y> $ ahead of running our code segment it holds that we see $ <var:A> = <nat:6> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:6> \times <var:y> + <nat:2> $ when list of instructions finishes . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:P> = <var:y> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \} \\ <var:k1> := <nat:6> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> \} \\ <var:k1> := <var:k1> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \} \\ <var:k2> := <nat:5> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:k2> = <nat:5> \} \\ <var:k2> := <var:k2> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:k2> = <nat:5> * <var:y> \} \\ <var:k2> := <var:k2> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:k2> = <nat:5> * <var:y> ^ <nat:2> \} \\ <var:k3> := <nat:6> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:k2> = <nat:5> * <var:y> ^ <nat:2> \land <var:k3> = <nat:6> \} \\ <var:k3> := <var:k3> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:k2> = <nat:5> * <var:y> ^ <nat:2> \land <var:k3> = <nat:6> * <var:y> \} \\ <var:k3> := <var:k3> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:k2> = <nat:5> * <var:y> ^ <nat:2> \land <var:k3> = <nat:6> * <var:y> ^ <nat:2> \} \\ <var:k3> := <var:k3> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:k2> = <nat:5> * <var:y> ^ <nat:2> \land <var:k3> = <nat:6> * <var:y> ^ <nat:3> \} \\ <var:A> := <var:k3> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:k2> = <nat:5> * <var:y> ^ <nat:2> \land <var:A> = <nat:6> * <var:y> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:k2> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:k1> = <nat:6> * <var:y> \land <var:A> = <nat:6> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:k1> ; \\ \{ <var:P> = <var:y> \land <var:k0> = <nat:2> \land <var:A> = <nat:6> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:6> * <var:y> \} \\ <var:A> := <var:A> + <var:k0> \\ \{ <var:P> = <var:y> \land <var:A> = <nat:6> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:2> \} \end{eqnarray} Therefore , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:P> = <var:y> }} <var:k0> := <nat:2> ; <var:k1> := <nat:6> ; <var:k1> := <var:k1> * <var:P> ; <var:k2> := <nat:5> ; <var:k2> := <var:k2> * <var:P> ; <var:k2> := <var:k2> * <var:P> ; <var:k3> := <nat:6> ; <var:k3> := <var:k3> * <var:P> ; <var:k3> := <var:k3> * <var:P> ; <var:k3> := <var:k3> * <var:P> ; <var:A> := <var:k3> ; <var:A> := <var:A> + <var:k2> ; <var:A> := <var:A> + <var:k1> ; <var:A> := <var:A> + <var:k0> {{ <var:A> = <nat:6> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:k2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:k2> = <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:k2> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:k2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:k3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:k2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:k3> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:k2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:k3> = <nat:6> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:k2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:k3> = <nat:6> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:k2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:A> = <nat:6> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:6> * <var:y> /\ <var:A> = <nat:6> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:k0> = <nat:2> /\ <var:A> = <nat:6> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:A> = <nat:6> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 