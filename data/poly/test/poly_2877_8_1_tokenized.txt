\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:s> ; <var:S2> := <var:S1> * <var:s> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:8> ; <var:S2> := <var:S2> * <nat:3> ; <var:l> := <var:S2> <var:l> := <var:l> + <var:S1> <var:l> := <var:l> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:s> = <var:h> $ prior to the execution of this code segment then we have $ <var:l> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:8> \cdot <var:h> + <nat:7> $ when program has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is clear through Hoare techniques . Moving on to the upcoming command seen in our list of commands , the variable binding line yielding $ <var:s> $ into $ <var:S1>$ . This command advances the precondition $ \{ <var:s> = <var:h> \} $ toward the postcondition $ \{ <var:s> = <var:h> \land <var:S1> = <var:h> \} $ . This is shown using the assignment law defined in usual Hoare reasoning . Going forward , we see the line giving $ <var:S1> * <var:s> $ to $ <var:S2>$ . This redefines $ \{ <var:s> = <var:h> \land <var:S1> = <var:h> \} $ to $ \{ <var:s> = <var:h> \land <var:S1> = <var:h> \land <var:S2> = <var:h> ^ <nat:2> \} $ . Observing the next line of code seen in our set of commands , we have the environment update code giving $ <nat:7> $ as $ <var:S0>$ . This line advances the precondition $ \{ <var:s> = <var:h> \land <var:S1> = <var:h> \land <var:S2> = <var:h> ^ <nat:2> \} $ toward the condition $ \{ <var:s> = <var:h> \land <var:S1> = <var:h> \land <var:S2> = <var:h> ^ <nat:2> \land <var:S0> = <nat:7> \} $ . Going to the next step , the variable assignmet command letting $ <var:S1> * <nat:8> $ toward $ <var:S1>$ . This takes the condition $ \{ <var:s> = <var:h> \land <var:S1> = <var:h> \land <var:S2> = <var:h> ^ <nat:2> \land <var:S0> = <nat:7> \} $ as $ \{ <var:s> = <var:h> \land <var:S1> = <nat:8> \times <var:h> \land <var:S2> = <var:h> ^ <nat:2> \land <var:S0> = <nat:7> \} $ . Moving on to the next step in our series of instructions , we have the variable update statement assigning $ <var:S2> * <nat:3> $ to $ <var:S2>$ . This line redefines $ \{ <var:s> = <var:h> \land <var:S1> = <nat:8> \times <var:h> \land <var:S2> = <var:h> ^ <nat:2> \land <var:S0> = <nat:7> \} $ as the postcondition $ \{ <var:s> = <var:h> \land <var:S1> = <nat:8> \times <var:h> \land <var:S2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:S0> = <nat:7> \} $ . Honing in on the subsequent statement found in the series of commands , we have the statement \verb | <var:l> := <var:S2> | . This forwards the precondition $ \{ <var:s> = <var:h> \land <var:S1> = <nat:8> \times <var:h> \land <var:S2> = <nat:3> \times <var:h> ^ <nat:2> \land <var:S0> = <nat:7> \} $ to the postcondition $ \{ <var:s> = <var:h> \land <var:S1> = <nat:8> \times <var:h> \land <var:S0> = <nat:7> \land <var:l> = <nat:3> \times <var:h> ^ <nat:2> \} $ . Focusing on the following command contained in the program , we see the variable binding line letting $ <var:l> + <var:S1$ to $ <var:l>$ . This line advances $ \{ <var:s> = <var:h> \land <var:S1> = <nat:8> \times <var:h> \land <var:S0> = <nat:7> \land <var:l> = <nat:3> \times <var:h> ^ <nat:2> \} $ as $ \{ <var:s> = <var:h> \land <var:S0> = <nat:7> \land <var:l> = <nat:3> \times <var:h> ^ <nat:2> + <nat:8> \times <var:h> \} $ . Advancing to the next piece of code found in our segment of code , we have the assignment code giving $ <var:l> + <var:S0$ as $ <var:l>$ . This line forwards the condition $ \{ <var:s> = <var:h> \land <var:S0> = <nat:7> \land <var:l> = <nat:3> \times <var:h> ^ <nat:2> + <nat:8> \times <var:h> \} $ as the condition $ \{ <var:s> = <var:h> \land <var:l> = <nat:3> \times <var:h> ^ <nat:2> + <nat:8> \times <var:h> + <nat:7> \} $ . This is given through the assignment law in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S1> := <var:s> ; <var:S2> := <var:S1> * <var:s> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:8> ; <var:S2> := <var:S2> * <nat:3> ; <var:l> := <var:S2> <var:l> := <var:l> + <var:S1> <var:l> := <var:l> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:s> = <var:h> }} <def:poly> {{ <var:l> = <nat:3> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:S1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:S1> = <var:h> /\ <var:S2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:S1> = <var:h> /\ <var:S2> = <var:h> ^ <nat:2> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:S1> = <nat:8> * <var:h> /\ <var:S2> = <var:h> ^ <nat:2> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:S1> = <nat:8> * <var:h> /\ <var:S2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:S1> = <nat:8> * <var:h> /\ <var:S0> = <nat:7> /\ <var:l> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:S0> = <nat:7> /\ <var:l> = <nat:3> * <var:h> ^ <nat:2> + <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:l> = <nat:3> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 