\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:i> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:5> ; <var:H> := <var:m1> <var:H> := <var:H> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:i> = <var:I> $ --- for positive numbers $ <var:I> $ --- prior to running this list of commands it holds that we see $ <var:H> = <nat:5> \cdot <var:I> + <nat:6> $ when series of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for our list of commands can be accomplished through typical Hoare logic . Jumping to the upcoming line of code found in the program , we have \begin{verbatim} { <var:i> = <var:I> } <var:m1> := <var:i> { <var:i> = <var:I> \land <var:m1> = <var:I> } \end{verbatim} This is given through the binding rule defined in Hoare logic . Moving onward , we have \begin{verbatim} { <var:i> = <var:I> } <var:m1> := <var:i> { <var:i> = <var:I> \land <var:m1> = <var:I> } { <var:i> = <var:I> \land <var:m1> = <var:I> } <var:m0> := <nat:6> { <var:i> = <var:I> \land <var:m1> = <var:I> \land <var:m0> = <nat:6> } \end{verbatim} This is deduced by the environment update law obtained from standard Hoare logic . Honing in on the proceeding lines seen in the program , \begin{verbatim} { <var:i> = <var:I> } <var:m1> := <var:i> { <var:i> = <var:I> \land <var:m1> = <var:I> } { <var:i> = <var:I> \land <var:m1> = <var:I> } <var:m0> := <nat:6> { <var:i> = <var:I> \land <var:m1> = <var:I> \land <var:m0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:i> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:5> ; <var:H> := <var:m1> <var:H> := <var:H> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:i> = <var:I> }} <def:poly> {{ <var:H> = <nat:5> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:m1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:m1> = <var:I> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:m1> = <nat:5> * <var:I> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:m0> = <nat:6> /\ <var:H> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:H> = <nat:5> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 