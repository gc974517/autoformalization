\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:e> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:4> ; <var:l> := <var:U1> <var:l> := <var:l> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:e> = <var:v> $ --- given positive numbers $ <var:v> $ --- before running the set of commands then we have $ <var:l> = <nat:4> \times <var:v> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:e> = <var:v> \} \\ <var:U1> := <var:e> ; \\ \{ <var:e> = <var:v> \land <var:U1> = <var:v> \} \\ <var:U0> := <nat:2> ; \\ \{ <var:e> = <var:v> \land <var:U1> = <var:v> \land <var:U0> = <nat:2> \} \\ <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:e> = <var:v> \land <var:U1> = <nat:4> \times <var:v> \land <var:U0> = <nat:2> \} \\ <var:l> := <var:U1> \\ \{ <var:e> = <var:v> \land <var:U0> = <nat:2> \land <var:l> = <nat:4> \times <var:v> \} \\ <var:l> := <var:l> + <var:U0> \\ \{ <var:e> = <var:v> \land <var:l> = <nat:4> \times <var:v> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:e> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:4> ; <var:l> := <var:U1> <var:l> := <var:l> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:e> = <var:v> }} <def:poly> {{ <var:l> = <nat:4> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:U1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:U1> = <var:v> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:U1> = <nat:4> * <var:v> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:U0> = <nat:2> /\ <var:l> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:l> = <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 