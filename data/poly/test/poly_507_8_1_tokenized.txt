\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:U> ; <var:G2> := <var:G1> * <var:U> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:5> ; <var:G2> := <var:G2> * <nat:9> ; <var:q> := <var:G2> <var:q> := <var:q> + <var:G1> <var:q> := <var:q> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for every $ <var:D> \in \mathbb{N} $ ) that $ <var:U> = <var:D> $ prior to executing this set of commands , it holds that we have $ <var:q> = <nat:9> \times <var:D> ^ <nat:2> + <nat:5> \times <var:D> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our segment of code can be given through usual Hoare logic . Moving on to the proceeding statements contained in the series of instructions , \[ \begin{tabular} {rcl} \{ <var:U> = <var:D> \} & <var:G1> := <var:U> & \{ <var:U> = <var:D> \land <var:G1> = <var:D> \} \\ \{ <var:U> = <var:D> \land <var:G1> = <var:D> \} & <var:G2> := <var:G1> * <var:U> & \{ <var:U> = <var:D> \land <var:G1> = <var:D> \land <var:G2> = <var:D> ^ <nat:2> \} \\ \{ <var:U> = <var:D> \land <var:G1> = <var:D> \land <var:G2> = <var:D> ^ <nat:2> \} & <var:G0> := <nat:4> & \{ <var:U> = <var:D> \land <var:G1> = <var:D> \land <var:G2> = <var:D> ^ <nat:2> \land <var:G0> = <nat:4> \} \\ \{ <var:U> = <var:D> \land <var:G1> = <var:D> \land <var:G2> = <var:D> ^ <nat:2> \land <var:G0> = <nat:4> \} & <var:G1> := <var:G1> * <nat:5> & \{ <var:U> = <var:D> \land <var:G1> = <nat:5> * <var:D> \land <var:G2> = <var:D> ^ <nat:2> \land <var:G0> = <nat:4> \} \\ \{ <var:U> = <var:D> \land <var:G1> = <nat:5> * <var:D> \land <var:G2> = <var:D> ^ <nat:2> \land <var:G0> = <nat:4> \} & <var:G2> := <var:G2> * <nat:9> & \{ <var:U> = <var:D> \land <var:G1> = <nat:5> * <var:D> \land <var:G2> = <nat:9> * <var:D> ^ <nat:2> \land <var:G0> = <nat:4> \} \end{tabular} This is rigorously given through the inference rule of usual Hoare reasoning . Moving on to the proceeding statement contained in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:D> \} & <var:G1> := <var:U> & \{ <var:U> = <var:D> \land <var:G1> = <var:D> \} \end{tabular} Moving forward to the subsequent steps contained in the list of commands , \[ \begin{tabular} {rcl} \{ <var:U> = <var:D> \} & <var:G1> := <var:U> & \{ <var:U> = <var:D> \land <var:G1> = <var:D> \} \\ \{ <var:U> = <var:D> \land <var:G1> = <var:D> \} & <var:G2> := <var:G1> * <var:U> & \{ <var:U> = <var:D> \land <var:G1> = <var:D> \land <var:G2> = <var:D> ^ <nat:2> \} \end{tabular} This is shown with the variable update inference rule from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G1> := <var:U> ; <var:G2> := <var:G1> * <var:U> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:5> ; <var:G2> := <var:G2> * <nat:9> ; <var:q> := <var:G2> <var:q> := <var:q> + <var:G1> <var:q> := <var:q> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:U> = <var:D> }} <def:poly> {{ <var:q> = <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:G1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:G1> = <var:D> /\ <var:G2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:G1> = <var:D> /\ <var:G2> = <var:D> ^ <nat:2> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:G1> = <nat:5> * <var:D> /\ <var:G2> = <var:D> ^ <nat:2> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:G1> = <nat:5> * <var:D> /\ <var:G2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:G1> = <nat:5> * <var:D> /\ <var:G0> = <nat:4> /\ <var:q> = <nat:9> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:G0> = <nat:4> /\ <var:q> = <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:q> = <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 