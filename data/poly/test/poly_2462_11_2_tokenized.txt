\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:Z> ; <var:O> := <nat:1> + <var:O> * <var:Z> ; <var:O> := <nat:3> + <var:O> * <var:Z> ; <var:O> := <nat:4> + <var:O> * <var:Z> ; <var:O> := <nat:3> + <var:O> * <var:Z> ; <var:O> := <nat:4> + <var:O> * <var:Z> ; <var:O> := <nat:3> + <var:O> * <var:Z> ; <var:O> := <nat:4> + <var:O> * <var:Z> ; <var:O> := <nat:2> + <var:O> * <var:Z> ; <var:O> := <nat:1> + <var:O> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Allow it to be that $ <var:Z> = <var:h> $ before executing the series of instructions , then we see $ <var:O> = <nat:4> \times <var:h> ^ <nat:10> + <nat:2> \times <var:h> ^ <nat:9> + <nat:1> \times <var:h> ^ <nat:8> + <nat:3> \times <var:h> ^ <nat:7> + <nat:4> \times <var:h> ^ <nat:6> + <nat:3> \times <var:h> ^ <nat:5> + <nat:4> \times <var:h> ^ <nat:4> + <nat:3> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:1> $ after list of commands has finished . \end{theorem} \begin{proof} The method of proof for this code is shown using Hoare reasoning . Going forward , we have the statement binding $ <nat:4> $ into $ <var:O>$ . This takes the condition $ \{ <var:Z> = <var:h> \} $ toward $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \} $ . Paying attention to the proceeding bit of code in the program , we have the binding command \verb | <var:O> := <nat:2> + <var:O> * <var:Z> ; | . This statement redefines $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \} $ to the postcondition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> + <nat:2> \} $ . Moving on , we have the code \verb | <var:O> := <nat:1> + <var:O> * <var:Z> ; | . This statement transfers the condition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> + <nat:2> \} $ as $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:1> \} $ . This is shown using the assignment rule given in standard Hoare reasoning . Focusing on the proceeding piece of code found in the set of commands , we see the environment update statement binding $ <nat:3> + <var:O> * <var:Z> $ toward $ <var:O>$ . This advances the condition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:1> \} $ as $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:3> \} $ . This is shown to be logically sound by the assignment inference rule in usual Hoare techniques . Taking another step toward the upcoming bit of code seen in the series of commands , we see the variable assignmet code giving $ <nat:4> + <var:O> * <var:Z> $ to $ <var:O>$ . This moves the precondition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:3> \} $ into $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} $ . Looking at the following command seen in our program , we see the variable assignmet command \verb | <var:O> := <nat:3> + <var:O> * <var:Z> ; | . This redefines $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} $ into $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:3> \} $ . Taking another step toward the following bit of code in the list of instructions , the command \verb | <var:O> := <nat:4> + <var:O> * <var:Z> ; | . This command takes the condition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:3> \} $ into the postcondition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} $ . Keeping momentum , we see the binding command yielding $ <nat:3> + <var:O> * <var:Z> $ to $ <var:O>$ . This takes the precondition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} $ into the condition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:1> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:3> \} $ . This is known to be sound by the assignment rule found in typical Hoare reasoning . Advancing to the next step , the code \verb | <var:O> := <nat:4> + <var:O> * <var:Z> ; | . This moves $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:1> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:3> \} $ to $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:8> + <nat:2> \cdot <var:h> ^ <nat:7> + <nat:1> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} $ . This is shown with the assignment inference rule in typical Hoare reasoning . Honing in on the next line contained in our segment of code , we have the variable update statement \verb | <var:O> := <nat:2> + <var:O> * <var:Z> ; | . This command transfers the precondition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:8> + <nat:2> \cdot <var:h> ^ <nat:7> + <nat:1> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} $ into the postcondition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:9> + <nat:2> \cdot <var:h> ^ <nat:8> + <nat:1> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> \} $ . This is given with the assignment law given by Hoare techniques . Keeping momentum , we have the binding statement \verb | <var:O> := <nat:1> + <var:O> * <var:Z> | . This transfers the precondition $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:9> + <nat:2> \cdot <var:h> ^ <nat:8> + <nat:1> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> \} $ into $ \{ <var:Z> = <var:h> \land <var:O> = <nat:4> \cdot <var:h> ^ <nat:10> + <nat:2> \cdot <var:h> ^ <nat:9> + <nat:1> \cdot <var:h> ^ <nat:8> + <nat:3> \cdot <var:h> ^ <nat:7> + <nat:4> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:1> \} $ . This is known to be sound with the assignment inference rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:Z> ; <var:O> := <nat:1> + <var:O> * <var:Z> ; <var:O> := <nat:3> + <var:O> * <var:Z> ; <var:O> := <nat:4> + <var:O> * <var:Z> ; <var:O> := <nat:3> + <var:O> * <var:Z> ; <var:O> := <nat:4> + <var:O> * <var:Z> ; <var:O> := <nat:3> + <var:O> * <var:Z> ; <var:O> := <nat:4> + <var:O> * <var:Z> ; <var:O> := <nat:2> + <var:O> * <var:Z> ; <var:O> := <nat:1> + <var:O> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Z> = <var:h> }} <def:poly> {{ <var:O> = <nat:4> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:9> + <nat:1> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:O> = <nat:4> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:9> + <nat:1> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 