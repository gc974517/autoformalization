\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:3> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:S> ; <var:x> := <var:R1> ; <var:x> := <var:x> + <var:R0> \end{verbatim} Assuming , given positive integer coefficients $ <var:v> $ , that we have $ <var:S> = <var:v> $ ahead of running the list of commands it holds that we see $ <var:x> = <nat:4> \times <var:v> + <nat:3> $ once list of instructions has executed . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:S> = <var:v> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:S> = <var:v> \land <var:R0> = <nat:3> \} \\ <var:R1> := <nat:4> ; \\ \{ <var:S> = <var:v> \land <var:R0> = <nat:3> \land <var:R1> = <nat:4> \} \\ <var:R1> := <var:R1> * <var:S> ; \\ \{ <var:S> = <var:v> \land <var:R0> = <nat:3> \land <var:R1> = <nat:4> * <var:v> \} \\ <var:x> := <var:R1> ; \\ \{ <var:S> = <var:v> \land <var:R0> = <nat:3> \land <var:x> = <nat:4> * <var:v> \} \\ <var:x> := <var:x> + <var:R0> \\ \{ <var:S> = <var:v> \land <var:x> = <nat:4> * <var:v> + <nat:3> \} \end{eqnarray} Considering the above , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:S> = <var:v> }} <var:R0> := <nat:3> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:S> ; <var:x> := <var:R1> ; <var:x> := <var:x> + <var:R0> {{ <var:x> = <nat:4> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:R0> = <nat:3> /\ <var:x> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:v> /\ <var:x> = <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 