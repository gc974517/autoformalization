\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:8> ; <var:v> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:m> = <var:g> $ before running our set of commands it follows that $ <var:v> = <nat:8> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:m> = <var:g> \} \\ <var:V0> := <nat:8> ; \\ \{ <var:m> = <var:g> \land <var:V0> = <nat:8> \} \\ <var:v> := <var:V0> \\ \{ <var:m> = <var:g> \land <var:v> = <nat:8> \} \end{eqnarray} Given the preceding argument , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:8> ; <var:v> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:m> = <var:g> }} <def:poly> {{ <var:v> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:v> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 