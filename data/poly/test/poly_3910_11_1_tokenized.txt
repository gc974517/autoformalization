\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:j> ; <var:s2> := <var:s1> * <var:j> ; <var:s3> := <var:s2> * <var:j> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:1> ; <var:b> := <var:s3> <var:b> := <var:b> + <var:s2> <var:b> := <var:b> + <var:s1> <var:b> := <var:b> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Allow $ <var:j> = <var:o> $ ahead of running this series of commands , it must be that $ <var:b> = <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our set of commands is shown with standard Hoare logic . Taking another step toward the following lines of codeseen in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:o> \} & <var:s1> := <var:j> & \{ <var:j> = <var:o> \land <var:s1> = <var:o> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <var:o> \} & <var:s2> := <var:s1> * <var:j> & \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \} & <var:s3> := <var:s2> * <var:j> & \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \} & <var:s0> := <nat:3> & \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \land <var:s0> = <nat:3> \} & <var:s1> := <var:s1> * <nat:2> & \{ <var:j> = <var:o> \land <var:s1> = <nat:2> \times <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <nat:2> \times <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \land <var:s0> = <nat:3> \} & <var:s2> := <var:s2> * <nat:3> & \{ <var:j> = <var:o> \land <var:s1> = <nat:2> \times <var:o> \land <var:s2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \land <var:s0> = <nat:3> \} \end{tabular} This is guaranteed by the assignment inference rule given by usual Hoare techniques . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:o> \} & <var:s1> := <var:j> & \{ <var:j> = <var:o> \land <var:s1> = <var:o> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <var:o> \} & <var:s2> := <var:s1> * <var:j> & \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \} & <var:s3> := <var:s2> * <var:j> & \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \} & <var:s0> := <nat:3> & \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ \{ <var:j> = <var:o> \land <var:s1> = <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \land <var:s0> = <nat:3> \} & <var:s1> := <var:s1> * <nat:2> & \{ <var:j> = <var:o> \land <var:s1> = <nat:2> \times <var:o> \land <var:s2> = <var:o> ^ <nat:2> \land <var:s3> = <var:o> ^ <nat:3> \land <var:s0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:j> ; <var:s2> := <var:s1> * <var:j> ; <var:s3> := <var:s2> * <var:j> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:1> ; <var:b> := <var:s3> <var:b> := <var:b> + <var:s2> <var:b> := <var:b> + <var:s1> <var:b> := <var:b> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:j> = <var:o> }} <def:poly> {{ <var:b> = <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <var:o> /\ <var:s2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <var:o> /\ <var:s2> = <var:o> ^ <nat:2> /\ <var:s3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <var:o> /\ <var:s2> = <var:o> ^ <nat:2> /\ <var:s3> = <var:o> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <nat:2> * <var:o> /\ <var:s2> = <var:o> ^ <nat:2> /\ <var:s3> = <var:o> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <nat:2> * <var:o> /\ <var:s2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:s3> = <var:o> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <nat:2> * <var:o> /\ <var:s2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:s3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <nat:2> * <var:o> /\ <var:s2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:s0> = <nat:3> /\ <var:b> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s1> = <nat:2> * <var:o> /\ <var:s0> = <nat:3> /\ <var:b> = <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:s0> = <nat:3> /\ <var:b> = <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:b> = <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 