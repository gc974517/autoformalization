\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:3> ; <var:y> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assume --- given any integers $ <var:G> $ --- it to be that $ <var:U> = <var:G> $ prior to executing this code then we have $ <var:y> = <nat:3> $ once list of commands has terminated . \end{theorem} \begin{proof} The proof of this list of commands can be accomplished with Hoare techniques . Further , the variable assignmet statement \verb | <var:N0> := <nat:3> ; | . This takes the precondition $ \{ <var:U> = <var:G> \} $ as the condition $ \{ <var:U> = <var:G> \land <var:N0> = <nat:3> \} $ . This is shown with the assignment inference rule given by standard Hoare logic . Immediately following , we have the variable update line \verb | <var:y> := <var:N0> | . This advances $ \{ <var:U> = <var:G> \land <var:N0> = <nat:3> \} $ to the condition $ \{ <var:U> = <var:G> \land <var:y> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:3> ; <var:y> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:U> = <var:G> }} <def:poly> {{ <var:y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 