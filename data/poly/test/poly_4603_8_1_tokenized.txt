\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:u1> := <var:C> ; <var:u2> := <var:u1> * <var:C> ; <var:u0> := <nat:5> ; <var:u1> := <var:u1> * <nat:2> ; <var:u2> := <var:u2> * <nat:7> ; <var:G> := <var:u2> <var:G> := <var:G> + <var:u1> <var:G> := <var:G> + <var:u0> \end{verbatim} Allow , for any positive integers $ <var:D> $ , that we have $ <var:C> = <var:D> $ before running this segment of code , then we have $ <var:G> = <nat:7> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:5> $ after series of instructions is done . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be demonstrated by Hoare reasoning . Moving forward to the next step , \begin{eqnarray} \{ <var:C> = <var:D> \} \, <var:u1> := <var:C> \, \{ <var:C> = <var:D> \land <var:u1> = <var:D> \} \end{eqnarray} Advancing to the following piece of code contained in the segment of code , \begin{eqnarray} \{ <var:C> = <var:D> \} \, <var:u1> := <var:C> \, \{ <var:C> = <var:D> \land <var:u1> = <var:D> \} \end{eqnarray} This is ensured through the environment update law defined by usual Hoare reasoning . Jumping to the following steps found in our set of commands , \begin{eqnarray} \{ <var:C> = <var:D> \} \, <var:u1> := <var:C> \, \{ <var:C> = <var:D> \land <var:u1> = <var:D> \} \\ \{ <var:C> = <var:D> \land <var:u1> = <var:D> \} \, <var:u2> := <var:u1> * <var:C> \, \{ <var:C> = <var:D> \land <var:u1> = <var:D> \land <var:u2> = <var:D> ^ <nat:2> \} \\ \{ <var:C> = <var:D> \land <var:u1> = <var:D> \land <var:u2> = <var:D> ^ <nat:2> \} \, <var:u0> := <nat:5> \, \{ <var:C> = <var:D> \land <var:u1> = <var:D> \land <var:u2> = <var:D> ^ <nat:2> \land <var:u0> = <nat:5> \} \\ \{ <var:C> = <var:D> \land <var:u1> = <var:D> \land <var:u2> = <var:D> ^ <nat:2> \land <var:u0> = <nat:5> \} \, <var:u1> := <var:u1> * <nat:2> \, \{ <var:C> = <var:D> \land <var:u1> = <nat:2> \cdot <var:D> \land <var:u2> = <var:D> ^ <nat:2> \land <var:u0> = <nat:5> \} \\ \{ <var:C> = <var:D> \land <var:u1> = <nat:2> \cdot <var:D> \land <var:u2> = <var:D> ^ <nat:2> \land <var:u0> = <nat:5> \} \, <var:u2> := <var:u2> * <nat:7> \, \{ <var:C> = <var:D> \land <var:u1> = <nat:2> \cdot <var:D> \land <var:u2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:u0> = <nat:5> \} \\ \{ <var:C> = <var:D> \land <var:u1> = <nat:2> \cdot <var:D> \land <var:u2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:u0> = <nat:5> \} \, <var:G> := <var:u2\, \{ <var:C> = <var:D> \land <var:u1> = <nat:2> \cdot <var:D> \land <var:u0> = <nat:5> \land <var:G> = <nat:7> \cdot <var:D> ^ <nat:2> \} \end{eqnarray} This is ensured through the variable update law given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:C> = <var:D> }} <var:u1> := <var:C> ; <var:u2> := <var:u1> * <var:C> ; <var:u0> := <nat:5> ; <var:u1> := <var:u1> * <nat:2> ; <var:u2> := <var:u2> * <nat:7> ; <var:G> := <var:u2> <var:G> := <var:G> + <var:u1> <var:G> := <var:G> + <var:u0> {{ <var:G> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:u1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:u1> = <var:D> /\ <var:u2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:u1> = <var:D> /\ <var:u2> = <var:D> ^ <nat:2> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:u1> = <nat:2> * <var:D> /\ <var:u2> = <var:D> ^ <nat:2> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:u1> = <nat:2> * <var:D> /\ <var:u2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:u1> = <nat:2> * <var:D> /\ <var:u0> = <nat:5> /\ <var:G> = <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:u0> = <nat:5> /\ <var:G> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:G> = <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 