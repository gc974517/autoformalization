\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:6> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:K> ; <var:t2> := <nat:8> ; <var:t2> := <var:t2> * <var:K> ; <var:t2> := <var:t2> * <var:K> ; <var:t3> := <nat:2> ; <var:t3> := <var:t3> * <var:K> ; <var:t3> := <var:t3> * <var:K> ; <var:t3> := <var:t3> * <var:K> ; <var:W> := <var:t3> ; <var:W> := <var:W> + <var:t2> ; <var:W> := <var:W> + <var:t1> ; <var:W> := <var:W> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:K> = <var:j> $ ( for $ <var:j> \in \mathbb{N} $ ) before interpreting the list of commands , then we have $ <var:W> = <nat:2> \times <var:j> ^ <nat:3> + <nat:8> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:6> $ after list of instructions finishes . \end{theorem} \begin{proof} The argument for the series of commands is accomplished by usual Hoare reasoning . Advancing , we see \begin{verbatim} { <var:K> = <var:j> } <var:t0> := <nat:6> { <var:K> = <var:j> \land <var:t0> = <nat:6> } { <var:K> = <var:j> \land <var:t0> = <nat:6> } <var:t1> := <nat:1> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> } { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> } <var:t1> := <var:t1> * <var:K> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> } { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> } <var:t2> := <nat:8> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> \land <var:t2> = <nat:8> } \end{verbatim} This is known to be sound using the variable assignmet law found in usual Hoare techniques . Advancing on , \begin{verbatim} { <var:K> = <var:j> } <var:t0> := <nat:6> { <var:K> = <var:j> \land <var:t0> = <nat:6> } { <var:K> = <var:j> \land <var:t0> = <nat:6> } <var:t1> := <nat:1> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> } { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> } <var:t1> := <var:t1> * <var:K> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> } { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> } <var:t2> := <nat:8> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> \land <var:t2> = <nat:8> } { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> \land <var:t2> = <nat:8> } <var:t2> := <var:t2> * <var:K> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> \land <var:t2> = <nat:8> \cdot <var:j> } \end{verbatim} Considering the following lines found in the set of instructions , \begin{verbatim} { <var:K> = <var:j> } <var:t0> := <nat:6> { <var:K> = <var:j> \land <var:t0> = <nat:6> } { <var:K> = <var:j> \land <var:t0> = <nat:6> } <var:t1> := <nat:1> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> } { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> } <var:t1> := <var:t1> * <var:K> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> } { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> } <var:t2> := <nat:8> { <var:K> = <var:j> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:j> \land <var:t2> = <nat:8> } \end{verbatim} This is given through the environment update law obtained from Hoare techniques . Immediately after , we have \begin{verbatim} { <var:K> = <var:j> } <var:t0> := <nat:6> { <var:K> = <var:j> \land <var:t0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t0> := <nat:6> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:K> ; <var:t2> := <nat:8> ; <var:t2> := <var:t2> * <var:K> ; <var:t2> := <var:t2> * <var:K> ; <var:t3> := <nat:2> ; <var:t3> := <var:t3> * <var:K> ; <var:t3> := <var:t3> * <var:K> ; <var:t3> := <var:t3> * <var:K> ; <var:W> := <var:t3> ; <var:W> := <var:W> + <var:t2> ; <var:W> := <var:W> + <var:t1> ; <var:W> := <var:W> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:K> = <var:j> }} <def:poly> {{ <var:W> = <nat:2> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:t2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:t2> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:t2> = <nat:8> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:t2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:t3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:t2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:t2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:t2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:t2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:W> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:j> /\ <var:W> = <nat:2> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:t0> = <nat:6> /\ <var:W> = <nat:2> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> + <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:W> = <nat:2> * <var:j> ^ <nat:3> + <nat:8> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 