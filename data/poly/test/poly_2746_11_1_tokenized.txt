\begin{document} \begin{theorem} Define the following series of instructions such that \begin{verbatim} <var:p1> := <var:b> ; <var:p2> := <var:p1> * <var:b> ; <var:p3> := <var:p2> * <var:b> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:7> ; <var:p3> := <var:p3> * <nat:2> ; <var:Z> := <var:p3> <var:Z> := <var:Z> + <var:p2> <var:Z> := <var:Z> + <var:p1> <var:Z> := <var:Z> + <var:p0> \end{verbatim} Assuming that we have $ <var:b> = <var:D> $ --- given $ <var:D> $ --- before executing our series of instructions then $ <var:Z> = <nat:2> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for this code segment can be given through standard Hoare techniques . Looking at the next bit of code in the program , we see the variable assignmet statement \verb | <var:p1> := <var:b> ; | . This takes the condition $ \{ <var:b> = <var:D> \} $ as the postcondition $ \{ <var:b> = <var:D> \land <var:p1> = <var:D> \} $ . This is rigorously given using the assignment rule defined by usual Hoare logic . Advancing , we have the variable assignmet command binding $ <var:p1> * <var:b> $ to $ <var:p2>$ . This takes $ \{ <var:b> = <var:D> \land <var:p1> = <var:D> \} $ to the condition $ \{ <var:b> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \} $ . Going to the next step , the variable update code \verb | <var:p3> := <var:p2> * <var:b> ; | . This line moves the precondition $ \{ <var:b> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \} $ into the postcondition $ \{ <var:b> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \} $ . Immediately following , the variable binding statement giving $ <nat:5> $ into $ <var:p0>$ . This transfers $ \{ <var:b> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \} $ into the postcondition $ \{ <var:b> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:5> \} $ . This is ensured using the assignment law obtained from typical Hoare logic . Moving on to the proceeding piece of code seen in our set of instructions , we have the assignment command \verb | <var:p1> := <var:p1> * <nat:2> ; | . This moves the precondition $ \{ <var:b> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:5> \} $ into the condition $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:5> \} $ . This is rigorously given with the assignment scheme from standard Hoare techniques . Observing the following step contained in the list of commands , we see the statement \verb | <var:p2> := <var:p2> * <nat:7> ; | . This redefines the condition $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:5> \} $ toward the condition $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:5> \} $ . Looking at the following piece of code seen in the set of instructions , we have the binding command yielding $ <var:p3> * <nat:2> $ toward $ <var:p3>$ . This code takes the precondition $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:5> \} $ into $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:p3> = <nat:2> \cdot <var:D> ^ <nat:3> \land <var:p0> = <nat:5> \} $ . Taking another step toward the proceeding line of code seen in the code segment , we have the statement \verb | <var:Z> := <var:p3> | . This code forwards the precondition $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:p3> = <nat:2> \cdot <var:D> ^ <nat:3> \land <var:p0> = <nat:5> \} $ to $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:p0> = <nat:5> \land <var:Z> = <nat:2> \cdot <var:D> ^ <nat:3> \} $ . This is ensured with the assignment scheme from typical Hoare logic . Advancing , we have the variable update command yielding $ <var:Z> + <var:p2$ as $ <var:Z>$ . This takes $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p2> = <nat:7> \cdot <var:D> ^ <nat:2> \land <var:p0> = <nat:5> \land <var:Z> = <nat:2> \cdot <var:D> ^ <nat:3> \} $ toward the postcondition $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p0> = <nat:5> \land <var:Z> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> \} $ . Moving forward to the next step , the command giving $ <var:Z> + <var:p1$ toward $ <var:Z>$ . This moves $ \{ <var:b> = <var:D> \land <var:p1> = <nat:2> \cdot <var:D> \land <var:p0> = <nat:5> \land <var:Z> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> \} $ into the postcondition $ \{ <var:b> = <var:D> \land <var:p0> = <nat:5> \land <var:Z> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> \} $ . Moving forward , we have the code \verb | <var:Z> := <var:Z> + <var:p0> | . This code advances the precondition $ \{ <var:b> = <var:D> \land <var:p0> = <nat:5> \land <var:Z> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> \} $ as the condition $ \{ <var:b> = <var:D> \land <var:Z> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:7> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:5> \} $ . This is guaranteed through the assignment scheme found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:b> = <var:D> }} <var:p1> := <var:b> ; <var:p2> := <var:p1> * <var:b> ; <var:p3> := <var:p2> * <var:b> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:7> ; <var:p3> := <var:p3> * <nat:2> ; <var:Z> := <var:p3> <var:Z> := <var:Z> + <var:p2> <var:Z> := <var:Z> + <var:p1> <var:Z> := <var:Z> + <var:p0> {{ <var:Z> = <nat:2> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <var:D> /\ <var:p2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <var:D> /\ <var:p2> = <var:D> ^ <nat:2> /\ <var:p3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <var:D> /\ <var:p2> = <var:D> ^ <nat:2> /\ <var:p3> = <var:D> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <nat:2> * <var:D> /\ <var:p2> = <var:D> ^ <nat:2> /\ <var:p3> = <var:D> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <nat:2> * <var:D> /\ <var:p2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:p3> = <var:D> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <nat:2> * <var:D> /\ <var:p2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:D> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <nat:2> * <var:D> /\ <var:p2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:p0> = <nat:5> /\ <var:Z> = <nat:2> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p1> = <nat:2> * <var:D> /\ <var:p0> = <nat:5> /\ <var:Z> = <nat:2> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:p0> = <nat:5> /\ <var:Z> = <nat:2> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:D> /\ <var:Z> = <nat:2> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 