\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:u1> := <var:Z> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:4> ; <var:Q> := <var:u1> <var:Q> := <var:Q> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> . Assume $ <var:Z> = <var:M> $ prior to the evaluation of our code segment it follows that we see $ <var:Q> = <nat:4> * <var:M> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:M> \} \\ <var:u1> := <var:Z> ; \\ \{ <var:Z> = <var:M> \land <var:u1> = <var:M> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:Z> = <var:M> \land <var:u1> = <var:M> \land <var:u0> = <nat:2> \} \\ <var:u1> := <var:u1> * <nat:4> ; \\ \{ <var:Z> = <var:M> \land <var:u1> = <nat:4> * <var:M> \land <var:u0> = <nat:2> \} \\ <var:Q> := <var:u1> \\ \{ <var:Z> = <var:M> \land <var:u0> = <nat:2> \land <var:Q> = <nat:4> * <var:M> \} \\ <var:Q> := <var:Q> + <var:u0> \\ \{ <var:Z> = <var:M> \land <var:Q> = <nat:4> * <var:M> + <nat:2> \} \end{eqnarray} The application of typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:Z> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:4> ; <var:Q> := <var:u1> <var:Q> := <var:Q> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Z> = <var:M> }} <def:poly> {{ <var:Q> = <nat:4> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:u1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:u1> = <var:M> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:u1> = <nat:4> * <var:M> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:u0> = <nat:2> /\ <var:Q> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:Q> = <nat:4> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 