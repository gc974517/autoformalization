\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:O> ; <var:G2> := <var:G1> * <var:O> ; <var:G3> := <var:G2> * <var:O> ; <var:G4> := <var:G3> * <var:O> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:4> ; <var:G3> := <var:G3> * <nat:2> ; <var:G4> := <var:G4> * <nat:2> ; <var:r> := <var:G4> <var:r> := <var:r> + <var:G3> <var:r> := <var:r> + <var:G1> <var:r> := <var:r> + <var:G0> \end{verbatim} Assume it to hold that $ <var:O> = <var:S> $ ahead of the execution of this set of instructions then $ <var:r> = <nat:2> \cdot <var:S> ^ <nat:4> + <nat:2> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> + <nat:2> $ once list of instructions is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be seen with usual Hoare techniques . Immediately after , the variable update line \verb | <var:G1> := <var:O> ; | . This redefines the precondition $ \{ <var:O> = <var:S> \} $ toward the postcondition $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \} $ . This is known to be sound with the assignment scheme obtained from Hoare techniques . Jumping to the proceeding command found in the segment of code , we see the assignment command letting $ <var:G1> * <var:O> $ toward $ <var:G2>$ . This command transfers $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \} $ as the postcondition $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \} $ . This is rigorously given with the assignment scheme given in standard Hoare logic . Stepping forward , the environment update line \verb | <var:G3> := <var:G2> * <var:O> ; | . This redefines $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \} $ toward the postcondition $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <var:S> ^ <nat:3> \} $ . This is ensured through the assignment law from typical Hoare reasoning . After , we have the assignment code yielding $ <var:G3> * <var:O> $ into $ <var:G4>$ . This code forwards the condition $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <var:S> ^ <nat:3> \} $ to $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <var:S> ^ <nat:3> \land <var:G4> = <var:S> ^ <nat:4> \} $ . This is sound with the assignment rule of standard Hoare techniques . Advancing to the proceeding step seen in the segment of code , the code defining $ <nat:2> $ as $ <var:G0>$ . This advances the condition $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <var:S> ^ <nat:3> \land <var:G4> = <var:S> ^ <nat:4> \} $ into the postcondition $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <var:S> ^ <nat:3> \land <var:G4> = <var:S> ^ <nat:4> \land <var:G0> = <nat:2> \} $ . This is known to be sound using the assignment law of typical Hoare logic . Moving onward , we see the code \verb | <var:G1> := <var:G1> * <nat:4> ; | . This command moves the condition $ \{ <var:O> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <var:S> ^ <nat:3> \land <var:G4> = <var:S> ^ <nat:4> \land <var:G0> = <nat:2> \} $ toward the postcondition $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <var:S> ^ <nat:3> \land <var:G4> = <var:S> ^ <nat:4> \land <var:G0> = <nat:2> \} $ . Stepping through , we see the command \verb | <var:G3> := <var:G3> * <nat:2> ; | . This redefines $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <var:S> ^ <nat:3> \land <var:G4> = <var:S> ^ <nat:4> \land <var:G0> = <nat:2> \} $ toward the condition $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <nat:2> \times <var:S> ^ <nat:3> \land <var:G4> = <var:S> ^ <nat:4> \land <var:G0> = <nat:2> \} $ . Moving on to the subsequent piece of code contained in our code segment , we have the line giving $ <var:G4> * <nat:2> $ as $ <var:G4>$ . This takes the condition $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <nat:2> \times <var:S> ^ <nat:3> \land <var:G4> = <var:S> ^ <nat:4> \land <var:G0> = <nat:2> \} $ as $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <nat:2> \times <var:S> ^ <nat:3> \land <var:G4> = <nat:2> \times <var:S> ^ <nat:4> \land <var:G0> = <nat:2> \} $ . This is rigorously given through the assignment rule defined in usual Hoare techniques . Advancing on , we see the variable update code defining $ <var:G4$ to $ <var:r>$ . This transfers the condition $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <nat:2> \times <var:S> ^ <nat:3> \land <var:G4> = <nat:2> \times <var:S> ^ <nat:4> \land <var:G0> = <nat:2> \} $ into the postcondition $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <nat:2> \times <var:S> ^ <nat:3> \land <var:G0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> \} $ . This is guaranteed by the assignment rule found in typical Hoare reasoning . Jumping to the proceeding line contained in the series of commands , we see the binding code \verb | <var:r> := <var:r> + <var:G3> | . This transfers the condition $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G3> = <nat:2> \times <var:S> ^ <nat:3> \land <var:G0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> \} $ as the postcondition $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:3> \} $ . Going to the next step , we see the variable update code letting $ <var:r> + <var:G1$ as $ <var:r>$ . This advances the condition $ \{ <var:O> = <var:S> \land <var:G1> = <nat:4> \times <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:3> \} $ toward the postcondition $ \{ <var:O> = <var:S> \land <var:G0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> \} $ . This is known to be sound by the assignment scheme given in usual Hoare logic . Focusing on the next piece of code contained in our list of commands , we have the environment update command binding $ <var:r> + <var:G0$ to $ <var:r>$ . This command advances the condition $ \{ <var:O> = <var:S> \land <var:G0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> \} $ toward the postcondition $ \{ <var:O> = <var:S> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> + <nat:2> \} $ . This is guaranteed by the assignment law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:O> = <var:S> }} <var:G1> := <var:O> ; <var:G2> := <var:G1> * <var:O> ; <var:G3> := <var:G2> * <var:O> ; <var:G4> := <var:G3> * <var:O> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:4> ; <var:G3> := <var:G3> * <nat:2> ; <var:G4> := <var:G4> * <nat:2> ; <var:r> := <var:G4> <var:r> := <var:r> + <var:G3> <var:r> := <var:r> + <var:G1> <var:r> := <var:r> + <var:G0> {{ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <var:S> /\ <var:G2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G3> = <var:S> ^ <nat:3> /\ <var:G4> = <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G3> = <var:S> ^ <nat:3> /\ <var:G4> = <var:S> ^ <nat:4> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <nat:4> * <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G3> = <var:S> ^ <nat:3> /\ <var:G4> = <var:S> ^ <nat:4> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <nat:4> * <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:S> ^ <nat:3> /\ <var:G4> = <var:S> ^ <nat:4> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <nat:4> * <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:S> ^ <nat:3> /\ <var:G4> = <nat:2> * <var:S> ^ <nat:4> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <nat:4> * <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:S> ^ <nat:3> /\ <var:G0> = <nat:2> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G1> = <nat:4> * <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G0> = <nat:2> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:G0> = <nat:2> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 