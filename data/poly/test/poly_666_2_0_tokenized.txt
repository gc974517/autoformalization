\begin{document} \begin{theorem} Define the following program in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:2> ; <var:F> := <var:c0> \end{verbatim} Allowing it to be that $ <var:N> = <var:Q> $ ahead of evaluating our set of instructions then we have $ <var:F> = <nat:2> $ after series of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is shown with typical Hoare techniques . Keeping momentum , we see the binding statement \verb | <var:c0> := <nat:2> ; | . This code moves $ \{ <var:N> = <var:Q> \} $ as the condition $ \{ <var:N> = <var:Q> \land <var:c0> = <nat:2> \} $ . This is shown using the assignment inference rule in Hoare reasoning . Paying attention to the next step found in the set of instructions , the variable update command giving $ <var:c0$ into $ <var:F>$ . This command advances the condition $ \{ <var:N> = <var:Q> \land <var:c0> = <nat:2> \} $ toward $ \{ <var:N> = <var:Q> \land <var:F> = <nat:2> \} $ . This is sound with the assignment scheme obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:N> = <var:Q> }} <var:c0> := <nat:2> ; <var:F> := <var:c0> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 