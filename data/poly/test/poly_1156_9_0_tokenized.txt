\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:7> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:G> ; <var:x2> := <nat:5> ; <var:x2> := <var:x2> * <var:G> ; <var:x2> := <var:x2> * <var:G> ; <var:I> := <var:x2> ; <var:I> := <var:I> + <var:x1> ; <var:I> := <var:I> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> . Allowing it to be that $ <var:G> = <var:M> $ , for any whole numbers $ <var:M> $ , before executing our set of commands , it holds that $ <var:I> = <nat:5> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:7> $ after list of instructions has executed . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is evident using typical Hoare techniques . Taking a look at the next line in our segment of code , we have the variable assignmet line defining $ <nat:7> $ to $ <var:x0>$ . This moves $ \{ <var:G> = <var:M> \} $ toward $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \} $ . Going to the next step , we see the variable binding statement \verb | <var:x1> := <nat:2> ; | . This command redefines the condition $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \} $ to $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> \} $ . This is shown to be logically sound through the assignment law given in standard Hoare reasoning . Moving on to the proceeding bit of code found in the set of instructions , we see the environment update command \verb | <var:x1> := <var:x1> * <var:G> ; | . This advances the precondition $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> \} $ into the condition $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \} $ . Going to the next step , the assignment statement \verb | <var:x2> := <nat:5> ; | . This statement transfers $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \} $ into $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \land <var:x2> = <nat:5> \} $ . This is shown with the assignment law of usual Hoare logic . Advancing to the upcoming statement seen in our set of instructions , we see the variable binding statement \verb | <var:x2> := <var:x2> * <var:G> ; | . This transfers the condition $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \land <var:x2> = <nat:5> \} $ toward $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \land <var:x2> = <nat:5> * <var:M> \} $ . This is ensured with the assignment law obtained from typical Hoare reasoning . Now , we have the assignment statement \verb | <var:x2> := <var:x2> * <var:G> ; | . This takes the precondition $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \land <var:x2> = <nat:5> * <var:M> \} $ toward $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \land <var:x2> = <nat:5> * <var:M> ^ <nat:2> \} $ . Jumping to the proceeding step seen in the segment of code , we have the environment update command assigning $ <var:x2> $ into $ <var:I>$ . This takes the condition $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \land <var:x2> = <nat:5> * <var:M> ^ <nat:2> \} $ toward $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \land <var:I> = <nat:5> * <var:M> ^ <nat:2> \} $ . Considering the subsequent step in our set of instructions , we have the variable assignmet command \verb | <var:I> := <var:I> + <var:x1> ; | . This advances $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:M> \land <var:I> = <nat:5> * <var:M> ^ <nat:2> \} $ as the condition $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:I> = <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> \} $ . Paying attention to the proceeding statement found in our code , the variable assignmet code \verb | <var:I> := <var:I> + <var:x0> | . This forwards $ \{ <var:G> = <var:M> \land <var:x0> = <nat:7> \land <var:I> = <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> \} $ to the postcondition $ \{ <var:G> = <var:M> \land <var:I> = <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:7> \} $ . This is guaranteed with the assignment rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:7> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:G> ; <var:x2> := <nat:5> ; <var:x2> := <var:x2> * <var:G> ; <var:x2> := <var:x2> * <var:G> ; <var:I> := <var:x2> ; <var:I> := <var:I> + <var:x1> ; <var:I> := <var:I> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:G> = <var:M> }} <def:poly> {{ <var:I> = <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:2> * <var:M> /\ <var:x2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:2> * <var:M> /\ <var:x2> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:2> * <var:M> /\ <var:x2> = <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:2> * <var:M> /\ <var:I> = <nat:5> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:x0> = <nat:7> /\ <var:I> = <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:I> = <nat:5> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 