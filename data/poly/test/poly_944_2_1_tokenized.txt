\begin{document} \begin{theorem} Define the following series of instructions : \begin{verbatim} <var:G0> := <nat:5> ; <var:g> := <var:G0> \end{verbatim} Assuming ( given some positive integers $ <var:D> $ ) $ <var:K> = <var:D> $ prior to the evaluation of this list of instructions , it follows that $ <var:g> = <nat:5> $ once series of instructions is done . \end{theorem} \begin{proof} The proof of the segment of code can be seen by usual Hoare reasoning . After , we have the variable binding line yielding $ <nat:5> $ toward $ <var:G0>$ . This redefines $ \{ <var:K> = <var:D> \} $ into $ \{ <var:K> = <var:D> \land <var:G0> = <nat:5> \} $ . This is given with the assignment law defined in typical Hoare reasoning . Moving on to the next step seen in our series of commands , we have the variable binding line \verb | <var:g> := <var:G0> | . This takes the condition $ \{ <var:K> = <var:D> \land <var:G0> = <nat:5> \} $ into the condition $ \{ <var:K> = <var:D> \land <var:g> = <nat:5> \} $ . This is sound with the assignment rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:K> = <var:D> }} <var:G0> := <nat:5> ; <var:g> := <var:G0> {{ <var:g> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:D> /\ <var:g> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 