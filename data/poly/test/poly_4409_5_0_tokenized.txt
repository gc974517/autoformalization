\begin{document} \begin{theorem} Define the following program as follows \begin{verbatim} <var:z0> := <nat:6> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:A> ; <var:D> := <var:z1> ; <var:D> := <var:D> + <var:z0> \end{verbatim} Allow it to hold that $ <var:A> = <var:H> $ --- for $ <var:H> \in \mathbb{N} $ --- prior to interpreting our list of commands it must be that we have $ <var:D> = <nat:4> \cdot <var:H> + <nat:6> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:A> = <var:H> \} \\ <var:z0> := <nat:6> ; \\ \{ <var:A> = <var:H> \land <var:z0> = <nat:6> \} \\ <var:z1> := <nat:4> ; \\ \{ <var:A> = <var:H> \land <var:z0> = <nat:6> \land <var:z1> = <nat:4> \} \\ <var:z1> := <var:z1> * <var:A> ; \\ \{ <var:A> = <var:H> \land <var:z0> = <nat:6> \land <var:z1> = <nat:4> * <var:H> \} \\ <var:D> := <var:z1> ; \\ \{ <var:A> = <var:H> \land <var:z0> = <nat:6> \land <var:D> = <nat:4> * <var:H> \} \\ <var:D> := <var:D> + <var:z0> \\ \{ <var:A> = <var:H> \land <var:D> = <nat:4> * <var:H> + <nat:6> \} \end{eqnarray} Considering the preceding argument , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:A> = <var:H> }} <var:z0> := <nat:6> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:A> ; <var:D> := <var:z1> ; <var:D> := <var:D> + <var:z0> {{ <var:D> = <nat:4> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:z0> = <nat:6> /\ <var:D> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:D> = <nat:4> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 