\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:2> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:w> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:w> ; <var:W2> := <var:W2> * <var:w> ; <var:d> := <var:W2> ; <var:d> := <var:d> + <var:W1> ; <var:d> := <var:d> + <var:W0> \end{verbatim} Assume given any positive integer coefficients $ <var:T> $ it to hold that $ <var:w> = <var:T> $ prior to evaluating this set of instructions , it holds that we see $ <var:d> = <nat:8> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:2> $ when series of instructions terminates . \end{theorem} \begin{proof} The method of proof for our code segment can be done with standard Hoare techniques . Advancing to the next step , we see the variable assignmet statement assigning $ <nat:2> $ into $ <var:W0>$ . This forwards the precondition $ \{ <var:w> = <var:T> \} $ into the condition $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \} $ . Next , the variable binding command defining $ <nat:2> $ as $ <var:W1>$ . This takes $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \} $ into $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \} $ . Advancing to the upcoming statement seen in the list of commands , we have the variable update line \verb | <var:W1> := <var:W1> * <var:w> ; | . This redefines $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \} $ as the condition $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \} $ . This is given by the assignment rule obtained from usual Hoare logic . Moving forward to the next step , the binding line \verb | <var:W2> := <nat:8> ; | . This code transfers the precondition $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \} $ toward the postcondition $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:8> \} $ . Observing the subsequent bit of code contained in the code , we see the binding command defining $ <var:W2> * <var:w> $ toward $ <var:W2>$ . This command moves the precondition $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:8> \} $ toward the condition $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:8> \cdot <var:T> \} $ . This is shown to be logically sound using the assignment rule obtained from typical Hoare logic . Moving forward to the next step , the variable update code \verb | <var:W2> := <var:W2> * <var:w> ; | . This redefines $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:8> \cdot <var:T> \} $ into the postcondition $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:8> \cdot <var:T> ^ <nat:2> \} $ . Immediately after , we see the variable update statement assigning $ <var:W2> $ as $ <var:d>$ . This redefines the condition $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:W2> = <nat:8> \cdot <var:T> ^ <nat:2> \} $ as $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:d> = <nat:8> \cdot <var:T> ^ <nat:2> \} $ . This is rigorously given with the assignment law defined by usual Hoare reasoning . Moving forward to the next step , the line yielding $ <var:d> + <var:W1> $ to $ <var:d>$ . This code transfers $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:W1> = <nat:2> \cdot <var:T> \land <var:d> = <nat:8> \cdot <var:T> ^ <nat:2> \} $ into $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:d> = <nat:8> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> \} $ . This is given through the assignment scheme of usual Hoare logic . Focusing on the next line of code contained in our list of instructions , we have the binding code binding $ <var:d> + <var:W0$ into $ <var:d>$ . This forwards $ \{ <var:w> = <var:T> \land <var:W0> = <nat:2> \land <var:d> = <nat:8> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> \} $ to the condition $ \{ <var:w> = <var:T> \land <var:d> = <nat:8> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:w> = <var:T> }} <var:W0> := <nat:2> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:w> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:w> ; <var:W2> := <var:W2> * <var:w> ; <var:d> := <var:W2> ; <var:d> := <var:d> + <var:W1> ; <var:d> := <var:d> + <var:W0> {{ <var:d> = <nat:8> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:W2> = <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:2> * <var:T> /\ <var:d> = <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:W0> = <nat:2> /\ <var:d> = <nat:8> * <var:T> ^ <nat:2> + <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:d> = <nat:8> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 