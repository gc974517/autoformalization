\begin{document} \begin{theorem} Let the following list of instructions such that \begin{verbatim} <var:u0> := <nat:5> ; <var:j> := <var:u0> \end{verbatim} Allow it to hold that $ <var:Z> = <var:i> $ ahead of the execution of our series of instructions it follows that we see $ <var:j> = <nat:5> $ when set of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of our segment of code can be shown with usual Hoare logic . Moving forward , \begin{eqnarray} \{ <var:Z> = <var:i> \} \, <var:u0> := <nat:5> \, \{ <var:Z> = <var:i> \land <var:u0> = <nat:5> \} \\ \{ <var:Z> = <var:i> \land <var:u0> = <nat:5> \} \, <var:j> := <var:u0\, \{ <var:Z> = <var:i> \land <var:j> = <nat:5> \} \end{eqnarray} This is known to be sound by the assignment rule given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Z> = <var:i> }} <var:u0> := <nat:5> ; <var:j> := <var:u0> {{ <var:j> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:j> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 