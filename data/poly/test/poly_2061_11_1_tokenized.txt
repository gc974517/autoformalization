\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:k1> := <var:H> ; <var:k2> := <var:k1> * <var:H> ; <var:k3> := <var:k2> * <var:H> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:6> ; <var:C> := <var:k3> <var:C> := <var:C> + <var:k2> <var:C> := <var:C> + <var:k1> <var:C> := <var:C> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:H> = <var:e> $ given $ <var:e> $ prior to the evaluation of our set of instructions it must be that we see $ <var:C> = <nat:6> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this set of instructions is demonstrated through typical Hoare techniques . Going to the next step , we have the variable assignmet command assigning $ <var:H> $ into $ <var:k1>$ . This line takes the condition $ \{ <var:H> = <var:e> \} $ to the postcondition $ \{ <var:H> = <var:e> \land <var:k1> = <var:e> \} $ . This is given by the assignment scheme of standard Hoare logic . Moving forward to the upcoming command found in the code segment , we have the variable binding statement defining $ <var:k1> * <var:H> $ toward $ <var:k2>$ . This code advances $ \{ <var:H> = <var:e> \land <var:k1> = <var:e> \} $ as $ \{ <var:H> = <var:e> \land <var:k1> = <var:e> \land <var:k2> = <var:e> ^ <nat:2> \} $ . Observing the upcoming line seen in our set of instructions , we have the variable assignmet command \verb | <var:k3> := <var:k2> * <var:H> ; | . This takes the precondition $ \{ <var:H> = <var:e> \land <var:k1> = <var:e> \land <var:k2> = <var:e> ^ <nat:2> \} $ toward the postcondition $ \{ <var:H> = <var:e> \land <var:k1> = <var:e> \land <var:k2> = <var:e> ^ <nat:2> \land <var:k3> = <var:e> ^ <nat:3> \} $ . This is rigorously given using the assignment inference rule given in Hoare logic . Shifting focus toward the subsequent statement found in the series of instructions , the environment update line yielding $ <nat:3> $ into $ <var:k0>$ . This takes $ \{ <var:H> = <var:e> \land <var:k1> = <var:e> \land <var:k2> = <var:e> ^ <nat:2> \land <var:k3> = <var:e> ^ <nat:3> \} $ to the condition $ \{ <var:H> = <var:e> \land <var:k1> = <var:e> \land <var:k2> = <var:e> ^ <nat:2> \land <var:k3> = <var:e> ^ <nat:3> \land <var:k0> = <nat:3> \} $ . This is rigorously given using the assignment scheme from typical Hoare logic . Honing in on the next line in our list of commands , we have the variable update statement \verb | <var:k1> := <var:k1> * <nat:9> ; | . This advances $ \{ <var:H> = <var:e> \land <var:k1> = <var:e> \land <var:k2> = <var:e> ^ <nat:2> \land <var:k3> = <var:e> ^ <nat:3> \land <var:k0> = <nat:3> \} $ into $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k2> = <var:e> ^ <nat:2> \land <var:k3> = <var:e> ^ <nat:3> \land <var:k0> = <nat:3> \} $ . This is shown to be logically sound using the assignment scheme obtained from typical Hoare techniques . Going forward , the command \verb | <var:k2> := <var:k2> * <nat:3> ; | . This redefines the precondition $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k2> = <var:e> ^ <nat:2> \land <var:k3> = <var:e> ^ <nat:3> \land <var:k0> = <nat:3> \} $ into the postcondition $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k2> = <nat:3> \times <var:e> ^ <nat:2> \land <var:k3> = <var:e> ^ <nat:3> \land <var:k0> = <nat:3> \} $ . Stepping through , we see the variable update code yielding $ <var:k3> * <nat:6> $ toward $ <var:k3>$ . This command transfers $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k2> = <nat:3> \times <var:e> ^ <nat:2> \land <var:k3> = <var:e> ^ <nat:3> \land <var:k0> = <nat:3> \} $ as the condition $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k2> = <nat:3> \times <var:e> ^ <nat:2> \land <var:k3> = <nat:6> \times <var:e> ^ <nat:3> \land <var:k0> = <nat:3> \} $ . Paying attention to the following line of code found in the code , we have the assignment command \verb | <var:C> := <var:k3> | . This line transfers the precondition $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k2> = <nat:3> \times <var:e> ^ <nat:2> \land <var:k3> = <nat:6> \times <var:e> ^ <nat:3> \land <var:k0> = <nat:3> \} $ as the postcondition $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k2> = <nat:3> \times <var:e> ^ <nat:2> \land <var:k0> = <nat:3> \land <var:C> = <nat:6> \times <var:e> ^ <nat:3> \} $ . Advancing to the next step , we see the variable update line \verb | <var:C> := <var:C> + <var:k2> | . This takes $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k2> = <nat:3> \times <var:e> ^ <nat:2> \land <var:k0> = <nat:3> \land <var:C> = <nat:6> \times <var:e> ^ <nat:3> \} $ into $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k0> = <nat:3> \land <var:C> = <nat:6> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule from standard Hoare reasoning . Moving forward to the next step , we have the variable assignmet statement \verb | <var:C> := <var:C> + <var:k1> | . This redefines the condition $ \{ <var:H> = <var:e> \land <var:k1> = <nat:9> \times <var:e> \land <var:k0> = <nat:3> \land <var:C> = <nat:6> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> \} $ as the postcondition $ \{ <var:H> = <var:e> \land <var:k0> = <nat:3> \land <var:C> = <nat:6> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> \} $ . Next , we see the variable assignmet statement binding $ <var:C> + <var:k0$ as $ <var:C>$ . This forwards $ \{ <var:H> = <var:e> \land <var:k0> = <nat:3> \land <var:C> = <nat:6> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> \} $ as $ \{ <var:H> = <var:e> \land <var:C> = <nat:6> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> + <nat:3> \} $ . This is rigorously given with the assignment law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:H> ; <var:k2> := <var:k1> * <var:H> ; <var:k3> := <var:k2> * <var:H> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:6> ; <var:C> := <var:k3> <var:C> := <var:C> + <var:k2> <var:C> := <var:C> + <var:k1> <var:C> := <var:C> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:H> = <var:e> }} <def:poly> {{ <var:C> = <nat:6> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <var:e> /\ <var:k2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <var:e> /\ <var:k2> = <var:e> ^ <nat:2> /\ <var:k3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <var:e> /\ <var:k2> = <var:e> ^ <nat:2> /\ <var:k3> = <var:e> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <nat:9> * <var:e> /\ <var:k2> = <var:e> ^ <nat:2> /\ <var:k3> = <var:e> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <nat:9> * <var:e> /\ <var:k2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:k3> = <var:e> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <nat:9> * <var:e> /\ <var:k2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:k3> = <nat:6> * <var:e> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <nat:9> * <var:e> /\ <var:k2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:k0> = <nat:3> /\ <var:C> = <nat:6> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k1> = <nat:9> * <var:e> /\ <var:k0> = <nat:3> /\ <var:C> = <nat:6> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:k0> = <nat:3> /\ <var:C> = <nat:6> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:C> = <nat:6> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 