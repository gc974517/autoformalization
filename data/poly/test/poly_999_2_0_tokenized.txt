\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:1> ; <var:E> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:f> = <var:k> $ prior to evaluating this set of instructions , it holds that $ <var:E> = <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques results in : \begin{eqnarray} \{ <var:f> = <var:k> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:f> = <var:k> \land <var:W0> = <nat:1> \} \\ <var:E> := <var:W0> \\ \{ <var:f> = <var:k> \land <var:E> = <nat:1> \} \end{eqnarray} Thus , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:1> ; <var:E> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:f> = <var:k> }} <def:poly> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:k> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 