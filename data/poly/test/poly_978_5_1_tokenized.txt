\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j1> := <var:A> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:2> ; <var:s> := <var:j1> <var:s> := <var:s> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:A> = <var:S> $ before interpreting this program , then we see $ <var:s> = <nat:2> \cdot <var:S> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this program is given with standard Hoare reasoning . Advancing on , \verb | { <var:A> = <var:S> } <var:j1> := <var:A> { <var:A> = <var:S> \land <var:j1> = <var:S> } | , \verb | { <var:A> = <var:S> \land <var:j1> = <var:S> } <var:j0> := <nat:2> { <var:A> = <var:S> \land <var:j1> = <var:S> \land <var:j0> = <nat:2> } | and \verb | { <var:A> = <var:S> \land <var:j1> = <var:S> \land <var:j0> = <nat:2> } <var:j1> := <var:j1> * <nat:2> { <var:A> = <var:S> \land <var:j1> = <nat:2> \times <var:S> \land <var:j0> = <nat:2> } | . Jumping to the upcoming piece of code in our code , we see \verb | { <var:A> = <var:S> } <var:j1> := <var:A> { <var:A> = <var:S> \land <var:j1> = <var:S> } | . Moving on to the next step , we see \verb | { <var:A> = <var:S> } <var:j1> := <var:A> { <var:A> = <var:S> \land <var:j1> = <var:S> } | . This is shown using the environment update rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:A> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:2> ; <var:s> := <var:j1> <var:s> := <var:s> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:A> = <var:S> }} <def:poly> {{ <var:s> = <nat:2> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:j1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:j1> = <var:S> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:j1> = <nat:2> * <var:S> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:j0> = <nat:2> /\ <var:s> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:s> = <nat:2> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 