\begin{document} \begin{theorem} Take the following series of instructions as \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:d> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:d> ; <var:D2> := <var:D2> * <var:d> ; <var:D3> := <nat:1> ; <var:D3> := <var:D3> * <var:d> ; <var:D3> := <var:D3> * <var:d> ; <var:D3> := <var:D3> * <var:d> ; <var:t> := <var:D3> ; <var:t> := <var:t> + <var:D2> ; <var:t> := <var:t> + <var:D1> ; <var:t> := <var:t> + <var:D0> \end{verbatim} Given that $ <var:d> = <var:u> $ before executing our segment of code it holds that we have $ <var:t> = <nat:1> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:3> $ after segment of code is done . \end{theorem} \begin{proof} The argument for this series of commands can be shown through typical Hoare techniques . Following , we see \verb | { <var:d> = <var:u> } <var:D0> := <nat:3> { <var:d> = <var:u> \land <var:D0> = <nat:3> } | , \verb | { <var:d> = <var:u> \land <var:D0> = <nat:3> } <var:D1> := <nat:9> { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> } | , \verb | { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> } <var:D1> := <var:D1> * <var:d> { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> * <var:u> } | and \verb | { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> * <var:u> } <var:D2> := <nat:5> { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> * <var:u> \land <var:D2> = <nat:5> } | . Taking a look at the next piece of code seen in the code segment , \verb | { <var:d> = <var:u> } <var:D0> := <nat:3> { <var:d> = <var:u> \land <var:D0> = <nat:3> } | . This is deduced through the variable assignmet law given by typical Hoare techniques . Taking another step toward the proceeding steps in our list of commands , we see \verb | { <var:d> = <var:u> } <var:D0> := <nat:3> { <var:d> = <var:u> \land <var:D0> = <nat:3> } | , \verb | { <var:d> = <var:u> \land <var:D0> = <nat:3> } <var:D1> := <nat:9> { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> } | , \verb | { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> } <var:D1> := <var:D1> * <var:d> { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> * <var:u> } | and \verb | { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> * <var:u> } <var:D2> := <nat:5> { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> * <var:u> \land <var:D2> = <nat:5> } | . This is shown to be logically sound by the environment update rule from usual Hoare reasoning . Moving forward , \verb | { <var:d> = <var:u> } <var:D0> := <nat:3> { <var:d> = <var:u> \land <var:D0> = <nat:3> } | . Advancing to the subsequent lines of codefound in the code segment , we have \verb | { <var:d> = <var:u> } <var:D0> := <nat:3> { <var:d> = <var:u> \land <var:D0> = <nat:3> } | and \verb | { <var:d> = <var:u> \land <var:D0> = <nat:3> } <var:D1> := <nat:9> { <var:d> = <var:u> \land <var:D0> = <nat:3> \land <var:D1> = <nat:9> } | . This is shown to be logically sound with the variable assignmet inference rule given in typical Hoare logic . Taking a look at the following line of code found in the set of instructions , we see \verb | { <var:d> = <var:u> } <var:D0> := <nat:3> { <var:d> = <var:u> \land <var:D0> = <nat:3> } | . This is shown with the variable update rule given in Hoare techniques . Taking another step toward the subsequent bit of code in our series of instructions , we have \verb | { <var:d> = <var:u> } <var:D0> := <nat:3> { <var:d> = <var:u> \land <var:D0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:d> = <var:u> }} <var:D0> := <nat:3> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:d> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:d> ; <var:D2> := <var:D2> * <var:d> ; <var:D3> := <nat:1> ; <var:D3> := <var:D3> * <var:d> ; <var:D3> := <var:D3> * <var:d> ; <var:D3> := <var:D3> * <var:d> ; <var:t> := <var:D3> ; <var:t> := <var:t> + <var:D2> ; <var:t> := <var:t> + <var:D1> ; <var:t> := <var:t> + <var:D0> {{ <var:t> = <nat:1> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:D2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:D2> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:D2> = <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:D2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:D3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:D2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:D2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:D2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:D2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:t> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:9> * <var:u> /\ <var:t> = <nat:1> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:D0> = <nat:3> /\ <var:t> = <nat:1> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:t> = <nat:1> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 