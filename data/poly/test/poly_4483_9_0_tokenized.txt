\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:F0> := <nat:5> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:l> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:l> ; <var:F2> := <var:F2> * <var:l> ; <var:o> := <var:F2> ; <var:o> := <var:o> + <var:F1> ; <var:o> := <var:o> + <var:F0> \end{verbatim} Assume $ <var:l> = <var:J> $ prior to interpreting this code , it must be that $ <var:o> = <nat:3> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the program can be demonstrated with typical Hoare reasoning . Taking a look at the upcoming bits of codefound in our set of commands , we have \begin{verbatim} { <var:l> = <var:J> } <var:F0> := <nat:5> { <var:l> = <var:J> \land <var:F0> = <nat:5> } { <var:l> = <var:J> \land <var:F0> = <nat:5> } <var:F1> := <nat:1> { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> } { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> } <var:F1> := <var:F1> * <var:l> { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> \cdot <var:J> } { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> \cdot <var:J> } <var:F2> := <nat:3> { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:3> } { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:3> } <var:F2> := <var:F2> * <var:l> { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:3> \cdot <var:J> } \end{verbatim} This is known to be sound using the assignment inference rule given in Hoare reasoning . Taking another step toward the proceeding steps contained in our series of instructions , \begin{verbatim} { <var:l> = <var:J> } <var:F0> := <nat:5> { <var:l> = <var:J> \land <var:F0> = <nat:5> } { <var:l> = <var:J> \land <var:F0> = <nat:5> } <var:F1> := <nat:1> { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> } { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> } <var:F1> := <var:F1> * <var:l> { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> \cdot <var:J> } { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> \cdot <var:J> } <var:F2> := <nat:3> { <var:l> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:3> } \end{verbatim} This is given by the variable assignmet scheme in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:l> = <var:J> }} <var:F0> := <nat:5> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:l> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:l> ; <var:F2> := <var:F2> * <var:l> ; <var:o> := <var:F2> ; <var:o> := <var:o> + <var:F1> ; <var:o> := <var:o> + <var:F0> {{ <var:o> = <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:1> * <var:J> /\ <var:F2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:1> * <var:J> /\ <var:F2> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:1> * <var:J> /\ <var:F2> = <nat:3> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:1> * <var:J> /\ <var:o> = <nat:3> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:F0> = <nat:5> /\ <var:o> = <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:J> /\ <var:o> = <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 