\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:m> ; <var:Q2> := <var:Q1> * <var:m> ; <var:Q3> := <var:Q2> * <var:m> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:Q3> := <var:Q3> * <nat:1> ; <var:A> := <var:Q3> <var:A> := <var:A> + <var:Q2> <var:A> := <var:A> + <var:Q1> <var:A> := <var:A> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:m> = <var:M> $ before interpreting our set of commands , it follows that we see $ <var:A> = <nat:1> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:4> $ after set of commands executes . \end{theorem} \begin{proof} The way to prove correctness for the code is given through usual Hoare techniques . Advancing to the proceeding command found in the code segment , we see the statement \verb | <var:Q1> := <var:m> ; | . This forwards the condition $ \{ <var:m> = <var:M> \} $ to $ \{ <var:m> = <var:M> \land <var:Q1> = <var:M> \} $ . This is shown using the assignment inference rule given in standard Hoare logic . Paying attention to the subsequent line contained in the series of commands , we have the variable assignmet statement \verb | <var:Q2> := <var:Q1> * <var:m> ; | . This statement redefines $ \{ <var:m> = <var:M> \land <var:Q1> = <var:M> \} $ to the postcondition $ \{ <var:m> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \} $ . Moving forward , we have the variable update command \verb | <var:Q3> := <var:Q2> * <var:m> ; | . This code redefines $ \{ <var:m> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \} $ to $ \{ <var:m> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \} $ . This is ensured by the assignment scheme given by usual Hoare logic . Paying attention to the proceeding bit of code in the list of instructions , we see the binding code defining $ <nat:4> $ to $ <var:Q0>$ . This command takes $ \{ <var:m> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \} $ as the postcondition $ \{ <var:m> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:4> \} $ . Focusing on the next command found in our series of commands , the binding code \verb | <var:Q1> := <var:Q1> * <nat:1> ; | . This forwards $ \{ <var:m> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:4> \} $ into $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:4> \} $ . This is deduced using the assignment rule found in standard Hoare techniques . Observing the subsequent bit of code contained in the list of commands , we see the environment update statement \verb | <var:Q2> := <var:Q2> * <nat:1> ; | . This redefines the precondition $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:4> \} $ into $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:4> \} $ . This is ensured by the assignment inference rule obtained from standard Hoare reasoning . Moving on to the following command found in the list of commands , we have the binding statement assigning $ <var:Q3> * <nat:1> $ toward $ <var:Q3>$ . This takes $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:4> \} $ as the condition $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:Q3> = <nat:1> \cdot <var:M> ^ <nat:3> \land <var:Q0> = <nat:4> \} $ . Jumping to the upcoming piece of code seen in the code , the environment update line assigning $ <var:Q3$ as $ <var:A>$ . This line takes $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:Q3> = <nat:1> \cdot <var:M> ^ <nat:3> \land <var:Q0> = <nat:4> \} $ toward $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:Q0> = <nat:4> \land <var:A> = <nat:1> \cdot <var:M> ^ <nat:3> \} $ . Immediately following , we see the binding code yielding $ <var:A> + <var:Q2$ toward $ <var:A>$ . This redefines the condition $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:Q0> = <nat:4> \land <var:A> = <nat:1> \cdot <var:M> ^ <nat:3> \} $ as the postcondition $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q0> = <nat:4> \land <var:A> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> \} $ . Taking another step toward the next step seen in the list of commands , we see the variable update command yielding $ <var:A> + <var:Q1$ to $ <var:A>$ . This code moves the precondition $ \{ <var:m> = <var:M> \land <var:Q1> = <nat:1> \cdot <var:M> \land <var:Q0> = <nat:4> \land <var:A> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> \} $ toward the postcondition $ \{ <var:m> = <var:M> \land <var:Q0> = <nat:4> \land <var:A> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> \} $ . This is known to be sound with the assignment inference rule defined by usual Hoare logic . Next , we see the variable assignmet code \verb | <var:A> := <var:A> + <var:Q0> | . This code takes the condition $ \{ <var:m> = <var:M> \land <var:Q0> = <nat:4> \land <var:A> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> \} $ into the condition $ \{ <var:m> = <var:M> \land <var:A> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:4> \} $ . This is known to be sound through the assignment law given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:m> ; <var:Q2> := <var:Q1> * <var:m> ; <var:Q3> := <var:Q2> * <var:m> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:Q3> := <var:Q3> * <nat:1> ; <var:A> := <var:Q3> <var:A> := <var:A> + <var:Q2> <var:A> := <var:A> + <var:Q1> <var:A> := <var:A> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:m> = <var:M> }} <def:poly> {{ <var:A> = <nat:1> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <nat:1> * <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <nat:1> * <var:M> /\ <var:Q2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <nat:1> * <var:M> /\ <var:Q2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:Q3> = <nat:1> * <var:M> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <nat:1> * <var:M> /\ <var:Q2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:Q0> = <nat:4> /\ <var:A> = <nat:1> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q1> = <nat:1> * <var:M> /\ <var:Q0> = <nat:4> /\ <var:A> = <nat:1> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:Q0> = <nat:4> /\ <var:A> = <nat:1> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:M> /\ <var:A> = <nat:1> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 