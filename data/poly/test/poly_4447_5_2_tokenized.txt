\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:M> := <nat:2> ; <var:M> := <var:M> * <var:p> ; <var:M> := <nat:4> + <var:M> * <var:p> ; <var:M> := <nat:1> + <var:M> * <var:p> ; <var:M> := <nat:2> + <var:M> * <var:p> \end{verbatim} \end{definition} \begin{theorem} Allowing ( taking $ <var:m> \in \mathbb{N} $ ) that we have $ <var:p> = <var:m> $ prior to the evaluation of the series of instructions , it holds that we have $ <var:M> = <nat:2> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:2> $ once set of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be shown through standard Hoare logic . Moving forward to the next step , we have the environment update line binding $ <nat:2> $ toward $ <var:M>$ . This redefines the precondition $ \{ <var:p> = <var:m> \} $ as the condition $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \} $ . Keeping momentum , the assignment command letting $ <var:M> * <var:p> $ as $ <var:M>$ . This transfers the precondition $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \} $ toward the condition $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \cdot <var:m> + \} $ . This is given using the assignment inference rule obtained from typical Hoare logic . Moving on , we have the command \verb | <var:M> := <nat:4> + <var:M> * <var:p> ; | . This redefines $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \cdot <var:m> + \} $ into the condition $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:2> + <nat:4> \} $ . This is known to be sound with the assignment inference rule defined in typical Hoare reasoning . Next , we see the environment update command \verb | <var:M> := <nat:1> + <var:M> * <var:p> ; | . This command transfers the condition $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:2> + <nat:4> \} $ toward the postcondition $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> + <nat:1> \} $ . This is shown to be logically sound through the assignment rule found in typical Hoare logic . Stepping through , we see the binding line binding $ <nat:2> + <var:M> * <var:p$ into $ <var:M>$ . This forwards the precondition $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> + <nat:1> \} $ into $ \{ <var:p> = <var:m> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:2> \} $ . This is given by the assignment scheme given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:2> ; <var:M> := <var:M> * <var:p> ; <var:M> := <nat:4> + <var:M> * <var:p> ; <var:M> := <nat:1> + <var:M> * <var:p> ; <var:M> := <nat:2> + <var:M> * <var:p> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:p> = <var:m> }} <def:poly> {{ <var:M> = <nat:2> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:M> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:M> = <nat:2> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:M> = <nat:2> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:M> = <nat:2> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 