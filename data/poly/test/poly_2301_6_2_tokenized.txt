\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:2> + <var:e> * <var:r> ; <var:e> := <nat:1> + <var:e> * <var:r> ; <var:e> := <var:e> * <var:r> ; <var:e> := <nat:3> + <var:e> * <var:r> ; <var:e> := <nat:3> + <var:e> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Allow it to be that $ <var:r> = <var:b> $ ahead of executing the segment of code it follows that we see $ <var:e> = <nat:3> \times <var:b> ^ <nat:5> + <nat:2> \times <var:b> ^ <nat:4> + <nat:1> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the segment of code is shown with typical Hoare reasoning . Going to the next step , we have the code yielding $ <nat:3> $ into $ <var:e>$ . This transfers $ \{ <var:r> = <var:b> \} $ as the condition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> \} $ . This is sound with the assignment inference rule given by standard Hoare reasoning . Moving on to the next step , the variable binding line assigning $ <nat:2> + <var:e> * <var:r> $ to $ <var:e>$ . This transfers the condition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> \} $ to the postcondition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> + <nat:2> \} $ . This is deduced using the assignment inference rule in standard Hoare reasoning . Immediately following , we have the variable assignmet command assigning $ <nat:1> + <var:e> * <var:r> $ toward $ <var:e>$ . This statement takes the condition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> + <nat:2> \} $ toward the postcondition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> \} $ . This is shown to be logically sound through the assignment rule defined by standard Hoare techniques . Observing the upcoming command seen in our set of instructions , we see the variable binding code letting $ <var:e> * <var:r> $ toward $ <var:e>$ . This code advances the precondition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> \} $ toward the condition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + \} $ . Going to the next step , the environment update line assigning $ <nat:3> + <var:e> * <var:r> $ into $ <var:e>$ . This transfers the precondition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + \} $ to $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> \} $ . This is shown with the assignment rule defined in typical Hoare techniques . Going forward , the binding line assigning $ <nat:3> + <var:e> * <var:r$ to $ <var:e>$ . This forwards the precondition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> \} $ into the condition $ \{ <var:r> = <var:b> \land <var:e> = <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <nat:2> + <var:e> * <var:r> ; <var:e> := <nat:1> + <var:e> * <var:r> ; <var:e> := <var:e> * <var:r> ; <var:e> := <nat:3> + <var:e> * <var:r> ; <var:e> := <nat:3> + <var:e> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:r> = <var:b> }} <def:poly> {{ <var:e> = <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:e> = <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:e> = <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:e> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:e> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:e> = <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 