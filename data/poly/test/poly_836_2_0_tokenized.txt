\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:8> ; <var:F> := <var:T0> \end{verbatim} Allow it to be that $ <var:H> = <var:o> $ before executing this segment of code , it follows that we have $ <var:F> = <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code is accomplished by standard Hoare techniques . Focusing on the next bit of code found in our series of instructions , we have the binding statement yielding $ <nat:8> $ into $ <var:T0>$ . This command transfers $ \{ <var:H> = <var:o> \} $ into the condition $ \{ <var:H> = <var:o> \land <var:T0> = <nat:8> \} $ . Shifting focus toward the subsequent bit of code found in the segment of code , we have the statement assigning $ <var:T0$ toward $ <var:F>$ . This line forwards the precondition $ \{ <var:H> = <var:o> \land <var:T0> = <nat:8> \} $ as the postcondition $ \{ <var:H> = <var:o> \land <var:F> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:H> = <var:o> }} <var:T0> := <nat:8> ; <var:F> := <var:T0> {{ <var:F> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:F> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 