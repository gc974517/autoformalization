\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:U> ; <var:R2> := <var:R1> * <var:U> ; <var:R3> := <var:R2> * <var:U> ; <var:R4> := <var:R3> * <var:U> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:8> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:9> ; <var:R4> := <var:R4> * <nat:4> ; <var:k> := <var:R4> <var:k> := <var:k> + <var:R3> <var:k> := <var:k> + <var:R2> <var:k> := <var:k> + <var:R1> <var:k> := <var:k> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given ( for every $ <var:V> \in \mathbb{Z}^+ $ ) that $ <var:U> = <var:V> $ before interpreting our segment of code it must be that we have $ <var:k> = <nat:4> \times <var:V> ^ <nat:4> + <nat:9> \times <var:V> ^ <nat:3> + <nat:6> \times <var:V> ^ <nat:2> + <nat:8> \times <var:V> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions can be shown by Hoare reasoning . Jumping to the next step seen in our set of commands , the binding command \verb | <var:R1> := <var:U> ; | . This line advances the condition $ \{ <var:U> = <var:V> \} $ as $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \} $ . This is guaranteed by the assignment rule obtained from usual Hoare logic . Paying attention to the upcoming line of code found in our list of instructions , we have the variable binding code \verb | <var:R2> := <var:R1> * <var:U> ; | . This transfers the precondition $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \} $ to $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \} $ . This is rigorously given through the assignment rule obtained from usual Hoare reasoning . Focusing on the next statement seen in our code , we see the assignment code defining $ <var:R2> * <var:U> $ to $ <var:R3>$ . This code forwards the condition $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \} $ . Advancing to the subsequent step in the series of commands , the assignment statement giving $ <var:R3> * <var:U> $ into $ <var:R4>$ . This command takes $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \} $ toward the condition $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \} $ . This is deduced with the assignment inference rule given by usual Hoare logic . Focusing on the following piece of code seen in our code segment , we see the binding code letting $ <nat:5> $ toward $ <var:R0>$ . This statement advances the condition $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \} $ into the condition $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . Advancing to the next command seen in the code segment , we have the variable update code defining $ <var:R1> * <nat:8> $ as $ <var:R1>$ . This transfers the condition $ \{ <var:U> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ toward the postcondition $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . Shifting focus toward the following line of code found in our set of instructions , we see the statement assigning $ <var:R2> * <nat:6> $ toward $ <var:R2>$ . This forwards $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ as the postcondition $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . This is rigorously given by the assignment law obtained from Hoare techniques . Looking at the subsequent command in the set of commands , the variable binding code \verb | <var:R3> := <var:R3> * <nat:9> ; | . This advances $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ as the condition $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . Advancing , we see the command binding $ <var:R4> * <nat:4> $ as $ <var:R4>$ . This command redefines $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:V> ^ <nat:3> \land <var:R4> = <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ to the postcondition $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:V> ^ <nat:3> \land <var:R4> = <nat:4> \cdot <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ . Shifting focus toward the following bit of code found in our series of instructions , we have the binding statement assigning $ <var:R4$ to $ <var:k>$ . This code takes the condition $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:V> ^ <nat:3> \land <var:R4> = <nat:4> \cdot <var:V> ^ <nat:4> \land <var:R0> = <nat:5> \} $ to the postcondition $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:V> ^ <nat:3> \land <var:R0> = <nat:5> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> \} $ . Taking a look at the following line contained in the series of commands , we see the variable assignmet command \verb | <var:k> := <var:k> + <var:R3> | . This takes $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R3> = <nat:9> \cdot <var:V> ^ <nat:3> \land <var:R0> = <nat:5> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> \} $ into $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R0> = <nat:5> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> + <nat:9> \cdot <var:V> ^ <nat:3> \} $ . This is deduced with the assignment rule from typical Hoare reasoning . Moving forward to the subsequent step seen in our series of instructions , the environment update statement \verb | <var:k> := <var:k> + <var:R2> | . This moves $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:R0> = <nat:5> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> + <nat:9> \cdot <var:V> ^ <nat:3> \} $ into the postcondition $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R0> = <nat:5> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> + <nat:9> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> \} $ . This is given with the assignment rule given in standard Hoare techniques . Moving forward to the next step , the variable binding code \verb | <var:k> := <var:k> + <var:R1> | . This statement transfers the precondition $ \{ <var:U> = <var:V> \land <var:R1> = <nat:8> \cdot <var:V> \land <var:R0> = <nat:5> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> + <nat:9> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> \} $ toward the condition $ \{ <var:U> = <var:V> \land <var:R0> = <nat:5> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> + <nat:9> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> + <nat:8> \cdot <var:V> \} $ . This is known to be sound with the assignment law defined by usual Hoare techniques . Paying attention to the proceeding piece of code contained in our code segment , we see the line \verb | <var:k> := <var:k> + <var:R0> | . This advances the condition $ \{ <var:U> = <var:V> \land <var:R0> = <nat:5> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> + <nat:9> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> + <nat:8> \cdot <var:V> \} $ to the condition $ \{ <var:U> = <var:V> \land <var:k> = <nat:4> \cdot <var:V> ^ <nat:4> + <nat:9> \cdot <var:V> ^ <nat:3> + <nat:6> \cdot <var:V> ^ <nat:2> + <nat:8> \cdot <var:V> + <nat:5> \} $ . This is guaranteed with the assignment scheme obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <var:R4> : string := " <var:R4> " . Definition <def:poly> := <var:R1> := <var:U> ; <var:R2> := <var:R1> * <var:U> ; <var:R3> := <var:R2> * <var:U> ; <var:R4> := <var:R3> * <var:U> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:8> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:9> ; <var:R4> := <var:R4> * <nat:4> ; <var:k> := <var:R4> <var:k> := <var:k> + <var:R3> <var:k> := <var:k> + <var:R2> <var:k> := <var:k> + <var:R1> <var:k> := <var:k> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:U> = <var:V> }} <def:poly> {{ <var:k> = <nat:4> * <var:V> ^ <nat:4> + <nat:9> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <var:V> /\ <var:R2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <var:V> /\ <var:R2> = <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <var:V> /\ <var:R2> = <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> /\ <var:R4> = <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <var:V> /\ <var:R2> = <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> /\ <var:R4> = <var:V> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <nat:8> * <var:V> /\ <var:R2> = <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> /\ <var:R4> = <var:V> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <nat:8> * <var:V> /\ <var:R2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> /\ <var:R4> = <var:V> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <nat:8> * <var:V> /\ <var:R2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:V> ^ <nat:3> /\ <var:R4> = <var:V> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <nat:8> * <var:V> /\ <var:R2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:V> ^ <nat:3> /\ <var:R4> = <nat:4> * <var:V> ^ <nat:4> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <nat:8> * <var:V> /\ <var:R2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:V> ^ <nat:3> /\ <var:R0> = <nat:5> /\ <var:k> = <nat:4> * <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <nat:8> * <var:V> /\ <var:R2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:R0> = <nat:5> /\ <var:k> = <nat:4> * <var:V> ^ <nat:4> + <nat:9> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R1> = <nat:8> * <var:V> /\ <var:R0> = <nat:5> /\ <var:k> = <nat:4> * <var:V> ^ <nat:4> + <nat:9> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:R0> = <nat:5> /\ <var:k> = <nat:4> * <var:V> ^ <nat:4> + <nat:9> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:k> = <nat:4> * <var:V> ^ <nat:4> + <nat:9> * <var:V> ^ <nat:3> + <nat:6> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 