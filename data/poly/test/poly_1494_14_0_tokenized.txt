\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:2> ; <var:e1> := <nat:4> ; <var:e1> := <var:e1> * <var:z> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:z> ; <var:e2> := <var:e2> * <var:z> ; <var:e3> := <nat:3> ; <var:e3> := <var:e3> * <var:z> ; <var:e3> := <var:e3> * <var:z> ; <var:e3> := <var:e3> * <var:z> ; <var:y> := <var:e3> ; <var:y> := <var:y> + <var:e2> ; <var:y> := <var:y> + <var:e1> ; <var:y> := <var:y> + <var:e0> \end{verbatim} Assuming that $ <var:z> = <var:G> $ ( given any whole numbers $ <var:G> $ ) before interpreting our segment of code it holds that we see $ <var:y> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> $ once segment of code finishes . \end{theorem} \begin{proof} Using usual Hoare logic gives us : \begin{eqnarray} \{ <var:z> = <var:G> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \} \\ <var:e1> := <nat:4> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \} \\ <var:e1> := <var:e1> * <var:z> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \} \\ <var:e2> := <nat:1> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:e2> = <nat:1> \} \\ <var:e2> := <var:e2> * <var:z> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:e2> = <nat:1> \times <var:G> \} \\ <var:e2> := <var:e2> * <var:z> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:e2> = <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:e3> := <nat:3> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:e2> = <nat:1> \times <var:G> ^ <nat:2> \land <var:e3> = <nat:3> \} \end{eqnarray} Furthering the evaluation of our series of commands gives : \begin{eqnarray} <var:e3> := <var:e3> * <var:z> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:e2> = <nat:1> \times <var:G> ^ <nat:2> \land <var:e3> = <nat:3> \times <var:G> \} \\ <var:e3> := <var:e3> * <var:z> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:e2> = <nat:1> \times <var:G> ^ <nat:2> \land <var:e3> = <nat:3> \times <var:G> ^ <nat:2> \} \end{eqnarray} Furthering interpreting the segment of code yields : \begin{eqnarray} <var:e3> := <var:e3> * <var:z> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:e2> = <nat:1> \times <var:G> ^ <nat:2> \land <var:e3> = <nat:3> \times <var:G> ^ <nat:3> \} \end{eqnarray} Continuing evaluating this list of commands results in : \begin{eqnarray} <var:y> := <var:e3> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:e2> = <nat:1> \times <var:G> ^ <nat:2> \land <var:y> = <nat:3> \times <var:G> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:e2> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \times <var:G> \land <var:y> = <nat:3> \times <var:G> ^ <nat:3> + <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:e1> ; \\ \{ <var:z> = <var:G> \land <var:e0> = <nat:2> \land <var:y> = <nat:3> \times <var:G> ^ <nat:3> + <nat:1> \times <var:G> ^ <nat:2> + <nat:4> \times <var:G> \} \\ <var:y> := <var:y> + <var:e0> \\ \{ <var:z> = <var:G> \land <var:y> = <nat:3> \times <var:G> ^ <nat:3> + <nat:1> \times <var:G> ^ <nat:2> + <nat:4> \times <var:G> + <nat:2> \} \end{eqnarray} Considering the above , our set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:z> = <var:G> }} <var:e0> := <nat:2> ; <var:e1> := <nat:4> ; <var:e1> := <var:e1> * <var:z> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:z> ; <var:e2> := <var:e2> * <var:z> ; <var:e3> := <nat:3> ; <var:e3> := <var:e3> * <var:z> ; <var:e3> := <var:e3> * <var:z> ; <var:e3> := <var:e3> * <var:z> ; <var:y> := <var:e3> ; <var:y> := <var:y> + <var:e2> ; <var:y> := <var:y> + <var:e1> ; <var:y> := <var:y> + <var:e0> {{ <var:y> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:e2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:e2> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:e2> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:e2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:e2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:e2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:e2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:e2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:y> = <nat:3> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:e0> = <nat:2> /\ <var:y> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 