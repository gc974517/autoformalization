\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <nat:4> + <var:l> * <var:K> ; <var:l> := <nat:4> + <var:l> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Assume for some whole numbers $ <var:U> $ that $ <var:K> = <var:U> $ prior to interpreting this list of commands , then $ <var:l> = <nat:2> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:4> $ after series of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is done by Hoare techniques . Shifting focus toward the following step found in the segment of code , the binding command \verb | <var:l> := <nat:2> ; | . This advances the precondition $ \{ <var:K> = <var:U> \} $ to the postcondition $ \{ <var:K> = <var:U> \land <var:l> = <nat:2> \} $ . This is deduced using the assignment law in Hoare reasoning . Advancing to the upcoming command found in our set of instructions , we have the binding code \verb | <var:l> := <nat:4> + <var:l> * <var:K> ; | . This code forwards $ \{ <var:K> = <var:U> \land <var:l> = <nat:2> \} $ as $ \{ <var:K> = <var:U> \land <var:l> = <nat:2> \cdot <var:U> + <nat:4> \} $ . Focusing on the following piece of code contained in the code , we have the variable update statement \verb | <var:l> := <nat:4> + <var:l> * <var:K> | . This takes the precondition $ \{ <var:K> = <var:U> \land <var:l> = <nat:2> \cdot <var:U> + <nat:4> \} $ as $ \{ <var:K> = <var:U> \land <var:l> = <nat:2> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:4> \} $ . This is guaranteed through the assignment scheme of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:2> ; <var:l> := <nat:4> + <var:l> * <var:K> ; <var:l> := <nat:4> + <var:l> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:K> = <var:U> }} <def:poly> {{ <var:l> = <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:l> = <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:U> /\ <var:l> = <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 