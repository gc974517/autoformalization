\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:1> ; <var:d> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allowing given all $ <var:q> \in \mathbb{N} $ $ <var:i> = <var:q> $ ahead of running our set of commands it must be that $ <var:d> = <nat:1> $ when set of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:q> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:i> = <var:q> \land <var:C0> = <nat:1> \} \\ <var:d> := <var:C0> \\ \{ <var:i> = <var:q> \land <var:d> = <nat:1> \} \end{eqnarray} The application of typical Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:1> ; <var:d> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:i> = <var:q> }} <def:poly> {{ <var:d> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:d> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 