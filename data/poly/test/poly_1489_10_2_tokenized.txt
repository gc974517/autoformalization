\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:T> := <nat:3> ; <var:T> := <nat:2> + <var:T> * <var:H> ; <var:T> := <nat:1> + <var:T> * <var:H> ; <var:T> := <nat:3> + <var:T> * <var:H> ; <var:T> := <nat:2> + <var:T> * <var:H> ; <var:T> := <nat:4> + <var:T> * <var:H> ; <var:T> := <nat:4> + <var:T> * <var:H> ; <var:T> := <var:T> * <var:H> ; <var:T> := <nat:3> + <var:T> * <var:H> ; <var:T> := <nat:1> + <var:T> * <var:H> \end{verbatim} Given $ <var:H> = <var:I> $ before interpreting the set of instructions then we see $ <var:T> = <nat:3> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + <nat:1> $ after set of commands has executed . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands can be seen through the below decorated code segment . \begin{eqnarray} \{ <var:H> = <var:I> \} \\ <var:T> := <nat:3> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \} \\ <var:T> := <nat:2> + <var:T> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> + <nat:2> \} \\ <var:T> := <nat:1> + <var:T> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:1> \} \\ <var:T> := <nat:3> + <var:T> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:3> \} \\ <var:T> := <nat:2> + <var:T> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:2> \} \\ <var:T> := <nat:4> + <var:T> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:4> \} \\ <var:T> := <nat:4> + <var:T> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:1> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:4> \} \\ <var:T> := <var:T> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> ^ <nat:7> + <nat:2> \cdot <var:I> ^ <nat:6> + <nat:1> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + \} \\ <var:T> := <nat:3> + <var:T> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> ^ <nat:8> + <nat:2> \cdot <var:I> ^ <nat:7> + <nat:1> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:3> \} \\ <var:T> := <nat:1> + <var:T> * <var:H> \\ \{ <var:H> = <var:I> \land <var:T> = <nat:3> \cdot <var:I> ^ <nat:9> + <nat:2> \cdot <var:I> ^ <nat:8> + <nat:1> \cdot <var:I> ^ <nat:7> + <nat:3> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:4> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> + <nat:1> \} \end{eqnarray} The application of Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:H> = <var:I> }} <var:T> := <nat:3> ; <var:T> := <nat:2> + <var:T> * <var:H> ; <var:T> := <nat:1> + <var:T> * <var:H> ; <var:T> := <nat:3> + <var:T> * <var:H> ; <var:T> := <nat:2> + <var:T> * <var:H> ; <var:T> := <nat:4> + <var:T> * <var:H> ; <var:T> := <nat:4> + <var:T> * <var:H> ; <var:T> := <var:T> * <var:H> ; <var:T> := <nat:3> + <var:T> * <var:H> ; <var:T> := <nat:1> + <var:T> * <var:H> {{ <var:T> = <nat:3> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:T> = <nat:3> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 