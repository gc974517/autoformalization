\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:m1> := <var:U> ; <var:m2> := <var:m1> * <var:U> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:7> ; <var:m2> := <var:m2> * <nat:6> ; <var:R> := <var:m2> <var:R> := <var:R> + <var:m1> <var:R> := <var:R> + <var:m0> \end{verbatim} Assume it to be that $ <var:U> = <var:Y> $ ( for some positive integers $ <var:Y> $ ) prior to running our segment of code it follows that we see $ <var:R> = <nat:6> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:7> $ after list of instructions is done . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be seen with standard Hoare techniques . Immediately following , we see \begin{eqnarray} \{ <var:U> = <var:Y> \} \, <var:m1> := <var:U> \, \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \} \\ \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \} \, <var:m2> := <var:m1> * <var:U> \, \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \land <var:m2> = <var:Y> ^ <nat:2> \} \end{eqnarray} This is deduced with the assignment law in typical Hoare reasoning . Paying attention to the upcoming steps found in the list of commands , we see \begin{eqnarray} \{ <var:U> = <var:Y> \} \, <var:m1> := <var:U> \, \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \} \\ \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \} \, <var:m2> := <var:m1> * <var:U> \, \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \land <var:m2> = <var:Y> ^ <nat:2> \} \end{eqnarray} This is sound by the variable update inference rule from Hoare logic . Advancing , \begin{eqnarray} \{ <var:U> = <var:Y> \} \, <var:m1> := <var:U> \, \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \} \\ \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \} \, <var:m2> := <var:m1> * <var:U> \, \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \land <var:m2> = <var:Y> ^ <nat:2> \} \end{eqnarray} Moving on to the upcoming pieces of code seen in the list of commands , we have \begin{eqnarray} \{ <var:U> = <var:Y> \} \, <var:m1> := <var:U> \, \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \} \\ \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \} \, <var:m2> := <var:m1> * <var:U> \, \{ <var:U> = <var:Y> \land <var:m1> = <var:Y> \land <var:m2> = <var:Y> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:U> = <var:Y> }} <var:m1> := <var:U> ; <var:m2> := <var:m1> * <var:U> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:7> ; <var:m2> := <var:m2> * <nat:6> ; <var:R> := <var:m2> <var:R> := <var:R> + <var:m1> <var:R> := <var:R> + <var:m0> {{ <var:R> = <nat:6> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:m1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:m1> = <var:Y> /\ <var:m2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:m1> = <var:Y> /\ <var:m2> = <var:Y> ^ <nat:2> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:m1> = <nat:7> * <var:Y> /\ <var:m2> = <var:Y> ^ <nat:2> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:m1> = <nat:7> * <var:Y> /\ <var:m2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:m1> = <nat:7> * <var:Y> /\ <var:m0> = <nat:7> /\ <var:R> = <nat:6> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:m0> = <nat:7> /\ <var:R> = <nat:6> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:R> = <nat:6> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 