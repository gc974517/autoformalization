\begin{document} \begin{theorem} Take a series of instructions : \begin{verbatim} <var:E1> := <var:w> ; <var:E2> := <var:E1> * <var:w> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:9> ; <var:E2> := <var:E2> * <nat:6> ; <var:D> := <var:E2> <var:D> := <var:D> + <var:E1> <var:D> := <var:D> + <var:E0> \end{verbatim} Assume $ <var:w> = <var:F> $ before the execution of our code , it must be that we see $ <var:D> = <nat:6> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:F> \} \\ <var:E1> := <var:w> ; \\ \{ <var:w> = <var:F> \land <var:E1> = <var:F> \} \\ <var:E2> := <var:E1> * <var:w> ; \\ \{ <var:w> = <var:F> \land <var:E1> = <var:F> \land <var:E2> = <var:F> ^ <nat:2> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:w> = <var:F> \land <var:E1> = <var:F> \land <var:E2> = <var:F> ^ <nat:2> \land <var:E0> = <nat:3> \} \\ <var:E1> := <var:E1> * <nat:9> ; \\ \{ <var:w> = <var:F> \land <var:E1> = <nat:9> \times <var:F> \land <var:E2> = <var:F> ^ <nat:2> \land <var:E0> = <nat:3> \} \\ <var:E2> := <var:E2> * <nat:6> ; \\ \{ <var:w> = <var:F> \land <var:E1> = <nat:9> \times <var:F> \land <var:E2> = <nat:6> \times <var:F> ^ <nat:2> \land <var:E0> = <nat:3> \} \\ <var:D> := <var:E2> \\ \{ <var:w> = <var:F> \land <var:E1> = <nat:9> \times <var:F> \land <var:E0> = <nat:3> \land <var:D> = <nat:6> \times <var:F> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:E1> \\ \{ <var:w> = <var:F> \land <var:E0> = <nat:3> \land <var:D> = <nat:6> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> \} \\ <var:D> := <var:D> + <var:E0> \\ \{ <var:w> = <var:F> \land <var:D> = <nat:6> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:w> = <var:F> }} <var:E1> := <var:w> ; <var:E2> := <var:E1> * <var:w> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:9> ; <var:E2> := <var:E2> * <nat:6> ; <var:D> := <var:E2> <var:D> := <var:D> + <var:E1> <var:D> := <var:D> + <var:E0> {{ <var:D> = <nat:6> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:E1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:E1> = <var:F> /\ <var:E2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:E1> = <var:F> /\ <var:E2> = <var:F> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:E1> = <nat:9> * <var:F> /\ <var:E2> = <var:F> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:E1> = <nat:9> * <var:F> /\ <var:E2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:E1> = <nat:9> * <var:F> /\ <var:E0> = <nat:3> /\ <var:D> = <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:E0> = <nat:3> /\ <var:D> = <nat:6> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:D> = <nat:6> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 