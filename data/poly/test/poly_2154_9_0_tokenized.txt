\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:2> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:O> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:O> ; <var:j2> := <var:j2> * <var:O> ; <var:E> := <var:j2> ; <var:E> := <var:E> + <var:j1> ; <var:E> := <var:E> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- given every $ <var:s> $ --- that we have $ <var:O> = <var:s> $ prior to the evaluation of this set of instructions it holds that we have $ <var:E> = <nat:5> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:2> $ after set of instructions has exited . \end{theorem} \begin{proof} Let the following decorated code segment . \begin{eqnarray} \{ <var:O> = <var:s> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:O> = <var:s> \land <var:j0> = <nat:2> \} \\ <var:j1> := <nat:4> ; \\ \{ <var:O> = <var:s> \land <var:j0> = <nat:2> \land <var:j1> = <nat:4> \} \\ <var:j1> := <var:j1> * <var:O> ; \\ \{ <var:O> = <var:s> \land <var:j0> = <nat:2> \land <var:j1> = <nat:4> \cdot <var:s> \} \\ <var:j2> := <nat:5> ; \\ \{ <var:O> = <var:s> \land <var:j0> = <nat:2> \land <var:j1> = <nat:4> \cdot <var:s> \land <var:j2> = <nat:5> \} \\ <var:j2> := <var:j2> * <var:O> ; \\ \{ <var:O> = <var:s> \land <var:j0> = <nat:2> \land <var:j1> = <nat:4> \cdot <var:s> \land <var:j2> = <nat:5> \cdot <var:s> \} \\ <var:j2> := <var:j2> * <var:O> ; \\ \{ <var:O> = <var:s> \land <var:j0> = <nat:2> \land <var:j1> = <nat:4> \cdot <var:s> \land <var:j2> = <nat:5> \cdot <var:s> ^ <nat:2> \} \\ <var:E> := <var:j2> ; \\ \{ <var:O> = <var:s> \land <var:j0> = <nat:2> \land <var:j1> = <nat:4> \cdot <var:s> \land <var:E> = <nat:5> \cdot <var:s> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:j1> ; \\ \{ <var:O> = <var:s> \land <var:j0> = <nat:2> \land <var:E> = <nat:5> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> \} \\ <var:E> := <var:E> + <var:j0> \\ \{ <var:O> = <var:s> \land <var:E> = <nat:5> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:2> \} \end{eqnarray} The application of standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j0> := <nat:2> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:O> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:O> ; <var:j2> := <var:j2> * <var:O> ; <var:E> := <var:j2> ; <var:E> := <var:E> + <var:j1> ; <var:E> := <var:E> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:O> = <var:s> }} <def:poly> {{ <var:E> = <nat:5> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:4> * <var:s> /\ <var:j2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:4> * <var:s> /\ <var:j2> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:4> * <var:s> /\ <var:j2> = <nat:5> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:4> * <var:s> /\ <var:E> = <nat:5> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:j0> = <nat:2> /\ <var:E> = <nat:5> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:s> /\ <var:E> = <nat:5> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 