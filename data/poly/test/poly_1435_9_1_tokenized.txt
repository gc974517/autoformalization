\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:F1> := <var:G> ; <var:F2> := <var:F1> * <var:G> ; <var:F3> := <var:F2> * <var:G> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:1> ; <var:F3> := <var:F3> * <nat:4> ; <var:q> := <var:F3> <var:q> := <var:q> + <var:F1> <var:q> := <var:q> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:G> = <var:u> $ before interpreting the code segment , it must be that we have $ <var:q> = <nat:4> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be given with this decorated set of instructions . \begin{eqnarray} \{ <var:G> = <var:u> \} \\ <var:F1> := <var:G> ; \\ \{ <var:G> = <var:u> \land <var:F1> = <var:u> \} \\ <var:F2> := <var:F1> * <var:G> ; \\ \{ <var:G> = <var:u> \land <var:F1> = <var:u> \land <var:F2> = <var:u> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:G> ; \\ \{ <var:G> = <var:u> \land <var:F1> = <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F3> = <var:u> ^ <nat:3> \} \\ <var:F0> := <nat:7> ; \\ \{ <var:G> = <var:u> \land <var:F1> = <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F3> = <var:u> ^ <nat:3> \land <var:F0> = <nat:7> \} \\ <var:F1> := <var:F1> * <nat:1> ; \\ \{ <var:G> = <var:u> \land <var:F1> = <nat:1> \times <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F3> = <var:u> ^ <nat:3> \land <var:F0> = <nat:7> \} \\ <var:F3> := <var:F3> * <nat:4> ; \\ \{ <var:G> = <var:u> \land <var:F1> = <nat:1> \times <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F3> = <nat:4> \times <var:u> ^ <nat:3> \land <var:F0> = <nat:7> \} \\ <var:q> := <var:F3> \\ \{ <var:G> = <var:u> \land <var:F1> = <nat:1> \times <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F0> = <nat:7> \land <var:q> = <nat:4> \times <var:u> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:F1> \\ \{ <var:G> = <var:u> \land <var:F0> = <nat:7> \land <var:q> = <nat:4> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> \} \\ <var:q> := <var:q> + <var:F0> \\ \{ <var:G> = <var:u> \land <var:q> = <nat:4> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> + <nat:7> \} \end{eqnarray} Using typical Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:G> ; <var:F2> := <var:F1> * <var:G> ; <var:F3> := <var:F2> * <var:G> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:1> ; <var:F3> := <var:F3> * <nat:4> ; <var:q> := <var:F3> <var:q> := <var:q> + <var:F1> <var:q> := <var:q> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:G> = <var:u> }} <def:poly> {{ <var:q> = <nat:4> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:F1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:F1> = <var:u> /\ <var:F2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:F1> = <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:F1> = <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F3> = <var:u> ^ <nat:3> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:F1> = <nat:1> * <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F3> = <var:u> ^ <nat:3> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:F1> = <nat:1> * <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F3> = <nat:4> * <var:u> ^ <nat:3> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:F1> = <nat:1> * <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F0> = <nat:7> /\ <var:q> = <nat:4> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:F0> = <nat:7> /\ <var:q> = <nat:4> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:q> = <nat:4> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 