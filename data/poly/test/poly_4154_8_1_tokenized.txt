\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E1> := <var:o> ; <var:E2> := <var:E1> * <var:o> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:3> ; <var:s> := <var:E2> <var:s> := <var:s> + <var:E1> <var:s> := <var:s> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allow that $ <var:o> = <var:B> $ ahead of the execution of our code segment it follows that we see $ <var:s> = <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:3> $ once set of instructions has finished executing . \end{theorem} \begin{proof} The application of Hoare logic results in : \begin{eqnarray} \{ <var:o> = <var:B> \} \\ <var:E1> := <var:o> ; \\ \{ <var:o> = <var:B> \land <var:E1> = <var:B> \} \\ <var:E2> := <var:E1> * <var:o> ; \\ \{ <var:o> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:o> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E0> = <nat:3> \} \\ <var:E1> := <var:E1> * <nat:2> ; \\ \{ <var:o> = <var:B> \land <var:E1> = <nat:2> * <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E0> = <nat:3> \} \\ <var:E2> := <var:E2> * <nat:3> ; \\ \{ <var:o> = <var:B> \land <var:E1> = <nat:2> * <var:B> \land <var:E2> = <nat:3> * <var:B> ^ <nat:2> \land <var:E0> = <nat:3> \} \end{eqnarray} Furthering evaluating our series of instructions produces : \begin{eqnarray} <var:s> := <var:E2> \\ \{ <var:o> = <var:B> \land <var:E1> = <nat:2> * <var:B> \land <var:E0> = <nat:3> \land <var:s> = <nat:3> * <var:B> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:E1> \\ \{ <var:o> = <var:B> \land <var:E0> = <nat:3> \land <var:s> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> \} \\ <var:s> := <var:s> + <var:E0> \\ \{ <var:o> = <var:B> \land <var:s> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> \} \end{eqnarray} As a consequence , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E1> := <var:o> ; <var:E2> := <var:E1> * <var:o> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:3> ; <var:s> := <var:E2> <var:s> := <var:s> + <var:E1> <var:s> := <var:s> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:o> = <var:B> }} <def:poly> {{ <var:s> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:E1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:E1> = <nat:2> * <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:E1> = <nat:2> * <var:B> /\ <var:E2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:E1> = <nat:2> * <var:B> /\ <var:E0> = <nat:3> /\ <var:s> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:E0> = <nat:3> /\ <var:s> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:s> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 