\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:4> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:B> ; <var:t2> := <var:t2> * <var:B> ; <var:t5> := <nat:2> ; <var:t5> := <var:t5> * <var:B> ; <var:t5> := <var:t5> * <var:B> ; <var:t5> := <var:t5> * <var:B> ; <var:t5> := <var:t5> * <var:B> ; <var:t5> := <var:t5> * <var:B> ; <var:J> := <var:t5> ; <var:J> := <var:J> + <var:t2> ; <var:J> := <var:J> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:B> = <var:x> $ before running this list of commands , it holds that $ <var:J> = <nat:2> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques results in : \begin{eqnarray} \{ <var:B> = <var:x> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \} \\ <var:t2> := <nat:1> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \} \\ <var:t2> := <var:t2> * <var:B> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> \} \\ <var:t2> := <var:t2> * <var:B> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:t5> := <nat:2> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:t5> = <nat:2> \} \\ <var:t5> := <var:t5> * <var:B> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:t5> = <nat:2> \cdot <var:x> \} \\ <var:t5> := <var:t5> * <var:B> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:t5> = <nat:2> \cdot <var:x> ^ <nat:2> \} \\ <var:t5> := <var:t5> * <var:B> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:t5> = <nat:2> \cdot <var:x> ^ <nat:3> \} \\ <var:t5> := <var:t5> * <var:B> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:t5> = <nat:2> \cdot <var:x> ^ <nat:4> \} \\ <var:t5> := <var:t5> * <var:B> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:t5> = <nat:2> \cdot <var:x> ^ <nat:5> \} \\ <var:J> := <var:t5> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:J> = <nat:2> \cdot <var:x> ^ <nat:5> \} \\ <var:J> := <var:J> + <var:t2> ; \\ \{ <var:B> = <var:x> \land <var:t0> = <nat:4> \land <var:J> = <nat:2> \cdot <var:x> ^ <nat:5> + <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:t0> \\ \{ <var:B> = <var:x> \land <var:J> = <nat:2> \cdot <var:x> ^ <nat:5> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:4> \} \end{eqnarray} Hence , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t5> : string := " <var:t5> " . Definition <def:poly> := <var:t0> := <nat:4> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:B> ; <var:t2> := <var:t2> * <var:B> ; <var:t5> := <nat:2> ; <var:t5> := <var:t5> * <var:B> ; <var:t5> := <var:t5> * <var:B> ; <var:t5> := <var:t5> * <var:B> ; <var:t5> := <var:t5> * <var:B> ; <var:t5> := <var:t5> * <var:B> ; <var:J> := <var:t5> ; <var:J> := <var:J> + <var:t2> ; <var:J> := <var:J> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:B> = <var:x> }} <def:poly> {{ <var:J> = <nat:2> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:t5> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:t5> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:t5> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:t5> = <nat:2> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:t5> = <nat:2> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:t5> = <nat:2> * <var:x> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:J> = <nat:2> * <var:x> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:t0> = <nat:4> /\ <var:J> = <nat:2> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 