\begin{document} \begin{theorem} Take the following program as follows \begin{verbatim} <var:m0> := <nat:1> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:K> ; <var:m3> := <nat:1> ; <var:m3> := <var:m3> * <var:K> ; <var:m3> := <var:m3> * <var:K> ; <var:m3> := <var:m3> * <var:K> ; <var:Z> := <var:m3> ; <var:Z> := <var:Z> + <var:m1> ; <var:Z> := <var:Z> + <var:m0> \end{verbatim} Allowing that $ <var:K> = <var:j> $ before evaluating this series of instructions it holds that we see $ <var:Z> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:1> $ once list of instructions executes . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be seen through usual Hoare techniques . Observing the next lines seen in the program , we have \begin{verbatim} { <var:K> = <var:j> } <var:m0> := <nat:1> { <var:K> = <var:j> \land <var:m0> = <nat:1> } { <var:K> = <var:j> \land <var:m0> = <nat:1> } <var:m1> := <nat:1> { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> } { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> } <var:m1> := <var:m1> * <var:K> { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> * <var:j> } { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> * <var:j> } <var:m3> := <nat:1> { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> * <var:j> \land <var:m3> = <nat:1> } \end{verbatim} This is shown to be logically sound with the variable binding rule from usual Hoare reasoning . Moving on to the upcoming steps found in the set of commands , \begin{verbatim} { <var:K> = <var:j> } <var:m0> := <nat:1> { <var:K> = <var:j> \land <var:m0> = <nat:1> } { <var:K> = <var:j> \land <var:m0> = <nat:1> } <var:m1> := <nat:1> { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> } { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> } <var:m1> := <var:m1> * <var:K> { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> * <var:j> } { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> * <var:j> } <var:m3> := <nat:1> { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> * <var:j> \land <var:m3> = <nat:1> } { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> * <var:j> \land <var:m3> = <nat:1> } <var:m3> := <var:m3> * <var:K> { <var:K> = <var:j> \land <var:m0> = <nat:1> \land <var:m1> = <nat:1> * <var:j> \land <var:m3> = <nat:1> * <var:j> } \end{verbatim} This is deduced by the assignment law found in usual Hoare reasoning . Honing in on the subsequent bit of code in the series of instructions , we have \begin{verbatim} { <var:K> = <var:j> } <var:m0> := <nat:1> { <var:K> = <var:j> \land <var:m0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:K> = <var:j> }} <var:m0> := <nat:1> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:K> ; <var:m3> := <nat:1> ; <var:m3> := <var:m3> * <var:K> ; <var:m3> := <var:m3> * <var:K> ; <var:m3> := <var:m3> * <var:K> ; <var:Z> := <var:m3> ; <var:Z> := <var:Z> + <var:m1> ; <var:Z> := <var:Z> + <var:m0> {{ <var:Z> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:1> * <var:j> /\ <var:m3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:1> * <var:j> /\ <var:m3> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:1> * <var:j> /\ <var:m3> = <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:1> * <var:j> /\ <var:m3> = <nat:1> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> /\ <var:m1> = <nat:1> * <var:j> /\ <var:Z> = <nat:1> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:m0> = <nat:1> /\ <var:Z> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:Z> = <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 