\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:2> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:a> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:a> ; <var:y2> := <var:y2> * <var:a> ; <var:y3> := <nat:1> ; <var:y3> := <var:y3> * <var:a> ; <var:y3> := <var:y3> * <var:a> ; <var:y3> := <var:y3> * <var:a> ; <var:Y> := <var:y3> ; <var:Y> := <var:Y> + <var:y2> ; <var:Y> := <var:Y> + <var:y1> ; <var:Y> := <var:Y> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Allowing it to hold that $ <var:a> = <var:S> $ ahead of interpreting our code it follows that we have $ <var:Y> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:9> \times <var:S> + <nat:2> $ after set of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:S> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \} \\ <var:y1> := <nat:9> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \} \\ <var:y1> := <var:y1> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \} \\ <var:y2> := <nat:4> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:y2> = <nat:4> \} \\ <var:y2> := <var:y2> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:y2> = <nat:4> \times <var:S> \} \\ <var:y2> := <var:y2> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:y2> = <nat:4> \times <var:S> ^ <nat:2> \} \\ <var:y3> := <nat:1> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:y2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:y3> = <nat:1> \} \\ <var:y3> := <var:y3> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:y2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:y3> = <nat:1> \times <var:S> \} \\ <var:y3> := <var:y3> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:y2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:y3> = <nat:1> \times <var:S> ^ <nat:2> \} \\ <var:y3> := <var:y3> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:y2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:y3> = <nat:1> \times <var:S> ^ <nat:3> \} \\ <var:Y> := <var:y3> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:y2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:Y> = <nat:1> \times <var:S> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:y2> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:y1> = <nat:9> \times <var:S> \land <var:Y> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:y1> ; \\ \{ <var:a> = <var:S> \land <var:y0> = <nat:2> \land <var:Y> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:9> \times <var:S> \} \\ <var:Y> := <var:Y> + <var:y0> \\ \{ <var:a> = <var:S> \land <var:Y> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:9> \times <var:S> + <nat:2> \} \end{eqnarray} Using typical Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:a> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:a> ; <var:y2> := <var:y2> * <var:a> ; <var:y3> := <nat:1> ; <var:y3> := <var:y3> * <var:a> ; <var:y3> := <var:y3> * <var:a> ; <var:y3> := <var:y3> * <var:a> ; <var:Y> := <var:y3> ; <var:Y> := <var:Y> + <var:y2> ; <var:Y> := <var:Y> + <var:y1> ; <var:Y> := <var:Y> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:a> = <var:S> }} <def:poly> {{ <var:Y> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:9> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:y2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:y2> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:y2> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:y2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:y3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:y2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:y2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:y2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:y2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:Y> = <nat:1> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:9> * <var:S> /\ <var:Y> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:y0> = <nat:2> /\ <var:Y> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:Y> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:9> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 