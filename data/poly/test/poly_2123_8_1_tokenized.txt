\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:E1> := <var:a> ; <var:E2> := <var:E1> * <var:a> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:1> ; <var:E2> := <var:E2> * <nat:7> ; <var:J> := <var:E2> <var:J> := <var:J> + <var:E1> <var:J> := <var:J> + <var:E0> \end{verbatim} Assuming that we have $ <var:a> = <var:h> $ before executing the series of instructions , it follows that $ <var:J> = <nat:7> \times <var:h> ^ <nat:2> + <nat:1> \times <var:h> + <nat:3> $ after program executes . \end{theorem} \begin{proof} The flow of logic for our program is evident by standard Hoare reasoning . Considering the following commands found in our set of commands , we see \verb | { <var:a> = <var:h> } <var:E1> := <var:a> { <var:a> = <var:h> \land <var:E1> = <var:h> } | , \verb | { <var:a> = <var:h> \land <var:E1> = <var:h> } <var:E2> := <var:E1> * <var:a> { <var:a> = <var:h> \land <var:E1> = <var:h> \land <var:E2> = <var:h> ^ <nat:2> } | , \verb | { <var:a> = <var:h> \land <var:E1> = <var:h> \land <var:E2> = <var:h> ^ <nat:2> } <var:E0> := <nat:3> { <var:a> = <var:h> \land <var:E1> = <var:h> \land <var:E2> = <var:h> ^ <nat:2> \land <var:E0> = <nat:3> } | , \verb | { <var:a> = <var:h> \land <var:E1> = <var:h> \land <var:E2> = <var:h> ^ <nat:2> \land <var:E0> = <nat:3> } <var:E1> := <var:E1> * <nat:1> { <var:a> = <var:h> \land <var:E1> = <nat:1> * <var:h> \land <var:E2> = <var:h> ^ <nat:2> \land <var:E0> = <nat:3> } | , \verb | { <var:a> = <var:h> \land <var:E1> = <nat:1> * <var:h> \land <var:E2> = <var:h> ^ <nat:2> \land <var:E0> = <nat:3> } <var:E2> := <var:E2> * <nat:7> { <var:a> = <var:h> \land <var:E1> = <nat:1> * <var:h> \land <var:E2> = <nat:7> * <var:h> ^ <nat:2> \land <var:E0> = <nat:3> } | , \verb | { <var:a> = <var:h> \land <var:E1> = <nat:1> * <var:h> \land <var:E2> = <nat:7> * <var:h> ^ <nat:2> \land <var:E0> = <nat:3> } <var:J> := <var:E2{ <var:a> = <var:h> \land <var:E1> = <nat:1> * <var:h> \land <var:E0> = <nat:3> \land <var:J> = <nat:7> * <var:h> ^ <nat:2> } | , \verb | { <var:a> = <var:h> \land <var:E1> = <nat:1> * <var:h> \land <var:E0> = <nat:3> \land <var:J> = <nat:7> * <var:h> ^ <nat:2> } <var:J> := <var:J> + <var:E1{ <var:a> = <var:h> \land <var:E0> = <nat:3> \land <var:J> = <nat:7> * <var:h> ^ <nat:2> + <nat:1> * <var:h> } | and \verb | { <var:a> = <var:h> \land <var:E0> = <nat:3> \land <var:J> = <nat:7> * <var:h> ^ <nat:2> + <nat:1> * <var:h> } <var:J> := <var:J> + <var:E0{ <var:a> = <var:h> \land <var:J> = <nat:7> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:a> = <var:h> }} <var:E1> := <var:a> ; <var:E2> := <var:E1> * <var:a> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:1> ; <var:E2> := <var:E2> * <nat:7> ; <var:J> := <var:E2> <var:J> := <var:J> + <var:E1> <var:J> := <var:J> + <var:E0> {{ <var:J> = <nat:7> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:E1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:E1> = <var:h> /\ <var:E2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:E1> = <var:h> /\ <var:E2> = <var:h> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:E1> = <nat:1> * <var:h> /\ <var:E2> = <var:h> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:E1> = <nat:1> * <var:h> /\ <var:E2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:E1> = <nat:1> * <var:h> /\ <var:E0> = <nat:3> /\ <var:J> = <nat:7> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:E0> = <nat:3> /\ <var:J> = <nat:7> * <var:h> ^ <nat:2> + <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:J> = <nat:7> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 