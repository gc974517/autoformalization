\begin{document} \begin{theorem} We define a list of instructions such that \begin{verbatim} <var:S1> := <var:i> ; <var:S2> := <var:S1> * <var:i> ; <var:S3> := <var:S2> * <var:i> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:6> ; <var:S2> := <var:S2> * <nat:3> ; <var:S3> := <var:S3> * <nat:9> ; <var:O> := <var:S3> <var:O> := <var:O> + <var:S2> <var:O> := <var:O> + <var:S1> <var:O> := <var:O> + <var:S0> \end{verbatim} Allowing , given positive integers $ <var:g> $ , that we have $ <var:i> = <var:g> $ before running this segment of code it follows that we have $ <var:O> = <nat:9> \cdot <var:g> ^ <nat:3> + <nat:3> \cdot <var:g> ^ <nat:2> + <nat:6> \cdot <var:g> + <nat:9> $ when program finishes . \end{theorem} \begin{proof} The method of proof for the segment of code can be demonstrated by typical Hoare techniques . Honing in on the subsequent commands contained in our segment of code , we see \begin{verbatim} { <var:i> = <var:g> } <var:S1> := <var:i> { <var:i> = <var:g> \land <var:S1> = <var:g> } { <var:i> = <var:g> \land <var:S1> = <var:g> } <var:S2> := <var:S1> * <var:i> { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> } { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> } <var:S3> := <var:S2> * <var:i> { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> } { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> } <var:S0> := <nat:9> { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S0> = <nat:9> } { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S0> = <nat:9> } <var:S1> := <var:S1> * <nat:6> { <var:i> = <var:g> \land <var:S1> = <nat:6> * <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S0> = <nat:9> } { <var:i> = <var:g> \land <var:S1> = <nat:6> * <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S0> = <nat:9> } <var:S2> := <var:S2> * <nat:3> { <var:i> = <var:g> \land <var:S1> = <nat:6> * <var:g> \land <var:S2> = <nat:3> * <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S0> = <nat:9> } \end{verbatim} This is shown with the assignment scheme given by usual Hoare reasoning . Paying attention to the next pieces of code seen in our code segment , \begin{verbatim} { <var:i> = <var:g> } <var:S1> := <var:i> { <var:i> = <var:g> \land <var:S1> = <var:g> } { <var:i> = <var:g> \land <var:S1> = <var:g> } <var:S2> := <var:S1> * <var:i> { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> } { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> } <var:S3> := <var:S2> * <var:i> { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> } { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> } <var:S0> := <nat:9> { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S0> = <nat:9> } { <var:i> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S0> = <nat:9> } <var:S1> := <var:S1> * <nat:6> { <var:i> = <var:g> \land <var:S1> = <nat:6> * <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S0> = <nat:9> } \end{verbatim} This is sound using the variable assignmet law obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:i> = <var:g> }} <var:S1> := <var:i> ; <var:S2> := <var:S1> * <var:i> ; <var:S3> := <var:S2> * <var:i> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:6> ; <var:S2> := <var:S2> * <nat:3> ; <var:S3> := <var:S3> * <nat:9> ; <var:O> := <var:S3> <var:O> := <var:O> + <var:S2> <var:O> := <var:O> + <var:S1> <var:O> := <var:O> + <var:S0> {{ <var:O> = <nat:9> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <var:g> /\ <var:S2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <var:g> /\ <var:S2> = <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <var:g> /\ <var:S2> = <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <nat:6> * <var:g> /\ <var:S2> = <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <nat:6> * <var:g> /\ <var:S2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <nat:6> * <var:g> /\ <var:S2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:g> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <nat:6> * <var:g> /\ <var:S2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:S0> = <nat:9> /\ <var:O> = <nat:9> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S1> = <nat:6> * <var:g> /\ <var:S0> = <nat:9> /\ <var:O> = <nat:9> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:S0> = <nat:9> /\ <var:O> = <nat:9> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:O> = <nat:9> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 