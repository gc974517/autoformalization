\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:o> := <nat:3> ; <var:o> := <nat:2> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> \end{verbatim} Allow --- with some $ <var:C> \in \mathbb{N} $ --- $ <var:a> = <var:C> $ before running the series of commands , it must be that $ <var:o> = <nat:3> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:a> = <var:C> \} \\ <var:o> := <nat:3> ; \\ \{ <var:a> = <var:C> \land <var:o> = <nat:3> \} \\ <var:o> := <nat:2> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:C> \land <var:o> = <nat:3> \times <var:C> + <nat:2> \} \\ <var:o> := <nat:3> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:C> \land <var:o> = <nat:3> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:3> \} \\ <var:o> := <nat:3> + <var:o> * <var:a> \\ \{ <var:a> = <var:C> \land <var:o> = <nat:3> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:3> \} \end{eqnarray} Thusly , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:a> = <var:C> }} <var:o> := <nat:3> ; <var:o> := <nat:2> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> {{ <var:o> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:o> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:o> = <nat:3> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:o> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:C> /\ <var:o> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 