\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G1> := <var:D> ; <var:G2> := <var:G1> * <var:D> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:6> ; <var:G2> := <var:G2> * <nat:9> ; <var:C> := <var:G2> <var:C> := <var:C> + <var:G1> <var:C> := <var:C> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:D> = <var:S> $ ahead of interpreting the set of instructions then we see $ <var:C> = <nat:9> \cdot <var:S> ^ <nat:2> + <nat:6> \cdot <var:S> + <nat:2> $ once segment of code exits . \end{theorem} \begin{proof} The application of standard Hoare reasoning yields : \begin{eqnarray} \{ <var:D> = <var:S> \} \\ <var:G1> := <var:D> ; \\ \{ <var:D> = <var:S> \land <var:G1> = <var:S> \} \\ <var:G2> := <var:G1> * <var:D> ; \\ \{ <var:D> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \} \\ <var:G0> := <nat:2> ; \\ \{ <var:D> = <var:S> \land <var:G1> = <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G0> = <nat:2> \} \\ <var:G1> := <var:G1> * <nat:6> ; \\ \{ <var:D> = <var:S> \land <var:G1> = <nat:6> \cdot <var:S> \land <var:G2> = <var:S> ^ <nat:2> \land <var:G0> = <nat:2> \} \\ <var:G2> := <var:G2> * <nat:9> ; \\ \{ <var:D> = <var:S> \land <var:G1> = <nat:6> \cdot <var:S> \land <var:G2> = <nat:9> \cdot <var:S> ^ <nat:2> \land <var:G0> = <nat:2> \} \\ <var:C> := <var:G2> \\ \{ <var:D> = <var:S> \land <var:G1> = <nat:6> \cdot <var:S> \land <var:G0> = <nat:2> \land <var:C> = <nat:9> \cdot <var:S> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:G1> \\ \{ <var:D> = <var:S> \land <var:G0> = <nat:2> \land <var:C> = <nat:9> \cdot <var:S> ^ <nat:2> + <nat:6> \cdot <var:S> \} \\ <var:C> := <var:C> + <var:G0> \\ \{ <var:D> = <var:S> \land <var:C> = <nat:9> \cdot <var:S> ^ <nat:2> + <nat:6> \cdot <var:S> + <nat:2> \} \end{eqnarray} Therefore , this series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G1> := <var:D> ; <var:G2> := <var:G1> * <var:D> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:6> ; <var:G2> := <var:G2> * <nat:9> ; <var:C> := <var:G2> <var:C> := <var:C> + <var:G1> <var:C> := <var:C> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:D> = <var:S> }} <def:poly> {{ <var:C> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:G1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:G1> = <var:S> /\ <var:G2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:G1> = <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:G1> = <nat:6> * <var:S> /\ <var:G2> = <var:S> ^ <nat:2> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:G1> = <nat:6> * <var:S> /\ <var:G2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:G1> = <nat:6> * <var:S> /\ <var:G0> = <nat:2> /\ <var:C> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:G0> = <nat:2> /\ <var:C> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:C> = <nat:9> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 