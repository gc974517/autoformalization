\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:2> ; <var:o> := <var:p0> \end{verbatim} Assume it to hold that $ <var:n> = <var:j> $ for any $ <var:j> $ before the execution of the program , then we see $ <var:o> = <nat:2> $ after list of commands has executed . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment is accomplished by usual Hoare logic . Now , the binding code \verb | <var:p0> := <nat:2> ; | . This moves the condition $ \{ <var:n> = <var:j> \} $ to the condition $ \{ <var:n> = <var:j> \land <var:p0> = <nat:2> \} $ . This is deduced with the assignment rule from standard Hoare logic . Moving on to the upcoming bit of code found in our set of instructions , we have the environment update statement yielding $ <var:p0$ into $ <var:o>$ . This takes $ \{ <var:n> = <var:j> \land <var:p0> = <nat:2> \} $ toward the postcondition $ \{ <var:n> = <var:j> \land <var:o> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:n> = <var:j> }} <var:p0> := <nat:2> ; <var:o> := <var:p0> {{ <var:o> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:o> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 