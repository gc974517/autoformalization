\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:B1> := <var:J> ; <var:B2> := <var:B1> * <var:J> ; <var:B3> := <var:B2> * <var:J> ; <var:B0> := <nat:2> ; <var:B2> := <var:B2> * <nat:6> ; <var:B3> := <var:B3> * <nat:8> ; <var:r> := <var:B3> <var:r> := <var:r> + <var:B2> <var:r> := <var:r> + <var:B0> \end{verbatim} Assume that $ <var:J> = <var:K> $ prior to interpreting this code segment then we have $ <var:r> = <nat:8> \times <var:K> ^ <nat:3> + <nat:6> \times <var:K> ^ <nat:2> + <nat:2> $ once code has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions can be shown with Hoare reasoning . Moving on , we see \verb | { <var:J> = <var:K> } <var:B1> := <var:J> { <var:J> = <var:K> \land <var:B1> = <var:K> } | , \verb | { <var:J> = <var:K> \land <var:B1> = <var:K> } <var:B2> := <var:B1> * <var:J> { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> } | , \verb | { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> } <var:B3> := <var:B2> * <var:J> { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> } | , \verb | { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> } <var:B0> := <nat:2> { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:2> } | and \verb | { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:2> } <var:B2> := <var:B2> * <nat:6> { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <nat:6> \cdot <var:K> ^ <nat:2> \land <var:B3> = <var:K> ^ <nat:3> \land <var:B0> = <nat:2> } | . Moving on , we have \verb | { <var:J> = <var:K> } <var:B1> := <var:J> { <var:J> = <var:K> \land <var:B1> = <var:K> } | and \verb | { <var:J> = <var:K> \land <var:B1> = <var:K> } <var:B2> := <var:B1> * <var:J> { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> } | . This is deduced with the scheme given in usual Hoare techniques . Moving on to the subsequent statements in the list of instructions , \verb | { <var:J> = <var:K> } <var:B1> := <var:J> { <var:J> = <var:K> \land <var:B1> = <var:K> } | and \verb | { <var:J> = <var:K> \land <var:B1> = <var:K> } <var:B2> := <var:B1> * <var:J> { <var:J> = <var:K> \land <var:B1> = <var:K> \land <var:B2> = <var:K> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:J> = <var:K> }} <var:B1> := <var:J> ; <var:B2> := <var:B1> * <var:J> ; <var:B3> := <var:B2> * <var:J> ; <var:B0> := <nat:2> ; <var:B2> := <var:B2> * <nat:6> ; <var:B3> := <var:B3> * <nat:8> ; <var:r> := <var:B3> <var:r> := <var:r> + <var:B2> <var:r> := <var:r> + <var:B0> {{ <var:r> = <nat:8> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:B1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <var:K> ^ <nat:2> /\ <var:B3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <var:K> ^ <nat:2> /\ <var:B3> = <var:K> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <nat:6> * <var:K> ^ <nat:2> /\ <var:B3> = <var:K> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <nat:6> * <var:K> ^ <nat:2> /\ <var:B3> = <nat:8> * <var:K> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:B1> = <var:K> /\ <var:B2> = <nat:6> * <var:K> ^ <nat:2> /\ <var:B0> = <nat:2> /\ <var:r> = <nat:8> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:B1> = <var:K> /\ <var:B0> = <nat:2> /\ <var:r> = <nat:8> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:r> = <nat:8> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 