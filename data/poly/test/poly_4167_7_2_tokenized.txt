\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:p> := <nat:1> ; <var:p> := <nat:3> + <var:p> * <var:W> ; <var:p> := <nat:3> + <var:p> * <var:W> ; <var:p> := <nat:2> + <var:p> * <var:W> ; <var:p> := <nat:4> + <var:p> * <var:W> ; <var:p> := <nat:2> + <var:p> * <var:W> ; <var:p> := <nat:3> + <var:p> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:W> = <var:y> $ ahead of the execution of this program it holds that $ <var:p> = <nat:1> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> $ when list of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:y> \} \\ <var:p> := <nat:1> ; \\ \{ <var:W> = <var:y> \land <var:p> = <nat:1> \} \\ <var:p> := <nat:3> + <var:p> * <var:W> ; \\ \{ <var:W> = <var:y> \land <var:p> = <nat:1> \cdot <var:y> + <nat:3> \} \\ <var:p> := <nat:3> + <var:p> * <var:W> ; \\ \{ <var:W> = <var:y> \land <var:p> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:3> \} \\ <var:p> := <nat:2> + <var:p> * <var:W> ; \\ \{ <var:W> = <var:y> \land <var:p> = <nat:1> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:2> \} \\ <var:p> := <nat:4> + <var:p> * <var:W> ; \\ \{ <var:W> = <var:y> \land <var:p> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:3> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:4> \} \\ <var:p> := <nat:2> + <var:p> * <var:W> ; \\ \{ <var:W> = <var:y> \land <var:p> = <nat:1> \cdot <var:y> ^ <nat:5> + <nat:3> \cdot <var:y> ^ <nat:4> + <nat:3> \cdot <var:y> ^ <nat:3> + <nat:2> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:2> \} \\ <var:p> := <nat:3> + <var:p> * <var:W> \\ \{ <var:W> = <var:y> \land <var:p> = <nat:1> \cdot <var:y> ^ <nat:6> + <nat:3> \cdot <var:y> ^ <nat:5> + <nat:3> \cdot <var:y> ^ <nat:4> + <nat:2> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:3> \} \end{eqnarray} Utilizing Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:1> ; <var:p> := <nat:3> + <var:p> * <var:W> ; <var:p> := <nat:3> + <var:p> * <var:W> ; <var:p> := <nat:2> + <var:p> * <var:W> ; <var:p> := <nat:4> + <var:p> * <var:W> ; <var:p> := <nat:2> + <var:p> * <var:W> ; <var:p> := <nat:3> + <var:p> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:W> = <var:y> }} <def:poly> {{ <var:p> = <nat:1> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:p> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:p> = <nat:1> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:p> = <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:p> = <nat:1> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:p> = <nat:1> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:p> = <nat:1> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:p> = <nat:1> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 