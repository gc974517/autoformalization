\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <var:U> * <var:A> ; <var:U> := <nat:2> + <var:U> * <var:A> ; <var:U> := <nat:2> + <var:U> * <var:A> ; <var:U> := <nat:1> + <var:U> * <var:A> ; <var:U> := <nat:3> + <var:U> * <var:A> ; <var:U> := <nat:2> + <var:U> * <var:A> ; <var:U> := <nat:1> + <var:U> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:A> = <var:g> $ --- for some $ <var:g> \in \mathbb{Z}^+ $ --- before evaluating the program it follows that we have $ <var:U> = <nat:4> \times <var:g> ^ <nat:7> + <nat:2> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> $ when series of instructions is done executing . \end{theorem} \begin{proof} Utilizing Hoare logic results in : \begin{eqnarray} \{ <var:A> = <var:g> \} \\ <var:U> := <nat:4> ; \\ \{ <var:A> = <var:g> \land <var:U> = <nat:4> \} \\ <var:U> := <var:U> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:U> = <nat:4> * <var:g> + \} \\ <var:U> := <nat:2> + <var:U> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:U> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> \} \\ <var:U> := <nat:2> + <var:U> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:U> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> + <nat:2> \} \\ <var:U> := <nat:1> + <var:U> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:U> = <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> \} \\ <var:U> := <nat:3> + <var:U> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:U> = <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> \} \\ <var:U> := <nat:2> + <var:U> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:U> = <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> \} \\ <var:U> := <nat:1> + <var:U> * <var:A> \\ \{ <var:A> = <var:g> \land <var:U> = <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> \} \end{eqnarray} Thusly , the set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:4> ; <var:U> := <var:U> * <var:A> ; <var:U> := <nat:2> + <var:U> * <var:A> ; <var:U> := <nat:2> + <var:U> * <var:A> ; <var:U> := <nat:1> + <var:U> * <var:A> ; <var:U> := <nat:3> + <var:U> * <var:A> ; <var:U> := <nat:2> + <var:U> * <var:A> ; <var:U> := <nat:1> + <var:U> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:A> = <var:g> }} <def:poly> {{ <var:U> = <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:U> = <nat:4> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:U> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:U> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:U> = <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:U> = <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:U> = <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:U> = <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 