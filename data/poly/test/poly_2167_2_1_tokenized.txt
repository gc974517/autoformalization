\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:7> ; <var:F> := <var:I0> \end{verbatim} Assume ( given all $ <var:K> \in \mathbb{Z}^+ $ ) that $ <var:l> = <var:K> $ before running our set of commands , then we have $ <var:F> = <nat:7> $ when series of commands has executed . \end{theorem} \begin{proof} Applying typical Hoare logic produces : \begin{eqnarray} \{ <var:l> = <var:K> \} \\ <var:I0> := <nat:7> ; \\ \{ <var:l> = <var:K> \land <var:I0> = <nat:7> \} \end{eqnarray} Continuing the evaluation of our set of commands results in : \begin{eqnarray} <var:F> := <var:I0> \\ \{ <var:l> = <var:K> \land <var:F> = <nat:7> \} \end{eqnarray} Given the preceding argument , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:l> = <var:K> }} <var:I0> := <nat:7> ; <var:F> := <var:I0> {{ <var:F> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:K> /\ <var:F> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 