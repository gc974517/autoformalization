\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:8> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:D> ; <var:q> := <var:A1> ; <var:q> := <var:q> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allowing taking positive integer coefficients $ <var:Q> $ that we have $ <var:D> = <var:Q> $ ahead of evaluating our series of commands then $ <var:q> = <nat:1> \times <var:Q> + <nat:8> $ once series of commands exits . \end{theorem} \begin{proof} The method of proof for this list of instructions can be accomplished by usual Hoare logic . Now , the assignment command giving $ <nat:8> $ into $ <var:A0>$ . This line advances the precondition $ \{ <var:D> = <var:Q> \} $ to $ \{ <var:D> = <var:Q> \land <var:A0> = <nat:8> \} $ . Immediately after , we have the variable update line \verb | <var:A1> := <nat:1> ; | . This moves $ \{ <var:D> = <var:Q> \land <var:A0> = <nat:8> \} $ as $ \{ <var:D> = <var:Q> \land <var:A0> = <nat:8> \land <var:A1> = <nat:1> \} $ . This is ensured through the assignment law obtained from typical Hoare logic . Further , we see the variable assignmet line \verb | <var:A1> := <var:A1> * <var:D> ; | . This line transfers the condition $ \{ <var:D> = <var:Q> \land <var:A0> = <nat:8> \land <var:A1> = <nat:1> \} $ as $ \{ <var:D> = <var:Q> \land <var:A0> = <nat:8> \land <var:A1> = <nat:1> \cdot <var:Q> \} $ . Moving on to the next step , we see the environment update line \verb | <var:q> := <var:A1> ; | . This code transfers the condition $ \{ <var:D> = <var:Q> \land <var:A0> = <nat:8> \land <var:A1> = <nat:1> \cdot <var:Q> \} $ to the condition $ \{ <var:D> = <var:Q> \land <var:A0> = <nat:8> \land <var:q> = <nat:1> \cdot <var:Q> \} $ . Focusing on the following step seen in our set of commands , we see the statement defining $ <var:q> + <var:A0$ into $ <var:q>$ . This command takes the precondition $ \{ <var:D> = <var:Q> \land <var:A0> = <nat:8> \land <var:q> = <nat:1> \cdot <var:Q> \} $ toward the postcondition $ \{ <var:D> = <var:Q> \land <var:q> = <nat:1> \cdot <var:Q> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:8> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:D> ; <var:q> := <var:A1> ; <var:q> := <var:q> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:D> = <var:Q> }} <def:poly> {{ <var:q> = <nat:1> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:A0> = <nat:8> /\ <var:q> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:q> = <nat:1> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 