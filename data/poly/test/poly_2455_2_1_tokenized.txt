\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:9> ; <var:u> := <var:N0> \end{verbatim} Assume that $ <var:Q> = <var:t> $ , given all $ <var:t> \in \mathbb{N} $ , before the evaluation of our list of instructions , it holds that $ <var:u> = <nat:9> $ . \end{theorem} \begin{proof} Let this decorated program . \begin{eqnarray} \{ <var:Q> = <var:t> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:Q> = <var:t> \land <var:N0> = <nat:9> \} \\ <var:u> := <var:N0> \\ \{ <var:Q> = <var:t> \land <var:u> = <nat:9> \} \end{eqnarray} Applying standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Q> = <var:t> }} <var:N0> := <nat:9> ; <var:u> := <var:N0> {{ <var:u> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:u> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 