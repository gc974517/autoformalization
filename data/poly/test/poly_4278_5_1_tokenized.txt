\begin{document} \begin{theorem} We define the following program in \emph{Imp} as \begin{verbatim} <var:s1> := <var:E> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:6> ; <var:j> := <var:s1> <var:j> := <var:j> + <var:s0> \end{verbatim} Allow it to hold that $ <var:E> = <var:l> $ --- for positive numbers $ <var:l> $ --- prior to the execution of the program it holds that we see $ <var:j> = <nat:6> \cdot <var:l> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:E> = <var:l> \} \\ <var:s1> := <var:E> ; \\ \{ <var:E> = <var:l> \land <var:s1> = <var:l> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:E> = <var:l> \land <var:s1> = <var:l> \land <var:s0> = <nat:4> \} \\ <var:s1> := <var:s1> * <nat:6> ; \\ \{ <var:E> = <var:l> \land <var:s1> = <nat:6> * <var:l> \land <var:s0> = <nat:4> \} \\ <var:j> := <var:s1> \\ \{ <var:E> = <var:l> \land <var:s0> = <nat:4> \land <var:j> = <nat:6> * <var:l> \} \\ <var:j> := <var:j> + <var:s0> \\ \{ <var:E> = <var:l> \land <var:j> = <nat:6> * <var:l> + <nat:4> \} \end{eqnarray} Given the preceding argument , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:E> = <var:l> }} <var:s1> := <var:E> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:6> ; <var:j> := <var:s1> <var:j> := <var:j> + <var:s0> {{ <var:j> = <nat:6> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:s1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:s1> = <var:l> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:s1> = <nat:6> * <var:l> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:s0> = <nat:4> /\ <var:j> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:j> = <nat:6> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 