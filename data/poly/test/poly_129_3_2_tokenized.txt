\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:x> := <nat:4> ; <var:x> := <nat:2> + <var:x> * <var:F> ; <var:x> := <nat:1> + <var:x> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Allowing for any $ <var:w> \in \mathbb{N} $ it to be that $ <var:F> = <var:w> $ before the evaluation of our series of instructions it follows that we have $ <var:x> = <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:1> $ once list of instructions terminates . \end{theorem} \begin{proof} Notice this decorated code segment . \begin{eqnarray} \{ <var:F> = <var:w> \} \\ <var:x> := <nat:4> ; \\ \{ <var:F> = <var:w> \land <var:x> = <nat:4> \} \\ <var:x> := <nat:2> + <var:x> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:x> = <nat:4> \cdot <var:w> + <nat:2> \} \\ <var:x> := <nat:1> + <var:x> * <var:F> \\ \{ <var:F> = <var:w> \land <var:x> = <nat:4> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:4> ; <var:x> := <nat:2> + <var:x> * <var:F> ; <var:x> := <nat:1> + <var:x> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <def:poly> {{ <var:x> = <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:x> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:x> = <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:x> = <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 