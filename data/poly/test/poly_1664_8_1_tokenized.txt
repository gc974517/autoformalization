\begin{document} \begin{theorem} Define the following segment of code as \begin{verbatim} <var:m1> := <var:t> ; <var:m2> := <var:m1> * <var:t> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:7> ; <var:m2> := <var:m2> * <nat:4> ; <var:x> := <var:m2> <var:x> := <var:x> + <var:m1> <var:x> := <var:x> + <var:m0> \end{verbatim} Given it to hold that $ <var:t> = <var:S> $ prior to the evaluation of the code segment then we see $ <var:x> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:7> \cdot <var:S> + <nat:9> $ . \end{theorem} \begin{proof} The argument for this list of commands is given by standard Hoare reasoning . Taking another step toward the proceeding bits of codeseen in our code segment , \begin{verbatim} { <var:t> = <var:S> } <var:m1> := <var:t> { <var:t> = <var:S> \land <var:m1> = <var:S> } { <var:t> = <var:S> \land <var:m1> = <var:S> } <var:m2> := <var:m1> * <var:t> { <var:t> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> } { <var:t> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> } <var:m0> := <nat:9> { <var:t> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> \land <var:m0> = <nat:9> } { <var:t> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> \land <var:m0> = <nat:9> } <var:m1> := <var:m1> * <nat:7> { <var:t> = <var:S> \land <var:m1> = <nat:7> * <var:S> \land <var:m2> = <var:S> ^ <nat:2> \land <var:m0> = <nat:9> } { <var:t> = <var:S> \land <var:m1> = <nat:7> * <var:S> \land <var:m2> = <var:S> ^ <nat:2> \land <var:m0> = <nat:9> } <var:m2> := <var:m2> * <nat:4> { <var:t> = <var:S> \land <var:m1> = <nat:7> * <var:S> \land <var:m2> = <nat:4> * <var:S> ^ <nat:2> \land <var:m0> = <nat:9> } \end{verbatim} This is given through the variable assignmet law in usual Hoare reasoning . Advancing to the next step , we see \begin{verbatim} { <var:t> = <var:S> } <var:m1> := <var:t> { <var:t> = <var:S> \land <var:m1> = <var:S> } { <var:t> = <var:S> \land <var:m1> = <var:S> } <var:m2> := <var:m1> * <var:t> { <var:t> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> } \end{verbatim} Moving on to the subsequent bit of code contained in the series of instructions , \begin{verbatim} { <var:t> = <var:S> } <var:m1> := <var:t> { <var:t> = <var:S> \land <var:m1> = <var:S> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:t> = <var:S> }} <var:m1> := <var:t> ; <var:m2> := <var:m1> * <var:t> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:7> ; <var:m2> := <var:m2> * <nat:4> ; <var:x> := <var:m2> <var:x> := <var:x> + <var:m1> <var:x> := <var:x> + <var:m0> {{ <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:m1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:m1> = <var:S> /\ <var:m2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:m1> = <var:S> /\ <var:m2> = <var:S> ^ <nat:2> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:m1> = <nat:7> * <var:S> /\ <var:m2> = <var:S> ^ <nat:2> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:m1> = <nat:7> * <var:S> /\ <var:m2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:m1> = <nat:7> * <var:S> /\ <var:m0> = <nat:9> /\ <var:x> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:m0> = <nat:9> /\ <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 