\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z> := <nat:3> ; <var:z> := <var:z> * <var:M> ; <var:z> := <nat:4> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> ; <var:z> := <var:z> * <var:M> ; <var:z> := <nat:4> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Assume it to hold that $ <var:M> = <var:r> $ ( assuming some natural numbers $ <var:r> $ ) ahead of executing the set of instructions then we have $ <var:z> = <nat:3> \cdot <var:r> ^ <nat:6> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:2> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> + <nat:2> $ after set of instructions has finished . \end{theorem} \begin{proof} Applying usual Hoare logic returns : \begin{eqnarray} \{ <var:M> = <var:r> \} \\ <var:z> := <nat:3> ; \\ \{ <var:M> = <var:r> \land <var:z> = <nat:3> \} \\ <var:z> := <var:z> * <var:M> ; \\ \{ <var:M> = <var:r> \land <var:z> = <nat:3> * <var:r> + \} \\ <var:z> := <nat:4> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:r> \land <var:z> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> \} \\ <var:z> := <nat:2> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:r> \land <var:z> = <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:2> \} \\ <var:z> := <var:z> * <var:M> ; \\ \{ <var:M> = <var:r> \land <var:z> = <nat:3> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + \} \\ <var:z> := <nat:4> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:r> \land <var:z> = <nat:3> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:4> \} \\ <var:z> := <nat:2> + <var:z> * <var:M> \\ \{ <var:M> = <var:r> \land <var:z> = <nat:3> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:2> \} \end{eqnarray} As a result , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:3> ; <var:z> := <var:z> * <var:M> ; <var:z> := <nat:4> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> ; <var:z> := <var:z> * <var:M> ; <var:z> := <nat:4> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:M> = <var:r> }} <def:poly> {{ <var:z> = <nat:3> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:z> = <nat:3> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:z> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:z> = <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:z> = <nat:3> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:z> = <nat:3> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:z> = <nat:3> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 