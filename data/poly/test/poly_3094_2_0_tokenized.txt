\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:6> ; <var:A> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Allow it to be that $ <var:u> = <var:T> $ ahead of interpreting our code , it holds that $ <var:A> = <nat:6> $ when series of commands is done . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:u> = <var:T> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:u> = <var:T> \land <var:R0> = <nat:6> \} \\ <var:A> := <var:R0> \\ \{ <var:u> = <var:T> \land <var:A> = <nat:6> \} \end{eqnarray} Considering the above , the series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:A> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:u> = <var:T> }} <def:poly> {{ <var:A> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:A> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 