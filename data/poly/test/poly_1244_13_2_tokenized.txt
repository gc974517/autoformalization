\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:y> := <nat:1> ; <var:y> := <var:y> * <var:U> ; <var:y> := <nat:1> + <var:y> * <var:U> ; <var:y> := <nat:4> + <var:y> * <var:U> ; <var:y> := <nat:2> + <var:y> * <var:U> ; <var:y> := <var:y> * <var:U> ; <var:y> := <nat:4> + <var:y> * <var:U> ; <var:y> := <nat:2> + <var:y> * <var:U> ; <var:y> := <nat:3> + <var:y> * <var:U> ; <var:y> := <nat:1> + <var:y> * <var:U> ; <var:y> := <nat:1> + <var:y> * <var:U> ; <var:y> := <nat:3> + <var:y> * <var:U> ; <var:y> := <nat:4> + <var:y> * <var:U> \end{verbatim} Assuming $ <var:U> = <var:J> $ prior to evaluating the series of commands it holds that we have $ <var:y> = <nat:1> \times <var:J> ^ <nat:12> + <nat:1> \times <var:J> ^ <nat:10> + <nat:4> \times <var:J> ^ <nat:9> + <nat:2> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:6> + <nat:2> \times <var:J> ^ <nat:5> + <nat:3> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:4> $ when set of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be shown with usual Hoare reasoning . Further , \begin{eqnarray} \{ <var:U> = <var:J> \} \, <var:y> := <nat:1> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \} \, <var:y> := <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> + \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> + \} \, <var:y> := <nat:1> + <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:1> \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:1> \} \, <var:y> := <nat:4> + <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> + <nat:4> \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> + <nat:4> \} \, <var:y> := <nat:2> + <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:2> \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:2> \} \, <var:y> := <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:5> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:5> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + \} \, <var:y> := <nat:4> + <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:6> + <nat:1> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \} \end{eqnarray} Looking at the upcoming commands seen in our set of instructions , \begin{eqnarray} \{ <var:U> = <var:J> \} \, <var:y> := <nat:1> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \} \, <var:y> := <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> + \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> + \} \, <var:y> := <nat:1> + <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:1> \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:1> \} \, <var:y> := <nat:4> + <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> + <nat:4> \} \\ \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> + <nat:4> \} \, <var:y> := <nat:2> + <var:y> * <var:U> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:2> \} \end{eqnarray} This is deduced with the assignment rule defined in Hoare reasoning . Taking another step toward the next piece of code in our set of commands , we see \begin{eqnarray} \{ <var:U> = <var:J> \} \, <var:y> := <nat:1> \, \{ <var:U> = <var:J> \land <var:y> = <nat:1> \} \end{eqnarray} This is shown to be logically sound through the binding law found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:U> = <var:J> }} <var:y> := <nat:1> ; <var:y> := <var:y> * <var:U> ; <var:y> := <nat:1> + <var:y> * <var:U> ; <var:y> := <nat:4> + <var:y> * <var:U> ; <var:y> := <nat:2> + <var:y> * <var:U> ; <var:y> := <var:y> * <var:U> ; <var:y> := <nat:4> + <var:y> * <var:U> ; <var:y> := <nat:2> + <var:y> * <var:U> ; <var:y> := <nat:3> + <var:y> * <var:U> ; <var:y> := <nat:1> + <var:y> * <var:U> ; <var:y> := <nat:1> + <var:y> * <var:U> ; <var:y> := <nat:3> + <var:y> * <var:U> ; <var:y> := <nat:4> + <var:y> * <var:U> {{ <var:y> = <nat:1> * <var:J> ^ <nat:12> + <nat:1> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:9> + <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:11> + <nat:1> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:y> = <nat:1> * <var:J> ^ <nat:12> + <nat:1> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:9> + <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 