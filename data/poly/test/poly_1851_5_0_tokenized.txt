\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:6> ; <var:h1> := <nat:7> ; <var:h1> := <var:h1> * <var:W> ; <var:G> := <var:h1> ; <var:G> := <var:G> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:W> = <var:Z> $ ( for every positive numbers $ <var:Z> $ ) prior to evaluating the list of commands , it follows that we see $ <var:G> = <nat:7> \times <var:Z> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for the list of commands can be done through standard Hoare logic . Moving on to the following piece of code seen in our program , the assignment statement letting $ <nat:6> $ as $ <var:h0>$ . This code advances the precondition $ \{ <var:W> = <var:Z> \} $ toward the condition $ \{ <var:W> = <var:Z> \land <var:h0> = <nat:6> \} $ . Moving forward , we see the variable binding statement yielding $ <nat:7> $ toward $ <var:h1>$ . This command advances the precondition $ \{ <var:W> = <var:Z> \land <var:h0> = <nat:6> \} $ as the condition $ \{ <var:W> = <var:Z> \land <var:h0> = <nat:6> \land <var:h1> = <nat:7> \} $ . This is ensured through the assignment law given by usual Hoare logic . Going forward , we see the variable assignmet command \verb | <var:h1> := <var:h1> * <var:W> ; | . This redefines the precondition $ \{ <var:W> = <var:Z> \land <var:h0> = <nat:6> \land <var:h1> = <nat:7> \} $ to the postcondition $ \{ <var:W> = <var:Z> \land <var:h0> = <nat:6> \land <var:h1> = <nat:7> \times <var:Z> \} $ . Observing the next line found in the code segment , we see the binding statement binding $ <var:h1> $ toward $ <var:G>$ . This command advances $ \{ <var:W> = <var:Z> \land <var:h0> = <nat:6> \land <var:h1> = <nat:7> \times <var:Z> \} $ as $ \{ <var:W> = <var:Z> \land <var:h0> = <nat:6> \land <var:G> = <nat:7> \times <var:Z> \} $ . This is deduced through the assignment inference rule obtained from standard Hoare logic . Further , we see the variable assignmet command assigning $ <var:G> + <var:h0$ as $ <var:G>$ . This moves the precondition $ \{ <var:W> = <var:Z> \land <var:h0> = <nat:6> \land <var:G> = <nat:7> \times <var:Z> \} $ as $ \{ <var:W> = <var:Z> \land <var:G> = <nat:7> \times <var:Z> + <nat:6> \} $ . This is deduced with the assignment rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:6> ; <var:h1> := <nat:7> ; <var:h1> := <var:h1> * <var:W> ; <var:G> := <var:h1> ; <var:G> := <var:G> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:W> = <var:Z> }} <def:poly> {{ <var:G> = <nat:7> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:h0> = <nat:6> /\ <var:G> = <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:G> = <nat:7> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 