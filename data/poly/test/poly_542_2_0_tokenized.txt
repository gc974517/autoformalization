\begin{document} \begin{theorem} Let the following code in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:1> ; <var:B> := <var:O0> \end{verbatim} Allow it to hold that $ <var:n> = <var:Z> $ ( given every $ <var:Z> $ ) prior to running the set of commands it must be that we have $ <var:B> = <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare techniques results in : \begin{eqnarray} \{ <var:n> = <var:Z> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:n> = <var:Z> \land <var:O0> = <nat:1> \} \\ <var:B> := <var:O0> \\ \{ <var:n> = <var:Z> \land <var:B> = <nat:1> \} \end{eqnarray} Hence , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <var:O0> := <nat:1> ; <var:B> := <var:O0> {{ <var:B> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:B> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 