\begin{document} \begin{theorem} Take the following series of instructions as follows \begin{verbatim} <var:P0> := <nat:2> ; <var:w> := <var:P0> \end{verbatim} Given it to be that $ <var:M> = <var:N> $ prior to evaluating this segment of code it must be that $ <var:w> = <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:M> = <var:N> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:M> = <var:N> \land <var:P0> = <nat:2> \} \\ <var:w> := <var:P0> \\ \{ <var:M> = <var:N> \land <var:w> = <nat:2> \} \end{eqnarray} Considering the preceding argument , this series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:M> = <var:N> }} <var:P0> := <nat:2> ; <var:w> := <var:P0> {{ <var:w> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:w> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 