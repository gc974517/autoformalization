\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:z> ; <var:W> := <var:c1> ; <var:W> := <var:W> + <var:c0> \end{verbatim} Allow it to be that $ <var:z> = <var:w> $ before the execution of the program , it must be that $ <var:W> = <nat:2> \times <var:w> + <nat:3> $ when series of commands has finished . \end{theorem} \begin{proof} Proving correctness for our program can be given through Hoare logic . Moving on to the next step , we have the variable update statement defining $ <nat:3> $ to $ <var:c0>$ . This moves $ \{ <var:z> = <var:w> \} $ toward $ \{ <var:z> = <var:w> \land <var:c0> = <nat:3> \} $ . This is deduced with the assignment scheme given by Hoare logic . Next , we have the variable assignmet code defining $ <nat:2> $ as $ <var:c1>$ . This code takes the precondition $ \{ <var:z> = <var:w> \land <var:c0> = <nat:3> \} $ as $ \{ <var:z> = <var:w> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \} $ . This is given through the assignment law given by standard Hoare logic . Taking another step toward the following bit of code seen in the code segment , the statement defining $ <var:c1> * <var:z> $ toward $ <var:c1>$ . This advances $ \{ <var:z> = <var:w> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \} $ to the condition $ \{ <var:z> = <var:w> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> * <var:w> \} $ . This is deduced using the assignment scheme from Hoare reasoning . Advancing on , we have the variable update statement \verb | <var:W> := <var:c1> ; | . This code forwards $ \{ <var:z> = <var:w> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> * <var:w> \} $ into the postcondition $ \{ <var:z> = <var:w> \land <var:c0> = <nat:3> \land <var:W> = <nat:2> * <var:w> \} $ . This is given using the assignment rule given by usual Hoare logic . Moving forward , we have the assignment line yielding $ <var:W> + <var:c0$ as $ <var:W>$ . This advances $ \{ <var:z> = <var:w> \land <var:c0> = <nat:3> \land <var:W> = <nat:2> * <var:w> \} $ as the condition $ \{ <var:z> = <var:w> \land <var:W> = <nat:2> * <var:w> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:z> = <var:w> }} <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:z> ; <var:W> := <var:c1> ; <var:W> := <var:W> + <var:c0> {{ <var:W> = <nat:2> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:c0> = <nat:3> /\ <var:W> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:W> = <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 