\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:F> ; <var:C2> := <var:C1> * <var:F> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:5> ; <var:C2> := <var:C2> * <nat:4> ; <var:W> := <var:C2> <var:W> := <var:W> + <var:C1> <var:W> := <var:W> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:F> = <var:P> $ before executing this set of commands , it follows that we see $ <var:W> = <nat:4> \times <var:P> ^ <nat:2> + <nat:5> \times <var:P> + <nat:2> $ when list of commands has terminated . \end{theorem} \begin{proof} Using standard Hoare logic yields : \begin{eqnarray} \{ <var:F> = <var:P> \} \\ <var:C1> := <var:F> ; \\ \{ <var:F> = <var:P> \land <var:C1> = <var:P> \} \\ <var:C2> := <var:C1> * <var:F> ; \\ \{ <var:F> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:F> = <var:P> \land <var:C1> = <var:P> \land <var:C2> = <var:P> ^ <nat:2> \land <var:C0> = <nat:2> \} \\ <var:C1> := <var:C1> * <nat:5> ; \\ \{ <var:F> = <var:P> \land <var:C1> = <nat:5> \cdot <var:P> \land <var:C2> = <var:P> ^ <nat:2> \land <var:C0> = <nat:2> \} \\ <var:C2> := <var:C2> * <nat:4> ; \\ \{ <var:F> = <var:P> \land <var:C1> = <nat:5> \cdot <var:P> \land <var:C2> = <nat:4> \cdot <var:P> ^ <nat:2> \land <var:C0> = <nat:2> \} \\ <var:W> := <var:C2> \\ \{ <var:F> = <var:P> \land <var:C1> = <nat:5> \cdot <var:P> \land <var:C0> = <nat:2> \land <var:W> = <nat:4> \cdot <var:P> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:C1> \\ \{ <var:F> = <var:P> \land <var:C0> = <nat:2> \land <var:W> = <nat:4> \cdot <var:P> ^ <nat:2> + <nat:5> \cdot <var:P> \} \\ <var:W> := <var:W> + <var:C0> \\ \{ <var:F> = <var:P> \land <var:W> = <nat:4> \cdot <var:P> ^ <nat:2> + <nat:5> \cdot <var:P> + <nat:2> \} \end{eqnarray} Given the above , our set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C1> := <var:F> ; <var:C2> := <var:C1> * <var:F> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:5> ; <var:C2> := <var:C2> * <nat:4> ; <var:W> := <var:C2> <var:W> := <var:W> + <var:C1> <var:W> := <var:W> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:F> = <var:P> }} <def:poly> {{ <var:W> = <nat:4> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:C1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:C1> = <var:P> /\ <var:C2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:C1> = <var:P> /\ <var:C2> = <var:P> ^ <nat:2> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:C1> = <nat:5> * <var:P> /\ <var:C2> = <var:P> ^ <nat:2> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:C1> = <nat:5> * <var:P> /\ <var:C2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:C1> = <nat:5> * <var:P> /\ <var:C0> = <nat:2> /\ <var:W> = <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:C0> = <nat:2> /\ <var:W> = <nat:4> * <var:P> ^ <nat:2> + <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:W> = <nat:4> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 