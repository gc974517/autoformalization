\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:4> ; <var:I> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Allow $ <var:K> = <var:p> $ ahead of evaluating the series of instructions , it must be that we have $ <var:I> = <nat:4> $ after segment of code is done . \end{theorem} \begin{proof} The flow of logic for our set of commands can be shown by typical Hoare logic . Moving forward , the assignment statement yielding $ <nat:4> $ to $ <var:B0>$ . This code redefines the precondition $ \{ <var:K> = <var:p> \} $ as the condition $ \{ <var:K> = <var:p> \land <var:B0> = <nat:4> \} $ . Shifting focus toward the proceeding line of code seen in the program , we have the assignment code defining $ <var:B0$ to $ <var:I>$ . This moves the condition $ \{ <var:K> = <var:p> \land <var:B0> = <nat:4> \} $ to the postcondition $ \{ <var:K> = <var:p> \land <var:I> = <nat:4> \} $ . This is given with the assignment scheme found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:4> ; <var:I> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:K> = <var:p> }} <def:poly> {{ <var:I> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:p> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:p> /\ <var:I> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 