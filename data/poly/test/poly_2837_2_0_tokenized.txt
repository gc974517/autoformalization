\begin{document} \begin{theorem} Take the following code segment such that \begin{verbatim} <var:T0> := <nat:4> ; <var:H> := <var:T0> \end{verbatim} Assume letting positive integer coefficients $ <var:r> $ it to hold that $ <var:a> = <var:r> $ ahead of the execution of the list of commands then we have $ <var:H> = <nat:4> $ when list of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions can be shown through usual Hoare techniques . Stepping forward , we see the variable binding command binding $ <nat:4> $ as $ <var:T0>$ . This forwards $ \{ <var:a> = <var:r> \} $ toward the condition $ \{ <var:a> = <var:r> \land <var:T0> = <nat:4> \} $ . This is shown by the assignment scheme defined in usual Hoare techniques . Advancing , we see the variable binding command assigning $ <var:T0$ into $ <var:H>$ . This command redefines $ \{ <var:a> = <var:r> \land <var:T0> = <nat:4> \} $ into the postcondition $ \{ <var:a> = <var:r> \land <var:H> = <nat:4> \} $ . This is given by the assignment scheme given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:a> = <var:r> }} <var:T0> := <nat:4> ; <var:H> := <var:T0> {{ <var:H> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:H> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 