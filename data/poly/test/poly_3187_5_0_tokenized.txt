\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:1> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:t> ; <var:R> := <var:B1> ; <var:R> := <var:R> + <var:B0> \end{verbatim} Allow that we have $ <var:t> = <var:I> $ --- for every integers $ <var:I> $ --- ahead of the evaluation of the segment of code it must be that we see $ <var:R> = <nat:1> * <var:I> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions is evident by Hoare techniques . Moving onward , we have the environment update code \verb | <var:B0> := <nat:1> ; | . This line moves the precondition $ \{ <var:t> = <var:I> \} $ to $ \{ <var:t> = <var:I> \land <var:B0> = <nat:1> \} $ . This is deduced through the assignment law given in Hoare techniques . Looking at the following piece of code seen in our code , we see the statement \verb | <var:B1> := <nat:1> ; | . This line moves the condition $ \{ <var:t> = <var:I> \land <var:B0> = <nat:1> \} $ as the postcondition $ \{ <var:t> = <var:I> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> \} $ . This is deduced through the assignment rule defined in usual Hoare logic . Moving on , we see the assignment statement \verb | <var:B1> := <var:B1> * <var:t> ; | . This forwards $ \{ <var:t> = <var:I> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> \} $ as $ \{ <var:t> = <var:I> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> \times <var:I> \} $ . Advancing , we see the environment update line giving $ <var:B1> $ as $ <var:R>$ . This command moves the precondition $ \{ <var:t> = <var:I> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> \times <var:I> \} $ into the condition $ \{ <var:t> = <var:I> \land <var:B0> = <nat:1> \land <var:R> = <nat:1> \times <var:I> \} $ . Looking at the next line found in the program , we see the assignment line binding $ <var:R> + <var:B0$ to $ <var:R>$ . This command redefines $ \{ <var:t> = <var:I> \land <var:B0> = <nat:1> \land <var:R> = <nat:1> \times <var:I> \} $ into $ \{ <var:t> = <var:I> \land <var:R> = <nat:1> \times <var:I> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:t> = <var:I> }} <var:B0> := <nat:1> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:t> ; <var:R> := <var:B1> ; <var:R> := <var:R> + <var:B0> {{ <var:R> = <nat:1> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:B0> = <nat:1> /\ <var:R> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:R> = <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 