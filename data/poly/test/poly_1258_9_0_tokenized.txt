\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:4> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:I> ; <var:q2> := <nat:5> ; <var:q2> := <var:q2> * <var:I> ; <var:q2> := <var:q2> * <var:I> ; <var:t> := <var:q2> ; <var:t> := <var:t> + <var:q1> ; <var:t> := <var:t> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:I> = <var:G> $ ahead of interpreting this list of commands then we have $ <var:t> = <nat:5> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> $ when set of instructions executes . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands can be accomplished by standard Hoare logic . Next , we have the environment update line binding $ <nat:4> $ toward $ <var:q0>$ . This transfers the precondition $ \{ <var:I> = <var:G> \} $ to the condition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \} $ . Considering the upcoming bit of code in the list of instructions , the binding command \verb | <var:q1> := <nat:2> ; | . This code forwards $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \} $ into the postcondition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule given by usual Hoare logic . Keeping momentum , we have the variable assignmet code yielding $ <var:q1> * <var:I> $ toward $ <var:q1>$ . This line redefines the precondition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> \} $ as the condition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \} $ . This is given by the assignment law of Hoare techniques . Going forward , we see the assignment statement \verb | <var:q2> := <nat:5> ; | . This advances the condition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \} $ toward $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \land <var:q2> = <nat:5> \} $ . This is known to be sound by the assignment rule defined by standard Hoare reasoning . Looking at the next statement seen in the segment of code , we have the environment update command letting $ <var:q2> * <var:I> $ to $ <var:q2>$ . This moves $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \land <var:q2> = <nat:5> \} $ to $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \land <var:q2> = <nat:5> * <var:G> \} $ . This is rigorously given with the assignment scheme from usual Hoare logic . Going to the next step , we see the assignment code letting $ <var:q2> * <var:I> $ toward $ <var:q2>$ . This command moves the condition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \land <var:q2> = <nat:5> * <var:G> \} $ to the condition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \land <var:q2> = <nat:5> * <var:G> ^ <nat:2> \} $ . This is rigorously given using the assignment law defined in standard Hoare techniques . Observing the upcoming bit of code contained in our code segment , the environment update command \verb | <var:t> := <var:q2> ; | . This command redefines the precondition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \land <var:q2> = <nat:5> * <var:G> ^ <nat:2> \} $ as the postcondition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \land <var:t> = <nat:5> * <var:G> ^ <nat:2> \} $ . This is deduced with the assignment rule in Hoare logic . Further , the binding statement \verb | <var:t> := <var:t> + <var:q1> ; | . This redefines the precondition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:G> \land <var:t> = <nat:5> * <var:G> ^ <nat:2> \} $ as the condition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:t> = <nat:5> * <var:G> ^ <nat:2> + <nat:2> * <var:G> \} $ . Observing the subsequent line of code in the set of instructions , the statement \verb | <var:t> := <var:t> + <var:q0> | . This redefines the precondition $ \{ <var:I> = <var:G> \land <var:q0> = <nat:4> \land <var:t> = <nat:5> * <var:G> ^ <nat:2> + <nat:2> * <var:G> \} $ to the condition $ \{ <var:I> = <var:G> \land <var:t> = <nat:5> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:I> ; <var:q2> := <nat:5> ; <var:q2> := <var:q2> * <var:I> ; <var:q2> := <var:q2> * <var:I> ; <var:t> := <var:q2> ; <var:t> := <var:t> + <var:q1> ; <var:t> := <var:t> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:I> = <var:G> }} <def:poly> {{ <var:t> = <nat:5> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:G> /\ <var:q2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:G> /\ <var:q2> = <nat:5> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:G> /\ <var:q2> = <nat:5> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:G> /\ <var:t> = <nat:5> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:q0> = <nat:4> /\ <var:t> = <nat:5> * <var:G> ^ <nat:2> + <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:G> /\ <var:t> = <nat:5> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 