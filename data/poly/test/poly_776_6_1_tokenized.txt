\begin{document} \begin{theorem} Define the following code in \emph{Imp} : \begin{verbatim} <var:N1> := <var:s> ; <var:N2> := <var:N1> * <var:s> ; <var:N0> := <nat:9> ; <var:N2> := <var:N2> * <nat:2> ; <var:e> := <var:N2> <var:e> := <var:e> + <var:N0> \end{verbatim} Given it to hold that $ <var:s> = <var:K> $ ahead of executing our list of instructions it follows that we see $ <var:e> = <nat:2> \cdot <var:K> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare logic results in : \begin{eqnarray} \{ <var:s> = <var:K> \} \\ <var:N1> := <var:s> ; \\ \{ <var:s> = <var:K> \land <var:N1> = <var:K> \} \\ <var:N2> := <var:N1> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:s> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> \land <var:N0> = <nat:9> \} \\ <var:N2> := <var:N2> * <nat:2> ; \\ \{ <var:s> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:N0> = <nat:9> \} \\ <var:e> := <var:N2> \\ \{ <var:s> = <var:K> \land <var:N1> = <var:K> \land <var:N0> = <nat:9> \land <var:e> = <nat:2> \cdot <var:K> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:N0> \\ \{ <var:s> = <var:K> \land <var:e> = <nat:2> \cdot <var:K> ^ <nat:2> + <nat:9> \} \end{eqnarray} Considering the above , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:s> = <var:K> }} <var:N1> := <var:s> ; <var:N2> := <var:N1> * <var:s> ; <var:N0> := <nat:9> ; <var:N2> := <var:N2> * <nat:2> ; <var:e> := <var:N2> <var:e> := <var:e> + <var:N0> {{ <var:e> = <nat:2> * <var:K> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:N1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:N1> = <var:K> /\ <var:N2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:N1> = <var:K> /\ <var:N2> = <var:K> ^ <nat:2> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:N1> = <var:K> /\ <var:N2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:N1> = <var:K> /\ <var:N0> = <nat:9> /\ <var:e> = <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:e> = <nat:2> * <var:K> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 