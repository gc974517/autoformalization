\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:6> ; <var:Z2> := <nat:5> ; <var:Z2> := <var:Z2> * <var:B> ; <var:Z2> := <var:Z2> * <var:B> ; <var:Z3> := <nat:3> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Z3> := <var:Z3> * <var:B> ; <var:P> := <var:Z3> ; <var:P> := <var:P> + <var:Z2> ; <var:P> := <var:P> + <var:Z0> \end{verbatim} Allowing , taking natural numbers $ <var:N> $ , $ <var:B> = <var:N> $ before the execution of the segment of code , it holds that we have $ <var:P> = <nat:3> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of the segment of code can be seen by this decorated set of instructions . \begin{eqnarray} \{ <var:B> = <var:N> \} \\ <var:Z0> := <nat:6> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \} \\ <var:Z2> := <nat:5> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:Z2> = <nat:5> \} \\ <var:Z2> := <var:Z2> * <var:B> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:Z2> = <nat:5> \times <var:N> \} \\ <var:Z2> := <var:Z2> * <var:B> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:Z2> = <nat:5> \times <var:N> ^ <nat:2> \} \\ <var:Z3> := <nat:3> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:Z2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:3> \} \\ <var:Z3> := <var:Z3> * <var:B> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:Z2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:N> \} \\ <var:Z3> := <var:Z3> * <var:B> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:Z2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:N> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:B> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:Z2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:N> ^ <nat:3> \} \\ <var:P> := <var:Z3> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:Z2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:P> = <nat:3> \times <var:N> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:Z2> ; \\ \{ <var:B> = <var:N> \land <var:Z0> = <nat:6> \land <var:P> = <nat:3> \times <var:N> ^ <nat:3> + <nat:5> \times <var:N> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:Z0> \\ \{ <var:B> = <var:N> \land <var:P> = <nat:3> \times <var:N> ^ <nat:3> + <nat:5> \times <var:N> ^ <nat:2> + <nat:6> \} \end{eqnarray} Applying standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:B> = <var:N> }} <var:Z0> := <nat:6> ; <var:Z2> := <nat:5> ; <var:Z2> := <var:Z2> * <var:B> ; <var:Z2> := <var:Z2> * <var:B> ; <var:Z3> := <nat:3> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Z3> := <var:Z3> * <var:B> ; <var:Z3> := <var:Z3> * <var:B> ; <var:P> := <var:Z3> ; <var:P> := <var:P> + <var:Z2> ; <var:P> := <var:P> + <var:Z0> {{ <var:P> = <nat:3> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:Z2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:Z2> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:Z2> = <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:Z2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:Z2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:Z2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:Z2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:Z2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:P> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:Z0> = <nat:6> /\ <var:P> = <nat:3> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:P> = <nat:3> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 