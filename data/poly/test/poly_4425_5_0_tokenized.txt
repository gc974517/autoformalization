\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:5> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:g> ; <var:H> := <var:l1> ; <var:H> := <var:H> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- for every positive numbers $ <var:R> $ --- that $ <var:g> = <var:R> $ before executing our program , it must be that we see $ <var:H> = <nat:4> * <var:R> + <nat:5> $ when segment of code exits . \end{theorem} \begin{proof} Using usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:g> = <var:R> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:g> = <var:R> \land <var:l0> = <nat:5> \} \\ <var:l1> := <nat:4> ; \\ \{ <var:g> = <var:R> \land <var:l0> = <nat:5> \land <var:l1> = <nat:4> \} \end{eqnarray} Advancing the evaluation of the program gives us : \begin{eqnarray} <var:l1> := <var:l1> * <var:g> ; \\ \{ <var:g> = <var:R> \land <var:l0> = <nat:5> \land <var:l1> = <nat:4> \cdot <var:R> \} \\ <var:H> := <var:l1> ; \\ \{ <var:g> = <var:R> \land <var:l0> = <nat:5> \land <var:H> = <nat:4> \cdot <var:R> \} \\ <var:H> := <var:H> + <var:l0> \\ \{ <var:g> = <var:R> \land <var:H> = <nat:4> \cdot <var:R> + <nat:5> \} \end{eqnarray} As a result , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:5> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:g> ; <var:H> := <var:l1> ; <var:H> := <var:H> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:g> = <var:R> }} <def:poly> {{ <var:H> = <nat:4> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:l0> = <nat:5> /\ <var:H> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:H> = <nat:4> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 