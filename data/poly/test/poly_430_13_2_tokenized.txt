\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} : \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:i> ; <var:b> := <nat:1> + <var:b> * <var:i> ; <var:b> := <nat:3> + <var:b> * <var:i> ; <var:b> := <nat:4> + <var:b> * <var:i> ; <var:b> := <nat:2> + <var:b> * <var:i> ; <var:b> := <var:b> * <var:i> ; <var:b> := <nat:2> + <var:b> * <var:i> ; <var:b> := <var:b> * <var:i> ; <var:b> := <nat:2> + <var:b> * <var:i> ; <var:b> := <nat:4> + <var:b> * <var:i> ; <var:b> := <nat:3> + <var:b> * <var:i> ; <var:b> := <nat:1> + <var:b> * <var:i> \end{verbatim} Allow --- with some $ <var:a> $ --- that $ <var:i> = <var:a> $ prior to executing our program , it follows that $ <var:b> = <nat:3> \cdot <var:a> ^ <nat:12> + <nat:1> \cdot <var:a> ^ <nat:11> + <nat:1> \cdot <var:a> ^ <nat:10> + <nat:3> \cdot <var:a> ^ <nat:9> + <nat:4> \cdot <var:a> ^ <nat:8> + <nat:2> \cdot <var:a> ^ <nat:7> + <nat:2> \cdot <var:a> ^ <nat:5> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:1> $ after list of commands terminates . \end{theorem} \begin{proof} The course of logic for our set of instructions can be done through standard Hoare techniques . Moving on to the subsequent piece of code seen in our code , we see the binding line \verb | <var:b> := <nat:3> ; | . This command redefines $ \{ <var:i> = <var:a> \} $ as $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> \} $ . Taking a look at the subsequent statement in the series of commands , we see the variable assignmet code \verb | <var:b> := <nat:1> + <var:b> * <var:i> ; | . This transfers $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> \} $ toward $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> + <nat:1> \} $ . This is shown to be logically sound using the assignment inference rule given in usual Hoare reasoning . Jumping to the following line of code seen in our set of commands , the variable binding line \verb | <var:b> := <nat:1> + <var:b> * <var:i> ; | . This line moves $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> + <nat:1> \} $ to $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:1> \} $ . This is shown using the assignment law defined in standard Hoare logic . Moving on to the following statement found in the set of commands , the line binding $ <nat:3> + <var:b> * <var:i> $ as $ <var:b>$ . This statement takes $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:1> \} $ to the postcondition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> \} $ . Jumping to the following line of code in our code segment , the variable update statement yielding $ <nat:4> + <var:b> * <var:i> $ toward $ <var:b>$ . This advances the condition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> \} $ to the postcondition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> \} $ . Following , the variable update command assigning $ <nat:2> + <var:b> * <var:i> $ to $ <var:b>$ . This transfers $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> \} $ toward $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> \} $ . This is sound through the assignment inference rule given by typical Hoare techniques . Moving on to the upcoming step found in the list of commands , we see the variable update line defining $ <var:b> * <var:i> $ as $ <var:b>$ . This line takes the precondition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> \} $ toward the condition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + \} $ . This is sound by the assignment rule found in standard Hoare reasoning . Immediately after , we see the binding line \verb | <var:b> := <nat:2> + <var:b> * <var:i> ; | . This moves $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + \} $ toward the condition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> \} $ . Taking a look at the next bit of code seen in the set of instructions , the environment update line letting $ <var:b> * <var:i> $ toward $ <var:b>$ . This transfers the precondition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> \} $ as $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + \} $ . Moving onward , we see the assignment statement \verb | <var:b> := <nat:2> + <var:b> * <var:i> ; | . This statement forwards the condition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + \} $ as the condition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:9> + <nat:1> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> \} $ . This is given by the assignment rule defined in typical Hoare techniques . Shifting focus toward the next piece of code contained in our list of instructions , the statement \verb | <var:b> := <nat:4> + <var:b> * <var:i> ; | . This moves the precondition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:9> + <nat:1> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> \} $ toward the condition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:10> + <nat:1> * <var:a> ^ <nat:9> + <nat:1> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:4> \} $ . Moving forward , the line \verb | <var:b> := <nat:3> + <var:b> * <var:i> ; | . This takes $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:10> + <nat:1> * <var:a> ^ <nat:9> + <nat:1> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:4> \} $ toward $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:11> + <nat:1> * <var:a> ^ <nat:10> + <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:4> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> \} $ . This is known to be sound with the assignment rule given in usual Hoare logic . Paying attention to the upcoming piece of code contained in the code segment , the assignment command \verb | <var:b> := <nat:1> + <var:b> * <var:i> | . This line transfers the condition $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:11> + <nat:1> * <var:a> ^ <nat:10> + <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:4> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> \} $ toward $ \{ <var:i> = <var:a> \land <var:b> = <nat:3> * <var:a> ^ <nat:12> + <nat:1> * <var:a> ^ <nat:11> + <nat:1> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:4> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:i> = <var:a> }} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:i> ; <var:b> := <nat:1> + <var:b> * <var:i> ; <var:b> := <nat:3> + <var:b> * <var:i> ; <var:b> := <nat:4> + <var:b> * <var:i> ; <var:b> := <nat:2> + <var:b> * <var:i> ; <var:b> := <var:b> * <var:i> ; <var:b> := <nat:2> + <var:b> * <var:i> ; <var:b> := <var:b> * <var:i> ; <var:b> := <nat:2> + <var:b> * <var:i> ; <var:b> := <nat:4> + <var:b> * <var:i> ; <var:b> := <nat:3> + <var:b> * <var:i> ; <var:b> := <nat:1> + <var:b> * <var:i> {{ <var:b> = <nat:3> * <var:a> ^ <nat:12> + <nat:1> * <var:a> ^ <nat:11> + <nat:1> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:4> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:9> + <nat:1> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:10> + <nat:1> * <var:a> ^ <nat:9> + <nat:1> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:11> + <nat:1> * <var:a> ^ <nat:10> + <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:4> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:b> = <nat:3> * <var:a> ^ <nat:12> + <nat:1> * <var:a> ^ <nat:11> + <nat:1> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:4> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 