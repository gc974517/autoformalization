\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:Q> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:Q> ; <var:S2> := <var:S2> * <var:Q> ; <var:b> := <var:S2> ; <var:b> := <var:b> + <var:S1> ; <var:b> := <var:b> + <var:S0> \end{verbatim} Given that $ <var:Q> = <var:X> $ prior to interpreting this list of instructions , it holds that we see $ <var:b> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:4> $ when code terminates . \end{theorem} \begin{proof} The course of logic for our program is evident with standard Hoare logic . Paying attention to the following step found in our set of instructions , we see the environment update code \verb | <var:S0> := <nat:4> ; | . This statement forwards $ \{ <var:Q> = <var:X> \} $ to $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \} $ . Moving on to the next step , the binding statement \verb | <var:S1> := <nat:3> ; | . This forwards the precondition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \} $ into the condition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \} $ . This is ensured using the assignment inference rule obtained from usual Hoare reasoning . After , we see the variable assignmet line assigning $ <var:S1> * <var:Q> $ to $ <var:S1>$ . This command takes $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> \} $ into the condition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \} $ . This is deduced using the assignment scheme given in standard Hoare techniques . Next , we see the variable binding code \verb | <var:S2> := <nat:3> ; | . This line redefines the condition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \} $ as the condition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \land <var:S2> = <nat:3> \} $ . This is shown by the assignment scheme given in standard Hoare techniques . Paying attention to the subsequent bit of code found in our list of instructions , we have the line defining $ <var:S2> * <var:Q> $ as $ <var:S2>$ . This command forwards the precondition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \land <var:S2> = <nat:3> \} $ toward the condition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \land <var:S2> = <nat:3> * <var:X> \} $ . Taking another step toward the subsequent step contained in our series of commands , we have the variable binding line \verb | <var:S2> := <var:S2> * <var:Q> ; | . This code forwards the precondition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \land <var:S2> = <nat:3> * <var:X> \} $ to the condition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \land <var:S2> = <nat:3> * <var:X> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule in typical Hoare techniques . Moving forward to the next line found in our set of commands , we have the environment update code \verb | <var:b> := <var:S2> ; | . This transfers the precondition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \land <var:S2> = <nat:3> * <var:X> ^ <nat:2> \} $ into $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \land <var:b> = <nat:3> * <var:X> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule given in usual Hoare techniques . Considering the proceeding statement seen in our set of commands , we have the assignment command binding $ <var:b> + <var:S1> $ to $ <var:b>$ . This redefines $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:S1> = <nat:3> * <var:X> \land <var:b> = <nat:3> * <var:X> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:b> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> \} $ . This is known to be sound through the assignment rule given by usual Hoare reasoning . Taking another step toward the following step contained in the code , we have the assignment statement defining $ <var:b> + <var:S0$ to $ <var:b>$ . This code advances the condition $ \{ <var:Q> = <var:X> \land <var:S0> = <nat:4> \land <var:b> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> \} $ into $ \{ <var:Q> = <var:X> \land <var:b> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Q> = <var:X> }} <var:S0> := <nat:4> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:Q> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:Q> ; <var:S2> := <var:S2> * <var:Q> ; <var:b> := <var:S2> ; <var:b> := <var:b> + <var:S1> ; <var:b> := <var:b> + <var:S0> {{ <var:b> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:X> /\ <var:S2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:X> /\ <var:S2> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:X> /\ <var:S2> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:3> * <var:X> /\ <var:b> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:S0> = <nat:4> /\ <var:b> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:b> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 