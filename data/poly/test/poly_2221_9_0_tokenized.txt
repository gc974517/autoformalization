\begin{document} \begin{theorem} We define the following program as \begin{verbatim} <var:K0> := <nat:5> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:F> ; <var:K2> := <nat:8> ; <var:K2> := <var:K2> * <var:F> ; <var:K2> := <var:K2> * <var:F> ; <var:Y> := <var:K2> ; <var:Y> := <var:Y> + <var:K1> ; <var:Y> := <var:Y> + <var:K0> \end{verbatim} Allowing for integers $ <var:m> $ $ <var:F> = <var:m> $ ahead of the execution of our code it holds that we have $ <var:Y> = <nat:8> \times <var:m> ^ <nat:2> + <nat:6> \times <var:m> + <nat:5> $ . \end{theorem} \begin{proof} Applying Hoare logic produces : \begin{eqnarray} \{ <var:F> = <var:m> \} \\ <var:K0> := <nat:5> ; \\ \{ <var:F> = <var:m> \land <var:K0> = <nat:5> \} \\ <var:K1> := <nat:6> ; \\ \{ <var:F> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:6> \} \\ <var:K1> := <var:K1> * <var:F> ; \\ \{ <var:F> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:6> \times <var:m> \} \\ <var:K2> := <nat:8> ; \\ \{ <var:F> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:6> \times <var:m> \land <var:K2> = <nat:8> \} \\ <var:K2> := <var:K2> * <var:F> ; \\ \{ <var:F> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:6> \times <var:m> \land <var:K2> = <nat:8> \times <var:m> \} \\ <var:K2> := <var:K2> * <var:F> ; \\ \{ <var:F> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:6> \times <var:m> \land <var:K2> = <nat:8> \times <var:m> ^ <nat:2> \} \\ <var:Y> := <var:K2> ; \\ \{ <var:F> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:6> \times <var:m> \land <var:Y> = <nat:8> \times <var:m> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:K1> ; \\ \{ <var:F> = <var:m> \land <var:K0> = <nat:5> \land <var:Y> = <nat:8> \times <var:m> ^ <nat:2> + <nat:6> \times <var:m> \} \\ <var:Y> := <var:Y> + <var:K0> \\ \{ <var:F> = <var:m> \land <var:Y> = <nat:8> \times <var:m> ^ <nat:2> + <nat:6> \times <var:m> + <nat:5> \} \end{eqnarray} Thus , the set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:F> = <var:m> }} <var:K0> := <nat:5> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:F> ; <var:K2> := <nat:8> ; <var:K2> := <var:K2> * <var:F> ; <var:K2> := <var:K2> * <var:F> ; <var:Y> := <var:K2> ; <var:Y> := <var:Y> + <var:K1> ; <var:Y> := <var:Y> + <var:K0> {{ <var:Y> = <nat:8> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:6> * <var:m> /\ <var:K2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:6> * <var:m> /\ <var:K2> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:6> * <var:m> /\ <var:K2> = <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:6> * <var:m> /\ <var:Y> = <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:K0> = <nat:5> /\ <var:Y> = <nat:8> * <var:m> ^ <nat:2> + <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:Y> = <nat:8> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 