\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:7> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:l> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:l> ; <var:J2> := <var:J2> * <var:l> ; <var:X> := <var:J2> ; <var:X> := <var:X> + <var:J1> ; <var:X> := <var:X> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:l> = <var:P> $ prior to executing our code it follows that $ <var:X> = <nat:2> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:7> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques produces : \begin{eqnarray} \{ <var:l> = <var:P> \} \\ <var:J0> := <nat:7> ; \\ \{ <var:l> = <var:P> \land <var:J0> = <nat:7> \} \\ <var:J1> := <nat:7> ; \\ \{ <var:l> = <var:P> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \} \\ <var:J1> := <var:J1> * <var:l> ; \\ \{ <var:l> = <var:P> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \times <var:P> \} \\ <var:J2> := <nat:2> ; \\ \{ <var:l> = <var:P> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \times <var:P> \land <var:J2> = <nat:2> \} \\ <var:J2> := <var:J2> * <var:l> ; \\ \{ <var:l> = <var:P> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \times <var:P> \land <var:J2> = <nat:2> \times <var:P> \} \\ <var:J2> := <var:J2> * <var:l> ; \\ \{ <var:l> = <var:P> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \times <var:P> \land <var:J2> = <nat:2> \times <var:P> ^ <nat:2> \} \\ <var:X> := <var:J2> ; \\ \{ <var:l> = <var:P> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \times <var:P> \land <var:X> = <nat:2> \times <var:P> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:J1> ; \\ \{ <var:l> = <var:P> \land <var:J0> = <nat:7> \land <var:X> = <nat:2> \times <var:P> ^ <nat:2> + <nat:7> \times <var:P> \} \\ <var:X> := <var:X> + <var:J0> \\ \{ <var:l> = <var:P> \land <var:X> = <nat:2> \times <var:P> ^ <nat:2> + <nat:7> \times <var:P> + <nat:7> \} \end{eqnarray} Considering the preceding argument , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:7> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:l> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:l> ; <var:J2> := <var:J2> * <var:l> ; <var:X> := <var:J2> ; <var:X> := <var:X> + <var:J1> ; <var:X> := <var:X> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:l> = <var:P> }} <def:poly> {{ <var:X> = <nat:2> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:7> * <var:P> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:7> * <var:P> /\ <var:J2> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:7> * <var:P> /\ <var:J2> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:7> * <var:P> /\ <var:X> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:J0> = <nat:7> /\ <var:X> = <nat:2> * <var:P> ^ <nat:2> + <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:X> = <nat:2> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 