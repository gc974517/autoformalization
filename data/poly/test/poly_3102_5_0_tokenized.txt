\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:Z> ; <var:u> := <var:D1> ; <var:u> := <var:u> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for every whole numbers $ <var:g> $ --- $ <var:Z> = <var:g> $ ahead of executing this segment of code it follows that we see $ <var:u> = <nat:4> \times <var:g> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our series of instructions is given through Hoare reasoning . Now , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:g> \} & <var:D0> := <nat:3> & \{ <var:Z> = <var:g> \land <var:D0> = <nat:3> \} \\ \{ <var:Z> = <var:g> \land <var:D0> = <nat:3> \} & <var:D1> := <nat:4> & \{ <var:Z> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> \} \\ \{ <var:Z> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> \} & <var:D1> := <var:D1> * <var:Z> & \{ <var:Z> = <var:g> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> * <var:g> \} \end{tabular} Advancing to the next piece of code found in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:g> \} & <var:D0> := <nat:3> & \{ <var:Z> = <var:g> \land <var:D0> = <nat:3> \} \end{tabular} Observing the next line found in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:g> \} & <var:D0> := <nat:3> & \{ <var:Z> = <var:g> \land <var:D0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:3> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:Z> ; <var:u> := <var:D1> ; <var:u> := <var:u> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:Z> = <var:g> }} <def:poly> {{ <var:u> = <nat:4> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:D0> = <nat:3> /\ <var:u> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:u> = <nat:4> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 