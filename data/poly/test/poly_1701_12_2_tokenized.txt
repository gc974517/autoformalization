\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B> := <nat:3> ; <var:B> := <nat:2> + <var:B> * <var:A> ; <var:B> := <nat:2> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <var:B> * <var:A> ; <var:B> := <nat:2> + <var:B> * <var:A> ; <var:B> := <nat:1> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Given --- given some natural numbers $ <var:h> $ --- that $ <var:A> = <var:h> $ before the evaluation of our series of commands , then we have $ <var:B> = <nat:3> * <var:h> ^ <nat:11> + <nat:2> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> $ after list of instructions has exited . \end{theorem} \begin{proof} Using standard Hoare reasoning gives : \begin{eqnarray} \{ <var:A> = <var:h> \} \\ <var:B> := <nat:3> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \} \\ <var:B> := <nat:2> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> + <nat:2> \} \\ <var:B> := <nat:2> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:2> \} \\ <var:B> := <nat:3> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> \} \\ <var:B> := <nat:4> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} \\ <var:B> := <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + \} \\ <var:B> := <nat:2> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \} \\ <var:B> := <nat:1> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> + <nat:1> \} \\ <var:B> := <nat:4> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:8> + <nat:2> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:4> \} \\ <var:B> := <nat:3> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:9> + <nat:2> \cdot <var:h> ^ <nat:8> + <nat:2> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:3> \} \\ <var:B> := <nat:3> + <var:B> * <var:A> ; \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:10> + <nat:2> \cdot <var:h> ^ <nat:9> + <nat:2> \cdot <var:h> ^ <nat:8> + <nat:3> \cdot <var:h> ^ <nat:7> + <nat:4> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} \\ <var:B> := <nat:4> + <var:B> * <var:A> \\ \{ <var:A> = <var:h> \land <var:B> = <nat:3> \cdot <var:h> ^ <nat:11> + <nat:2> \cdot <var:h> ^ <nat:10> + <nat:2> \cdot <var:h> ^ <nat:9> + <nat:3> \cdot <var:h> ^ <nat:8> + <nat:4> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:3> ; <var:B> := <nat:2> + <var:B> * <var:A> ; <var:B> := <nat:2> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <var:B> * <var:A> ; <var:B> := <nat:2> + <var:B> * <var:A> ; <var:B> := <nat:1> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:A> = <var:h> }} <def:poly> {{ <var:B> = <nat:3> * <var:h> ^ <nat:11> + <nat:2> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:B> = <nat:3> * <var:h> ^ <nat:11> + <nat:2> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 