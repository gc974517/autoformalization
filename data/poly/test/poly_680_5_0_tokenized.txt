\begin{document} \begin{theorem} Consider the following segment of code : \begin{verbatim} <var:n0> := <nat:2> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:E> ; <var:Z> := <var:n1> ; <var:Z> := <var:Z> + <var:n0> \end{verbatim} Allowing that we have $ <var:E> = <var:I> $ given some integers $ <var:I> $ before running the set of instructions it holds that we have $ <var:Z> = <nat:1> \times <var:I> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:I> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:E> = <var:I> \land <var:n0> = <nat:2> \} \\ <var:n1> := <nat:1> ; \\ \{ <var:E> = <var:I> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> \} \\ <var:n1> := <var:n1> * <var:E> ; \\ \{ <var:E> = <var:I> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> \cdot <var:I> \} \\ <var:Z> := <var:n1> ; \\ \{ <var:E> = <var:I> \land <var:n0> = <nat:2> \land <var:Z> = <nat:1> \cdot <var:I> \} \\ <var:Z> := <var:Z> + <var:n0> \\ \{ <var:E> = <var:I> \land <var:Z> = <nat:1> \cdot <var:I> + <nat:2> \} \end{eqnarray} Using usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:E> = <var:I> }} <var:n0> := <nat:2> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:E> ; <var:Z> := <var:n1> ; <var:Z> := <var:Z> + <var:n0> {{ <var:Z> = <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:n0> = <nat:2> /\ <var:Z> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:Z> = <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 