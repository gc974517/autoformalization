\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:7> ; <var:G> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:f> = <var:J> $ before the evaluation of this code segment it follows that we have $ <var:G> = <nat:7> $ once list of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:J> \} \\ <var:Z0> := <nat:7> ; \\ \{ <var:f> = <var:J> \land <var:Z0> = <nat:7> \} \\ <var:G> := <var:Z0> \\ \{ <var:f> = <var:J> \land <var:G> = <nat:7> \} \end{eqnarray} Utilizing standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:7> ; <var:G> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:f> = <var:J> }} <def:poly> {{ <var:G> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:G> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 