\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:v> ; <var:r2> := <var:r1> * <var:v> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:3> ; <var:r2> := <var:r2> * <nat:2> ; <var:l> := <var:r2> <var:l> := <var:l> + <var:r1> <var:l> := <var:l> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Assuming that $ <var:v> = <var:h> $ ahead of interpreting our program it must be that we see $ <var:l> = <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:v> = <var:h> \} \\ <var:r1> := <var:v> ; \\ \{ <var:v> = <var:h> \land <var:r1> = <var:h> \} \\ <var:r2> := <var:r1> * <var:v> ; \\ \{ <var:v> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:v> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:r1> := <var:r1> * <nat:3> ; \\ \{ <var:v> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:r2> := <var:r2> * <nat:2> ; \\ \{ <var:v> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:l> := <var:r2> \\ \{ <var:v> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r0> = <nat:7> \land <var:l> = <nat:2> \times <var:h> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:r1> \\ \{ <var:v> = <var:h> \land <var:r0> = <nat:7> \land <var:l> = <nat:2> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> \} \\ <var:l> := <var:l> + <var:r0> \\ \{ <var:v> = <var:h> \land <var:l> = <nat:2> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:7> \} \end{eqnarray} Hence , our set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r1> := <var:v> ; <var:r2> := <var:r1> * <var:v> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:3> ; <var:r2> := <var:r2> * <nat:2> ; <var:l> := <var:r2> <var:l> := <var:l> + <var:r1> <var:l> := <var:l> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:v> = <var:h> }} <def:poly> {{ <var:l> = <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:r1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:r1> = <var:h> /\ <var:r2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:r1> = <var:h> /\ <var:r2> = <var:h> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r2> = <var:h> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r0> = <nat:7> /\ <var:l> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:r0> = <nat:7> /\ <var:l> = <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:l> = <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 