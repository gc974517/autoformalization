\begin{document} \begin{theorem} Define a program in \emph{Imp} as \begin{verbatim} <var:Z1> := <var:J> ; <var:Z2> := <var:Z1> * <var:J> ; <var:Z3> := <var:Z2> * <var:J> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:Z2> := <var:Z2> * <nat:6> ; <var:Z3> := <var:Z3> * <nat:8> ; <var:S> := <var:Z3> <var:S> := <var:S> + <var:Z2> <var:S> := <var:S> + <var:Z1> <var:S> := <var:S> + <var:Z0> \end{verbatim} Given --- for all positive integer coefficients $ <var:U> $ --- it to be that $ <var:J> = <var:U> $ ahead of interpreting the code segment , it follows that $ <var:S> = <nat:8> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:4> $ once code exits . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is demonstrated through usual Hoare reasoning . Observing the next step in the segment of code , the binding line assigning $ <var:J> $ as $ <var:Z1>$ . This code forwards the precondition $ \{ <var:J> = <var:U> \} $ toward $ \{ <var:J> = <var:U> \land <var:Z1> = <var:U> \} $ . Moving on , we see the variable binding code \verb | <var:Z2> := <var:Z1> * <var:J> ; | . This moves the condition $ \{ <var:J> = <var:U> \land <var:Z1> = <var:U> \} $ to the condition $ \{ <var:J> = <var:U> \land <var:Z1> = <var:U> \land <var:Z2> = <var:U> ^ <nat:2> \} $ . Moving forward , the command yielding $ <var:Z2> * <var:J> $ to $ <var:Z3>$ . This statement redefines the precondition $ \{ <var:J> = <var:U> \land <var:Z1> = <var:U> \land <var:Z2> = <var:U> ^ <nat:2> \} $ to the postcondition $ \{ <var:J> = <var:U> \land <var:Z1> = <var:U> \land <var:Z2> = <var:U> ^ <nat:2> \land <var:Z3> = <var:U> ^ <nat:3> \} $ . Focusing on the next piece of code seen in the set of instructions , we have the assignment command \verb | <var:Z0> := <nat:4> ; | . This redefines the condition $ \{ <var:J> = <var:U> \land <var:Z1> = <var:U> \land <var:Z2> = <var:U> ^ <nat:2> \land <var:Z3> = <var:U> ^ <nat:3> \} $ into the postcondition $ \{ <var:J> = <var:U> \land <var:Z1> = <var:U> \land <var:Z2> = <var:U> ^ <nat:2> \land <var:Z3> = <var:U> ^ <nat:3> \land <var:Z0> = <nat:4> \} $ . Stepping through , the environment update code \verb | <var:Z1> := <var:Z1> * <nat:4> ; | . This transfers $ \{ <var:J> = <var:U> \land <var:Z1> = <var:U> \land <var:Z2> = <var:U> ^ <nat:2> \land <var:Z3> = <var:U> ^ <nat:3> \land <var:Z0> = <nat:4> \} $ to $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z2> = <var:U> ^ <nat:2> \land <var:Z3> = <var:U> ^ <nat:3> \land <var:Z0> = <nat:4> \} $ . Moving on to the next step , the command giving $ <var:Z2> * <nat:6> $ toward $ <var:Z2>$ . This command takes $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z2> = <var:U> ^ <nat:2> \land <var:Z3> = <var:U> ^ <nat:3> \land <var:Z0> = <nat:4> \} $ into the postcondition $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:Z3> = <var:U> ^ <nat:3> \land <var:Z0> = <nat:4> \} $ . Moving on , we have the statement binding $ <var:Z3> * <nat:8> $ into $ <var:Z3>$ . This statement moves the condition $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:Z3> = <var:U> ^ <nat:3> \land <var:Z0> = <nat:4> \} $ toward $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:Z3> = <nat:8> \cdot <var:U> ^ <nat:3> \land <var:Z0> = <nat:4> \} $ . This is given through the assignment law from usual Hoare techniques . Moving onward , we have the variable assignmet line \verb | <var:S> := <var:Z3> | . This moves the precondition $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:Z3> = <nat:8> \cdot <var:U> ^ <nat:3> \land <var:Z0> = <nat:4> \} $ as $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:Z0> = <nat:4> \land <var:S> = <nat:8> \cdot <var:U> ^ <nat:3> \} $ . This is rigorously given using the assignment law found in standard Hoare logic . Advancing , we see the binding code \verb | <var:S> := <var:S> + <var:Z2> | . This statement moves $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:Z0> = <nat:4> \land <var:S> = <nat:8> \cdot <var:U> ^ <nat:3> \} $ into $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z0> = <nat:4> \land <var:S> = <nat:8> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> \} $ . This is ensured by the assignment inference rule from standard Hoare logic . Moving forward to the following line of code seen in our code , the variable assignmet code \verb | <var:S> := <var:S> + <var:Z1> | . This code takes $ \{ <var:J> = <var:U> \land <var:Z1> = <nat:4> \cdot <var:U> \land <var:Z0> = <nat:4> \land <var:S> = <nat:8> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> \} $ toward the postcondition $ \{ <var:J> = <var:U> \land <var:Z0> = <nat:4> \land <var:S> = <nat:8> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> \} $ . Shifting focus toward the proceeding line of code found in the list of commands , the assignment code giving $ <var:S> + <var:Z0$ into $ <var:S>$ . This transfers the precondition $ \{ <var:J> = <var:U> \land <var:Z0> = <nat:4> \land <var:S> = <nat:8> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> \} $ to the condition $ \{ <var:J> = <var:U> \land <var:S> = <nat:8> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:J> = <var:U> }} <var:Z1> := <var:J> ; <var:Z2> := <var:Z1> * <var:J> ; <var:Z3> := <var:Z2> * <var:J> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:Z2> := <var:Z2> * <nat:6> ; <var:Z3> := <var:Z3> * <nat:8> ; <var:S> := <var:Z3> <var:S> := <var:S> + <var:Z2> <var:S> := <var:S> + <var:Z1> <var:S> := <var:S> + <var:Z0> {{ <var:S> = <nat:8> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <var:U> /\ <var:Z2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <var:U> /\ <var:Z2> = <var:U> ^ <nat:2> /\ <var:Z3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <var:U> /\ <var:Z2> = <var:U> ^ <nat:2> /\ <var:Z3> = <var:U> ^ <nat:3> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <nat:4> * <var:U> /\ <var:Z2> = <var:U> ^ <nat:2> /\ <var:Z3> = <var:U> ^ <nat:3> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <nat:4> * <var:U> /\ <var:Z2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:Z3> = <var:U> ^ <nat:3> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <nat:4> * <var:U> /\ <var:Z2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:Z3> = <nat:8> * <var:U> ^ <nat:3> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <nat:4> * <var:U> /\ <var:Z2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:Z0> = <nat:4> /\ <var:S> = <nat:8> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z1> = <nat:4> * <var:U> /\ <var:Z0> = <nat:4> /\ <var:S> = <nat:8> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:Z0> = <nat:4> /\ <var:S> = <nat:8> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:S> = <nat:8> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 