\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:D> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:D> ; <var:x2> := <var:x2> * <var:D> ; <var:B> := <var:x2> ; <var:B> := <var:B> + <var:x1> ; <var:B> := <var:B> + <var:x0> \end{verbatim} Assume --- assuming some positive numbers $ <var:G> $ --- it to hold that $ <var:D> = <var:G> $ ahead of evaluating our program , it must be that we have $ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:1> $ after program is done . \end{theorem} \begin{proof} The flow of logic for this set of instructions is demonstrated with this decorated code segment . \begin{eqnarray} \{ <var:D> = <var:G> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:D> = <var:G> \land <var:x0> = <nat:1> \} \\ <var:x1> := <nat:9> ; \\ \{ <var:D> = <var:G> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> \} \\ <var:x1> := <var:x1> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> \cdot <var:G> \} \\ <var:x2> := <nat:3> ; \\ \{ <var:D> = <var:G> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> \cdot <var:G> \land <var:x2> = <nat:3> \} \\ <var:x2> := <var:x2> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> \cdot <var:G> \land <var:x2> = <nat:3> \cdot <var:G> \} \\ <var:x2> := <var:x2> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> \cdot <var:G> \land <var:x2> = <nat:3> \cdot <var:G> ^ <nat:2> \} \\ <var:B> := <var:x2> ; \\ \{ <var:D> = <var:G> \land <var:x0> = <nat:1> \land <var:x1> = <nat:9> \cdot <var:G> \land <var:B> = <nat:3> \cdot <var:G> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:x1> ; \\ \{ <var:D> = <var:G> \land <var:x0> = <nat:1> \land <var:B> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:9> \cdot <var:G> \} \\ <var:B> := <var:B> + <var:x0> \\ \{ <var:D> = <var:G> \land <var:B> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:9> \cdot <var:G> + <nat:1> \} \end{eqnarray} Using usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:D> = <var:G> }} <var:x0> := <nat:1> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:D> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:D> ; <var:x2> := <var:x2> * <var:D> ; <var:B> := <var:x2> ; <var:B> := <var:B> + <var:x1> ; <var:B> := <var:B> + <var:x0> {{ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:G> /\ <var:x2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:G> /\ <var:x2> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:G> /\ <var:x2> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:9> * <var:G> /\ <var:B> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:x0> = <nat:1> /\ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 