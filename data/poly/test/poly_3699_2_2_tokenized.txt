\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:M> := <nat:1> ; <var:M> := <nat:4> + <var:M> * <var:w> \end{verbatim} Allowing it to be that $ <var:w> = <var:y> $ before running our list of commands , it follows that we have $ <var:M> = <nat:1> \times <var:y> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:y> \} \\ <var:M> := <nat:1> ; \\ \{ <var:w> = <var:y> \land <var:M> = <nat:1> \} \\ <var:M> := <nat:4> + <var:M> * <var:w> \\ \{ <var:w> = <var:y> \land <var:M> = <nat:1> * <var:y> + <nat:4> \} \end{eqnarray} The application of standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:w> = <var:y> }} <var:M> := <nat:1> ; <var:M> := <nat:4> + <var:M> * <var:w> {{ <var:M> = <nat:1> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:M> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:M> = <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 