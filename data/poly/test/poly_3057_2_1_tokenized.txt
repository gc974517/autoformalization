\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:5> ; <var:V> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assume it to hold that $ <var:E> = <var:w> $ prior to evaluating our code segment , it holds that $ <var:V> = <nat:5> $ once list of instructions exits . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:E> = <var:w> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:E> = <var:w> \land <var:L0> = <nat:5> \} \\ <var:V> := <var:L0> \\ \{ <var:E> = <var:w> \land <var:V> = <nat:5> \} \end{eqnarray} As a result , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:5> ; <var:V> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:E> = <var:w> }} <def:poly> {{ <var:V> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:V> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 