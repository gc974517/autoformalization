\begin{document} \begin{theorem} Let the following code segment as follows \begin{verbatim} <var:s> := <nat:2> ; <var:s> := <nat:4> + <var:s> * <var:Z> ; <var:s> := <nat:3> + <var:s> * <var:Z> ; <var:s> := <nat:3> + <var:s> * <var:Z> ; <var:s> := <nat:3> + <var:s> * <var:Z> ; <var:s> := <nat:2> + <var:s> * <var:Z> ; <var:s> := <var:s> * <var:Z> ; <var:s> := <nat:2> + <var:s> * <var:Z> ; <var:s> := <nat:2> + <var:s> * <var:Z> ; <var:s> := <nat:2> + <var:s> * <var:Z> \end{verbatim} Assuming it to be that $ <var:Z> = <var:V> $ before executing our series of instructions it holds that we have $ <var:s> = <nat:2> \cdot <var:V> ^ <nat:9> + <nat:4> \cdot <var:V> ^ <nat:8> + <nat:3> \cdot <var:V> ^ <nat:7> + <nat:3> \cdot <var:V> ^ <nat:6> + <nat:3> \cdot <var:V> ^ <nat:5> + <nat:2> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + <nat:2> $ . \end{theorem} \begin{proof} Observe the below decorated series of commands . \begin{eqnarray} \{ <var:Z> = <var:V> \} \\ <var:s> := <nat:2> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \} \\ <var:s> := <nat:4> + <var:s> * <var:Z> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> + <nat:4> \} \\ <var:s> := <nat:3> + <var:s> * <var:Z> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + <nat:3> \} \\ <var:s> := <nat:3> + <var:s> * <var:Z> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:3> \cdot <var:V> + <nat:3> \} \\ <var:s> := <nat:3> + <var:s> * <var:Z> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> ^ <nat:4> + <nat:4> \cdot <var:V> ^ <nat:3> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:3> \cdot <var:V> + <nat:3> \} \\ <var:s> := <nat:2> + <var:s> * <var:Z> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> ^ <nat:5> + <nat:4> \cdot <var:V> ^ <nat:4> + <nat:3> \cdot <var:V> ^ <nat:3> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:3> \cdot <var:V> + <nat:2> \} \\ <var:s> := <var:s> * <var:Z> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> ^ <nat:6> + <nat:4> \cdot <var:V> ^ <nat:5> + <nat:3> \cdot <var:V> ^ <nat:4> + <nat:3> \cdot <var:V> ^ <nat:3> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + \} \\ <var:s> := <nat:2> + <var:s> * <var:Z> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> ^ <nat:7> + <nat:4> \cdot <var:V> ^ <nat:6> + <nat:3> \cdot <var:V> ^ <nat:5> + <nat:3> \cdot <var:V> ^ <nat:4> + <nat:3> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:2> \} \\ <var:s> := <nat:2> + <var:s> * <var:Z> ; \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> ^ <nat:8> + <nat:4> \cdot <var:V> ^ <nat:7> + <nat:3> \cdot <var:V> ^ <nat:6> + <nat:3> \cdot <var:V> ^ <nat:5> + <nat:3> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> + <nat:2> \} \\ <var:s> := <nat:2> + <var:s> * <var:Z> \\ \{ <var:Z> = <var:V> \land <var:s> = <nat:2> \cdot <var:V> ^ <nat:9> + <nat:4> \cdot <var:V> ^ <nat:8> + <nat:3> \cdot <var:V> ^ <nat:7> + <nat:3> \cdot <var:V> ^ <nat:6> + <nat:3> \cdot <var:V> ^ <nat:5> + <nat:2> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + <nat:2> \} \end{eqnarray} Using usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:Z> = <var:V> }} <var:s> := <nat:2> ; <var:s> := <nat:4> + <var:s> * <var:Z> ; <var:s> := <nat:3> + <var:s> * <var:Z> ; <var:s> := <nat:3> + <var:s> * <var:Z> ; <var:s> := <nat:3> + <var:s> * <var:Z> ; <var:s> := <nat:2> + <var:s> * <var:Z> ; <var:s> := <var:s> * <var:Z> ; <var:s> := <nat:2> + <var:s> * <var:Z> ; <var:s> := <nat:2> + <var:s> * <var:Z> ; <var:s> := <nat:2> + <var:s> * <var:Z> {{ <var:s> = <nat:2> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:V> /\ <var:s> = <nat:2> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 