\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:H> ; <var:C0> := <nat:9> ; <var:C1> := <var:C1> * <nat:8> ; <var:z> := <var:C1> <var:z> := <var:z> + <var:C0> \end{verbatim} Given that $ <var:H> = <var:p> $ before evaluating our program , it holds that $ <var:z> = <nat:8> \times <var:p> + <nat:9> $ once segment of code has executed . \end{theorem} \begin{proof} The method of proof for the segment of code is done through Hoare techniques . Moving on , we see \verb | { <var:H> = <var:p> } <var:C1> := <var:H> { <var:H> = <var:p> \land <var:C1> = <var:p> } | . This is shown using the variable binding rule from standard Hoare techniques . Honing in on the subsequent lines of codein the segment of code , \verb | { <var:H> = <var:p> } <var:C1> := <var:H> { <var:H> = <var:p> \land <var:C1> = <var:p> } | and \verb | { <var:H> = <var:p> \land <var:C1> = <var:p> } <var:C0> := <nat:9> { <var:H> = <var:p> \land <var:C1> = <var:p> \land <var:C0> = <nat:9> } | . Paying attention to the upcoming lines in our set of instructions , \verb | { <var:H> = <var:p> } <var:C1> := <var:H> { <var:H> = <var:p> \land <var:C1> = <var:p> } | and \verb | { <var:H> = <var:p> \land <var:C1> = <var:p> } <var:C0> := <nat:9> { <var:H> = <var:p> \land <var:C1> = <var:p> \land <var:C0> = <nat:9> } | . This is rigorously given by the binding scheme given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:H> = <var:p> }} <var:C1> := <var:H> ; <var:C0> := <nat:9> ; <var:C1> := <var:C1> * <nat:8> ; <var:z> := <var:C1> <var:z> := <var:z> + <var:C0> {{ <var:z> = <nat:8> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:C1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:C1> = <var:p> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:C1> = <nat:8> * <var:p> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:C0> = <nat:9> /\ <var:z> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:z> = <nat:8> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 