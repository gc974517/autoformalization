\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:3> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:Z> ; <var:Q2> := <nat:8> ; <var:Q2> := <var:Q2> * <var:Z> ; <var:Q2> := <var:Q2> * <var:Z> ; <var:N> := <var:Q2> ; <var:N> := <var:N> + <var:Q1> ; <var:N> := <var:N> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assuming $ <var:Z> = <var:z> $ before executing this series of instructions it holds that we have $ <var:N> = <nat:8> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> + <nat:3> $ when series of instructions has finished executing . \end{theorem} \begin{proof} Proving correctness for this list of commands can be accomplished using standard Hoare logic . Immediately after , we see the assignment command letting $ <nat:3> $ to $ <var:Q0>$ . This command moves $ \{ <var:Z> = <var:z> \} $ to $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \} $ . Next , the environment update line yielding $ <nat:9> $ toward $ <var:Q1>$ . This forwards $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \} $ to the postcondition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \} $ . This is given by the assignment rule found in standard Hoare techniques . Moving on to the next step , we have the variable binding command defining $ <var:Q1> * <var:Z> $ to $ <var:Q1>$ . This code moves the precondition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \} $ as $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \} $ . This is given using the assignment rule of typical Hoare logic . Stepping forward , the environment update code yielding $ <nat:8> $ toward $ <var:Q2>$ . This takes the precondition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \} $ toward $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \land <var:Q2> = <nat:8> \} $ . This is rigorously given by the assignment law from Hoare techniques . Following , we see the variable update code \verb | <var:Q2> := <var:Q2> * <var:Z> ; | . This statement forwards $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \land <var:Q2> = <nat:8> \} $ to the condition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \land <var:Q2> = <nat:8> \cdot <var:z> \} $ . This is rigorously given with the assignment law from typical Hoare techniques . Focusing on the following line of code found in our list of commands , we have the assignment line \verb | <var:Q2> := <var:Q2> * <var:Z> ; | . This advances the precondition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \land <var:Q2> = <nat:8> \cdot <var:z> \} $ into the condition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \land <var:Q2> = <nat:8> \cdot <var:z> ^ <nat:2> \} $ . This is ensured using the assignment rule in typical Hoare reasoning . Looking at the proceeding line seen in our series of commands , we have the environment update command defining $ <var:Q2> $ into $ <var:N>$ . This line transfers the precondition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \land <var:Q2> = <nat:8> \cdot <var:z> ^ <nat:2> \} $ into the postcondition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \land <var:N> = <nat:8> \cdot <var:z> ^ <nat:2> \} $ . Observing the subsequent step in the series of instructions , the variable binding statement \verb | <var:N> := <var:N> + <var:Q1> ; | . This command takes the precondition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:Q1> = <nat:9> \cdot <var:z> \land <var:N> = <nat:8> \cdot <var:z> ^ <nat:2> \} $ toward the condition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:N> = <nat:8> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> \} $ . This is shown through the assignment rule defined in standard Hoare reasoning . Taking another step toward the following bit of code seen in the series of commands , the line assigning $ <var:N> + <var:Q0$ into $ <var:N>$ . This statement advances the precondition $ \{ <var:Z> = <var:z> \land <var:Q0> = <nat:3> \land <var:N> = <nat:8> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> \} $ into $ \{ <var:Z> = <var:z> \land <var:N> = <nat:8> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> + <nat:3> \} $ . This is shown to be logically sound by the assignment scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:Z> ; <var:Q2> := <nat:8> ; <var:Q2> := <var:Q2> * <var:Z> ; <var:Q2> := <var:Q2> * <var:Z> ; <var:N> := <var:Q2> ; <var:N> := <var:N> + <var:Q1> ; <var:N> := <var:N> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Z> = <var:z> }} <def:poly> {{ <var:N> = <nat:8> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:9> * <var:z> /\ <var:Q2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:9> * <var:z> /\ <var:Q2> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:9> * <var:z> /\ <var:Q2> = <nat:8> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:Q1> = <nat:9> * <var:z> /\ <var:N> = <nat:8> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:Q0> = <nat:3> /\ <var:N> = <nat:8> * <var:z> ^ <nat:2> + <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:z> /\ <var:N> = <nat:8> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 