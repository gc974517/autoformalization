\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:6> ; <var:I> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Assuming that $ <var:l> = <var:P> $ ahead of the execution of this set of instructions , it follows that $ <var:I> = <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is demonstrated by Hoare logic . Moving on to the following piece of code contained in our series of commands , the statement \verb | <var:S0> := <nat:6> ; | . This takes $ \{ <var:l> = <var:P> \} $ as the postcondition $ \{ <var:l> = <var:P> \land <var:S0> = <nat:6> \} $ . This is shown to be logically sound with the assignment inference rule of standard Hoare techniques . Taking another step toward the proceeding step contained in the series of commands , the variable assignmet line \verb | <var:I> := <var:S0> | . This forwards $ \{ <var:l> = <var:P> \land <var:S0> = <nat:6> \} $ into $ \{ <var:l> = <var:P> \land <var:I> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:6> ; <var:I> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:l> = <var:P> }} <def:poly> {{ <var:I> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:I> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 