\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:E0> := <nat:3> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:Y> ; <var:E4> := <nat:4> ; <var:E4> := <var:E4> * <var:Y> ; <var:E4> := <var:E4> * <var:Y> ; <var:E4> := <var:E4> * <var:Y> ; <var:E4> := <var:E4> * <var:Y> ; <var:N> := <var:E4> ; <var:N> := <var:N> + <var:E1> ; <var:N> := <var:N> + <var:E0> \end{verbatim} Allow given some $ <var:c> \in \mathbb{N} $ it to be that $ <var:Y> = <var:c> $ ahead of interpreting our list of instructions it must be that we see $ <var:N> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions can be given by typical Hoare logic . Observing the proceeding lines of codein our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:c> \} & <var:E0> := <nat:3> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \} \\ \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \} & <var:E1> := <nat:2> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> \} \\ \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> \} & <var:E1> := <var:E1> * <var:Y> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> * <var:c> \} \end{tabular} Observing the next commands seen in the code segment , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:c> \} & <var:E0> := <nat:3> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \} \\ \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \} & <var:E1> := <nat:2> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> \} \\ \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> \} & <var:E1> := <var:E1> * <var:Y> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> * <var:c> \} \\ \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> * <var:c> \} & <var:E4> := <nat:4> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> * <var:c> \land <var:E4> = <nat:4> \} \\ \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> * <var:c> \land <var:E4> = <nat:4> \} & <var:E4> := <var:E4> * <var:Y> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> * <var:c> \land <var:E4> = <nat:4> * <var:c> \} \end{tabular} This is deduced using the scheme found in typical Hoare logic . Focusing on the upcoming command in the list of commands , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:c> \} & <var:E0> := <nat:3> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \} \end{tabular} Moving forward to the following bits of codein the series of commands , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:c> \} & <var:E0> := <nat:3> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \} \\ \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \} & <var:E1> := <nat:2> & \{ <var:Y> = <var:c> \land <var:E0> = <nat:3> \land <var:E1> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E4> : string := " <var:E4> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Y> = <var:c> }} <var:E0> := <nat:3> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:Y> ; <var:E4> := <nat:4> ; <var:E4> := <var:E4> * <var:Y> ; <var:E4> := <var:E4> * <var:Y> ; <var:E4> := <var:E4> * <var:Y> ; <var:E4> := <var:E4> * <var:Y> ; <var:N> := <var:E4> ; <var:N> := <var:N> + <var:E1> ; <var:N> := <var:N> + <var:E0> {{ <var:N> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> * <var:c> /\ <var:E4> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> * <var:c> /\ <var:E4> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> * <var:c> /\ <var:E4> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> * <var:c> /\ <var:E4> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> * <var:c> /\ <var:E4> = <nat:4> * <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:2> * <var:c> /\ <var:N> = <nat:4> * <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:3> /\ <var:N> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:N> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 