\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} : \begin{verbatim} <var:b1> := <var:n> ; <var:b2> := <var:b1> * <var:n> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:2> ; <var:b2> := <var:b2> * <nat:1> ; <var:y> := <var:b2> <var:y> := <var:y> + <var:b1> <var:y> := <var:y> + <var:b0> \end{verbatim} Assume --- letting $ <var:a> $ --- that we have $ <var:n> = <var:a> $ before running our program , then $ <var:y> = <nat:1> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:a> \} \\ <var:b1> := <var:n> ; \\ \{ <var:n> = <var:a> \land <var:b1> = <var:a> \} \\ <var:b2> := <var:b1> * <var:n> ; \\ \{ <var:n> = <var:a> \land <var:b1> = <var:a> \land <var:b2> = <var:a> ^ <nat:2> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:n> = <var:a> \land <var:b1> = <var:a> \land <var:b2> = <var:a> ^ <nat:2> \land <var:b0> = <nat:4> \} \\ <var:b1> := <var:b1> * <nat:2> ; \\ \{ <var:n> = <var:a> \land <var:b1> = <nat:2> \times <var:a> \land <var:b2> = <var:a> ^ <nat:2> \land <var:b0> = <nat:4> \} \\ <var:b2> := <var:b2> * <nat:1> ; \\ \{ <var:n> = <var:a> \land <var:b1> = <nat:2> \times <var:a> \land <var:b2> = <nat:1> \times <var:a> ^ <nat:2> \land <var:b0> = <nat:4> \} \\ <var:y> := <var:b2> \\ \{ <var:n> = <var:a> \land <var:b1> = <nat:2> \times <var:a> \land <var:b0> = <nat:4> \land <var:y> = <nat:1> \times <var:a> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:b1> \\ \{ <var:n> = <var:a> \land <var:b0> = <nat:4> \land <var:y> = <nat:1> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> \} \\ <var:y> := <var:y> + <var:b0> \\ \{ <var:n> = <var:a> \land <var:y> = <nat:1> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:4> \} \end{eqnarray} The application of typical Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:n> = <var:a> }} <var:b1> := <var:n> ; <var:b2> := <var:b1> * <var:n> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:2> ; <var:b2> := <var:b2> * <nat:1> ; <var:y> := <var:b2> <var:y> := <var:y> + <var:b1> <var:y> := <var:y> + <var:b0> {{ <var:y> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:b1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:b1> = <var:a> /\ <var:b2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:b1> = <var:a> /\ <var:b2> = <var:a> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:b1> = <nat:2> * <var:a> /\ <var:b2> = <var:a> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:b1> = <nat:2> * <var:a> /\ <var:b2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:b1> = <nat:2> * <var:a> /\ <var:b0> = <nat:4> /\ <var:y> = <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:b0> = <nat:4> /\ <var:y> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:y> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 