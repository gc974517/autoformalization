\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:5> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:Z> ; <var:N> := <var:w1> ; <var:N> := <var:N> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:Z> = <var:a> $ --- for some positive integer coefficients $ <var:a> $ --- before the evaluation of our program it holds that we have $ <var:N> = <nat:7> \cdot <var:a> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for our program is evident through usual Hoare reasoning . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:a> \} & <var:w0> := <nat:5> & \{ <var:Z> = <var:a> \land <var:w0> = <nat:5> \} \end{tabular} This is deduced with the assignment law in usual Hoare techniques . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:a> \} & <var:w0> := <nat:5> & \{ <var:Z> = <var:a> \land <var:w0> = <nat:5> \} \\ \{ <var:Z> = <var:a> \land <var:w0> = <nat:5> \} & <var:w1> := <nat:7> & \{ <var:Z> = <var:a> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \} \\ \{ <var:Z> = <var:a> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \} & <var:w1> := <var:w1> * <var:Z> & \{ <var:Z> = <var:a> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> * <var:a> \} \end{tabular} This is shown using the variable binding scheme given in Hoare techniques . Paying attention to the next step seen in the code , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:a> \} & <var:w0> := <nat:5> & \{ <var:Z> = <var:a> \land <var:w0> = <nat:5> \} \end{tabular} This is shown by the assignment inference rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:5> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:Z> ; <var:N> := <var:w1> ; <var:N> := <var:N> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Z> = <var:a> }} <def:poly> {{ <var:N> = <nat:7> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:w0> = <nat:5> /\ <var:N> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:N> = <nat:7> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 