\begin{document} \begin{theorem} Define the following program in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:5> ; <var:u> := <var:C0> \end{verbatim} Assume that $ <var:l> = <var:U> $ prior to the execution of our code segment , it follows that we see $ <var:u> = <nat:5> $ . \end{theorem} \begin{proof} The argument for this set of commands is done with typical Hoare reasoning . Stepping forward , \begin{eqnarray} \{ <var:l> = <var:U> \} \, <var:C0> := <nat:5> \, \{ <var:l> = <var:U> \land <var:C0> = <nat:5> \} \end{eqnarray} This is known to be sound through the variable update rule defined by standard Hoare techniques . Advancing to the upcoming piece of code seen in the list of instructions , we have \begin{eqnarray} \{ <var:l> = <var:U> \} \, <var:C0> := <nat:5> \, \{ <var:l> = <var:U> \land <var:C0> = <nat:5> \} \end{eqnarray} This is guaranteed with the variable binding law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:l> = <var:U> }} <var:C0> := <nat:5> ; <var:u> := <var:C0> {{ <var:u> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:u> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 