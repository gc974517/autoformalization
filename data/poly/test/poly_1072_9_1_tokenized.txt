\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:X1> := <var:z> ; <var:X2> := <var:X1> * <var:z> ; <var:X3> := <var:X2> * <var:z> ; <var:X0> := <nat:6> ; <var:X2> := <var:X2> * <nat:5> ; <var:X3> := <var:X3> * <nat:4> ; <var:U> := <var:X3> <var:U> := <var:U> + <var:X2> <var:U> := <var:U> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:z> = <var:n> $ ( given positive integers $ <var:n> $ ) ahead of interpreting the list of commands , it must be that $ <var:U> = <nat:4> \times <var:n> ^ <nat:3> + <nat:5> \times <var:n> ^ <nat:2> + <nat:6> $ once set of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:n> \} \\ <var:X1> := <var:z> ; \\ \{ <var:z> = <var:n> \land <var:X1> = <var:n> \} \\ <var:X2> := <var:X1> * <var:z> ; \\ \{ <var:z> = <var:n> \land <var:X1> = <var:n> \land <var:X2> = <var:n> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:z> ; \\ \{ <var:z> = <var:n> \land <var:X1> = <var:n> \land <var:X2> = <var:n> ^ <nat:2> \land <var:X3> = <var:n> ^ <nat:3> \} \\ <var:X0> := <nat:6> ; \\ \{ <var:z> = <var:n> \land <var:X1> = <var:n> \land <var:X2> = <var:n> ^ <nat:2> \land <var:X3> = <var:n> ^ <nat:3> \land <var:X0> = <nat:6> \} \\ <var:X2> := <var:X2> * <nat:5> ; \\ \{ <var:z> = <var:n> \land <var:X1> = <var:n> \land <var:X2> = <nat:5> \times <var:n> ^ <nat:2> \land <var:X3> = <var:n> ^ <nat:3> \land <var:X0> = <nat:6> \} \\ <var:X3> := <var:X3> * <nat:4> ; \\ \{ <var:z> = <var:n> \land <var:X1> = <var:n> \land <var:X2> = <nat:5> \times <var:n> ^ <nat:2> \land <var:X3> = <nat:4> \times <var:n> ^ <nat:3> \land <var:X0> = <nat:6> \} \\ <var:U> := <var:X3> \\ \{ <var:z> = <var:n> \land <var:X1> = <var:n> \land <var:X2> = <nat:5> \times <var:n> ^ <nat:2> \land <var:X0> = <nat:6> \land <var:U> = <nat:4> \times <var:n> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:X2> \\ \{ <var:z> = <var:n> \land <var:X1> = <var:n> \land <var:X0> = <nat:6> \land <var:U> = <nat:4> \times <var:n> ^ <nat:3> + <nat:5> \times <var:n> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:X0> \\ \{ <var:z> = <var:n> \land <var:U> = <nat:4> \times <var:n> ^ <nat:3> + <nat:5> \times <var:n> ^ <nat:2> + <nat:6> \} \end{eqnarray} The application of typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <def:poly> := <var:X1> := <var:z> ; <var:X2> := <var:X1> * <var:z> ; <var:X3> := <var:X2> * <var:z> ; <var:X0> := <nat:6> ; <var:X2> := <var:X2> * <nat:5> ; <var:X3> := <var:X3> * <nat:4> ; <var:U> := <var:X3> <var:U> := <var:U> + <var:X2> <var:U> := <var:U> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:z> = <var:n> }} <def:poly> {{ <var:U> = <nat:4> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:X1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:X1> = <var:n> /\ <var:X2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:X1> = <var:n> /\ <var:X2> = <var:n> ^ <nat:2> /\ <var:X3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:X1> = <var:n> /\ <var:X2> = <var:n> ^ <nat:2> /\ <var:X3> = <var:n> ^ <nat:3> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:X1> = <var:n> /\ <var:X2> = <nat:5> * <var:n> ^ <nat:2> /\ <var:X3> = <var:n> ^ <nat:3> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:X1> = <var:n> /\ <var:X2> = <nat:5> * <var:n> ^ <nat:2> /\ <var:X3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:X1> = <var:n> /\ <var:X2> = <nat:5> * <var:n> ^ <nat:2> /\ <var:X0> = <nat:6> /\ <var:U> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:X1> = <var:n> /\ <var:X0> = <nat:6> /\ <var:U> = <nat:4> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:U> = <nat:4> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 