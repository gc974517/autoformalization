\begin{document} \begin{theorem} Consider a code in \emph{Imp} as follows \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <nat:4> + <var:Q> * <var:r> ; <var:Q> := <nat:1> + <var:Q> * <var:r> ; <var:Q> := <nat:1> + <var:Q> * <var:r> ; <var:Q> := <nat:4> + <var:Q> * <var:r> ; <var:Q> := <nat:3> + <var:Q> * <var:r> \end{verbatim} Assuming it to be that $ <var:r> = <var:O> $ before executing the code segment , it follows that we have $ <var:Q> = <nat:3> * <var:O> ^ <nat:5> + <nat:4> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:3> $ after set of instructions is done . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:r> = <var:O> \} \\ <var:Q> := <nat:3> ; \\ \{ <var:r> = <var:O> \land <var:Q> = <nat:3> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:r> ; \\ \{ <var:r> = <var:O> \land <var:Q> = <nat:3> \cdot <var:O> + <nat:4> \} \\ <var:Q> := <nat:1> + <var:Q> * <var:r> ; \\ \{ <var:r> = <var:O> \land <var:Q> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:1> \} \\ <var:Q> := <nat:1> + <var:Q> * <var:r> ; \\ \{ <var:r> = <var:O> \land <var:Q> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:1> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:r> ; \\ \{ <var:r> = <var:O> \land <var:Q> = <nat:3> \cdot <var:O> ^ <nat:4> + <nat:4> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:4> \} \\ <var:Q> := <nat:3> + <var:Q> * <var:r> \\ \{ <var:r> = <var:O> \land <var:Q> = <nat:3> \cdot <var:O> ^ <nat:5> + <nat:4> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:3> \} \end{eqnarray} As a consequence , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:r> = <var:O> }} <var:Q> := <nat:3> ; <var:Q> := <nat:4> + <var:Q> * <var:r> ; <var:Q> := <nat:1> + <var:Q> * <var:r> ; <var:Q> := <nat:1> + <var:Q> * <var:r> ; <var:Q> := <nat:4> + <var:Q> * <var:r> ; <var:Q> := <nat:3> + <var:Q> * <var:r> {{ <var:Q> = <nat:3> * <var:O> ^ <nat:5> + <nat:4> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:Q> = <nat:3> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:Q> = <nat:3> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:Q> = <nat:3> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:Q> = <nat:3> * <var:O> ^ <nat:4> + <nat:4> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:Q> = <nat:3> * <var:O> ^ <nat:5> + <nat:4> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 