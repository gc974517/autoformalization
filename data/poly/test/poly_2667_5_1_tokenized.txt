\begin{document} \begin{theorem} Define a series of commands : \begin{verbatim} <var:L1> := <var:V> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:2> ; <var:q> := <var:L1> <var:q> := <var:q> + <var:L0> \end{verbatim} Assume for all $ <var:A> \in \mathbb{Z}^+ $ that $ <var:V> = <var:A> $ ahead of the evaluation of our segment of code it must be that we see $ <var:q> = <nat:2> * <var:A> + <nat:3> $ when set of commands terminates . \end{theorem} \begin{proof} The proof of the program is evident by standard Hoare reasoning . Advancing on , we have the code letting $ <var:V> $ into $ <var:L1>$ . This moves the condition $ \{ <var:V> = <var:A> \} $ toward the condition $ \{ <var:V> = <var:A> \land <var:L1> = <var:A> \} $ . Next , the line defining $ <nat:3> $ toward $ <var:L0>$ . This moves $ \{ <var:V> = <var:A> \land <var:L1> = <var:A> \} $ into the condition $ \{ <var:V> = <var:A> \land <var:L1> = <var:A> \land <var:L0> = <nat:3> \} $ . Jumping to the following bit of code in the program , we have the binding code letting $ <var:L1> * <nat:2> $ into $ <var:L1>$ . This redefines the precondition $ \{ <var:V> = <var:A> \land <var:L1> = <var:A> \land <var:L0> = <nat:3> \} $ as $ \{ <var:V> = <var:A> \land <var:L1> = <nat:2> \times <var:A> \land <var:L0> = <nat:3> \} $ . Stepping forward , the assignment line \verb | <var:q> := <var:L1> | . This takes the precondition $ \{ <var:V> = <var:A> \land <var:L1> = <nat:2> \times <var:A> \land <var:L0> = <nat:3> \} $ as the condition $ \{ <var:V> = <var:A> \land <var:L0> = <nat:3> \land <var:q> = <nat:2> \times <var:A> \} $ . This is guaranteed through the assignment inference rule defined by Hoare reasoning . Moving on to the next step , the variable update code \verb | <var:q> := <var:q> + <var:L0> | . This advances $ \{ <var:V> = <var:A> \land <var:L0> = <nat:3> \land <var:q> = <nat:2> \times <var:A> \} $ toward the postcondition $ \{ <var:V> = <var:A> \land <var:q> = <nat:2> \times <var:A> + <nat:3> \} $ . This is given through the assignment rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:V> = <var:A> }} <var:L1> := <var:V> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:2> ; <var:q> := <var:L1> <var:q> := <var:q> + <var:L0> {{ <var:q> = <nat:2> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:L1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:L1> = <var:A> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:L1> = <nat:2> * <var:A> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:L0> = <nat:3> /\ <var:q> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:q> = <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 