\begin{document} \begin{theorem} Consider the following set of commands : \begin{verbatim} <var:A0> := <nat:2> ; <var:A1> := <nat:7> ; <var:A1> := <var:A1> * <var:K> ; <var:A2> := <nat:9> ; <var:A2> := <var:A2> * <var:K> ; <var:A2> := <var:A2> * <var:K> ; <var:A3> := <nat:3> ; <var:A3> := <var:A3> * <var:K> ; <var:A3> := <var:A3> * <var:K> ; <var:A3> := <var:A3> * <var:K> ; <var:P> := <var:A3> ; <var:P> := <var:P> + <var:A2> ; <var:P> := <var:P> + <var:A1> ; <var:P> := <var:P> + <var:A0> \end{verbatim} Allow , given all whole numbers $ <var:x> $ , it to hold that $ <var:K> = <var:x> $ before the execution of the list of instructions , it must be that we see $ <var:P> = <nat:3> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:2> $ . \end{theorem} \begin{proof} We can see that the following decorated series of commands . \begin{eqnarray} \{ <var:K> = <var:x> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \} \end{eqnarray} Allowing evaluating our segment of code gives us : \begin{eqnarray} <var:A1> := <nat:7> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \} \\ <var:A1> := <var:A1> * <var:K> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \} \\ <var:A2> := <nat:9> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:A2> = <nat:9> \} \\ <var:A2> := <var:A2> * <var:K> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:A2> = <nat:9> \cdot <var:x> \} \\ <var:A2> := <var:A2> * <var:K> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:A2> = <nat:9> \cdot <var:x> ^ <nat:2> \} \\ <var:A3> := <nat:3> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:A2> = <nat:9> \cdot <var:x> ^ <nat:2> \land <var:A3> = <nat:3> \} \\ <var:A3> := <var:A3> * <var:K> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:A2> = <nat:9> \cdot <var:x> ^ <nat:2> \land <var:A3> = <nat:3> \cdot <var:x> \} \\ <var:A3> := <var:A3> * <var:K> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:A2> = <nat:9> \cdot <var:x> ^ <nat:2> \land <var:A3> = <nat:3> \cdot <var:x> ^ <nat:2> \} \\ <var:A3> := <var:A3> * <var:K> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:A2> = <nat:9> \cdot <var:x> ^ <nat:2> \land <var:A3> = <nat:3> \cdot <var:x> ^ <nat:3> \} \\ <var:P> := <var:A3> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:A2> = <nat:9> \cdot <var:x> ^ <nat:2> \land <var:P> = <nat:3> \cdot <var:x> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:A2> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:A1> = <nat:7> \cdot <var:x> \land <var:P> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:9> \cdot <var:x> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:A1> ; \\ \{ <var:K> = <var:x> \land <var:A0> = <nat:2> \land <var:P> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:9> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> \} \\ <var:P> := <var:P> + <var:A0> \\ \{ <var:K> = <var:x> \land <var:P> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:9> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> + <nat:2> \} \end{eqnarray} Utilizing Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:K> = <var:x> }} <var:A0> := <nat:2> ; <var:A1> := <nat:7> ; <var:A1> := <var:A1> * <var:K> ; <var:A2> := <nat:9> ; <var:A2> := <var:A2> * <var:K> ; <var:A2> := <var:A2> * <var:K> ; <var:A3> := <nat:3> ; <var:A3> := <var:A3> * <var:K> ; <var:A3> := <var:A3> * <var:K> ; <var:A3> := <var:A3> * <var:K> ; <var:P> := <var:A3> ; <var:P> := <var:P> + <var:A2> ; <var:P> := <var:P> + <var:A1> ; <var:P> := <var:P> + <var:A0> {{ <var:P> = <nat:3> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:A2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:A2> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:A2> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:A2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:A3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:A2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:A2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:A2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:A2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:P> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:7> * <var:x> /\ <var:P> = <nat:3> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:A0> = <nat:2> /\ <var:P> = <nat:3> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:P> = <nat:3> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 