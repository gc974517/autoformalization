\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:4> ; <var:t1> := <nat:6> ; <var:t1> := <var:t1> * <var:S> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:S> ; <var:t2> := <var:t2> * <var:S> ; <var:s> := <var:t2> ; <var:s> := <var:s> + <var:t1> ; <var:s> := <var:s> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:S> = <var:e> $ ahead of the execution of this series of instructions it holds that we see $ <var:s> = <nat:7> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare techniques results in : \begin{eqnarray} \{ <var:S> = <var:e> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:S> = <var:e> \land <var:t0> = <nat:4> \} \\ <var:t1> := <nat:6> ; \\ \{ <var:S> = <var:e> \land <var:t0> = <nat:4> \land <var:t1> = <nat:6> \} \\ <var:t1> := <var:t1> * <var:S> ; \\ \{ <var:S> = <var:e> \land <var:t0> = <nat:4> \land <var:t1> = <nat:6> \cdot <var:e> \} \\ <var:t2> := <nat:7> ; \\ \{ <var:S> = <var:e> \land <var:t0> = <nat:4> \land <var:t1> = <nat:6> \cdot <var:e> \land <var:t2> = <nat:7> \} \\ <var:t2> := <var:t2> * <var:S> ; \\ \{ <var:S> = <var:e> \land <var:t0> = <nat:4> \land <var:t1> = <nat:6> \cdot <var:e> \land <var:t2> = <nat:7> \cdot <var:e> \} \\ <var:t2> := <var:t2> * <var:S> ; \\ \{ <var:S> = <var:e> \land <var:t0> = <nat:4> \land <var:t1> = <nat:6> \cdot <var:e> \land <var:t2> = <nat:7> \cdot <var:e> ^ <nat:2> \} \\ <var:s> := <var:t2> ; \\ \{ <var:S> = <var:e> \land <var:t0> = <nat:4> \land <var:t1> = <nat:6> \cdot <var:e> \land <var:s> = <nat:7> \cdot <var:e> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:t1> ; \\ \{ <var:S> = <var:e> \land <var:t0> = <nat:4> \land <var:s> = <nat:7> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> \} \\ <var:s> := <var:s> + <var:t0> \\ \{ <var:S> = <var:e> \land <var:s> = <nat:7> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> + <nat:4> \} \end{eqnarray} Considering the above , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:4> ; <var:t1> := <nat:6> ; <var:t1> := <var:t1> * <var:S> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:S> ; <var:t2> := <var:t2> * <var:S> ; <var:s> := <var:t2> ; <var:s> := <var:s> + <var:t1> ; <var:s> := <var:s> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:S> = <var:e> }} <def:poly> {{ <var:s> = <nat:7> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:6> * <var:e> /\ <var:t2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:6> * <var:e> /\ <var:t2> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:6> * <var:e> /\ <var:t2> = <nat:7> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:6> * <var:e> /\ <var:s> = <nat:7> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t0> = <nat:4> /\ <var:s> = <nat:7> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:s> = <nat:7> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 