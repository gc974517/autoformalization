\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:9> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:T> ; <var:Q> := <var:b1> ; <var:Q> := <var:Q> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:T> = <var:G> $ ahead of the execution of this code segment , then $ <var:Q> = <nat:7> \cdot <var:G> + <nat:9> $ . \end{theorem} \begin{proof} The argument for our code can be seen through typical Hoare reasoning . Immediately following , \begin{verbatim} { <var:T> = <var:G> } <var:b0> := <nat:9> { <var:T> = <var:G> \land <var:b0> = <nat:9> } { <var:T> = <var:G> \land <var:b0> = <nat:9> } <var:b1> := <nat:7> { <var:T> = <var:G> \land <var:b0> = <nat:9> \land <var:b1> = <nat:7> } { <var:T> = <var:G> \land <var:b0> = <nat:9> \land <var:b1> = <nat:7> } <var:b1> := <var:b1> * <var:T> { <var:T> = <var:G> \land <var:b0> = <nat:9> \land <var:b1> = <nat:7> \times <var:G> } \end{verbatim} This is given by the variable update rule given by Hoare logic . Focusing on the next lines seen in our segment of code , we have \begin{verbatim} { <var:T> = <var:G> } <var:b0> := <nat:9> { <var:T> = <var:G> \land <var:b0> = <nat:9> } { <var:T> = <var:G> \land <var:b0> = <nat:9> } <var:b1> := <nat:7> { <var:T> = <var:G> \land <var:b0> = <nat:9> \land <var:b1> = <nat:7> } \end{verbatim} This is guaranteed using the binding rule defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:9> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:T> ; <var:Q> := <var:b1> ; <var:Q> := <var:Q> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:T> = <var:G> }} <def:poly> {{ <var:Q> = <nat:7> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:b0> = <nat:9> /\ <var:Q> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:Q> = <nat:7> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 