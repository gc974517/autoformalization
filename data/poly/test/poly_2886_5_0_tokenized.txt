\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:L> ; <var:O> := <var:c1> ; <var:O> := <var:O> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allowing that $ <var:L> = <var:e> $ before evaluating the series of instructions it must be that we have $ <var:O> = <nat:7> * <var:e> + <nat:3> $ once segment of code has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:e> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:L> = <var:e> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:7> ; \\ \{ <var:L> = <var:e> \land <var:c0> = <nat:3> \land <var:c1> = <nat:7> \} \\ <var:c1> := <var:c1> * <var:L> ; \\ \{ <var:L> = <var:e> \land <var:c0> = <nat:3> \land <var:c1> = <nat:7> * <var:e> \} \\ <var:O> := <var:c1> ; \\ \{ <var:L> = <var:e> \land <var:c0> = <nat:3> \land <var:O> = <nat:7> * <var:e> \} \\ <var:O> := <var:O> + <var:c0> \\ \{ <var:L> = <var:e> \land <var:O> = <nat:7> * <var:e> + <nat:3> \} \end{eqnarray} The application of Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:L> ; <var:O> := <var:c1> ; <var:O> := <var:O> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:L> = <var:e> }} <def:poly> {{ <var:O> = <nat:7> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:c0> = <nat:3> /\ <var:O> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:O> = <nat:7> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 