\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:q> ; <var:m2> := <var:m1> * <var:q> ; <var:m0> := <nat:3> ; <var:m2> := <var:m2> * <nat:5> ; <var:R> := <var:m2> <var:R> := <var:R> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:q> = <var:y> $ before the evaluation of our set of commands , it must be that $ <var:R> = <nat:5> \times <var:y> ^ <nat:2> + <nat:3> $ after code has terminated . \end{theorem} \begin{proof} The course of logic for this list of commands is given with Hoare techniques . Jumping to the subsequent command in our set of commands , we have the variable binding statement binding $ <var:q> $ to $ <var:m1>$ . This code redefines the precondition $ \{ <var:q> = <var:y> \} $ to $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \} $ . This is sound through the assignment law given by usual Hoare logic . Moving on , we see the statement assigning $ <var:m1> * <var:q> $ into $ <var:m2>$ . This transfers the precondition $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \} $ to the postcondition $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <var:y> ^ <nat:2> \} $ . This is sound with the assignment inference rule given by Hoare reasoning . Following , the line defining $ <nat:3> $ as $ <var:m0>$ . This transfers the precondition $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <var:y> ^ <nat:2> \} $ into the condition $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <var:y> ^ <nat:2> \land <var:m0> = <nat:3> \} $ . Stepping through , we see the binding line \verb | <var:m2> := <var:m2> * <nat:5> ; | . This code forwards $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <var:y> ^ <nat:2> \land <var:m0> = <nat:3> \} $ to the postcondition $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <nat:5> \cdot <var:y> ^ <nat:2> \land <var:m0> = <nat:3> \} $ . Moving forward to the upcoming command seen in the segment of code , we see the variable assignmet statement \verb | <var:R> := <var:m2> | . This moves the condition $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <nat:5> \cdot <var:y> ^ <nat:2> \land <var:m0> = <nat:3> \} $ to $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \land <var:m0> = <nat:3> \land <var:R> = <nat:5> \cdot <var:y> ^ <nat:2> \} $ . This is known to be sound using the assignment law defined in standard Hoare logic . Taking a look at the following command in our series of commands , we have the code \verb | <var:R> := <var:R> + <var:m0> | . This takes the precondition $ \{ <var:q> = <var:y> \land <var:m1> = <var:y> \land <var:m0> = <nat:3> \land <var:R> = <nat:5> \cdot <var:y> ^ <nat:2> \} $ to the postcondition $ \{ <var:q> = <var:y> \land <var:R> = <nat:5> \cdot <var:y> ^ <nat:2> + <nat:3> \} $ . This is deduced using the assignment law of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m1> := <var:q> ; <var:m2> := <var:m1> * <var:q> ; <var:m0> := <nat:3> ; <var:m2> := <var:m2> * <nat:5> ; <var:R> := <var:m2> <var:R> := <var:R> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:q> = <var:y> }} <def:poly> {{ <var:R> = <nat:5> * <var:y> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:m1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:m1> = <var:y> /\ <var:m2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:m1> = <var:y> /\ <var:m2> = <var:y> ^ <nat:2> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:m1> = <var:y> /\ <var:m2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:m1> = <var:y> /\ <var:m0> = <nat:3> /\ <var:R> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:R> = <nat:5> * <var:y> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 