\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:2> + <var:k> * <var:e> ; <var:k> := <nat:1> + <var:k> * <var:e> ; <var:k> := <nat:3> + <var:k> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Allowing that we have $ <var:e> = <var:o> $ , for integers $ <var:o> $ , prior to the execution of this series of commands , it holds that we have $ <var:k> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be done by usual Hoare reasoning . Considering the subsequent steps contained in the segment of code , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:o> \} & <var:k> := <nat:3> & \{ <var:e> = <var:o> \land <var:k> = <nat:3> \} \\ \{ <var:e> = <var:o> \land <var:k> = <nat:3> \} & <var:k> := <nat:2> + <var:k> * <var:e> & \{ <var:e> = <var:o> \land <var:k> = <nat:3> \times <var:o> + <nat:2> \} \end{tabular} Observing the following bit of code seen in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:o> \} & <var:k> := <nat:3> & \{ <var:e> = <var:o> \land <var:k> = <nat:3> \} \end{tabular} This is sound with the assignment rule given by Hoare reasoning . Taking a look at the subsequent line seen in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:o> \} & <var:k> := <nat:3> & \{ <var:e> = <var:o> \land <var:k> = <nat:3> \} \end{tabular} This is known to be sound using the binding inference rule of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:2> + <var:k> * <var:e> ; <var:k> := <nat:1> + <var:k> * <var:e> ; <var:k> := <nat:3> + <var:k> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:e> = <var:o> }} <def:poly> {{ <var:k> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:k> = <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:k> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:k> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 