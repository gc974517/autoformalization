\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:1> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:g> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:g> ; <var:p2> := <var:p2> * <var:g> ; <var:p3> := <nat:9> ; <var:p3> := <var:p3> * <var:g> ; <var:p3> := <var:p3> * <var:g> ; <var:p3> := <var:p3> * <var:g> ; <var:M> := <var:p3> ; <var:M> := <var:M> + <var:p2> ; <var:M> := <var:M> + <var:p1> ; <var:M> := <var:M> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Assuming --- taking $ <var:m> $ --- $ <var:g> = <var:m> $ prior to evaluating our series of commands , it must be that $ <var:M> = <nat:9> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> $ when list of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions is clear with typical Hoare reasoning . Jumping to the proceeding line contained in the set of instructions , the variable update command \verb | <var:p0> := <nat:1> ; | . This advances the precondition $ \{ <var:g> = <var:m> \} $ to the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \} $ . This is deduced using the assignment law given in usual Hoare techniques . Moving forward to the proceeding piece of code contained in our program , we have the variable update command defining $ <nat:1> $ as $ <var:p1>$ . This command advances the precondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \} $ into $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \} $ . This is ensured with the assignment inference rule of typical Hoare techniques . Advancing to the following piece of code seen in the code , we see the line \verb | <var:p1> := <var:p1> * <var:g> ; | . This code forwards $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \} $ to the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \} $ . Moving forward to the following line of code found in our program , we see the variable assignmet code \verb | <var:p2> := <nat:4> ; | . This moves the precondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \} $ into $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \} $ . Advancing on , we see the binding code \verb | <var:p2> := <var:p2> * <var:g> ; | . This statement forwards the precondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \} $ toward the postcondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> \} $ . Keeping momentum , the binding code \verb | <var:p2> := <var:p2> * <var:g> ; | . This advances $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> \} $ toward the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \} $ . This is given through the assignment scheme defined by standard Hoare techniques . Considering the upcoming line in the series of instructions , we see the variable assignmet command giving $ <nat:9> $ toward $ <var:p3>$ . This moves $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \} $ toward $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:p3> = <nat:9> \} $ . Moving on to the next step , the environment update code \verb | <var:p3> := <var:p3> * <var:g> ; | . This redefines the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:p3> = <nat:9> \} $ to the postcondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:m> \} $ . This is shown using the assignment rule defined by usual Hoare techniques . Shifting focus toward the proceeding line found in our set of instructions , we see the variable update statement yielding $ <var:p3> * <var:g> $ into $ <var:p3>$ . This forwards the precondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:m> \} $ into the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:m> ^ <nat:2> \} $ . This is guaranteed by the assignment law defined in usual Hoare reasoning . Advancing to the proceeding step found in the program , we see the variable update statement giving $ <var:p3> * <var:g> $ toward $ <var:p3>$ . This moves the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:m> ^ <nat:2> \} $ toward the postcondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:m> ^ <nat:3> \} $ . Focusing on the next step seen in our series of instructions , we see the variable assignmet statement assigning $ <var:p3> $ toward $ <var:M>$ . This forwards the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:p3> = <nat:9> \times <var:m> ^ <nat:3> \} $ into the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:M> = <nat:9> \times <var:m> ^ <nat:3> \} $ . Honing in on the proceeding step in the series of commands , we have the command letting $ <var:M> + <var:p2> $ to $ <var:M>$ . This takes the precondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:p2> = <nat:4> \times <var:m> ^ <nat:2> \land <var:M> = <nat:9> \times <var:m> ^ <nat:3> \} $ to $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:M> = <nat:9> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> \} $ . Moving onward , we see the binding code defining $ <var:M> + <var:p1> $ into $ <var:M>$ . This transfers the condition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:m> \land <var:M> = <nat:9> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> \} $ as the postcondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:M> = <nat:9> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> \} $ . Moving on to the subsequent command found in the series of commands , we have the variable binding code \verb | <var:M> := <var:M> + <var:p0> | . This advances the precondition $ \{ <var:g> = <var:m> \land <var:p0> = <nat:1> \land <var:M> = <nat:9> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> \} $ into the condition $ \{ <var:g> = <var:m> \land <var:M> = <nat:9> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:1> \} $ . This is deduced by the assignment law in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p0> := <nat:1> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:g> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:g> ; <var:p2> := <var:p2> * <var:g> ; <var:p3> := <nat:9> ; <var:p3> := <var:p3> * <var:g> ; <var:p3> := <var:p3> * <var:g> ; <var:p3> := <var:p3> * <var:g> ; <var:M> := <var:p3> ; <var:M> := <var:M> + <var:p2> ; <var:M> := <var:M> + <var:p1> ; <var:M> := <var:M> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:g> = <var:m> }} <def:poly> {{ <var:M> = <nat:9> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:p2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:p2> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:M> = <nat:9> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:m> /\ <var:M> = <nat:9> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p0> = <nat:1> /\ <var:M> = <nat:9> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:M> = <nat:9> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 