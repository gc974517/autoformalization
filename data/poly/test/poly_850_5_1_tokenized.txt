\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:b1> := <var:j> ; <var:b0> := <nat:6> ; <var:b1> := <var:b1> * <nat:1> ; <var:v> := <var:b1> <var:v> := <var:v> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assuming for any natural numbers $ <var:u> $ $ <var:j> = <var:u> $ before the evaluation of the code segment it holds that we have $ <var:v> = <nat:1> * <var:u> + <nat:6> $ when set of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:u> \} \\ <var:b1> := <var:j> ; \\ \{ <var:j> = <var:u> \land <var:b1> = <var:u> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:j> = <var:u> \land <var:b1> = <var:u> \land <var:b0> = <nat:6> \} \\ <var:b1> := <var:b1> * <nat:1> ; \\ \{ <var:j> = <var:u> \land <var:b1> = <nat:1> \cdot <var:u> \land <var:b0> = <nat:6> \} \\ <var:v> := <var:b1> \\ \{ <var:j> = <var:u> \land <var:b0> = <nat:6> \land <var:v> = <nat:1> \cdot <var:u> \} \\ <var:v> := <var:v> + <var:b0> \\ \{ <var:j> = <var:u> \land <var:v> = <nat:1> \cdot <var:u> + <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:j> ; <var:b0> := <nat:6> ; <var:b1> := <var:b1> * <nat:1> ; <var:v> := <var:b1> <var:v> := <var:v> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:j> = <var:u> }} <def:poly> {{ <var:v> = <nat:1> * <var:u> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:b1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:b1> = <var:u> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:b1> = <nat:1> * <var:u> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:b0> = <nat:6> /\ <var:v> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:v> = <nat:1> * <var:u> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 