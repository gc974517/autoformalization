\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:7> ; <var:M> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allowing , assuming some positive integer coefficients $ <var:A> $ , it to hold that $ <var:B> = <var:A> $ prior to the execution of our series of instructions , it holds that we have $ <var:M> = <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is evident by typical Hoare logic . Going forward , \[ \begin{tabular} {rcl} \{ <var:B> = <var:A> \} & <var:O0> := <nat:7> & \{ <var:B> = <var:A> \land <var:O0> = <nat:7> \} \\ \{ <var:B> = <var:A> \land <var:O0> = <nat:7> \} & <var:M> := <var:O0& \{ <var:B> = <var:A> \land <var:M> = <nat:7> \} \end{tabular} This is rigorously given through the variable update rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:7> ; <var:M> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:B> = <var:A> }} <def:poly> {{ <var:M> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:M> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 