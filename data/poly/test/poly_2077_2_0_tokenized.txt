\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:4> ; <var:F> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Allowing that $ <var:n> = <var:G> $ prior to running the list of instructions it follows that we have $ <var:F> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions can be accomplished by typical Hoare logic . Stepping forward , the variable update line letting $ <nat:4> $ into $ <var:Z0>$ . This advances the condition $ \{ <var:n> = <var:G> \} $ as $ \{ <var:n> = <var:G> \land <var:Z0> = <nat:4> \} $ . This is rigorously given using the assignment inference rule from Hoare reasoning . Next , we see the variable binding command giving $ <var:Z0$ toward $ <var:F>$ . This command takes $ \{ <var:n> = <var:G> \land <var:Z0> = <nat:4> \} $ as the postcondition $ \{ <var:n> = <var:G> \land <var:F> = <nat:4> \} $ . This is rigorously given by the assignment rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:4> ; <var:F> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:n> = <var:G> }} <def:poly> {{ <var:F> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:F> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 