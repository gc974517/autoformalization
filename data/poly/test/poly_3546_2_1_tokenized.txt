\begin{document} \begin{theorem} Take the following series of commands : \begin{verbatim} <var:W0> := <nat:1> ; <var:D> := <var:W0> \end{verbatim} Given that $ <var:n> = <var:Z> $ , assuming some whole numbers $ <var:Z> $ , prior to executing the series of commands then $ <var:D> = <nat:1> $ once set of instructions exits . \end{theorem} \begin{proof} Using typical Hoare logic returns : \begin{eqnarray} \{ <var:n> = <var:Z> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:n> = <var:Z> \land <var:W0> = <nat:1> \} \\ <var:D> := <var:W0> \\ \{ <var:n> = <var:Z> \land <var:D> = <nat:1> \} \end{eqnarray} Given the preceding argument , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <var:W0> := <nat:1> ; <var:D> := <var:W0> {{ <var:D> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 