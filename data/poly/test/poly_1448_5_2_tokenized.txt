\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o> := <nat:3> ; <var:o> := <var:o> * <var:M> ; <var:o> := <nat:4> + <var:o> * <var:M> ; <var:o> := <nat:2> + <var:o> * <var:M> ; <var:o> := <nat:3> + <var:o> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Allow $ <var:M> = <var:h> $ before running the series of commands , it follows that we see $ <var:o> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning yields : \begin{eqnarray} \{ <var:M> = <var:h> \} \\ <var:o> := <nat:3> ; \\ \{ <var:M> = <var:h> \land <var:o> = <nat:3> \} \\ <var:o> := <var:o> * <var:M> ; \\ \{ <var:M> = <var:h> \land <var:o> = <nat:3> * <var:h> + \} \\ <var:o> := <nat:4> + <var:o> * <var:M> ; \\ \{ <var:M> = <var:h> \land <var:o> = <nat:3> * <var:h> ^ <nat:2> + <nat:4> \} \\ <var:o> := <nat:2> + <var:o> * <var:M> ; \\ \{ <var:M> = <var:h> \land <var:o> = <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> + <nat:2> \} \\ <var:o> := <nat:3> + <var:o> * <var:M> \\ \{ <var:M> = <var:h> \land <var:o> = <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:3> ; <var:o> := <var:o> * <var:M> ; <var:o> := <nat:4> + <var:o> * <var:M> ; <var:o> := <nat:2> + <var:o> * <var:M> ; <var:o> := <nat:3> + <var:o> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:M> = <var:h> }} <def:poly> {{ <var:o> = <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:o> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:o> = <nat:3> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:o> = <nat:3> * <var:h> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:o> = <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:o> = <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 