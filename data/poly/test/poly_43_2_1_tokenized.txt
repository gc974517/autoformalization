\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:2> ; <var:o> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Allowing , taking whole numbers $ <var:t> $ , that we have $ <var:w> = <var:t> $ prior to the evaluation of this list of instructions , then $ <var:o> = <nat:2> $ after code has terminated . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:w> = <var:t> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:w> = <var:t> \land <var:u0> = <nat:2> \} \\ <var:o> := <var:u0> \\ \{ <var:w> = <var:t> \land <var:o> = <nat:2> \} \end{eqnarray} Considering the preceding argument , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:2> ; <var:o> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:w> = <var:t> }} <def:poly> {{ <var:o> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:o> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 