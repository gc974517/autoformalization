\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:H> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:H> ; <var:P2> := <var:P2> * <var:H> ; <var:P3> := <nat:5> ; <var:P3> := <var:P3> * <var:H> ; <var:P3> := <var:P3> * <var:H> ; <var:P3> := <var:P3> * <var:H> ; <var:t> := <var:P3> ; <var:t> := <var:t> + <var:P2> ; <var:t> := <var:t> + <var:P1> ; <var:t> := <var:t> + <var:P0> \end{verbatim} Allow --- assuming some positive integers $ <var:w> $ --- it to hold that $ <var:H> = <var:w> $ before running the list of instructions , then $ <var:t> = <nat:5> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:w> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \} \\ <var:P1> := <nat:6> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \} \\ <var:P1> := <var:P1> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \} \\ <var:P2> := <nat:3> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:P2> = <nat:3> \} \\ <var:P2> := <var:P2> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:P2> = <nat:3> \times <var:w> \} \\ <var:P2> := <var:P2> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:P2> = <nat:3> \times <var:w> ^ <nat:2> \} \\ <var:P3> := <nat:5> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:P2> = <nat:3> \times <var:w> ^ <nat:2> \land <var:P3> = <nat:5> \} \\ <var:P3> := <var:P3> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:P2> = <nat:3> \times <var:w> ^ <nat:2> \land <var:P3> = <nat:5> \times <var:w> \} \\ <var:P3> := <var:P3> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:P2> = <nat:3> \times <var:w> ^ <nat:2> \land <var:P3> = <nat:5> \times <var:w> ^ <nat:2> \} \\ <var:P3> := <var:P3> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:P2> = <nat:3> \times <var:w> ^ <nat:2> \land <var:P3> = <nat:5> \times <var:w> ^ <nat:3> \} \\ <var:t> := <var:P3> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:P2> = <nat:3> \times <var:w> ^ <nat:2> \land <var:t> = <nat:5> \times <var:w> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:P2> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \times <var:w> \land <var:t> = <nat:5> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:P1> ; \\ \{ <var:H> = <var:w> \land <var:P0> = <nat:2> \land <var:t> = <nat:5> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + <nat:6> \times <var:w> \} \\ <var:t> := <var:t> + <var:P0> \\ \{ <var:H> = <var:w> \land <var:t> = <nat:5> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + <nat:6> \times <var:w> + <nat:2> \} \end{eqnarray} Utilizing Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:H> = <var:w> }} <var:P0> := <nat:2> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:H> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:H> ; <var:P2> := <var:P2> * <var:H> ; <var:P3> := <nat:5> ; <var:P3> := <var:P3> * <var:H> ; <var:P3> := <var:P3> * <var:H> ; <var:P3> := <var:P3> * <var:H> ; <var:t> := <var:P3> ; <var:t> := <var:t> + <var:P2> ; <var:t> := <var:t> + <var:P1> ; <var:t> := <var:t> + <var:P0> {{ <var:t> = <nat:5> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:P2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:P2> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:P2> = <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:P2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:P3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:P2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:P3> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:P2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:P3> = <nat:5> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:P2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:P3> = <nat:5> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:P2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:t> = <nat:5> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:w> /\ <var:t> = <nat:5> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:P0> = <nat:2> /\ <var:t> = <nat:5> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:t> = <nat:5> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 