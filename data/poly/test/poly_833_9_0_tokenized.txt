\begin{document} \begin{theorem} Define the following segment of code as \begin{verbatim} <var:o0> := <nat:2> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:n> ; <var:o2> := <nat:4> ; <var:o2> := <var:o2> * <var:n> ; <var:o2> := <var:o2> * <var:n> ; <var:b> := <var:o2> ; <var:b> := <var:b> + <var:o1> ; <var:b> := <var:b> + <var:o0> \end{verbatim} Allowing , given every whole numbers $ <var:y> $ , it to hold that $ <var:n> = <var:y> $ prior to the execution of the set of commands , it holds that we see $ <var:b> = <nat:4> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code is accomplished through typical Hoare logic . Considering the following statement found in the code , we see the command \verb | <var:o0> := <nat:2> ; | . This transfers the precondition $ \{ <var:n> = <var:y> \} $ toward $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \} $ . Shifting focus toward the upcoming statement found in the code segment , we see the variable update statement \verb | <var:o1> := <nat:1> ; | . This takes the precondition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \} $ to $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \} $ . Focusing on the upcoming step seen in the list of instructions , the variable assignmet line giving $ <var:o1> * <var:n> $ as $ <var:o1>$ . This statement transfers the condition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \} $ toward the condition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \} $ . This is known to be sound by the assignment law given in Hoare reasoning . Jumping to the proceeding command in the series of commands , we have the variable binding code assigning $ <nat:4> $ to $ <var:o2>$ . This redefines the precondition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \} $ into the condition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \land <var:o2> = <nat:4> \} $ . Further , we have the variable assignmet statement yielding $ <var:o2> * <var:n> $ toward $ <var:o2>$ . This statement forwards the condition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \land <var:o2> = <nat:4> \} $ into the condition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \land <var:o2> = <nat:4> \cdot <var:y> \} $ . This is guaranteed with the assignment inference rule from standard Hoare logic . Moving on , we have the assignment command \verb | <var:o2> := <var:o2> * <var:n> ; | . This statement redefines the condition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \land <var:o2> = <nat:4> \cdot <var:y> \} $ to the postcondition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \land <var:o2> = <nat:4> \cdot <var:y> ^ <nat:2> \} $ . Moving onward , the environment update line letting $ <var:o2> $ into $ <var:b>$ . This forwards the precondition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \land <var:o2> = <nat:4> \cdot <var:y> ^ <nat:2> \} $ to the postcondition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \land <var:b> = <nat:4> \cdot <var:y> ^ <nat:2> \} $ . Following , we see the assignment statement yielding $ <var:b> + <var:o1> $ toward $ <var:b>$ . This statement forwards $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:o1> = <nat:1> \cdot <var:y> \land <var:b> = <nat:4> \cdot <var:y> ^ <nat:2> \} $ as the condition $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:b> = <nat:4> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> \} $ . This is rigorously given by the assignment inference rule from Hoare reasoning . Now , we see the variable binding statement binding $ <var:b> + <var:o0$ toward $ <var:b>$ . This transfers $ \{ <var:n> = <var:y> \land <var:o0> = <nat:2> \land <var:b> = <nat:4> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> \} $ toward the postcondition $ \{ <var:n> = <var:y> \land <var:b> = <nat:4> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:n> = <var:y> }} <var:o0> := <nat:2> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:n> ; <var:o2> := <nat:4> ; <var:o2> := <var:o2> * <var:n> ; <var:o2> := <var:o2> * <var:n> ; <var:b> := <var:o2> ; <var:b> := <var:b> + <var:o1> ; <var:b> := <var:b> + <var:o0> {{ <var:b> = <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:1> * <var:y> /\ <var:o2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:1> * <var:y> /\ <var:o2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:1> * <var:y> /\ <var:o2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:1> * <var:y> /\ <var:b> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:o0> = <nat:2> /\ <var:b> = <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:b> = <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 