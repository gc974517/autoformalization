\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:4> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:r> ; <var:d> := <var:v1> ; <var:d> := <var:d> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Assume that $ <var:r> = <var:M> $ --- for whole numbers $ <var:M> $ --- before interpreting this set of instructions it holds that we see $ <var:d> = <nat:2> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:M> \} \\ <var:v0> := <nat:4> ; \\ \{ <var:r> = <var:M> \land <var:v0> = <nat:4> \} \\ <var:v1> := <nat:2> ; \\ \{ <var:r> = <var:M> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \} \\ <var:v1> := <var:v1> * <var:r> ; \\ \{ <var:r> = <var:M> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \cdot <var:M> \} \\ <var:d> := <var:v1> ; \\ \{ <var:r> = <var:M> \land <var:v0> = <nat:4> \land <var:d> = <nat:2> \cdot <var:M> \} \\ <var:d> := <var:d> + <var:v0> \\ \{ <var:r> = <var:M> \land <var:d> = <nat:2> \cdot <var:M> + <nat:4> \} \end{eqnarray} Using Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:r> ; <var:d> := <var:v1> ; <var:d> := <var:d> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:r> = <var:M> }} <def:poly> {{ <var:d> = <nat:2> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:v0> = <nat:4> /\ <var:d> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:d> = <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 