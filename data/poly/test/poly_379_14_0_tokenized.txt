\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:2> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:p> ; <var:Q2> := <nat:9> ; <var:Q2> := <var:Q2> * <var:p> ; <var:Q2> := <var:Q2> * <var:p> ; <var:Q3> := <nat:7> ; <var:Q3> := <var:Q3> * <var:p> ; <var:Q3> := <var:Q3> * <var:p> ; <var:Q3> := <var:Q3> * <var:p> ; <var:R> := <var:Q3> ; <var:R> := <var:R> + <var:Q2> ; <var:R> := <var:R> + <var:Q1> ; <var:R> := <var:R> + <var:Q0> \end{verbatim} Allow it to hold that $ <var:p> = <var:C> $ ahead of evaluating this code it must be that we have $ <var:R> = <nat:7> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this list of instructions can be given using Hoare reasoning . Focusing on the following line of code contained in our list of instructions , we have the variable update command letting $ <nat:2> $ toward $ <var:Q0>$ . This forwards $ \{ <var:p> = <var:C> \} $ as $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \} $ . This is deduced through the assignment scheme given by typical Hoare techniques . Moving on , the binding command \verb | <var:Q1> := <nat:9> ; | . This line advances the precondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \} $ as the postcondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \} $ . Moving forward to the next step , the statement \verb | <var:Q1> := <var:Q1> * <var:p> ; | . This statement advances the condition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \} $ to $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \} $ . This is known to be sound through the assignment scheme found in typical Hoare reasoning . Following , the variable update line assigning $ <nat:9> $ toward $ <var:Q2>$ . This transfers $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \} $ into the postcondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \} $ . Immediately following , we see the variable assignmet line \verb | <var:Q2> := <var:Q2> * <var:p> ; | . This moves the condition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \} $ to the postcondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> \} $ . Following , we see the environment update command letting $ <var:Q2> * <var:p> $ to $ <var:Q2>$ . This statement forwards the condition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> \} $ as the postcondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \} $ . This is shown using the assignment law found in usual Hoare reasoning . Now , we have the environment update line \verb | <var:Q3> := <nat:7> ; | . This transfers $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \} $ to $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \} $ . This is rigorously given through the assignment law in Hoare techniques . Moving onward , the assignment line \verb | <var:Q3> := <var:Q3> * <var:p> ; | . This transfers $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \} $ as the postcondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:C> \} $ . This is rigorously given by the assignment rule given by usual Hoare reasoning . Advancing , we see the assignment command binding $ <var:Q3> * <var:p> $ as $ <var:Q3>$ . This command transfers the precondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:C> \} $ to $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:C> ^ <nat:2> \} $ . Taking a look at the proceeding piece of code in the set of instructions , the variable update code giving $ <var:Q3> * <var:p> $ to $ <var:Q3>$ . This command redefines $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:C> ^ <nat:2> \} $ toward the condition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:C> ^ <nat:3> \} $ . This is shown by the assignment law given by usual Hoare logic . Paying attention to the subsequent piece of code in our set of commands , we have the variable assignmet statement letting $ <var:Q3> $ toward $ <var:R>$ . This line takes the precondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Q3> = <nat:7> \times <var:C> ^ <nat:3> \} $ into $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:R> = <nat:7> \times <var:C> ^ <nat:3> \} $ . Taking another step toward the following piece of code found in our set of instructions , we have the code \verb | <var:R> := <var:R> + <var:Q2> ; | . This takes the precondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:Q2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:R> = <nat:7> \times <var:C> ^ <nat:3> \} $ toward the condition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:R> = <nat:7> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme of usual Hoare logic . Advancing on , the binding statement yielding $ <var:R> + <var:Q1> $ as $ <var:R>$ . This forwards the precondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:9> \times <var:C> \land <var:R> = <nat:7> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> \} $ toward $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:R> = <nat:7> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> \} $ . This is guaranteed through the assignment scheme given by standard Hoare logic . Moving on , the binding code \verb | <var:R> := <var:R> + <var:Q0> | . This takes the precondition $ \{ <var:p> = <var:C> \land <var:Q0> = <nat:2> \land <var:R> = <nat:7> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> \} $ into $ \{ <var:p> = <var:C> \land <var:R> = <nat:7> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:p> = <var:C> }} <var:Q0> := <nat:2> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:p> ; <var:Q2> := <nat:9> ; <var:Q2> := <var:Q2> * <var:p> ; <var:Q2> := <var:Q2> * <var:p> ; <var:Q3> := <nat:7> ; <var:Q3> := <var:Q3> * <var:p> ; <var:Q3> := <var:Q3> * <var:p> ; <var:Q3> := <var:Q3> * <var:p> ; <var:R> := <var:Q3> ; <var:R> := <var:R> + <var:Q2> ; <var:R> := <var:R> + <var:Q1> ; <var:R> := <var:R> + <var:Q0> {{ <var:R> = <nat:7> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:Q2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Q3> = <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:Q2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:R> = <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:9> * <var:C> /\ <var:R> = <nat:7> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:Q0> = <nat:2> /\ <var:R> = <nat:7> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:R> = <nat:7> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 