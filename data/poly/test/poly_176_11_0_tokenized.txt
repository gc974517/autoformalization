\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:7> ; <var:S2> := <nat:2> ; <var:S2> := <var:S2> * <var:L> ; <var:S2> := <var:S2> * <var:L> ; <var:S3> := <nat:4> ; <var:S3> := <var:S3> * <var:L> ; <var:S3> := <var:S3> * <var:L> ; <var:S3> := <var:S3> * <var:L> ; <var:i> := <var:S3> ; <var:i> := <var:i> + <var:S2> ; <var:i> := <var:i> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:L> = <var:c> $ before the evaluation of this code , it must be that $ <var:i> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:7> $ once set of commands executes . \end{theorem} \begin{proof} The method of proof for our set of commands is shown with Hoare techniques . Advancing , the variable assignmet code \verb | <var:S0> := <nat:7> ; | . This command transfers the precondition $ \{ <var:L> = <var:c> \} $ toward the postcondition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \} $ . Moving forward , we have the statement assigning $ <nat:2> $ as $ <var:S2>$ . This command takes the condition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \} $ to the condition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> \} $ . This is sound through the assignment inference rule defined in usual Hoare techniques . Taking a look at the subsequent line of code found in our series of instructions , the binding code binding $ <var:S2> * <var:L> $ as $ <var:S2>$ . This advances $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> \} $ into the condition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> \} $ . Stepping through , the environment update line letting $ <var:S2> * <var:L> $ as $ <var:S2>$ . This command forwards the condition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> \} $ to $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \} $ . This is rigorously given using the assignment scheme given in standard Hoare logic . Next , the variable binding code \verb | <var:S3> := <nat:4> ; | . This code takes the precondition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \} $ as $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:S3> = <nat:4> \} $ . This is sound through the assignment law of typical Hoare reasoning . Looking at the subsequent step seen in our code segment , the variable update code \verb | <var:S3> := <var:S3> * <var:L> ; | . This advances $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:S3> = <nat:4> \} $ toward $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:S3> = <nat:4> * <var:c> \} $ . This is ensured by the assignment scheme found in usual Hoare logic . Considering the following statement seen in the code segment , we have the variable assignmet line \verb | <var:S3> := <var:S3> * <var:L> ; | . This moves the precondition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:S3> = <nat:4> * <var:c> \} $ to the postcondition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:S3> = <nat:4> * <var:c> ^ <nat:2> \} $ . This is rigorously given by the assignment law from Hoare logic . Paying attention to the subsequent statement contained in our list of commands , we see the line \verb | <var:S3> := <var:S3> * <var:L> ; | . This code takes the condition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:S3> = <nat:4> * <var:c> ^ <nat:2> \} $ as $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:S3> = <nat:4> * <var:c> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment law found in Hoare reasoning . Taking another step toward the next command in our set of commands , the variable binding line \verb | <var:i> := <var:S3> ; | . This transfers the precondition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:S3> = <nat:4> * <var:c> ^ <nat:3> \} $ toward the condition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:i> = <nat:4> * <var:c> ^ <nat:3> \} $ . This is shown using the assignment law obtained from typical Hoare reasoning . Keeping momentum , we have the variable binding code \verb | <var:i> := <var:i> + <var:S2> ; | . This forwards $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:S2> = <nat:2> * <var:c> ^ <nat:2> \land <var:i> = <nat:4> * <var:c> ^ <nat:3> \} $ to the condition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:i> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> \} $ . Shifting focus toward the proceeding statement seen in our series of commands , the command yielding $ <var:i> + <var:S0$ as $ <var:i>$ . This forwards the precondition $ \{ <var:L> = <var:c> \land <var:S0> = <nat:7> \land <var:i> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> \} $ as $ \{ <var:L> = <var:c> \land <var:i> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:7> \} $ . This is given by the assignment inference rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S0> := <nat:7> ; <var:S2> := <nat:2> ; <var:S2> := <var:S2> * <var:L> ; <var:S2> := <var:S2> * <var:L> ; <var:S3> := <nat:4> ; <var:S3> := <var:S3> * <var:L> ; <var:S3> := <var:S3> * <var:L> ; <var:S3> := <var:S3> * <var:L> ; <var:i> := <var:S3> ; <var:i> := <var:i> + <var:S2> ; <var:i> := <var:i> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:L> = <var:c> }} <def:poly> {{ <var:i> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:S2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:S2> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:S2> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:S2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:S3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:S2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:S2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:S2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:S2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:i> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:S0> = <nat:7> /\ <var:i> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:i> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 