\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:1> ; <var:Y> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:r> = <var:Q> $ before the evaluation of the list of commands , it follows that we see $ <var:Y> = <nat:1> $ once set of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:Q> \} \\ <var:f0> := <nat:1> ; \\ \{ <var:r> = <var:Q> \land <var:f0> = <nat:1> \} \\ <var:Y> := <var:f0> \\ \{ <var:r> = <var:Q> \land <var:Y> = <nat:1> \} \end{eqnarray} The application of Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:1> ; <var:Y> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:r> = <var:Q> }} <def:poly> {{ <var:Y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Q> /\ <var:Y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 