\begin{document} \begin{theorem} Take the following program : \begin{verbatim} <var:s1> := <var:V> ; <var:s2> := <var:s1> * <var:V> ; <var:s0> := <nat:5> ; <var:s2> := <var:s2> * <nat:7> ; <var:A> := <var:s2> <var:A> := <var:A> + <var:s0> \end{verbatim} Given that $ <var:V> = <var:F> $ ahead of the evaluation of the set of commands , it must be that we have $ <var:A> = <nat:7> * <var:F> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:V> = <var:F> \} \\ <var:s1> := <var:V> ; \\ \{ <var:V> = <var:F> \land <var:s1> = <var:F> \} \\ <var:s2> := <var:s1> * <var:V> ; \\ \{ <var:V> = <var:F> \land <var:s1> = <var:F> \land <var:s2> = <var:F> ^ <nat:2> \} \\ <var:s0> := <nat:5> ; \\ \{ <var:V> = <var:F> \land <var:s1> = <var:F> \land <var:s2> = <var:F> ^ <nat:2> \land <var:s0> = <nat:5> \} \\ <var:s2> := <var:s2> * <nat:7> ; \\ \{ <var:V> = <var:F> \land <var:s1> = <var:F> \land <var:s2> = <nat:7> \cdot <var:F> ^ <nat:2> \land <var:s0> = <nat:5> \} \\ <var:A> := <var:s2> \\ \{ <var:V> = <var:F> \land <var:s1> = <var:F> \land <var:s0> = <nat:5> \land <var:A> = <nat:7> \cdot <var:F> ^ <nat:2> \} \end{eqnarray} Advancing the evaluation of our set of instructions gives us : \begin{eqnarray} <var:A> := <var:A> + <var:s0> \\ \{ <var:V> = <var:F> \land <var:A> = <nat:7> \cdot <var:F> ^ <nat:2> + <nat:5> \} \end{eqnarray} Considering the above , our set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:V> = <var:F> }} <var:s1> := <var:V> ; <var:s2> := <var:s1> * <var:V> ; <var:s0> := <nat:5> ; <var:s2> := <var:s2> * <nat:7> ; <var:A> := <var:s2> <var:A> := <var:A> + <var:s0> {{ <var:A> = <nat:7> * <var:F> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:s1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:s1> = <var:F> /\ <var:s2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:s1> = <var:F> /\ <var:s2> = <var:F> ^ <nat:2> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:s1> = <var:F> /\ <var:s2> = <nat:7> * <var:F> ^ <nat:2> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:s1> = <var:F> /\ <var:s0> = <nat:5> /\ <var:A> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:A> = <nat:7> * <var:F> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 