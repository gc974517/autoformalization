\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:N> ; <var:m2> := <var:m1> * <var:N> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:9> ; <var:m2> := <var:m2> * <nat:1> ; <var:L> := <var:m2> <var:L> := <var:L> + <var:m1> <var:L> := <var:L> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Assuming that we have $ <var:N> = <var:U> $ before evaluating our program , then $ <var:L> = <nat:1> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is evident through usual Hoare techniques . Moving on to the next step , we have \verb | { <var:N> = <var:U> } <var:m1> := <var:N> { <var:N> = <var:U> \land <var:m1> = <var:U> } | and \verb | { <var:N> = <var:U> \land <var:m1> = <var:U> } <var:m2> := <var:m1> * <var:N> { <var:N> = <var:U> \land <var:m1> = <var:U> \land <var:m2> = <var:U> ^ <nat:2> } | . This is guaranteed with the assignment rule of Hoare techniques . Moving onward , \verb | { <var:N> = <var:U> } <var:m1> := <var:N> { <var:N> = <var:U> \land <var:m1> = <var:U> } | , \verb | { <var:N> = <var:U> \land <var:m1> = <var:U> } <var:m2> := <var:m1> * <var:N> { <var:N> = <var:U> \land <var:m1> = <var:U> \land <var:m2> = <var:U> ^ <nat:2> } | , \verb | { <var:N> = <var:U> \land <var:m1> = <var:U> \land <var:m2> = <var:U> ^ <nat:2> } <var:m0> := <nat:7> { <var:N> = <var:U> \land <var:m1> = <var:U> \land <var:m2> = <var:U> ^ <nat:2> \land <var:m0> = <nat:7> } | and \verb | { <var:N> = <var:U> \land <var:m1> = <var:U> \land <var:m2> = <var:U> ^ <nat:2> \land <var:m0> = <nat:7> } <var:m1> := <var:m1> * <nat:9> { <var:N> = <var:U> \land <var:m1> = <nat:9> \times <var:U> \land <var:m2> = <var:U> ^ <nat:2> \land <var:m0> = <nat:7> } | . Focusing on the following pieces of code in the set of commands , we have \verb | { <var:N> = <var:U> } <var:m1> := <var:N> { <var:N> = <var:U> \land <var:m1> = <var:U> } | and \verb | { <var:N> = <var:U> \land <var:m1> = <var:U> } <var:m2> := <var:m1> * <var:N> { <var:N> = <var:U> \land <var:m1> = <var:U> \land <var:m2> = <var:U> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m1> := <var:N> ; <var:m2> := <var:m1> * <var:N> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:9> ; <var:m2> := <var:m2> * <nat:1> ; <var:L> := <var:m2> <var:L> := <var:L> + <var:m1> <var:L> := <var:L> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:N> = <var:U> }} <def:poly> {{ <var:L> = <nat:1> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:m1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:m1> = <var:U> /\ <var:m2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:m1> = <var:U> /\ <var:m2> = <var:U> ^ <nat:2> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:m1> = <nat:9> * <var:U> /\ <var:m2> = <var:U> ^ <nat:2> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:m1> = <nat:9> * <var:U> /\ <var:m2> = <nat:1> * <var:U> ^ <nat:2> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:m1> = <nat:9> * <var:U> /\ <var:m0> = <nat:7> /\ <var:L> = <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:m0> = <nat:7> /\ <var:L> = <nat:1> * <var:U> ^ <nat:2> + <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:L> = <nat:1> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 