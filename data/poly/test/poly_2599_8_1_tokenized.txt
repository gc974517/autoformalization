\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:I> ; <var:W2> := <var:W1> * <var:I> ; <var:W0> := <nat:5> ; <var:W1> := <var:W1> * <nat:7> ; <var:W2> := <var:W2> * <nat:3> ; <var:b> := <var:W2> <var:b> := <var:b> + <var:W1> <var:b> := <var:b> + <var:W0> \end{verbatim} Allowing that we have $ <var:I> = <var:r> $ ahead of evaluating the code segment it follows that we have $ <var:b> = <nat:3> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> + <nat:5> $ after series of commands has executed . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives : \begin{eqnarray} \{ <var:I> = <var:r> \} \\ <var:W1> := <var:I> ; \\ \{ <var:I> = <var:r> \land <var:W1> = <var:r> \} \\ <var:W2> := <var:W1> * <var:I> ; \\ \{ <var:I> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \} \\ <var:W0> := <nat:5> ; \\ \{ <var:I> = <var:r> \land <var:W1> = <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W0> = <nat:5> \} \\ <var:W1> := <var:W1> * <nat:7> ; \\ \{ <var:I> = <var:r> \land <var:W1> = <nat:7> * <var:r> \land <var:W2> = <var:r> ^ <nat:2> \land <var:W0> = <nat:5> \} \\ <var:W2> := <var:W2> * <nat:3> ; \\ \{ <var:I> = <var:r> \land <var:W1> = <nat:7> * <var:r> \land <var:W2> = <nat:3> * <var:r> ^ <nat:2> \land <var:W0> = <nat:5> \} \\ <var:b> := <var:W2> \\ \{ <var:I> = <var:r> \land <var:W1> = <nat:7> * <var:r> \land <var:W0> = <nat:5> \land <var:b> = <nat:3> * <var:r> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:W1> \\ \{ <var:I> = <var:r> \land <var:W0> = <nat:5> \land <var:b> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> \} \\ <var:b> := <var:b> + <var:W0> \\ \{ <var:I> = <var:r> \land <var:b> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:5> \} \end{eqnarray} Furthering interpreting our code segment gives : \begin{eqnarray} \end{eqnarray} Thusly , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:I> = <var:r> }} <var:W1> := <var:I> ; <var:W2> := <var:W1> * <var:I> ; <var:W0> := <nat:5> ; <var:W1> := <var:W1> * <nat:7> ; <var:W2> := <var:W2> * <nat:3> ; <var:b> := <var:W2> <var:b> := <var:b> + <var:W1> <var:b> := <var:b> + <var:W0> {{ <var:b> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:W1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:W1> = <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:W1> = <nat:7> * <var:r> /\ <var:W2> = <var:r> ^ <nat:2> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:W1> = <nat:7> * <var:r> /\ <var:W2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:W1> = <nat:7> * <var:r> /\ <var:W0> = <nat:5> /\ <var:b> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:W0> = <nat:5> /\ <var:b> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:b> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 