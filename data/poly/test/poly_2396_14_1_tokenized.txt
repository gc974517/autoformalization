\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:V> ; <var:p2> := <var:p1> * <var:V> ; <var:p3> := <var:p2> * <var:V> ; <var:p4> := <var:p3> * <var:V> ; <var:p0> := <nat:9> ; <var:p1> := <var:p1> * <nat:6> ; <var:p2> := <var:p2> * <nat:2> ; <var:p3> := <var:p3> * <nat:6> ; <var:p4> := <var:p4> * <nat:6> ; <var:Y> := <var:p4> <var:Y> := <var:Y> + <var:p3> <var:Y> := <var:Y> + <var:p2> <var:Y> := <var:Y> + <var:p1> <var:Y> := <var:Y> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> in \emph{Imp} . Assuming that we have $ <var:V> = <var:a> $ prior to executing the set of commands it follows that we have $ <var:Y> = <nat:6> \times <var:a> ^ <nat:4> + <nat:6> \times <var:a> ^ <nat:3> + <nat:2> \times <var:a> ^ <nat:2> + <nat:6> \times <var:a> + <nat:9> $ once program has finished . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:V> = <var:a> \} \\ <var:p1> := <var:V> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <var:a> \} \\ <var:p2> := <var:p1> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <var:a> \land <var:p2> = <var:a> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p3> = <var:a> ^ <nat:3> \} \\ <var:p4> := <var:p3> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p3> = <var:a> ^ <nat:3> \land <var:p4> = <var:a> ^ <nat:4> \} \\ <var:p0> := <nat:9> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p3> = <var:a> ^ <nat:3> \land <var:p4> = <var:a> ^ <nat:4> \land <var:p0> = <nat:9> \} \\ <var:p1> := <var:p1> * <nat:6> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <nat:6> * <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p3> = <var:a> ^ <nat:3> \land <var:p4> = <var:a> ^ <nat:4> \land <var:p0> = <nat:9> \} \\ <var:p2> := <var:p2> * <nat:2> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <nat:6> * <var:a> \land <var:p2> = <nat:2> * <var:a> ^ <nat:2> \land <var:p3> = <var:a> ^ <nat:3> \land <var:p4> = <var:a> ^ <nat:4> \land <var:p0> = <nat:9> \} \\ <var:p3> := <var:p3> * <nat:6> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <nat:6> * <var:a> \land <var:p2> = <nat:2> * <var:a> ^ <nat:2> \land <var:p3> = <nat:6> * <var:a> ^ <nat:3> \land <var:p4> = <var:a> ^ <nat:4> \land <var:p0> = <nat:9> \} \\ <var:p4> := <var:p4> * <nat:6> ; \\ \{ <var:V> = <var:a> \land <var:p1> = <nat:6> * <var:a> \land <var:p2> = <nat:2> * <var:a> ^ <nat:2> \land <var:p3> = <nat:6> * <var:a> ^ <nat:3> \land <var:p4> = <nat:6> * <var:a> ^ <nat:4> \land <var:p0> = <nat:9> \} \\ <var:Y> := <var:p4> \\ \{ <var:V> = <var:a> \land <var:p1> = <nat:6> * <var:a> \land <var:p2> = <nat:2> * <var:a> ^ <nat:2> \land <var:p3> = <nat:6> * <var:a> ^ <nat:3> \land <var:p0> = <nat:9> \land <var:Y> = <nat:6> * <var:a> ^ <nat:4> \} \\ <var:Y> := <var:Y> + <var:p3> \\ \{ <var:V> = <var:a> \land <var:p1> = <nat:6> * <var:a> \land <var:p2> = <nat:2> * <var:a> ^ <nat:2> \land <var:p0> = <nat:9> \land <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:p2> \\ \{ <var:V> = <var:a> \land <var:p1> = <nat:6> * <var:a> \land <var:p0> = <nat:9> \land <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:p1> \\ \{ <var:V> = <var:a> \land <var:p0> = <nat:9> \land <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:6> * <var:a> \} \\ <var:Y> := <var:Y> + <var:p0> \\ \{ <var:V> = <var:a> \land <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:9> \} \end{eqnarray} As a result , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Definition <def:poly> := <var:p1> := <var:V> ; <var:p2> := <var:p1> * <var:V> ; <var:p3> := <var:p2> * <var:V> ; <var:p4> := <var:p3> * <var:V> ; <var:p0> := <nat:9> ; <var:p1> := <var:p1> * <nat:6> ; <var:p2> := <var:p2> * <nat:2> ; <var:p3> := <var:p3> * <nat:6> ; <var:p4> := <var:p4> * <nat:6> ; <var:Y> := <var:p4> <var:Y> := <var:Y> + <var:p3> <var:Y> := <var:Y> + <var:p2> <var:Y> := <var:Y> + <var:p1> <var:Y> := <var:Y> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:V> = <var:a> }} <def:poly> {{ <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <var:a> /\ <var:p2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p3> = <var:a> ^ <nat:3> /\ <var:p4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p3> = <var:a> ^ <nat:3> /\ <var:p4> = <var:a> ^ <nat:4> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <nat:6> * <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p3> = <var:a> ^ <nat:3> /\ <var:p4> = <var:a> ^ <nat:4> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <nat:6> * <var:a> /\ <var:p2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:p3> = <var:a> ^ <nat:3> /\ <var:p4> = <var:a> ^ <nat:4> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <nat:6> * <var:a> /\ <var:p2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:p3> = <nat:6> * <var:a> ^ <nat:3> /\ <var:p4> = <var:a> ^ <nat:4> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <nat:6> * <var:a> /\ <var:p2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:p3> = <nat:6> * <var:a> ^ <nat:3> /\ <var:p4> = <nat:6> * <var:a> ^ <nat:4> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <nat:6> * <var:a> /\ <var:p2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:p3> = <nat:6> * <var:a> ^ <nat:3> /\ <var:p0> = <nat:9> /\ <var:Y> = <nat:6> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <nat:6> * <var:a> /\ <var:p2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:p0> = <nat:9> /\ <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p1> = <nat:6> * <var:a> /\ <var:p0> = <nat:9> /\ <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:p0> = <nat:9> /\ <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:Y> = <nat:6> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 