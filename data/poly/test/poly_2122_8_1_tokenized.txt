\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S1> := <var:p> ; <var:S2> := <var:S1> * <var:p> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:6> ; <var:S2> := <var:S2> * <nat:6> ; <var:b> := <var:S2> <var:b> := <var:b> + <var:S1> <var:b> := <var:b> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:p> = <var:Y> $ --- given every whole numbers $ <var:Y> $ --- prior to executing the series of instructions it must be that we see $ <var:b> = <nat:6> \times <var:Y> ^ <nat:2> + <nat:6> \times <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be demonstrated through typical Hoare logic . Next , we have \begin{eqnarray} \{ <var:p> = <var:Y> \} \, <var:S1> := <var:p> \, \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \} \end{eqnarray} Advancing on , \begin{eqnarray} \{ <var:p> = <var:Y> \} \, <var:S1> := <var:p> \, \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \} \\ \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \} \, <var:S2> := <var:S1> * <var:p> \, \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \} \\ \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \} \, <var:S0> := <nat:3> \, \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S0> = <nat:3> \} \\ \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S0> = <nat:3> \} \, <var:S1> := <var:S1> * <nat:6> \, \{ <var:p> = <var:Y> \land <var:S1> = <nat:6> \times <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S0> = <nat:3> \} \end{eqnarray} This is rigorously given with the binding law of Hoare techniques . Moving on to the upcoming step seen in our code segment , we have \begin{eqnarray} \{ <var:p> = <var:Y> \} \, <var:S1> := <var:p> \, \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \} \end{eqnarray} This is shown to be logically sound using the variable update law given by Hoare techniques . Going to the next step , we have \begin{eqnarray} \{ <var:p> = <var:Y> \} \, <var:S1> := <var:p> \, \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \} \\ \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \} \, <var:S2> := <var:S1> * <var:p> \, \{ <var:p> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S1> := <var:p> ; <var:S2> := <var:S1> * <var:p> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:6> ; <var:S2> := <var:S2> * <nat:6> ; <var:b> := <var:S2> <var:b> := <var:b> + <var:S1> <var:b> := <var:b> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:p> = <var:Y> }} <def:poly> {{ <var:b> = <nat:6> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:S1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:S1> = <nat:6> * <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:S1> = <nat:6> * <var:Y> /\ <var:S2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:S1> = <nat:6> * <var:Y> /\ <var:S0> = <nat:3> /\ <var:b> = <nat:6> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:S0> = <nat:3> /\ <var:b> = <nat:6> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:b> = <nat:6> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 