\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} : \begin{verbatim} <var:A> := <nat:2> ; <var:A> := <nat:2> + <var:A> * <var:Q> ; <var:A> := <var:A> * <var:Q> ; <var:A> := <var:A> * <var:Q> ; <var:A> := <nat:2> + <var:A> * <var:Q> ; <var:A> := <nat:1> + <var:A> * <var:Q> ; <var:A> := <nat:2> + <var:A> * <var:Q> ; <var:A> := <nat:3> + <var:A> * <var:Q> ; <var:A> := <nat:1> + <var:A> * <var:Q> ; <var:A> := <nat:3> + <var:A> * <var:Q> \end{verbatim} Given that $ <var:Q> = <var:L> $ --- taking whole numbers $ <var:L> $ --- ahead of the evaluation of the list of instructions then $ <var:A> = <nat:2> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> $ after set of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands is evident by Hoare logic . Taking a look at the next lines seen in our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:L> \} & <var:A> := <nat:2> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \} \\ \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \} & <var:A> := <nat:2> + <var:A> * <var:Q> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> + <nat:2> \} \\ \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> + <nat:2> \} & <var:A> := <var:A> * <var:Q> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + \} \\ \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + \} & <var:A> := <var:A> * <var:Q> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + \} \end{tabular} This is deduced through the assignment inference rule defined in typical Hoare techniques . Looking at the upcoming bits of codeseen in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:Q> = <var:L> \} & <var:A> := <nat:2> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \} \\ \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \} & <var:A> := <nat:2> + <var:A> * <var:Q> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> + <nat:2> \} \\ \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> + <nat:2> \} & <var:A> := <var:A> * <var:Q> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + \} \\ \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + \} & <var:A> := <var:A> * <var:Q> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + \} \end{tabular} This is ensured using the variable assignmet law found in typical Hoare reasoning . Advancing to the upcoming command in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:L> \} & <var:A> := <nat:2> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \} \end{tabular} Jumping to the upcoming bit of code in the code , \[ \begin{tabular} {rcl} \{ <var:Q> = <var:L> \} & <var:A> := <nat:2> & \{ <var:Q> = <var:L> \land <var:A> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Q> = <var:L> }} <var:A> := <nat:2> ; <var:A> := <nat:2> + <var:A> * <var:Q> ; <var:A> := <var:A> * <var:Q> ; <var:A> := <var:A> * <var:Q> ; <var:A> := <nat:2> + <var:A> * <var:Q> ; <var:A> := <nat:1> + <var:A> * <var:Q> ; <var:A> := <nat:2> + <var:A> * <var:Q> ; <var:A> := <nat:3> + <var:A> * <var:Q> ; <var:A> := <nat:1> + <var:A> * <var:Q> ; <var:A> := <nat:3> + <var:A> * <var:Q> {{ <var:A> = <nat:2> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 