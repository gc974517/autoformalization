\begin{document} \begin{theorem} Take the following set of instructions as \begin{verbatim} <var:E0> := <nat:3> ; <var:E1> := <nat:4> ; <var:E1> := <var:E1> * <var:e> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:e> ; <var:E2> := <var:E2> * <var:e> ; <var:E3> := <nat:3> ; <var:E3> := <var:E3> * <var:e> ; <var:E3> := <var:E3> * <var:e> ; <var:E3> := <var:E3> * <var:e> ; <var:J> := <var:E3> ; <var:J> := <var:J> + <var:E2> ; <var:J> := <var:J> + <var:E1> ; <var:J> := <var:J> + <var:E0> \end{verbatim} Given $ <var:e> = <var:v> $ ( given all whole numbers $ <var:v> $ ) before the execution of our program , then $ <var:J> = <nat:3> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the code segment is accomplished with typical Hoare reasoning . Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:v> \} & <var:E0> := <nat:3> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \} & <var:E1> := <nat:4> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> \} & <var:E1> := <var:E1> * <var:e> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \} & <var:E2> := <nat:1> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> \} & <var:E2> := <var:E2> * <var:e> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> \} & <var:E2> := <var:E2> * <var:e> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \} & <var:E3> := <nat:3> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:E3> = <nat:3> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:E3> = <nat:3> \} & <var:E3> := <var:E3> * <var:e> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:E3> = <nat:3> * <var:v> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:E3> = <nat:3> * <var:v> \} & <var:E3> := <var:E3> * <var:e> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:E3> = <nat:3> * <var:v> ^ <nat:2> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:E3> = <nat:3> * <var:v> ^ <nat:2> \} & <var:E3> := <var:E3> * <var:e> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:E3> = <nat:3> * <var:v> ^ <nat:3> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:E3> = <nat:3> * <var:v> ^ <nat:3> \} & <var:J> := <var:E3> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \land <var:E2> = <nat:1> * <var:v> ^ <nat:2> \land <var:J> = <nat:3> * <var:v> ^ <nat:3> \} \end{tabular} This is shown to be logically sound through the variable update inference rule of usual Hoare logic . Stepping forward , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:v> \} & <var:E0> := <nat:3> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \} & <var:E1> := <nat:4> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> \} \\ \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> \} & <var:E1> := <var:E1> * <var:e> & \{ <var:e> = <var:v> \land <var:E0> = <nat:3> \land <var:E1> = <nat:4> * <var:v> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:e> = <var:v> }} <var:E0> := <nat:3> ; <var:E1> := <nat:4> ; <var:E1> := <var:E1> * <var:e> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:e> ; <var:E2> := <var:E2> * <var:e> ; <var:E3> := <nat:3> ; <var:E3> := <var:E3> * <var:e> ; <var:E3> := <var:E3> * <var:e> ; <var:E3> := <var:E3> * <var:e> ; <var:J> := <var:E3> ; <var:J> := <var:J> + <var:E2> ; <var:J> := <var:J> + <var:E1> ; <var:J> := <var:J> + <var:E0> {{ <var:J> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:E2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:E3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:E3> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:E3> = <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:E3> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:J> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:E1> = <nat:4> * <var:v> /\ <var:J> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:E0> = <nat:3> /\ <var:J> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:v> /\ <var:J> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 