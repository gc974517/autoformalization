\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:C> ; <var:m2> := <var:m1> * <var:C> ; <var:m3> := <var:m2> * <var:C> ; <var:m4> := <var:m3> * <var:C> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:6> ; <var:m2> := <var:m2> * <nat:7> ; <var:m3> := <var:m3> * <nat:3> ; <var:m4> := <var:m4> * <nat:2> ; <var:v> := <var:m4> <var:v> := <var:v> + <var:m3> <var:v> := <var:v> + <var:m2> <var:v> := <var:v> + <var:m1> <var:v> := <var:v> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Given , given every $ <var:A> \in \mathbb{Z}^+ $ , $ <var:C> = <var:A> $ before running this code segment , then $ <var:v> = <nat:2> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> + <nat:6> \cdot <var:A> + <nat:3> $ once segment of code has finished executing . \end{theorem} \begin{proof} The argument for this code is clear using usual Hoare techniques . Keeping momentum , we have the assignment code giving $ <var:C> $ into $ <var:m1>$ . This advances $ \{ <var:C> = <var:A> \} $ as the postcondition $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \} $ . After , we have the binding code letting $ <var:m1> * <var:C> $ toward $ <var:m2>$ . This statement transfers the condition $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \} $ to $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \land <var:m2> = <var:A> ^ <nat:2> \} $ . This is guaranteed using the assignment scheme from usual Hoare techniques . Advancing on , we see the environment update command letting $ <var:m2> * <var:C> $ as $ <var:m3>$ . This code advances the precondition $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \land <var:m2> = <var:A> ^ <nat:2> \} $ as $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \land <var:m2> = <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment law from Hoare techniques . Moving on to the proceeding bit of code contained in our list of instructions , we have the statement \verb | <var:m4> := <var:m3> * <var:C> ; | . This line redefines the precondition $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \land <var:m2> = <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \} $ into $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \land <var:m2> = <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \} $ . Moving forward to the subsequent command seen in the series of commands , the assignment code binding $ <nat:3> $ to $ <var:m0>$ . This advances the precondition $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \land <var:m2> = <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \} $ into $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \land <var:m2> = <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . Moving onward , the binding statement letting $ <var:m1> * <nat:6> $ to $ <var:m1>$ . This moves $ \{ <var:C> = <var:A> \land <var:m1> = <var:A> \land <var:m2> = <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ to the postcondition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . This is shown to be logically sound through the assignment law in typical Hoare logic . Paying attention to the subsequent line found in our series of commands , we see the variable update statement assigning $ <var:m2> * <nat:7> $ to $ <var:m2>$ . This advances $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ toward the condition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule defined by usual Hoare logic . Going to the next step , we see the command \verb | <var:m3> := <var:m3> * <nat:3> ; | . This forwards the precondition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m3> = <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ toward the postcondition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m3> = <nat:3> \times <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . This is given using the assignment inference rule defined in typical Hoare techniques . Honing in on the next line of code in the list of instructions , the command assigning $ <var:m4> * <nat:2> $ to $ <var:m4>$ . This forwards the condition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m3> = <nat:3> \times <var:A> ^ <nat:3> \land <var:m4> = <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ into the condition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m3> = <nat:3> \times <var:A> ^ <nat:3> \land <var:m4> = <nat:2> \times <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . This is known to be sound with the assignment inference rule given in usual Hoare reasoning . Moving on , we have the variable binding line \verb | <var:v> := <var:m4> | . This forwards $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m3> = <nat:3> \times <var:A> ^ <nat:3> \land <var:m4> = <nat:2> \times <var:A> ^ <nat:4> \land <var:m0> = <nat:3> \} $ as the postcondition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m3> = <nat:3> \times <var:A> ^ <nat:3> \land <var:m0> = <nat:3> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> \} $ . This is given using the assignment rule obtained from usual Hoare reasoning . Following , we have the line giving $ <var:v> + <var:m3$ as $ <var:v>$ . This line takes the condition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m3> = <nat:3> \times <var:A> ^ <nat:3> \land <var:m0> = <nat:3> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> \} $ to the condition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m0> = <nat:3> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> \} $ . Moving forward to the next step , we have the variable binding command \verb | <var:v> := <var:v> + <var:m2> | . This transfers $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:m0> = <nat:3> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> \} $ to the postcondition $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m0> = <nat:3> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> \} $ . This is guaranteed using the assignment scheme given in Hoare techniques . Considering the next command found in our code segment , we have the variable update line defining $ <var:v> + <var:m1$ as $ <var:v>$ . This redefines $ \{ <var:C> = <var:A> \land <var:m1> = <nat:6> \times <var:A> \land <var:m0> = <nat:3> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> \} $ as $ \{ <var:C> = <var:A> \land <var:m0> = <nat:3> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:6> \times <var:A> \} $ . This is shown to be logically sound using the assignment rule from typical Hoare reasoning . Paying attention to the proceeding bit of code found in our program , we have the assignment statement \verb | <var:v> := <var:v> + <var:m0> | . This transfers $ \{ <var:C> = <var:A> \land <var:m0> = <nat:3> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:6> \times <var:A> \} $ to the postcondition $ \{ <var:C> = <var:A> \land <var:v> = <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:6> \times <var:A> + <nat:3> \} $ . This is ensured through the assignment law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Definition <def:poly> := <var:m1> := <var:C> ; <var:m2> := <var:m1> * <var:C> ; <var:m3> := <var:m2> * <var:C> ; <var:m4> := <var:m3> * <var:C> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:6> ; <var:m2> := <var:m2> * <nat:7> ; <var:m3> := <var:m3> * <nat:3> ; <var:m4> := <var:m4> * <nat:2> ; <var:v> := <var:m4> <var:v> := <var:v> + <var:m3> <var:v> := <var:v> + <var:m2> <var:v> := <var:v> + <var:m1> <var:v> := <var:v> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:C> = <var:A> }} <def:poly> {{ <var:v> = <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <var:A> /\ <var:m2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <var:A> /\ <var:m2> = <var:A> ^ <nat:2> /\ <var:m3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <var:A> /\ <var:m2> = <var:A> ^ <nat:2> /\ <var:m3> = <var:A> ^ <nat:3> /\ <var:m4> = <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <var:A> /\ <var:m2> = <var:A> ^ <nat:2> /\ <var:m3> = <var:A> ^ <nat:3> /\ <var:m4> = <var:A> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <nat:6> * <var:A> /\ <var:m2> = <var:A> ^ <nat:2> /\ <var:m3> = <var:A> ^ <nat:3> /\ <var:m4> = <var:A> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <nat:6> * <var:A> /\ <var:m2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:m3> = <var:A> ^ <nat:3> /\ <var:m4> = <var:A> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <nat:6> * <var:A> /\ <var:m2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:m3> = <nat:3> * <var:A> ^ <nat:3> /\ <var:m4> = <var:A> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <nat:6> * <var:A> /\ <var:m2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:m3> = <nat:3> * <var:A> ^ <nat:3> /\ <var:m4> = <nat:2> * <var:A> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <nat:6> * <var:A> /\ <var:m2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:m3> = <nat:3> * <var:A> ^ <nat:3> /\ <var:m0> = <nat:3> /\ <var:v> = <nat:2> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <nat:6> * <var:A> /\ <var:m2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:m0> = <nat:3> /\ <var:v> = <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m1> = <nat:6> * <var:A> /\ <var:m0> = <nat:3> /\ <var:v> = <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:m0> = <nat:3> /\ <var:v> = <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:v> = <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 