\begin{document} \begin{theorem} Consider the following program as follows \begin{verbatim} <var:s1> := <var:Z> ; <var:s2> := <var:s1> * <var:Z> ; <var:s3> := <var:s2> * <var:Z> ; <var:s4> := <var:s3> * <var:Z> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:3> ; <var:s4> := <var:s4> * <nat:2> ; <var:o> := <var:s4> <var:o> := <var:o> + <var:s3> <var:o> := <var:o> + <var:s2> <var:o> := <var:o> + <var:s1> <var:o> := <var:o> + <var:s0> \end{verbatim} Assuming it to be that $ <var:Z> = <var:C> $ prior to executing this segment of code it holds that $ <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> $ once series of instructions has finished . \end{theorem} \begin{proof} The application of usual Hoare logic results in : \begin{eqnarray} \{ <var:Z> = <var:C> \} \\ <var:s1> := <var:Z> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <var:C> \} \\ <var:s2> := <var:s1> * <var:Z> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:Z> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \} \\ <var:s4> := <var:s3> * <var:Z> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s4> = <var:C> ^ <nat:4> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s4> = <var:C> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:s1> := <var:s1> * <nat:2> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <nat:2> * <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s4> = <var:C> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:s2> := <var:s2> * <nat:2> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <nat:2> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s4> = <var:C> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:s3> := <var:s3> * <nat:3> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <nat:2> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s3> = <nat:3> * <var:C> ^ <nat:3> \land <var:s4> = <var:C> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:s4> := <var:s4> * <nat:2> ; \\ \{ <var:Z> = <var:C> \land <var:s1> = <nat:2> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s3> = <nat:3> * <var:C> ^ <nat:3> \land <var:s4> = <nat:2> * <var:C> ^ <nat:4> \land <var:s0> = <nat:3> \} \\ <var:o> := <var:s4> \\ \{ <var:Z> = <var:C> \land <var:s1> = <nat:2> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s3> = <nat:3> * <var:C> ^ <nat:3> \land <var:s0> = <nat:3> \land <var:o> = <nat:2> * <var:C> ^ <nat:4> \} \\ <var:o> := <var:o> + <var:s3> \\ \{ <var:Z> = <var:C> \land <var:s1> = <nat:2> * <var:C> \land <var:s2> = <nat:2> * <var:C> ^ <nat:2> \land <var:s0> = <nat:3> \land <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:s2> \\ \{ <var:Z> = <var:C> \land <var:s1> = <nat:2> * <var:C> \land <var:s0> = <nat:3> \land <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:s1> \\ \{ <var:Z> = <var:C> \land <var:s0> = <nat:3> \land <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> \} \\ <var:o> := <var:o> + <var:s0> \\ \{ <var:Z> = <var:C> \land <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> \} \end{eqnarray} Therefore , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:Z> = <var:C> }} <var:s1> := <var:Z> ; <var:s2> := <var:s1> * <var:Z> ; <var:s3> := <var:s2> * <var:Z> ; <var:s4> := <var:s3> * <var:Z> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:3> ; <var:s4> := <var:s4> * <nat:2> ; <var:o> := <var:s4> <var:o> := <var:o> + <var:s3> <var:o> := <var:o> + <var:s2> <var:o> := <var:o> + <var:s1> <var:o> := <var:o> + <var:s0> {{ <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s4> = <var:C> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <nat:2> * <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s4> = <var:C> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <nat:2> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s4> = <var:C> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <nat:2> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:s4> = <var:C> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <nat:2> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:s4> = <nat:2> * <var:C> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <nat:2> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:s0> = <nat:3> /\ <var:o> = <nat:2> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <nat:2> * <var:C> /\ <var:s2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:s0> = <nat:3> /\ <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s1> = <nat:2> * <var:C> /\ <var:s0> = <nat:3> /\ <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:s0> = <nat:3> /\ <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:C> /\ <var:o> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 