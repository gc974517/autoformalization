\begin{document} \begin{theorem} Consider the following list of instructions as \begin{verbatim} <var:T> := <nat:3> ; <var:T> := <var:T> * <var:a> ; <var:T> := <nat:3> + <var:T> * <var:a> ; <var:T> := <nat:3> + <var:T> * <var:a> ; <var:T> := <nat:4> + <var:T> * <var:a> ; <var:T> := <nat:2> + <var:T> * <var:a> ; <var:T> := <nat:1> + <var:T> * <var:a> \end{verbatim} Allow it to hold that $ <var:a> = <var:v> $ ahead of the execution of our list of commands it follows that we have $ <var:T> = <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands is accomplished with usual Hoare logic . Stepping through , \begin{eqnarray} \{ <var:a> = <var:v> \} \, <var:T> := <nat:3> \, \{ <var:a> = <var:v> \land <var:T> = <nat:3> \} \\ \{ <var:a> = <var:v> \land <var:T> = <nat:3> \} \, <var:T> := <var:T> * <var:a> \, \{ <var:a> = <var:v> \land <var:T> = <nat:3> \cdot <var:v> + \} \\ \{ <var:a> = <var:v> \land <var:T> = <nat:3> \cdot <var:v> + \} \, <var:T> := <nat:3> + <var:T> * <var:a> \, \{ <var:a> = <var:v> \land <var:T> = <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \} \\ \{ <var:a> = <var:v> \land <var:T> = <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \} \, <var:T> := <nat:3> + <var:T> * <var:a> \, \{ <var:a> = <var:v> \land <var:T> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> + <nat:3> \} \\ \{ <var:a> = <var:v> \land <var:T> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> + <nat:3> \} \, <var:T> := <nat:4> + <var:T> * <var:a> \, \{ <var:a> = <var:v> \land <var:T> = <nat:3> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} \end{eqnarray} This is guaranteed using the binding inference rule from usual Hoare techniques . Advancing on , \begin{eqnarray} \{ <var:a> = <var:v> \} \, <var:T> := <nat:3> \, \{ <var:a> = <var:v> \land <var:T> = <nat:3> \} \\ \{ <var:a> = <var:v> \land <var:T> = <nat:3> \} \, <var:T> := <var:T> * <var:a> \, \{ <var:a> = <var:v> \land <var:T> = <nat:3> \cdot <var:v> + \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:a> = <var:v> }} <var:T> := <nat:3> ; <var:T> := <var:T> * <var:a> ; <var:T> := <nat:3> + <var:T> * <var:a> ; <var:T> := <nat:3> + <var:T> * <var:a> ; <var:T> := <nat:4> + <var:T> * <var:a> ; <var:T> := <nat:2> + <var:T> * <var:a> ; <var:T> := <nat:1> + <var:T> * <var:a> {{ <var:T> = <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:T> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:T> = <nat:3> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:T> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:T> = <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:T> = <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:T> = <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:T> = <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 