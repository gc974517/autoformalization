\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:1> ; <var:F> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:R> = <var:I> $ before the evaluation of our series of commands , it follows that we see $ <var:F> = <nat:1> $ when set of commands has terminated . \end{theorem} \begin{proof} The application of Hoare reasoning gives : \begin{eqnarray} \{ <var:R> = <var:I> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:R> = <var:I> \land <var:K0> = <nat:1> \} \\ <var:F> := <var:K0> \\ \{ <var:R> = <var:I> \land <var:F> = <nat:1> \} \end{eqnarray} Given the preceding argument , the segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:1> ; <var:F> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:R> = <var:I> }} <def:poly> {{ <var:F> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:F> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 