\begin{document} \begin{theorem} Consider a series of commands as follows \begin{verbatim} <var:p> := <nat:3> ; <var:p> := <nat:3> + <var:p> * <var:H> ; <var:p> := <nat:2> + <var:p> * <var:H> ; <var:p> := <nat:4> + <var:p> * <var:H> \end{verbatim} Assuming ( given $ <var:K> \in \mathbb{Z}^+ $ ) $ <var:H> = <var:K> $ before running the set of commands , it holds that we have $ <var:p> = <nat:3> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:4> $ when set of commands has terminated . \end{theorem} \begin{proof} The proof of this program can be given using this decorated list of commands . \begin{eqnarray} \{ <var:H> = <var:K> \} \\ <var:p> := <nat:3> ; \\ \{ <var:H> = <var:K> \land <var:p> = <nat:3> \} \\ <var:p> := <nat:3> + <var:p> * <var:H> ; \\ \{ <var:H> = <var:K> \land <var:p> = <nat:3> \cdot <var:K> + <nat:3> \} \\ <var:p> := <nat:2> + <var:p> * <var:H> ; \\ \{ <var:H> = <var:K> \land <var:p> = <nat:3> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> \} \\ <var:p> := <nat:4> + <var:p> * <var:H> \\ \{ <var:H> = <var:K> \land <var:p> = <nat:3> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:4> \} \end{eqnarray} Using typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:H> = <var:K> }} <var:p> := <nat:3> ; <var:p> := <nat:3> + <var:p> * <var:H> ; <var:p> := <nat:2> + <var:p> * <var:H> ; <var:p> := <nat:4> + <var:p> * <var:H> {{ <var:p> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:p> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:p> = <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:p> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:p> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 