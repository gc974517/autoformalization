\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:F> ; <var:r2> := <var:r1> * <var:F> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:4> ; <var:r2> := <var:r2> * <nat:3> ; <var:k> := <var:r2> <var:k> := <var:k> + <var:r1> <var:k> := <var:k> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Given $ <var:F> = <var:x> $ , given all positive integers $ <var:x> $ , ahead of running our list of instructions , it must be that we see $ <var:k> = <nat:3> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:7> $ after code segment has finished . \end{theorem} \begin{proof} Utilizing Hoare reasoning results in : \begin{eqnarray} \{ <var:F> = <var:x> \} \\ <var:r1> := <var:F> ; \\ \{ <var:F> = <var:x> \land <var:r1> = <var:x> \} \\ <var:r2> := <var:r1> * <var:F> ; \\ \{ <var:F> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:F> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:r1> := <var:r1> * <nat:4> ; \\ \{ <var:F> = <var:x> \land <var:r1> = <nat:4> * <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:r2> := <var:r2> * <nat:3> ; \\ \{ <var:F> = <var:x> \land <var:r1> = <nat:4> * <var:x> \land <var:r2> = <nat:3> * <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:k> := <var:r2> \\ \{ <var:F> = <var:x> \land <var:r1> = <nat:4> * <var:x> \land <var:r0> = <nat:7> \land <var:k> = <nat:3> * <var:x> ^ <nat:2> \} \end{eqnarray} Advancing evaluating this code yields : \begin{eqnarray} <var:k> := <var:k> + <var:r1> \\ \{ <var:F> = <var:x> \land <var:r0> = <nat:7> \land <var:k> = <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> \} \\ <var:k> := <var:k> + <var:r0> \\ \{ <var:F> = <var:x> \land <var:k> = <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:7> \} \end{eqnarray} Hence , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r1> := <var:F> ; <var:r2> := <var:r1> * <var:F> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:4> ; <var:r2> := <var:r2> * <nat:3> ; <var:k> := <var:r2> <var:k> := <var:k> + <var:r1> <var:k> := <var:k> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:F> = <var:x> }} <def:poly> {{ <var:k> = <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:r1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <var:x> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:r1> = <nat:4> * <var:x> /\ <var:r2> = <var:x> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:r1> = <nat:4> * <var:x> /\ <var:r2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:r1> = <nat:4> * <var:x> /\ <var:r0> = <nat:7> /\ <var:k> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:r0> = <nat:7> /\ <var:k> = <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:x> /\ <var:k> = <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 