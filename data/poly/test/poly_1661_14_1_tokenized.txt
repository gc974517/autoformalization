\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} : \begin{verbatim} <var:m1> := <var:b> ; <var:m2> := <var:m1> * <var:b> ; <var:m3> := <var:m2> * <var:b> ; <var:m4> := <var:m3> * <var:b> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:6> ; <var:m3> := <var:m3> * <nat:7> ; <var:m4> := <var:m4> * <nat:2> ; <var:f> := <var:m4> <var:f> := <var:f> + <var:m3> <var:f> := <var:f> + <var:m2> <var:f> := <var:f> + <var:m1> <var:f> := <var:f> + <var:m0> \end{verbatim} Allowing for some $ <var:C> $ $ <var:b> = <var:C> $ ahead of executing the list of commands it must be that $ <var:f> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions can be done by standard Hoare logic . Keeping momentum , we see \begin{eqnarray} \{ <var:b> = <var:C> \} \, <var:m1> := <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \} \, <var:m2> := <var:m1> * <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \} \, <var:m3> := <var:m2> * <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \} \, <var:m4> := <var:m3> * <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \} \, <var:m0> := <nat:9> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \land <var:m0> = <nat:9> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \land <var:m0> = <nat:9> \} \, <var:m1> := <var:m1> * <nat:3> \, \{ <var:b> = <var:C> \land <var:m1> = <nat:3> \cdot <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \land <var:m0> = <nat:9> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <nat:3> \cdot <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \land <var:m0> = <nat:9> \} \, <var:m2> := <var:m2> * <nat:6> \, \{ <var:b> = <var:C> \land <var:m1> = <nat:3> \cdot <var:C> \land <var:m2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \land <var:m0> = <nat:9> \} \end{eqnarray} This is ensured with the law from Hoare logic . Moving forward to the upcoming commands in the series of commands , \begin{eqnarray} \{ <var:b> = <var:C> \} \, <var:m1> := <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \} \, <var:m2> := <var:m1> * <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \} \, <var:m3> := <var:m2> * <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \} \, <var:m4> := <var:m3> * <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \} \\ \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \} \, <var:m0> := <nat:9> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m4> = <var:C> ^ <nat:4> \land <var:m0> = <nat:9> \} \end{eqnarray} This is known to be sound by the binding inference rule from typical Hoare logic . Honing in on the next line of code contained in our list of instructions , we have \begin{eqnarray} \{ <var:b> = <var:C> \} \, <var:m1> := <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \} \end{eqnarray} Shifting focus toward the upcoming bit of code found in the set of instructions , we see \begin{eqnarray} \{ <var:b> = <var:C> \} \, <var:m1> := <var:b> \, \{ <var:b> = <var:C> \land <var:m1> = <var:C> \} \end{eqnarray} This is deduced by the binding rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:b> = <var:C> }} <var:m1> := <var:b> ; <var:m2> := <var:m1> * <var:b> ; <var:m3> := <var:m2> * <var:b> ; <var:m4> := <var:m3> * <var:b> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:6> ; <var:m3> := <var:m3> * <nat:7> ; <var:m4> := <var:m4> * <nat:2> ; <var:f> := <var:m4> <var:f> := <var:f> + <var:m3> <var:f> := <var:f> + <var:m2> <var:f> := <var:f> + <var:m1> <var:f> := <var:f> + <var:m0> {{ <var:f> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m4> = <var:C> ^ <nat:4> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <nat:3> * <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m4> = <var:C> ^ <nat:4> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <nat:3> * <var:C> /\ <var:m2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m4> = <var:C> ^ <nat:4> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <nat:3> * <var:C> /\ <var:m2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:m3> = <nat:7> * <var:C> ^ <nat:3> /\ <var:m4> = <var:C> ^ <nat:4> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <nat:3> * <var:C> /\ <var:m2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:m3> = <nat:7> * <var:C> ^ <nat:3> /\ <var:m4> = <nat:2> * <var:C> ^ <nat:4> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <nat:3> * <var:C> /\ <var:m2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:m3> = <nat:7> * <var:C> ^ <nat:3> /\ <var:m0> = <nat:9> /\ <var:f> = <nat:2> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <nat:3> * <var:C> /\ <var:m2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:m0> = <nat:9> /\ <var:f> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m1> = <nat:3> * <var:C> /\ <var:m0> = <nat:9> /\ <var:f> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:m0> = <nat:9> /\ <var:f> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:f> = <nat:2> * <var:C> ^ <nat:4> + <nat:7> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 