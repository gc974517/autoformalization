\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:3> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:F> ; <var:E> := <var:Y1> ; <var:E> := <var:E> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assuming for natural numbers $ <var:y> $ that we have $ <var:F> = <var:y> $ ahead of running this set of instructions then we have $ <var:E> = <nat:9> * <var:y> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is evident through usual Hoare reasoning . Moving on to the upcoming command in the list of commands , we have \begin{verbatim} { <var:F> = <var:y> } <var:Y0> := <nat:3> { <var:F> = <var:y> \land <var:Y0> = <nat:3> } \end{verbatim} This is rigorously given through the scheme from usual Hoare reasoning . Moving on to the next step contained in the code segment , we see \begin{verbatim} { <var:F> = <var:y> } <var:Y0> := <nat:3> { <var:F> = <var:y> \land <var:Y0> = <nat:3> } \end{verbatim} This is given by the binding inference rule defined by usual Hoare reasoning . Moving on , we have \begin{verbatim} { <var:F> = <var:y> } <var:Y0> := <nat:3> { <var:F> = <var:y> \land <var:Y0> = <nat:3> } \end{verbatim} This is ensured by the inference rule defined by typical Hoare reasoning . Looking at the following statements found in our series of commands , we have \begin{verbatim} { <var:F> = <var:y> } <var:Y0> := <nat:3> { <var:F> = <var:y> \land <var:Y0> = <nat:3> } { <var:F> = <var:y> \land <var:Y0> = <nat:3> } <var:Y1> := <nat:9> { <var:F> = <var:y> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> } \end{verbatim} This is sound through the variable assignmet rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:3> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:F> ; <var:E> := <var:Y1> ; <var:E> := <var:E> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:F> = <var:y> }} <def:poly> {{ <var:E> = <nat:9> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:Y0> = <nat:3> /\ <var:E> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:y> /\ <var:E> = <nat:9> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 