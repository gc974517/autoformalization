\begin{document} \begin{theorem} We define the following list of commands as follows \begin{verbatim} <var:k1> := <var:e> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:2> ; <var:I> := <var:k1> <var:I> := <var:I> + <var:k0> \end{verbatim} Allow that we have $ <var:e> = <var:u> $ ahead of executing our set of instructions , then $ <var:I> = <nat:2> \cdot <var:u> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning produces : \begin{eqnarray} \{ <var:e> = <var:u> \} \\ <var:k1> := <var:e> ; \\ \{ <var:e> = <var:u> \land <var:k1> = <var:u> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:e> = <var:u> \land <var:k1> = <var:u> \land <var:k0> = <nat:2> \} \end{eqnarray} Allowing the execution of this list of instructions yields : \begin{eqnarray} <var:k1> := <var:k1> * <nat:2> ; \\ \{ <var:e> = <var:u> \land <var:k1> = <nat:2> \times <var:u> \land <var:k0> = <nat:2> \} \\ <var:I> := <var:k1> \\ \{ <var:e> = <var:u> \land <var:k0> = <nat:2> \land <var:I> = <nat:2> \times <var:u> \} \\ <var:I> := <var:I> + <var:k0> \\ \{ <var:e> = <var:u> \land <var:I> = <nat:2> \times <var:u> + <nat:2> \} \end{eqnarray} Given the preceding argument , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:e> = <var:u> }} <var:k1> := <var:e> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:2> ; <var:I> := <var:k1> <var:I> := <var:I> + <var:k0> {{ <var:I> = <nat:2> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:k1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:k1> = <var:u> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:k1> = <nat:2> * <var:u> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:k0> = <nat:2> /\ <var:I> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:I> = <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 