\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:N> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:5> ; <var:g> := <var:C1> <var:g> := <var:g> + <var:C0> \end{verbatim} Allowing it to be that $ <var:N> = <var:F> $ before interpreting the set of commands then we see $ <var:g> = <nat:5> * <var:F> + <nat:3> $ once list of instructions has terminated . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:N> = <var:F> \} \\ <var:C1> := <var:N> ; \\ \{ <var:N> = <var:F> \land <var:C1> = <var:F> \} \\ <var:C0> := <nat:3> ; \\ \{ <var:N> = <var:F> \land <var:C1> = <var:F> \land <var:C0> = <nat:3> \} \\ <var:C1> := <var:C1> * <nat:5> ; \\ \{ <var:N> = <var:F> \land <var:C1> = <nat:5> * <var:F> \land <var:C0> = <nat:3> \} \\ <var:g> := <var:C1> \\ \{ <var:N> = <var:F> \land <var:C0> = <nat:3> \land <var:g> = <nat:5> * <var:F> \} \\ <var:g> := <var:g> + <var:C0> \\ \{ <var:N> = <var:F> \land <var:g> = <nat:5> * <var:F> + <nat:3> \} \end{eqnarray} As a result , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:N> = <var:F> }} <var:C1> := <var:N> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:5> ; <var:g> := <var:C1> <var:g> := <var:g> + <var:C0> {{ <var:g> = <nat:5> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:C1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:C1> = <var:F> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:C1> = <nat:5> * <var:F> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:C0> = <nat:3> /\ <var:g> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:g> = <nat:5> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 