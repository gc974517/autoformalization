\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:4> ; <var:Y1> := <nat:7> ; <var:Y1> := <var:Y1> * <var:I> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:I> ; <var:Y2> := <var:Y2> * <var:I> ; <var:N> := <var:Y2> ; <var:N> := <var:N> + <var:Y1> ; <var:N> := <var:N> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:I> = <var:D> $ before evaluating this series of instructions , then we see $ <var:N> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> + <nat:4> $ once list of instructions terminates . \end{theorem} \begin{proof} We can see that the following decorated program . \begin{eqnarray} \{ <var:I> = <var:D> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:I> = <var:D> \land <var:Y0> = <nat:4> \} \\ <var:Y1> := <nat:7> ; \\ \{ <var:I> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:7> \} \\ <var:Y1> := <var:Y1> * <var:I> ; \\ \{ <var:I> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:7> * <var:D> \} \\ <var:Y2> := <nat:3> ; \\ \{ <var:I> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:7> * <var:D> \land <var:Y2> = <nat:3> \} \\ <var:Y2> := <var:Y2> * <var:I> ; \\ \{ <var:I> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:7> * <var:D> \land <var:Y2> = <nat:3> * <var:D> \} \\ <var:Y2> := <var:Y2> * <var:I> ; \\ \{ <var:I> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:7> * <var:D> \land <var:Y2> = <nat:3> * <var:D> ^ <nat:2> \} \\ <var:N> := <var:Y2> ; \\ \{ <var:I> = <var:D> \land <var:Y0> = <nat:4> \land <var:Y1> = <nat:7> * <var:D> \land <var:N> = <nat:3> * <var:D> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:Y1> ; \\ \{ <var:I> = <var:D> \land <var:Y0> = <nat:4> \land <var:N> = <nat:3> * <var:D> ^ <nat:2> + <nat:7> * <var:D> \} \\ <var:N> := <var:N> + <var:Y0> \\ \{ <var:I> = <var:D> \land <var:N> = <nat:3> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:4> \} \end{eqnarray} The application of Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:4> ; <var:Y1> := <nat:7> ; <var:Y1> := <var:Y1> * <var:I> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:I> ; <var:Y2> := <var:Y2> * <var:I> ; <var:N> := <var:Y2> ; <var:N> := <var:N> + <var:Y1> ; <var:N> := <var:N> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:I> = <var:D> }} <def:poly> {{ <var:N> = <nat:3> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:7> * <var:D> /\ <var:Y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:7> * <var:D> /\ <var:Y2> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:7> * <var:D> /\ <var:Y2> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:Y1> = <nat:7> * <var:D> /\ <var:N> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:Y0> = <nat:4> /\ <var:N> = <nat:3> * <var:D> ^ <nat:2> + <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:N> = <nat:3> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 