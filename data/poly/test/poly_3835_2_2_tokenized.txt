\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} : \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:3> + <var:i> * <var:r> \end{verbatim} Given it to hold that $ <var:r> = <var:F> $ prior to the execution of our segment of code , it follows that we have $ <var:i> = <nat:3> \times <var:F> + <nat:3> $ once series of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is done through Hoare logic . Moving forward to the following line contained in our series of commands , the variable binding code \verb | <var:i> := <nat:3> ; | . This redefines the precondition $ \{ <var:r> = <var:F> \} $ into the condition $ \{ <var:r> = <var:F> \land <var:i> = <nat:3> \} $ . Keeping momentum , we see the command yielding $ <nat:3> + <var:i> * <var:r$ into $ <var:i>$ . This line transfers $ \{ <var:r> = <var:F> \land <var:i> = <nat:3> \} $ as the condition $ \{ <var:r> = <var:F> \land <var:i> = <nat:3> \cdot <var:F> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:r> = <var:F> }} <var:i> := <nat:3> ; <var:i> := <nat:3> + <var:i> * <var:r> {{ <var:i> = <nat:3> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:i> = <nat:3> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 