\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t> := <nat:4> ; <var:t> := <var:t> * <var:J> ; <var:t> := <nat:4> + <var:t> * <var:J> ; <var:t> := <nat:2> + <var:t> * <var:J> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Allowing , for some positive numbers $ <var:j> $ , $ <var:J> = <var:j> $ before the execution of the series of instructions then we have $ <var:t> = <nat:4> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be accomplished using typical Hoare techniques . Stepping through , \begin{verbatim} { <var:J> = <var:j> } <var:t> := <nat:4> { <var:J> = <var:j> \land <var:t> = <nat:4> } \end{verbatim} Focusing on the upcoming pieces of code found in our list of commands , \begin{verbatim} { <var:J> = <var:j> } <var:t> := <nat:4> { <var:J> = <var:j> \land <var:t> = <nat:4> } { <var:J> = <var:j> \land <var:t> = <nat:4> } <var:t> := <var:t> * <var:J> { <var:J> = <var:j> \land <var:t> = <nat:4> \cdot <var:j> + } { <var:J> = <var:j> \land <var:t> = <nat:4> \cdot <var:j> + } <var:t> := <nat:4> + <var:t> * <var:J> { <var:J> = <var:j> \land <var:t> = <nat:4> \cdot <var:j> ^ <nat:2> + <nat:4> } \end{verbatim} This is sound through the environment update inference rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:4> ; <var:t> := <var:t> * <var:J> ; <var:t> := <nat:4> + <var:t> * <var:J> ; <var:t> := <nat:2> + <var:t> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:J> = <var:j> }} <def:poly> {{ <var:t> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:t> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:t> = <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:t> = <nat:4> * <var:j> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:t> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 