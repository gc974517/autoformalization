\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:i> ; <var:R2> := <var:R1> * <var:i> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:2> ; <var:L> := <var:R2> <var:L> := <var:L> + <var:R1> <var:L> := <var:L> + <var:R0> \end{verbatim} Allowing that $ <var:i> = <var:s> $ for $ <var:s> \in \mathbb{Z}^+ $ ahead of executing this code segment it must be that we have $ <var:L> = <nat:2> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:4> $ after code is done executing . \end{theorem} \begin{proof} The flow of logic for this series of instructions is done with standard Hoare logic . Paying attention to the following command found in our code segment , we see the code \verb | <var:R1> := <var:i> ; | . This statement transfers $ \{ <var:i> = <var:s> \} $ to the postcondition $ \{ <var:i> = <var:s> \land <var:R1> = <var:s> \} $ . This is deduced by the assignment rule from typical Hoare logic . Observing the next step seen in the list of commands , the binding line binding $ <var:R1> * <var:i> $ to $ <var:R2>$ . This advances $ \{ <var:i> = <var:s> \land <var:R1> = <var:s> \} $ into the condition $ \{ <var:i> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \} $ . This is rigorously given by the assignment scheme from usual Hoare logic . Observing the upcoming line seen in our code , we have the variable binding code \verb | <var:R0> := <nat:4> ; | . This statement transfers the condition $ \{ <var:i> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \} $ to the postcondition $ \{ <var:i> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R0> = <nat:4> \} $ . Going to the next step , the variable assignmet command \verb | <var:R1> := <var:R1> * <nat:4> ; | . This advances $ \{ <var:i> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R0> = <nat:4> \} $ as the condition $ \{ <var:i> = <var:s> \land <var:R1> = <nat:4> * <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R0> = <nat:4> \} $ . After , we have the binding statement binding $ <var:R2> * <nat:2> $ toward $ <var:R2>$ . This line advances $ \{ <var:i> = <var:s> \land <var:R1> = <nat:4> * <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R0> = <nat:4> \} $ to the postcondition $ \{ <var:i> = <var:s> \land <var:R1> = <nat:4> * <var:s> \land <var:R2> = <nat:2> * <var:s> ^ <nat:2> \land <var:R0> = <nat:4> \} $ . This is rigorously given through the assignment inference rule obtained from standard Hoare logic . Shifting focus toward the subsequent statement found in the series of commands , the binding line \verb | <var:L> := <var:R2> | . This code redefines $ \{ <var:i> = <var:s> \land <var:R1> = <nat:4> * <var:s> \land <var:R2> = <nat:2> * <var:s> ^ <nat:2> \land <var:R0> = <nat:4> \} $ to the postcondition $ \{ <var:i> = <var:s> \land <var:R1> = <nat:4> * <var:s> \land <var:R0> = <nat:4> \land <var:L> = <nat:2> * <var:s> ^ <nat:2> \} $ . Going to the next step , we have the variable binding code defining $ <var:L> + <var:R1$ into $ <var:L>$ . This forwards the condition $ \{ <var:i> = <var:s> \land <var:R1> = <nat:4> * <var:s> \land <var:R0> = <nat:4> \land <var:L> = <nat:2> * <var:s> ^ <nat:2> \} $ to the condition $ \{ <var:i> = <var:s> \land <var:R0> = <nat:4> \land <var:L> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> \} $ . This is given through the assignment scheme obtained from usual Hoare techniques . Further , we see the variable assignmet statement defining $ <var:L> + <var:R0$ into $ <var:L>$ . This statement takes $ \{ <var:i> = <var:s> \land <var:R0> = <nat:4> \land <var:L> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> \} $ into $ \{ <var:i> = <var:s> \land <var:L> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:i> = <var:s> }} <var:R1> := <var:i> ; <var:R2> := <var:R1> * <var:i> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:2> ; <var:L> := <var:R2> <var:L> := <var:L> + <var:R1> <var:L> := <var:L> + <var:R0> {{ <var:L> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:R1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:R1> = <var:s> /\ <var:R2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:R1> = <var:s> /\ <var:R2> = <var:s> ^ <nat:2> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:R1> = <nat:4> * <var:s> /\ <var:R2> = <var:s> ^ <nat:2> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:R1> = <nat:4> * <var:s> /\ <var:R2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:R1> = <nat:4> * <var:s> /\ <var:R0> = <nat:4> /\ <var:L> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:R0> = <nat:4> /\ <var:L> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:L> = <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 