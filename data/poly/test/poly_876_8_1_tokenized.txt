\begin{document} \begin{theorem} Take a set of instructions as \begin{verbatim} <var:l1> := <var:R> ; <var:l2> := <var:l1> * <var:R> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:9> ; <var:l2> := <var:l2> * <nat:4> ; <var:Q> := <var:l2> <var:Q> := <var:Q> + <var:l1> <var:Q> := <var:Q> + <var:l0> \end{verbatim} Assume , for any positive integers $ <var:T> $ , $ <var:R> = <var:T> $ prior to executing the series of commands it follows that we see $ <var:Q> = <nat:4> \cdot <var:T> ^ <nat:2> + <nat:9> \cdot <var:T> + <nat:5> $ . \end{theorem} \begin{proof} Using usual Hoare techniques yields : \begin{eqnarray} \{ <var:R> = <var:T> \} \\ <var:l1> := <var:R> ; \\ \{ <var:R> = <var:T> \land <var:l1> = <var:T> \} \\ <var:l2> := <var:l1> * <var:R> ; \\ \{ <var:R> = <var:T> \land <var:l1> = <var:T> \land <var:l2> = <var:T> ^ <nat:2> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:R> = <var:T> \land <var:l1> = <var:T> \land <var:l2> = <var:T> ^ <nat:2> \land <var:l0> = <nat:5> \} \\ <var:l1> := <var:l1> * <nat:9> ; \\ \{ <var:R> = <var:T> \land <var:l1> = <nat:9> \times <var:T> \land <var:l2> = <var:T> ^ <nat:2> \land <var:l0> = <nat:5> \} \\ <var:l2> := <var:l2> * <nat:4> ; \\ \{ <var:R> = <var:T> \land <var:l1> = <nat:9> \times <var:T> \land <var:l2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:l0> = <nat:5> \} \\ <var:Q> := <var:l2> \\ \{ <var:R> = <var:T> \land <var:l1> = <nat:9> \times <var:T> \land <var:l0> = <nat:5> \land <var:Q> = <nat:4> \times <var:T> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:l1> \\ \{ <var:R> = <var:T> \land <var:l0> = <nat:5> \land <var:Q> = <nat:4> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> \} \\ <var:Q> := <var:Q> + <var:l0> \\ \{ <var:R> = <var:T> \land <var:Q> = <nat:4> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> + <nat:5> \} \end{eqnarray} As a consequence , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:R> = <var:T> }} <var:l1> := <var:R> ; <var:l2> := <var:l1> * <var:R> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:9> ; <var:l2> := <var:l2> * <nat:4> ; <var:Q> := <var:l2> <var:Q> := <var:Q> + <var:l1> <var:Q> := <var:Q> + <var:l0> {{ <var:Q> = <nat:4> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:l1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:l1> = <var:T> /\ <var:l2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:l1> = <var:T> /\ <var:l2> = <var:T> ^ <nat:2> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:l1> = <nat:9> * <var:T> /\ <var:l2> = <var:T> ^ <nat:2> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:l1> = <nat:9> * <var:T> /\ <var:l2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:l1> = <nat:9> * <var:T> /\ <var:l0> = <nat:5> /\ <var:Q> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:l0> = <nat:5> /\ <var:Q> = <nat:4> * <var:T> ^ <nat:2> + <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:Q> = <nat:4> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 