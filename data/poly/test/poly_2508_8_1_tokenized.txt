\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:C> ; <var:d2> := <var:d1> * <var:C> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:3> ; <var:d2> := <var:d2> * <nat:1> ; <var:W> := <var:d2> <var:W> := <var:W> + <var:d1> <var:W> := <var:W> + <var:d0> \end{verbatim} Given it to be that $ <var:C> = <var:r> $ prior to evaluating this segment of code , then we see $ <var:W> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + <nat:7> $ after segment of code is done . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands is shown using standard Hoare techniques . Stepping forward , we have \begin{eqnarray} \{ <var:C> = <var:r> \} \, <var:d1> := <var:C> \, \{ <var:C> = <var:r> \land <var:d1> = <var:r> \} \\ \{ <var:C> = <var:r> \land <var:d1> = <var:r> \} \, <var:d2> := <var:d1> * <var:C> \, \{ <var:C> = <var:r> \land <var:d1> = <var:r> \land <var:d2> = <var:r> ^ <nat:2> \} \\ \{ <var:C> = <var:r> \land <var:d1> = <var:r> \land <var:d2> = <var:r> ^ <nat:2> \} \, <var:d0> := <nat:7> \, \{ <var:C> = <var:r> \land <var:d1> = <var:r> \land <var:d2> = <var:r> ^ <nat:2> \land <var:d0> = <nat:7> \} \\ \{ <var:C> = <var:r> \land <var:d1> = <var:r> \land <var:d2> = <var:r> ^ <nat:2> \land <var:d0> = <nat:7> \} \, <var:d1> := <var:d1> * <nat:3> \, \{ <var:C> = <var:r> \land <var:d1> = <nat:3> * <var:r> \land <var:d2> = <var:r> ^ <nat:2> \land <var:d0> = <nat:7> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:C> = <var:r> \} \, <var:d1> := <var:C> \, \{ <var:C> = <var:r> \land <var:d1> = <var:r> \} \\ \{ <var:C> = <var:r> \land <var:d1> = <var:r> \} \, <var:d2> := <var:d1> * <var:C> \, \{ <var:C> = <var:r> \land <var:d1> = <var:r> \land <var:d2> = <var:r> ^ <nat:2> \} \\ \{ <var:C> = <var:r> \land <var:d1> = <var:r> \land <var:d2> = <var:r> ^ <nat:2> \} \, <var:d0> := <nat:7> \, \{ <var:C> = <var:r> \land <var:d1> = <var:r> \land <var:d2> = <var:r> ^ <nat:2> \land <var:d0> = <nat:7> \} \\ \{ <var:C> = <var:r> \land <var:d1> = <var:r> \land <var:d2> = <var:r> ^ <nat:2> \land <var:d0> = <nat:7> \} \, <var:d1> := <var:d1> * <nat:3> \, \{ <var:C> = <var:r> \land <var:d1> = <nat:3> * <var:r> \land <var:d2> = <var:r> ^ <nat:2> \land <var:d0> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:C> = <var:r> }} <var:d1> := <var:C> ; <var:d2> := <var:d1> * <var:C> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:3> ; <var:d2> := <var:d2> * <nat:1> ; <var:W> := <var:d2> <var:W> := <var:W> + <var:d1> <var:W> := <var:W> + <var:d0> {{ <var:W> = <nat:1> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:d1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:d1> = <var:r> /\ <var:d2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:d1> = <var:r> /\ <var:d2> = <var:r> ^ <nat:2> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:d1> = <nat:3> * <var:r> /\ <var:d2> = <var:r> ^ <nat:2> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:d1> = <nat:3> * <var:r> /\ <var:d2> = <nat:1> * <var:r> ^ <nat:2> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:d1> = <nat:3> * <var:r> /\ <var:d0> = <nat:7> /\ <var:W> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:d0> = <nat:7> /\ <var:W> = <nat:1> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:r> /\ <var:W> = <nat:1> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 