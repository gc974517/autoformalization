\begin{document} \begin{theorem} We define the following list of commands : \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:3> + <var:W> * <var:p> ; <var:W> := <var:W> * <var:p> ; <var:W> := <nat:4> + <var:W> * <var:p> ; <var:W> := <var:W> * <var:p> ; <var:W> := <var:W> * <var:p> ; <var:W> := <var:W> * <var:p> ; <var:W> := <nat:4> + <var:W> * <var:p> ; <var:W> := <nat:1> + <var:W> * <var:p> ; <var:W> := <nat:3> + <var:W> * <var:p> ; <var:W> := <nat:1> + <var:W> * <var:p> \end{verbatim} Allow that $ <var:p> = <var:c> $ prior to executing this program it must be that we see $ <var:W> = <nat:3> \cdot <var:c> ^ <nat:10> + <nat:3> \cdot <var:c> ^ <nat:9> + <nat:4> \cdot <var:c> ^ <nat:7> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:1> $ when segment of code finishes . \end{theorem} \begin{proof} Proving correctness for the set of commands can be seen by typical Hoare logic . Going forward , we have \begin{eqnarray} \{ <var:p> = <var:c> \} \, <var:W> := <nat:3> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \} \\ \{ <var:p> = <var:c> \land <var:W> = <nat:3> \} \, <var:W> := <nat:3> + <var:W> * <var:p> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> + <nat:3> \} \\ \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> + <nat:3> \} \, <var:W> := <var:W> * <var:p> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + \} \\ \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + \} \, <var:W> := <nat:4> + <var:W> * <var:p> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:4> \} \\ \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:4> \} \, <var:W> := <var:W> * <var:p> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> + \} \\ \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> + \} \, <var:W> := <var:W> * <var:p> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:2> + \} \\ \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:2> + \} \, <var:W> := <var:W> * <var:p> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:3> + \} \\ \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:3> + \} \, <var:W> := <nat:4> + <var:W> * <var:p> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:4> + <nat:4> \} \end{eqnarray} This is given through the environment update law from standard Hoare techniques . After , we see \begin{eqnarray} \{ <var:p> = <var:c> \} \, <var:W> := <nat:3> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \} \end{eqnarray} This is shown through the variable binding scheme given by usual Hoare logic . Considering the subsequent pieces of code in our set of commands , \begin{eqnarray} \{ <var:p> = <var:c> \} \, <var:W> := <nat:3> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \} \\ \{ <var:p> = <var:c> \land <var:W> = <nat:3> \} \, <var:W> := <nat:3> + <var:W> * <var:p> \, \{ <var:p> = <var:c> \land <var:W> = <nat:3> \cdot <var:c> + <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:p> = <var:c> }} <var:W> := <nat:3> ; <var:W> := <nat:3> + <var:W> * <var:p> ; <var:W> := <var:W> * <var:p> ; <var:W> := <nat:4> + <var:W> * <var:p> ; <var:W> := <var:W> * <var:p> ; <var:W> := <var:W> * <var:p> ; <var:W> := <var:W> * <var:p> ; <var:W> := <nat:4> + <var:W> * <var:p> ; <var:W> := <nat:1> + <var:W> * <var:p> ; <var:W> := <nat:3> + <var:W> * <var:p> ; <var:W> := <nat:1> + <var:W> * <var:p> {{ <var:W> = <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:W> = <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 