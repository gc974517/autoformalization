\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:5> ; <var:A> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Assuming it to be that $ <var:O> = <var:o> $ ahead of the execution of this set of instructions , it must be that we see $ <var:A> = <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands is clear through typical Hoare logic . Advancing on , we have \verb | { <var:O> = <var:o> } <var:y0> := <nat:5> { <var:O> = <var:o> \land <var:y0> = <nat:5> } | and \verb | { <var:O> = <var:o> \land <var:y0> = <nat:5> } <var:A> := <var:y0{ <var:O> = <var:o> \land <var:A> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:5> ; <var:A> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:O> = <var:o> }} <def:poly> {{ <var:A> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:A> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 