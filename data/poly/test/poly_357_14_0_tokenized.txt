\begin{document} \begin{theorem} Consider the following series of instructions as \begin{verbatim} <var:s0> := <nat:7> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:q> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:q> ; <var:s2> := <var:s2> * <var:q> ; <var:s3> := <nat:9> ; <var:s3> := <var:s3> * <var:q> ; <var:s3> := <var:s3> * <var:q> ; <var:s3> := <var:s3> * <var:q> ; <var:p> := <var:s3> ; <var:p> := <var:p> + <var:s2> ; <var:p> := <var:p> + <var:s1> ; <var:p> := <var:p> + <var:s0> \end{verbatim} Assume it to hold that $ <var:q> = <var:D> $ before evaluating our set of commands , it must be that $ <var:p> = <nat:9> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is clear with typical Hoare techniques . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:D> \} & <var:s0> := <nat:7> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \} & <var:s1> := <nat:2> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> \} & <var:s1> := <var:s1> * <var:q> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \} & <var:s2> := <nat:7> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> \} & <var:s2> := <var:s2> * <var:q> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> \} & <var:s2> := <var:s2> * <var:q> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \} & <var:s3> := <nat:9> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:s3> = <nat:9> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:s3> = <nat:9> \} & <var:s3> := <var:s3> * <var:q> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:s3> = <nat:9> * <var:D> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:s3> = <nat:9> * <var:D> \} & <var:s3> := <var:s3> * <var:q> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:s3> = <nat:9> * <var:D> ^ <nat:2> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:s3> = <nat:9> * <var:D> ^ <nat:2> \} & <var:s3> := <var:s3> * <var:q> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:s3> = <nat:9> * <var:D> ^ <nat:3> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:s3> = <nat:9> * <var:D> ^ <nat:3> \} & <var:p> := <var:s3> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:p> = <nat:9> * <var:D> ^ <nat:3> \} \\ \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:s2> = <nat:7> * <var:D> ^ <nat:2> \land <var:p> = <nat:9> * <var:D> ^ <nat:3> \} & <var:p> := <var:p> + <var:s2> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> * <var:D> \land <var:p> = <nat:9> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> \} \end{tabular} This is guaranteed with the variable binding scheme defined in standard Hoare logic . Advancing to the upcoming line of code in our code , \[ \begin{tabular} {rcl} \{ <var:q> = <var:D> \} & <var:s0> := <nat:7> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \} \end{tabular} This is given by the law given by standard Hoare logic . Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:q> = <var:D> \} & <var:s0> := <nat:7> & \{ <var:q> = <var:D> \land <var:s0> = <nat:7> \} \end{tabular} This is sound through the environment update law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:q> = <var:D> }} <var:s0> := <nat:7> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:q> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:q> ; <var:s2> := <var:s2> * <var:q> ; <var:s3> := <nat:9> ; <var:s3> := <var:s3> * <var:q> ; <var:s3> := <var:s3> * <var:q> ; <var:s3> := <var:s3> * <var:q> ; <var:p> := <var:s3> ; <var:p> := <var:p> + <var:s2> ; <var:p> := <var:p> + <var:s1> ; <var:p> := <var:p> + <var:s0> {{ <var:p> = <nat:9> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s2> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s2> = <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:s3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:s3> = <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:s3> = <nat:9> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:s3> = <nat:9> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:p> = <nat:9> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:D> /\ <var:p> = <nat:9> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:s0> = <nat:7> /\ <var:p> = <nat:9> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:p> = <nat:9> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 