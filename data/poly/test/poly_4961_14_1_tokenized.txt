\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} : \begin{verbatim} <var:T1> := <var:J> ; <var:T2> := <var:T1> * <var:J> ; <var:T3> := <var:T2> * <var:J> ; <var:T4> := <var:T3> * <var:J> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:8> ; <var:T2> := <var:T2> * <nat:3> ; <var:T3> := <var:T3> * <nat:2> ; <var:T4> := <var:T4> * <nat:1> ; <var:c> := <var:T4> <var:c> := <var:c> + <var:T3> <var:c> := <var:c> + <var:T2> <var:c> := <var:c> + <var:T1> <var:c> := <var:c> + <var:T0> \end{verbatim} Allow ( for some positive coefficients $ <var:G> $ ) $ <var:J> = <var:G> $ ahead of running our segment of code , it follows that we see $ <var:c> = <nat:1> \cdot <var:G> ^ <nat:4> + <nat:2> \cdot <var:G> ^ <nat:3> + <nat:3> \cdot <var:G> ^ <nat:2> + <nat:8> \cdot <var:G> + <nat:1> $ after series of commands has finished . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:J> = <var:G> \} \\ <var:T1> := <var:J> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <var:G> \} \\ <var:T2> := <var:T1> * <var:J> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <var:G> \land <var:T2> = <var:G> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:J> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <var:G> \land <var:T2> = <var:G> ^ <nat:2> \land <var:T3> = <var:G> ^ <nat:3> \} \\ <var:T4> := <var:T3> * <var:J> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <var:G> \land <var:T2> = <var:G> ^ <nat:2> \land <var:T3> = <var:G> ^ <nat:3> \land <var:T4> = <var:G> ^ <nat:4> \} \\ <var:T0> := <nat:1> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <var:G> \land <var:T2> = <var:G> ^ <nat:2> \land <var:T3> = <var:G> ^ <nat:3> \land <var:T4> = <var:G> ^ <nat:4> \land <var:T0> = <nat:1> \} \\ <var:T1> := <var:T1> * <nat:8> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <nat:8> \times <var:G> \land <var:T2> = <var:G> ^ <nat:2> \land <var:T3> = <var:G> ^ <nat:3> \land <var:T4> = <var:G> ^ <nat:4> \land <var:T0> = <nat:1> \} \\ <var:T2> := <var:T2> * <nat:3> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <nat:8> \times <var:G> \land <var:T2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:T3> = <var:G> ^ <nat:3> \land <var:T4> = <var:G> ^ <nat:4> \land <var:T0> = <nat:1> \} \\ <var:T3> := <var:T3> * <nat:2> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <nat:8> \times <var:G> \land <var:T2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:T3> = <nat:2> \times <var:G> ^ <nat:3> \land <var:T4> = <var:G> ^ <nat:4> \land <var:T0> = <nat:1> \} \\ <var:T4> := <var:T4> * <nat:1> ; \\ \{ <var:J> = <var:G> \land <var:T1> = <nat:8> \times <var:G> \land <var:T2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:T3> = <nat:2> \times <var:G> ^ <nat:3> \land <var:T4> = <nat:1> \times <var:G> ^ <nat:4> \land <var:T0> = <nat:1> \} \\ <var:c> := <var:T4> \\ \{ <var:J> = <var:G> \land <var:T1> = <nat:8> \times <var:G> \land <var:T2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:T3> = <nat:2> \times <var:G> ^ <nat:3> \land <var:T0> = <nat:1> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> \} \\ <var:c> := <var:c> + <var:T3> \\ \{ <var:J> = <var:G> \land <var:T1> = <nat:8> \times <var:G> \land <var:T2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:T0> = <nat:1> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:T2> \\ \{ <var:J> = <var:G> \land <var:T1> = <nat:8> \times <var:G> \land <var:T0> = <nat:1> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:T1> \\ \{ <var:J> = <var:G> \land <var:T0> = <nat:1> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> + <nat:8> \times <var:G> \} \\ <var:c> := <var:c> + <var:T0> \\ \{ <var:J> = <var:G> \land <var:c> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> + <nat:8> \times <var:G> + <nat:1> \} \end{eqnarray} Hence , the code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <var:T4> : string := " <var:T4> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:J> = <var:G> }} <var:T1> := <var:J> ; <var:T2> := <var:T1> * <var:J> ; <var:T3> := <var:T2> * <var:J> ; <var:T4> := <var:T3> * <var:J> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:8> ; <var:T2> := <var:T2> * <nat:3> ; <var:T3> := <var:T3> * <nat:2> ; <var:T4> := <var:T4> * <nat:1> ; <var:c> := <var:T4> <var:c> := <var:c> + <var:T3> <var:c> := <var:c> + <var:T2> <var:c> := <var:c> + <var:T1> <var:c> := <var:c> + <var:T0> {{ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <var:G> /\ <var:T2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <var:G> /\ <var:T2> = <var:G> ^ <nat:2> /\ <var:T3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <var:G> /\ <var:T2> = <var:G> ^ <nat:2> /\ <var:T3> = <var:G> ^ <nat:3> /\ <var:T4> = <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <var:G> /\ <var:T2> = <var:G> ^ <nat:2> /\ <var:T3> = <var:G> ^ <nat:3> /\ <var:T4> = <var:G> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <nat:8> * <var:G> /\ <var:T2> = <var:G> ^ <nat:2> /\ <var:T3> = <var:G> ^ <nat:3> /\ <var:T4> = <var:G> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <nat:8> * <var:G> /\ <var:T2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:T3> = <var:G> ^ <nat:3> /\ <var:T4> = <var:G> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <nat:8> * <var:G> /\ <var:T2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:T3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:T4> = <var:G> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <nat:8> * <var:G> /\ <var:T2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:T3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:T4> = <nat:1> * <var:G> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <nat:8> * <var:G> /\ <var:T2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:T3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:T0> = <nat:1> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <nat:8> * <var:G> /\ <var:T2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:T0> = <nat:1> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T1> = <nat:8> * <var:G> /\ <var:T0> = <nat:1> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:T0> = <nat:1> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:c> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 