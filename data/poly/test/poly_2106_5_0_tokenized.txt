\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:r> ; <var:C> := <var:Y1> ; <var:C> := <var:C> + <var:Y0> \end{verbatim} Assuming it to hold that $ <var:r> = <var:s> $ prior to evaluating the code segment , it holds that $ <var:C> = <nat:9> \times <var:s> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program is done by typical Hoare logic . Advancing , the variable update statement letting $ <nat:2> $ as $ <var:Y0>$ . This takes $ \{ <var:r> = <var:s> \} $ as the postcondition $ \{ <var:r> = <var:s> \land <var:Y0> = <nat:2> \} $ . This is given using the assignment scheme defined in usual Hoare reasoning . Advancing , we see the variable update code \verb | <var:Y1> := <nat:9> ; | . This transfers the precondition $ \{ <var:r> = <var:s> \land <var:Y0> = <nat:2> \} $ to the condition $ \{ <var:r> = <var:s> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:9> \} $ . Advancing to the following step found in our segment of code , the variable assignmet code binding $ <var:Y1> * <var:r> $ into $ <var:Y1>$ . This advances $ \{ <var:r> = <var:s> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:9> \} $ toward the postcondition $ \{ <var:r> = <var:s> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:9> * <var:s> \} $ . This is guaranteed with the assignment rule found in usual Hoare reasoning . Advancing to the next step , we have the variable update code binding $ <var:Y1> $ into $ <var:C>$ . This command forwards $ \{ <var:r> = <var:s> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:9> * <var:s> \} $ into $ \{ <var:r> = <var:s> \land <var:Y0> = <nat:2> \land <var:C> = <nat:9> * <var:s> \} $ . This is deduced with the assignment rule given in typical Hoare reasoning . Immediately following , we have the variable assignmet statement binding $ <var:C> + <var:Y0$ as $ <var:C>$ . This forwards the condition $ \{ <var:r> = <var:s> \land <var:Y0> = <nat:2> \land <var:C> = <nat:9> * <var:s> \} $ as the condition $ \{ <var:r> = <var:s> \land <var:C> = <nat:9> * <var:s> + <nat:2> \} $ . This is known to be sound by the assignment rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:r> = <var:s> }} <var:Y0> := <nat:2> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:r> ; <var:C> := <var:Y1> ; <var:C> := <var:C> + <var:Y0> {{ <var:C> = <nat:9> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:s> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:s> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:s> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:s> /\ <var:Y0> = <nat:2> /\ <var:C> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:s> /\ <var:C> = <nat:9> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 