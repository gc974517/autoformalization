\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:4> ; <var:V> := <var:D0> \end{verbatim} Assuming $ <var:w> = <var:x> $ before evaluating our set of instructions , it holds that we see $ <var:V> = <nat:4> $ when set of instructions executes . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions is accomplished by usual Hoare logic . Moving on , the assignment line \verb | <var:D0> := <nat:4> ; | . This redefines $ \{ <var:w> = <var:x> \} $ to $ \{ <var:w> = <var:x> \land <var:D0> = <nat:4> \} $ . This is guaranteed using the assignment scheme obtained from typical Hoare techniques . Moving on to the upcoming step seen in our series of instructions , we see the assignment code letting $ <var:D0$ into $ <var:V>$ . This forwards the condition $ \{ <var:w> = <var:x> \land <var:D0> = <nat:4> \} $ as the condition $ \{ <var:w> = <var:x> \land <var:V> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:w> = <var:x> }} <var:D0> := <nat:4> ; <var:V> := <var:D0> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 