\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:I1> := <var:Z> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:5> ; <var:h> := <var:I1> <var:h> := <var:h> + <var:I0> \end{verbatim} Assume ( for any positive coefficients $ <var:r> $ ) it to be that $ <var:Z> = <var:r> $ prior to the execution of this program it must be that we see $ <var:h> = <nat:5> * <var:r> + <nat:2> $ when segment of code executes . \end{theorem} \begin{proof} The method of proof for our series of commands is given through typical Hoare reasoning . Jumping to the upcoming statement seen in our list of commands , we have the variable binding command letting $ <var:Z> $ toward $ <var:I1>$ . This statement advances $ \{ <var:Z> = <var:r> \} $ to $ \{ <var:Z> = <var:r> \land <var:I1> = <var:r> \} $ . This is guaranteed with the assignment law in usual Hoare techniques . Looking at the following bit of code in our program , we have the environment update statement \verb | <var:I0> := <nat:2> ; | . This moves $ \{ <var:Z> = <var:r> \land <var:I1> = <var:r> \} $ into $ \{ <var:Z> = <var:r> \land <var:I1> = <var:r> \land <var:I0> = <nat:2> \} $ . Shifting focus toward the following line of code contained in the set of instructions , we see the environment update code \verb | <var:I1> := <var:I1> * <nat:5> ; | . This code transfers the precondition $ \{ <var:Z> = <var:r> \land <var:I1> = <var:r> \land <var:I0> = <nat:2> \} $ into the condition $ \{ <var:Z> = <var:r> \land <var:I1> = <nat:5> \times <var:r> \land <var:I0> = <nat:2> \} $ . Advancing to the subsequent piece of code in the segment of code , the binding code \verb | <var:h> := <var:I1> | . This forwards $ \{ <var:Z> = <var:r> \land <var:I1> = <nat:5> \times <var:r> \land <var:I0> = <nat:2> \} $ as the postcondition $ \{ <var:Z> = <var:r> \land <var:I0> = <nat:2> \land <var:h> = <nat:5> \times <var:r> \} $ . This is given through the assignment law defined by Hoare techniques . Now , we see the variable update statement binding $ <var:h> + <var:I0$ as $ <var:h>$ . This line advances the condition $ \{ <var:Z> = <var:r> \land <var:I0> = <nat:2> \land <var:h> = <nat:5> \times <var:r> \} $ as the postcondition $ \{ <var:Z> = <var:r> \land <var:h> = <nat:5> \times <var:r> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Z> = <var:r> }} <var:I1> := <var:Z> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:5> ; <var:h> := <var:I1> <var:h> := <var:h> + <var:I0> {{ <var:h> = <nat:5> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:I1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:I1> = <var:r> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:I1> = <nat:5> * <var:r> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:I0> = <nat:2> /\ <var:h> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:h> = <nat:5> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 