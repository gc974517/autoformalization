\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:8> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:W> ; <var:y> := <var:Z1> ; <var:y> := <var:y> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:W> = <var:X> $ ahead of the evaluation of this set of instructions then $ <var:y> = <nat:6> \times <var:X> + <nat:8> $ once series of instructions is done executing . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning produces : \begin{eqnarray} \{ <var:W> = <var:X> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:W> = <var:X> \land <var:Z0> = <nat:8> \} \\ <var:Z1> := <nat:6> ; \\ \{ <var:W> = <var:X> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:6> \} \\ <var:Z1> := <var:Z1> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:6> \cdot <var:X> \} \\ <var:y> := <var:Z1> ; \\ \{ <var:W> = <var:X> \land <var:Z0> = <nat:8> \land <var:y> = <nat:6> \cdot <var:X> \} \\ <var:y> := <var:y> + <var:Z0> \\ \{ <var:W> = <var:X> \land <var:y> = <nat:6> \cdot <var:X> + <nat:8> \} \end{eqnarray} As a consequence , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:8> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:W> ; <var:y> := <var:Z1> ; <var:y> := <var:y> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:W> = <var:X> }} <def:poly> {{ <var:y> = <nat:6> * <var:X> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:Z0> = <nat:8> /\ <var:y> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:y> = <nat:6> * <var:X> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 