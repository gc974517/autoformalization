\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:1> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:b> ; <var:h2> := <nat:9> ; <var:h2> := <var:h2> * <var:b> ; <var:h2> := <var:h2> * <var:b> ; <var:h3> := <nat:3> ; <var:h3> := <var:h3> * <var:b> ; <var:h3> := <var:h3> * <var:b> ; <var:h3> := <var:h3> * <var:b> ; <var:y> := <var:h3> ; <var:y> := <var:y> + <var:h2> ; <var:y> := <var:y> + <var:h1> ; <var:y> := <var:y> + <var:h0> \end{verbatim} Assuming $ <var:b> = <var:S> $ prior to executing the set of commands it holds that we have $ <var:y> = <nat:3> \cdot <var:S> ^ <nat:3> + <nat:9> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:b> = <var:S> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \} \\ <var:h1> := <nat:3> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> \} \\ <var:h1> := <var:h1> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \} \\ <var:h2> := <nat:9> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:h2> = <nat:9> \} \\ <var:h2> := <var:h2> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:h2> = <nat:9> * <var:S> \} \\ <var:h2> := <var:h2> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:h2> = <nat:9> * <var:S> ^ <nat:2> \} \\ <var:h3> := <nat:3> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:h2> = <nat:9> * <var:S> ^ <nat:2> \land <var:h3> = <nat:3> \} \\ <var:h3> := <var:h3> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:h2> = <nat:9> * <var:S> ^ <nat:2> \land <var:h3> = <nat:3> * <var:S> \} \\ <var:h3> := <var:h3> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:h2> = <nat:9> * <var:S> ^ <nat:2> \land <var:h3> = <nat:3> * <var:S> ^ <nat:2> \} \\ <var:h3> := <var:h3> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:h2> = <nat:9> * <var:S> ^ <nat:2> \land <var:h3> = <nat:3> * <var:S> ^ <nat:3> \} \\ <var:y> := <var:h3> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:h2> = <nat:9> * <var:S> ^ <nat:2> \land <var:y> = <nat:3> * <var:S> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:h2> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:h1> = <nat:3> * <var:S> \land <var:y> = <nat:3> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:h1> ; \\ \{ <var:b> = <var:S> \land <var:h0> = <nat:1> \land <var:y> = <nat:3> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:3> * <var:S> \} \\ <var:y> := <var:y> + <var:h0> \\ \{ <var:b> = <var:S> \land <var:y> = <nat:3> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:1> \} \end{eqnarray} As a consequence , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:b> = <var:S> }} <var:h0> := <nat:1> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:b> ; <var:h2> := <nat:9> ; <var:h2> := <var:h2> * <var:b> ; <var:h2> := <var:h2> * <var:b> ; <var:h3> := <nat:3> ; <var:h3> := <var:h3> * <var:b> ; <var:h3> := <var:h3> * <var:b> ; <var:h3> := <var:h3> * <var:b> ; <var:y> := <var:h3> ; <var:y> := <var:y> + <var:h2> ; <var:y> := <var:y> + <var:h1> ; <var:y> := <var:y> + <var:h0> {{ <var:y> = <nat:3> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:h2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:h2> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:h2> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:h2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:h3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:h2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:h3> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:h2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:h3> = <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:h2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:h3> = <nat:3> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:h2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:y> = <nat:3> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:3> * <var:S> /\ <var:y> = <nat:3> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:h0> = <nat:1> /\ <var:y> = <nat:3> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:y> = <nat:3> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 