\begin{document} \begin{theorem} Take the following list of instructions as follows \begin{verbatim} <var:f1> := <var:U> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:4> ; <var:c> := <var:f1> <var:c> := <var:c> + <var:f0> \end{verbatim} Assuming --- given some natural numbers $ <var:a> $ --- that $ <var:U> = <var:a> $ prior to interpreting this segment of code it must be that we have $ <var:c> = <nat:4> \times <var:a> + <nat:5> $ after series of instructions executes . \end{theorem} \begin{proof} The course of logic for this set of commands can be done with usual Hoare logic . Jumping to the following piece of code found in the program , we have the environment update code assigning $ <var:U> $ to $ <var:f1>$ . This moves the condition $ \{ <var:U> = <var:a> \} $ toward the postcondition $ \{ <var:U> = <var:a> \land <var:f1> = <var:a> \} $ . Advancing , the assignment command \verb | <var:f0> := <nat:5> ; | . This takes the condition $ \{ <var:U> = <var:a> \land <var:f1> = <var:a> \} $ to the condition $ \{ <var:U> = <var:a> \land <var:f1> = <var:a> \land <var:f0> = <nat:5> \} $ . This is guaranteed through the assignment inference rule found in Hoare logic . Observing the upcoming statement found in the code segment , we have the variable assignmet line yielding $ <var:f1> * <nat:4> $ to $ <var:f1>$ . This command redefines the condition $ \{ <var:U> = <var:a> \land <var:f1> = <var:a> \land <var:f0> = <nat:5> \} $ into $ \{ <var:U> = <var:a> \land <var:f1> = <nat:4> \cdot <var:a> \land <var:f0> = <nat:5> \} $ . Now , we see the line \verb | <var:c> := <var:f1> | . This statement takes $ \{ <var:U> = <var:a> \land <var:f1> = <nat:4> \cdot <var:a> \land <var:f0> = <nat:5> \} $ as the condition $ \{ <var:U> = <var:a> \land <var:f0> = <nat:5> \land <var:c> = <nat:4> \cdot <var:a> \} $ . Jumping to the upcoming bit of code in our series of commands , we see the assignment code \verb | <var:c> := <var:c> + <var:f0> | . This transfers the precondition $ \{ <var:U> = <var:a> \land <var:f0> = <nat:5> \land <var:c> = <nat:4> \cdot <var:a> \} $ as the condition $ \{ <var:U> = <var:a> \land <var:c> = <nat:4> \cdot <var:a> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:U> = <var:a> }} <var:f1> := <var:U> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:4> ; <var:c> := <var:f1> <var:c> := <var:c> + <var:f0> {{ <var:c> = <nat:4> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:f1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:f1> = <var:a> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:f1> = <nat:4> * <var:a> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:f0> = <nat:5> /\ <var:c> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:a> /\ <var:c> = <nat:4> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 