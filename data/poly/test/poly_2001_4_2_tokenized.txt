\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:o> := <nat:2> ; <var:o> := <nat:2> + <var:o> * <var:q> ; <var:o> := <var:o> * <var:q> ; <var:o> := <nat:3> + <var:o> * <var:q> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Given that we have $ <var:q> = <var:j> $ before the execution of this series of commands , then we have $ <var:o> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:3> $ when code segment executes . \end{theorem} \begin{proof} Using standard Hoare techniques returns : \begin{eqnarray} \{ <var:q> = <var:j> \} \\ <var:o> := <nat:2> ; \\ \{ <var:q> = <var:j> \land <var:o> = <nat:2> \} \\ <var:o> := <nat:2> + <var:o> * <var:q> ; \\ \{ <var:q> = <var:j> \land <var:o> = <nat:2> \times <var:j> + <nat:2> \} \\ <var:o> := <var:o> * <var:q> ; \\ \{ <var:q> = <var:j> \land <var:o> = <nat:2> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + \} \\ <var:o> := <nat:3> + <var:o> * <var:q> \\ \{ <var:q> = <var:j> \land <var:o> = <nat:2> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:3> \} \end{eqnarray} Hence , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:2> ; <var:o> := <nat:2> + <var:o> * <var:q> ; <var:o> := <var:o> * <var:q> ; <var:o> := <nat:3> + <var:o> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:q> = <var:j> }} <def:poly> {{ <var:o> = <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:o> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:o> = <nat:2> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:o> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:o> = <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 