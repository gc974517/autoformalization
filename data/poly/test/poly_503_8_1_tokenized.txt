\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:r1> := <var:z> ; <var:r2> := <var:r1> * <var:z> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:5> ; <var:r2> := <var:r2> * <nat:8> ; <var:p> := <var:r2> <var:p> := <var:p> + <var:r1> <var:p> := <var:p> + <var:r0> \end{verbatim} Assume it to be that $ <var:z> = <var:x> $ prior to running this set of commands it follows that we have $ <var:p> = <nat:8> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for our program can be given by standard Hoare techniques . Advancing , we see the assignment statement \verb | <var:r1> := <var:z> ; | . This command advances the precondition $ \{ <var:z> = <var:x> \} $ into the postcondition $ \{ <var:z> = <var:x> \land <var:r1> = <var:x> \} $ . After , the environment update line letting $ <var:r1> * <var:z> $ to $ <var:r2>$ . This code forwards $ \{ <var:z> = <var:x> \land <var:r1> = <var:x> \} $ to the condition $ \{ <var:z> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \} $ . Moving forward to the next step , we have the variable update statement giving $ <nat:7> $ to $ <var:r0>$ . This command takes the condition $ \{ <var:z> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \} $ toward the condition $ \{ <var:z> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} $ . Going to the next step , we have the variable assignmet command \verb | <var:r1> := <var:r1> * <nat:5> ; | . This transfers the condition $ \{ <var:z> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} $ toward the postcondition $ \{ <var:z> = <var:x> \land <var:r1> = <nat:5> \cdot <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} $ . This is shown to be logically sound by the assignment rule in usual Hoare techniques . Taking a look at the upcoming bit of code seen in the code segment , we see the environment update command defining $ <var:r2> * <nat:8> $ to $ <var:r2>$ . This advances the precondition $ \{ <var:z> = <var:x> \land <var:r1> = <nat:5> \cdot <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} $ toward $ \{ <var:z> = <var:x> \land <var:r1> = <nat:5> \cdot <var:x> \land <var:r2> = <nat:8> \cdot <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} $ . This is known to be sound through the assignment scheme given by standard Hoare techniques . Moving onward , the variable update statement giving $ <var:r2$ toward $ <var:p>$ . This command forwards the condition $ \{ <var:z> = <var:x> \land <var:r1> = <nat:5> \cdot <var:x> \land <var:r2> = <nat:8> \cdot <var:x> ^ <nat:2> \land <var:r0> = <nat:7> \} $ as the condition $ \{ <var:z> = <var:x> \land <var:r1> = <nat:5> \cdot <var:x> \land <var:r0> = <nat:7> \land <var:p> = <nat:8> \cdot <var:x> ^ <nat:2> \} $ . This is known to be sound by the assignment law from typical Hoare logic . Next , we see the variable binding line \verb | <var:p> := <var:p> + <var:r1> | . This code advances the condition $ \{ <var:z> = <var:x> \land <var:r1> = <nat:5> \cdot <var:x> \land <var:r0> = <nat:7> \land <var:p> = <nat:8> \cdot <var:x> ^ <nat:2> \} $ toward $ \{ <var:z> = <var:x> \land <var:r0> = <nat:7> \land <var:p> = <nat:8> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> \} $ . Moving on , the variable update command \verb | <var:p> := <var:p> + <var:r0> | . This forwards the condition $ \{ <var:z> = <var:x> \land <var:r0> = <nat:7> \land <var:p> = <nat:8> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> \} $ as $ \{ <var:z> = <var:x> \land <var:p> = <nat:8> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:z> = <var:x> }} <var:r1> := <var:z> ; <var:r2> := <var:r1> * <var:z> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:5> ; <var:r2> := <var:r2> * <nat:8> ; <var:p> := <var:r2> <var:p> := <var:p> + <var:r1> <var:p> := <var:p> + <var:r0> {{ <var:p> = <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:r1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <var:x> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:r1> = <nat:5> * <var:x> /\ <var:r2> = <var:x> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:r1> = <nat:5> * <var:x> /\ <var:r2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:r1> = <nat:5> * <var:x> /\ <var:r0> = <nat:7> /\ <var:p> = <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:r0> = <nat:7> /\ <var:p> = <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:p> = <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 