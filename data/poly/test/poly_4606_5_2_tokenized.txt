\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F> := <nat:4> ; <var:F> := <nat:1> + <var:F> * <var:H> ; <var:F> := <var:F> * <var:H> ; <var:F> := <nat:3> + <var:F> * <var:H> ; <var:F> := <nat:2> + <var:F> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:H> = <var:o> $ , for some positive coefficients $ <var:o> $ , before the evaluation of this series of instructions then $ <var:F> = <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> + <nat:2> $ after code segment is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:o> \} \\ <var:F> := <nat:4> ; \\ \{ <var:H> = <var:o> \land <var:F> = <nat:4> \} \\ <var:F> := <nat:1> + <var:F> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:F> = <nat:4> \times <var:o> + <nat:1> \} \end{eqnarray} Continuing running our program produces : \begin{eqnarray} <var:F> := <var:F> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:F> = <nat:4> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + \} \\ <var:F> := <nat:3> + <var:F> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:F> = <nat:4> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:3> \} \\ <var:F> := <nat:2> + <var:F> * <var:H> \\ \{ <var:H> = <var:o> \land <var:F> = <nat:4> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> + <nat:2> \} \end{eqnarray} Applying standard Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:4> ; <var:F> := <nat:1> + <var:F> * <var:H> ; <var:F> := <var:F> * <var:H> ; <var:F> := <nat:3> + <var:F> * <var:H> ; <var:F> := <nat:2> + <var:F> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:H> = <var:o> }} <def:poly> {{ <var:F> = <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:F> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:F> = <nat:4> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:F> = <nat:4> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:F> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:F> = <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 