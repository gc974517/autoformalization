\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:5> ; <var:e> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:r> = <var:Y> $ prior to the execution of our series of commands , then $ <var:e> = <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for this set of commands can be given through usual Hoare techniques . Taking a look at the subsequent steps in our segment of code , we have \[ \begin{tabular} {rcl} \{ <var:r> = <var:Y> \} & <var:Q0> := <nat:5> & \{ <var:r> = <var:Y> \land <var:Q0> = <nat:5> \} \\ \{ <var:r> = <var:Y> \land <var:Q0> = <nat:5> \} & <var:e> := <var:Q0& \{ <var:r> = <var:Y> \land <var:e> = <nat:5> \} \end{tabular} This is sound using the binding inference rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:5> ; <var:e> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:r> = <var:Y> }} <def:poly> {{ <var:e> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Y> /\ <var:e> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 