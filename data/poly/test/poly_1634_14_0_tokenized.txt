\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:G> ; <var:U2> := <nat:9> ; <var:U2> := <var:U2> * <var:G> ; <var:U2> := <var:U2> * <var:G> ; <var:U3> := <nat:7> ; <var:U3> := <var:U3> * <var:G> ; <var:U3> := <var:U3> * <var:G> ; <var:U3> := <var:U3> * <var:G> ; <var:s> := <var:U3> ; <var:s> := <var:s> + <var:U2> ; <var:s> := <var:s> + <var:U1> ; <var:s> := <var:s> + <var:U0> \end{verbatim} Allow that $ <var:G> = <var:P> $ before the execution of our segment of code it holds that we have $ <var:s> = <nat:7> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:9> $ . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:G> = <var:P> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \} \\ <var:U1> := <nat:8> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \} \\ <var:U1> := <var:U1> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \} \\ <var:U2> := <nat:9> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U2> = <nat:9> \} \\ <var:U2> := <var:U2> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U2> = <nat:9> \cdot <var:P> \} \\ <var:U2> := <var:U2> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U2> = <nat:9> \cdot <var:P> ^ <nat:2> \} \\ <var:U3> := <nat:7> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U2> = <nat:9> \cdot <var:P> ^ <nat:2> \land <var:U3> = <nat:7> \} \\ <var:U3> := <var:U3> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U2> = <nat:9> \cdot <var:P> ^ <nat:2> \land <var:U3> = <nat:7> \cdot <var:P> \} \\ <var:U3> := <var:U3> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U2> = <nat:9> \cdot <var:P> ^ <nat:2> \land <var:U3> = <nat:7> \cdot <var:P> ^ <nat:2> \} \\ <var:U3> := <var:U3> * <var:G> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U2> = <nat:9> \cdot <var:P> ^ <nat:2> \land <var:U3> = <nat:7> \cdot <var:P> ^ <nat:3> \} \\ <var:s> := <var:U3> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U2> = <nat:9> \cdot <var:P> ^ <nat:2> \land <var:s> = <nat:7> \cdot <var:P> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:U2> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:s> = <nat:7> \cdot <var:P> ^ <nat:3> + <nat:9> \cdot <var:P> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:U1> ; \\ \{ <var:G> = <var:P> \land <var:U0> = <nat:9> \land <var:s> = <nat:7> \cdot <var:P> ^ <nat:3> + <nat:9> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> \} \\ <var:s> := <var:s> + <var:U0> \\ \{ <var:G> = <var:P> \land <var:s> = <nat:7> \cdot <var:P> ^ <nat:3> + <nat:9> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> + <nat:9> \} \end{eqnarray} Given the above , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:G> = <var:P> }} <var:U0> := <nat:9> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:G> ; <var:U2> := <nat:9> ; <var:U2> := <var:U2> * <var:G> ; <var:U2> := <var:U2> * <var:G> ; <var:U3> := <nat:7> ; <var:U3> := <var:U3> * <var:G> ; <var:U3> := <var:U3> * <var:G> ; <var:U3> := <var:U3> * <var:G> ; <var:s> := <var:U3> ; <var:s> := <var:s> + <var:U2> ; <var:s> := <var:s> + <var:U1> ; <var:s> := <var:s> + <var:U0> {{ <var:s> = <nat:7> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U2> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U2> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:U3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:s> = <nat:7> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:P> /\ <var:s> = <nat:7> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:U0> = <nat:9> /\ <var:s> = <nat:7> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:s> = <nat:7> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 