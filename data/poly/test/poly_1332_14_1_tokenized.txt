\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:J> ; <var:V2> := <var:V1> * <var:J> ; <var:V3> := <var:V2> * <var:J> ; <var:V4> := <var:V3> * <var:J> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:3> ; <var:V2> := <var:V2> * <nat:1> ; <var:V3> := <var:V3> * <nat:1> ; <var:V4> := <var:V4> * <nat:4> ; <var:x> := <var:V4> <var:x> := <var:x> + <var:V3> <var:x> := <var:x> + <var:V2> <var:x> := <var:x> + <var:V1> <var:x> := <var:x> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:J> = <var:G> $ given every $ <var:G> \in \mathbb{Z}^+ $ ahead of evaluating the segment of code it holds that $ <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> $ after code has finished . \end{theorem} \begin{proof} Arguing the correctness of our program is shown with usual Hoare techniques . Going to the next step , the command \verb | <var:V1> := <var:J> ; | . This takes the condition $ \{ <var:J> = <var:G> \} $ into the condition $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \} $ . This is shown through the assignment law defined by Hoare techniques . Stepping through , the variable binding statement assigning $ <var:V1> * <var:J> $ as $ <var:V2>$ . This statement moves the condition $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \} $ toward $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \} $ . Observing the proceeding bit of code found in our series of instructions , we have the binding code \verb | <var:V3> := <var:V2> * <var:J> ; | . This line redefines the condition $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \} $ toward $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \} $ . Moving on , the variable update statement \verb | <var:V4> := <var:V3> * <var:J> ; | . This statement moves the precondition $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \} $ as the condition $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \} $ . Focusing on the proceeding line of code contained in the code segment , the variable assignmet command letting $ <nat:1> $ into $ <var:V0>$ . This moves $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \} $ to the postcondition $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ . This is sound by the assignment law obtained from usual Hoare techniques . Next , we have the variable assignmet statement binding $ <var:V1> * <nat:3> $ toward $ <var:V1>$ . This line moves $ \{ <var:J> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ to $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ . Immediately after , we have the assignment statement yielding $ <var:V2> * <nat:1> $ as $ <var:V2>$ . This moves $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ toward $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ . This is ensured with the assignment rule defined by usual Hoare logic . Jumping to the next step contained in the segment of code , we see the variable assignmet line \verb | <var:V3> := <var:V3> * <nat:1> ; | . This line moves $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V3> = <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ as the postcondition $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V3> = <nat:1> * <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ . This is ensured by the assignment rule defined by usual Hoare techniques . Moving forward , the variable update code \verb | <var:V4> := <var:V4> * <nat:4> ; | . This advances the precondition $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V3> = <nat:1> * <var:G> ^ <nat:3> \land <var:V4> = <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ as $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V3> = <nat:1> * <var:G> ^ <nat:3> \land <var:V4> = <nat:4> * <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ . Taking a look at the proceeding piece of code contained in our segment of code , we have the variable binding line defining $ <var:V4$ into $ <var:x>$ . This advances $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V3> = <nat:1> * <var:G> ^ <nat:3> \land <var:V4> = <nat:4> * <var:G> ^ <nat:4> \land <var:V0> = <nat:1> \} $ as $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V3> = <nat:1> * <var:G> ^ <nat:3> \land <var:V0> = <nat:1> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> \} $ . This is guaranteed through the assignment inference rule given in typical Hoare logic . Immediately after , the binding line assigning $ <var:x> + <var:V3$ to $ <var:x>$ . This code moves the condition $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V3> = <nat:1> * <var:G> ^ <nat:3> \land <var:V0> = <nat:1> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> \} $ as the condition $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V0> = <nat:1> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> \} $ . Focusing on the next bit of code contained in our list of commands , we have the variable assignmet command giving $ <var:x> + <var:V2$ to $ <var:x>$ . This line redefines $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V2> = <nat:1> * <var:G> ^ <nat:2> \land <var:V0> = <nat:1> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> \} $ to the postcondition $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V0> = <nat:1> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> \} $ . Jumping to the proceeding piece of code contained in our series of commands , we have the binding statement assigning $ <var:x> + <var:V1$ to $ <var:x>$ . This takes $ \{ <var:J> = <var:G> \land <var:V1> = <nat:3> * <var:G> \land <var:V0> = <nat:1> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> \} $ as $ \{ <var:J> = <var:G> \land <var:V0> = <nat:1> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> \} $ . Next , we see the variable update line \verb | <var:x> := <var:x> + <var:V0> | . This command transfers the condition $ \{ <var:J> = <var:G> \land <var:V0> = <nat:1> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> \} $ toward the postcondition $ \{ <var:J> = <var:G> \land <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> \} $ . This is deduced by the assignment inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <var:V4> : string := " <var:V4> " . Definition <def:poly> := <var:V1> := <var:J> ; <var:V2> := <var:V1> * <var:J> ; <var:V3> := <var:V2> * <var:J> ; <var:V4> := <var:V3> * <var:J> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:3> ; <var:V2> := <var:V2> * <nat:1> ; <var:V3> := <var:V3> * <nat:1> ; <var:V4> := <var:V4> * <nat:4> ; <var:x> := <var:V4> <var:x> := <var:x> + <var:V3> <var:x> := <var:x> + <var:V2> <var:x> := <var:x> + <var:V1> <var:x> := <var:x> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:J> = <var:G> }} <def:poly> {{ <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <var:G> /\ <var:V2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <var:G> /\ <var:V2> = <var:G> ^ <nat:2> /\ <var:V3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <var:G> /\ <var:V2> = <var:G> ^ <nat:2> /\ <var:V3> = <var:G> ^ <nat:3> /\ <var:V4> = <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <var:G> /\ <var:V2> = <var:G> ^ <nat:2> /\ <var:V3> = <var:G> ^ <nat:3> /\ <var:V4> = <var:G> ^ <nat:4> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <nat:3> * <var:G> /\ <var:V2> = <var:G> ^ <nat:2> /\ <var:V3> = <var:G> ^ <nat:3> /\ <var:V4> = <var:G> ^ <nat:4> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <nat:3> * <var:G> /\ <var:V2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:V3> = <var:G> ^ <nat:3> /\ <var:V4> = <var:G> ^ <nat:4> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <nat:3> * <var:G> /\ <var:V2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:G> ^ <nat:3> /\ <var:V4> = <var:G> ^ <nat:4> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <nat:3> * <var:G> /\ <var:V2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:G> ^ <nat:3> /\ <var:V4> = <nat:4> * <var:G> ^ <nat:4> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <nat:3> * <var:G> /\ <var:V2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:G> ^ <nat:3> /\ <var:V0> = <nat:1> /\ <var:x> = <nat:4> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <nat:3> * <var:G> /\ <var:V2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:V0> = <nat:1> /\ <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V1> = <nat:3> * <var:G> /\ <var:V0> = <nat:1> /\ <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:V0> = <nat:1> /\ <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:G> /\ <var:x> = <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 