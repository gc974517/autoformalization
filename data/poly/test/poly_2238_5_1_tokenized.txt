\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q1> := <var:z> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:9> ; <var:d> := <var:q1> <var:d> := <var:d> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:z> = <var:T> $ prior to executing our set of commands , it holds that $ <var:d> = <nat:9> \cdot <var:T> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:T> \} \\ <var:q1> := <var:z> ; \\ \{ <var:z> = <var:T> \land <var:q1> = <var:T> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:z> = <var:T> \land <var:q1> = <var:T> \land <var:q0> = <nat:1> \} \\ <var:q1> := <var:q1> * <nat:9> ; \\ \{ <var:z> = <var:T> \land <var:q1> = <nat:9> \cdot <var:T> \land <var:q0> = <nat:1> \} \\ <var:d> := <var:q1> \\ \{ <var:z> = <var:T> \land <var:q0> = <nat:1> \land <var:d> = <nat:9> \cdot <var:T> \} \\ <var:d> := <var:d> + <var:q0> \\ \{ <var:z> = <var:T> \land <var:d> = <nat:9> \cdot <var:T> + <nat:1> \} \end{eqnarray} The application of typical Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:z> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:9> ; <var:d> := <var:q1> <var:d> := <var:d> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:z> = <var:T> }} <def:poly> {{ <var:d> = <nat:9> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:q1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:q1> = <var:T> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:q1> = <nat:9> * <var:T> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:q0> = <nat:1> /\ <var:d> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:T> /\ <var:d> = <nat:9> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 