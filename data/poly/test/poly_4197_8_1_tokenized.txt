\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:U> ; <var:F2> := <var:F1> * <var:U> ; <var:F0> := <nat:9> ; <var:F1> := <var:F1> * <nat:1> ; <var:F2> := <var:F2> * <nat:7> ; <var:I> := <var:F2> <var:I> := <var:I> + <var:F1> <var:I> := <var:I> + <var:F0> \end{verbatim} Allowing that $ <var:U> = <var:y> $ prior to running the set of commands , it must be that $ <var:I> = <nat:7> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:9> $ . \end{theorem} \begin{proof} The proof of this program can be shown using Hoare logic . Shifting focus toward the subsequent commands contained in the set of commands , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:y> \} & <var:F1> := <var:U> & \{ <var:U> = <var:y> \land <var:F1> = <var:y> \} \\ \{ <var:U> = <var:y> \land <var:F1> = <var:y> \} & <var:F2> := <var:F1> * <var:U> & \{ <var:U> = <var:y> \land <var:F1> = <var:y> \land <var:F2> = <var:y> ^ <nat:2> \} \\ \{ <var:U> = <var:y> \land <var:F1> = <var:y> \land <var:F2> = <var:y> ^ <nat:2> \} & <var:F0> := <nat:9> & \{ <var:U> = <var:y> \land <var:F1> = <var:y> \land <var:F2> = <var:y> ^ <nat:2> \land <var:F0> = <nat:9> \} \end{tabular} This is given by the variable assignmet scheme in usual Hoare techniques . Paying attention to the subsequent steps found in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:y> \} & <var:F1> := <var:U> & \{ <var:U> = <var:y> \land <var:F1> = <var:y> \} \\ \{ <var:U> = <var:y> \land <var:F1> = <var:y> \} & <var:F2> := <var:F1> * <var:U> & \{ <var:U> = <var:y> \land <var:F1> = <var:y> \land <var:F2> = <var:y> ^ <nat:2> \} \\ \{ <var:U> = <var:y> \land <var:F1> = <var:y> \land <var:F2> = <var:y> ^ <nat:2> \} & <var:F0> := <nat:9> & \{ <var:U> = <var:y> \land <var:F1> = <var:y> \land <var:F2> = <var:y> ^ <nat:2> \land <var:F0> = <nat:9> \} \\ \{ <var:U> = <var:y> \land <var:F1> = <var:y> \land <var:F2> = <var:y> ^ <nat:2> \land <var:F0> = <nat:9> \} & <var:F1> := <var:F1> * <nat:1> & \{ <var:U> = <var:y> \land <var:F1> = <nat:1> \cdot <var:y> \land <var:F2> = <var:y> ^ <nat:2> \land <var:F0> = <nat:9> \} \end{tabular} This is deduced using the variable binding scheme from usual Hoare reasoning . Jumping to the next line of code seen in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:y> \} & <var:F1> := <var:U> & \{ <var:U> = <var:y> \land <var:F1> = <var:y> \} \end{tabular} This is shown with the assignment inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:U> = <var:y> }} <var:F1> := <var:U> ; <var:F2> := <var:F1> * <var:U> ; <var:F0> := <nat:9> ; <var:F1> := <var:F1> * <nat:1> ; <var:F2> := <var:F2> * <nat:7> ; <var:I> := <var:F2> <var:I> := <var:I> + <var:F1> <var:I> := <var:I> + <var:F0> {{ <var:I> = <nat:7> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:F1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:F1> = <var:y> /\ <var:F2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:F1> = <var:y> /\ <var:F2> = <var:y> ^ <nat:2> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:F1> = <nat:1> * <var:y> /\ <var:F2> = <var:y> ^ <nat:2> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:F1> = <nat:1> * <var:y> /\ <var:F2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:F1> = <nat:1> * <var:y> /\ <var:F0> = <nat:9> /\ <var:I> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:F0> = <nat:9> /\ <var:I> = <nat:7> * <var:y> ^ <nat:2> + <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:I> = <nat:7> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 