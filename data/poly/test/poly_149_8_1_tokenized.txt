\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:h> ; <var:X2> := <var:X1> * <var:h> ; <var:X0> := <nat:5> ; <var:X1> := <var:X1> * <nat:5> ; <var:X2> := <var:X2> * <nat:9> ; <var:e> := <var:X2> <var:e> := <var:e> + <var:X1> <var:e> := <var:e> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:h> = <var:T> $ before executing our set of commands , it must be that we see $ <var:e> = <nat:9> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:5> $ when list of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:T> \} \\ <var:X1> := <var:h> ; \\ \{ <var:h> = <var:T> \land <var:X1> = <var:T> \} \\ <var:X2> := <var:X1> * <var:h> ; \\ \{ <var:h> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \} \\ <var:X0> := <nat:5> ; \\ \{ <var:h> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X0> = <nat:5> \} \\ <var:X1> := <var:X1> * <nat:5> ; \\ \{ <var:h> = <var:T> \land <var:X1> = <nat:5> \times <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X0> = <nat:5> \} \\ <var:X2> := <var:X2> * <nat:9> ; \\ \{ <var:h> = <var:T> \land <var:X1> = <nat:5> \times <var:T> \land <var:X2> = <nat:9> \times <var:T> ^ <nat:2> \land <var:X0> = <nat:5> \} \\ <var:e> := <var:X2> \\ \{ <var:h> = <var:T> \land <var:X1> = <nat:5> \times <var:T> \land <var:X0> = <nat:5> \land <var:e> = <nat:9> \times <var:T> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:X1> \\ \{ <var:h> = <var:T> \land <var:X0> = <nat:5> \land <var:e> = <nat:9> \times <var:T> ^ <nat:2> + <nat:5> \times <var:T> \} \\ <var:e> := <var:e> + <var:X0> \\ \{ <var:h> = <var:T> \land <var:e> = <nat:9> \times <var:T> ^ <nat:2> + <nat:5> \times <var:T> + <nat:5> \} \end{eqnarray} Using usual Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X1> := <var:h> ; <var:X2> := <var:X1> * <var:h> ; <var:X0> := <nat:5> ; <var:X1> := <var:X1> * <nat:5> ; <var:X2> := <var:X2> * <nat:9> ; <var:e> := <var:X2> <var:e> := <var:e> + <var:X1> <var:e> := <var:e> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:h> = <var:T> }} <def:poly> {{ <var:e> = <nat:9> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:X1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:X1> = <nat:5> * <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:X1> = <nat:5> * <var:T> /\ <var:X2> = <nat:9> * <var:T> ^ <nat:2> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:X1> = <nat:5> * <var:T> /\ <var:X0> = <nat:5> /\ <var:e> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:X0> = <nat:5> /\ <var:e> = <nat:9> * <var:T> ^ <nat:2> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:e> = <nat:9> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 