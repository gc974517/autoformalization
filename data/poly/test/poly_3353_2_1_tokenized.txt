\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:q0> := <nat:6> ; <var:C> := <var:q0> \end{verbatim} Allow it to hold that $ <var:z> = <var:d> $ , for any $ <var:d> \in \mathbb{N} $ , ahead of the execution of this set of commands , then we have $ <var:C> = <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of this program can be done with standard Hoare reasoning . Honing in on the subsequent lines of codeseen in our list of instructions , \begin{verbatim} { <var:z> = <var:d> } <var:q0> := <nat:6> { <var:z> = <var:d> \land <var:q0> = <nat:6> } { <var:z> = <var:d> \land <var:q0> = <nat:6> } <var:C> := <var:q0{ <var:z> = <var:d> \land <var:C> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:z> = <var:d> }} <var:q0> := <nat:6> ; <var:C> := <var:q0> {{ <var:C> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:C> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 