\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:S> ; <var:i2> := <var:i1> * <var:S> ; <var:i3> := <var:i2> * <var:S> ; <var:i4> := <var:i3> * <var:S> ; <var:i0> := <nat:6> ; <var:i1> := <var:i1> * <nat:3> ; <var:i2> := <var:i2> * <nat:3> ; <var:i3> := <var:i3> * <nat:1> ; <var:i4> := <var:i4> * <nat:8> ; <var:g> := <var:i4> <var:g> := <var:g> + <var:i3> <var:g> := <var:g> + <var:i2> <var:g> := <var:g> + <var:i1> <var:g> := <var:g> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:S> = <var:a> $ prior to executing the code it holds that $ <var:g> = <nat:8> \times <var:a> ^ <nat:4> + <nat:1> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare techniques gives us : \begin{eqnarray} \{ <var:S> = <var:a> \} \\ <var:i1> := <var:S> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <var:a> \} \\ <var:i2> := <var:i1> * <var:S> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <var:a> \land <var:i2> = <var:a> ^ <nat:2> \} \\ <var:i3> := <var:i2> * <var:S> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <var:a> \land <var:i2> = <var:a> ^ <nat:2> \land <var:i3> = <var:a> ^ <nat:3> \} \\ <var:i4> := <var:i3> * <var:S> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <var:a> \land <var:i2> = <var:a> ^ <nat:2> \land <var:i3> = <var:a> ^ <nat:3> \land <var:i4> = <var:a> ^ <nat:4> \} \\ <var:i0> := <nat:6> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <var:a> \land <var:i2> = <var:a> ^ <nat:2> \land <var:i3> = <var:a> ^ <nat:3> \land <var:i4> = <var:a> ^ <nat:4> \land <var:i0> = <nat:6> \} \\ <var:i1> := <var:i1> * <nat:3> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <nat:3> * <var:a> \land <var:i2> = <var:a> ^ <nat:2> \land <var:i3> = <var:a> ^ <nat:3> \land <var:i4> = <var:a> ^ <nat:4> \land <var:i0> = <nat:6> \} \\ <var:i2> := <var:i2> * <nat:3> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <nat:3> * <var:a> \land <var:i2> = <nat:3> * <var:a> ^ <nat:2> \land <var:i3> = <var:a> ^ <nat:3> \land <var:i4> = <var:a> ^ <nat:4> \land <var:i0> = <nat:6> \} \\ <var:i3> := <var:i3> * <nat:1> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <nat:3> * <var:a> \land <var:i2> = <nat:3> * <var:a> ^ <nat:2> \land <var:i3> = <nat:1> * <var:a> ^ <nat:3> \land <var:i4> = <var:a> ^ <nat:4> \land <var:i0> = <nat:6> \} \\ <var:i4> := <var:i4> * <nat:8> ; \\ \{ <var:S> = <var:a> \land <var:i1> = <nat:3> * <var:a> \land <var:i2> = <nat:3> * <var:a> ^ <nat:2> \land <var:i3> = <nat:1> * <var:a> ^ <nat:3> \land <var:i4> = <nat:8> * <var:a> ^ <nat:4> \land <var:i0> = <nat:6> \} \\ <var:g> := <var:i4> \\ \{ <var:S> = <var:a> \land <var:i1> = <nat:3> * <var:a> \land <var:i2> = <nat:3> * <var:a> ^ <nat:2> \land <var:i3> = <nat:1> * <var:a> ^ <nat:3> \land <var:i0> = <nat:6> \land <var:g> = <nat:8> * <var:a> ^ <nat:4> \} \\ <var:g> := <var:g> + <var:i3> \\ \{ <var:S> = <var:a> \land <var:i1> = <nat:3> * <var:a> \land <var:i2> = <nat:3> * <var:a> ^ <nat:2> \land <var:i0> = <nat:6> \land <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:i2> \\ \{ <var:S> = <var:a> \land <var:i1> = <nat:3> * <var:a> \land <var:i0> = <nat:6> \land <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:i1> \\ \{ <var:S> = <var:a> \land <var:i0> = <nat:6> \land <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> \} \\ <var:g> := <var:g> + <var:i0> \\ \{ <var:S> = <var:a> \land <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:6> \} \end{eqnarray} Thusly , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <var:i4> : string := " <var:i4> " . Definition <def:poly> := <var:i1> := <var:S> ; <var:i2> := <var:i1> * <var:S> ; <var:i3> := <var:i2> * <var:S> ; <var:i4> := <var:i3> * <var:S> ; <var:i0> := <nat:6> ; <var:i1> := <var:i1> * <nat:3> ; <var:i2> := <var:i2> * <nat:3> ; <var:i3> := <var:i3> * <nat:1> ; <var:i4> := <var:i4> * <nat:8> ; <var:g> := <var:i4> <var:g> := <var:g> + <var:i3> <var:g> := <var:g> + <var:i2> <var:g> := <var:g> + <var:i1> <var:g> := <var:g> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:S> = <var:a> }} <def:poly> {{ <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <var:a> /\ <var:i2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <var:a> /\ <var:i2> = <var:a> ^ <nat:2> /\ <var:i3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <var:a> /\ <var:i2> = <var:a> ^ <nat:2> /\ <var:i3> = <var:a> ^ <nat:3> /\ <var:i4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <var:a> /\ <var:i2> = <var:a> ^ <nat:2> /\ <var:i3> = <var:a> ^ <nat:3> /\ <var:i4> = <var:a> ^ <nat:4> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <nat:3> * <var:a> /\ <var:i2> = <var:a> ^ <nat:2> /\ <var:i3> = <var:a> ^ <nat:3> /\ <var:i4> = <var:a> ^ <nat:4> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <nat:3> * <var:a> /\ <var:i2> = <nat:3> * <var:a> ^ <nat:2> /\ <var:i3> = <var:a> ^ <nat:3> /\ <var:i4> = <var:a> ^ <nat:4> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <nat:3> * <var:a> /\ <var:i2> = <nat:3> * <var:a> ^ <nat:2> /\ <var:i3> = <nat:1> * <var:a> ^ <nat:3> /\ <var:i4> = <var:a> ^ <nat:4> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <nat:3> * <var:a> /\ <var:i2> = <nat:3> * <var:a> ^ <nat:2> /\ <var:i3> = <nat:1> * <var:a> ^ <nat:3> /\ <var:i4> = <nat:8> * <var:a> ^ <nat:4> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <nat:3> * <var:a> /\ <var:i2> = <nat:3> * <var:a> ^ <nat:2> /\ <var:i3> = <nat:1> * <var:a> ^ <nat:3> /\ <var:i0> = <nat:6> /\ <var:g> = <nat:8> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <nat:3> * <var:a> /\ <var:i2> = <nat:3> * <var:a> ^ <nat:2> /\ <var:i0> = <nat:6> /\ <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i1> = <nat:3> * <var:a> /\ <var:i0> = <nat:6> /\ <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:i0> = <nat:6> /\ <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:g> = <nat:8> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 