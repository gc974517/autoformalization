\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C> := <nat:1> ; <var:C> := <nat:3> + <var:C> * <var:w> ; <var:C> := <nat:2> + <var:C> * <var:w> ; <var:C> := <nat:4> + <var:C> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:w> = <var:b> $ --- letting $ <var:b> \in \mathbb{Z}^+ $ --- before executing this series of commands , it must be that $ <var:C> = <nat:1> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:4> $ when series of commands has finished executing . \end{theorem} \begin{proof} Applying usual Hoare logic returns : \begin{eqnarray} \{ <var:w> = <var:b> \} \\ <var:C> := <nat:1> ; \\ \{ <var:w> = <var:b> \land <var:C> = <nat:1> \} \\ <var:C> := <nat:3> + <var:C> * <var:w> ; \\ \{ <var:w> = <var:b> \land <var:C> = <nat:1> \cdot <var:b> + <nat:3> \} \\ <var:C> := <nat:2> + <var:C> * <var:w> ; \\ \{ <var:w> = <var:b> \land <var:C> = <nat:1> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> + <nat:2> \} \\ <var:C> := <nat:4> + <var:C> * <var:w> \\ \{ <var:w> = <var:b> \land <var:C> = <nat:1> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:4> \} \end{eqnarray} Thusly , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:1> ; <var:C> := <nat:3> + <var:C> * <var:w> ; <var:C> := <nat:2> + <var:C> * <var:w> ; <var:C> := <nat:4> + <var:C> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:w> = <var:b> }} <def:poly> {{ <var:C> = <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:C> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:C> = <nat:1> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:C> = <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:C> = <nat:1> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 