\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o> := <nat:1> ; <var:o> := <nat:1> + <var:o> * <var:z> ; <var:o> := <nat:4> + <var:o> * <var:z> ; <var:o> := <nat:3> + <var:o> * <var:z> ; <var:o> := <nat:2> + <var:o> * <var:z> ; <var:o> := <var:o> * <var:z> ; <var:o> := <var:o> * <var:z> ; <var:o> := <var:o> * <var:z> ; <var:o> := <var:o> * <var:z> ; <var:o> := <nat:1> + <var:o> * <var:z> ; <var:o> := <nat:4> + <var:o> * <var:z> ; <var:o> := <nat:3> + <var:o> * <var:z> ; <var:o> := <nat:1> + <var:o> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:z> = <var:V> $ , letting positive integers $ <var:V> $ , before the execution of our code segment it follows that $ <var:o> = <nat:1> \times <var:V> ^ <nat:12> + <nat:1> \times <var:V> ^ <nat:11> + <nat:4> \times <var:V> ^ <nat:10> + <nat:3> \times <var:V> ^ <nat:9> + <nat:2> \times <var:V> ^ <nat:8> + <nat:1> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare logic produces : \begin{eqnarray} \{ <var:z> = <var:V> \} \\ <var:o> := <nat:1> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> \} \\ <var:o> := <nat:1> + <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> + <nat:1> \} \end{eqnarray} Continuing executing this series of instructions gives us : \begin{eqnarray} <var:o> := <nat:4> + <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> \} \\ <var:o> := <nat:3> + <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> \} \\ <var:o> := <nat:2> + <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> \} \\ <var:o> := <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + \} \\ <var:o> := <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + \} \\ <var:o> := <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + \} \\ <var:o> := <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + \} \\ <var:o> := <nat:1> + <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:1> \} \end{eqnarray} Furthering the execution of this code segment returns : \begin{eqnarray} <var:o> := <nat:4> + <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> + <nat:4> \} \\ <var:o> := <nat:3> + <var:o> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:11> + <nat:1> * <var:V> ^ <nat:10> + <nat:4> * <var:V> ^ <nat:9> + <nat:3> * <var:V> ^ <nat:8> + <nat:2> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> \} \\ <var:o> := <nat:1> + <var:o> * <var:z> \\ \{ <var:z> = <var:V> \land <var:o> = <nat:1> * <var:V> ^ <nat:12> + <nat:1> * <var:V> ^ <nat:11> + <nat:4> * <var:V> ^ <nat:10> + <nat:3> * <var:V> ^ <nat:9> + <nat:2> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> \} \end{eqnarray} Considering the above , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:1> ; <var:o> := <nat:1> + <var:o> * <var:z> ; <var:o> := <nat:4> + <var:o> * <var:z> ; <var:o> := <nat:3> + <var:o> * <var:z> ; <var:o> := <nat:2> + <var:o> * <var:z> ; <var:o> := <var:o> * <var:z> ; <var:o> := <var:o> * <var:z> ; <var:o> := <var:o> * <var:z> ; <var:o> := <var:o> * <var:z> ; <var:o> := <nat:1> + <var:o> * <var:z> ; <var:o> := <nat:4> + <var:o> * <var:z> ; <var:o> := <nat:3> + <var:o> * <var:z> ; <var:o> := <nat:1> + <var:o> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:z> = <var:V> }} <def:poly> {{ <var:o> = <nat:1> * <var:V> ^ <nat:12> + <nat:1> * <var:V> ^ <nat:11> + <nat:4> * <var:V> ^ <nat:10> + <nat:3> * <var:V> ^ <nat:9> + <nat:2> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:11> + <nat:1> * <var:V> ^ <nat:10> + <nat:4> * <var:V> ^ <nat:9> + <nat:3> * <var:V> ^ <nat:8> + <nat:2> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:o> = <nat:1> * <var:V> ^ <nat:12> + <nat:1> * <var:V> ^ <nat:11> + <nat:4> * <var:V> ^ <nat:10> + <nat:3> * <var:V> ^ <nat:9> + <nat:2> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 