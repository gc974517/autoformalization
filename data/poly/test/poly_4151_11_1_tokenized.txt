\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:r1> := <var:m> ; <var:r2> := <var:r1> * <var:m> ; <var:r3> := <var:r2> * <var:m> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:7> ; <var:r3> := <var:r3> * <nat:1> ; <var:p> := <var:r3> <var:p> := <var:p> + <var:r2> <var:p> := <var:p> + <var:r1> <var:p> := <var:p> + <var:r0> \end{verbatim} Allowing ( given any positive numbers $ <var:a> $ ) it to be that $ <var:m> = <var:a> $ ahead of executing our set of commands then we have $ <var:p> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program is shown through typical Hoare logic . Shifting focus toward the subsequent lines contained in our code segment , we see \begin{verbatim} { <var:m> = <var:a> } <var:r1> := <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> } { <var:m> = <var:a> \land <var:r1> = <var:a> } <var:r2> := <var:r1> * <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> } { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> } <var:r3> := <var:r2> * <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> } \end{verbatim} Jumping to the subsequent statements seen in the list of instructions , \begin{verbatim} { <var:m> = <var:a> } <var:r1> := <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> } { <var:m> = <var:a> \land <var:r1> = <var:a> } <var:r2> := <var:r1> * <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> } { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> } <var:r3> := <var:r2> * <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> } { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> } <var:r0> := <nat:9> { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> \land <var:r0> = <nat:9> } { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> \land <var:r0> = <nat:9> } <var:r1> := <var:r1> * <nat:1> { <var:m> = <var:a> \land <var:r1> = <nat:1> * <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> \land <var:r0> = <nat:9> } \end{verbatim} This is given with the binding inference rule given by usual Hoare reasoning . Stepping through , we see \begin{verbatim} { <var:m> = <var:a> } <var:r1> := <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> } { <var:m> = <var:a> \land <var:r1> = <var:a> } <var:r2> := <var:r1> * <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> } { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> } <var:r3> := <var:r2> * <var:m> { <var:m> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> } \end{verbatim} This is shown to be logically sound through the assignment inference rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:m> = <var:a> }} <var:r1> := <var:m> ; <var:r2> := <var:r1> * <var:m> ; <var:r3> := <var:r2> * <var:m> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:7> ; <var:r3> := <var:r3> * <nat:1> ; <var:p> := <var:r3> <var:p> := <var:p> + <var:r2> <var:p> := <var:p> + <var:r1> <var:p> := <var:p> + <var:r0> {{ <var:p> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <var:a> /\ <var:r2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <var:a> /\ <var:r2> = <var:a> ^ <nat:2> /\ <var:r3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <var:a> /\ <var:r2> = <var:a> ^ <nat:2> /\ <var:r3> = <var:a> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <nat:1> * <var:a> /\ <var:r2> = <var:a> ^ <nat:2> /\ <var:r3> = <var:a> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <nat:1> * <var:a> /\ <var:r2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:r3> = <var:a> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <nat:1> * <var:a> /\ <var:r2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:r3> = <nat:1> * <var:a> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <nat:1> * <var:a> /\ <var:r2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:r0> = <nat:9> /\ <var:p> = <nat:1> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r1> = <nat:1> * <var:a> /\ <var:r0> = <nat:9> /\ <var:p> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:r0> = <nat:9> /\ <var:p> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:a> /\ <var:p> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 