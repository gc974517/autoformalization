\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:t> ; <var:p2> := <nat:3> ; <var:p2> := <var:p2> * <var:t> ; <var:p2> := <var:p2> * <var:t> ; <var:V> := <var:p2> ; <var:V> := <var:V> + <var:p1> ; <var:V> := <var:V> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Given that $ <var:t> = <var:P> $ before the evaluation of this segment of code , then we see $ <var:V> = <nat:3> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this segment of code is accomplished by Hoare reasoning . Considering the subsequent bit of code found in our list of instructions , we see the assignment command \verb | <var:p0> := <nat:3> ; | . This line advances the condition $ \{ <var:t> = <var:P> \} $ into the condition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \} $ . Moving on , the assignment code \verb | <var:p1> := <nat:2> ; | . This code transfers the precondition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \} $ into the postcondition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \} $ . Honing in on the proceeding line of code contained in our list of commands , we see the binding code \verb | <var:p1> := <var:p1> * <var:t> ; | . This takes the precondition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \} $ toward the condition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \} $ . Stepping forward , the variable binding code \verb | <var:p2> := <nat:3> ; | . This takes $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \} $ to $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \land <var:p2> = <nat:3> \} $ . Immediately after , we see the variable assignmet statement \verb | <var:p2> := <var:p2> * <var:t> ; | . This code takes $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \land <var:p2> = <nat:3> \} $ as the postcondition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \land <var:p2> = <nat:3> \cdot <var:P> \} $ . This is deduced using the assignment rule found in standard Hoare logic . Going to the next step , we have the assignment code \verb | <var:p2> := <var:p2> * <var:t> ; | . This statement transfers the precondition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \land <var:p2> = <nat:3> \cdot <var:P> \} $ toward $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \land <var:p2> = <nat:3> \cdot <var:P> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law defined in standard Hoare reasoning . Paying attention to the upcoming bit of code in the code , we see the binding code letting $ <var:p2> $ as $ <var:V>$ . This statement transfers $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \land <var:p2> = <nat:3> \cdot <var:P> ^ <nat:2> \} $ to the postcondition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \land <var:V> = <nat:3> \cdot <var:P> ^ <nat:2> \} $ . This is shown through the assignment rule of typical Hoare logic . Moving forward , we have the variable assignmet statement \verb | <var:V> := <var:V> + <var:p1> ; | . This moves $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:P> \land <var:V> = <nat:3> \cdot <var:P> ^ <nat:2> \} $ into the condition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:V> = <nat:3> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> \} $ . Moving on to the proceeding bit of code in the code segment , we have the environment update statement assigning $ <var:V> + <var:p0$ as $ <var:V>$ . This forwards the condition $ \{ <var:t> = <var:P> \land <var:p0> = <nat:3> \land <var:V> = <nat:3> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> \} $ to $ \{ <var:t> = <var:P> \land <var:V> = <nat:3> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + <nat:3> \} $ . This is guaranteed using the assignment scheme given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:t> ; <var:p2> := <nat:3> ; <var:p2> := <var:p2> * <var:t> ; <var:p2> := <var:p2> * <var:t> ; <var:V> := <var:p2> ; <var:V> := <var:V> + <var:p1> ; <var:V> := <var:V> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:t> = <var:P> }} <def:poly> {{ <var:V> = <nat:3> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:P> /\ <var:p2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:P> /\ <var:p2> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:P> /\ <var:p2> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:P> /\ <var:V> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:p0> = <nat:3> /\ <var:V> = <nat:3> * <var:P> ^ <nat:2> + <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:V> = <nat:3> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 