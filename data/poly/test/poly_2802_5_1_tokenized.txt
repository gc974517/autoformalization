\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:h> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:1> ; <var:r> := <var:d1> <var:r> := <var:r> + <var:d0> \end{verbatim} Allowing it to be that $ <var:h> = <var:A> $ ahead of running the code segment , it must be that we have $ <var:r> = <nat:1> \cdot <var:A> + <nat:8> $ after set of instructions finishes . \end{theorem} \begin{proof} The method of proof for our segment of code is given using typical Hoare reasoning . Advancing on , \[ \begin{tabular} {rcl} \{ <var:h> = <var:A> \} & <var:d1> := <var:h> & \{ <var:h> = <var:A> \land <var:d1> = <var:A> \} \end{tabular} Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:h> = <var:A> \} & <var:d1> := <var:h> & \{ <var:h> = <var:A> \land <var:d1> = <var:A> \} \\ \{ <var:h> = <var:A> \land <var:d1> = <var:A> \} & <var:d0> := <nat:8> & \{ <var:h> = <var:A> \land <var:d1> = <var:A> \land <var:d0> = <nat:8> \} \end{tabular} Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:h> = <var:A> \} & <var:d1> := <var:h> & \{ <var:h> = <var:A> \land <var:d1> = <var:A> \} \end{tabular} This is shown by the variable binding rule from standard Hoare techniques . Honing in on the upcoming statement seen in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:h> = <var:A> \} & <var:d1> := <var:h> & \{ <var:h> = <var:A> \land <var:d1> = <var:A> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:h> = <var:A> }} <var:d1> := <var:h> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:1> ; <var:r> := <var:d1> <var:r> := <var:r> + <var:d0> {{ <var:r> = <nat:1> * <var:A> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:d1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:d1> = <var:A> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:d1> = <nat:1> * <var:A> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:d0> = <nat:8> /\ <var:r> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:r> = <nat:1> * <var:A> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 