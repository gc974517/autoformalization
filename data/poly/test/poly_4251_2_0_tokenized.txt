\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:2> ; <var:U> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:F> = <var:b> $ given some positive integers $ <var:b> $ before the execution of our code , it holds that $ <var:U> = <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for our series of instructions is evident through standard Hoare logic . Following , we see \begin{eqnarray} \{ <var:F> = <var:b> \} \, <var:d0> := <nat:2> \, \{ <var:F> = <var:b> \land <var:d0> = <nat:2> \} \end{eqnarray} Paying attention to the subsequent step contained in the code , we see \begin{eqnarray} \{ <var:F> = <var:b> \} \, <var:d0> := <nat:2> \, \{ <var:F> = <var:b> \land <var:d0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:2> ; <var:U> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:F> = <var:b> }} <def:poly> {{ <var:U> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:U> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 