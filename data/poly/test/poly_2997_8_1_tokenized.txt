\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:T> ; <var:J2> := <var:J1> * <var:T> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:3> ; <var:J2> := <var:J2> * <nat:9> ; <var:r> := <var:J2> <var:r> := <var:r> + <var:J1> <var:r> := <var:r> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> in \emph{Imp} . Assume it to be that $ <var:T> = <var:X> $ ( for $ <var:X> \in \mathbb{N} $ ) prior to running our list of commands then we see $ <var:r> = <nat:9> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is clear using Hoare reasoning . Moving on to the next step , we see \begin{eqnarray} \{ <var:T> = <var:X> \} \, <var:J1> := <var:T> \, \{ <var:T> = <var:X> \land <var:J1> = <var:X> \} \\ \{ <var:T> = <var:X> \land <var:J1> = <var:X> \} \, <var:J2> := <var:J1> * <var:T> \, \{ <var:T> = <var:X> \land <var:J1> = <var:X> \land <var:J2> = <var:X> ^ <nat:2> \} \\ \{ <var:T> = <var:X> \land <var:J1> = <var:X> \land <var:J2> = <var:X> ^ <nat:2> \} \, <var:J0> := <nat:7> \, \{ <var:T> = <var:X> \land <var:J1> = <var:X> \land <var:J2> = <var:X> ^ <nat:2> \land <var:J0> = <nat:7> \} \end{eqnarray} This is known to be sound with the assignment inference rule given by Hoare techniques . Focusing on the following bits of codeseen in the segment of code , \begin{eqnarray} \{ <var:T> = <var:X> \} \, <var:J1> := <var:T> \, \{ <var:T> = <var:X> \land <var:J1> = <var:X> \} \\ \{ <var:T> = <var:X> \land <var:J1> = <var:X> \} \, <var:J2> := <var:J1> * <var:T> \, \{ <var:T> = <var:X> \land <var:J1> = <var:X> \land <var:J2> = <var:X> ^ <nat:2> \} \\ \{ <var:T> = <var:X> \land <var:J1> = <var:X> \land <var:J2> = <var:X> ^ <nat:2> \} \, <var:J0> := <nat:7> \, \{ <var:T> = <var:X> \land <var:J1> = <var:X> \land <var:J2> = <var:X> ^ <nat:2> \land <var:J0> = <nat:7> \} \end{eqnarray} Advancing on , \begin{eqnarray} \{ <var:T> = <var:X> \} \, <var:J1> := <var:T> \, \{ <var:T> = <var:X> \land <var:J1> = <var:X> \} \end{eqnarray} Advancing to the following piece of code contained in the set of commands , we have \begin{eqnarray} \{ <var:T> = <var:X> \} \, <var:J1> := <var:T> \, \{ <var:T> = <var:X> \land <var:J1> = <var:X> \} \end{eqnarray} This is known to be sound through the variable update rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J1> := <var:T> ; <var:J2> := <var:J1> * <var:T> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:3> ; <var:J2> := <var:J2> * <nat:9> ; <var:r> := <var:J2> <var:r> := <var:r> + <var:J1> <var:r> := <var:r> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:T> = <var:X> }} <def:poly> {{ <var:r> = <nat:9> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:J1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:J1> = <var:X> /\ <var:J2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:J1> = <var:X> /\ <var:J2> = <var:X> ^ <nat:2> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:J1> = <nat:3> * <var:X> /\ <var:J2> = <var:X> ^ <nat:2> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:J1> = <nat:3> * <var:X> /\ <var:J2> = <nat:9> * <var:X> ^ <nat:2> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:J1> = <nat:3> * <var:X> /\ <var:J0> = <nat:7> /\ <var:r> = <nat:9> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:J0> = <nat:7> /\ <var:r> = <nat:9> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:r> = <nat:9> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 