\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:3> ; <var:Z> := <var:j0> \end{verbatim} Assume it to hold that $ <var:S> = <var:r> $ before the evaluation of our list of commands , it must be that we see $ <var:Z> = <nat:3> $ after list of commands has finished executing . \end{theorem} \begin{proof} The application of typical Hoare techniques gives us : \begin{eqnarray} \{ <var:S> = <var:r> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:S> = <var:r> \land <var:j0> = <nat:3> \} \\ <var:Z> := <var:j0> \\ \{ <var:S> = <var:r> \land <var:Z> = <nat:3> \} \end{eqnarray} Given the preceding argument , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:S> = <var:r> }} <var:j0> := <nat:3> ; <var:Z> := <var:j0> {{ <var:Z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:r> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:r> /\ <var:Z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 