\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:p1> := <var:K> ; <var:p2> := <var:p1> * <var:K> ; <var:p3> := <var:p2> * <var:K> ; <var:p4> := <var:p3> * <var:K> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:7> ; <var:p2> := <var:p2> * <nat:8> ; <var:p3> := <var:p3> * <nat:7> ; <var:p4> := <var:p4> * <nat:3> ; <var:s> := <var:p4> <var:s> := <var:s> + <var:p3> <var:s> := <var:s> + <var:p2> <var:s> := <var:s> + <var:p1> <var:s> := <var:s> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Assuming ( given some positive coefficients $ <var:d> $ ) that we have $ <var:K> = <var:d> $ ahead of interpreting the code , then $ <var:s> = <nat:3> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:7> $ when set of commands is done executing . \end{theorem} \begin{proof} The argument for our series of commands can be seen with typical Hoare reasoning . Now , we have the variable binding command \verb | <var:p1> := <var:K> ; | . This code transfers the condition $ \{ <var:K> = <var:d> \} $ as the condition $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \} $ . Moving forward to the next step , we see the command \verb | <var:p2> := <var:p1> * <var:K> ; | . This transfers $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \} $ toward $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \land <var:p2> = <var:d> ^ <nat:2> \} $ . Taking another step toward the following step found in the segment of code , the variable update command yielding $ <var:p2> * <var:K> $ to $ <var:p3>$ . This statement advances $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \land <var:p2> = <var:d> ^ <nat:2> \} $ toward $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \land <var:p2> = <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \} $ . Taking a look at the proceeding command seen in the code segment , the variable binding statement yielding $ <var:p3> * <var:K> $ to $ <var:p4>$ . This forwards $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \land <var:p2> = <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \} $ as the postcondition $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \land <var:p2> = <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \} $ . This is rigorously given using the assignment inference rule found in standard Hoare techniques . Jumping to the next line of code in the code segment , the variable binding statement assigning $ <nat:7> $ to $ <var:p0>$ . This advances $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \land <var:p2> = <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \} $ as the condition $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \land <var:p2> = <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ . This is shown to be logically sound through the assignment rule given by Hoare techniques . Paying attention to the proceeding statement contained in the program , we see the line \verb | <var:p1> := <var:p1> * <nat:7> ; | . This code takes $ \{ <var:K> = <var:d> \land <var:p1> = <var:d> \land <var:p2> = <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ to the postcondition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ . Moving forward , the binding code assigning $ <var:p2> * <nat:8> $ as $ <var:p2>$ . This command takes the precondition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ to the postcondition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ . Advancing to the next step , we have the variable assignmet statement \verb | <var:p3> := <var:p3> * <nat:7> ; | . This transfers the condition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p3> = <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ as the condition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ . Stepping through , we have the variable assignmet command \verb | <var:p4> := <var:p4> * <nat:3> ; | . This code redefines the precondition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:p4> = <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ into the condition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:p4> = <nat:3> \cdot <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ . Jumping to the proceeding line of code contained in our set of instructions , the line defining $ <var:p4$ into $ <var:s>$ . This code forwards the condition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:p4> = <nat:3> \cdot <var:d> ^ <nat:4> \land <var:p0> = <nat:7> \} $ into $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:p0> = <nat:7> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> \} $ . This is sound using the assignment law defined by standard Hoare techniques . Taking a look at the subsequent line of code found in the set of commands , the variable binding command \verb | <var:s> := <var:s> + <var:p3> | . This command takes $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p3> = <nat:7> \cdot <var:d> ^ <nat:3> \land <var:p0> = <nat:7> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> \} $ into $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p0> = <nat:7> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> \} $ . This is deduced using the assignment inference rule from typical Hoare reasoning . Immediately after , we have the command yielding $ <var:s> + <var:p2$ to $ <var:s>$ . This takes $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p2> = <nat:8> \cdot <var:d> ^ <nat:2> \land <var:p0> = <nat:7> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> \} $ into $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p0> = <nat:7> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> + <nat:8> \cdot <var:d> ^ <nat:2> \} $ . Jumping to the subsequent step seen in our series of instructions , we see the command defining $ <var:s> + <var:p1$ into $ <var:s>$ . This advances the condition $ \{ <var:K> = <var:d> \land <var:p1> = <nat:7> \cdot <var:d> \land <var:p0> = <nat:7> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> + <nat:8> \cdot <var:d> ^ <nat:2> \} $ as the postcondition $ \{ <var:K> = <var:d> \land <var:p0> = <nat:7> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> + <nat:8> \cdot <var:d> ^ <nat:2> + <nat:7> \cdot <var:d> \} $ . This is shown to be logically sound using the assignment inference rule obtained from standard Hoare reasoning . Looking at the proceeding line contained in the series of instructions , the variable assignmet statement assigning $ <var:s> + <var:p0$ into $ <var:s>$ . This command moves the condition $ \{ <var:K> = <var:d> \land <var:p0> = <nat:7> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> + <nat:8> \cdot <var:d> ^ <nat:2> + <nat:7> \cdot <var:d> \} $ toward $ \{ <var:K> = <var:d> \land <var:s> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:7> \cdot <var:d> ^ <nat:3> + <nat:8> \cdot <var:d> ^ <nat:2> + <nat:7> \cdot <var:d> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Definition <def:poly> := <var:p1> := <var:K> ; <var:p2> := <var:p1> * <var:K> ; <var:p3> := <var:p2> * <var:K> ; <var:p4> := <var:p3> * <var:K> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:7> ; <var:p2> := <var:p2> * <nat:8> ; <var:p3> := <var:p3> * <nat:7> ; <var:p4> := <var:p4> * <nat:3> ; <var:s> := <var:p4> <var:s> := <var:s> + <var:p3> <var:s> := <var:s> + <var:p2> <var:s> := <var:s> + <var:p1> <var:s> := <var:s> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:K> = <var:d> }} <def:poly> {{ <var:s> = <nat:3> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <var:d> /\ <var:p2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <var:d> /\ <var:p2> = <var:d> ^ <nat:2> /\ <var:p3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <var:d> /\ <var:p2> = <var:d> ^ <nat:2> /\ <var:p3> = <var:d> ^ <nat:3> /\ <var:p4> = <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <var:d> /\ <var:p2> = <var:d> ^ <nat:2> /\ <var:p3> = <var:d> ^ <nat:3> /\ <var:p4> = <var:d> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <nat:7> * <var:d> /\ <var:p2> = <var:d> ^ <nat:2> /\ <var:p3> = <var:d> ^ <nat:3> /\ <var:p4> = <var:d> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <nat:7> * <var:d> /\ <var:p2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:p3> = <var:d> ^ <nat:3> /\ <var:p4> = <var:d> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <nat:7> * <var:d> /\ <var:p2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:p3> = <nat:7> * <var:d> ^ <nat:3> /\ <var:p4> = <var:d> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <nat:7> * <var:d> /\ <var:p2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:p3> = <nat:7> * <var:d> ^ <nat:3> /\ <var:p4> = <nat:3> * <var:d> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <nat:7> * <var:d> /\ <var:p2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:p3> = <nat:7> * <var:d> ^ <nat:3> /\ <var:p0> = <nat:7> /\ <var:s> = <nat:3> * <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <nat:7> * <var:d> /\ <var:p2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:p0> = <nat:7> /\ <var:s> = <nat:3> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p1> = <nat:7> * <var:d> /\ <var:p0> = <nat:7> /\ <var:s> = <nat:3> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:p0> = <nat:7> /\ <var:s> = <nat:3> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:s> = <nat:3> * <var:d> ^ <nat:4> + <nat:7> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 