\begin{document} \begin{theorem} We define the following program as \begin{verbatim} <var:q0> := <nat:8> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:D> ; <var:q2> := <nat:5> ; <var:q2> := <var:q2> * <var:D> ; <var:q2> := <var:q2> * <var:D> ; <var:H> := <var:q2> ; <var:H> := <var:H> + <var:q1> ; <var:H> := <var:H> + <var:q0> \end{verbatim} Allowing it to hold that $ <var:D> = <var:C> $ before the execution of the series of instructions , it follows that $ <var:H> = <nat:5> \times <var:C> ^ <nat:2> + <nat:7> \times <var:C> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our set of instructions is accomplished through typical Hoare logic . Moving forward , we have \begin{verbatim} { <var:D> = <var:C> } <var:q0> := <nat:8> { <var:D> = <var:C> \land <var:q0> = <nat:8> } { <var:D> = <var:C> \land <var:q0> = <nat:8> } <var:q1> := <nat:7> { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> } { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> } <var:q1> := <var:q1> * <var:D> { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> } { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> } <var:q2> := <nat:5> { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> \land <var:q2> = <nat:5> } { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> \land <var:q2> = <nat:5> } <var:q2> := <var:q2> * <var:D> { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> \land <var:q2> = <nat:5> * <var:C> } { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> \land <var:q2> = <nat:5> * <var:C> } <var:q2> := <var:q2> * <var:D> { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> \land <var:q2> = <nat:5> * <var:C> ^ <nat:2> } { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> \land <var:q2> = <nat:5> * <var:C> ^ <nat:2> } <var:H> := <var:q2> { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> \land <var:H> = <nat:5> * <var:C> ^ <nat:2> } { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:q1> = <nat:7> * <var:C> \land <var:H> = <nat:5> * <var:C> ^ <nat:2> } <var:H> := <var:H> + <var:q1> { <var:D> = <var:C> \land <var:q0> = <nat:8> \land <var:H> = <nat:5> * <var:C> ^ <nat:2> + <nat:7> * <var:C> } \end{verbatim} This is shown with the binding scheme defined in standard Hoare logic . Following , we see \begin{verbatim} { <var:D> = <var:C> } <var:q0> := <nat:8> { <var:D> = <var:C> \land <var:q0> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:D> = <var:C> }} <var:q0> := <nat:8> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:D> ; <var:q2> := <nat:5> ; <var:q2> := <var:q2> * <var:D> ; <var:q2> := <var:q2> * <var:D> ; <var:H> := <var:q2> ; <var:H> := <var:H> + <var:q1> ; <var:H> := <var:H> + <var:q0> {{ <var:H> = <nat:5> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:C> /\ <var:q2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:C> /\ <var:q2> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:C> /\ <var:q2> = <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:7> * <var:C> /\ <var:H> = <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:q0> = <nat:8> /\ <var:H> = <nat:5> * <var:C> ^ <nat:2> + <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:C> /\ <var:H> = <nat:5> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 