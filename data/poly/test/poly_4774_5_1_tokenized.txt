\begin{document} \begin{theorem} Define a series of commands such that \begin{verbatim} <var:a1> := <var:M> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:4> ; <var:C> := <var:a1> <var:C> := <var:C> + <var:a0> \end{verbatim} Given it to be that $ <var:M> = <var:G> $ prior to interpreting this list of commands it holds that we see $ <var:C> = <nat:4> * <var:G> + <nat:7> $ after list of instructions has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be done using usual Hoare techniques . Looking at the following bits of codefound in our series of instructions , \begin{verbatim} { <var:M> = <var:G> } <var:a1> := <var:M> { <var:M> = <var:G> \land <var:a1> = <var:G> } { <var:M> = <var:G> \land <var:a1> = <var:G> } <var:a0> := <nat:7> { <var:M> = <var:G> \land <var:a1> = <var:G> \land <var:a0> = <nat:7> } { <var:M> = <var:G> \land <var:a1> = <var:G> \land <var:a0> = <nat:7> } <var:a1> := <var:a1> * <nat:4> { <var:M> = <var:G> \land <var:a1> = <nat:4> \cdot <var:G> \land <var:a0> = <nat:7> } \end{verbatim} Advancing to the next step , we have \begin{verbatim} { <var:M> = <var:G> } <var:a1> := <var:M> { <var:M> = <var:G> \land <var:a1> = <var:G> } \end{verbatim} Taking a look at the following bit of code found in the set of commands , we see \begin{verbatim} { <var:M> = <var:G> } <var:a1> := <var:M> { <var:M> = <var:G> \land <var:a1> = <var:G> } \end{verbatim} This is known to be sound by the variable update rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:M> = <var:G> }} <var:a1> := <var:M> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:4> ; <var:C> := <var:a1> <var:C> := <var:C> + <var:a0> {{ <var:C> = <nat:4> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:a1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:a1> = <var:G> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:a1> = <nat:4> * <var:G> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:a0> = <nat:7> /\ <var:C> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:C> = <nat:4> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 