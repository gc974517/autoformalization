\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} : \begin{verbatim} <var:e1> := <var:h> ; <var:e2> := <var:e1> * <var:h> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:3> ; <var:e2> := <var:e2> * <nat:2> ; <var:T> := <var:e2> <var:T> := <var:T> + <var:e1> <var:T> := <var:T> + <var:e0> \end{verbatim} Assuming $ <var:h> = <var:u> $ before interpreting this series of commands it holds that we see $ <var:T> = <nat:2> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is shown by standard Hoare reasoning . Jumping to the subsequent steps contained in the code , \begin{eqnarray} \{ <var:h> = <var:u> \} \, <var:e1> := <var:h> \, \{ <var:h> = <var:u> \land <var:e1> = <var:u> \} \\ \{ <var:h> = <var:u> \land <var:e1> = <var:u> \} \, <var:e2> := <var:e1> * <var:h> \, \{ <var:h> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \} \\ \{ <var:h> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \} \, <var:e0> := <nat:5> \, \{ <var:h> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \land <var:e0> = <nat:5> \} \end{eqnarray} Considering the subsequent bits of codeseen in the series of commands , \begin{eqnarray} \{ <var:h> = <var:u> \} \, <var:e1> := <var:h> \, \{ <var:h> = <var:u> \land <var:e1> = <var:u> \} \\ \{ <var:h> = <var:u> \land <var:e1> = <var:u> \} \, <var:e2> := <var:e1> * <var:h> \, \{ <var:h> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \} \\ \{ <var:h> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \} \, <var:e0> := <nat:5> \, \{ <var:h> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \land <var:e0> = <nat:5> \} \\ \{ <var:h> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \land <var:e0> = <nat:5> \} \, <var:e1> := <var:e1> * <nat:3> \, \{ <var:h> = <var:u> \land <var:e1> = <nat:3> \times <var:u> \land <var:e2> = <var:u> ^ <nat:2> \land <var:e0> = <nat:5> \} \\ \{ <var:h> = <var:u> \land <var:e1> = <nat:3> \times <var:u> \land <var:e2> = <var:u> ^ <nat:2> \land <var:e0> = <nat:5> \} \, <var:e2> := <var:e2> * <nat:2> \, \{ <var:h> = <var:u> \land <var:e1> = <nat:3> \times <var:u> \land <var:e2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:e0> = <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:h> = <var:u> }} <var:e1> := <var:h> ; <var:e2> := <var:e1> * <var:h> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:3> ; <var:e2> := <var:e2> * <nat:2> ; <var:T> := <var:e2> <var:T> := <var:T> + <var:e1> <var:T> := <var:T> + <var:e0> {{ <var:T> = <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:e1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:e1> = <var:u> /\ <var:e2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:e1> = <var:u> /\ <var:e2> = <var:u> ^ <nat:2> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:e1> = <nat:3> * <var:u> /\ <var:e2> = <var:u> ^ <nat:2> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:e1> = <nat:3> * <var:u> /\ <var:e2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:e1> = <nat:3> * <var:u> /\ <var:e0> = <nat:5> /\ <var:T> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:e0> = <nat:5> /\ <var:T> = <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:T> = <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 