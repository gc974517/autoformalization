\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:9> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:g> ; <var:K2> := <nat:4> ; <var:K2> := <var:K2> * <var:g> ; <var:K2> := <var:K2> * <var:g> ; <var:x> := <var:K2> ; <var:x> := <var:x> + <var:K1> ; <var:x> := <var:x> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assuming --- for every integers $ <var:w> $ --- that we have $ <var:g> = <var:w> $ ahead of the execution of the series of instructions then $ <var:x> = <nat:4> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:9> $ after code segment terminates . \end{theorem} \begin{proof} Using typical Hoare logic returns : \begin{eqnarray} \{ <var:g> = <var:w> \} \\ <var:K0> := <nat:9> ; \\ \{ <var:g> = <var:w> \land <var:K0> = <nat:9> \} \\ <var:K1> := <nat:3> ; \\ \{ <var:g> = <var:w> \land <var:K0> = <nat:9> \land <var:K1> = <nat:3> \} \\ <var:K1> := <var:K1> * <var:g> ; \\ \{ <var:g> = <var:w> \land <var:K0> = <nat:9> \land <var:K1> = <nat:3> \times <var:w> \} \\ <var:K2> := <nat:4> ; \\ \{ <var:g> = <var:w> \land <var:K0> = <nat:9> \land <var:K1> = <nat:3> \times <var:w> \land <var:K2> = <nat:4> \} \\ <var:K2> := <var:K2> * <var:g> ; \\ \{ <var:g> = <var:w> \land <var:K0> = <nat:9> \land <var:K1> = <nat:3> \times <var:w> \land <var:K2> = <nat:4> \times <var:w> \} \\ <var:K2> := <var:K2> * <var:g> ; \\ \{ <var:g> = <var:w> \land <var:K0> = <nat:9> \land <var:K1> = <nat:3> \times <var:w> \land <var:K2> = <nat:4> \times <var:w> ^ <nat:2> \} \\ <var:x> := <var:K2> ; \\ \{ <var:g> = <var:w> \land <var:K0> = <nat:9> \land <var:K1> = <nat:3> \times <var:w> \land <var:x> = <nat:4> \times <var:w> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:K1> ; \\ \{ <var:g> = <var:w> \land <var:K0> = <nat:9> \land <var:x> = <nat:4> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> \} \\ <var:x> := <var:x> + <var:K0> \\ \{ <var:g> = <var:w> \land <var:x> = <nat:4> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:9> \} \end{eqnarray} Given the above , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:9> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:g> ; <var:K2> := <nat:4> ; <var:K2> := <var:K2> * <var:g> ; <var:K2> := <var:K2> * <var:g> ; <var:x> := <var:K2> ; <var:x> := <var:x> + <var:K1> ; <var:x> := <var:x> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:g> = <var:w> }} <def:poly> {{ <var:x> = <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:3> * <var:w> /\ <var:K2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:3> * <var:w> /\ <var:K2> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:3> * <var:w> /\ <var:K2> = <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:3> * <var:w> /\ <var:x> = <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:K0> = <nat:9> /\ <var:x> = <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:x> = <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 