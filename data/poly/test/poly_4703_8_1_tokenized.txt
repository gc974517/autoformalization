\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:U> ; <var:Y2> := <var:Y1> * <var:U> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:R> := <var:Y2> <var:R> := <var:R> + <var:Y1> <var:R> := <var:R> + <var:Y0> \end{verbatim} Allow ( assuming some positive numbers $ <var:y> $ ) that $ <var:U> = <var:y> $ prior to interpreting the series of instructions , it must be that we see $ <var:R> = <nat:5> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> + <nat:7> $ once list of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:y> \} \\ <var:Y1> := <var:U> ; \\ \{ <var:U> = <var:y> \land <var:Y1> = <var:y> \} \\ <var:Y2> := <var:Y1> * <var:U> ; \\ \{ <var:U> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:U> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <var:Y1> * <nat:9> ; \\ \{ <var:U> = <var:y> \land <var:Y1> = <nat:9> * <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:Y2> := <var:Y2> * <nat:5> ; \\ \{ <var:U> = <var:y> \land <var:Y1> = <nat:9> * <var:y> \land <var:Y2> = <nat:5> * <var:y> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:R> := <var:Y2> \\ \{ <var:U> = <var:y> \land <var:Y1> = <nat:9> * <var:y> \land <var:Y0> = <nat:7> \land <var:R> = <nat:5> * <var:y> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:Y1> \\ \{ <var:U> = <var:y> \land <var:Y0> = <nat:7> \land <var:R> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> \} \\ <var:R> := <var:R> + <var:Y0> \\ \{ <var:U> = <var:y> \land <var:R> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:7> \} \end{eqnarray} Applying usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:U> = <var:y> }} <var:Y1> := <var:U> ; <var:Y2> := <var:Y1> * <var:U> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:R> := <var:Y2> <var:R> := <var:R> + <var:Y1> <var:R> := <var:R> + <var:Y0> {{ <var:R> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:Y1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y2> = <var:y> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:Y1> = <nat:9> * <var:y> /\ <var:Y2> = <var:y> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:Y1> = <nat:9> * <var:y> /\ <var:Y2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:Y1> = <nat:9> * <var:y> /\ <var:Y0> = <nat:7> /\ <var:R> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:Y0> = <nat:7> /\ <var:R> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:R> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 