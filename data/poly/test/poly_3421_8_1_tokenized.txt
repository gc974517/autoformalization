\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:l> ; <var:Z2> := <var:Z1> * <var:l> ; <var:Z0> := <nat:9> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:2> ; <var:J> := <var:Z2> <var:J> := <var:J> + <var:Z1> <var:J> := <var:J> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Allow given every natural numbers $ <var:y> $ $ <var:l> = <var:y> $ ahead of the evaluation of our code , then $ <var:J> = <nat:2> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:9> $ when segment of code is done . \end{theorem} \begin{proof} Observe that the below decorated set of commands . \begin{eqnarray} \{ <var:l> = <var:y> \} \\ <var:Z1> := <var:l> ; \\ \{ <var:l> = <var:y> \land <var:Z1> = <var:y> \} \\ <var:Z2> := <var:Z1> * <var:l> ; \\ \{ <var:l> = <var:y> \land <var:Z1> = <var:y> \land <var:Z2> = <var:y> ^ <nat:2> \} \\ <var:Z0> := <nat:9> ; \\ \{ <var:l> = <var:y> \land <var:Z1> = <var:y> \land <var:Z2> = <var:y> ^ <nat:2> \land <var:Z0> = <nat:9> \} \\ <var:Z1> := <var:Z1> * <nat:3> ; \\ \{ <var:l> = <var:y> \land <var:Z1> = <nat:3> * <var:y> \land <var:Z2> = <var:y> ^ <nat:2> \land <var:Z0> = <nat:9> \} \\ <var:Z2> := <var:Z2> * <nat:2> ; \\ \{ <var:l> = <var:y> \land <var:Z1> = <nat:3> * <var:y> \land <var:Z2> = <nat:2> * <var:y> ^ <nat:2> \land <var:Z0> = <nat:9> \} \\ <var:J> := <var:Z2> \\ \{ <var:l> = <var:y> \land <var:Z1> = <nat:3> * <var:y> \land <var:Z0> = <nat:9> \land <var:J> = <nat:2> * <var:y> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:Z1> \\ \{ <var:l> = <var:y> \land <var:Z0> = <nat:9> \land <var:J> = <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> \} \\ <var:J> := <var:J> + <var:Z0> \\ \{ <var:l> = <var:y> \land <var:J> = <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:9> \} \end{eqnarray} Utilizing usual Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z1> := <var:l> ; <var:Z2> := <var:Z1> * <var:l> ; <var:Z0> := <nat:9> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:2> ; <var:J> := <var:Z2> <var:J> := <var:J> + <var:Z1> <var:J> := <var:J> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:l> = <var:y> }} <def:poly> {{ <var:J> = <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Z1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Z1> = <var:y> /\ <var:Z2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Z1> = <var:y> /\ <var:Z2> = <var:y> ^ <nat:2> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Z1> = <nat:3> * <var:y> /\ <var:Z2> = <var:y> ^ <nat:2> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Z1> = <nat:3> * <var:y> /\ <var:Z2> = <nat:2> * <var:y> ^ <nat:2> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Z1> = <nat:3> * <var:y> /\ <var:Z0> = <nat:9> /\ <var:J> = <nat:2> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Z0> = <nat:9> /\ <var:J> = <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:J> = <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 