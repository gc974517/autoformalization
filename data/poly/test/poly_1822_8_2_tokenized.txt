\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:O> := <nat:2> ; <var:O> := <nat:2> + <var:O> * <var:L> ; <var:O> := <nat:1> + <var:O> * <var:L> ; <var:O> := <var:O> * <var:L> ; <var:O> := <nat:4> + <var:O> * <var:L> ; <var:O> := <nat:1> + <var:O> * <var:L> ; <var:O> := <nat:1> + <var:O> * <var:L> ; <var:O> := <nat:1> + <var:O> * <var:L> \end{verbatim} Assuming , with some positive coefficients $ <var:V> $ , that we have $ <var:L> = <var:V> $ before the evaluation of the code , it must be that we see $ <var:O> = <nat:2> \times <var:V> ^ <nat:7> + <nat:2> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our program is done by usual Hoare reasoning . Advancing to the upcoming lines of codein the set of commands , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:V> \} & <var:O> := <nat:2> & \{ <var:L> = <var:V> \land <var:O> = <nat:2> \} \\ \{ <var:L> = <var:V> \land <var:O> = <nat:2> \} & <var:O> := <nat:2> + <var:O> * <var:L> & \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> + <nat:2> \} \\ \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> + <nat:2> \} & <var:O> := <nat:1> + <var:O> * <var:L> & \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> \} \\ \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> \} & <var:O> := <var:O> * <var:L> & \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + \} \\ \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + \} & <var:O> := <nat:4> + <var:O> * <var:L> & \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> \} \\ \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> \} & <var:O> := <nat:1> + <var:O> * <var:L> & \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:1> \} \\ \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:1> \} & <var:O> := <nat:1> + <var:O> * <var:L> & \{ <var:L> = <var:V> \land <var:O> = <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> \} \end{tabular} Paying attention to the next step in the list of commands , \[ \begin{tabular} {rcl} \{ <var:L> = <var:V> \} & <var:O> := <nat:2> & \{ <var:L> = <var:V> \land <var:O> = <nat:2> \} \end{tabular} This is rigorously given with the environment update scheme obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:L> = <var:V> }} <var:O> := <nat:2> ; <var:O> := <nat:2> + <var:O> * <var:L> ; <var:O> := <nat:1> + <var:O> * <var:L> ; <var:O> := <var:O> * <var:L> ; <var:O> := <nat:4> + <var:O> * <var:L> ; <var:O> := <nat:1> + <var:O> * <var:L> ; <var:O> := <nat:1> + <var:O> * <var:L> ; <var:O> := <nat:1> + <var:O> * <var:L> {{ <var:O> = <nat:2> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:O> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:O> = <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:O> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:O> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:O> = <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:O> = <nat:2> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:O> = <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:O> = <nat:2> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 