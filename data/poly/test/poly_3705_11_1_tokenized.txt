\begin{document} \begin{theorem} Let the following program in \emph{Imp} as follows \begin{verbatim} <var:n1> := <var:l> ; <var:n2> := <var:n1> * <var:l> ; <var:n3> := <var:n2> * <var:l> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:6> ; <var:n3> := <var:n3> * <nat:3> ; <var:I> := <var:n3> <var:I> := <var:I> + <var:n2> <var:I> := <var:I> + <var:n1> <var:I> := <var:I> + <var:n0> \end{verbatim} Assume it to be that $ <var:l> = <var:E> $ before the evaluation of our set of commands it follows that $ <var:I> = <nat:3> \times <var:E> ^ <nat:3> + <nat:6> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:3> $ when set of instructions terminates . \end{theorem} \begin{proof} Proving correctness for our code is evident through typical Hoare techniques . Focusing on the upcoming step contained in our series of instructions , the environment update statement \verb | <var:n1> := <var:l> ; | . This code takes the precondition $ \{ <var:l> = <var:E> \} $ to the condition $ \{ <var:l> = <var:E> \land <var:n1> = <var:E> \} $ . Focusing on the subsequent command in the segment of code , we have the binding command \verb | <var:n2> := <var:n1> * <var:l> ; | . This code transfers the condition $ \{ <var:l> = <var:E> \land <var:n1> = <var:E> \} $ as $ \{ <var:l> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \} $ . Stepping through , we have the variable update line \verb | <var:n3> := <var:n2> * <var:l> ; | . This statement advances the condition $ \{ <var:l> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \} $ into $ \{ <var:l> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \} $ . Moving on , we have the variable assignmet command giving $ <nat:3> $ as $ <var:n0>$ . This advances $ \{ <var:l> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \} $ toward $ \{ <var:l> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . Jumping to the proceeding line of code seen in our list of instructions , we have the binding code \verb | <var:n1> := <var:n1> * <nat:2> ; | . This line moves the condition $ \{ <var:l> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \land <var:n0> = <nat:3> \} $ to the condition $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . This is rigorously given through the assignment scheme in Hoare logic . Moving forward to the next step , the binding statement binding $ <var:n2> * <nat:6> $ into $ <var:n2>$ . This forwards the precondition $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \land <var:n0> = <nat:3> \} $ toward $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n2> = <nat:6> * <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . This is shown using the assignment rule of typical Hoare techniques . Taking another step toward the next line found in our list of commands , we have the variable binding statement defining $ <var:n3> * <nat:3> $ as $ <var:n3>$ . This forwards the precondition $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n2> = <nat:6> * <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \land <var:n0> = <nat:3> \} $ to $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n2> = <nat:6> * <var:E> ^ <nat:2> \land <var:n3> = <nat:3> * <var:E> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . This is ensured by the assignment scheme given in Hoare techniques . Further , the variable update code binding $ <var:n3$ toward $ <var:I>$ . This line moves the precondition $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n2> = <nat:6> * <var:E> ^ <nat:2> \land <var:n3> = <nat:3> * <var:E> ^ <nat:3> \land <var:n0> = <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n2> = <nat:6> * <var:E> ^ <nat:2> \land <var:n0> = <nat:3> \land <var:I> = <nat:3> * <var:E> ^ <nat:3> \} $ . This is given through the assignment scheme given by standard Hoare techniques . Looking at the upcoming statement seen in our set of commands , we see the environment update code \verb | <var:I> := <var:I> + <var:n2> | . This redefines the condition $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n2> = <nat:6> * <var:E> ^ <nat:2> \land <var:n0> = <nat:3> \land <var:I> = <nat:3> * <var:E> ^ <nat:3> \} $ into the condition $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n0> = <nat:3> \land <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> \} $ . This is known to be sound using the assignment law defined in Hoare reasoning . Shifting focus toward the subsequent piece of code found in our code , the variable assignmet command \verb | <var:I> := <var:I> + <var:n1> | . This forwards $ \{ <var:l> = <var:E> \land <var:n1> = <nat:2> * <var:E> \land <var:n0> = <nat:3> \land <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> \} $ to $ \{ <var:l> = <var:E> \land <var:n0> = <nat:3> \land <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> \} $ . Honing in on the upcoming command contained in the code segment , we have the variable binding statement defining $ <var:I> + <var:n0$ as $ <var:I>$ . This forwards $ \{ <var:l> = <var:E> \land <var:n0> = <nat:3> \land <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> \} $ toward the condition $ \{ <var:l> = <var:E> \land <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:l> = <var:E> }} <var:n1> := <var:l> ; <var:n2> := <var:n1> * <var:l> ; <var:n3> := <var:n2> * <var:l> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:6> ; <var:n3> := <var:n3> * <nat:3> ; <var:I> := <var:n3> <var:I> := <var:I> + <var:n2> <var:I> := <var:I> + <var:n1> <var:I> := <var:I> + <var:n0> {{ <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <var:E> /\ <var:n2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <var:E> /\ <var:n2> = <var:E> ^ <nat:2> /\ <var:n3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <var:E> /\ <var:n2> = <var:E> ^ <nat:2> /\ <var:n3> = <var:E> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <nat:2> * <var:E> /\ <var:n2> = <var:E> ^ <nat:2> /\ <var:n3> = <var:E> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <nat:2> * <var:E> /\ <var:n2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:n3> = <var:E> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <nat:2> * <var:E> /\ <var:n2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:n3> = <nat:3> * <var:E> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <nat:2> * <var:E> /\ <var:n2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:n0> = <nat:3> /\ <var:I> = <nat:3> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n1> = <nat:2> * <var:E> /\ <var:n0> = <nat:3> /\ <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:n0> = <nat:3> /\ <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:I> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 