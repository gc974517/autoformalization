\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:9> ; <var:R> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assuming --- taking positive integers $ <var:x> $ --- $ <var:K> = <var:x> $ before executing this set of instructions it holds that we see $ <var:R> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be demonstrated by standard Hoare logic . Honing in on the proceeding line seen in the set of instructions , we have the variable update line \verb | <var:N0> := <nat:9> ; | . This redefines $ \{ <var:K> = <var:x> \} $ to the postcondition $ \{ <var:K> = <var:x> \land <var:N0> = <nat:9> \} $ . Following , the binding code \verb | <var:R> := <var:N0> | . This line moves the precondition $ \{ <var:K> = <var:x> \land <var:N0> = <nat:9> \} $ toward the postcondition $ \{ <var:K> = <var:x> \land <var:R> = <nat:9> \} $ . This is ensured using the assignment scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:9> ; <var:R> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:K> = <var:x> }} <def:poly> {{ <var:R> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:x> /\ <var:R> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 