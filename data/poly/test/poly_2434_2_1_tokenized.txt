\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:B0> := <nat:9> ; <var:D> := <var:B0> \end{verbatim} Allow $ <var:C> = <var:S> $ before the evaluation of our series of commands then we see $ <var:D> = <nat:9> $ once segment of code has finished . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be shown with typical Hoare logic . Moving on to the subsequent bit of code in our code segment , we see the environment update statement \verb | <var:B0> := <nat:9> ; | . This forwards the condition $ \{ <var:C> = <var:S> \} $ as the condition $ \{ <var:C> = <var:S> \land <var:B0> = <nat:9> \} $ . Moving on to the next step , we have the variable update statement letting $ <var:B0$ toward $ <var:D>$ . This transfers the precondition $ \{ <var:C> = <var:S> \land <var:B0> = <nat:9> \} $ into $ \{ <var:C> = <var:S> \land <var:D> = <nat:9> \} $ . This is deduced through the assignment law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:C> = <var:S> }} <var:B0> := <nat:9> ; <var:D> := <var:B0> {{ <var:D> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:D> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 