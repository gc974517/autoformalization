\begin{document} \begin{theorem} Take the following list of instructions as follows \begin{verbatim} <var:I0> := <nat:9> ; <var:z> := <var:I0> \end{verbatim} Allow it to be that $ <var:Z> = <var:T> $ ahead of running our list of instructions it holds that we see $ <var:z> = <nat:9> $ after program finishes . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be given with standard Hoare techniques . Taking another step toward the proceeding line in the set of commands , we have the assignment command \verb | <var:I0> := <nat:9> ; | . This code moves $ \{ <var:Z> = <var:T> \} $ as the postcondition $ \{ <var:Z> = <var:T> \land <var:I0> = <nat:9> \} $ . This is ensured by the assignment scheme obtained from standard Hoare reasoning . Taking a look at the next piece of code seen in the series of commands , the binding line giving $ <var:I0$ to $ <var:z>$ . This redefines the precondition $ \{ <var:Z> = <var:T> \land <var:I0> = <nat:9> \} $ to the condition $ \{ <var:Z> = <var:T> \land <var:z> = <nat:9> \} $ . This is rigorously given by the assignment scheme defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Z> = <var:T> }} <var:I0> := <nat:9> ; <var:z> := <var:I0> {{ <var:z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 