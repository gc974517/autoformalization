\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:q> ; <var:m2> := <var:m1> * <var:q> ; <var:m3> := <var:m2> * <var:q> ; <var:m0> := <nat:6> ; <var:m3> := <var:m3> * <nat:2> ; <var:r> := <var:m3> <var:r> := <var:r> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume for $ <var:T> $ it to be that $ <var:q> = <var:T> $ before the execution of our code it holds that $ <var:r> = <nat:2> * <var:T> ^ <nat:3> + <nat:6> $ after series of instructions is done . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be demonstrated with typical Hoare techniques . Stepping through , we have the environment update code giving $ <var:q> $ into $ <var:m1>$ . This code takes $ \{ <var:q> = <var:T> \} $ as the condition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \} $ . This is shown by the assignment inference rule in typical Hoare logic . Shifting focus toward the proceeding line of code in the code segment , the line \verb | <var:m2> := <var:m1> * <var:q> ; | . This code moves $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \} $ into the postcondition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \} $ . Moving onward , we have the command defining $ <var:m2> * <var:q> $ as $ <var:m3>$ . This moves the precondition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \} $ as the condition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m3> = <var:T> ^ <nat:3> \} $ . Advancing to the subsequent step contained in the set of commands , the environment update statement \verb | <var:m0> := <nat:6> ; | . This command advances the precondition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m3> = <var:T> ^ <nat:3> \} $ toward the condition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m3> = <var:T> ^ <nat:3> \land <var:m0> = <nat:6> \} $ . Immediately after , we have the binding line letting $ <var:m3> * <nat:2> $ to $ <var:m3>$ . This forwards the precondition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m3> = <var:T> ^ <nat:3> \land <var:m0> = <nat:6> \} $ to the postcondition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:m0> = <nat:6> \} $ . This is guaranteed through the assignment scheme found in usual Hoare techniques . Taking a look at the following line of code in our set of commands , we have the binding statement \verb | <var:r> := <var:m3> | . This moves the condition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:m0> = <nat:6> \} $ toward the postcondition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m0> = <nat:6> \land <var:r> = <nat:2> \cdot <var:T> ^ <nat:3> \} $ . Jumping to the proceeding step in our program , the binding code giving $ <var:r> + <var:m0$ toward $ <var:r>$ . This transfers the condition $ \{ <var:q> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m0> = <nat:6> \land <var:r> = <nat:2> \cdot <var:T> ^ <nat:3> \} $ into the postcondition $ \{ <var:q> = <var:T> \land <var:r> = <nat:2> \cdot <var:T> ^ <nat:3> + <nat:6> \} $ . This is known to be sound with the assignment law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:q> ; <var:m2> := <var:m1> * <var:q> ; <var:m3> := <var:m2> * <var:q> ; <var:m0> := <nat:6> ; <var:m3> := <var:m3> * <nat:2> ; <var:r> := <var:m3> <var:r> := <var:r> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:q> = <var:T> }} <def:poly> {{ <var:r> = <nat:2> * <var:T> ^ <nat:3> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:m1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <var:T> ^ <nat:2> /\ <var:m3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <var:T> ^ <nat:2> /\ <var:m3> = <var:T> ^ <nat:3> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <var:T> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <var:T> ^ <nat:2> /\ <var:m0> = <nat:6> /\ <var:r> = <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:r> = <nat:2> * <var:T> ^ <nat:3> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 