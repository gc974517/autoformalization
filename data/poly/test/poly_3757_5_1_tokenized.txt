\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:V> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:4> ; <var:D> := <var:O1> <var:D> := <var:D> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:V> = <var:J> $ , for every positive coefficients $ <var:J> $ , prior to interpreting this set of instructions , it holds that $ <var:D> = <nat:4> \cdot <var:J> + <nat:4> $ when list of instructions is done executing . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:V> = <var:J> \} \\ <var:O1> := <var:V> ; \\ \{ <var:V> = <var:J> \land <var:O1> = <var:J> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:V> = <var:J> \land <var:O1> = <var:J> \land <var:O0> = <nat:4> \} \\ <var:O1> := <var:O1> * <nat:4> ; \\ \{ <var:V> = <var:J> \land <var:O1> = <nat:4> \times <var:J> \land <var:O0> = <nat:4> \} \\ <var:D> := <var:O1> \\ \{ <var:V> = <var:J> \land <var:O0> = <nat:4> \land <var:D> = <nat:4> \times <var:J> \} \\ <var:D> := <var:D> + <var:O0> \\ \{ <var:V> = <var:J> \land <var:D> = <nat:4> \times <var:J> + <nat:4> \} \end{eqnarray} Given the above , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:V> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:4> ; <var:D> := <var:O1> <var:D> := <var:D> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:V> = <var:J> }} <def:poly> {{ <var:D> = <nat:4> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:O1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:O1> = <var:J> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:O1> = <nat:4> * <var:J> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:O0> = <nat:4> /\ <var:D> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:D> = <nat:4> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 