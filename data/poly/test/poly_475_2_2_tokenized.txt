\begin{document} \begin{theorem} Let the following code as follows \begin{verbatim} <var:d> := <nat:2> ; <var:d> := <nat:3> + <var:d> * <var:p> \end{verbatim} Assume that we have $ <var:p> = <var:L> $ taking positive coefficients $ <var:L> $ before executing our code it must be that $ <var:d> = <nat:2> * <var:L> + <nat:3> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:p> = <var:L> \} \\ <var:d> := <nat:2> ; \\ \{ <var:p> = <var:L> \land <var:d> = <nat:2> \} \\ <var:d> := <nat:3> + <var:d> * <var:p> \\ \{ <var:p> = <var:L> \land <var:d> = <nat:2> \cdot <var:L> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:p> = <var:L> }} <var:d> := <nat:2> ; <var:d> := <nat:3> + <var:d> * <var:p> {{ <var:d> = <nat:2> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:d> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:d> = <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 