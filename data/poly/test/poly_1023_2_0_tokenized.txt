\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:5> ; <var:K> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:e> = <var:F> $ --- given $ <var:F> \in \mathbb{Z}^+ $ --- ahead of running this code , it follows that we see $ <var:K> = <nat:5> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic produces : \begin{eqnarray} \{ <var:e> = <var:F> \} \\ <var:U0> := <nat:5> ; \\ \{ <var:e> = <var:F> \land <var:U0> = <nat:5> \} \\ <var:K> := <var:U0> \\ \{ <var:e> = <var:F> \land <var:K> = <nat:5> \} \end{eqnarray} Considering the preceding argument , this series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:K> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:e> = <var:F> }} <def:poly> {{ <var:K> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:K> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 