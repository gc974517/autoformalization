\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:e> := <nat:1> ; <var:e> := <nat:4> + <var:e> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allow $ <var:r> = <var:I> $ before running this list of commands , then $ <var:e> = <nat:1> \cdot <var:I> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this series of commands is clear by typical Hoare techniques . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:r> = <var:I> \} & <var:e> := <nat:1> & \{ <var:r> = <var:I> \land <var:e> = <nat:1> \} \\ \{ <var:r> = <var:I> \land <var:e> = <nat:1> \} & <var:e> := <nat:4> + <var:e> * <var:r& \{ <var:r> = <var:I> \land <var:e> = <nat:1> \times <var:I> + <nat:4> \} \end{tabular} This is ensured by the environment update inference rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:1> ; <var:e> := <nat:4> + <var:e> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:r> = <var:I> }} <def:poly> {{ <var:e> = <nat:1> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:I> /\ <var:e> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:I> /\ <var:e> = <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 