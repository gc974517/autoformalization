\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:9> ; <var:x1> := <nat:8> ; <var:x1> := <var:x1> * <var:j> ; <var:x2> := <nat:8> ; <var:x2> := <var:x2> * <var:j> ; <var:x2> := <var:x2> * <var:j> ; <var:x3> := <nat:5> ; <var:x3> := <var:x3> * <var:j> ; <var:x3> := <var:x3> * <var:j> ; <var:x3> := <var:x3> * <var:j> ; <var:v> := <var:x3> ; <var:v> := <var:v> + <var:x2> ; <var:v> := <var:v> + <var:x1> ; <var:v> := <var:v> + <var:x0> \end{verbatim} Assume ( for all $ <var:P> \in \mathbb{Z}^+ $ ) it to hold that $ <var:j> = <var:P> $ prior to evaluating this list of instructions then $ <var:v> = <nat:5> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:9> $ after segment of code has terminated . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:j> = <var:P> \} \\ <var:x0> := <nat:9> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \} \\ <var:x1> := <nat:8> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \} \\ <var:x1> := <var:x1> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \} \\ <var:x2> := <nat:8> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:x2> = <nat:8> \} \\ <var:x2> := <var:x2> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:x2> = <nat:8> \cdot <var:P> \} \\ <var:x2> := <var:x2> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:x2> = <nat:8> \cdot <var:P> ^ <nat:2> \} \\ <var:x3> := <nat:5> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:x2> = <nat:8> \cdot <var:P> ^ <nat:2> \land <var:x3> = <nat:5> \} \\ <var:x3> := <var:x3> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:x2> = <nat:8> \cdot <var:P> ^ <nat:2> \land <var:x3> = <nat:5> \cdot <var:P> \} \\ <var:x3> := <var:x3> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:x2> = <nat:8> \cdot <var:P> ^ <nat:2> \land <var:x3> = <nat:5> \cdot <var:P> ^ <nat:2> \} \\ <var:x3> := <var:x3> * <var:j> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:x2> = <nat:8> \cdot <var:P> ^ <nat:2> \land <var:x3> = <nat:5> \cdot <var:P> ^ <nat:3> \} \\ <var:v> := <var:x3> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:x2> = <nat:8> \cdot <var:P> ^ <nat:2> \land <var:v> = <nat:5> \cdot <var:P> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:x2> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:x1> = <nat:8> \cdot <var:P> \land <var:v> = <nat:5> \cdot <var:P> ^ <nat:3> + <nat:8> \cdot <var:P> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:x1> ; \\ \{ <var:j> = <var:P> \land <var:x0> = <nat:9> \land <var:v> = <nat:5> \cdot <var:P> ^ <nat:3> + <nat:8> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> \} \\ <var:v> := <var:v> + <var:x0> \\ \{ <var:j> = <var:P> \land <var:v> = <nat:5> \cdot <var:P> ^ <nat:3> + <nat:8> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> + <nat:9> \} \end{eqnarray} As a consequence , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:j> = <var:P> }} <var:x0> := <nat:9> ; <var:x1> := <nat:8> ; <var:x1> := <var:x1> * <var:j> ; <var:x2> := <nat:8> ; <var:x2> := <var:x2> * <var:j> ; <var:x2> := <var:x2> * <var:j> ; <var:x3> := <nat:5> ; <var:x3> := <var:x3> * <var:j> ; <var:x3> := <var:x3> * <var:j> ; <var:x3> := <var:x3> * <var:j> ; <var:v> := <var:x3> ; <var:v> := <var:v> + <var:x2> ; <var:v> := <var:v> + <var:x1> ; <var:v> := <var:v> + <var:x0> {{ <var:v> = <nat:5> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:x2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:x2> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:x2> = <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:x2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:x3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:x2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:x3> = <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:x2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:x3> = <nat:5> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:x2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:x3> = <nat:5> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:x2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:v> = <nat:5> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:8> * <var:P> /\ <var:v> = <nat:5> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:x0> = <nat:9> /\ <var:v> = <nat:5> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:P> /\ <var:v> = <nat:5> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 