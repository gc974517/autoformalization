\begin{document} \begin{theorem} We define a program in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:e> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:e> ; <var:k2> := <var:k2> * <var:e> ; <var:k3> := <nat:4> ; <var:k3> := <var:k3> * <var:e> ; <var:k3> := <var:k3> * <var:e> ; <var:k3> := <var:k3> * <var:e> ; <var:f> := <var:k3> ; <var:f> := <var:f> + <var:k2> ; <var:f> := <var:f> + <var:k1> ; <var:f> := <var:f> + <var:k0> \end{verbatim} Assume $ <var:e> = <var:t> $ , for any natural numbers $ <var:t> $ , before the execution of the list of commands it must be that we have $ <var:f> = <nat:4> \times <var:t> ^ <nat:3> + <nat:4> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands is evident by the following decorated set of commands . \begin{eqnarray} \{ <var:e> = <var:t> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \} \\ <var:k1> := <nat:4> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \} \\ <var:k1> := <var:k1> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \} \\ <var:k2> := <nat:4> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:k2> = <nat:4> \} \\ <var:k2> := <var:k2> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:k2> = <nat:4> \cdot <var:t> \} \\ <var:k2> := <var:k2> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:k2> = <nat:4> \cdot <var:t> ^ <nat:2> \} \\ <var:k3> := <nat:4> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:k2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:k3> = <nat:4> \} \\ <var:k3> := <var:k3> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:k2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:k3> = <nat:4> \cdot <var:t> \} \\ <var:k3> := <var:k3> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:k2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:k3> = <nat:4> \cdot <var:t> ^ <nat:2> \} \\ <var:k3> := <var:k3> * <var:e> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:k2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:k3> = <nat:4> \cdot <var:t> ^ <nat:3> \} \\ <var:f> := <var:k3> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:k2> = <nat:4> \cdot <var:t> ^ <nat:2> \land <var:f> = <nat:4> \cdot <var:t> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:k2> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:k1> = <nat:4> \cdot <var:t> \land <var:f> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:k1> ; \\ \{ <var:e> = <var:t> \land <var:k0> = <nat:2> \land <var:f> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> \} \\ <var:f> := <var:f> + <var:k0> \\ \{ <var:e> = <var:t> \land <var:f> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:2> \} \end{eqnarray} Utilizing Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:e> = <var:t> }} <var:k0> := <nat:2> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:e> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:e> ; <var:k2> := <var:k2> * <var:e> ; <var:k3> := <nat:4> ; <var:k3> := <var:k3> * <var:e> ; <var:k3> := <var:k3> * <var:e> ; <var:k3> := <var:k3> * <var:e> ; <var:f> := <var:k3> ; <var:f> := <var:f> + <var:k2> ; <var:f> := <var:f> + <var:k1> ; <var:f> := <var:f> + <var:k0> {{ <var:f> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:k2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:k2> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:k2> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:k2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:k3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:k2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:k2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:k2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:k2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:f> = <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:4> * <var:t> /\ <var:f> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:k0> = <nat:2> /\ <var:f> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:f> = <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 