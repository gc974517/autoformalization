\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:a1> := <var:c> ; <var:a2> := <var:a1> * <var:c> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:1> ; <var:a2> := <var:a2> * <nat:7> ; <var:V> := <var:a2> <var:V> := <var:V> + <var:a1> <var:V> := <var:V> + <var:a0> \end{verbatim} Assuming it to hold that $ <var:c> = <var:t> $ prior to interpreting our series of instructions it follows that we see $ <var:V> = <nat:7> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:1> $ when set of instructions has terminated . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives : \begin{eqnarray} \{ <var:c> = <var:t> \} \\ <var:a1> := <var:c> ; \\ \{ <var:c> = <var:t> \land <var:a1> = <var:t> \} \\ <var:a2> := <var:a1> * <var:c> ; \\ \{ <var:c> = <var:t> \land <var:a1> = <var:t> \land <var:a2> = <var:t> ^ <nat:2> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:c> = <var:t> \land <var:a1> = <var:t> \land <var:a2> = <var:t> ^ <nat:2> \land <var:a0> = <nat:1> \} \\ <var:a1> := <var:a1> * <nat:1> ; \\ \{ <var:c> = <var:t> \land <var:a1> = <nat:1> \times <var:t> \land <var:a2> = <var:t> ^ <nat:2> \land <var:a0> = <nat:1> \} \\ <var:a2> := <var:a2> * <nat:7> ; \\ \{ <var:c> = <var:t> \land <var:a1> = <nat:1> \times <var:t> \land <var:a2> = <nat:7> \times <var:t> ^ <nat:2> \land <var:a0> = <nat:1> \} \\ <var:V> := <var:a2> \\ \{ <var:c> = <var:t> \land <var:a1> = <nat:1> \times <var:t> \land <var:a0> = <nat:1> \land <var:V> = <nat:7> \times <var:t> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:a1> \\ \{ <var:c> = <var:t> \land <var:a0> = <nat:1> \land <var:V> = <nat:7> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> \} \\ <var:V> := <var:V> + <var:a0> \\ \{ <var:c> = <var:t> \land <var:V> = <nat:7> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:1> \} \end{eqnarray} As a consequence , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:c> = <var:t> }} <var:a1> := <var:c> ; <var:a2> := <var:a1> * <var:c> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:1> ; <var:a2> := <var:a2> * <nat:7> ; <var:V> := <var:a2> <var:V> := <var:V> + <var:a1> <var:V> := <var:V> + <var:a0> {{ <var:V> = <nat:7> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:a1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:a1> = <var:t> /\ <var:a2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:a1> = <var:t> /\ <var:a2> = <var:t> ^ <nat:2> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:a1> = <nat:1> * <var:t> /\ <var:a2> = <var:t> ^ <nat:2> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:a1> = <nat:1> * <var:t> /\ <var:a2> = <nat:7> * <var:t> ^ <nat:2> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:a1> = <nat:1> * <var:t> /\ <var:a0> = <nat:1> /\ <var:V> = <nat:7> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:a0> = <nat:1> /\ <var:V> = <nat:7> * <var:t> ^ <nat:2> + <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:V> = <nat:7> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 