\begin{document} \begin{theorem} Take the following code such that \begin{verbatim} <var:l0> := <nat:6> ; <var:l1> := <nat:6> ; <var:l1> := <var:l1> * <var:r> ; <var:l2> := <nat:8> ; <var:l2> := <var:l2> * <var:r> ; <var:l2> := <var:l2> * <var:r> ; <var:l3> := <nat:6> ; <var:l3> := <var:l3> * <var:r> ; <var:l3> := <var:l3> * <var:r> ; <var:l3> := <var:l3> * <var:r> ; <var:z> := <var:l3> ; <var:z> := <var:z> + <var:l2> ; <var:z> := <var:z> + <var:l1> ; <var:z> := <var:z> + <var:l0> \end{verbatim} Assuming it to hold that $ <var:r> = <var:H> $ for integers $ <var:H> $ prior to executing our set of instructions , it holds that we have $ <var:z> = <nat:6> \cdot <var:H> ^ <nat:3> + <nat:8> \cdot <var:H> ^ <nat:2> + <nat:6> \cdot <var:H> + <nat:6> $ when set of commands is done . \end{theorem} \begin{proof} Note that this decorated series of commands . \begin{eqnarray} \{ <var:r> = <var:H> \} \\ <var:l0> := <nat:6> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \} \\ <var:l1> := <nat:6> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \} \\ <var:l1> := <var:l1> * <var:r> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \} \\ <var:l2> := <nat:8> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:l2> = <nat:8> \} \\ <var:l2> := <var:l2> * <var:r> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:l2> = <nat:8> \cdot <var:H> \} \\ <var:l2> := <var:l2> * <var:r> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:l2> = <nat:8> \cdot <var:H> ^ <nat:2> \} \\ <var:l3> := <nat:6> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:l2> = <nat:8> \cdot <var:H> ^ <nat:2> \land <var:l3> = <nat:6> \} \\ <var:l3> := <var:l3> * <var:r> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:l2> = <nat:8> \cdot <var:H> ^ <nat:2> \land <var:l3> = <nat:6> \cdot <var:H> \} \\ <var:l3> := <var:l3> * <var:r> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:l2> = <nat:8> \cdot <var:H> ^ <nat:2> \land <var:l3> = <nat:6> \cdot <var:H> ^ <nat:2> \} \\ <var:l3> := <var:l3> * <var:r> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:l2> = <nat:8> \cdot <var:H> ^ <nat:2> \land <var:l3> = <nat:6> \cdot <var:H> ^ <nat:3> \} \\ <var:z> := <var:l3> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:l2> = <nat:8> \cdot <var:H> ^ <nat:2> \land <var:z> = <nat:6> \cdot <var:H> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:l2> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:l1> = <nat:6> \cdot <var:H> \land <var:z> = <nat:6> \cdot <var:H> ^ <nat:3> + <nat:8> \cdot <var:H> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:l1> ; \\ \{ <var:r> = <var:H> \land <var:l0> = <nat:6> \land <var:z> = <nat:6> \cdot <var:H> ^ <nat:3> + <nat:8> \cdot <var:H> ^ <nat:2> + <nat:6> \cdot <var:H> \} \\ <var:z> := <var:z> + <var:l0> \\ \{ <var:r> = <var:H> \land <var:z> = <nat:6> \cdot <var:H> ^ <nat:3> + <nat:8> \cdot <var:H> ^ <nat:2> + <nat:6> \cdot <var:H> + <nat:6> \} \end{eqnarray} Advancing running this list of commands gives us : \begin{eqnarray} \end{eqnarray} The application of usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:r> = <var:H> }} <var:l0> := <nat:6> ; <var:l1> := <nat:6> ; <var:l1> := <var:l1> * <var:r> ; <var:l2> := <nat:8> ; <var:l2> := <var:l2> * <var:r> ; <var:l2> := <var:l2> * <var:r> ; <var:l3> := <nat:6> ; <var:l3> := <var:l3> * <var:r> ; <var:l3> := <var:l3> * <var:r> ; <var:l3> := <var:l3> * <var:r> ; <var:z> := <var:l3> ; <var:z> := <var:z> + <var:l2> ; <var:z> := <var:z> + <var:l1> ; <var:z> := <var:z> + <var:l0> {{ <var:z> = <nat:6> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:8> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:z> = <nat:6> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:6> * <var:H> /\ <var:z> = <nat:6> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:l0> = <nat:6> /\ <var:z> = <nat:6> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ^ <nat:2> + <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:H> /\ <var:z> = <nat:6> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 