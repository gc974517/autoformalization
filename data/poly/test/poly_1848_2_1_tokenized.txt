\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:6> ; <var:W> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Given , given positive integers $ <var:n> $ , $ <var:U> = <var:n> $ ahead of the evaluation of our list of instructions it must be that $ <var:W> = <nat:6> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:U> = <var:n> \} \\ <var:e0> := <nat:6> ; \\ \{ <var:U> = <var:n> \land <var:e0> = <nat:6> \} \\ <var:W> := <var:e0> \\ \{ <var:U> = <var:n> \land <var:W> = <nat:6> \} \end{eqnarray} Thus , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:6> ; <var:W> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:U> = <var:n> }} <def:poly> {{ <var:W> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:W> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 