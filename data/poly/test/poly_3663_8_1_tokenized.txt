\begin{document} \begin{theorem} Define a set of commands as follows \begin{verbatim} <var:O1> := <var:t> ; <var:O2> := <var:O1> * <var:t> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:2> ; <var:O2> := <var:O2> * <nat:8> ; <var:k> := <var:O2> <var:k> := <var:k> + <var:O1> <var:k> := <var:k> + <var:O0> \end{verbatim} Assume that we have $ <var:t> = <var:I> $ before the evaluation of this code , it follows that we see $ <var:k> = <nat:8> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:t> = <var:I> \} \\ <var:O1> := <var:t> ; \\ \{ <var:t> = <var:I> \land <var:O1> = <var:I> \} \\ <var:O2> := <var:O1> * <var:t> ; \\ \{ <var:t> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:t> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O0> = <nat:1> \} \\ <var:O1> := <var:O1> * <nat:2> ; \\ \{ <var:t> = <var:I> \land <var:O1> = <nat:2> * <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O0> = <nat:1> \} \\ <var:O2> := <var:O2> * <nat:8> ; \\ \{ <var:t> = <var:I> \land <var:O1> = <nat:2> * <var:I> \land <var:O2> = <nat:8> * <var:I> ^ <nat:2> \land <var:O0> = <nat:1> \} \\ <var:k> := <var:O2> \\ \{ <var:t> = <var:I> \land <var:O1> = <nat:2> * <var:I> \land <var:O0> = <nat:1> \land <var:k> = <nat:8> * <var:I> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:O1> \\ \{ <var:t> = <var:I> \land <var:O0> = <nat:1> \land <var:k> = <nat:8> * <var:I> ^ <nat:2> + <nat:2> * <var:I> \} \\ <var:k> := <var:k> + <var:O0> \\ \{ <var:t> = <var:I> \land <var:k> = <nat:8> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> \} \end{eqnarray} Hence , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:t> = <var:I> }} <var:O1> := <var:t> ; <var:O2> := <var:O1> * <var:t> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:2> ; <var:O2> := <var:O2> * <nat:8> ; <var:k> := <var:O2> <var:k> := <var:k> + <var:O1> <var:k> := <var:k> + <var:O0> {{ <var:k> = <nat:8> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:O1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:O1> = <var:I> /\ <var:O2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:O1> = <var:I> /\ <var:O2> = <var:I> ^ <nat:2> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:O1> = <nat:2> * <var:I> /\ <var:O2> = <var:I> ^ <nat:2> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:O1> = <nat:2> * <var:I> /\ <var:O2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:O1> = <nat:2> * <var:I> /\ <var:O0> = <nat:1> /\ <var:k> = <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:O0> = <nat:1> /\ <var:k> = <nat:8> * <var:I> ^ <nat:2> + <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:k> = <nat:8> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 