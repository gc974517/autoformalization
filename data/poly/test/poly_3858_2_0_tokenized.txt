\begin{document} \begin{theorem} We define the following program as \begin{verbatim} <var:q0> := <nat:9> ; <var:w> := <var:q0> \end{verbatim} Allow ( for some $ <var:M> $ ) that $ <var:R> = <var:M> $ ahead of interpreting this set of instructions it follows that $ <var:w> = <nat:9> $ after segment of code has finished . \end{theorem} \begin{proof} The course of logic for the series of instructions is demonstrated with usual Hoare reasoning . After , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:M> \} & <var:q0> := <nat:9> & \{ <var:R> = <var:M> \land <var:q0> = <nat:9> \} \end{tabular} Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:M> \} & <var:q0> := <nat:9> & \{ <var:R> = <var:M> \land <var:q0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:R> = <var:M> }} <var:q0> := <nat:9> ; <var:w> := <var:q0> {{ <var:w> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:w> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 