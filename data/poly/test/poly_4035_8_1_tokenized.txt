\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:Q> ; <var:S2> := <var:S1> * <var:Q> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:1> ; <var:q> := <var:S2> <var:q> := <var:q> + <var:S1> <var:q> := <var:q> + <var:S0> \end{verbatim} Allowing --- taking positive coefficients $ <var:u> $ --- that we have $ <var:Q> = <var:u> $ before evaluating our code segment , then we see $ <var:q> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:2> $ after code terminates . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be seen through usual Hoare techniques . Advancing to the subsequent command contained in our set of commands , we see the code \verb | <var:S1> := <var:Q> ; | . This redefines $ \{ <var:Q> = <var:u> \} $ as the postcondition $ \{ <var:Q> = <var:u> \land <var:S1> = <var:u> \} $ . This is deduced with the assignment inference rule given by usual Hoare logic . Stepping forward , we see the variable binding code defining $ <var:S1> * <var:Q> $ as $ <var:S2>$ . This moves the precondition $ \{ <var:Q> = <var:u> \land <var:S1> = <var:u> \} $ to the postcondition $ \{ <var:Q> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \} $ . This is deduced with the assignment rule defined in usual Hoare techniques . Further , we see the binding line binding $ <nat:2> $ toward $ <var:S0>$ . This line takes the condition $ \{ <var:Q> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \} $ into $ \{ <var:Q> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \land <var:S0> = <nat:2> \} $ . Advancing to the proceeding step in the series of commands , we see the assignment line defining $ <var:S1> * <nat:3> $ to $ <var:S1>$ . This code moves the condition $ \{ <var:Q> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \land <var:S0> = <nat:2> \} $ toward $ \{ <var:Q> = <var:u> \land <var:S1> = <nat:3> \times <var:u> \land <var:S2> = <var:u> ^ <nat:2> \land <var:S0> = <nat:2> \} $ . This is guaranteed using the assignment scheme from usual Hoare techniques . Moving on to the next step , the assignment statement defining $ <var:S2> * <nat:1> $ toward $ <var:S2>$ . This advances the condition $ \{ <var:Q> = <var:u> \land <var:S1> = <nat:3> \times <var:u> \land <var:S2> = <var:u> ^ <nat:2> \land <var:S0> = <nat:2> \} $ to $ \{ <var:Q> = <var:u> \land <var:S1> = <nat:3> \times <var:u> \land <var:S2> = <nat:1> \times <var:u> ^ <nat:2> \land <var:S0> = <nat:2> \} $ . Moving on , we have the variable binding code \verb | <var:q> := <var:S2> | . This command moves $ \{ <var:Q> = <var:u> \land <var:S1> = <nat:3> \times <var:u> \land <var:S2> = <nat:1> \times <var:u> ^ <nat:2> \land <var:S0> = <nat:2> \} $ toward the condition $ \{ <var:Q> = <var:u> \land <var:S1> = <nat:3> \times <var:u> \land <var:S0> = <nat:2> \land <var:q> = <nat:1> \times <var:u> ^ <nat:2> \} $ . Honing in on the upcoming step seen in the series of commands , we see the binding statement \verb | <var:q> := <var:q> + <var:S1> | . This takes $ \{ <var:Q> = <var:u> \land <var:S1> = <nat:3> \times <var:u> \land <var:S0> = <nat:2> \land <var:q> = <nat:1> \times <var:u> ^ <nat:2> \} $ as the condition $ \{ <var:Q> = <var:u> \land <var:S0> = <nat:2> \land <var:q> = <nat:1> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> \} $ . This is guaranteed through the assignment rule obtained from typical Hoare reasoning . Taking another step toward the proceeding bit of code seen in the code , we see the assignment statement letting $ <var:q> + <var:S0$ to $ <var:q>$ . This moves $ \{ <var:Q> = <var:u> \land <var:S0> = <nat:2> \land <var:q> = <nat:1> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> \} $ as $ \{ <var:Q> = <var:u> \land <var:q> = <nat:1> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:Q> = <var:u> }} <var:S1> := <var:Q> ; <var:S2> := <var:S1> * <var:Q> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:1> ; <var:q> := <var:S2> <var:q> := <var:q> + <var:S1> <var:q> := <var:q> + <var:S0> {{ <var:q> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:u> /\ <var:S1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <var:u> ^ <nat:2> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:u> /\ <var:S1> = <nat:3> * <var:u> /\ <var:S2> = <var:u> ^ <nat:2> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:u> /\ <var:S1> = <nat:3> * <var:u> /\ <var:S2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:u> /\ <var:S1> = <nat:3> * <var:u> /\ <var:S0> = <nat:2> /\ <var:q> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:u> /\ <var:S0> = <nat:2> /\ <var:q> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:u> /\ <var:q> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 