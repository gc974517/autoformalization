\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:U> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:F> := <var:Y1> <var:F> := <var:F> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for every natural coefficients $ <var:u> $ --- that $ <var:U> = <var:u> $ ahead of the execution of the series of commands it holds that $ <var:F> = <nat:6> * <var:u> + <nat:4> $ after list of commands has finished . \end{theorem} \begin{proof} The course of logic for our series of instructions can be demonstrated by Hoare reasoning . Taking another step toward the upcoming bits of codefound in our set of instructions , \verb | { <var:U> = <var:u> } <var:Y1> := <var:U> { <var:U> = <var:u> \land <var:Y1> = <var:u> } | , \verb | { <var:U> = <var:u> \land <var:Y1> = <var:u> } <var:Y0> := <nat:4> { <var:U> = <var:u> \land <var:Y1> = <var:u> \land <var:Y0> = <nat:4> } | , \verb | { <var:U> = <var:u> \land <var:Y1> = <var:u> \land <var:Y0> = <nat:4> } <var:Y1> := <var:Y1> * <nat:6> { <var:U> = <var:u> \land <var:Y1> = <nat:6> * <var:u> \land <var:Y0> = <nat:4> } | and \verb | { <var:U> = <var:u> \land <var:Y1> = <nat:6> * <var:u> \land <var:Y0> = <nat:4> } <var:F> := <var:Y1{ <var:U> = <var:u> \land <var:Y0> = <nat:4> \land <var:F> = <nat:6> * <var:u> } | . Following , \verb | { <var:U> = <var:u> } <var:Y1> := <var:U> { <var:U> = <var:u> \land <var:Y1> = <var:u> } | . This is rigorously given through the assignment scheme defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:U> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:F> := <var:Y1> <var:F> := <var:F> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:U> = <var:u> }} <def:poly> {{ <var:F> = <nat:6> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:Y1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:Y1> = <var:u> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:Y1> = <nat:6> * <var:u> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:Y0> = <nat:4> /\ <var:F> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:F> = <nat:6> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 