\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:U> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:5> ; <var:t> := <var:S1> <var:t> := <var:t> + <var:S0> \end{verbatim} Given it to hold that $ <var:U> = <var:J> $ ( taking whole numbers $ <var:J> $ ) ahead of the execution of the series of instructions , it follows that $ <var:t> = <nat:5> \cdot <var:J> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:J> \} \\ <var:S1> := <var:U> ; \\ \{ <var:U> = <var:J> \land <var:S1> = <var:J> \} \\ <var:S0> := <nat:3> ; \\ \{ <var:U> = <var:J> \land <var:S1> = <var:J> \land <var:S0> = <nat:3> \} \\ <var:S1> := <var:S1> * <nat:5> ; \\ \{ <var:U> = <var:J> \land <var:S1> = <nat:5> \cdot <var:J> \land <var:S0> = <nat:3> \} \\ <var:t> := <var:S1> \\ \{ <var:U> = <var:J> \land <var:S0> = <nat:3> \land <var:t> = <nat:5> \cdot <var:J> \} \\ <var:t> := <var:t> + <var:S0> \\ \{ <var:U> = <var:J> \land <var:t> = <nat:5> \cdot <var:J> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:U> = <var:J> }} <var:S1> := <var:U> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:5> ; <var:t> := <var:S1> <var:t> := <var:t> + <var:S0> {{ <var:t> = <nat:5> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:S1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:S1> = <var:J> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:S1> = <nat:5> * <var:J> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:S0> = <nat:3> /\ <var:t> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:t> = <nat:5> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 