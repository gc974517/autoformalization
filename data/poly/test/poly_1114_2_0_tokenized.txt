\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:9> ; <var:E> := <var:C0> \end{verbatim} Assume that $ <var:U> = <var:x> $ prior to running the list of commands it must be that we see $ <var:E> = <nat:9> $ when series of commands terminates . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:U> = <var:x> \} \\ <var:C0> := <nat:9> ; \\ \{ <var:U> = <var:x> \land <var:C0> = <nat:9> \} \\ <var:E> := <var:C0> \\ \{ <var:U> = <var:x> \land <var:E> = <nat:9> \} \end{eqnarray} Thusly , our code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:U> = <var:x> }} <var:C0> := <nat:9> ; <var:E> := <var:C0> {{ <var:E> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:E> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 