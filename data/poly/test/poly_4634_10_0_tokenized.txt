\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:a> ; <var:L3> := <nat:4> ; <var:L3> := <var:L3> * <var:a> ; <var:L3> := <var:L3> * <var:a> ; <var:L3> := <var:L3> * <var:a> ; <var:A> := <var:L3> ; <var:A> := <var:A> + <var:L1> ; <var:A> := <var:A> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Allow ( assuming some $ <var:S> \in \mathbb{N} $ ) it to hold that $ <var:a> = <var:S> $ ahead of interpreting this list of instructions it must be that we see $ <var:A> = <nat:4> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:S> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \} \\ <var:L1> := <nat:2> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \} \\ <var:L1> := <var:L1> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \cdot <var:S> \} \\ <var:L3> := <nat:4> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \cdot <var:S> \land <var:L3> = <nat:4> \} \\ <var:L3> := <var:L3> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \cdot <var:S> \land <var:L3> = <nat:4> \cdot <var:S> \} \\ <var:L3> := <var:L3> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \cdot <var:S> \land <var:L3> = <nat:4> \cdot <var:S> ^ <nat:2> \} \\ <var:L3> := <var:L3> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \cdot <var:S> \land <var:L3> = <nat:4> \cdot <var:S> ^ <nat:3> \} \\ <var:A> := <var:L3> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \land <var:L1> = <nat:2> \cdot <var:S> \land <var:A> = <nat:4> \cdot <var:S> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:L1> ; \\ \{ <var:a> = <var:S> \land <var:L0> = <nat:4> \land <var:A> = <nat:4> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> \} \\ <var:A> := <var:A> + <var:L0> \\ \{ <var:a> = <var:S> \land <var:A> = <nat:4> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> + <nat:4> \} \end{eqnarray} Utilizing Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L0> := <nat:4> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:a> ; <var:L3> := <nat:4> ; <var:L3> := <var:L3> * <var:a> ; <var:L3> := <var:L3> * <var:a> ; <var:L3> := <var:L3> * <var:a> ; <var:A> := <var:L3> ; <var:A> := <var:A> + <var:L1> ; <var:A> := <var:A> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:a> = <var:S> }} <def:poly> {{ <var:A> = <nat:4> * <var:S> ^ <nat:3> + <nat:2> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L3> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L3> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L3> = <nat:4> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:2> * <var:S> /\ <var:A> = <nat:4> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:L0> = <nat:4> /\ <var:A> = <nat:4> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:A> = <nat:4> * <var:S> ^ <nat:3> + <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 