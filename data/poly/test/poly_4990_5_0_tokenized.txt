\begin{document} \begin{theorem} Let the following code in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:2> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:e> ; <var:y> := <var:D1> ; <var:y> := <var:y> + <var:D0> \end{verbatim} Assuming it to be that $ <var:e> = <var:o> $ before executing this code segment it follows that we have $ <var:y> = <nat:4> \times <var:o> + <nat:2> $ once set of instructions has executed . \end{theorem} \begin{proof} The course of logic for our program is demonstrated through usual Hoare techniques . Advancing on , we see the code assigning $ <nat:2> $ toward $ <var:D0>$ . This statement takes the condition $ \{ <var:e> = <var:o> \} $ as the condition $ \{ <var:e> = <var:o> \land <var:D0> = <nat:2> \} $ . Going to the next step , we see the variable binding command defining $ <nat:4> $ to $ <var:D1>$ . This command advances the precondition $ \{ <var:e> = <var:o> \land <var:D0> = <nat:2> \} $ into $ \{ <var:e> = <var:o> \land <var:D0> = <nat:2> \land <var:D1> = <nat:4> \} $ . This is known to be sound using the assignment inference rule of typical Hoare logic . Going forward , the variable assignmet command \verb | <var:D1> := <var:D1> * <var:e> ; | . This code moves the precondition $ \{ <var:e> = <var:o> \land <var:D0> = <nat:2> \land <var:D1> = <nat:4> \} $ as the postcondition $ \{ <var:e> = <var:o> \land <var:D0> = <nat:2> \land <var:D1> = <nat:4> \cdot <var:o> \} $ . Next , we have the assignment command \verb | <var:y> := <var:D1> ; | . This statement redefines the precondition $ \{ <var:e> = <var:o> \land <var:D0> = <nat:2> \land <var:D1> = <nat:4> \cdot <var:o> \} $ into the condition $ \{ <var:e> = <var:o> \land <var:D0> = <nat:2> \land <var:y> = <nat:4> \cdot <var:o> \} $ . Moving forward to the following bit of code seen in the list of commands , the assignment line yielding $ <var:y> + <var:D0$ to $ <var:y>$ . This takes the condition $ \{ <var:e> = <var:o> \land <var:D0> = <nat:2> \land <var:y> = <nat:4> \cdot <var:o> \} $ as $ \{ <var:e> = <var:o> \land <var:y> = <nat:4> \cdot <var:o> + <nat:2> \} $ . This is deduced with the assignment rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:e> = <var:o> }} <var:D0> := <nat:2> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:e> ; <var:y> := <var:D1> ; <var:y> := <var:y> + <var:D0> {{ <var:y> = <nat:4> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:D0> = <nat:2> /\ <var:y> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:y> = <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 