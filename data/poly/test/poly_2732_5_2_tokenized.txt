\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:x> := <nat:1> ; <var:x> := <nat:3> + <var:x> * <var:O> ; <var:x> := <var:x> * <var:O> ; <var:x> := <var:x> * <var:O> ; <var:x> := <nat:3> + <var:x> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Allow --- letting positive numbers $ <var:w> $ --- $ <var:O> = <var:w> $ ahead of the execution of our code segment it holds that $ <var:x> = <nat:1> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} Let the below decorated series of commands . \begin{eqnarray} \{ <var:O> = <var:w> \} \\ <var:x> := <nat:1> ; \\ \{ <var:O> = <var:w> \land <var:x> = <nat:1> \} \\ <var:x> := <nat:3> + <var:x> * <var:O> ; \\ \{ <var:O> = <var:w> \land <var:x> = <nat:1> \times <var:w> + <nat:3> \} \\ <var:x> := <var:x> * <var:O> ; \\ \{ <var:O> = <var:w> \land <var:x> = <nat:1> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + \} \\ <var:x> := <var:x> * <var:O> ; \\ \{ <var:O> = <var:w> \land <var:x> = <nat:1> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + \} \\ <var:x> := <nat:3> + <var:x> * <var:O> \\ \{ <var:O> = <var:w> \land <var:x> = <nat:1> \times <var:w> ^ <nat:4> + <nat:3> \times <var:w> ^ <nat:3> + <nat:3> \} \end{eqnarray} Using standard Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:1> ; <var:x> := <nat:3> + <var:x> * <var:O> ; <var:x> := <var:x> * <var:O> ; <var:x> := <var:x> * <var:O> ; <var:x> := <nat:3> + <var:x> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:O> = <var:w> }} <def:poly> {{ <var:x> = <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:w> /\ <var:x> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:w> /\ <var:x> = <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:w> /\ <var:x> = <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:w> /\ <var:x> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:w> /\ <var:x> = <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 