\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:2> ; <var:a> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Given it to hold that $ <var:S> = <var:Q> $ --- given any $ <var:Q> \in \mathbb{Z}^+ $ --- prior to the execution of our set of instructions , it must be that we have $ <var:a> = <nat:2> $ once series of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:Q> \} \\ <var:v0> := <nat:2> ; \\ \{ <var:S> = <var:Q> \land <var:v0> = <nat:2> \} \\ <var:a> := <var:v0> \\ \{ <var:S> = <var:Q> \land <var:a> = <nat:2> \} \end{eqnarray} The application of Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:2> ; <var:a> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:S> = <var:Q> }} <def:poly> {{ <var:a> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:a> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 