\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:b0> := <nat:4> ; <var:k> := <var:b0> \end{verbatim} Allowing it to be that $ <var:D> = <var:A> $ ahead of running this code it follows that $ <var:k> = <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:D> = <var:A> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:D> = <var:A> \land <var:b0> = <nat:4> \} \\ <var:k> := <var:b0> \\ \{ <var:D> = <var:A> \land <var:k> = <nat:4> \} \end{eqnarray} As a consequence , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:D> = <var:A> }} <var:b0> := <nat:4> ; <var:k> := <var:b0> {{ <var:k> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:k> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 