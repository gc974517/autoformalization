\begin{document} \begin{theorem} Let the following program in \emph{Imp} such that \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <nat:1> + <var:w> * <var:g> \end{verbatim} Allowing it to be that $ <var:g> = <var:j> $ prior to interpreting the list of instructions then we see $ <var:w> = <nat:3> \times <var:j> + <nat:1> $ . \end{theorem} \begin{proof} Let the below decorated segment of code . \begin{eqnarray} \{ <var:g> = <var:j> \} \\ <var:w> := <nat:3> ; \\ \{ <var:g> = <var:j> \land <var:w> = <nat:3> \} \\ <var:w> := <nat:1> + <var:w> * <var:g> \\ \{ <var:g> = <var:j> \land <var:w> = <nat:3> \times <var:j> + <nat:1> \} \end{eqnarray} Using usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:g> = <var:j> }} <var:w> := <nat:3> ; <var:w> := <nat:1> + <var:w> * <var:g> {{ <var:w> = <nat:3> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:w> = <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 