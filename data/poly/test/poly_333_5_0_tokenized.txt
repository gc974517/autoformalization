\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:5> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:i> ; <var:z> := <var:e1> ; <var:z> := <var:z> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Allowing that $ <var:i> = <var:d> $ prior to running our list of instructions , then we see $ <var:z> = <nat:2> * <var:d> + <nat:5> $ when series of commands is done executing . \end{theorem} \begin{proof} Applying usual Hoare techniques results in : \begin{eqnarray} \{ <var:i> = <var:d> \} \\ <var:e0> := <nat:5> ; \\ \{ <var:i> = <var:d> \land <var:e0> = <nat:5> \} \\ <var:e1> := <nat:2> ; \\ \{ <var:i> = <var:d> \land <var:e0> = <nat:5> \land <var:e1> = <nat:2> \} \\ <var:e1> := <var:e1> * <var:i> ; \\ \{ <var:i> = <var:d> \land <var:e0> = <nat:5> \land <var:e1> = <nat:2> \cdot <var:d> \} \\ <var:z> := <var:e1> ; \\ \{ <var:i> = <var:d> \land <var:e0> = <nat:5> \land <var:z> = <nat:2> \cdot <var:d> \} \\ <var:z> := <var:z> + <var:e0> \\ \{ <var:i> = <var:d> \land <var:z> = <nat:2> \cdot <var:d> + <nat:5> \} \end{eqnarray} As a result , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:5> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:i> ; <var:z> := <var:e1> ; <var:z> := <var:z> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:i> = <var:d> }} <def:poly> {{ <var:z> = <nat:2> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:d> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:d> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:d> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:d> /\ <var:e0> = <nat:5> /\ <var:z> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:d> /\ <var:z> = <nat:2> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 