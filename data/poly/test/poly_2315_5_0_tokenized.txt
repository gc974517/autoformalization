\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:K> ; <var:x> := <var:z1> ; <var:x> := <var:x> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Assuming that $ <var:K> = <var:I> $ , assuming some $ <var:I> $ , prior to executing our set of instructions then $ <var:x> = <nat:4> \times <var:I> + <nat:4> $ once set of instructions is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is accomplished with Hoare logic . Advancing on , we see \begin{verbatim} { <var:K> = <var:I> } <var:z0> := <nat:4> { <var:K> = <var:I> \land <var:z0> = <nat:4> } { <var:K> = <var:I> \land <var:z0> = <nat:4> } <var:z1> := <nat:4> { <var:K> = <var:I> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> } { <var:K> = <var:I> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> } <var:z1> := <var:z1> * <var:K> { <var:K> = <var:I> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:I> } { <var:K> = <var:I> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:I> } <var:x> := <var:z1> { <var:K> = <var:I> \land <var:z0> = <nat:4> \land <var:x> = <nat:4> \cdot <var:I> } \end{verbatim} Immediately following , we see \begin{verbatim} { <var:K> = <var:I> } <var:z0> := <nat:4> { <var:K> = <var:I> \land <var:z0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:K> ; <var:x> := <var:z1> ; <var:x> := <var:x> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:K> = <var:I> }} <def:poly> {{ <var:x> = <nat:4> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:z0> = <nat:4> /\ <var:x> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:x> = <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 