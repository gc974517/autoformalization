\begin{document} \begin{theorem} Take the following code in \emph{Imp} : \begin{verbatim} <var:k> := <nat:4> ; <var:k> := <var:k> * <var:T> ; <var:k> := <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <var:k> * <var:T> ; <var:k> := <nat:2> + <var:k> * <var:T> \end{verbatim} Assuming $ <var:T> = <var:Y> $ prior to the execution of the code , it holds that we have $ <var:k> = <nat:4> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this code is clear by typical Hoare logic . Moving forward to the next step , we see \begin{verbatim} { <var:T> = <var:Y> } <var:k> := <nat:4> { <var:T> = <var:Y> \land <var:k> = <nat:4> } { <var:T> = <var:Y> \land <var:k> = <nat:4> } <var:k> := <var:k> * <var:T> { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> + } { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> + } <var:k> := <var:k> * <var:T> { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:2> + } { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:2> + } <var:k> := <nat:1> + <var:k> * <var:T> { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:1> } { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:1> } <var:k> := <nat:1> + <var:k> * <var:T> { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> + <nat:1> } { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> + <nat:1> } <var:k> := <nat:1> + <var:k> * <var:T> { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:1> } { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:1> } <var:k> := <var:k> * <var:T> { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + } { <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + } <var:k> := <nat:2> + <var:k> * <var:T{ <var:T> = <var:Y> \land <var:k> = <nat:4> \cdot <var:Y> ^ <nat:7> + <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:T> = <var:Y> }} <var:k> := <nat:4> ; <var:k> := <var:k> * <var:T> ; <var:k> := <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <var:k> * <var:T> ; <var:k> := <nat:2> + <var:k> * <var:T> {{ <var:k> = <nat:4> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:k> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:k> = <nat:4> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:k> = <nat:4> * <var:Y> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:k> = <nat:4> * <var:Y> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:k> = <nat:4> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:k> = <nat:4> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:k> = <nat:4> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:k> = <nat:4> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 