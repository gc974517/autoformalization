\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:t1> := <var:G> ; <var:t2> := <var:t1> * <var:G> ; <var:t3> := <var:t2> * <var:G> ; <var:t4> := <var:t3> * <var:G> ; <var:t5> := <var:t4> * <var:G> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:5> ; <var:t3> := <var:t3> * <nat:5> ; <var:t5> := <var:t5> * <nat:2> ; <var:j> := <var:t5> <var:j> := <var:j> + <var:t3> <var:j> := <var:j> + <var:t1> <var:j> := <var:j> + <var:t0> \end{verbatim} Allowing that we have $ <var:G> = <var:L> $ prior to running our list of instructions , then we see $ <var:j> = <nat:2> * <var:L> ^ <nat:5> + <nat:5> * <var:L> ^ <nat:3> + <nat:5> * <var:L> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:L> \} \\ <var:t1> := <var:G> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <var:L> \} \\ <var:t2> := <var:t1> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t3> = <var:L> ^ <nat:3> \} \\ <var:t4> := <var:t3> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t3> = <var:L> ^ <nat:3> \land <var:t4> = <var:L> ^ <nat:4> \} \\ <var:t5> := <var:t4> * <var:G> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t3> = <var:L> ^ <nat:3> \land <var:t4> = <var:L> ^ <nat:4> \land <var:t5> = <var:L> ^ <nat:5> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t3> = <var:L> ^ <nat:3> \land <var:t4> = <var:L> ^ <nat:4> \land <var:t5> = <var:L> ^ <nat:5> \land <var:t0> = <nat:4> \} \\ <var:t1> := <var:t1> * <nat:5> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <nat:5> * <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t3> = <var:L> ^ <nat:3> \land <var:t4> = <var:L> ^ <nat:4> \land <var:t5> = <var:L> ^ <nat:5> \land <var:t0> = <nat:4> \} \\ <var:t3> := <var:t3> * <nat:5> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <nat:5> * <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t3> = <nat:5> * <var:L> ^ <nat:3> \land <var:t4> = <var:L> ^ <nat:4> \land <var:t5> = <var:L> ^ <nat:5> \land <var:t0> = <nat:4> \} \\ <var:t5> := <var:t5> * <nat:2> ; \\ \{ <var:G> = <var:L> \land <var:t1> = <nat:5> * <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t3> = <nat:5> * <var:L> ^ <nat:3> \land <var:t4> = <var:L> ^ <nat:4> \land <var:t5> = <nat:2> * <var:L> ^ <nat:5> \land <var:t0> = <nat:4> \} \\ <var:j> := <var:t5> \\ \{ <var:G> = <var:L> \land <var:t1> = <nat:5> * <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t3> = <nat:5> * <var:L> ^ <nat:3> \land <var:t4> = <var:L> ^ <nat:4> \land <var:t0> = <nat:4> \land <var:j> = <nat:2> * <var:L> ^ <nat:5> \} \\ <var:j> := <var:j> + <var:t3> \\ \{ <var:G> = <var:L> \land <var:t1> = <nat:5> * <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:j> = <nat:2> * <var:L> ^ <nat:5> + <nat:5> * <var:L> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:t1> \\ \{ <var:G> = <var:L> \land <var:t0> = <nat:4> \land <var:j> = <nat:2> * <var:L> ^ <nat:5> + <nat:5> * <var:L> ^ <nat:3> + <nat:5> * <var:L> \} \\ <var:j> := <var:j> + <var:t0> \\ \{ <var:G> = <var:L> \land <var:j> = <nat:2> * <var:L> ^ <nat:5> + <nat:5> * <var:L> ^ <nat:3> + <nat:5> * <var:L> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <var:t4> : string := " <var:t4> " . Definition <var:t5> : string := " <var:t5> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:G> = <var:L> }} <var:t1> := <var:G> ; <var:t2> := <var:t1> * <var:G> ; <var:t3> := <var:t2> * <var:G> ; <var:t4> := <var:t3> * <var:G> ; <var:t5> := <var:t4> * <var:G> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:5> ; <var:t3> := <var:t3> * <nat:5> ; <var:t5> := <var:t5> * <nat:2> ; <var:j> := <var:t5> <var:j> := <var:j> + <var:t3> <var:j> := <var:j> + <var:t1> <var:j> := <var:j> + <var:t0> {{ <var:j> = <nat:2> * <var:L> ^ <nat:5> + <nat:5> * <var:L> ^ <nat:3> + <nat:5> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <var:L> /\ <var:t2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t3> = <var:L> ^ <nat:3> /\ <var:t4> = <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t3> = <var:L> ^ <nat:3> /\ <var:t4> = <var:L> ^ <nat:4> /\ <var:t5> = <var:L> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t3> = <var:L> ^ <nat:3> /\ <var:t4> = <var:L> ^ <nat:4> /\ <var:t5> = <var:L> ^ <nat:5> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <nat:5> * <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t3> = <var:L> ^ <nat:3> /\ <var:t4> = <var:L> ^ <nat:4> /\ <var:t5> = <var:L> ^ <nat:5> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <nat:5> * <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t3> = <nat:5> * <var:L> ^ <nat:3> /\ <var:t4> = <var:L> ^ <nat:4> /\ <var:t5> = <var:L> ^ <nat:5> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <nat:5> * <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t3> = <nat:5> * <var:L> ^ <nat:3> /\ <var:t4> = <var:L> ^ <nat:4> /\ <var:t5> = <nat:2> * <var:L> ^ <nat:5> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <nat:5> * <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t3> = <nat:5> * <var:L> ^ <nat:3> /\ <var:t4> = <var:L> ^ <nat:4> /\ <var:t0> = <nat:4> /\ <var:j> = <nat:2> * <var:L> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t1> = <nat:5> * <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t0> = <nat:4> /\ <var:j> = <nat:2> * <var:L> ^ <nat:5> + <nat:5> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:t0> = <nat:4> /\ <var:j> = <nat:2> * <var:L> ^ <nat:5> + <nat:5> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:j> = <nat:2> * <var:L> ^ <nat:5> + <nat:5> * <var:L> ^ <nat:3> + <nat:5> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 