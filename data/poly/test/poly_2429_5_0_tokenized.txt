\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:2> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:D> ; <var:Y> := <var:m1> ; <var:Y> := <var:Y> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assuming , given every whole numbers $ <var:k> $ , it to hold that $ <var:D> = <var:k> $ ahead of the execution of the set of instructions , it follows that $ <var:Y> = <nat:1> \times <var:k> + <nat:2> $ after series of commands has finished executing . \end{theorem} \begin{proof} The course of logic for the list of instructions can be seen using this decorated segment of code . \begin{eqnarray} \{ <var:D> = <var:k> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:D> = <var:k> \land <var:m0> = <nat:2> \} \\ <var:m1> := <nat:1> ; \\ \{ <var:D> = <var:k> \land <var:m0> = <nat:2> \land <var:m1> = <nat:1> \} \\ <var:m1> := <var:m1> * <var:D> ; \\ \{ <var:D> = <var:k> \land <var:m0> = <nat:2> \land <var:m1> = <nat:1> \cdot <var:k> \} \\ <var:Y> := <var:m1> ; \\ \{ <var:D> = <var:k> \land <var:m0> = <nat:2> \land <var:Y> = <nat:1> \cdot <var:k> \} \\ <var:Y> := <var:Y> + <var:m0> \\ \{ <var:D> = <var:k> \land <var:Y> = <nat:1> \cdot <var:k> + <nat:2> \} \end{eqnarray} Utilizing Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:D> ; <var:Y> := <var:m1> ; <var:Y> := <var:Y> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:D> = <var:k> }} <def:poly> {{ <var:Y> = <nat:1> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:m0> = <nat:2> /\ <var:m1> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:m0> = <nat:2> /\ <var:Y> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:Y> = <nat:1> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 