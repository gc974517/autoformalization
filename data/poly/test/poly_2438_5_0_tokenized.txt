\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:8> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:l> ; <var:N> := <var:B1> ; <var:N> := <var:N> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Allowing that $ <var:l> = <var:U> $ ( given some integers $ <var:U> $ ) before executing this list of instructions it must be that $ <var:N> = <nat:6> \cdot <var:U> + <nat:8> $ once segment of code has exited . \end{theorem} \begin{proof} The flow of logic for the segment of code can be given using usual Hoare logic . Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:U> \} & <var:B0> := <nat:8> & \{ <var:l> = <var:U> \land <var:B0> = <nat:8> \} \end{tabular} Moving on to the proceeding bit of code found in our program , we see \[ \begin{tabular} {rcl} \{ <var:l> = <var:U> \} & <var:B0> := <nat:8> & \{ <var:l> = <var:U> \land <var:B0> = <nat:8> \} \end{tabular} This is shown using the variable assignmet inference rule given by typical Hoare logic . Shifting focus toward the next commands seen in our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:l> = <var:U> \} & <var:B0> := <nat:8> & \{ <var:l> = <var:U> \land <var:B0> = <nat:8> \} \\ \{ <var:l> = <var:U> \land <var:B0> = <nat:8> \} & <var:B1> := <nat:6> & \{ <var:l> = <var:U> \land <var:B0> = <nat:8> \land <var:B1> = <nat:6> \} \end{tabular} Looking at the proceeding bit of code in our program , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:U> \} & <var:B0> := <nat:8> & \{ <var:l> = <var:U> \land <var:B0> = <nat:8> \} \end{tabular} This is known to be sound with the assignment law obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B0> := <nat:8> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:l> ; <var:N> := <var:B1> ; <var:N> := <var:N> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:l> = <var:U> }} <def:poly> {{ <var:N> = <nat:6> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:B0> = <nat:8> /\ <var:B1> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:B0> = <nat:8> /\ <var:N> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:N> = <nat:6> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 