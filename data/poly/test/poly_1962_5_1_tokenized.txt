\begin{document} \begin{theorem} Define a set of instructions as \begin{verbatim} <var:Z1> := <var:h> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:s> := <var:Z1> <var:s> := <var:s> + <var:Z0> \end{verbatim} Assuming $ <var:h> = <var:B> $ before executing the list of commands , it must be that $ <var:s> = <nat:7> * <var:B> + <nat:2> $ once program has exited . \end{theorem} \begin{proof} Note that the below decorated set of commands . \begin{eqnarray} \{ <var:h> = <var:B> \} \\ <var:Z1> := <var:h> ; \\ \{ <var:h> = <var:B> \land <var:Z1> = <var:B> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:h> = <var:B> \land <var:Z1> = <var:B> \land <var:Z0> = <nat:2> \} \\ <var:Z1> := <var:Z1> * <nat:7> ; \\ \{ <var:h> = <var:B> \land <var:Z1> = <nat:7> \cdot <var:B> \land <var:Z0> = <nat:2> \} \\ <var:s> := <var:Z1> \\ \{ <var:h> = <var:B> \land <var:Z0> = <nat:2> \land <var:s> = <nat:7> \cdot <var:B> \} \\ <var:s> := <var:s> + <var:Z0> \\ \{ <var:h> = <var:B> \land <var:s> = <nat:7> \cdot <var:B> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:h> = <var:B> }} <var:Z1> := <var:h> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:s> := <var:Z1> <var:s> := <var:s> + <var:Z0> {{ <var:s> = <nat:7> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:Z1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:Z1> = <var:B> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:Z1> = <nat:7> * <var:B> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:Z0> = <nat:2> /\ <var:s> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:s> = <nat:7> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 