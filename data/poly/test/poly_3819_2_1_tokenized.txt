\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:7> ; <var:r> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Given it to be that $ <var:p> = <var:K> $ prior to the evaluation of our series of commands then we see $ <var:r> = <nat:7> $ . \end{theorem} \begin{proof} The argument for our list of commands is done using standard Hoare reasoning . Further , \verb | { <var:p> = <var:K> } <var:h0> := <nat:7> { <var:p> = <var:K> \land <var:h0> = <nat:7> } | and \verb | { <var:p> = <var:K> \land <var:h0> = <nat:7> } <var:r> := <var:h0{ <var:p> = <var:K> \land <var:r> = <nat:7> } | . This is deduced using the variable binding law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:7> ; <var:r> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:p> = <var:K> }} <def:poly> {{ <var:r> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:r> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 