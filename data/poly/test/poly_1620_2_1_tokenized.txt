\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:2> ; <var:a> := <var:Z0> \end{verbatim} Allow , with some integers $ <var:z> $ , that $ <var:k> = <var:z> $ ahead of interpreting this code segment then we have $ <var:a> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be seen with typical Hoare logic . Taking another step toward the subsequent statement found in the set of commands , we see the line \verb | <var:Z0> := <nat:2> ; | . This advances $ \{ <var:k> = <var:z> \} $ toward $ \{ <var:k> = <var:z> \land <var:Z0> = <nat:2> \} $ . Observing the next step seen in our set of instructions , we see the variable assignmet command \verb | <var:a> := <var:Z0> | . This forwards $ \{ <var:k> = <var:z> \land <var:Z0> = <nat:2> \} $ to the condition $ \{ <var:k> = <var:z> \land <var:a> = <nat:2> \} $ . This is deduced using the assignment inference rule of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:k> = <var:z> }} <var:Z0> := <nat:2> ; <var:a> := <var:Z0> {{ <var:a> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:a> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 