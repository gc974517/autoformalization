\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:9> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:L> ; <var:e2> := <nat:5> ; <var:e2> := <var:e2> * <var:L> ; <var:e2> := <var:e2> * <var:L> ; <var:e3> := <nat:7> ; <var:e3> := <var:e3> * <var:L> ; <var:e3> := <var:e3> * <var:L> ; <var:e3> := <var:e3> * <var:L> ; <var:I> := <var:e3> ; <var:I> := <var:I> + <var:e2> ; <var:I> := <var:I> + <var:e1> ; <var:I> := <var:I> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Given that $ <var:L> = <var:K> $ ahead of evaluating the list of commands , it holds that we have $ <var:I> = <nat:7> \times <var:K> ^ <nat:3> + <nat:5> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> + <nat:9> $ when series of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code can be shown using the following decorated series of instructions . \begin{eqnarray} \{ <var:L> = <var:K> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \} \\ <var:e1> := <nat:5> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \} \\ <var:e1> := <var:e1> * <var:L> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \} \\ <var:e2> := <nat:5> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:e2> = <nat:5> \} \\ <var:e2> := <var:e2> * <var:L> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:e2> = <nat:5> \times <var:K> \} \\ <var:e2> := <var:e2> * <var:L> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:e2> = <nat:5> \times <var:K> ^ <nat:2> \} \\ <var:e3> := <nat:7> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:e2> = <nat:5> \times <var:K> ^ <nat:2> \land <var:e3> = <nat:7> \} \\ <var:e3> := <var:e3> * <var:L> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:e2> = <nat:5> \times <var:K> ^ <nat:2> \land <var:e3> = <nat:7> \times <var:K> \} \\ <var:e3> := <var:e3> * <var:L> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:e2> = <nat:5> \times <var:K> ^ <nat:2> \land <var:e3> = <nat:7> \times <var:K> ^ <nat:2> \} \\ <var:e3> := <var:e3> * <var:L> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:e2> = <nat:5> \times <var:K> ^ <nat:2> \land <var:e3> = <nat:7> \times <var:K> ^ <nat:3> \} \\ <var:I> := <var:e3> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:e2> = <nat:5> \times <var:K> ^ <nat:2> \land <var:I> = <nat:7> \times <var:K> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:e2> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:K> \land <var:I> = <nat:7> \times <var:K> ^ <nat:3> + <nat:5> \times <var:K> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:e1> ; \\ \{ <var:L> = <var:K> \land <var:e0> = <nat:9> \land <var:I> = <nat:7> \times <var:K> ^ <nat:3> + <nat:5> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> \} \\ <var:I> := <var:I> + <var:e0> \\ \{ <var:L> = <var:K> \land <var:I> = <nat:7> \times <var:K> ^ <nat:3> + <nat:5> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> + <nat:9> \} \end{eqnarray} Using standard Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e0> := <nat:9> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:L> ; <var:e2> := <nat:5> ; <var:e2> := <var:e2> * <var:L> ; <var:e2> := <var:e2> * <var:L> ; <var:e3> := <nat:7> ; <var:e3> := <var:e3> * <var:L> ; <var:e3> := <var:e3> * <var:L> ; <var:e3> := <var:e3> * <var:L> ; <var:I> := <var:e3> ; <var:I> := <var:I> + <var:e2> ; <var:I> := <var:I> + <var:e1> ; <var:I> := <var:I> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:L> = <var:K> }} <def:poly> {{ <var:I> = <nat:7> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:e2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:e2> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:e2> = <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:e2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:e3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:e2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:e3> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:e2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:e3> = <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:e2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:e3> = <nat:7> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:e2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:I> = <nat:7> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:K> /\ <var:I> = <nat:7> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:e0> = <nat:9> /\ <var:I> = <nat:7> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:K> /\ <var:I> = <nat:7> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 