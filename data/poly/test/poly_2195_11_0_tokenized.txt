\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:7> ; <var:u2> := <nat:6> ; <var:u2> := <var:u2> * <var:v> ; <var:u2> := <var:u2> * <var:v> ; <var:u3> := <nat:3> ; <var:u3> := <var:u3> * <var:v> ; <var:u3> := <var:u3> * <var:v> ; <var:u3> := <var:u3> * <var:v> ; <var:o> := <var:u3> ; <var:o> := <var:o> + <var:u2> ; <var:o> := <var:o> + <var:u0> \end{verbatim} Given that we have $ <var:v> = <var:e> $ given every positive numbers $ <var:e> $ before executing the list of instructions , it holds that we see $ <var:o> = <nat:3> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:7> $ when list of commands has exited . \end{theorem} \begin{proof} Proving correctness for the list of instructions is evident through the below decorated list of commands . \begin{eqnarray} \{ <var:v> = <var:e> \} \\ <var:u0> := <nat:7> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \} \\ <var:u2> := <nat:6> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:u2> = <nat:6> \} \\ <var:u2> := <var:u2> * <var:v> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:u2> = <nat:6> \times <var:e> \} \\ <var:u2> := <var:u2> * <var:v> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \} \\ <var:u3> := <nat:3> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:3> \} \end{eqnarray} Advancing interpreting the set of commands returns : \begin{eqnarray} <var:u3> := <var:u3> * <var:v> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:e> \} \\ <var:u3> := <var:u3> * <var:v> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:e> ^ <nat:2> \} \\ <var:u3> := <var:u3> * <var:v> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:e> ^ <nat:3> \} \\ <var:o> := <var:u3> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:o> = <nat:3> \times <var:e> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:u2> ; \\ \{ <var:v> = <var:e> \land <var:u0> = <nat:7> \land <var:o> = <nat:3> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:u0> \\ \{ <var:v> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:7> \} \end{eqnarray} Using usual Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:v> = <var:e> }} <var:u0> := <nat:7> ; <var:u2> := <nat:6> ; <var:u2> := <var:u2> * <var:v> ; <var:u2> := <var:u2> * <var:v> ; <var:u3> := <nat:3> ; <var:u3> := <var:u3> * <var:v> ; <var:u3> := <var:u3> * <var:v> ; <var:u3> := <var:u3> * <var:v> ; <var:o> := <var:u3> ; <var:o> := <var:o> + <var:u2> ; <var:o> := <var:o> + <var:u0> {{ <var:o> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:u2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:u2> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:o> = <nat:3> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:7> /\ <var:o> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:o> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 