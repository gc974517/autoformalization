\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:N> ; <var:M2> := <var:M1> * <var:N> ; <var:M3> := <var:M2> * <var:N> ; <var:M0> := <nat:7> ; <var:M1> := <var:M1> * <nat:6> ; <var:M2> := <var:M2> * <nat:4> ; <var:M3> := <var:M3> * <nat:9> ; <var:u> := <var:M3> <var:u> := <var:u> + <var:M2> <var:u> := <var:u> + <var:M1> <var:u> := <var:u> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Allow it to be that $ <var:N> = <var:B> $ before running our code it must be that $ <var:u> = <nat:9> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:7> $ . \end{theorem} \begin{proof} The proof of the segment of code is accomplished with the following decorated code segment . \begin{eqnarray} \{ <var:N> = <var:B> \} \\ <var:M1> := <var:N> ; \\ \{ <var:N> = <var:B> \land <var:M1> = <var:B> \} \\ <var:M2> := <var:M1> * <var:N> ; \\ \{ <var:N> = <var:B> \land <var:M1> = <var:B> \land <var:M2> = <var:B> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:N> ; \\ \{ <var:N> = <var:B> \land <var:M1> = <var:B> \land <var:M2> = <var:B> ^ <nat:2> \land <var:M3> = <var:B> ^ <nat:3> \} \\ <var:M0> := <nat:7> ; \\ \{ <var:N> = <var:B> \land <var:M1> = <var:B> \land <var:M2> = <var:B> ^ <nat:2> \land <var:M3> = <var:B> ^ <nat:3> \land <var:M0> = <nat:7> \} \\ <var:M1> := <var:M1> * <nat:6> ; \\ \{ <var:N> = <var:B> \land <var:M1> = <nat:6> * <var:B> \land <var:M2> = <var:B> ^ <nat:2> \land <var:M3> = <var:B> ^ <nat:3> \land <var:M0> = <nat:7> \} \\ <var:M2> := <var:M2> * <nat:4> ; \\ \{ <var:N> = <var:B> \land <var:M1> = <nat:6> * <var:B> \land <var:M2> = <nat:4> * <var:B> ^ <nat:2> \land <var:M3> = <var:B> ^ <nat:3> \land <var:M0> = <nat:7> \} \\ <var:M3> := <var:M3> * <nat:9> ; \\ \{ <var:N> = <var:B> \land <var:M1> = <nat:6> * <var:B> \land <var:M2> = <nat:4> * <var:B> ^ <nat:2> \land <var:M3> = <nat:9> * <var:B> ^ <nat:3> \land <var:M0> = <nat:7> \} \\ <var:u> := <var:M3> \\ \{ <var:N> = <var:B> \land <var:M1> = <nat:6> * <var:B> \land <var:M2> = <nat:4> * <var:B> ^ <nat:2> \land <var:M0> = <nat:7> \land <var:u> = <nat:9> * <var:B> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:M2> \\ \{ <var:N> = <var:B> \land <var:M1> = <nat:6> * <var:B> \land <var:M0> = <nat:7> \land <var:u> = <nat:9> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> \} \end{eqnarray} Allowing the evaluation of our program results in : \begin{eqnarray} <var:u> := <var:u> + <var:M1> \\ \{ <var:N> = <var:B> \land <var:M0> = <nat:7> \land <var:u> = <nat:9> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> \} \\ <var:u> := <var:u> + <var:M0> \\ \{ <var:N> = <var:B> \land <var:u> = <nat:9> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:7> \} \end{eqnarray} The application of usual Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:N> ; <var:M2> := <var:M1> * <var:N> ; <var:M3> := <var:M2> * <var:N> ; <var:M0> := <nat:7> ; <var:M1> := <var:M1> * <nat:6> ; <var:M2> := <var:M2> * <nat:4> ; <var:M3> := <var:M3> * <nat:9> ; <var:u> := <var:M3> <var:u> := <var:u> + <var:M2> <var:u> := <var:u> + <var:M1> <var:u> := <var:u> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:N> = <var:B> }} <def:poly> {{ <var:u> = <nat:9> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <var:B> /\ <var:M2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <var:B> /\ <var:M2> = <var:B> ^ <nat:2> /\ <var:M3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <var:B> /\ <var:M2> = <var:B> ^ <nat:2> /\ <var:M3> = <var:B> ^ <nat:3> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <nat:6> * <var:B> /\ <var:M2> = <var:B> ^ <nat:2> /\ <var:M3> = <var:B> ^ <nat:3> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <nat:6> * <var:B> /\ <var:M2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:M3> = <var:B> ^ <nat:3> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <nat:6> * <var:B> /\ <var:M2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:M3> = <nat:9> * <var:B> ^ <nat:3> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <nat:6> * <var:B> /\ <var:M2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:M0> = <nat:7> /\ <var:u> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M1> = <nat:6> * <var:B> /\ <var:M0> = <nat:7> /\ <var:u> = <nat:9> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:M0> = <nat:7> /\ <var:u> = <nat:9> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:u> = <nat:9> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 