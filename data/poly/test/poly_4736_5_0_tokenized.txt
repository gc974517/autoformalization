\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:1> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:p> ; <var:Z> := <var:k1> ; <var:Z> := <var:Z> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:p> = <var:c> $ prior to running our program it holds that we see $ <var:Z> = <nat:8> \times <var:c> + <nat:1> $ once set of instructions has exited . \end{theorem} \begin{proof} The flow of logic for our code segment can be shown through standard Hoare logic . Taking another step toward the next statement contained in the set of instructions , we have \verb | { <var:p> = <var:c> } <var:k0> := <nat:1> { <var:p> = <var:c> \land <var:k0> = <nat:1> } | . This is rigorously given by the environment update law from usual Hoare logic . Stepping through , we see \verb | { <var:p> = <var:c> } <var:k0> := <nat:1> { <var:p> = <var:c> \land <var:k0> = <nat:1> } | and \verb | { <var:p> = <var:c> \land <var:k0> = <nat:1> } <var:k1> := <nat:8> { <var:p> = <var:c> \land <var:k0> = <nat:1> \land <var:k1> = <nat:8> } | . Moving on to the next step , \verb | { <var:p> = <var:c> } <var:k0> := <nat:1> { <var:p> = <var:c> \land <var:k0> = <nat:1> } | and \verb | { <var:p> = <var:c> \land <var:k0> = <nat:1> } <var:k1> := <nat:8> { <var:p> = <var:c> \land <var:k0> = <nat:1> \land <var:k1> = <nat:8> } | . This is guaranteed using the environment update inference rule given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:1> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:p> ; <var:Z> := <var:k1> ; <var:Z> := <var:Z> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:p> = <var:c> }} <def:poly> {{ <var:Z> = <nat:8> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:k0> = <nat:1> /\ <var:Z> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:Z> = <nat:8> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 