\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:5> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:o> ; <var:K2> := <nat:7> ; <var:K2> := <var:K2> * <var:o> ; <var:K2> := <var:K2> * <var:o> ; <var:E> := <var:K2> ; <var:E> := <var:E> + <var:K1> ; <var:E> := <var:E> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:o> = <var:m> $ --- given some $ <var:m> $ --- prior to interpreting the list of instructions , then we have $ <var:E> = <nat:7> \times <var:m> ^ <nat:2> + <nat:9> \times <var:m> + <nat:5> $ when segment of code has finished . \end{theorem} \begin{proof} The course of logic for this list of instructions is accomplished by typical Hoare reasoning . Next , we have the variable binding code letting $ <nat:5> $ as $ <var:K0>$ . This statement takes $ \{ <var:o> = <var:m> \} $ into $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \} $ . This is shown to be logically sound through the assignment rule given by typical Hoare techniques . Looking at the upcoming line of code seen in our code , we have the variable update command \verb | <var:K1> := <nat:9> ; | . This line moves the precondition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \} $ toward the postcondition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \} $ . Moving forward to the proceeding bit of code seen in the series of instructions , the binding code \verb | <var:K1> := <var:K1> * <var:o> ; | . This line redefines $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \} $ to the condition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \} $ . Immediately after , we see the assignment command letting $ <nat:7> $ as $ <var:K2>$ . This line transfers $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \} $ as the condition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \land <var:K2> = <nat:7> \} $ . Moving onward , we have the environment update command giving $ <var:K2> * <var:o> $ into $ <var:K2>$ . This takes $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \land <var:K2> = <nat:7> \} $ toward the postcondition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \land <var:K2> = <nat:7> \cdot <var:m> \} $ . This is shown to be logically sound using the assignment inference rule of standard Hoare logic . Considering the next line of code in our set of commands , we see the assignment code \verb | <var:K2> := <var:K2> * <var:o> ; | . This line moves the precondition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \land <var:K2> = <nat:7> \cdot <var:m> \} $ into the postcondition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \land <var:K2> = <nat:7> \cdot <var:m> ^ <nat:2> \} $ . This is given using the assignment law from Hoare techniques . Following , the variable binding statement \verb | <var:E> := <var:K2> ; | . This forwards the condition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \land <var:K2> = <nat:7> \cdot <var:m> ^ <nat:2> \} $ into $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \land <var:E> = <nat:7> \cdot <var:m> ^ <nat:2> \} $ . Moving onward , we see the variable update code \verb | <var:E> := <var:E> + <var:K1> ; | . This takes $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:K1> = <nat:9> \cdot <var:m> \land <var:E> = <nat:7> \cdot <var:m> ^ <nat:2> \} $ into the postcondition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:E> = <nat:7> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> \} $ . This is guaranteed using the assignment scheme defined in Hoare reasoning . Considering the subsequent line found in our program , we have the command binding $ <var:E> + <var:K0$ as $ <var:E>$ . This transfers the precondition $ \{ <var:o> = <var:m> \land <var:K0> = <nat:5> \land <var:E> = <nat:7> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> \} $ toward the postcondition $ \{ <var:o> = <var:m> \land <var:E> = <nat:7> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:5> ; <var:K1> := <nat:9> ; <var:K1> := <var:K1> * <var:o> ; <var:K2> := <nat:7> ; <var:K2> := <var:K2> * <var:o> ; <var:K2> := <var:K2> * <var:o> ; <var:E> := <var:K2> ; <var:E> := <var:E> + <var:K1> ; <var:E> := <var:E> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:o> = <var:m> }} <def:poly> {{ <var:E> = <nat:7> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:m> /\ <var:K2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:m> /\ <var:K2> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:m> /\ <var:K2> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:9> * <var:m> /\ <var:E> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:K0> = <nat:5> /\ <var:E> = <nat:7> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:E> = <nat:7> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 