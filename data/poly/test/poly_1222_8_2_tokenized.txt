\begin{document} \begin{theorem} Take the following code segment : \begin{verbatim} <var:Z> := <nat:3> ; <var:Z> := <nat:2> + <var:Z> * <var:o> ; <var:Z> := <nat:2> + <var:Z> * <var:o> ; <var:Z> := <nat:3> + <var:Z> * <var:o> ; <var:Z> := <nat:2> + <var:Z> * <var:o> ; <var:Z> := <var:Z> * <var:o> ; <var:Z> := <nat:4> + <var:Z> * <var:o> ; <var:Z> := <nat:1> + <var:Z> * <var:o> \end{verbatim} Assume , assuming some $ <var:V> \in \mathbb{Z}^+ $ , that we have $ <var:o> = <var:V> $ prior to evaluating the code segment it must be that we see $ <var:Z> = <nat:3> \times <var:V> ^ <nat:7> + <nat:2> \times <var:V> ^ <nat:6> + <nat:2> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:o> = <var:V> \} \\ <var:Z> := <nat:3> ; \\ \{ <var:o> = <var:V> \land <var:Z> = <nat:3> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:o> ; \\ \{ <var:o> = <var:V> \land <var:Z> = <nat:3> \times <var:V> + <nat:2> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:o> ; \\ \{ <var:o> = <var:V> \land <var:Z> = <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:2> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:o> ; \\ \{ <var:o> = <var:V> \land <var:Z> = <nat:3> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:3> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:o> ; \\ \{ <var:o> = <var:V> \land <var:Z> = <nat:3> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:2> \} \\ <var:Z> := <var:Z> * <var:o> ; \\ \{ <var:o> = <var:V> \land <var:Z> = <nat:3> \times <var:V> ^ <nat:5> + <nat:2> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + \} \\ <var:Z> := <nat:4> + <var:Z> * <var:o> ; \\ \{ <var:o> = <var:V> \land <var:Z> = <nat:3> \times <var:V> ^ <nat:6> + <nat:2> \times <var:V> ^ <nat:5> + <nat:2> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:4> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:o> \\ \{ <var:o> = <var:V> \land <var:Z> = <nat:3> \times <var:V> ^ <nat:7> + <nat:2> \times <var:V> ^ <nat:6> + <nat:2> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> + <nat:1> \} \end{eqnarray} Thusly , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:o> = <var:V> }} <var:Z> := <nat:3> ; <var:Z> := <nat:2> + <var:Z> * <var:o> ; <var:Z> := <nat:2> + <var:Z> * <var:o> ; <var:Z> := <nat:3> + <var:Z> * <var:o> ; <var:Z> := <nat:2> + <var:Z> * <var:o> ; <var:Z> := <var:Z> * <var:o> ; <var:Z> := <nat:4> + <var:Z> * <var:o> ; <var:Z> := <nat:1> + <var:Z> * <var:o> {{ <var:Z> = <nat:3> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:Z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:Z> = <nat:3> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:Z> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:Z> = <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:Z> = <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:Z> = <nat:3> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:Z> = <nat:3> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:Z> = <nat:3> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 