\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:k> ; <var:N2> := <var:N1> * <var:k> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:1> ; <var:V> := <var:N2> <var:V> := <var:V> + <var:N1> <var:V> := <var:V> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Given --- taking integers $ <var:G> $ --- that we have $ <var:k> = <var:G> $ prior to the evaluation of our series of instructions it follows that $ <var:V> = <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning yields : \begin{eqnarray} \{ <var:k> = <var:G> \} \\ <var:N1> := <var:k> ; \\ \{ <var:k> = <var:G> \land <var:N1> = <var:G> \} \\ <var:N2> := <var:N1> * <var:k> ; \\ \{ <var:k> = <var:G> \land <var:N1> = <var:G> \land <var:N2> = <var:G> ^ <nat:2> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:k> = <var:G> \land <var:N1> = <var:G> \land <var:N2> = <var:G> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:N1> := <var:N1> * <nat:3> ; \\ \{ <var:k> = <var:G> \land <var:N1> = <nat:3> \times <var:G> \land <var:N2> = <var:G> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:N2> := <var:N2> * <nat:1> ; \\ \{ <var:k> = <var:G> \land <var:N1> = <nat:3> \times <var:G> \land <var:N2> = <nat:1> \times <var:G> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:V> := <var:N2> \\ \{ <var:k> = <var:G> \land <var:N1> = <nat:3> \times <var:G> \land <var:N0> = <nat:3> \land <var:V> = <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:N1> \\ \{ <var:k> = <var:G> \land <var:N0> = <nat:3> \land <var:V> = <nat:1> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> \} \\ <var:V> := <var:V> + <var:N0> \\ \{ <var:k> = <var:G> \land <var:V> = <nat:1> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> + <nat:3> \} \end{eqnarray} Given the above , this series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N1> := <var:k> ; <var:N2> := <var:N1> * <var:k> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:1> ; <var:V> := <var:N2> <var:V> := <var:V> + <var:N1> <var:V> := <var:V> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:k> = <var:G> }} <def:poly> {{ <var:V> = <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:N1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:N1> = <var:G> /\ <var:N2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:N1> = <var:G> /\ <var:N2> = <var:G> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:N1> = <nat:3> * <var:G> /\ <var:N2> = <var:G> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:N1> = <nat:3> * <var:G> /\ <var:N2> = <nat:1> * <var:G> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:N1> = <nat:3> * <var:G> /\ <var:N0> = <nat:3> /\ <var:V> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:N0> = <nat:3> /\ <var:V> = <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:V> = <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 