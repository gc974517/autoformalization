\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:f> ; <var:G2> := <var:G1> * <var:f> ; <var:G3> := <var:G2> * <var:f> ; <var:G4> := <var:G3> * <var:f> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:4> ; <var:G3> := <var:G3> * <nat:4> ; <var:G4> := <var:G4> * <nat:4> ; <var:H> := <var:G4> <var:H> := <var:H> + <var:G3> <var:H> := <var:H> + <var:G1> <var:H> := <var:H> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- taking natural coefficients $ <var:T> $ --- that $ <var:f> = <var:T> $ before evaluating the set of commands , it follows that we see $ <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our code segment is evident by typical Hoare techniques . Paying attention to the next command seen in our list of commands , the command \verb | <var:G1> := <var:f> ; | . This statement takes the condition $ \{ <var:f> = <var:T> \} $ toward $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \} $ . This is deduced through the assignment rule given by Hoare techniques . Observing the following bit of code found in the code segment , we have the variable assignmet command \verb | <var:G2> := <var:G1> * <var:f> ; | . This line advances $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \} $ as the condition $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \land <var:G2> = <var:T> ^ <nat:2> \} $ . Moving onward , we see the binding command letting $ <var:G2> * <var:f> $ toward $ <var:G3>$ . This code takes $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \land <var:G2> = <var:T> ^ <nat:2> \} $ as $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <var:T> ^ <nat:3> \} $ . Paying attention to the upcoming statement found in the list of commands , the statement \verb | <var:G4> := <var:G3> * <var:f> ; | . This statement redefines the condition $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <var:T> ^ <nat:3> \} $ into the postcondition $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <var:T> ^ <nat:3> \land <var:G4> = <var:T> ^ <nat:4> \} $ . Moving onward , the assignment line binding $ <nat:3> $ to $ <var:G0>$ . This statement redefines the precondition $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <var:T> ^ <nat:3> \land <var:G4> = <var:T> ^ <nat:4> \} $ as the condition $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <var:T> ^ <nat:3> \land <var:G4> = <var:T> ^ <nat:4> \land <var:G0> = <nat:3> \} $ . Moving on to the proceeding statement found in our set of commands , we have the environment update code \verb | <var:G1> := <var:G1> * <nat:4> ; | . This transfers $ \{ <var:f> = <var:T> \land <var:G1> = <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <var:T> ^ <nat:3> \land <var:G4> = <var:T> ^ <nat:4> \land <var:G0> = <nat:3> \} $ to $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <var:T> ^ <nat:3> \land <var:G4> = <var:T> ^ <nat:4> \land <var:G0> = <nat:3> \} $ . This is guaranteed with the assignment inference rule given by standard Hoare reasoning . Advancing to the next step , the statement \verb | <var:G3> := <var:G3> * <nat:4> ; | . This forwards $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <var:T> ^ <nat:3> \land <var:G4> = <var:T> ^ <nat:4> \land <var:G0> = <nat:3> \} $ to $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:G4> = <var:T> ^ <nat:4> \land <var:G0> = <nat:3> \} $ . This is shown to be logically sound with the assignment rule given by standard Hoare techniques . Moving on to the upcoming bit of code in the program , the variable assignmet code yielding $ <var:G4> * <nat:4> $ into $ <var:G4>$ . This code redefines the condition $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:G4> = <var:T> ^ <nat:4> \land <var:G0> = <nat:3> \} $ to $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:G4> = <nat:4> \cdot <var:T> ^ <nat:4> \land <var:G0> = <nat:3> \} $ . This is shown to be logically sound using the assignment law of typical Hoare reasoning . Observing the following statement seen in our segment of code , the variable binding command \verb | <var:H> := <var:G4> | . This line advances the condition $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:G4> = <nat:4> \cdot <var:T> ^ <nat:4> \land <var:G0> = <nat:3> \} $ toward the postcondition $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:G0> = <nat:3> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> \} $ . This is shown with the assignment rule defined by standard Hoare reasoning . Advancing to the next step , we have the variable binding line giving $ <var:H> + <var:G3$ toward $ <var:H>$ . This statement forwards $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:G0> = <nat:3> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> \} $ into the postcondition $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G0> = <nat:3> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> \} $ . Moving on to the next statement seen in the program , we have the binding statement yielding $ <var:H> + <var:G1$ as $ <var:H>$ . This transfers the precondition $ \{ <var:f> = <var:T> \land <var:G1> = <nat:4> \cdot <var:T> \land <var:G2> = <var:T> ^ <nat:2> \land <var:G0> = <nat:3> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> \} $ toward the condition $ \{ <var:f> = <var:T> \land <var:G0> = <nat:3> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> \} $ . This is known to be sound using the assignment scheme in usual Hoare logic . Moving forward , we see the binding code \verb | <var:H> := <var:H> + <var:G0> | . This code transfers the precondition $ \{ <var:f> = <var:T> \land <var:G0> = <nat:3> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> \} $ toward the condition $ \{ <var:f> = <var:T> \land <var:H> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Definition <def:poly> := <var:G1> := <var:f> ; <var:G2> := <var:G1> * <var:f> ; <var:G3> := <var:G2> * <var:f> ; <var:G4> := <var:G3> * <var:f> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:4> ; <var:G3> := <var:G3> * <nat:4> ; <var:G4> := <var:G4> * <nat:4> ; <var:H> := <var:G4> <var:H> := <var:H> + <var:G3> <var:H> := <var:H> + <var:G1> <var:H> := <var:H> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:f> = <var:T> }} <def:poly> {{ <var:H> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <var:T> /\ <var:G2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <var:T> /\ <var:G2> = <var:T> ^ <nat:2> /\ <var:G3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <var:T> /\ <var:G2> = <var:T> ^ <nat:2> /\ <var:G3> = <var:T> ^ <nat:3> /\ <var:G4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <var:T> /\ <var:G2> = <var:T> ^ <nat:2> /\ <var:G3> = <var:T> ^ <nat:3> /\ <var:G4> = <var:T> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <nat:4> * <var:T> /\ <var:G2> = <var:T> ^ <nat:2> /\ <var:G3> = <var:T> ^ <nat:3> /\ <var:G4> = <var:T> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <nat:4> * <var:T> /\ <var:G2> = <var:T> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:G4> = <var:T> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <nat:4> * <var:T> /\ <var:G2> = <var:T> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:G4> = <nat:4> * <var:T> ^ <nat:4> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <nat:4> * <var:T> /\ <var:G2> = <var:T> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:G0> = <nat:3> /\ <var:H> = <nat:4> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G1> = <nat:4> * <var:T> /\ <var:G2> = <var:T> ^ <nat:2> /\ <var:G0> = <nat:3> /\ <var:H> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:G0> = <nat:3> /\ <var:H> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:H> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 