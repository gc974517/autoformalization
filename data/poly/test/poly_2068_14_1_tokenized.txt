\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:Q1> := <var:r> ; <var:Q2> := <var:Q1> * <var:r> ; <var:Q3> := <var:Q2> * <var:r> ; <var:Q4> := <var:Q3> * <var:r> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:4> ; <var:Q4> := <var:Q4> * <nat:1> ; <var:q> := <var:Q4> <var:q> := <var:q> + <var:Q3> <var:q> := <var:q> + <var:Q2> <var:q> := <var:q> + <var:Q1> <var:q> := <var:q> + <var:Q0> \end{verbatim} Allowing it to be that $ <var:r> = <var:t> $ ahead of interpreting our set of commands it must be that $ <var:q> = <nat:1> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:7> \cdot <var:t> + <nat:6> $ when program finishes . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be done using usual Hoare techniques . Advancing to the next step , we have \begin{eqnarray} \{ <var:r> = <var:t> \} \, <var:Q1> := <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \} \, <var:Q2> := <var:Q1> * <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \} \end{eqnarray} This is ensured by the variable binding rule found in typical Hoare reasoning . Moving onward , we see \begin{eqnarray} \{ <var:r> = <var:t> \} \, <var:Q1> := <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \} \, <var:Q2> := <var:Q1> * <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \} \, <var:Q3> := <var:Q2> * <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \} \, <var:Q4> := <var:Q3> * <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \} \, <var:Q0> := <nat:6> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \land <var:Q0> = <nat:6> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \land <var:Q0> = <nat:6> \} \, <var:Q1> := <var:Q1> * <nat:7> \, \{ <var:r> = <var:t> \land <var:Q1> = <nat:7> \times <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \land <var:Q0> = <nat:6> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <nat:7> \times <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \land <var:Q0> = <nat:6> \} \, <var:Q2> := <var:Q2> * <nat:2> \, \{ <var:r> = <var:t> \land <var:Q1> = <nat:7> \times <var:t> \land <var:Q2> = <nat:2> \times <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \land <var:Q0> = <nat:6> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <nat:7> \times <var:t> \land <var:Q2> = <nat:2> \times <var:t> ^ <nat:2> \land <var:Q3> = <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \land <var:Q0> = <nat:6> \} \, <var:Q3> := <var:Q3> * <nat:4> \, \{ <var:r> = <var:t> \land <var:Q1> = <nat:7> \times <var:t> \land <var:Q2> = <nat:2> \times <var:t> ^ <nat:2> \land <var:Q3> = <nat:4> \times <var:t> ^ <nat:3> \land <var:Q4> = <var:t> ^ <nat:4> \land <var:Q0> = <nat:6> \} \end{eqnarray} This is shown by the assignment law of standard Hoare logic . Immediately following , \begin{eqnarray} \{ <var:r> = <var:t> \} \, <var:Q1> := <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \} \, <var:Q2> := <var:Q1> * <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \} \end{eqnarray} Moving on to the next lines of codein the series of instructions , we have \begin{eqnarray} \{ <var:r> = <var:t> \} \, <var:Q1> := <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \} \\ \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \} \, <var:Q2> := <var:Q1> * <var:r> \, \{ <var:r> = <var:t> \land <var:Q1> = <var:t> \land <var:Q2> = <var:t> ^ <nat:2> \} \end{eqnarray} This is given using the variable assignmet law obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <var:Q1> := <var:r> ; <var:Q2> := <var:Q1> * <var:r> ; <var:Q3> := <var:Q2> * <var:r> ; <var:Q4> := <var:Q3> * <var:r> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:4> ; <var:Q4> := <var:Q4> * <nat:1> ; <var:q> := <var:Q4> <var:q> := <var:q> + <var:Q3> <var:q> := <var:q> + <var:Q2> <var:q> := <var:q> + <var:Q1> <var:q> := <var:q> + <var:Q0> {{ <var:q> = <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <var:t> /\ <var:Q2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <var:t> /\ <var:Q2> = <var:t> ^ <nat:2> /\ <var:Q3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <var:t> /\ <var:Q2> = <var:t> ^ <nat:2> /\ <var:Q3> = <var:t> ^ <nat:3> /\ <var:Q4> = <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <var:t> /\ <var:Q2> = <var:t> ^ <nat:2> /\ <var:Q3> = <var:t> ^ <nat:3> /\ <var:Q4> = <var:t> ^ <nat:4> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <nat:7> * <var:t> /\ <var:Q2> = <var:t> ^ <nat:2> /\ <var:Q3> = <var:t> ^ <nat:3> /\ <var:Q4> = <var:t> ^ <nat:4> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <nat:7> * <var:t> /\ <var:Q2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:Q3> = <var:t> ^ <nat:3> /\ <var:Q4> = <var:t> ^ <nat:4> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <nat:7> * <var:t> /\ <var:Q2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:Q4> = <var:t> ^ <nat:4> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <nat:7> * <var:t> /\ <var:Q2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:Q4> = <nat:1> * <var:t> ^ <nat:4> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <nat:7> * <var:t> /\ <var:Q2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:Q0> = <nat:6> /\ <var:q> = <nat:1> * <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <nat:7> * <var:t> /\ <var:Q2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:Q0> = <nat:6> /\ <var:q> = <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q1> = <nat:7> * <var:t> /\ <var:Q0> = <nat:6> /\ <var:q> = <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:Q0> = <nat:6> /\ <var:q> = <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:q> = <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 