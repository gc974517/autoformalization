\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:H> ; <var:Y2> := <var:Y1> * <var:H> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:w> := <var:Y2> <var:w> := <var:w> + <var:Y1> <var:w> := <var:w> + <var:Y0> \end{verbatim} Given taking positive integers $ <var:p> $ $ <var:H> = <var:p> $ before the execution of our program , then we have $ <var:w> = <nat:4> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:7> $ . \end{theorem} \begin{proof} Observe this decorated code segment . \begin{eqnarray} \{ <var:H> = <var:p> \} \\ <var:Y1> := <var:H> ; \\ \{ <var:H> = <var:p> \land <var:Y1> = <var:p> \} \\ <var:Y2> := <var:Y1> * <var:H> ; \\ \{ <var:H> = <var:p> \land <var:Y1> = <var:p> \land <var:Y2> = <var:p> ^ <nat:2> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:H> = <var:p> \land <var:Y1> = <var:p> \land <var:Y2> = <var:p> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <var:Y1> * <nat:1> ; \\ \{ <var:H> = <var:p> \land <var:Y1> = <nat:1> * <var:p> \land <var:Y2> = <var:p> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:Y2> := <var:Y2> * <nat:4> ; \\ \{ <var:H> = <var:p> \land <var:Y1> = <nat:1> * <var:p> \land <var:Y2> = <nat:4> * <var:p> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:w> := <var:Y2> \\ \{ <var:H> = <var:p> \land <var:Y1> = <nat:1> * <var:p> \land <var:Y0> = <nat:7> \land <var:w> = <nat:4> * <var:p> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:Y1> \\ \{ <var:H> = <var:p> \land <var:Y0> = <nat:7> \land <var:w> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> \} \\ <var:w> := <var:w> + <var:Y0> \\ \{ <var:H> = <var:p> \land <var:w> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:7> \} \end{eqnarray} Applying Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:H> = <var:p> }} <var:Y1> := <var:H> ; <var:Y2> := <var:Y1> * <var:H> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:w> := <var:Y2> <var:w> := <var:w> + <var:Y1> <var:w> := <var:w> + <var:Y0> {{ <var:w> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:Y1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:Y1> = <var:p> /\ <var:Y2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:Y1> = <var:p> /\ <var:Y2> = <var:p> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:Y1> = <nat:1> * <var:p> /\ <var:Y2> = <var:p> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:Y1> = <nat:1> * <var:p> /\ <var:Y2> = <nat:4> * <var:p> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:Y1> = <nat:1> * <var:p> /\ <var:Y0> = <nat:7> /\ <var:w> = <nat:4> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:Y0> = <nat:7> /\ <var:w> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:w> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 