\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:3> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:g> ; <var:E2> := <var:E2> * <var:g> ; <var:E3> := <nat:2> ; <var:E3> := <var:E3> * <var:g> ; <var:E3> := <var:E3> * <var:g> ; <var:E3> := <var:E3> * <var:g> ; <var:z> := <var:E3> ; <var:z> := <var:z> + <var:E2> ; <var:z> := <var:z> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:g> = <var:f> $ ahead of executing our list of commands it holds that we have $ <var:z> = <nat:2> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:3> $ when series of instructions is done . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is given using typical Hoare logic . Considering the next statements found in the code , we have \verb | { <var:g> = <var:f> } <var:E0> := <nat:3> { <var:g> = <var:f> \land <var:E0> = <nat:3> } | , \verb | { <var:g> = <var:f> \land <var:E0> = <nat:3> } <var:E2> := <nat:2> { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> } | , \verb | { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> } <var:E2> := <var:E2> * <var:g> { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> } | , \verb | { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> } <var:E2> := <var:E2> * <var:g> { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> } | , \verb | { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> } <var:E3> := <nat:2> { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:E3> = <nat:2> } | , \verb | { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:E3> = <nat:2> } <var:E3> := <var:E3> * <var:g> { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:E3> = <nat:2> \cdot <var:f> } | , \verb | { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:E3> = <nat:2> \cdot <var:f> } <var:E3> := <var:E3> * <var:g> { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:E3> = <nat:2> \cdot <var:f> ^ <nat:2> } | and \verb | { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:E3> = <nat:2> \cdot <var:f> ^ <nat:2> } <var:E3> := <var:E3> * <var:g> { <var:g> = <var:f> \land <var:E0> = <nat:3> \land <var:E2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:E3> = <nat:2> \cdot <var:f> ^ <nat:3> } | . This is shown to be logically sound through the binding law in usual Hoare logic . Advancing to the subsequent step in our code segment , we see \verb | { <var:g> = <var:f> } <var:E0> := <nat:3> { <var:g> = <var:f> \land <var:E0> = <nat:3> } | . This is shown by the environment update inference rule defined by usual Hoare reasoning . Shifting focus toward the upcoming piece of code found in the segment of code , we have \verb | { <var:g> = <var:f> } <var:E0> := <nat:3> { <var:g> = <var:f> \land <var:E0> = <nat:3> } | . Moving onward , \verb | { <var:g> = <var:f> } <var:E0> := <nat:3> { <var:g> = <var:f> \land <var:E0> = <nat:3> } | . This is shown to be logically sound through the variable assignmet rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E0> := <nat:3> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:g> ; <var:E2> := <var:E2> * <var:g> ; <var:E3> := <nat:2> ; <var:E3> := <var:E3> * <var:g> ; <var:E3> := <var:E3> * <var:g> ; <var:E3> := <var:E3> * <var:g> ; <var:z> := <var:E3> ; <var:z> := <var:z> + <var:E2> ; <var:z> := <var:z> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:g> = <var:f> }} <def:poly> {{ <var:z> = <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:E2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:E2> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:z> = <nat:2> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:E0> = <nat:3> /\ <var:z> = <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:z> = <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 