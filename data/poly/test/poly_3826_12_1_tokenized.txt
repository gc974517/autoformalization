\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:t1> := <var:u> ; <var:t2> := <var:t1> * <var:u> ; <var:t3> := <var:t2> * <var:u> ; <var:t4> := <var:t3> * <var:u> ; <var:t0> := <nat:5> ; <var:t1> := <var:t1> * <nat:6> ; <var:t3> := <var:t3> * <nat:4> ; <var:t4> := <var:t4> * <nat:9> ; <var:i> := <var:t4> <var:i> := <var:i> + <var:t3> <var:i> := <var:i> + <var:t1> <var:i> := <var:i> + <var:t0> \end{verbatim} Assume , given every natural coefficients $ <var:a> $ , it to be that $ <var:u> = <var:a> $ before interpreting this segment of code , then we see $ <var:i> = <nat:9> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:6> * <var:a> + <nat:5> $ when series of instructions has terminated . \end{theorem} \begin{proof} The course of logic for our set of instructions is shown through standard Hoare reasoning . Moving forward to the next step , we see the environment update command assigning $ <var:u> $ into $ <var:t1>$ . This code forwards $ \{ <var:u> = <var:a> \} $ into $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \} $ . Looking at the upcoming line in our code , the variable binding code \verb | <var:t2> := <var:t1> * <var:u> ; | . This command takes the condition $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \} $ to $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \land <var:t2> = <var:a> ^ <nat:2> \} $ . This is shown using the assignment law given by usual Hoare reasoning . After , we have the variable assignmet statement yielding $ <var:t2> * <var:u> $ as $ <var:t3>$ . This advances $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \land <var:t2> = <var:a> ^ <nat:2> \} $ to the postcondition $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <var:a> ^ <nat:3> \} $ . This is deduced through the assignment scheme given in standard Hoare logic . Considering the upcoming line of code seen in the list of commands , the environment update code \verb | <var:t4> := <var:t3> * <var:u> ; | . This redefines the precondition $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <var:a> ^ <nat:3> \} $ toward the postcondition $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <var:a> ^ <nat:3> \land <var:t4> = <var:a> ^ <nat:4> \} $ . Stepping through , we see the command letting $ <nat:5> $ to $ <var:t0>$ . This statement redefines $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <var:a> ^ <nat:3> \land <var:t4> = <var:a> ^ <nat:4> \} $ into the condition $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <var:a> ^ <nat:3> \land <var:t4> = <var:a> ^ <nat:4> \land <var:t0> = <nat:5> \} $ . Honing in on the next statement found in the list of instructions , we see the variable update code assigning $ <var:t1> * <nat:6> $ toward $ <var:t1>$ . This statement redefines the precondition $ \{ <var:u> = <var:a> \land <var:t1> = <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <var:a> ^ <nat:3> \land <var:t4> = <var:a> ^ <nat:4> \land <var:t0> = <nat:5> \} $ to the postcondition $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <var:a> ^ <nat:3> \land <var:t4> = <var:a> ^ <nat:4> \land <var:t0> = <nat:5> \} $ . This is shown by the assignment inference rule defined in standard Hoare logic . Stepping through , the environment update command \verb | <var:t3> := <var:t3> * <nat:4> ; | . This command takes $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <var:a> ^ <nat:3> \land <var:t4> = <var:a> ^ <nat:4> \land <var:t0> = <nat:5> \} $ as the condition $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <nat:4> \times <var:a> ^ <nat:3> \land <var:t4> = <var:a> ^ <nat:4> \land <var:t0> = <nat:5> \} $ . This is given through the assignment rule found in standard Hoare techniques . Considering the following bit of code contained in our series of instructions , we see the variable update command \verb | <var:t4> := <var:t4> * <nat:9> ; | . This takes the precondition $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <nat:4> \times <var:a> ^ <nat:3> \land <var:t4> = <var:a> ^ <nat:4> \land <var:t0> = <nat:5> \} $ to $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <nat:4> \times <var:a> ^ <nat:3> \land <var:t4> = <nat:9> \times <var:a> ^ <nat:4> \land <var:t0> = <nat:5> \} $ . Taking another step toward the subsequent command contained in our code , we have the statement yielding $ <var:t4$ as $ <var:i>$ . This line takes the precondition $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <nat:4> \times <var:a> ^ <nat:3> \land <var:t4> = <nat:9> \times <var:a> ^ <nat:4> \land <var:t0> = <nat:5> \} $ toward $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <nat:4> \times <var:a> ^ <nat:3> \land <var:t0> = <nat:5> \land <var:i> = <nat:9> \times <var:a> ^ <nat:4> \} $ . This is shown to be logically sound by the assignment law obtained from standard Hoare techniques . Now , we have the variable update statement giving $ <var:i> + <var:t3$ into $ <var:i>$ . This moves the condition $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t3> = <nat:4> \times <var:a> ^ <nat:3> \land <var:t0> = <nat:5> \land <var:i> = <nat:9> \times <var:a> ^ <nat:4> \} $ as $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t0> = <nat:5> \land <var:i> = <nat:9> \times <var:a> ^ <nat:4> + <nat:4> \times <var:a> ^ <nat:3> \} $ . Jumping to the upcoming command contained in our segment of code , we see the variable assignmet statement defining $ <var:i> + <var:t1$ to $ <var:i>$ . This redefines the condition $ \{ <var:u> = <var:a> \land <var:t1> = <nat:6> \times <var:a> \land <var:t2> = <var:a> ^ <nat:2> \land <var:t0> = <nat:5> \land <var:i> = <nat:9> \times <var:a> ^ <nat:4> + <nat:4> \times <var:a> ^ <nat:3> \} $ into $ \{ <var:u> = <var:a> \land <var:t0> = <nat:5> \land <var:i> = <nat:9> \times <var:a> ^ <nat:4> + <nat:4> \times <var:a> ^ <nat:3> + <nat:6> \times <var:a> \} $ . Advancing to the next step , we have the binding code yielding $ <var:i> + <var:t0$ into $ <var:i>$ . This redefines the precondition $ \{ <var:u> = <var:a> \land <var:t0> = <nat:5> \land <var:i> = <nat:9> \times <var:a> ^ <nat:4> + <nat:4> \times <var:a> ^ <nat:3> + <nat:6> \times <var:a> \} $ toward the condition $ \{ <var:u> = <var:a> \land <var:i> = <nat:9> \times <var:a> ^ <nat:4> + <nat:4> \times <var:a> ^ <nat:3> + <nat:6> \times <var:a> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <var:t4> : string := " <var:t4> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:u> = <var:a> }} <var:t1> := <var:u> ; <var:t2> := <var:t1> * <var:u> ; <var:t3> := <var:t2> * <var:u> ; <var:t4> := <var:t3> * <var:u> ; <var:t0> := <nat:5> ; <var:t1> := <var:t1> * <nat:6> ; <var:t3> := <var:t3> * <nat:4> ; <var:t4> := <var:t4> * <nat:9> ; <var:i> := <var:t4> <var:i> := <var:i> + <var:t3> <var:i> := <var:i> + <var:t1> <var:i> := <var:i> + <var:t0> {{ <var:i> = <nat:9> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:6> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <var:a> /\ <var:t2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <var:a> /\ <var:t2> = <var:a> ^ <nat:2> /\ <var:t3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <var:a> /\ <var:t2> = <var:a> ^ <nat:2> /\ <var:t3> = <var:a> ^ <nat:3> /\ <var:t4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <var:a> /\ <var:t2> = <var:a> ^ <nat:2> /\ <var:t3> = <var:a> ^ <nat:3> /\ <var:t4> = <var:a> ^ <nat:4> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <nat:6> * <var:a> /\ <var:t2> = <var:a> ^ <nat:2> /\ <var:t3> = <var:a> ^ <nat:3> /\ <var:t4> = <var:a> ^ <nat:4> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <nat:6> * <var:a> /\ <var:t2> = <var:a> ^ <nat:2> /\ <var:t3> = <nat:4> * <var:a> ^ <nat:3> /\ <var:t4> = <var:a> ^ <nat:4> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <nat:6> * <var:a> /\ <var:t2> = <var:a> ^ <nat:2> /\ <var:t3> = <nat:4> * <var:a> ^ <nat:3> /\ <var:t4> = <nat:9> * <var:a> ^ <nat:4> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <nat:6> * <var:a> /\ <var:t2> = <var:a> ^ <nat:2> /\ <var:t3> = <nat:4> * <var:a> ^ <nat:3> /\ <var:t0> = <nat:5> /\ <var:i> = <nat:9> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t1> = <nat:6> * <var:a> /\ <var:t2> = <var:a> ^ <nat:2> /\ <var:t0> = <nat:5> /\ <var:i> = <nat:9> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:t0> = <nat:5> /\ <var:i> = <nat:9> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:i> = <nat:9> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:6> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 