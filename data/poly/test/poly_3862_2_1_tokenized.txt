\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:7> ; <var:b> := <var:h0> \end{verbatim} Allow that $ <var:x> = <var:B> $ before interpreting this series of instructions it follows that we see $ <var:b> = <nat:7> $ once segment of code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:B> \} \\ <var:h0> := <nat:7> ; \\ \{ <var:x> = <var:B> \land <var:h0> = <nat:7> \} \\ <var:b> := <var:h0> \\ \{ <var:x> = <var:B> \land <var:b> = <nat:7> \} \end{eqnarray} Furthering interpreting our set of commands results in : \begin{eqnarray} \end{eqnarray} Using standard Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:x> = <var:B> }} <var:h0> := <nat:7> ; <var:b> := <var:h0> {{ <var:b> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:b> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 