\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:n> ; <var:N2> := <var:N1> * <var:n> ; <var:N3> := <var:N2> * <var:n> ; <var:N4> := <var:N3> * <var:n> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:8> ; <var:N4> := <var:N4> * <nat:4> ; <var:V> := <var:N4> <var:V> := <var:V> + <var:N3> <var:V> := <var:V> + <var:N2> <var:V> := <var:V> + <var:N1> <var:V> := <var:V> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Assume --- for some $ <var:I> \in \mathbb{Z}^+ $ --- it to be that $ <var:n> = <var:I> $ ahead of running our series of commands it must be that $ <var:V> = <nat:4> \times <var:I> ^ <nat:4> + <nat:8> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:n> = <var:I> \} \\ <var:N1> := <var:n> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <var:I> \} \\ <var:N2> := <var:N1> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <var:I> \land <var:N2> = <var:I> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <var:I> \land <var:N2> = <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \} \\ <var:N4> := <var:N3> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <var:I> \land <var:N2> = <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \land <var:N4> = <var:I> ^ <nat:4> \} \\ <var:N0> := <nat:8> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <var:I> \land <var:N2> = <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \land <var:N4> = <var:I> ^ <nat:4> \land <var:N0> = <nat:8> \} \\ <var:N1> := <var:N1> * <nat:2> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <nat:2> \times <var:I> \land <var:N2> = <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \land <var:N4> = <var:I> ^ <nat:4> \land <var:N0> = <nat:8> \} \\ <var:N2> := <var:N2> * <nat:4> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <nat:2> \times <var:I> \land <var:N2> = <nat:4> \times <var:I> ^ <nat:2> \land <var:N3> = <var:I> ^ <nat:3> \land <var:N4> = <var:I> ^ <nat:4> \land <var:N0> = <nat:8> \} \\ <var:N3> := <var:N3> * <nat:8> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <nat:2> \times <var:I> \land <var:N2> = <nat:4> \times <var:I> ^ <nat:2> \land <var:N3> = <nat:8> \times <var:I> ^ <nat:3> \land <var:N4> = <var:I> ^ <nat:4> \land <var:N0> = <nat:8> \} \\ <var:N4> := <var:N4> * <nat:4> ; \\ \{ <var:n> = <var:I> \land <var:N1> = <nat:2> \times <var:I> \land <var:N2> = <nat:4> \times <var:I> ^ <nat:2> \land <var:N3> = <nat:8> \times <var:I> ^ <nat:3> \land <var:N4> = <nat:4> \times <var:I> ^ <nat:4> \land <var:N0> = <nat:8> \} \\ <var:V> := <var:N4> \\ \{ <var:n> = <var:I> \land <var:N1> = <nat:2> \times <var:I> \land <var:N2> = <nat:4> \times <var:I> ^ <nat:2> \land <var:N3> = <nat:8> \times <var:I> ^ <nat:3> \land <var:N0> = <nat:8> \land <var:V> = <nat:4> \times <var:I> ^ <nat:4> \} \\ <var:V> := <var:V> + <var:N3> \\ \{ <var:n> = <var:I> \land <var:N1> = <nat:2> \times <var:I> \land <var:N2> = <nat:4> \times <var:I> ^ <nat:2> \land <var:N0> = <nat:8> \land <var:V> = <nat:4> \times <var:I> ^ <nat:4> + <nat:8> \times <var:I> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:N2> \\ \{ <var:n> = <var:I> \land <var:N1> = <nat:2> \times <var:I> \land <var:N0> = <nat:8> \land <var:V> = <nat:4> \times <var:I> ^ <nat:4> + <nat:8> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:N1> \\ \{ <var:n> = <var:I> \land <var:N0> = <nat:8> \land <var:V> = <nat:4> \times <var:I> ^ <nat:4> + <nat:8> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> \} \\ <var:V> := <var:V> + <var:N0> \\ \{ <var:n> = <var:I> \land <var:V> = <nat:4> \times <var:I> ^ <nat:4> + <nat:8> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:8> \} \end{eqnarray} Given the above , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Definition <def:poly> := <var:N1> := <var:n> ; <var:N2> := <var:N1> * <var:n> ; <var:N3> := <var:N2> * <var:n> ; <var:N4> := <var:N3> * <var:n> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:8> ; <var:N4> := <var:N4> * <nat:4> ; <var:V> := <var:N4> <var:V> := <var:V> + <var:N3> <var:V> := <var:V> + <var:N2> <var:V> := <var:V> + <var:N1> <var:V> := <var:V> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:n> = <var:I> }} <def:poly> {{ <var:V> = <nat:4> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <var:I> /\ <var:N2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <var:I> /\ <var:N2> = <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <var:I> /\ <var:N2> = <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> /\ <var:N4> = <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <var:I> /\ <var:N2> = <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> /\ <var:N4> = <var:I> ^ <nat:4> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <nat:2> * <var:I> /\ <var:N2> = <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> /\ <var:N4> = <var:I> ^ <nat:4> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <nat:2> * <var:I> /\ <var:N2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:N3> = <var:I> ^ <nat:3> /\ <var:N4> = <var:I> ^ <nat:4> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <nat:2> * <var:I> /\ <var:N2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:I> ^ <nat:3> /\ <var:N4> = <var:I> ^ <nat:4> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <nat:2> * <var:I> /\ <var:N2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:I> ^ <nat:3> /\ <var:N4> = <nat:4> * <var:I> ^ <nat:4> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <nat:2> * <var:I> /\ <var:N2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:I> ^ <nat:3> /\ <var:N0> = <nat:8> /\ <var:V> = <nat:4> * <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <nat:2> * <var:I> /\ <var:N2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:N0> = <nat:8> /\ <var:V> = <nat:4> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N1> = <nat:2> * <var:I> /\ <var:N0> = <nat:8> /\ <var:V> = <nat:4> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:N0> = <nat:8> /\ <var:V> = <nat:4> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:V> = <nat:4> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 