\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:q1> := <var:F> ; <var:q2> := <var:q1> * <var:F> ; <var:q0> := <nat:5> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:9> ; <var:O> := <var:q2> <var:O> := <var:O> + <var:q1> <var:O> := <var:O> + <var:q0> \end{verbatim} Given it to be that $ <var:F> = <var:z> $ prior to interpreting this list of instructions , it must be that we have $ <var:O> = <nat:9> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:5> $ once segment of code is done executing . \end{theorem} \begin{proof} The course of logic for the code segment is demonstrated with this decorated program . \begin{eqnarray} \{ <var:F> = <var:z> \} \\ <var:q1> := <var:F> ; \\ \{ <var:F> = <var:z> \land <var:q1> = <var:z> \} \\ <var:q2> := <var:q1> * <var:F> ; \\ \{ <var:F> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \} \\ <var:q0> := <nat:5> ; \\ \{ <var:F> = <var:z> \land <var:q1> = <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q0> = <nat:5> \} \\ <var:q1> := <var:q1> * <nat:2> ; \\ \{ <var:F> = <var:z> \land <var:q1> = <nat:2> \times <var:z> \land <var:q2> = <var:z> ^ <nat:2> \land <var:q0> = <nat:5> \} \\ <var:q2> := <var:q2> * <nat:9> ; \\ \{ <var:F> = <var:z> \land <var:q1> = <nat:2> \times <var:z> \land <var:q2> = <nat:9> \times <var:z> ^ <nat:2> \land <var:q0> = <nat:5> \} \\ <var:O> := <var:q2> \\ \{ <var:F> = <var:z> \land <var:q1> = <nat:2> \times <var:z> \land <var:q0> = <nat:5> \land <var:O> = <nat:9> \times <var:z> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:q1> \\ \{ <var:F> = <var:z> \land <var:q0> = <nat:5> \land <var:O> = <nat:9> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> \} \\ <var:O> := <var:O> + <var:q0> \\ \{ <var:F> = <var:z> \land <var:O> = <nat:9> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:5> \} \end{eqnarray} The application of standard Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:F> = <var:z> }} <var:q1> := <var:F> ; <var:q2> := <var:q1> * <var:F> ; <var:q0> := <nat:5> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:9> ; <var:O> := <var:q2> <var:O> := <var:O> + <var:q1> <var:O> := <var:O> + <var:q0> {{ <var:O> = <nat:9> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:q1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:q1> = <var:z> /\ <var:q2> = <var:z> ^ <nat:2> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:q1> = <nat:2> * <var:z> /\ <var:q2> = <var:z> ^ <nat:2> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:q1> = <nat:2> * <var:z> /\ <var:q2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:q1> = <nat:2> * <var:z> /\ <var:q0> = <nat:5> /\ <var:O> = <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:q0> = <nat:5> /\ <var:O> = <nat:9> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:O> = <nat:9> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 