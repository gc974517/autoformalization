\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D> := <nat:4> ; <var:D> := <var:D> * <var:U> ; <var:D> := <nat:1> + <var:D> * <var:U> ; <var:D> := <nat:2> + <var:D> * <var:U> ; <var:D> := <nat:2> + <var:D> * <var:U> ; <var:D> := <nat:4> + <var:D> * <var:U> ; <var:D> := <nat:4> + <var:D> * <var:U> ; <var:D> := <nat:4> + <var:D> * <var:U> ; <var:D> := <nat:3> + <var:D> * <var:U> ; <var:D> := <nat:1> + <var:D> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:U> = <var:q> $ , for some positive integer coefficients $ <var:q> $ , before interpreting the segment of code it follows that $ <var:D> = <nat:4> \cdot <var:q> ^ <nat:9> + <nat:1> \cdot <var:q> ^ <nat:7> + <nat:2> \cdot <var:q> ^ <nat:6> + <nat:2> \cdot <var:q> ^ <nat:5> + <nat:4> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:4> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:1> $ once list of commands exits . \end{theorem} \begin{proof} The course of logic for our list of instructions is demonstrated with Hoare reasoning . Moving on to the upcoming bit of code seen in the code segment , the variable update line letting $ <nat:4> $ toward $ <var:D>$ . This forwards $ \{ <var:U> = <var:q> \} $ into the postcondition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> \} $ . Looking at the proceeding line contained in our code , we see the line \verb | <var:D> := <var:D> * <var:U> ; | . This forwards the condition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> \} $ as $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> + \} $ . This is shown by the assignment rule found in Hoare reasoning . Focusing on the proceeding piece of code found in the set of commands , we have the variable update line assigning $ <nat:1> + <var:D> * <var:U> $ as $ <var:D>$ . This moves the precondition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> + \} $ to $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:2> + <nat:1> \} $ . This is shown using the assignment law from usual Hoare techniques . Moving forward to the next statement in the code , we have the environment update line letting $ <nat:2> + <var:D> * <var:U> $ as $ <var:D>$ . This command advances the precondition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:2> \} $ . Shifting focus toward the subsequent command contained in our list of commands , we have the variable update line letting $ <nat:2> + <var:D> * <var:U> $ to $ <var:D>$ . This forwards the condition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:2> \} $ toward the condition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> \} $ . Moving on , the variable assignmet command \verb | <var:D> := <nat:4> + <var:D> * <var:U> ; | . This command moves the condition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> \} $ as the postcondition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:4> \} $ . This is deduced using the assignment scheme of typical Hoare logic . Advancing on , we see the command \verb | <var:D> := <nat:4> + <var:D> * <var:U> ; | . This takes $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:4> \} $ to $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> \} $ . This is ensured using the assignment scheme obtained from Hoare logic . Keeping momentum , we see the variable binding code \verb | <var:D> := <nat:4> + <var:D> * <var:U> ; | . This redefines $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> \} $ into the postcondition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> \} $ . Moving on to the next step , we have the environment update code \verb | <var:D> := <nat:3> + <var:D> * <var:U> ; | . This advances $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> \} $ to $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> \} $ . This is deduced through the assignment law obtained from standard Hoare logic . Moving forward to the next piece of code seen in our program , the assignment command \verb | <var:D> := <nat:1> + <var:D> * <var:U> | . This line transfers the condition $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> \} $ into $ \{ <var:U> = <var:q> \land <var:D> = <nat:4> * <var:q> ^ <nat:9> + <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:1> \} $ . This is deduced by the assignment inference rule obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:4> ; <var:D> := <var:D> * <var:U> ; <var:D> := <nat:1> + <var:D> * <var:U> ; <var:D> := <nat:2> + <var:D> * <var:U> ; <var:D> := <nat:2> + <var:D> * <var:U> ; <var:D> := <nat:4> + <var:D> * <var:U> ; <var:D> := <nat:4> + <var:D> * <var:U> ; <var:D> := <nat:4> + <var:D> * <var:U> ; <var:D> := <nat:3> + <var:D> * <var:U> ; <var:D> := <nat:1> + <var:D> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:U> = <var:q> }} <def:poly> {{ <var:D> = <nat:4> * <var:q> ^ <nat:9> + <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:D> = <nat:4> * <var:q> ^ <nat:9> + <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 