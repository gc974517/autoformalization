\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:G0> := <nat:6> ; <var:B> := <var:G0> \end{verbatim} Allow that $ <var:O> = <var:p> $ , for some integers $ <var:p> $ , prior to the evaluation of this series of instructions , it holds that we see $ <var:B> = <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for the set of instructions is demonstrated through typical Hoare reasoning . Immediately following , the variable assignmet statement \verb | <var:G0> := <nat:6> ; | . This advances $ \{ <var:O> = <var:p> \} $ into $ \{ <var:O> = <var:p> \land <var:G0> = <nat:6> \} $ . This is known to be sound through the assignment law in standard Hoare reasoning . Immediately following , the binding statement \verb | <var:B> := <var:G0> | . This advances the condition $ \{ <var:O> = <var:p> \land <var:G0> = <nat:6> \} $ as $ \{ <var:O> = <var:p> \land <var:B> = <nat:6> \} $ . This is sound by the assignment law found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:O> = <var:p> }} <var:G0> := <nat:6> ; <var:B> := <var:G0> {{ <var:B> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:B> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 