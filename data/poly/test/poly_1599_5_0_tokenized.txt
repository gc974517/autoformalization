\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:9> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:v> ; <var:d> := <var:f1> ; <var:d> := <var:d> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:v> = <var:G> $ ahead of the execution of our program , then we see $ <var:d> = <nat:9> \times <var:G> + <nat:9> $ when program has finished . \end{theorem} \begin{proof} The course of logic for the set of instructions is shown using usual Hoare logic . Shifting focus toward the upcoming steps in our list of instructions , \begin{eqnarray} \{ <var:v> = <var:G> \} \, <var:f0> := <nat:9> \, \{ <var:v> = <var:G> \land <var:f0> = <nat:9> \} \\ \{ <var:v> = <var:G> \land <var:f0> = <nat:9> \} \, <var:f1> := <nat:9> \, \{ <var:v> = <var:G> \land <var:f0> = <nat:9> \land <var:f1> = <nat:9> \} \end{eqnarray} This is shown with the variable update scheme found in usual Hoare logic . Advancing to the next step , \begin{eqnarray} \{ <var:v> = <var:G> \} \, <var:f0> := <nat:9> \, \{ <var:v> = <var:G> \land <var:f0> = <nat:9> \} \end{eqnarray} This is shown through the variable assignmet scheme given in typical Hoare techniques . Moving onward , \begin{eqnarray} \{ <var:v> = <var:G> \} \, <var:f0> := <nat:9> \, \{ <var:v> = <var:G> \land <var:f0> = <nat:9> \} \end{eqnarray} Moving forward to the proceeding step contained in our segment of code , \begin{eqnarray} \{ <var:v> = <var:G> \} \, <var:f0> := <nat:9> \, \{ <var:v> = <var:G> \land <var:f0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:9> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:v> ; <var:d> := <var:f1> ; <var:d> := <var:d> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:v> = <var:G> }} <def:poly> {{ <var:d> = <nat:9> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:f0> = <nat:9> /\ <var:d> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:d> = <nat:9> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 