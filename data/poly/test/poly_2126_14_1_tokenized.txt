\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as \begin{verbatim} <var:y1> := <var:R> ; <var:y2> := <var:y1> * <var:R> ; <var:y3> := <var:y2> * <var:R> ; <var:y4> := <var:y3> * <var:R> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:7> ; <var:y2> := <var:y2> * <nat:3> ; <var:y3> := <var:y3> * <nat:9> ; <var:y4> := <var:y4> * <nat:7> ; <var:Y> := <var:y4> <var:Y> := <var:Y> + <var:y3> <var:Y> := <var:Y> + <var:y2> <var:Y> := <var:Y> + <var:y1> <var:Y> := <var:Y> + <var:y0> \end{verbatim} Given that $ <var:R> = <var:o> $ prior to running the program , it must be that we see $ <var:Y> = <nat:7> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:9> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:R> = <var:o> \} \\ <var:y1> := <var:R> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <var:o> \} \\ <var:y2> := <var:y1> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <var:o> \land <var:y2> = <var:o> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <var:o> \land <var:y2> = <var:o> ^ <nat:2> \land <var:y3> = <var:o> ^ <nat:3> \} \\ <var:y4> := <var:y3> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <var:o> \land <var:y2> = <var:o> ^ <nat:2> \land <var:y3> = <var:o> ^ <nat:3> \land <var:y4> = <var:o> ^ <nat:4> \} \\ <var:y0> := <nat:9> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <var:o> \land <var:y2> = <var:o> ^ <nat:2> \land <var:y3> = <var:o> ^ <nat:3> \land <var:y4> = <var:o> ^ <nat:4> \land <var:y0> = <nat:9> \} \\ <var:y1> := <var:y1> * <nat:7> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <nat:7> \times <var:o> \land <var:y2> = <var:o> ^ <nat:2> \land <var:y3> = <var:o> ^ <nat:3> \land <var:y4> = <var:o> ^ <nat:4> \land <var:y0> = <nat:9> \} \\ <var:y2> := <var:y2> * <nat:3> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <nat:7> \times <var:o> \land <var:y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:y3> = <var:o> ^ <nat:3> \land <var:y4> = <var:o> ^ <nat:4> \land <var:y0> = <nat:9> \} \\ <var:y3> := <var:y3> * <nat:9> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <nat:7> \times <var:o> \land <var:y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:y3> = <nat:9> \times <var:o> ^ <nat:3> \land <var:y4> = <var:o> ^ <nat:4> \land <var:y0> = <nat:9> \} \\ <var:y4> := <var:y4> * <nat:7> ; \\ \{ <var:R> = <var:o> \land <var:y1> = <nat:7> \times <var:o> \land <var:y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:y3> = <nat:9> \times <var:o> ^ <nat:3> \land <var:y4> = <nat:7> \times <var:o> ^ <nat:4> \land <var:y0> = <nat:9> \} \\ <var:Y> := <var:y4> \\ \{ <var:R> = <var:o> \land <var:y1> = <nat:7> \times <var:o> \land <var:y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:y3> = <nat:9> \times <var:o> ^ <nat:3> \land <var:y0> = <nat:9> \land <var:Y> = <nat:7> \times <var:o> ^ <nat:4> \} \\ <var:Y> := <var:Y> + <var:y3> \\ \{ <var:R> = <var:o> \land <var:y1> = <nat:7> \times <var:o> \land <var:y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:y0> = <nat:9> \land <var:Y> = <nat:7> \times <var:o> ^ <nat:4> + <nat:9> \times <var:o> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:y2> \\ \{ <var:R> = <var:o> \land <var:y1> = <nat:7> \times <var:o> \land <var:y0> = <nat:9> \land <var:Y> = <nat:7> \times <var:o> ^ <nat:4> + <nat:9> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:y1> \\ \{ <var:R> = <var:o> \land <var:y0> = <nat:9> \land <var:Y> = <nat:7> \times <var:o> ^ <nat:4> + <nat:9> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:7> \times <var:o> \} \\ <var:Y> := <var:Y> + <var:y0> \\ \{ <var:R> = <var:o> \land <var:Y> = <nat:7> \times <var:o> ^ <nat:4> + <nat:9> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:7> \times <var:o> + <nat:9> \} \end{eqnarray} Therefore , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <var:y4> : string := " <var:y4> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:R> = <var:o> }} <var:y1> := <var:R> ; <var:y2> := <var:y1> * <var:R> ; <var:y3> := <var:y2> * <var:R> ; <var:y4> := <var:y3> * <var:R> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:7> ; <var:y2> := <var:y2> * <nat:3> ; <var:y3> := <var:y3> * <nat:9> ; <var:y4> := <var:y4> * <nat:7> ; <var:Y> := <var:y4> <var:Y> := <var:Y> + <var:y3> <var:Y> := <var:Y> + <var:y2> <var:Y> := <var:Y> + <var:y1> <var:Y> := <var:Y> + <var:y0> {{ <var:Y> = <nat:7> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <var:o> /\ <var:y2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <var:o> /\ <var:y2> = <var:o> ^ <nat:2> /\ <var:y3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <var:o> /\ <var:y2> = <var:o> ^ <nat:2> /\ <var:y3> = <var:o> ^ <nat:3> /\ <var:y4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <var:o> /\ <var:y2> = <var:o> ^ <nat:2> /\ <var:y3> = <var:o> ^ <nat:3> /\ <var:y4> = <var:o> ^ <nat:4> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <nat:7> * <var:o> /\ <var:y2> = <var:o> ^ <nat:2> /\ <var:y3> = <var:o> ^ <nat:3> /\ <var:y4> = <var:o> ^ <nat:4> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <nat:7> * <var:o> /\ <var:y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:y3> = <var:o> ^ <nat:3> /\ <var:y4> = <var:o> ^ <nat:4> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <nat:7> * <var:o> /\ <var:y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:y3> = <nat:9> * <var:o> ^ <nat:3> /\ <var:y4> = <var:o> ^ <nat:4> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <nat:7> * <var:o> /\ <var:y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:y3> = <nat:9> * <var:o> ^ <nat:3> /\ <var:y4> = <nat:7> * <var:o> ^ <nat:4> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <nat:7> * <var:o> /\ <var:y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:y3> = <nat:9> * <var:o> ^ <nat:3> /\ <var:y0> = <nat:9> /\ <var:Y> = <nat:7> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <nat:7> * <var:o> /\ <var:y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:y0> = <nat:9> /\ <var:Y> = <nat:7> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y1> = <nat:7> * <var:o> /\ <var:y0> = <nat:9> /\ <var:Y> = <nat:7> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:y0> = <nat:9> /\ <var:Y> = <nat:7> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:Y> = <nat:7> * <var:o> ^ <nat:4> + <nat:9> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 