\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:B> := <nat:1> ; <var:B> := <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> ; <var:B> := <nat:4> + <var:B> * <var:Q> ; <var:B> := <nat:2> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> ; <var:B> := <var:B> * <var:Q> ; <var:B> := <nat:4> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> ; <var:B> := <nat:2> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> \end{verbatim} Assume that we have $ <var:Q> = <var:v> $ ahead of the execution of our set of commands , it must be that we have $ <var:B> = <nat:1> \times <var:v> ^ <nat:11> + <nat:3> \times <var:v> ^ <nat:9> + <nat:4> \times <var:v> ^ <nat:8> + <nat:2> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:5> + <nat:4> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is done using standard Hoare techniques . Honing in on the proceeding statements in our list of commands , \begin{eqnarray} \{ <var:Q> = <var:v> \} \, <var:B> := <nat:1> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \} \, <var:B> := <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> + \} \end{eqnarray} This is deduced by the variable binding scheme found in Hoare logic . Looking at the following lines of codeseen in the code , \begin{eqnarray} \{ <var:Q> = <var:v> \} \, <var:B> := <nat:1> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \} \, <var:B> := <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> + \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> + \} \, <var:B> := <nat:3> + <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \} \, <var:B> := <nat:4> + <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> + <nat:4> \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> + <nat:4> \} \, <var:B> := <nat:2> + <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} \, <var:B> := <nat:3> + <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:3> \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:3> \} \, <var:B> := <nat:3> + <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:6> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:3> \} \end{eqnarray} This is given with the variable assignmet scheme given by standard Hoare logic . Taking a look at the subsequent statements in our segment of code , \begin{eqnarray} \{ <var:Q> = <var:v> \} \, <var:B> := <nat:1> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \} \, <var:B> := <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> + \} \\ \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> + \} \, <var:B> := <nat:3> + <var:B> * <var:Q> \, \{ <var:Q> = <var:v> \land <var:B> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:3> \} \end{eqnarray} This is sound through the law obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Q> = <var:v> }} <var:B> := <nat:1> ; <var:B> := <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> ; <var:B> := <nat:4> + <var:B> * <var:Q> ; <var:B> := <nat:2> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> ; <var:B> := <var:B> * <var:Q> ; <var:B> := <nat:4> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> ; <var:B> := <nat:2> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> {{ <var:B> = <nat:1> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:9> + <nat:3> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:10> + <nat:3> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:B> = <nat:1> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 