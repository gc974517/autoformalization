\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:1> ; <var:d> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:j> = <var:e> $ ahead of the evaluation of this set of commands , it follows that we have $ <var:d> = <nat:1> $ when list of commands has terminated . \end{theorem} \begin{proof} Proving correctness for this series of commands can be seen using standard Hoare techniques . Paying attention to the upcoming step in the program , the line assigning $ <nat:1> $ as $ <var:H0>$ . This redefines the precondition $ \{ <var:j> = <var:e> \} $ into $ \{ <var:j> = <var:e> \land <var:H0> = <nat:1> \} $ . This is given through the assignment scheme found in usual Hoare logic . Moving on to the following step in our series of instructions , we see the variable binding code \verb | <var:d> := <var:H0> | . This command moves the condition $ \{ <var:j> = <var:e> \land <var:H0> = <nat:1> \} $ toward the postcondition $ \{ <var:j> = <var:e> \land <var:d> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:1> ; <var:d> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:j> = <var:e> }} <def:poly> {{ <var:d> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:d> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 