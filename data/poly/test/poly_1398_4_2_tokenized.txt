\begin{document} \begin{theorem} Consider the following set of instructions as \begin{verbatim} <var:P> := <nat:1> ; <var:P> := <nat:4> + <var:P> * <var:a> ; <var:P> := <nat:3> + <var:P> * <var:a> ; <var:P> := <nat:1> + <var:P> * <var:a> \end{verbatim} Given $ <var:a> = <var:k> $ ahead of evaluating our series of commands it follows that $ <var:P> = <nat:1> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is given by standard Hoare logic . Paying attention to the upcoming line of code found in the list of instructions , the line \verb | <var:P> := <nat:1> ; | . This redefines the condition $ \{ <var:a> = <var:k> \} $ to the postcondition $ \{ <var:a> = <var:k> \land <var:P> = <nat:1> \} $ . This is given with the assignment inference rule defined by usual Hoare reasoning . Taking a look at the subsequent piece of code seen in our segment of code , the variable update statement \verb | <var:P> := <nat:4> + <var:P> * <var:a> ; | . This moves the condition $ \{ <var:a> = <var:k> \land <var:P> = <nat:1> \} $ to $ \{ <var:a> = <var:k> \land <var:P> = <nat:1> * <var:k> + <nat:4> \} $ . This is given using the assignment scheme given by typical Hoare logic . Jumping to the proceeding line of code found in our program , we have the binding code \verb | <var:P> := <nat:3> + <var:P> * <var:a> ; | . This transfers the condition $ \{ <var:a> = <var:k> \land <var:P> = <nat:1> * <var:k> + <nat:4> \} $ into the condition $ \{ <var:a> = <var:k> \land <var:P> = <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> \} $ . Paying attention to the subsequent bit of code contained in our code segment , we have the assignment code \verb | <var:P> := <nat:1> + <var:P> * <var:a> | . This command forwards the condition $ \{ <var:a> = <var:k> \land <var:P> = <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> \} $ into $ \{ <var:a> = <var:k> \land <var:P> = <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:a> = <var:k> }} <var:P> := <nat:1> ; <var:P> := <nat:4> + <var:P> * <var:a> ; <var:P> := <nat:3> + <var:P> * <var:a> ; <var:P> := <nat:1> + <var:P> * <var:a> {{ <var:P> = <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:P> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:P> = <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:P> = <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:P> = <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 