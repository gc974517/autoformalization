\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:e1> := <var:G> ; <var:e2> := <var:e1> * <var:G> ; <var:e3> := <var:e2> * <var:G> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:9> ; <var:e2> := <var:e2> * <nat:4> ; <var:e3> := <var:e3> * <nat:3> ; <var:k> := <var:e3> <var:k> := <var:k> + <var:e2> <var:k> := <var:k> + <var:e1> <var:k> := <var:k> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> in \emph{Imp} . Allow $ <var:G> = <var:F> $ ahead of executing the list of instructions it must be that we see $ <var:k> = <nat:3> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:5> $ once set of commands has finished . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:G> = <var:F> \} \\ <var:e1> := <var:G> ; \\ \{ <var:G> = <var:F> \land <var:e1> = <var:F> \} \\ <var:e2> := <var:e1> * <var:G> ; \\ \{ <var:G> = <var:F> \land <var:e1> = <var:F> \land <var:e2> = <var:F> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:G> ; \\ \{ <var:G> = <var:F> \land <var:e1> = <var:F> \land <var:e2> = <var:F> ^ <nat:2> \land <var:e3> = <var:F> ^ <nat:3> \} \\ <var:e0> := <nat:5> ; \\ \{ <var:G> = <var:F> \land <var:e1> = <var:F> \land <var:e2> = <var:F> ^ <nat:2> \land <var:e3> = <var:F> ^ <nat:3> \land <var:e0> = <nat:5> \} \\ <var:e1> := <var:e1> * <nat:9> ; \\ \{ <var:G> = <var:F> \land <var:e1> = <nat:9> \cdot <var:F> \land <var:e2> = <var:F> ^ <nat:2> \land <var:e3> = <var:F> ^ <nat:3> \land <var:e0> = <nat:5> \} \\ <var:e2> := <var:e2> * <nat:4> ; \\ \{ <var:G> = <var:F> \land <var:e1> = <nat:9> \cdot <var:F> \land <var:e2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:e3> = <var:F> ^ <nat:3> \land <var:e0> = <nat:5> \} \\ <var:e3> := <var:e3> * <nat:3> ; \\ \{ <var:G> = <var:F> \land <var:e1> = <nat:9> \cdot <var:F> \land <var:e2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:e3> = <nat:3> \cdot <var:F> ^ <nat:3> \land <var:e0> = <nat:5> \} \\ <var:k> := <var:e3> \\ \{ <var:G> = <var:F> \land <var:e1> = <nat:9> \cdot <var:F> \land <var:e2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:e0> = <nat:5> \land <var:k> = <nat:3> \cdot <var:F> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:e2> \\ \{ <var:G> = <var:F> \land <var:e1> = <nat:9> \cdot <var:F> \land <var:e0> = <nat:5> \land <var:k> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:e1> \\ \{ <var:G> = <var:F> \land <var:e0> = <nat:5> \land <var:k> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> \} \\ <var:k> := <var:k> + <var:e0> \\ \{ <var:G> = <var:F> \land <var:k> = <nat:3> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> + <nat:5> \} \end{eqnarray} As a consequence , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:G> ; <var:e2> := <var:e1> * <var:G> ; <var:e3> := <var:e2> * <var:G> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:9> ; <var:e2> := <var:e2> * <nat:4> ; <var:e3> := <var:e3> * <nat:3> ; <var:k> := <var:e3> <var:k> := <var:k> + <var:e2> <var:k> := <var:k> + <var:e1> <var:k> := <var:k> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:G> = <var:F> }} <def:poly> {{ <var:k> = <nat:3> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <var:F> /\ <var:e2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <var:F> /\ <var:e2> = <var:F> ^ <nat:2> /\ <var:e3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <var:F> /\ <var:e2> = <var:F> ^ <nat:2> /\ <var:e3> = <var:F> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <nat:9> * <var:F> /\ <var:e2> = <var:F> ^ <nat:2> /\ <var:e3> = <var:F> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <nat:9> * <var:F> /\ <var:e2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:e3> = <var:F> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <nat:9> * <var:F> /\ <var:e2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:F> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <nat:9> * <var:F> /\ <var:e2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:e0> = <nat:5> /\ <var:k> = <nat:3> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e1> = <nat:9> * <var:F> /\ <var:e0> = <nat:5> /\ <var:k> = <nat:3> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:e0> = <nat:5> /\ <var:k> = <nat:3> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:k> = <nat:3> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 