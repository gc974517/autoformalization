\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:M> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:4> ; <var:A> := <var:O1> <var:A> := <var:A> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:M> = <var:P> $ prior to interpreting our code it must be that we see $ <var:A> = <nat:4> \times <var:P> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:M> = <var:P> \} \\ <var:O1> := <var:M> ; \\ \{ <var:M> = <var:P> \land <var:O1> = <var:P> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:M> = <var:P> \land <var:O1> = <var:P> \land <var:O0> = <nat:2> \} \\ <var:O1> := <var:O1> * <nat:4> ; \\ \{ <var:M> = <var:P> \land <var:O1> = <nat:4> * <var:P> \land <var:O0> = <nat:2> \} \\ <var:A> := <var:O1> \\ \{ <var:M> = <var:P> \land <var:O0> = <nat:2> \land <var:A> = <nat:4> * <var:P> \} \\ <var:A> := <var:A> + <var:O0> \\ \{ <var:M> = <var:P> \land <var:A> = <nat:4> * <var:P> + <nat:2> \} \end{eqnarray} Given the preceding argument , this segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:M> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:4> ; <var:A> := <var:O1> <var:A> := <var:A> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:M> = <var:P> }} <def:poly> {{ <var:A> = <nat:4> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:O1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:O1> = <var:P> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:O1> = <nat:4> * <var:P> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:O0> = <nat:2> /\ <var:A> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:A> = <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 