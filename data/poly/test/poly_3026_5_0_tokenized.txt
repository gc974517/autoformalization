\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:n> ; <var:H> := <var:q1> ; <var:H> := <var:H> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Allow it to hold that $ <var:n> = <var:w> $ , for every positive integers $ <var:w> $ , before executing this list of commands , it must be that $ <var:H> = <nat:2> \cdot <var:w> + <nat:3> $ once set of commands has finished . \end{theorem} \begin{proof} Observe that the following decorated segment of code . \begin{eqnarray} \{ <var:n> = <var:w> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:n> = <var:w> \land <var:q0> = <nat:3> \} \\ <var:q1> := <nat:2> ; \\ \{ <var:n> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:2> \} \\ <var:q1> := <var:q1> * <var:n> ; \\ \{ <var:n> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:2> \times <var:w> \} \\ <var:H> := <var:q1> ; \\ \{ <var:n> = <var:w> \land <var:q0> = <nat:3> \land <var:H> = <nat:2> \times <var:w> \} \\ <var:H> := <var:H> + <var:q0> \\ \{ <var:n> = <var:w> \land <var:H> = <nat:2> \times <var:w> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:3> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:n> ; <var:H> := <var:q1> ; <var:H> := <var:H> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:n> = <var:w> }} <def:poly> {{ <var:H> = <nat:2> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:q0> = <nat:3> /\ <var:H> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:w> /\ <var:H> = <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 