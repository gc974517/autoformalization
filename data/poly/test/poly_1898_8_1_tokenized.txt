\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:p1> := <var:b> ; <var:p2> := <var:p1> * <var:b> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:6> ; <var:p2> := <var:p2> * <nat:9> ; <var:h> := <var:p2> <var:h> := <var:h> + <var:p1> <var:h> := <var:h> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:b> = <var:c> $ for all $ <var:c> \in \mathbb{N} $ ahead of running this code segment , it follows that $ <var:h> = <nat:9> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:5> $ after set of instructions has exited . \end{theorem} \begin{proof} The course of logic for the set of instructions can be given through usual Hoare reasoning . Moving on to the proceeding lines of codein our list of commands , \verb | { <var:b> = <var:c> } <var:p1> := <var:b> { <var:b> = <var:c> \land <var:p1> = <var:c> } | , \verb | { <var:b> = <var:c> \land <var:p1> = <var:c> } <var:p2> := <var:p1> * <var:b> { <var:b> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> } | , \verb | { <var:b> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> } <var:p0> := <nat:5> { <var:b> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p0> = <nat:5> } | and \verb | { <var:b> = <var:c> \land <var:p1> = <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p0> = <nat:5> } <var:p1> := <var:p1> * <nat:6> { <var:b> = <var:c> \land <var:p1> = <nat:6> \times <var:c> \land <var:p2> = <var:c> ^ <nat:2> \land <var:p0> = <nat:5> } | . This is shown with the environment update inference rule defined by Hoare techniques . Honing in on the proceeding bit of code in the program , we see \verb | { <var:b> = <var:c> } <var:p1> := <var:b> { <var:b> = <var:c> \land <var:p1> = <var:c> } | . This is known to be sound by the variable update scheme obtained from usual Hoare logic . Stepping forward , \verb | { <var:b> = <var:c> } <var:p1> := <var:b> { <var:b> = <var:c> \land <var:p1> = <var:c> } | . This is ensured with the variable assignmet rule from usual Hoare techniques . Immediately after , we have \verb | { <var:b> = <var:c> } <var:p1> := <var:b> { <var:b> = <var:c> \land <var:p1> = <var:c> } | . Paying attention to the upcoming line in our series of commands , we see \verb | { <var:b> = <var:c> } <var:p1> := <var:b> { <var:b> = <var:c> \land <var:p1> = <var:c> } | . This is known to be sound with the law given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p1> := <var:b> ; <var:p2> := <var:p1> * <var:b> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:6> ; <var:p2> := <var:p2> * <nat:9> ; <var:h> := <var:p2> <var:h> := <var:h> + <var:p1> <var:h> := <var:h> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:b> = <var:c> }} <def:poly> {{ <var:h> = <nat:9> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:p1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:p1> = <var:c> /\ <var:p2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:p1> = <var:c> /\ <var:p2> = <var:c> ^ <nat:2> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:p1> = <nat:6> * <var:c> /\ <var:p2> = <var:c> ^ <nat:2> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:p1> = <nat:6> * <var:c> /\ <var:p2> = <nat:9> * <var:c> ^ <nat:2> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:p1> = <nat:6> * <var:c> /\ <var:p0> = <nat:5> /\ <var:h> = <nat:9> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:p0> = <nat:5> /\ <var:h> = <nat:9> * <var:c> ^ <nat:2> + <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:h> = <nat:9> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 