\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <nat:2> + <var:d> * <var:J> ; <var:d> := <nat:1> + <var:d> * <var:J> ; <var:d> := <nat:3> + <var:d> * <var:J> ; <var:d> := <var:d> * <var:J> ; <var:d> := <nat:1> + <var:d> * <var:J> ; <var:d> := <nat:3> + <var:d> * <var:J> ; <var:d> := <nat:3> + <var:d> * <var:J> ; <var:d> := <var:d> * <var:J> ; <var:d> := <nat:3> + <var:d> * <var:J> ; <var:d> := <nat:2> + <var:d> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assume ( for natural numbers $ <var:E> $ ) $ <var:J> = <var:E> $ ahead of the execution of this list of instructions , then $ <var:d> = <nat:1> \times <var:E> ^ <nat:10> + <nat:2> \times <var:E> ^ <nat:9> + <nat:1> \times <var:E> ^ <nat:8> + <nat:3> \times <var:E> ^ <nat:7> + <nat:1> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> + <nat:2> $ when list of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of the code is demonstrated through Hoare reasoning . Shifting focus toward the upcoming step found in our program , the variable assignmet command \verb | <var:d> := <nat:1> ; | . This code takes the condition $ \{ <var:J> = <var:E> \} $ as $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> \} $ . This is ensured through the assignment rule found in Hoare techniques . Considering the upcoming command found in our list of commands , we have the environment update command \verb | <var:d> := <nat:2> + <var:d> * <var:J> ; | . This moves the precondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> \} $ as $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> + <nat:2> \} $ . Focusing on the upcoming line of code found in the list of commands , we have the binding statement \verb | <var:d> := <nat:1> + <var:d> * <var:J> ; | . This line advances $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> + <nat:2> \} $ toward the postcondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> \} $ . This is shown to be logically sound using the assignment inference rule of usual Hoare techniques . Advancing to the proceeding step in our series of commands , we see the assignment code binding $ <nat:3> + <var:d> * <var:J> $ toward $ <var:d>$ . This transfers the condition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> \} $ into the condition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> \} $ . This is sound by the assignment law given in usual Hoare logic . Taking another step toward the upcoming piece of code found in our list of instructions , we see the variable update statement \verb | <var:d> := <var:d> * <var:J> ; | . This advances $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> \} $ into the condition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + \} $ . Paying attention to the proceeding line contained in the program , we have the environment update statement giving $ <nat:1> + <var:d> * <var:J> $ to $ <var:d>$ . This transfers the precondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + \} $ into $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> \} $ . This is shown to be logically sound using the assignment law defined in Hoare logic . Honing in on the proceeding step contained in the series of instructions , the environment update statement \verb | <var:d> := <nat:3> + <var:d> * <var:J> ; | . This statement moves the precondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> \} $ as $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> + <nat:3> \} $ . Stepping through , we see the binding line \verb | <var:d> := <nat:3> + <var:d> * <var:J> ; | . This transfers the precondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> + <nat:3> \} $ to the postcondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> \} $ . Observing the next piece of code found in our program , we see the variable binding statement assigning $ <var:d> * <var:J> $ as $ <var:d>$ . This code takes $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + \} $ . This is sound by the assignment scheme obtained from usual Hoare reasoning . Keeping momentum , the environment update command \verb | <var:d> := <nat:3> + <var:d> * <var:J> ; | . This code takes $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + \} $ to the postcondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:9> + <nat:2> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> \} $ . This is guaranteed through the assignment scheme in usual Hoare reasoning . Moving forward to the next step , the environment update command \verb | <var:d> := <nat:2> + <var:d> * <var:J> | . This takes the precondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:9> + <nat:2> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:E> \land <var:d> = <nat:1> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:2> \} $ . This is deduced by the assignment scheme from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:1> ; <var:d> := <nat:2> + <var:d> * <var:J> ; <var:d> := <nat:1> + <var:d> * <var:J> ; <var:d> := <nat:3> + <var:d> * <var:J> ; <var:d> := <var:d> * <var:J> ; <var:d> := <nat:1> + <var:d> * <var:J> ; <var:d> := <nat:3> + <var:d> * <var:J> ; <var:d> := <nat:3> + <var:d> * <var:J> ; <var:d> := <var:d> * <var:J> ; <var:d> := <nat:3> + <var:d> * <var:J> ; <var:d> := <nat:2> + <var:d> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:J> = <var:E> }} <def:poly> {{ <var:d> = <nat:1> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:9> + <nat:2> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:E> /\ <var:d> = <nat:1> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 