\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:M1> := <var:r> ; <var:M2> := <var:M1> * <var:r> ; <var:M0> := <nat:7> ; <var:M2> := <var:M2> * <nat:8> ; <var:G> := <var:M2> <var:G> := <var:G> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:r> = <var:L> $ ahead of the evaluation of the series of commands , it holds that we have $ <var:G> = <nat:8> \cdot <var:L> ^ <nat:2> + <nat:7> $ after program has exited . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be given using this decorated program . \begin{eqnarray} \{ <var:r> = <var:L> \} \\ <var:M1> := <var:r> ; \\ \{ <var:r> = <var:L> \land <var:M1> = <var:L> \} \\ <var:M2> := <var:M1> * <var:r> ; \\ \{ <var:r> = <var:L> \land <var:M1> = <var:L> \land <var:M2> = <var:L> ^ <nat:2> \} \\ <var:M0> := <nat:7> ; \\ \{ <var:r> = <var:L> \land <var:M1> = <var:L> \land <var:M2> = <var:L> ^ <nat:2> \land <var:M0> = <nat:7> \} \\ <var:M2> := <var:M2> * <nat:8> ; \\ \{ <var:r> = <var:L> \land <var:M1> = <var:L> \land <var:M2> = <nat:8> \cdot <var:L> ^ <nat:2> \land <var:M0> = <nat:7> \} \\ <var:G> := <var:M2> \\ \{ <var:r> = <var:L> \land <var:M1> = <var:L> \land <var:M0> = <nat:7> \land <var:G> = <nat:8> \cdot <var:L> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:M0> \\ \{ <var:r> = <var:L> \land <var:G> = <nat:8> \cdot <var:L> ^ <nat:2> + <nat:7> \} \end{eqnarray} Applying typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M1> := <var:r> ; <var:M2> := <var:M1> * <var:r> ; <var:M0> := <nat:7> ; <var:M2> := <var:M2> * <nat:8> ; <var:G> := <var:M2> <var:G> := <var:G> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:r> = <var:L> }} <def:poly> {{ <var:G> = <nat:8> * <var:L> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:M1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:M1> = <var:L> /\ <var:M2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:M1> = <var:L> /\ <var:M2> = <var:L> ^ <nat:2> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:M1> = <var:L> /\ <var:M2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:M1> = <var:L> /\ <var:M0> = <nat:7> /\ <var:G> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:L> /\ <var:G> = <nat:8> * <var:L> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 