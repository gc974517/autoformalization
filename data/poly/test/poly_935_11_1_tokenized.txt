\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:w> ; <var:d2> := <var:d1> * <var:w> ; <var:d3> := <var:d2> * <var:w> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:9> ; <var:d2> := <var:d2> * <nat:3> ; <var:d3> := <var:d3> * <nat:4> ; <var:x> := <var:d3> <var:x> := <var:x> + <var:d2> <var:x> := <var:x> + <var:d1> <var:x> := <var:x> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:w> = <var:n> $ prior to executing this set of commands , it holds that we have $ <var:x> = <nat:4> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:9> \times <var:n> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:n> \} \\ <var:d1> := <var:w> ; \\ \{ <var:w> = <var:n> \land <var:d1> = <var:n> \} \\ <var:d2> := <var:d1> * <var:w> ; \\ \{ <var:w> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:w> ; \\ \{ <var:w> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \} \\ <var:d0> := <nat:7> ; \\ \{ <var:w> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:7> \} \\ <var:d1> := <var:d1> * <nat:9> ; \\ \{ <var:w> = <var:n> \land <var:d1> = <nat:9> * <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:7> \} \\ <var:d2> := <var:d2> * <nat:3> ; \\ \{ <var:w> = <var:n> \land <var:d1> = <nat:9> * <var:n> \land <var:d2> = <nat:3> * <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:7> \} \\ <var:d3> := <var:d3> * <nat:4> ; \\ \{ <var:w> = <var:n> \land <var:d1> = <nat:9> * <var:n> \land <var:d2> = <nat:3> * <var:n> ^ <nat:2> \land <var:d3> = <nat:4> * <var:n> ^ <nat:3> \land <var:d0> = <nat:7> \} \\ <var:x> := <var:d3> \\ \{ <var:w> = <var:n> \land <var:d1> = <nat:9> * <var:n> \land <var:d2> = <nat:3> * <var:n> ^ <nat:2> \land <var:d0> = <nat:7> \land <var:x> = <nat:4> * <var:n> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:d2> \\ \{ <var:w> = <var:n> \land <var:d1> = <nat:9> * <var:n> \land <var:d0> = <nat:7> \land <var:x> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:d1> \\ \{ <var:w> = <var:n> \land <var:d0> = <nat:7> \land <var:x> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:9> * <var:n> \} \\ <var:x> := <var:x> + <var:d0> \\ \{ <var:w> = <var:n> \land <var:x> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:w> ; <var:d2> := <var:d1> * <var:w> ; <var:d3> := <var:d2> * <var:w> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:9> ; <var:d2> := <var:d2> * <nat:3> ; <var:d3> := <var:d3> * <nat:4> ; <var:x> := <var:d3> <var:x> := <var:x> + <var:d2> <var:x> := <var:x> + <var:d1> <var:x> := <var:x> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:w> = <var:n> }} <def:poly> {{ <var:x> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <var:n> /\ <var:d2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <var:n> /\ <var:d2> = <var:n> ^ <nat:2> /\ <var:d3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <var:n> /\ <var:d2> = <var:n> ^ <nat:2> /\ <var:d3> = <var:n> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <nat:9> * <var:n> /\ <var:d2> = <var:n> ^ <nat:2> /\ <var:d3> = <var:n> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <nat:9> * <var:n> /\ <var:d2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:d3> = <var:n> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <nat:9> * <var:n> /\ <var:d2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:d3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <nat:9> * <var:n> /\ <var:d2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:d0> = <nat:7> /\ <var:x> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d1> = <nat:9> * <var:n> /\ <var:d0> = <nat:7> /\ <var:x> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:d0> = <nat:7> /\ <var:x> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:x> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 