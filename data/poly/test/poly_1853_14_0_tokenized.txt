\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:4> ; <var:c1> := <nat:6> ; <var:c1> := <var:c1> * <var:q> ; <var:c2> := <nat:8> ; <var:c2> := <var:c2> * <var:q> ; <var:c2> := <var:c2> * <var:q> ; <var:c3> := <nat:7> ; <var:c3> := <var:c3> * <var:q> ; <var:c3> := <var:c3> * <var:q> ; <var:c3> := <var:c3> * <var:q> ; <var:p> := <var:c3> ; <var:p> := <var:p> + <var:c2> ; <var:p> := <var:p> + <var:c1> ; <var:p> := <var:p> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:q> = <var:L> $ ahead of executing our code segment it follows that we have $ <var:p> = <nat:7> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:4> $ once series of commands has finished executing . \end{theorem} \begin{proof} The method of proof for this segment of code is demonstrated through Hoare reasoning . Moving on to the proceeding line of code in the code segment , we see the line defining $ <nat:4> $ as $ <var:c0>$ . This transfers $ \{ <var:q> = <var:L> \} $ into $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \} $ . Stepping through , the assignment code binding $ <nat:6> $ into $ <var:c1>$ . This transfers the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \} $ toward $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \} $ . This is guaranteed using the assignment rule of Hoare techniques . Paying attention to the next line found in the program , we see the code binding $ <var:c1> * <var:q> $ into $ <var:c1>$ . This line moves $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \} $ to the postcondition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \} $ . Moving forward to the proceeding statement contained in the list of commands , we have the variable binding command defining $ <nat:8> $ into $ <var:c2>$ . This advances the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \} $ into the postcondition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \} $ . Jumping to the subsequent statement in our program , the variable binding code \verb | <var:c2> := <var:c2> * <var:q> ; | . This line moves $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \} $ to the postcondition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> \} $ . This is shown to be logically sound by the assignment scheme given by Hoare reasoning . Observing the following line of code found in the segment of code , we see the statement \verb | <var:c2> := <var:c2> * <var:q> ; | . This line forwards $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> \} $ as the postcondition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \} $ . This is known to be sound through the assignment rule found in standard Hoare logic . Going forward , we see the environment update code \verb | <var:c3> := <nat:7> ; | . This line moves the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \} $ to $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:c3> = <nat:7> \} $ . Focusing on the proceeding step seen in our series of commands , the binding command defining $ <var:c3> * <var:q> $ to $ <var:c3>$ . This redefines the precondition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:c3> = <nat:7> \} $ into $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:c3> = <nat:7> \times <var:L> \} $ . Taking a look at the subsequent bit of code contained in our program , we have the command \verb | <var:c3> := <var:c3> * <var:q> ; | . This advances the precondition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:c3> = <nat:7> \times <var:L> \} $ to $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:c3> = <nat:7> \times <var:L> ^ <nat:2> \} $ . Following , we see the variable update line \verb | <var:c3> := <var:c3> * <var:q> ; | . This takes $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:c3> = <nat:7> \times <var:L> ^ <nat:2> \} $ into the postcondition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:c3> = <nat:7> \times <var:L> ^ <nat:3> \} $ . This is ensured by the assignment inference rule in standard Hoare techniques . Taking another step toward the proceeding command contained in our list of commands , we have the variable assignmet line \verb | <var:p> := <var:c3> ; | . This forwards the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:c3> = <nat:7> \times <var:L> ^ <nat:3> \} $ into the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:p> = <nat:7> \times <var:L> ^ <nat:3> \} $ . This is known to be sound through the assignment inference rule from Hoare reasoning . Moving on to the next step , we see the environment update line letting $ <var:p> + <var:c2> $ to $ <var:p>$ . This advances the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:c2> = <nat:8> \times <var:L> ^ <nat:2> \land <var:p> = <nat:7> \times <var:L> ^ <nat:3> \} $ as $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:p> = <nat:7> \times <var:L> ^ <nat:3> + <nat:8> \times <var:L> ^ <nat:2> \} $ . Jumping to the following piece of code found in the code segment , the environment update code \verb | <var:p> := <var:p> + <var:c1> ; | . This command forwards the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:c1> = <nat:6> \times <var:L> \land <var:p> = <nat:7> \times <var:L> ^ <nat:3> + <nat:8> \times <var:L> ^ <nat:2> \} $ to the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:p> = <nat:7> \times <var:L> ^ <nat:3> + <nat:8> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> \} $ . This is rigorously given by the assignment law of typical Hoare logic . Honing in on the following step seen in our list of instructions , we have the assignment code yielding $ <var:p> + <var:c0$ into $ <var:p>$ . This redefines the condition $ \{ <var:q> = <var:L> \land <var:c0> = <nat:4> \land <var:p> = <nat:7> \times <var:L> ^ <nat:3> + <nat:8> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> \} $ toward $ \{ <var:q> = <var:L> \land <var:p> = <nat:7> \times <var:L> ^ <nat:3> + <nat:8> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c0> := <nat:4> ; <var:c1> := <nat:6> ; <var:c1> := <var:c1> * <var:q> ; <var:c2> := <nat:8> ; <var:c2> := <var:c2> * <var:q> ; <var:c2> := <var:c2> * <var:q> ; <var:c3> := <nat:7> ; <var:c3> := <var:c3> * <var:q> ; <var:c3> := <var:c3> * <var:q> ; <var:c3> := <var:c3> * <var:q> ; <var:p> := <var:c3> ; <var:p> := <var:p> + <var:c2> ; <var:p> := <var:p> + <var:c1> ; <var:p> := <var:p> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:q> = <var:L> }} <def:poly> {{ <var:p> = <nat:7> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:c2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:c2> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:c2> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:c2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:c3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:c2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:c3> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:c2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:c3> = <nat:7> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:c2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:c3> = <nat:7> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:c2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:p> = <nat:7> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:6> * <var:L> /\ <var:p> = <nat:7> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:c0> = <nat:4> /\ <var:p> = <nat:7> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> + <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:p> = <nat:7> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 