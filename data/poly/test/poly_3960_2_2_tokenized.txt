\begin{document} \begin{theorem} Take a set of instructions as follows \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:3> + <var:e> * <var:R> \end{verbatim} Assuming , given all positive numbers $ <var:z> $ , that we have $ <var:R> = <var:z> $ prior to the execution of the code segment , it must be that we have $ <var:e> = <nat:3> \times <var:z> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our series of commands can be seen with typical Hoare logic . Advancing to the subsequent pieces of code found in the program , \verb | { <var:R> = <var:z> } <var:e> := <nat:3> { <var:R> = <var:z> \land <var:e> = <nat:3> } | and \verb | { <var:R> = <var:z> \land <var:e> = <nat:3> } <var:e> := <nat:3> + <var:e> * <var:R{ <var:R> = <var:z> \land <var:e> = <nat:3> \times <var:z> + <nat:3> } | . This is given using the variable assignmet rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:R> = <var:z> }} <var:e> := <nat:3> ; <var:e> := <nat:3> + <var:e> * <var:R> {{ <var:e> = <nat:3> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:z> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:z> /\ <var:e> = <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 