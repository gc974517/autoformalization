\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Assume it to hold that $ <var:W> = <var:v> $ prior to evaluating the set of instructions , it holds that we see $ <var:i> = <nat:2> \cdot <var:v> ^ <nat:6> + <nat:2> \cdot <var:v> ^ <nat:4> + <nat:1> \cdot <var:v> ^ <nat:3> + <nat:1> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:1> $ after code has terminated . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:W> = <var:v> \} \\ <var:i> := <nat:2> ; \\ \{ <var:W> = <var:v> \land <var:i> = <nat:2> \} \\ <var:i> := <var:i> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:i> = <nat:2> \times <var:v> + \} \\ <var:i> := <nat:2> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:i> = <nat:2> \times <var:v> ^ <nat:2> + <nat:2> \} \\ <var:i> := <nat:1> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:i> = <nat:2> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> + <nat:1> \} \\ <var:i> := <nat:1> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:i> = <nat:2> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:1> \} \\ <var:i> := <nat:1> + <var:i> * <var:W> ; \\ \{ <var:W> = <var:v> \land <var:i> = <nat:2> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:1> \} \\ <var:i> := <nat:1> + <var:i> * <var:W> \\ \{ <var:W> = <var:v> \land <var:i> = <nat:2> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:1> \} \end{eqnarray} Thus , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:2> ; <var:i> := <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:W> = <var:v> }} <def:poly> {{ <var:i> = <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:i> = <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:i> = <nat:2> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:i> = <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:i> = <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:i> = <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:i> = <nat:2> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 