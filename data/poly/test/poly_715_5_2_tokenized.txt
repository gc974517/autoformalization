\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:B> ; <var:k> := <var:k> * <var:B> ; <var:k> := <nat:2> + <var:k> * <var:B> ; <var:k> := <nat:1> + <var:k> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Allowing it to hold that $ <var:B> = <var:C> $ before evaluating this series of instructions it follows that $ <var:k> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code can be done using Hoare logic . Moving on to the next step , we have \begin{eqnarray} \{ <var:B> = <var:C> \} \, <var:k> := <nat:3> \, \{ <var:B> = <var:C> \land <var:k> = <nat:3> \} \\ \{ <var:B> = <var:C> \land <var:k> = <nat:3> \} \, <var:k> := <nat:4> + <var:k> * <var:B> \, \{ <var:B> = <var:C> \land <var:k> = <nat:3> * <var:C> + <nat:4> \} \\ \{ <var:B> = <var:C> \land <var:k> = <nat:3> * <var:C> + <nat:4> \} \, <var:k> := <var:k> * <var:B> \, \{ <var:B> = <var:C> \land <var:k> = <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + \} \end{eqnarray} Taking another step toward the next line seen in our set of commands , we see \begin{eqnarray} \{ <var:B> = <var:C> \} \, <var:k> := <nat:3> \, \{ <var:B> = <var:C> \land <var:k> = <nat:3> \} \end{eqnarray} Considering the proceeding bit of code in our code segment , we see \begin{eqnarray} \{ <var:B> = <var:C> \} \, <var:k> := <nat:3> \, \{ <var:B> = <var:C> \land <var:k> = <nat:3> \} \end{eqnarray} This is sound with the variable update inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:B> ; <var:k> := <var:k> * <var:B> ; <var:k> := <nat:2> + <var:k> * <var:B> ; <var:k> := <nat:1> + <var:k> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:B> = <var:C> }} <def:poly> {{ <var:k> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:k> = <nat:3> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:k> = <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:k> = <nat:3> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:k> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:2> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 