\begin{document} \begin{theorem} Take the following series of instructions : \begin{verbatim} <var:I1> := <var:n> ; <var:I2> := <var:I1> * <var:n> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:7> ; <var:I2> := <var:I2> * <nat:5> ; <var:L> := <var:I2> <var:L> := <var:L> + <var:I1> <var:L> := <var:L> + <var:I0> \end{verbatim} Allowing that $ <var:n> = <var:H> $ , letting $ <var:H> \in \mathbb{Z}^+ $ , before running this code it follows that we have $ <var:L> = <nat:5> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for this list of instructions is clear with standard Hoare logic . Now , we have \begin{verbatim} { <var:n> = <var:H> } <var:I1> := <var:n> { <var:n> = <var:H> \land <var:I1> = <var:H> } { <var:n> = <var:H> \land <var:I1> = <var:H> } <var:I2> := <var:I1> * <var:n> { <var:n> = <var:H> \land <var:I1> = <var:H> \land <var:I2> = <var:H> ^ <nat:2> } \end{verbatim} Observing the following steps found in the set of commands , we see \begin{verbatim} { <var:n> = <var:H> } <var:I1> := <var:n> { <var:n> = <var:H> \land <var:I1> = <var:H> } { <var:n> = <var:H> \land <var:I1> = <var:H> } <var:I2> := <var:I1> * <var:n> { <var:n> = <var:H> \land <var:I1> = <var:H> \land <var:I2> = <var:H> ^ <nat:2> } { <var:n> = <var:H> \land <var:I1> = <var:H> \land <var:I2> = <var:H> ^ <nat:2> } <var:I0> := <nat:6> { <var:n> = <var:H> \land <var:I1> = <var:H> \land <var:I2> = <var:H> ^ <nat:2> \land <var:I0> = <nat:6> } { <var:n> = <var:H> \land <var:I1> = <var:H> \land <var:I2> = <var:H> ^ <nat:2> \land <var:I0> = <nat:6> } <var:I1> := <var:I1> * <nat:7> { <var:n> = <var:H> \land <var:I1> = <nat:7> \cdot <var:H> \land <var:I2> = <var:H> ^ <nat:2> \land <var:I0> = <nat:6> } { <var:n> = <var:H> \land <var:I1> = <nat:7> \cdot <var:H> \land <var:I2> = <var:H> ^ <nat:2> \land <var:I0> = <nat:6> } <var:I2> := <var:I2> * <nat:5> { <var:n> = <var:H> \land <var:I1> = <nat:7> \cdot <var:H> \land <var:I2> = <nat:5> \cdot <var:H> ^ <nat:2> \land <var:I0> = <nat:6> } \end{verbatim} Focusing on the subsequent line of code seen in our series of instructions , we have \begin{verbatim} { <var:n> = <var:H> } <var:I1> := <var:n> { <var:n> = <var:H> \land <var:I1> = <var:H> } \end{verbatim} This is deduced using the binding rule given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:n> = <var:H> }} <var:I1> := <var:n> ; <var:I2> := <var:I1> * <var:n> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:7> ; <var:I2> := <var:I2> * <nat:5> ; <var:L> := <var:I2> <var:L> := <var:L> + <var:I1> <var:L> := <var:L> + <var:I0> {{ <var:L> = <nat:5> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:I1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:I1> = <var:H> /\ <var:I2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:I1> = <var:H> /\ <var:I2> = <var:H> ^ <nat:2> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:I1> = <nat:7> * <var:H> /\ <var:I2> = <var:H> ^ <nat:2> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:I1> = <nat:7> * <var:H> /\ <var:I2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:I1> = <nat:7> * <var:H> /\ <var:I0> = <nat:6> /\ <var:L> = <nat:5> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:I0> = <nat:6> /\ <var:L> = <nat:5> * <var:H> ^ <nat:2> + <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:L> = <nat:5> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 