\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:4> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:N> ; <var:d2> := <var:d2> * <var:N> ; <var:q> := <var:d2> ; <var:q> := <var:q> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Given that $ <var:N> = <var:S> $ ahead of running the set of instructions , then we have $ <var:q> = <nat:5> * <var:S> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:N> = <var:S> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:N> = <var:S> \land <var:d0> = <nat:4> \} \\ <var:d2> := <nat:5> ; \\ \{ <var:N> = <var:S> \land <var:d0> = <nat:4> \land <var:d2> = <nat:5> \} \\ <var:d2> := <var:d2> * <var:N> ; \\ \{ <var:N> = <var:S> \land <var:d0> = <nat:4> \land <var:d2> = <nat:5> \times <var:S> \} \\ <var:d2> := <var:d2> * <var:N> ; \\ \{ <var:N> = <var:S> \land <var:d0> = <nat:4> \land <var:d2> = <nat:5> \times <var:S> ^ <nat:2> \} \\ <var:q> := <var:d2> ; \\ \{ <var:N> = <var:S> \land <var:d0> = <nat:4> \land <var:q> = <nat:5> \times <var:S> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:d0> \\ \{ <var:N> = <var:S> \land <var:q> = <nat:5> \times <var:S> ^ <nat:2> + <nat:4> \} \end{eqnarray} Hence , our code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:N> ; <var:d2> := <var:d2> * <var:N> ; <var:q> := <var:d2> ; <var:q> := <var:q> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:N> = <var:S> }} <def:poly> {{ <var:q> = <nat:5> * <var:S> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:S> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:S> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:S> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:5> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:S> /\ <var:d0> = <nat:4> /\ <var:d2> = <nat:5> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:S> /\ <var:d0> = <nat:4> /\ <var:q> = <nat:5> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:S> /\ <var:q> = <nat:5> * <var:S> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 