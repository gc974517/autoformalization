\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J1> := <var:H> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:2> ; <var:b> := <var:J1> <var:b> := <var:b> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Assuming $ <var:H> = <var:C> $ before the evaluation of this list of instructions it must be that we have $ <var:b> = <nat:2> * <var:C> + <nat:3> $ once program exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:C> \} \\ <var:J1> := <var:H> ; \\ \{ <var:H> = <var:C> \land <var:J1> = <var:C> \} \\ <var:J0> := <nat:3> ; \\ \{ <var:H> = <var:C> \land <var:J1> = <var:C> \land <var:J0> = <nat:3> \} \end{eqnarray} Continuing the execution of the code segment returns : \begin{eqnarray} <var:J1> := <var:J1> * <nat:2> ; \\ \{ <var:H> = <var:C> \land <var:J1> = <nat:2> * <var:C> \land <var:J0> = <nat:3> \} \\ <var:b> := <var:J1> \\ \{ <var:H> = <var:C> \land <var:J0> = <nat:3> \land <var:b> = <nat:2> * <var:C> \} \\ <var:b> := <var:b> + <var:J0> \\ \{ <var:H> = <var:C> \land <var:b> = <nat:2> * <var:C> + <nat:3> \} \end{eqnarray} The application of standard Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J1> := <var:H> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:2> ; <var:b> := <var:J1> <var:b> := <var:b> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:H> = <var:C> }} <def:poly> {{ <var:b> = <nat:2> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:J1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:J1> = <var:C> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:J1> = <nat:2> * <var:C> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:J0> = <nat:3> /\ <var:b> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:b> = <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 