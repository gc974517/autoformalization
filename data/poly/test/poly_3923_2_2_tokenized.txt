\begin{document} \begin{theorem} Consider the following list of instructions : \begin{verbatim} <var:R> := <nat:1> ; <var:R> := <nat:1> + <var:R> * <var:h> \end{verbatim} Allowing that $ <var:h> = <var:M> $ ( given every positive integers $ <var:M> $ ) before executing our set of commands it follows that $ <var:R> = <nat:1> \times <var:M> + <nat:1> $ when series of commands terminates . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions can be shown with Hoare logic . Moving on to the next steps contained in our code , we have \verb | { <var:h> = <var:M> } <var:R> := <nat:1> { <var:h> = <var:M> \land <var:R> = <nat:1> } | and \verb | { <var:h> = <var:M> \land <var:R> = <nat:1> } <var:R> := <nat:1> + <var:R> * <var:h{ <var:h> = <var:M> \land <var:R> = <nat:1> * <var:M> + <nat:1> } | . This is deduced using the variable update inference rule obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:h> = <var:M> }} <var:R> := <nat:1> ; <var:R> := <nat:1> + <var:R> * <var:h> {{ <var:R> = <nat:1> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:R> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:M> /\ <var:R> = <nat:1> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 