\begin{document} \begin{theorem} Consider the following set of instructions as \begin{verbatim} <var:D0> := <nat:2> ; <var:B> := <var:D0> \end{verbatim} Assume that we have $ <var:p> = <var:d> $ --- given $ <var:d> \in \mathbb{N} $ --- prior to running our set of instructions it must be that we have $ <var:B> = <nat:2> $ once set of instructions has finished executing . \end{theorem} \begin{proof} The proof of our list of commands is demonstrated using standard Hoare reasoning . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:p> = <var:d> \} & <var:D0> := <nat:2> & \{ <var:p> = <var:d> \land <var:D0> = <nat:2> \} \\ \{ <var:p> = <var:d> \land <var:D0> = <nat:2> \} & <var:B> := <var:D0& \{ <var:p> = <var:d> \land <var:B> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:p> = <var:d> }} <var:D0> := <nat:2> ; <var:B> := <var:D0> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 