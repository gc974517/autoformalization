\begin{document} \begin{theorem} We define the following code in \emph{Imp} as \begin{verbatim} <var:e> := <nat:1> ; <var:e> := <nat:1> + <var:e> * <var:V> ; <var:e> := <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:2> + <var:e> * <var:V> ; <var:e> := <nat:2> + <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:3> + <var:e> * <var:V> ; <var:e> := <nat:3> + <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:1> + <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:2> + <var:e> * <var:V> \end{verbatim} Assume that $ <var:V> = <var:D> $ given any whole numbers $ <var:D> $ prior to executing this list of commands , it holds that $ <var:e> = <nat:1> \cdot <var:D> ^ <nat:13> + <nat:1> \cdot <var:D> ^ <nat:12> + <nat:4> \cdot <var:D> ^ <nat:10> + <nat:2> \cdot <var:D> ^ <nat:9> + <nat:2> \cdot <var:D> ^ <nat:8> + <nat:4> \cdot <var:D> ^ <nat:7> + <nat:4> \cdot <var:D> ^ <nat:6> + <nat:3> \cdot <var:D> ^ <nat:5> + <nat:3> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this code segment can be given by Hoare logic . Going forward , the variable assignmet command \verb | <var:e> := <nat:1> ; | . This code forwards the precondition $ \{ <var:V> = <var:D> \} $ into the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> \} $ . Shifting focus toward the upcoming bit of code seen in our set of instructions , we have the environment update code defining $ <nat:1> + <var:e> * <var:V> $ toward $ <var:e>$ . This takes $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> \} $ into the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> + <nat:1> \} $ . Advancing , we see the assignment line assigning $ <var:e> * <var:V> $ to $ <var:e>$ . This statement moves the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> + <nat:1> \} $ into $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + \} $ . This is shown to be logically sound with the assignment inference rule defined by typical Hoare reasoning . Going to the next step , the variable update command letting $ <nat:4> + <var:e> * <var:V> $ into $ <var:e>$ . This advances the precondition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + \} $ toward the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> \} $ . This is guaranteed with the assignment law of standard Hoare logic . Moving on , we have the code assigning $ <nat:2> + <var:e> * <var:V> $ toward $ <var:e>$ . This advances the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> \} $ as the postcondition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> + <nat:2> \} $ . This is rigorously given by the assignment rule given by Hoare techniques . After , the variable assignmet command \verb | <var:e> := <nat:2> + <var:e> * <var:V> ; | . This line takes $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> + <nat:2> \} $ as $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule in Hoare techniques . Jumping to the subsequent step seen in the set of instructions , the environment update line \verb | <var:e> := <nat:4> + <var:e> * <var:V> ; | . This command takes the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> \} $ to the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:4> \} $ . Keeping momentum , we have the variable binding line \verb | <var:e> := <nat:4> + <var:e> * <var:V> ; | . This code moves $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:4> \} $ to $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> \} $ . This is shown by the assignment inference rule obtained from standard Hoare logic . After , the environment update statement assigning $ <nat:3> + <var:e> * <var:V> $ toward $ <var:e>$ . This moves the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> \} $ into $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> \} $ . This is ensured through the assignment rule of typical Hoare reasoning . Immediately following , we have the variable binding line \verb | <var:e> := <nat:3> + <var:e> * <var:V> ; | . This statement forwards $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> \} $ as the postcondition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:9> + <nat:1> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> \} $ . This is deduced through the assignment rule given in standard Hoare reasoning . Paying attention to the upcoming command contained in the list of instructions , we have the assignment statement \verb | <var:e> := <nat:4> + <var:e> * <var:V> ; | . This advances the precondition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:9> + <nat:1> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> \} $ as the postcondition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:10> + <nat:1> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} $ . Moving on to the proceeding piece of code contained in our series of instructions , the code \verb | <var:e> := <nat:1> + <var:e> * <var:V> ; | . This command moves $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:10> + <nat:1> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} $ into the postcondition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:11> + <nat:1> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> \} $ . This is known to be sound through the assignment rule defined in usual Hoare techniques . Now , the command \verb | <var:e> := <nat:4> + <var:e> * <var:V> ; | . This command forwards the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:11> + <nat:1> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> \} $ to the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:12> + <nat:1> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:9> + <nat:2> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> \} $ . This is ensured through the assignment scheme given in typical Hoare reasoning . Moving on , we see the variable assignmet line defining $ <nat:2> + <var:e> * <var:V$ toward $ <var:e>$ . This code moves $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:12> + <nat:1> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:9> + <nat:2> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> \} $ toward the condition $ \{ <var:V> = <var:D> \land <var:e> = <nat:1> * <var:D> ^ <nat:13> + <nat:1> * <var:D> ^ <nat:12> + <nat:4> * <var:D> ^ <nat:10> + <nat:2> * <var:D> ^ <nat:9> + <nat:2> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:V> = <var:D> }} <var:e> := <nat:1> ; <var:e> := <nat:1> + <var:e> * <var:V> ; <var:e> := <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:2> + <var:e> * <var:V> ; <var:e> := <nat:2> + <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:3> + <var:e> * <var:V> ; <var:e> := <nat:3> + <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:1> + <var:e> * <var:V> ; <var:e> := <nat:4> + <var:e> * <var:V> ; <var:e> := <nat:2> + <var:e> * <var:V> {{ <var:e> = <nat:1> * <var:D> ^ <nat:13> + <nat:1> * <var:D> ^ <nat:12> + <nat:4> * <var:D> ^ <nat:10> + <nat:2> * <var:D> ^ <nat:9> + <nat:2> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:9> + <nat:1> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:10> + <nat:1> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:11> + <nat:1> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:2> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:12> + <nat:1> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:9> + <nat:2> * <var:D> ^ <nat:8> + <nat:2> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:e> = <nat:1> * <var:D> ^ <nat:13> + <nat:1> * <var:D> ^ <nat:12> + <nat:4> * <var:D> ^ <nat:10> + <nat:2> * <var:D> ^ <nat:9> + <nat:2> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 