\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:X> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:7> ; <var:V> := <var:O1> <var:V> := <var:V> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given ( given all integers $ <var:h> $ ) it to be that $ <var:X> = <var:h> $ prior to evaluating the set of instructions , it must be that we have $ <var:V> = <nat:7> \times <var:h> + <nat:2> $ . \end{theorem} \begin{proof} Notice this decorated code segment . \begin{eqnarray} \{ <var:X> = <var:h> \} \\ <var:O1> := <var:X> ; \\ \{ <var:X> = <var:h> \land <var:O1> = <var:h> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:X> = <var:h> \land <var:O1> = <var:h> \land <var:O0> = <nat:2> \} \\ <var:O1> := <var:O1> * <nat:7> ; \\ \{ <var:X> = <var:h> \land <var:O1> = <nat:7> * <var:h> \land <var:O0> = <nat:2> \} \\ <var:V> := <var:O1> \\ \{ <var:X> = <var:h> \land <var:O0> = <nat:2> \land <var:V> = <nat:7> * <var:h> \} \\ <var:V> := <var:V> + <var:O0> \\ \{ <var:X> = <var:h> \land <var:V> = <nat:7> * <var:h> + <nat:2> \} \end{eqnarray} Applying usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:X> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:7> ; <var:V> := <var:O1> <var:V> := <var:V> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:X> = <var:h> }} <def:poly> {{ <var:V> = <nat:7> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:O1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:O1> = <var:h> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:O1> = <nat:7> * <var:h> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:O0> = <nat:2> /\ <var:V> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:V> = <nat:7> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 