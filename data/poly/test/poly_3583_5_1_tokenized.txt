\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:m> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:l> := <var:Z1> <var:l> := <var:l> + <var:Z0> \end{verbatim} Assuming that $ <var:m> = <var:P> $ , given all positive integer coefficients $ <var:P> $ , prior to interpreting the segment of code , then $ <var:l> = <nat:6> \cdot <var:P> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the code can be given by usual Hoare techniques . Keeping momentum , we have the binding line \verb | <var:Z1> := <var:m> ; | . This advances the condition $ \{ <var:m> = <var:P> \} $ as the condition $ \{ <var:m> = <var:P> \land <var:Z1> = <var:P> \} $ . Shifting focus toward the proceeding command seen in our set of commands , we have the variable update statement \verb | <var:Z0> := <nat:3> ; | . This command redefines $ \{ <var:m> = <var:P> \land <var:Z1> = <var:P> \} $ to $ \{ <var:m> = <var:P> \land <var:Z1> = <var:P> \land <var:Z0> = <nat:3> \} $ . This is shown to be logically sound with the assignment law defined by typical Hoare techniques . After , the code \verb | <var:Z1> := <var:Z1> * <nat:6> ; | . This line transfers $ \{ <var:m> = <var:P> \land <var:Z1> = <var:P> \land <var:Z0> = <nat:3> \} $ to $ \{ <var:m> = <var:P> \land <var:Z1> = <nat:6> \times <var:P> \land <var:Z0> = <nat:3> \} $ . Now , we have the variable update line \verb | <var:l> := <var:Z1> | . This command forwards $ \{ <var:m> = <var:P> \land <var:Z1> = <nat:6> \times <var:P> \land <var:Z0> = <nat:3> \} $ to the condition $ \{ <var:m> = <var:P> \land <var:Z0> = <nat:3> \land <var:l> = <nat:6> \times <var:P> \} $ . Immediately after , we have the variable assignmet statement \verb | <var:l> := <var:l> + <var:Z0> | . This forwards the precondition $ \{ <var:m> = <var:P> \land <var:Z0> = <nat:3> \land <var:l> = <nat:6> \times <var:P> \} $ to the postcondition $ \{ <var:m> = <var:P> \land <var:l> = <nat:6> \times <var:P> + <nat:3> \} $ . This is known to be sound using the assignment rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:m> = <var:P> }} <var:Z1> := <var:m> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:l> := <var:Z1> <var:l> := <var:l> + <var:Z0> {{ <var:l> = <nat:6> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Z1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Z1> = <var:P> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Z1> = <nat:6> * <var:P> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Z0> = <nat:3> /\ <var:l> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:l> = <nat:6> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 