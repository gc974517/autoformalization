\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:U> := <nat:1> ; <var:U> := <nat:4> + <var:U> * <var:M> ; <var:U> := <nat:3> + <var:U> * <var:M> \end{verbatim} Assuming that we have $ <var:M> = <var:D> $ before evaluating this code , it holds that we see $ <var:U> = <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:3> $ when segment of code exits . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:M> = <var:D> \} \\ <var:U> := <nat:1> ; \\ \{ <var:M> = <var:D> \land <var:U> = <nat:1> \} \\ <var:U> := <nat:4> + <var:U> * <var:M> ; \\ \{ <var:M> = <var:D> \land <var:U> = <nat:1> \cdot <var:D> + <nat:4> \} \\ <var:U> := <nat:3> + <var:U> * <var:M> \\ \{ <var:M> = <var:D> \land <var:U> = <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:3> \} \end{eqnarray} As a result , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:M> = <var:D> }} <var:U> := <nat:1> ; <var:U> := <nat:4> + <var:U> * <var:M> ; <var:U> := <nat:3> + <var:U> * <var:M> {{ <var:U> = <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:U> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:U> = <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:U> = <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 