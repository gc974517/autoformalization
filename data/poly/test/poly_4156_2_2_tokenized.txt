\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:G> = <var:F> $ for all $ <var:F> \in \mathbb{Z}^+ $ prior to evaluating the list of commands , it holds that we have $ <var:b> = <nat:3> * <var:F> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is done with this decorated code . \begin{eqnarray} \{ <var:G> = <var:F> \} \\ <var:b> := <nat:3> ; \\ \{ <var:G> = <var:F> \land <var:b> = <nat:3> \} \\ <var:b> := <nat:1> + <var:b> * <var:G> \\ \{ <var:G> = <var:F> \land <var:b> = <nat:3> \cdot <var:F> + <nat:1> \} \end{eqnarray} Applying Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:G> = <var:F> }} <def:poly> {{ <var:b> = <nat:3> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:F> /\ <var:b> = <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 