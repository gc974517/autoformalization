\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:2> ; <var:g> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allow that we have $ <var:E> = <var:U> $ before interpreting our code segment it follows that $ <var:g> = <nat:2> $ when series of instructions terminates . \end{theorem} \begin{proof} The proof of this list of commands can be demonstrated using Hoare reasoning . Paying attention to the proceeding piece of code contained in our code segment , we see the variable assignmet command binding $ <nat:2> $ toward $ <var:n0>$ . This moves $ \{ <var:E> = <var:U> \} $ as $ \{ <var:E> = <var:U> \land <var:n0> = <nat:2> \} $ . This is ensured through the assignment law found in typical Hoare techniques . Honing in on the following line in our list of commands , we see the environment update line defining $ <var:n0$ into $ <var:g>$ . This code advances $ \{ <var:E> = <var:U> \land <var:n0> = <nat:2> \} $ as the postcondition $ \{ <var:E> = <var:U> \land <var:g> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:2> ; <var:g> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:E> = <var:U> }} <def:poly> {{ <var:g> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:g> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 