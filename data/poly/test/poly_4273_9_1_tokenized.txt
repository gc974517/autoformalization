\begin{document} \begin{theorem} We define the following list of commands as follows \begin{verbatim} <var:a1> := <var:n> ; <var:a2> := <var:a1> * <var:n> ; <var:a3> := <var:a2> * <var:n> ; <var:a0> := <nat:6> ; <var:a2> := <var:a2> * <nat:9> ; <var:a3> := <var:a3> * <nat:4> ; <var:M> := <var:a3> <var:M> := <var:M> + <var:a2> <var:M> := <var:M> + <var:a0> \end{verbatim} Assume ( for natural coefficients $ <var:r> $ ) $ <var:n> = <var:r> $ prior to the execution of our list of commands then we see $ <var:M> = <nat:4> \times <var:r> ^ <nat:3> + <nat:9> \times <var:r> ^ <nat:2> + <nat:6> $ when code segment finishes . \end{theorem} \begin{proof} The application of Hoare techniques gives us : \begin{eqnarray} \{ <var:n> = <var:r> \} \\ <var:a1> := <var:n> ; \\ \{ <var:n> = <var:r> \land <var:a1> = <var:r> \} \\ <var:a2> := <var:a1> * <var:n> ; \\ \{ <var:n> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:n> ; \\ \{ <var:n> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \} \\ <var:a0> := <nat:6> ; \\ \{ <var:n> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ <var:a2> := <var:a2> * <nat:9> ; \\ \{ <var:n> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <nat:9> \times <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ <var:a3> := <var:a3> * <nat:4> ; \\ \{ <var:n> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <nat:9> \times <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \times <var:r> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ <var:M> := <var:a3> \\ \{ <var:n> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <nat:9> \times <var:r> ^ <nat:2> \land <var:a0> = <nat:6> \land <var:M> = <nat:4> \times <var:r> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:a2> \\ \{ <var:n> = <var:r> \land <var:a1> = <var:r> \land <var:a0> = <nat:6> \land <var:M> = <nat:4> \times <var:r> ^ <nat:3> + <nat:9> \times <var:r> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:a0> \\ \{ <var:n> = <var:r> \land <var:M> = <nat:4> \times <var:r> ^ <nat:3> + <nat:9> \times <var:r> ^ <nat:2> + <nat:6> \} \end{eqnarray} Considering the above , the list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:n> = <var:r> }} <var:a1> := <var:n> ; <var:a2> := <var:a1> * <var:n> ; <var:a3> := <var:a2> * <var:n> ; <var:a0> := <nat:6> ; <var:a2> := <var:a2> * <nat:9> ; <var:a3> := <var:a3> * <nat:4> ; <var:M> := <var:a3> <var:M> := <var:M> + <var:a2> <var:M> := <var:M> + <var:a0> {{ <var:M> = <nat:4> * <var:r> ^ <nat:3> + <nat:9> * <var:r> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:a1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <var:r> ^ <nat:2> /\ <var:a3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <var:r> ^ <nat:2> /\ <var:a3> = <var:r> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <nat:9> * <var:r> ^ <nat:2> /\ <var:a3> = <var:r> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <nat:9> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <nat:9> * <var:r> ^ <nat:2> /\ <var:a0> = <nat:6> /\ <var:M> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:a1> = <var:r> /\ <var:a0> = <nat:6> /\ <var:M> = <nat:4> * <var:r> ^ <nat:3> + <nat:9> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:M> = <nat:4> * <var:r> ^ <nat:3> + <nat:9> * <var:r> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 