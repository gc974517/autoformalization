\begin{document} \begin{theorem} Define the following set of commands such that \begin{verbatim} <var:r1> := <var:b> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:4> ; <var:g> := <var:r1> <var:g> := <var:g> + <var:r0> \end{verbatim} Allow it to hold that $ <var:b> = <var:K> $ ahead of executing the code segment , it must be that we see $ <var:g> = <nat:4> \times <var:K> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is shown using standard Hoare techniques . Advancing to the following lines of codecontained in the segment of code , \begin{verbatim} { <var:b> = <var:K> } <var:r1> := <var:b> { <var:b> = <var:K> \land <var:r1> = <var:K> } { <var:b> = <var:K> \land <var:r1> = <var:K> } <var:r0> := <nat:9> { <var:b> = <var:K> \land <var:r1> = <var:K> \land <var:r0> = <nat:9> } \end{verbatim} Considering the following pieces of code found in the list of commands , \begin{verbatim} { <var:b> = <var:K> } <var:r1> := <var:b> { <var:b> = <var:K> \land <var:r1> = <var:K> } { <var:b> = <var:K> \land <var:r1> = <var:K> } <var:r0> := <nat:9> { <var:b> = <var:K> \land <var:r1> = <var:K> \land <var:r0> = <nat:9> } { <var:b> = <var:K> \land <var:r1> = <var:K> \land <var:r0> = <nat:9> } <var:r1> := <var:r1> * <nat:4> { <var:b> = <var:K> \land <var:r1> = <nat:4> \times <var:K> \land <var:r0> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:b> = <var:K> }} <var:r1> := <var:b> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:4> ; <var:g> := <var:r1> <var:g> := <var:g> + <var:r0> {{ <var:g> = <nat:4> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:r1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:r1> = <var:K> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:r1> = <nat:4> * <var:K> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:r0> = <nat:9> /\ <var:g> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:g> = <nat:4> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 