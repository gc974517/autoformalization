\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:y1> := <var:W> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:7> ; <var:D> := <var:y1> <var:D> := <var:D> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Given ( assuming some $ <var:H> \in \mathbb{N} $ ) that we have $ <var:W> = <var:H> $ before the evaluation of this code it must be that we have $ <var:D> = <nat:7> * <var:H> + <nat:2> $ once list of instructions has executed . \end{theorem} \begin{proof} The argument for our code segment is accomplished using typical Hoare techniques . Moving on to the next step , the variable binding statement \verb | <var:y1> := <var:W> ; | . This code forwards the precondition $ \{ <var:W> = <var:H> \} $ toward the condition $ \{ <var:W> = <var:H> \land <var:y1> = <var:H> \} $ . Immediately following , we see the environment update line \verb | <var:y0> := <nat:2> ; | . This code redefines the precondition $ \{ <var:W> = <var:H> \land <var:y1> = <var:H> \} $ toward $ \{ <var:W> = <var:H> \land <var:y1> = <var:H> \land <var:y0> = <nat:2> \} $ . Moving forward to the next step , we see the variable assignmet command letting $ <var:y1> * <nat:7> $ as $ <var:y1>$ . This transfers the precondition $ \{ <var:W> = <var:H> \land <var:y1> = <var:H> \land <var:y0> = <nat:2> \} $ into the postcondition $ \{ <var:W> = <var:H> \land <var:y1> = <nat:7> * <var:H> \land <var:y0> = <nat:2> \} $ . This is known to be sound by the assignment rule defined in typical Hoare reasoning . Looking at the upcoming statement found in the list of commands , we see the variable assignmet line \verb | <var:D> := <var:y1> | . This command takes $ \{ <var:W> = <var:H> \land <var:y1> = <nat:7> * <var:H> \land <var:y0> = <nat:2> \} $ into the condition $ \{ <var:W> = <var:H> \land <var:y0> = <nat:2> \land <var:D> = <nat:7> * <var:H> \} $ . This is ensured through the assignment scheme given by typical Hoare reasoning . Moving on to the next step , we have the assignment statement defining $ <var:D> + <var:y0$ to $ <var:D>$ . This line transfers the precondition $ \{ <var:W> = <var:H> \land <var:y0> = <nat:2> \land <var:D> = <nat:7> * <var:H> \} $ into the postcondition $ \{ <var:W> = <var:H> \land <var:D> = <nat:7> * <var:H> + <nat:2> \} $ . This is guaranteed with the assignment inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:W> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:7> ; <var:D> := <var:y1> <var:D> := <var:D> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:W> = <var:H> }} <def:poly> {{ <var:D> = <nat:7> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:y1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:y1> = <var:H> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:y1> = <nat:7> * <var:H> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:y0> = <nat:2> /\ <var:D> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:D> = <nat:7> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 