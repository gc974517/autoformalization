\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:6> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:R> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:R> ; <var:I2> := <var:I2> * <var:R> ; <var:P> := <var:I2> ; <var:P> := <var:P> + <var:I1> ; <var:P> := <var:P> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:R> = <var:w> $ before the evaluation of our code , it holds that $ <var:P> = <nat:6> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:6> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:R> = <var:w> \} \\ <var:I0> := <nat:6> ; \\ \{ <var:R> = <var:w> \land <var:I0> = <nat:6> \} \\ <var:I1> := <nat:1> ; \\ \{ <var:R> = <var:w> \land <var:I0> = <nat:6> \land <var:I1> = <nat:1> \} \\ <var:I1> := <var:I1> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:I0> = <nat:6> \land <var:I1> = <nat:1> \times <var:w> \} \\ <var:I2> := <nat:6> ; \\ \{ <var:R> = <var:w> \land <var:I0> = <nat:6> \land <var:I1> = <nat:1> \times <var:w> \land <var:I2> = <nat:6> \} \\ <var:I2> := <var:I2> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:I0> = <nat:6> \land <var:I1> = <nat:1> \times <var:w> \land <var:I2> = <nat:6> \times <var:w> \} \\ <var:I2> := <var:I2> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:I0> = <nat:6> \land <var:I1> = <nat:1> \times <var:w> \land <var:I2> = <nat:6> \times <var:w> ^ <nat:2> \} \\ <var:P> := <var:I2> ; \\ \{ <var:R> = <var:w> \land <var:I0> = <nat:6> \land <var:I1> = <nat:1> \times <var:w> \land <var:P> = <nat:6> \times <var:w> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:I1> ; \\ \{ <var:R> = <var:w> \land <var:I0> = <nat:6> \land <var:P> = <nat:6> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> \} \\ <var:P> := <var:P> + <var:I0> \\ \{ <var:R> = <var:w> \land <var:P> = <nat:6> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:6> \} \end{eqnarray} As a consequence , the code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:6> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:R> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:R> ; <var:I2> := <var:I2> * <var:R> ; <var:P> := <var:I2> ; <var:P> := <var:P> + <var:I1> ; <var:P> := <var:P> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <def:poly> {{ <var:P> = <nat:6> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:1> * <var:w> /\ <var:I2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:1> * <var:w> /\ <var:I2> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:1> * <var:w> /\ <var:I2> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:1> * <var:w> /\ <var:P> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:I0> = <nat:6> /\ <var:P> = <nat:6> * <var:w> ^ <nat:2> + <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:P> = <nat:6> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 