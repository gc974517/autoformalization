\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:6> ; <var:Y> := <var:I0> \end{verbatim} Assume that $ <var:R> = <var:y> $ prior to the evaluation of the series of commands it holds that we have $ <var:Y> = <nat:6> $ once code terminates . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:R> = <var:y> \} \\ <var:I0> := <nat:6> ; \\ \{ <var:R> = <var:y> \land <var:I0> = <nat:6> \} \\ <var:Y> := <var:I0> \\ \{ <var:R> = <var:y> \land <var:Y> = <nat:6> \} \end{eqnarray} Given the above , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:R> = <var:y> }} <var:I0> := <nat:6> ; <var:Y> := <var:I0> {{ <var:Y> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:y> /\ <var:Y> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 