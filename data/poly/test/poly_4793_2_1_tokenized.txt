\begin{document} \begin{theorem} We define a segment of code such that \begin{verbatim} <var:W0> := <nat:3> ; <var:A> := <var:W0> \end{verbatim} Assume it to hold that $ <var:T> = <var:K> $ ahead of the evaluation of our program it holds that we see $ <var:A> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the series of instructions is demonstrated using standard Hoare reasoning . Stepping forward , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:K> \} & <var:W0> := <nat:3> & \{ <var:T> = <var:K> \land <var:W0> = <nat:3> \} \end{tabular} Moving on , \[ \begin{tabular} {rcl} \{ <var:T> = <var:K> \} & <var:W0> := <nat:3> & \{ <var:T> = <var:K> \land <var:W0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:T> = <var:K> }} <var:W0> := <nat:3> ; <var:A> := <var:W0> {{ <var:A> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:A> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 