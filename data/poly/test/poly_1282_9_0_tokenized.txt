\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:5> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:T> ; <var:C2> := <nat:7> ; <var:C2> := <var:C2> * <var:T> ; <var:C2> := <var:C2> * <var:T> ; <var:w> := <var:C2> ; <var:w> := <var:w> + <var:C1> ; <var:w> := <var:w> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Given that $ <var:T> = <var:B> $ before running our code segment it follows that we see $ <var:w> = <nat:7> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:5> $ once series of instructions has executed . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:T> = <var:B> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:T> = <var:B> \land <var:C0> = <nat:5> \} \\ <var:C1> := <nat:3> ; \\ \{ <var:T> = <var:B> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> \} \\ <var:C1> := <var:C1> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> \times <var:B> \} \\ <var:C2> := <nat:7> ; \\ \{ <var:T> = <var:B> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> \times <var:B> \land <var:C2> = <nat:7> \} \\ <var:C2> := <var:C2> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> \times <var:B> \land <var:C2> = <nat:7> \times <var:B> \} \\ <var:C2> := <var:C2> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> \times <var:B> \land <var:C2> = <nat:7> \times <var:B> ^ <nat:2> \} \\ <var:w> := <var:C2> ; \\ \{ <var:T> = <var:B> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> \times <var:B> \land <var:w> = <nat:7> \times <var:B> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:C1> ; \\ \{ <var:T> = <var:B> \land <var:C0> = <nat:5> \land <var:w> = <nat:7> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> \} \\ <var:w> := <var:w> + <var:C0> \\ \{ <var:T> = <var:B> \land <var:w> = <nat:7> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:5> \} \end{eqnarray} Therefore , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C0> := <nat:5> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:T> ; <var:C2> := <nat:7> ; <var:C2> := <var:C2> * <var:T> ; <var:C2> := <var:C2> * <var:T> ; <var:w> := <var:C2> ; <var:w> := <var:w> + <var:C1> ; <var:w> := <var:w> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <def:poly> {{ <var:w> = <nat:7> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:B> /\ <var:C2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:B> /\ <var:C2> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:B> /\ <var:C2> = <nat:7> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:B> /\ <var:w> = <nat:7> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:C0> = <nat:5> /\ <var:w> = <nat:7> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:w> = <nat:7> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 