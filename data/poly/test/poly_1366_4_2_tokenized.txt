\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:a> ; <var:D> := <nat:3> + <var:D> * <var:a> ; <var:D> := <nat:4> + <var:D> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:a> = <var:O> $ prior to executing this code segment , it follows that we see $ <var:D> = <nat:1> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:4> $ once series of instructions is done executing . \end{theorem} \begin{proof} Proving correctness for this set of instructions is shown through Hoare logic . Honing in on the subsequent bit of code seen in the series of instructions , the line yielding $ <nat:1> $ to $ <var:D>$ . This takes $ \{ <var:a> = <var:O> \} $ to $ \{ <var:a> = <var:O> \land <var:D> = <nat:1> \} $ . This is rigorously given using the assignment rule from typical Hoare logic . Further , we have the assignment code yielding $ <nat:2> + <var:D> * <var:a> $ to $ <var:D>$ . This takes $ \{ <var:a> = <var:O> \land <var:D> = <nat:1> \} $ as the condition $ \{ <var:a> = <var:O> \land <var:D> = <nat:1> * <var:O> + <nat:2> \} $ . Shifting focus toward the proceeding statement in our segment of code , we have the variable update statement \verb | <var:D> := <nat:3> + <var:D> * <var:a> ; | . This advances $ \{ <var:a> = <var:O> \land <var:D> = <nat:1> * <var:O> + <nat:2> \} $ into $ \{ <var:a> = <var:O> \land <var:D> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> \} $ . Looking at the following line of code found in the series of instructions , we see the binding line \verb | <var:D> := <nat:4> + <var:D> * <var:a> | . This takes the condition $ \{ <var:a> = <var:O> \land <var:D> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> \} $ as $ \{ <var:a> = <var:O> \land <var:D> = <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:4> \} $ . This is given through the assignment scheme given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:a> ; <var:D> := <nat:3> + <var:D> * <var:a> ; <var:D> := <nat:4> + <var:D> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:a> = <var:O> }} <def:poly> {{ <var:D> = <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:D> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:D> = <nat:1> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:D> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:D> = <nat:1> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 