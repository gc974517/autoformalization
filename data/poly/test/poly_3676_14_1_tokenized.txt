\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:k1> := <var:C> ; <var:k2> := <var:k1> * <var:C> ; <var:k3> := <var:k2> * <var:C> ; <var:k4> := <var:k3> * <var:C> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:5> ; <var:k3> := <var:k3> * <nat:5> ; <var:k4> := <var:k4> * <nat:5> ; <var:U> := <var:k4> <var:U> := <var:U> + <var:k3> <var:U> := <var:U> + <var:k2> <var:U> := <var:U> + <var:k1> <var:U> := <var:U> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:C> = <var:p> $ ahead of evaluating the list of instructions it must be that we have $ <var:U> = <nat:5> \times <var:p> ^ <nat:4> + <nat:5> \times <var:p> ^ <nat:3> + <nat:5> \times <var:p> ^ <nat:2> + <nat:5> \times <var:p> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the code can be shown using standard Hoare reasoning . Now , we see \begin{eqnarray} \{ <var:C> = <var:p> \} \, <var:k1> := <var:C> \, \{ <var:C> = <var:p> \land <var:k1> = <var:p> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <var:p> \} \, <var:k2> := <var:k1> * <var:C> \, \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \} \, <var:k3> := <var:k2> * <var:C> \, \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \} \, <var:k4> := <var:k3> * <var:C> \, \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \} \, <var:k0> := <nat:2> \, \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \, <var:k1> := <var:k1> * <nat:5> \, \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \, <var:k2> := <var:k2> * <nat:5> \, \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \, <var:k3> := <var:k3> * <nat:5> \, \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \, <var:k4> := <var:k4> * <nat:5> \, \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:p> ^ <nat:3> \land <var:k4> = <nat:5> \times <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:p> ^ <nat:3> \land <var:k4> = <nat:5> \times <var:p> ^ <nat:4> \land <var:k0> = <nat:2> \} \, <var:U> := <var:k4\, \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:p> ^ <nat:3> \land <var:k0> = <nat:2> \land <var:U> = <nat:5> \times <var:p> ^ <nat:4> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:5> \times <var:p> ^ <nat:3> \land <var:k0> = <nat:2> \land <var:U> = <nat:5> \times <var:p> ^ <nat:4> \} \, <var:U> := <var:U> + <var:k3\, \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:U> = <nat:5> \times <var:p> ^ <nat:4> + <nat:5> \times <var:p> ^ <nat:3> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k2> = <nat:5> \times <var:p> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:U> = <nat:5> \times <var:p> ^ <nat:4> + <nat:5> \times <var:p> ^ <nat:3> \} \, <var:U> := <var:U> + <var:k2\, \{ <var:C> = <var:p> \land <var:k1> = <nat:5> \times <var:p> \land <var:k0> = <nat:2> \land <var:U> = <nat:5> \times <var:p> ^ <nat:4> + <nat:5> \times <var:p> ^ <nat:3> + <nat:5> \times <var:p> ^ <nat:2> \} \end{eqnarray} Further , we see \begin{eqnarray} \{ <var:C> = <var:p> \} \, <var:k1> := <var:C> \, \{ <var:C> = <var:p> \land <var:k1> = <var:p> \} \\ \{ <var:C> = <var:p> \land <var:k1> = <var:p> \} \, <var:k2> := <var:k1> * <var:C> \, \{ <var:C> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Definition <def:poly> := <var:k1> := <var:C> ; <var:k2> := <var:k1> * <var:C> ; <var:k3> := <var:k2> * <var:C> ; <var:k4> := <var:k3> * <var:C> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:5> ; <var:k3> := <var:k3> * <nat:5> ; <var:k4> := <var:k4> * <nat:5> ; <var:U> := <var:k4> <var:U> := <var:U> + <var:k3> <var:U> := <var:U> + <var:k2> <var:U> := <var:U> + <var:k1> <var:U> := <var:U> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:C> = <var:p> }} <def:poly> {{ <var:U> = <nat:5> * <var:p> ^ <nat:4> + <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <var:p> /\ <var:k2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <var:p> /\ <var:k2> = <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <var:p> /\ <var:k2> = <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <var:p> /\ <var:k2> = <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <nat:5> * <var:p> /\ <var:k2> = <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <nat:5> * <var:p> /\ <var:k2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <nat:5> * <var:p> /\ <var:k2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <nat:5> * <var:p> /\ <var:k2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:p> ^ <nat:3> /\ <var:k4> = <nat:5> * <var:p> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <nat:5> * <var:p> /\ <var:k2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:p> ^ <nat:3> /\ <var:k0> = <nat:2> /\ <var:U> = <nat:5> * <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <nat:5> * <var:p> /\ <var:k2> = <nat:5> * <var:p> ^ <nat:2> /\ <var:k0> = <nat:2> /\ <var:U> = <nat:5> * <var:p> ^ <nat:4> + <nat:5> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k1> = <nat:5> * <var:p> /\ <var:k0> = <nat:2> /\ <var:U> = <nat:5> * <var:p> ^ <nat:4> + <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:k0> = <nat:2> /\ <var:U> = <nat:5> * <var:p> ^ <nat:4> + <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:p> /\ <var:U> = <nat:5> * <var:p> ^ <nat:4> + <nat:5> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 