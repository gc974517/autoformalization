\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:2> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:D> ; <var:y2> := <nat:8> ; <var:y2> := <var:y2> * <var:D> ; <var:y2> := <var:y2> * <var:D> ; <var:K> := <var:y2> ; <var:K> := <var:K> + <var:y1> ; <var:K> := <var:K> + <var:y0> \end{verbatim} Allowing for natural coefficients $ <var:h> $ that $ <var:D> = <var:h> $ before interpreting this series of commands , it must be that we have $ <var:K> = <nat:8> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our code segment can be given by typical Hoare techniques . Paying attention to the upcoming lines of codefound in the code segment , we see \verb | { <var:D> = <var:h> } <var:y0> := <nat:2> { <var:D> = <var:h> \land <var:y0> = <nat:2> } | , \verb | { <var:D> = <var:h> \land <var:y0> = <nat:2> } <var:y1> := <nat:3> { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> } | , \verb | { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> } <var:y1> := <var:y1> * <var:D> { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> } | , \verb | { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> } <var:y2> := <nat:8> { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> \land <var:y2> = <nat:8> } | , \verb | { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> \land <var:y2> = <nat:8> } <var:y2> := <var:y2> * <var:D> { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> \land <var:y2> = <nat:8> \times <var:h> } | , \verb | { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> \land <var:y2> = <nat:8> \times <var:h> } <var:y2> := <var:y2> * <var:D> { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> \land <var:y2> = <nat:8> \times <var:h> ^ <nat:2> } | and \verb | { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> \land <var:y2> = <nat:8> \times <var:h> ^ <nat:2> } <var:K> := <var:y2> { <var:D> = <var:h> \land <var:y0> = <nat:2> \land <var:y1> = <nat:3> \times <var:h> \land <var:K> = <nat:8> \times <var:h> ^ <nat:2> } | . This is known to be sound by the variable update scheme defined by Hoare logic . Looking at the subsequent statement in the list of commands , we have \verb | { <var:D> = <var:h> } <var:y0> := <nat:2> { <var:D> = <var:h> \land <var:y0> = <nat:2> } | . This is shown to be logically sound using the variable assignmet inference rule in typical Hoare reasoning . Moving onward , \verb | { <var:D> = <var:h> } <var:y0> := <nat:2> { <var:D> = <var:h> \land <var:y0> = <nat:2> } | . This is given through the binding inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:D> = <var:h> }} <var:y0> := <nat:2> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:D> ; <var:y2> := <nat:8> ; <var:y2> := <var:y2> * <var:D> ; <var:y2> := <var:y2> * <var:D> ; <var:K> := <var:y2> ; <var:K> := <var:K> + <var:y1> ; <var:K> := <var:K> + <var:y0> {{ <var:K> = <nat:8> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:3> * <var:h> /\ <var:y2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:3> * <var:h> /\ <var:y2> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:3> * <var:h> /\ <var:y2> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:3> * <var:h> /\ <var:K> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:y0> = <nat:2> /\ <var:K> = <nat:8> * <var:h> ^ <nat:2> + <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:K> = <nat:8> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 