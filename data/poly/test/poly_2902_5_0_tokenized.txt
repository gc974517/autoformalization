\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:9> ; <var:h1> := <nat:6> ; <var:h1> := <var:h1> * <var:K> ; <var:r> := <var:h1> ; <var:r> := <var:r> + <var:h0> \end{verbatim} Allow it to hold that $ <var:K> = <var:X> $ for positive integer coefficients $ <var:X> $ prior to evaluating this segment of code then we have $ <var:r> = <nat:6> \cdot <var:X> + <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:K> = <var:X> \} \\ <var:h0> := <nat:9> ; \\ \{ <var:K> = <var:X> \land <var:h0> = <nat:9> \} \\ <var:h1> := <nat:6> ; \\ \{ <var:K> = <var:X> \land <var:h0> = <nat:9> \land <var:h1> = <nat:6> \} \\ <var:h1> := <var:h1> * <var:K> ; \\ \{ <var:K> = <var:X> \land <var:h0> = <nat:9> \land <var:h1> = <nat:6> \times <var:X> \} \\ <var:r> := <var:h1> ; \\ \{ <var:K> = <var:X> \land <var:h0> = <nat:9> \land <var:r> = <nat:6> \times <var:X> \} \\ <var:r> := <var:r> + <var:h0> \\ \{ <var:K> = <var:X> \land <var:r> = <nat:6> \times <var:X> + <nat:9> \} \end{eqnarray} Considering the preceding argument , this list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:K> = <var:X> }} <var:h0> := <nat:9> ; <var:h1> := <nat:6> ; <var:h1> := <var:h1> * <var:K> ; <var:r> := <var:h1> ; <var:r> := <var:r> + <var:h0> {{ <var:r> = <nat:6> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:h0> = <nat:9> /\ <var:h1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:h0> = <nat:9> /\ <var:h1> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:h0> = <nat:9> /\ <var:r> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:r> = <nat:6> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 