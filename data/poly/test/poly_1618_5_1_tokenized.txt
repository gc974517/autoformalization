\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:Z1> := <var:Y> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:O> := <var:Z1> <var:O> := <var:O> + <var:Z0> \end{verbatim} Assuming that we have $ <var:Y> = <var:Q> $ ahead of the execution of our code , it follows that $ <var:O> = <nat:4> \cdot <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands can be done by the following decorated series of instructions . \begin{eqnarray} \{ <var:Y> = <var:Q> \} \\ <var:Z1> := <var:Y> ; \\ \{ <var:Y> = <var:Q> \land <var:Z1> = <var:Q> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:Y> = <var:Q> \land <var:Z1> = <var:Q> \land <var:Z0> = <nat:2> \} \\ <var:Z1> := <var:Z1> * <nat:4> ; \\ \{ <var:Y> = <var:Q> \land <var:Z1> = <nat:4> \cdot <var:Q> \land <var:Z0> = <nat:2> \} \\ <var:O> := <var:Z1> \\ \{ <var:Y> = <var:Q> \land <var:Z0> = <nat:2> \land <var:O> = <nat:4> \cdot <var:Q> \} \\ <var:O> := <var:O> + <var:Z0> \\ \{ <var:Y> = <var:Q> \land <var:O> = <nat:4> \cdot <var:Q> + <nat:2> \} \end{eqnarray} Using usual Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Y> = <var:Q> }} <var:Z1> := <var:Y> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:O> := <var:Z1> <var:O> := <var:O> + <var:Z0> {{ <var:O> = <nat:4> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:Z1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:Z1> = <var:Q> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:Z1> = <nat:4> * <var:Q> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:Z0> = <nat:2> /\ <var:O> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:O> = <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 