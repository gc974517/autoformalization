\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:6> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:g> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:g> ; <var:R2> := <var:R2> * <var:g> ; <var:r> := <var:R2> ; <var:r> := <var:r> + <var:R1> ; <var:r> := <var:r> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Assume that we have $ <var:g> = <var:h> $ ( given any natural numbers $ <var:h> $ ) prior to executing the series of instructions it follows that $ <var:r> = <nat:4> \times <var:h> ^ <nat:2> + <nat:5> \times <var:h> + <nat:6> $ after series of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:h> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:g> = <var:h> \land <var:R0> = <nat:6> \} \\ <var:R1> := <nat:5> ; \\ \{ <var:g> = <var:h> \land <var:R0> = <nat:6> \land <var:R1> = <nat:5> \} \\ <var:R1> := <var:R1> * <var:g> ; \\ \{ <var:g> = <var:h> \land <var:R0> = <nat:6> \land <var:R1> = <nat:5> \times <var:h> \} \\ <var:R2> := <nat:4> ; \\ \{ <var:g> = <var:h> \land <var:R0> = <nat:6> \land <var:R1> = <nat:5> \times <var:h> \land <var:R2> = <nat:4> \} \\ <var:R2> := <var:R2> * <var:g> ; \\ \{ <var:g> = <var:h> \land <var:R0> = <nat:6> \land <var:R1> = <nat:5> \times <var:h> \land <var:R2> = <nat:4> \times <var:h> \} \\ <var:R2> := <var:R2> * <var:g> ; \\ \{ <var:g> = <var:h> \land <var:R0> = <nat:6> \land <var:R1> = <nat:5> \times <var:h> \land <var:R2> = <nat:4> \times <var:h> ^ <nat:2> \} \\ <var:r> := <var:R2> ; \\ \{ <var:g> = <var:h> \land <var:R0> = <nat:6> \land <var:R1> = <nat:5> \times <var:h> \land <var:r> = <nat:4> \times <var:h> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:R1> ; \\ \{ <var:g> = <var:h> \land <var:R0> = <nat:6> \land <var:r> = <nat:4> \times <var:h> ^ <nat:2> + <nat:5> \times <var:h> \} \\ <var:r> := <var:r> + <var:R0> \\ \{ <var:g> = <var:h> \land <var:r> = <nat:4> \times <var:h> ^ <nat:2> + <nat:5> \times <var:h> + <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:g> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:g> ; <var:R2> := <var:R2> * <var:g> ; <var:r> := <var:R2> ; <var:r> := <var:r> + <var:R1> ; <var:r> := <var:r> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:g> = <var:h> }} <def:poly> {{ <var:r> = <nat:4> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:5> * <var:h> /\ <var:R2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:5> * <var:h> /\ <var:R2> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:5> * <var:h> /\ <var:R2> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:5> * <var:h> /\ <var:r> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:R0> = <nat:6> /\ <var:r> = <nat:4> * <var:h> ^ <nat:2> + <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:r> = <nat:4> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 