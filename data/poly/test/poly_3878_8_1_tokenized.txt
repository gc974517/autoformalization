\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:b1> := <var:i> ; <var:b2> := <var:b1> * <var:i> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:1> ; <var:b2> := <var:b2> * <nat:7> ; <var:H> := <var:b2> <var:H> := <var:H> + <var:b1> <var:H> := <var:H> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Allow that $ <var:i> = <var:o> $ before interpreting the set of commands it must be that $ <var:H> = <nat:7> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions is shown using usual Hoare techniques . Next , we have the variable binding command assigning $ <var:i> $ as $ <var:b1>$ . This transfers the precondition $ \{ <var:i> = <var:o> \} $ into the condition $ \{ <var:i> = <var:o> \land <var:b1> = <var:o> \} $ . Paying attention to the proceeding bit of code in the set of commands , the variable update line giving $ <var:b1> * <var:i> $ to $ <var:b2>$ . This takes $ \{ <var:i> = <var:o> \land <var:b1> = <var:o> \} $ toward the condition $ \{ <var:i> = <var:o> \land <var:b1> = <var:o> \land <var:b2> = <var:o> ^ <nat:2> \} $ . This is shown through the assignment inference rule given in standard Hoare logic . Advancing to the next step , the variable binding statement assigning $ <nat:9> $ to $ <var:b0>$ . This statement forwards the precondition $ \{ <var:i> = <var:o> \land <var:b1> = <var:o> \land <var:b2> = <var:o> ^ <nat:2> \} $ to the condition $ \{ <var:i> = <var:o> \land <var:b1> = <var:o> \land <var:b2> = <var:o> ^ <nat:2> \land <var:b0> = <nat:9> \} $ . This is shown to be logically sound through the assignment scheme from Hoare reasoning . Further , the variable assignmet statement yielding $ <var:b1> * <nat:1> $ into $ <var:b1>$ . This line moves $ \{ <var:i> = <var:o> \land <var:b1> = <var:o> \land <var:b2> = <var:o> ^ <nat:2> \land <var:b0> = <nat:9> \} $ toward $ \{ <var:i> = <var:o> \land <var:b1> = <nat:1> \cdot <var:o> \land <var:b2> = <var:o> ^ <nat:2> \land <var:b0> = <nat:9> \} $ . Shifting focus toward the next line of code contained in our list of commands , we see the statement giving $ <var:b2> * <nat:7> $ toward $ <var:b2>$ . This statement advances $ \{ <var:i> = <var:o> \land <var:b1> = <nat:1> \cdot <var:o> \land <var:b2> = <var:o> ^ <nat:2> \land <var:b0> = <nat:9> \} $ as $ \{ <var:i> = <var:o> \land <var:b1> = <nat:1> \cdot <var:o> \land <var:b2> = <nat:7> \cdot <var:o> ^ <nat:2> \land <var:b0> = <nat:9> \} $ . This is ensured using the assignment inference rule of standard Hoare techniques . Now , the binding code \verb | <var:H> := <var:b2> | . This forwards the precondition $ \{ <var:i> = <var:o> \land <var:b1> = <nat:1> \cdot <var:o> \land <var:b2> = <nat:7> \cdot <var:o> ^ <nat:2> \land <var:b0> = <nat:9> \} $ into the condition $ \{ <var:i> = <var:o> \land <var:b1> = <nat:1> \cdot <var:o> \land <var:b0> = <nat:9> \land <var:H> = <nat:7> \cdot <var:o> ^ <nat:2> \} $ . Going forward , we have the environment update statement defining $ <var:H> + <var:b1$ toward $ <var:H>$ . This line transfers $ \{ <var:i> = <var:o> \land <var:b1> = <nat:1> \cdot <var:o> \land <var:b0> = <nat:9> \land <var:H> = <nat:7> \cdot <var:o> ^ <nat:2> \} $ to $ \{ <var:i> = <var:o> \land <var:b0> = <nat:9> \land <var:H> = <nat:7> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> \} $ . This is guaranteed by the assignment scheme in standard Hoare reasoning . Moving onward , we have the variable update code \verb | <var:H> := <var:H> + <var:b0> | . This redefines $ \{ <var:i> = <var:o> \land <var:b0> = <nat:9> \land <var:H> = <nat:7> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> \} $ toward the postcondition $ \{ <var:i> = <var:o> \land <var:H> = <nat:7> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:9> \} $ . This is deduced with the assignment rule found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b1> := <var:i> ; <var:b2> := <var:b1> * <var:i> ; <var:b0> := <nat:9> ; <var:b1> := <var:b1> * <nat:1> ; <var:b2> := <var:b2> * <nat:7> ; <var:H> := <var:b2> <var:H> := <var:H> + <var:b1> <var:H> := <var:H> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:i> = <var:o> }} <def:poly> {{ <var:H> = <nat:7> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:b1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:b1> = <var:o> /\ <var:b2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:b1> = <var:o> /\ <var:b2> = <var:o> ^ <nat:2> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:b1> = <nat:1> * <var:o> /\ <var:b2> = <var:o> ^ <nat:2> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:b1> = <nat:1> * <var:o> /\ <var:b2> = <nat:7> * <var:o> ^ <nat:2> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:b1> = <nat:1> * <var:o> /\ <var:b0> = <nat:9> /\ <var:H> = <nat:7> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:b0> = <nat:9> /\ <var:H> = <nat:7> * <var:o> ^ <nat:2> + <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:H> = <nat:7> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 