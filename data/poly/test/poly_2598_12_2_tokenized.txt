\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <nat:2> + <var:h> * <var:o> ; <var:h> := <nat:2> + <var:h> * <var:o> ; <var:h> := <nat:1> + <var:h> * <var:o> ; <var:h> := <var:h> * <var:o> ; <var:h> := <nat:1> + <var:h> * <var:o> ; <var:h> := <nat:2> + <var:h> * <var:o> ; <var:h> := <nat:1> + <var:h> * <var:o> ; <var:h> := <var:h> * <var:o> ; <var:h> := <nat:1> + <var:h> * <var:o> ; <var:h> := <nat:2> + <var:h> * <var:o> ; <var:h> := <nat:2> + <var:h> * <var:o> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Given it to hold that $ <var:o> = <var:g> $ --- taking $ <var:g> $ --- ahead of the execution of the set of instructions it must be that we see $ <var:h> = <nat:3> \cdot <var:g> ^ <nat:11> + <nat:2> \cdot <var:g> ^ <nat:10> + <nat:2> \cdot <var:g> ^ <nat:9> + <nat:1> \cdot <var:g> ^ <nat:8> + <nat:1> \cdot <var:g> ^ <nat:6> + <nat:2> \cdot <var:g> ^ <nat:5> + <nat:1> \cdot <var:g> ^ <nat:4> + <nat:1> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + <nat:2> $ after list of commands has executed . \end{theorem} \begin{proof} The argument for this series of commands is clear through Hoare reasoning . Moving on to the following statements seen in our code segment , we see \begin{verbatim} { <var:o> = <var:g> } <var:h> := <nat:3> { <var:o> = <var:g> \land <var:h> = <nat:3> } { <var:o> = <var:g> \land <var:h> = <nat:3> } <var:h> := <nat:2> + <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> + <nat:2> } { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> + <nat:2> } <var:h> := <nat:2> + <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:2> } { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:2> } <var:h> := <nat:1> + <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> } { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> } <var:h> := <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + } { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + } <var:h> := <nat:1> + <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:1> } { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:1> } <var:h> := <nat:2> + <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> + <nat:2> } { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> + <nat:2> } <var:h> := <nat:1> + <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:7> + <nat:2> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> } { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:7> + <nat:2> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> } <var:h> := <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:8> + <nat:2> \times <var:g> ^ <nat:7> + <nat:2> \times <var:g> ^ <nat:6> + <nat:1> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + } \end{verbatim} Advancing , we see \begin{verbatim} { <var:o> = <var:g> } <var:h> := <nat:3> { <var:o> = <var:g> \land <var:h> = <nat:3> } { <var:o> = <var:g> \land <var:h> = <nat:3> } <var:h> := <nat:2> + <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> + <nat:2> } { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> + <nat:2> } <var:h> := <nat:2> + <var:h> * <var:o> { <var:o> = <var:g> \land <var:h> = <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:3> ; <var:h> := <nat:2> + <var:h> * <var:o> ; <var:h> := <nat:2> + <var:h> * <var:o> ; <var:h> := <nat:1> + <var:h> * <var:o> ; <var:h> := <var:h> * <var:o> ; <var:h> := <nat:1> + <var:h> * <var:o> ; <var:h> := <nat:2> + <var:h> * <var:o> ; <var:h> := <nat:1> + <var:h> * <var:o> ; <var:h> := <var:h> * <var:o> ; <var:h> := <nat:1> + <var:h> * <var:o> ; <var:h> := <nat:2> + <var:h> * <var:o> ; <var:h> := <nat:2> + <var:h> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:o> = <var:g> }} <def:poly> {{ <var:h> = <nat:3> * <var:g> ^ <nat:11> + <nat:2> * <var:g> ^ <nat:10> + <nat:2> * <var:g> ^ <nat:9> + <nat:1> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:10> + <nat:2> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:h> = <nat:3> * <var:g> ^ <nat:11> + <nat:2> * <var:g> ^ <nat:10> + <nat:2> * <var:g> ^ <nat:9> + <nat:1> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 