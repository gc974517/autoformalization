\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:H> ; <var:I> := <var:X1> ; <var:I> := <var:I> + <var:X0> \end{verbatim} Allow , letting $ <var:U> \in \mathbb{N} $ , that $ <var:H> = <var:U> $ prior to executing this code segment it holds that we see $ <var:I> = <nat:9> \cdot <var:U> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the code segment is evident through typical Hoare logic . Moving on , we see the variable update code \verb | <var:X0> := <nat:3> ; | . This line forwards the precondition $ \{ <var:H> = <var:U> \} $ to the postcondition $ \{ <var:H> = <var:U> \land <var:X0> = <nat:3> \} $ . Next , we see the command \verb | <var:X1> := <nat:9> ; | . This statement redefines the condition $ \{ <var:H> = <var:U> \land <var:X0> = <nat:3> \} $ as the condition $ \{ <var:H> = <var:U> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \} $ . Going to the next step , we see the environment update statement assigning $ <var:X1> * <var:H> $ to $ <var:X1>$ . This command takes the condition $ \{ <var:H> = <var:U> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \} $ as the postcondition $ \{ <var:H> = <var:U> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \cdot <var:U> \} $ . Stepping forward , we have the variable update statement yielding $ <var:X1> $ toward $ <var:I>$ . This line moves the precondition $ \{ <var:H> = <var:U> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \cdot <var:U> \} $ to the postcondition $ \{ <var:H> = <var:U> \land <var:X0> = <nat:3> \land <var:I> = <nat:9> \cdot <var:U> \} $ . Shifting focus toward the next command seen in the program , the environment update statement binding $ <var:I> + <var:X0$ into $ <var:I>$ . This takes the condition $ \{ <var:H> = <var:U> \land <var:X0> = <nat:3> \land <var:I> = <nat:9> \cdot <var:U> \} $ toward $ \{ <var:H> = <var:U> \land <var:I> = <nat:9> \cdot <var:U> + <nat:3> \} $ . This is sound with the assignment rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:H> = <var:U> }} <var:X0> := <nat:3> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:H> ; <var:I> := <var:X1> ; <var:I> := <var:I> + <var:X0> {{ <var:I> = <nat:9> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:X0> = <nat:3> /\ <var:I> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:I> = <nat:9> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 