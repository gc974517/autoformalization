\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:9> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:T> ; <var:q> := <var:L1> ; <var:q> := <var:q> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Allowing --- given some whole numbers $ <var:a> $ --- that $ <var:T> = <var:a> $ prior to interpreting this segment of code , it must be that $ <var:q> = <nat:3> * <var:a> + <nat:9> $ after series of commands has terminated . \end{theorem} \begin{proof} The application of Hoare logic yields : \begin{eqnarray} \{ <var:T> = <var:a> \} \\ <var:L0> := <nat:9> ; \\ \{ <var:T> = <var:a> \land <var:L0> = <nat:9> \} \\ <var:L1> := <nat:3> ; \\ \{ <var:T> = <var:a> \land <var:L0> = <nat:9> \land <var:L1> = <nat:3> \} \\ <var:L1> := <var:L1> * <var:T> ; \\ \{ <var:T> = <var:a> \land <var:L0> = <nat:9> \land <var:L1> = <nat:3> * <var:a> \} \end{eqnarray} Furthering running the list of instructions yields : \begin{eqnarray} <var:q> := <var:L1> ; \\ \{ <var:T> = <var:a> \land <var:L0> = <nat:9> \land <var:q> = <nat:3> * <var:a> \} \\ <var:q> := <var:q> + <var:L0> \\ \{ <var:T> = <var:a> \land <var:q> = <nat:3> * <var:a> + <nat:9> \} \end{eqnarray} Therefore , the set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:9> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:T> ; <var:q> := <var:L1> ; <var:q> := <var:q> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:T> = <var:a> }} <def:poly> {{ <var:q> = <nat:3> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:L0> = <nat:9> /\ <var:q> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:q> = <nat:3> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 