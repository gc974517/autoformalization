\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:4> ; <var:o> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Given --- for positive numbers $ <var:m> $ --- that we have $ <var:Q> = <var:m> $ ahead of evaluating our program , it holds that we have $ <var:o> = <nat:4> $ after program has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:Q> = <var:m> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:Q> = <var:m> \land <var:J0> = <nat:4> \} \\ <var:o> := <var:J0> \\ \{ <var:Q> = <var:m> \land <var:o> = <nat:4> \} \end{eqnarray} As a result , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:o> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Q> = <var:m> }} <def:poly> {{ <var:o> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:m> /\ <var:o> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 