\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:B> ; <var:U2> := <nat:5> ; <var:U2> := <var:U2> * <var:B> ; <var:U2> := <var:U2> * <var:B> ; <var:U3> := <nat:7> ; <var:U3> := <var:U3> * <var:B> ; <var:U3> := <var:U3> * <var:B> ; <var:U3> := <var:U3> * <var:B> ; <var:E> := <var:U3> ; <var:E> := <var:E> + <var:U2> ; <var:E> := <var:E> + <var:U1> ; <var:E> := <var:E> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:B> = <var:x> $ prior to the evaluation of this list of instructions it follows that we see $ <var:E> = <nat:7> \times <var:x> ^ <nat:3> + <nat:5> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions is demonstrated using typical Hoare reasoning . Following , we have the environment update command letting $ <nat:9> $ as $ <var:U0>$ . This code moves $ \{ <var:B> = <var:x> \} $ toward the postcondition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \} $ . Advancing to the next step , we see the line giving $ <nat:4> $ as $ <var:U1>$ . This line advances the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \} $ into the postcondition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \} $ . Going forward , we see the variable binding code binding $ <var:U1> * <var:B> $ to $ <var:U1>$ . This moves the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> \} $ as the postcondition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \} $ . Now , we see the variable update line assigning $ <nat:5> $ toward $ <var:U2>$ . This forwards the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \} $ into the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> \} $ . This is given with the assignment inference rule given by usual Hoare techniques . Moving on to the subsequent line of code in the list of instructions , we see the binding command letting $ <var:U2> * <var:B> $ as $ <var:U2>$ . This code redefines the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> \} $ as the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> \} $ . This is guaranteed using the assignment scheme defined by usual Hoare techniques . Advancing on , we have the environment update command \verb | <var:U2> := <var:U2> * <var:B> ; | . This takes the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> \} $ into the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \} $ . Following , the line \verb | <var:U3> := <nat:7> ; | . This command redefines the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \} $ as the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:U3> = <nat:7> \} $ . Paying attention to the proceeding line of code seen in our list of instructions , the assignment code \verb | <var:U3> := <var:U3> * <var:B> ; | . This takes the precondition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:U3> = <nat:7> \} $ into the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:U3> = <nat:7> * <var:x> \} $ . This is sound through the assignment inference rule defined in Hoare techniques . Paying attention to the subsequent command contained in the list of commands , we have the binding line letting $ <var:U3> * <var:B> $ to $ <var:U3>$ . This transfers $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:U3> = <nat:7> * <var:x> \} $ as the postcondition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:U3> = <nat:7> * <var:x> ^ <nat:2> \} $ . This is deduced with the assignment law given by typical Hoare logic . Focusing on the subsequent piece of code contained in the set of instructions , we see the variable assignmet command binding $ <var:U3> * <var:B> $ as $ <var:U3>$ . This code moves the precondition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:U3> = <nat:7> * <var:x> ^ <nat:2> \} $ toward the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:U3> = <nat:7> * <var:x> ^ <nat:3> \} $ . Moving forward to the upcoming statement seen in our code segment , we have the variable update line binding $ <var:U3> $ to $ <var:E>$ . This takes $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:U3> = <nat:7> * <var:x> ^ <nat:3> \} $ toward the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:E> = <nat:7> * <var:x> ^ <nat:3> \} $ . Jumping to the upcoming step seen in our code , we see the statement \verb | <var:E> := <var:E> + <var:U2> ; | . This statement redefines the precondition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:U2> = <nat:5> * <var:x> ^ <nat:2> \land <var:E> = <nat:7> * <var:x> ^ <nat:3> \} $ into the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> \} $ . This is rigorously given through the assignment scheme in standard Hoare reasoning . Moving on , we see the variable update statement binding $ <var:E> + <var:U1> $ toward $ <var:E>$ . This forwards the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:U1> = <nat:4> * <var:x> \land <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> \} $ to the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> \} $ . This is sound through the assignment inference rule from Hoare reasoning . Looking at the following line of code in our list of commands , the variable update line \verb | <var:E> := <var:E> + <var:U0> | . This statement advances the condition $ \{ <var:B> = <var:x> \land <var:U0> = <nat:9> \land <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> \} $ as $ \{ <var:B> = <var:x> \land <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:B> ; <var:U2> := <nat:5> ; <var:U2> := <var:U2> * <var:B> ; <var:U2> := <var:U2> * <var:B> ; <var:U3> := <nat:7> ; <var:U3> := <var:U3> * <var:B> ; <var:U3> := <var:U3> * <var:B> ; <var:U3> := <var:U3> * <var:B> ; <var:E> := <var:U3> ; <var:E> := <var:E> + <var:U2> ; <var:E> := <var:E> + <var:U1> ; <var:E> := <var:E> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:B> = <var:x> }} <def:poly> {{ <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U2> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U2> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:U3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:E> = <nat:7> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:4> * <var:x> /\ <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:U0> = <nat:9> /\ <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:x> /\ <var:E> = <nat:7> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 