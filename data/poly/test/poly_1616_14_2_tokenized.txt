\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:k> := <nat:4> ; <var:k> := <nat:1> + <var:k> * <var:G> ; <var:k> := <nat:2> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> ; <var:k> := <nat:1> + <var:k> * <var:G> ; <var:k> := <var:k> * <var:G> ; <var:k> := <nat:2> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> ; <var:k> := <nat:1> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> ; <var:k> := <nat:3> + <var:k> * <var:G> ; <var:k> := <nat:2> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> \end{verbatim} Given that $ <var:G> = <var:X> $ ( given any $ <var:X> \in \mathbb{N} $ ) ahead of evaluating this set of commands it must be that we have $ <var:k> = <nat:4> \cdot <var:X> ^ <nat:13> + <nat:1> \cdot <var:X> ^ <nat:12> + <nat:2> \cdot <var:X> ^ <nat:11> + <nat:4> \cdot <var:X> ^ <nat:10> + <nat:1> \cdot <var:X> ^ <nat:9> + <nat:2> \cdot <var:X> ^ <nat:7> + <nat:4> \cdot <var:X> ^ <nat:6> + <nat:1> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:4> $ after segment of code has executed . \end{theorem} \begin{proof} Showing our claim about correctness for the program can be done through typical Hoare reasoning . Immediately following , we see the binding statement binding $ <nat:4> $ into $ <var:k>$ . This transfers the condition $ \{ <var:G> = <var:X> \} $ as the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \} $ . Advancing to the next step , we have the variable binding line \verb | <var:k> := <nat:1> + <var:k> * <var:G> ; | . This moves $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \} $ into the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> + <nat:1> \} $ . This is deduced using the assignment law of standard Hoare logic . Jumping to the next line in our list of commands , we see the statement letting $ <nat:2> + <var:k> * <var:G> $ as $ <var:k>$ . This takes the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> + <nat:1> \} $ to the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:2> \} $ . Following , we have the environment update code \verb | <var:k> := <nat:4> + <var:k> * <var:G> ; | . This code forwards $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:2> \} $ toward the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:4> \} $ . This is known to be sound using the assignment scheme from typical Hoare techniques . Advancing , we have the command \verb | <var:k> := <nat:1> + <var:k> * <var:G> ; | . This transfers $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:4> \} $ into $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:1> \} $ . This is shown through the assignment inference rule given in typical Hoare reasoning . Considering the subsequent command in our program , we see the variable binding code \verb | <var:k> := <var:k> * <var:G> ; | . This moves $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:1> \} $ as $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:2> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + \} $ . This is shown with the assignment scheme obtained from usual Hoare logic . Honing in on the proceeding step seen in our program , we have the variable update command assigning $ <nat:2> + <var:k> * <var:G> $ to $ <var:k>$ . This transfers the precondition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:2> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + \} $ to $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:6> + <nat:1> \cdot <var:X> ^ <nat:5> + <nat:2> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:2> \} $ . This is shown through the assignment scheme in usual Hoare logic . Focusing on the subsequent step in the series of instructions , we see the variable assignmet statement assigning $ <nat:4> + <var:k> * <var:G> $ toward $ <var:k>$ . This transfers $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:6> + <nat:1> \cdot <var:X> ^ <nat:5> + <nat:2> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:2> \} $ as the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:7> + <nat:1> \cdot <var:X> ^ <nat:6> + <nat:2> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> + <nat:4> \} $ . This is rigorously given by the assignment inference rule in typical Hoare reasoning . Keeping momentum , the assignment code giving $ <nat:1> + <var:k> * <var:G> $ into $ <var:k>$ . This command takes $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:7> + <nat:1> \cdot <var:X> ^ <nat:6> + <nat:2> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> + <nat:4> \} $ into the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:8> + <nat:1> \cdot <var:X> ^ <nat:7> + <nat:2> \cdot <var:X> ^ <nat:6> + <nat:4> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:1> \} $ . Moving on to the upcoming line of code in our code segment , the variable update command yielding $ <nat:4> + <var:k> * <var:G> $ into $ <var:k>$ . This line advances $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:8> + <nat:1> \cdot <var:X> ^ <nat:7> + <nat:2> \cdot <var:X> ^ <nat:6> + <nat:4> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:1> \} $ to the postcondition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:9> + <nat:1> \cdot <var:X> ^ <nat:8> + <nat:2> \cdot <var:X> ^ <nat:7> + <nat:4> \cdot <var:X> ^ <nat:6> + <nat:1> \cdot <var:X> ^ <nat:5> + <nat:2> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> \} $ . This is known to be sound using the assignment inference rule of usual Hoare reasoning . Going forward , we see the assignment statement assigning $ <nat:4> + <var:k> * <var:G> $ to $ <var:k>$ . This moves $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:9> + <nat:1> \cdot <var:X> ^ <nat:8> + <nat:2> \cdot <var:X> ^ <nat:7> + <nat:4> \cdot <var:X> ^ <nat:6> + <nat:1> \cdot <var:X> ^ <nat:5> + <nat:2> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> \} $ as the postcondition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:10> + <nat:1> \cdot <var:X> ^ <nat:9> + <nat:2> \cdot <var:X> ^ <nat:8> + <nat:4> \cdot <var:X> ^ <nat:7> + <nat:1> \cdot <var:X> ^ <nat:6> + <nat:2> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:4> \} $ . This is guaranteed with the assignment scheme obtained from standard Hoare reasoning . Taking a look at the upcoming piece of code contained in our set of commands , we have the assignment command \verb | <var:k> := <nat:3> + <var:k> * <var:G> ; | . This code moves the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:10> + <nat:1> \cdot <var:X> ^ <nat:9> + <nat:2> \cdot <var:X> ^ <nat:8> + <nat:4> \cdot <var:X> ^ <nat:7> + <nat:1> \cdot <var:X> ^ <nat:6> + <nat:2> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:4> \} $ to the postcondition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:11> + <nat:1> \cdot <var:X> ^ <nat:10> + <nat:2> \cdot <var:X> ^ <nat:9> + <nat:4> \cdot <var:X> ^ <nat:8> + <nat:1> \cdot <var:X> ^ <nat:7> + <nat:2> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:3> \} $ . This is known to be sound using the assignment law defined by standard Hoare techniques . Moving onward , we see the environment update statement \verb | <var:k> := <nat:2> + <var:k> * <var:G> ; | . This command moves the precondition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:11> + <nat:1> \cdot <var:X> ^ <nat:10> + <nat:2> \cdot <var:X> ^ <nat:9> + <nat:4> \cdot <var:X> ^ <nat:8> + <nat:1> \cdot <var:X> ^ <nat:7> + <nat:2> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:3> \} $ as the condition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:12> + <nat:1> \cdot <var:X> ^ <nat:11> + <nat:2> \cdot <var:X> ^ <nat:10> + <nat:4> \cdot <var:X> ^ <nat:9> + <nat:1> \cdot <var:X> ^ <nat:8> + <nat:2> \cdot <var:X> ^ <nat:6> + <nat:4> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:2> \} $ . Shifting focus toward the subsequent step found in our list of instructions , the variable update code binding $ <nat:4> + <var:k> * <var:G$ as $ <var:k>$ . This forwards the precondition $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:12> + <nat:1> \cdot <var:X> ^ <nat:11> + <nat:2> \cdot <var:X> ^ <nat:10> + <nat:4> \cdot <var:X> ^ <nat:9> + <nat:1> \cdot <var:X> ^ <nat:8> + <nat:2> \cdot <var:X> ^ <nat:6> + <nat:4> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:2> \} $ into $ \{ <var:G> = <var:X> \land <var:k> = <nat:4> \cdot <var:X> ^ <nat:13> + <nat:1> \cdot <var:X> ^ <nat:12> + <nat:2> \cdot <var:X> ^ <nat:11> + <nat:4> \cdot <var:X> ^ <nat:10> + <nat:1> \cdot <var:X> ^ <nat:9> + <nat:2> \cdot <var:X> ^ <nat:7> + <nat:4> \cdot <var:X> ^ <nat:6> + <nat:1> \cdot <var:X> ^ <nat:5> + <nat:4> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:4> \} $ . This is given through the assignment scheme given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:G> = <var:X> }} <var:k> := <nat:4> ; <var:k> := <nat:1> + <var:k> * <var:G> ; <var:k> := <nat:2> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> ; <var:k> := <nat:1> + <var:k> * <var:G> ; <var:k> := <var:k> * <var:G> ; <var:k> := <nat:2> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> ; <var:k> := <nat:1> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> ; <var:k> := <nat:3> + <var:k> * <var:G> ; <var:k> := <nat:2> + <var:k> * <var:G> ; <var:k> := <nat:4> + <var:k> * <var:G> {{ <var:k> = <nat:4> * <var:X> ^ <nat:13> + <nat:1> * <var:X> ^ <nat:12> + <nat:2> * <var:X> ^ <nat:11> + <nat:4> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:2> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:12> + <nat:1> * <var:X> ^ <nat:11> + <nat:2> * <var:X> ^ <nat:10> + <nat:4> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:k> = <nat:4> * <var:X> ^ <nat:13> + <nat:1> * <var:X> ^ <nat:12> + <nat:2> * <var:X> ^ <nat:11> + <nat:4> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 