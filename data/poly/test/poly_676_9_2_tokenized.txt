\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:V> := <nat:2> ; <var:V> := <nat:3> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:1> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:1> + <var:V> * <var:Q> ; <var:V> := <nat:3> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:Q> = <var:N> $ prior to executing this series of instructions , it must be that we see $ <var:V> = <nat:2> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> $ once program is done executing . \end{theorem} \begin{proof} The flow of logic for the segment of code is clear with typical Hoare techniques . Focusing on the upcoming line found in our code segment , we see the statement \verb | <var:V> := <nat:2> ; | . This transfers the precondition $ \{ <var:Q> = <var:N> \} $ toward $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule from standard Hoare reasoning . Advancing , we have the variable assignmet command \verb | <var:V> := <nat:3> + <var:V> * <var:Q> ; | . This forwards $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> \} $ into $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> + <nat:3> \} $ . This is known to be sound by the assignment rule from Hoare logic . Next , we have the environment update command letting $ <nat:4> + <var:V> * <var:Q> $ into $ <var:V>$ . This redefines the condition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> + <nat:3> \} $ toward $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> \} $ . Moving forward to the proceeding piece of code contained in our set of commands , we see the variable assignmet line \verb | <var:V> := <nat:1> + <var:V> * <var:Q> ; | . This advances the precondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> \} $ into the postcondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> \} $ . Advancing , we see the binding line defining $ <nat:4> + <var:V> * <var:Q> $ into $ <var:V>$ . This command takes the precondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> \} $ into the postcondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> \} $ . This is shown by the assignment law found in standard Hoare logic . Looking at the upcoming command found in our set of instructions , we see the variable assignmet statement \verb | <var:V> := <nat:4> + <var:V> * <var:Q> ; | . This line takes the precondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> \} $ as the postcondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:4> \} $ . This is shown to be logically sound through the assignment law given by Hoare logic . Honing in on the upcoming line seen in our list of commands , we have the variable update code yielding $ <nat:1> + <var:V> * <var:Q> $ into $ <var:V>$ . This takes the precondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:4> \} $ as $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> \} $ . This is sound through the assignment inference rule from standard Hoare reasoning . Advancing to the next step , we have the statement yielding $ <nat:3> + <var:V> * <var:Q> $ to $ <var:V>$ . This code moves $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> \} $ toward the postcondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> \} $ . This is ensured through the assignment scheme in Hoare techniques . Moving on to the proceeding line found in the segment of code , we see the command \verb | <var:V> := <nat:4> + <var:V> * <var:Q> | . This command advances the precondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> \} $ into the postcondition $ \{ <var:Q> = <var:N> \land <var:V> = <nat:2> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> \} $ . This is given by the assignment inference rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:2> ; <var:V> := <nat:3> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:1> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> ; <var:V> := <nat:1> + <var:V> * <var:Q> ; <var:V> := <nat:3> + <var:V> * <var:Q> ; <var:V> := <nat:4> + <var:V> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Q> = <var:N> }} <def:poly> {{ <var:V> = <nat:2> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:N> /\ <var:V> = <nat:2> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 