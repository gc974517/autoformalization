\begin{document} \begin{theorem} Consider the following code segment such that \begin{verbatim} <var:x0> := <nat:4> ; <var:i> := <var:x0> \end{verbatim} Allow it to hold that $ <var:Z> = <var:p> $ ( letting positive integers $ <var:p> $ ) prior to interpreting the code segment , it holds that we have $ <var:i> = <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the code can be seen with usual Hoare techniques . Shifting focus toward the upcoming step seen in our code , we see the variable assignmet line \verb | <var:x0> := <nat:4> ; | . This moves the precondition $ \{ <var:Z> = <var:p> \} $ toward the postcondition $ \{ <var:Z> = <var:p> \land <var:x0> = <nat:4> \} $ . This is shown with the assignment law found in typical Hoare techniques . Advancing to the next step , we see the variable update statement \verb | <var:i> := <var:x0> | . This code moves the precondition $ \{ <var:Z> = <var:p> \land <var:x0> = <nat:4> \} $ as the postcondition $ \{ <var:Z> = <var:p> \land <var:i> = <nat:4> \} $ . This is ensured using the assignment scheme given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:Z> = <var:p> }} <var:x0> := <nat:4> ; <var:i> := <var:x0> {{ <var:i> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:i> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 