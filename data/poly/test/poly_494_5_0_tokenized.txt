\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:R> ; <var:v> := <var:e1> ; <var:v> := <var:v> + <var:e0> \end{verbatim} Assume that $ <var:R> = <var:B> $ before the execution of the set of instructions , it follows that $ <var:v> = <nat:5> \times <var:B> + <nat:7> $ once series of instructions is done executing . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives : \begin{eqnarray} \{ <var:R> = <var:B> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:R> = <var:B> \land <var:e0> = <nat:7> \} \end{eqnarray} Advancing executing this list of instructions returns : \begin{eqnarray} <var:e1> := <nat:5> ; \\ \{ <var:R> = <var:B> \land <var:e0> = <nat:7> \land <var:e1> = <nat:5> \} \\ <var:e1> := <var:e1> * <var:R> ; \\ \{ <var:R> = <var:B> \land <var:e0> = <nat:7> \land <var:e1> = <nat:5> \cdot <var:B> \} \\ <var:v> := <var:e1> ; \\ \{ <var:R> = <var:B> \land <var:e0> = <nat:7> \land <var:v> = <nat:5> \cdot <var:B> \} \\ <var:v> := <var:v> + <var:e0> \\ \{ <var:R> = <var:B> \land <var:v> = <nat:5> \cdot <var:B> + <nat:7> \} \end{eqnarray} As a consequence , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:R> = <var:B> }} <var:e0> := <nat:7> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:R> ; <var:v> := <var:e1> ; <var:v> := <var:v> + <var:e0> {{ <var:v> = <nat:5> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:e0> = <nat:7> /\ <var:v> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:v> = <nat:5> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 