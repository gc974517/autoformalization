\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V1> := <var:u> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:3> ; <var:Q> := <var:V1> <var:Q> := <var:Q> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:u> = <var:f> $ ahead of evaluating this set of commands , it must be that $ <var:Q> = <nat:3> \times <var:f> + <nat:2> $ when series of commands has finished . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:u> = <var:f> \} \\ <var:V1> := <var:u> ; \\ \{ <var:u> = <var:f> \land <var:V1> = <var:f> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:u> = <var:f> \land <var:V1> = <var:f> \land <var:V0> = <nat:2> \} \\ <var:V1> := <var:V1> * <nat:3> ; \\ \{ <var:u> = <var:f> \land <var:V1> = <nat:3> \times <var:f> \land <var:V0> = <nat:2> \} \\ <var:Q> := <var:V1> \\ \{ <var:u> = <var:f> \land <var:V0> = <nat:2> \land <var:Q> = <nat:3> \times <var:f> \} \\ <var:Q> := <var:Q> + <var:V0> \\ \{ <var:u> = <var:f> \land <var:Q> = <nat:3> \times <var:f> + <nat:2> \} \end{eqnarray} Hence , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:u> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:3> ; <var:Q> := <var:V1> <var:Q> := <var:Q> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:u> = <var:f> }} <def:poly> {{ <var:Q> = <nat:3> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:V1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:V1> = <var:f> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:V1> = <nat:3> * <var:f> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:V0> = <nat:2> /\ <var:Q> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:f> /\ <var:Q> = <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 