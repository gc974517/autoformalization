\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l1> := <var:E> ; <var:l2> := <var:l1> * <var:E> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:3> ; <var:l2> := <var:l2> * <nat:4> ; <var:V> := <var:l2> <var:V> := <var:V> + <var:l1> <var:V> := <var:V> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Given assuming some $ <var:Y> \in \mathbb{N} $ that $ <var:E> = <var:Y> $ prior to interpreting this code , it follows that we see $ <var:V> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:Y> \} \\ <var:l1> := <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:l1> = <var:Y> \} \\ <var:l2> := <var:l1> * <var:E> ; \\ \{ <var:E> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \} \\ <var:l0> := <nat:2> ; \\ \{ <var:E> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l0> = <nat:2> \} \\ <var:l1> := <var:l1> * <nat:3> ; \\ \{ <var:E> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l0> = <nat:2> \} \\ <var:l2> := <var:l2> * <nat:4> ; \\ \{ <var:E> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <nat:4> \cdot <var:Y> ^ <nat:2> \land <var:l0> = <nat:2> \} \\ <var:V> := <var:l2> \\ \{ <var:E> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l0> = <nat:2> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:l1> \\ \{ <var:E> = <var:Y> \land <var:l0> = <nat:2> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> \} \\ <var:V> := <var:V> + <var:l0> \\ \{ <var:E> = <var:Y> \land <var:V> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l1> := <var:E> ; <var:l2> := <var:l1> * <var:E> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:3> ; <var:l2> := <var:l2> * <nat:4> ; <var:V> := <var:l2> <var:V> := <var:V> + <var:l1> <var:V> := <var:V> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:E> = <var:Y> }} <def:poly> {{ <var:V> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:l1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:l1> = <var:Y> /\ <var:l2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:l1> = <var:Y> /\ <var:l2> = <var:Y> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l2> = <var:Y> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l0> = <nat:2> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:l0> = <nat:2> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:V> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 