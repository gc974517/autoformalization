\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:t0> := <nat:9> ; <var:t1> := <nat:2> ; <var:t1> := <var:t1> * <var:y> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:y> ; <var:t2> := <var:t2> * <var:y> ; <var:k> := <var:t2> ; <var:k> := <var:k> + <var:t1> ; <var:k> := <var:k> + <var:t0> \end{verbatim} Assuming , letting $ <var:S> \in \mathbb{N} $ , that $ <var:y> = <var:S> $ prior to running the series of commands it must be that we have $ <var:k> = <nat:7> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:9> $ after series of instructions finishes . \end{theorem} \begin{proof} The course of logic for this segment of code is accomplished with typical Hoare reasoning . Immediately after , we see the variable binding command letting $ <nat:9> $ into $ <var:t0>$ . This takes $ \{ <var:y> = <var:S> \} $ into the condition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \} $ . Looking at the following step in the list of instructions , we have the assignment line defining $ <nat:2> $ into $ <var:t1>$ . This command redefines the condition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \} $ toward the postcondition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \} $ . This is sound with the assignment law given in standard Hoare techniques . Next , the environment update command \verb | <var:t1> := <var:t1> * <var:y> ; | . This redefines the precondition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \} $ toward $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \} $ . Shifting focus toward the subsequent piece of code contained in our code segment , we see the environment update line \verb | <var:t2> := <nat:7> ; | . This statement redefines the precondition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \} $ into the postcondition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \land <var:t2> = <nat:7> \} $ . Observing the proceeding statement in the list of instructions , the assignment statement \verb | <var:t2> := <var:t2> * <var:y> ; | . This takes $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \land <var:t2> = <nat:7> \} $ to the condition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \land <var:t2> = <nat:7> \times <var:S> \} $ . Jumping to the upcoming step seen in our code , the environment update code \verb | <var:t2> := <var:t2> * <var:y> ; | . This line takes the precondition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \land <var:t2> = <nat:7> \times <var:S> \} $ toward $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \land <var:t2> = <nat:7> \times <var:S> ^ <nat:2> \} $ . This is ensured using the assignment scheme defined in Hoare reasoning . After , we see the variable binding code \verb | <var:k> := <var:t2> ; | . This command moves $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \land <var:t2> = <nat:7> \times <var:S> ^ <nat:2> \} $ as $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \land <var:k> = <nat:7> \times <var:S> ^ <nat:2> \} $ . This is rigorously given with the assignment inference rule given in standard Hoare techniques . Advancing to the next step , we see the environment update line \verb | <var:k> := <var:k> + <var:t1> ; | . This command takes $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:t1> = <nat:2> \times <var:S> \land <var:k> = <nat:7> \times <var:S> ^ <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:k> = <nat:7> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> \} $ . This is shown to be logically sound with the assignment law found in typical Hoare techniques . Moving forward , we see the variable update code \verb | <var:k> := <var:k> + <var:t0> | . This code takes the condition $ \{ <var:y> = <var:S> \land <var:t0> = <nat:9> \land <var:k> = <nat:7> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> \} $ into the postcondition $ \{ <var:y> = <var:S> \land <var:k> = <nat:7> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:9> \} $ . This is shown using the assignment inference rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:y> = <var:S> }} <var:t0> := <nat:9> ; <var:t1> := <nat:2> ; <var:t1> := <var:t1> * <var:y> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:y> ; <var:t2> := <var:t2> * <var:y> ; <var:k> := <var:t2> ; <var:k> := <var:k> + <var:t1> ; <var:k> := <var:k> + <var:t0> {{ <var:k> = <nat:7> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:2> * <var:S> /\ <var:t2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:2> * <var:S> /\ <var:t2> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:2> * <var:S> /\ <var:t2> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:2> * <var:S> /\ <var:k> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:t0> = <nat:9> /\ <var:k> = <nat:7> * <var:S> ^ <nat:2> + <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:k> = <nat:7> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 