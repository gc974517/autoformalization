\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:9> ; <var:o> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Allowing $ <var:e> = <var:U> $ , given some positive integers $ <var:U> $ , before the evaluation of our set of commands , it follows that we see $ <var:o> = <nat:9> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives : \begin{eqnarray} \{ <var:e> = <var:U> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:e> = <var:U> \land <var:T0> = <nat:9> \} \\ <var:o> := <var:T0> \\ \{ <var:e> = <var:U> \land <var:o> = <nat:9> \} \end{eqnarray} Considering the above , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:9> ; <var:o> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:e> = <var:U> }} <def:poly> {{ <var:o> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:U> /\ <var:o> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 