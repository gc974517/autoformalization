\begin{document} \begin{theorem} Take a list of commands as follows \begin{verbatim} <var:L0> := <nat:8> ; <var:A> := <var:L0> \end{verbatim} Assume that we have $ <var:U> = <var:o> $ ahead of executing the list of commands , then we see $ <var:A> = <nat:8> $ after series of instructions finishes . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:U> = <var:o> \} \\ <var:L0> := <nat:8> ; \\ \{ <var:U> = <var:o> \land <var:L0> = <nat:8> \} \\ <var:A> := <var:L0> \\ \{ <var:U> = <var:o> \land <var:A> = <nat:8> \} \end{eqnarray} Allowing running our segment of code produces : \begin{eqnarray} \end{eqnarray} Thus , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:U> = <var:o> }} <var:L0> := <nat:8> ; <var:A> := <var:L0> {{ <var:A> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:A> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 