\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:s> ; <var:F> := <var:G1> ; <var:F> := <var:F> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:s> = <var:K> $ --- assuming some $ <var:K> \in \mathbb{Z}^+ $ --- prior to the evaluation of our set of commands , then we have $ <var:F> = <nat:4> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the set of instructions is demonstrated using standard Hoare reasoning . Focusing on the following pieces of code in our segment of code , \begin{verbatim} { <var:s> = <var:K> } <var:G0> := <nat:3> { <var:s> = <var:K> \land <var:G0> = <nat:3> } { <var:s> = <var:K> \land <var:G0> = <nat:3> } <var:G1> := <nat:4> { <var:s> = <var:K> \land <var:G0> = <nat:3> \land <var:G1> = <nat:4> } { <var:s> = <var:K> \land <var:G0> = <nat:3> \land <var:G1> = <nat:4> } <var:G1> := <var:G1> * <var:s> { <var:s> = <var:K> \land <var:G0> = <nat:3> \land <var:G1> = <nat:4> \times <var:K> } \end{verbatim} Moving forward to the next step , \begin{verbatim} { <var:s> = <var:K> } <var:G0> := <nat:3> { <var:s> = <var:K> \land <var:G0> = <nat:3> } { <var:s> = <var:K> \land <var:G0> = <nat:3> } <var:G1> := <nat:4> { <var:s> = <var:K> \land <var:G0> = <nat:3> \land <var:G1> = <nat:4> } \end{verbatim} This is shown through the variable binding scheme from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:3> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:s> ; <var:F> := <var:G1> ; <var:F> := <var:F> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:s> = <var:K> }} <def:poly> {{ <var:F> = <nat:4> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:G0> = <nat:3> /\ <var:F> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:F> = <nat:4> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 