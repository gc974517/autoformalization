\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:g> ; <var:u2> := <var:u1> * <var:g> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:2> ; <var:u2> := <var:u2> * <nat:3> ; <var:h> := <var:u2> <var:h> := <var:h> + <var:u1> <var:h> := <var:h> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Allow $ <var:g> = <var:O> $ given natural coefficients $ <var:O> $ ahead of interpreting the code segment , it must be that we see $ <var:h> = <nat:3> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code can be given by standard Hoare logic . Moving forward to the next step , the line binding $ <var:g> $ into $ <var:u1>$ . This command redefines the condition $ \{ <var:g> = <var:O> \} $ to the postcondition $ \{ <var:g> = <var:O> \land <var:u1> = <var:O> \} $ . This is shown through the assignment inference rule given in usual Hoare techniques . Advancing to the upcoming bit of code in the set of instructions , we have the assignment line defining $ <var:u1> * <var:g> $ as $ <var:u2>$ . This transfers the condition $ \{ <var:g> = <var:O> \land <var:u1> = <var:O> \} $ into the condition $ \{ <var:g> = <var:O> \land <var:u1> = <var:O> \land <var:u2> = <var:O> ^ <nat:2> \} $ . Taking another step toward the upcoming line seen in our code , we have the variable binding command \verb | <var:u0> := <nat:1> ; | . This code redefines the precondition $ \{ <var:g> = <var:O> \land <var:u1> = <var:O> \land <var:u2> = <var:O> ^ <nat:2> \} $ into $ \{ <var:g> = <var:O> \land <var:u1> = <var:O> \land <var:u2> = <var:O> ^ <nat:2> \land <var:u0> = <nat:1> \} $ . Jumping to the next bit of code in our set of commands , we see the environment update command binding $ <var:u1> * <nat:2> $ as $ <var:u1>$ . This transfers the precondition $ \{ <var:g> = <var:O> \land <var:u1> = <var:O> \land <var:u2> = <var:O> ^ <nat:2> \land <var:u0> = <nat:1> \} $ toward the condition $ \{ <var:g> = <var:O> \land <var:u1> = <nat:2> * <var:O> \land <var:u2> = <var:O> ^ <nat:2> \land <var:u0> = <nat:1> \} $ . Observing the next line seen in the series of instructions , we see the assignment statement assigning $ <var:u2> * <nat:3> $ into $ <var:u2>$ . This transfers $ \{ <var:g> = <var:O> \land <var:u1> = <nat:2> * <var:O> \land <var:u2> = <var:O> ^ <nat:2> \land <var:u0> = <nat:1> \} $ as the postcondition $ \{ <var:g> = <var:O> \land <var:u1> = <nat:2> * <var:O> \land <var:u2> = <nat:3> * <var:O> ^ <nat:2> \land <var:u0> = <nat:1> \} $ . This is ensured by the assignment rule in standard Hoare logic . Moving onward , we have the line giving $ <var:u2$ to $ <var:h>$ . This command takes $ \{ <var:g> = <var:O> \land <var:u1> = <nat:2> * <var:O> \land <var:u2> = <nat:3> * <var:O> ^ <nat:2> \land <var:u0> = <nat:1> \} $ toward the postcondition $ \{ <var:g> = <var:O> \land <var:u1> = <nat:2> * <var:O> \land <var:u0> = <nat:1> \land <var:h> = <nat:3> * <var:O> ^ <nat:2> \} $ . This is given by the assignment inference rule given in typical Hoare reasoning . Going forward , we see the environment update statement assigning $ <var:h> + <var:u1$ to $ <var:h>$ . This statement moves $ \{ <var:g> = <var:O> \land <var:u1> = <nat:2> * <var:O> \land <var:u0> = <nat:1> \land <var:h> = <nat:3> * <var:O> ^ <nat:2> \} $ into the condition $ \{ <var:g> = <var:O> \land <var:u0> = <nat:1> \land <var:h> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> \} $ . Keeping momentum , the variable update command yielding $ <var:h> + <var:u0$ into $ <var:h>$ . This advances the condition $ \{ <var:g> = <var:O> \land <var:u0> = <nat:1> \land <var:h> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> \} $ to the postcondition $ \{ <var:g> = <var:O> \land <var:h> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u1> := <var:g> ; <var:u2> := <var:u1> * <var:g> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:2> ; <var:u2> := <var:u2> * <nat:3> ; <var:h> := <var:u2> <var:h> := <var:h> + <var:u1> <var:h> := <var:h> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:g> = <var:O> }} <def:poly> {{ <var:h> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:u1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:u1> = <var:O> /\ <var:u2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:u1> = <var:O> /\ <var:u2> = <var:O> ^ <nat:2> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:u1> = <nat:2> * <var:O> /\ <var:u2> = <var:O> ^ <nat:2> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:u1> = <nat:2> * <var:O> /\ <var:u2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:u1> = <nat:2> * <var:O> /\ <var:u0> = <nat:1> /\ <var:h> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:u0> = <nat:1> /\ <var:h> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:O> /\ <var:h> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 