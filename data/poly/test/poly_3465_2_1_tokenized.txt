\begin{document} \begin{theorem} Let the following segment of code as \begin{verbatim} <var:R0> := <nat:4> ; <var:C> := <var:R0> \end{verbatim} Assuming it to hold that $ <var:E> = <var:O> $ assuming some $ <var:O> \in \mathbb{N} $ prior to evaluating the series of commands , then we see $ <var:C> = <nat:4> $ once series of commands finishes . \end{theorem} \begin{proof} The argument for our code segment is clear using usual Hoare reasoning . Moving onward , the environment update command defining $ <nat:4> $ as $ <var:R0>$ . This statement takes $ \{ <var:E> = <var:O> \} $ into the condition $ \{ <var:E> = <var:O> \land <var:R0> = <nat:4> \} $ . This is ensured with the assignment scheme from usual Hoare logic . Considering the proceeding line of code contained in the list of commands , we see the variable assignmet line giving $ <var:R0$ as $ <var:C>$ . This advances the precondition $ \{ <var:E> = <var:O> \land <var:R0> = <nat:4> \} $ as the condition $ \{ <var:E> = <var:O> \land <var:C> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:E> = <var:O> }} <var:R0> := <nat:4> ; <var:C> := <var:R0> {{ <var:C> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:C> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 