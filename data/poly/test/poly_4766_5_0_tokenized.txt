\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:y> ; <var:X> := <var:q1> ; <var:X> := <var:X> + <var:q0> \end{verbatim} Assume it to be that $ <var:y> = <var:p> $ ahead of executing our set of instructions , it follows that we see $ <var:X> = <nat:3> \cdot <var:p> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the program can be accomplished by typical Hoare reasoning . Now , we have the variable update statement \verb | <var:q0> := <nat:3> ; | . This code redefines the precondition $ \{ <var:y> = <var:p> \} $ toward $ \{ <var:y> = <var:p> \land <var:q0> = <nat:3> \} $ . Immediately after , we see the binding command \verb | <var:q1> := <nat:3> ; | . This forwards $ \{ <var:y> = <var:p> \land <var:q0> = <nat:3> \} $ toward the postcondition $ \{ <var:y> = <var:p> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \} $ . This is ensured through the assignment law given by typical Hoare reasoning . Moving forward to the next command in the list of commands , we see the binding statement defining $ <var:q1> * <var:y> $ into $ <var:q1>$ . This advances the precondition $ \{ <var:y> = <var:p> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \} $ into the condition $ \{ <var:y> = <var:p> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \cdot <var:p> \} $ . Moving forward to the next statement contained in the series of instructions , the binding line binding $ <var:q1> $ as $ <var:X>$ . This statement advances the precondition $ \{ <var:y> = <var:p> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \cdot <var:p> \} $ toward $ \{ <var:y> = <var:p> \land <var:q0> = <nat:3> \land <var:X> = <nat:3> \cdot <var:p> \} $ . This is shown with the assignment rule from typical Hoare logic . Advancing on , we have the variable binding code assigning $ <var:X> + <var:q0$ into $ <var:X>$ . This moves the condition $ \{ <var:y> = <var:p> \land <var:q0> = <nat:3> \land <var:X> = <nat:3> \cdot <var:p> \} $ into the condition $ \{ <var:y> = <var:p> \land <var:X> = <nat:3> \cdot <var:p> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:y> = <var:p> }} <var:q0> := <nat:3> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:y> ; <var:X> := <var:q1> ; <var:X> := <var:X> + <var:q0> {{ <var:X> = <nat:3> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:q0> = <nat:3> /\ <var:X> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:X> = <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 