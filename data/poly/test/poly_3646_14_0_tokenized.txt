\begin{document} \begin{theorem} We define a code in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:6> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:w> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:w> ; <var:s2> := <var:s2> * <var:w> ; <var:s3> := <nat:8> ; <var:s3> := <var:s3> * <var:w> ; <var:s3> := <var:s3> * <var:w> ; <var:s3> := <var:s3> * <var:w> ; <var:V> := <var:s3> ; <var:V> := <var:V> + <var:s2> ; <var:V> := <var:V> + <var:s1> ; <var:V> := <var:V> + <var:s0> \end{verbatim} Assume it to be that $ <var:w> = <var:S> $ prior to the execution of our set of commands , it holds that we see $ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:w> = <var:S> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \} \\ <var:s1> := <nat:4> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \} \\ <var:s1> := <var:s1> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \} \\ <var:s2> := <nat:7> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:s2> = <nat:7> \} \\ <var:s2> := <var:s2> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:s2> = <nat:7> \times <var:S> \} \\ <var:s2> := <var:s2> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:s2> = <nat:7> \times <var:S> ^ <nat:2> \} \\ <var:s3> := <nat:8> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:s2> = <nat:7> \times <var:S> ^ <nat:2> \land <var:s3> = <nat:8> \} \\ <var:s3> := <var:s3> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:s2> = <nat:7> \times <var:S> ^ <nat:2> \land <var:s3> = <nat:8> \times <var:S> \} \\ <var:s3> := <var:s3> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:s2> = <nat:7> \times <var:S> ^ <nat:2> \land <var:s3> = <nat:8> \times <var:S> ^ <nat:2> \} \\ <var:s3> := <var:s3> * <var:w> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:s2> = <nat:7> \times <var:S> ^ <nat:2> \land <var:s3> = <nat:8> \times <var:S> ^ <nat:3> \} \\ <var:V> := <var:s3> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:s2> = <nat:7> \times <var:S> ^ <nat:2> \land <var:V> = <nat:8> \times <var:S> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:s2> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \times <var:S> \land <var:V> = <nat:8> \times <var:S> ^ <nat:3> + <nat:7> \times <var:S> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:s1> ; \\ \{ <var:w> = <var:S> \land <var:s0> = <nat:6> \land <var:V> = <nat:8> \times <var:S> ^ <nat:3> + <nat:7> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> \} \\ <var:V> := <var:V> + <var:s0> \\ \{ <var:w> = <var:S> \land <var:V> = <nat:8> \times <var:S> ^ <nat:3> + <nat:7> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:6> \} \end{eqnarray} Thus , our code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:w> = <var:S> }} <var:s0> := <nat:6> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:w> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:w> ; <var:s2> := <var:s2> * <var:w> ; <var:s3> := <nat:8> ; <var:s3> := <var:s3> * <var:w> ; <var:s3> := <var:s3> * <var:w> ; <var:s3> := <var:s3> * <var:w> ; <var:V> := <var:s3> ; <var:V> := <var:V> + <var:s2> ; <var:V> := <var:V> + <var:s1> ; <var:V> := <var:V> + <var:s0> {{ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:s2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:s2> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:s2> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:s2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:s3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:s2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:s3> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:s2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:s3> = <nat:8> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:s2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:s3> = <nat:8> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:s2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:V> = <nat:8> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:S> /\ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:s0> = <nat:6> /\ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:S> /\ <var:V> = <nat:8> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 