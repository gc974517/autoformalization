\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:c1> := <var:F> ; <var:c2> := <var:c1> * <var:F> ; <var:c3> := <var:c2> * <var:F> ; <var:c4> := <var:c3> * <var:F> ; <var:c0> := <nat:4> ; <var:c2> := <var:c2> * <nat:3> ; <var:c4> := <var:c4> * <nat:2> ; <var:t> := <var:c4> <var:t> := <var:t> + <var:c2> <var:t> := <var:t> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Assuming that $ <var:F> = <var:P> $ before the execution of our series of instructions , it must be that $ <var:t> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is given by Hoare logic . Taking a look at the following steps found in our program , we see \verb | { <var:F> = <var:P> } <var:c1> := <var:F> { <var:F> = <var:P> \land <var:c1> = <var:P> } | , \verb | { <var:F> = <var:P> \land <var:c1> = <var:P> } <var:c2> := <var:c1> * <var:F> { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <var:P> ^ <nat:2> } | , \verb | { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <var:P> ^ <nat:2> } <var:c3> := <var:c2> * <var:F> { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> } | , \verb | { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> } <var:c4> := <var:c3> * <var:F> { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c4> = <var:P> ^ <nat:4> } | , \verb | { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c4> = <var:P> ^ <nat:4> } <var:c0> := <nat:4> { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c4> = <var:P> ^ <nat:4> \land <var:c0> = <nat:4> } | , \verb | { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c4> = <var:P> ^ <nat:4> \land <var:c0> = <nat:4> } <var:c2> := <var:c2> * <nat:3> { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <nat:3> * <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c4> = <var:P> ^ <nat:4> \land <var:c0> = <nat:4> } | , \verb | { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <nat:3> * <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c4> = <var:P> ^ <nat:4> \land <var:c0> = <nat:4> } <var:c4> := <var:c4> * <nat:2> { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <nat:3> * <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c4> = <nat:2> * <var:P> ^ <nat:4> \land <var:c0> = <nat:4> } | , \verb | { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <nat:3> * <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c4> = <nat:2> * <var:P> ^ <nat:4> \land <var:c0> = <nat:4> } <var:t> := <var:c4{ <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <nat:3> * <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c0> = <nat:4> \land <var:t> = <nat:2> * <var:P> ^ <nat:4> } | and \verb | { <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c2> = <nat:3> * <var:P> ^ <nat:2> \land <var:c3> = <var:P> ^ <nat:3> \land <var:c0> = <nat:4> \land <var:t> = <nat:2> * <var:P> ^ <nat:4> } <var:t> := <var:t> + <var:c2{ <var:F> = <var:P> \land <var:c1> = <var:P> \land <var:c0> = <nat:4> \land <var:t> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> } | . This is rigorously given by the variable assignmet rule defined by standard Hoare techniques . Focusing on the upcoming piece of code found in the code , \verb | { <var:F> = <var:P> } <var:c1> := <var:F> { <var:F> = <var:P> \land <var:c1> = <var:P> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <var:c4> : string := " <var:c4> " . Definition <def:poly> := <var:c1> := <var:F> ; <var:c2> := <var:c1> * <var:F> ; <var:c3> := <var:c2> * <var:F> ; <var:c4> := <var:c3> * <var:F> ; <var:c0> := <nat:4> ; <var:c2> := <var:c2> * <nat:3> ; <var:c4> := <var:c4> * <nat:2> ; <var:t> := <var:c4> <var:t> := <var:t> + <var:c2> <var:t> := <var:t> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:F> = <var:P> }} <def:poly> {{ <var:t> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> /\ <var:c2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> /\ <var:c2> = <var:P> ^ <nat:2> /\ <var:c3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> /\ <var:c2> = <var:P> ^ <nat:2> /\ <var:c3> = <var:P> ^ <nat:3> /\ <var:c4> = <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> /\ <var:c2> = <var:P> ^ <nat:2> /\ <var:c3> = <var:P> ^ <nat:3> /\ <var:c4> = <var:P> ^ <nat:4> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> /\ <var:c2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:c3> = <var:P> ^ <nat:3> /\ <var:c4> = <var:P> ^ <nat:4> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> /\ <var:c2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:c3> = <var:P> ^ <nat:3> /\ <var:c4> = <nat:2> * <var:P> ^ <nat:4> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> /\ <var:c2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:c3> = <var:P> ^ <nat:3> /\ <var:c0> = <nat:4> /\ <var:t> = <nat:2> * <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:c1> = <var:P> /\ <var:c0> = <nat:4> /\ <var:t> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:t> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 