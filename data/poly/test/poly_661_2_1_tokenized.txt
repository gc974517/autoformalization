\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:1> ; <var:M> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:Y> = <var:m> $ ( for $ <var:m> \in \mathbb{Z}^+ $ ) prior to evaluating this set of commands then we see $ <var:M> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is accomplished using usual Hoare reasoning . Going forward , the variable assignmet line \verb | <var:N0> := <nat:1> ; | . This moves $ \{ <var:Y> = <var:m> \} $ as $ \{ <var:Y> = <var:m> \land <var:N0> = <nat:1> \} $ . This is guaranteed by the assignment inference rule found in typical Hoare reasoning . Paying attention to the following piece of code contained in our code segment , we have the code defining $ <var:N0$ as $ <var:M>$ . This command forwards the precondition $ \{ <var:Y> = <var:m> \land <var:N0> = <nat:1> \} $ toward the postcondition $ \{ <var:Y> = <var:m> \land <var:M> = <nat:1> \} $ . This is shown with the assignment law found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:1> ; <var:M> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Y> = <var:m> }} <def:poly> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 