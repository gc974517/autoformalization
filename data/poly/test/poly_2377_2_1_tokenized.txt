\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:8> ; <var:r> := <var:u0> \end{verbatim} Assuming it to hold that $ <var:R> = <var:W> $ prior to interpreting the series of instructions it must be that we see $ <var:r> = <nat:8> $ after list of instructions terminates . \end{theorem} \begin{proof} The proof of this series of commands can be done through standard Hoare logic . Advancing on , we have the assignment code giving $ <nat:8> $ toward $ <var:u0>$ . This advances the precondition $ \{ <var:R> = <var:W> \} $ as the postcondition $ \{ <var:R> = <var:W> \land <var:u0> = <nat:8> \} $ . Going forward , we have the binding code binding $ <var:u0$ to $ <var:r>$ . This statement redefines the condition $ \{ <var:R> = <var:W> \land <var:u0> = <nat:8> \} $ into $ \{ <var:R> = <var:W> \land <var:r> = <nat:8> \} $ . This is ensured through the assignment scheme given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:R> = <var:W> }} <var:u0> := <nat:8> ; <var:r> := <var:u0> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 