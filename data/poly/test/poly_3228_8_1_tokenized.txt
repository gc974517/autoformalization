\begin{document} \begin{theorem} We define a segment of code as follows \begin{verbatim} <var:u1> := <var:S> ; <var:u2> := <var:u1> * <var:S> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:8> ; <var:u2> := <var:u2> * <nat:8> ; <var:W> := <var:u2> <var:W> := <var:W> + <var:u1> <var:W> := <var:W> + <var:u0> \end{verbatim} Allow it to be that $ <var:S> = <var:d> $ prior to interpreting our set of commands , it holds that we have $ <var:W> = <nat:8> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:2> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for the list of instructions can be shown using Hoare reasoning . Advancing on , we have \begin{verbatim} { <var:S> = <var:d> } <var:u1> := <var:S> { <var:S> = <var:d> \land <var:u1> = <var:d> } { <var:S> = <var:d> \land <var:u1> = <var:d> } <var:u2> := <var:u1> * <var:S> { <var:S> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> } \end{verbatim} This is given by the environment update scheme of usual Hoare techniques . Stepping through , \begin{verbatim} { <var:S> = <var:d> } <var:u1> := <var:S> { <var:S> = <var:d> \land <var:u1> = <var:d> } { <var:S> = <var:d> \land <var:u1> = <var:d> } <var:u2> := <var:u1> * <var:S> { <var:S> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> } { <var:S> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> } <var:u0> := <nat:2> { <var:S> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u0> = <nat:2> } { <var:S> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u0> = <nat:2> } <var:u1> := <var:u1> * <nat:8> { <var:S> = <var:d> \land <var:u1> = <nat:8> \times <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u0> = <nat:2> } \end{verbatim} This is rigorously given through the assignment rule in Hoare techniques . Focusing on the proceeding bits of codefound in our code segment , we see \begin{verbatim} { <var:S> = <var:d> } <var:u1> := <var:S> { <var:S> = <var:d> \land <var:u1> = <var:d> } { <var:S> = <var:d> \land <var:u1> = <var:d> } <var:u2> := <var:u1> * <var:S> { <var:S> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:S> = <var:d> }} <var:u1> := <var:S> ; <var:u2> := <var:u1> * <var:S> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:8> ; <var:u2> := <var:u2> * <nat:8> ; <var:W> := <var:u2> <var:W> := <var:W> + <var:u1> <var:W> := <var:W> + <var:u0> {{ <var:W> = <nat:8> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u1> = <var:d> /\ <var:u2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u1> = <var:d> /\ <var:u2> = <var:d> ^ <nat:2> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u1> = <nat:8> * <var:d> /\ <var:u2> = <var:d> ^ <nat:2> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u1> = <nat:8> * <var:d> /\ <var:u2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u1> = <nat:8> * <var:d> /\ <var:u0> = <nat:2> /\ <var:W> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:2> /\ <var:W> = <nat:8> * <var:d> ^ <nat:2> + <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:W> = <nat:8> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 