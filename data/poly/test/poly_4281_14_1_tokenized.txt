\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:C> ; <var:p2> := <var:p1> * <var:C> ; <var:p3> := <var:p2> * <var:C> ; <var:p4> := <var:p3> * <var:C> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:8> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:2> ; <var:p4> := <var:p4> * <nat:9> ; <var:m> := <var:p4> <var:m> := <var:m> + <var:p3> <var:m> := <var:m> + <var:p2> <var:m> := <var:m> + <var:p1> <var:m> := <var:m> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Given that we have $ <var:C> = <var:l> $ with some natural numbers $ <var:l> $ before interpreting the list of commands , it must be that we have $ <var:m> = <nat:9> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this code is accomplished using standard Hoare reasoning . Looking at the proceeding piece of code in the series of commands , we have \begin{verbatim} { <var:C> = <var:l> } <var:p1> := <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> } \end{verbatim} Paying attention to the following bits of codein our segment of code , \begin{verbatim} { <var:C> = <var:l> } <var:p1> := <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> } { <var:C> = <var:l> \land <var:p1> = <var:l> } <var:p2> := <var:p1> * <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> } { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> } <var:p3> := <var:p2> * <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> } { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> } <var:p4> := <var:p3> * <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p4> = <var:l> ^ <nat:4> } { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p4> = <var:l> ^ <nat:4> } <var:p0> := <nat:7> { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p4> = <var:l> ^ <nat:4> \land <var:p0> = <nat:7> } \end{verbatim} Going to the next step , \begin{verbatim} { <var:C> = <var:l> } <var:p1> := <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> } { <var:C> = <var:l> \land <var:p1> = <var:l> } <var:p2> := <var:p1> * <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> } { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> } <var:p3> := <var:p2> * <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> } { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> } <var:p4> := <var:p3> * <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> \land <var:p3> = <var:l> ^ <nat:3> \land <var:p4> = <var:l> ^ <nat:4> } \end{verbatim} This is given through the variable binding rule from standard Hoare techniques . Immediately following , we see \begin{verbatim} { <var:C> = <var:l> } <var:p1> := <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> } { <var:C> = <var:l> \land <var:p1> = <var:l> } <var:p2> := <var:p1> * <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> \land <var:p2> = <var:l> ^ <nat:2> } \end{verbatim} Moving on , we see \begin{verbatim} { <var:C> = <var:l> } <var:p1> := <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> } \end{verbatim} This is known to be sound with the law defined in standard Hoare reasoning . Observing the subsequent line of code contained in the code segment , \begin{verbatim} { <var:C> = <var:l> } <var:p1> := <var:C> { <var:C> = <var:l> \land <var:p1> = <var:l> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Definition <def:poly> := <var:p1> := <var:C> ; <var:p2> := <var:p1> * <var:C> ; <var:p3> := <var:p2> * <var:C> ; <var:p4> := <var:p3> * <var:C> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:8> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:2> ; <var:p4> := <var:p4> * <nat:9> ; <var:m> := <var:p4> <var:m> := <var:m> + <var:p3> <var:m> := <var:m> + <var:p2> <var:m> := <var:m> + <var:p1> <var:m> := <var:m> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:C> = <var:l> }} <def:poly> {{ <var:m> = <nat:9> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p4> = <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p4> = <var:l> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <nat:8> * <var:l> /\ <var:p2> = <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p4> = <var:l> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <nat:8> * <var:l> /\ <var:p2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:p3> = <var:l> ^ <nat:3> /\ <var:p4> = <var:l> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <nat:8> * <var:l> /\ <var:p2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:l> ^ <nat:3> /\ <var:p4> = <var:l> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <nat:8> * <var:l> /\ <var:p2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:l> ^ <nat:3> /\ <var:p4> = <nat:9> * <var:l> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <nat:8> * <var:l> /\ <var:p2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:l> ^ <nat:3> /\ <var:p0> = <nat:7> /\ <var:m> = <nat:9> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <nat:8> * <var:l> /\ <var:p2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:p0> = <nat:7> /\ <var:m> = <nat:9> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p1> = <nat:8> * <var:l> /\ <var:p0> = <nat:7> /\ <var:m> = <nat:9> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:p0> = <nat:7> /\ <var:m> = <nat:9> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:m> = <nat:9> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 