\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:i> ; <var:d> := <var:g1> ; <var:d> := <var:d> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Allowing that $ <var:i> = <var:c> $ , with some positive integers $ <var:c> $ , prior to the execution of our list of commands , then we see $ <var:d> = <nat:4> \cdot <var:c> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare techniques produces : \begin{eqnarray} \{ <var:i> = <var:c> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:i> = <var:c> \land <var:g0> = <nat:2> \} \\ <var:g1> := <nat:4> ; \\ \{ <var:i> = <var:c> \land <var:g0> = <nat:2> \land <var:g1> = <nat:4> \} \\ <var:g1> := <var:g1> * <var:i> ; \\ \{ <var:i> = <var:c> \land <var:g0> = <nat:2> \land <var:g1> = <nat:4> * <var:c> \} \\ <var:d> := <var:g1> ; \\ \{ <var:i> = <var:c> \land <var:g0> = <nat:2> \land <var:d> = <nat:4> * <var:c> \} \\ <var:d> := <var:d> + <var:g0> \\ \{ <var:i> = <var:c> \land <var:d> = <nat:4> * <var:c> + <nat:2> \} \end{eqnarray} Hence , our program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:i> ; <var:d> := <var:g1> ; <var:d> := <var:d> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:i> = <var:c> }} <def:poly> {{ <var:d> = <nat:4> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:g0> = <nat:2> /\ <var:d> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:d> = <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 