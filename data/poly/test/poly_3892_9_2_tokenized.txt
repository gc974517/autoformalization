\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:1> + <var:i> * <var:u> ; <var:i> := <nat:2> + <var:i> * <var:u> ; <var:i> := <nat:3> + <var:i> * <var:u> ; <var:i> := <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:1> + <var:i> * <var:u> \end{verbatim} Allow that $ <var:u> = <var:A> $ prior to executing our list of instructions , it holds that we have $ <var:i> = <nat:3> \cdot <var:A> ^ <nat:8> + <nat:1> \cdot <var:A> ^ <nat:7> + <nat:2> \cdot <var:A> ^ <nat:6> + <nat:3> \cdot <var:A> ^ <nat:5> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:1> $ when series of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of the program is evident with this decorated segment of code . \begin{eqnarray} \{ <var:u> = <var:A> \} \\ <var:i> := <nat:3> ; \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \} \\ <var:i> := <nat:1> + <var:i> * <var:u> ; \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \times <var:A> + <nat:1> \} \\ <var:i> := <nat:2> + <var:i> * <var:u> ; \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \times <var:A> ^ <nat:2> + <nat:1> \times <var:A> + <nat:2> \} \\ <var:i> := <nat:3> + <var:i> * <var:u> ; \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:3> \} \\ <var:i> := <var:i> * <var:u> ; \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \times <var:A> ^ <nat:4> + <nat:1> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + \} \\ <var:i> := <nat:4> + <var:i> * <var:u> ; \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \times <var:A> ^ <nat:5> + <nat:1> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:4> \} \\ <var:i> := <nat:4> + <var:i> * <var:u> ; \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \times <var:A> ^ <nat:6> + <nat:1> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> + <nat:4> \} \\ <var:i> := <nat:4> + <var:i> * <var:u> ; \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \times <var:A> ^ <nat:7> + <nat:1> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:4> \} \\ <var:i> := <nat:1> + <var:i> * <var:u> \\ \{ <var:u> = <var:A> \land <var:i> = <nat:3> \times <var:A> ^ <nat:8> + <nat:1> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:5> + <nat:4> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:1> \} \end{eqnarray} The application of usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:u> = <var:A> }} <var:i> := <nat:3> ; <var:i> := <nat:1> + <var:i> * <var:u> ; <var:i> := <nat:2> + <var:i> * <var:u> ; <var:i> := <nat:3> + <var:i> * <var:u> ; <var:i> := <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:1> + <var:i> * <var:u> {{ <var:i> = <nat:3> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> * <var:A> ^ <nat:7> + <nat:1> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:i> = <nat:3> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 