\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:X> ; <var:J2> := <var:J1> * <var:X> ; <var:J3> := <var:J2> * <var:X> ; <var:J4> := <var:J3> * <var:X> ; <var:J0> := <nat:3> ; <var:J2> := <var:J2> * <nat:3> ; <var:J3> := <var:J3> * <nat:7> ; <var:J4> := <var:J4> * <nat:8> ; <var:E> := <var:J4> <var:E> := <var:E> + <var:J3> <var:E> := <var:E> + <var:J2> <var:E> := <var:E> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:X> = <var:v> $ ( for some positive coefficients $ <var:v> $ ) prior to evaluating this list of instructions it holds that we have $ <var:E> = <nat:8> * <var:v> ^ <nat:4> + <nat:7> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> $ after segment of code has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:v> \} \\ <var:J1> := <var:X> ; \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \} \\ <var:J2> := <var:J1> * <var:X> ; \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <var:v> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:X> ; \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <var:v> ^ <nat:2> \land <var:J3> = <var:v> ^ <nat:3> \} \\ <var:J4> := <var:J3> * <var:X> ; \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <var:v> ^ <nat:2> \land <var:J3> = <var:v> ^ <nat:3> \land <var:J4> = <var:v> ^ <nat:4> \} \\ <var:J0> := <nat:3> ; \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <var:v> ^ <nat:2> \land <var:J3> = <var:v> ^ <nat:3> \land <var:J4> = <var:v> ^ <nat:4> \land <var:J0> = <nat:3> \} \end{eqnarray} Continuing interpreting the code results in : \begin{eqnarray} <var:J2> := <var:J2> * <nat:3> ; \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <nat:3> * <var:v> ^ <nat:2> \land <var:J3> = <var:v> ^ <nat:3> \land <var:J4> = <var:v> ^ <nat:4> \land <var:J0> = <nat:3> \} \\ <var:J3> := <var:J3> * <nat:7> ; \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <nat:3> * <var:v> ^ <nat:2> \land <var:J3> = <nat:7> * <var:v> ^ <nat:3> \land <var:J4> = <var:v> ^ <nat:4> \land <var:J0> = <nat:3> \} \\ <var:J4> := <var:J4> * <nat:8> ; \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <nat:3> * <var:v> ^ <nat:2> \land <var:J3> = <nat:7> * <var:v> ^ <nat:3> \land <var:J4> = <nat:8> * <var:v> ^ <nat:4> \land <var:J0> = <nat:3> \} \\ <var:E> := <var:J4> \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <nat:3> * <var:v> ^ <nat:2> \land <var:J3> = <nat:7> * <var:v> ^ <nat:3> \land <var:J0> = <nat:3> \land <var:E> = <nat:8> * <var:v> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:J3> \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J2> = <nat:3> * <var:v> ^ <nat:2> \land <var:J0> = <nat:3> \land <var:E> = <nat:8> * <var:v> ^ <nat:4> + <nat:7> * <var:v> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:J2> \\ \{ <var:X> = <var:v> \land <var:J1> = <var:v> \land <var:J0> = <nat:3> \land <var:E> = <nat:8> * <var:v> ^ <nat:4> + <nat:7> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:J0> \\ \{ <var:X> = <var:v> \land <var:E> = <nat:8> * <var:v> ^ <nat:4> + <nat:7> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Definition <def:poly> := <var:J1> := <var:X> ; <var:J2> := <var:J1> * <var:X> ; <var:J3> := <var:J2> * <var:X> ; <var:J4> := <var:J3> * <var:X> ; <var:J0> := <nat:3> ; <var:J2> := <var:J2> * <nat:3> ; <var:J3> := <var:J3> * <nat:7> ; <var:J4> := <var:J4> * <nat:8> ; <var:E> := <var:J4> <var:E> := <var:E> + <var:J3> <var:E> := <var:E> + <var:J2> <var:E> := <var:E> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:X> = <var:v> }} <def:poly> {{ <var:E> = <nat:8> * <var:v> ^ <nat:4> + <nat:7> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <var:v> ^ <nat:2> /\ <var:J3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <var:v> ^ <nat:2> /\ <var:J3> = <var:v> ^ <nat:3> /\ <var:J4> = <var:v> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <var:v> ^ <nat:2> /\ <var:J3> = <var:v> ^ <nat:3> /\ <var:J4> = <var:v> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:J3> = <var:v> ^ <nat:3> /\ <var:J4> = <var:v> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:J3> = <nat:7> * <var:v> ^ <nat:3> /\ <var:J4> = <var:v> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:J3> = <nat:7> * <var:v> ^ <nat:3> /\ <var:J4> = <nat:8> * <var:v> ^ <nat:4> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:J3> = <nat:7> * <var:v> ^ <nat:3> /\ <var:J0> = <nat:3> /\ <var:E> = <nat:8> * <var:v> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:J0> = <nat:3> /\ <var:E> = <nat:8> * <var:v> ^ <nat:4> + <nat:7> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:J1> = <var:v> /\ <var:J0> = <nat:3> /\ <var:E> = <nat:8> * <var:v> ^ <nat:4> + <nat:7> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:v> /\ <var:E> = <nat:8> * <var:v> ^ <nat:4> + <nat:7> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 