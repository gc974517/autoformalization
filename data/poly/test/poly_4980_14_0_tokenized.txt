\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:5> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:a> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:a> ; <var:S2> := <var:S2> * <var:a> ; <var:S3> := <nat:9> ; <var:S3> := <var:S3> * <var:a> ; <var:S3> := <var:S3> * <var:a> ; <var:S3> := <var:S3> * <var:a> ; <var:e> := <var:S3> ; <var:e> := <var:e> + <var:S2> ; <var:e> := <var:e> + <var:S1> ; <var:e> := <var:e> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:a> = <var:O> $ --- given all whole numbers $ <var:O> $ --- prior to the execution of the list of commands , then we see $ <var:e> = <nat:9> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:5> $ after series of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is shown using typical Hoare reasoning . Advancing to the subsequent line of code contained in the program , we see the variable assignmet command letting $ <nat:5> $ into $ <var:S0>$ . This command takes the precondition $ \{ <var:a> = <var:O> \} $ into the condition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \} $ . This is given through the assignment scheme obtained from Hoare reasoning . Honing in on the following step in our series of instructions , we have the variable update statement letting $ <nat:2> $ as $ <var:S1>$ . This line moves $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \} $ into the condition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \} $ . Paying attention to the upcoming statement contained in the code , we see the variable assignmet line \verb | <var:S1> := <var:S1> * <var:a> ; | . This line advances $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \} $ . Advancing to the proceeding piece of code seen in our series of instructions , we see the variable update command giving $ <nat:8> $ toward $ <var:S2>$ . This line moves $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \} $ to the condition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \} $ . Considering the upcoming line in the code segment , we see the environment update command \verb | <var:S2> := <var:S2> * <var:a> ; | . This line redefines $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \} $ as the postcondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> \} $ . This is sound by the assignment inference rule obtained from Hoare logic . Considering the subsequent step seen in the list of instructions , we have the assignment code \verb | <var:S2> := <var:S2> * <var:a> ; | . This code moves the condition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> \} $ toward $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \} $ . This is guaranteed by the assignment rule in standard Hoare reasoning . Moving on to the upcoming bit of code contained in our series of instructions , we have the binding command letting $ <nat:9> $ into $ <var:S3>$ . This forwards $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:S3> = <nat:9> \} $ . This is given using the assignment scheme from standard Hoare reasoning . Honing in on the proceeding statement found in our list of instructions , the environment update statement \verb | <var:S3> := <var:S3> * <var:a> ; | . This statement moves the precondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:S3> = <nat:9> \} $ toward the postcondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:O> \} $ . This is sound using the assignment inference rule given in Hoare logic . Looking at the following command in our segment of code , we see the line defining $ <var:S3> * <var:a> $ as $ <var:S3>$ . This line advances the precondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:O> \} $ as the postcondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:O> ^ <nat:2> \} $ . This is shown using the assignment inference rule defined by Hoare reasoning . Next , we have the binding code binding $ <var:S3> * <var:a> $ toward $ <var:S3>$ . This statement advances the precondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:O> ^ <nat:2> \} $ into the postcondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:O> ^ <nat:3> \} $ . This is ensured with the assignment inference rule defined by Hoare techniques . Moving forward , we have the line assigning $ <var:S3> $ to $ <var:e>$ . This forwards the precondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:O> ^ <nat:3> \} $ into the postcondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:e> = <nat:9> \cdot <var:O> ^ <nat:3> \} $ . This is given with the assignment law from usual Hoare techniques . Paying attention to the following command found in our set of instructions , we have the environment update line \verb | <var:e> := <var:e> + <var:S2> ; | . This command forwards $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:S2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:e> = <nat:9> \cdot <var:O> ^ <nat:3> \} $ to the postcondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:e> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme found in usual Hoare techniques . Next , we have the variable assignmet line assigning $ <var:e> + <var:S1> $ as $ <var:e>$ . This line transfers the precondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:S1> = <nat:2> \cdot <var:O> \land <var:e> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> \} $ toward the condition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:e> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> \} $ . Taking another step toward the upcoming piece of code in our series of instructions , the variable binding line \verb | <var:e> := <var:e> + <var:S0> | . This statement transfers the precondition $ \{ <var:a> = <var:O> \land <var:S0> = <nat:5> \land <var:e> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> \} $ into the postcondition $ \{ <var:a> = <var:O> \land <var:e> = <nat:9> \cdot <var:O> ^ <nat:3> + <nat:8> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:5> \} $ . This is given through the assignment scheme found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S0> := <nat:5> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:a> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:a> ; <var:S2> := <var:S2> * <var:a> ; <var:S3> := <nat:9> ; <var:S3> := <var:S3> * <var:a> ; <var:S3> := <var:S3> * <var:a> ; <var:S3> := <var:S3> * <var:a> ; <var:e> := <var:S3> ; <var:e> := <var:e> + <var:S2> ; <var:e> := <var:e> + <var:S1> ; <var:e> := <var:e> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:a> = <var:O> }} <def:poly> {{ <var:e> = <nat:9> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:S2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:S2> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:S2> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:S2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:S3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:S2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:S2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:S2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:S2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:e> = <nat:9> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:2> * <var:O> /\ <var:e> = <nat:9> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:S0> = <nat:5> /\ <var:e> = <nat:9> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:O> /\ <var:e> = <nat:9> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 