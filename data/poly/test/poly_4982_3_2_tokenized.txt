\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x> := <nat:4> ; <var:x> := <var:x> * <var:o> ; <var:x> := <nat:3> + <var:x> * <var:o> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Given for integers $ <var:Z> $ $ <var:o> = <var:Z> $ before executing this program it must be that we see $ <var:x> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> $ once list of instructions terminates . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is shown through usual Hoare reasoning . Further , we see the line giving $ <nat:4> $ toward $ <var:x>$ . This moves the precondition $ \{ <var:o> = <var:Z> \} $ as the postcondition $ \{ <var:o> = <var:Z> \land <var:x> = <nat:4> \} $ . Advancing to the proceeding line found in our set of instructions , we see the variable update statement \verb | <var:x> := <var:x> * <var:o> ; | . This command transfers the condition $ \{ <var:o> = <var:Z> \land <var:x> = <nat:4> \} $ as $ \{ <var:o> = <var:Z> \land <var:x> = <nat:4> \times <var:Z> + \} $ . This is deduced using the assignment rule found in usual Hoare logic . Moving forward to the proceeding line in the code , we see the binding line \verb | <var:x> := <nat:3> + <var:x> * <var:o> | . This line takes the precondition $ \{ <var:o> = <var:Z> \land <var:x> = <nat:4> \times <var:Z> + \} $ as the condition $ \{ <var:o> = <var:Z> \land <var:x> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:4> ; <var:x> := <var:x> * <var:o> ; <var:x> := <nat:3> + <var:x> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:o> = <var:Z> }} <def:poly> {{ <var:x> = <nat:4> * <var:Z> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:x> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:x> = <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:x> = <nat:4> * <var:Z> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 