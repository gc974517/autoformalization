\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:s> ; <var:m2> := <var:m1> * <var:s> ; <var:m3> := <var:m2> * <var:s> ; <var:m4> := <var:m3> * <var:s> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:6> ; <var:m2> := <var:m2> * <nat:8> ; <var:m3> := <var:m3> * <nat:2> ; <var:m4> := <var:m4> * <nat:1> ; <var:Z> := <var:m4> <var:Z> := <var:Z> + <var:m3> <var:Z> := <var:Z> + <var:m2> <var:Z> := <var:Z> + <var:m1> <var:Z> := <var:Z> + <var:m0> \end{verbatim} Given ( for all $ <var:y> \in \mathbb{Z}^+ $ ) $ <var:s> = <var:y> $ before the evaluation of the segment of code then $ <var:Z> = <nat:1> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:8> \times <var:y> ^ <nat:2> + <nat:6> \times <var:y> + <nat:2> $ once series of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:y> \} \\ <var:m1> := <var:s> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <var:y> \} \\ <var:m2> := <var:m1> * <var:s> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <var:y> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:s> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <var:y> ^ <nat:2> \land <var:m3> = <var:y> ^ <nat:3> \} \\ <var:m4> := <var:m3> * <var:s> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <var:y> ^ <nat:2> \land <var:m3> = <var:y> ^ <nat:3> \land <var:m4> = <var:y> ^ <nat:4> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <var:y> \land <var:m2> = <var:y> ^ <nat:2> \land <var:m3> = <var:y> ^ <nat:3> \land <var:m4> = <var:y> ^ <nat:4> \land <var:m0> = <nat:2> \} \\ <var:m1> := <var:m1> * <nat:6> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <nat:6> * <var:y> \land <var:m2> = <var:y> ^ <nat:2> \land <var:m3> = <var:y> ^ <nat:3> \land <var:m4> = <var:y> ^ <nat:4> \land <var:m0> = <nat:2> \} \\ <var:m2> := <var:m2> * <nat:8> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <nat:6> * <var:y> \land <var:m2> = <nat:8> * <var:y> ^ <nat:2> \land <var:m3> = <var:y> ^ <nat:3> \land <var:m4> = <var:y> ^ <nat:4> \land <var:m0> = <nat:2> \} \\ <var:m3> := <var:m3> * <nat:2> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <nat:6> * <var:y> \land <var:m2> = <nat:8> * <var:y> ^ <nat:2> \land <var:m3> = <nat:2> * <var:y> ^ <nat:3> \land <var:m4> = <var:y> ^ <nat:4> \land <var:m0> = <nat:2> \} \\ <var:m4> := <var:m4> * <nat:1> ; \\ \{ <var:s> = <var:y> \land <var:m1> = <nat:6> * <var:y> \land <var:m2> = <nat:8> * <var:y> ^ <nat:2> \land <var:m3> = <nat:2> * <var:y> ^ <nat:3> \land <var:m4> = <nat:1> * <var:y> ^ <nat:4> \land <var:m0> = <nat:2> \} \\ <var:Z> := <var:m4> \\ \{ <var:s> = <var:y> \land <var:m1> = <nat:6> * <var:y> \land <var:m2> = <nat:8> * <var:y> ^ <nat:2> \land <var:m3> = <nat:2> * <var:y> ^ <nat:3> \land <var:m0> = <nat:2> \land <var:Z> = <nat:1> * <var:y> ^ <nat:4> \} \\ <var:Z> := <var:Z> + <var:m3> \\ \{ <var:s> = <var:y> \land <var:m1> = <nat:6> * <var:y> \land <var:m2> = <nat:8> * <var:y> ^ <nat:2> \land <var:m0> = <nat:2> \land <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:m2> \\ \{ <var:s> = <var:y> \land <var:m1> = <nat:6> * <var:y> \land <var:m0> = <nat:2> \land <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:m1> \\ \{ <var:s> = <var:y> \land <var:m0> = <nat:2> \land <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> \} \\ <var:Z> := <var:Z> + <var:m0> \\ \{ <var:s> = <var:y> \land <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:2> \} \end{eqnarray} The application of usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:s> = <var:y> }} <var:m1> := <var:s> ; <var:m2> := <var:m1> * <var:s> ; <var:m3> := <var:m2> * <var:s> ; <var:m4> := <var:m3> * <var:s> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:6> ; <var:m2> := <var:m2> * <nat:8> ; <var:m3> := <var:m3> * <nat:2> ; <var:m4> := <var:m4> * <nat:1> ; <var:Z> := <var:m4> <var:Z> := <var:Z> + <var:m3> <var:Z> := <var:Z> + <var:m2> <var:Z> := <var:Z> + <var:m1> <var:Z> := <var:Z> + <var:m0> {{ <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <var:y> /\ <var:m2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <var:y> /\ <var:m2> = <var:y> ^ <nat:2> /\ <var:m3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <var:y> /\ <var:m2> = <var:y> ^ <nat:2> /\ <var:m3> = <var:y> ^ <nat:3> /\ <var:m4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <var:y> /\ <var:m2> = <var:y> ^ <nat:2> /\ <var:m3> = <var:y> ^ <nat:3> /\ <var:m4> = <var:y> ^ <nat:4> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <nat:6> * <var:y> /\ <var:m2> = <var:y> ^ <nat:2> /\ <var:m3> = <var:y> ^ <nat:3> /\ <var:m4> = <var:y> ^ <nat:4> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <nat:6> * <var:y> /\ <var:m2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:m3> = <var:y> ^ <nat:3> /\ <var:m4> = <var:y> ^ <nat:4> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <nat:6> * <var:y> /\ <var:m2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:m4> = <var:y> ^ <nat:4> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <nat:6> * <var:y> /\ <var:m2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:m4> = <nat:1> * <var:y> ^ <nat:4> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <nat:6> * <var:y> /\ <var:m2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:m0> = <nat:2> /\ <var:Z> = <nat:1> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <nat:6> * <var:y> /\ <var:m2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:m0> = <nat:2> /\ <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m1> = <nat:6> * <var:y> /\ <var:m0> = <nat:2> /\ <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:m0> = <nat:2> /\ <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:Z> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 