\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:4> ; <var:r> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:H> = <var:p> $ given all integers $ <var:p> $ prior to running the program then we see $ <var:r> = <nat:4> $ when list of instructions is done . \end{theorem} \begin{proof} Let the below decorated code segment . \begin{eqnarray} \{ <var:H> = <var:p> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:H> = <var:p> \land <var:N0> = <nat:4> \} \\ <var:r> := <var:N0> \\ \{ <var:H> = <var:p> \land <var:r> = <nat:4> \} \end{eqnarray} Applying usual Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:r> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:H> = <var:p> }} <def:poly> {{ <var:r> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:r> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 