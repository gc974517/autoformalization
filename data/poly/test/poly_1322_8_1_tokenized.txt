\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:A> ; <var:f2> := <var:f1> * <var:A> ; <var:f0> := <nat:9> ; <var:f1> := <var:f1> * <nat:3> ; <var:f2> := <var:f2> * <nat:7> ; <var:Q> := <var:f2> <var:Q> := <var:Q> + <var:f1> <var:Q> := <var:Q> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:A> = <var:C> $ before the execution of our code it holds that we see $ <var:Q> = <nat:7> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:9> $ after code segment exits . \end{theorem} \begin{proof} The argument for our program is shown through standard Hoare reasoning . Taking a look at the following line seen in our series of commands , the variable assignmet command \verb | <var:f1> := <var:A> ; | . This forwards $ \{ <var:A> = <var:C> \} $ to $ \{ <var:A> = <var:C> \land <var:f1> = <var:C> \} $ . This is guaranteed through the assignment law defined by typical Hoare logic . Taking a look at the subsequent statement seen in the segment of code , we have the line \verb | <var:f2> := <var:f1> * <var:A> ; | . This takes $ \{ <var:A> = <var:C> \land <var:f1> = <var:C> \} $ as the postcondition $ \{ <var:A> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \} $ . This is given by the assignment rule in standard Hoare reasoning . Moving on to the next step , we have the variable assignmet code letting $ <nat:9> $ to $ <var:f0>$ . This command redefines $ \{ <var:A> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \} $ to the postcondition $ \{ <var:A> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f0> = <nat:9> \} $ . This is known to be sound using the assignment law found in usual Hoare reasoning . Shifting focus toward the subsequent piece of code found in the set of commands , we see the variable assignmet line letting $ <var:f1> * <nat:3> $ into $ <var:f1>$ . This transfers the precondition $ \{ <var:A> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f0> = <nat:9> \} $ into the condition $ \{ <var:A> = <var:C> \land <var:f1> = <nat:3> \cdot <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f0> = <nat:9> \} $ . This is known to be sound through the assignment rule defined in Hoare reasoning . Paying attention to the subsequent line of code contained in our series of instructions , the variable binding command \verb | <var:f2> := <var:f2> * <nat:7> ; | . This command moves $ \{ <var:A> = <var:C> \land <var:f1> = <nat:3> \cdot <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f0> = <nat:9> \} $ as $ \{ <var:A> = <var:C> \land <var:f1> = <nat:3> \cdot <var:C> \land <var:f2> = <nat:7> \cdot <var:C> ^ <nat:2> \land <var:f0> = <nat:9> \} $ . Moving on to the next bit of code contained in our set of commands , the variable binding statement \verb | <var:Q> := <var:f2> | . This redefines $ \{ <var:A> = <var:C> \land <var:f1> = <nat:3> \cdot <var:C> \land <var:f2> = <nat:7> \cdot <var:C> ^ <nat:2> \land <var:f0> = <nat:9> \} $ toward $ \{ <var:A> = <var:C> \land <var:f1> = <nat:3> \cdot <var:C> \land <var:f0> = <nat:9> \land <var:Q> = <nat:7> \cdot <var:C> ^ <nat:2> \} $ . This is given by the assignment rule obtained from typical Hoare reasoning . Observing the subsequent line contained in our set of instructions , the command defining $ <var:Q> + <var:f1$ toward $ <var:Q>$ . This advances the precondition $ \{ <var:A> = <var:C> \land <var:f1> = <nat:3> \cdot <var:C> \land <var:f0> = <nat:9> \land <var:Q> = <nat:7> \cdot <var:C> ^ <nat:2> \} $ toward the condition $ \{ <var:A> = <var:C> \land <var:f0> = <nat:9> \land <var:Q> = <nat:7> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> \} $ . This is shown to be logically sound with the assignment rule defined by standard Hoare logic . Jumping to the following command contained in the series of commands , we have the statement letting $ <var:Q> + <var:f0$ into $ <var:Q>$ . This line redefines $ \{ <var:A> = <var:C> \land <var:f0> = <nat:9> \land <var:Q> = <nat:7> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> \} $ to the condition $ \{ <var:A> = <var:C> \land <var:Q> = <nat:7> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f1> := <var:A> ; <var:f2> := <var:f1> * <var:A> ; <var:f0> := <nat:9> ; <var:f1> := <var:f1> * <nat:3> ; <var:f2> := <var:f2> * <nat:7> ; <var:Q> := <var:f2> <var:Q> := <var:Q> + <var:f1> <var:Q> := <var:Q> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:A> = <var:C> }} <def:poly> {{ <var:Q> = <nat:7> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:f1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:f1> = <var:C> /\ <var:f2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:f1> = <var:C> /\ <var:f2> = <var:C> ^ <nat:2> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:f1> = <nat:3> * <var:C> /\ <var:f2> = <var:C> ^ <nat:2> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:f1> = <nat:3> * <var:C> /\ <var:f2> = <nat:7> * <var:C> ^ <nat:2> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:f1> = <nat:3> * <var:C> /\ <var:f0> = <nat:9> /\ <var:Q> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:f0> = <nat:9> /\ <var:Q> = <nat:7> * <var:C> ^ <nat:2> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:Q> = <nat:7> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 