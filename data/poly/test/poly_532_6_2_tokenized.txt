\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} : \begin{verbatim} <var:I> := <nat:4> ; <var:I> := <nat:3> + <var:I> * <var:H> ; <var:I> := <nat:2> + <var:I> * <var:H> ; <var:I> := <nat:2> + <var:I> * <var:H> ; <var:I> := <nat:4> + <var:I> * <var:H> ; <var:I> := <nat:4> + <var:I> * <var:H> \end{verbatim} Assume it to hold that $ <var:H> = <var:z> $ with some positive numbers $ <var:z> $ ahead of executing the segment of code , then $ <var:I> = <nat:4> \times <var:z> ^ <nat:5> + <nat:3> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:4> $ once list of commands executes . \end{theorem} \begin{proof} The argument for this series of instructions can be demonstrated with usual Hoare logic . Going forward , we have \verb | { <var:H> = <var:z> } <var:I> := <nat:4> { <var:H> = <var:z> \land <var:I> = <nat:4> } | , \verb | { <var:H> = <var:z> \land <var:I> = <nat:4> } <var:I> := <nat:3> + <var:I> * <var:H> { <var:H> = <var:z> \land <var:I> = <nat:4> \times <var:z> + <nat:3> } | , \verb | { <var:H> = <var:z> \land <var:I> = <nat:4> \times <var:z> + <nat:3> } <var:I> := <nat:2> + <var:I> * <var:H> { <var:H> = <var:z> \land <var:I> = <nat:4> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:2> } | , \verb | { <var:H> = <var:z> \land <var:I> = <nat:4> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:2> } <var:I> := <nat:2> + <var:I> * <var:H> { <var:H> = <var:z> \land <var:I> = <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> } | and \verb | { <var:H> = <var:z> \land <var:I> = <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> } <var:I> := <nat:4> + <var:I> * <var:H> { <var:H> = <var:z> \land <var:I> = <nat:4> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:4> } | . This is ensured by the law defined in standard Hoare techniques . Looking at the following line of code in our list of commands , \verb | { <var:H> = <var:z> } <var:I> := <nat:4> { <var:H> = <var:z> \land <var:I> = <nat:4> } | . This is shown to be logically sound using the binding law obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:H> = <var:z> }} <var:I> := <nat:4> ; <var:I> := <nat:3> + <var:I> * <var:H> ; <var:I> := <nat:2> + <var:I> * <var:H> ; <var:I> := <nat:2> + <var:I> * <var:H> ; <var:I> := <nat:4> + <var:I> * <var:H> ; <var:I> := <nat:4> + <var:I> * <var:H> {{ <var:I> = <nat:4> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:I> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:I> = <nat:4> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:I> = <nat:4> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:I> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:I> = <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:I> = <nat:4> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 