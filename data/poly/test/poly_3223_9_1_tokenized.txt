\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:X1> := <var:y> ; <var:X2> := <var:X1> * <var:y> ; <var:X3> := <var:X2> * <var:y> ; <var:X0> := <nat:6> ; <var:X2> := <var:X2> * <nat:5> ; <var:X3> := <var:X3> * <nat:2> ; <var:p> := <var:X3> <var:p> := <var:p> + <var:X2> <var:p> := <var:p> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:y> = <var:i> $ ahead of executing this series of instructions it follows that we have $ <var:p> = <nat:2> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} The proof of this set of instructions is shown with Hoare techniques . Observing the next bit of code seen in the set of instructions , the variable update line defining $ <var:y> $ to $ <var:X1>$ . This advances the condition $ \{ <var:y> = <var:i> \} $ as the postcondition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \} $ . This is rigorously given by the assignment inference rule from standard Hoare reasoning . Further , we have the variable assignmet command \verb | <var:X2> := <var:X1> * <var:y> ; | . This forwards the precondition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \} $ to the condition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \} $ . This is deduced by the assignment scheme obtained from typical Hoare logic . Taking another step toward the subsequent command seen in our set of commands , the code \verb | <var:X3> := <var:X2> * <var:y> ; | . This line redefines $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \} $ to the condition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \} $ . This is sound through the assignment rule found in Hoare techniques . Moving on to the next step , we see the environment update line giving $ <nat:6> $ as $ <var:X0>$ . This command takes $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \} $ as the condition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \land <var:X0> = <nat:6> \} $ . This is ensured through the assignment scheme of Hoare logic . Moving on to the proceeding line of code seen in our segment of code , we see the binding line \verb | <var:X2> := <var:X2> * <nat:5> ; | . This redefines $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \land <var:X0> = <nat:6> \} $ to the postcondition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \land <var:X0> = <nat:6> \} $ . Focusing on the next statement seen in our segment of code , we have the variable update code \verb | <var:X3> := <var:X3> * <nat:2> ; | . This transfers $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:X3> = <var:i> ^ <nat:3> \land <var:X0> = <nat:6> \} $ into the postcondition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:X3> = <nat:2> \times <var:i> ^ <nat:3> \land <var:X0> = <nat:6> \} $ . Taking a look at the upcoming bit of code in our series of commands , we see the variable assignmet command \verb | <var:p> := <var:X3> | . This statement transfers the precondition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:X3> = <nat:2> \times <var:i> ^ <nat:3> \land <var:X0> = <nat:6> \} $ as $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:X0> = <nat:6> \land <var:p> = <nat:2> \times <var:i> ^ <nat:3> \} $ . This is rigorously given through the assignment inference rule obtained from Hoare techniques . Advancing to the next step , we have the variable binding command \verb | <var:p> := <var:p> + <var:X2> | . This forwards the condition $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X2> = <nat:5> \times <var:i> ^ <nat:2> \land <var:X0> = <nat:6> \land <var:p> = <nat:2> \times <var:i> ^ <nat:3> \} $ as $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X0> = <nat:6> \land <var:p> = <nat:2> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> \} $ . This is deduced through the assignment inference rule in Hoare logic . Observing the proceeding command found in our code segment , the variable update line binding $ <var:p> + <var:X0$ as $ <var:p>$ . This line takes $ \{ <var:y> = <var:i> \land <var:X1> = <var:i> \land <var:X0> = <nat:6> \land <var:p> = <nat:2> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> \} $ into the condition $ \{ <var:y> = <var:i> \land <var:p> = <nat:2> \times <var:i> ^ <nat:3> + <nat:5> \times <var:i> ^ <nat:2> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <def:poly> := <var:X1> := <var:y> ; <var:X2> := <var:X1> * <var:y> ; <var:X3> := <var:X2> * <var:y> ; <var:X0> := <nat:6> ; <var:X2> := <var:X2> * <nat:5> ; <var:X3> := <var:X3> * <nat:2> ; <var:p> := <var:X3> <var:p> := <var:p> + <var:X2> <var:p> := <var:p> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:y> = <var:i> }} <def:poly> {{ <var:p> = <nat:2> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <var:i> ^ <nat:2> /\ <var:X3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <var:i> ^ <nat:2> /\ <var:X3> = <var:i> ^ <nat:3> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:X3> = <var:i> ^ <nat:3> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:X3> = <nat:2> * <var:i> ^ <nat:3> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X1> = <var:i> /\ <var:X2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:X0> = <nat:6> /\ <var:p> = <nat:2> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X1> = <var:i> /\ <var:X0> = <nat:6> /\ <var:p> = <nat:2> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:p> = <nat:2> * <var:i> ^ <nat:3> + <nat:5> * <var:i> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 