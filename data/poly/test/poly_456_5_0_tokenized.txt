\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:9> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:q> ; <var:T> := <var:E1> ; <var:T> := <var:T> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Given that $ <var:q> = <var:t> $ prior to the execution of this set of instructions it holds that we see $ <var:T> = <nat:9> \times <var:t> + <nat:9> $ when set of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:t> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:q> = <var:t> \land <var:E0> = <nat:9> \} \\ <var:E1> := <nat:9> ; \\ \{ <var:q> = <var:t> \land <var:E0> = <nat:9> \land <var:E1> = <nat:9> \} \\ <var:E1> := <var:E1> * <var:q> ; \\ \{ <var:q> = <var:t> \land <var:E0> = <nat:9> \land <var:E1> = <nat:9> \times <var:t> \} \\ <var:T> := <var:E1> ; \\ \{ <var:q> = <var:t> \land <var:E0> = <nat:9> \land <var:T> = <nat:9> \times <var:t> \} \\ <var:T> := <var:T> + <var:E0> \\ \{ <var:q> = <var:t> \land <var:T> = <nat:9> \times <var:t> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:9> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:q> ; <var:T> := <var:E1> ; <var:T> := <var:T> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:q> = <var:t> }} <def:poly> {{ <var:T> = <nat:9> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:E0> = <nat:9> /\ <var:E1> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:E0> = <nat:9> /\ <var:T> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:T> = <nat:9> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 