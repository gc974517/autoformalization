\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <nat:2> + <var:h> * <var:f> ; <var:h> := <nat:2> + <var:h> * <var:f> ; <var:h> := <var:h> * <var:f> ; <var:h> := <var:h> * <var:f> ; <var:h> := <var:h> * <var:f> ; <var:h> := <nat:1> + <var:h> * <var:f> ; <var:h> := <nat:3> + <var:h> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:f> = <var:e> $ ahead of the evaluation of the set of commands , then $ <var:h> = <nat:3> \times <var:e> ^ <nat:7> + <nat:2> \times <var:e> ^ <nat:6> + <nat:2> \times <var:e> ^ <nat:5> + <nat:1> \times <var:e> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our set of instructions is accomplished by typical Hoare reasoning . After , we see the variable update line \verb | <var:h> := <nat:3> ; | . This forwards the precondition $ \{ <var:f> = <var:e> \} $ to the postcondition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \} $ . This is guaranteed through the assignment inference rule given in Hoare reasoning . Moving onward , the environment update command binding $ <nat:2> + <var:h> * <var:f> $ toward $ <var:h>$ . This code takes the precondition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \} $ as $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> + <nat:2> \} $ . This is shown through the assignment law defined in standard Hoare reasoning . Considering the next command found in the code , the assignment code \verb | <var:h> := <nat:2> + <var:h> * <var:f> ; | . This takes the precondition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> + <nat:2> \} $ into the postcondition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:2> \} $ . Keeping momentum , the variable binding command assigning $ <var:h> * <var:f> $ to $ <var:h>$ . This code moves $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:2> \} $ as $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + \} $ . Considering the upcoming line of code in our program , the variable binding code binding $ <var:h> * <var:f> $ toward $ <var:h>$ . This code advances the precondition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + \} $ into $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + \} $ . This is ensured with the assignment scheme given in usual Hoare reasoning . Immediately after , we see the command binding $ <var:h> * <var:f> $ into $ <var:h>$ . This redefines the condition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + \} $ into the postcondition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:5> + <nat:2> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + \} $ . This is guaranteed by the assignment rule given in typical Hoare techniques . Looking at the next piece of code found in our series of commands , we see the assignment statement \verb | <var:h> := <nat:1> + <var:h> * <var:f> ; | . This statement takes $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:5> + <nat:2> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + \} $ to the condition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:6> + <nat:2> \cdot <var:e> ^ <nat:5> + <nat:2> \cdot <var:e> ^ <nat:4> + <nat:1> \} $ . This is known to be sound with the assignment law given in typical Hoare techniques . Keeping momentum , we see the variable binding command \verb | <var:h> := <nat:3> + <var:h> * <var:f> | . This advances $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:6> + <nat:2> \cdot <var:e> ^ <nat:5> + <nat:2> \cdot <var:e> ^ <nat:4> + <nat:1> \} $ to the postcondition $ \{ <var:f> = <var:e> \land <var:h> = <nat:3> \cdot <var:e> ^ <nat:7> + <nat:2> \cdot <var:e> ^ <nat:6> + <nat:2> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> + <nat:3> \} $ . This is shown by the assignment law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:3> ; <var:h> := <nat:2> + <var:h> * <var:f> ; <var:h> := <nat:2> + <var:h> * <var:f> ; <var:h> := <var:h> * <var:f> ; <var:h> := <var:h> * <var:f> ; <var:h> := <var:h> * <var:f> ; <var:h> := <nat:1> + <var:h> * <var:f> ; <var:h> := <nat:3> + <var:h> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:f> = <var:e> }} <def:poly> {{ <var:h> = <nat:3> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:h> = <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:h> = <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:h> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:h> = <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:h> = <nat:3> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:h> = <nat:3> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:h> = <nat:3> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 