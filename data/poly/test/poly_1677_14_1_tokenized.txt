\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:A> ; <var:X2> := <var:X1> * <var:A> ; <var:X3> := <var:X2> * <var:A> ; <var:X4> := <var:X3> * <var:A> ; <var:X5> := <var:X4> * <var:A> ; <var:X6> := <var:X5> * <var:A> ; <var:X0> := <nat:9> ; <var:X2> := <var:X2> * <nat:4> ; <var:X3> := <var:X3> * <nat:2> ; <var:X6> := <var:X6> * <nat:9> ; <var:h> := <var:X6> <var:h> := <var:h> + <var:X3> <var:h> := <var:h> + <var:X2> <var:h> := <var:h> + <var:X0> \end{verbatim} Given , assuming some whole numbers $ <var:a> $ , that we have $ <var:A> = <var:a> $ before evaluating the series of commands it follows that we have $ <var:h> = <nat:9> \times <var:a> ^ <nat:6> + <nat:2> \times <var:a> ^ <nat:3> + <nat:4> \times <var:a> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Notice this decorated set of commands . \begin{eqnarray} \{ <var:A> = <var:a> \} \\ <var:X1> := <var:A> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \} \\ <var:X2> := <var:X1> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <var:a> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <var:a> ^ <nat:2> \land <var:X3> = <var:a> ^ <nat:3> \} \\ <var:X4> := <var:X3> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <var:a> ^ <nat:2> \land <var:X3> = <var:a> ^ <nat:3> \land <var:X4> = <var:a> ^ <nat:4> \} \\ <var:X5> := <var:X4> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <var:a> ^ <nat:2> \land <var:X3> = <var:a> ^ <nat:3> \land <var:X4> = <var:a> ^ <nat:4> \land <var:X5> = <var:a> ^ <nat:5> \} \\ <var:X6> := <var:X5> * <var:A> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <var:a> ^ <nat:2> \land <var:X3> = <var:a> ^ <nat:3> \land <var:X4> = <var:a> ^ <nat:4> \land <var:X5> = <var:a> ^ <nat:5> \land <var:X6> = <var:a> ^ <nat:6> \} \\ <var:X0> := <nat:9> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <var:a> ^ <nat:2> \land <var:X3> = <var:a> ^ <nat:3> \land <var:X4> = <var:a> ^ <nat:4> \land <var:X5> = <var:a> ^ <nat:5> \land <var:X6> = <var:a> ^ <nat:6> \land <var:X0> = <nat:9> \} \end{eqnarray} Advancing running this set of instructions yields : \begin{eqnarray} <var:X2> := <var:X2> * <nat:4> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <nat:4> \cdot <var:a> ^ <nat:2> \land <var:X3> = <var:a> ^ <nat:3> \land <var:X4> = <var:a> ^ <nat:4> \land <var:X5> = <var:a> ^ <nat:5> \land <var:X6> = <var:a> ^ <nat:6> \land <var:X0> = <nat:9> \} \\ <var:X3> := <var:X3> * <nat:2> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <nat:4> \cdot <var:a> ^ <nat:2> \land <var:X3> = <nat:2> \cdot <var:a> ^ <nat:3> \land <var:X4> = <var:a> ^ <nat:4> \land <var:X5> = <var:a> ^ <nat:5> \land <var:X6> = <var:a> ^ <nat:6> \land <var:X0> = <nat:9> \} \\ <var:X6> := <var:X6> * <nat:9> ; \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <nat:4> \cdot <var:a> ^ <nat:2> \land <var:X3> = <nat:2> \cdot <var:a> ^ <nat:3> \land <var:X4> = <var:a> ^ <nat:4> \land <var:X5> = <var:a> ^ <nat:5> \land <var:X6> = <nat:9> \cdot <var:a> ^ <nat:6> \land <var:X0> = <nat:9> \} \\ <var:h> := <var:X6> \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <nat:4> \cdot <var:a> ^ <nat:2> \land <var:X3> = <nat:2> \cdot <var:a> ^ <nat:3> \land <var:X4> = <var:a> ^ <nat:4> \land <var:X5> = <var:a> ^ <nat:5> \land <var:X0> = <nat:9> \land <var:h> = <nat:9> \cdot <var:a> ^ <nat:6> \} \\ <var:h> := <var:h> + <var:X3> \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X2> = <nat:4> \cdot <var:a> ^ <nat:2> \land <var:X0> = <nat:9> \land <var:h> = <nat:9> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:X2> \\ \{ <var:A> = <var:a> \land <var:X1> = <var:a> \land <var:X0> = <nat:9> \land <var:h> = <nat:9> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:X0> \\ \{ <var:A> = <var:a> \land <var:h> = <nat:9> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:9> \} \end{eqnarray} Using typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <var:X4> : string := " <var:X4> " . Definition <var:X5> : string := " <var:X5> " . Definition <var:X6> : string := " <var:X6> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:A> = <var:a> }} <var:X1> := <var:A> ; <var:X2> := <var:X1> * <var:A> ; <var:X3> := <var:X2> * <var:A> ; <var:X4> := <var:X3> * <var:A> ; <var:X5> := <var:X4> * <var:A> ; <var:X6> := <var:X5> * <var:A> ; <var:X0> := <nat:9> ; <var:X2> := <var:X2> * <nat:4> ; <var:X3> := <var:X3> * <nat:2> ; <var:X6> := <var:X6> * <nat:9> ; <var:h> := <var:X6> <var:h> := <var:h> + <var:X3> <var:h> := <var:h> + <var:X2> <var:h> := <var:h> + <var:X0> {{ <var:h> = <nat:9> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <var:a> ^ <nat:2> /\ <var:X3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <var:a> ^ <nat:2> /\ <var:X3> = <var:a> ^ <nat:3> /\ <var:X4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <var:a> ^ <nat:2> /\ <var:X3> = <var:a> ^ <nat:3> /\ <var:X4> = <var:a> ^ <nat:4> /\ <var:X5> = <var:a> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <var:a> ^ <nat:2> /\ <var:X3> = <var:a> ^ <nat:3> /\ <var:X4> = <var:a> ^ <nat:4> /\ <var:X5> = <var:a> ^ <nat:5> /\ <var:X6> = <var:a> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <var:a> ^ <nat:2> /\ <var:X3> = <var:a> ^ <nat:3> /\ <var:X4> = <var:a> ^ <nat:4> /\ <var:X5> = <var:a> ^ <nat:5> /\ <var:X6> = <var:a> ^ <nat:6> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:X3> = <var:a> ^ <nat:3> /\ <var:X4> = <var:a> ^ <nat:4> /\ <var:X5> = <var:a> ^ <nat:5> /\ <var:X6> = <var:a> ^ <nat:6> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:X3> = <nat:2> * <var:a> ^ <nat:3> /\ <var:X4> = <var:a> ^ <nat:4> /\ <var:X5> = <var:a> ^ <nat:5> /\ <var:X6> = <var:a> ^ <nat:6> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:X3> = <nat:2> * <var:a> ^ <nat:3> /\ <var:X4> = <var:a> ^ <nat:4> /\ <var:X5> = <var:a> ^ <nat:5> /\ <var:X6> = <nat:9> * <var:a> ^ <nat:6> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:X3> = <nat:2> * <var:a> ^ <nat:3> /\ <var:X4> = <var:a> ^ <nat:4> /\ <var:X5> = <var:a> ^ <nat:5> /\ <var:X0> = <nat:9> /\ <var:h> = <nat:9> * <var:a> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X2> = <nat:4> * <var:a> ^ <nat:2> /\ <var:X0> = <nat:9> /\ <var:h> = <nat:9> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:X1> = <var:a> /\ <var:X0> = <nat:9> /\ <var:h> = <nat:9> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:h> = <nat:9> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 