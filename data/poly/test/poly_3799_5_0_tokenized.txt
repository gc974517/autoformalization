\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:6> ; <var:P1> := <nat:8> ; <var:P1> := <var:P1> * <var:H> ; <var:y> := <var:P1> ; <var:y> := <var:y> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:H> = <var:k> $ ( for all integers $ <var:k> $ ) prior to interpreting our set of commands it must be that we see $ <var:y> = <nat:8> * <var:k> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be shown with typical Hoare reasoning . Advancing to the following steps contained in our list of commands , \begin{verbatim} { <var:H> = <var:k> } <var:P0> := <nat:6> { <var:H> = <var:k> \land <var:P0> = <nat:6> } { <var:H> = <var:k> \land <var:P0> = <nat:6> } <var:P1> := <nat:8> { <var:H> = <var:k> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> } { <var:H> = <var:k> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> } <var:P1> := <var:P1> * <var:H> { <var:H> = <var:k> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:k> } { <var:H> = <var:k> \land <var:P0> = <nat:6> \land <var:P1> = <nat:8> \times <var:k> } <var:y> := <var:P1> { <var:H> = <var:k> \land <var:P0> = <nat:6> \land <var:y> = <nat:8> \times <var:k> } { <var:H> = <var:k> \land <var:P0> = <nat:6> \land <var:y> = <nat:8> \times <var:k> } <var:y> := <var:y> + <var:P0{ <var:H> = <var:k> \land <var:y> = <nat:8> \times <var:k> + <nat:6> } \end{verbatim} This is deduced with the binding law found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:P1> := <nat:8> ; <var:P1> := <var:P1> * <var:H> ; <var:y> := <var:P1> ; <var:y> := <var:y> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:H> = <var:k> }} <def:poly> {{ <var:y> = <nat:8> * <var:k> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:P0> = <nat:6> /\ <var:y> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:y> = <nat:8> * <var:k> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 