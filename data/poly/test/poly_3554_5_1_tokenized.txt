\begin{document} \begin{theorem} Take the following code segment such that \begin{verbatim} <var:m1> := <var:k> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:7> ; <var:Q> := <var:m1> <var:Q> := <var:Q> + <var:m0> \end{verbatim} Allowing that we have $ <var:k> = <var:O> $ ahead of running this code segment , it follows that we have $ <var:Q> = <nat:7> * <var:O> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:k> = <var:O> \} \\ <var:m1> := <var:k> ; \\ \{ <var:k> = <var:O> \land <var:m1> = <var:O> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:k> = <var:O> \land <var:m1> = <var:O> \land <var:m0> = <nat:3> \} \\ <var:m1> := <var:m1> * <nat:7> ; \\ \{ <var:k> = <var:O> \land <var:m1> = <nat:7> * <var:O> \land <var:m0> = <nat:3> \} \\ <var:Q> := <var:m1> \\ \{ <var:k> = <var:O> \land <var:m0> = <nat:3> \land <var:Q> = <nat:7> * <var:O> \} \\ <var:Q> := <var:Q> + <var:m0> \\ \{ <var:k> = <var:O> \land <var:Q> = <nat:7> * <var:O> + <nat:3> \} \end{eqnarray} Therefore , the program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:k> = <var:O> }} <var:m1> := <var:k> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:7> ; <var:Q> := <var:m1> <var:Q> := <var:Q> + <var:m0> {{ <var:Q> = <nat:7> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:m1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:m1> = <var:O> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:m1> = <nat:7> * <var:O> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:m0> = <nat:3> /\ <var:Q> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:Q> = <nat:7> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 