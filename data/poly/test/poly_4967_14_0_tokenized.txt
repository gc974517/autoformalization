\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:I> ; <var:d2> := <nat:2> ; <var:d2> := <var:d2> * <var:I> ; <var:d2> := <var:d2> * <var:I> ; <var:d3> := <nat:2> ; <var:d3> := <var:d3> * <var:I> ; <var:d3> := <var:d3> * <var:I> ; <var:d3> := <var:d3> * <var:I> ; <var:H> := <var:d3> ; <var:H> := <var:H> + <var:d2> ; <var:H> := <var:H> + <var:d1> ; <var:H> := <var:H> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:I> = <var:M> $ prior to the evaluation of our code , it must be that we see $ <var:H> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:M> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \} \\ <var:d1> := <nat:1> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \} \\ <var:d1> := <var:d1> * <var:I> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \} \\ <var:d2> := <nat:2> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d2> = <nat:2> \} \\ <var:d2> := <var:d2> * <var:I> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d2> = <nat:2> \cdot <var:M> \} \\ <var:d2> := <var:d2> * <var:I> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d2> = <nat:2> \cdot <var:M> ^ <nat:2> \} \\ <var:d3> := <nat:2> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d2> = <nat:2> \cdot <var:M> ^ <nat:2> \land <var:d3> = <nat:2> \} \\ <var:d3> := <var:d3> * <var:I> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d2> = <nat:2> \cdot <var:M> ^ <nat:2> \land <var:d3> = <nat:2> \cdot <var:M> \} \\ <var:d3> := <var:d3> * <var:I> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d2> = <nat:2> \cdot <var:M> ^ <nat:2> \land <var:d3> = <nat:2> \cdot <var:M> ^ <nat:2> \} \\ <var:d3> := <var:d3> * <var:I> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d2> = <nat:2> \cdot <var:M> ^ <nat:2> \land <var:d3> = <nat:2> \cdot <var:M> ^ <nat:3> \} \\ <var:H> := <var:d3> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d2> = <nat:2> \cdot <var:M> ^ <nat:2> \land <var:H> = <nat:2> \cdot <var:M> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:d2> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:H> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:d1> ; \\ \{ <var:I> = <var:M> \land <var:d0> = <nat:3> \land <var:H> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> \} \\ <var:H> := <var:H> + <var:d0> \\ \{ <var:I> = <var:M> \land <var:H> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:3> \} \end{eqnarray} The application of Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d0> := <nat:3> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:I> ; <var:d2> := <nat:2> ; <var:d2> := <var:d2> * <var:I> ; <var:d2> := <var:d2> * <var:I> ; <var:d3> := <nat:2> ; <var:d3> := <var:d3> * <var:I> ; <var:d3> := <var:d3> * <var:I> ; <var:d3> := <var:d3> * <var:I> ; <var:H> := <var:d3> ; <var:H> := <var:H> + <var:d2> ; <var:H> := <var:H> + <var:d1> ; <var:H> := <var:H> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:I> = <var:M> }} <def:poly> {{ <var:H> = <nat:2> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d2> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d2> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:d3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:d3> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:d3> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:d3> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:H> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:1> * <var:M> /\ <var:H> = <nat:2> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:d0> = <nat:3> /\ <var:H> = <nat:2> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:H> = <nat:2> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 