\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:B0> := <nat:6> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:N> ; <var:B2> := <nat:4> ; <var:B2> := <var:B2> * <var:N> ; <var:B2> := <var:B2> * <var:N> ; <var:I> := <var:B2> ; <var:I> := <var:I> + <var:B1> ; <var:I> := <var:I> + <var:B0> \end{verbatim} Given $ <var:N> = <var:h> $ ahead of the execution of the series of instructions , it must be that we have $ <var:I> = <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for this code can be given with Hoare reasoning . Moving forward to the upcoming bits of codecontained in the program , \begin{eqnarray} \{ <var:N> = <var:h> \} \, <var:B0> := <nat:6> \, \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \} \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \} \, <var:B1> := <nat:1> \, \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \} \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \} \, <var:B1> := <var:B1> * <var:N> \, \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \} \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \} \, <var:B2> := <nat:4> \, \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \land <var:B2> = <nat:4> \} \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \land <var:B2> = <nat:4> \} \, <var:B2> := <var:B2> * <var:N> \, \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \land <var:B2> = <nat:4> \cdot <var:h> \} \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \land <var:B2> = <nat:4> \cdot <var:h> \} \, <var:B2> := <var:B2> * <var:N> \, \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \land <var:B2> = <nat:4> \cdot <var:h> ^ <nat:2> \} \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \land <var:B2> = <nat:4> \cdot <var:h> ^ <nat:2> \} \, <var:I> := <var:B2> \, \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \land <var:I> = <nat:4> \cdot <var:h> ^ <nat:2> \} \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:B1> = <nat:1> \cdot <var:h> \land <var:I> = <nat:4> \cdot <var:h> ^ <nat:2> \} \, <var:I> := <var:I> + <var:B1> \, \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:I> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> \} \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:6> \land <var:I> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> \} \, <var:I> := <var:I> + <var:B0\, \{ <var:N> = <var:h> \land <var:I> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:6> \} \end{eqnarray} This is ensured using the environment update inference rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:N> = <var:h> }} <var:B0> := <nat:6> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:N> ; <var:B2> := <nat:4> ; <var:B2> := <var:B2> * <var:N> ; <var:B2> := <var:B2> * <var:N> ; <var:I> := <var:B2> ; <var:I> := <var:I> + <var:B1> ; <var:I> := <var:I> + <var:B0> {{ <var:I> = <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:1> * <var:h> /\ <var:B2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:1> * <var:h> /\ <var:B2> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:1> * <var:h> /\ <var:B2> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:1> * <var:h> /\ <var:I> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:6> /\ <var:I> = <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:I> = <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 