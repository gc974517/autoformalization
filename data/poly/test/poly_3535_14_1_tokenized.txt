\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N1> := <var:z> ; <var:N2> := <var:N1> * <var:z> ; <var:N3> := <var:N2> * <var:z> ; <var:N4> := <var:N3> * <var:z> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:9> ; <var:N3> := <var:N3> * <nat:1> ; <var:N4> := <var:N4> * <nat:5> ; <var:G> := <var:N4> <var:G> := <var:G> + <var:N3> <var:G> := <var:G> + <var:N2> <var:G> := <var:G> + <var:N1> <var:G> := <var:G> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Assuming it to be that $ <var:z> = <var:x> $ --- for some positive numbers $ <var:x> $ --- ahead of evaluating this series of commands , it follows that we see $ <var:G> = <nat:5> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> + <nat:9> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:x> \} \\ <var:N1> := <var:z> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <var:x> \} \\ <var:N2> := <var:N1> * <var:z> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <var:x> \land <var:N2> = <var:x> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:z> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <var:x> \land <var:N2> = <var:x> ^ <nat:2> \land <var:N3> = <var:x> ^ <nat:3> \} \\ <var:N4> := <var:N3> * <var:z> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <var:x> \land <var:N2> = <var:x> ^ <nat:2> \land <var:N3> = <var:x> ^ <nat:3> \land <var:N4> = <var:x> ^ <nat:4> \} \\ <var:N0> := <nat:7> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <var:x> \land <var:N2> = <var:x> ^ <nat:2> \land <var:N3> = <var:x> ^ <nat:3> \land <var:N4> = <var:x> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:N1> := <var:N1> * <nat:5> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <nat:5> * <var:x> \land <var:N2> = <var:x> ^ <nat:2> \land <var:N3> = <var:x> ^ <nat:3> \land <var:N4> = <var:x> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:N2> := <var:N2> * <nat:9> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <nat:5> * <var:x> \land <var:N2> = <nat:9> * <var:x> ^ <nat:2> \land <var:N3> = <var:x> ^ <nat:3> \land <var:N4> = <var:x> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:N3> := <var:N3> * <nat:1> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <nat:5> * <var:x> \land <var:N2> = <nat:9> * <var:x> ^ <nat:2> \land <var:N3> = <nat:1> * <var:x> ^ <nat:3> \land <var:N4> = <var:x> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:N4> := <var:N4> * <nat:5> ; \\ \{ <var:z> = <var:x> \land <var:N1> = <nat:5> * <var:x> \land <var:N2> = <nat:9> * <var:x> ^ <nat:2> \land <var:N3> = <nat:1> * <var:x> ^ <nat:3> \land <var:N4> = <nat:5> * <var:x> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:G> := <var:N4> \\ \{ <var:z> = <var:x> \land <var:N1> = <nat:5> * <var:x> \land <var:N2> = <nat:9> * <var:x> ^ <nat:2> \land <var:N3> = <nat:1> * <var:x> ^ <nat:3> \land <var:N0> = <nat:7> \land <var:G> = <nat:5> * <var:x> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:N3> \\ \{ <var:z> = <var:x> \land <var:N1> = <nat:5> * <var:x> \land <var:N2> = <nat:9> * <var:x> ^ <nat:2> \land <var:N0> = <nat:7> \land <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:N2> \\ \{ <var:z> = <var:x> \land <var:N1> = <nat:5> * <var:x> \land <var:N0> = <nat:7> \land <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:N1> \\ \{ <var:z> = <var:x> \land <var:N0> = <nat:7> \land <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:5> * <var:x> \} \\ <var:G> := <var:G> + <var:N0> \\ \{ <var:z> = <var:x> \land <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> \} \end{eqnarray} Using usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Definition <def:poly> := <var:N1> := <var:z> ; <var:N2> := <var:N1> * <var:z> ; <var:N3> := <var:N2> * <var:z> ; <var:N4> := <var:N3> * <var:z> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:9> ; <var:N3> := <var:N3> * <nat:1> ; <var:N4> := <var:N4> * <nat:5> ; <var:G> := <var:N4> <var:G> := <var:G> + <var:N3> <var:G> := <var:G> + <var:N2> <var:G> := <var:G> + <var:N1> <var:G> := <var:G> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:z> = <var:x> }} <def:poly> {{ <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <var:x> /\ <var:N2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <var:x> /\ <var:N2> = <var:x> ^ <nat:2> /\ <var:N3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <var:x> /\ <var:N2> = <var:x> ^ <nat:2> /\ <var:N3> = <var:x> ^ <nat:3> /\ <var:N4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <var:x> /\ <var:N2> = <var:x> ^ <nat:2> /\ <var:N3> = <var:x> ^ <nat:3> /\ <var:N4> = <var:x> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <nat:5> * <var:x> /\ <var:N2> = <var:x> ^ <nat:2> /\ <var:N3> = <var:x> ^ <nat:3> /\ <var:N4> = <var:x> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <nat:5> * <var:x> /\ <var:N2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:N3> = <var:x> ^ <nat:3> /\ <var:N4> = <var:x> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <nat:5> * <var:x> /\ <var:N2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:N3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:N4> = <var:x> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <nat:5> * <var:x> /\ <var:N2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:N3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:N4> = <nat:5> * <var:x> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <nat:5> * <var:x> /\ <var:N2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:N3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:N0> = <nat:7> /\ <var:G> = <nat:5> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <nat:5> * <var:x> /\ <var:N2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:N0> = <nat:7> /\ <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N1> = <nat:5> * <var:x> /\ <var:N0> = <nat:7> /\ <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:N0> = <nat:7> /\ <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:G> = <nat:5> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 