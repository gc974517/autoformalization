\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y1> := <var:C> ; <var:Y2> := <var:Y1> * <var:C> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:V> := <var:Y2> <var:V> := <var:V> + <var:Y1> <var:V> := <var:V> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:C> = <var:N> $ assuming some $ <var:N> \in \mathbb{Z}^+ $ prior to evaluating the segment of code it follows that we see $ <var:V> = <nat:1> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:N> \} \\ <var:Y1> := <var:C> ; \\ \{ <var:C> = <var:N> \land <var:Y1> = <var:N> \} \\ <var:Y2> := <var:Y1> * <var:C> ; \\ \{ <var:C> = <var:N> \land <var:Y1> = <var:N> \land <var:Y2> = <var:N> ^ <nat:2> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:C> = <var:N> \land <var:Y1> = <var:N> \land <var:Y2> = <var:N> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <var:Y1> * <nat:5> ; \\ \{ <var:C> = <var:N> \land <var:Y1> = <nat:5> * <var:N> \land <var:Y2> = <var:N> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:Y2> := <var:Y2> * <nat:1> ; \\ \{ <var:C> = <var:N> \land <var:Y1> = <nat:5> * <var:N> \land <var:Y2> = <nat:1> * <var:N> ^ <nat:2> \land <var:Y0> = <nat:7> \} \\ <var:V> := <var:Y2> \\ \{ <var:C> = <var:N> \land <var:Y1> = <nat:5> * <var:N> \land <var:Y0> = <nat:7> \land <var:V> = <nat:1> * <var:N> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:Y1> \\ \{ <var:C> = <var:N> \land <var:Y0> = <nat:7> \land <var:V> = <nat:1> * <var:N> ^ <nat:2> + <nat:5> * <var:N> \} \\ <var:V> := <var:V> + <var:Y0> \\ \{ <var:C> = <var:N> \land <var:V> = <nat:1> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:7> \} \end{eqnarray} The application of Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y1> := <var:C> ; <var:Y2> := <var:Y1> * <var:C> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:V> := <var:Y2> <var:V> := <var:V> + <var:Y1> <var:V> := <var:V> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:C> = <var:N> }} <def:poly> {{ <var:V> = <nat:1> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:Y1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:Y1> = <var:N> /\ <var:Y2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:Y1> = <var:N> /\ <var:Y2> = <var:N> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:Y1> = <nat:5> * <var:N> /\ <var:Y2> = <var:N> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:Y1> = <nat:5> * <var:N> /\ <var:Y2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:Y1> = <nat:5> * <var:N> /\ <var:Y0> = <nat:7> /\ <var:V> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:Y0> = <nat:7> /\ <var:V> = <nat:1> * <var:N> ^ <nat:2> + <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:V> = <nat:1> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 