\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:8> ; <var:K> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Allowing $ <var:w> = <var:L> $ --- given $ <var:L> \in \mathbb{N} $ --- ahead of interpreting this series of instructions it must be that $ <var:K> = <nat:8> $ once list of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:L> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:w> = <var:L> \land <var:J0> = <nat:8> \} \\ <var:K> := <var:J0> \\ \{ <var:w> = <var:L> \land <var:K> = <nat:8> \} \end{eqnarray} Applying usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:8> ; <var:K> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:w> = <var:L> }} <def:poly> {{ <var:K> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:K> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 