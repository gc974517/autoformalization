\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:C> ; <var:u2> := <var:u1> * <var:C> ; <var:u3> := <var:u2> * <var:C> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:3> ; <var:u3> := <var:u3> * <nat:2> ; <var:m> := <var:u3> <var:m> := <var:m> + <var:u2> <var:m> := <var:m> + <var:u1> <var:m> := <var:m> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Given $ <var:C> = <var:t> $ ( for integers $ <var:t> $ ) before the evaluation of our series of commands , it follows that $ <var:m> = <nat:2> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:t> \} \\ <var:u1> := <var:C> ; \\ \{ <var:C> = <var:t> \land <var:u1> = <var:t> \} \\ <var:u2> := <var:u1> * <var:C> ; \\ \{ <var:C> = <var:t> \land <var:u1> = <var:t> \land <var:u2> = <var:t> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:C> ; \\ \{ <var:C> = <var:t> \land <var:u1> = <var:t> \land <var:u2> = <var:t> ^ <nat:2> \land <var:u3> = <var:t> ^ <nat:3> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:C> = <var:t> \land <var:u1> = <var:t> \land <var:u2> = <var:t> ^ <nat:2> \land <var:u3> = <var:t> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ <var:u1> := <var:u1> * <nat:4> ; \\ \{ <var:C> = <var:t> \land <var:u1> = <nat:4> * <var:t> \land <var:u2> = <var:t> ^ <nat:2> \land <var:u3> = <var:t> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ <var:u2> := <var:u2> * <nat:3> ; \\ \{ <var:C> = <var:t> \land <var:u1> = <nat:4> * <var:t> \land <var:u2> = <nat:3> * <var:t> ^ <nat:2> \land <var:u3> = <var:t> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ <var:u3> := <var:u3> * <nat:2> ; \\ \{ <var:C> = <var:t> \land <var:u1> = <nat:4> * <var:t> \land <var:u2> = <nat:3> * <var:t> ^ <nat:2> \land <var:u3> = <nat:2> * <var:t> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ <var:m> := <var:u3> \\ \{ <var:C> = <var:t> \land <var:u1> = <nat:4> * <var:t> \land <var:u2> = <nat:3> * <var:t> ^ <nat:2> \land <var:u0> = <nat:2> \land <var:m> = <nat:2> * <var:t> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:u2> \\ \{ <var:C> = <var:t> \land <var:u1> = <nat:4> * <var:t> \land <var:u0> = <nat:2> \land <var:m> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:u1> \\ \{ <var:C> = <var:t> \land <var:u0> = <nat:2> \land <var:m> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> \} \\ <var:m> := <var:m> + <var:u0> \\ \{ <var:C> = <var:t> \land <var:m> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> \} \end{eqnarray} Using standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:C> ; <var:u2> := <var:u1> * <var:C> ; <var:u3> := <var:u2> * <var:C> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:3> ; <var:u3> := <var:u3> * <nat:2> ; <var:m> := <var:u3> <var:m> := <var:m> + <var:u2> <var:m> := <var:m> + <var:u1> <var:m> := <var:m> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:C> = <var:t> }} <def:poly> {{ <var:m> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <var:t> /\ <var:u2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <var:t> /\ <var:u2> = <var:t> ^ <nat:2> /\ <var:u3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <var:t> /\ <var:u2> = <var:t> ^ <nat:2> /\ <var:u3> = <var:t> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <nat:4> * <var:t> /\ <var:u2> = <var:t> ^ <nat:2> /\ <var:u3> = <var:t> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <nat:4> * <var:t> /\ <var:u2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:u3> = <var:t> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <nat:4> * <var:t> /\ <var:u2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:u3> = <nat:2> * <var:t> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <nat:4> * <var:t> /\ <var:u2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:u0> = <nat:2> /\ <var:m> = <nat:2> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u1> = <nat:4> * <var:t> /\ <var:u0> = <nat:2> /\ <var:m> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:u0> = <nat:2> /\ <var:m> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:m> = <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 