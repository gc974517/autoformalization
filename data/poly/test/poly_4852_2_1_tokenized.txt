\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:7> ; <var:M> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:d> = <var:y> $ before running this program , it must be that we have $ <var:M> = <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of commands can be done using usual Hoare techniques . Moving forward to the following statement seen in our program , we have the variable assignmet command defining $ <nat:7> $ toward $ <var:k0>$ . This advances the condition $ \{ <var:d> = <var:y> \} $ toward $ \{ <var:d> = <var:y> \land <var:k0> = <nat:7> \} $ . Moving on to the proceeding statement seen in the series of instructions , we have the variable binding line \verb | <var:M> := <var:k0> | . This forwards the condition $ \{ <var:d> = <var:y> \land <var:k0> = <nat:7> \} $ to $ \{ <var:d> = <var:y> \land <var:M> = <nat:7> \} $ . This is ensured by the assignment inference rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:7> ; <var:M> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:d> = <var:y> }} <def:poly> {{ <var:M> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:M> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 