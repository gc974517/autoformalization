\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:6> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:Y> ; <var:e> := <var:E1> ; <var:e> := <var:e> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:Y> = <var:c> $ assuming some $ <var:c> \in \mathbb{Z}^+ $ prior to evaluating the series of instructions , it must be that we have $ <var:e> = <nat:2> \cdot <var:c> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for our code is done through standard Hoare logic . Considering the subsequent bits of codecontained in our series of instructions , we see \begin{verbatim} { <var:Y> = <var:c> } <var:E0> := <nat:6> { <var:Y> = <var:c> \land <var:E0> = <nat:6> } { <var:Y> = <var:c> \land <var:E0> = <nat:6> } <var:E1> := <nat:2> { <var:Y> = <var:c> \land <var:E0> = <nat:6> \land <var:E1> = <nat:2> } { <var:Y> = <var:c> \land <var:E0> = <nat:6> \land <var:E1> = <nat:2> } <var:E1> := <var:E1> * <var:Y> { <var:Y> = <var:c> \land <var:E0> = <nat:6> \land <var:E1> = <nat:2> \cdot <var:c> } { <var:Y> = <var:c> \land <var:E0> = <nat:6> \land <var:E1> = <nat:2> \cdot <var:c> } <var:e> := <var:E1> { <var:Y> = <var:c> \land <var:E0> = <nat:6> \land <var:e> = <nat:2> \cdot <var:c> } { <var:Y> = <var:c> \land <var:E0> = <nat:6> \land <var:e> = <nat:2> \cdot <var:c> } <var:e> := <var:e> + <var:E0{ <var:Y> = <var:c> \land <var:e> = <nat:2> \cdot <var:c> + <nat:6> } \end{verbatim} This is rigorously given using the variable assignmet inference rule given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:6> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:Y> ; <var:e> := <var:E1> ; <var:e> := <var:e> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Y> = <var:c> }} <def:poly> {{ <var:e> = <nat:2> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:6> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:6> /\ <var:E1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:E0> = <nat:6> /\ <var:e> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:e> = <nat:2> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 