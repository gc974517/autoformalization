\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as \begin{verbatim} <var:E1> := <var:Z> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:1> ; <var:j> := <var:E1> <var:j> := <var:j> + <var:E0> \end{verbatim} Allow it to be that $ <var:Z> = <var:i> $ before interpreting this set of instructions , it holds that we have $ <var:j> = <nat:1> * <var:i> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the code segment is done by Hoare techniques . Further , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:i> \} & <var:E1> := <var:Z> & \{ <var:Z> = <var:i> \land <var:E1> = <var:i> \} \\ \{ <var:Z> = <var:i> \land <var:E1> = <var:i> \} & <var:E0> := <nat:3> & \{ <var:Z> = <var:i> \land <var:E1> = <var:i> \land <var:E0> = <nat:3> \} \\ \{ <var:Z> = <var:i> \land <var:E1> = <var:i> \land <var:E0> = <nat:3> \} & <var:E1> := <var:E1> * <nat:1> & \{ <var:Z> = <var:i> \land <var:E1> = <nat:1> \cdot <var:i> \land <var:E0> = <nat:3> \} \\ \{ <var:Z> = <var:i> \land <var:E1> = <nat:1> \cdot <var:i> \land <var:E0> = <nat:3> \} & <var:j> := <var:E1& \{ <var:Z> = <var:i> \land <var:E0> = <nat:3> \land <var:j> = <nat:1> \cdot <var:i> \} \end{tabular} This is shown using the binding inference rule defined in standard Hoare logic . Observing the following piece of code in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:i> \} & <var:E1> := <var:Z> & \{ <var:Z> = <var:i> \land <var:E1> = <var:i> \} \end{tabular} This is rigorously given through the variable binding inference rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Z> = <var:i> }} <var:E1> := <var:Z> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:1> ; <var:j> := <var:E1> <var:j> := <var:j> + <var:E0> {{ <var:j> = <nat:1> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:E1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:E1> = <var:i> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:E1> = <nat:1> * <var:i> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:E0> = <nat:3> /\ <var:j> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:j> = <nat:1> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 