\begin{document} \begin{theorem} Let the following code segment such that \begin{verbatim} <var:R1> := <var:T> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:6> ; <var:d> := <var:R1> <var:d> := <var:d> + <var:R0> \end{verbatim} Given it to be that $ <var:T> = <var:W> $ , given any $ <var:W> \in \mathbb{N} $ , ahead of executing this code it must be that $ <var:d> = <nat:6> \cdot <var:W> + <nat:2> $ when code finishes . \end{theorem} \begin{proof} Demonstrating correctness of this code is done by typical Hoare reasoning . Looking at the proceeding lines seen in the code , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:W> \} & <var:R1> := <var:T> & \{ <var:T> = <var:W> \land <var:R1> = <var:W> \} \\ \{ <var:T> = <var:W> \land <var:R1> = <var:W> \} & <var:R0> := <nat:2> & \{ <var:T> = <var:W> \land <var:R1> = <var:W> \land <var:R0> = <nat:2> \} \\ \{ <var:T> = <var:W> \land <var:R1> = <var:W> \land <var:R0> = <nat:2> \} & <var:R1> := <var:R1> * <nat:6> & \{ <var:T> = <var:W> \land <var:R1> = <nat:6> * <var:W> \land <var:R0> = <nat:2> \} \end{tabular} Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:W> \} & <var:R1> := <var:T> & \{ <var:T> = <var:W> \land <var:R1> = <var:W> \} \\ \{ <var:T> = <var:W> \land <var:R1> = <var:W> \} & <var:R0> := <nat:2> & \{ <var:T> = <var:W> \land <var:R1> = <var:W> \land <var:R0> = <nat:2> \} \end{tabular} This is given with the variable binding law of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:T> = <var:W> }} <var:R1> := <var:T> ; <var:R0> := <nat:2> ; <var:R1> := <var:R1> * <nat:6> ; <var:d> := <var:R1> <var:d> := <var:d> + <var:R0> {{ <var:d> = <nat:6> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:W> /\ <var:R1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:W> /\ <var:R1> = <var:W> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:W> /\ <var:R1> = <nat:6> * <var:W> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:W> /\ <var:R0> = <nat:2> /\ <var:d> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:W> /\ <var:d> = <nat:6> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 