\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:m> ; <var:R2> := <var:R1> * <var:m> ; <var:R3> := <var:R2> * <var:m> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:8> ; <var:L> := <var:R3> <var:L> := <var:L> + <var:R2> <var:L> := <var:L> + <var:R1> <var:L> := <var:L> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:m> = <var:c> $ ahead of evaluating our series of commands then $ <var:L> = <nat:8> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:7> $ after program has finished . \end{theorem} \begin{proof} The course of logic for the series of commands is done through usual Hoare techniques . Advancing to the next step , we have the variable assignmet statement \verb | <var:R1> := <var:m> ; | . This transfers the condition $ \{ <var:m> = <var:c> \} $ toward $ \{ <var:m> = <var:c> \land <var:R1> = <var:c> \} $ . This is sound by the assignment rule in typical Hoare logic . After , the binding command yielding $ <var:R1> * <var:m> $ as $ <var:R2>$ . This moves the precondition $ \{ <var:m> = <var:c> \land <var:R1> = <var:c> \} $ as $ \{ <var:m> = <var:c> \land <var:R1> = <var:c> \land <var:R2> = <var:c> ^ <nat:2> \} $ . Now , we have the variable update statement \verb | <var:R3> := <var:R2> * <var:m> ; | . This statement takes $ \{ <var:m> = <var:c> \land <var:R1> = <var:c> \land <var:R2> = <var:c> ^ <nat:2> \} $ into the postcondition $ \{ <var:m> = <var:c> \land <var:R1> = <var:c> \land <var:R2> = <var:c> ^ <nat:2> \land <var:R3> = <var:c> ^ <nat:3> \} $ . This is known to be sound by the assignment law found in usual Hoare logic . Moving on , we see the variable binding command \verb | <var:R0> := <nat:7> ; | . This takes the precondition $ \{ <var:m> = <var:c> \land <var:R1> = <var:c> \land <var:R2> = <var:c> ^ <nat:2> \land <var:R3> = <var:c> ^ <nat:3> \} $ as the condition $ \{ <var:m> = <var:c> \land <var:R1> = <var:c> \land <var:R2> = <var:c> ^ <nat:2> \land <var:R3> = <var:c> ^ <nat:3> \land <var:R0> = <nat:7> \} $ . This is given by the assignment inference rule in usual Hoare logic . Observing the following command contained in our series of commands , we see the environment update line defining $ <var:R1> * <nat:4> $ as $ <var:R1>$ . This forwards the precondition $ \{ <var:m> = <var:c> \land <var:R1> = <var:c> \land <var:R2> = <var:c> ^ <nat:2> \land <var:R3> = <var:c> ^ <nat:3> \land <var:R0> = <nat:7> \} $ to the postcondition $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R2> = <var:c> ^ <nat:2> \land <var:R3> = <var:c> ^ <nat:3> \land <var:R0> = <nat:7> \} $ . Paying attention to the proceeding line found in our code segment , the assignment statement \verb | <var:R2> := <var:R2> * <nat:5> ; | . This code advances the precondition $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R2> = <var:c> ^ <nat:2> \land <var:R3> = <var:c> ^ <nat:3> \land <var:R0> = <nat:7> \} $ into the postcondition $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:R3> = <var:c> ^ <nat:3> \land <var:R0> = <nat:7> \} $ . This is rigorously given using the assignment inference rule found in usual Hoare techniques . Considering the subsequent bit of code contained in our list of instructions , we see the environment update statement giving $ <var:R3> * <nat:8> $ into $ <var:R3>$ . This statement moves $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:R3> = <var:c> ^ <nat:3> \land <var:R0> = <nat:7> \} $ toward the condition $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:R3> = <nat:8> \cdot <var:c> ^ <nat:3> \land <var:R0> = <nat:7> \} $ . This is known to be sound by the assignment rule from usual Hoare techniques . Moving on , we see the assignment line yielding $ <var:R3$ toward $ <var:L>$ . This statement redefines the condition $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:R3> = <nat:8> \cdot <var:c> ^ <nat:3> \land <var:R0> = <nat:7> \} $ to the postcondition $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:R0> = <nat:7> \land <var:L> = <nat:8> \cdot <var:c> ^ <nat:3> \} $ . Immediately after , we have the environment update statement binding $ <var:L> + <var:R2$ toward $ <var:L>$ . This redefines the condition $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R2> = <nat:5> \cdot <var:c> ^ <nat:2> \land <var:R0> = <nat:7> \land <var:L> = <nat:8> \cdot <var:c> ^ <nat:3> \} $ into $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R0> = <nat:7> \land <var:L> = <nat:8> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme given by standard Hoare techniques . Taking a look at the upcoming step found in the series of commands , we have the binding line \verb | <var:L> := <var:L> + <var:R1> | . This advances $ \{ <var:m> = <var:c> \land <var:R1> = <nat:4> \cdot <var:c> \land <var:R0> = <nat:7> \land <var:L> = <nat:8> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> \} $ to $ \{ <var:m> = <var:c> \land <var:R0> = <nat:7> \land <var:L> = <nat:8> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> \} $ . This is rigorously given through the assignment rule found in typical Hoare reasoning . Looking at the proceeding statement in the segment of code , we see the assignment line defining $ <var:L> + <var:R0$ toward $ <var:L>$ . This line takes the precondition $ \{ <var:m> = <var:c> \land <var:R0> = <nat:7> \land <var:L> = <nat:8> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> \} $ as the postcondition $ \{ <var:m> = <var:c> \land <var:L> = <nat:8> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:7> \} $ . This is shown to be logically sound with the assignment scheme of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:m> ; <var:R2> := <var:R1> * <var:m> ; <var:R3> := <var:R2> * <var:m> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:8> ; <var:L> := <var:R3> <var:L> := <var:L> + <var:R2> <var:L> := <var:L> + <var:R1> <var:L> := <var:L> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:m> = <var:c> }} <def:poly> {{ <var:L> = <nat:8> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <var:c> /\ <var:R2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <var:c> /\ <var:R2> = <var:c> ^ <nat:2> /\ <var:R3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <var:c> /\ <var:R2> = <var:c> ^ <nat:2> /\ <var:R3> = <var:c> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <nat:4> * <var:c> /\ <var:R2> = <var:c> ^ <nat:2> /\ <var:R3> = <var:c> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <nat:4> * <var:c> /\ <var:R2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:R3> = <var:c> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <nat:4> * <var:c> /\ <var:R2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:R3> = <nat:8> * <var:c> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <nat:4> * <var:c> /\ <var:R2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:R0> = <nat:7> /\ <var:L> = <nat:8> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R1> = <nat:4> * <var:c> /\ <var:R0> = <nat:7> /\ <var:L> = <nat:8> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:R0> = <nat:7> /\ <var:L> = <nat:8> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:L> = <nat:8> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 