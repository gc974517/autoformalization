\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:x1> := <var:L> ; <var:x2> := <var:x1> * <var:L> ; <var:x3> := <var:x2> * <var:L> ; <var:x4> := <var:x3> * <var:L> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:6> ; <var:x2> := <var:x2> * <nat:6> ; <var:x3> := <var:x3> * <nat:3> ; <var:x4> := <var:x4> * <nat:2> ; <var:A> := <var:x4> <var:A> := <var:A> + <var:x3> <var:A> := <var:A> + <var:x2> <var:A> := <var:A> + <var:x1> <var:A> := <var:A> + <var:x0> \end{verbatim} Given it to be that $ <var:L> = <var:s> $ before interpreting the segment of code then we see $ <var:A> = <nat:2> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> + <nat:6> \cdot <var:s> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of commands can be done using this decorated segment of code . \begin{eqnarray} \{ <var:L> = <var:s> \} \\ <var:x1> := <var:L> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <var:s> \} \\ <var:x2> := <var:x1> * <var:L> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:L> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \} \\ <var:x4> := <var:x3> * <var:L> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \land <var:x4> = <var:s> ^ <nat:4> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \land <var:x4> = <var:s> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x1> := <var:x1> * <nat:6> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <nat:6> \cdot <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \land <var:x4> = <var:s> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x2> := <var:x2> * <nat:6> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <nat:6> \cdot <var:s> \land <var:x2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \land <var:x4> = <var:s> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x3> := <var:x3> * <nat:3> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <nat:6> \cdot <var:s> \land <var:x2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:x3> = <nat:3> \cdot <var:s> ^ <nat:3> \land <var:x4> = <var:s> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:x4> := <var:x4> * <nat:2> ; \\ \{ <var:L> = <var:s> \land <var:x1> = <nat:6> \cdot <var:s> \land <var:x2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:x3> = <nat:3> \cdot <var:s> ^ <nat:3> \land <var:x4> = <nat:2> \cdot <var:s> ^ <nat:4> \land <var:x0> = <nat:1> \} \\ <var:A> := <var:x4> \\ \{ <var:L> = <var:s> \land <var:x1> = <nat:6> \cdot <var:s> \land <var:x2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:x3> = <nat:3> \cdot <var:s> ^ <nat:3> \land <var:x0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:s> ^ <nat:4> \} \\ <var:A> := <var:A> + <var:x3> \\ \{ <var:L> = <var:s> \land <var:x1> = <nat:6> \cdot <var:s> \land <var:x2> = <nat:6> \cdot <var:s> ^ <nat:2> \land <var:x0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:x2> \\ \{ <var:L> = <var:s> \land <var:x1> = <nat:6> \cdot <var:s> \land <var:x0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:x1> \\ \{ <var:L> = <var:s> \land <var:x0> = <nat:1> \land <var:A> = <nat:2> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> + <nat:6> \cdot <var:s> \} \\ <var:A> := <var:A> + <var:x0> \\ \{ <var:L> = <var:s> \land <var:A> = <nat:2> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> + <nat:6> \cdot <var:s> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <var:x4> : string := " <var:x4> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <var:x1> := <var:L> ; <var:x2> := <var:x1> * <var:L> ; <var:x3> := <var:x2> * <var:L> ; <var:x4> := <var:x3> * <var:L> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:6> ; <var:x2> := <var:x2> * <nat:6> ; <var:x3> := <var:x3> * <nat:3> ; <var:x4> := <var:x4> * <nat:2> ; <var:A> := <var:x4> <var:A> := <var:A> + <var:x3> <var:A> := <var:A> + <var:x2> <var:A> := <var:A> + <var:x1> <var:A> := <var:A> + <var:x0> {{ <var:A> = <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <var:s> /\ <var:x2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x3> = <var:s> ^ <nat:3> /\ <var:x4> = <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x3> = <var:s> ^ <nat:3> /\ <var:x4> = <var:s> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <nat:6> * <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x3> = <var:s> ^ <nat:3> /\ <var:x4> = <var:s> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <nat:6> * <var:s> /\ <var:x2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:x3> = <var:s> ^ <nat:3> /\ <var:x4> = <var:s> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <nat:6> * <var:s> /\ <var:x2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:x4> = <var:s> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <nat:6> * <var:s> /\ <var:x2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:x4> = <nat:2> * <var:s> ^ <nat:4> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <nat:6> * <var:s> /\ <var:x2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:x0> = <nat:1> /\ <var:A> = <nat:2> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <nat:6> * <var:s> /\ <var:x2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:x0> = <nat:1> /\ <var:A> = <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x1> = <nat:6> * <var:s> /\ <var:x0> = <nat:1> /\ <var:A> = <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:x0> = <nat:1> /\ <var:A> = <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:A> = <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 