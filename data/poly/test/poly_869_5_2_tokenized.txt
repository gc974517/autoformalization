\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:1> + <var:W> * <var:j> ; <var:W> := <nat:4> + <var:W> * <var:j> ; <var:W> := <nat:3> + <var:W> * <var:j> ; <var:W> := <nat:3> + <var:W> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Allowing given some natural coefficients $ <var:V> $ it to be that $ <var:j> = <var:V> $ before executing our segment of code then we see $ <var:W> = <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the segment of code can be accomplished using usual Hoare reasoning . Paying attention to the upcoming bit of code seen in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:V> \} & <var:W> := <nat:3> & \{ <var:j> = <var:V> \land <var:W> = <nat:3> \} \end{tabular} This is deduced through the variable binding scheme given in Hoare reasoning . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:j> = <var:V> \} & <var:W> := <nat:3> & \{ <var:j> = <var:V> \land <var:W> = <nat:3> \} \\ \{ <var:j> = <var:V> \land <var:W> = <nat:3> \} & <var:W> := <nat:1> + <var:W> * <var:j> & \{ <var:j> = <var:V> \land <var:W> = <nat:3> \times <var:V> + <nat:1> \} \\ \{ <var:j> = <var:V> \land <var:W> = <nat:3> \times <var:V> + <nat:1> \} & <var:W> := <nat:4> + <var:W> * <var:j> & \{ <var:j> = <var:V> \land <var:W> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:4> \} \end{tabular} Going to the next step , \[ \begin{tabular} {rcl} \{ <var:j> = <var:V> \} & <var:W> := <nat:3> & \{ <var:j> = <var:V> \land <var:W> = <nat:3> \} \end{tabular} This is shown using the binding inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:3> ; <var:W> := <nat:1> + <var:W> * <var:j> ; <var:W> := <nat:4> + <var:W> * <var:j> ; <var:W> := <nat:3> + <var:W> * <var:j> ; <var:W> := <nat:3> + <var:W> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:j> = <var:V> }} <def:poly> {{ <var:W> = <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:W> = <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:W> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:W> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:W> = <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 