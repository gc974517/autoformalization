\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:5> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:s> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:s> ; <var:x2> := <var:x2> * <var:s> ; <var:x3> := <nat:1> ; <var:x3> := <var:x3> * <var:s> ; <var:x3> := <var:x3> * <var:s> ; <var:x3> := <var:x3> * <var:s> ; <var:E> := <var:x3> ; <var:E> := <var:E> + <var:x2> ; <var:E> := <var:E> + <var:x1> ; <var:E> := <var:E> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:s> = <var:m> $ prior to the evaluation of this code , it must be that we have $ <var:E> = <nat:1> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:7> \times <var:m> + <nat:5> $ once code segment finishes . \end{theorem} \begin{proof} Applying typical Hoare logic returns : \begin{eqnarray} \{ <var:s> = <var:m> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \} \\ <var:x1> := <nat:7> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \} \\ <var:x1> := <var:x1> * <var:s> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \} \\ <var:x2> := <nat:4> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:x2> = <nat:4> \} \\ <var:x2> := <var:x2> * <var:s> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:x2> = <nat:4> \cdot <var:m> \} \\ <var:x2> := <var:x2> * <var:s> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:x2> = <nat:4> \cdot <var:m> ^ <nat:2> \} \\ <var:x3> := <nat:1> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:x2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:x3> = <nat:1> \} \\ <var:x3> := <var:x3> * <var:s> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:x2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:m> \} \\ <var:x3> := <var:x3> * <var:s> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:x2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:m> ^ <nat:2> \} \\ <var:x3> := <var:x3> * <var:s> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:x2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:m> ^ <nat:3> \} \\ <var:E> := <var:x3> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:x2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:E> = <nat:1> \cdot <var:m> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:x2> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \cdot <var:m> \land <var:E> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:x1> ; \\ \{ <var:s> = <var:m> \land <var:x0> = <nat:5> \land <var:E> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:7> \cdot <var:m> \} \\ <var:E> := <var:E> + <var:x0> \\ \{ <var:s> = <var:m> \land <var:E> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:7> \cdot <var:m> + <nat:5> \} \end{eqnarray} Thusly , the set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x0> := <nat:5> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:s> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:s> ; <var:x2> := <var:x2> * <var:s> ; <var:x3> := <nat:1> ; <var:x3> := <var:x3> * <var:s> ; <var:x3> := <var:x3> * <var:s> ; <var:x3> := <var:x3> * <var:s> ; <var:E> := <var:x3> ; <var:E> := <var:E> + <var:x2> ; <var:E> := <var:E> + <var:x1> ; <var:E> := <var:E> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:s> = <var:m> }} <def:poly> {{ <var:E> = <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:E> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:m> /\ <var:E> = <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:x0> = <nat:5> /\ <var:E> = <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:m> /\ <var:E> = <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 