\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:C> ; <var:m2> := <var:m1> * <var:C> ; <var:m3> := <var:m2> * <var:C> ; <var:m4> := <var:m3> * <var:C> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:2> ; <var:m4> := <var:m4> * <nat:3> ; <var:c> := <var:m4> <var:c> := <var:c> + <var:m3> <var:c> := <var:c> + <var:m2> <var:c> := <var:c> + <var:m1> <var:c> := <var:c> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:C> = <var:Z> $ ahead of evaluating this set of commands it holds that $ <var:c> = <nat:3> \times <var:Z> ^ <nat:4> + <nat:2> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:1> $ once set of commands has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare logic produces : \begin{eqnarray} \{ <var:C> = <var:Z> \} \\ <var:m1> := <var:C> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <var:Z> \} \\ <var:m2> := <var:m1> * <var:C> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <var:Z> \land <var:m2> = <var:Z> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:C> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <var:Z> \land <var:m2> = <var:Z> ^ <nat:2> \land <var:m3> = <var:Z> ^ <nat:3> \} \\ <var:m4> := <var:m3> * <var:C> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <var:Z> \land <var:m2> = <var:Z> ^ <nat:2> \land <var:m3> = <var:Z> ^ <nat:3> \land <var:m4> = <var:Z> ^ <nat:4> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <var:Z> \land <var:m2> = <var:Z> ^ <nat:2> \land <var:m3> = <var:Z> ^ <nat:3> \land <var:m4> = <var:Z> ^ <nat:4> \land <var:m0> = <nat:1> \} \\ <var:m1> := <var:m1> * <nat:2> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m2> = <var:Z> ^ <nat:2> \land <var:m3> = <var:Z> ^ <nat:3> \land <var:m4> = <var:Z> ^ <nat:4> \land <var:m0> = <nat:1> \} \\ <var:m2> := <var:m2> * <nat:3> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m2> = <nat:3> * <var:Z> ^ <nat:2> \land <var:m3> = <var:Z> ^ <nat:3> \land <var:m4> = <var:Z> ^ <nat:4> \land <var:m0> = <nat:1> \} \\ <var:m3> := <var:m3> * <nat:2> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m2> = <nat:3> * <var:Z> ^ <nat:2> \land <var:m3> = <nat:2> * <var:Z> ^ <nat:3> \land <var:m4> = <var:Z> ^ <nat:4> \land <var:m0> = <nat:1> \} \\ <var:m4> := <var:m4> * <nat:3> ; \\ \{ <var:C> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m2> = <nat:3> * <var:Z> ^ <nat:2> \land <var:m3> = <nat:2> * <var:Z> ^ <nat:3> \land <var:m4> = <nat:3> * <var:Z> ^ <nat:4> \land <var:m0> = <nat:1> \} \\ <var:c> := <var:m4> \\ \{ <var:C> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m2> = <nat:3> * <var:Z> ^ <nat:2> \land <var:m3> = <nat:2> * <var:Z> ^ <nat:3> \land <var:m0> = <nat:1> \land <var:c> = <nat:3> * <var:Z> ^ <nat:4> \} \\ <var:c> := <var:c> + <var:m3> \\ \{ <var:C> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m2> = <nat:3> * <var:Z> ^ <nat:2> \land <var:m0> = <nat:1> \land <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:m2> \\ \{ <var:C> = <var:Z> \land <var:m1> = <nat:2> * <var:Z> \land <var:m0> = <nat:1> \land <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:m1> \\ \{ <var:C> = <var:Z> \land <var:m0> = <nat:1> \land <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> \} \\ <var:c> := <var:c> + <var:m0> \\ \{ <var:C> = <var:Z> \land <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> \} \end{eqnarray} Thus , our set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Definition <def:poly> := <var:m1> := <var:C> ; <var:m2> := <var:m1> * <var:C> ; <var:m3> := <var:m2> * <var:C> ; <var:m4> := <var:m3> * <var:C> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:2> ; <var:m4> := <var:m4> * <nat:3> ; <var:c> := <var:m4> <var:c> := <var:c> + <var:m3> <var:c> := <var:c> + <var:m2> <var:c> := <var:c> + <var:m1> <var:c> := <var:c> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:C> = <var:Z> }} <def:poly> {{ <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <var:Z> /\ <var:m2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <var:Z> /\ <var:m2> = <var:Z> ^ <nat:2> /\ <var:m3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <var:Z> /\ <var:m2> = <var:Z> ^ <nat:2> /\ <var:m3> = <var:Z> ^ <nat:3> /\ <var:m4> = <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <var:Z> /\ <var:m2> = <var:Z> ^ <nat:2> /\ <var:m3> = <var:Z> ^ <nat:3> /\ <var:m4> = <var:Z> ^ <nat:4> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m2> = <var:Z> ^ <nat:2> /\ <var:m3> = <var:Z> ^ <nat:3> /\ <var:m4> = <var:Z> ^ <nat:4> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m2> = <nat:3> * <var:Z> ^ <nat:2> /\ <var:m3> = <var:Z> ^ <nat:3> /\ <var:m4> = <var:Z> ^ <nat:4> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m2> = <nat:3> * <var:Z> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:Z> ^ <nat:3> /\ <var:m4> = <var:Z> ^ <nat:4> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m2> = <nat:3> * <var:Z> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:Z> ^ <nat:3> /\ <var:m4> = <nat:3> * <var:Z> ^ <nat:4> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m2> = <nat:3> * <var:Z> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:Z> ^ <nat:3> /\ <var:m0> = <nat:1> /\ <var:c> = <nat:3> * <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m2> = <nat:3> * <var:Z> ^ <nat:2> /\ <var:m0> = <nat:1> /\ <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m0> = <nat:1> /\ <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:m0> = <nat:1> /\ <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:c> = <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 