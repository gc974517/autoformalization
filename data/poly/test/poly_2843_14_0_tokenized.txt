\begin{document} \begin{theorem} We define a series of instructions such that \begin{verbatim} <var:Q0> := <nat:6> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:E> ; <var:Q2> := <nat:3> ; <var:Q2> := <var:Q2> * <var:E> ; <var:Q2> := <var:Q2> * <var:E> ; <var:Q3> := <nat:4> ; <var:Q3> := <var:Q3> * <var:E> ; <var:Q3> := <var:Q3> * <var:E> ; <var:Q3> := <var:Q3> * <var:E> ; <var:u> := <var:Q3> ; <var:u> := <var:u> + <var:Q2> ; <var:u> := <var:u> + <var:Q1> ; <var:u> := <var:u> + <var:Q0> \end{verbatim} Assuming with some natural numbers $ <var:G> $ that we have $ <var:E> = <var:G> $ prior to the evaluation of the set of commands , it follows that we see $ <var:u> = <nat:4> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:6> $ when list of commands has finished . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:E> = <var:G> \} \\ <var:Q0> := <nat:6> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \} \\ <var:Q1> := <nat:9> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <var:E> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \} \\ <var:Q2> := <nat:3> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:Q2> = <nat:3> \} \\ <var:Q2> := <var:Q2> * <var:E> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:Q2> = <nat:3> \times <var:G> \} \\ <var:Q2> := <var:Q2> * <var:E> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:Q2> = <nat:3> \times <var:G> ^ <nat:2> \} \\ <var:Q3> := <nat:4> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:Q2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:Q3> = <nat:4> \} \\ <var:Q3> := <var:Q3> * <var:E> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:Q2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:Q3> = <nat:4> \times <var:G> \} \\ <var:Q3> := <var:Q3> * <var:E> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:Q2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:Q3> = <nat:4> \times <var:G> ^ <nat:2> \} \end{eqnarray} Furthering interpreting our list of commands returns : \begin{eqnarray} <var:Q3> := <var:Q3> * <var:E> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:Q2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:Q3> = <nat:4> \times <var:G> ^ <nat:3> \} \\ <var:u> := <var:Q3> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:Q2> = <nat:3> \times <var:G> ^ <nat:2> \land <var:u> = <nat:4> \times <var:G> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:Q2> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:9> \times <var:G> \land <var:u> = <nat:4> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:Q1> ; \\ \{ <var:E> = <var:G> \land <var:Q0> = <nat:6> \land <var:u> = <nat:4> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> + <nat:9> \times <var:G> \} \\ <var:u> := <var:u> + <var:Q0> \\ \{ <var:E> = <var:G> \land <var:u> = <nat:4> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> + <nat:9> \times <var:G> + <nat:6> \} \end{eqnarray} Given the preceding argument , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:E> = <var:G> }} <var:Q0> := <nat:6> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:E> ; <var:Q2> := <nat:3> ; <var:Q2> := <var:Q2> * <var:E> ; <var:Q2> := <var:Q2> * <var:E> ; <var:Q3> := <nat:4> ; <var:Q3> := <var:Q3> * <var:E> ; <var:Q3> := <var:Q3> * <var:E> ; <var:Q3> := <var:Q3> * <var:E> ; <var:u> := <var:Q3> ; <var:u> := <var:u> + <var:Q2> ; <var:u> := <var:u> + <var:Q1> ; <var:u> := <var:u> + <var:Q0> {{ <var:u> = <nat:4> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:Q2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:Q2> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:Q2> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:Q2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:Q3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:Q2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:Q2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:Q2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:Q2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:u> = <nat:4> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:9> * <var:G> /\ <var:u> = <nat:4> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:Q0> = <nat:6> /\ <var:u> = <nat:4> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:u> = <nat:4> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 