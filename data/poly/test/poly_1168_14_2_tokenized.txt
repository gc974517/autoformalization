\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:2> ; <var:U> := <nat:3> + <var:U> * <var:u> ; <var:U> := <nat:4> + <var:U> * <var:u> ; <var:U> := <var:U> * <var:u> ; <var:U> := <nat:4> + <var:U> * <var:u> ; <var:U> := <var:U> * <var:u> ; <var:U> := <nat:3> + <var:U> * <var:u> ; <var:U> := <nat:4> + <var:U> * <var:u> ; <var:U> := <nat:1> + <var:U> * <var:u> ; <var:U> := <nat:3> + <var:U> * <var:u> ; <var:U> := <var:U> * <var:u> ; <var:U> := <nat:4> + <var:U> * <var:u> ; <var:U> := <nat:1> + <var:U> * <var:u> ; <var:U> := <nat:2> + <var:U> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> in \emph{Imp} . Allowing for all integers $ <var:p> $ it to hold that $ <var:u> = <var:p> $ ahead of executing the list of commands , it holds that $ <var:U> = <nat:2> \cdot <var:p> ^ <nat:13> + <nat:3> \cdot <var:p> ^ <nat:12> + <nat:4> \cdot <var:p> ^ <nat:11> + <nat:4> \cdot <var:p> ^ <nat:9> + <nat:3> \cdot <var:p> ^ <nat:7> + <nat:4> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:4> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:p> \} \\ <var:U> := <nat:2> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> \} \\ <var:U> := <nat:3> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> + <nat:3> \} \\ <var:U> := <nat:4> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> \} \end{eqnarray} Advancing interpreting the series of commands gives us : \begin{eqnarray} <var:U> := <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + \} \end{eqnarray} Allowing running this code returns : \begin{eqnarray} <var:U> := <nat:4> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> \} \\ <var:U> := <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + \} \\ <var:U> := <nat:3> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> \} \\ <var:U> := <nat:4> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> + <nat:4> \} \\ <var:U> := <nat:1> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> \} \\ <var:U> := <nat:3> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:9> + <nat:3> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> \} \\ <var:U> := <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:10> + <nat:3> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + \} \\ <var:U> := <nat:4> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:11> + <nat:3> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> \} \\ <var:U> := <nat:1> + <var:U> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:12> + <nat:3> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:1> \} \\ <var:U> := <nat:2> + <var:U> * <var:u> \\ \{ <var:u> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:13> + <nat:3> * <var:p> ^ <nat:12> + <nat:4> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:9> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:2> ; <var:U> := <nat:3> + <var:U> * <var:u> ; <var:U> := <nat:4> + <var:U> * <var:u> ; <var:U> := <var:U> * <var:u> ; <var:U> := <nat:4> + <var:U> * <var:u> ; <var:U> := <var:U> * <var:u> ; <var:U> := <nat:3> + <var:U> * <var:u> ; <var:U> := <nat:4> + <var:U> * <var:u> ; <var:U> := <nat:1> + <var:U> * <var:u> ; <var:U> := <nat:3> + <var:U> * <var:u> ; <var:U> := <var:U> * <var:u> ; <var:U> := <nat:4> + <var:U> * <var:u> ; <var:U> := <nat:1> + <var:U> * <var:u> ; <var:U> := <nat:2> + <var:U> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:u> = <var:p> }} <def:poly> {{ <var:U> = <nat:2> * <var:p> ^ <nat:13> + <nat:3> * <var:p> ^ <nat:12> + <nat:4> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:9> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:9> + <nat:3> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:10> + <nat:3> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:11> + <nat:3> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:12> + <nat:3> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:13> + <nat:3> * <var:p> ^ <nat:12> + <nat:4> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:9> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 