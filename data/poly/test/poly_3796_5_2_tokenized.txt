\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:1> + <var:i> * <var:f> ; <var:i> := <nat:3> + <var:i> * <var:f> ; <var:i> := <nat:1> + <var:i> * <var:f> ; <var:i> := <nat:4> + <var:i> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:f> = <var:M> $ before the execution of the list of commands , it holds that we have $ <var:i> = <nat:3> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:M> \} \\ <var:i> := <nat:3> ; \\ \{ <var:f> = <var:M> \land <var:i> = <nat:3> \} \\ <var:i> := <nat:1> + <var:i> * <var:f> ; \\ \{ <var:f> = <var:M> \land <var:i> = <nat:3> * <var:M> + <nat:1> \} \\ <var:i> := <nat:3> + <var:i> * <var:f> ; \\ \{ <var:f> = <var:M> \land <var:i> = <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> \} \\ <var:i> := <nat:1> + <var:i> * <var:f> ; \\ \{ <var:f> = <var:M> \land <var:i> = <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> \} \\ <var:i> := <nat:4> + <var:i> * <var:f> \\ \{ <var:f> = <var:M> \land <var:i> = <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:3> ; <var:i> := <nat:1> + <var:i> * <var:f> ; <var:i> := <nat:3> + <var:i> * <var:f> ; <var:i> := <nat:1> + <var:i> * <var:f> ; <var:i> := <nat:4> + <var:i> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:f> = <var:M> }} <def:poly> {{ <var:i> = <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:i> = <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:i> = <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:i> = <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:i> = <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 