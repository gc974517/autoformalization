\begin{document} \begin{theorem} Let the following code as follows \begin{verbatim} <var:i1> := <var:C> ; <var:i2> := <var:i1> * <var:C> ; <var:i3> := <var:i2> * <var:C> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:5> ; <var:i2> := <var:i2> * <nat:5> ; <var:i3> := <var:i3> * <nat:2> ; <var:m> := <var:i3> <var:m> := <var:m> + <var:i2> <var:m> := <var:m> + <var:i1> <var:m> := <var:m> + <var:i0> \end{verbatim} Assume it to hold that $ <var:C> = <var:T> $ for some positive integer coefficients $ <var:T> $ before executing this set of instructions it follows that $ <var:m> = <nat:2> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:2> $ once segment of code exits . \end{theorem} \begin{proof} The course of logic for our program can be done using the below decorated list of instructions . \begin{eqnarray} \{ <var:C> = <var:T> \} \\ <var:i1> := <var:C> ; \\ \{ <var:C> = <var:T> \land <var:i1> = <var:T> \} \\ <var:i2> := <var:i1> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:i1> = <var:T> \land <var:i2> = <var:T> ^ <nat:2> \} \\ <var:i3> := <var:i2> * <var:C> ; \\ \{ <var:C> = <var:T> \land <var:i1> = <var:T> \land <var:i2> = <var:T> ^ <nat:2> \land <var:i3> = <var:T> ^ <nat:3> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:C> = <var:T> \land <var:i1> = <var:T> \land <var:i2> = <var:T> ^ <nat:2> \land <var:i3> = <var:T> ^ <nat:3> \land <var:i0> = <nat:2> \} \\ <var:i1> := <var:i1> * <nat:5> ; \\ \{ <var:C> = <var:T> \land <var:i1> = <nat:5> \cdot <var:T> \land <var:i2> = <var:T> ^ <nat:2> \land <var:i3> = <var:T> ^ <nat:3> \land <var:i0> = <nat:2> \} \\ <var:i2> := <var:i2> * <nat:5> ; \\ \{ <var:C> = <var:T> \land <var:i1> = <nat:5> \cdot <var:T> \land <var:i2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:i3> = <var:T> ^ <nat:3> \land <var:i0> = <nat:2> \} \\ <var:i3> := <var:i3> * <nat:2> ; \\ \{ <var:C> = <var:T> \land <var:i1> = <nat:5> \cdot <var:T> \land <var:i2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:i3> = <nat:2> \cdot <var:T> ^ <nat:3> \land <var:i0> = <nat:2> \} \\ <var:m> := <var:i3> \\ \{ <var:C> = <var:T> \land <var:i1> = <nat:5> \cdot <var:T> \land <var:i2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:i0> = <nat:2> \land <var:m> = <nat:2> \cdot <var:T> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:i2> \\ \{ <var:C> = <var:T> \land <var:i1> = <nat:5> \cdot <var:T> \land <var:i0> = <nat:2> \land <var:m> = <nat:2> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:i1> \\ \{ <var:C> = <var:T> \land <var:i0> = <nat:2> \land <var:m> = <nat:2> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> + <nat:5> \cdot <var:T> \} \\ <var:m> := <var:m> + <var:i0> \\ \{ <var:C> = <var:T> \land <var:m> = <nat:2> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> + <nat:5> \cdot <var:T> + <nat:2> \} \end{eqnarray} Applying standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:C> = <var:T> }} <var:i1> := <var:C> ; <var:i2> := <var:i1> * <var:C> ; <var:i3> := <var:i2> * <var:C> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:5> ; <var:i2> := <var:i2> * <nat:5> ; <var:i3> := <var:i3> * <nat:2> ; <var:m> := <var:i3> <var:m> := <var:m> + <var:i2> <var:m> := <var:m> + <var:i1> <var:m> := <var:m> + <var:i0> {{ <var:m> = <nat:2> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <var:T> /\ <var:i2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <var:T> /\ <var:i2> = <var:T> ^ <nat:2> /\ <var:i3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <var:T> /\ <var:i2> = <var:T> ^ <nat:2> /\ <var:i3> = <var:T> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <nat:5> * <var:T> /\ <var:i2> = <var:T> ^ <nat:2> /\ <var:i3> = <var:T> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <nat:5> * <var:T> /\ <var:i2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:i3> = <var:T> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <nat:5> * <var:T> /\ <var:i2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:i3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <nat:5> * <var:T> /\ <var:i2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:i0> = <nat:2> /\ <var:m> = <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i1> = <nat:5> * <var:T> /\ <var:i0> = <nat:2> /\ <var:m> = <nat:2> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:i0> = <nat:2> /\ <var:m> = <nat:2> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:m> = <nat:2> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 