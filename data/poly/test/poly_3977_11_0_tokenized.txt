\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:2> ; <var:l2> := <nat:4> ; <var:l2> := <var:l2> * <var:S> ; <var:l2> := <var:l2> * <var:S> ; <var:l3> := <nat:3> ; <var:l3> := <var:l3> * <var:S> ; <var:l3> := <var:l3> * <var:S> ; <var:l3> := <var:l3> * <var:S> ; <var:y> := <var:l3> ; <var:y> := <var:y> + <var:l2> ; <var:y> := <var:y> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Given , for any $ <var:z> \in \mathbb{Z}^+ $ , that $ <var:S> = <var:z> $ before executing the set of commands it must be that we see $ <var:y> = <nat:3> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:2> $ after code terminates . \end{theorem} \begin{proof} The course of logic for our segment of code is given by the below decorated list of instructions . \begin{eqnarray} \{ <var:S> = <var:z> \} \\ <var:l0> := <nat:2> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \} \\ <var:l2> := <nat:4> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:l2> = <nat:4> \} \\ <var:l2> := <var:l2> * <var:S> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:l2> = <nat:4> * <var:z> \} \\ <var:l2> := <var:l2> * <var:S> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:l2> = <nat:4> * <var:z> ^ <nat:2> \} \\ <var:l3> := <nat:3> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:l2> = <nat:4> * <var:z> ^ <nat:2> \land <var:l3> = <nat:3> \} \\ <var:l3> := <var:l3> * <var:S> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:l2> = <nat:4> * <var:z> ^ <nat:2> \land <var:l3> = <nat:3> * <var:z> \} \\ <var:l3> := <var:l3> * <var:S> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:l2> = <nat:4> * <var:z> ^ <nat:2> \land <var:l3> = <nat:3> * <var:z> ^ <nat:2> \} \\ <var:l3> := <var:l3> * <var:S> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:l2> = <nat:4> * <var:z> ^ <nat:2> \land <var:l3> = <nat:3> * <var:z> ^ <nat:3> \} \\ <var:y> := <var:l3> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:l2> = <nat:4> * <var:z> ^ <nat:2> \land <var:y> = <nat:3> * <var:z> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:l2> ; \\ \{ <var:S> = <var:z> \land <var:l0> = <nat:2> \land <var:y> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:l0> \\ \{ <var:S> = <var:z> \land <var:y> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> \} \end{eqnarray} The application of standard Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l0> := <nat:2> ; <var:l2> := <nat:4> ; <var:l2> := <var:l2> * <var:S> ; <var:l2> := <var:l2> * <var:S> ; <var:l3> := <nat:3> ; <var:l3> := <var:l3> * <var:S> ; <var:l3> := <var:l3> * <var:S> ; <var:l3> := <var:l3> * <var:S> ; <var:y> := <var:l3> ; <var:y> := <var:y> + <var:l2> ; <var:y> := <var:y> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:S> = <var:z> }} <def:poly> {{ <var:y> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:l3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:l3> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:l3> = <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:l3> = <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:y> = <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:l0> = <nat:2> /\ <var:y> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:y> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 