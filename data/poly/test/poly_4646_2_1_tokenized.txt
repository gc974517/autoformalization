\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:2> ; <var:n> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Assuming ( given all positive numbers $ <var:V> $ ) it to be that $ <var:s> = <var:V> $ ahead of interpreting our set of commands it holds that we have $ <var:n> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:V> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:s> = <var:V> \land <var:Y0> = <nat:2> \} \\ <var:n> := <var:Y0> \\ \{ <var:s> = <var:V> \land <var:n> = <nat:2> \} \end{eqnarray} Using typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:n> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:s> = <var:V> }} <def:poly> {{ <var:n> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:n> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 