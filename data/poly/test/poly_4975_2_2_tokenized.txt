\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:s> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Assume that $ <var:s> = <var:t> $ ahead of the evaluation of the segment of code it follows that $ <var:v> = <nat:1> * <var:t> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be seen with standard Hoare reasoning . Taking a look at the next pieces of code in our program , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:t> \} & <var:v> := <nat:1> & \{ <var:s> = <var:t> \land <var:v> = <nat:1> \} \\ \{ <var:s> = <var:t> \land <var:v> = <nat:1> \} & <var:v> := <nat:4> + <var:v> * <var:s& \{ <var:s> = <var:t> \land <var:v> = <nat:1> * <var:t> + <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:s> = <var:t> }} <def:poly> {{ <var:v> = <nat:1> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:v> = <nat:1> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 