\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:S0> := <nat:5> ; <var:y> := <var:S0> \end{verbatim} Allow , given any positive coefficients $ <var:Y> $ , it to hold that $ <var:M> = <var:Y> $ before evaluating this set of commands , it holds that we see $ <var:y> = <nat:5> $ after set of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:Y> \} \\ <var:S0> := <nat:5> ; \\ \{ <var:M> = <var:Y> \land <var:S0> = <nat:5> \} \\ <var:y> := <var:S0> \\ \{ <var:M> = <var:Y> \land <var:y> = <nat:5> \} \end{eqnarray} The application of standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:M> = <var:Y> }} <var:S0> := <nat:5> ; <var:y> := <var:S0> {{ <var:y> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:y> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 