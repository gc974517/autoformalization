\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:H> ; <var:x2> := <nat:9> ; <var:x2> := <var:x2> * <var:H> ; <var:x2> := <var:x2> * <var:H> ; <var:h> := <var:x2> ; <var:h> := <var:h> + <var:x1> ; <var:h> := <var:h> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assume that we have $ <var:H> = <var:z> $ prior to evaluating the set of instructions then we see $ <var:h> = <nat:9> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> $ when set of commands executes . \end{theorem} \begin{proof} The flow of logic for our set of instructions can be seen by usual Hoare reasoning . Next , \verb | { <var:H> = <var:z> } <var:x0> := <nat:1> { <var:H> = <var:z> \land <var:x0> = <nat:1> } | and \verb | { <var:H> = <var:z> \land <var:x0> = <nat:1> } <var:x1> := <nat:2> { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> } | . This is deduced through the binding law in typical Hoare logic . Considering the next commands seen in the code segment , we see \verb | { <var:H> = <var:z> } <var:x0> := <nat:1> { <var:H> = <var:z> \land <var:x0> = <nat:1> } | , \verb | { <var:H> = <var:z> \land <var:x0> = <nat:1> } <var:x1> := <nat:2> { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> } | , \verb | { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> } <var:x1> := <var:x1> * <var:H> { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> } | , \verb | { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> } <var:x2> := <nat:9> { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> \land <var:x2> = <nat:9> } | , \verb | { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> \land <var:x2> = <nat:9> } <var:x2> := <var:x2> * <var:H> { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> \land <var:x2> = <nat:9> \cdot <var:z> } | , \verb | { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> \land <var:x2> = <nat:9> \cdot <var:z> } <var:x2> := <var:x2> * <var:H> { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> \land <var:x2> = <nat:9> \cdot <var:z> ^ <nat:2> } | and \verb | { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> \land <var:x2> = <nat:9> \cdot <var:z> ^ <nat:2> } <var:h> := <var:x2> { <var:H> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:z> \land <var:h> = <nat:9> \cdot <var:z> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:H> ; <var:x2> := <nat:9> ; <var:x2> := <var:x2> * <var:H> ; <var:x2> := <var:x2> * <var:H> ; <var:h> := <var:x2> ; <var:h> := <var:h> + <var:x1> ; <var:h> := <var:h> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:H> = <var:z> }} <def:poly> {{ <var:h> = <nat:9> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:h> = <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:x0> = <nat:1> /\ <var:h> = <nat:9> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:h> = <nat:9> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 