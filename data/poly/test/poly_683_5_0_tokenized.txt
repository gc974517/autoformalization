\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:b> ; <var:Q> := <var:e1> ; <var:Q> := <var:Q> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for every positive numbers $ <var:i> $ --- $ <var:b> = <var:i> $ before interpreting this program it follows that we have $ <var:Q> = <nat:7> * <var:i> + <nat:7> $ . \end{theorem} \begin{proof} Note that the following decorated code segment . \begin{eqnarray} \{ <var:b> = <var:i> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:b> = <var:i> \land <var:e0> = <nat:7> \} \\ <var:e1> := <nat:7> ; \\ \{ <var:b> = <var:i> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> \} \\ <var:e1> := <var:e1> * <var:b> ; \\ \{ <var:b> = <var:i> \land <var:e0> = <nat:7> \land <var:e1> = <nat:7> * <var:i> \} \\ <var:Q> := <var:e1> ; \\ \{ <var:b> = <var:i> \land <var:e0> = <nat:7> \land <var:Q> = <nat:7> * <var:i> \} \\ <var:Q> := <var:Q> + <var:e0> \\ \{ <var:b> = <var:i> \land <var:Q> = <nat:7> * <var:i> + <nat:7> \} \end{eqnarray} The application of Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:b> ; <var:Q> := <var:e1> ; <var:Q> := <var:Q> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:b> = <var:i> }} <def:poly> {{ <var:Q> = <nat:7> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:e0> = <nat:7> /\ <var:Q> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:Q> = <nat:7> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 