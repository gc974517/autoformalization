\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:a> := <nat:3> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Allowing for any positive integers $ <var:R> $ that we have $ <var:h> = <var:R> $ prior to evaluating this segment of code it must be that we have $ <var:a> = <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> $ when set of instructions has exited . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is demonstrated with usual Hoare logic . Looking at the following statement in our set of commands , the binding statement letting $ <nat:3> $ as $ <var:a>$ . This line forwards the condition $ \{ <var:h> = <var:R> \} $ toward the condition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \} $ . This is shown to be logically sound through the assignment law found in Hoare techniques . After , we see the variable binding statement letting $ <nat:3> + <var:a> * <var:h> $ as $ <var:a>$ . This takes the precondition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \} $ toward the condition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> + <nat:3> \} $ . Following , the variable assignmet code \verb | <var:a> := <nat:4> + <var:a> * <var:h> ; | . This forwards the condition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> + <nat:3> \} $ as the postcondition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + <nat:4> \} $ . This is known to be sound using the assignment scheme given in standard Hoare logic . Shifting focus toward the next piece of code in the code segment , we have the environment update command letting $ <nat:1> + <var:a> * <var:h> $ as $ <var:a>$ . This statement moves the condition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + <nat:4> \} $ toward $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} $ . Considering the proceeding statement found in the set of commands , the variable binding command \verb | <var:a> := <nat:2> + <var:a> * <var:h> ; | . This statement moves the condition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} $ toward the condition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:2> \} $ . After , we have the variable update code letting $ <nat:1> + <var:a> * <var:h> $ to $ <var:a>$ . This command takes $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:5> + <nat:3> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:1> \} $ . This is guaranteed with the assignment rule of standard Hoare logic . Immediately following , we have the binding code defining $ <nat:1> + <var:a> * <var:h$ into $ <var:a>$ . This line takes the condition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:5> + <nat:3> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:1> \} $ as the postcondition $ \{ <var:h> = <var:R> \land <var:a> = <nat:3> \cdot <var:R> ^ <nat:6> + <nat:3> \cdot <var:R> ^ <nat:5> + <nat:4> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:1> \} $ . This is rigorously given using the assignment rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:3> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:h> = <var:R> }} <def:poly> {{ <var:a> = <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a> = <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a> = <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a> = <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a> = <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a> = <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a> = <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 