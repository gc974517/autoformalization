\begin{document} \begin{theorem} Define the following program as follows \begin{verbatim} <var:S0> := <nat:1> ; <var:L> := <var:S0> \end{verbatim} Given $ <var:h> = <var:X> $ given all $ <var:X> \in \mathbb{N} $ ahead of executing our code segment it follows that we have $ <var:L> = <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare logic gives : \begin{eqnarray} \{ <var:h> = <var:X> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:h> = <var:X> \land <var:S0> = <nat:1> \} \\ <var:L> := <var:S0> \\ \{ <var:h> = <var:X> \land <var:L> = <nat:1> \} \end{eqnarray} Thusly , this series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:h> = <var:X> }} <var:S0> := <nat:1> ; <var:L> := <var:S0> {{ <var:L> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:L> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 