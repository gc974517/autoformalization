\begin{document} \begin{theorem} Take a program as \begin{verbatim} <var:K0> := <nat:1> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:t> ; <var:E> := <var:K1> ; <var:E> := <var:E> + <var:K0> \end{verbatim} Allowing --- for any whole numbers $ <var:N> $ --- $ <var:t> = <var:N> $ ahead of evaluating the program , it must be that we have $ <var:E> = <nat:3> \cdot <var:N> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code is accomplished with usual Hoare techniques . Immediately after , we see the variable update line giving $ <nat:1> $ as $ <var:K0>$ . This line advances the precondition $ \{ <var:t> = <var:N> \} $ into the condition $ \{ <var:t> = <var:N> \land <var:K0> = <nat:1> \} $ . Paying attention to the subsequent piece of code in the segment of code , the binding command letting $ <nat:3> $ into $ <var:K1>$ . This code forwards the condition $ \{ <var:t> = <var:N> \land <var:K0> = <nat:1> \} $ as the postcondition $ \{ <var:t> = <var:N> \land <var:K0> = <nat:1> \land <var:K1> = <nat:3> \} $ . This is sound through the assignment inference rule of usual Hoare logic . Keeping momentum , we have the variable update command \verb | <var:K1> := <var:K1> * <var:t> ; | . This command takes the condition $ \{ <var:t> = <var:N> \land <var:K0> = <nat:1> \land <var:K1> = <nat:3> \} $ into the condition $ \{ <var:t> = <var:N> \land <var:K0> = <nat:1> \land <var:K1> = <nat:3> * <var:N> \} $ . This is sound using the assignment inference rule obtained from usual Hoare reasoning . Advancing on , the variable binding command letting $ <var:K1> $ toward $ <var:E>$ . This code advances $ \{ <var:t> = <var:N> \land <var:K0> = <nat:1> \land <var:K1> = <nat:3> * <var:N> \} $ as $ \{ <var:t> = <var:N> \land <var:K0> = <nat:1> \land <var:E> = <nat:3> * <var:N> \} $ . This is deduced with the assignment rule given by typical Hoare reasoning . Taking another step toward the subsequent bit of code in our set of commands , the variable assignmet line assigning $ <var:E> + <var:K0$ to $ <var:E>$ . This statement transfers the precondition $ \{ <var:t> = <var:N> \land <var:K0> = <nat:1> \land <var:E> = <nat:3> * <var:N> \} $ toward the postcondition $ \{ <var:t> = <var:N> \land <var:E> = <nat:3> * <var:N> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:t> = <var:N> }} <var:K0> := <nat:1> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:t> ; <var:E> := <var:K1> ; <var:E> := <var:E> + <var:K0> {{ <var:E> = <nat:3> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:K0> = <nat:1> /\ <var:E> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:E> = <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 