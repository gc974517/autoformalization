\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:i> ; <var:j0> := <nat:3> ; <var:j1> := <var:j1> * <nat:3> ; <var:Y> := <var:j1> <var:Y> := <var:Y> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Assuming with some natural coefficients $ <var:w> $ it to hold that $ <var:i> = <var:w> $ before executing this set of instructions then we have $ <var:Y> = <nat:3> \times <var:w> + <nat:3> $ when program has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for our code can be demonstrated with Hoare reasoning . Taking a look at the following piece of code found in the set of commands , the environment update statement \verb | <var:j1> := <var:i> ; | . This line advances $ \{ <var:i> = <var:w> \} $ toward the postcondition $ \{ <var:i> = <var:w> \land <var:j1> = <var:w> \} $ . After , we see the assignment line binding $ <nat:3> $ to $ <var:j0>$ . This redefines the condition $ \{ <var:i> = <var:w> \land <var:j1> = <var:w> \} $ as the condition $ \{ <var:i> = <var:w> \land <var:j1> = <var:w> \land <var:j0> = <nat:3> \} $ . Moving on to the next step , the binding command \verb | <var:j1> := <var:j1> * <nat:3> ; | . This line forwards the condition $ \{ <var:i> = <var:w> \land <var:j1> = <var:w> \land <var:j0> = <nat:3> \} $ toward $ \{ <var:i> = <var:w> \land <var:j1> = <nat:3> * <var:w> \land <var:j0> = <nat:3> \} $ . Considering the upcoming line of code seen in our list of instructions , we have the variable update command letting $ <var:j1$ into $ <var:Y>$ . This command moves the precondition $ \{ <var:i> = <var:w> \land <var:j1> = <nat:3> * <var:w> \land <var:j0> = <nat:3> \} $ into the postcondition $ \{ <var:i> = <var:w> \land <var:j0> = <nat:3> \land <var:Y> = <nat:3> * <var:w> \} $ . Moving on to the following piece of code found in our code , the variable update statement yielding $ <var:Y> + <var:j0$ toward $ <var:Y>$ . This redefines $ \{ <var:i> = <var:w> \land <var:j0> = <nat:3> \land <var:Y> = <nat:3> * <var:w> \} $ to $ \{ <var:i> = <var:w> \land <var:Y> = <nat:3> * <var:w> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:i> ; <var:j0> := <nat:3> ; <var:j1> := <var:j1> * <nat:3> ; <var:Y> := <var:j1> <var:Y> := <var:Y> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:i> = <var:w> }} <def:poly> {{ <var:Y> = <nat:3> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:j1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:j1> = <var:w> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:j1> = <nat:3> * <var:w> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:j0> = <nat:3> /\ <var:Y> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:Y> = <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 