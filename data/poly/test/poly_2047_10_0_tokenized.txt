\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:1> ; <var:k1> := <nat:6> ; <var:k1> := <var:k1> * <var:N> ; <var:k3> := <nat:3> ; <var:k3> := <var:k3> * <var:N> ; <var:k3> := <var:k3> * <var:N> ; <var:k3> := <var:k3> * <var:N> ; <var:Z> := <var:k3> ; <var:Z> := <var:Z> + <var:k1> ; <var:Z> := <var:Z> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:N> = <var:L> $ prior to the execution of the segment of code it must be that we see $ <var:Z> = <nat:3> \times <var:L> ^ <nat:3> + <nat:6> \times <var:L> + <nat:1> $ after segment of code has exited . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:N> = <var:L> \} \\ <var:k0> := <nat:1> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \} \\ <var:k1> := <nat:6> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \land <var:k1> = <nat:6> \} \\ <var:k1> := <var:k1> * <var:N> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \land <var:k1> = <nat:6> \cdot <var:L> \} \\ <var:k3> := <nat:3> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \land <var:k1> = <nat:6> \cdot <var:L> \land <var:k3> = <nat:3> \} \\ <var:k3> := <var:k3> * <var:N> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \land <var:k1> = <nat:6> \cdot <var:L> \land <var:k3> = <nat:3> \cdot <var:L> \} \\ <var:k3> := <var:k3> * <var:N> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \land <var:k1> = <nat:6> \cdot <var:L> \land <var:k3> = <nat:3> \cdot <var:L> ^ <nat:2> \} \\ <var:k3> := <var:k3> * <var:N> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \land <var:k1> = <nat:6> \cdot <var:L> \land <var:k3> = <nat:3> \cdot <var:L> ^ <nat:3> \} \\ <var:Z> := <var:k3> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \land <var:k1> = <nat:6> \cdot <var:L> \land <var:Z> = <nat:3> \cdot <var:L> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:k1> ; \\ \{ <var:N> = <var:L> \land <var:k0> = <nat:1> \land <var:Z> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:6> \cdot <var:L> \} \\ <var:Z> := <var:Z> + <var:k0> \\ \{ <var:N> = <var:L> \land <var:Z> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:6> \cdot <var:L> + <nat:1> \} \end{eqnarray} As a result , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k0> := <nat:1> ; <var:k1> := <nat:6> ; <var:k1> := <var:k1> * <var:N> ; <var:k3> := <nat:3> ; <var:k3> := <var:k3> * <var:N> ; <var:k3> := <var:k3> * <var:N> ; <var:k3> := <var:k3> * <var:N> ; <var:Z> := <var:k3> ; <var:Z> := <var:Z> + <var:k1> ; <var:Z> := <var:Z> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:N> = <var:L> }} <def:poly> {{ <var:Z> = <nat:3> * <var:L> ^ <nat:3> + <nat:6> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:6> * <var:L> /\ <var:k3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:6> * <var:L> /\ <var:k3> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:6> * <var:L> /\ <var:k3> = <nat:3> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:6> * <var:L> /\ <var:k3> = <nat:3> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:6> * <var:L> /\ <var:Z> = <nat:3> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:k0> = <nat:1> /\ <var:Z> = <nat:3> * <var:L> ^ <nat:3> + <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:Z> = <nat:3> * <var:L> ^ <nat:3> + <nat:6> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 