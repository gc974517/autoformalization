\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:8> ; <var:x1> := <var:x1> * <var:S> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:S> ; <var:x2> := <var:x2> * <var:S> ; <var:x3> := <nat:1> ; <var:x3> := <var:x3> * <var:S> ; <var:x3> := <var:x3> * <var:S> ; <var:x3> := <var:x3> * <var:S> ; <var:a> := <var:x3> ; <var:a> := <var:a> + <var:x2> ; <var:a> := <var:a> + <var:x1> ; <var:a> := <var:a> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Allow $ <var:S> = <var:l> $ ahead of interpreting our code , it follows that we have $ <var:a> = <nat:1> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this set of instructions is given with usual Hoare techniques . Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:S> = <var:l> \} & <var:x0> := <nat:1> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \} & <var:x1> := <nat:8> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \} & <var:x1> := <var:x1> * <var:S> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \} & <var:x2> := <nat:4> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \} & <var:x2> := <var:x2> * <var:S> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> \} & <var:x2> := <var:x2> * <var:S> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \} & <var:x3> := <nat:1> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:x3> = <nat:1> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:x3> = <nat:1> \} & <var:x3> := <var:x3> * <var:S> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:l> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:l> \} & <var:x3> := <var:x3> * <var:S> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:l> ^ <nat:2> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:l> ^ <nat:2> \} & <var:x3> := <var:x3> * <var:S> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \land <var:x2> = <nat:4> \cdot <var:l> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:l> ^ <nat:3> \} \end{tabular} This is ensured through the variable update rule in standard Hoare techniques . Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:l> \} & <var:x0> := <nat:1> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \} & <var:x1> := <nat:8> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \} \\ \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \} & <var:x1> := <var:x1> * <var:S> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \cdot <var:l> \} \end{tabular} Advancing , \[ \begin{tabular} {rcl} \{ <var:S> = <var:l> \} & <var:x0> := <nat:1> & \{ <var:S> = <var:l> \land <var:x0> = <nat:1> \} \end{tabular} This is shown using the environment update law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:x1> := <nat:8> ; <var:x1> := <var:x1> * <var:S> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:S> ; <var:x2> := <var:x2> * <var:S> ; <var:x3> := <nat:1> ; <var:x3> := <var:x3> * <var:S> ; <var:x3> := <var:x3> * <var:S> ; <var:x3> := <var:x3> * <var:S> ; <var:a> := <var:x3> ; <var:a> := <var:a> + <var:x2> ; <var:a> := <var:a> + <var:x1> ; <var:a> := <var:a> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:S> = <var:l> }} <def:poly> {{ <var:a> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:x2> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:x2> = <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:x2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:x3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:x2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:x2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:x2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:x2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:a> = <nat:1> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:l> /\ <var:a> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:x0> = <nat:1> /\ <var:a> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:a> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 