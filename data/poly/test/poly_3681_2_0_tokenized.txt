\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:6> ; <var:s> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Given it to hold that $ <var:e> = <var:n> $ ahead of the execution of the segment of code it holds that we have $ <var:s> = <nat:6> $ once program has terminated . \end{theorem} \begin{proof} The method of proof for our code can be accomplished using Hoare techniques . Moving on , \begin{eqnarray} \{ <var:e> = <var:n> \} \, <var:q0> := <nat:6> \, \{ <var:e> = <var:n> \land <var:q0> = <nat:6> \} \\ \{ <var:e> = <var:n> \land <var:q0> = <nat:6> \} \, <var:s> := <var:q0\, \{ <var:e> = <var:n> \land <var:s> = <nat:6> \} \end{eqnarray} This is sound using the binding inference rule given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:6> ; <var:s> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:e> = <var:n> }} <def:poly> {{ <var:s> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:s> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 