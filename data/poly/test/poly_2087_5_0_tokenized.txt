\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:5> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:L> ; <var:J> := <var:s1> ; <var:J> := <var:J> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( taking $ <var:C> \in \mathbb{N} $ ) it to be that $ <var:L> = <var:C> $ ahead of executing our list of commands it follows that we have $ <var:J> = <nat:4> \cdot <var:C> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:C> \} \\ <var:s0> := <nat:5> ; \\ \{ <var:L> = <var:C> \land <var:s0> = <nat:5> \} \\ <var:s1> := <nat:4> ; \\ \{ <var:L> = <var:C> \land <var:s0> = <nat:5> \land <var:s1> = <nat:4> \} \\ <var:s1> := <var:s1> * <var:L> ; \\ \{ <var:L> = <var:C> \land <var:s0> = <nat:5> \land <var:s1> = <nat:4> * <var:C> \} \\ <var:J> := <var:s1> ; \\ \{ <var:L> = <var:C> \land <var:s0> = <nat:5> \land <var:J> = <nat:4> * <var:C> \} \\ <var:J> := <var:J> + <var:s0> \\ \{ <var:L> = <var:C> \land <var:J> = <nat:4> * <var:C> + <nat:5> \} \end{eqnarray} The application of standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:5> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:L> ; <var:J> := <var:s1> ; <var:J> := <var:J> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:L> = <var:C> }} <def:poly> {{ <var:J> = <nat:4> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:s0> = <nat:5> /\ <var:J> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:J> = <nat:4> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 