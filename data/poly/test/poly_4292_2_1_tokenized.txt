\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:x0> := <nat:3> ; <var:k> := <var:x0> \end{verbatim} Given that $ <var:I> = <var:D> $ prior to the evaluation of our program then we have $ <var:k> = <nat:3> $ once code executes . \end{theorem} \begin{proof} The proof of our segment of code is demonstrated by Hoare logic . Looking at the subsequent statement in the code , \begin{eqnarray} \{ <var:I> = <var:D> \} \, <var:x0> := <nat:3> \, \{ <var:I> = <var:D> \land <var:x0> = <nat:3> \} \end{eqnarray} Advancing on , we see \begin{eqnarray} \{ <var:I> = <var:D> \} \, <var:x0> := <nat:3> \, \{ <var:I> = <var:D> \land <var:x0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:I> = <var:D> }} <var:x0> := <nat:3> ; <var:k> := <var:x0> {{ <var:k> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:k> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 