\begin{document} \begin{theorem} Take the following program such that \begin{verbatim} <var:V0> := <nat:1> ; <var:o> := <var:V0> \end{verbatim} Assume that we have $ <var:k> = <var:Q> $ ( assuming some integers $ <var:Q> $ ) prior to the evaluation of the list of commands , it must be that we have $ <var:o> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:Q> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:k> = <var:Q> \land <var:V0> = <nat:1> \} \\ <var:o> := <var:V0> \\ \{ <var:k> = <var:Q> \land <var:o> = <nat:1> \} \end{eqnarray} The application of standard Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:k> = <var:Q> }} <var:V0> := <nat:1> ; <var:o> := <var:V0> {{ <var:o> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:o> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 