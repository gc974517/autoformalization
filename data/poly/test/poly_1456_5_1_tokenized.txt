\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:o1> := <var:N> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:5> ; <var:Z> := <var:o1> <var:Z> := <var:Z> + <var:o0> \end{verbatim} Assume it to hold that $ <var:N> = <var:a> $ prior to the evaluation of our code segment , it follows that $ <var:Z> = <nat:5> \times <var:a> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our program is clear by usual Hoare reasoning . Advancing to the upcoming piece of code in the program , we see the assignment command \verb | <var:o1> := <var:N> ; | . This redefines the precondition $ \{ <var:N> = <var:a> \} $ as the condition $ \{ <var:N> = <var:a> \land <var:o1> = <var:a> \} $ . Moving forward to the proceeding statement seen in our set of instructions , we see the variable update code giving $ <nat:8> $ to $ <var:o0>$ . This code forwards the precondition $ \{ <var:N> = <var:a> \land <var:o1> = <var:a> \} $ to the condition $ \{ <var:N> = <var:a> \land <var:o1> = <var:a> \land <var:o0> = <nat:8> \} $ . This is ensured using the assignment law defined in Hoare techniques . Moving forward to the next step , we see the variable update code yielding $ <var:o1> * <nat:5> $ to $ <var:o1>$ . This code redefines $ \{ <var:N> = <var:a> \land <var:o1> = <var:a> \land <var:o0> = <nat:8> \} $ into the postcondition $ \{ <var:N> = <var:a> \land <var:o1> = <nat:5> * <var:a> \land <var:o0> = <nat:8> \} $ . Immediately after , we have the variable assignmet line letting $ <var:o1$ toward $ <var:Z>$ . This statement redefines $ \{ <var:N> = <var:a> \land <var:o1> = <nat:5> * <var:a> \land <var:o0> = <nat:8> \} $ into the postcondition $ \{ <var:N> = <var:a> \land <var:o0> = <nat:8> \land <var:Z> = <nat:5> * <var:a> \} $ . Shifting focus toward the next command contained in our code segment , we see the binding command \verb | <var:Z> := <var:Z> + <var:o0> | . This command advances $ \{ <var:N> = <var:a> \land <var:o0> = <nat:8> \land <var:Z> = <nat:5> * <var:a> \} $ into the postcondition $ \{ <var:N> = <var:a> \land <var:Z> = <nat:5> * <var:a> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:N> = <var:a> }} <var:o1> := <var:N> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:5> ; <var:Z> := <var:o1> <var:Z> := <var:Z> + <var:o0> {{ <var:Z> = <nat:5> * <var:a> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:o1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:o1> = <var:a> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:o1> = <nat:5> * <var:a> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:o0> = <nat:8> /\ <var:Z> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:Z> = <nat:5> * <var:a> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 