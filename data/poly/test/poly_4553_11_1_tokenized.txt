\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:H> ; <var:z2> := <var:z1> * <var:H> ; <var:z3> := <var:z2> * <var:H> ; <var:z0> := <nat:5> ; <var:z1> := <var:z1> * <nat:6> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:9> ; <var:c> := <var:z3> <var:c> := <var:c> + <var:z2> <var:c> := <var:c> + <var:z1> <var:c> := <var:c> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Assuming that we have $ <var:H> = <var:R> $ --- given some positive numbers $ <var:R> $ --- before executing our program , it follows that we have $ <var:c> = <nat:9> \cdot <var:R> ^ <nat:3> + <nat:8> \cdot <var:R> ^ <nat:2> + <nat:6> \cdot <var:R> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for our code is shown using typical Hoare techniques . Jumping to the proceeding pieces of code found in the code , we have \begin{eqnarray} \{ <var:H> = <var:R> \} \, <var:z1> := <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \} \\ \{ <var:H> = <var:R> \land <var:z1> = <var:R> \} \, <var:z2> := <var:z1> * <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \} \\ \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \} \, <var:z3> := <var:z2> * <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \land <var:z3> = <var:R> ^ <nat:3> \} \\ \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \land <var:z3> = <var:R> ^ <nat:3> \} \, <var:z0> := <nat:5> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \land <var:z3> = <var:R> ^ <nat:3> \land <var:z0> = <nat:5> \} \end{eqnarray} This is shown to be logically sound with the variable binding law in standard Hoare techniques . Immediately after , \begin{eqnarray} \{ <var:H> = <var:R> \} \, <var:z1> := <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \} \\ \{ <var:H> = <var:R> \land <var:z1> = <var:R> \} \, <var:z2> := <var:z1> * <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \} \end{eqnarray} Moving forward to the next step , we see \begin{eqnarray} \{ <var:H> = <var:R> \} \, <var:z1> := <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \} \\ \{ <var:H> = <var:R> \land <var:z1> = <var:R> \} \, <var:z2> := <var:z1> * <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \} \\ \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \} \, <var:z3> := <var:z2> * <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \land <var:z3> = <var:R> ^ <nat:3> \} \\ \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \land <var:z3> = <var:R> ^ <nat:3> \} \, <var:z0> := <nat:5> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \land <var:z2> = <var:R> ^ <nat:2> \land <var:z3> = <var:R> ^ <nat:3> \land <var:z0> = <nat:5> \} \end{eqnarray} Moving on to the next line of code in our code , we have \begin{eqnarray} \{ <var:H> = <var:R> \} \, <var:z1> := <var:H> \, \{ <var:H> = <var:R> \land <var:z1> = <var:R> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <def:poly> := <var:z1> := <var:H> ; <var:z2> := <var:z1> * <var:H> ; <var:z3> := <var:z2> * <var:H> ; <var:z0> := <nat:5> ; <var:z1> := <var:z1> * <nat:6> ; <var:z2> := <var:z2> * <nat:8> ; <var:z3> := <var:z3> * <nat:9> ; <var:c> := <var:z3> <var:c> := <var:c> + <var:z2> <var:c> := <var:c> + <var:z1> <var:c> := <var:c> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:H> = <var:R> }} <def:poly> {{ <var:c> = <nat:9> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:6> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <var:R> /\ <var:z2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <var:R> /\ <var:z2> = <var:R> ^ <nat:2> /\ <var:z3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <var:R> /\ <var:z2> = <var:R> ^ <nat:2> /\ <var:z3> = <var:R> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <nat:6> * <var:R> /\ <var:z2> = <var:R> ^ <nat:2> /\ <var:z3> = <var:R> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <nat:6> * <var:R> /\ <var:z2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:z3> = <var:R> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <nat:6> * <var:R> /\ <var:z2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:z3> = <nat:9> * <var:R> ^ <nat:3> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <nat:6> * <var:R> /\ <var:z2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:z0> = <nat:5> /\ <var:c> = <nat:9> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z1> = <nat:6> * <var:R> /\ <var:z0> = <nat:5> /\ <var:c> = <nat:9> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:z0> = <nat:5> /\ <var:c> = <nat:9> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:c> = <nat:9> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:6> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 