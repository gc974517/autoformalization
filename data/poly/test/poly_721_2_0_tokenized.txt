\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:1> ; <var:I> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:g> = <var:s> $ ahead of executing this set of commands , then we see $ <var:I> = <nat:1> $ once code has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:s> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:g> = <var:s> \land <var:q0> = <nat:1> \} \\ <var:I> := <var:q0> \\ \{ <var:g> = <var:s> \land <var:I> = <nat:1> \} \end{eqnarray} Continuing the evaluation of this series of instructions gives : \begin{eqnarray} \end{eqnarray} The application of standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:1> ; <var:I> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:g> = <var:s> }} <def:poly> {{ <var:I> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:I> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 