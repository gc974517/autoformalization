\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:1> ; <var:R> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:t> = <var:L> $ prior to evaluating this series of commands it must be that we see $ <var:R> = <nat:1> $ . \end{theorem} \begin{proof} The application of Hoare reasoning gives us : \begin{eqnarray} \{ <var:t> = <var:L> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:t> = <var:L> \land <var:Q0> = <nat:1> \} \\ <var:R> := <var:Q0> \\ \{ <var:t> = <var:L> \land <var:R> = <nat:1> \} \end{eqnarray} Therefore , this set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:1> ; <var:R> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:t> = <var:L> }} <def:poly> {{ <var:R> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:L> /\ <var:R> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 