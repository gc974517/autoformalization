\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:c1> := <var:G> ; <var:c0> := <nat:9> ; <var:c1> := <var:c1> * <nat:8> ; <var:y> := <var:c1> <var:y> := <var:y> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assuming for any positive numbers $ <var:r> $ it to hold that $ <var:G> = <var:r> $ before evaluating the set of commands , then we see $ <var:y> = <nat:8> \times <var:r> + <nat:9> $ when list of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:r> \} \\ <var:c1> := <var:G> ; \\ \{ <var:G> = <var:r> \land <var:c1> = <var:r> \} \\ <var:c0> := <nat:9> ; \\ \{ <var:G> = <var:r> \land <var:c1> = <var:r> \land <var:c0> = <nat:9> \} \\ <var:c1> := <var:c1> * <nat:8> ; \\ \{ <var:G> = <var:r> \land <var:c1> = <nat:8> \times <var:r> \land <var:c0> = <nat:9> \} \\ <var:y> := <var:c1> \\ \{ <var:G> = <var:r> \land <var:c0> = <nat:9> \land <var:y> = <nat:8> \times <var:r> \} \\ <var:y> := <var:y> + <var:c0> \\ \{ <var:G> = <var:r> \land <var:y> = <nat:8> \times <var:r> + <nat:9> \} \end{eqnarray} Utilizing standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c1> := <var:G> ; <var:c0> := <nat:9> ; <var:c1> := <var:c1> * <nat:8> ; <var:y> := <var:c1> <var:y> := <var:y> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:G> = <var:r> }} <def:poly> {{ <var:y> = <nat:8> * <var:r> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:c1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:c1> = <var:r> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:c1> = <nat:8> * <var:r> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:c0> = <nat:9> /\ <var:y> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:y> = <nat:8> * <var:r> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 