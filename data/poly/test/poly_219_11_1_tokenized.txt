\begin{document} \begin{theorem} Define the following code segment such that \begin{verbatim} <var:v1> := <var:t> ; <var:v2> := <var:v1> * <var:t> ; <var:v3> := <var:v2> * <var:t> ; <var:v0> := <nat:8> ; <var:v1> := <var:v1> * <nat:6> ; <var:v2> := <var:v2> * <nat:8> ; <var:v3> := <var:v3> * <nat:3> ; <var:z> := <var:v3> <var:z> := <var:z> + <var:v2> <var:z> := <var:z> + <var:v1> <var:z> := <var:z> + <var:v0> \end{verbatim} Assuming that $ <var:t> = <var:E> $ --- for all natural numbers $ <var:E> $ --- ahead of the execution of this set of commands then we see $ <var:z> = <nat:3> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:8> $ once code has exited . \end{theorem} \begin{proof} Let the below decorated program . \begin{eqnarray} \{ <var:t> = <var:E> \} \\ <var:v1> := <var:t> ; \\ \{ <var:t> = <var:E> \land <var:v1> = <var:E> \} \\ <var:v2> := <var:v1> * <var:t> ; \\ \{ <var:t> = <var:E> \land <var:v1> = <var:E> \land <var:v2> = <var:E> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:t> ; \\ \{ <var:t> = <var:E> \land <var:v1> = <var:E> \land <var:v2> = <var:E> ^ <nat:2> \land <var:v3> = <var:E> ^ <nat:3> \} \\ <var:v0> := <nat:8> ; \\ \{ <var:t> = <var:E> \land <var:v1> = <var:E> \land <var:v2> = <var:E> ^ <nat:2> \land <var:v3> = <var:E> ^ <nat:3> \land <var:v0> = <nat:8> \} \\ <var:v1> := <var:v1> * <nat:6> ; \\ \{ <var:t> = <var:E> \land <var:v1> = <nat:6> \times <var:E> \land <var:v2> = <var:E> ^ <nat:2> \land <var:v3> = <var:E> ^ <nat:3> \land <var:v0> = <nat:8> \} \\ <var:v2> := <var:v2> * <nat:8> ; \\ \{ <var:t> = <var:E> \land <var:v1> = <nat:6> \times <var:E> \land <var:v2> = <nat:8> \times <var:E> ^ <nat:2> \land <var:v3> = <var:E> ^ <nat:3> \land <var:v0> = <nat:8> \} \\ <var:v3> := <var:v3> * <nat:3> ; \\ \{ <var:t> = <var:E> \land <var:v1> = <nat:6> \times <var:E> \land <var:v2> = <nat:8> \times <var:E> ^ <nat:2> \land <var:v3> = <nat:3> \times <var:E> ^ <nat:3> \land <var:v0> = <nat:8> \} \\ <var:z> := <var:v3> \\ \{ <var:t> = <var:E> \land <var:v1> = <nat:6> \times <var:E> \land <var:v2> = <nat:8> \times <var:E> ^ <nat:2> \land <var:v0> = <nat:8> \land <var:z> = <nat:3> \times <var:E> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:v2> \\ \{ <var:t> = <var:E> \land <var:v1> = <nat:6> \times <var:E> \land <var:v0> = <nat:8> \land <var:z> = <nat:3> \times <var:E> ^ <nat:3> + <nat:8> \times <var:E> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:v1> \\ \{ <var:t> = <var:E> \land <var:v0> = <nat:8> \land <var:z> = <nat:3> \times <var:E> ^ <nat:3> + <nat:8> \times <var:E> ^ <nat:2> + <nat:6> \times <var:E> \} \\ <var:z> := <var:z> + <var:v0> \\ \{ <var:t> = <var:E> \land <var:z> = <nat:3> \times <var:E> ^ <nat:3> + <nat:8> \times <var:E> ^ <nat:2> + <nat:6> \times <var:E> + <nat:8> \} \end{eqnarray} The application of Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:t> = <var:E> }} <var:v1> := <var:t> ; <var:v2> := <var:v1> * <var:t> ; <var:v3> := <var:v2> * <var:t> ; <var:v0> := <nat:8> ; <var:v1> := <var:v1> * <nat:6> ; <var:v2> := <var:v2> * <nat:8> ; <var:v3> := <var:v3> * <nat:3> ; <var:z> := <var:v3> <var:z> := <var:z> + <var:v2> <var:z> := <var:z> + <var:v1> <var:z> := <var:z> + <var:v0> {{ <var:z> = <nat:3> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <var:E> /\ <var:v2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <var:E> /\ <var:v2> = <var:E> ^ <nat:2> /\ <var:v3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <var:E> /\ <var:v2> = <var:E> ^ <nat:2> /\ <var:v3> = <var:E> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <nat:6> * <var:E> /\ <var:v2> = <var:E> ^ <nat:2> /\ <var:v3> = <var:E> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <nat:6> * <var:E> /\ <var:v2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:v3> = <var:E> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <nat:6> * <var:E> /\ <var:v2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:E> ^ <nat:3> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <nat:6> * <var:E> /\ <var:v2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:v0> = <nat:8> /\ <var:z> = <nat:3> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v1> = <nat:6> * <var:E> /\ <var:v0> = <nat:8> /\ <var:z> = <nat:3> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:v0> = <nat:8> /\ <var:z> = <nat:3> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:z> = <nat:3> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 