\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:E1> := <var:N> ; <var:E2> := <var:E1> * <var:N> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:5> ; <var:O> := <var:E2> <var:O> := <var:O> + <var:E1> <var:O> := <var:O> + <var:E0> \end{verbatim} Assume for any positive coefficients $ <var:i> $ that we have $ <var:N> = <var:i> $ ahead of interpreting this series of commands it holds that we see $ <var:O> = <nat:5> * <var:i> ^ <nat:2> + <nat:8> * <var:i> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic yields : \begin{eqnarray} \{ <var:N> = <var:i> \} \\ <var:E1> := <var:N> ; \\ \{ <var:N> = <var:i> \land <var:E1> = <var:i> \} \\ <var:E2> := <var:E1> * <var:N> ; \\ \{ <var:N> = <var:i> \land <var:E1> = <var:i> \land <var:E2> = <var:i> ^ <nat:2> \} \\ <var:E0> := <nat:7> ; \\ \{ <var:N> = <var:i> \land <var:E1> = <var:i> \land <var:E2> = <var:i> ^ <nat:2> \land <var:E0> = <nat:7> \} \\ <var:E1> := <var:E1> * <nat:8> ; \\ \{ <var:N> = <var:i> \land <var:E1> = <nat:8> * <var:i> \land <var:E2> = <var:i> ^ <nat:2> \land <var:E0> = <nat:7> \} \\ <var:E2> := <var:E2> * <nat:5> ; \\ \{ <var:N> = <var:i> \land <var:E1> = <nat:8> * <var:i> \land <var:E2> = <nat:5> * <var:i> ^ <nat:2> \land <var:E0> = <nat:7> \} \\ <var:O> := <var:E2> \\ \{ <var:N> = <var:i> \land <var:E1> = <nat:8> * <var:i> \land <var:E0> = <nat:7> \land <var:O> = <nat:5> * <var:i> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:E1> \\ \{ <var:N> = <var:i> \land <var:E0> = <nat:7> \land <var:O> = <nat:5> * <var:i> ^ <nat:2> + <nat:8> * <var:i> \} \\ <var:O> := <var:O> + <var:E0> \\ \{ <var:N> = <var:i> \land <var:O> = <nat:5> * <var:i> ^ <nat:2> + <nat:8> * <var:i> + <nat:7> \} \end{eqnarray} Thusly , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:N> = <var:i> }} <var:E1> := <var:N> ; <var:E2> := <var:E1> * <var:N> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:5> ; <var:O> := <var:E2> <var:O> := <var:O> + <var:E1> <var:O> := <var:O> + <var:E0> {{ <var:O> = <nat:5> * <var:i> ^ <nat:2> + <nat:8> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:E1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:E1> = <var:i> /\ <var:E2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:E1> = <var:i> /\ <var:E2> = <var:i> ^ <nat:2> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:E1> = <nat:8> * <var:i> /\ <var:E2> = <var:i> ^ <nat:2> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:E1> = <nat:8> * <var:i> /\ <var:E2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:E1> = <nat:8> * <var:i> /\ <var:E0> = <nat:7> /\ <var:O> = <nat:5> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:E0> = <nat:7> /\ <var:O> = <nat:5> * <var:i> ^ <nat:2> + <nat:8> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:O> = <nat:5> * <var:i> ^ <nat:2> + <nat:8> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 