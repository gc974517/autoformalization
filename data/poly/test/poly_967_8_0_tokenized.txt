\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:4> ; <var:f4> := <nat:2> ; <var:f4> := <var:f4> * <var:T> ; <var:f4> := <var:f4> * <var:T> ; <var:f4> := <var:f4> * <var:T> ; <var:f4> := <var:f4> * <var:T> ; <var:L> := <var:f4> ; <var:L> := <var:L> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:T> = <var:K> $ prior to evaluating the program then we see $ <var:L> = <nat:2> \cdot <var:K> ^ <nat:4> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the program is given using typical Hoare reasoning . Moving on , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:K> \} & <var:f0> := <nat:4> & \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \} \\ \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \} & <var:f4> := <nat:2> & \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \} \\ \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \} & <var:f4> := <var:f4> * <var:T> & \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \cdot <var:K> \} \\ \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \cdot <var:K> \} & <var:f4> := <var:f4> * <var:T> & \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \cdot <var:K> ^ <nat:2> \} \\ \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \cdot <var:K> ^ <nat:2> \} & <var:f4> := <var:f4> * <var:T> & \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \cdot <var:K> ^ <nat:3> \} \\ \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \cdot <var:K> ^ <nat:3> \} & <var:f4> := <var:f4> * <var:T> & \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \land <var:f4> = <nat:2> \cdot <var:K> ^ <nat:4> \} \end{tabular} This is shown to be logically sound using the environment update law given in standard Hoare logic . Moving forward to the proceeding piece of code seen in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:K> \} & <var:f0> := <nat:4> & \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \} \end{tabular} This is sound through the variable binding rule from usual Hoare techniques . Taking another step toward the upcoming statement found in the program , \[ \begin{tabular} {rcl} \{ <var:T> = <var:K> \} & <var:f0> := <nat:4> & \{ <var:T> = <var:K> \land <var:f0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f4> : string := " <var:f4> " . Definition <def:poly> := <var:f0> := <nat:4> ; <var:f4> := <nat:2> ; <var:f4> := <var:f4> * <var:T> ; <var:f4> := <var:f4> * <var:T> ; <var:f4> := <var:f4> * <var:T> ; <var:f4> := <var:f4> * <var:T> ; <var:L> := <var:f4> ; <var:L> := <var:L> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:T> = <var:K> }} <def:poly> {{ <var:L> = <nat:2> * <var:K> ^ <nat:4> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:f0> = <nat:4> /\ <var:f4> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:f0> = <nat:4> /\ <var:f4> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:f0> = <nat:4> /\ <var:f4> = <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:f0> = <nat:4> /\ <var:f4> = <nat:2> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:f0> = <nat:4> /\ <var:f4> = <nat:2> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:f0> = <nat:4> /\ <var:L> = <nat:2> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:L> = <nat:2> * <var:K> ^ <nat:4> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 