\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:7> ; <var:e> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:y> = <var:o> $ , given any $ <var:o> $ , ahead of executing our code segment , it holds that we see $ <var:e> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:o> \} \\ <var:C0> := <nat:7> ; \\ \{ <var:y> = <var:o> \land <var:C0> = <nat:7> \} \\ <var:e> := <var:C0> \\ \{ <var:y> = <var:o> \land <var:e> = <nat:7> \} \end{eqnarray} The application of standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:7> ; <var:e> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:y> = <var:o> }} <def:poly> {{ <var:e> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:e> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 