\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:X1> := <var:r> ; <var:X2> := <var:X1> * <var:r> ; <var:X0> := <nat:5> ; <var:X1> := <var:X1> * <nat:2> ; <var:X2> := <var:X2> * <nat:5> ; <var:L> := <var:X2> <var:L> := <var:L> + <var:X1> <var:L> := <var:L> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:r> = <var:y> $ prior to running the code segment it holds that we have $ <var:L> = <nat:5> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:5> $ after segment of code finishes . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:r> = <var:y> \} \\ <var:X1> := <var:r> ; \\ \{ <var:r> = <var:y> \land <var:X1> = <var:y> \} \\ <var:X2> := <var:X1> * <var:r> ; \\ \{ <var:r> = <var:y> \land <var:X1> = <var:y> \land <var:X2> = <var:y> ^ <nat:2> \} \\ <var:X0> := <nat:5> ; \\ \{ <var:r> = <var:y> \land <var:X1> = <var:y> \land <var:X2> = <var:y> ^ <nat:2> \land <var:X0> = <nat:5> \} \\ <var:X1> := <var:X1> * <nat:2> ; \\ \{ <var:r> = <var:y> \land <var:X1> = <nat:2> * <var:y> \land <var:X2> = <var:y> ^ <nat:2> \land <var:X0> = <nat:5> \} \\ <var:X2> := <var:X2> * <nat:5> ; \\ \{ <var:r> = <var:y> \land <var:X1> = <nat:2> * <var:y> \land <var:X2> = <nat:5> * <var:y> ^ <nat:2> \land <var:X0> = <nat:5> \} \\ <var:L> := <var:X2> \\ \{ <var:r> = <var:y> \land <var:X1> = <nat:2> * <var:y> \land <var:X0> = <nat:5> \land <var:L> = <nat:5> * <var:y> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:X1> \\ \{ <var:r> = <var:y> \land <var:X0> = <nat:5> \land <var:L> = <nat:5> * <var:y> ^ <nat:2> + <nat:2> * <var:y> \} \\ <var:L> := <var:L> + <var:X0> \\ \{ <var:r> = <var:y> \land <var:L> = <nat:5> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:5> \} \end{eqnarray} Hence , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X1> := <var:r> ; <var:X2> := <var:X1> * <var:r> ; <var:X0> := <nat:5> ; <var:X1> := <var:X1> * <nat:2> ; <var:X2> := <var:X2> * <nat:5> ; <var:L> := <var:X2> <var:L> := <var:L> + <var:X1> <var:L> := <var:L> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:r> = <var:y> }} <def:poly> {{ <var:L> = <nat:5> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:X1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:X1> = <var:y> /\ <var:X2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:X1> = <var:y> /\ <var:X2> = <var:y> ^ <nat:2> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:X1> = <nat:2> * <var:y> /\ <var:X2> = <var:y> ^ <nat:2> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:X1> = <nat:2> * <var:y> /\ <var:X2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:X1> = <nat:2> * <var:y> /\ <var:X0> = <nat:5> /\ <var:L> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:X0> = <nat:5> /\ <var:L> = <nat:5> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:L> = <nat:5> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 