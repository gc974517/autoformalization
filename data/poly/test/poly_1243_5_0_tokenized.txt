\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:3> ; <var:Y1> := <nat:8> ; <var:Y1> := <var:Y1> * <var:j> ; <var:U> := <var:Y1> ; <var:U> := <var:U> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:j> = <var:S> $ prior to evaluating our segment of code it must be that we see $ <var:U> = <nat:8> \cdot <var:S> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands is given using usual Hoare logic . Immediately following , the variable assignmet code assigning $ <nat:3> $ into $ <var:Y0>$ . This statement forwards the condition $ \{ <var:j> = <var:S> \} $ toward the condition $ \{ <var:j> = <var:S> \land <var:Y0> = <nat:3> \} $ . This is deduced using the assignment law found in Hoare techniques . Focusing on the proceeding step found in our segment of code , we have the variable update command giving $ <nat:8> $ to $ <var:Y1>$ . This takes the condition $ \{ <var:j> = <var:S> \land <var:Y0> = <nat:3> \} $ toward the condition $ \{ <var:j> = <var:S> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \} $ . Immediately following , we see the code giving $ <var:Y1> * <var:j> $ into $ <var:Y1>$ . This line transfers $ \{ <var:j> = <var:S> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \} $ to the postcondition $ \{ <var:j> = <var:S> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \times <var:S> \} $ . This is given with the assignment scheme in typical Hoare techniques . Further , we have the binding code \verb | <var:U> := <var:Y1> ; | . This code redefines the precondition $ \{ <var:j> = <var:S> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:8> \times <var:S> \} $ into the condition $ \{ <var:j> = <var:S> \land <var:Y0> = <nat:3> \land <var:U> = <nat:8> \times <var:S> \} $ . This is sound through the assignment law defined in standard Hoare reasoning . Moving on to the upcoming statement found in the code , we have the assignment statement \verb | <var:U> := <var:U> + <var:Y0> | . This advances the condition $ \{ <var:j> = <var:S> \land <var:Y0> = <nat:3> \land <var:U> = <nat:8> \times <var:S> \} $ to the condition $ \{ <var:j> = <var:S> \land <var:U> = <nat:8> \times <var:S> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:3> ; <var:Y1> := <nat:8> ; <var:Y1> := <var:Y1> * <var:j> ; <var:U> := <var:Y1> ; <var:U> := <var:U> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:j> = <var:S> }} <def:poly> {{ <var:U> = <nat:8> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:Y0> = <nat:3> /\ <var:U> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:U> = <nat:8> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 