\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z1> := <var:r> ; <var:z0> := <nat:5> ; <var:z1> := <var:z1> * <nat:7> ; <var:X> := <var:z1> <var:X> := <var:X> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:r> = <var:K> $ ahead of executing our series of instructions it must be that we have $ <var:X> = <nat:7> \times <var:K> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for this segment of code is shown by Hoare reasoning . Jumping to the next bit of code found in our code segment , we see the binding line \verb | <var:z1> := <var:r> ; | . This advances the condition $ \{ <var:r> = <var:K> \} $ as the postcondition $ \{ <var:r> = <var:K> \land <var:z1> = <var:K> \} $ . This is shown to be logically sound through the assignment rule of typical Hoare logic . Observing the subsequent line seen in the segment of code , we have the binding code \verb | <var:z0> := <nat:5> ; | . This code forwards the precondition $ \{ <var:r> = <var:K> \land <var:z1> = <var:K> \} $ toward $ \{ <var:r> = <var:K> \land <var:z1> = <var:K> \land <var:z0> = <nat:5> \} $ . Honing in on the subsequent bit of code in the set of instructions , we see the variable assignmet code \verb | <var:z1> := <var:z1> * <nat:7> ; | . This statement transfers the condition $ \{ <var:r> = <var:K> \land <var:z1> = <var:K> \land <var:z0> = <nat:5> \} $ into the postcondition $ \{ <var:r> = <var:K> \land <var:z1> = <nat:7> \times <var:K> \land <var:z0> = <nat:5> \} $ . Moving on to the following statement in our series of commands , we see the binding command \verb | <var:X> := <var:z1> | . This line advances the condition $ \{ <var:r> = <var:K> \land <var:z1> = <nat:7> \times <var:K> \land <var:z0> = <nat:5> \} $ toward the postcondition $ \{ <var:r> = <var:K> \land <var:z0> = <nat:5> \land <var:X> = <nat:7> \times <var:K> \} $ . Going forward , the statement yielding $ <var:X> + <var:z0$ as $ <var:X>$ . This redefines the precondition $ \{ <var:r> = <var:K> \land <var:z0> = <nat:5> \land <var:X> = <nat:7> \times <var:K> \} $ to the postcondition $ \{ <var:r> = <var:K> \land <var:X> = <nat:7> \times <var:K> + <nat:5> \} $ . This is shown to be logically sound using the assignment rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:r> ; <var:z0> := <nat:5> ; <var:z1> := <var:z1> * <nat:7> ; <var:X> := <var:z1> <var:X> := <var:X> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:r> = <var:K> }} <def:poly> {{ <var:X> = <nat:7> * <var:K> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:z1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:z1> = <var:K> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:z1> = <nat:7> * <var:K> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:z0> = <nat:5> /\ <var:X> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:X> = <nat:7> * <var:K> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 