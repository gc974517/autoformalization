\begin{document} \begin{theorem} Define the following code as \begin{verbatim} <var:q0> := <nat:3> ; <var:w> := <var:q0> \end{verbatim} Assume it to hold that $ <var:n> = <var:d> $ before executing our segment of code it holds that $ <var:w> = <nat:3> $ when set of commands has finished . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:n> = <var:d> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:n> = <var:d> \land <var:q0> = <nat:3> \} \\ <var:w> := <var:q0> \\ \{ <var:n> = <var:d> \land <var:w> = <nat:3> \} \end{eqnarray} Considering the above , this code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:n> = <var:d> }} <var:q0> := <nat:3> ; <var:w> := <var:q0> {{ <var:w> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:d> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:d> /\ <var:w> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 