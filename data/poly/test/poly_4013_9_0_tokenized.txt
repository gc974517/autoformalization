\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:8> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:W> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:W> ; <var:t2> := <var:t2> * <var:W> ; <var:b> := <var:t2> ; <var:b> := <var:b> + <var:t1> ; <var:b> := <var:b> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for some $ <var:E> $ ) it to hold that $ <var:W> = <var:E> $ ahead of running our series of commands , it must be that $ <var:b> = <nat:7> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions can be shown through usual Hoare techniques . Stepping forward , the variable binding code \verb | <var:t0> := <nat:8> ; | . This command redefines the precondition $ \{ <var:W> = <var:E> \} $ as $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \} $ . This is given through the assignment rule given in Hoare techniques . Moving forward , the variable binding code \verb | <var:t1> := <nat:1> ; | . This moves the precondition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \} $ as $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> \} $ . This is sound using the assignment scheme of typical Hoare reasoning . Moving forward to the next step seen in our set of instructions , we see the code \verb | <var:t1> := <var:t1> * <var:W> ; | . This command moves the condition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> \} $ toward $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \} $ . Taking another step toward the following command seen in the series of instructions , we see the environment update code \verb | <var:t2> := <nat:7> ; | . This statement takes $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \} $ to the condition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \land <var:t2> = <nat:7> \} $ . Looking at the next line of code seen in the program , we see the binding statement assigning $ <var:t2> * <var:W> $ toward $ <var:t2>$ . This transfers the precondition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \land <var:t2> = <nat:7> \} $ into the postcondition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \land <var:t2> = <nat:7> * <var:E> \} $ . This is known to be sound through the assignment inference rule defined by typical Hoare techniques . Moving forward to the following piece of code contained in our series of instructions , we see the variable binding line \verb | <var:t2> := <var:t2> * <var:W> ; | . This forwards the condition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \land <var:t2> = <nat:7> * <var:E> \} $ toward the postcondition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \land <var:t2> = <nat:7> * <var:E> ^ <nat:2> \} $ . Taking another step toward the proceeding line of code found in our code segment , we see the environment update statement binding $ <var:t2> $ toward $ <var:b>$ . This code transfers the condition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \land <var:t2> = <nat:7> * <var:E> ^ <nat:2> \} $ to the condition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \land <var:b> = <nat:7> * <var:E> ^ <nat:2> \} $ . This is given using the assignment law given by typical Hoare techniques . Moving forward to the upcoming command found in our program , the environment update statement yielding $ <var:b> + <var:t1> $ into $ <var:b>$ . This statement moves the precondition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:t1> = <nat:1> * <var:E> \land <var:b> = <nat:7> * <var:E> ^ <nat:2> \} $ toward the condition $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:b> = <nat:7> * <var:E> ^ <nat:2> + <nat:1> * <var:E> \} $ . Moving forward , we see the variable update statement assigning $ <var:b> + <var:t0$ toward $ <var:b>$ . This moves $ \{ <var:W> = <var:E> \land <var:t0> = <nat:8> \land <var:b> = <nat:7> * <var:E> ^ <nat:2> + <nat:1> * <var:E> \} $ toward $ \{ <var:W> = <var:E> \land <var:b> = <nat:7> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:8> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:W> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:W> ; <var:t2> := <var:t2> * <var:W> ; <var:b> := <var:t2> ; <var:b> := <var:b> + <var:t1> ; <var:b> := <var:b> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:W> = <var:E> }} <def:poly> {{ <var:b> = <nat:7> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:1> * <var:E> /\ <var:t2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:1> * <var:E> /\ <var:t2> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:1> * <var:E> /\ <var:t2> = <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:1> * <var:E> /\ <var:b> = <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:8> /\ <var:b> = <nat:7> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:b> = <nat:7> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 