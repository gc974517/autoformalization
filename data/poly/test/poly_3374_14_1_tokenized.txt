\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:X1> := <var:M> ; <var:X2> := <var:X1> * <var:M> ; <var:X3> := <var:X2> * <var:M> ; <var:X4> := <var:X3> * <var:M> ; <var:X0> := <nat:9> ; <var:X1> := <var:X1> * <nat:2> ; <var:X2> := <var:X2> * <nat:2> ; <var:X3> := <var:X3> * <nat:3> ; <var:X4> := <var:X4> * <nat:4> ; <var:G> := <var:X4> <var:G> := <var:G> + <var:X3> <var:G> := <var:G> + <var:X2> <var:G> := <var:G> + <var:X1> <var:G> := <var:G> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Allow that $ <var:M> = <var:h> $ before the evaluation of the set of commands , it follows that $ <var:G> = <nat:4> \times <var:h> ^ <nat:4> + <nat:3> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:9> $ when code segment finishes . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:M> = <var:h> \} \\ <var:X1> := <var:M> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <var:h> \} \\ <var:X2> := <var:X1> * <var:M> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <var:h> \land <var:X2> = <var:h> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:M> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <var:h> \land <var:X2> = <var:h> ^ <nat:2> \land <var:X3> = <var:h> ^ <nat:3> \} \\ <var:X4> := <var:X3> * <var:M> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <var:h> \land <var:X2> = <var:h> ^ <nat:2> \land <var:X3> = <var:h> ^ <nat:3> \land <var:X4> = <var:h> ^ <nat:4> \} \\ <var:X0> := <nat:9> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <var:h> \land <var:X2> = <var:h> ^ <nat:2> \land <var:X3> = <var:h> ^ <nat:3> \land <var:X4> = <var:h> ^ <nat:4> \land <var:X0> = <nat:9> \} \\ <var:X1> := <var:X1> * <nat:2> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <nat:2> \cdot <var:h> \land <var:X2> = <var:h> ^ <nat:2> \land <var:X3> = <var:h> ^ <nat:3> \land <var:X4> = <var:h> ^ <nat:4> \land <var:X0> = <nat:9> \} \\ <var:X2> := <var:X2> * <nat:2> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <nat:2> \cdot <var:h> \land <var:X2> = <nat:2> \cdot <var:h> ^ <nat:2> \land <var:X3> = <var:h> ^ <nat:3> \land <var:X4> = <var:h> ^ <nat:4> \land <var:X0> = <nat:9> \} \\ <var:X3> := <var:X3> * <nat:3> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <nat:2> \cdot <var:h> \land <var:X2> = <nat:2> \cdot <var:h> ^ <nat:2> \land <var:X3> = <nat:3> \cdot <var:h> ^ <nat:3> \land <var:X4> = <var:h> ^ <nat:4> \land <var:X0> = <nat:9> \} \\ <var:X4> := <var:X4> * <nat:4> ; \\ \{ <var:M> = <var:h> \land <var:X1> = <nat:2> \cdot <var:h> \land <var:X2> = <nat:2> \cdot <var:h> ^ <nat:2> \land <var:X3> = <nat:3> \cdot <var:h> ^ <nat:3> \land <var:X4> = <nat:4> \cdot <var:h> ^ <nat:4> \land <var:X0> = <nat:9> \} \\ <var:G> := <var:X4> \\ \{ <var:M> = <var:h> \land <var:X1> = <nat:2> \cdot <var:h> \land <var:X2> = <nat:2> \cdot <var:h> ^ <nat:2> \land <var:X3> = <nat:3> \cdot <var:h> ^ <nat:3> \land <var:X0> = <nat:9> \land <var:G> = <nat:4> \cdot <var:h> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:X3> \\ \{ <var:M> = <var:h> \land <var:X1> = <nat:2> \cdot <var:h> \land <var:X2> = <nat:2> \cdot <var:h> ^ <nat:2> \land <var:X0> = <nat:9> \land <var:G> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:X2> \\ \{ <var:M> = <var:h> \land <var:X1> = <nat:2> \cdot <var:h> \land <var:X0> = <nat:9> \land <var:G> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:X1> \\ \{ <var:M> = <var:h> \land <var:X0> = <nat:9> \land <var:G> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> \} \\ <var:G> := <var:G> + <var:X0> \\ \{ <var:M> = <var:h> \land <var:G> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:9> \} \end{eqnarray} Given the preceding argument , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <var:X4> : string := " <var:X4> " . Definition <def:poly> := <var:X1> := <var:M> ; <var:X2> := <var:X1> * <var:M> ; <var:X3> := <var:X2> * <var:M> ; <var:X4> := <var:X3> * <var:M> ; <var:X0> := <nat:9> ; <var:X1> := <var:X1> * <nat:2> ; <var:X2> := <var:X2> * <nat:2> ; <var:X3> := <var:X3> * <nat:3> ; <var:X4> := <var:X4> * <nat:4> ; <var:G> := <var:X4> <var:G> := <var:G> + <var:X3> <var:G> := <var:G> + <var:X2> <var:G> := <var:G> + <var:X1> <var:G> := <var:G> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:M> = <var:h> }} <def:poly> {{ <var:G> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <var:h> /\ <var:X2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <var:h> /\ <var:X2> = <var:h> ^ <nat:2> /\ <var:X3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <var:h> /\ <var:X2> = <var:h> ^ <nat:2> /\ <var:X3> = <var:h> ^ <nat:3> /\ <var:X4> = <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <var:h> /\ <var:X2> = <var:h> ^ <nat:2> /\ <var:X3> = <var:h> ^ <nat:3> /\ <var:X4> = <var:h> ^ <nat:4> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <nat:2> * <var:h> /\ <var:X2> = <var:h> ^ <nat:2> /\ <var:X3> = <var:h> ^ <nat:3> /\ <var:X4> = <var:h> ^ <nat:4> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <nat:2> * <var:h> /\ <var:X2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:X3> = <var:h> ^ <nat:3> /\ <var:X4> = <var:h> ^ <nat:4> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <nat:2> * <var:h> /\ <var:X2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:X3> = <nat:3> * <var:h> ^ <nat:3> /\ <var:X4> = <var:h> ^ <nat:4> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <nat:2> * <var:h> /\ <var:X2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:X3> = <nat:3> * <var:h> ^ <nat:3> /\ <var:X4> = <nat:4> * <var:h> ^ <nat:4> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <nat:2> * <var:h> /\ <var:X2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:X3> = <nat:3> * <var:h> ^ <nat:3> /\ <var:X0> = <nat:9> /\ <var:G> = <nat:4> * <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <nat:2> * <var:h> /\ <var:X2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:X0> = <nat:9> /\ <var:G> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X1> = <nat:2> * <var:h> /\ <var:X0> = <nat:9> /\ <var:G> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:X0> = <nat:9> /\ <var:G> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:G> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 