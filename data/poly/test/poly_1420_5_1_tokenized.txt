\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:u1> := <var:p> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:6> ; <var:c> := <var:u1> <var:c> := <var:c> + <var:u0> \end{verbatim} Allowing it to be that $ <var:p> = <var:y> $ ahead of the execution of the series of commands it follows that we see $ <var:c> = <nat:6> \cdot <var:y> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:y> \} \\ <var:u1> := <var:p> ; \\ \{ <var:p> = <var:y> \land <var:u1> = <var:y> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:p> = <var:y> \land <var:u1> = <var:y> \land <var:u0> = <nat:2> \} \\ <var:u1> := <var:u1> * <nat:6> ; \\ \{ <var:p> = <var:y> \land <var:u1> = <nat:6> \cdot <var:y> \land <var:u0> = <nat:2> \} \\ <var:c> := <var:u1> \\ \{ <var:p> = <var:y> \land <var:u0> = <nat:2> \land <var:c> = <nat:6> \cdot <var:y> \} \\ <var:c> := <var:c> + <var:u0> \\ \{ <var:p> = <var:y> \land <var:c> = <nat:6> \cdot <var:y> + <nat:2> \} \end{eqnarray} Using standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:p> = <var:y> }} <var:u1> := <var:p> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:6> ; <var:c> := <var:u1> <var:c> := <var:c> + <var:u0> {{ <var:c> = <nat:6> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:u1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:u1> = <var:y> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:u1> = <nat:6> * <var:y> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:u0> = <nat:2> /\ <var:c> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:c> = <nat:6> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 