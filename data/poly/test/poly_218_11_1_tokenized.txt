\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:n> ; <var:d2> := <var:d1> * <var:n> ; <var:d3> := <var:d2> * <var:n> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:1> ; <var:d2> := <var:d2> * <nat:9> ; <var:d3> := <var:d3> * <nat:6> ; <var:Z> := <var:d3> <var:Z> := <var:Z> + <var:d2> <var:Z> := <var:Z> + <var:d1> <var:Z> := <var:Z> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:n> = <var:V> $ ahead of the execution of the list of instructions it follows that we see $ <var:Z> = <nat:6> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the program is evident through usual Hoare reasoning . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:V> \} & <var:d1> := <var:n> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \} \\ \{ <var:n> = <var:V> \land <var:d1> = <var:V> \} & <var:d2> := <var:d1> * <var:n> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \} \\ \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \} & <var:d3> := <var:d2> * <var:n> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \} \\ \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \} & <var:d0> := <nat:4> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \land <var:d0> = <nat:4> \} \\ \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \land <var:d0> = <nat:4> \} & <var:d1> := <var:d1> * <nat:1> & \{ <var:n> = <var:V> \land <var:d1> = <nat:1> * <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \land <var:d0> = <nat:4> \} \\ \{ <var:n> = <var:V> \land <var:d1> = <nat:1> * <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \land <var:d0> = <nat:4> \} & <var:d2> := <var:d2> * <nat:9> & \{ <var:n> = <var:V> \land <var:d1> = <nat:1> * <var:V> \land <var:d2> = <nat:9> * <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \land <var:d0> = <nat:4> \} \end{tabular} Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:V> \} & <var:d1> := <var:n> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \} \\ \{ <var:n> = <var:V> \land <var:d1> = <var:V> \} & <var:d2> := <var:d1> * <var:n> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \} \\ \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \} & <var:d3> := <var:d2> * <var:n> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \} \\ \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \} & <var:d0> := <nat:4> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \land <var:d2> = <var:V> ^ <nat:2> \land <var:d3> = <var:V> ^ <nat:3> \land <var:d0> = <nat:4> \} \end{tabular} Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:V> \} & <var:d1> := <var:n> & \{ <var:n> = <var:V> \land <var:d1> = <var:V> \} \end{tabular} This is given through the assignment rule of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:n> ; <var:d2> := <var:d1> * <var:n> ; <var:d3> := <var:d2> * <var:n> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:1> ; <var:d2> := <var:d2> * <nat:9> ; <var:d3> := <var:d3> * <nat:6> ; <var:Z> := <var:d3> <var:Z> := <var:Z> + <var:d2> <var:Z> := <var:Z> + <var:d1> <var:Z> := <var:Z> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:n> = <var:V> }} <def:poly> {{ <var:Z> = <nat:6> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <var:V> /\ <var:d2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <var:V> /\ <var:d2> = <var:V> ^ <nat:2> /\ <var:d3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <var:V> /\ <var:d2> = <var:V> ^ <nat:2> /\ <var:d3> = <var:V> ^ <nat:3> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <nat:1> * <var:V> /\ <var:d2> = <var:V> ^ <nat:2> /\ <var:d3> = <var:V> ^ <nat:3> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <nat:1> * <var:V> /\ <var:d2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:d3> = <var:V> ^ <nat:3> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <nat:1> * <var:V> /\ <var:d2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:V> ^ <nat:3> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <nat:1> * <var:V> /\ <var:d2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:d0> = <nat:4> /\ <var:Z> = <nat:6> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d1> = <nat:1> * <var:V> /\ <var:d0> = <nat:4> /\ <var:Z> = <nat:6> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:d0> = <nat:4> /\ <var:Z> = <nat:6> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:Z> = <nat:6> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 