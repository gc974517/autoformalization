\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} : \begin{verbatim} <var:y1> := <var:h> ; <var:y2> := <var:y1> * <var:h> ; <var:y3> := <var:y2> * <var:h> ; <var:y4> := <var:y3> * <var:h> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:6> ; <var:y3> := <var:y3> * <nat:2> ; <var:y4> := <var:y4> * <nat:7> ; <var:H> := <var:y4> <var:H> := <var:H> + <var:y3> <var:H> := <var:H> + <var:y1> <var:H> := <var:H> + <var:y0> \end{verbatim} Given it to hold that $ <var:h> = <var:z> $ ahead of executing the program it follows that we see $ <var:H> = <nat:7> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:6> * <var:z> + <nat:5> $ . \end{theorem} \begin{proof} The argument for the program can be shown using typical Hoare reasoning . Shifting focus toward the next pieces of code contained in the segment of code , \begin{eqnarray} \{ <var:h> = <var:z> \} \, <var:y1> := <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \} \\ \{ <var:h> = <var:z> \land <var:y1> = <var:z> \} \, <var:y2> := <var:y1> * <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} \\ \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} \, <var:y3> := <var:y2> * <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} \\ \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} \, <var:y4> := <var:y3> * <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \land <var:y4> = <var:z> ^ <nat:4> \} \end{eqnarray} Taking a look at the proceeding bits of codeseen in the code segment , \begin{eqnarray} \{ <var:h> = <var:z> \} \, <var:y1> := <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \} \\ \{ <var:h> = <var:z> \land <var:y1> = <var:z> \} \, <var:y2> := <var:y1> * <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} \\ \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} \, <var:y3> := <var:y2> * <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} \\ \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} \, <var:y4> := <var:y3> * <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \land <var:y4> = <var:z> ^ <nat:4> \} \end{eqnarray} This is known to be sound by the variable binding law given in usual Hoare techniques . Looking at the following commands contained in our list of commands , \begin{eqnarray} \{ <var:h> = <var:z> \} \, <var:y1> := <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \} \\ \{ <var:h> = <var:z> \land <var:y1> = <var:z> \} \, <var:y2> := <var:y1> * <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} \\ \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} \, <var:y3> := <var:y2> * <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} \end{eqnarray} This is shown using the environment update scheme found in Hoare reasoning . Looking at the subsequent step found in our program , \begin{eqnarray} \{ <var:h> = <var:z> \} \, <var:y1> := <var:h> \, \{ <var:h> = <var:z> \land <var:y1> = <var:z> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <var:y4> : string := " <var:y4> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:h> = <var:z> }} <var:y1> := <var:h> ; <var:y2> := <var:y1> * <var:h> ; <var:y3> := <var:y2> * <var:h> ; <var:y4> := <var:y3> * <var:h> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:6> ; <var:y3> := <var:y3> * <nat:2> ; <var:y4> := <var:y4> * <nat:7> ; <var:H> := <var:y4> <var:H> := <var:H> + <var:y3> <var:H> := <var:H> + <var:y1> <var:H> := <var:H> + <var:y0> {{ <var:H> = <nat:7> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:6> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> /\ <var:y4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> /\ <var:y4> = <var:z> ^ <nat:4> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> /\ <var:y4> = <var:z> ^ <nat:4> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <nat:2> * <var:z> ^ <nat:3> /\ <var:y4> = <var:z> ^ <nat:4> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <nat:2> * <var:z> ^ <nat:3> /\ <var:y4> = <nat:7> * <var:z> ^ <nat:4> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <nat:2> * <var:z> ^ <nat:3> /\ <var:y0> = <nat:5> /\ <var:H> = <nat:7> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y1> = <nat:6> * <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y0> = <nat:5> /\ <var:H> = <nat:7> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:y0> = <nat:5> /\ <var:H> = <nat:7> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:H> = <nat:7> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:6> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 