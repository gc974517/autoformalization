\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:5> ; <var:r2> := <nat:5> ; <var:r2> := <var:r2> * <var:L> ; <var:r2> := <var:r2> * <var:L> ; <var:r3> := <nat:7> ; <var:r3> := <var:r3> * <var:L> ; <var:r3> := <var:r3> * <var:L> ; <var:r3> := <var:r3> * <var:L> ; <var:M> := <var:r3> ; <var:M> := <var:M> + <var:r2> ; <var:M> := <var:M> + <var:r0> \end{verbatim} Assuming it to be that $ <var:L> = <var:a> $ ( for every integers $ <var:a> $ ) ahead of evaluating this series of commands it follows that $ <var:M> = <nat:7> \cdot <var:a> ^ <nat:3> + <nat:5> \cdot <var:a> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} The argument for our code can be shown with standard Hoare logic . Moving onward , we have the line \verb | <var:r0> := <nat:5> ; | . This statement advances $ \{ <var:L> = <var:a> \} $ as the condition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \} $ . This is known to be sound using the assignment rule defined in Hoare techniques . Taking another step toward the next statement in our segment of code , we have the assignment command assigning $ <nat:5> $ as $ <var:r2>$ . This moves the precondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \} $ toward the condition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \} $ . This is ensured using the assignment law given in Hoare techniques . Following , the variable binding line giving $ <var:r2> * <var:L> $ as $ <var:r2>$ . This forwards the condition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \} $ toward the condition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> \} $ . Moving on to the upcoming piece of code contained in the set of commands , we see the variable assignmet statement \verb | <var:r2> := <var:r2> * <var:L> ; | . This forwards $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> \} $ into $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \} $ . This is shown by the assignment rule found in standard Hoare techniques . Focusing on the following statement found in the list of instructions , we have the variable binding command giving $ <nat:7> $ into $ <var:r3>$ . This moves the precondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \} $ as $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:r3> = <nat:7> \} $ . Moving on to the proceeding piece of code found in our set of instructions , we see the variable binding code assigning $ <var:r3> * <var:L> $ toward $ <var:r3>$ . This statement takes the precondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:r3> = <nat:7> \} $ to $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:r3> = <nat:7> \times <var:a> \} $ . Following , we have the variable binding command \verb | <var:r3> := <var:r3> * <var:L> ; | . This transfers the precondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:r3> = <nat:7> \times <var:a> \} $ into the postcondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:r3> = <nat:7> \times <var:a> ^ <nat:2> \} $ . Moving on to the upcoming line found in the series of instructions , we see the binding statement giving $ <var:r3> * <var:L> $ into $ <var:r3>$ . This code takes $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:r3> = <nat:7> \times <var:a> ^ <nat:2> \} $ into the condition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:r3> = <nat:7> \times <var:a> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment rule from typical Hoare logic . Advancing to the upcoming step seen in our set of instructions , the environment update statement \verb | <var:M> := <var:r3> ; | . This moves the precondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:r3> = <nat:7> \times <var:a> ^ <nat:3> \} $ toward the postcondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:M> = <nat:7> \times <var:a> ^ <nat:3> \} $ . Going to the next step , we see the variable update statement \verb | <var:M> := <var:M> + <var:r2> ; | . This redefines the precondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:r2> = <nat:5> \times <var:a> ^ <nat:2> \land <var:M> = <nat:7> \times <var:a> ^ <nat:3> \} $ as the postcondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:M> = <nat:7> \times <var:a> ^ <nat:3> + <nat:5> \times <var:a> ^ <nat:2> \} $ . This is shown through the assignment law of usual Hoare techniques . Jumping to the proceeding line in our segment of code , we see the variable binding code yielding $ <var:M> + <var:r0$ as $ <var:M>$ . This redefines the precondition $ \{ <var:L> = <var:a> \land <var:r0> = <nat:5> \land <var:M> = <nat:7> \times <var:a> ^ <nat:3> + <nat:5> \times <var:a> ^ <nat:2> \} $ to the postcondition $ \{ <var:L> = <var:a> \land <var:M> = <nat:7> \times <var:a> ^ <nat:3> + <nat:5> \times <var:a> ^ <nat:2> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:L> = <var:a> }} <var:r0> := <nat:5> ; <var:r2> := <nat:5> ; <var:r2> := <var:r2> * <var:L> ; <var:r2> := <var:r2> * <var:L> ; <var:r3> := <nat:7> ; <var:r3> := <var:r3> * <var:L> ; <var:r3> := <var:r3> * <var:L> ; <var:r3> := <var:r3> * <var:L> ; <var:M> := <var:r3> ; <var:M> := <var:M> + <var:r2> ; <var:M> := <var:M> + <var:r0> {{ <var:M> = <nat:7> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:r2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:r2> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:r2> = <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:r2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:r3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:r2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:r3> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:r2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:r3> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:r2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:r3> = <nat:7> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:r2> = <nat:5> * <var:a> ^ <nat:2> /\ <var:M> = <nat:7> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:r0> = <nat:5> /\ <var:M> = <nat:7> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:M> = <nat:7> * <var:a> ^ <nat:3> + <nat:5> * <var:a> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 