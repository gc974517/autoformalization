\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:e> ; <var:M2> := <var:M1> * <var:e> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:2> ; <var:M2> := <var:M2> * <nat:2> ; <var:L> := <var:M2> <var:L> := <var:L> + <var:M1> <var:L> := <var:L> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:e> = <var:o> $ , given all positive coefficients $ <var:o> $ , before the execution of our set of commands , it follows that $ <var:L> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> $ once set of commands terminates . \end{theorem} \begin{proof} The argument for the set of instructions is shown using usual Hoare reasoning . Taking a look at the upcoming pieces of code contained in the code , \verb | { <var:e> = <var:o> } <var:M1> := <var:e> { <var:e> = <var:o> \land <var:M1> = <var:o> } | , \verb | { <var:e> = <var:o> \land <var:M1> = <var:o> } <var:M2> := <var:M1> * <var:e> { <var:e> = <var:o> \land <var:M1> = <var:o> \land <var:M2> = <var:o> ^ <nat:2> } | , \verb | { <var:e> = <var:o> \land <var:M1> = <var:o> \land <var:M2> = <var:o> ^ <nat:2> } <var:M0> := <nat:4> { <var:e> = <var:o> \land <var:M1> = <var:o> \land <var:M2> = <var:o> ^ <nat:2> \land <var:M0> = <nat:4> } | and \verb | { <var:e> = <var:o> \land <var:M1> = <var:o> \land <var:M2> = <var:o> ^ <nat:2> \land <var:M0> = <nat:4> } <var:M1> := <var:M1> * <nat:2> { <var:e> = <var:o> \land <var:M1> = <nat:2> \times <var:o> \land <var:M2> = <var:o> ^ <nat:2> \land <var:M0> = <nat:4> } | . This is known to be sound by the variable assignmet scheme obtained from Hoare logic . Following , we see \verb | { <var:e> = <var:o> } <var:M1> := <var:e> { <var:e> = <var:o> \land <var:M1> = <var:o> } | . Further , we see \verb | { <var:e> = <var:o> } <var:M1> := <var:e> { <var:e> = <var:o> \land <var:M1> = <var:o> } | . This is given with the assignment inference rule in standard Hoare techniques . Stepping through , we see \verb | { <var:e> = <var:o> } <var:M1> := <var:e> { <var:e> = <var:o> \land <var:M1> = <var:o> } | and \verb | { <var:e> = <var:o> \land <var:M1> = <var:o> } <var:M2> := <var:M1> * <var:e> { <var:e> = <var:o> \land <var:M1> = <var:o> \land <var:M2> = <var:o> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M1> := <var:e> ; <var:M2> := <var:M1> * <var:e> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:2> ; <var:M2> := <var:M2> * <nat:2> ; <var:L> := <var:M2> <var:L> := <var:L> + <var:M1> <var:L> := <var:L> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:e> = <var:o> }} <def:poly> {{ <var:L> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:M1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:M1> = <var:o> /\ <var:M2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:M1> = <var:o> /\ <var:M2> = <var:o> ^ <nat:2> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:M1> = <nat:2> * <var:o> /\ <var:M2> = <var:o> ^ <nat:2> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:M1> = <nat:2> * <var:o> /\ <var:M2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:M1> = <nat:2> * <var:o> /\ <var:M0> = <nat:4> /\ <var:L> = <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:M0> = <nat:4> /\ <var:L> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:o> /\ <var:L> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 