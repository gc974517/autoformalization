\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:7> ; <var:Z> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:i> = <var:q> $ --- given all positive integer coefficients $ <var:q> $ --- ahead of the evaluation of this list of commands it follows that we see $ <var:Z> = <nat:7> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques yields : \begin{eqnarray} \{ <var:i> = <var:q> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:i> = <var:q> \land <var:e0> = <nat:7> \} \\ <var:Z> := <var:e0> \\ \{ <var:i> = <var:q> \land <var:Z> = <nat:7> \} \end{eqnarray} Furthering the execution of this program returns : \begin{eqnarray} \end{eqnarray} Hence , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:Z> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:i> = <var:q> }} <def:poly> {{ <var:Z> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:Z> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 