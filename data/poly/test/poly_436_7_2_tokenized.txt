\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:g> := <nat:2> ; <var:g> := <nat:3> + <var:g> * <var:r> ; <var:g> := <var:g> * <var:r> ; <var:g> := <nat:3> + <var:g> * <var:r> ; <var:g> := <nat:2> + <var:g> * <var:r> ; <var:g> := <nat:1> + <var:g> * <var:r> ; <var:g> := <nat:4> + <var:g> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Assuming --- assuming some $ <var:v> \in \mathbb{Z}^+ $ --- that we have $ <var:r> = <var:v> $ before the execution of this series of instructions , it holds that we have $ <var:g> = <nat:2> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:4> $ once code segment exits . \end{theorem} \begin{proof} The argument for the code segment is given using standard Hoare logic . Further , \[ \begin{tabular} {rcl} \{ <var:r> = <var:v> \} & <var:g> := <nat:2> & \{ <var:r> = <var:v> \land <var:g> = <nat:2> \} \\ \{ <var:r> = <var:v> \land <var:g> = <nat:2> \} & <var:g> := <nat:3> + <var:g> * <var:r> & \{ <var:r> = <var:v> \land <var:g> = <nat:2> \times <var:v> + <nat:3> \} \\ \{ <var:r> = <var:v> \land <var:g> = <nat:2> \times <var:v> + <nat:3> \} & <var:g> := <var:g> * <var:r> & \{ <var:r> = <var:v> \land <var:g> = <nat:2> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + \} \\ \{ <var:r> = <var:v> \land <var:g> = <nat:2> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + \} & <var:g> := <nat:3> + <var:g> * <var:r> & \{ <var:r> = <var:v> \land <var:g> = <nat:2> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:3> \} \end{tabular} Moving on , \[ \begin{tabular} {rcl} \{ <var:r> = <var:v> \} & <var:g> := <nat:2> & \{ <var:r> = <var:v> \land <var:g> = <nat:2> \} \\ \{ <var:r> = <var:v> \land <var:g> = <nat:2> \} & <var:g> := <nat:3> + <var:g> * <var:r> & \{ <var:r> = <var:v> \land <var:g> = <nat:2> \times <var:v> + <nat:3> \} \\ \{ <var:r> = <var:v> \land <var:g> = <nat:2> \times <var:v> + <nat:3> \} & <var:g> := <var:g> * <var:r> & \{ <var:r> = <var:v> \land <var:g> = <nat:2> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:2> ; <var:g> := <nat:3> + <var:g> * <var:r> ; <var:g> := <var:g> * <var:r> ; <var:g> := <nat:3> + <var:g> * <var:r> ; <var:g> := <nat:2> + <var:g> * <var:r> ; <var:g> := <nat:1> + <var:g> * <var:r> ; <var:g> := <nat:4> + <var:g> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:r> = <var:v> }} <def:poly> {{ <var:g> = <nat:2> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:g> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:g> = <nat:2> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:g> = <nat:2> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:g> = <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:g> = <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:g> = <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:g> = <nat:2> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 