\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:2> ; <var:T1> := <nat:6> ; <var:T1> := <var:T1> * <var:v> ; <var:T3> := <nat:9> ; <var:T3> := <var:T3> * <var:v> ; <var:T3> := <var:T3> * <var:v> ; <var:T3> := <var:T3> * <var:v> ; <var:n> := <var:T3> ; <var:n> := <var:n> + <var:T1> ; <var:n> := <var:n> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for some $ <var:R> \in \mathbb{Z}^+ $ ) that we have $ <var:v> = <var:R> $ prior to running the list of commands , it follows that we have $ <var:n> = <nat:9> \times <var:R> ^ <nat:3> + <nat:6> \times <var:R> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our code segment is shown with usual Hoare techniques . Paying attention to the following bit of code found in the list of commands , we have \begin{eqnarray} \{ <var:v> = <var:R> \} \, <var:T0> := <nat:2> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \} \end{eqnarray} This is given through the law from Hoare logic . Honing in on the subsequent lines of codefound in the list of instructions , \begin{eqnarray} \{ <var:v> = <var:R> \} \, <var:T0> := <nat:2> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \} \\ \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \} \, <var:T1> := <nat:6> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \land <var:T1> = <nat:6> \} \end{eqnarray} Honing in on the next lines of codeseen in our set of commands , we see \begin{eqnarray} \{ <var:v> = <var:R> \} \, <var:T0> := <nat:2> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \} \\ \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \} \, <var:T1> := <nat:6> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \land <var:T1> = <nat:6> \} \\ \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \land <var:T1> = <nat:6> \} \, <var:T1> := <var:T1> * <var:v> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \land <var:T1> = <nat:6> * <var:R> \} \\ \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \land <var:T1> = <nat:6> * <var:R> \} \, <var:T3> := <nat:9> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \land <var:T1> = <nat:6> * <var:R> \land <var:T3> = <nat:9> \} \\ \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \land <var:T1> = <nat:6> * <var:R> \land <var:T3> = <nat:9> \} \, <var:T3> := <var:T3> * <var:v> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \land <var:T1> = <nat:6> * <var:R> \land <var:T3> = <nat:9> * <var:R> \} \end{eqnarray} Moving on to the next statement seen in our code , \begin{eqnarray} \{ <var:v> = <var:R> \} \, <var:T0> := <nat:2> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \} \end{eqnarray} This is known to be sound with the variable binding inference rule in usual Hoare reasoning . Moving forward , \begin{eqnarray} \{ <var:v> = <var:R> \} \, <var:T0> := <nat:2> \, \{ <var:v> = <var:R> \land <var:T0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T0> := <nat:2> ; <var:T1> := <nat:6> ; <var:T1> := <var:T1> * <var:v> ; <var:T3> := <nat:9> ; <var:T3> := <var:T3> * <var:v> ; <var:T3> := <var:T3> * <var:v> ; <var:T3> := <var:T3> * <var:v> ; <var:n> := <var:T3> ; <var:n> := <var:n> + <var:T1> ; <var:n> := <var:n> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:v> = <var:R> }} <def:poly> {{ <var:n> = <nat:9> * <var:R> ^ <nat:3> + <nat:6> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:6> * <var:R> /\ <var:T3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:6> * <var:R> /\ <var:T3> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:6> * <var:R> /\ <var:T3> = <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:6> * <var:R> /\ <var:T3> = <nat:9> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:6> * <var:R> /\ <var:n> = <nat:9> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T0> = <nat:2> /\ <var:n> = <nat:9> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n> = <nat:9> * <var:R> ^ <nat:3> + <nat:6> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 