\begin{document} \begin{theorem} Consider a list of instructions as \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:X> \end{verbatim} Assuming --- given some $ <var:t> $ --- that $ <var:X> = <var:t> $ before evaluating this set of instructions it holds that we see $ <var:d> = <nat:4> \cdot <var:t> + <nat:2> $ after list of instructions has executed . \end{theorem} \begin{proof} Arguing the correctness of our segment of code can be done by usual Hoare logic . Observing the upcoming lines in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:t> \} & <var:d> := <nat:4> & \{ <var:X> = <var:t> \land <var:d> = <nat:4> \} \\ \{ <var:X> = <var:t> \land <var:d> = <nat:4> \} & <var:d> := <nat:2> + <var:d> * <var:X& \{ <var:X> = <var:t> \land <var:d> = <nat:4> * <var:t> + <nat:2> \} \end{tabular} This is rigorously given using the assignment rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:X> = <var:t> }} <var:d> := <nat:4> ; <var:d> := <nat:2> + <var:d> * <var:X> {{ <var:d> = <nat:4> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:t> /\ <var:d> = <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 