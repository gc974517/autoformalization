\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:i> := <nat:4> ; <var:i> := <nat:3> + <var:i> * <var:b> ; <var:i> := <nat:3> + <var:i> * <var:b> ; <var:i> := <nat:1> + <var:i> * <var:b> ; <var:i> := <nat:3> + <var:i> * <var:b> \end{verbatim} Allow --- for natural numbers $ <var:r> $ --- that $ <var:b> = <var:r> $ ahead of running this series of commands it follows that $ <var:i> = <nat:4> \cdot <var:r> ^ <nat:4> + <nat:3> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> + <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare logic returns : \begin{eqnarray} \{ <var:b> = <var:r> \} \\ <var:i> := <nat:4> ; \\ \{ <var:b> = <var:r> \land <var:i> = <nat:4> \} \\ <var:i> := <nat:3> + <var:i> * <var:b> ; \\ \{ <var:b> = <var:r> \land <var:i> = <nat:4> * <var:r> + <nat:3> \} \\ <var:i> := <nat:3> + <var:i> * <var:b> ; \\ \{ <var:b> = <var:r> \land <var:i> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> \} \\ <var:i> := <nat:1> + <var:i> * <var:b> ; \\ \{ <var:b> = <var:r> \land <var:i> = <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:1> \} \\ <var:i> := <nat:3> + <var:i> * <var:b> \\ \{ <var:b> = <var:r> \land <var:i> = <nat:4> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:3> \} \end{eqnarray} Given the above , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:b> = <var:r> }} <var:i> := <nat:4> ; <var:i> := <nat:3> + <var:i> * <var:b> ; <var:i> := <nat:3> + <var:i> * <var:b> ; <var:i> := <nat:1> + <var:i> * <var:b> ; <var:i> := <nat:3> + <var:i> * <var:b> {{ <var:i> = <nat:4> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:i> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:i> = <nat:4> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:i> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:i> = <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:i> = <nat:4> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 