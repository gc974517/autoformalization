\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:X> ; <var:E2> := <var:E1> * <var:X> ; <var:E3> := <var:E2> * <var:X> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:6> ; <var:E3> := <var:E3> * <nat:4> ; <var:k> := <var:E3> <var:k> := <var:k> + <var:E2> <var:k> := <var:k> + <var:E1> <var:k> := <var:k> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Given it to hold that $ <var:X> = <var:C> $ prior to running our series of commands then we have $ <var:k> = <nat:4> \cdot <var:C> ^ <nat:3> + <nat:6> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:6> $ . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:X> = <var:C> \} \\ <var:E1> := <var:X> ; \\ \{ <var:X> = <var:C> \land <var:E1> = <var:C> \} \\ <var:E2> := <var:E1> * <var:X> ; \\ \{ <var:X> = <var:C> \land <var:E1> = <var:C> \land <var:E2> = <var:C> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:X> ; \\ \{ <var:X> = <var:C> \land <var:E1> = <var:C> \land <var:E2> = <var:C> ^ <nat:2> \land <var:E3> = <var:C> ^ <nat:3> \} \\ <var:E0> := <nat:6> ; \\ \{ <var:X> = <var:C> \land <var:E1> = <var:C> \land <var:E2> = <var:C> ^ <nat:2> \land <var:E3> = <var:C> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ <var:E1> := <var:E1> * <nat:2> ; \\ \{ <var:X> = <var:C> \land <var:E1> = <nat:2> * <var:C> \land <var:E2> = <var:C> ^ <nat:2> \land <var:E3> = <var:C> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ <var:E2> := <var:E2> * <nat:6> ; \\ \{ <var:X> = <var:C> \land <var:E1> = <nat:2> * <var:C> \land <var:E2> = <nat:6> * <var:C> ^ <nat:2> \land <var:E3> = <var:C> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ <var:E3> := <var:E3> * <nat:4> ; \\ \{ <var:X> = <var:C> \land <var:E1> = <nat:2> * <var:C> \land <var:E2> = <nat:6> * <var:C> ^ <nat:2> \land <var:E3> = <nat:4> * <var:C> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ <var:k> := <var:E3> \\ \{ <var:X> = <var:C> \land <var:E1> = <nat:2> * <var:C> \land <var:E2> = <nat:6> * <var:C> ^ <nat:2> \land <var:E0> = <nat:6> \land <var:k> = <nat:4> * <var:C> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:E2> \\ \{ <var:X> = <var:C> \land <var:E1> = <nat:2> * <var:C> \land <var:E0> = <nat:6> \land <var:k> = <nat:4> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:E1> \\ \{ <var:X> = <var:C> \land <var:E0> = <nat:6> \land <var:k> = <nat:4> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:2> * <var:C> \} \\ <var:k> := <var:k> + <var:E0> \\ \{ <var:X> = <var:C> \land <var:k> = <nat:4> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:6> \} \end{eqnarray} Given the above , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:X> ; <var:E2> := <var:E1> * <var:X> ; <var:E3> := <var:E2> * <var:X> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:6> ; <var:E3> := <var:E3> * <nat:4> ; <var:k> := <var:E3> <var:k> := <var:k> + <var:E2> <var:k> := <var:k> + <var:E1> <var:k> := <var:k> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:X> = <var:C> }} <def:poly> {{ <var:k> = <nat:4> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <var:C> /\ <var:E2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <var:C> /\ <var:E2> = <var:C> ^ <nat:2> /\ <var:E3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <var:C> /\ <var:E2> = <var:C> ^ <nat:2> /\ <var:E3> = <var:C> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <nat:2> * <var:C> /\ <var:E2> = <var:C> ^ <nat:2> /\ <var:E3> = <var:C> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <nat:2> * <var:C> /\ <var:E2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:E3> = <var:C> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <nat:2> * <var:C> /\ <var:E2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:C> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <nat:2> * <var:C> /\ <var:E2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:E0> = <nat:6> /\ <var:k> = <nat:4> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E1> = <nat:2> * <var:C> /\ <var:E0> = <nat:6> /\ <var:k> = <nat:4> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:E0> = <nat:6> /\ <var:k> = <nat:4> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:k> = <nat:4> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 