\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:1> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:R> ; <var:a2> := <nat:2> ; <var:a2> := <var:a2> * <var:R> ; <var:a2> := <var:a2> * <var:R> ; <var:a3> := <nat:6> ; <var:a3> := <var:a3> * <var:R> ; <var:a3> := <var:a3> * <var:R> ; <var:a3> := <var:a3> * <var:R> ; <var:t> := <var:a3> ; <var:t> := <var:t> + <var:a2> ; <var:t> := <var:t> + <var:a1> ; <var:t> := <var:t> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Given that we have $ <var:R> = <var:p> $ prior to the execution of the code segment it follows that we have $ <var:t> = <nat:6> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:8> \times <var:p> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare logic gives : \begin{eqnarray} \{ <var:R> = <var:p> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \} \\ <var:a1> := <nat:8> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> \} \\ <var:a1> := <var:a1> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \} \\ <var:a2> := <nat:2> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:a2> = <nat:2> \} \\ <var:a2> := <var:a2> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:a2> = <nat:2> * <var:p> \} \\ <var:a2> := <var:a2> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:a2> = <nat:2> * <var:p> ^ <nat:2> \} \\ <var:a3> := <nat:6> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:a2> = <nat:2> * <var:p> ^ <nat:2> \land <var:a3> = <nat:6> \} \\ <var:a3> := <var:a3> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:a2> = <nat:2> * <var:p> ^ <nat:2> \land <var:a3> = <nat:6> * <var:p> \} \\ <var:a3> := <var:a3> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:a2> = <nat:2> * <var:p> ^ <nat:2> \land <var:a3> = <nat:6> * <var:p> ^ <nat:2> \} \\ <var:a3> := <var:a3> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:a2> = <nat:2> * <var:p> ^ <nat:2> \land <var:a3> = <nat:6> * <var:p> ^ <nat:3> \} \\ <var:t> := <var:a3> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:a2> = <nat:2> * <var:p> ^ <nat:2> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:a2> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:a1> = <nat:8> * <var:p> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:a1> ; \\ \{ <var:R> = <var:p> \land <var:a0> = <nat:1> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:8> * <var:p> \} \\ <var:t> := <var:t> + <var:a0> \\ \{ <var:R> = <var:p> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:1> \} \end{eqnarray} Considering the above , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a0> := <nat:1> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:R> ; <var:a2> := <nat:2> ; <var:a2> := <var:a2> * <var:R> ; <var:a2> := <var:a2> * <var:R> ; <var:a3> := <nat:6> ; <var:a3> := <var:a3> * <var:R> ; <var:a3> := <var:a3> * <var:R> ; <var:a3> := <var:a3> * <var:R> ; <var:t> := <var:a3> ; <var:t> := <var:t> + <var:a2> ; <var:t> := <var:t> + <var:a1> ; <var:t> := <var:t> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:R> = <var:p> }} <def:poly> {{ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:a2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:a2> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:a2> = <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:a2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:a3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:a2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:a3> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:a2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:a3> = <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:a2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:a3> = <nat:6> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:a2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:t> = <nat:6> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:8> * <var:p> /\ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:a0> = <nat:1> /\ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:8> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 