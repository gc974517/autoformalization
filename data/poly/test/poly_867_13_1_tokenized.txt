\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as \begin{verbatim} <var:S1> := <var:B> ; <var:S2> := <var:S1> * <var:B> ; <var:S3> := <var:S2> * <var:B> ; <var:S4> := <var:S3> * <var:B> ; <var:S5> := <var:S4> * <var:B> ; <var:S0> := <nat:7> ; <var:S3> := <var:S3> * <nat:4> ; <var:S4> := <var:S4> * <nat:1> ; <var:S5> := <var:S5> * <nat:5> ; <var:k> := <var:S5> <var:k> := <var:k> + <var:S4> <var:k> := <var:k> + <var:S3> <var:k> := <var:k> + <var:S0> \end{verbatim} Allowing it to hold that $ <var:B> = <var:r> $ before evaluating the series of commands , it follows that $ <var:k> = <nat:5> \times <var:r> ^ <nat:5> + <nat:1> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:7> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning gives : \begin{eqnarray} \{ <var:B> = <var:r> \} \\ <var:S1> := <var:B> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \} \\ <var:S2> := <var:S1> * <var:B> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \} \\ <var:S3> := <var:S2> * <var:B> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <var:r> ^ <nat:3> \} \\ <var:S4> := <var:S3> * <var:B> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <var:r> ^ <nat:3> \land <var:S4> = <var:r> ^ <nat:4> \} \\ <var:S5> := <var:S4> * <var:B> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <var:r> ^ <nat:3> \land <var:S4> = <var:r> ^ <nat:4> \land <var:S5> = <var:r> ^ <nat:5> \} \\ <var:S0> := <nat:7> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <var:r> ^ <nat:3> \land <var:S4> = <var:r> ^ <nat:4> \land <var:S5> = <var:r> ^ <nat:5> \land <var:S0> = <nat:7> \} \\ <var:S3> := <var:S3> * <nat:4> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <nat:4> \cdot <var:r> ^ <nat:3> \land <var:S4> = <var:r> ^ <nat:4> \land <var:S5> = <var:r> ^ <nat:5> \land <var:S0> = <nat:7> \} \\ <var:S4> := <var:S4> * <nat:1> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <nat:4> \cdot <var:r> ^ <nat:3> \land <var:S4> = <nat:1> \cdot <var:r> ^ <nat:4> \land <var:S5> = <var:r> ^ <nat:5> \land <var:S0> = <nat:7> \} \\ <var:S5> := <var:S5> * <nat:5> ; \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <nat:4> \cdot <var:r> ^ <nat:3> \land <var:S4> = <nat:1> \cdot <var:r> ^ <nat:4> \land <var:S5> = <nat:5> \cdot <var:r> ^ <nat:5> \land <var:S0> = <nat:7> \} \\ <var:k> := <var:S5> \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <nat:4> \cdot <var:r> ^ <nat:3> \land <var:S4> = <nat:1> \cdot <var:r> ^ <nat:4> \land <var:S0> = <nat:7> \land <var:k> = <nat:5> \cdot <var:r> ^ <nat:5> \} \\ <var:k> := <var:k> + <var:S4> \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S3> = <nat:4> \cdot <var:r> ^ <nat:3> \land <var:S0> = <nat:7> \land <var:k> = <nat:5> \cdot <var:r> ^ <nat:5> + <nat:1> \cdot <var:r> ^ <nat:4> \} \\ <var:k> := <var:k> + <var:S3> \\ \{ <var:B> = <var:r> \land <var:S1> = <var:r> \land <var:S2> = <var:r> ^ <nat:2> \land <var:S0> = <nat:7> \land <var:k> = <nat:5> \cdot <var:r> ^ <nat:5> + <nat:1> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:S0> \\ \{ <var:B> = <var:r> \land <var:k> = <nat:5> \cdot <var:r> ^ <nat:5> + <nat:1> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:3> + <nat:7> \} \end{eqnarray} Considering the above , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <var:S5> : string := " <var:S5> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:B> = <var:r> }} <var:S1> := <var:B> ; <var:S2> := <var:S1> * <var:B> ; <var:S3> := <var:S2> * <var:B> ; <var:S4> := <var:S3> * <var:B> ; <var:S5> := <var:S4> * <var:B> ; <var:S0> := <nat:7> ; <var:S3> := <var:S3> * <nat:4> ; <var:S4> := <var:S4> * <nat:1> ; <var:S5> := <var:S5> * <nat:5> ; <var:k> := <var:S5> <var:k> := <var:k> + <var:S4> <var:k> := <var:k> + <var:S3> <var:k> := <var:k> + <var:S0> {{ <var:k> = <nat:5> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <var:r> ^ <nat:3> /\ <var:S4> = <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <var:r> ^ <nat:3> /\ <var:S4> = <var:r> ^ <nat:4> /\ <var:S5> = <var:r> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <var:r> ^ <nat:3> /\ <var:S4> = <var:r> ^ <nat:4> /\ <var:S5> = <var:r> ^ <nat:5> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:S4> = <var:r> ^ <nat:4> /\ <var:S5> = <var:r> ^ <nat:5> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:S4> = <nat:1> * <var:r> ^ <nat:4> /\ <var:S5> = <var:r> ^ <nat:5> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:S4> = <nat:1> * <var:r> ^ <nat:4> /\ <var:S5> = <nat:5> * <var:r> ^ <nat:5> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:S4> = <nat:1> * <var:r> ^ <nat:4> /\ <var:S0> = <nat:7> /\ <var:k> = <nat:5> * <var:r> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:S0> = <nat:7> /\ <var:k> = <nat:5> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:S1> = <var:r> /\ <var:S2> = <var:r> ^ <nat:2> /\ <var:S0> = <nat:7> /\ <var:k> = <nat:5> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:r> /\ <var:k> = <nat:5> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 