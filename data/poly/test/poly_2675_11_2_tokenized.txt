\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k> := <nat:4> ; <var:k> := <var:k> * <var:d> ; <var:k> := <nat:1> + <var:k> * <var:d> ; <var:k> := <nat:1> + <var:k> * <var:d> ; <var:k> := <nat:1> + <var:k> * <var:d> ; <var:k> := <nat:4> + <var:k> * <var:d> ; <var:k> := <nat:4> + <var:k> * <var:d> ; <var:k> := <nat:2> + <var:k> * <var:d> ; <var:k> := <nat:1> + <var:k> * <var:d> ; <var:k> := <nat:2> + <var:k> * <var:d> ; <var:k> := <nat:2> + <var:k> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assume it to be that $ <var:d> = <var:J> $ prior to interpreting our set of instructions it follows that we see $ <var:k> = <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands is accomplished using usual Hoare reasoning . Honing in on the proceeding bit of code found in the list of commands , the environment update code \verb | <var:k> := <nat:4> ; | . This command takes the condition $ \{ <var:d> = <var:J> \} $ to the postcondition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \} $ . Going forward , we see the environment update statement \verb | <var:k> := <var:k> * <var:d> ; | . This line forwards the condition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \} $ into $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> + \} $ . This is guaranteed by the assignment law given by standard Hoare techniques . Taking another step toward the following line contained in our set of instructions , the variable assignmet line defining $ <nat:1> + <var:k> * <var:d> $ as $ <var:k>$ . This line advances $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> + \} $ as the postcondition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:2> + <nat:1> \} $ . Moving onward , the command yielding $ <nat:1> + <var:k> * <var:d> $ as $ <var:k>$ . This code transfers the condition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> + <nat:1> \} $ . This is sound with the assignment scheme of usual Hoare techniques . Focusing on the proceeding line in the series of instructions , we see the statement giving $ <nat:1> + <var:k> * <var:d> $ as $ <var:k>$ . This forwards $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> + <nat:1> \} $ into $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:1> \} $ . This is known to be sound with the assignment inference rule given by usual Hoare techniques . Moving forward to the next step , the binding line assigning $ <nat:4> + <var:k> * <var:d> $ toward $ <var:k>$ . This code moves the precondition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:1> \} $ into $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:4> \} $ . Following , we see the variable update line \verb | <var:k> := <nat:4> + <var:k> * <var:d> ; | . This code moves $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:4> \} $ into $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:4> \} $ . Taking another step toward the next step in the code segment , we see the variable update command defining $ <nat:2> + <var:k> * <var:d> $ into $ <var:k>$ . This advances the condition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:4> \} $ toward $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:7> + <nat:1> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:2> \} $ . This is guaranteed through the assignment rule defined in Hoare reasoning . Moving on to the next step , we see the binding code \verb | <var:k> := <nat:1> + <var:k> * <var:d> ; | . This statement takes the condition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:7> + <nat:1> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:2> \} $ as the condition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:8> + <nat:1> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:1> \} $ . This is given with the assignment law given by typical Hoare logic . Immediately after , we have the variable update statement letting $ <nat:2> + <var:k> * <var:d> $ into $ <var:k>$ . This code redefines $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:8> + <nat:1> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:1> \} $ toward the postcondition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:9> + <nat:1> \times <var:J> ^ <nat:7> + <nat:1> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:2> \} $ . This is shown using the assignment inference rule given by standard Hoare techniques . Moving forward to the next step , we have the variable assignmet code \verb | <var:k> := <nat:2> + <var:k> * <var:d> | . This statement forwards the precondition $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:9> + <nat:1> \times <var:J> ^ <nat:7> + <nat:1> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:2> \} $ as $ \{ <var:d> = <var:J> \land <var:k> = <nat:4> \times <var:J> ^ <nat:10> + <nat:1> \times <var:J> ^ <nat:8> + <nat:1> \times <var:J> ^ <nat:7> + <nat:1> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:4> ; <var:k> := <var:k> * <var:d> ; <var:k> := <nat:1> + <var:k> * <var:d> ; <var:k> := <nat:1> + <var:k> * <var:d> ; <var:k> := <nat:1> + <var:k> * <var:d> ; <var:k> := <nat:4> + <var:k> * <var:d> ; <var:k> := <nat:4> + <var:k> * <var:d> ; <var:k> := <nat:2> + <var:k> * <var:d> ; <var:k> := <nat:1> + <var:k> * <var:d> ; <var:k> := <nat:2> + <var:k> * <var:d> ; <var:k> := <nat:2> + <var:k> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:d> = <var:J> }} <def:poly> {{ <var:k> = <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:k> = <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 