\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:o> ; <var:K2> := <var:K1> * <var:o> ; <var:K3> := <var:K2> * <var:o> ; <var:K0> := <nat:1> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:9> ; <var:K3> := <var:K3> * <nat:4> ; <var:m> := <var:K3> <var:m> := <var:m> + <var:K2> <var:m> := <var:m> + <var:K1> <var:m> := <var:m> + <var:K0> \end{verbatim} Given $ <var:o> = <var:z> $ ahead of evaluating the series of commands , it follows that $ <var:m> = <nat:4> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:1> $ after list of commands has finished . \end{theorem} \begin{proof} The course of logic for this code segment is demonstrated using typical Hoare reasoning . Looking at the subsequent command seen in our series of commands , we have the variable assignmet command defining $ <var:o> $ to $ <var:K1>$ . This takes the precondition $ \{ <var:o> = <var:z> \} $ toward the condition $ \{ <var:o> = <var:z> \land <var:K1> = <var:z> \} $ . Moving on , we have the environment update code binding $ <var:K1> * <var:o> $ as $ <var:K2>$ . This transfers the precondition $ \{ <var:o> = <var:z> \land <var:K1> = <var:z> \} $ to the condition $ \{ <var:o> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \} $ . Shifting focus toward the proceeding statement in our series of instructions , we have the variable binding command defining $ <var:K2> * <var:o> $ as $ <var:K3>$ . This statement takes the precondition $ \{ <var:o> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \} $ to $ \{ <var:o> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \} $ . Moving forward to the next step , the code \verb | <var:K0> := <nat:1> ; | . This redefines $ \{ <var:o> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \} $ toward the condition $ \{ <var:o> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . This is ensured through the assignment scheme of standard Hoare reasoning . Going to the next step , we have the binding code giving $ <var:K1> * <nat:6> $ to $ <var:K1>$ . This advances the precondition $ \{ <var:o> = <var:z> \land <var:K1> = <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:1> \} $ toward the postcondition $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . This is known to be sound by the assignment rule defined in Hoare logic . Observing the proceeding command contained in the series of commands , we see the variable binding line yielding $ <var:K2> * <nat:9> $ toward $ <var:K2>$ . This line forwards $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K2> = <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:1> \} $ to the postcondition $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K2> = <nat:9> \times <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . Moving onward , the variable assignmet command \verb | <var:K3> := <var:K3> * <nat:4> ; | . This takes the condition $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K2> = <nat:9> \times <var:z> ^ <nat:2> \land <var:K3> = <var:z> ^ <nat:3> \land <var:K0> = <nat:1> \} $ into the condition $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K2> = <nat:9> \times <var:z> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:z> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . Considering the upcoming line of code found in the series of commands , the variable binding statement giving $ <var:K3$ to $ <var:m>$ . This advances the condition $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K2> = <nat:9> \times <var:z> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:z> ^ <nat:3> \land <var:K0> = <nat:1> \} $ to $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K2> = <nat:9> \times <var:z> ^ <nat:2> \land <var:K0> = <nat:1> \land <var:m> = <nat:4> \times <var:z> ^ <nat:3> \} $ . Immediately after , the variable update command \verb | <var:m> := <var:m> + <var:K2> | . This line transfers the condition $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K2> = <nat:9> \times <var:z> ^ <nat:2> \land <var:K0> = <nat:1> \land <var:m> = <nat:4> \times <var:z> ^ <nat:3> \} $ to the postcondition $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K0> = <nat:1> \land <var:m> = <nat:4> \times <var:z> ^ <nat:3> + <nat:9> \times <var:z> ^ <nat:2> \} $ . Taking another step toward the subsequent line found in the set of instructions , the code assigning $ <var:m> + <var:K1$ into $ <var:m>$ . This redefines the condition $ \{ <var:o> = <var:z> \land <var:K1> = <nat:6> \times <var:z> \land <var:K0> = <nat:1> \land <var:m> = <nat:4> \times <var:z> ^ <nat:3> + <nat:9> \times <var:z> ^ <nat:2> \} $ toward $ \{ <var:o> = <var:z> \land <var:K0> = <nat:1> \land <var:m> = <nat:4> \times <var:z> ^ <nat:3> + <nat:9> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> \} $ . This is known to be sound through the assignment inference rule obtained from typical Hoare techniques . After , we have the variable update statement \verb | <var:m> := <var:m> + <var:K0> | . This command moves the condition $ \{ <var:o> = <var:z> \land <var:K0> = <nat:1> \land <var:m> = <nat:4> \times <var:z> ^ <nat:3> + <nat:9> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> \} $ to the condition $ \{ <var:o> = <var:z> \land <var:m> = <nat:4> \times <var:z> ^ <nat:3> + <nat:9> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:o> = <var:z> }} <var:K1> := <var:o> ; <var:K2> := <var:K1> * <var:o> ; <var:K3> := <var:K2> * <var:o> ; <var:K0> := <nat:1> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:9> ; <var:K3> := <var:K3> * <nat:4> ; <var:m> := <var:K3> <var:m> := <var:m> + <var:K2> <var:m> := <var:m> + <var:K1> <var:m> := <var:m> + <var:K0> {{ <var:m> = <nat:4> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <var:z> /\ <var:K2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <var:z> /\ <var:K2> = <var:z> ^ <nat:2> /\ <var:K3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <var:z> /\ <var:K2> = <var:z> ^ <nat:2> /\ <var:K3> = <var:z> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <nat:6> * <var:z> /\ <var:K2> = <var:z> ^ <nat:2> /\ <var:K3> = <var:z> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <nat:6> * <var:z> /\ <var:K2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:K3> = <var:z> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <nat:6> * <var:z> /\ <var:K2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:z> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <nat:6> * <var:z> /\ <var:K2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:K0> = <nat:1> /\ <var:m> = <nat:4> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K1> = <nat:6> * <var:z> /\ <var:K0> = <nat:1> /\ <var:m> = <nat:4> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:K0> = <nat:1> /\ <var:m> = <nat:4> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:m> = <nat:4> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 