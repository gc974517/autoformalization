\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:k1> := <var:e> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:9> ; <var:p> := <var:k1> <var:p> := <var:p> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:e> = <var:F> $ taking positive coefficients $ <var:F> $ prior to the execution of this program , it holds that we have $ <var:p> = <nat:9> \times <var:F> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment is accomplished with typical Hoare logic . Advancing to the next step , we have the binding line \verb | <var:k1> := <var:e> ; | . This moves the precondition $ \{ <var:e> = <var:F> \} $ toward the condition $ \{ <var:e> = <var:F> \land <var:k1> = <var:F> \} $ . Moving on to the following statement contained in the set of instructions , the variable binding code yielding $ <nat:2> $ into $ <var:k0>$ . This redefines the precondition $ \{ <var:e> = <var:F> \land <var:k1> = <var:F> \} $ to $ \{ <var:e> = <var:F> \land <var:k1> = <var:F> \land <var:k0> = <nat:2> \} $ . This is deduced using the assignment law given by Hoare reasoning . Further , we have the variable assignmet statement \verb | <var:k1> := <var:k1> * <nat:9> ; | . This statement forwards $ \{ <var:e> = <var:F> \land <var:k1> = <var:F> \land <var:k0> = <nat:2> \} $ to the condition $ \{ <var:e> = <var:F> \land <var:k1> = <nat:9> \cdot <var:F> \land <var:k0> = <nat:2> \} $ . Shifting focus toward the upcoming statement in our series of commands , we have the binding line \verb | <var:p> := <var:k1> | . This statement redefines the precondition $ \{ <var:e> = <var:F> \land <var:k1> = <nat:9> \cdot <var:F> \land <var:k0> = <nat:2> \} $ to $ \{ <var:e> = <var:F> \land <var:k0> = <nat:2> \land <var:p> = <nat:9> \cdot <var:F> \} $ . This is ensured by the assignment law defined in usual Hoare techniques . Observing the subsequent piece of code contained in the list of commands , we see the statement binding $ <var:p> + <var:k0$ to $ <var:p>$ . This transfers the condition $ \{ <var:e> = <var:F> \land <var:k0> = <nat:2> \land <var:p> = <nat:9> \cdot <var:F> \} $ as the condition $ \{ <var:e> = <var:F> \land <var:p> = <nat:9> \cdot <var:F> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:e> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:9> ; <var:p> := <var:k1> <var:p> := <var:p> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:e> = <var:F> }} <def:poly> {{ <var:p> = <nat:9> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:k1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:k1> = <var:F> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:k1> = <nat:9> * <var:F> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:k0> = <nat:2> /\ <var:p> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:p> = <nat:9> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 