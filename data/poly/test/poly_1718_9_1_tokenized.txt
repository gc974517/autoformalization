\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} : \begin{verbatim} <var:w1> := <var:N> ; <var:w2> := <var:w1> * <var:N> ; <var:w3> := <var:w2> * <var:N> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:8> ; <var:w3> := <var:w3> * <nat:7> ; <var:b> := <var:w3> <var:b> := <var:b> + <var:w1> <var:b> := <var:b> + <var:w0> \end{verbatim} Assume it to be that $ <var:N> = <var:H> $ , for all positive coefficients $ <var:H> $ , ahead of interpreting the series of instructions it must be that we have $ <var:b> = <nat:7> \cdot <var:H> ^ <nat:3> + <nat:8> \cdot <var:H> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions is given by Hoare techniques . Keeping momentum , we have \verb | { <var:N> = <var:H> } <var:w1> := <var:N> { <var:N> = <var:H> \land <var:w1> = <var:H> } | , \verb | { <var:N> = <var:H> \land <var:w1> = <var:H> } <var:w2> := <var:w1> * <var:N> { <var:N> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> } | , \verb | { <var:N> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> } <var:w3> := <var:w2> * <var:N> { <var:N> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> } | , \verb | { <var:N> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> } <var:w0> := <nat:3> { <var:N> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:3> } | and \verb | { <var:N> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:3> } <var:w1> := <var:w1> * <nat:8> { <var:N> = <var:H> \land <var:w1> = <nat:8> \cdot <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:3> } | . Advancing to the subsequent command contained in our series of commands , \verb | { <var:N> = <var:H> } <var:w1> := <var:N> { <var:N> = <var:H> \land <var:w1> = <var:H> } | . Taking a look at the upcoming line seen in our segment of code , \verb | { <var:N> = <var:H> } <var:w1> := <var:N> { <var:N> = <var:H> \land <var:w1> = <var:H> } | . Moving forward to the following steps in the series of instructions , \verb | { <var:N> = <var:H> } <var:w1> := <var:N> { <var:N> = <var:H> \land <var:w1> = <var:H> } | and \verb | { <var:N> = <var:H> \land <var:w1> = <var:H> } <var:w2> := <var:w1> * <var:N> { <var:N> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> } | . This is deduced by the binding scheme defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:N> = <var:H> }} <var:w1> := <var:N> ; <var:w2> := <var:w1> * <var:N> ; <var:w3> := <var:w2> * <var:N> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:8> ; <var:w3> := <var:w3> * <nat:7> ; <var:b> := <var:w3> <var:b> := <var:b> + <var:w1> <var:b> := <var:b> + <var:w0> {{ <var:b> = <nat:7> * <var:H> ^ <nat:3> + <nat:8> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:w1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:w1> = <nat:8> * <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:w1> = <nat:8> * <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <nat:7> * <var:H> ^ <nat:3> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:w1> = <nat:8> * <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w0> = <nat:3> /\ <var:b> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:w0> = <nat:3> /\ <var:b> = <nat:7> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:b> = <nat:7> * <var:H> ^ <nat:3> + <nat:8> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 