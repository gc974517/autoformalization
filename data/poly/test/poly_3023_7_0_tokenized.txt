\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:2> ; <var:w3> := <nat:2> ; <var:w3> := <var:w3> * <var:b> ; <var:w3> := <var:w3> * <var:b> ; <var:w3> := <var:w3> * <var:b> ; <var:r> := <var:w3> ; <var:r> := <var:r> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:b> = <var:z> $ before the evaluation of the program , it must be that we see $ <var:r> = <nat:2> \times <var:z> ^ <nat:3> + <nat:2> $ once program has executed . \end{theorem} \begin{proof} Applying standard Hoare reasoning produces : \begin{eqnarray} \{ <var:b> = <var:z> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:b> = <var:z> \land <var:w0> = <nat:2> \} \\ <var:w3> := <nat:2> ; \\ \{ <var:b> = <var:z> \land <var:w0> = <nat:2> \land <var:w3> = <nat:2> \} \\ <var:w3> := <var:w3> * <var:b> ; \\ \{ <var:b> = <var:z> \land <var:w0> = <nat:2> \land <var:w3> = <nat:2> \cdot <var:z> \} \\ <var:w3> := <var:w3> * <var:b> ; \\ \{ <var:b> = <var:z> \land <var:w0> = <nat:2> \land <var:w3> = <nat:2> \cdot <var:z> ^ <nat:2> \} \\ <var:w3> := <var:w3> * <var:b> ; \\ \{ <var:b> = <var:z> \land <var:w0> = <nat:2> \land <var:w3> = <nat:2> \cdot <var:z> ^ <nat:3> \} \\ <var:r> := <var:w3> ; \\ \{ <var:b> = <var:z> \land <var:w0> = <nat:2> \land <var:r> = <nat:2> \cdot <var:z> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:w0> \\ \{ <var:b> = <var:z> \land <var:r> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:2> \} \end{eqnarray} As a result , our series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w3> : string := " <var:w3> " . Definition <def:poly> := <var:w0> := <nat:2> ; <var:w3> := <nat:2> ; <var:w3> := <var:w3> * <var:b> ; <var:w3> := <var:w3> * <var:b> ; <var:w3> := <var:w3> * <var:b> ; <var:r> := <var:w3> ; <var:r> := <var:r> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:b> = <var:z> }} <def:poly> {{ <var:r> = <nat:2> * <var:z> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:w0> = <nat:2> /\ <var:w3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:w0> = <nat:2> /\ <var:w3> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:w0> = <nat:2> /\ <var:w3> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:w0> = <nat:2> /\ <var:w3> = <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:w0> = <nat:2> /\ <var:r> = <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:z> /\ <var:r> = <nat:2> * <var:z> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 