\begin{document} \begin{theorem} Take a segment of code as follows \begin{verbatim} <var:o0> := <nat:3> ; <var:q> := <var:o0> \end{verbatim} Given $ <var:l> = <var:n> $ with some $ <var:n> \in \mathbb{N} $ before running this code then we have $ <var:q> = <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is done by Hoare reasoning . Advancing , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:n> \} & <var:o0> := <nat:3> & \{ <var:l> = <var:n> \land <var:o0> = <nat:3> \} \\ \{ <var:l> = <var:n> \land <var:o0> = <nat:3> \} & <var:q> := <var:o0& \{ <var:l> = <var:n> \land <var:q> = <nat:3> \} \end{tabular} This is shown to be logically sound by the scheme found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:l> = <var:n> }} <var:o0> := <nat:3> ; <var:q> := <var:o0> {{ <var:q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 