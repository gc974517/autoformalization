\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:3> ; <var:F> := <var:d0> \end{verbatim} Given with some positive integers $ <var:S> $ that $ <var:H> = <var:S> $ prior to executing our program it follows that we have $ <var:F> = <nat:3> $ once segment of code is done . \end{theorem} \begin{proof} The method of proof for the set of commands can be accomplished through standard Hoare techniques . Following , we have the variable assignmet command \verb | <var:d0> := <nat:3> ; | . This statement takes the precondition $ \{ <var:H> = <var:S> \} $ as the postcondition $ \{ <var:H> = <var:S> \land <var:d0> = <nat:3> \} $ . After , we have the variable assignmet line \verb | <var:F> := <var:d0> | . This command forwards the precondition $ \{ <var:H> = <var:S> \land <var:d0> = <nat:3> \} $ to $ \{ <var:H> = <var:S> \land <var:F> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:H> = <var:S> }} <var:d0> := <nat:3> ; <var:F> := <var:d0> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 