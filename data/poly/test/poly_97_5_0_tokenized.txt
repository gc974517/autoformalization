\begin{document} \begin{theorem} Take the following set of instructions such that \begin{verbatim} <var:f0> := <nat:2> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:D> ; <var:G> := <var:f1> ; <var:G> := <var:G> + <var:f0> \end{verbatim} Allowing ( with some positive integers $ <var:k> $ ) it to hold that $ <var:D> = <var:k> $ ahead of the evaluation of the segment of code , it must be that we see $ <var:G> = <nat:2> \times <var:k> + <nat:2> $ once set of commands has exited . \end{theorem} \begin{proof} The flow of logic for our set of instructions is shown through typical Hoare logic . Now , we have \begin{verbatim} { <var:D> = <var:k> } <var:f0> := <nat:2> { <var:D> = <var:k> \land <var:f0> = <nat:2> } { <var:D> = <var:k> \land <var:f0> = <nat:2> } <var:f1> := <nat:2> { <var:D> = <var:k> \land <var:f0> = <nat:2> \land <var:f1> = <nat:2> } { <var:D> = <var:k> \land <var:f0> = <nat:2> \land <var:f1> = <nat:2> } <var:f1> := <var:f1> * <var:D> { <var:D> = <var:k> \land <var:f0> = <nat:2> \land <var:f1> = <nat:2> \times <var:k> } \end{verbatim} This is deduced with the variable update scheme defined in Hoare techniques . Shifting focus toward the proceeding bit of code in the set of instructions , we see \begin{verbatim} { <var:D> = <var:k> } <var:f0> := <nat:2> { <var:D> = <var:k> \land <var:f0> = <nat:2> } \end{verbatim} Taking a look at the next line of code seen in our code segment , we see \begin{verbatim} { <var:D> = <var:k> } <var:f0> := <nat:2> { <var:D> = <var:k> \land <var:f0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:D> = <var:k> }} <var:f0> := <nat:2> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:D> ; <var:G> := <var:f1> ; <var:G> := <var:G> + <var:f0> {{ <var:G> = <nat:2> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:f0> = <nat:2> /\ <var:G> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:G> = <nat:2> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 