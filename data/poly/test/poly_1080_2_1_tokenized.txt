\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:7> ; <var:H> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Allowing it to be that $ <var:Z> = <var:i> $ before the evaluation of this list of commands then $ <var:H> = <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this program can be accomplished through usual Hoare logic . Focusing on the subsequent line in the program , we see \verb | { <var:Z> = <var:i> } <var:u0> := <nat:7> { <var:Z> = <var:i> \land <var:u0> = <nat:7> } | . Further , \verb | { <var:Z> = <var:i> } <var:u0> := <nat:7> { <var:Z> = <var:i> \land <var:u0> = <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:7> ; <var:H> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Z> = <var:i> }} <def:poly> {{ <var:H> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:i> /\ <var:H> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 