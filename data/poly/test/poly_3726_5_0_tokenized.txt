\begin{document} \begin{theorem} Let the following set of commands as \begin{verbatim} <var:Q0> := <nat:1> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:a> ; <var:H> := <var:Q1> ; <var:H> := <var:H> + <var:Q0> \end{verbatim} Given it to be that $ <var:a> = <var:d> $ before the execution of our series of instructions then we see $ <var:H> = <nat:2> \cdot <var:d> + <nat:1> $ after set of instructions has exited . \end{theorem} \begin{proof} The method of proof for this set of commands is accomplished with Hoare reasoning . Taking a look at the proceeding statement found in the code segment , the variable update line \verb | <var:Q0> := <nat:1> ; | . This code redefines $ \{ <var:a> = <var:d> \} $ into the condition $ \{ <var:a> = <var:d> \land <var:Q0> = <nat:1> \} $ . This is deduced using the assignment law of standard Hoare logic . Moving on to the next step , we have the environment update statement \verb | <var:Q1> := <nat:2> ; | . This redefines the precondition $ \{ <var:a> = <var:d> \land <var:Q0> = <nat:1> \} $ toward the condition $ \{ <var:a> = <var:d> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:2> \} $ . This is guaranteed using the assignment law given in standard Hoare logic . Shifting focus toward the proceeding line in our segment of code , the variable assignmet line letting $ <var:Q1> * <var:a> $ toward $ <var:Q1>$ . This code advances the precondition $ \{ <var:a> = <var:d> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:2> \} $ as $ \{ <var:a> = <var:d> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:2> \cdot <var:d> \} $ . After , we see the environment update code \verb | <var:H> := <var:Q1> ; | . This redefines the condition $ \{ <var:a> = <var:d> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:2> \cdot <var:d> \} $ to $ \{ <var:a> = <var:d> \land <var:Q0> = <nat:1> \land <var:H> = <nat:2> \cdot <var:d> \} $ . Shifting focus toward the next command seen in the set of commands , we see the line defining $ <var:H> + <var:Q0$ as $ <var:H>$ . This takes $ \{ <var:a> = <var:d> \land <var:Q0> = <nat:1> \land <var:H> = <nat:2> \cdot <var:d> \} $ as $ \{ <var:a> = <var:d> \land <var:H> = <nat:2> \cdot <var:d> + <nat:1> \} $ . This is ensured through the assignment law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:a> = <var:d> }} <var:Q0> := <nat:1> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:a> ; <var:H> := <var:Q1> ; <var:H> := <var:H> + <var:Q0> {{ <var:H> = <nat:2> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:Q0> = <nat:1> /\ <var:H> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:H> = <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 