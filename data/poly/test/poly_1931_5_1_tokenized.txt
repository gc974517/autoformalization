\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:D> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:2> ; <var:U> := <var:g1> <var:U> := <var:U> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:D> = <var:o> $ ahead of evaluating the segment of code , it follows that we have $ <var:U> = <nat:2> * <var:o> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives : \begin{eqnarray} \{ <var:D> = <var:o> \} \\ <var:g1> := <var:D> ; \\ \{ <var:D> = <var:o> \land <var:g1> = <var:o> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:D> = <var:o> \land <var:g1> = <var:o> \land <var:g0> = <nat:4> \} \\ <var:g1> := <var:g1> * <nat:2> ; \\ \{ <var:D> = <var:o> \land <var:g1> = <nat:2> \cdot <var:o> \land <var:g0> = <nat:4> \} \\ <var:U> := <var:g1> \\ \{ <var:D> = <var:o> \land <var:g0> = <nat:4> \land <var:U> = <nat:2> \cdot <var:o> \} \\ <var:U> := <var:U> + <var:g0> \\ \{ <var:D> = <var:o> \land <var:U> = <nat:2> \cdot <var:o> + <nat:4> \} \end{eqnarray} Thusly , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:D> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:2> ; <var:U> := <var:g1> <var:U> := <var:U> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:D> = <var:o> }} <def:poly> {{ <var:U> = <nat:2> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g1> = <var:o> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g1> = <nat:2> * <var:o> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:4> /\ <var:U> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:U> = <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 