\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g> := <nat:3> ; <var:g> := <nat:4> + <var:g> * <var:M> ; <var:g> := <nat:4> + <var:g> * <var:M> ; <var:g> := <nat:1> + <var:g> * <var:M> ; <var:g> := <nat:2> + <var:g> * <var:M> ; <var:g> := <nat:2> + <var:g> * <var:M> ; <var:g> := <nat:1> + <var:g> * <var:M> ; <var:g> := <var:g> * <var:M> ; <var:g> := <nat:4> + <var:g> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Assume ( given any positive coefficients $ <var:X> $ ) it to be that $ <var:M> = <var:X> $ ahead of the execution of this set of commands it holds that we see $ <var:g> = <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> $ when list of instructions is done . \end{theorem} \begin{proof} Proving correctness for the program is demonstrated through typical Hoare reasoning . Stepping forward , the binding line letting $ <nat:3> $ to $ <var:g>$ . This advances the precondition $ \{ <var:M> = <var:X> \} $ toward the postcondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \} $ . Immediately following , we have the variable update command yielding $ <nat:4> + <var:g> * <var:M> $ as $ <var:g>$ . This line advances the condition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \} $ toward $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> + <nat:4> \} $ . Moving forward to the proceeding line in the code segment , we have the environment update statement \verb | <var:g> := <nat:4> + <var:g> * <var:M> ; | . This line moves the precondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> + <nat:4> \} $ into the postcondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:4> \} $ . Going to the next step , we have the assignment code yielding $ <nat:1> + <var:g> * <var:M> $ toward $ <var:g>$ . This redefines the precondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:4> \} $ as the postcondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:1> \} $ . This is shown through the assignment inference rule given in Hoare techniques . Observing the proceeding piece of code found in our set of commands , the variable binding statement binding $ <nat:2> + <var:g> * <var:M> $ toward $ <var:g>$ . This redefines $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:1> \} $ as $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:2> \} $ . Observing the proceeding bit of code seen in the series of instructions , we have the assignment code letting $ <nat:2> + <var:g> * <var:M> $ toward $ <var:g>$ . This code forwards $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:2> \} $ as $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ . Taking a look at the following piece of code contained in our series of instructions , we see the variable binding code \verb | <var:g> := <nat:1> + <var:g> * <var:M> ; | . This command moves the precondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ into the postcondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:1> \} $ . Moving on to the following command seen in our code segment , we see the environment update command binding $ <var:g> * <var:M> $ into $ <var:g>$ . This transfers the precondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:1> \} $ toward $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:7> + <nat:4> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + \} $ . This is deduced using the assignment inference rule given in usual Hoare reasoning . Moving on , the variable binding command \verb | <var:g> := <nat:4> + <var:g> * <var:M> | . This code redefines $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:7> + <nat:4> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + \} $ toward the postcondition $ \{ <var:M> = <var:X> \land <var:g> = <nat:3> \times <var:X> ^ <nat:8> + <nat:4> \times <var:X> ^ <nat:7> + <nat:4> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:4> \} $ . This is guaranteed by the assignment scheme in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:3> ; <var:g> := <nat:4> + <var:g> * <var:M> ; <var:g> := <nat:4> + <var:g> * <var:M> ; <var:g> := <nat:1> + <var:g> * <var:M> ; <var:g> := <nat:2> + <var:g> * <var:M> ; <var:g> := <nat:2> + <var:g> * <var:M> ; <var:g> := <nat:1> + <var:g> * <var:M> ; <var:g> := <var:g> * <var:M> ; <var:g> := <nat:4> + <var:g> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:M> = <var:X> }} <def:poly> {{ <var:g> = <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:g> = <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 