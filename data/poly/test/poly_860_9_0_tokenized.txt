\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:5> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:A> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:A> ; <var:V2> := <var:V2> * <var:A> ; <var:D> := <var:V2> ; <var:D> := <var:D> + <var:V1> ; <var:D> := <var:D> + <var:V0> \end{verbatim} Assuming $ <var:A> = <var:v> $ prior to interpreting the code , it holds that we have $ <var:D> = <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:5> $ . \end{theorem} \begin{proof} The application of Hoare reasoning gives : \begin{eqnarray} \{ <var:A> = <var:v> \} \\ <var:V0> := <nat:5> ; \\ \{ <var:A> = <var:v> \land <var:V0> = <nat:5> \} \\ <var:V1> := <nat:1> ; \\ \{ <var:A> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:1> \} \\ <var:V1> := <var:V1> * <var:A> ; \\ \{ <var:A> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:1> * <var:v> \} \\ <var:V2> := <nat:9> ; \\ \{ <var:A> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:1> * <var:v> \land <var:V2> = <nat:9> \} \\ <var:V2> := <var:V2> * <var:A> ; \\ \{ <var:A> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:1> * <var:v> \land <var:V2> = <nat:9> * <var:v> \} \\ <var:V2> := <var:V2> * <var:A> ; \\ \{ <var:A> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:1> * <var:v> \land <var:V2> = <nat:9> * <var:v> ^ <nat:2> \} \\ <var:D> := <var:V2> ; \\ \{ <var:A> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:1> * <var:v> \land <var:D> = <nat:9> * <var:v> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:V1> ; \\ \{ <var:A> = <var:v> \land <var:V0> = <nat:5> \land <var:D> = <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> \} \\ <var:D> := <var:D> + <var:V0> \\ \{ <var:A> = <var:v> \land <var:D> = <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:5> \} \end{eqnarray} Hence , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:A> = <var:v> }} <var:V0> := <nat:5> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:A> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:A> ; <var:V2> := <var:V2> * <var:A> ; <var:D> := <var:V2> ; <var:D> := <var:D> + <var:V1> ; <var:D> := <var:D> + <var:V0> {{ <var:D> = <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:1> * <var:v> /\ <var:V2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:1> * <var:v> /\ <var:V2> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:1> * <var:v> /\ <var:V2> = <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:1> * <var:v> /\ <var:D> = <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:V0> = <nat:5> /\ <var:D> = <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:D> = <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 