\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:H1> := <var:n> ; <var:H2> := <var:H1> * <var:n> ; <var:H3> := <var:H2> * <var:n> ; <var:H4> := <var:H3> * <var:n> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:2> ; <var:H2> := <var:H2> * <nat:3> ; <var:H3> := <var:H3> * <nat:5> ; <var:H4> := <var:H4> * <nat:9> ; <var:T> := <var:H4> <var:T> := <var:T> + <var:H3> <var:T> := <var:T> + <var:H2> <var:T> := <var:T> + <var:H1> <var:T> := <var:T> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given some $ <var:Q> $ ) that we have $ <var:n> = <var:Q> $ before the evaluation of this series of commands , it must be that we have $ <var:T> = <nat:9> * <var:Q> ^ <nat:4> + <nat:5> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> $ . \end{theorem} \begin{proof} Observe that the following decorated code segment . \begin{eqnarray} \{ <var:n> = <var:Q> \} \\ <var:H1> := <var:n> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <var:Q> \} \\ <var:H2> := <var:H1> * <var:n> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <var:Q> \land <var:H2> = <var:Q> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:n> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <var:Q> \land <var:H2> = <var:Q> ^ <nat:2> \land <var:H3> = <var:Q> ^ <nat:3> \} \\ <var:H4> := <var:H3> * <var:n> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <var:Q> \land <var:H2> = <var:Q> ^ <nat:2> \land <var:H3> = <var:Q> ^ <nat:3> \land <var:H4> = <var:Q> ^ <nat:4> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <var:Q> \land <var:H2> = <var:Q> ^ <nat:2> \land <var:H3> = <var:Q> ^ <nat:3> \land <var:H4> = <var:Q> ^ <nat:4> \land <var:H0> = <nat:3> \} \\ <var:H1> := <var:H1> * <nat:2> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <nat:2> \times <var:Q> \land <var:H2> = <var:Q> ^ <nat:2> \land <var:H3> = <var:Q> ^ <nat:3> \land <var:H4> = <var:Q> ^ <nat:4> \land <var:H0> = <nat:3> \} \\ <var:H2> := <var:H2> * <nat:3> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <nat:2> \times <var:Q> \land <var:H2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:H3> = <var:Q> ^ <nat:3> \land <var:H4> = <var:Q> ^ <nat:4> \land <var:H0> = <nat:3> \} \\ <var:H3> := <var:H3> * <nat:5> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <nat:2> \times <var:Q> \land <var:H2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:H3> = <nat:5> \times <var:Q> ^ <nat:3> \land <var:H4> = <var:Q> ^ <nat:4> \land <var:H0> = <nat:3> \} \\ <var:H4> := <var:H4> * <nat:9> ; \\ \{ <var:n> = <var:Q> \land <var:H1> = <nat:2> \times <var:Q> \land <var:H2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:H3> = <nat:5> \times <var:Q> ^ <nat:3> \land <var:H4> = <nat:9> \times <var:Q> ^ <nat:4> \land <var:H0> = <nat:3> \} \\ <var:T> := <var:H4> \\ \{ <var:n> = <var:Q> \land <var:H1> = <nat:2> \times <var:Q> \land <var:H2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:H3> = <nat:5> \times <var:Q> ^ <nat:3> \land <var:H0> = <nat:3> \land <var:T> = <nat:9> \times <var:Q> ^ <nat:4> \} \\ <var:T> := <var:T> + <var:H3> \\ \{ <var:n> = <var:Q> \land <var:H1> = <nat:2> \times <var:Q> \land <var:H2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:H0> = <nat:3> \land <var:T> = <nat:9> \times <var:Q> ^ <nat:4> + <nat:5> \times <var:Q> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:H2> \\ \{ <var:n> = <var:Q> \land <var:H1> = <nat:2> \times <var:Q> \land <var:H0> = <nat:3> \land <var:T> = <nat:9> \times <var:Q> ^ <nat:4> + <nat:5> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:H1> \\ \{ <var:n> = <var:Q> \land <var:H0> = <nat:3> \land <var:T> = <nat:9> \times <var:Q> ^ <nat:4> + <nat:5> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> \} \\ <var:T> := <var:T> + <var:H0> \\ \{ <var:n> = <var:Q> \land <var:T> = <nat:9> \times <var:Q> ^ <nat:4> + <nat:5> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Definition <def:poly> := <var:H1> := <var:n> ; <var:H2> := <var:H1> * <var:n> ; <var:H3> := <var:H2> * <var:n> ; <var:H4> := <var:H3> * <var:n> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:2> ; <var:H2> := <var:H2> * <nat:3> ; <var:H3> := <var:H3> * <nat:5> ; <var:H4> := <var:H4> * <nat:9> ; <var:T> := <var:H4> <var:T> := <var:T> + <var:H3> <var:T> := <var:T> + <var:H2> <var:T> := <var:T> + <var:H1> <var:T> := <var:T> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:n> = <var:Q> }} <def:poly> {{ <var:T> = <nat:9> * <var:Q> ^ <nat:4> + <nat:5> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <var:Q> /\ <var:H2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <var:Q> /\ <var:H2> = <var:Q> ^ <nat:2> /\ <var:H3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <var:Q> /\ <var:H2> = <var:Q> ^ <nat:2> /\ <var:H3> = <var:Q> ^ <nat:3> /\ <var:H4> = <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <var:Q> /\ <var:H2> = <var:Q> ^ <nat:2> /\ <var:H3> = <var:Q> ^ <nat:3> /\ <var:H4> = <var:Q> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <nat:2> * <var:Q> /\ <var:H2> = <var:Q> ^ <nat:2> /\ <var:H3> = <var:Q> ^ <nat:3> /\ <var:H4> = <var:Q> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <nat:2> * <var:Q> /\ <var:H2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:H3> = <var:Q> ^ <nat:3> /\ <var:H4> = <var:Q> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <nat:2> * <var:Q> /\ <var:H2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:H3> = <nat:5> * <var:Q> ^ <nat:3> /\ <var:H4> = <var:Q> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <nat:2> * <var:Q> /\ <var:H2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:H3> = <nat:5> * <var:Q> ^ <nat:3> /\ <var:H4> = <nat:9> * <var:Q> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <nat:2> * <var:Q> /\ <var:H2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:H3> = <nat:5> * <var:Q> ^ <nat:3> /\ <var:H0> = <nat:3> /\ <var:T> = <nat:9> * <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <nat:2> * <var:Q> /\ <var:H2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:H0> = <nat:3> /\ <var:T> = <nat:9> * <var:Q> ^ <nat:4> + <nat:5> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H1> = <nat:2> * <var:Q> /\ <var:H0> = <nat:3> /\ <var:T> = <nat:9> * <var:Q> ^ <nat:4> + <nat:5> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:H0> = <nat:3> /\ <var:T> = <nat:9> * <var:Q> ^ <nat:4> + <nat:5> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:T> = <nat:9> * <var:Q> ^ <nat:4> + <nat:5> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 