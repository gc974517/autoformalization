\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:T0> := <nat:1> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:w> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:w> ; <var:T2> := <var:T2> * <var:w> ; <var:N> := <var:T2> ; <var:N> := <var:N> + <var:T1> ; <var:N> := <var:N> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Allowing that $ <var:w> = <var:G> $ prior to the evaluation of this list of commands , it holds that we see $ <var:N> = <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program is evident with standard Hoare logic . Shifting focus toward the next piece of code contained in the set of instructions , the variable assignmet statement \verb | <var:T0> := <nat:1> ; | . This forwards the precondition $ \{ <var:w> = <var:G> \} $ into the condition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \} $ . This is ensured using the assignment scheme of typical Hoare reasoning . Observing the upcoming step in the list of commands , we see the variable binding statement defining $ <nat:1> $ toward $ <var:T1>$ . This takes $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \} $ toward the condition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \} $ . This is sound using the assignment scheme in typical Hoare logic . Taking another step toward the proceeding command seen in our segment of code , the variable assignmet statement \verb | <var:T1> := <var:T1> * <var:w> ; | . This code transfers the condition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \} $ toward the postcondition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \} $ . This is rigorously given with the assignment rule defined in usual Hoare logic . Moving on , the assignment command \verb | <var:T2> := <nat:6> ; | . This command redefines the precondition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \} $ to $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \land <var:T2> = <nat:6> \} $ . This is deduced through the assignment law given in standard Hoare techniques . Considering the next line of code in the list of instructions , the statement assigning $ <var:T2> * <var:w> $ into $ <var:T2>$ . This forwards the precondition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \land <var:T2> = <nat:6> \} $ into $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \land <var:T2> = <nat:6> * <var:G> \} $ . Following , we have the variable assignmet code \verb | <var:T2> := <var:T2> * <var:w> ; | . This command takes the precondition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \land <var:T2> = <nat:6> * <var:G> \} $ as the condition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \land <var:T2> = <nat:6> * <var:G> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment law from usual Hoare techniques . Going forward , we see the command \verb | <var:N> := <var:T2> ; | . This advances $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \land <var:T2> = <nat:6> * <var:G> ^ <nat:2> \} $ toward $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \land <var:N> = <nat:6> * <var:G> ^ <nat:2> \} $ . Honing in on the subsequent statement seen in our series of instructions , we have the binding line yielding $ <var:N> + <var:T1> $ into $ <var:N>$ . This command takes the condition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> * <var:G> \land <var:N> = <nat:6> * <var:G> ^ <nat:2> \} $ toward the postcondition $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:N> = <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> \} $ . After , we have the line \verb | <var:N> := <var:N> + <var:T0> | . This line forwards $ \{ <var:w> = <var:G> \land <var:T0> = <nat:1> \land <var:N> = <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> \} $ to $ \{ <var:w> = <var:G> \land <var:N> = <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> \} $ . This is shown by the assignment rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:1> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:w> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:w> ; <var:T2> := <var:T2> * <var:w> ; <var:N> := <var:T2> ; <var:N> := <var:N> + <var:T1> ; <var:N> := <var:N> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:w> = <var:G> }} <def:poly> {{ <var:N> = <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:G> /\ <var:T2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:G> /\ <var:T2> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:G> /\ <var:T2> = <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:G> /\ <var:N> = <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:T0> = <nat:1> /\ <var:N> = <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:G> /\ <var:N> = <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 