\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:2> ; <var:G> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:U> = <var:k> $ prior to running the code it holds that we have $ <var:G> = <nat:2> $ after series of instructions executes . \end{theorem} \begin{proof} The method of proof for this list of commands is demonstrated through typical Hoare techniques . Advancing , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:k> \} & <var:f0> := <nat:2> & \{ <var:U> = <var:k> \land <var:f0> = <nat:2> \} \\ \{ <var:U> = <var:k> \land <var:f0> = <nat:2> \} & <var:G> := <var:f0& \{ <var:U> = <var:k> \land <var:G> = <nat:2> \} \end{tabular} This is shown to be logically sound with the variable binding rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:2> ; <var:G> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:U> = <var:k> }} <def:poly> {{ <var:G> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:G> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 