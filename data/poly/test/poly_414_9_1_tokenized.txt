\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:w> ; <var:Z2> := <var:Z1> * <var:w> ; <var:Z3> := <var:Z2> * <var:w> ; <var:Z0> := <nat:5> ; <var:Z2> := <var:Z2> * <nat:4> ; <var:Z3> := <var:Z3> * <nat:5> ; <var:U> := <var:Z3> <var:U> := <var:U> + <var:Z2> <var:U> := <var:U> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume ( given every natural numbers $ <var:z> $ ) it to be that $ <var:w> = <var:z> $ ahead of the execution of our set of commands then we see $ <var:U> = <nat:5> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:5> $ after code segment executes . \end{theorem} \begin{proof} Applying standard Hoare reasoning yields : \begin{eqnarray} \{ <var:w> = <var:z> \} \\ <var:Z1> := <var:w> ; \\ \{ <var:w> = <var:z> \land <var:Z1> = <var:z> \} \\ <var:Z2> := <var:Z1> * <var:w> ; \\ \{ <var:w> = <var:z> \land <var:Z1> = <var:z> \land <var:Z2> = <var:z> ^ <nat:2> \} \end{eqnarray} Advancing evaluating our program results in : \begin{eqnarray} <var:Z3> := <var:Z2> * <var:w> ; \\ \{ <var:w> = <var:z> \land <var:Z1> = <var:z> \land <var:Z2> = <var:z> ^ <nat:2> \land <var:Z3> = <var:z> ^ <nat:3> \} \\ <var:Z0> := <nat:5> ; \\ \{ <var:w> = <var:z> \land <var:Z1> = <var:z> \land <var:Z2> = <var:z> ^ <nat:2> \land <var:Z3> = <var:z> ^ <nat:3> \land <var:Z0> = <nat:5> \} \\ <var:Z2> := <var:Z2> * <nat:4> ; \\ \{ <var:w> = <var:z> \land <var:Z1> = <var:z> \land <var:Z2> = <nat:4> \times <var:z> ^ <nat:2> \land <var:Z3> = <var:z> ^ <nat:3> \land <var:Z0> = <nat:5> \} \\ <var:Z3> := <var:Z3> * <nat:5> ; \\ \{ <var:w> = <var:z> \land <var:Z1> = <var:z> \land <var:Z2> = <nat:4> \times <var:z> ^ <nat:2> \land <var:Z3> = <nat:5> \times <var:z> ^ <nat:3> \land <var:Z0> = <nat:5> \} \\ <var:U> := <var:Z3> \\ \{ <var:w> = <var:z> \land <var:Z1> = <var:z> \land <var:Z2> = <nat:4> \times <var:z> ^ <nat:2> \land <var:Z0> = <nat:5> \land <var:U> = <nat:5> \times <var:z> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:Z2> \\ \{ <var:w> = <var:z> \land <var:Z1> = <var:z> \land <var:Z0> = <nat:5> \land <var:U> = <nat:5> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:Z0> \\ \{ <var:w> = <var:z> \land <var:U> = <nat:5> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:5> \} \end{eqnarray} Considering the preceding argument , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z1> := <var:w> ; <var:Z2> := <var:Z1> * <var:w> ; <var:Z3> := <var:Z2> * <var:w> ; <var:Z0> := <nat:5> ; <var:Z2> := <var:Z2> * <nat:4> ; <var:Z3> := <var:Z3> * <nat:5> ; <var:U> := <var:Z3> <var:U> := <var:U> + <var:Z2> <var:U> := <var:U> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:w> = <var:z> }} <def:poly> {{ <var:U> = <nat:5> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Z1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Z1> = <var:z> /\ <var:Z2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Z1> = <var:z> /\ <var:Z2> = <var:z> ^ <nat:2> /\ <var:Z3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Z1> = <var:z> /\ <var:Z2> = <var:z> ^ <nat:2> /\ <var:Z3> = <var:z> ^ <nat:3> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Z1> = <var:z> /\ <var:Z2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:Z3> = <var:z> ^ <nat:3> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Z1> = <var:z> /\ <var:Z2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:Z3> = <nat:5> * <var:z> ^ <nat:3> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Z1> = <var:z> /\ <var:Z2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:Z0> = <nat:5> /\ <var:U> = <nat:5> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:Z1> = <var:z> /\ <var:Z0> = <nat:5> /\ <var:U> = <nat:5> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:U> = <nat:5> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 