\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:x> ; <var:q2> := <var:q1> * <var:x> ; <var:q3> := <var:q2> * <var:x> ; <var:q4> := <var:q3> * <var:x> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:5> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:2> ; <var:q4> := <var:q4> * <nat:3> ; <var:z> := <var:q4> <var:z> := <var:z> + <var:q3> <var:z> := <var:z> + <var:q2> <var:z> := <var:z> + <var:q1> <var:z> := <var:z> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Assume that $ <var:x> = <var:n> $ prior to evaluating this set of instructions , it follows that $ <var:z> = <nat:3> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> + <nat:5> \cdot <var:n> + <nat:8> $ when series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:n> \} \\ <var:q1> := <var:x> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <var:n> \} \\ <var:q2> := <var:q1> * <var:x> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <var:n> \land <var:q2> = <var:n> ^ <nat:2> \} \\ <var:q3> := <var:q2> * <var:x> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <var:n> \land <var:q2> = <var:n> ^ <nat:2> \land <var:q3> = <var:n> ^ <nat:3> \} \\ <var:q4> := <var:q3> * <var:x> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <var:n> \land <var:q2> = <var:n> ^ <nat:2> \land <var:q3> = <var:n> ^ <nat:3> \land <var:q4> = <var:n> ^ <nat:4> \} \end{eqnarray} Continuing interpreting the program produces : \begin{eqnarray} <var:q0> := <nat:8> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <var:n> \land <var:q2> = <var:n> ^ <nat:2> \land <var:q3> = <var:n> ^ <nat:3> \land <var:q4> = <var:n> ^ <nat:4> \land <var:q0> = <nat:8> \} \\ <var:q1> := <var:q1> * <nat:5> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <nat:5> * <var:n> \land <var:q2> = <var:n> ^ <nat:2> \land <var:q3> = <var:n> ^ <nat:3> \land <var:q4> = <var:n> ^ <nat:4> \land <var:q0> = <nat:8> \} \\ <var:q2> := <var:q2> * <nat:7> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <nat:5> * <var:n> \land <var:q2> = <nat:7> * <var:n> ^ <nat:2> \land <var:q3> = <var:n> ^ <nat:3> \land <var:q4> = <var:n> ^ <nat:4> \land <var:q0> = <nat:8> \} \\ <var:q3> := <var:q3> * <nat:2> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <nat:5> * <var:n> \land <var:q2> = <nat:7> * <var:n> ^ <nat:2> \land <var:q3> = <nat:2> * <var:n> ^ <nat:3> \land <var:q4> = <var:n> ^ <nat:4> \land <var:q0> = <nat:8> \} \\ <var:q4> := <var:q4> * <nat:3> ; \\ \{ <var:x> = <var:n> \land <var:q1> = <nat:5> * <var:n> \land <var:q2> = <nat:7> * <var:n> ^ <nat:2> \land <var:q3> = <nat:2> * <var:n> ^ <nat:3> \land <var:q4> = <nat:3> * <var:n> ^ <nat:4> \land <var:q0> = <nat:8> \} \\ <var:z> := <var:q4> \\ \{ <var:x> = <var:n> \land <var:q1> = <nat:5> * <var:n> \land <var:q2> = <nat:7> * <var:n> ^ <nat:2> \land <var:q3> = <nat:2> * <var:n> ^ <nat:3> \land <var:q0> = <nat:8> \land <var:z> = <nat:3> * <var:n> ^ <nat:4> \} \\ <var:z> := <var:z> + <var:q3> \\ \{ <var:x> = <var:n> \land <var:q1> = <nat:5> * <var:n> \land <var:q2> = <nat:7> * <var:n> ^ <nat:2> \land <var:q0> = <nat:8> \land <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:q2> \\ \{ <var:x> = <var:n> \land <var:q1> = <nat:5> * <var:n> \land <var:q0> = <nat:8> \land <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:q1> \\ \{ <var:x> = <var:n> \land <var:q0> = <nat:8> \land <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:5> * <var:n> \} \\ <var:z> := <var:z> + <var:q0> \\ \{ <var:x> = <var:n> \land <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <var:q4> : string := " <var:q4> " . Definition <def:poly> := <var:q1> := <var:x> ; <var:q2> := <var:q1> * <var:x> ; <var:q3> := <var:q2> * <var:x> ; <var:q4> := <var:q3> * <var:x> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:5> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:2> ; <var:q4> := <var:q4> * <nat:3> ; <var:z> := <var:q4> <var:z> := <var:z> + <var:q3> <var:z> := <var:z> + <var:q2> <var:z> := <var:z> + <var:q1> <var:z> := <var:z> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:x> = <var:n> }} <def:poly> {{ <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <var:n> /\ <var:q2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <var:n> /\ <var:q2> = <var:n> ^ <nat:2> /\ <var:q3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <var:n> /\ <var:q2> = <var:n> ^ <nat:2> /\ <var:q3> = <var:n> ^ <nat:3> /\ <var:q4> = <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <var:n> /\ <var:q2> = <var:n> ^ <nat:2> /\ <var:q3> = <var:n> ^ <nat:3> /\ <var:q4> = <var:n> ^ <nat:4> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <nat:5> * <var:n> /\ <var:q2> = <var:n> ^ <nat:2> /\ <var:q3> = <var:n> ^ <nat:3> /\ <var:q4> = <var:n> ^ <nat:4> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <nat:5> * <var:n> /\ <var:q2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:q3> = <var:n> ^ <nat:3> /\ <var:q4> = <var:n> ^ <nat:4> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <nat:5> * <var:n> /\ <var:q2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:n> ^ <nat:3> /\ <var:q4> = <var:n> ^ <nat:4> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <nat:5> * <var:n> /\ <var:q2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:n> ^ <nat:3> /\ <var:q4> = <nat:3> * <var:n> ^ <nat:4> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <nat:5> * <var:n> /\ <var:q2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:n> ^ <nat:3> /\ <var:q0> = <nat:8> /\ <var:z> = <nat:3> * <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <nat:5> * <var:n> /\ <var:q2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:q0> = <nat:8> /\ <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q1> = <nat:5> * <var:n> /\ <var:q0> = <nat:8> /\ <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:q0> = <nat:8> /\ <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:z> = <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 