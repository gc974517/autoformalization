\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:b1> := <var:z> ; <var:b2> := <var:b1> * <var:z> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:1> ; <var:P> := <var:b2> <var:P> := <var:P> + <var:b1> <var:P> := <var:P> + <var:b0> \end{verbatim} Assuming --- taking whole numbers $ <var:u> $ --- it to hold that $ <var:z> = <var:u> $ ahead of running our series of instructions , it holds that we have $ <var:P> = <nat:1> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the list of commands can be given using Hoare logic . Focusing on the proceeding step in our series of instructions , the line binding $ <var:z> $ as $ <var:b1>$ . This code forwards $ \{ <var:z> = <var:u> \} $ as the postcondition $ \{ <var:z> = <var:u> \land <var:b1> = <var:u> \} $ . Immediately following , we have the binding code \verb | <var:b2> := <var:b1> * <var:z> ; | . This redefines $ \{ <var:z> = <var:u> \land <var:b1> = <var:u> \} $ to the postcondition $ \{ <var:z> = <var:u> \land <var:b1> = <var:u> \land <var:b2> = <var:u> ^ <nat:2> \} $ . Advancing to the next step , we see the assignment line assigning $ <nat:4> $ as $ <var:b0>$ . This forwards $ \{ <var:z> = <var:u> \land <var:b1> = <var:u> \land <var:b2> = <var:u> ^ <nat:2> \} $ to $ \{ <var:z> = <var:u> \land <var:b1> = <var:u> \land <var:b2> = <var:u> ^ <nat:2> \land <var:b0> = <nat:4> \} $ . This is rigorously given through the assignment rule of standard Hoare techniques . Advancing , we have the variable binding command giving $ <var:b1> * <nat:5> $ as $ <var:b1>$ . This command takes the precondition $ \{ <var:z> = <var:u> \land <var:b1> = <var:u> \land <var:b2> = <var:u> ^ <nat:2> \land <var:b0> = <nat:4> \} $ as the condition $ \{ <var:z> = <var:u> \land <var:b1> = <nat:5> \cdot <var:u> \land <var:b2> = <var:u> ^ <nat:2> \land <var:b0> = <nat:4> \} $ . This is deduced by the assignment rule from Hoare techniques . Paying attention to the subsequent step seen in the program , we see the binding command assigning $ <var:b2> * <nat:1> $ to $ <var:b2>$ . This command takes $ \{ <var:z> = <var:u> \land <var:b1> = <nat:5> \cdot <var:u> \land <var:b2> = <var:u> ^ <nat:2> \land <var:b0> = <nat:4> \} $ toward the postcondition $ \{ <var:z> = <var:u> \land <var:b1> = <nat:5> \cdot <var:u> \land <var:b2> = <nat:1> \cdot <var:u> ^ <nat:2> \land <var:b0> = <nat:4> \} $ . Considering the upcoming piece of code found in our list of instructions , the environment update code letting $ <var:b2$ toward $ <var:P>$ . This transfers $ \{ <var:z> = <var:u> \land <var:b1> = <nat:5> \cdot <var:u> \land <var:b2> = <nat:1> \cdot <var:u> ^ <nat:2> \land <var:b0> = <nat:4> \} $ into the postcondition $ \{ <var:z> = <var:u> \land <var:b1> = <nat:5> \cdot <var:u> \land <var:b0> = <nat:4> \land <var:P> = <nat:1> \cdot <var:u> ^ <nat:2> \} $ . Moving on to the following line contained in the list of commands , we see the binding line yielding $ <var:P> + <var:b1$ to $ <var:P>$ . This moves the precondition $ \{ <var:z> = <var:u> \land <var:b1> = <nat:5> \cdot <var:u> \land <var:b0> = <nat:4> \land <var:P> = <nat:1> \cdot <var:u> ^ <nat:2> \} $ toward $ \{ <var:z> = <var:u> \land <var:b0> = <nat:4> \land <var:P> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> \} $ . Shifting focus toward the subsequent line of code in the series of commands , the environment update command \verb | <var:P> := <var:P> + <var:b0> | . This takes the precondition $ \{ <var:z> = <var:u> \land <var:b0> = <nat:4> \land <var:P> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> \} $ toward the postcondition $ \{ <var:z> = <var:u> \land <var:P> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:z> = <var:u> }} <var:b1> := <var:z> ; <var:b2> := <var:b1> * <var:z> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:1> ; <var:P> := <var:b2> <var:P> := <var:P> + <var:b1> <var:P> := <var:P> + <var:b0> {{ <var:P> = <nat:1> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:b1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:b1> = <var:u> /\ <var:b2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:b1> = <var:u> /\ <var:b2> = <var:u> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:b1> = <nat:5> * <var:u> /\ <var:b2> = <var:u> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:b1> = <nat:5> * <var:u> /\ <var:b2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:b1> = <nat:5> * <var:u> /\ <var:b0> = <nat:4> /\ <var:P> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:b0> = <nat:4> /\ <var:P> = <nat:1> * <var:u> ^ <nat:2> + <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:P> = <nat:1> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 