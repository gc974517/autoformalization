\begin{document} \begin{theorem} We define the following program : \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:O> ; <var:J2> := <nat:7> ; <var:J2> := <var:J2> * <var:O> ; <var:J2> := <var:J2> * <var:O> ; <var:J3> := <nat:1> ; <var:J3> := <var:J3> * <var:O> ; <var:J3> := <var:J3> * <var:O> ; <var:J3> := <var:J3> * <var:O> ; <var:j> := <var:J3> ; <var:j> := <var:j> + <var:J2> ; <var:j> := <var:j> + <var:J1> ; <var:j> := <var:j> + <var:J0> \end{verbatim} Allow --- for every $ <var:a> $ --- that we have $ <var:O> = <var:a> $ prior to the execution of our series of instructions then we have $ <var:j> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our segment of code can be accomplished using typical Hoare logic . Now , \begin{eqnarray} \{ <var:O> = <var:a> \} \, <var:J0> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \\ \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \, <var:J1> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \} \\ \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \} \, <var:J1> := <var:J1> * <var:O> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:a> \} \\ \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:a> \} \, <var:J2> := <nat:7> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:a> \land <var:J2> = <nat:7> \} \\ \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:a> \land <var:J2> = <nat:7> \} \, <var:J2> := <var:J2> * <var:O> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:a> \land <var:J2> = <nat:7> \times <var:a> \} \\ \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:a> \land <var:J2> = <nat:7> \times <var:a> \} \, <var:J2> := <var:J2> * <var:O> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:a> \land <var:J2> = <nat:7> \times <var:a> ^ <nat:2> \} \end{eqnarray} This is given with the variable update scheme of usual Hoare reasoning . Moving on to the following lines of codein our segment of code , we see \begin{eqnarray} \{ <var:O> = <var:a> \} \, <var:J0> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \\ \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \, <var:J1> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \} \end{eqnarray} Stepping forward , \begin{eqnarray} \{ <var:O> = <var:a> \} \, <var:J0> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \end{eqnarray} This is shown through the variable assignmet inference rule from typical Hoare techniques . Moving onward , we have \begin{eqnarray} \{ <var:O> = <var:a> \} \, <var:J0> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \end{eqnarray} This is ensured with the variable update inference rule defined by usual Hoare techniques . Moving forward to the next step , we have \begin{eqnarray} \{ <var:O> = <var:a> \} \, <var:J0> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \\ \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \, <var:J1> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \} \\ \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \} \, <var:J1> := <var:J1> * <var:O> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:a> \} \end{eqnarray} Jumping to the upcoming piece of code found in the program , \begin{eqnarray} \{ <var:O> = <var:a> \} \, <var:J0> := <nat:4> \, \{ <var:O> = <var:a> \land <var:J0> = <nat:4> \} \end{eqnarray} This is sound using the variable binding law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:O> = <var:a> }} <var:J0> := <nat:4> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:O> ; <var:J2> := <nat:7> ; <var:J2> := <var:J2> * <var:O> ; <var:J2> := <var:J2> * <var:O> ; <var:J3> := <nat:1> ; <var:J3> := <var:J3> * <var:O> ; <var:J3> := <var:J3> * <var:O> ; <var:J3> := <var:J3> * <var:O> ; <var:j> := <var:J3> ; <var:j> := <var:j> + <var:J2> ; <var:j> := <var:j> + <var:J1> ; <var:j> := <var:j> + <var:J0> {{ <var:j> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:J2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:J2> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:J2> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:J2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:J3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:J2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:J3> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:J2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:J3> = <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:J2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:J3> = <nat:1> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:J2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:j> = <nat:1> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:a> /\ <var:j> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:J0> = <nat:4> /\ <var:j> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:a> /\ <var:j> = <nat:1> * <var:a> ^ <nat:3> + <nat:7> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 