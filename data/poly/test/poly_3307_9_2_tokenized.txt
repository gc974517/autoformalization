\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:m> := <nat:1> ; <var:m> := <nat:3> + <var:m> * <var:e> ; <var:m> := <nat:2> + <var:m> * <var:e> ; <var:m> := <nat:2> + <var:m> * <var:e> ; <var:m> := <var:m> * <var:e> ; <var:m> := <nat:3> + <var:m> * <var:e> ; <var:m> := <nat:1> + <var:m> * <var:e> ; <var:m> := <var:m> * <var:e> ; <var:m> := <nat:3> + <var:m> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:e> = <var:W> $ ahead of interpreting the set of instructions , it must be that we see $ <var:m> = <nat:1> \times <var:W> ^ <nat:8> + <nat:3> \times <var:W> ^ <nat:7> + <nat:2> \times <var:W> ^ <nat:6> + <nat:2> \times <var:W> ^ <nat:5> + <nat:3> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:3> $ after program terminates . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives us : \begin{eqnarray} \{ <var:e> = <var:W> \} \\ <var:m> := <nat:1> ; \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \} \\ <var:m> := <nat:3> + <var:m> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \cdot <var:W> + <nat:3> \} \\ <var:m> := <nat:2> + <var:m> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:2> \} \\ <var:m> := <var:m> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + \} \\ <var:m> := <nat:3> + <var:m> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:2> \cdot <var:W> ^ <nat:2> + <nat:3> \} \\ <var:m> := <nat:1> + <var:m> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \cdot <var:W> ^ <nat:6> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:2> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> + <nat:1> \} \\ <var:m> := <var:m> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:6> + <nat:2> \cdot <var:W> ^ <nat:5> + <nat:2> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + \} \\ <var:m> := <nat:3> + <var:m> * <var:e> \\ \{ <var:e> = <var:W> \land <var:m> = <nat:1> \cdot <var:W> ^ <nat:8> + <nat:3> \cdot <var:W> ^ <nat:7> + <nat:2> \cdot <var:W> ^ <nat:6> + <nat:2> \cdot <var:W> ^ <nat:5> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \} \end{eqnarray} Advancing running this code gives us : \begin{eqnarray} \end{eqnarray} Thus , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:1> ; <var:m> := <nat:3> + <var:m> * <var:e> ; <var:m> := <nat:2> + <var:m> * <var:e> ; <var:m> := <nat:2> + <var:m> * <var:e> ; <var:m> := <var:m> * <var:e> ; <var:m> := <nat:3> + <var:m> * <var:e> ; <var:m> := <nat:1> + <var:m> * <var:e> ; <var:m> := <var:m> * <var:e> ; <var:m> := <nat:3> + <var:m> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:e> = <var:W> }} <def:poly> {{ <var:m> = <nat:1> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:m> = <nat:1> * <var:W> ^ <nat:8> + <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 