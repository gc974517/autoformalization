\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:3> ; <var:C> := <var:K0> \end{verbatim} Given $ <var:T> = <var:p> $ ( letting positive numbers $ <var:p> $ ) ahead of evaluating this series of instructions , then we have $ <var:C> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:p> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:T> = <var:p> \land <var:K0> = <nat:3> \} \\ <var:C> := <var:K0> \\ \{ <var:T> = <var:p> \land <var:C> = <nat:3> \} \end{eqnarray} Using standard Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:T> = <var:p> }} <var:K0> := <nat:3> ; <var:C> := <var:K0> {{ <var:C> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:C> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 