\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:X> := <nat:2> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:1> + <var:X> * <var:J> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:1> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> \end{verbatim} Allowing it to hold that $ <var:J> = <var:A> $ prior to executing this set of commands , then we see $ <var:X> = <nat:2> \cdot <var:A> ^ <nat:11> + <nat:4> \cdot <var:A> ^ <nat:10> + <nat:3> \cdot <var:A> ^ <nat:9> + <nat:4> \cdot <var:A> ^ <nat:8> + <nat:1> \cdot <var:A> ^ <nat:7> + <nat:4> \cdot <var:A> ^ <nat:6> + <nat:1> \cdot <var:A> ^ <nat:5> + <nat:3> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> + <nat:2> $ when program has terminated . \end{theorem} \begin{proof} Notice the following decorated code . \begin{eqnarray} \{ <var:J> = <var:A> \} \\ <var:X> := <nat:2> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \} \\ <var:X> := <nat:4> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> + <nat:4> \} \\ <var:X> := <nat:3> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:3> \} \\ <var:X> := <nat:4> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:4> \} \\ <var:X> := <nat:1> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:1> \} \\ <var:X> := <nat:4> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:5> + <nat:4> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:4> \} \\ <var:X> := <nat:1> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:6> + <nat:4> \cdot <var:A> ^ <nat:5> + <nat:3> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:1> \} \\ <var:X> := <nat:3> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:7> + <nat:4> \cdot <var:A> ^ <nat:6> + <nat:3> \cdot <var:A> ^ <nat:5> + <nat:4> \cdot <var:A> ^ <nat:4> + <nat:1> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:3> \} \\ <var:X> := <nat:3> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:8> + <nat:4> \cdot <var:A> ^ <nat:7> + <nat:3> \cdot <var:A> ^ <nat:6> + <nat:4> \cdot <var:A> ^ <nat:5> + <nat:1> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:3> \} \\ <var:X> := <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:9> + <nat:4> \cdot <var:A> ^ <nat:8> + <nat:3> \cdot <var:A> ^ <nat:7> + <nat:4> \cdot <var:A> ^ <nat:6> + <nat:1> \cdot <var:A> ^ <nat:5> + <nat:4> \cdot <var:A> ^ <nat:4> + <nat:1> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + \} \\ <var:X> := <nat:2> + <var:X> * <var:J> ; \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:10> + <nat:4> \cdot <var:A> ^ <nat:9> + <nat:3> \cdot <var:A> ^ <nat:8> + <nat:4> \cdot <var:A> ^ <nat:7> + <nat:1> \cdot <var:A> ^ <nat:6> + <nat:4> \cdot <var:A> ^ <nat:5> + <nat:1> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> ^ <nat:2> + <nat:2> \} \\ <var:X> := <nat:2> + <var:X> * <var:J> \\ \{ <var:J> = <var:A> \land <var:X> = <nat:2> \cdot <var:A> ^ <nat:11> + <nat:4> \cdot <var:A> ^ <nat:10> + <nat:3> \cdot <var:A> ^ <nat:9> + <nat:4> \cdot <var:A> ^ <nat:8> + <nat:1> \cdot <var:A> ^ <nat:7> + <nat:4> \cdot <var:A> ^ <nat:6> + <nat:1> \cdot <var:A> ^ <nat:5> + <nat:3> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:J> = <var:A> }} <var:X> := <nat:2> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:1> + <var:X> * <var:J> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:1> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> {{ <var:X> = <nat:2> * <var:A> ^ <nat:11> + <nat:4> * <var:A> ^ <nat:10> + <nat:3> * <var:A> ^ <nat:9> + <nat:4> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:8> + <nat:4> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:9> + <nat:4> * <var:A> ^ <nat:8> + <nat:3> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:10> + <nat:4> * <var:A> ^ <nat:9> + <nat:3> * <var:A> ^ <nat:8> + <nat:4> * <var:A> ^ <nat:7> + <nat:1> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:X> = <nat:2> * <var:A> ^ <nat:11> + <nat:4> * <var:A> ^ <nat:10> + <nat:3> * <var:A> ^ <nat:9> + <nat:4> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 