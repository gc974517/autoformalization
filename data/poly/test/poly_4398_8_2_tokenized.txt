\begin{document} \begin{theorem} Define the following list of commands as \begin{verbatim} <var:x> := <nat:3> ; <var:x> := <nat:2> + <var:x> * <var:y> ; <var:x> := <nat:2> + <var:x> * <var:y> ; <var:x> := <nat:1> + <var:x> * <var:y> ; <var:x> := <nat:1> + <var:x> * <var:y> ; <var:x> := <nat:3> + <var:x> * <var:y> ; <var:x> := <nat:3> + <var:x> * <var:y> ; <var:x> := <nat:1> + <var:x> * <var:y> \end{verbatim} Allow $ <var:y> = <var:w> $ before evaluating the set of commands , it follows that we have $ <var:x> = <nat:3> \times <var:w> ^ <nat:7> + <nat:2> \times <var:w> ^ <nat:6> + <nat:2> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the set of instructions is given using usual Hoare reasoning . Taking another step toward the upcoming lines seen in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:w> \} & <var:x> := <nat:3> & \{ <var:y> = <var:w> \land <var:x> = <nat:3> \} \\ \{ <var:y> = <var:w> \land <var:x> = <nat:3> \} & <var:x> := <nat:2> + <var:x> * <var:y> & \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> + <nat:2> \} \\ \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> + <nat:2> \} & <var:x> := <nat:2> + <var:x> * <var:y> & \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:2> \} \\ \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:2> \} & <var:x> := <nat:1> + <var:x> * <var:y> & \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:1> \} \\ \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:1> \} & <var:x> := <nat:1> + <var:x> * <var:y> & \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:1> \} \\ \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:1> \} & <var:x> := <nat:3> + <var:x> * <var:y> & \{ <var:y> = <var:w> \land <var:x> = <nat:3> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> \} \end{tabular} Next , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:w> \} & <var:x> := <nat:3> & \{ <var:y> = <var:w> \land <var:x> = <nat:3> \} \end{tabular} Moving on to the next command seen in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:w> \} & <var:x> := <nat:3> & \{ <var:y> = <var:w> \land <var:x> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:y> = <var:w> }} <var:x> := <nat:3> ; <var:x> := <nat:2> + <var:x> * <var:y> ; <var:x> := <nat:2> + <var:x> * <var:y> ; <var:x> := <nat:1> + <var:x> * <var:y> ; <var:x> := <nat:1> + <var:x> * <var:y> ; <var:x> := <nat:3> + <var:x> * <var:y> ; <var:x> := <nat:3> + <var:x> * <var:y> ; <var:x> := <nat:1> + <var:x> * <var:y> {{ <var:x> = <nat:3> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:x> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:x> = <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:x> = <nat:3> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 