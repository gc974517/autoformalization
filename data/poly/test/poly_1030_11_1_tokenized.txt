\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:n1> := <var:R> ; <var:n2> := <var:n1> * <var:R> ; <var:n3> := <var:n2> * <var:R> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:1> ; <var:n2> := <var:n2> * <nat:9> ; <var:n3> := <var:n3> * <nat:8> ; <var:W> := <var:n3> <var:W> := <var:W> + <var:n2> <var:W> := <var:W> + <var:n1> <var:W> := <var:W> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> . Assume that we have $ <var:R> = <var:w> $ prior to running our set of instructions it holds that we see $ <var:W> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> $ once series of commands finishes . \end{theorem} \begin{proof} Proving correctness for the code segment can be given with the below decorated program . \begin{eqnarray} \{ <var:R> = <var:w> \} \\ <var:n1> := <var:R> ; \\ \{ <var:R> = <var:w> \land <var:n1> = <var:w> \} \\ <var:n2> := <var:n1> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:n1> = <var:w> \land <var:n2> = <var:w> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:n1> = <var:w> \land <var:n2> = <var:w> ^ <nat:2> \land <var:n3> = <var:w> ^ <nat:3> \} \\ <var:n0> := <nat:4> ; \\ \{ <var:R> = <var:w> \land <var:n1> = <var:w> \land <var:n2> = <var:w> ^ <nat:2> \land <var:n3> = <var:w> ^ <nat:3> \land <var:n0> = <nat:4> \} \\ <var:n1> := <var:n1> * <nat:1> ; \\ \{ <var:R> = <var:w> \land <var:n1> = <nat:1> \times <var:w> \land <var:n2> = <var:w> ^ <nat:2> \land <var:n3> = <var:w> ^ <nat:3> \land <var:n0> = <nat:4> \} \\ <var:n2> := <var:n2> * <nat:9> ; \\ \{ <var:R> = <var:w> \land <var:n1> = <nat:1> \times <var:w> \land <var:n2> = <nat:9> \times <var:w> ^ <nat:2> \land <var:n3> = <var:w> ^ <nat:3> \land <var:n0> = <nat:4> \} \\ <var:n3> := <var:n3> * <nat:8> ; \\ \{ <var:R> = <var:w> \land <var:n1> = <nat:1> \times <var:w> \land <var:n2> = <nat:9> \times <var:w> ^ <nat:2> \land <var:n3> = <nat:8> \times <var:w> ^ <nat:3> \land <var:n0> = <nat:4> \} \\ <var:W> := <var:n3> \\ \{ <var:R> = <var:w> \land <var:n1> = <nat:1> \times <var:w> \land <var:n2> = <nat:9> \times <var:w> ^ <nat:2> \land <var:n0> = <nat:4> \land <var:W> = <nat:8> \times <var:w> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:n2> \\ \{ <var:R> = <var:w> \land <var:n1> = <nat:1> \times <var:w> \land <var:n0> = <nat:4> \land <var:W> = <nat:8> \times <var:w> ^ <nat:3> + <nat:9> \times <var:w> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:n1> \\ \{ <var:R> = <var:w> \land <var:n0> = <nat:4> \land <var:W> = <nat:8> \times <var:w> ^ <nat:3> + <nat:9> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> \} \\ <var:W> := <var:W> + <var:n0> \\ \{ <var:R> = <var:w> \land <var:W> = <nat:8> \times <var:w> ^ <nat:3> + <nat:9> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} \end{eqnarray} Using usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:R> ; <var:n2> := <var:n1> * <var:R> ; <var:n3> := <var:n2> * <var:R> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:1> ; <var:n2> := <var:n2> * <nat:9> ; <var:n3> := <var:n3> * <nat:8> ; <var:W> := <var:n3> <var:W> := <var:W> + <var:n2> <var:W> := <var:W> + <var:n1> <var:W> := <var:W> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <def:poly> {{ <var:W> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <var:w> /\ <var:n2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <var:w> /\ <var:n2> = <var:w> ^ <nat:2> /\ <var:n3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <var:w> /\ <var:n2> = <var:w> ^ <nat:2> /\ <var:n3> = <var:w> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <nat:1> * <var:w> /\ <var:n2> = <var:w> ^ <nat:2> /\ <var:n3> = <var:w> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <nat:1> * <var:w> /\ <var:n2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:n3> = <var:w> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <nat:1> * <var:w> /\ <var:n2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:n3> = <nat:8> * <var:w> ^ <nat:3> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <nat:1> * <var:w> /\ <var:n2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:n0> = <nat:4> /\ <var:W> = <nat:8> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n1> = <nat:1> * <var:w> /\ <var:n0> = <nat:4> /\ <var:W> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:n0> = <nat:4> /\ <var:W> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:W> = <nat:8> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 