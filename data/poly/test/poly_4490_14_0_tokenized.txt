\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:6> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:B> ; <var:H2> := <nat:9> ; <var:H2> := <var:H2> * <var:B> ; <var:H2> := <var:H2> * <var:B> ; <var:H3> := <nat:2> ; <var:H3> := <var:H3> * <var:B> ; <var:H3> := <var:H3> * <var:B> ; <var:H3> := <var:H3> * <var:B> ; <var:O> := <var:H3> ; <var:O> := <var:O> + <var:H2> ; <var:O> := <var:O> + <var:H1> ; <var:O> := <var:O> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allowing it to hold that $ <var:B> = <var:E> $ ahead of executing this list of commands it holds that $ <var:O> = <nat:2> \cdot <var:E> ^ <nat:3> + <nat:9> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:E> \} \\ <var:H0> := <nat:6> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \} \\ <var:H1> := <nat:2> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \} \\ <var:H1> := <var:H1> * <var:B> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \} \\ <var:H2> := <nat:9> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:H2> = <nat:9> \} \\ <var:H2> := <var:H2> * <var:B> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:H2> = <nat:9> \cdot <var:E> \} \\ <var:H2> := <var:H2> * <var:B> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:H2> = <nat:9> \cdot <var:E> ^ <nat:2> \} \\ <var:H3> := <nat:2> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:H2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:H3> = <nat:2> \} \\ <var:H3> := <var:H3> * <var:B> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:H2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:H3> = <nat:2> \cdot <var:E> \} \\ <var:H3> := <var:H3> * <var:B> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:H2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:H3> = <nat:2> \cdot <var:E> ^ <nat:2> \} \\ <var:H3> := <var:H3> * <var:B> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:H2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:H3> = <nat:2> \cdot <var:E> ^ <nat:3> \} \\ <var:O> := <var:H3> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:H2> = <nat:9> \cdot <var:E> ^ <nat:2> \land <var:O> = <nat:2> \cdot <var:E> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:H2> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:H1> = <nat:2> \cdot <var:E> \land <var:O> = <nat:2> \cdot <var:E> ^ <nat:3> + <nat:9> \cdot <var:E> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:H1> ; \\ \{ <var:B> = <var:E> \land <var:H0> = <nat:6> \land <var:O> = <nat:2> \cdot <var:E> ^ <nat:3> + <nat:9> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> \} \\ <var:O> := <var:O> + <var:H0> \\ \{ <var:B> = <var:E> \land <var:O> = <nat:2> \cdot <var:E> ^ <nat:3> + <nat:9> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:6> \} \end{eqnarray} Using usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H0> := <nat:6> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:B> ; <var:H2> := <nat:9> ; <var:H2> := <var:H2> * <var:B> ; <var:H2> := <var:H2> * <var:B> ; <var:H3> := <nat:2> ; <var:H3> := <var:H3> * <var:B> ; <var:H3> := <var:H3> * <var:B> ; <var:H3> := <var:H3> * <var:B> ; <var:O> := <var:H3> ; <var:O> := <var:O> + <var:H2> ; <var:O> := <var:O> + <var:H1> ; <var:O> := <var:O> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:B> = <var:E> }} <def:poly> {{ <var:O> = <nat:2> * <var:E> ^ <nat:3> + <nat:9> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:H2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:H2> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:H2> = <nat:9> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:H2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:H3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:H2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:H3> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:H2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:H3> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:H2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:H3> = <nat:2> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:H2> = <nat:9> * <var:E> ^ <nat:2> /\ <var:O> = <nat:2> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:2> * <var:E> /\ <var:O> = <nat:2> * <var:E> ^ <nat:3> + <nat:9> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:H0> = <nat:6> /\ <var:O> = <nat:2> * <var:E> ^ <nat:3> + <nat:9> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:O> = <nat:2> * <var:E> ^ <nat:3> + <nat:9> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 