\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:5> ; <var:d> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume --- given some $ <var:i> \in \mathbb{Z}^+ $ --- that $ <var:N> = <var:i> $ before interpreting our code segment , it must be that we have $ <var:d> = <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions can be accomplished through Hoare logic . Advancing to the next step , \begin{eqnarray} \{ <var:N> = <var:i> \} \, <var:Z0> := <nat:5> \, \{ <var:N> = <var:i> \land <var:Z0> = <nat:5> \} \end{eqnarray} Taking a look at the following piece of code in the series of instructions , we see \begin{eqnarray} \{ <var:N> = <var:i> \} \, <var:Z0> := <nat:5> \, \{ <var:N> = <var:i> \land <var:Z0> = <nat:5> \} \end{eqnarray} This is shown to be logically sound through the variable assignmet inference rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:5> ; <var:d> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:N> = <var:i> }} <def:poly> {{ <var:d> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:d> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 