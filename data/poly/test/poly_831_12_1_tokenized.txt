\begin{document} \begin{theorem} Consider the following set of commands as follows \begin{verbatim} <var:X1> := <var:R> ; <var:X2> := <var:X1> * <var:R> ; <var:X3> := <var:X2> * <var:R> ; <var:X4> := <var:X3> * <var:R> ; <var:X0> := <nat:1> ; <var:X1> := <var:X1> * <nat:1> ; <var:X3> := <var:X3> * <nat:1> ; <var:X4> := <var:X4> * <nat:4> ; <var:K> := <var:X4> <var:K> := <var:K> + <var:X3> <var:K> := <var:K> + <var:X1> <var:K> := <var:K> + <var:X0> \end{verbatim} Given it to hold that $ <var:R> = <var:T> $ taking integers $ <var:T> $ prior to running the list of commands , it follows that $ <var:K> = <nat:4> \cdot <var:T> ^ <nat:4> + <nat:1> \cdot <var:T> ^ <nat:3> + <nat:1> \cdot <var:T> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:R> = <var:T> \} \\ <var:X1> := <var:R> ; \\ \{ <var:R> = <var:T> \land <var:X1> = <var:T> \} \\ <var:X2> := <var:X1> * <var:R> ; \\ \{ <var:R> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \} \\ <var:X3> := <var:X2> * <var:R> ; \\ \{ <var:R> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \} \\ <var:X4> := <var:X3> * <var:R> ; \\ \{ <var:R> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X4> = <var:T> ^ <nat:4> \} \\ <var:X0> := <nat:1> ; \\ \{ <var:R> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X4> = <var:T> ^ <nat:4> \land <var:X0> = <nat:1> \} \\ <var:X1> := <var:X1> * <nat:1> ; \\ \{ <var:R> = <var:T> \land <var:X1> = <nat:1> \times <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X4> = <var:T> ^ <nat:4> \land <var:X0> = <nat:1> \} \\ <var:X3> := <var:X3> * <nat:1> ; \\ \{ <var:R> = <var:T> \land <var:X1> = <nat:1> \times <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <nat:1> \times <var:T> ^ <nat:3> \land <var:X4> = <var:T> ^ <nat:4> \land <var:X0> = <nat:1> \} \\ <var:X4> := <var:X4> * <nat:4> ; \\ \{ <var:R> = <var:T> \land <var:X1> = <nat:1> \times <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <nat:1> \times <var:T> ^ <nat:3> \land <var:X4> = <nat:4> \times <var:T> ^ <nat:4> \land <var:X0> = <nat:1> \} \\ <var:K> := <var:X4> \\ \{ <var:R> = <var:T> \land <var:X1> = <nat:1> \times <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <nat:1> \times <var:T> ^ <nat:3> \land <var:X0> = <nat:1> \land <var:K> = <nat:4> \times <var:T> ^ <nat:4> \} \\ <var:K> := <var:K> + <var:X3> \\ \{ <var:R> = <var:T> \land <var:X1> = <nat:1> \times <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X0> = <nat:1> \land <var:K> = <nat:4> \times <var:T> ^ <nat:4> + <nat:1> \times <var:T> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:X1> \\ \{ <var:R> = <var:T> \land <var:X0> = <nat:1> \land <var:K> = <nat:4> \times <var:T> ^ <nat:4> + <nat:1> \times <var:T> ^ <nat:3> + <nat:1> \times <var:T> \} \\ <var:K> := <var:K> + <var:X0> \\ \{ <var:R> = <var:T> \land <var:K> = <nat:4> \times <var:T> ^ <nat:4> + <nat:1> \times <var:T> ^ <nat:3> + <nat:1> \times <var:T> + <nat:1> \} \end{eqnarray} Therefore , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <var:X4> : string := " <var:X4> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:R> = <var:T> }} <var:X1> := <var:R> ; <var:X2> := <var:X1> * <var:R> ; <var:X3> := <var:X2> * <var:R> ; <var:X4> := <var:X3> * <var:R> ; <var:X0> := <nat:1> ; <var:X1> := <var:X1> * <nat:1> ; <var:X3> := <var:X3> * <nat:1> ; <var:X4> := <var:X4> * <nat:4> ; <var:K> := <var:X4> <var:K> := <var:K> + <var:X3> <var:K> := <var:K> + <var:X1> <var:K> := <var:K> + <var:X0> {{ <var:K> = <nat:4> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <var:T> ^ <nat:3> /\ <var:X4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <var:T> ^ <nat:3> /\ <var:X4> = <var:T> ^ <nat:4> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <nat:1> * <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <var:T> ^ <nat:3> /\ <var:X4> = <var:T> ^ <nat:4> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <nat:1> * <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:T> ^ <nat:3> /\ <var:X4> = <var:T> ^ <nat:4> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <nat:1> * <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:T> ^ <nat:3> /\ <var:X4> = <nat:4> * <var:T> ^ <nat:4> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <nat:1> * <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:T> ^ <nat:3> /\ <var:X0> = <nat:1> /\ <var:K> = <nat:4> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X1> = <nat:1> * <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X0> = <nat:1> /\ <var:K> = <nat:4> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:X0> = <nat:1> /\ <var:K> = <nat:4> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:K> = <nat:4> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 