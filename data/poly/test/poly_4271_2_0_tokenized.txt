\begin{document} \begin{theorem} Consider a list of instructions as follows \begin{verbatim} <var:E0> := <nat:4> ; <var:b> := <var:E0> \end{verbatim} Assuming , given any natural numbers $ <var:J> $ , that $ <var:g> = <var:J> $ before the execution of this segment of code , then we have $ <var:b> = <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our list of commands can be demonstrated through the following decorated code segment . \begin{eqnarray} \{ <var:g> = <var:J> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:g> = <var:J> \land <var:E0> = <nat:4> \} \\ <var:b> := <var:E0> \\ \{ <var:g> = <var:J> \land <var:b> = <nat:4> \} \end{eqnarray} The application of standard Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:g> = <var:J> }} <var:E0> := <nat:4> ; <var:b> := <var:E0> {{ <var:b> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:b> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 