\begin{document} \begin{theorem} Define the following code segment such that \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:u> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:u> ; <var:G2> := <var:G2> * <var:u> ; <var:G3> := <nat:3> ; <var:G3> := <var:G3> * <var:u> ; <var:G3> := <var:G3> * <var:u> ; <var:G3> := <var:G3> * <var:u> ; <var:L> := <var:G3> ; <var:L> := <var:L> + <var:G2> ; <var:L> := <var:L> + <var:G1> ; <var:L> := <var:L> + <var:G0> \end{verbatim} Assuming it to be that $ <var:u> = <var:a> $ prior to running this list of instructions it must be that we see $ <var:L> = <nat:3> \times <var:a> ^ <nat:3> + <nat:1> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be accomplished by standard Hoare techniques . Honing in on the next lines of codefound in the series of commands , \begin{verbatim} { <var:u> = <var:a> } <var:G0> := <nat:3> { <var:u> = <var:a> \land <var:G0> = <nat:3> } { <var:u> = <var:a> \land <var:G0> = <nat:3> } <var:G1> := <nat:2> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> } { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> } <var:G1> := <var:G1> * <var:u> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> } { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> } <var:G2> := <nat:1> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> \land <var:G2> = <nat:1> } { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> \land <var:G2> = <nat:1> } <var:G2> := <var:G2> * <var:u> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> \land <var:G2> = <nat:1> * <var:a> } { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> \land <var:G2> = <nat:1> * <var:a> } <var:G2> := <var:G2> * <var:u> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> \land <var:G2> = <nat:1> * <var:a> ^ <nat:2> } \end{verbatim} Stepping through , \begin{verbatim} { <var:u> = <var:a> } <var:G0> := <nat:3> { <var:u> = <var:a> \land <var:G0> = <nat:3> } { <var:u> = <var:a> \land <var:G0> = <nat:3> } <var:G1> := <nat:2> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> } \end{verbatim} Taking a look at the proceeding statements contained in our code , we have \begin{verbatim} { <var:u> = <var:a> } <var:G0> := <nat:3> { <var:u> = <var:a> \land <var:G0> = <nat:3> } { <var:u> = <var:a> \land <var:G0> = <nat:3> } <var:G1> := <nat:2> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> } { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> } <var:G1> := <var:G1> * <var:u> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> } { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> } <var:G2> := <nat:1> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> * <var:a> \land <var:G2> = <nat:1> } \end{verbatim} Going forward , \begin{verbatim} { <var:u> = <var:a> } <var:G0> := <nat:3> { <var:u> = <var:a> \land <var:G0> = <nat:3> } { <var:u> = <var:a> \land <var:G0> = <nat:3> } <var:G1> := <nat:2> { <var:u> = <var:a> \land <var:G0> = <nat:3> \land <var:G1> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:u> = <var:a> }} <var:G0> := <nat:3> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:u> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:u> ; <var:G2> := <var:G2> * <var:u> ; <var:G3> := <nat:3> ; <var:G3> := <var:G3> * <var:u> ; <var:G3> := <var:G3> * <var:u> ; <var:G3> := <var:G3> * <var:u> ; <var:L> := <var:G3> ; <var:L> := <var:L> + <var:G2> ; <var:L> := <var:L> + <var:G1> ; <var:L> := <var:L> + <var:G0> {{ <var:L> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:G2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:G2> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:G2> = <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:G2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:G3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:G2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:G3> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:G2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:G3> = <nat:3> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:G2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:G3> = <nat:3> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:G2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:L> = <nat:3> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:2> * <var:a> /\ <var:L> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:G0> = <nat:3> /\ <var:L> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:L> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 