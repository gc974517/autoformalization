\begin{document} \begin{theorem} Let the following program : \begin{verbatim} <var:f0> := <nat:2> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:Y> ; <var:N> := <var:f1> ; <var:N> := <var:N> + <var:f0> \end{verbatim} Assuming $ <var:Y> = <var:H> $ prior to the execution of our segment of code , it follows that we have $ <var:N> = <nat:2> \times <var:H> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:Y> = <var:H> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:Y> = <var:H> \land <var:f0> = <nat:2> \} \\ <var:f1> := <nat:2> ; \\ \{ <var:Y> = <var:H> \land <var:f0> = <nat:2> \land <var:f1> = <nat:2> \} \\ <var:f1> := <var:f1> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f0> = <nat:2> \land <var:f1> = <nat:2> \times <var:H> \} \end{eqnarray} Continuing interpreting the program results in : \begin{eqnarray} <var:N> := <var:f1> ; \\ \{ <var:Y> = <var:H> \land <var:f0> = <nat:2> \land <var:N> = <nat:2> \times <var:H> \} \\ <var:N> := <var:N> + <var:f0> \\ \{ <var:Y> = <var:H> \land <var:N> = <nat:2> \times <var:H> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <var:f0> := <nat:2> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:Y> ; <var:N> := <var:f1> ; <var:N> := <var:N> + <var:f0> {{ <var:N> = <nat:2> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f0> = <nat:2> /\ <var:N> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:N> = <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 