\begin{document} \begin{theorem} We define a segment of code : \begin{verbatim} <var:E> := <nat:2> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <nat:4> + <var:E> * <var:a> ; <var:E> := <nat:2> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <var:E> * <var:a> ; <var:E> := <nat:2> + <var:E> * <var:a> \end{verbatim} Given that $ <var:a> = <var:n> $ --- for every $ <var:n> $ --- prior to the evaluation of the code segment , it holds that we have $ <var:E> = <nat:2> \cdot <var:n> ^ <nat:8> + <nat:3> \cdot <var:n> ^ <nat:7> + <nat:3> \cdot <var:n> ^ <nat:6> + <nat:4> \cdot <var:n> ^ <nat:5> + <nat:2> \cdot <var:n> ^ <nat:4> + <nat:3> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:2> $ once series of instructions has exited . \end{theorem} \begin{proof} The application of usual Hoare logic gives us : \begin{eqnarray} \{ <var:a> = <var:n> \} \\ <var:E> := <nat:2> ; \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \} \\ <var:E> := <nat:3> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \times <var:n> + <nat:3> \} \\ <var:E> := <nat:3> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:3> \} \\ <var:E> := <nat:4> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:4> \} \\ <var:E> := <nat:2> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> \} \end{eqnarray} Allowing evaluating the segment of code yields : \begin{eqnarray} <var:E> := <nat:3> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:3> \} \\ <var:E> := <nat:3> + <var:E> * <var:a> ; \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:3> \} \\ <var:E> := <var:E> * <var:a> ; \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \times <var:n> ^ <nat:7> + <nat:3> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \\ <var:E> := <nat:2> + <var:E> * <var:a> \\ \{ <var:a> = <var:n> \land <var:E> = <nat:2> \times <var:n> ^ <nat:8> + <nat:3> \times <var:n> ^ <nat:7> + <nat:3> \times <var:n> ^ <nat:6> + <nat:4> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:2> \} \end{eqnarray} Considering the above , this set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:a> = <var:n> }} <var:E> := <nat:2> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <nat:4> + <var:E> * <var:a> ; <var:E> := <nat:2> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <nat:3> + <var:E> * <var:a> ; <var:E> := <var:E> * <var:a> ; <var:E> := <nat:2> + <var:E> * <var:a> {{ <var:E> = <nat:2> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:E> = <nat:2> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 