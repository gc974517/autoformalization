\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:7> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:R> ; <var:B2> := <nat:6> ; <var:B2> := <var:B2> * <var:R> ; <var:B2> := <var:B2> * <var:R> ; <var:g> := <var:B2> ; <var:g> := <var:g> + <var:B1> ; <var:g> := <var:g> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:R> = <var:W> $ prior to interpreting the list of instructions then we see $ <var:g> = <nat:6> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:7> $ when list of instructions has executed . \end{theorem} \begin{proof} The argument for our code is demonstrated with standard Hoare logic . Considering the upcoming statements seen in our segment of code , we see \begin{eqnarray} \{ <var:R> = <var:W> \} \, <var:B0> := <nat:7> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \} \\ \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \} \, <var:B1> := <nat:7> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \} \\ \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \} \, <var:B1> := <var:B1> * <var:R> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \times <var:W> \} \\ \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \times <var:W> \} \, <var:B2> := <nat:6> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \times <var:W> \land <var:B2> = <nat:6> \} \\ \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \times <var:W> \land <var:B2> = <nat:6> \} \, <var:B2> := <var:B2> * <var:R> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \times <var:W> \land <var:B2> = <nat:6> \times <var:W> \} \\ \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \times <var:W> \land <var:B2> = <nat:6> \times <var:W> \} \, <var:B2> := <var:B2> * <var:R> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \times <var:W> \land <var:B2> = <nat:6> \times <var:W> ^ <nat:2> \} \end{eqnarray} This is sound with the assignment rule defined by typical Hoare logic . Advancing to the next step , \begin{eqnarray} \{ <var:R> = <var:W> \} \, <var:B0> := <nat:7> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \} \\ \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \} \, <var:B1> := <nat:7> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \} \end{eqnarray} This is known to be sound through the law given in typical Hoare logic . After , \begin{eqnarray} \{ <var:R> = <var:W> \} \, <var:B0> := <nat:7> \, \{ <var:R> = <var:W> \land <var:B0> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:7> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:R> ; <var:B2> := <nat:6> ; <var:B2> := <var:B2> * <var:R> ; <var:B2> := <var:B2> * <var:R> ; <var:g> := <var:B2> ; <var:g> := <var:g> + <var:B1> ; <var:g> := <var:g> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:R> = <var:W> }} <def:poly> {{ <var:g> = <nat:6> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:W> /\ <var:B2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:W> /\ <var:B2> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:W> /\ <var:B2> = <nat:6> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:W> /\ <var:g> = <nat:6> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:B0> = <nat:7> /\ <var:g> = <nat:6> * <var:W> ^ <nat:2> + <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:g> = <nat:6> * <var:W> ^ <nat:2> + <nat:7> * <var:W> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 