\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:b> ; <var:M2> := <nat:3> ; <var:M2> := <var:M2> * <var:b> ; <var:M2> := <var:M2> * <var:b> ; <var:M3> := <nat:8> ; <var:M3> := <var:M3> * <var:b> ; <var:M3> := <var:M3> * <var:b> ; <var:M3> := <var:M3> * <var:b> ; <var:H> := <var:M3> ; <var:H> := <var:H> + <var:M2> ; <var:H> := <var:H> + <var:M1> ; <var:H> := <var:H> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Allowing it to be that $ <var:b> = <var:l> $ ahead of the evaluation of this code segment , then we see $ <var:H> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> + <nat:4> $ after set of instructions has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is done with usual Hoare techniques . Looking at the proceeding command contained in our list of instructions , we see the variable assignmet statement \verb | <var:M0> := <nat:4> ; | . This statement advances the precondition $ \{ <var:b> = <var:l> \} $ toward the postcondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \} $ . This is given through the assignment scheme obtained from usual Hoare reasoning . Moving forward to the next step , we see the assignment command \verb | <var:M1> := <nat:8> ; | . This command takes the precondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \} $ toward $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> \} $ . This is rigorously given with the assignment scheme defined in standard Hoare techniques . Stepping forward , we have the variable binding statement defining $ <var:M1> * <var:b> $ into $ <var:M1>$ . This statement moves the precondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> \} $ into the postcondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \} $ . Following , we see the variable binding command \verb | <var:M2> := <nat:3> ; | . This takes the condition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \} $ toward $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> \} $ . Going to the next step , we have the assignment command assigning $ <var:M2> * <var:b> $ toward $ <var:M2>$ . This code advances $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> \} $ as the postcondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> \} $ . Paying attention to the next line of code seen in our code segment , the variable update line assigning $ <var:M2> * <var:b> $ to $ <var:M2>$ . This forwards the precondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> \} $ to the condition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \} $ . Shifting focus toward the upcoming command contained in our code segment , we have the statement \verb | <var:M3> := <nat:8> ; | . This statement forwards the condition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \} $ toward the postcondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:M3> = <nat:8> \} $ . Immediately following , we have the variable assignmet statement letting $ <var:M3> * <var:b> $ toward $ <var:M3>$ . This transfers $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:M3> = <nat:8> \} $ toward the postcondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:M3> = <nat:8> * <var:l> \} $ . This is ensured by the assignment scheme found in Hoare logic . Immediately after , we see the variable assignmet code letting $ <var:M3> * <var:b> $ to $ <var:M3>$ . This advances the precondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:M3> = <nat:8> * <var:l> \} $ as the condition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:M3> = <nat:8> * <var:l> ^ <nat:2> \} $ . Moving forward , we see the binding code binding $ <var:M3> * <var:b> $ toward $ <var:M3>$ . This transfers the condition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:M3> = <nat:8> * <var:l> ^ <nat:2> \} $ as $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:M3> = <nat:8> * <var:l> ^ <nat:3> \} $ . Shifting focus toward the next piece of code in the series of commands , we have the variable assignmet statement \verb | <var:H> := <var:M3> ; | . This line moves the condition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:M3> = <nat:8> * <var:l> ^ <nat:3> \} $ toward $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:H> = <nat:8> * <var:l> ^ <nat:3> \} $ . Keeping momentum , we see the binding line \verb | <var:H> := <var:H> + <var:M2> ; | . This advances the precondition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:M2> = <nat:3> * <var:l> ^ <nat:2> \land <var:H> = <nat:8> * <var:l> ^ <nat:3> \} $ to $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> \} $ . This is deduced through the assignment law from usual Hoare logic . Immediately following , we see the statement defining $ <var:H> + <var:M1> $ into $ <var:H>$ . This command transfers the condition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:M1> = <nat:8> * <var:l> \land <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> \} $ into $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:8> * <var:l> \} $ . Looking at the upcoming statement seen in our list of commands , the variable assignmet statement \verb | <var:H> := <var:H> + <var:M0> | . This redefines the condition $ \{ <var:b> = <var:l> \land <var:M0> = <nat:4> \land <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:8> * <var:l> \} $ as the postcondition $ \{ <var:b> = <var:l> \land <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M0> := <nat:4> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:b> ; <var:M2> := <nat:3> ; <var:M2> := <var:M2> * <var:b> ; <var:M2> := <var:M2> * <var:b> ; <var:M3> := <nat:8> ; <var:M3> := <var:M3> * <var:b> ; <var:M3> := <var:M3> * <var:b> ; <var:M3> := <var:M3> * <var:b> ; <var:H> := <var:M3> ; <var:H> := <var:H> + <var:M2> ; <var:H> := <var:H> + <var:M1> ; <var:H> := <var:H> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:b> = <var:l> }} <def:poly> {{ <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:M2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:M2> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:M2> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:M2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:M3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:M2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:M2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:M2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:M2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:H> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:8> * <var:l> /\ <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:M0> = <nat:4> /\ <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:H> = <nat:8> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 