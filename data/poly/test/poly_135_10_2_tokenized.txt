\begin{document} \begin{theorem} Define the following code as follows \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <var:j> * <var:L> ; <var:j> := <nat:4> + <var:j> * <var:L> ; <var:j> := <nat:4> + <var:j> * <var:L> ; <var:j> := <var:j> * <var:L> ; <var:j> := <nat:1> + <var:j> * <var:L> ; <var:j> := <nat:1> + <var:j> * <var:L> ; <var:j> := <nat:1> + <var:j> * <var:L> ; <var:j> := <var:j> * <var:L> ; <var:j> := <nat:3> + <var:j> * <var:L> \end{verbatim} Given that $ <var:L> = <var:o> $ ahead of the evaluation of the series of instructions , it holds that $ <var:j> = <nat:3> \times <var:o> ^ <nat:9> + <nat:4> \times <var:o> ^ <nat:7> + <nat:4> \times <var:o> ^ <nat:6> + <nat:1> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:3> $ once series of instructions is done . \end{theorem} \begin{proof} The course of logic for the code segment can be given with standard Hoare techniques . Advancing , we see \verb | { <var:L> = <var:o> } <var:j> := <nat:3> { <var:L> = <var:o> \land <var:j> = <nat:3> } | , \verb | { <var:L> = <var:o> \land <var:j> = <nat:3> } <var:j> := <var:j> * <var:L> { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> + } | , \verb | { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> + } <var:j> := <nat:4> + <var:j> * <var:L> { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:2> + <nat:4> } | , \verb | { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:2> + <nat:4> } <var:j> := <nat:4> + <var:j> * <var:L> { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + <nat:4> } | , \verb | { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + <nat:4> } <var:j> := <var:j> * <var:L> { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + } | , \verb | { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + } <var:j> := <nat:1> + <var:j> * <var:L> { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:1> } | , \verb | { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:1> } <var:j> := <nat:1> + <var:j> * <var:L> { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:1> } | , \verb | { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:1> } <var:j> := <nat:1> + <var:j> * <var:L> { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> } | and \verb | { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> } <var:j> := <var:j> * <var:L> { <var:L> = <var:o> \land <var:j> = <nat:3> * <var:o> ^ <nat:8> + <nat:4> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + } | . Moving on , we have \verb | { <var:L> = <var:o> } <var:j> := <nat:3> { <var:L> = <var:o> \land <var:j> = <nat:3> } | . This is known to be sound with the variable assignmet law from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:L> = <var:o> }} <var:j> := <nat:3> ; <var:j> := <var:j> * <var:L> ; <var:j> := <nat:4> + <var:j> * <var:L> ; <var:j> := <nat:4> + <var:j> * <var:L> ; <var:j> := <var:j> * <var:L> ; <var:j> := <nat:1> + <var:j> * <var:L> ; <var:j> := <nat:1> + <var:j> * <var:L> ; <var:j> := <nat:1> + <var:j> * <var:L> ; <var:j> := <var:j> * <var:L> ; <var:j> := <nat:3> + <var:j> * <var:L> {{ <var:j> = <nat:3> * <var:o> ^ <nat:9> + <nat:4> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> ^ <nat:8> + <nat:4> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:j> = <nat:3> * <var:o> ^ <nat:9> + <nat:4> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 