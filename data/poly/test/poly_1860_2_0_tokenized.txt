\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:4> ; <var:V> := <var:h0> \end{verbatim} Assume --- with some whole numbers $ <var:f> $ --- that $ <var:x> = <var:f> $ ahead of running this code , it follows that $ <var:V> = <nat:4> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Using typical Hoare logic results in : \begin{eqnarray} \{ <var:x> = <var:f> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:x> = <var:f> \land <var:h0> = <nat:4> \} \\ <var:V> := <var:h0> \\ \{ <var:x> = <var:f> \land <var:V> = <nat:4> \} \end{eqnarray} As a consequence , our list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:x> = <var:f> }} <var:h0> := <nat:4> ; <var:V> := <var:h0> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 