\begin{document} \begin{theorem} We define the following list of instructions such that \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <nat:1> + <var:L> * <var:i> ; <var:L> := <nat:3> + <var:L> * <var:i> ; <var:L> := <nat:2> + <var:L> * <var:i> ; <var:L> := <nat:4> + <var:L> * <var:i> \end{verbatim} Assume that $ <var:i> = <var:B> $ ahead of the evaluation of our segment of code it follows that we see $ <var:L> = <nat:4> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:4> $ when set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:B> \} \\ <var:L> := <nat:4> ; \\ \{ <var:i> = <var:B> \land <var:L> = <nat:4> \} \\ <var:L> := <nat:1> + <var:L> * <var:i> ; \\ \{ <var:i> = <var:B> \land <var:L> = <nat:4> \cdot <var:B> + <nat:1> \} \\ <var:L> := <nat:3> + <var:L> * <var:i> ; \\ \{ <var:i> = <var:B> \land <var:L> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:3> \} \\ <var:L> := <nat:2> + <var:L> * <var:i> ; \\ \{ <var:i> = <var:B> \land <var:L> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:2> \} \\ <var:L> := <nat:4> + <var:L> * <var:i> \\ \{ <var:i> = <var:B> \land <var:L> = <nat:4> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:i> = <var:B> }} <var:L> := <nat:4> ; <var:L> := <nat:1> + <var:L> * <var:i> ; <var:L> := <nat:3> + <var:L> * <var:i> ; <var:L> := <nat:2> + <var:L> * <var:i> ; <var:L> := <nat:4> + <var:L> * <var:i> {{ <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:L> = <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:L> = <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:L> = <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 