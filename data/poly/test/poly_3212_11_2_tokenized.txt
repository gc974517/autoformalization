\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:F> ; <var:Y> := <var:Y> * <var:F> ; <var:Y> := <var:Y> * <var:F> ; <var:Y> := <nat:4> + <var:Y> * <var:F> ; <var:Y> := <nat:1> + <var:Y> * <var:F> ; <var:Y> := <nat:4> + <var:Y> * <var:F> ; <var:Y> := <nat:4> + <var:Y> * <var:F> ; <var:Y> := <nat:3> + <var:Y> * <var:F> ; <var:Y> := <nat:4> + <var:Y> * <var:F> ; <var:Y> := <nat:2> + <var:Y> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Given , given some positive numbers $ <var:N> $ , that $ <var:F> = <var:N> $ prior to running the code it must be that we have $ <var:Y> = <nat:1> \cdot <var:N> ^ <nat:10> + <nat:2> \cdot <var:N> ^ <nat:9> + <nat:4> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:2> $ after set of instructions finishes . \end{theorem} \begin{proof} The proof of our series of instructions is accomplished using typical Hoare reasoning . Moving on to the next commands found in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:F> = <var:N> \} & <var:Y> := <nat:1> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> \} & <var:Y> := <nat:2> + <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> + <nat:2> \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> + <nat:2> \} & <var:Y> := <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + \} & <var:Y> := <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + \} & <var:Y> := <nat:4> + <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:4> \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:4> \} & <var:Y> := <nat:1> + <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:4> * <var:N> + <nat:1> \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:4> * <var:N> + <nat:1> \} & <var:Y> := <nat:4> + <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> \} & <var:Y> := <nat:4> + <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:4> \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:4> \} & <var:Y> := <nat:3> + <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> \} & <var:Y> := <nat:4> + <var:Y> * <var:F> & \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> \} \\ \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> \} & <var:Y> := <nat:2> + <var:Y> * <var:F& \{ <var:F> = <var:N> \land <var:Y> = <nat:1> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:F> ; <var:Y> := <var:Y> * <var:F> ; <var:Y> := <var:Y> * <var:F> ; <var:Y> := <nat:4> + <var:Y> * <var:F> ; <var:Y> := <nat:1> + <var:Y> * <var:F> ; <var:Y> := <nat:4> + <var:Y> * <var:F> ; <var:Y> := <nat:4> + <var:Y> * <var:F> ; <var:Y> := <nat:3> + <var:Y> * <var:F> ; <var:Y> := <nat:4> + <var:Y> * <var:F> ; <var:Y> := <nat:2> + <var:Y> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:F> = <var:N> }} <def:poly> {{ <var:Y> = <nat:1> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:Y> = <nat:1> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 