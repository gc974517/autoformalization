\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a1> := <var:T> ; <var:a2> := <var:a1> * <var:T> ; <var:a3> := <var:a2> * <var:T> ; <var:a4> := <var:a3> * <var:T> ; <var:a5> := <var:a4> * <var:T> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:2> ; <var:a2> := <var:a2> * <nat:4> ; <var:a5> := <var:a5> * <nat:4> ; <var:g> := <var:a5> <var:g> := <var:g> + <var:a2> <var:g> := <var:g> + <var:a1> <var:g> := <var:g> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:T> = <var:C> $ prior to executing our program it must be that $ <var:g> = <nat:4> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is done by standard Hoare reasoning . Going to the next step , \begin{eqnarray} \{ <var:T> = <var:C> \} \, <var:a1> := <var:T> \, \{ <var:T> = <var:C> \land <var:a1> = <var:C> \} \end{eqnarray} Moving on , \begin{eqnarray} \{ <var:T> = <var:C> \} \, <var:a1> := <var:T> \, \{ <var:T> = <var:C> \land <var:a1> = <var:C> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <var:C> \} \, <var:a2> := <var:a1> * <var:T> \, \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \} \, <var:a3> := <var:a2> * <var:T> \, \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \} \, <var:a4> := <var:a3> * <var:T> \, \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \} \, <var:a5> := <var:a4> * <var:T> \, \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <var:C> ^ <nat:5> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <var:C> ^ <nat:5> \} \, <var:a0> := <nat:5> \, \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <var:C> ^ <nat:5> \land <var:a0> = <nat:5> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <var:C> ^ <nat:5> \land <var:a0> = <nat:5> \} \, <var:a1> := <var:a1> * <nat:2> \, \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <var:C> ^ <nat:5> \land <var:a0> = <nat:5> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a2> = <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <var:C> ^ <nat:5> \land <var:a0> = <nat:5> \} \, <var:a2> := <var:a2> * <nat:4> \, \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a2> = <nat:4> \times <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <var:C> ^ <nat:5> \land <var:a0> = <nat:5> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a2> = <nat:4> \times <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <var:C> ^ <nat:5> \land <var:a0> = <nat:5> \} \, <var:a5> := <var:a5> * <nat:4> \, \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a2> = <nat:4> \times <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <nat:4> \times <var:C> ^ <nat:5> \land <var:a0> = <nat:5> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a2> = <nat:4> \times <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a5> = <nat:4> \times <var:C> ^ <nat:5> \land <var:a0> = <nat:5> \} \, <var:g> := <var:a5\, \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a2> = <nat:4> \times <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a0> = <nat:5> \land <var:g> = <nat:4> \times <var:C> ^ <nat:5> \} \\ \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a2> = <nat:4> \times <var:C> ^ <nat:2> \land <var:a3> = <var:C> ^ <nat:3> \land <var:a4> = <var:C> ^ <nat:4> \land <var:a0> = <nat:5> \land <var:g> = <nat:4> \times <var:C> ^ <nat:5> \} \, <var:g> := <var:g> + <var:a2\, \{ <var:T> = <var:C> \land <var:a1> = <nat:2> \times <var:C> \land <var:a0> = <nat:5> \land <var:g> = <nat:4> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:2> \} \end{eqnarray} Focusing on the proceeding command contained in the list of instructions , \begin{eqnarray} \{ <var:T> = <var:C> \} \, <var:a1> := <var:T> \, \{ <var:T> = <var:C> \land <var:a1> = <var:C> \} \end{eqnarray} This is guaranteed with the variable binding law given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <var:a4> : string := " <var:a4> " . Definition <var:a5> : string := " <var:a5> " . Definition <def:poly> := <var:a1> := <var:T> ; <var:a2> := <var:a1> * <var:T> ; <var:a3> := <var:a2> * <var:T> ; <var:a4> := <var:a3> * <var:T> ; <var:a5> := <var:a4> * <var:T> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:2> ; <var:a2> := <var:a2> * <nat:4> ; <var:a5> := <var:a5> * <nat:4> ; <var:g> := <var:a5> <var:g> := <var:g> + <var:a2> <var:g> := <var:g> + <var:a1> <var:g> := <var:g> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:T> = <var:C> }} <def:poly> {{ <var:g> = <nat:4> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <var:C> /\ <var:a2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <var:C> /\ <var:a2> = <var:C> ^ <nat:2> /\ <var:a3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <var:C> /\ <var:a2> = <var:C> ^ <nat:2> /\ <var:a3> = <var:C> ^ <nat:3> /\ <var:a4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <var:C> /\ <var:a2> = <var:C> ^ <nat:2> /\ <var:a3> = <var:C> ^ <nat:3> /\ <var:a4> = <var:C> ^ <nat:4> /\ <var:a5> = <var:C> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <var:C> /\ <var:a2> = <var:C> ^ <nat:2> /\ <var:a3> = <var:C> ^ <nat:3> /\ <var:a4> = <var:C> ^ <nat:4> /\ <var:a5> = <var:C> ^ <nat:5> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <nat:2> * <var:C> /\ <var:a2> = <var:C> ^ <nat:2> /\ <var:a3> = <var:C> ^ <nat:3> /\ <var:a4> = <var:C> ^ <nat:4> /\ <var:a5> = <var:C> ^ <nat:5> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <nat:2> * <var:C> /\ <var:a2> = <nat:4> * <var:C> ^ <nat:2> /\ <var:a3> = <var:C> ^ <nat:3> /\ <var:a4> = <var:C> ^ <nat:4> /\ <var:a5> = <var:C> ^ <nat:5> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <nat:2> * <var:C> /\ <var:a2> = <nat:4> * <var:C> ^ <nat:2> /\ <var:a3> = <var:C> ^ <nat:3> /\ <var:a4> = <var:C> ^ <nat:4> /\ <var:a5> = <nat:4> * <var:C> ^ <nat:5> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <nat:2> * <var:C> /\ <var:a2> = <nat:4> * <var:C> ^ <nat:2> /\ <var:a3> = <var:C> ^ <nat:3> /\ <var:a4> = <var:C> ^ <nat:4> /\ <var:a0> = <nat:5> /\ <var:g> = <nat:4> * <var:C> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a1> = <nat:2> * <var:C> /\ <var:a0> = <nat:5> /\ <var:g> = <nat:4> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:a0> = <nat:5> /\ <var:g> = <nat:4> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:g> = <nat:4> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 