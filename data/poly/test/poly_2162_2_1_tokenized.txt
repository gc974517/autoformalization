\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:2> ; <var:K> := <var:h0> \end{verbatim} Allow it to be that $ <var:l> = <var:M> $ , for any positive integer coefficients $ <var:M> $ , prior to the execution of our code segment then we see $ <var:K> = <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our code segment can be accomplished using typical Hoare reasoning . Stepping through , we see the environment update statement giving $ <nat:2> $ toward $ <var:h0>$ . This moves the condition $ \{ <var:l> = <var:M> \} $ toward the condition $ \{ <var:l> = <var:M> \land <var:h0> = <nat:2> \} $ . This is known to be sound using the assignment rule defined by Hoare techniques . Further , we see the variable update command binding $ <var:h0$ to $ <var:K>$ . This advances the condition $ \{ <var:l> = <var:M> \land <var:h0> = <nat:2> \} $ toward the postcondition $ \{ <var:l> = <var:M> \land <var:K> = <nat:2> \} $ . This is sound using the assignment scheme in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:l> = <var:M> }} <var:h0> := <nat:2> ; <var:K> := <var:h0> {{ <var:K> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:K> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 