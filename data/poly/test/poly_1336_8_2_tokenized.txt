\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <nat:4> + <var:u> * <var:s> ; <var:u> := <nat:2> + <var:u> * <var:s> ; <var:u> := <nat:1> + <var:u> * <var:s> ; <var:u> := <nat:1> + <var:u> * <var:s> ; <var:u> := <var:u> * <var:s> ; <var:u> := <nat:2> + <var:u> * <var:s> ; <var:u> := <nat:1> + <var:u> * <var:s> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> in \emph{Imp} . Given ( taking positive coefficients $ <var:D> $ ) that $ <var:s> = <var:D> $ prior to running the code segment then we see $ <var:u> = <nat:2> \cdot <var:D> ^ <nat:7> + <nat:4> \cdot <var:D> ^ <nat:6> + <nat:2> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> + <nat:1> $ when series of instructions is done . \end{theorem} \begin{proof} Applying standard Hoare techniques results in : \begin{eqnarray} \{ <var:s> = <var:D> \} \\ <var:u> := <nat:2> ; \\ \{ <var:s> = <var:D> \land <var:u> = <nat:2> \} \\ <var:u> := <nat:4> + <var:u> * <var:s> ; \\ \{ <var:s> = <var:D> \land <var:u> = <nat:2> \times <var:D> + <nat:4> \} \\ <var:u> := <nat:2> + <var:u> * <var:s> ; \\ \{ <var:s> = <var:D> \land <var:u> = <nat:2> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + <nat:2> \} \\ <var:u> := <nat:1> + <var:u> * <var:s> ; \\ \{ <var:s> = <var:D> \land <var:u> = <nat:2> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> + <nat:1> \} \\ <var:u> := <nat:1> + <var:u> * <var:s> ; \\ \{ <var:s> = <var:D> \land <var:u> = <nat:2> \times <var:D> ^ <nat:4> + <nat:4> \times <var:D> ^ <nat:3> + <nat:2> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:1> \} \\ <var:u> := <var:u> * <var:s> ; \\ \{ <var:s> = <var:D> \land <var:u> = <nat:2> \times <var:D> ^ <nat:5> + <nat:4> \times <var:D> ^ <nat:4> + <nat:2> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + \} \\ <var:u> := <nat:2> + <var:u> * <var:s> ; \\ \{ <var:s> = <var:D> \land <var:u> = <nat:2> \times <var:D> ^ <nat:6> + <nat:4> \times <var:D> ^ <nat:5> + <nat:2> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:2> \} \\ <var:u> := <nat:1> + <var:u> * <var:s> \\ \{ <var:s> = <var:D> \land <var:u> = <nat:2> \times <var:D> ^ <nat:7> + <nat:4> \times <var:D> ^ <nat:6> + <nat:2> \times <var:D> ^ <nat:5> + <nat:1> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:3> + <nat:2> \times <var:D> + <nat:1> \} \end{eqnarray} Considering the above , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:2> ; <var:u> := <nat:4> + <var:u> * <var:s> ; <var:u> := <nat:2> + <var:u> * <var:s> ; <var:u> := <nat:1> + <var:u> * <var:s> ; <var:u> := <nat:1> + <var:u> * <var:s> ; <var:u> := <var:u> * <var:s> ; <var:u> := <nat:2> + <var:u> * <var:s> ; <var:u> := <nat:1> + <var:u> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:s> = <var:D> }} <def:poly> {{ <var:u> = <nat:2> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:u> = <nat:2> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:u> = <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:u> = <nat:2> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:u> = <nat:2> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:u> = <nat:2> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:u> = <nat:2> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:u> = <nat:2> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:2> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 