\begin{document} \begin{theorem} Take a list of instructions as \begin{verbatim} <var:K1> := <var:X> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:4> ; <var:Y> := <var:K1> <var:Y> := <var:Y> + <var:K0> \end{verbatim} Allow it to be that $ <var:X> = <var:C> $ before running our series of instructions it must be that we have $ <var:Y> = <nat:4> * <var:C> + <nat:2> $ after series of instructions exits . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be done using standard Hoare reasoning . Moving forward to the next step , we have the environment update statement defining $ <var:X> $ to $ <var:K1>$ . This code advances the precondition $ \{ <var:X> = <var:C> \} $ as the condition $ \{ <var:X> = <var:C> \land <var:K1> = <var:C> \} $ . Moving on to the next step in the list of commands , we see the variable assignmet command assigning $ <nat:2> $ toward $ <var:K0>$ . This command takes the precondition $ \{ <var:X> = <var:C> \land <var:K1> = <var:C> \} $ into $ \{ <var:X> = <var:C> \land <var:K1> = <var:C> \land <var:K0> = <nat:2> \} $ . Moving forward to the subsequent step seen in our list of instructions , the variable binding code \verb | <var:K1> := <var:K1> * <nat:4> ; | . This code advances the condition $ \{ <var:X> = <var:C> \land <var:K1> = <var:C> \land <var:K0> = <nat:2> \} $ as $ \{ <var:X> = <var:C> \land <var:K1> = <nat:4> \times <var:C> \land <var:K0> = <nat:2> \} $ . Immediately following , we see the binding line assigning $ <var:K1$ to $ <var:Y>$ . This code moves $ \{ <var:X> = <var:C> \land <var:K1> = <nat:4> \times <var:C> \land <var:K0> = <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:C> \land <var:K0> = <nat:2> \land <var:Y> = <nat:4> \times <var:C> \} $ . Keeping momentum , we have the binding line \verb | <var:Y> := <var:Y> + <var:K0> | . This redefines $ \{ <var:X> = <var:C> \land <var:K0> = <nat:2> \land <var:Y> = <nat:4> \times <var:C> \} $ as the condition $ \{ <var:X> = <var:C> \land <var:Y> = <nat:4> \times <var:C> + <nat:2> \} $ . This is deduced using the assignment scheme in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:X> = <var:C> }} <var:K1> := <var:X> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:4> ; <var:Y> := <var:K1> <var:Y> := <var:Y> + <var:K0> {{ <var:Y> = <nat:4> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:K1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:K1> = <var:C> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:K1> = <nat:4> * <var:C> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:K0> = <nat:2> /\ <var:Y> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:Y> = <nat:4> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 