\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:6> ; <var:N> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assume that we have $ <var:Z> = <var:X> $ , taking $ <var:X> \in \mathbb{Z}^+ $ , ahead of the execution of our list of instructions , it follows that we have $ <var:N> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:X> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:Z> = <var:X> \land <var:s0> = <nat:6> \} \\ <var:N> := <var:s0> \\ \{ <var:Z> = <var:X> \land <var:N> = <nat:6> \} \end{eqnarray} Using standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:6> ; <var:N> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Z> = <var:X> }} <def:poly> {{ <var:N> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:N> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 