\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:5> ; <var:P1> := <var:P1> * <var:w> ; <var:g> := <var:P1> ; <var:g> := <var:g> + <var:P0> \end{verbatim} Assuming it to be that $ <var:w> = <var:K> $ prior to the execution of this list of commands it holds that we have $ <var:g> = <nat:5> \times <var:K> + <nat:2> $ . \end{theorem} \begin{proof} The proof of our segment of code is done through standard Hoare reasoning . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:w> = <var:K> \} & <var:P0> := <nat:2> & \{ <var:w> = <var:K> \land <var:P0> = <nat:2> \} \\ \{ <var:w> = <var:K> \land <var:P0> = <nat:2> \} & <var:P1> := <nat:5> & \{ <var:w> = <var:K> \land <var:P0> = <nat:2> \land <var:P1> = <nat:5> \} \\ \{ <var:w> = <var:K> \land <var:P0> = <nat:2> \land <var:P1> = <nat:5> \} & <var:P1> := <var:P1> * <var:w> & \{ <var:w> = <var:K> \land <var:P0> = <nat:2> \land <var:P1> = <nat:5> * <var:K> \} \end{tabular} This is ensured using the environment update inference rule defined by typical Hoare reasoning . Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:K> \} & <var:P0> := <nat:2> & \{ <var:w> = <var:K> \land <var:P0> = <nat:2> \} \end{tabular} Observing the proceeding command in the list of commands , \[ \begin{tabular} {rcl} \{ <var:w> = <var:K> \} & <var:P0> := <nat:2> & \{ <var:w> = <var:K> \land <var:P0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:w> = <var:K> }} <var:P0> := <nat:2> ; <var:P1> := <nat:5> ; <var:P1> := <var:P1> * <var:w> ; <var:g> := <var:P1> ; <var:g> := <var:g> + <var:P0> {{ <var:g> = <nat:5> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:P0> = <nat:2> /\ <var:g> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:g> = <nat:5> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 