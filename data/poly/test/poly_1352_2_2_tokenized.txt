\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} such that \begin{verbatim} <var:A> := <nat:3> ; <var:A> := <nat:1> + <var:A> * <var:e> \end{verbatim} Allowing it to be that $ <var:e> = <var:l> $ prior to interpreting the code segment it must be that we see $ <var:A> = <nat:3> \cdot <var:l> + <nat:1> $ when segment of code is done executing . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:e> = <var:l> \} \\ <var:A> := <nat:3> ; \\ \{ <var:e> = <var:l> \land <var:A> = <nat:3> \} \\ <var:A> := <nat:1> + <var:A> * <var:e> \\ \{ <var:e> = <var:l> \land <var:A> = <nat:3> \cdot <var:l> + <nat:1> \} \end{eqnarray} Thusly , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:e> = <var:l> }} <var:A> := <nat:3> ; <var:A> := <nat:1> + <var:A> * <var:e> {{ <var:A> = <nat:3> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:A> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:A> = <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 