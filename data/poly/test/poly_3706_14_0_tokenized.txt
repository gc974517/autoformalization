\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:9> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:F> ; <var:m2> := <nat:7> ; <var:m2> := <var:m2> * <var:F> ; <var:m2> := <var:m2> * <var:F> ; <var:m3> := <nat:4> ; <var:m3> := <var:m3> * <var:F> ; <var:m3> := <var:m3> * <var:F> ; <var:m3> := <var:m3> * <var:F> ; <var:c> := <var:m3> ; <var:c> := <var:c> + <var:m2> ; <var:c> := <var:c> + <var:m1> ; <var:c> := <var:c> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Allow that we have $ <var:F> = <var:w> $ given any positive integers $ <var:w> $ before the execution of the set of commands , it holds that $ <var:c> = <nat:4> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:9> $ after code is done executing . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be seen by this decorated series of instructions . \begin{eqnarray} \{ <var:F> = <var:w> \} \\ <var:m0> := <nat:9> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \} \\ <var:m1> := <nat:8> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \} \\ <var:m1> := <var:m1> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \} \end{eqnarray} Continuing interpreting the list of commands results in : \begin{eqnarray} <var:m2> := <nat:7> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:m2> = <nat:7> \} \\ <var:m2> := <var:m2> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:m2> = <nat:7> \times <var:w> \} \\ <var:m2> := <var:m2> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:m2> = <nat:7> \times <var:w> ^ <nat:2> \} \\ <var:m3> := <nat:4> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:m2> = <nat:7> \times <var:w> ^ <nat:2> \land <var:m3> = <nat:4> \} \\ <var:m3> := <var:m3> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:m2> = <nat:7> \times <var:w> ^ <nat:2> \land <var:m3> = <nat:4> \times <var:w> \} \\ <var:m3> := <var:m3> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:m2> = <nat:7> \times <var:w> ^ <nat:2> \land <var:m3> = <nat:4> \times <var:w> ^ <nat:2> \} \\ <var:m3> := <var:m3> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:m2> = <nat:7> \times <var:w> ^ <nat:2> \land <var:m3> = <nat:4> \times <var:w> ^ <nat:3> \} \\ <var:c> := <var:m3> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:m2> = <nat:7> \times <var:w> ^ <nat:2> \land <var:c> = <nat:4> \times <var:w> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:m2> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:m1> = <nat:8> \times <var:w> \land <var:c> = <nat:4> \times <var:w> ^ <nat:3> + <nat:7> \times <var:w> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:m1> ; \\ \{ <var:F> = <var:w> \land <var:m0> = <nat:9> \land <var:c> = <nat:4> \times <var:w> ^ <nat:3> + <nat:7> \times <var:w> ^ <nat:2> + <nat:8> \times <var:w> \} \\ <var:c> := <var:c> + <var:m0> \\ \{ <var:F> = <var:w> \land <var:c> = <nat:4> \times <var:w> ^ <nat:3> + <nat:7> \times <var:w> ^ <nat:2> + <nat:8> \times <var:w> + <nat:9> \} \end{eqnarray} The application of standard Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m0> := <nat:9> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:F> ; <var:m2> := <nat:7> ; <var:m2> := <var:m2> * <var:F> ; <var:m2> := <var:m2> * <var:F> ; <var:m3> := <nat:4> ; <var:m3> := <var:m3> * <var:F> ; <var:m3> := <var:m3> * <var:F> ; <var:m3> := <var:m3> * <var:F> ; <var:c> := <var:m3> ; <var:c> := <var:c> + <var:m2> ; <var:c> := <var:c> + <var:m1> ; <var:c> := <var:c> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <def:poly> {{ <var:c> = <nat:4> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:m2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:m2> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:m2> = <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:m2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:m3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:m2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:m3> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:m2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:m3> = <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:m2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:m3> = <nat:4> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:m2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:c> = <nat:4> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:8> * <var:w> /\ <var:c> = <nat:4> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:m0> = <nat:9> /\ <var:c> = <nat:4> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:c> = <nat:4> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 