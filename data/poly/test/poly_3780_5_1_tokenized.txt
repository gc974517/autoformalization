\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:h> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:8> ; <var:N> := <var:A1> <var:N> := <var:N> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for some positive numbers $ <var:C> $ ) $ <var:h> = <var:C> $ before evaluating the series of instructions , it must be that $ <var:N> = <nat:8> * <var:C> + <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:h> = <var:C> \} \\ <var:A1> := <var:h> ; \\ \{ <var:h> = <var:C> \land <var:A1> = <var:C> \} \\ <var:A0> := <nat:6> ; \\ \{ <var:h> = <var:C> \land <var:A1> = <var:C> \land <var:A0> = <nat:6> \} \\ <var:A1> := <var:A1> * <nat:8> ; \\ \{ <var:h> = <var:C> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A0> = <nat:6> \} \\ <var:N> := <var:A1> \\ \{ <var:h> = <var:C> \land <var:A0> = <nat:6> \land <var:N> = <nat:8> \cdot <var:C> \} \\ <var:N> := <var:N> + <var:A0> \\ \{ <var:h> = <var:C> \land <var:N> = <nat:8> \cdot <var:C> + <nat:6> \} \end{eqnarray} Given the above , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:h> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:8> ; <var:N> := <var:A1> <var:N> := <var:N> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:h> = <var:C> }} <def:poly> {{ <var:N> = <nat:8> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A1> = <var:C> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:6> /\ <var:N> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:N> = <nat:8> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 