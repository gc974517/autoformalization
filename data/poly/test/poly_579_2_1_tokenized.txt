\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:6> ; <var:o> := <var:s0> \end{verbatim} Allow that we have $ <var:H> = <var:W> $ before the evaluation of the list of commands , then we have $ <var:o> = <nat:6> $ when segment of code is done executing . \end{theorem} \begin{proof} The argument for this set of instructions can be seen using the below decorated set of instructions . \begin{eqnarray} \{ <var:H> = <var:W> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:H> = <var:W> \land <var:s0> = <nat:6> \} \\ <var:o> := <var:s0> \\ \{ <var:H> = <var:W> \land <var:o> = <nat:6> \} \end{eqnarray} Applying Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:H> = <var:W> }} <var:s0> := <nat:6> ; <var:o> := <var:s0> {{ <var:o> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:W> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:W> /\ <var:o> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 