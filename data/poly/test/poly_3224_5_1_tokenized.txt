\begin{document} \begin{theorem} We define a series of instructions : \begin{verbatim} <var:J1> := <var:A> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:2> ; <var:h> := <var:J1> <var:h> := <var:h> + <var:J0> \end{verbatim} Given it to hold that $ <var:A> = <var:M> $ prior to interpreting this set of commands , it follows that $ <var:h> = <nat:2> \times <var:M> + <nat:3> $ when series of instructions finishes . \end{theorem} \begin{proof} The method of proof for the segment of code is evident through typical Hoare reasoning . Taking a look at the following command contained in the code segment , the assignment statement defining $ <var:A> $ to $ <var:J1>$ . This forwards the condition $ \{ <var:A> = <var:M> \} $ to the condition $ \{ <var:A> = <var:M> \land <var:J1> = <var:M> \} $ . This is rigorously given using the assignment inference rule from typical Hoare techniques . Paying attention to the subsequent line of code contained in the code segment , we have the environment update statement assigning $ <nat:3> $ into $ <var:J0>$ . This command forwards the precondition $ \{ <var:A> = <var:M> \land <var:J1> = <var:M> \} $ to the condition $ \{ <var:A> = <var:M> \land <var:J1> = <var:M> \land <var:J0> = <nat:3> \} $ . Observing the subsequent line of code found in the series of instructions , the assignment line \verb | <var:J1> := <var:J1> * <nat:2> ; | . This advances $ \{ <var:A> = <var:M> \land <var:J1> = <var:M> \land <var:J0> = <nat:3> \} $ into the postcondition $ \{ <var:A> = <var:M> \land <var:J1> = <nat:2> * <var:M> \land <var:J0> = <nat:3> \} $ . Advancing to the following command found in our set of commands , we see the assignment statement assigning $ <var:J1$ as $ <var:h>$ . This statement redefines $ \{ <var:A> = <var:M> \land <var:J1> = <nat:2> * <var:M> \land <var:J0> = <nat:3> \} $ as the condition $ \{ <var:A> = <var:M> \land <var:J0> = <nat:3> \land <var:h> = <nat:2> * <var:M> \} $ . Focusing on the upcoming bit of code in our code segment , we have the binding code assigning $ <var:h> + <var:J0$ toward $ <var:h>$ . This transfers $ \{ <var:A> = <var:M> \land <var:J0> = <nat:3> \land <var:h> = <nat:2> * <var:M> \} $ toward the condition $ \{ <var:A> = <var:M> \land <var:h> = <nat:2> * <var:M> + <nat:3> \} $ . This is deduced by the assignment scheme defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:A> = <var:M> }} <var:J1> := <var:A> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:2> ; <var:h> := <var:J1> <var:h> := <var:h> + <var:J0> {{ <var:h> = <nat:2> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:J1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:J1> = <var:M> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:J1> = <nat:2> * <var:M> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:J0> = <nat:3> /\ <var:h> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:h> = <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 