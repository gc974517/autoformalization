\begin{document} \begin{theorem} Take the following program in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:7> ; <var:q> := <var:Q0> \end{verbatim} Given it to be that $ <var:n> = <var:t> $ --- given every $ <var:t> \in \mathbb{Z}^+ $ --- ahead of evaluating our set of instructions , then we see $ <var:q> = <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands is evident through typical Hoare techniques . Immediately after , \[ \begin{tabular} {rcl} \{ <var:n> = <var:t> \} & <var:Q0> := <nat:7> & \{ <var:n> = <var:t> \land <var:Q0> = <nat:7> \} \\ \{ <var:n> = <var:t> \land <var:Q0> = <nat:7> \} & <var:q> := <var:Q0& \{ <var:n> = <var:t> \land <var:q> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:n> = <var:t> }} <var:Q0> := <nat:7> ; <var:q> := <var:Q0> {{ <var:q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:t> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:t> /\ <var:q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 