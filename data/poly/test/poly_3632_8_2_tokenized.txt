\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <var:L> * <var:x> ; <var:L> := <nat:2> + <var:L> * <var:x> ; <var:L> := <var:L> * <var:x> ; <var:L> := <nat:2> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> ; <var:L> := <nat:1> + <var:L> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:x> = <var:S> $ prior to evaluating this set of commands then $ <var:L> = <nat:4> \times <var:S> ^ <nat:7> + <nat:2> \times <var:S> ^ <nat:5> + <nat:2> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the segment of code is evident with typical Hoare logic . Paying attention to the following steps seen in our set of instructions , we see \verb | { <var:x> = <var:S> } <var:L> := <nat:4> { <var:x> = <var:S> \land <var:L> = <nat:4> } | and \verb | { <var:x> = <var:S> \land <var:L> = <nat:4> } <var:L> := <var:L> * <var:x> { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> + } | . Now , we see \verb | { <var:x> = <var:S> } <var:L> := <nat:4> { <var:x> = <var:S> \land <var:L> = <nat:4> } | , \verb | { <var:x> = <var:S> \land <var:L> = <nat:4> } <var:L> := <var:L> * <var:x> { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> + } | , \verb | { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> + } <var:L> := <nat:2> + <var:L> * <var:x> { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> ^ <nat:2> + <nat:2> } | , \verb | { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> ^ <nat:2> + <nat:2> } <var:L> := <var:L> * <var:x> { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> + } | , \verb | { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> + } <var:L> := <nat:2> + <var:L> * <var:x> { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:2> + <nat:2> } | and \verb | { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:2> + <nat:2> } <var:L> := <nat:3> + <var:L> * <var:x> { <var:x> = <var:S> \land <var:L> = <nat:4> \times <var:S> ^ <nat:5> + <nat:2> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> + <nat:3> } | . This is ensured using the variable binding law defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:4> ; <var:L> := <var:L> * <var:x> ; <var:L> := <nat:2> + <var:L> * <var:x> ; <var:L> := <var:L> * <var:x> ; <var:L> := <nat:2> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> ; <var:L> := <nat:3> + <var:L> * <var:x> ; <var:L> := <nat:1> + <var:L> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:x> = <var:S> }} <def:poly> {{ <var:L> = <nat:4> * <var:S> ^ <nat:7> + <nat:2> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:L> = <nat:4> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:L> = <nat:4> * <var:S> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:L> = <nat:4> * <var:S> ^ <nat:3> + <nat:2> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:L> = <nat:4> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:L> = <nat:4> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:3> + <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:L> = <nat:4> * <var:S> ^ <nat:6> + <nat:2> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:L> = <nat:4> * <var:S> ^ <nat:7> + <nat:2> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 