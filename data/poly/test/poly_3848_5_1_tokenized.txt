\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:t1> := <var:r> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:5> ; <var:b> := <var:t1> <var:b> := <var:b> + <var:t0> \end{verbatim} Allowing that $ <var:r> = <var:o> $ prior to evaluating this series of commands , it holds that we have $ <var:b> = <nat:5> \times <var:o> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is accomplished using Hoare techniques . Honing in on the upcoming bits of codeseen in our list of instructions , we have \begin{eqnarray} \{ <var:r> = <var:o> \} \, <var:t1> := <var:r> \, \{ <var:r> = <var:o> \land <var:t1> = <var:o> \} \\ \{ <var:r> = <var:o> \land <var:t1> = <var:o> \} \, <var:t0> := <nat:6> \, \{ <var:r> = <var:o> \land <var:t1> = <var:o> \land <var:t0> = <nat:6> \} \\ \{ <var:r> = <var:o> \land <var:t1> = <var:o> \land <var:t0> = <nat:6> \} \, <var:t1> := <var:t1> * <nat:5> \, \{ <var:r> = <var:o> \land <var:t1> = <nat:5> * <var:o> \land <var:t0> = <nat:6> \} \\ \{ <var:r> = <var:o> \land <var:t1> = <nat:5> * <var:o> \land <var:t0> = <nat:6> \} \, <var:b> := <var:t1\, \{ <var:r> = <var:o> \land <var:t0> = <nat:6> \land <var:b> = <nat:5> * <var:o> \} \end{eqnarray} Immediately after , we see \begin{eqnarray} \{ <var:r> = <var:o> \} \, <var:t1> := <var:r> \, \{ <var:r> = <var:o> \land <var:t1> = <var:o> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:r> = <var:o> }} <var:t1> := <var:r> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:5> ; <var:b> := <var:t1> <var:b> := <var:b> + <var:t0> {{ <var:b> = <nat:5> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:t1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:t1> = <var:o> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:t1> = <nat:5> * <var:o> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:t0> = <nat:6> /\ <var:b> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:b> = <nat:5> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 