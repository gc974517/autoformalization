\begin{document} \begin{theorem} Define the following segment of code as \begin{verbatim} <var:x> := <nat:4> ; <var:x> := <var:x> * <var:v> ; <var:x> := <nat:2> + <var:x> * <var:v> \end{verbatim} Given that we have $ <var:v> = <var:S> $ , given every positive integer coefficients $ <var:S> $ , ahead of executing the series of instructions then we have $ <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning produces : \begin{eqnarray} \{ <var:v> = <var:S> \} \\ <var:x> := <nat:4> ; \\ \{ <var:v> = <var:S> \land <var:x> = <nat:4> \} \\ <var:x> := <var:x> * <var:v> ; \\ \{ <var:v> = <var:S> \land <var:x> = <nat:4> * <var:S> + \} \\ <var:x> := <nat:2> + <var:x> * <var:v> \\ \{ <var:v> = <var:S> \land <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:2> \} \end{eqnarray} As a consequence , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:v> = <var:S> }} <var:x> := <nat:4> ; <var:x> := <var:x> * <var:v> ; <var:x> := <nat:2> + <var:x> * <var:v> {{ <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:x> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:x> = <nat:4> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:S> /\ <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 