\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:5> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:L> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:L> ; <var:q2> := <var:q2> * <var:L> ; <var:q3> := <nat:6> ; <var:q3> := <var:q3> * <var:L> ; <var:q3> := <var:q3> * <var:L> ; <var:q3> := <var:q3> * <var:L> ; <var:Y> := <var:q3> ; <var:Y> := <var:Y> + <var:q2> ; <var:Y> := <var:Y> + <var:q1> ; <var:Y> := <var:Y> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assuming that we have $ <var:L> = <var:Z> $ , given some integers $ <var:Z> $ , ahead of the evaluation of this segment of code , it follows that $ <var:Y> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for the segment of code is given by standard Hoare logic . Following , we have the line \verb | <var:q0> := <nat:5> ; | . This forwards the condition $ \{ <var:L> = <var:Z> \} $ toward the postcondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \} $ . This is given through the assignment inference rule given in typical Hoare techniques . Taking a look at the upcoming line seen in our list of commands , the assignment statement \verb | <var:q1> := <nat:3> ; | . This code transfers the precondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \} $ into the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \} $ . This is deduced with the assignment scheme in typical Hoare logic . Now , we see the variable assignmet statement \verb | <var:q1> := <var:q1> * <var:L> ; | . This line advances the precondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \} $ toward the postcondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \} $ . This is ensured through the assignment law given in Hoare reasoning . Jumping to the subsequent statement seen in our set of commands , we have the variable binding statement \verb | <var:q2> := <nat:4> ; | . This line takes the precondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \} $ to $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \} $ . This is guaranteed with the assignment scheme of usual Hoare reasoning . Stepping forward , the command \verb | <var:q2> := <var:q2> * <var:L> ; | . This line moves the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \} $ as the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> \} $ . Stepping forward , we have the binding command binding $ <var:q2> * <var:L> $ to $ <var:q2>$ . This command advances the precondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> \} $ toward $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \} $ . This is rigorously given with the assignment inference rule given by Hoare reasoning . Going to the next step , we see the environment update line letting $ <nat:6> $ as $ <var:q3>$ . This command forwards $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \} $ toward the postcondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:q3> = <nat:6> \} $ . Advancing on , the environment update statement assigning $ <var:q3> * <var:L> $ into $ <var:q3>$ . This takes $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:q3> = <nat:6> \} $ to $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:q3> = <nat:6> \cdot <var:Z> \} $ . This is known to be sound by the assignment inference rule found in Hoare reasoning . Next , we have the variable assignmet command \verb | <var:q3> := <var:q3> * <var:L> ; | . This redefines the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:q3> = <nat:6> \cdot <var:Z> \} $ into the postcondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:q3> = <nat:6> \cdot <var:Z> ^ <nat:2> \} $ . This is shown with the assignment inference rule defined in typical Hoare reasoning . Immediately after , we see the assignment line assigning $ <var:q3> * <var:L> $ into $ <var:q3>$ . This line moves the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:q3> = <nat:6> \cdot <var:Z> ^ <nat:2> \} $ as the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:q3> = <nat:6> \cdot <var:Z> ^ <nat:3> \} $ . This is given by the assignment law of Hoare logic . Going forward , we have the binding command \verb | <var:Y> := <var:q3> ; | . This line transfers the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:q3> = <nat:6> \cdot <var:Z> ^ <nat:3> \} $ into $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:Y> = <nat:6> \cdot <var:Z> ^ <nat:3> \} $ . This is shown using the assignment scheme found in typical Hoare logic . Observing the subsequent statement contained in the list of instructions , we see the variable binding command defining $ <var:Y> + <var:q2> $ toward $ <var:Y>$ . This transfers the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:q2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:Y> = <nat:6> \cdot <var:Z> ^ <nat:3> \} $ into the condition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:Y> = <nat:6> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> \} $ . This is shown using the assignment rule defined by usual Hoare techniques . Considering the proceeding command contained in our series of instructions , we have the variable assignmet statement assigning $ <var:Y> + <var:q1> $ as $ <var:Y>$ . This statement redefines the precondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:q1> = <nat:3> \cdot <var:Z> \land <var:Y> = <nat:6> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> \} $ as the postcondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:Y> = <nat:6> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> \} $ . This is guaranteed using the assignment law given in standard Hoare logic . Looking at the following line contained in our series of commands , we see the binding command \verb | <var:Y> := <var:Y> + <var:q0> | . This transfers the precondition $ \{ <var:L> = <var:Z> \land <var:q0> = <nat:5> \land <var:Y> = <nat:6> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> \} $ to $ \{ <var:L> = <var:Z> \land <var:Y> = <nat:6> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:5> \} $ . This is sound using the assignment inference rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:L> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:L> ; <var:q2> := <var:q2> * <var:L> ; <var:q3> := <nat:6> ; <var:q3> := <var:q3> * <var:L> ; <var:q3> := <var:q3> * <var:L> ; <var:q3> := <var:q3> * <var:L> ; <var:Y> := <var:q3> ; <var:Y> := <var:Y> + <var:q2> ; <var:Y> := <var:Y> + <var:q1> ; <var:Y> := <var:Y> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:L> = <var:Z> }} <def:poly> {{ <var:Y> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:q2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:q2> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:q2> = <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:q2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:q3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:q2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:q2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:q2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:q2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:Y> = <nat:6> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:3> * <var:Z> /\ <var:Y> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:q0> = <nat:5> /\ <var:Y> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:Y> = <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 