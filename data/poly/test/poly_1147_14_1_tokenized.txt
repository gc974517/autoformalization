\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:F> ; <var:Z2> := <var:Z1> * <var:F> ; <var:Z3> := <var:Z2> * <var:F> ; <var:Z4> := <var:Z3> * <var:F> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:6> ; <var:Z3> := <var:Z3> * <nat:3> ; <var:Z4> := <var:Z4> * <nat:6> ; <var:M> := <var:Z4> <var:M> := <var:M> + <var:Z3> <var:M> := <var:M> + <var:Z2> <var:M> := <var:M> + <var:Z1> <var:M> := <var:M> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Given , assuming some positive integers $ <var:g> $ , it to hold that $ <var:F> = <var:g> $ before executing this code it must be that $ <var:M> = <nat:6> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives us : \begin{eqnarray} \{ <var:F> = <var:g> \} \\ <var:Z1> := <var:F> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <var:g> \} \\ <var:Z2> := <var:Z1> * <var:F> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <var:g> \land <var:Z2> = <var:g> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:F> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <var:g> \land <var:Z2> = <var:g> ^ <nat:2> \land <var:Z3> = <var:g> ^ <nat:3> \} \\ <var:Z4> := <var:Z3> * <var:F> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <var:g> \land <var:Z2> = <var:g> ^ <nat:2> \land <var:Z3> = <var:g> ^ <nat:3> \land <var:Z4> = <var:g> ^ <nat:4> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <var:g> \land <var:Z2> = <var:g> ^ <nat:2> \land <var:Z3> = <var:g> ^ <nat:3> \land <var:Z4> = <var:g> ^ <nat:4> \land <var:Z0> = <nat:8> \} \\ <var:Z1> := <var:Z1> * <nat:3> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <var:g> ^ <nat:2> \land <var:Z3> = <var:g> ^ <nat:3> \land <var:Z4> = <var:g> ^ <nat:4> \land <var:Z0> = <nat:8> \} \\ <var:Z2> := <var:Z2> * <nat:6> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:Z3> = <var:g> ^ <nat:3> \land <var:Z4> = <var:g> ^ <nat:4> \land <var:Z0> = <nat:8> \} \\ <var:Z3> := <var:Z3> * <nat:3> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:g> ^ <nat:3> \land <var:Z4> = <var:g> ^ <nat:4> \land <var:Z0> = <nat:8> \} \\ <var:Z4> := <var:Z4> * <nat:6> ; \\ \{ <var:F> = <var:g> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:g> ^ <nat:3> \land <var:Z4> = <nat:6> \times <var:g> ^ <nat:4> \land <var:Z0> = <nat:8> \} \\ <var:M> := <var:Z4> \\ \{ <var:F> = <var:g> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:Z3> = <nat:3> \times <var:g> ^ <nat:3> \land <var:Z0> = <nat:8> \land <var:M> = <nat:6> \times <var:g> ^ <nat:4> \} \\ <var:M> := <var:M> + <var:Z3> \\ \{ <var:F> = <var:g> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z2> = <nat:6> \times <var:g> ^ <nat:2> \land <var:Z0> = <nat:8> \land <var:M> = <nat:6> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:Z2> \\ \{ <var:F> = <var:g> \land <var:Z1> = <nat:3> \times <var:g> \land <var:Z0> = <nat:8> \land <var:M> = <nat:6> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:Z1> \\ \{ <var:F> = <var:g> \land <var:Z0> = <nat:8> \land <var:M> = <nat:6> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> \} \\ <var:M> := <var:M> + <var:Z0> \\ \{ <var:F> = <var:g> \land <var:M> = <nat:6> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:6> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:8> \} \end{eqnarray} As a result , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <var:Z4> : string := " <var:Z4> " . Definition <def:poly> := <var:Z1> := <var:F> ; <var:Z2> := <var:Z1> * <var:F> ; <var:Z3> := <var:Z2> * <var:F> ; <var:Z4> := <var:Z3> * <var:F> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:6> ; <var:Z3> := <var:Z3> * <nat:3> ; <var:Z4> := <var:Z4> * <nat:6> ; <var:M> := <var:Z4> <var:M> := <var:M> + <var:Z3> <var:M> := <var:M> + <var:Z2> <var:M> := <var:M> + <var:Z1> <var:M> := <var:M> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:F> = <var:g> }} <def:poly> {{ <var:M> = <nat:6> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <var:g> /\ <var:Z2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <var:g> /\ <var:Z2> = <var:g> ^ <nat:2> /\ <var:Z3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <var:g> /\ <var:Z2> = <var:g> ^ <nat:2> /\ <var:Z3> = <var:g> ^ <nat:3> /\ <var:Z4> = <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <var:g> /\ <var:Z2> = <var:g> ^ <nat:2> /\ <var:Z3> = <var:g> ^ <nat:3> /\ <var:Z4> = <var:g> ^ <nat:4> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <var:g> ^ <nat:2> /\ <var:Z3> = <var:g> ^ <nat:3> /\ <var:Z4> = <var:g> ^ <nat:4> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:Z3> = <var:g> ^ <nat:3> /\ <var:Z4> = <var:g> ^ <nat:4> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:g> ^ <nat:3> /\ <var:Z4> = <var:g> ^ <nat:4> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:g> ^ <nat:3> /\ <var:Z4> = <nat:6> * <var:g> ^ <nat:4> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:Z3> = <nat:3> * <var:g> ^ <nat:3> /\ <var:Z0> = <nat:8> /\ <var:M> = <nat:6> * <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z2> = <nat:6> * <var:g> ^ <nat:2> /\ <var:Z0> = <nat:8> /\ <var:M> = <nat:6> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z1> = <nat:3> * <var:g> /\ <var:Z0> = <nat:8> /\ <var:M> = <nat:6> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z0> = <nat:8> /\ <var:M> = <nat:6> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:M> = <nat:6> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:6> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 