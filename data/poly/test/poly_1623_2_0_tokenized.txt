\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:8> ; <var:i> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( assuming some $ <var:l> \in \mathbb{N} $ ) that we have $ <var:d> = <var:l> $ prior to running our segment of code then we see $ <var:i> = <nat:8> $ once series of instructions has finished executing . \end{theorem} \begin{proof} We can see that the following decorated code segment . \begin{eqnarray} \{ <var:d> = <var:l> \} \\ <var:D0> := <nat:8> ; \\ \{ <var:d> = <var:l> \land <var:D0> = <nat:8> \} \\ <var:i> := <var:D0> \\ \{ <var:d> = <var:l> \land <var:i> = <nat:8> \} \end{eqnarray} Using standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:8> ; <var:i> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:d> = <var:l> }} <def:poly> {{ <var:i> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:i> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 