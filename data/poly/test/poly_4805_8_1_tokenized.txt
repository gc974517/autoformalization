\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:l1> := <var:W> ; <var:l2> := <var:l1> * <var:W> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:5> ; <var:l2> := <var:l2> * <nat:8> ; <var:Z> := <var:l2> <var:Z> := <var:Z> + <var:l1> <var:Z> := <var:Z> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:W> = <var:c> $ before the evaluation of this code segment , it follows that we have $ <var:Z> = <nat:8> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be given using this decorated segment of code . \begin{eqnarray} \{ <var:W> = <var:c> \} \\ <var:l1> := <var:W> ; \\ \{ <var:W> = <var:c> \land <var:l1> = <var:c> \} \\ <var:l2> := <var:l1> * <var:W> ; \\ \{ <var:W> = <var:c> \land <var:l1> = <var:c> \land <var:l2> = <var:c> ^ <nat:2> \} \\ <var:l0> := <nat:6> ; \\ \{ <var:W> = <var:c> \land <var:l1> = <var:c> \land <var:l2> = <var:c> ^ <nat:2> \land <var:l0> = <nat:6> \} \\ <var:l1> := <var:l1> * <nat:5> ; \\ \{ <var:W> = <var:c> \land <var:l1> = <nat:5> \cdot <var:c> \land <var:l2> = <var:c> ^ <nat:2> \land <var:l0> = <nat:6> \} \\ <var:l2> := <var:l2> * <nat:8> ; \\ \{ <var:W> = <var:c> \land <var:l1> = <nat:5> \cdot <var:c> \land <var:l2> = <nat:8> \cdot <var:c> ^ <nat:2> \land <var:l0> = <nat:6> \} \\ <var:Z> := <var:l2> \\ \{ <var:W> = <var:c> \land <var:l1> = <nat:5> \cdot <var:c> \land <var:l0> = <nat:6> \land <var:Z> = <nat:8> \cdot <var:c> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:l1> \\ \{ <var:W> = <var:c> \land <var:l0> = <nat:6> \land <var:Z> = <nat:8> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> \} \\ <var:Z> := <var:Z> + <var:l0> \\ \{ <var:W> = <var:c> \land <var:Z> = <nat:8> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l1> := <var:W> ; <var:l2> := <var:l1> * <var:W> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:5> ; <var:l2> := <var:l2> * <nat:8> ; <var:Z> := <var:l2> <var:Z> := <var:Z> + <var:l1> <var:Z> := <var:Z> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:W> = <var:c> }} <def:poly> {{ <var:Z> = <nat:8> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l1> = <var:c> /\ <var:l2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l1> = <var:c> /\ <var:l2> = <var:c> ^ <nat:2> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l1> = <nat:5> * <var:c> /\ <var:l2> = <var:c> ^ <nat:2> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l1> = <nat:5> * <var:c> /\ <var:l2> = <nat:8> * <var:c> ^ <nat:2> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l1> = <nat:5> * <var:c> /\ <var:l0> = <nat:6> /\ <var:Z> = <nat:8> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:l0> = <nat:6> /\ <var:Z> = <nat:8> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:Z> = <nat:8> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 