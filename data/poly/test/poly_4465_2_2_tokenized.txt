\begin{document} \begin{theorem} Define a series of instructions such that \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <nat:4> + <var:F> * <var:e> \end{verbatim} Assume that we have $ <var:e> = <var:X> $ prior to interpreting this code segment , it holds that we see $ <var:F> = <nat:1> \times <var:X> + <nat:4> $ . \end{theorem} \begin{proof} Let the following decorated list of commands . \begin{eqnarray} \{ <var:e> = <var:X> \} \\ <var:F> := <nat:1> ; \\ \{ <var:e> = <var:X> \land <var:F> = <nat:1> \} \\ <var:F> := <nat:4> + <var:F> * <var:e> \\ \{ <var:e> = <var:X> \land <var:F> = <nat:1> \cdot <var:X> + <nat:4> \} \end{eqnarray} Applying Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:e> = <var:X> }} <var:F> := <nat:1> ; <var:F> := <nat:4> + <var:F> * <var:e> {{ <var:F> = <nat:1> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:X> /\ <var:F> = <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 