\begin{document} \begin{theorem} Define a code segment in \emph{Imp} : \begin{verbatim} <var:j> := <nat:4> ; <var:j> := <nat:3> + <var:j> * <var:v> ; <var:j> := <var:j> * <var:v> ; <var:j> := <nat:3> + <var:j> * <var:v> ; <var:j> := <nat:3> + <var:j> * <var:v> ; <var:j> := <nat:3> + <var:j> * <var:v> ; <var:j> := <nat:2> + <var:j> * <var:v> ; <var:j> := <nat:1> + <var:j> * <var:v> ; <var:j> := <nat:3> + <var:j> * <var:v> \end{verbatim} Assuming for positive numbers $ <var:R> $ it to be that $ <var:v> = <var:R> $ before the evaluation of our set of commands , it follows that $ <var:j> = <nat:4> \cdot <var:R> ^ <nat:8> + <nat:3> \cdot <var:R> ^ <nat:7> + <nat:3> \cdot <var:R> ^ <nat:5> + <nat:3> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:3> $ when set of commands is done . \end{theorem} \begin{proof} Proving correctness for the set of commands can be seen using Hoare logic . Looking at the subsequent step found in the code segment , we see the variable assignmet line letting $ <nat:4> $ to $ <var:j>$ . This code advances the precondition $ \{ <var:v> = <var:R> \} $ into the condition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> \} $ . This is rigorously given by the assignment law in usual Hoare reasoning . Moving forward to the upcoming statement contained in the segment of code , the statement binding $ <nat:3> + <var:j> * <var:v> $ as $ <var:j>$ . This advances the precondition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> \} $ as the condition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> + <nat:3> \} $ . This is ensured through the assignment law from usual Hoare reasoning . Now , we have the variable update line \verb | <var:j> := <var:j> * <var:v> ; | . This advances the condition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> + <nat:3> \} $ toward the postcondition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + \} $ . This is deduced by the assignment law defined by typical Hoare logic . Focusing on the proceeding statement contained in the series of instructions , we see the binding statement yielding $ <nat:3> + <var:j> * <var:v> $ into $ <var:j>$ . This command redefines $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + \} $ to the postcondition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> \} $ . After , we see the variable assignmet code yielding $ <nat:3> + <var:j> * <var:v> $ into $ <var:j>$ . This code transfers the condition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> \} $ into $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:3> \} $ . Advancing to the following command contained in the code segment , the code assigning $ <nat:3> + <var:j> * <var:v> $ to $ <var:j>$ . This redefines $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:3> \} $ into $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:3> \} $ . Moving on to the following line of code in the list of commands , we see the assignment statement \verb | <var:j> := <nat:2> + <var:j> * <var:v> ; | . This forwards the condition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:3> \} $ toward the postcondition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> \} $ . This is shown through the assignment law given in standard Hoare logic . Advancing to the next step , we see the code \verb | <var:j> := <nat:1> + <var:j> * <var:v> ; | . This command advances the condition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:1> \} $ . Honing in on the following line of code seen in the series of commands , we have the environment update code binding $ <nat:3> + <var:j> * <var:v$ as $ <var:j>$ . This redefines the condition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:1> \} $ to the postcondition $ \{ <var:v> = <var:R> \land <var:j> = <nat:4> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> \} $ . This is known to be sound using the assignment scheme defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:v> = <var:R> }} <var:j> := <nat:4> ; <var:j> := <nat:3> + <var:j> * <var:v> ; <var:j> := <var:j> * <var:v> ; <var:j> := <nat:3> + <var:j> * <var:v> ; <var:j> := <nat:3> + <var:j> * <var:v> ; <var:j> := <nat:3> + <var:j> * <var:v> ; <var:j> := <nat:2> + <var:j> * <var:v> ; <var:j> := <nat:1> + <var:j> * <var:v> ; <var:j> := <nat:3> + <var:j> * <var:v> {{ <var:j> = <nat:4> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:j> = <nat:4> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 