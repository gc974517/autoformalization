\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:6> ; <var:u> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Assuming it to be that $ <var:d> = <var:q> $ before interpreting this series of commands , it holds that we have $ <var:u> = <nat:6> $ when list of instructions has finished executing . \end{theorem} \begin{proof} The proof of the series of commands is demonstrated through usual Hoare reasoning . Looking at the subsequent line seen in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:q> \} & <var:v0> := <nat:6> & \{ <var:d> = <var:q> \land <var:v0> = <nat:6> \} \end{tabular} Next , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:q> \} & <var:v0> := <nat:6> & \{ <var:d> = <var:q> \land <var:v0> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:6> ; <var:u> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:d> = <var:q> }} <def:poly> {{ <var:u> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:u> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 