\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:3> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:N> ; <var:g2> := <nat:7> ; <var:g2> := <var:g2> * <var:N> ; <var:g2> := <var:g2> * <var:N> ; <var:J> := <var:g2> ; <var:J> := <var:J> + <var:g1> ; <var:J> := <var:J> + <var:g0> \end{verbatim} Allow that $ <var:N> = <var:X> $ before evaluating this set of instructions , it holds that we have $ <var:J> = <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> $ when set of commands executes . \end{theorem} \begin{proof} Proving correctness for this program can be demonstrated with the below decorated segment of code . \begin{eqnarray} \{ <var:N> = <var:X> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:N> = <var:X> \land <var:g0> = <nat:3> \} \\ <var:g1> := <nat:3> ; \\ \{ <var:N> = <var:X> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> \} \\ <var:g1> := <var:g1> * <var:N> ; \\ \{ <var:N> = <var:X> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> \cdot <var:X> \} \\ <var:g2> := <nat:7> ; \\ \{ <var:N> = <var:X> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> \cdot <var:X> \land <var:g2> = <nat:7> \} \\ <var:g2> := <var:g2> * <var:N> ; \\ \{ <var:N> = <var:X> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> \cdot <var:X> \land <var:g2> = <nat:7> \cdot <var:X> \} \\ <var:g2> := <var:g2> * <var:N> ; \\ \{ <var:N> = <var:X> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> \cdot <var:X> \land <var:g2> = <nat:7> \cdot <var:X> ^ <nat:2> \} \\ <var:J> := <var:g2> ; \\ \{ <var:N> = <var:X> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> \cdot <var:X> \land <var:J> = <nat:7> \cdot <var:X> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:g1> ; \\ \{ <var:N> = <var:X> \land <var:g0> = <nat:3> \land <var:J> = <nat:7> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> \} \\ <var:J> := <var:J> + <var:g0> \\ \{ <var:N> = <var:X> \land <var:J> = <nat:7> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:N> = <var:X> }} <var:g0> := <nat:3> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:N> ; <var:g2> := <nat:7> ; <var:g2> := <var:g2> * <var:N> ; <var:g2> := <var:g2> * <var:N> ; <var:J> := <var:g2> ; <var:J> := <var:J> + <var:g1> ; <var:J> := <var:J> + <var:g0> {{ <var:J> = <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:3> * <var:X> /\ <var:g2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:3> * <var:X> /\ <var:g2> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:3> * <var:X> /\ <var:g2> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:3> * <var:X> /\ <var:J> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:g0> = <nat:3> /\ <var:J> = <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:X> /\ <var:J> = <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 