\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:N> := <nat:4> ; <var:N> := <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:4> + <var:N> * <var:V> \end{verbatim} Allowing letting $ <var:e> $ that we have $ <var:V> = <var:e> $ prior to the evaluation of the code , it must be that $ <var:N> = <nat:4> \cdot <var:e> ^ <nat:6> + <nat:1> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:4> $ when series of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for the code segment can be accomplished using usual Hoare techniques . Observing the following bits of codein our set of commands , \[ \begin{tabular} {rcl} \{ <var:V> = <var:e> \} & <var:N> := <nat:4> & \{ <var:V> = <var:e> \land <var:N> = <nat:4> \} \\ \{ <var:V> = <var:e> \land <var:N> = <nat:4> \} & <var:N> := <var:N> * <var:V> & \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> + \} \\ \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> + \} & <var:N> := <nat:1> + <var:N> * <var:V> & \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> ^ <nat:2> + <nat:1> \} \\ \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> ^ <nat:2> + <nat:1> \} & <var:N> := <nat:1> + <var:N> * <var:V> & \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> + <nat:1> \} \\ \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> + <nat:1> \} & <var:N> := <nat:1> + <var:N> * <var:V> & \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:1> \} \\ \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:1> \} & <var:N> := <nat:1> + <var:N> * <var:V> & \{ <var:V> = <var:e> \land <var:N> = <nat:4> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:1> \} \end{tabular} Moving forward to the next line of code found in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:e> \} & <var:N> := <nat:4> & \{ <var:V> = <var:e> \land <var:N> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:V> = <var:e> }} <var:N> := <nat:4> ; <var:N> := <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:4> + <var:N> * <var:V> {{ <var:N> = <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:N> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:N> = <nat:4> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:N> = <nat:4> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:N> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:N> = <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:N> = <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:e> /\ <var:N> = <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 