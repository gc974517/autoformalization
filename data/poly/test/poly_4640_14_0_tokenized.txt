\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:f> ; <var:a2> := <nat:2> ; <var:a2> := <var:a2> * <var:f> ; <var:a2> := <var:a2> * <var:f> ; <var:a3> := <nat:7> ; <var:a3> := <var:a3> * <var:f> ; <var:a3> := <var:a3> * <var:f> ; <var:a3> := <var:a3> * <var:f> ; <var:D> := <var:a3> ; <var:D> := <var:D> + <var:a2> ; <var:D> := <var:D> + <var:a1> ; <var:D> := <var:D> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- taking integers $ <var:Y> $ --- it to be that $ <var:f> = <var:Y> $ ahead of executing our program , it follows that $ <var:D> = <nat:7> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:7> \times <var:Y> + <nat:8> $ when list of instructions has finished executing . \end{theorem} \begin{proof} Let the below decorated set of commands . \begin{eqnarray} \{ <var:f> = <var:Y> \} \\ <var:a0> := <nat:8> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \} \\ <var:a1> := <nat:7> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \} \\ <var:a1> := <var:a1> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \} \\ <var:a2> := <nat:2> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:a2> = <nat:2> \} \\ <var:a2> := <var:a2> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:a2> = <nat:2> * <var:Y> \} \\ <var:a2> := <var:a2> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:a2> = <nat:2> * <var:Y> ^ <nat:2> \} \\ <var:a3> := <nat:7> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:a2> = <nat:2> * <var:Y> ^ <nat:2> \land <var:a3> = <nat:7> \} \\ <var:a3> := <var:a3> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:a2> = <nat:2> * <var:Y> ^ <nat:2> \land <var:a3> = <nat:7> * <var:Y> \} \\ <var:a3> := <var:a3> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:a2> = <nat:2> * <var:Y> ^ <nat:2> \land <var:a3> = <nat:7> * <var:Y> ^ <nat:2> \} \\ <var:a3> := <var:a3> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:a2> = <nat:2> * <var:Y> ^ <nat:2> \land <var:a3> = <nat:7> * <var:Y> ^ <nat:3> \} \\ <var:D> := <var:a3> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:a2> = <nat:2> * <var:Y> ^ <nat:2> \land <var:D> = <nat:7> * <var:Y> ^ <nat:3> \} \\ <var:D> := <var:D> + <var:a2> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> * <var:Y> \land <var:D> = <nat:7> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:a1> ; \\ \{ <var:f> = <var:Y> \land <var:a0> = <nat:8> \land <var:D> = <nat:7> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> \} \\ <var:D> := <var:D> + <var:a0> \\ \{ <var:f> = <var:Y> \land <var:D> = <nat:7> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:8> \} \end{eqnarray} Using typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a0> := <nat:8> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:f> ; <var:a2> := <nat:2> ; <var:a2> := <var:a2> * <var:f> ; <var:a2> := <var:a2> * <var:f> ; <var:a3> := <nat:7> ; <var:a3> := <var:a3> * <var:f> ; <var:a3> := <var:a3> * <var:f> ; <var:a3> := <var:a3> * <var:f> ; <var:D> := <var:a3> ; <var:D> := <var:D> + <var:a2> ; <var:D> := <var:D> + <var:a1> ; <var:D> := <var:D> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:f> = <var:Y> }} <def:poly> {{ <var:D> = <nat:7> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:a2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:a2> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:a2> = <nat:2> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:a2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:a3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:a2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:a2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:a2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:a2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:D> = <nat:7> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:Y> /\ <var:D> = <nat:7> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:a0> = <nat:8> /\ <var:D> = <nat:7> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:D> = <nat:7> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 