\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O1> := <var:X> ; <var:O2> := <var:O1> * <var:X> ; <var:O3> := <var:O2> * <var:X> ; <var:O4> := <var:O3> * <var:X> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:4> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:7> ; <var:O4> := <var:O4> * <nat:5> ; <var:K> := <var:O4> <var:K> := <var:K> + <var:O3> <var:K> := <var:K> + <var:O2> <var:K> := <var:K> + <var:O1> <var:K> := <var:K> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Allow $ <var:X> = <var:I> $ ahead of executing the code it must be that $ <var:K> = <nat:5> \times <var:I> ^ <nat:4> + <nat:7> \times <var:I> ^ <nat:3> + <nat:6> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:6> $ once code has terminated . \end{theorem} \begin{proof} The method of proof for the series of instructions can be done by typical Hoare reasoning . Advancing to the proceeding pieces of code found in the set of instructions , we have \verb | { <var:X> = <var:I> } <var:O1> := <var:X> { <var:X> = <var:I> \land <var:O1> = <var:I> } | and \verb | { <var:X> = <var:I> \land <var:O1> = <var:I> } <var:O2> := <var:O1> * <var:X> { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> } | . This is rigorously given using the law given in standard Hoare reasoning . Stepping forward , \verb | { <var:X> = <var:I> } <var:O1> := <var:X> { <var:X> = <var:I> \land <var:O1> = <var:I> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <var:I> } <var:O2> := <var:O1> * <var:X> { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> } <var:O3> := <var:O2> * <var:X> { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> } <var:O4> := <var:O3> * <var:X> { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> } <var:O0> := <nat:6> { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } <var:O1> := <var:O1> * <nat:4> { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } <var:O2> := <var:O2> * <nat:6> { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O3> = <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } <var:O3> := <var:O3> * <nat:7> { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O3> = <nat:7> * <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O3> = <nat:7> * <var:I> ^ <nat:3> \land <var:O4> = <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } <var:O4> := <var:O4> * <nat:5> { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O3> = <nat:7> * <var:I> ^ <nat:3> \land <var:O4> = <nat:5> * <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } | , \verb | { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O3> = <nat:7> * <var:I> ^ <nat:3> \land <var:O4> = <nat:5> * <var:I> ^ <nat:4> \land <var:O0> = <nat:6> } <var:K> := <var:O4{ <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O3> = <nat:7> * <var:I> ^ <nat:3> \land <var:O0> = <nat:6> \land <var:K> = <nat:5> * <var:I> ^ <nat:4> } | and \verb | { <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O3> = <nat:7> * <var:I> ^ <nat:3> \land <var:O0> = <nat:6> \land <var:K> = <nat:5> * <var:I> ^ <nat:4> } <var:K> := <var:K> + <var:O3{ <var:X> = <var:I> \land <var:O1> = <nat:4> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \land <var:O0> = <nat:6> \land <var:K> = <nat:5> * <var:I> ^ <nat:4> + <nat:7> * <var:I> ^ <nat:3> } | . Focusing on the subsequent bit of code found in the program , we have \verb | { <var:X> = <var:I> } <var:O1> := <var:X> { <var:X> = <var:I> \land <var:O1> = <var:I> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <var:O4> : string := " <var:O4> " . Definition <def:poly> := <var:O1> := <var:X> ; <var:O2> := <var:O1> * <var:X> ; <var:O3> := <var:O2> * <var:X> ; <var:O4> := <var:O3> * <var:X> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:4> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:7> ; <var:O4> := <var:O4> * <nat:5> ; <var:K> := <var:O4> <var:K> := <var:K> + <var:O3> <var:K> := <var:K> + <var:O2> <var:K> := <var:K> + <var:O1> <var:K> := <var:K> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:X> = <var:I> }} <def:poly> {{ <var:K> = <nat:5> * <var:I> ^ <nat:4> + <nat:7> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <var:I> /\ <var:O2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <var:I> /\ <var:O2> = <var:I> ^ <nat:2> /\ <var:O3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <var:I> /\ <var:O2> = <var:I> ^ <nat:2> /\ <var:O3> = <var:I> ^ <nat:3> /\ <var:O4> = <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <var:I> /\ <var:O2> = <var:I> ^ <nat:2> /\ <var:O3> = <var:I> ^ <nat:3> /\ <var:O4> = <var:I> ^ <nat:4> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <nat:4> * <var:I> /\ <var:O2> = <var:I> ^ <nat:2> /\ <var:O3> = <var:I> ^ <nat:3> /\ <var:O4> = <var:I> ^ <nat:4> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <nat:4> * <var:I> /\ <var:O2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:O3> = <var:I> ^ <nat:3> /\ <var:O4> = <var:I> ^ <nat:4> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <nat:4> * <var:I> /\ <var:O2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:I> ^ <nat:3> /\ <var:O4> = <var:I> ^ <nat:4> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <nat:4> * <var:I> /\ <var:O2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:I> ^ <nat:3> /\ <var:O4> = <nat:5> * <var:I> ^ <nat:4> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <nat:4> * <var:I> /\ <var:O2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:I> ^ <nat:3> /\ <var:O0> = <nat:6> /\ <var:K> = <nat:5> * <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <nat:4> * <var:I> /\ <var:O2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:O0> = <nat:6> /\ <var:K> = <nat:5> * <var:I> ^ <nat:4> + <nat:7> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O1> = <nat:4> * <var:I> /\ <var:O0> = <nat:6> /\ <var:K> = <nat:5> * <var:I> ^ <nat:4> + <nat:7> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:O0> = <nat:6> /\ <var:K> = <nat:5> * <var:I> ^ <nat:4> + <nat:7> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:K> = <nat:5> * <var:I> ^ <nat:4> + <nat:7> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 