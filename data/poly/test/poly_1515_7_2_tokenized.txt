\begin{document} \begin{theorem} Define a segment of code : \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <nat:4> + <var:L> * <var:E> ; <var:L> := <nat:1> + <var:L> * <var:E> ; <var:L> := <nat:1> + <var:L> * <var:E> ; <var:L> := <nat:1> + <var:L> * <var:E> ; <var:L> := <nat:3> + <var:L> * <var:E> ; <var:L> := <nat:2> + <var:L> * <var:E> \end{verbatim} Given it to hold that $ <var:E> = <var:K> $ before the execution of this series of commands it follows that $ <var:L> = <nat:4> \cdot <var:K> ^ <nat:6> + <nat:4> \cdot <var:K> ^ <nat:5> + <nat:1> \cdot <var:K> ^ <nat:4> + <nat:1> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:E> = <var:K> \} \\ <var:L> := <nat:4> ; \\ \{ <var:E> = <var:K> \land <var:L> = <nat:4> \} \\ <var:L> := <nat:4> + <var:L> * <var:E> ; \\ \{ <var:E> = <var:K> \land <var:L> = <nat:4> * <var:K> + <nat:4> \} \\ <var:L> := <nat:1> + <var:L> * <var:E> ; \\ \{ <var:E> = <var:K> \land <var:L> = <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> \} \\ <var:L> := <nat:1> + <var:L> * <var:E> ; \\ \{ <var:E> = <var:K> \land <var:L> = <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:1> \} \\ <var:L> := <nat:1> + <var:L> * <var:E> ; \\ \{ <var:E> = <var:K> \land <var:L> = <nat:4> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:1> \} \\ <var:L> := <nat:3> + <var:L> * <var:E> ; \\ \{ <var:E> = <var:K> \land <var:L> = <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> \} \\ <var:L> := <nat:2> + <var:L> * <var:E> \\ \{ <var:E> = <var:K> \land <var:L> = <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> \} \end{eqnarray} As a result , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:E> = <var:K> }} <var:L> := <nat:4> ; <var:L> := <nat:4> + <var:L> * <var:E> ; <var:L> := <nat:1> + <var:L> * <var:E> ; <var:L> := <nat:1> + <var:L> * <var:E> ; <var:L> := <nat:1> + <var:L> * <var:E> ; <var:L> := <nat:3> + <var:L> * <var:E> ; <var:L> := <nat:2> + <var:L> * <var:E> {{ <var:L> = <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:L> = <nat:4> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:L> = <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 