\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U1> := <var:d> ; <var:U0> := <nat:6> ; <var:U1> := <var:U1> * <nat:5> ; <var:Y> := <var:U1> <var:Y> := <var:Y> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allow that $ <var:d> = <var:u> $ prior to running our series of commands then we have $ <var:Y> = <nat:5> * <var:u> + <nat:6> $ once program is done executing . \end{theorem} \begin{proof} The method of proof for this series of commands can be seen using typical Hoare logic . Advancing to the next step , \begin{eqnarray} \{ <var:d> = <var:u> \} \, <var:U1> := <var:d> \, \{ <var:d> = <var:u> \land <var:U1> = <var:u> \} \\ \{ <var:d> = <var:u> \land <var:U1> = <var:u> \} \, <var:U0> := <nat:6> \, \{ <var:d> = <var:u> \land <var:U1> = <var:u> \land <var:U0> = <nat:6> \} \\ \{ <var:d> = <var:u> \land <var:U1> = <var:u> \land <var:U0> = <nat:6> \} \, <var:U1> := <var:U1> * <nat:5> \, \{ <var:d> = <var:u> \land <var:U1> = <nat:5> * <var:u> \land <var:U0> = <nat:6> \} \\ \{ <var:d> = <var:u> \land <var:U1> = <nat:5> * <var:u> \land <var:U0> = <nat:6> \} \, <var:Y> := <var:U1\, \{ <var:d> = <var:u> \land <var:U0> = <nat:6> \land <var:Y> = <nat:5> * <var:u> \} \\ \{ <var:d> = <var:u> \land <var:U0> = <nat:6> \land <var:Y> = <nat:5> * <var:u> \} \, <var:Y> := <var:Y> + <var:U0\, \{ <var:d> = <var:u> \land <var:Y> = <nat:5> * <var:u> + <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:d> ; <var:U0> := <nat:6> ; <var:U1> := <var:U1> * <nat:5> ; <var:Y> := <var:U1> <var:Y> := <var:Y> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:d> = <var:u> }} <def:poly> {{ <var:Y> = <nat:5> * <var:u> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:U1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:U1> = <var:u> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:U1> = <nat:5> * <var:u> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:U0> = <nat:6> /\ <var:Y> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:Y> = <nat:5> * <var:u> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 