\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} : \begin{verbatim} <var:e1> := <var:s> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:7> ; <var:v> := <var:e1> <var:v> := <var:v> + <var:e0> \end{verbatim} Given , for any positive numbers $ <var:L> $ , that we have $ <var:s> = <var:L> $ prior to the execution of this code segment , it follows that we see $ <var:v> = <nat:7> \times <var:L> + <nat:5> $ when list of instructions has exited . \end{theorem} \begin{proof} Using typical Hoare techniques returns : \begin{eqnarray} \{ <var:s> = <var:L> \} \\ <var:e1> := <var:s> ; \\ \{ <var:s> = <var:L> \land <var:e1> = <var:L> \} \\ <var:e0> := <nat:5> ; \\ \{ <var:s> = <var:L> \land <var:e1> = <var:L> \land <var:e0> = <nat:5> \} \\ <var:e1> := <var:e1> * <nat:7> ; \\ \{ <var:s> = <var:L> \land <var:e1> = <nat:7> \cdot <var:L> \land <var:e0> = <nat:5> \} \end{eqnarray} Advancing executing our list of commands yields : \begin{eqnarray} <var:v> := <var:e1> \\ \{ <var:s> = <var:L> \land <var:e0> = <nat:5> \land <var:v> = <nat:7> \cdot <var:L> \} \\ <var:v> := <var:v> + <var:e0> \\ \{ <var:s> = <var:L> \land <var:v> = <nat:7> \cdot <var:L> + <nat:5> \} \end{eqnarray} As a result , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:s> = <var:L> }} <var:e1> := <var:s> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:7> ; <var:v> := <var:e1> <var:v> := <var:v> + <var:e0> {{ <var:v> = <nat:7> * <var:L> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:e1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:e1> = <var:L> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:e1> = <nat:7> * <var:L> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:e0> = <nat:5> /\ <var:v> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:v> = <nat:7> * <var:L> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 