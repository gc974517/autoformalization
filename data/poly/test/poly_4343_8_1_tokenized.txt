\begin{document} \begin{theorem} Let the following code in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:p> ; <var:s2> := <var:s1> * <var:p> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:3> ; <var:s2> := <var:s2> * <nat:4> ; <var:i> := <var:s2> <var:i> := <var:i> + <var:s1> <var:i> := <var:i> + <var:s0> \end{verbatim} Assuming ( taking whole numbers $ <var:Y> $ ) it to be that $ <var:p> = <var:Y> $ before evaluating the program , it must be that $ <var:i> = <nat:4> \times <var:Y> ^ <nat:2> + <nat:3> \times <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:Y> \} \\ <var:s1> := <var:p> ; \\ \{ <var:p> = <var:Y> \land <var:s1> = <var:Y> \} \\ <var:s2> := <var:s1> * <var:p> ; \\ \{ <var:p> = <var:Y> \land <var:s1> = <var:Y> \land <var:s2> = <var:Y> ^ <nat:2> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:p> = <var:Y> \land <var:s1> = <var:Y> \land <var:s2> = <var:Y> ^ <nat:2> \land <var:s0> = <nat:2> \} \\ <var:s1> := <var:s1> * <nat:3> ; \\ \{ <var:p> = <var:Y> \land <var:s1> = <nat:3> \times <var:Y> \land <var:s2> = <var:Y> ^ <nat:2> \land <var:s0> = <nat:2> \} \\ <var:s2> := <var:s2> * <nat:4> ; \\ \{ <var:p> = <var:Y> \land <var:s1> = <nat:3> \times <var:Y> \land <var:s2> = <nat:4> \times <var:Y> ^ <nat:2> \land <var:s0> = <nat:2> \} \\ <var:i> := <var:s2> \\ \{ <var:p> = <var:Y> \land <var:s1> = <nat:3> \times <var:Y> \land <var:s0> = <nat:2> \land <var:i> = <nat:4> \times <var:Y> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:s1> \\ \{ <var:p> = <var:Y> \land <var:s0> = <nat:2> \land <var:i> = <nat:4> \times <var:Y> ^ <nat:2> + <nat:3> \times <var:Y> \} \\ <var:i> := <var:i> + <var:s0> \\ \{ <var:p> = <var:Y> \land <var:i> = <nat:4> \times <var:Y> ^ <nat:2> + <nat:3> \times <var:Y> + <nat:2> \} \end{eqnarray} The application of Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:p> = <var:Y> }} <var:s1> := <var:p> ; <var:s2> := <var:s1> * <var:p> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:3> ; <var:s2> := <var:s2> * <nat:4> ; <var:i> := <var:s2> <var:i> := <var:i> + <var:s1> <var:i> := <var:i> + <var:s0> {{ <var:i> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <var:Y> /\ <var:s2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <var:Y> /\ <var:s2> = <var:Y> ^ <nat:2> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <nat:3> * <var:Y> /\ <var:s2> = <var:Y> ^ <nat:2> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <nat:3> * <var:Y> /\ <var:s2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <nat:3> * <var:Y> /\ <var:s0> = <nat:2> /\ <var:i> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s0> = <nat:2> /\ <var:i> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:i> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 