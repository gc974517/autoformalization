\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R> := <nat:1> ; <var:R> := <nat:1> + <var:R> * <var:I> ; <var:R> := <nat:4> + <var:R> * <var:I> ; <var:R> := <nat:3> + <var:R> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Allowing it to hold that $ <var:I> = <var:a> $ ahead of interpreting the list of commands , it follows that we see $ <var:R> = <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:I> = <var:a> \} \\ <var:R> := <nat:1> ; \\ \{ <var:I> = <var:a> \land <var:R> = <nat:1> \} \\ <var:R> := <nat:1> + <var:R> * <var:I> ; \\ \{ <var:I> = <var:a> \land <var:R> = <nat:1> \times <var:a> + <nat:1> \} \\ <var:R> := <nat:4> + <var:R> * <var:I> ; \\ \{ <var:I> = <var:a> \land <var:R> = <nat:1> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:4> \} \\ <var:R> := <nat:3> + <var:R> * <var:I> \\ \{ <var:I> = <var:a> \land <var:R> = <nat:1> \times <var:a> ^ <nat:3> + <nat:1> \times <var:a> ^ <nat:2> + <nat:4> \times <var:a> + <nat:3> \} \end{eqnarray} Considering the above , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:1> ; <var:R> := <nat:1> + <var:R> * <var:I> ; <var:R> := <nat:4> + <var:R> * <var:I> ; <var:R> := <nat:3> + <var:R> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:I> = <var:a> }} <def:poly> {{ <var:R> = <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:R> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:R> = <nat:1> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:R> = <nat:1> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:R> = <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 