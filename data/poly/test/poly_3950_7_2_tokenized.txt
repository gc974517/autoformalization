\begin{document} \begin{theorem} Consider a segment of code such that \begin{verbatim} <var:z> := <nat:1> ; <var:z> := <nat:3> + <var:z> * <var:j> ; <var:z> := <nat:3> + <var:z> * <var:j> ; <var:z> := <nat:1> + <var:z> * <var:j> ; <var:z> := <nat:2> + <var:z> * <var:j> ; <var:z> := <nat:3> + <var:z> * <var:j> ; <var:z> := <nat:2> + <var:z> * <var:j> \end{verbatim} Given $ <var:j> = <var:J> $ --- with some whole numbers $ <var:J> $ --- before interpreting this code segment it must be that $ <var:z> = <nat:1> \cdot <var:J> ^ <nat:6> + <nat:3> \cdot <var:J> ^ <nat:5> + <nat:3> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of commands can be done with the following decorated set of instructions . \begin{eqnarray} \{ <var:j> = <var:J> \} \\ <var:z> := <nat:1> ; \\ \{ <var:j> = <var:J> \land <var:z> = <nat:1> \} \\ <var:z> := <nat:3> + <var:z> * <var:j> ; \\ \{ <var:j> = <var:J> \land <var:z> = <nat:1> * <var:J> + <nat:3> \} \\ <var:z> := <nat:3> + <var:z> * <var:j> ; \\ \{ <var:j> = <var:J> \land <var:z> = <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> \} \\ <var:z> := <nat:1> + <var:z> * <var:j> ; \\ \{ <var:j> = <var:J> \land <var:z> = <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> \} \\ <var:z> := <nat:2> + <var:z> * <var:j> ; \\ \{ <var:j> = <var:J> \land <var:z> = <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:2> \} \\ <var:z> := <nat:3> + <var:z> * <var:j> ; \\ \{ <var:j> = <var:J> \land <var:z> = <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> \} \\ <var:z> := <nat:2> + <var:z> * <var:j> \\ \{ <var:j> = <var:J> \land <var:z> = <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> \} \end{eqnarray} Applying typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:j> = <var:J> }} <var:z> := <nat:1> ; <var:z> := <nat:3> + <var:z> * <var:j> ; <var:z> := <nat:3> + <var:z> * <var:j> ; <var:z> := <nat:1> + <var:z> * <var:j> ; <var:z> := <nat:2> + <var:z> * <var:j> ; <var:z> := <nat:3> + <var:z> * <var:j> ; <var:z> := <nat:2> + <var:z> * <var:j> {{ <var:z> = <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:z> = <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:z> = <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:z> = <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:z> = <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:z> = <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:z> = <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 