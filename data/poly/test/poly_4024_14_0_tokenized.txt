\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:2> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:Z> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:Z> ; <var:n2> := <var:n2> * <var:Z> ; <var:n3> := <nat:8> ; <var:n3> := <var:n3> * <var:Z> ; <var:n3> := <var:n3> * <var:Z> ; <var:n3> := <var:n3> * <var:Z> ; <var:y> := <var:n3> ; <var:y> := <var:y> + <var:n2> ; <var:y> := <var:y> + <var:n1> ; <var:y> := <var:y> + <var:n0> \end{verbatim} Given it to be that $ <var:Z> = <var:B> $ before the execution of the series of commands it must be that we have $ <var:y> = <nat:8> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:2> $ once segment of code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:B> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \} \\ <var:n1> := <nat:1> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> \} \\ <var:n1> := <var:n1> * <var:Z> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \} \\ <var:n2> := <nat:5> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:n2> = <nat:5> \} \\ <var:n2> := <var:n2> * <var:Z> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:n2> = <nat:5> * <var:B> \} \\ <var:n2> := <var:n2> * <var:Z> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:n2> = <nat:5> * <var:B> ^ <nat:2> \} \\ <var:n3> := <nat:8> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:n2> = <nat:5> * <var:B> ^ <nat:2> \land <var:n3> = <nat:8> \} \\ <var:n3> := <var:n3> * <var:Z> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:n2> = <nat:5> * <var:B> ^ <nat:2> \land <var:n3> = <nat:8> * <var:B> \} \\ <var:n3> := <var:n3> * <var:Z> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:n2> = <nat:5> * <var:B> ^ <nat:2> \land <var:n3> = <nat:8> * <var:B> ^ <nat:2> \} \\ <var:n3> := <var:n3> * <var:Z> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:n2> = <nat:5> * <var:B> ^ <nat:2> \land <var:n3> = <nat:8> * <var:B> ^ <nat:3> \} \\ <var:y> := <var:n3> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:n2> = <nat:5> * <var:B> ^ <nat:2> \land <var:y> = <nat:8> * <var:B> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:n2> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:n1> = <nat:1> * <var:B> \land <var:y> = <nat:8> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:n1> ; \\ \{ <var:Z> = <var:B> \land <var:n0> = <nat:2> \land <var:y> = <nat:8> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:1> * <var:B> \} \\ <var:y> := <var:y> + <var:n0> \\ \{ <var:Z> = <var:B> \land <var:y> = <nat:8> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> \} \end{eqnarray} Applying standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Z> = <var:B> }} <var:n0> := <nat:2> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:Z> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:Z> ; <var:n2> := <var:n2> * <var:Z> ; <var:n3> := <nat:8> ; <var:n3> := <var:n3> * <var:Z> ; <var:n3> := <var:n3> * <var:Z> ; <var:n3> := <var:n3> * <var:Z> ; <var:y> := <var:n3> ; <var:y> := <var:y> + <var:n2> ; <var:y> := <var:y> + <var:n1> ; <var:y> := <var:y> + <var:n0> {{ <var:y> = <nat:8> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:n2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:n2> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:n2> = <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:n2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:n3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:n2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:n3> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:n2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:n3> = <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:n2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:n3> = <nat:8> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:n2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:y> = <nat:8> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:1> * <var:B> /\ <var:y> = <nat:8> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:n0> = <nat:2> /\ <var:y> = <nat:8> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:y> = <nat:8> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 