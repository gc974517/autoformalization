\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:c0> := <nat:4> ; <var:y> := <var:c0> \end{verbatim} Given $ <var:R> = <var:N> $ before executing our code , it follows that $ <var:y> = <nat:4> $ when set of commands has finished . \end{theorem} \begin{proof} The method of proof for this list of instructions is shown through this decorated list of commands . \begin{eqnarray} \{ <var:R> = <var:N> \} \\ <var:c0> := <nat:4> ; \\ \{ <var:R> = <var:N> \land <var:c0> = <nat:4> \} \\ <var:y> := <var:c0> \\ \{ <var:R> = <var:N> \land <var:y> = <nat:4> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:R> = <var:N> }} <var:c0> := <nat:4> ; <var:y> := <var:c0> {{ <var:y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 