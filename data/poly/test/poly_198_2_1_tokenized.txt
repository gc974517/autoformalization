\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:7> ; <var:S> := <var:g0> \end{verbatim} Allow that we have $ <var:L> = <var:G> $ ahead of running the code segment it must be that we have $ <var:S> = <nat:7> $ once code segment terminates . \end{theorem} \begin{proof} The method of proof for this set of commands is demonstrated by this decorated program . \begin{eqnarray} \{ <var:L> = <var:G> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:L> = <var:G> \land <var:g0> = <nat:7> \} \\ <var:S> := <var:g0> \\ \{ <var:L> = <var:G> \land <var:S> = <nat:7> \} \end{eqnarray} Using typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:L> = <var:G> }} <var:g0> := <nat:7> ; <var:S> := <var:g0> {{ <var:S> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:S> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 