\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:1> ; <var:q> := <nat:1> + <var:q> * <var:D> ; <var:q> := <nat:2> + <var:q> * <var:D> ; <var:q> := <nat:4> + <var:q> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Given given positive integers $ <var:A> $ that we have $ <var:D> = <var:A> $ prior to executing this program it follows that we have $ <var:q> = <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:4> $ once set of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:A> \} \\ <var:q> := <nat:1> ; \\ \{ <var:D> = <var:A> \land <var:q> = <nat:1> \} \\ <var:q> := <nat:1> + <var:q> * <var:D> ; \\ \{ <var:D> = <var:A> \land <var:q> = <nat:1> \cdot <var:A> + <nat:1> \} \\ <var:q> := <nat:2> + <var:q> * <var:D> ; \\ \{ <var:D> = <var:A> \land <var:q> = <nat:1> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:2> \} \\ <var:q> := <nat:4> + <var:q> * <var:D> \\ \{ <var:D> = <var:A> \land <var:q> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:1> ; <var:q> := <nat:1> + <var:q> * <var:D> ; <var:q> := <nat:2> + <var:q> * <var:D> ; <var:q> := <nat:4> + <var:q> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:D> = <var:A> }} <def:poly> {{ <var:q> = <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:q> = <nat:1> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:q> = <nat:1> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:q> = <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 