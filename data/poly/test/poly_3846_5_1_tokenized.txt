\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:U> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:2> ; <var:D> := <var:r1> <var:D> := <var:D> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> in \emph{Imp} . Allow that $ <var:U> = <var:z> $ ahead of evaluating this list of instructions then we have $ <var:D> = <nat:2> \times <var:z> + <nat:1> $ after set of instructions finishes . \end{theorem} \begin{proof} The proof of the program can be accomplished through usual Hoare techniques . Observing the proceeding statement seen in our code segment , the variable assignmet code \verb | <var:r1> := <var:U> ; | . This command transfers the condition $ \{ <var:U> = <var:z> \} $ into the postcondition $ \{ <var:U> = <var:z> \land <var:r1> = <var:z> \} $ . This is sound through the assignment rule obtained from Hoare techniques . Further , we have the assignment statement \verb | <var:r0> := <nat:1> ; | . This advances $ \{ <var:U> = <var:z> \land <var:r1> = <var:z> \} $ as the condition $ \{ <var:U> = <var:z> \land <var:r1> = <var:z> \land <var:r0> = <nat:1> \} $ . Paying attention to the proceeding line of code in our series of commands , we see the variable binding code \verb | <var:r1> := <var:r1> * <nat:2> ; | . This code takes the condition $ \{ <var:U> = <var:z> \land <var:r1> = <var:z> \land <var:r0> = <nat:1> \} $ into the postcondition $ \{ <var:U> = <var:z> \land <var:r1> = <nat:2> * <var:z> \land <var:r0> = <nat:1> \} $ . This is given using the assignment rule given in standard Hoare logic . Moving on to the following bit of code seen in the program , the environment update line \verb | <var:D> := <var:r1> | . This code moves $ \{ <var:U> = <var:z> \land <var:r1> = <nat:2> * <var:z> \land <var:r0> = <nat:1> \} $ into the condition $ \{ <var:U> = <var:z> \land <var:r0> = <nat:1> \land <var:D> = <nat:2> * <var:z> \} $ . This is deduced with the assignment rule obtained from usual Hoare logic . Jumping to the next bit of code contained in our code , we have the assignment line letting $ <var:D> + <var:r0$ as $ <var:D>$ . This command advances the precondition $ \{ <var:U> = <var:z> \land <var:r0> = <nat:1> \land <var:D> = <nat:2> * <var:z> \} $ toward the condition $ \{ <var:U> = <var:z> \land <var:D> = <nat:2> * <var:z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:U> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:2> ; <var:D> := <var:r1> <var:D> := <var:D> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:U> = <var:z> }} <def:poly> {{ <var:D> = <nat:2> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:r1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:r1> = <var:z> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:r1> = <nat:2> * <var:z> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:r0> = <nat:1> /\ <var:D> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:D> = <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 