\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a> := <nat:2> ; <var:a> := <var:a> * <var:U> ; <var:a> := <nat:3> + <var:a> * <var:U> ; <var:a> := <var:a> * <var:U> ; <var:a> := <nat:2> + <var:a> * <var:U> ; <var:a> := <var:a> * <var:U> ; <var:a> := <nat:2> + <var:a> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Assuming it to be that $ <var:U> = <var:R> $ ahead of running this set of commands it must be that we have $ <var:a> = <nat:2> \cdot <var:R> ^ <nat:6> + <nat:3> \cdot <var:R> ^ <nat:4> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:2> $ once set of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:R> \} \\ <var:a> := <nat:2> ; \\ \{ <var:U> = <var:R> \land <var:a> = <nat:2> \} \\ <var:a> := <var:a> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:a> = <nat:2> * <var:R> + \} \\ <var:a> := <nat:3> + <var:a> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:a> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> \} \\ <var:a> := <var:a> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:a> = <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + \} \\ <var:a> := <nat:2> + <var:a> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:a> = <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> \} \\ <var:a> := <var:a> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:a> = <nat:2> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> + \} \\ <var:a> := <nat:2> + <var:a> * <var:U> \\ \{ <var:U> = <var:R> \land <var:a> = <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:2> ; <var:a> := <var:a> * <var:U> ; <var:a> := <nat:3> + <var:a> * <var:U> ; <var:a> := <var:a> * <var:U> ; <var:a> := <nat:2> + <var:a> * <var:U> ; <var:a> := <var:a> * <var:U> ; <var:a> := <nat:2> + <var:a> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:U> = <var:R> }} <def:poly> {{ <var:a> = <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:a> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:a> = <nat:2> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:a> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:a> = <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:a> = <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:a> = <nat:2> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:a> = <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 