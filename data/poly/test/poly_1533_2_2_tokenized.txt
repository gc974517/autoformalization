\begin{document} \begin{theorem} Let the following set of instructions such that \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <nat:2> + <var:U> * <var:n> \end{verbatim} Given that $ <var:n> = <var:a> $ ( for any integers $ <var:a> $ ) prior to the execution of this set of commands , it must be that $ <var:U> = <nat:4> * <var:a> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our code segment is given by Hoare reasoning . Jumping to the following steps found in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:a> \} & <var:U> := <nat:4> & \{ <var:n> = <var:a> \land <var:U> = <nat:4> \} \\ \{ <var:n> = <var:a> \land <var:U> = <nat:4> \} & <var:U> := <nat:2> + <var:U> * <var:n& \{ <var:n> = <var:a> \land <var:U> = <nat:4> \times <var:a> + <nat:2> \} \end{tabular} This is sound using the scheme obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:n> = <var:a> }} <var:U> := <nat:4> ; <var:U> := <nat:2> + <var:U> * <var:n> {{ <var:U> = <nat:4> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:U> = <nat:4> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 