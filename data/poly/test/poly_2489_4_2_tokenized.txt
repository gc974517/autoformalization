\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <nat:2> + <var:W> * <var:e> ; <var:W> := <var:W> * <var:e> ; <var:W> := <nat:2> + <var:W> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:e> = <var:c> $ before evaluating our program it holds that $ <var:W> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:2> $ after series of commands has executed . \end{theorem} \begin{proof} The way to prove correctness for this code segment is accomplished by usual Hoare techniques . Now , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:c> \} & <var:W> := <nat:4> & \{ <var:e> = <var:c> \land <var:W> = <nat:4> \} \\ \{ <var:e> = <var:c> \land <var:W> = <nat:4> \} & <var:W> := <nat:2> + <var:W> * <var:e> & \{ <var:e> = <var:c> \land <var:W> = <nat:4> * <var:c> + <nat:2> \} \end{tabular} This is guaranteed using the environment update scheme of Hoare logic . Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:c> \} & <var:W> := <nat:4> & \{ <var:e> = <var:c> \land <var:W> = <nat:4> \} \\ \{ <var:e> = <var:c> \land <var:W> = <nat:4> \} & <var:W> := <nat:2> + <var:W> * <var:e> & \{ <var:e> = <var:c> \land <var:W> = <nat:4> * <var:c> + <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:4> ; <var:W> := <nat:2> + <var:W> * <var:e> ; <var:W> := <var:W> * <var:e> ; <var:W> := <nat:2> + <var:W> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:e> = <var:c> }} <def:poly> {{ <var:W> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:W> = <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:W> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:W> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 