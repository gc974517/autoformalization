\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:7> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:z> ; <var:n> := <var:F1> ; <var:n> := <var:n> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Allowing that we have $ <var:z> = <var:u> $ before evaluating this program , then we see $ <var:n> = <nat:5> \cdot <var:u> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:u> \} \\ <var:F0> := <nat:7> ; \\ \{ <var:z> = <var:u> \land <var:F0> = <nat:7> \} \\ <var:F1> := <nat:5> ; \\ \{ <var:z> = <var:u> \land <var:F0> = <nat:7> \land <var:F1> = <nat:5> \} \\ <var:F1> := <var:F1> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:F0> = <nat:7> \land <var:F1> = <nat:5> \cdot <var:u> \} \\ <var:n> := <var:F1> ; \\ \{ <var:z> = <var:u> \land <var:F0> = <nat:7> \land <var:n> = <nat:5> \cdot <var:u> \} \\ <var:n> := <var:n> + <var:F0> \\ \{ <var:z> = <var:u> \land <var:n> = <nat:5> \cdot <var:u> + <nat:7> \} \end{eqnarray} Using usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:7> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:z> ; <var:n> := <var:F1> ; <var:n> := <var:n> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:z> = <var:u> }} <def:poly> {{ <var:n> = <nat:5> * <var:u> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:F0> = <nat:7> /\ <var:F1> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:F0> = <nat:7> /\ <var:n> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:n> = <nat:5> * <var:u> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 